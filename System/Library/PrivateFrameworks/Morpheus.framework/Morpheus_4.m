void sub_256E9C43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<mlx::core::array>::pop_front(int64x2_t *a1)
{
  mlx::core::array::~array((mlx::core::array *)(*(void *)(a1->i64[1]
                                                          + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * a1[2].i64[0]));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_25706AE40);
  return std::deque<mlx::core::array>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<mlx::core::array>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

void *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_270632800;
  mlx::core::array::~array((mlx::core::array *)(a1 + 1));
  return a1;
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_270632800;
  mlx::core::array::~array((mlx::core::array *)(a1 + 1));
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::__clone(void *a1)
{
  result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_270632800;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  *(void *)((char *)result + 29) = *(void *)((char *)a1 + 29);
  return result;
}

void *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_270632800;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[3];
  *(void *)((char *)a2 + 29) = *(void *)((char *)result + 29);
  a2[3] = v4;
  return result;
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  mlx::core::array::~array((mlx::core::array *)(a1 + 8));
  operator delete((void *)a1);
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::operator()(void *a1)
{
  v1 = a1;
  uint64_t v3 = (mlx::core::array *)(a1 + 1);
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(v2 + 176);
  uint64_t v5 = *(void *)(v2 + 184);
  while (v4 != v5)
  {
    if (*(void *)(*(void *)v4 + 104))
    {
      a1 = (void *)mlx::core::Event::stream(*(void *)v4 + 88);
      if (*(_DWORD *)a1 != *(_DWORD *)(*(void *)(*(void *)v3 + 64) + 8)) {
        mlx::core::Event::wait((mlx::core::Event *)(*(void *)v4 + 88));
      }
    }
    v4 += 16;
  }
  v6 = mlx::core::scheduler::scheduler((mlx::core::scheduler *)a1);
  mlx::core::scheduler::Scheduler::notify_new_task((uint64_t)v6);
  mlx::core::array::outputs(v3, (uint64_t)v9);
  (***(void (****)(void))(v1[1] + 64))();
  BOOL is_tracer = mlx::core::array::is_tracer(v3);
  if (!is_tracer) {
    mlx::core::array::detach(v3);
  }
  if (*((unsigned char *)v1 + 36)) {
    mlx::core::Event::signal((mlx::core::Event *)(*(void *)v3 + 88));
  }
  unint64_t v8 = mlx::core::scheduler::scheduler((mlx::core::scheduler *)is_tracer);
  mlx::core::scheduler::Scheduler::notify_task_completion((uint64_t)v8);
  v10 = (void **)v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_256E9C944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t mlx::core::Event::stream(uint64_t this)
{
  if (!*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[Event::stream] Cannot access stream on invalid event.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_256E9CA04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::scheduler::Scheduler::notify_new_task(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  ++*(_DWORD *)a1;
  std::mutex::unlock(v2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 72));
}

void mlx::core::scheduler::Scheduler::notify_task_completion(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  --*(_DWORD *)a1;
  std::mutex::unlock(v2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 72));
}

void *std::__function::__value_func<void ()(mlx::core::array &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::~__func()
{
}

__n128 std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_270632880;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270632880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v25 = *a2;
  uint64_t result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v4, &v25, &v25);
  if (v6)
  {
    unint64_t v7 = *a2;
    *(unsigned char *)(v7 + 128) = 0;
    unint64_t v8 = *(unint64_t **)(v7 + 200);
    v9 = *(unint64_t **)(v7 + 208);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *v8;
        v8 += 2;
        *(unsigned char *)(v10 + 128) = 0;
        uint64_t v11 = *(void *)(a1 + 8);
        unint64_t v25 = v10;
        uint64_t result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v11, &v25, &v25);
      }
      while (v8 != v9);
      unint64_t v7 = *a2;
    }
    uint64_t v12 = *(void *)(v7 + 176);
    uint64_t v13 = *(void *)(v7 + 184);
    if (v12 != v13)
    {
      do
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v12);
        v12 += 16;
      }
      while (v12 != v13);
      unint64_t v7 = *a2;
    }
    v15 = *(void **)(v7 + 64);
    if (v15)
    {
      if (result) {
        return result;
      }
      unint64_t v7 = *a2;
    }
    v16 = *(unint64_t **)(v7 + 176);
    v17 = *(unint64_t **)(v7 + 184);
    while (v16 != v17)
    {
      v18 = *(void **)(a1 + 24);
      unint64_t v25 = *v16;
      uint64_t result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v18, &v25);
      if (result)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
        uint64_t v19 = *(void *)(a1 + 24);
        unint64_t v25 = *a2;
        uint64_t result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v19, &v25, &v25);
        unint64_t v20 = *a2;
        v21 = *(unint64_t **)(*a2 + 200);
        v22 = *(unint64_t **)(v20 + 208);
        while (v21 != v22)
        {
          uint64_t v23 = *(void *)(a1 + 24);
          unint64_t v24 = *v21;
          v21 += 2;
          unint64_t v25 = v24;
          uint64_t result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v23, &v25, &v25);
        }
        return result;
      }
      v16 += 2;
    }
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target_type()
{
}

void *std::__function::__value_func<void ()(mlx::core::array &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_256E9D020(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      mlx::core::array::~array((mlx::core::array *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = (char *)operator new(0x28uLL);
  v23[0] = (uint64_t)v13;
  v23[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *unint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  unint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](v23, 0);
  return v10;
}

void sub_256E9D2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      mlx::core::array::~array((mlx::core::array *)(v2 + 24));
    }
    operator delete((void *)v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::allocator<std::pair<unsigned long const,mlx::core::array>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    mlx::core::array::~array((mlx::core::array *)(v2 + 24));
    operator delete((void *)v2);
    *a1 = 0;
  }
  return a1;
}

void *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632910;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632910;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270632910;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256E9D5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632910;
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 48))(v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = operator new(0x10uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *unint64_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a2[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256E9D730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::~__func()
{
}

__n128 std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_2706329A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2706329A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  v25[0] = *a2;
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v4, v25, v25);
  if (v5)
  {
    unint64_t v6 = *a2;
    *(unsigned char *)(v6 + 128) = 0;
    unint64_t v7 = *(unint64_t **)(v6 + 200);
    unint64_t v8 = *(unint64_t **)(v6 + 208);
    if (v7 != v8)
    {
      do
      {
        unint64_t v9 = *v7;
        v7 += 2;
        *(unsigned char *)(v9 + 128) = 0;
        uint64_t v10 = *(void *)(a1 + 8);
        v25[0] = v9;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v10, v25, v25);
      }
      while (v7 != v8);
      unint64_t v6 = *a2;
    }
    unint64_t v11 = *(unint64_t **)(v6 + 176);
    uint64_t v12 = *(unint64_t **)(v6 + 184);
    if (v11 != v12)
    {
      do
      {
        v25[0] = *v11;
        unint64_t v13 = v11[1];
        v25[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unint64_t *))(*(void *)v14 + 48))(v14, v25);
        mlx::core::array::~array((mlx::core::array *)v25);
        v11 += 2;
      }
      while (v11 != v12);
      unint64_t v6 = *a2;
    }
    float v15 = *(void **)(v6 + 64);
    if (v15)
    {
      {
        return;
      }
      unint64_t v6 = *a2;
    }
    BOOL v16 = *(unint64_t **)(v6 + 176);
    unint64_t v17 = *(unint64_t **)(v6 + 184);
    while (v16 != v17)
    {
      unint64_t v18 = *(void **)(a1 + 24);
      v25[0] = *v16;
      if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v18, v25))
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
        uint64_t v19 = *(void *)(a1 + 24);
        v25[0] = *a2;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v19, v25, v25);
        unint64_t v20 = *a2;
        unint64_t v21 = *(unint64_t **)(*a2 + 200);
        v22 = *(unint64_t **)(v20 + 208);
        while (v21 != v22)
        {
          uint64_t v23 = *(void *)(a1 + 24);
          unint64_t v24 = *v21;
          v21 += 2;
          v25[0] = v24;
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v23, v25, v25);
        }
        return;
      }
      v16 += 2;
    }
  }
}

void sub_256E9DA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target_type()
{
}

void *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632A20;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632A20;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270632A20;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256E9DB64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632A20;
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 48))(v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x10uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *uint64_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a2[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256E9DCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632AA0;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632AA0;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_270632AA0;
  std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256E9DE50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632AA0;
  return std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::~$_0((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::~$_0(a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  v33 = 0;
  uint64_t v34 = 0;
  v32 = (uint64_t *)&v33;
  unint64_t v6 = *(unsigned int **)(a1 + 40);
  unint64_t v7 = *(unsigned int **)(a1 + 48);
  if (v6 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 40);
  }
  else
  {
    do
    {
      uint64_t v8 = *v6;
      if ((v8 & 0x80000000) != 0) {
        v8 += (uint64_t)(a2[1] - *a2) >> 4;
      }
      LODWORD(v29) = v8;
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v32, (int *)&v29, &v29);
      ++v6;
    }
    while (v6 != v7);
    uint64_t v9 = v34;
    unint64_t v6 = *(unsigned int **)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
  }
  if (v9 != (v10 - (uint64_t)v6) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[grad] Repeat argument number not allowed in grad.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  unint64_t v11 = v32;
  if ((*((_DWORD *)v32 + 7) & 0x80000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v12 = v33;
  if (v33)
  {
    do
    {
      unint64_t v13 = v12;
      uint64_t v12 = (void *)v12[1];
    }
    while (v12);
  }
  else
  {
    uint64_t v14 = &v33;
    do
    {
      unint64_t v13 = v14[2];
      BOOL v15 = *v13 == (void)v14;
      uint64_t v14 = (void **)v13;
    }
    while (v15);
  }
  if (*((int *)v13 + 7) >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 4))
  {
LABEL_25:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[grad] Invalid argument number for function with ", 49);
    v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" inputs.", 8);
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v30, &v38);
    std::logic_error::logic_error(v23, &v38);
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v23, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(v28, 0, sizeof(v28));
  if (v32 != (uint64_t *)&v33)
  {
    do
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100](v28, (void *)(*a2 + 16 * *((int *)v11 + 7)));
      BOOL v16 = (uint64_t *)v11[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (uint64_t *)v11[2];
          BOOL v15 = *v17 == (void)v11;
          unint64_t v11 = v17;
        }
        while (!v15);
      }
      unint64_t v11 = v17;
    }
    while (v17 != (uint64_t *)&v33);
  }
  unint64_t v18 = operator new(0x20uLL);
  void *v18 = &unk_270632B20;
  v18[1] = a1 + 8;
  v18[2] = a2;
  v18[3] = &v32;
  v39 = v18;
  uint64_t v19 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
  mlx::core::array::array<float>(v37, v19, 1.0);
  unint64_t v25 = 0;
  v26 = 0;
  v27 = 0;
  v35 = (void **)&v25;
  char v36 = 0;
  unint64_t v20 = operator new(0x10uLL);
  unint64_t v25 = v20;
  v26 = (char *)v20;
  v27 = (char *)(v20 + 2);
  unint64_t v21 = v37[1];
  *unint64_t v20 = v37[0];
  v20[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v21 + 1, 1uLL, memory_order_relaxed);
  }
  v26 = (char *)(v20 + 2);
  mlx::core::vjp((mlx::core *)&v38, (uint64_t)v28, &v25, (uint64_t)&v29);
  v35 = (void **)&v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
  mlx::core::array::~array((mlx::core::array *)v37);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](&v38);
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<mlx::core::array>&,0>(a3, &v29, v31);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v29 = v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  std::__tree<int>::destroy((uint64_t)&v32, v33);
}

void sub_256E9E280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v36 - 81) < 0)
  {
    operator delete(*(void **)(v35 + 56));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a17 = MEMORY[0x263F8C318] + 16;
      if (a30 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x25A2B1740](&a33);
      std::__tree<int>::destroy(v36 - 160, *(void **)(v35 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  return a1;
}

void sub_256E9E4CC(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t **a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
}

__n128 std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_270632B20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270632B20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(void ***)(a1 + 16);
  memset(v29, 0, sizeof(v29));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v29, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    int v9 = **(void ***)(a1 + 24);
    do
    {
      mlx::core::array::operator=((void *)(v29[0] + 16 * *((int *)v9 + 7)), (uint64_t *)(v7 + 16 * v8));
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          int v9 = v11;
        }
        while (!v12);
      }
      ++v8;
      uint64_t v7 = *a2;
      int v9 = v11;
    }
    while (v8 < (a2[1] - *a2) >> 4);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v14 = (mlx::core *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v29);
  uint64_t v15 = *a3;
  if ((unint64_t)(a3[1] - *a3) >= 0x11)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 1;
    do
    {
      unint64_t v18 = (void *)(v15 + v16 + 16);
      uint64_t v19 = *(void *)(*v18 + 64);
      if (v19)
      {
        unint64_t v20 = *(mlx::core **)(v19 + 8);
        uint64_t v21 = *(unsigned int *)(v19 + 16);
      }
      else
      {
        v22 = (mlx::core::metal *)mlx::core::default_device(v14);
        unint64_t v20 = (mlx::core *)mlx::core::default_stream(v22);
        uint64_t v21 = v23;
      }
      mlx::core::stop_gradient(v18, v20, v21 | 0x100000000, &v28);
      uint64_t v24 = *a3;
      uint64_t v25 = *a3 + v16;
      long long v26 = v28;
      long long v28 = 0uLL;
      v27 = *(std::__shared_weak_count **)(v25 + 24);
      *(_OWORD *)(v24 + 16 * v17) = v26;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      mlx::core::array::~array((mlx::core::array *)&v28);
      ++v17;
      uint64_t v15 = *a3;
      v16 += 16;
    }
    while (v17 < (a3[1] - *a3) >> 4);
  }
  *(void *)&long long v28 = v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_256E9E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__tree<int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::pair<mlx::core::array,int>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = (char *)operator new(0x30uLL);
  v23[0] = (uint64_t)v13;
  v23[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_DWORD *)v13 + 10) = *(_DWORD *)(a3 + 24);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *unint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](v23, 0);
  return v10;
}

void sub_256E9ED10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(mlx::core::array const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::~__func()
{
}

__n128 std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_270632BB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270632BB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v24 = *a2;
  if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(*(void **)(a1 + 8), &v24))
  {
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(*(void *)(a1 + 8), &v24, &v24);
    unint64_t v4 = *a2;
    uint64_t v5 = *(unint64_t **)(*a2 + 200);
    unint64_t v6 = *(unint64_t **)(*a2 + 208);
    if (v5 != v6)
    {
      do
      {
        uint64_t v7 = *(void *)(a1 + 8);
        unint64_t v8 = *v5;
        v5 += 2;
        v23[0] = v8;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v7, v23, v23);
      }
      while (v5 != v6);
      unint64_t v4 = *a2;
    }
    uint64_t v9 = *(void *)(v4 + 176);
    uint64_t v10 = *(void *)(v4 + 184);
    if (v9 != v10)
    {
      do
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 24);
        if (!v11) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v9);
        v9 += 16;
      }
      while (v9 != v10);
      uint64_t v12 = *(unint64_t **)(*a2 + 176);
      uint64_t v13 = *(unint64_t **)(*a2 + 184);
      while (v12 != v13)
      {
        float v14 = *(void **)(a1 + 24);
        v23[0] = *v12;
        if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v14, v23))
        {
          std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) - 16) + 128) = 0;
          uint64_t v15 = *(void *)(a1 + 24);
          v23[0] = *a2;
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v15, v23, v23);
          unint64_t v16 = *a2;
          unint64_t v17 = *(unint64_t **)(*a2 + 200);
          for (i = *(unint64_t **)(v16 + 208); v17 != i; v17 += 2)
          {
            unint64_t v19 = *v17;
            v23[0] = *v17;
            unint64_t v20 = v17[1];
            v23[1] = v20;
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v21 = *(void *)(a1 + 24);
            unint64_t v22 = v19;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v21, &v22, &v22);
            *(unsigned char *)(v23[0] + 128) = 0;
            mlx::core::array::~array((mlx::core::array *)v23);
          }
          return;
        }
        v12 += 2;
      }
    }
  }
}

void sub_256E9EFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(mlx::core::array const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_256E9F2B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632C40;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632C40;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = &unk_270632C40;
  std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_256E9F408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632C40;
  return std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(a2 + 1, a1 + 8);
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1::~$_1((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1::~$_1(a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(std::vector<int> *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  p_end_cap = &this[1].__end_cap_;
  p_end = &this->__end_;
  if (this[2].__begin_ == this[1].__end_cap_.__value_)
  {
    std::vector<int>::size_type v8 = (a2[1] - *a2) >> 4;
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::resize((std::vector<int> *)((char *)this + 40), v8, (std::vector<int>::const_reference)&__x);
  }
  mlx::core::detail::vmap_trace((uint64_t)p_end, a2, p_end_cap, &__x);
  value = this[2].__end_cap_.__value_;
  std::vector<int>::pointer begin = this[3].__begin_;
  uint64_t v11 = (std::vector<int> *)((char *)this + 64);
  if (begin == value)
  {
    v14[0] = 0;
    std::vector<int>::resize(v11, (v13[1] - v13[0]) >> 4, v14);
  }
  mlx::core::detail::vmap_replace(a2, (uint64_t *)&__x, v13, (uint64_t *)p_end_cap, v11, a3);
  *(void *)float v14 = v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  *(void *)float v14 = &__x;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
}

void sub_256E9F57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void *std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 4, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 7, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  return a1;
}

void sub_256E9F664(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      unint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v18 = (int *)&v15[4 * v12];
    unint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--unint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632CC0;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632CC0;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 3);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_270632CC0;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 3), a1 + 24);
  return v2;
}

void sub_256E9F988(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270632CC0;
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__value_func[abi:ne180100](a2 + 24, a1 + 24);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 3);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 48))(v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = operator new(0x10uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *unint64_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a2[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256E9FAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__func(void *a1)
{
  *a1 = &unk_270632D40;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__func(void *a1)
{
  *a1 = &unk_270632D40;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270632D40;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256E9FC60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632D40;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v21[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a3[1];
  v21[2] = *a3;
  v21[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = 0;
  std::vector<int>::size_type v16 = 0;
  unint64_t v17 = 0;
  unint64_t v19 = &v15;
  char v20 = 0;
  std::vector<int>::size_type v8 = (char *)operator new(0x20uLL);
  uint64_t v9 = 0;
  uint64_t v15 = v8;
  std::vector<int>::size_type v16 = v8;
  unint64_t v17 = v8 + 32;
  do
  {
    uint64_t v10 = &v8[v9 * 8];
    uint64_t v11 = v21[v9 + 1];
    *(void *)uint64_t v10 = v21[v9];
    *((void *)v10 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    v9 += 2;
  }
  while (v9 != 4);
  std::vector<int>::size_type v16 = v8 + 32;
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v12 + 48))(v18);
  uint64_t v13 = *(void *)(v18[0] + 8);
  *a4 = *(void *)v18[0];
  a4[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = (char **)v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  unint64_t v19 = &v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v21[i]);
}

void sub_256E9FE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a18 + i));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::target_type()
{
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632DD0;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632DD0;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_270632DD0;
  v2[1] = v3;
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_256E9FFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632DD0;
  a2[1] = *(void *)(a1 + 8);
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<mlx::core::array ()(mlx::core::array const&)>::~__value_func[abi:ne180100](a1 + 2);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 48))(v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = operator new(0x10uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *unint64_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a2[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256EA0158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::~__func(void *a1)
{
  *a1 = &unk_270632E50;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::~__func(void *a1)
{
  *a1 = &unk_270632E50;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270632E50;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256EA02C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632E50;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  v16[0] = *a2;
  v16[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v14 = (void **)&v10;
  char v15 = 0;
  uint64_t v7 = operator new(0x10uLL);
  uint64_t v10 = v7;
  uint64_t v12 = v7 + 2;
  *uint64_t v7 = v6;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v7 + 2;
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v8 + 48))(v13);
  uint64_t v9 = *(void *)(v13[0] + 8);
  *a3 = *(void *)v13[0];
  a3[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (void **)v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v14 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_256EA0480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)(v8 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::target_type()
{
}

void *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632EE0;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632EE0;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  *uint64_t v2 = &unk_270632EE0;
  std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256EA068C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632EE0;
  return std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t **__return_ptr))(*(void *)v4 + 48))(&v49);
  uint64_t v9 = v49;
  uint64_t v8 = v50;
  while (v9 != v8)
  {
    mlx::core::stop_gradient(v9, v7, 0, &v47);
    long long v10 = v47;
    long long v47 = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    *(_OWORD *)uint64_t v9 = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    mlx::core::array::~array((mlx::core::array *)&v47);
    v9 += 2;
  }
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v47, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v12 = (mlx::core *)std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>((uint64_t *)&v47, *((void **)&v47 + 1), v49, v50, ((char *)v50 - (char *)v49) >> 4);
  uint64_t v13 = v49;
  uint64_t v14 = *(void *)(*v49 + 64);
  if (v14)
  {
    char v15 = *(mlx::core **)(v14 + 8);
    unsigned int v16 = *(_DWORD *)(v14 + 16);
  }
  else
  {
    unint64_t v17 = (mlx::core::metal *)mlx::core::default_device(v12);
    char v15 = (mlx::core *)mlx::core::default_stream(v17);
    unsigned int v16 = v18;
    uint64_t v13 = v49;
  }
  unint64_t v46 = 0;
  long long v19 = 0uLL;
  long long v45 = 0u;
  v44 = 0;
  *(_OWORD *)__p = 0u;
  char v20 = v50;
  if (v13 == v50)
  {
    unint64_t v35 = 0;
  }
  else
  {
    do
    {
      uint64_t v21 = *v13;
      unint64_t v22 = (void *)*((void *)&v45 + 1);
      if (*((void *)&v45 + 1) >= v46)
      {
        uint64_t v23 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>((uint64_t *)&v45, v21);
      }
      else
      {
        **((void **)&v45 + 1) = 0;
        v22[1] = 0;
        v22[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v22, *(const void **)v21, *(void *)(v21 + 8), (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 2);
        uint64_t v23 = (uint64_t)(v22 + 3);
      }
      *((void *)&v45 + 1) = v23;
      uint64_t v24 = *(void *)(*v13 + 56);
      int v25 = (char *)__p[1];
      if (__p[1] >= v44)
      {
        int64_t v27 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = (v44 - (char *)__p[0]) >> 2;
        if (v28 <= v27 + 1) {
          unint64_t v28 = v27 + 1;
        }
        if ((unint64_t)(v44 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v44, v29);
        }
        else {
          uint64_t v30 = 0;
        }
        v31 = &v30[8 * v27];
        *(void *)v31 = v24;
        long long v26 = v31 + 8;
        v33 = (char *)__p[0];
        v32 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v34 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v31 - 1) = v34;
            v31 -= 8;
          }
          while (v32 != v33);
          v32 = (char *)__p[0];
        }
        __p[0] = v31;
        __p[1] = v26;
        v44 = &v30[8 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *(void *)__p[1] = v24;
        long long v26 = v25 + 8;
      }
      __p[1] = v26;
      v13 += 2;
    }
    while (v13 != v20);
    long long v19 = v45;
    unint64_t v35 = v46;
  }
  long long v41 = v19;
  unint64_t v42 = v35;
  unint64_t v46 = 0;
  long long v45 = 0uLL;
  v37 = mlx::core::to_stream(v15, v16 | 0x100000000);
  int v38 = v36;
  std::allocate_shared[abi:ne180100]<mlx::core::CustomVJP,std::allocator<mlx::core::CustomVJP>,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,void>((uint64_t *)&v37, a1 + 40, &v39);
  long long v40 = v39;
  long long v39 = 0uLL;
  mlx::core::array::make_arrays((uint64_t *)&v41, __p, &v40, (void **)&v47, a3);
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  *(void *)&long long v40 = &v41;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v45;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)&long long v45 = &v47;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v47 = &v49;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_256EA0A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  a23 = &a27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a27 = v27 - 120;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](v4 + 32, a2 + 32);
  return a1;
}

void sub_256EA0BC4(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
    uint64_t v16 = v10 - v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    v30[4] = v9;
    if (v17) {
      unsigned int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v9, v17);
    }
    else {
      unsigned int v18 = 0;
    }
    int v25 = (uint64_t *)&v18[16 * v15];
    v30[0] = v18;
    v30[1] = v25;
    v30[3] = &v18[16 * v17];
    long long v26 = &v25[2 * a5];
    do
    {
      *int v25 = *a3;
      uint64_t v27 = a3[1];
      v25[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v25 += 2;
      a3 += 2;
    }
    while (v25 != v26);
    v30[2] = v26;
    uint64_t v5 = (void *)std::vector<mlx::core::array>::__swap_out_circular_buffer(a1, v30, v5);
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)v30);
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)a2) >> 4;
  if (v19 >= a5)
  {
    char v20 = &a3[2 * a5];
LABEL_27:
    std::vector<mlx::core::array>::__move_range((uint64_t)a1, a2, v12, (uint64_t)&a2[2 * a5]);
    if (v20 != a3)
    {
      unint64_t v28 = v5;
      do
      {
        mlx::core::array::operator=(v28, a3);
        a3 += 2;
        v28 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  char v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    uint64_t v21 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    uint64_t v21 = *(uint64_t **)(v9 - 8);
    unint64_t v22 = v20;
    uint64_t v23 = v21;
    do
    {
      *uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      v23[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v21 += 2;
      v22 += 2;
      v23 += 2;
    }
    while (v22 != a4);
  }
  a1[1] = (uint64_t)v21;
  if ((uint64_t)(v12 - (void)a2) >= 1) {
    goto LABEL_27;
  }
  return v5;
}

void sub_256EA0E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_256EA0F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<mlx::core::CustomVJP,std::allocator<mlx::core::CustomVJP>,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::CustomVJP>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,std::allocator<mlx::core::CustomVJP>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_256EA1114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::CustomVJP>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,std::allocator<mlx::core::CustomVJP>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270632F50;
  std::construct_at[abi:ne180100]<mlx::core::CustomVJP,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,mlx::core::CustomVJP*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_256EA1170(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::CustomVJP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270632F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::CustomVJP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270632F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::CustomVJP>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::CustomVJP,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,mlx::core::CustomVJP*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  *(_DWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_270635AB8;
  *(void *)(a1 + 8) = v4;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1 + 24, (uint64_t)v7);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632FB0;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270632FB0;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x25A2B1780);
}

void *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270632FB0;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_256EA13C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270632FB0;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = (mlx::core *)(a1 + 8);
  mlx::core::depends(a2, a4, (uint64_t *)v8);
  mlx::core::vjp(v7, (uint64_t)v8, a3, (uint64_t)v9);
  char v12 = v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a5, v10, v11, (v11 - v10) >> 4);
  v8[0] = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v8);
  v8[0] = (void **)v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_256EA1500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::target_type()
{
}

void mlx::core::svd_impl(char ***this, int ***a2, int ***a3, int ***a4, mlx::core::array *a5)
{
  v62[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *this;
  uint64_t v7 = *v6;
  uint64_t v8 = (uint64_t)v6[1];
  uint64_t v9 = v8 - (void)*v6;
  if ((unint64_t)v9 <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v10 = v9 >> 2;
  uint64_t v11 = &v7[v9];
  int v12 = *((_DWORD *)v11 - 2);
  int v53 = v12;
  int v13 = *((_DWORD *)v11 - 1);
  int v52 = v13;
  if (v13 >= v12) {
    int v14 = v12;
  }
  else {
    int v14 = v13;
  }
  int v33 = v14;
  int v51 = v13;
  int v50 = v13;
  int v49 = v12;
  unint64_t v15 = (unint64_t)v6[6];
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v7, v8, v10);
  uint64_t v45 = 0;
  long long v46 = 0uLL;
  long long v44 = 0uLL;
  mlx::core::array::array(v48, (long long *)__p, 0x400000006, &v46, &v44);
  v39[0] = (void **)&v44;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v39);
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (((_BYTE)(*this)[21] & 2) != 0) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  mlx::core::copy((mlx::core::array *)this, v48, v17, v16);
  unsigned int v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (void)(*a2)[6]));
  v62[0] = &unk_27062AEC8;
  v62[1] = mlx::core::allocator::free;
  v62[3] = v62;
  mlx::core::array::set_data(a2, (uint64_t)v18, (uint64_t)v62);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v62);
  uint64_t v19 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]));
  v61[0] = &unk_27062AEC8;
  v61[1] = mlx::core::allocator::free;
  v61[3] = v61;
  mlx::core::array::set_data(a3, (uint64_t)v19, (uint64_t)v61);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v61);
  char v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a4 + 60) * (void)(*a4)[6]));
  v60[0] = &unk_27062AEC8;
  v60[1] = mlx::core::allocator::free;
  v60[3] = v60;
  mlx::core::array::set_data(a4, (uint64_t)v20, (uint64_t)v60);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v60);
  uint64_t v43 = 0;
  uint64_t v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(48 * v33));
  v57[0] = &unk_27062AEC8;
  v57[1] = mlx::core::allocator::free;
  v57[3] = v57;
  v58 = v21;
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)&v59, (uint64_t)v57);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v57);
  int v42 = 0;
  mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v58);
  sgesvdx_NEWLAPACK();
  if (v42)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"svd_impl: sgesvdx_ workspace calculation failed with code ", 58);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v41, &v55);
    MEMORY[0x25A2B1480](exception, &v55);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v38 = (int)*(float *)&v43;
  unint64_t v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)*(float *)&v43));
  v54[0] = &unk_27062AEC8;
  v54[1] = mlx::core::allocator::free;
  v54[3] = v54;
  v55 = v22;
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)&v56, (uint64_t)v54);
  unint64_t v23 = v13 * v12;
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v54);
  if (v15 >= v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v15 / v23 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v15 / v23;
    }
    uint64_t v32 = v26;
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v55);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v58);
      sgesvdx_NEWLAPACK();
      if (v42)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"svd_impl: sgesvdx_ failed with code ", 36);
        std::ostream::operator<<();
        uint64_t v30 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v41, v37);
        MEMORY[0x25A2B1480](v30, v37);
        __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (HIDWORD(v43) != v33)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"svd_impl: expected ", 19);
        uint64_t v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" singular values, but ", 22);
        unint64_t v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" were computed.", 15);
        unint64_t v29 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v41, v37);
        MEMORY[0x25A2B1480](v29, v37);
        __cxa_throw(v29, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      ++v25;
      v24 += 4 * v33;
    }
    while (v32 != v25);
  }
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v55);
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v58);
  mlx::core::array::~array((mlx::core::array *)v48);
}

void sub_256EA1C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
      mlx::core::array::Data::~Data((mlx::core::array::Data *)(v35 - 232));
      mlx::core::array::~array((mlx::core::array *)&STACK[0x228]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::SVD::eval(uint64_t a1, char ****a2, int ****a3, uint64_t a4, mlx::core::array *a5)
{
  int v5 = *a2;
  if (*((_DWORD *)**a2 + 14) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[SVD::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = *a3 + 2;
  mlx::core::svd_impl(v5, v6, v7, v6 + 4, a5);
}

void sub_256EA1E24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::anonymous namespace'::copy_inplace_dispatch<>(uint64_t result, uint64_t **a2, int a3, float a4)
{
  switch(*(_DWORD *)(*(void *)result + 56))
  {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
    case 3:
      break;
    case 4:
      break;
    case 5:
      break;
    case 6:
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::copy(mlx::core::array *a1, int ***this, int a3, float a4)
{
  v22[4] = *MEMORY[0x263EF8340];
  if ((a3 - 2) < 2 || a3 == 0)
  {
    uint64_t v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*this + 60)
                                                                     * (void)(*this)[6]));
    v21[0] = &unk_27062AEC8;
    v21[1] = mlx::core::allocator::free;
    v21[3] = v21;
    mlx::core::array::set_data(this, (uint64_t)v8, (uint64_t)v21);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v21);
    goto LABEL_17;
  }
  if (a3 == 1)
  {
    uint64_t v9 = *((void *)a1 + 1);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v11 = *(void **)a1;
      if (!v10)
      {
        uint64_t v12 = v11[18];
        if (v12)
        {
          if (!*(void *)(v12 + 8) && (((unint64_t)(*this)[7] ^ v11[7]) & 0xFF00000000) == 0)
          {
            mlx::core::array::copy_shared_buffer((mlx::core::array *)this, a1);
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      uint64_t v11 = *(void **)a1;
    }
    uint64_t v13 = v11[20];
    int v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*this + 60) * v13));
    uint64_t v15 = *(void *)a1;
    uint64_t v20 = 0;
    __n128 __p = 0uLL;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v15 + 24), *(void *)(v15 + 32), (uint64_t)(*(void *)(v15 + 32) - *(void *)(v15 + 24)) >> 3);
    char v16 = *(unsigned char *)(*(void *)a1 + 168);
    v22[0] = &unk_27062AEC8;
    v22[1] = mlx::core::allocator::free;
    v22[3] = v22;
    mlx::core::array::set_data((uint64_t *)this, (uint64_t)v14, v13, &__p, v16, (uint64_t)v22);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v22);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
LABEL_17:
  if (a3 == 3) {
    int v17 = 2;
  }
  else {
    int v17 = a3;
  }
}

void sub_256EA209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::copy_inplace<long long>(uint64_t result, uint64_t **a2, int **a3, uint64_t **a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, float a9)
{
  uint64_t v9 = a7;
  uint64_t v10 = a6;
  if (a8 < 2)
  {
  }
  else if (a8 - 2 <= 1)
  {
    switch(*(_DWORD *)(*(void *)result + 56))
    {
      case 0:
        break;
      case 1:
        break;
      case 2:
        break;
      case 3:
        break;
      case 4:
        break;
      case 5:
        break;
      case 6:
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<BOOL>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            uint64_t v7 = (void *)v3[19];
            int v8 = **(unsigned __int8 **)(*(void *)v5 + 152);
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          goto LABEL_39;
        case 2:
          uint64_t v30 = *(unsigned int ***)result;
          v31 = **(int ***)result;
          uint64_t v32 = *(void *)(*(void *)result + 8) - (void)v31;
          switch(v32 >> 2)
          {
            case 1:
              uint64_t v33 = *v31;
              if ((int)v33 >= 1)
              {
                int v34 = v30[19];
                uint64_t v35 = (unsigned char *)v3[19];
                uint64_t v36 = *(void *)v30[3];
                do
                {
                  *v35++ = *(unsigned char *)v34;
                  int v34 = (unsigned int *)((char *)v34 + v36);
                  --v33;
                }
                while (v33);
              }
              break;
            case 2:
              int v189 = *v31;
              if (*v31 >= 1)
              {
                int v190 = 0;
                uint64_t v191 = 0;
                uint64_t v192 = 0;
                v193 = v30[19];
                uint64_t v194 = v3[19];
                uint64_t v195 = v31[1];
                v196 = v30[3];
                uint64_t v198 = *(void *)v196;
                uint64_t v197 = *((void *)v196 + 1);
                uint64_t v199 = v198 - v197 * v195;
                do
                {
                  int v200 = v195;
                  if ((int)v195 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((unsigned __int8 *)v193 + v192);
                      *(unsigned char *)(v194 + v191++) = result;
                      v192 += v197;
                      --v200;
                    }
                    while (v200);
                  }
                  v192 += v199;
                  ++v190;
                }
                while (v190 != v189);
              }
              break;
            case 3:
              int v201 = *v31;
              if (*v31 >= 1)
              {
                int v202 = 0;
                uint64_t result = 0;
                uint64_t v203 = 0;
                v204 = v30[19];
                uint64_t v205 = v3[19];
                uint64_t v206 = v31[1];
                v207 = v30[3];
                uint64_t v208 = *((void *)v207 + 1);
                uint64_t v209 = *(void *)v207 - v208 * v206;
                do
                {
                  if ((int)v206 < 1)
                  {
                    uint64_t v216 = result;
                  }
                  else
                  {
                    int v210 = 0;
                    uint64_t v211 = v31[2];
                    v212 = v30[3];
                    uint64_t v213 = v208 - *((void *)v207 + 2) * v211;
                    do
                    {
                      if ((int)v211 < 1)
                      {
                        uint64_t v216 = result;
                      }
                      else
                      {
                        uint64_t v214 = *((void *)v212 + 2);
                        int v215 = v211;
                        do
                        {
                          uint64_t v216 = result + 1;
                          *(unsigned char *)(v205 + result) = *((unsigned char *)v204 + v203);
                          v203 += v214;
                          ++result;
                          --v215;
                        }
                        while (v215);
                      }
                      v203 += v213;
                      ++v210;
                      uint64_t result = v216;
                    }
                    while (v210 != v206);
                  }
                  v203 += v209;
                  ++v202;
                  uint64_t result = v216;
                }
                while (v202 != v201);
              }
              break;
            case 4:
              int v217 = *v31;
              if (*v31 >= 1)
              {
                int v218 = 0;
                uint64_t result = 0;
                uint64_t v219 = 0;
                v220 = v30[19];
                uint64_t v221 = v3[19];
                uint64_t v222 = v31[1];
                v223 = v30[3];
                uint64_t v224 = *((void *)v223 + 1);
                uint64_t v225 = *(void *)v223 - v224 * v222;
                do
                {
                  if ((int)v222 < 1)
                  {
                    uint64_t v236 = result;
                  }
                  else
                  {
                    int v226 = 0;
                    uint64_t v227 = v31[2];
                    v228 = v30[3];
                    uint64_t v229 = v224 - *((void *)v223 + 2) * v227;
                    do
                    {
                      if ((int)v227 < 1)
                      {
                        uint64_t v236 = result;
                      }
                      else
                      {
                        int v230 = 0;
                        uint64_t v231 = v31[3];
                        v232 = v30[3];
                        uint64_t v233 = *((void *)v228 + 2) - *((void *)v228 + 3) * v231;
                        do
                        {
                          if ((int)v231 < 1)
                          {
                            uint64_t v236 = result;
                          }
                          else
                          {
                            uint64_t v234 = *((void *)v232 + 3);
                            int v235 = v231;
                            do
                            {
                              uint64_t v236 = result + 1;
                              *(unsigned char *)(v221 + result) = *((unsigned char *)v220 + v219);
                              v219 += v234;
                              ++result;
                              --v235;
                            }
                            while (v235);
                          }
                          v219 += v233;
                          ++v230;
                          uint64_t result = v236;
                        }
                        while (v230 != v227);
                      }
                      v219 += v229;
                      ++v226;
                      uint64_t result = v236;
                    }
                    while (v226 != v222);
                  }
                  v219 += v225;
                  ++v218;
                  uint64_t result = v236;
                }
                while (v218 != v217);
              }
              break;
            default:
              uint64_t v180 = v3[6];
              if (v180)
              {
                uint64_t v181 = 0;
                v182 = v30[19];
                uint64_t v183 = v3[19];
                uint64_t v184 = ((unint64_t)v32 >> 2) - 1;
                v185 = v30[3];
                do
                {
                  uint64_t v186 = 0;
                  if ((v184 & 0x80000000) == 0)
                  {
                    uint64_t v187 = v184;
                    LODWORD(result) = v181;
                    do
                    {
                      ldiv_t v188 = ldiv((int)result, v31[v187]);
                      uint64_t result = v188.quot;
                      v186 += *(void *)&v185[2 * v187--] * v188.rem;
                    }
                    while (v187 != -1);
                  }
                  *(unsigned char *)(v183 + v181++) = *((unsigned char *)v182 + v186);
                }
                while (v181 != v180);
              }
              break;
          }
          break;
        case 3:
          v37 = *(unsigned int ***)result;
          uint64_t v39 = **(void **)result;
          uint64_t v38 = *(void *)(*(void *)result + 8);
          uint64_t result = v38 - v39;
          switch((v38 - v39) >> 2)
          {
            case 1:
              uint64_t v40 = (result << 30) - 0x100000000;
              int v41 = *(_DWORD *)(v39 + (v40 >> 30));
              if (v41 >= 1)
              {
                uint64_t v42 = v40 >> 29;
                uint64_t v43 = *(void *)((char *)v37[3] + (v40 >> 29));
                uint64_t v44 = *(void *)(v3[3] + v42);
                uint64_t v45 = (unsigned char *)v3[19];
                long long v46 = v37[19];
                do
                {
                  *uint64_t v45 = *(unsigned char *)v46;
                  long long v46 = (unsigned int *)((char *)v46 + v43);
                  v45 += v44;
                  --v41;
                }
                while (v41);
              }
              break;
            case 2:
              uint64_t v592 = (result << 30) - 0x200000000;
              int v593 = *(_DWORD *)(v39 + (v592 >> 30));
              if (v593 >= 1)
              {
                int v594 = 0;
                uint64_t v595 = 0;
                uint64_t v596 = 0;
                v597 = v37[3];
                uint64_t v598 = v592 >> 29;
                uint64_t v599 = *(void *)((char *)v597 + (v592 >> 29));
                uint64_t v600 = v3[3];
                uint64_t v601 = *(void *)(v600 + v598);
                uint64_t v602 = (result << 30) - 0x100000000;
                uint64_t result = v602 >> 29;
                uint64_t v603 = *(void *)((char *)v597 + (v602 >> 29));
                uint64_t v604 = *(void *)(v600 + (v602 >> 29));
                int v605 = *(_DWORD *)(v39 + (v602 >> 30));
                do
                {
                  if (v605 >= 1)
                  {
                    uint64_t result = v3[19];
                    v606 = v37[19];
                    int v607 = v605;
                    do
                    {
                      *(unsigned char *)(result + v596) = *((unsigned char *)v606 + v595);
                      result += v604;
                      v606 = (unsigned int *)((char *)v606 + v603);
                      --v607;
                    }
                    while (v607);
                  }
                  v595 += v599;
                  v596 += v601;
                  ++v594;
                }
                while (v594 != v593);
              }
              break;
            case 3:
              uint64_t v608 = (result << 30) - 0x300000000;
              int v609 = *(_DWORD *)(v39 + (v608 >> 30));
              if (v609 >= 1)
              {
                int v610 = 0;
                uint64_t v611 = 0;
                uint64_t v612 = 0;
                uint64_t v613 = result << 30;
                v614 = v37[3];
                uint64_t v615 = v608 >> 29;
                uint64_t v616 = *(void *)((char *)v614 + (v608 >> 29));
                uint64_t v617 = v3[3];
                uint64_t v618 = *(void *)(v617 + v615);
                uint64_t v619 = (result << 30) - 0x200000000;
                uint64_t v620 = v613 - 0x100000000;
                uint64_t v621 = *(void *)((char *)v614 + (v619 >> 29));
                uint64_t v622 = *(void *)(v617 + (v619 >> 29));
                uint64_t result = *(unsigned int *)(v39 + (v619 >> 30));
                uint64_t v623 = v620 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v624 = 0;
                    uint64_t v625 = *(void *)&v614[2 * v623];
                    uint64_t v626 = *(void *)(v617 + 8 * v623);
                    uint64_t v627 = v611;
                    int v628 = *(_DWORD *)(v39 + 4 * v623);
                    uint64_t v629 = v612;
                    v630 = *a2;
                    do
                    {
                      if (v628 >= 1)
                      {
                        uint64_t v631 = v630[19];
                        v632 = v37[19];
                        int v633 = v628;
                        do
                        {
                          *(unsigned char *)(v631 + v629) = *((unsigned char *)v632 + v627);
                          v631 += v626;
                          v632 = (unsigned int *)((char *)v632 + v625);
                          --v633;
                        }
                        while (v633);
                      }
                      v627 += v621;
                      v629 += v622;
                      ++v624;
                    }
                    while (v624 != result);
                  }
                  v611 += v616;
                  v612 += v618;
                  ++v610;
                }
                while (v610 != v609);
              }
              break;
            case 4:
              uint64_t v634 = (result << 30) - 0x400000000;
              int v1527 = *(_DWORD *)(v39 + (v634 >> 30));
              if (v1527 >= 1)
              {
                int v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = 0;
                v638 = v37[3];
                uint64_t v639 = v634 >> 29;
                uint64_t v640 = v3[3];
                uint64_t v1493 = *(void *)(v640 + v639);
                uint64_t v1510 = *(void *)((char *)v638 + v639);
                uint64_t v641 = (result << 30) - 0x300000000;
                uint64_t v642 = *(void *)((char *)v638 + (v641 >> 29));
                uint64_t v643 = *(void *)(v640 + (v641 >> 29));
                uint64_t v644 = (result << 30) - 0x200000000;
                uint64_t v645 = (result << 30) - 0x100000000;
                uint64_t result = *(unsigned int *)(v39 + (v641 >> 30));
                uint64_t v1477 = v644 >> 32;
                uint64_t v646 = v645 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v647 = 0;
                    uint64_t v648 = *(void *)&v638[2 * v1477];
                    uint64_t v649 = *(void *)(v640 + 8 * v1477);
                    uint64_t v650 = v636;
                    int v651 = *(_DWORD *)(v39 + 4 * v1477);
                    uint64_t v652 = v637;
                    do
                    {
                      if (v651 >= 1)
                      {
                        int v653 = 0;
                        uint64_t v654 = *(void *)&v638[2 * v646];
                        uint64_t v655 = *(void *)(v640 + 8 * v646);
                        uint64_t v656 = v650;
                        int v657 = *(_DWORD *)(v39 + 4 * v646);
                        uint64_t v658 = v652;
                        v659 = *a2;
                        do
                        {
                          if (v657 >= 1)
                          {
                            uint64_t v660 = v659[19];
                            v661 = v37[19];
                            int v662 = v657;
                            do
                            {
                              *(unsigned char *)(v660 + v658) = *((unsigned char *)v661 + v656);
                              v660 += v655;
                              v661 = (unsigned int *)((char *)v661 + v654);
                              --v662;
                            }
                            while (v662);
                          }
                          v656 += v648;
                          v658 += v649;
                          ++v653;
                        }
                        while (v653 != v651);
                      }
                      v650 += v642;
                      v652 += v643;
                      ++v647;
                    }
                    while (v647 != result);
                  }
                  v636 += v1510;
                  v637 += v1493;
                  ++v635;
                }
                while (v635 != v1527);
              }
              break;
            case 5:
              uint64_t v663 = (result << 30) - 0x500000000;
              int v1438 = *(_DWORD *)(v39 + (v663 >> 30));
              if (v1438 >= 1)
              {
                int v1448 = 0;
                uint64_t v1458 = 0;
                uint64_t v1467 = 0;
                v664 = v37[3];
                uint64_t v665 = v663 >> 29;
                uint64_t v666 = v3[3];
                uint64_t v1418 = *(void *)(v666 + v665);
                uint64_t v1428 = *(void *)((char *)v664 + v665);
                uint64_t v667 = (result << 30) - 0x400000000;
                uint64_t v1494 = *(void *)(v666 + (v667 >> 29));
                uint64_t v1511 = *(void *)((char *)v664 + (v667 >> 29));
                int v1528 = *(_DWORD *)(v39 + (v667 >> 30));
                uint64_t v1408 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1478 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v668 = ((result << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1528 >= 1)
                  {
                    int v669 = 0;
                    uint64_t v670 = *(void *)&v664[2 * v1408];
                    uint64_t v671 = *(void *)(v666 + 8 * v1408);
                    uint64_t v673 = v1458;
                    uint64_t v672 = v1467;
                    int v674 = *(_DWORD *)(v39 + 4 * v1408);
                    do
                    {
                      if (v674 >= 1)
                      {
                        int v675 = 0;
                        uint64_t v676 = *(void *)&v664[2 * v1478];
                        uint64_t v677 = *(void *)(v666 + 8 * v1478);
                        uint64_t v678 = v672;
                        int v679 = *(_DWORD *)(v39 + 4 * v1478);
                        uint64_t v680 = v673;
                        do
                        {
                          if (v679 >= 1)
                          {
                            int v681 = 0;
                            uint64_t v682 = *(void *)&v664[2 * v668];
                            uint64_t v683 = *(void *)(v666 + 8 * v668);
                            uint64_t v684 = v678;
                            uint64_t result = *(unsigned int *)(v39 + 4 * v668);
                            uint64_t v685 = v680;
                            v686 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                uint64_t v687 = v686[19];
                                v688 = v37[19];
                                int v689 = result;
                                do
                                {
                                  *(unsigned char *)(v687 + v685) = *((unsigned char *)v688 + v684);
                                  v687 += v683;
                                  v688 = (unsigned int *)((char *)v688 + v682);
                                  --v689;
                                }
                                while (v689);
                              }
                              v684 += v676;
                              v685 += v677;
                              ++v681;
                            }
                            while (v681 != v679);
                          }
                          v678 += v670;
                          v680 += v671;
                          ++v675;
                        }
                        while (v675 != v674);
                      }
                      v672 += v1511;
                      v673 += v1494;
                      ++v669;
                    }
                    while (v669 != v1528);
                  }
                  v1467 += v1428;
                  v1458 += v1418;
                  ++v1448;
                }
                while (v1448 != v1438);
              }
              break;
            default:
              LODWORD(v557) = 1;
              uint64_t v558 = -20;
              do
              {
                uint64_t v557 = *(int *)(v38 + v558) * (uint64_t)(int)v557;
                v558 += 4;
              }
              while (v558);
              v1397 = v37[6];
              if (v1397)
              {
                uint64_t v559 = 0;
                uint64_t v1377 = *v3;
                uint64_t v560 = (result << 30) - 0x500000000;
                uint64_t v1387 = ((unint64_t)result >> 2) - 1;
                v561 = v37[3];
                uint64_t v1382 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v562 = v3[3];
                uint64_t v1417 = *(void *)(v562 + (v560 >> 29));
                uint64_t v1427 = *(void *)((char *)v561 + (v560 >> 29));
                int v1437 = *(_DWORD *)(v39 + (v560 >> 30));
                uint64_t v1372 = ((result << 30) - 0x400000000) >> 32;
                uint64_t v1407 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1476 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v563 = ((result << 30) - 0x100000000) >> 32;
                uint64_t v1392 = v557;
                do
                {
                  uint64_t v564 = v1387;
                  if ((v1387 & 0x80000000) != 0)
                  {
                    uint64_t v565 = 0;
                  }
                  else
                  {
                    uint64_t v565 = 0;
                    LODWORD(result) = v559;
                    do
                    {
                      ldiv_t v566 = ldiv((int)result, *(int *)(v39 + 4 * v564));
                      uint64_t result = v566.quot;
                      v565 += *(void *)&v561[2 * v564--] * v566.rem;
                    }
                    while (v564 != -1);
                  }
                  uint64_t v567 = v1382;
                  uint64_t v1402 = v559;
                  uint64_t v568 = 0;
                  if ((v1382 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v559;
                    do
                    {
                      ldiv_t v569 = ldiv((int)result, *(int *)(v1377 + 4 * v567));
                      uint64_t result = v569.quot;
                      v568 += *(void *)(v562 + 8 * v567--) * v569.rem;
                    }
                    while (v567 != -1);
                  }
                  if (v1437 >= 1)
                  {
                    int v570 = 0;
                    uint64_t v1492 = *(void *)(v562 + 8 * v1372);
                    uint64_t v1509 = *(void *)&v561[2 * v1372];
                    int v1526 = *(_DWORD *)(v39 + 4 * v1372);
                    do
                    {
                      int v1447 = v570;
                      uint64_t v1457 = v568;
                      if (v1526 >= 1)
                      {
                        int v571 = 0;
                        uint64_t v572 = *(void *)&v561[2 * v1407];
                        uint64_t v573 = *(void *)(v562 + 8 * v1407);
                        uint64_t v574 = v568;
                        uint64_t v575 = v565;
                        int v576 = *(_DWORD *)(v39 + 4 * v1407);
                        do
                        {
                          if (v576 >= 1)
                          {
                            LODWORD(result) = 0;
                            uint64_t v577 = *(void *)&v561[2 * v1476];
                            uint64_t v578 = *(void *)(v562 + 8 * v1476);
                            uint64_t v579 = v575;
                            int v580 = *(_DWORD *)(v39 + 4 * v1476);
                            uint64_t v581 = v574;
                            do
                            {
                              if (v580 >= 1)
                              {
                                int v582 = 0;
                                uint64_t v583 = *(void *)&v561[2 * v563];
                                uint64_t v584 = *(void *)(v562 + 8 * v563);
                                uint64_t v585 = v579;
                                int v586 = *(_DWORD *)(v39 + 4 * v563);
                                uint64_t v587 = v581;
                                v588 = *a2;
                                do
                                {
                                  if (v586 >= 1)
                                  {
                                    uint64_t v589 = v588[19];
                                    v590 = v37[19];
                                    int v591 = v586;
                                    do
                                    {
                                      *(unsigned char *)(v589 + v587) = *((unsigned char *)v590 + v585);
                                      v589 += v584;
                                      v590 = (unsigned int *)((char *)v590 + v583);
                                      --v591;
                                    }
                                    while (v591);
                                  }
                                  v585 += v577;
                                  v587 += v578;
                                  ++v582;
                                }
                                while (v582 != v580);
                              }
                              v579 += v572;
                              v581 += v573;
                              uint64_t result = (result + 1);
                            }
                            while (result != v576);
                          }
                          v575 += v1509;
                          v574 += v1492;
                          ++v571;
                        }
                        while (v571 != v1526);
                      }
                      v565 += v1427;
                      uint64_t v568 = v1457 + v1417;
                      int v570 = v1447 + 1;
                    }
                    while (v1447 + 1 != v1437);
                  }
                  uint64_t v559 = v1402 + v1392;
                }
                while ((unint64_t)v1397 > v1402 + v1392);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v9 = 0;
            char v10 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v11 = v3[19];
            do
              *(unsigned char *)(v11 + v9++) = v10;
            while ((*a2)[6] > v9);
          }
          break;
        case 1:
          goto LABEL_39;
        case 2:
          long long v47 = *(int ***)result;
          uint64_t v48 = **(int ***)result;
          switch(v47[1] - *v47)
          {
            case 1:
              if (*v48 >= 1)
              {
                uint64_t v49 = 0;
                uint64_t v50 = 0;
                int v51 = v47[19];
                uint64_t v52 = v3[19];
                do
                {
                  *(unsigned char *)(v52 + v49) = *((unsigned char *)v51 + v50);
                  v50 += *(void *)v47[3];
                  ++v49;
                }
                while (**v47 > (int)v49);
              }
              break;
            case 2:
              int v246 = *v48;
              if (*v48 >= 1)
              {
                int v247 = 0;
                uint64_t v248 = 0;
                uint64_t v249 = 0;
                v250 = v47[19];
                uint64_t v251 = v3[19];
                do
                {
                  int v252 = v48[1];
                  if (v252 < 1)
                  {
                    v253 = v47[3];
                    uint64_t v254 = *((void *)v253 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v251 + v248 + result) = *((unsigned char *)v250 + v249);
                      v253 = v47[3];
                      uint64_t v254 = *((void *)v253 + 1);
                      v249 += v254;
                      uint64_t v48 = *v47;
                      int v252 = (*v47)[1];
                      ++result;
                    }
                    while ((int)result < v252);
                    int v246 = *v48;
                    v248 += result;
                  }
                  uint64_t v249 = *(void *)v253 + v249 - v254 * v252;
                  ++v247;
                }
                while (v247 < v246);
              }
              break;
            case 3:
              int v255 = *v48;
              if (*v48 >= 1)
              {
                int v256 = 0;
                uint64_t v257 = 0;
                uint64_t v258 = 0;
                v259 = v47[19];
                uint64_t v260 = v3[19];
                do
                {
                  int v261 = v48[1];
                  if (v261 < 1)
                  {
                    v265 = v47[3];
                    uint64_t v266 = *((void *)v265 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v261; ++i)
                    {
                      int v263 = v48[2];
                      if (v263 < 1)
                      {
                        v265 = v47[3];
                        uint64_t result = *((void *)v265 + 2);
                      }
                      else
                      {
                        uint64_t v264 = 0;
                        do
                        {
                          *(unsigned char *)(v260 + v257 + v264) = *((unsigned char *)v259 + v258);
                          v265 = v47[3];
                          uint64_t result = *((void *)v265 + 2);
                          v258 += result;
                          uint64_t v48 = *v47;
                          int v263 = (*v47)[2];
                          ++v264;
                        }
                        while ((int)v264 < v263);
                        v257 += v264;
                      }
                      uint64_t v266 = *((void *)v265 + 1);
                      uint64_t v258 = v266 + v258 - result * v263;
                      int v261 = v48[1];
                    }
                    int v255 = *v48;
                  }
                  uint64_t v258 = *(void *)v265 + v258 - v266 * v261;
                  ++v256;
                }
                while (v256 < v255);
              }
              break;
            case 4:
              int v267 = *v48;
              if (*v48 >= 1)
              {
                int v268 = 0;
                uint64_t v269 = 0;
                uint64_t v270 = 0;
                v271 = v47[19];
                uint64_t v272 = v3[19];
                do
                {
                  int v273 = v48[1];
                  if (v273 < 1)
                  {
                    v279 = v47[3];
                    uint64_t v281 = *((void *)v279 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v273; ++j)
                    {
                      int v275 = v48[2];
                      if (v275 < 1)
                      {
                        v279 = v47[3];
                        uint64_t v280 = *((void *)v279 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v275; ++k)
                        {
                          int v277 = v48[3];
                          if (v277 < 1)
                          {
                            v279 = v47[3];
                            uint64_t result = *((void *)v279 + 3);
                          }
                          else
                          {
                            uint64_t v278 = 0;
                            do
                            {
                              *(unsigned char *)(v272 + v269 + v278) = *((unsigned char *)v271 + v270);
                              v279 = v47[3];
                              uint64_t result = *((void *)v279 + 3);
                              v270 += result;
                              uint64_t v48 = *v47;
                              int v277 = (*v47)[3];
                              ++v278;
                            }
                            while ((int)v278 < v277);
                            v269 += v278;
                          }
                          uint64_t v280 = *((void *)v279 + 2);
                          uint64_t v270 = v280 + v270 - result * v277;
                          int v275 = v48[2];
                        }
                      }
                      uint64_t v281 = *((void *)v279 + 1);
                      uint64_t v270 = v281 + v270 - v280 * v275;
                      int v273 = v48[1];
                    }
                    int v267 = *v48;
                  }
                  uint64_t v270 = *(void *)v279 + v270 - v281 * v273;
                  ++v268;
                }
                while (v268 < v267);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v237 = 0;
                v238 = v47[19];
                uint64_t v239 = v3[19];
                do
                {
                  v240 = *v47;
                  unint64_t v241 = (unint64_t)((char *)v47[1] - (char *)*v47) >> 2;
                  uint64_t v242 = 0;
                  uint64_t v243 = (v241 - 1);
                  if ((int)v241 - 1 >= 0)
                  {
                    v244 = v47[3];
                    LODWORD(result) = v237;
                    do
                    {
                      ldiv_t v245 = ldiv((int)result, v240[v243]);
                      uint64_t result = v245.quot;
                      v242 += *(void *)&v244[2 * v243--] * v245.rem;
                    }
                    while (v243 != -1);
                  }
                  *(unsigned char *)(v239 + v237++) = *((unsigned char *)v238 + v242);
                }
                while (v237 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          int v53 = *(int ***)result;
          v54 = (uint64_t *)(*(void *)result + 24);
          v55 = v3 + 3;
          uint64_t v57 = **(void **)result;
          uint64_t v56 = *(void *)(*(void *)result + 8);
          uint64_t v58 = v56 - v57;
          switch((v56 - v57) >> 2)
          {
            case 1:
              uint64_t v59 = (v58 << 30) - 0x100000000;
              int v60 = *(_DWORD *)(v57 + (v59 >> 30));
              if (v60 >= 1)
              {
                uint64_t v61 = v59 >> 29;
                uint64_t v62 = *(void *)(*v54 + v61);
                uint64_t v63 = *(void *)(*v55 + v61);
                v64 = (unsigned char *)v3[19];
                v65 = v53[19];
                do
                {
                  unsigned char *v64 = *(unsigned char *)v65;
                  v65 = (int *)((char *)v65 + v62);
                  v64 += v63;
                  --v60;
                }
                while (v60);
              }
              break;
            case 2:
              uint64_t v711 = (v58 << 30) - 0x200000000;
              int v712 = *(_DWORD *)(v57 + (v711 >> 30));
              if (v712 >= 1)
              {
                int v713 = 0;
                uint64_t v714 = 0;
                uint64_t v715 = 0;
                uint64_t v716 = v711 >> 29;
                uint64_t v717 = *(void *)(*v54 + (v711 >> 29));
                uint64_t v718 = *(void *)(*v55 + v716);
                do
                {
                  uint64_t v719 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v720 = *(int *)((char *)*v53 + (v719 >> 30));
                  if (v720 >= 1)
                  {
                    uint64_t v721 = v719 >> 29;
                    uint64_t v722 = *(void *)((char *)v53[3] + (v719 >> 29));
                    uint64_t v723 = *(void *)(*v55 + v721);
                    uint64_t result = (*a2)[19];
                    uint64_t v724 = *(void *)(*(void *)v5 + 152);
                    do
                    {
                      *(unsigned char *)(result + v715) = *(unsigned char *)(v724 + v714);
                      result += v723;
                      v724 += v722;
                      --v720;
                    }
                    while (v720);
                  }
                  v714 += v717;
                  v715 += v718;
                  ++v713;
                }
                while (v713 != v712);
              }
              break;
            case 3:
              uint64_t v725 = (v58 << 30) - 0x300000000;
              int v726 = *(_DWORD *)(v57 + (v725 >> 30));
              if (v726 >= 1)
              {
                int v727 = 0;
                uint64_t v728 = 0;
                uint64_t v729 = 0;
                uint64_t v730 = v725 >> 29;
                uint64_t v731 = *(void *)(*v54 + (v725 >> 29));
                uint64_t v732 = *(void *)(*v55 + v730);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v733 = *(int *)((char *)*v53 + (result >> 30));
                  if (v733 >= 1)
                  {
                    int v734 = 0;
                    uint64_t v735 = result >> 29;
                    uint64_t result = *(void *)((char *)v53[3] + (result >> 29));
                    uint64_t v736 = *(void *)(*v55 + v735);
                    uint64_t v737 = v728;
                    uint64_t v738 = v729;
                    do
                    {
                      uint64_t v739 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v740 = *(int *)((char *)*v53 + (v739 >> 30));
                      if (v740 >= 1)
                      {
                        uint64_t v741 = v739 >> 29;
                        uint64_t v742 = *(void *)((char *)v53[3] + (v739 >> 29));
                        uint64_t v743 = *(void *)(*v55 + v741);
                        uint64_t v744 = (*a2)[19];
                        uint64_t v745 = *(void *)(*(void *)v5 + 152);
                        do
                        {
                          *(unsigned char *)(v744 + v738) = *(unsigned char *)(v745 + v737);
                          v744 += v743;
                          v745 += v742;
                          --v740;
                        }
                        while (v740);
                      }
                      v737 += result;
                      v738 += v736;
                      ++v734;
                    }
                    while (v734 != v733);
                  }
                  v728 += v731;
                  v729 += v732;
                  ++v727;
                }
                while (v727 != v726);
              }
              break;
            case 4:
              v746 = *(int ***)result;
              v747 = (void *)(*(void *)result + 24);
              v748 = v3 + 3;
              goto LABEL_582;
            case 5:
              uint64_t v749 = (v58 << 30) - 0x500000000;
              int v750 = *(_DWORD *)(v57 + (v749 >> 30));
              if (v750 >= 1)
              {
                uint64_t v751 = 0;
                uint64_t v752 = 0;
                uint64_t v753 = v749 >> 29;
                uint64_t v754 = *(void *)(*v54 + v753);
                uint64_t v755 = *(void *)(*v55 + v753);
                do
                {
                  v751 += v754;
                  v752 += v755;
                  --v750;
                }
                while (v750);
              }
              break;
            default:
              LODWORD(v690) = 1;
              uint64_t v691 = -20;
              do
              {
                uint64_t v690 = *(int *)(v56 + v691) * (uint64_t)(int)v690;
                v691 += 4;
              }
              while (v691);
              if (v53[6])
              {
                uint64_t result = 0;
                v692 = *(void **)v5;
                v1512 = v55;
                uint64_t v1479 = v690;
                do
                {
                  v693 = *v53;
                  unint64_t v694 = (unint64_t)((char *)v53[1] - (char *)*v53) >> 2;
                  uint64_t v695 = (v694 - 1);
                  uint64_t v1529 = result;
                  v1495 = v692;
                  uint64_t v696 = 0;
                  if ((int)v694 - 1 >= 0)
                  {
                    uint64_t v697 = *v54;
                    do
                    {
                      ldiv_t v698 = ldiv((int)result, v693[v695]);
                      LODWORD(result) = v698.quot;
                      v696 += *(void *)(v697 + 8 * v695--) * v698.rem;
                    }
                    while (v695 != -1);
                  }
                  uint64_t v699 = **a2;
                  unint64_t v700 = (unint64_t)((*a2)[1] - v699) >> 2;
                  uint64_t v701 = *v1512;
                  uint64_t v702 = 0;
                  uint64_t v703 = (v700 - 1);
                  if ((int)v700 - 1 >= 0)
                  {
                    int quot = v1529;
                    do
                    {
                      ldiv_t v705 = ldiv(quot, *(int *)(v699 + 4 * v703));
                      int quot = v705.quot;
                      v702 += *(void *)(v701 + 8 * v703--) * v705.rem;
                    }
                    while (v703 != -1);
                  }
                  v692 = v1495;
                  uint64_t v706 = ((v1495[1] - *v1495) << 30) - 0x500000000;
                  int v707 = *(int *)((char *)v693 + (v706 >> 30));
                  if (v707 >= 1)
                  {
                    uint64_t v708 = v706 >> 29;
                    uint64_t v709 = *(void *)(*v54 + v708);
                    uint64_t v710 = *(void *)(v701 + v708);
                    do
                    {
                      v696 += v709;
                      v702 += v710;
                      --v707;
                    }
                    while (v707);
                    v692 = *(void **)v5;
                  }
                  uint64_t result = v1529 + v1479;
                }
                while (v692[6] > (unint64_t)(v1529 + v1479));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = **(unsigned __int8 **)(*(void *)result + 152);
            int v14 = (_DWORD *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          uint64_t v66 = *(void *)(*(void *)result + 160);
          if (v66)
          {
            v67 = *(unsigned __int8 **)(*(void *)result + 152);
            v68 = (_DWORD *)v3[19];
            do
            {
              int v69 = *v67++;
              *v68++ = v69;
              --v66;
            }
            while (v66);
          }
          break;
        case 2:
          v70 = *(int ***)result;
          v71 = **(int ***)result;
          uint64_t v72 = *(void *)(*(void *)result + 8) - (void)v71;
          switch(v72 >> 2)
          {
            case 1:
              if (*v71 >= 1)
              {
                uint64_t v73 = 0;
                v74 = v70[19];
                uint64_t v75 = v3[19];
                uint64_t v76 = *(void *)v70[3];
                do
                {
                  *(_DWORD *)(v75 + 4 * v73) = *(unsigned __int8 *)v74;
                  v74 = (int *)((char *)v74 + v76);
                  ++v73;
                }
                while (*v71 > (int)v73);
              }
              break;
            case 2:
              int v291 = *v71;
              if (*v71 >= 1)
              {
                int v292 = 0;
                uint64_t v293 = 0;
                uint64_t v294 = 0;
                v295 = v70[19];
                uint64_t v296 = v3[19];
                v297 = v70[3];
                uint64_t v298 = *(void *)v297;
                uint64_t v299 = *((void *)v297 + 1);
                int v300 = v71[1];
                do
                {
                  if (v300 >= 1)
                  {
                    uint64_t v301 = 0;
                    do
                    {
                      *(_DWORD *)(v296 + 4 * v293 + 4 * v301) = *((unsigned __int8 *)v295 + v294);
                      v294 += v299;
                      int v300 = v71[1];
                      ++v301;
                    }
                    while ((int)v301 < v300);
                    int v291 = *v71;
                    v293 += v301;
                  }
                  uint64_t v294 = v294 + v298 - v299 * v300;
                  ++v292;
                }
                while (v292 < v291);
              }
              break;
            case 3:
              uint64_t result = *v71;
              if ((int)result >= 1)
              {
                int v302 = 0;
                uint64_t v303 = 0;
                uint64_t v304 = 0;
                v305 = v70[19];
                uint64_t v306 = v3[19];
                v307 = v70[3];
                uint64_t v308 = *(void *)v307;
                uint64_t v309 = *((void *)v307 + 1);
                int v310 = v71[1];
                do
                {
                  if (v310 >= 1)
                  {
                    int v311 = 0;
                    v312 = v70[3];
                    uint64_t v313 = *((void *)v307 + 2);
                    int v314 = v71[2];
                    do
                    {
                      if (v314 >= 1)
                      {
                        uint64_t v315 = 0;
                        uint64_t v316 = *((void *)v312 + 2);
                        do
                        {
                          *(_DWORD *)(v306 + 4 * v303 + 4 * v315) = *((unsigned __int8 *)v305 + v304);
                          v304 += v316;
                          int v314 = v71[2];
                          ++v315;
                        }
                        while ((int)v315 < v314);
                        int v310 = v71[1];
                        v303 += v315;
                      }
                      uint64_t v304 = v304 + v309 - v313 * v314;
                      ++v311;
                    }
                    while (v311 < v310);
                    uint64_t result = *v71;
                  }
                  uint64_t v304 = v304 + v308 - v309 * v310;
                  ++v302;
                }
                while (v302 < (int)result);
              }
              break;
            case 4:
              int v317 = *v71;
              if (*v71 >= 1)
              {
                int v318 = 0;
                uint64_t v319 = 0;
                uint64_t v320 = 0;
                v321 = v70[19];
                uint64_t v322 = v3[19];
                v323 = v70[3];
                uint64_t v324 = *(void *)v323;
                uint64_t v325 = *((void *)v323 + 1);
                int v326 = v71[1];
                do
                {
                  if (v326 >= 1)
                  {
                    int v327 = 0;
                    v328 = v70[3];
                    uint64_t v329 = *((void *)v323 + 2);
                    int v330 = v71[2];
                    do
                    {
                      if (v330 >= 1)
                      {
                        int v331 = 0;
                        v332 = v70[3];
                        uint64_t v333 = *((void *)v328 + 2);
                        uint64_t v334 = *((void *)v328 + 3);
                        int v335 = v71[3];
                        do
                        {
                          if (v335 >= 1)
                          {
                            uint64_t v336 = 0;
                            uint64_t v337 = *((void *)v332 + 3);
                            do
                            {
                              *(_DWORD *)(v322 + 4 * v319 + 4 * v336) = *((unsigned __int8 *)v321 + v320);
                              v320 += v337;
                              int v335 = v71[3];
                              ++v336;
                            }
                            while ((int)v336 < v335);
                            int v330 = v71[2];
                            v319 += v336;
                          }
                          uint64_t v320 = v320 + v333 - v334 * v335;
                          ++v331;
                        }
                        while (v331 < v330);
                        int v326 = v71[1];
                      }
                      uint64_t v320 = v320 + v325 - v329 * v330;
                      ++v327;
                    }
                    while (v327 < v326);
                    int v317 = *v71;
                  }
                  uint64_t result = v326;
                  uint64_t v320 = v320 + v324 - v325 * v326;
                  ++v318;
                }
                while (v318 < v317);
              }
              break;
            default:
              uint64_t v282 = v3[6];
              if (v282)
              {
                uint64_t v283 = 0;
                v284 = v70[19];
                uint64_t v285 = v3[19];
                uint64_t v286 = ((unint64_t)v72 >> 2) - 1;
                v287 = v70[3];
                do
                {
                  uint64_t v288 = 0;
                  if ((v286 & 0x80000000) == 0)
                  {
                    uint64_t v289 = v286;
                    LODWORD(result) = v283;
                    do
                    {
                      ldiv_t v290 = ldiv((int)result, v71[v289]);
                      uint64_t result = v290.quot;
                      v288 += *(void *)&v287[2 * v289--] * v290.rem;
                    }
                    while (v289 != -1);
                  }
                  *(_DWORD *)(v285 + 4 * v283++) = *((unsigned __int8 *)v284 + v288);
                }
                while (v283 != v282);
              }
              break;
          }
          break;
        case 3:
          v77 = *(unsigned int ***)result;
          uint64_t v79 = **(void **)result;
          uint64_t v78 = *(void *)(*(void *)result + 8);
          unint64_t v80 = v78 - v79;
          switch((v78 - v79) >> 2)
          {
            case 1:
              uint64_t v81 = (v80 << 30) - 0x100000000;
              int v82 = *(_DWORD *)(v79 + (v81 >> 30));
              if (v82 >= 1)
              {
                uint64_t v83 = v81 >> 29;
                uint64_t v84 = *(void *)((char *)v77[3] + (v81 >> 29));
                uint64_t v85 = *(void *)(v3[3] + v83);
                v86 = (_DWORD *)v3[19];
                v87 = v77[19];
                uint64_t v88 = 4 * v85;
                do
                {
                  _DWORD *v86 = *(unsigned __int8 *)v87;
                  v87 = (unsigned int *)((char *)v87 + v84);
                  v86 = (_DWORD *)((char *)v86 + v88);
                  --v82;
                }
                while (v82);
              }
              break;
            case 2:
              uint64_t v791 = (v80 << 30) - 0x200000000;
              int v792 = *(_DWORD *)(v79 + (v791 >> 30));
              if (v792 >= 1)
              {
                uint64_t v793 = 0;
                int v794 = 0;
                uint64_t v795 = 0;
                v796 = v77[3];
                uint64_t v797 = v791 >> 29;
                uint64_t v798 = *(void *)((char *)v796 + (v791 >> 29));
                uint64_t v799 = v3[3];
                uint64_t v800 = (v80 << 30) - 0x100000000;
                uint64_t v801 = *(void *)((char *)v796 + (v800 >> 29));
                uint64_t v802 = v800 >> 32;
                uint64_t v803 = 4 * *(void *)(v799 + v797);
                uint64_t v804 = 4 * *(void *)(v799 + (v800 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v79 + 4 * v802);
                  if ((int)result >= 1)
                  {
                    v805 = v77[19];
                    v806 = (_DWORD *)(v3[19] + v793);
                    do
                    {
                      _DWORD *v806 = *((unsigned __int8 *)v805 + v795);
                      v806 = (_DWORD *)((char *)v806 + v804);
                      v805 = (unsigned int *)((char *)v805 + v801);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v795 += v798;
                  ++v794;
                  v793 += v803;
                }
                while (v794 != v792);
              }
              break;
            case 3:
              uint64_t v807 = (v80 << 30) - 0x300000000;
              int v808 = *(_DWORD *)(v79 + (v807 >> 30));
              if (v808 >= 1)
              {
                uint64_t v809 = 0;
                int v810 = 0;
                uint64_t v811 = 0;
                uint64_t v812 = v80 << 30;
                v813 = v77[3];
                uint64_t v814 = v807 >> 29;
                uint64_t v815 = *(void *)((char *)v813 + (v807 >> 29));
                uint64_t v816 = v3[3];
                uint64_t v817 = *(void *)(v816 + v814);
                uint64_t v818 = v812 - 0x200000000;
                uint64_t v819 = (v812 - 0x200000000) >> 29;
                uint64_t v820 = v812 - 0x100000000;
                uint64_t v821 = *(void *)((char *)v813 + v819);
                uint64_t v822 = v818 >> 32;
                uint64_t v823 = *(void *)(v816 + v819);
                uint64_t v824 = v820 >> 32;
                uint64_t result = 4 * v817;
                uint64_t v825 = 4 * v823;
                do
                {
                  int v826 = *(_DWORD *)(v79 + 4 * v822);
                  if (v826 >= 1)
                  {
                    int v827 = 0;
                    uint64_t v828 = *(void *)&v813[2 * v824];
                    v829 = *a2;
                    uint64_t v830 = 4 * *(void *)(v816 + 8 * v824);
                    uint64_t v831 = v809;
                    uint64_t v832 = v811;
                    do
                    {
                      int v833 = *(_DWORD *)(v79 + 4 * v824);
                      if (v833 >= 1)
                      {
                        v834 = v77[19];
                        v835 = (_DWORD *)(v829[19] + v831);
                        do
                        {
                          _DWORD *v835 = *((unsigned __int8 *)v834 + v832);
                          v835 = (_DWORD *)((char *)v835 + v830);
                          v834 = (unsigned int *)((char *)v834 + v828);
                          --v833;
                        }
                        while (v833);
                      }
                      v832 += v821;
                      ++v827;
                      v831 += v825;
                    }
                    while (v827 != v826);
                  }
                  v811 += v815;
                  ++v810;
                  v809 += result;
                }
                while (v810 != v808);
              }
              break;
            case 4:
              uint64_t v836 = (v80 << 30) - 0x400000000;
              int v1531 = *(_DWORD *)(v79 + (v836 >> 30));
              if (v1531 >= 1)
              {
                uint64_t v837 = 0;
                int v838 = 0;
                uint64_t v839 = 0;
                uint64_t v840 = v80 << 30;
                v841 = v77[3];
                uint64_t v842 = v836 >> 29;
                uint64_t v1514 = *(void *)((char *)v841 + v842);
                uint64_t v843 = v3[3];
                uint64_t v1497 = (v840 - 0x300000000) >> 32;
                uint64_t v844 = (v840 - 0x300000000) >> 29;
                uint64_t v845 = *(void *)((char *)v841 + v844);
                uint64_t v846 = (v840 - 0x200000000) >> 32;
                uint64_t result = (v840 - 0x100000000) >> 32;
                uint64_t v1481 = 4 * *(void *)(v843 + v842);
                uint64_t v847 = 4 * *(void *)(v843 + v844);
                do
                {
                  int v848 = *(_DWORD *)(v79 + 4 * v1497);
                  if (v848 >= 1)
                  {
                    int v849 = 0;
                    uint64_t v850 = *(void *)&v841[2 * v846];
                    uint64_t v851 = 4 * *(void *)(v843 + 8 * v846);
                    uint64_t v852 = v837;
                    uint64_t v853 = v839;
                    do
                    {
                      int v854 = *(_DWORD *)(v79 + 4 * v846);
                      if (v854 >= 1)
                      {
                        int v855 = 0;
                        uint64_t v856 = *(void *)&v841[2 * result];
                        v857 = *a2;
                        uint64_t v858 = 4 * *(void *)(v843 + 8 * result);
                        uint64_t v859 = v852;
                        uint64_t v860 = v853;
                        do
                        {
                          int v861 = *(_DWORD *)(v79 + 4 * result);
                          if (v861 >= 1)
                          {
                            v862 = v77[19];
                            v863 = (_DWORD *)(v857[19] + v859);
                            do
                            {
                              _DWORD *v863 = *((unsigned __int8 *)v862 + v860);
                              v863 = (_DWORD *)((char *)v863 + v858);
                              v862 = (unsigned int *)((char *)v862 + v856);
                              --v861;
                            }
                            while (v861);
                          }
                          v860 += v850;
                          ++v855;
                          v859 += v851;
                        }
                        while (v855 != v854);
                      }
                      v853 += v845;
                      ++v849;
                      v852 += v847;
                    }
                    while (v849 != v848);
                  }
                  v839 += v1514;
                  ++v838;
                  v837 += v1481;
                }
                while (v838 != v1531);
              }
              break;
            case 5:
              uint64_t v864 = (v80 << 30) - 0x500000000;
              int v1440 = *(_DWORD *)(v79 + (v864 >> 30));
              if (v1440 >= 1)
              {
                uint64_t v1460 = 0;
                uint64_t v1469 = 0;
                int v1450 = 0;
                uint64_t v865 = v80 << 30;
                v866 = v77[3];
                uint64_t v867 = v864 >> 29;
                uint64_t v1430 = *(void *)((char *)v866 + v867);
                uint64_t v868 = v3[3];
                uint64_t v869 = (v865 - 0x400000000) >> 29;
                uint64_t v1420 = (v865 - 0x400000000) >> 32;
                uint64_t v1498 = *(void *)((char *)v866 + v869);
                uint64_t v1515 = (v865 - 0x300000000) >> 32;
                uint64_t result = (v865 - 0x200000000) >> 32;
                uint64_t v870 = (v865 - 0x100000000) >> 32;
                uint64_t v1410 = 4 * *(void *)(v868 + v867);
                uint64_t v1482 = 4 * *(void *)(v868 + v869);
                do
                {
                  int v1532 = *(_DWORD *)(v79 + 4 * v1420);
                  if (v1532 >= 1)
                  {
                    int v871 = 0;
                    uint64_t v872 = *(void *)&v866[2 * v1515];
                    uint64_t v873 = 4 * *(void *)(v868 + 8 * v1515);
                    uint64_t v874 = v1460;
                    uint64_t v875 = v1469;
                    do
                    {
                      int v876 = *(_DWORD *)(v79 + 4 * v1515);
                      if (v876 >= 1)
                      {
                        int v877 = 0;
                        uint64_t v878 = *(void *)&v866[2 * result];
                        uint64_t v879 = 4 * *(void *)(v868 + 8 * result);
                        uint64_t v880 = v875;
                        uint64_t v881 = v874;
                        do
                        {
                          int v882 = *(_DWORD *)(v79 + 4 * result);
                          if (v882 >= 1)
                          {
                            int v883 = 0;
                            uint64_t v884 = *(void *)&v866[2 * v870];
                            v885 = *a2;
                            uint64_t v886 = 4 * *(void *)(v868 + 8 * v870);
                            uint64_t v887 = v880;
                            uint64_t v888 = v881;
                            do
                            {
                              int v889 = *(_DWORD *)(v79 + 4 * v870);
                              if (v889 >= 1)
                              {
                                v890 = v77[19];
                                v891 = (_DWORD *)(v885[19] + v887);
                                do
                                {
                                  _DWORD *v891 = *((unsigned __int8 *)v890 + v888);
                                  v891 = (_DWORD *)((char *)v891 + v886);
                                  v890 = (unsigned int *)((char *)v890 + v884);
                                  --v889;
                                }
                                while (v889);
                              }
                              v888 += v878;
                              ++v883;
                              v887 += v879;
                            }
                            while (v883 != v882);
                          }
                          v881 += v872;
                          ++v877;
                          v880 += v873;
                        }
                        while (v877 != v876);
                      }
                      v874 += v1498;
                      ++v871;
                      v875 += v1482;
                    }
                    while (v871 != v1532);
                  }
                  v1460 += v1430;
                  v1469 += v1410;
                  ++v1450;
                }
                while (v1450 != v1440);
              }
              break;
            default:
              LODWORD(v756) = 1;
              uint64_t v757 = -20;
              do
              {
                uint64_t v756 = *(int *)(v78 + v757) * (uint64_t)(int)v756;
                v757 += 4;
              }
              while (v757);
              v1398 = v77[6];
              if (v1398)
              {
                uint64_t v758 = 0;
                uint64_t v1388 = (v80 >> 2) - 1;
                v759 = v77[3];
                uint64_t v1373 = *v3;
                uint64_t v1383 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v760 = (v80 << 30) - 0x500000000;
                uint64_t v761 = v3[3];
                uint64_t v1378 = v760 >> 32;
                uint64_t v1419 = *(void *)((char *)v759 + (v760 >> 29));
                uint64_t v1429 = (uint64_t)((v80 << 30) - 0x400000000) >> 32;
                uint64_t v1513 = (uint64_t)((v80 << 30) - 0x300000000) >> 32;
                uint64_t v762 = (uint64_t)((v80 << 30) - 0x200000000) >> 32;
                uint64_t v763 = (uint64_t)((v80 << 30) - 0x100000000) >> 32;
                uint64_t v1409 = 4 * *(void *)(v761 + (v760 >> 29));
                uint64_t v1393 = v756;
                do
                {
                  uint64_t v764 = v1388;
                  if ((v1388 & 0x80000000) != 0)
                  {
                    uint64_t v765 = 0;
                  }
                  else
                  {
                    uint64_t v765 = 0;
                    LODWORD(result) = v758;
                    do
                    {
                      ldiv_t v766 = ldiv((int)result, *(int *)(v79 + 4 * v764));
                      uint64_t result = v766.quot;
                      v765 += *(void *)&v759[2 * v764--] * v766.rem;
                    }
                    while (v764 != -1);
                  }
                  uint64_t v1468 = v765;
                  uint64_t v767 = v1383;
                  uint64_t v1403 = v758;
                  uint64_t v768 = 0;
                  if ((v1383 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v758;
                    do
                    {
                      ldiv_t v769 = ldiv((int)result, *(int *)(v1373 + 4 * v767));
                      uint64_t result = v769.quot;
                      v768 += *(void *)(v761 + 8 * v767--) * v769.rem;
                    }
                    while (v767 != -1);
                  }
                  int v1439 = *(_DWORD *)(v79 + 4 * v1378);
                  if (v1439 >= 1)
                  {
                    int v770 = 0;
                    uint64_t v1459 = 4 * v768;
                    uint64_t v1480 = 4 * *(void *)(v761 + 8 * v1429);
                    uint64_t v1496 = *(void *)&v759[2 * v1429];
                    do
                    {
                      int v1449 = v770;
                      int v1530 = *(_DWORD *)(v79 + 4 * v1429);
                      if (v1530 >= 1)
                      {
                        int v771 = 0;
                        uint64_t v772 = *(void *)&v759[2 * v1513];
                        uint64_t v773 = 4 * *(void *)(v761 + 8 * v1513);
                        uint64_t v774 = v1459;
                        uint64_t v775 = v1468;
                        do
                        {
                          int v776 = *(_DWORD *)(v79 + 4 * v1513);
                          if (v776 >= 1)
                          {
                            int v777 = 0;
                            uint64_t v778 = *(void *)&v759[2 * v762];
                            uint64_t v779 = 4 * *(void *)(v761 + 8 * v762);
                            uint64_t v780 = v774;
                            uint64_t result = v775;
                            do
                            {
                              int v781 = *(_DWORD *)(v79 + 4 * v762);
                              if (v781 >= 1)
                              {
                                int v782 = 0;
                                uint64_t v783 = *(void *)&v759[2 * v763];
                                v784 = *a2;
                                uint64_t v785 = 4 * *(void *)(v761 + 8 * v763);
                                uint64_t v786 = v780;
                                uint64_t v787 = result;
                                do
                                {
                                  int v788 = *(_DWORD *)(v79 + 4 * v763);
                                  if (v788 >= 1)
                                  {
                                    v789 = v77[19];
                                    v790 = (_DWORD *)(v784[19] + v786);
                                    do
                                    {
                                      _DWORD *v790 = *((unsigned __int8 *)v789 + v787);
                                      v790 = (_DWORD *)((char *)v790 + v785);
                                      v789 = (unsigned int *)((char *)v789 + v783);
                                      --v788;
                                    }
                                    while (v788);
                                  }
                                  v787 += v778;
                                  ++v782;
                                  v786 += v779;
                                }
                                while (v782 != v781);
                              }
                              result += v772;
                              ++v777;
                              v780 += v773;
                            }
                            while (v777 != v776);
                          }
                          v775 += v1496;
                          ++v771;
                          v774 += v1480;
                        }
                        while (v771 != v1530);
                      }
                      v1468 += v1419;
                      int v770 = v1449 + 1;
                      v1459 += v1409;
                    }
                    while (v1449 + 1 != v1439);
                  }
                  uint64_t v758 = v1403 + v1393;
                }
                while ((unint64_t)v1398 > v1403 + v1393);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v15 = 0;
            char v16 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v17 = v3[19];
            do
              *(unsigned char *)(v17 + v15++) = v16;
            while ((*a2)[6] > v15);
          }
          break;
        case 1:
LABEL_39:
          size_t v27 = *(void *)(*(void *)result + 160);
          if (v27)
          {
            unint64_t v28 = *(const void **)(*(void *)result + 152);
            unint64_t v29 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v29, v28, v27);
          }
          break;
        case 2:
          v89 = *(int ***)result;
          v90 = **(int ***)result;
          switch(v89[1] - *v89)
          {
            case 1:
              if (*v90 >= 1)
              {
                uint64_t v91 = 0;
                uint64_t v92 = 0;
                v93 = v89[19];
                uint64_t v94 = v3[19];
                do
                {
                  *(unsigned char *)(v94 + v91) = *((unsigned char *)v93 + v92);
                  v92 += *(void *)v89[3];
                  ++v91;
                }
                while (**v89 > (int)v91);
              }
              break;
            case 2:
              int v347 = *v90;
              if (*v90 >= 1)
              {
                int v348 = 0;
                uint64_t v349 = 0;
                uint64_t v350 = 0;
                v351 = v89[19];
                uint64_t v352 = v3[19];
                do
                {
                  int v353 = v90[1];
                  if (v353 < 1)
                  {
                    v354 = v89[3];
                    uint64_t v355 = *((void *)v354 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v352 + v349 + result) = *((unsigned char *)v351 + v350);
                      v354 = v89[3];
                      uint64_t v355 = *((void *)v354 + 1);
                      v350 += v355;
                      v90 = *v89;
                      int v353 = (*v89)[1];
                      ++result;
                    }
                    while ((int)result < v353);
                    int v347 = *v90;
                    v349 += result;
                  }
                  uint64_t v350 = *(void *)v354 + v350 - v355 * v353;
                  ++v348;
                }
                while (v348 < v347);
              }
              break;
            case 3:
              int v356 = *v90;
              if (*v90 >= 1)
              {
                int v357 = 0;
                uint64_t v358 = 0;
                uint64_t v359 = 0;
                v360 = v89[19];
                uint64_t v361 = v3[19];
                do
                {
                  int v362 = v90[1];
                  if (v362 < 1)
                  {
                    v366 = v89[3];
                    uint64_t v367 = *((void *)v366 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v362; ++m)
                    {
                      int v364 = v90[2];
                      if (v364 < 1)
                      {
                        v366 = v89[3];
                        uint64_t result = *((void *)v366 + 2);
                      }
                      else
                      {
                        uint64_t v365 = 0;
                        do
                        {
                          *(unsigned char *)(v361 + v358 + v365) = *((unsigned char *)v360 + v359);
                          v366 = v89[3];
                          uint64_t result = *((void *)v366 + 2);
                          v359 += result;
                          v90 = *v89;
                          int v364 = (*v89)[2];
                          ++v365;
                        }
                        while ((int)v365 < v364);
                        v358 += v365;
                      }
                      uint64_t v367 = *((void *)v366 + 1);
                      uint64_t v359 = v367 + v359 - result * v364;
                      int v362 = v90[1];
                    }
                    int v356 = *v90;
                  }
                  uint64_t v359 = *(void *)v366 + v359 - v367 * v362;
                  ++v357;
                }
                while (v357 < v356);
              }
              break;
            case 4:
              int v368 = *v90;
              if (*v90 >= 1)
              {
                int v369 = 0;
                uint64_t v370 = 0;
                uint64_t v371 = 0;
                v372 = v89[19];
                uint64_t v373 = v3[19];
                do
                {
                  int v374 = v90[1];
                  if (v374 < 1)
                  {
                    v380 = v89[3];
                    uint64_t v382 = *((void *)v380 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v374; ++n)
                    {
                      int v376 = v90[2];
                      if (v376 < 1)
                      {
                        v380 = v89[3];
                        uint64_t v381 = *((void *)v380 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v376; ++ii)
                        {
                          int v378 = v90[3];
                          if (v378 < 1)
                          {
                            v380 = v89[3];
                            uint64_t result = *((void *)v380 + 3);
                          }
                          else
                          {
                            uint64_t v379 = 0;
                            do
                            {
                              *(unsigned char *)(v373 + v370 + v379) = *((unsigned char *)v372 + v371);
                              v380 = v89[3];
                              uint64_t result = *((void *)v380 + 3);
                              v371 += result;
                              v90 = *v89;
                              int v378 = (*v89)[3];
                              ++v379;
                            }
                            while ((int)v379 < v378);
                            v370 += v379;
                          }
                          uint64_t v381 = *((void *)v380 + 2);
                          uint64_t v371 = v381 + v371 - result * v378;
                          int v376 = v90[2];
                        }
                      }
                      uint64_t v382 = *((void *)v380 + 1);
                      uint64_t v371 = v382 + v371 - v381 * v376;
                      int v374 = v90[1];
                    }
                    int v368 = *v90;
                  }
                  uint64_t v371 = *(void *)v380 + v371 - v382 * v374;
                  ++v369;
                }
                while (v369 < v368);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v338 = 0;
                v339 = v89[19];
                uint64_t v340 = v3[19];
                do
                {
                  v341 = *v89;
                  unint64_t v342 = (unint64_t)((char *)v89[1] - (char *)*v89) >> 2;
                  uint64_t v343 = 0;
                  uint64_t v344 = (v342 - 1);
                  if ((int)v342 - 1 >= 0)
                  {
                    v345 = v89[3];
                    LODWORD(result) = v338;
                    do
                    {
                      ldiv_t v346 = ldiv((int)result, v341[v344]);
                      uint64_t result = v346.quot;
                      v343 += *(void *)&v345[2 * v344--] * v346.rem;
                    }
                    while (v344 != -1);
                  }
                  *(unsigned char *)(v340 + v338++) = *((unsigned char *)v339 + v343);
                }
                while (v338 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v95 = *(int ***)result;
          v96 = (uint64_t *)(*(void *)result + 24);
          v97 = v3 + 3;
          uint64_t v99 = **(void **)result;
          uint64_t v98 = *(void *)(*(void *)result + 8);
          uint64_t v100 = v98 - v99;
          switch((v98 - v99) >> 2)
          {
            case 1:
              uint64_t v101 = (v100 << 30) - 0x100000000;
              int v102 = *(_DWORD *)(v99 + (v101 >> 30));
              if (v102 >= 1)
              {
                uint64_t v103 = v101 >> 29;
                uint64_t v104 = *(void *)(*v96 + v103);
                uint64_t v105 = *(void *)(*v97 + v103);
                v106 = (unsigned char *)v3[19];
                v107 = v95[19];
                do
                {
                  unsigned char *v106 = *(unsigned char *)v107;
                  v107 = (int *)((char *)v107 + v104);
                  v106 += v105;
                  --v102;
                }
                while (v102);
              }
              break;
            case 2:
              uint64_t v913 = (v100 << 30) - 0x200000000;
              int v914 = *(_DWORD *)(v99 + (v913 >> 30));
              if (v914 >= 1)
              {
                int v915 = 0;
                uint64_t v916 = 0;
                uint64_t v917 = 0;
                uint64_t v918 = v913 >> 29;
                uint64_t v919 = *(void *)(*v96 + (v913 >> 29));
                uint64_t v920 = *(void *)(*v97 + v918);
                do
                {
                  uint64_t v921 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v922 = *(int *)((char *)*v95 + (v921 >> 30));
                  if (v922 >= 1)
                  {
                    uint64_t v923 = v921 >> 29;
                    uint64_t v924 = *(void *)((char *)v95[3] + (v921 >> 29));
                    uint64_t v925 = *(void *)(*v97 + v923);
                    uint64_t result = (*a2)[19];
                    uint64_t v926 = *(void *)(*(void *)v5 + 152);
                    do
                    {
                      *(unsigned char *)(result + v917) = *(unsigned char *)(v926 + v916);
                      result += v925;
                      v926 += v924;
                      --v922;
                    }
                    while (v922);
                  }
                  v916 += v919;
                  v917 += v920;
                  ++v915;
                }
                while (v915 != v914);
              }
              break;
            case 3:
              uint64_t v927 = (v100 << 30) - 0x300000000;
              int v928 = *(_DWORD *)(v99 + (v927 >> 30));
              if (v928 >= 1)
              {
                int v929 = 0;
                uint64_t v930 = 0;
                uint64_t v931 = 0;
                uint64_t v932 = v927 >> 29;
                uint64_t v933 = *(void *)(*v96 + (v927 >> 29));
                uint64_t v934 = *(void *)(*v97 + v932);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v935 = *(int *)((char *)*v95 + (result >> 30));
                  if (v935 >= 1)
                  {
                    int v936 = 0;
                    uint64_t v937 = result >> 29;
                    uint64_t result = *(void *)((char *)v95[3] + (result >> 29));
                    uint64_t v938 = *(void *)(*v97 + v937);
                    uint64_t v939 = v930;
                    uint64_t v940 = v931;
                    do
                    {
                      uint64_t v941 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v942 = *(int *)((char *)*v95 + (v941 >> 30));
                      if (v942 >= 1)
                      {
                        uint64_t v943 = v941 >> 29;
                        uint64_t v944 = *(void *)((char *)v95[3] + (v941 >> 29));
                        uint64_t v945 = *(void *)(*v97 + v943);
                        uint64_t v946 = (*a2)[19];
                        uint64_t v947 = *(void *)(*(void *)v5 + 152);
                        do
                        {
                          *(unsigned char *)(v946 + v940) = *(unsigned char *)(v947 + v939);
                          v946 += v945;
                          v947 += v944;
                          --v942;
                        }
                        while (v942);
                      }
                      v939 += result;
                      v940 += v938;
                      ++v936;
                    }
                    while (v936 != v935);
                  }
                  v930 += v933;
                  v931 += v934;
                  ++v929;
                }
                while (v929 != v928);
              }
              break;
            case 4:
              v746 = *(int ***)result;
              v747 = (void *)(*(void *)result + 24);
              v748 = v3 + 3;
LABEL_582:
              break;
            case 5:
              uint64_t v948 = (v100 << 30) - 0x500000000;
              int v949 = *(_DWORD *)(v99 + (v948 >> 30));
              if (v949 >= 1)
              {
                uint64_t v950 = 0;
                uint64_t v951 = 0;
                uint64_t v952 = v948 >> 29;
                uint64_t v953 = *(void *)(*v96 + v952);
                uint64_t v954 = *(void *)(*v97 + v952);
                do
                {
                  v950 += v953;
                  v951 += v954;
                  --v949;
                }
                while (v949);
              }
              break;
            default:
              LODWORD(v892) = 1;
              uint64_t v893 = -20;
              do
              {
                uint64_t v892 = *(int *)(v98 + v893) * (uint64_t)(int)v892;
                v893 += 4;
              }
              while (v893);
              if (v95[6])
              {
                uint64_t result = 0;
                v894 = *(void **)v5;
                v1516 = v97;
                uint64_t v1483 = v892;
                do
                {
                  v895 = *v95;
                  unint64_t v896 = (unint64_t)((char *)v95[1] - (char *)*v95) >> 2;
                  uint64_t v897 = (v896 - 1);
                  uint64_t v1533 = result;
                  v1499 = v894;
                  uint64_t v898 = 0;
                  if ((int)v896 - 1 >= 0)
                  {
                    uint64_t v899 = *v96;
                    do
                    {
                      ldiv_t v900 = ldiv((int)result, v895[v897]);
                      LODWORD(result) = v900.quot;
                      v898 += *(void *)(v899 + 8 * v897--) * v900.rem;
                    }
                    while (v897 != -1);
                  }
                  uint64_t v901 = **a2;
                  unint64_t v902 = (unint64_t)((*a2)[1] - v901) >> 2;
                  uint64_t v903 = *v1516;
                  uint64_t v904 = 0;
                  uint64_t v905 = (v902 - 1);
                  if ((int)v902 - 1 >= 0)
                  {
                    int v906 = v1533;
                    do
                    {
                      ldiv_t v907 = ldiv(v906, *(int *)(v901 + 4 * v905));
                      int v906 = v907.quot;
                      v904 += *(void *)(v903 + 8 * v905--) * v907.rem;
                    }
                    while (v905 != -1);
                  }
                  v894 = v1499;
                  uint64_t v908 = ((v1499[1] - *v1499) << 30) - 0x500000000;
                  int v909 = *(int *)((char *)v895 + (v908 >> 30));
                  if (v909 >= 1)
                  {
                    uint64_t v910 = v908 >> 29;
                    uint64_t v911 = *(void *)(*v96 + v910);
                    uint64_t v912 = *(void *)(v903 + v910);
                    do
                    {
                      v898 += v911;
                      v904 += v912;
                      --v909;
                    }
                    while (v909);
                    v894 = *(void **)v5;
                  }
                  uint64_t result = v1533 + v1483;
                }
                while (v894[6] > (unint64_t)(v1533 + v1483));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          uint64_t v108 = *(void *)(*(void *)result + 160);
          if (v108)
          {
            v109 = *(unsigned __int8 **)(*(void *)result + 152);
            v110 = (_DWORD *)v3[19];
            do
            {
              int v111 = *v109++;
              *v110++ = v111;
              --v108;
            }
            while (v108);
          }
          break;
        case 2:
          v112 = *(int ***)result;
          v113 = **(int ***)result;
          uint64_t v114 = *(void *)(*(void *)result + 8) - (void)v113;
          switch(v114 >> 2)
          {
            case 1:
              if (*v113 >= 1)
              {
                uint64_t v115 = 0;
                v116 = v112[19];
                uint64_t v117 = v3[19];
                uint64_t v118 = *(void *)v112[3];
                do
                {
                  *(_DWORD *)(v117 + 4 * v115) = *(unsigned __int8 *)v116;
                  v116 = (int *)((char *)v116 + v118);
                  ++v115;
                }
                while (*v113 > (int)v115);
              }
              break;
            case 2:
              int v392 = *v113;
              if (*v113 >= 1)
              {
                int v393 = 0;
                uint64_t v394 = 0;
                uint64_t v395 = 0;
                v396 = v112[19];
                uint64_t v397 = v3[19];
                v398 = v112[3];
                uint64_t v399 = *(void *)v398;
                uint64_t v400 = *((void *)v398 + 1);
                int v401 = v113[1];
                do
                {
                  if (v401 >= 1)
                  {
                    uint64_t v402 = 0;
                    do
                    {
                      *(_DWORD *)(v397 + 4 * v394 + 4 * v402) = *((unsigned __int8 *)v396 + v395);
                      v395 += v400;
                      int v401 = v113[1];
                      ++v402;
                    }
                    while ((int)v402 < v401);
                    int v392 = *v113;
                    v394 += v402;
                  }
                  uint64_t v395 = v395 + v399 - v400 * v401;
                  ++v393;
                }
                while (v393 < v392);
              }
              break;
            case 3:
              uint64_t result = *v113;
              if ((int)result >= 1)
              {
                int v403 = 0;
                uint64_t v404 = 0;
                uint64_t v405 = 0;
                v406 = v112[19];
                uint64_t v407 = v3[19];
                v408 = v112[3];
                uint64_t v409 = *(void *)v408;
                uint64_t v410 = *((void *)v408 + 1);
                int v411 = v113[1];
                do
                {
                  if (v411 >= 1)
                  {
                    int v412 = 0;
                    v413 = v112[3];
                    uint64_t v414 = *((void *)v408 + 2);
                    int v415 = v113[2];
                    do
                    {
                      if (v415 >= 1)
                      {
                        uint64_t v416 = 0;
                        uint64_t v417 = *((void *)v413 + 2);
                        do
                        {
                          *(_DWORD *)(v407 + 4 * v404 + 4 * v416) = *((unsigned __int8 *)v406 + v405);
                          v405 += v417;
                          int v415 = v113[2];
                          ++v416;
                        }
                        while ((int)v416 < v415);
                        int v411 = v113[1];
                        v404 += v416;
                      }
                      uint64_t v405 = v405 + v410 - v414 * v415;
                      ++v412;
                    }
                    while (v412 < v411);
                    uint64_t result = *v113;
                  }
                  uint64_t v405 = v405 + v409 - v410 * v411;
                  ++v403;
                }
                while (v403 < (int)result);
              }
              break;
            case 4:
              int v418 = *v113;
              if (*v113 >= 1)
              {
                int v419 = 0;
                uint64_t v420 = 0;
                uint64_t v421 = 0;
                v422 = v112[19];
                uint64_t v423 = v3[19];
                v424 = v112[3];
                uint64_t v425 = *(void *)v424;
                uint64_t v426 = *((void *)v424 + 1);
                int v427 = v113[1];
                do
                {
                  if (v427 >= 1)
                  {
                    int v428 = 0;
                    v429 = v112[3];
                    uint64_t v430 = *((void *)v424 + 2);
                    int v431 = v113[2];
                    do
                    {
                      if (v431 >= 1)
                      {
                        int v432 = 0;
                        v433 = v112[3];
                        uint64_t v434 = *((void *)v429 + 2);
                        uint64_t v435 = *((void *)v429 + 3);
                        int v436 = v113[3];
                        do
                        {
                          if (v436 >= 1)
                          {
                            uint64_t v437 = 0;
                            uint64_t v438 = *((void *)v433 + 3);
                            do
                            {
                              *(_DWORD *)(v423 + 4 * v420 + 4 * v437) = *((unsigned __int8 *)v422 + v421);
                              v421 += v438;
                              int v436 = v113[3];
                              ++v437;
                            }
                            while ((int)v437 < v436);
                            int v431 = v113[2];
                            v420 += v437;
                          }
                          uint64_t v421 = v421 + v434 - v435 * v436;
                          ++v432;
                        }
                        while (v432 < v431);
                        int v427 = v113[1];
                      }
                      uint64_t v421 = v421 + v426 - v430 * v431;
                      ++v428;
                    }
                    while (v428 < v427);
                    int v418 = *v113;
                  }
                  uint64_t result = v427;
                  uint64_t v421 = v421 + v425 - v426 * v427;
                  ++v419;
                }
                while (v419 < v418);
              }
              break;
            default:
              uint64_t v383 = v3[6];
              if (v383)
              {
                uint64_t v384 = 0;
                v385 = v112[19];
                uint64_t v386 = v3[19];
                uint64_t v387 = ((unint64_t)v114 >> 2) - 1;
                v388 = v112[3];
                do
                {
                  uint64_t v389 = 0;
                  if ((v387 & 0x80000000) == 0)
                  {
                    uint64_t v390 = v387;
                    LODWORD(result) = v384;
                    do
                    {
                      ldiv_t v391 = ldiv((int)result, v113[v390]);
                      uint64_t result = v391.quot;
                      v389 += *(void *)&v388[2 * v390--] * v391.rem;
                    }
                    while (v390 != -1);
                  }
                  *(_DWORD *)(v386 + 4 * v384++) = *((unsigned __int8 *)v385 + v389);
                }
                while (v384 != v383);
              }
              break;
          }
          break;
        case 3:
          v119 = *(unsigned int ***)result;
          uint64_t v121 = **(void **)result;
          uint64_t v120 = *(void *)(*(void *)result + 8);
          unint64_t v122 = v120 - v121;
          switch((v120 - v121) >> 2)
          {
            case 1:
              uint64_t v123 = (v122 << 30) - 0x100000000;
              int v124 = *(_DWORD *)(v121 + (v123 >> 30));
              if (v124 >= 1)
              {
                uint64_t v125 = v123 >> 29;
                uint64_t v126 = *(void *)((char *)v119[3] + (v123 >> 29));
                uint64_t v127 = *(void *)(v3[3] + v125);
                v128 = (_DWORD *)v3[19];
                v129 = v119[19];
                uint64_t v130 = 4 * v127;
                do
                {
                  _DWORD *v128 = *(unsigned __int8 *)v129;
                  v129 = (unsigned int *)((char *)v129 + v126);
                  v128 = (_DWORD *)((char *)v128 + v130);
                  --v124;
                }
                while (v124);
              }
              break;
            case 2:
              uint64_t v990 = (v122 << 30) - 0x200000000;
              int v991 = *(_DWORD *)(v121 + (v990 >> 30));
              if (v991 >= 1)
              {
                uint64_t v992 = 0;
                int v993 = 0;
                uint64_t v994 = 0;
                v995 = v119[3];
                uint64_t v996 = v990 >> 29;
                uint64_t v997 = *(void *)((char *)v995 + (v990 >> 29));
                uint64_t v998 = v3[3];
                uint64_t v999 = (v122 << 30) - 0x100000000;
                uint64_t v1000 = *(void *)((char *)v995 + (v999 >> 29));
                uint64_t v1001 = v999 >> 32;
                uint64_t v1002 = 4 * *(void *)(v998 + v996);
                uint64_t v1003 = 4 * *(void *)(v998 + (v999 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v121 + 4 * v1001);
                  if ((int)result >= 1)
                  {
                    v1004 = v119[19];
                    v1005 = (_DWORD *)(v3[19] + v992);
                    do
                    {
                      _DWORD *v1005 = *((unsigned __int8 *)v1004 + v994);
                      v1005 = (_DWORD *)((char *)v1005 + v1003);
                      v1004 = (unsigned int *)((char *)v1004 + v1000);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v994 += v997;
                  ++v993;
                  v992 += v1002;
                }
                while (v993 != v991);
              }
              break;
            case 3:
              uint64_t v1006 = (v122 << 30) - 0x300000000;
              int v1007 = *(_DWORD *)(v121 + (v1006 >> 30));
              if (v1007 >= 1)
              {
                uint64_t v1008 = 0;
                int v1009 = 0;
                uint64_t v1010 = 0;
                uint64_t v1011 = v122 << 30;
                v1012 = v119[3];
                uint64_t v1013 = v1006 >> 29;
                uint64_t v1014 = *(void *)((char *)v1012 + (v1006 >> 29));
                uint64_t v1015 = v3[3];
                uint64_t v1016 = *(void *)(v1015 + v1013);
                uint64_t v1017 = v1011 - 0x200000000;
                uint64_t v1018 = (v1011 - 0x200000000) >> 29;
                uint64_t v1019 = v1011 - 0x100000000;
                uint64_t v1020 = *(void *)((char *)v1012 + v1018);
                uint64_t v1021 = v1017 >> 32;
                uint64_t v1022 = *(void *)(v1015 + v1018);
                uint64_t v1023 = v1019 >> 32;
                uint64_t result = 4 * v1016;
                uint64_t v1024 = 4 * v1022;
                do
                {
                  int v1025 = *(_DWORD *)(v121 + 4 * v1021);
                  if (v1025 >= 1)
                  {
                    int v1026 = 0;
                    uint64_t v1027 = *(void *)&v1012[2 * v1023];
                    v1028 = *a2;
                    uint64_t v1029 = 4 * *(void *)(v1015 + 8 * v1023);
                    uint64_t v1030 = v1008;
                    uint64_t v1031 = v1010;
                    do
                    {
                      int v1032 = *(_DWORD *)(v121 + 4 * v1023);
                      if (v1032 >= 1)
                      {
                        v1033 = v119[19];
                        v1034 = (_DWORD *)(v1028[19] + v1030);
                        do
                        {
                          _DWORD *v1034 = *((unsigned __int8 *)v1033 + v1031);
                          v1034 = (_DWORD *)((char *)v1034 + v1029);
                          v1033 = (unsigned int *)((char *)v1033 + v1027);
                          --v1032;
                        }
                        while (v1032);
                      }
                      v1031 += v1020;
                      ++v1026;
                      v1030 += v1024;
                    }
                    while (v1026 != v1025);
                  }
                  v1010 += v1014;
                  ++v1009;
                  v1008 += result;
                }
                while (v1009 != v1007);
              }
              break;
            case 4:
              uint64_t v1035 = (v122 << 30) - 0x400000000;
              int v1535 = *(_DWORD *)(v121 + (v1035 >> 30));
              if (v1535 >= 1)
              {
                uint64_t v1036 = 0;
                int v1037 = 0;
                uint64_t v1038 = 0;
                uint64_t v1039 = v122 << 30;
                v1040 = v119[3];
                uint64_t v1041 = v1035 >> 29;
                uint64_t v1518 = *(void *)((char *)v1040 + v1041);
                uint64_t v1042 = v3[3];
                uint64_t v1501 = (v1039 - 0x300000000) >> 32;
                uint64_t v1043 = (v1039 - 0x300000000) >> 29;
                uint64_t v1044 = *(void *)((char *)v1040 + v1043);
                uint64_t v1045 = (v1039 - 0x200000000) >> 32;
                uint64_t result = (v1039 - 0x100000000) >> 32;
                uint64_t v1485 = 4 * *(void *)(v1042 + v1041);
                uint64_t v1046 = 4 * *(void *)(v1042 + v1043);
                do
                {
                  int v1047 = *(_DWORD *)(v121 + 4 * v1501);
                  if (v1047 >= 1)
                  {
                    int v1048 = 0;
                    uint64_t v1049 = *(void *)&v1040[2 * v1045];
                    uint64_t v1050 = 4 * *(void *)(v1042 + 8 * v1045);
                    uint64_t v1051 = v1036;
                    uint64_t v1052 = v1038;
                    do
                    {
                      int v1053 = *(_DWORD *)(v121 + 4 * v1045);
                      if (v1053 >= 1)
                      {
                        int v1054 = 0;
                        uint64_t v1055 = *(void *)&v1040[2 * result];
                        v1056 = *a2;
                        uint64_t v1057 = 4 * *(void *)(v1042 + 8 * result);
                        uint64_t v1058 = v1051;
                        uint64_t v1059 = v1052;
                        do
                        {
                          int v1060 = *(_DWORD *)(v121 + 4 * result);
                          if (v1060 >= 1)
                          {
                            v1061 = v119[19];
                            v1062 = (_DWORD *)(v1056[19] + v1058);
                            do
                            {
                              _DWORD *v1062 = *((unsigned __int8 *)v1061 + v1059);
                              v1062 = (_DWORD *)((char *)v1062 + v1057);
                              v1061 = (unsigned int *)((char *)v1061 + v1055);
                              --v1060;
                            }
                            while (v1060);
                          }
                          v1059 += v1049;
                          ++v1054;
                          v1058 += v1050;
                        }
                        while (v1054 != v1053);
                      }
                      v1052 += v1044;
                      ++v1048;
                      v1051 += v1046;
                    }
                    while (v1048 != v1047);
                  }
                  v1038 += v1518;
                  ++v1037;
                  v1036 += v1485;
                }
                while (v1037 != v1535);
              }
              break;
            case 5:
              uint64_t v1063 = (v122 << 30) - 0x500000000;
              int v1442 = *(_DWORD *)(v121 + (v1063 >> 30));
              if (v1442 >= 1)
              {
                uint64_t v1462 = 0;
                uint64_t v1471 = 0;
                int v1452 = 0;
                uint64_t v1064 = v122 << 30;
                v1065 = v119[3];
                uint64_t v1066 = v1063 >> 29;
                uint64_t v1432 = *(void *)((char *)v1065 + v1066);
                uint64_t v1067 = v3[3];
                uint64_t v1068 = (v1064 - 0x400000000) >> 29;
                uint64_t v1422 = (v1064 - 0x400000000) >> 32;
                uint64_t v1502 = *(void *)((char *)v1065 + v1068);
                uint64_t v1519 = (v1064 - 0x300000000) >> 32;
                uint64_t result = (v1064 - 0x200000000) >> 32;
                uint64_t v1069 = (v1064 - 0x100000000) >> 32;
                uint64_t v1412 = 4 * *(void *)(v1067 + v1066);
                uint64_t v1486 = 4 * *(void *)(v1067 + v1068);
                do
                {
                  int v1536 = *(_DWORD *)(v121 + 4 * v1422);
                  if (v1536 >= 1)
                  {
                    int v1070 = 0;
                    uint64_t v1071 = *(void *)&v1065[2 * v1519];
                    uint64_t v1072 = 4 * *(void *)(v1067 + 8 * v1519);
                    uint64_t v1073 = v1462;
                    uint64_t v1074 = v1471;
                    do
                    {
                      int v1075 = *(_DWORD *)(v121 + 4 * v1519);
                      if (v1075 >= 1)
                      {
                        int v1076 = 0;
                        uint64_t v1077 = *(void *)&v1065[2 * result];
                        uint64_t v1078 = 4 * *(void *)(v1067 + 8 * result);
                        uint64_t v1079 = v1074;
                        uint64_t v1080 = v1073;
                        do
                        {
                          int v1081 = *(_DWORD *)(v121 + 4 * result);
                          if (v1081 >= 1)
                          {
                            int v1082 = 0;
                            uint64_t v1083 = *(void *)&v1065[2 * v1069];
                            v1084 = *a2;
                            uint64_t v1085 = 4 * *(void *)(v1067 + 8 * v1069);
                            uint64_t v1086 = v1079;
                            uint64_t v1087 = v1080;
                            do
                            {
                              int v1088 = *(_DWORD *)(v121 + 4 * v1069);
                              if (v1088 >= 1)
                              {
                                v1089 = v119[19];
                                v1090 = (_DWORD *)(v1084[19] + v1086);
                                do
                                {
                                  _DWORD *v1090 = *((unsigned __int8 *)v1089 + v1087);
                                  v1090 = (_DWORD *)((char *)v1090 + v1085);
                                  v1089 = (unsigned int *)((char *)v1089 + v1083);
                                  --v1088;
                                }
                                while (v1088);
                              }
                              v1087 += v1077;
                              ++v1082;
                              v1086 += v1078;
                            }
                            while (v1082 != v1081);
                          }
                          v1080 += v1071;
                          ++v1076;
                          v1079 += v1072;
                        }
                        while (v1076 != v1075);
                      }
                      v1073 += v1502;
                      ++v1070;
                      v1074 += v1486;
                    }
                    while (v1070 != v1536);
                  }
                  v1462 += v1432;
                  v1471 += v1412;
                  ++v1452;
                }
                while (v1452 != v1442);
              }
              break;
            default:
              LODWORD(v955) = 1;
              uint64_t v956 = -20;
              do
              {
                uint64_t v955 = *(int *)(v120 + v956) * (uint64_t)(int)v955;
                v956 += 4;
              }
              while (v956);
              v1399 = v119[6];
              if (v1399)
              {
                uint64_t v957 = 0;
                uint64_t v1389 = (v122 >> 2) - 1;
                v958 = v119[3];
                uint64_t v1374 = *v3;
                uint64_t v1384 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v959 = (v122 << 30) - 0x500000000;
                uint64_t v960 = v3[3];
                uint64_t v1379 = v959 >> 32;
                uint64_t v1421 = *(void *)((char *)v958 + (v959 >> 29));
                uint64_t v1431 = (uint64_t)((v122 << 30) - 0x400000000) >> 32;
                uint64_t v1517 = (uint64_t)((v122 << 30) - 0x300000000) >> 32;
                uint64_t v961 = (uint64_t)((v122 << 30) - 0x200000000) >> 32;
                uint64_t v962 = (uint64_t)((v122 << 30) - 0x100000000) >> 32;
                uint64_t v1411 = 4 * *(void *)(v960 + (v959 >> 29));
                uint64_t v1394 = v955;
                do
                {
                  uint64_t v963 = v1389;
                  if ((v1389 & 0x80000000) != 0)
                  {
                    uint64_t v964 = 0;
                  }
                  else
                  {
                    uint64_t v964 = 0;
                    LODWORD(result) = v957;
                    do
                    {
                      ldiv_t v965 = ldiv((int)result, *(int *)(v121 + 4 * v963));
                      uint64_t result = v965.quot;
                      v964 += *(void *)&v958[2 * v963--] * v965.rem;
                    }
                    while (v963 != -1);
                  }
                  uint64_t v1470 = v964;
                  uint64_t v966 = v1384;
                  uint64_t v1404 = v957;
                  uint64_t v967 = 0;
                  if ((v1384 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v957;
                    do
                    {
                      ldiv_t v968 = ldiv((int)result, *(int *)(v1374 + 4 * v966));
                      uint64_t result = v968.quot;
                      v967 += *(void *)(v960 + 8 * v966--) * v968.rem;
                    }
                    while (v966 != -1);
                  }
                  int v1441 = *(_DWORD *)(v121 + 4 * v1379);
                  if (v1441 >= 1)
                  {
                    int v969 = 0;
                    uint64_t v1461 = 4 * v967;
                    uint64_t v1484 = 4 * *(void *)(v960 + 8 * v1431);
                    uint64_t v1500 = *(void *)&v958[2 * v1431];
                    do
                    {
                      int v1451 = v969;
                      int v1534 = *(_DWORD *)(v121 + 4 * v1431);
                      if (v1534 >= 1)
                      {
                        int v970 = 0;
                        uint64_t v971 = *(void *)&v958[2 * v1517];
                        uint64_t v972 = 4 * *(void *)(v960 + 8 * v1517);
                        uint64_t v973 = v1461;
                        uint64_t v974 = v1470;
                        do
                        {
                          int v975 = *(_DWORD *)(v121 + 4 * v1517);
                          if (v975 >= 1)
                          {
                            int v976 = 0;
                            uint64_t v977 = *(void *)&v958[2 * v961];
                            uint64_t v978 = 4 * *(void *)(v960 + 8 * v961);
                            uint64_t v979 = v973;
                            uint64_t result = v974;
                            do
                            {
                              int v980 = *(_DWORD *)(v121 + 4 * v961);
                              if (v980 >= 1)
                              {
                                int v981 = 0;
                                uint64_t v982 = *(void *)&v958[2 * v962];
                                v983 = *a2;
                                uint64_t v984 = 4 * *(void *)(v960 + 8 * v962);
                                uint64_t v985 = v979;
                                uint64_t v986 = result;
                                do
                                {
                                  int v987 = *(_DWORD *)(v121 + 4 * v962);
                                  if (v987 >= 1)
                                  {
                                    v988 = v119[19];
                                    v989 = (_DWORD *)(v983[19] + v985);
                                    do
                                    {
                                      _DWORD *v989 = *((unsigned __int8 *)v988 + v986);
                                      v989 = (_DWORD *)((char *)v989 + v984);
                                      v988 = (unsigned int *)((char *)v988 + v982);
                                      --v987;
                                    }
                                    while (v987);
                                  }
                                  v986 += v977;
                                  ++v981;
                                  v985 += v978;
                                }
                                while (v981 != v980);
                              }
                              result += v971;
                              ++v976;
                              v979 += v972;
                            }
                            while (v976 != v975);
                          }
                          v974 += v1500;
                          ++v970;
                          v973 += v1484;
                        }
                        while (v970 != v1534);
                      }
                      v1470 += v1421;
                      int v969 = v1451 + 1;
                      v1461 += v1411;
                    }
                    while (v1451 + 1 != v1441);
                  }
                  uint64_t v957 = v1404 + v1394;
                }
                while ((unint64_t)v1399 > v1404 + v1394);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v3[6];
          if (v21)
          {
            uint64_t v22 = **(unsigned __int8 **)(*(void *)result + 152);
            unint64_t v23 = (void *)v3[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v131 = *(void *)(*(void *)result + 160);
          if (v131)
          {
            v132 = *(unsigned __int8 **)(*(void *)result + 152);
            v133 = (void *)v3[19];
            do
            {
              unsigned int v134 = *v132++;
              *v133++ = v134;
              --v131;
            }
            while (v131);
          }
          break;
        case 2:
          v135 = *(int ***)result;
          v136 = **(int ***)result;
          uint64_t v137 = *(void *)(*(void *)result + 8) - (void)v136;
          switch(v137 >> 2)
          {
            case 1:
              uint64_t v138 = *v136;
              if ((int)v138 >= 1)
              {
                v139 = v135[19];
                v140 = (void *)v3[19];
                uint64_t v141 = *(void *)v135[3];
                do
                {
                  *v140++ = *(unsigned __int8 *)v139;
                  v139 = (int *)((char *)v139 + v141);
                  --v138;
                }
                while (v138);
              }
              break;
            case 2:
              int v448 = *v136;
              if (*v136 >= 1)
              {
                int v449 = 0;
                uint64_t v450 = 0;
                uint64_t v451 = 0;
                v452 = v135[19];
                uint64_t v453 = v3[19];
                uint64_t v454 = v136[1];
                v455 = v135[3];
                uint64_t v457 = *(void *)v455;
                uint64_t v456 = *((void *)v455 + 1);
                uint64_t v458 = v457 - v456 * v454;
                do
                {
                  int v459 = v454;
                  if ((int)v454 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((unsigned __int8 *)v452 + v451);
                      *(void *)(v453 + 8 * v450++) = result;
                      v451 += v456;
                      --v459;
                    }
                    while (v459);
                  }
                  v451 += v458;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3:
              int v460 = *v136;
              if (*v136 >= 1)
              {
                int v461 = 0;
                uint64_t result = 0;
                uint64_t v462 = 0;
                v463 = v135[19];
                uint64_t v464 = v3[19];
                uint64_t v465 = v136[1];
                v466 = v135[3];
                uint64_t v467 = *((void *)v466 + 1);
                uint64_t v468 = *(void *)v466 - v467 * v465;
                do
                {
                  if ((int)v465 < 1)
                  {
                    uint64_t v475 = result;
                  }
                  else
                  {
                    int v469 = 0;
                    uint64_t v470 = v136[2];
                    v471 = v135[3];
                    uint64_t v472 = v467 - *((void *)v466 + 2) * v470;
                    do
                    {
                      if ((int)v470 < 1)
                      {
                        uint64_t v475 = result;
                      }
                      else
                      {
                        uint64_t v473 = *((void *)v471 + 2);
                        int v474 = v470;
                        do
                        {
                          uint64_t v475 = result + 1;
                          *(void *)(v464 + 8 * result) = *((unsigned __int8 *)v463 + v462);
                          v462 += v473;
                          ++result;
                          --v474;
                        }
                        while (v474);
                      }
                      v462 += v472;
                      ++v469;
                      uint64_t result = v475;
                    }
                    while (v469 != v465);
                  }
                  v462 += v468;
                  ++v461;
                  uint64_t result = v475;
                }
                while (v461 != v460);
              }
              break;
            case 4:
              int v476 = *v136;
              if (*v136 >= 1)
              {
                int v477 = 0;
                uint64_t result = 0;
                uint64_t v478 = 0;
                v479 = v135[19];
                uint64_t v480 = v3[19];
                uint64_t v481 = v136[1];
                v482 = v135[3];
                uint64_t v483 = *((void *)v482 + 1);
                uint64_t v484 = *(void *)v482 - v483 * v481;
                do
                {
                  if ((int)v481 < 1)
                  {
                    uint64_t v495 = result;
                  }
                  else
                  {
                    int v485 = 0;
                    uint64_t v486 = v136[2];
                    v487 = v135[3];
                    uint64_t v488 = v483 - *((void *)v482 + 2) * v486;
                    do
                    {
                      if ((int)v486 < 1)
                      {
                        uint64_t v495 = result;
                      }
                      else
                      {
                        int v489 = 0;
                        uint64_t v490 = v136[3];
                        v491 = v135[3];
                        uint64_t v492 = *((void *)v487 + 2) - *((void *)v487 + 3) * v490;
                        do
                        {
                          if ((int)v490 < 1)
                          {
                            uint64_t v495 = result;
                          }
                          else
                          {
                            uint64_t v493 = *((void *)v491 + 3);
                            int v494 = v490;
                            do
                            {
                              uint64_t v495 = result + 1;
                              *(void *)(v480 + 8 * result) = *((unsigned __int8 *)v479 + v478);
                              v478 += v493;
                              ++result;
                              --v494;
                            }
                            while (v494);
                          }
                          v478 += v492;
                          ++v489;
                          uint64_t result = v495;
                        }
                        while (v489 != v486);
                      }
                      v478 += v488;
                      ++v485;
                      uint64_t result = v495;
                    }
                    while (v485 != v481);
                  }
                  v478 += v484;
                  ++v477;
                  uint64_t result = v495;
                }
                while (v477 != v476);
              }
              break;
            default:
              uint64_t v439 = v3[6];
              if (v439)
              {
                uint64_t v440 = 0;
                v441 = v135[19];
                uint64_t v442 = v3[19];
                uint64_t v443 = ((unint64_t)v137 >> 2) - 1;
                v444 = v135[3];
                do
                {
                  uint64_t v445 = 0;
                  if ((v443 & 0x80000000) == 0)
                  {
                    uint64_t v446 = v443;
                    LODWORD(result) = v440;
                    do
                    {
                      ldiv_t v447 = ldiv((int)result, v136[v446]);
                      uint64_t result = v447.quot;
                      v445 += *(void *)&v444[2 * v446--] * v447.rem;
                    }
                    while (v446 != -1);
                  }
                  *(void *)(v442 + 8 * v440++) = *((unsigned __int8 *)v441 + v445);
                }
                while (v440 != v439);
              }
              break;
          }
          break;
        case 3:
          v142 = *(unsigned int ***)result;
          uint64_t v144 = **(void **)result;
          uint64_t v143 = *(void *)(*(void *)result + 8);
          unint64_t v145 = v143 - v144;
          switch((v143 - v144) >> 2)
          {
            case 1:
              uint64_t v146 = (v145 << 30) - 0x100000000;
              int v147 = *(_DWORD *)(v144 + (v146 >> 30));
              if (v147 >= 1)
              {
                uint64_t v148 = v146 >> 29;
                uint64_t v149 = *(void *)((char *)v142[3] + (v146 >> 29));
                uint64_t v150 = *(void *)(v3[3] + v148);
                v151 = (void *)v3[19];
                v152 = v142[19];
                uint64_t v153 = 8 * v150;
                do
                {
                  void *v151 = *(unsigned __int8 *)v152;
                  v152 = (unsigned int *)((char *)v152 + v149);
                  v151 = (void *)((char *)v151 + v153);
                  --v147;
                }
                while (v147);
              }
              break;
            case 2:
              uint64_t v1125 = (v145 << 30) - 0x200000000;
              int v1126 = *(_DWORD *)(v144 + (v1125 >> 30));
              if (v1126 >= 1)
              {
                uint64_t v1127 = 0;
                int v1128 = 0;
                uint64_t v1129 = 0;
                uint64_t v1130 = v145 << 30;
                v1131 = v142[3];
                uint64_t v1132 = v1125 >> 29;
                uint64_t v1133 = *(void *)((char *)v1131 + (v1125 >> 29));
                uint64_t v1134 = v3[3];
                uint64_t result = v1130 - 0x100000000;
                uint64_t v1135 = (v1130 - 0x100000000) >> 29;
                uint64_t v1136 = *(void *)((char *)v1131 + v1135);
                int v1137 = *(_DWORD *)(v144 + (result >> 30));
                uint64_t v1138 = 8 * *(void *)(v1134 + v1132);
                uint64_t v1139 = 8 * *(void *)(v1134 + v1135);
                do
                {
                  if (v1137 >= 1)
                  {
                    uint64_t result = (uint64_t)v142[19];
                    v1140 = (void *)(v3[19] + v1127);
                    int v1141 = v1137;
                    do
                    {
                      void *v1140 = *(unsigned __int8 *)(result + v1129);
                      v1140 = (void *)((char *)v1140 + v1139);
                      result += v1136;
                      --v1141;
                    }
                    while (v1141);
                  }
                  v1129 += v1133;
                  ++v1128;
                  v1127 += v1138;
                }
                while (v1128 != v1126);
              }
              break;
            case 3:
              uint64_t v1142 = (v145 << 30) - 0x300000000;
              int v1143 = *(_DWORD *)(v144 + (v1142 >> 30));
              if (v1143 >= 1)
              {
                uint64_t v1144 = 0;
                int v1145 = 0;
                uint64_t v1146 = 0;
                uint64_t v1147 = v145 << 30;
                v1148 = v142[3];
                uint64_t v1149 = v1142 >> 29;
                uint64_t v1150 = *(void *)((char *)v1148 + (v1142 >> 29));
                uint64_t v1151 = v3[3];
                uint64_t v1152 = *(void *)(v1151 + v1149);
                uint64_t v1153 = v1147 - 0x200000000;
                uint64_t v1154 = (v1147 - 0x200000000) >> 29;
                uint64_t v1155 = v1147 - 0x100000000;
                uint64_t v1156 = *(void *)((char *)v1148 + v1154);
                uint64_t v1157 = *(void *)(v1151 + v1154);
                int v1158 = *(_DWORD *)(v144 + (v1153 >> 30));
                uint64_t v1159 = v1155 >> 32;
                uint64_t result = 8 * v1152;
                uint64_t v1160 = 8 * v1157;
                do
                {
                  if (v1158 >= 1)
                  {
                    int v1161 = 0;
                    uint64_t v1162 = *(void *)&v1148[2 * v1159];
                    int v1163 = *(_DWORD *)(v144 + 4 * v1159);
                    v1164 = *a2;
                    uint64_t v1165 = 8 * *(void *)(v1151 + 8 * v1159);
                    uint64_t v1166 = v1144;
                    uint64_t v1167 = v1146;
                    do
                    {
                      if (v1163 >= 1)
                      {
                        v1168 = v142[19];
                        v1169 = (void *)(v1164[19] + v1166);
                        int v1170 = v1163;
                        do
                        {
                          void *v1169 = *((unsigned __int8 *)v1168 + v1167);
                          v1169 = (void *)((char *)v1169 + v1165);
                          v1168 = (unsigned int *)((char *)v1168 + v1162);
                          --v1170;
                        }
                        while (v1170);
                      }
                      v1167 += v1156;
                      ++v1161;
                      v1166 += v1160;
                    }
                    while (v1161 != v1158);
                  }
                  v1146 += v1150;
                  ++v1145;
                  v1144 += result;
                }
                while (v1145 != v1143);
              }
              break;
            case 4:
              uint64_t v1171 = (v145 << 30) - 0x400000000;
              int v1538 = *(_DWORD *)(v144 + (v1171 >> 30));
              if (v1538 >= 1)
              {
                uint64_t v1172 = 0;
                int v1173 = 0;
                uint64_t v1174 = 0;
                v1175 = v142[3];
                uint64_t v1176 = v1171 >> 29;
                uint64_t v1521 = *(void *)((char *)v1175 + v1176);
                uint64_t v1177 = v3[3];
                uint64_t v1178 = (v145 << 30) - 0x300000000;
                uint64_t v1179 = (v145 << 30) - 0x200000000;
                uint64_t v1180 = (v145 << 30) - 0x100000000;
                uint64_t v1181 = *(void *)((char *)v1175 + (v1178 >> 29));
                uint64_t v1182 = *(void *)(v1177 + (v1178 >> 29));
                int v1183 = *(_DWORD *)(v144 + (v1178 >> 30));
                uint64_t v1184 = v1179 >> 32;
                uint64_t result = v1180 >> 32;
                uint64_t v1504 = 8 * *(void *)(v1177 + v1176);
                uint64_t v1185 = 8 * v1182;
                do
                {
                  if (v1183 >= 1)
                  {
                    int v1186 = 0;
                    uint64_t v1187 = *(void *)&v1175[2 * v1184];
                    int v1188 = *(_DWORD *)(v144 + 4 * v1184);
                    uint64_t v1189 = 8 * *(void *)(v1177 + 8 * v1184);
                    uint64_t v1190 = v1172;
                    uint64_t v1191 = v1174;
                    do
                    {
                      if (v1188 >= 1)
                      {
                        int v1192 = 0;
                        uint64_t v1193 = *(void *)&v1175[2 * result];
                        int v1194 = *(_DWORD *)(v144 + 4 * result);
                        v1195 = *a2;
                        uint64_t v1196 = 8 * *(void *)(v1177 + 8 * result);
                        uint64_t v1197 = v1190;
                        uint64_t v1198 = v1191;
                        do
                        {
                          if (v1194 >= 1)
                          {
                            v1199 = v142[19];
                            v1200 = (void *)(v1195[19] + v1197);
                            int v1201 = v1194;
                            do
                            {
                              void *v1200 = *((unsigned __int8 *)v1199 + v1198);
                              v1200 = (void *)((char *)v1200 + v1196);
                              v1199 = (unsigned int *)((char *)v1199 + v1193);
                              --v1201;
                            }
                            while (v1201);
                          }
                          v1198 += v1187;
                          ++v1192;
                          v1197 += v1189;
                        }
                        while (v1192 != v1188);
                      }
                      v1191 += v1181;
                      ++v1186;
                      v1190 += v1185;
                    }
                    while (v1186 != v1183);
                  }
                  v1174 += v1521;
                  ++v1173;
                  v1172 += v1504;
                }
                while (v1173 != v1538);
              }
              break;
            case 5:
              uint64_t v1202 = (v145 << 30) - 0x500000000;
              int v1444 = *(_DWORD *)(v144 + (v1202 >> 30));
              if (v1444 >= 1)
              {
                uint64_t v1464 = 0;
                uint64_t v1473 = 0;
                int v1454 = 0;
                v1203 = v142[3];
                uint64_t v1204 = v1202 >> 29;
                uint64_t v1434 = *(void *)((char *)v1203 + v1204);
                uint64_t v1205 = v3[3];
                uint64_t v1206 = (v145 << 30) - 0x400000000;
                uint64_t v1522 = *(void *)((char *)v1203 + (v1206 >> 29));
                int v1539 = *(_DWORD *)(v144 + (v1206 >> 30));
                uint64_t v1414 = (uint64_t)((v145 << 30) - 0x300000000) >> 32;
                uint64_t v1207 = (uint64_t)((v145 << 30) - 0x100000000) >> 32;
                uint64_t v1424 = 8 * *(void *)(v1205 + v1204);
                uint64_t v1488 = (uint64_t)((v145 << 30) - 0x200000000) >> 32;
                uint64_t v1505 = 8 * *(void *)(v1205 + (v1206 >> 29));
                do
                {
                  if (v1539 >= 1)
                  {
                    int v1208 = 0;
                    uint64_t v1209 = *(void *)&v1203[2 * v1414];
                    int v1210 = *(_DWORD *)(v144 + 4 * v1414);
                    uint64_t v1211 = 8 * *(void *)(v1205 + 8 * v1414);
                    uint64_t v1212 = v1464;
                    uint64_t v1213 = v1473;
                    do
                    {
                      if (v1210 >= 1)
                      {
                        int v1214 = 0;
                        uint64_t v1215 = *(void *)&v1203[2 * v1488];
                        int v1216 = *(_DWORD *)(v144 + 4 * v1488);
                        uint64_t v1217 = 8 * *(void *)(v1205 + 8 * v1488);
                        uint64_t v1218 = v1213;
                        uint64_t v1219 = v1212;
                        do
                        {
                          if (v1216 >= 1)
                          {
                            int v1220 = 0;
                            uint64_t v1221 = *(void *)&v1203[2 * v1207];
                            int v1222 = *(_DWORD *)(v144 + 4 * v1207);
                            v1223 = *a2;
                            uint64_t v1224 = 8 * *(void *)(v1205 + 8 * v1207);
                            uint64_t v1225 = v1218;
                            uint64_t v1226 = v1219;
                            do
                            {
                              if (v1222 >= 1)
                              {
                                v1227 = v142[19];
                                v1228 = (uint64_t *)(v1223[19] + v1225);
                                int v1229 = v1222;
                                do
                                {
                                  uint64_t result = *((unsigned __int8 *)v1227 + v1226);
                                  uint64_t *v1228 = result;
                                  v1228 = (uint64_t *)((char *)v1228 + v1224);
                                  v1227 = (unsigned int *)((char *)v1227 + v1221);
                                  --v1229;
                                }
                                while (v1229);
                              }
                              v1226 += v1215;
                              ++v1220;
                              v1225 += v1217;
                            }
                            while (v1220 != v1216);
                          }
                          v1219 += v1209;
                          ++v1214;
                          v1218 += v1211;
                        }
                        while (v1214 != v1210);
                      }
                      v1212 += v1522;
                      ++v1208;
                      v1213 += v1505;
                    }
                    while (v1208 != v1539);
                  }
                  v1464 += v1434;
                  v1473 += v1424;
                  ++v1454;
                }
                while (v1454 != v1444);
              }
              break;
            default:
              LODWORD(v1091) = 1;
              uint64_t v1092 = -20;
              do
              {
                uint64_t v1091 = *(int *)(v143 + v1092) * (uint64_t)(int)v1091;
                v1092 += 4;
              }
              while (v1092);
              v1400 = v142[6];
              if (v1400)
              {
                uint64_t v1093 = 0;
                uint64_t v1380 = *v3;
                uint64_t v1094 = (v145 << 30) - 0x500000000;
                uint64_t v1390 = (v145 >> 2) - 1;
                v1095 = v142[3];
                uint64_t v1096 = v3[3];
                int v1443 = *(_DWORD *)(v144 + (v1094 >> 30));
                uint64_t v1385 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1375 = (uint64_t)((v145 << 30) - 0x400000000) >> 32;
                uint64_t v1413 = (uint64_t)((v145 << 30) - 0x300000000) >> 32;
                uint64_t v1487 = (uint64_t)((v145 << 30) - 0x200000000) >> 32;
                uint64_t v1097 = (uint64_t)((v145 << 30) - 0x100000000) >> 32;
                uint64_t v1423 = 8 * *(void *)(v1096 + (v1094 >> 29));
                uint64_t v1433 = *(void *)((char *)v1095 + (v1094 >> 29));
                uint64_t v1395 = v1091;
                do
                {
                  uint64_t v1098 = v1390;
                  if ((v1390 & 0x80000000) != 0)
                  {
                    uint64_t v1099 = 0;
                    uint64_t v1100 = v1385;
                  }
                  else
                  {
                    uint64_t v1099 = 0;
                    LODWORD(result) = v1093;
                    uint64_t v1100 = v1385;
                    do
                    {
                      ldiv_t v1101 = ldiv((int)result, *(int *)(v144 + 4 * v1098));
                      uint64_t result = v1101.quot;
                      v1099 += *(void *)&v1095[2 * v1098--] * v1101.rem;
                    }
                    while (v1098 != -1);
                  }
                  uint64_t v1405 = v1093;
                  uint64_t v1102 = 0;
                  if ((v1100 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1093;
                    do
                    {
                      ldiv_t v1103 = ldiv((int)result, *(int *)(v1380 + 4 * v1100));
                      uint64_t result = v1103.quot;
                      v1102 += *(void *)(v1096 + 8 * v1100--) * v1103.rem;
                    }
                    while (v1100 != -1);
                  }
                  if (v1443 >= 1)
                  {
                    int v1104 = 0;
                    uint64_t v1520 = *(void *)&v1095[2 * v1375];
                    int v1537 = *(_DWORD *)(v144 + 4 * v1375);
                    uint64_t v1472 = 8 * v1102;
                    uint64_t v1503 = 8 * *(void *)(v1096 + 8 * v1375);
                    do
                    {
                      int v1453 = v1104;
                      uint64_t v1463 = v1099;
                      if (v1537 >= 1)
                      {
                        int v1105 = 0;
                        uint64_t v1106 = *(void *)&v1095[2 * v1413];
                        int v1107 = *(_DWORD *)(v144 + 4 * v1413);
                        uint64_t v1108 = 8 * *(void *)(v1096 + 8 * v1413);
                        uint64_t v1109 = v1472;
                        do
                        {
                          if (v1107 >= 1)
                          {
                            int v1110 = 0;
                            uint64_t v1111 = *(void *)&v1095[2 * v1487];
                            int v1112 = *(_DWORD *)(v144 + 4 * v1487);
                            uint64_t v1113 = 8 * *(void *)(v1096 + 8 * v1487);
                            uint64_t v1114 = v1109;
                            uint64_t result = v1099;
                            do
                            {
                              if (v1112 >= 1)
                              {
                                int v1115 = 0;
                                uint64_t v1116 = *(void *)&v1095[2 * v1097];
                                int v1117 = *(_DWORD *)(v144 + 4 * v1097);
                                v1118 = *a2;
                                uint64_t v1119 = 8 * *(void *)(v1096 + 8 * v1097);
                                uint64_t v1120 = v1114;
                                uint64_t v1121 = result;
                                do
                                {
                                  if (v1117 >= 1)
                                  {
                                    v1122 = v142[19];
                                    v1123 = (void *)(v1118[19] + v1120);
                                    int v1124 = v1117;
                                    do
                                    {
                                      void *v1123 = *((unsigned __int8 *)v1122 + v1121);
                                      v1123 = (void *)((char *)v1123 + v1119);
                                      v1122 = (unsigned int *)((char *)v1122 + v1116);
                                      --v1124;
                                    }
                                    while (v1124);
                                  }
                                  v1121 += v1111;
                                  ++v1115;
                                  v1120 += v1113;
                                }
                                while (v1115 != v1112);
                              }
                              result += v1106;
                              ++v1110;
                              v1114 += v1108;
                            }
                            while (v1110 != v1107);
                          }
                          v1099 += v1520;
                          ++v1105;
                          v1109 += v1503;
                        }
                        while (v1105 != v1537);
                      }
                      uint64_t v1099 = v1463 + v1433;
                      int v1104 = v1453 + 1;
                      v1472 += v1423;
                    }
                    while (v1453 + 1 != v1443);
                  }
                  v1093 += v1395;
                }
                while ((unint64_t)v1400 > v1405 + v1395);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          float v24 = 0.0;
          if (**(unsigned char **)(*(void *)result + 152)) {
            float v24 = 1.0;
          }
          uint64_t v25 = v3[6];
          if (v25)
          {
            uint64_t v26 = (float *)v3[19];
            do
            {
              *v26++ = v24;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
          uint64_t v154 = *(void *)(*(void *)result + 160);
          if (v154)
          {
            v155 = *(unsigned __int8 **)(*(void *)result + 152);
            v156 = (float *)v3[19];
            do
            {
              if (*v155++) {
                float v158 = 1.0;
              }
              else {
                float v158 = 0.0;
              }
              *v156++ = v158;
              --v154;
            }
            while (v154);
          }
          break;
        case 2:
          v159 = *(int ***)result;
          v160 = **(int ***)result;
          uint64_t v161 = *(void *)(*(void *)result + 8) - (void)v160;
          switch(v161 >> 2)
          {
            case 1:
              uint64_t v162 = *v160;
              if ((int)v162 >= 1)
              {
                v163 = v159[19];
                v164 = (float *)v3[19];
                uint64_t v165 = *(void *)v159[3];
                do
                {
                  if (*(unsigned char *)v163) {
                    float v166 = 1.0;
                  }
                  else {
                    float v166 = 0.0;
                  }
                  *v164++ = v166;
                  v163 = (int *)((char *)v163 + v165);
                  --v162;
                }
                while (v162);
              }
              break;
            case 2:
              int v506 = *v160;
              if (*v160 >= 1)
              {
                int v507 = 0;
                uint64_t v508 = 0;
                uint64_t v509 = 0;
                v510 = v159[19];
                uint64_t v511 = v3[19];
                uint64_t v512 = v160[1];
                v513 = v159[3];
                uint64_t v515 = *(void *)v513;
                uint64_t v514 = *((void *)v513 + 1);
                uint64_t v516 = v515 - v514 * v512;
                do
                {
                  int v517 = v512;
                  if ((int)v512 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((unsigned __int8 *)v510 + v509);
                      if (*((unsigned char *)v510 + v509)) {
                        float v518 = 1.0;
                      }
                      else {
                        float v518 = 0.0;
                      }
                      *(float *)(v511 + 4 * v508++) = v518;
                      v509 += v514;
                      --v517;
                    }
                    while (v517);
                  }
                  v509 += v516;
                  ++v507;
                }
                while (v507 != v506);
              }
              break;
            case 3:
              int v519 = *v160;
              if (*v160 >= 1)
              {
                int v520 = 0;
                uint64_t result = 0;
                uint64_t v521 = 0;
                v522 = v159[19];
                uint64_t v523 = v3[19];
                uint64_t v524 = v160[1];
                v525 = v159[3];
                uint64_t v526 = *((void *)v525 + 1);
                uint64_t v527 = *(void *)v525 - v526 * v524;
                do
                {
                  if ((int)v524 < 1)
                  {
                    uint64_t v534 = result;
                  }
                  else
                  {
                    int v528 = 0;
                    uint64_t v529 = v160[2];
                    v530 = v159[3];
                    uint64_t v531 = v526 - *((void *)v525 + 2) * v529;
                    do
                    {
                      if ((int)v529 < 1)
                      {
                        uint64_t v534 = result;
                      }
                      else
                      {
                        uint64_t v532 = *((void *)v530 + 2);
                        int v533 = v529;
                        do
                        {
                          uint64_t v534 = result + 1;
                          if (*((unsigned char *)v522 + v521)) {
                            float v535 = 1.0;
                          }
                          else {
                            float v535 = 0.0;
                          }
                          *(float *)(v523 + 4 * result) = v535;
                          v521 += v532;
                          ++result;
                          --v533;
                        }
                        while (v533);
                      }
                      v521 += v531;
                      ++v528;
                      uint64_t result = v534;
                    }
                    while (v528 != v524);
                  }
                  v521 += v527;
                  ++v520;
                  uint64_t result = v534;
                }
                while (v520 != v519);
              }
              break;
            case 4:
              int v536 = *v160;
              if (*v160 >= 1)
              {
                int v537 = 0;
                uint64_t result = 0;
                uint64_t v538 = 0;
                v539 = v159[19];
                uint64_t v540 = v3[19];
                uint64_t v541 = v160[1];
                v542 = v159[3];
                uint64_t v543 = *((void *)v542 + 1);
                uint64_t v544 = *(void *)v542 - v543 * v541;
                do
                {
                  if ((int)v541 < 1)
                  {
                    uint64_t v555 = result;
                  }
                  else
                  {
                    int v545 = 0;
                    uint64_t v546 = v160[2];
                    v547 = v159[3];
                    uint64_t v548 = v543 - *((void *)v542 + 2) * v546;
                    do
                    {
                      if ((int)v546 < 1)
                      {
                        uint64_t v555 = result;
                      }
                      else
                      {
                        int v549 = 0;
                        uint64_t v550 = v160[3];
                        v551 = v159[3];
                        uint64_t v552 = *((void *)v547 + 2) - *((void *)v547 + 3) * v550;
                        do
                        {
                          if ((int)v550 < 1)
                          {
                            uint64_t v555 = result;
                          }
                          else
                          {
                            uint64_t v553 = *((void *)v551 + 3);
                            int v554 = v550;
                            do
                            {
                              uint64_t v555 = result + 1;
                              if (*((unsigned char *)v539 + v538)) {
                                float v556 = 1.0;
                              }
                              else {
                                float v556 = 0.0;
                              }
                              *(float *)(v540 + 4 * result) = v556;
                              v538 += v553;
                              ++result;
                              --v554;
                            }
                            while (v554);
                          }
                          v538 += v552;
                          ++v549;
                          uint64_t result = v555;
                        }
                        while (v549 != v546);
                      }
                      v538 += v548;
                      ++v545;
                      uint64_t result = v555;
                    }
                    while (v545 != v541);
                  }
                  v538 += v544;
                  ++v537;
                  uint64_t result = v555;
                }
                while (v537 != v536);
              }
              break;
            default:
              uint64_t v496 = v3[6];
              if (v496)
              {
                uint64_t v497 = 0;
                v498 = v159[19];
                uint64_t v499 = v3[19];
                uint64_t v500 = ((unint64_t)v161 >> 2) - 1;
                v501 = v159[3];
                do
                {
                  uint64_t v502 = 0;
                  if ((v500 & 0x80000000) == 0)
                  {
                    uint64_t v503 = v500;
                    LODWORD(result) = v497;
                    do
                    {
                      ldiv_t v504 = ldiv((int)result, v160[v503]);
                      uint64_t result = v504.quot;
                      v502 += *(void *)&v501[2 * v503--] * v504.rem;
                    }
                    while (v503 != -1);
                  }
                  if (*((unsigned char *)v498 + v502)) {
                    float v505 = 1.0;
                  }
                  else {
                    float v505 = 0.0;
                  }
                  *(float *)(v499 + 4 * v497++) = v505;
                }
                while (v497 != v496);
              }
              break;
          }
          break;
        case 3:
          v167 = *(unsigned int ***)result;
          uint64_t v169 = **(void **)result;
          uint64_t v168 = *(void *)(*(void *)result + 8);
          unint64_t v170 = v168 - v169;
          switch((v168 - v169) >> 2)
          {
            case 1:
              uint64_t v171 = (v170 << 30) - 0x100000000;
              int v172 = *(_DWORD *)(v169 + (v171 >> 30));
              if (v172 >= 1)
              {
                uint64_t v173 = v171 >> 29;
                uint64_t v174 = *(void *)((char *)v167[3] + (v171 >> 29));
                uint64_t v175 = *(void *)(v3[3] + v173);
                v176 = (float *)v3[19];
                v177 = v167[19];
                uint64_t v178 = 4 * v175;
                do
                {
                  if (*(unsigned char *)v177) {
                    float v179 = 1.0;
                  }
                  else {
                    float v179 = 0.0;
                  }
                  float *v176 = v179;
                  v177 = (unsigned int *)((char *)v177 + v174);
                  v176 = (float *)((char *)v176 + v178);
                  --v172;
                }
                while (v172);
              }
              break;
            case 2:
              uint64_t v1266 = (v170 << 30) - 0x200000000;
              int v1267 = *(_DWORD *)(v169 + (v1266 >> 30));
              if (v1267 >= 1)
              {
                uint64_t v1268 = 0;
                int v1269 = 0;
                uint64_t v1270 = 0;
                v1271 = v167[3];
                uint64_t v1272 = v1266 >> 29;
                uint64_t v1273 = *(void *)((char *)v1271 + (v1266 >> 29));
                uint64_t v1274 = v3[3];
                uint64_t v1275 = *(void *)(v1274 + v1272);
                uint64_t v1276 = (v170 << 30) - 0x100000000;
                uint64_t result = v1276 >> 29;
                uint64_t v1277 = *(void *)((char *)v1271 + (v1276 >> 29));
                uint64_t v1278 = *(void *)(v1274 + (v1276 >> 29));
                int v1279 = *(_DWORD *)(v169 + (v1276 >> 30));
                uint64_t v1280 = 4 * v1275;
                uint64_t v1281 = 4 * v1278;
                do
                {
                  if (v1279 >= 1)
                  {
                    uint64_t result = (uint64_t)v167[19];
                    v1282 = (float *)(v3[19] + v1268);
                    int v1283 = v1279;
                    do
                    {
                      if (*(unsigned char *)(result + v1270)) {
                        float v1284 = 1.0;
                      }
                      else {
                        float v1284 = 0.0;
                      }
                      float *v1282 = v1284;
                      v1282 = (float *)((char *)v1282 + v1281);
                      result += v1277;
                      --v1283;
                    }
                    while (v1283);
                  }
                  v1270 += v1273;
                  ++v1269;
                  v1268 += v1280;
                }
                while (v1269 != v1267);
              }
              break;
            case 3:
              uint64_t v1285 = (v170 << 30) - 0x300000000;
              int v1286 = *(_DWORD *)(v169 + (v1285 >> 30));
              if (v1286 >= 1)
              {
                uint64_t v1287 = 0;
                int v1288 = 0;
                uint64_t v1289 = 0;
                v1290 = v167[3];
                uint64_t v1291 = v1285 >> 29;
                uint64_t v1292 = *(void *)((char *)v1290 + (v1285 >> 29));
                uint64_t v1293 = v3[3];
                uint64_t v1294 = *(void *)(v1293 + v1291);
                uint64_t v1295 = v170 << 30;
                uint64_t v1296 = (v170 << 30) - 0x200000000;
                uint64_t v1297 = *(void *)((char *)v1290 + (v1296 >> 29));
                uint64_t v1298 = *(void *)(v1293 + (v1296 >> 29));
                int v1299 = *(_DWORD *)(v169 + (v1296 >> 30));
                uint64_t v1300 = (v1295 - 0x100000000) >> 32;
                uint64_t result = 4 * v1294;
                uint64_t v1301 = 4 * v1298;
                do
                {
                  if (v1299 >= 1)
                  {
                    int v1302 = 0;
                    uint64_t v1303 = *(void *)&v1290[2 * v1300];
                    int v1304 = *(_DWORD *)(v169 + 4 * v1300);
                    v1305 = *a2;
                    uint64_t v1306 = 4 * *(void *)(v1293 + 8 * v1300);
                    uint64_t v1307 = v1287;
                    uint64_t v1308 = v1289;
                    do
                    {
                      if (v1304 >= 1)
                      {
                        v1309 = v167[19];
                        v1310 = (float *)(v1305[19] + v1307);
                        int v1311 = v1304;
                        do
                        {
                          if (*((unsigned char *)v1309 + v1308)) {
                            float v1312 = 1.0;
                          }
                          else {
                            float v1312 = 0.0;
                          }
                          float *v1310 = v1312;
                          v1310 = (float *)((char *)v1310 + v1306);
                          v1309 = (unsigned int *)((char *)v1309 + v1303);
                          --v1311;
                        }
                        while (v1311);
                      }
                      v1308 += v1297;
                      ++v1302;
                      v1307 += v1301;
                    }
                    while (v1302 != v1299);
                  }
                  v1289 += v1292;
                  ++v1288;
                  v1287 += result;
                }
                while (v1288 != v1286);
              }
              break;
            case 4:
              uint64_t v1313 = (v170 << 30) - 0x400000000;
              int v1541 = *(_DWORD *)(v169 + (v1313 >> 30));
              if (v1541 >= 1)
              {
                uint64_t v1314 = 0;
                int v1315 = 0;
                uint64_t v1316 = 0;
                v1317 = v167[3];
                uint64_t v1318 = v1313 >> 29;
                uint64_t v1524 = *(void *)((char *)v1317 + v1318);
                uint64_t v1319 = v170 << 30;
                uint64_t v1320 = v3[3];
                uint64_t v1321 = (v170 << 30) - 0x300000000;
                uint64_t v1322 = *(void *)((char *)v1317 + (v1321 >> 29));
                uint64_t v1323 = *(void *)(v1320 + (v1321 >> 29));
                int v1324 = *(_DWORD *)(v169 + (v1321 >> 30));
                uint64_t result = (v1319 - 0x100000000) >> 32;
                uint64_t v1490 = (v1319 - 0x200000000) >> 32;
                uint64_t v1507 = 4 * *(void *)(v1320 + v1318);
                uint64_t v1325 = 4 * v1323;
                do
                {
                  if (v1324 >= 1)
                  {
                    int v1326 = 0;
                    uint64_t v1327 = *(void *)&v1317[2 * v1490];
                    int v1328 = *(_DWORD *)(v169 + 4 * v1490);
                    uint64_t v1329 = 4 * *(void *)(v1320 + 8 * v1490);
                    uint64_t v1330 = v1314;
                    uint64_t v1331 = v1316;
                    do
                    {
                      if (v1328 >= 1)
                      {
                        int v1332 = 0;
                        uint64_t v1333 = *(void *)&v1317[2 * result];
                        int v1334 = *(_DWORD *)(v169 + 4 * result);
                        v1335 = *a2;
                        uint64_t v1336 = 4 * *(void *)(v1320 + 8 * result);
                        uint64_t v1337 = v1330;
                        uint64_t v1338 = v1331;
                        do
                        {
                          if (v1334 >= 1)
                          {
                            v1339 = v167[19];
                            v1340 = (float *)(v1335[19] + v1337);
                            int v1341 = v1334;
                            do
                            {
                              if (*((unsigned char *)v1339 + v1338)) {
                                float v1342 = 1.0;
                              }
                              else {
                                float v1342 = 0.0;
                              }
                              float *v1340 = v1342;
                              v1340 = (float *)((char *)v1340 + v1336);
                              v1339 = (unsigned int *)((char *)v1339 + v1333);
                              --v1341;
                            }
                            while (v1341);
                          }
                          v1338 += v1327;
                          ++v1332;
                          v1337 += v1329;
                        }
                        while (v1332 != v1328);
                      }
                      v1331 += v1322;
                      ++v1326;
                      v1330 += v1325;
                    }
                    while (v1326 != v1324);
                  }
                  v1316 += v1524;
                  ++v1315;
                  v1314 += v1507;
                }
                while (v1315 != v1541);
              }
              break;
            case 5:
              uint64_t v1343 = (v170 << 30) - 0x500000000;
              int v1446 = *(_DWORD *)(v169 + (v1343 >> 30));
              if (v1446 >= 1)
              {
                uint64_t v1466 = 0;
                uint64_t v1475 = 0;
                int v1456 = 0;
                v1344 = v167[3];
                uint64_t v1345 = v1343 >> 29;
                uint64_t v1436 = *(void *)((char *)v1344 + v1345);
                uint64_t v1346 = v3[3];
                uint64_t v1347 = (v170 << 30) - 0x400000000;
                uint64_t v1525 = *(void *)((char *)v1344 + (v1347 >> 29));
                int v1542 = *(_DWORD *)(v169 + (v1347 >> 30));
                uint64_t v1416 = (uint64_t)((v170 << 30) - 0x300000000) >> 32;
                uint64_t v1348 = (uint64_t)((v170 << 30) - 0x100000000) >> 32;
                uint64_t v1426 = 4 * *(void *)(v1346 + v1345);
                uint64_t v1491 = (uint64_t)((v170 << 30) - 0x200000000) >> 32;
                uint64_t v1508 = 4 * *(void *)(v1346 + (v1347 >> 29));
                do
                {
                  if (v1542 >= 1)
                  {
                    int v1349 = 0;
                    uint64_t v1350 = *(void *)&v1344[2 * v1416];
                    int v1351 = *(_DWORD *)(v169 + 4 * v1416);
                    uint64_t v1352 = 4 * *(void *)(v1346 + 8 * v1416);
                    uint64_t v1353 = v1466;
                    uint64_t v1354 = v1475;
                    do
                    {
                      if (v1351 >= 1)
                      {
                        int v1355 = 0;
                        uint64_t v1356 = *(void *)&v1344[2 * v1491];
                        int v1357 = *(_DWORD *)(v169 + 4 * v1491);
                        uint64_t v1358 = 4 * *(void *)(v1346 + 8 * v1491);
                        uint64_t v1359 = v1354;
                        uint64_t v1360 = v1353;
                        do
                        {
                          if (v1357 >= 1)
                          {
                            int v1361 = 0;
                            uint64_t v1362 = *(void *)&v1344[2 * v1348];
                            int v1363 = *(_DWORD *)(v169 + 4 * v1348);
                            v1364 = *a2;
                            uint64_t v1365 = 4 * *(void *)(v1346 + 8 * v1348);
                            uint64_t v1366 = v1359;
                            uint64_t v1367 = v1360;
                            do
                            {
                              if (v1363 >= 1)
                              {
                                v1368 = v167[19];
                                v1369 = (float *)(v1364[19] + v1366);
                                int v1370 = v1363;
                                do
                                {
                                  uint64_t result = *((unsigned __int8 *)v1368 + v1367);
                                  if (*((unsigned char *)v1368 + v1367)) {
                                    float v1371 = 1.0;
                                  }
                                  else {
                                    float v1371 = 0.0;
                                  }
                                  float *v1369 = v1371;
                                  v1369 = (float *)((char *)v1369 + v1365);
                                  v1368 = (unsigned int *)((char *)v1368 + v1362);
                                  --v1370;
                                }
                                while (v1370);
                              }
                              v1367 += v1356;
                              ++v1361;
                              v1366 += v1358;
                            }
                            while (v1361 != v1357);
                          }
                          v1360 += v1350;
                          ++v1355;
                          v1359 += v1352;
                        }
                        while (v1355 != v1351);
                      }
                      v1353 += v1525;
                      ++v1349;
                      v1354 += v1508;
                    }
                    while (v1349 != v1542);
                  }
                  v1466 += v1436;
                  v1475 += v1426;
                  ++v1456;
                }
                while (v1456 != v1446);
              }
              break;
            default:
              LODWORD(v1230) = 1;
              uint64_t v1231 = -20;
              do
              {
                uint64_t v1230 = *(int *)(v168 + v1231) * (uint64_t)(int)v1230;
                v1231 += 4;
              }
              while (v1231);
              v1401 = v167[6];
              if (v1401)
              {
                uint64_t v1232 = 0;
                uint64_t v1381 = *v3;
                uint64_t v1233 = (v170 << 30) - 0x500000000;
                uint64_t v1391 = (v170 >> 2) - 1;
                v1234 = v167[3];
                uint64_t v1386 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1235 = v3[3];
                int v1445 = *(_DWORD *)(v169 + (v1233 >> 30));
                uint64_t v1376 = (uint64_t)((v170 << 30) - 0x400000000) >> 32;
                uint64_t v1415 = (uint64_t)((v170 << 30) - 0x300000000) >> 32;
                uint64_t v1489 = (uint64_t)((v170 << 30) - 0x200000000) >> 32;
                uint64_t v1236 = (uint64_t)((v170 << 30) - 0x100000000) >> 32;
                uint64_t v1425 = 4 * *(void *)(v1235 + (v1233 >> 29));
                uint64_t v1435 = *(void *)((char *)v1234 + (v1233 >> 29));
                uint64_t v1396 = v1230;
                do
                {
                  uint64_t v1237 = v1391;
                  if ((v1391 & 0x80000000) != 0)
                  {
                    uint64_t v1238 = 0;
                    uint64_t v1239 = v1386;
                  }
                  else
                  {
                    uint64_t v1238 = 0;
                    LODWORD(result) = v1232;
                    uint64_t v1239 = v1386;
                    do
                    {
                      ldiv_t v1240 = ldiv((int)result, *(int *)(v169 + 4 * v1237));
                      uint64_t result = v1240.quot;
                      v1238 += *(void *)&v1234[2 * v1237--] * v1240.rem;
                    }
                    while (v1237 != -1);
                  }
                  uint64_t v1406 = v1232;
                  uint64_t v1241 = 0;
                  if ((v1239 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1232;
                    do
                    {
                      ldiv_t v1242 = ldiv((int)result, *(int *)(v1381 + 4 * v1239));
                      uint64_t result = v1242.quot;
                      v1241 += *(void *)(v1235 + 8 * v1239--) * v1242.rem;
                    }
                    while (v1239 != -1);
                  }
                  if (v1445 >= 1)
                  {
                    int v1243 = 0;
                    uint64_t v1523 = *(void *)&v1234[2 * v1376];
                    int v1540 = *(_DWORD *)(v169 + 4 * v1376);
                    uint64_t v1474 = 4 * v1241;
                    uint64_t v1506 = 4 * *(void *)(v1235 + 8 * v1376);
                    do
                    {
                      int v1455 = v1243;
                      uint64_t v1465 = v1238;
                      if (v1540 >= 1)
                      {
                        int v1244 = 0;
                        uint64_t v1245 = *(void *)&v1234[2 * v1415];
                        int v1246 = *(_DWORD *)(v169 + 4 * v1415);
                        uint64_t v1247 = 4 * *(void *)(v1235 + 8 * v1415);
                        uint64_t v1249 = v1238;
                        uint64_t v1248 = v1474;
                        do
                        {
                          if (v1246 >= 1)
                          {
                            int v1250 = 0;
                            uint64_t v1251 = *(void *)&v1234[2 * v1489];
                            int v1252 = *(_DWORD *)(v169 + 4 * v1489);
                            uint64_t v1253 = 4 * *(void *)(v1235 + 8 * v1489);
                            uint64_t v1254 = v1248;
                            uint64_t result = v1249;
                            do
                            {
                              if (v1252 >= 1)
                              {
                                int v1255 = 0;
                                uint64_t v1256 = *(void *)&v1234[2 * v1236];
                                int v1257 = *(_DWORD *)(v169 + 4 * v1236);
                                v1258 = *a2;
                                uint64_t v1259 = 4 * *(void *)(v1235 + 8 * v1236);
                                uint64_t v1260 = v1254;
                                uint64_t v1261 = result;
                                do
                                {
                                  if (v1257 >= 1)
                                  {
                                    v1262 = v167[19];
                                    v1263 = (float *)(v1258[19] + v1260);
                                    int v1264 = v1257;
                                    do
                                    {
                                      if (*((unsigned char *)v1262 + v1261)) {
                                        float v1265 = 1.0;
                                      }
                                      else {
                                        float v1265 = 0.0;
                                      }
                                      float *v1263 = v1265;
                                      v1263 = (float *)((char *)v1263 + v1259);
                                      v1262 = (unsigned int *)((char *)v1262 + v1256);
                                      --v1264;
                                    }
                                    while (v1264);
                                  }
                                  v1261 += v1251;
                                  ++v1255;
                                  v1260 += v1253;
                                }
                                while (v1255 != v1252);
                              }
                              result += v1245;
                              ++v1250;
                              v1254 += v1247;
                            }
                            while (v1250 != v1246);
                          }
                          v1249 += v1523;
                          ++v1244;
                          v1248 += v1506;
                        }
                        while (v1244 != v1540);
                      }
                      uint64_t v1238 = v1465 + v1435;
                      int v1243 = v1455 + 1;
                      v1474 += v1425;
                    }
                    while (v1455 + 1 != v1445);
                  }
                  v1232 += v1396;
                }
                while ((unint64_t)v1401 > v1406 + v1396);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<unsigned char>(uint64_t result, uint64_t **a2, int a3, float a4)
{
  uint64_t v4 = *a2;
  uint64_t v6 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v7 = v4[6];
          if (v7)
          {
            int v8 = (void *)v4[19];
            BOOL v9 = **(unsigned char **)(*(void *)v6 + 152) != 0;
            uint64_t result = (uint64_t)memset(v8, v9, v7);
          }
          break;
        case 1:
          uint64_t v31 = *(void *)(*(void *)result + 160);
          if (v31)
          {
            uint64_t v32 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v33 = (BOOL *)v4[19];
            do
            {
              int v34 = *v32++;
              *v33++ = v34 != 0;
              --v31;
            }
            while (v31);
          }
          break;
        case 2:
          uint64_t v35 = *(uint64_t **)result;
          uint64_t v36 = **(int ***)result;
          uint64_t v37 = *(void *)(*(void *)result + 8) - (void)v36;
          switch(v37 >> 2)
          {
            case 1:
              uint64_t v38 = *v36;
              if ((int)v38 >= 1)
              {
                uint64_t v39 = (unsigned char *)v35[19];
                uint64_t v40 = (BOOL *)v4[19];
                uint64_t v41 = *(void *)v35[3];
                do
                {
                  *v40++ = *v39 != 0;
                  v39 += v41;
                  --v38;
                }
                while (v38);
              }
              break;
            case 2:
              int v191 = *v36;
              if (*v36 >= 1)
              {
                int v192 = 0;
                uint64_t v193 = 0;
                uint64_t v194 = 0;
                uint64_t v195 = v35[19];
                uint64_t v196 = v4[19];
                uint64_t v197 = v36[1];
                uint64_t v198 = (uint64_t *)v35[3];
                uint64_t v200 = *v198;
                uint64_t v199 = v198[1];
                uint64_t v201 = v200 - v199 * v197;
                do
                {
                  int v202 = v197;
                  if ((int)v197 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned char *)(v195 + v194) != 0;
                      *(unsigned char *)(v196 + v193++) = result;
                      v194 += v199;
                      --v202;
                    }
                    while (v202);
                  }
                  v194 += v201;
                  ++v192;
                }
                while (v192 != v191);
              }
              break;
            case 3:
              int v203 = *v36;
              if (*v36 >= 1)
              {
                int v204 = 0;
                uint64_t result = 0;
                uint64_t v205 = 0;
                uint64_t v206 = v35[19];
                uint64_t v207 = v4[19];
                uint64_t v208 = v36[1];
                uint64_t v209 = (void *)v35[3];
                uint64_t v210 = v209[1];
                uint64_t v211 = *v209 - v210 * v208;
                do
                {
                  if ((int)v208 < 1)
                  {
                    uint64_t v218 = result;
                  }
                  else
                  {
                    int v212 = 0;
                    uint64_t v213 = v36[2];
                    uint64_t v214 = v35[3];
                    uint64_t v215 = v210 - v209[2] * v213;
                    do
                    {
                      if ((int)v213 < 1)
                      {
                        uint64_t v218 = result;
                      }
                      else
                      {
                        uint64_t v216 = *(void *)(v214 + 16);
                        int v217 = v213;
                        do
                        {
                          uint64_t v218 = result + 1;
                          *(unsigned char *)(v207 + result) = *(unsigned char *)(v206 + v205) != 0;
                          v205 += v216;
                          ++result;
                          --v217;
                        }
                        while (v217);
                      }
                      v205 += v215;
                      ++v212;
                      uint64_t result = v218;
                    }
                    while (v212 != v208);
                  }
                  v205 += v211;
                  ++v204;
                  uint64_t result = v218;
                }
                while (v204 != v203);
              }
              break;
            case 4:
              int v219 = *v36;
              if (*v36 >= 1)
              {
                int v220 = 0;
                uint64_t result = 0;
                uint64_t v221 = 0;
                uint64_t v222 = v35[19];
                uint64_t v223 = v4[19];
                uint64_t v224 = v36[1];
                uint64_t v225 = (void *)v35[3];
                uint64_t v226 = v225[1];
                uint64_t v227 = *v225 - v226 * v224;
                do
                {
                  if ((int)v224 < 1)
                  {
                    uint64_t v238 = result;
                  }
                  else
                  {
                    int v228 = 0;
                    uint64_t v229 = v36[2];
                    uint64_t v230 = v35[3];
                    uint64_t v231 = v226 - v225[2] * v229;
                    do
                    {
                      if ((int)v229 < 1)
                      {
                        uint64_t v238 = result;
                      }
                      else
                      {
                        int v232 = 0;
                        uint64_t v233 = v36[3];
                        uint64_t v234 = v35[3];
                        uint64_t v235 = *(void *)(v230 + 16) - *(void *)(v230 + 24) * v233;
                        do
                        {
                          if ((int)v233 < 1)
                          {
                            uint64_t v238 = result;
                          }
                          else
                          {
                            uint64_t v236 = *(void *)(v234 + 24);
                            int v237 = v233;
                            do
                            {
                              uint64_t v238 = result + 1;
                              *(unsigned char *)(v223 + result) = *(unsigned char *)(v222 + v221) != 0;
                              v221 += v236;
                              ++result;
                              --v237;
                            }
                            while (v237);
                          }
                          v221 += v235;
                          ++v232;
                          uint64_t result = v238;
                        }
                        while (v232 != v229);
                      }
                      v221 += v231;
                      ++v228;
                      uint64_t result = v238;
                    }
                    while (v228 != v224);
                  }
                  v221 += v227;
                  ++v220;
                  uint64_t result = v238;
                }
                while (v220 != v219);
              }
              break;
            default:
              uint64_t v182 = v4[6];
              if (v182)
              {
                uint64_t v183 = 0;
                uint64_t v184 = v35[19];
                uint64_t v185 = v4[19];
                uint64_t v186 = ((unint64_t)v37 >> 2) - 1;
                uint64_t v187 = v35[3];
                do
                {
                  uint64_t v188 = 0;
                  if ((v186 & 0x80000000) == 0)
                  {
                    uint64_t v189 = v186;
                    LODWORD(result) = v183;
                    do
                    {
                      ldiv_t v190 = ldiv((int)result, v36[v189]);
                      uint64_t result = v190.quot;
                      v188 += *(void *)(v187 + 8 * v189--) * v190.rem;
                    }
                    while (v189 != -1);
                  }
                  *(unsigned char *)(v185 + v183++) = *(unsigned char *)(v184 + v188) != 0;
                }
                while (v183 != v182);
              }
              break;
          }
          break;
        case 3:
          uint64_t v42 = *(unsigned int ***)result;
          uint64_t v44 = **(void **)result;
          uint64_t v43 = *(void *)(*(void *)result + 8);
          uint64_t result = v43 - v44;
          switch((v43 - v44) >> 2)
          {
            case 1:
              uint64_t v45 = (result << 30) - 0x100000000;
              int v46 = *(_DWORD *)(v44 + (v45 >> 30));
              if (v46 >= 1)
              {
                uint64_t v47 = v45 >> 29;
                uint64_t v48 = *(void *)((char *)v42[3] + (v45 >> 29));
                uint64_t v49 = *(void *)(v4[3] + v47);
                uint64_t v50 = (BOOL *)v4[19];
                int v51 = v42[19];
                do
                {
                  BOOL *v50 = *(unsigned char *)v51 != 0;
                  int v51 = (unsigned int *)((char *)v51 + v48);
                  v50 += v49;
                  --v46;
                }
                while (v46);
              }
              break;
            case 2:
              uint64_t v590 = (result << 30) - 0x200000000;
              int v591 = *(_DWORD *)(v44 + (v590 >> 30));
              if (v591 >= 1)
              {
                int v592 = 0;
                uint64_t v593 = 0;
                uint64_t v594 = 0;
                uint64_t v595 = v42[3];
                uint64_t v596 = v590 >> 29;
                uint64_t v597 = *(void *)((char *)v595 + (v590 >> 29));
                uint64_t v598 = v4[3];
                uint64_t v599 = *(void *)(v598 + v596);
                uint64_t v600 = (result << 30) - 0x100000000;
                uint64_t result = v600 >> 29;
                uint64_t v601 = *(void *)((char *)v595 + (v600 >> 29));
                uint64_t v602 = *(void *)(v598 + (v600 >> 29));
                int v603 = *(_DWORD *)(v44 + (v600 >> 30));
                do
                {
                  if (v603 >= 1)
                  {
                    uint64_t result = v4[19];
                    uint64_t v604 = v42[19];
                    int v605 = v603;
                    do
                    {
                      *(unsigned char *)(result + v594) = *((unsigned char *)v604 + v593) != 0;
                      result += v602;
                      uint64_t v604 = (unsigned int *)((char *)v604 + v601);
                      --v605;
                    }
                    while (v605);
                  }
                  v593 += v597;
                  v594 += v599;
                  ++v592;
                }
                while (v592 != v591);
              }
              break;
            case 3:
              uint64_t v606 = (result << 30) - 0x300000000;
              int v607 = *(_DWORD *)(v44 + (v606 >> 30));
              if (v607 >= 1)
              {
                int v608 = 0;
                uint64_t v609 = 0;
                uint64_t v610 = 0;
                uint64_t v611 = result << 30;
                uint64_t v612 = v42[3];
                uint64_t v613 = v606 >> 29;
                uint64_t v614 = *(void *)((char *)v612 + (v606 >> 29));
                uint64_t v615 = v4[3];
                uint64_t v616 = *(void *)(v615 + v613);
                uint64_t v617 = (result << 30) - 0x200000000;
                uint64_t v618 = v611 - 0x100000000;
                uint64_t v619 = *(void *)((char *)v612 + (v617 >> 29));
                uint64_t v620 = *(void *)(v615 + (v617 >> 29));
                uint64_t result = *(unsigned int *)(v44 + (v617 >> 30));
                uint64_t v621 = v618 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v622 = 0;
                    uint64_t v623 = *(void *)&v612[2 * v621];
                    uint64_t v624 = *(void *)(v615 + 8 * v621);
                    uint64_t v625 = v609;
                    int v626 = *(_DWORD *)(v44 + 4 * v621);
                    uint64_t v627 = v610;
                    int v628 = *a2;
                    do
                    {
                      if (v626 >= 1)
                      {
                        uint64_t v629 = v628[19];
                        v630 = v42[19];
                        int v631 = v626;
                        do
                        {
                          *(unsigned char *)(v629 + v627) = *((unsigned char *)v630 + v625) != 0;
                          v629 += v624;
                          v630 = (unsigned int *)((char *)v630 + v623);
                          --v631;
                        }
                        while (v631);
                      }
                      v625 += v619;
                      v627 += v620;
                      ++v622;
                    }
                    while (v622 != result);
                  }
                  v609 += v614;
                  v610 += v616;
                  ++v608;
                }
                while (v608 != v607);
              }
              break;
            case 4:
              uint64_t v632 = (result << 30) - 0x400000000;
              int v1522 = *(_DWORD *)(v44 + (v632 >> 30));
              if (v1522 >= 1)
              {
                int v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = 0;
                uint64_t v636 = v42[3];
                uint64_t v637 = v632 >> 29;
                uint64_t v638 = v4[3];
                uint64_t v1488 = *(void *)(v638 + v637);
                uint64_t v1505 = *(void *)((char *)v636 + v637);
                uint64_t v639 = (result << 30) - 0x300000000;
                uint64_t v640 = *(void *)((char *)v636 + (v639 >> 29));
                uint64_t v641 = *(void *)(v638 + (v639 >> 29));
                uint64_t v642 = (result << 30) - 0x200000000;
                uint64_t v643 = (result << 30) - 0x100000000;
                uint64_t result = *(unsigned int *)(v44 + (v639 >> 30));
                uint64_t v1472 = v642 >> 32;
                uint64_t v644 = v643 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v645 = 0;
                    uint64_t v646 = *(void *)&v636[2 * v1472];
                    uint64_t v647 = *(void *)(v638 + 8 * v1472);
                    uint64_t v648 = v634;
                    int v649 = *(_DWORD *)(v44 + 4 * v1472);
                    uint64_t v650 = v635;
                    do
                    {
                      if (v649 >= 1)
                      {
                        int v651 = 0;
                        uint64_t v652 = *(void *)&v636[2 * v644];
                        uint64_t v653 = *(void *)(v638 + 8 * v644);
                        uint64_t v654 = v648;
                        int v655 = *(_DWORD *)(v44 + 4 * v644);
                        uint64_t v656 = v650;
                        int v657 = *a2;
                        do
                        {
                          if (v655 >= 1)
                          {
                            uint64_t v658 = v657[19];
                            v659 = v42[19];
                            int v660 = v655;
                            do
                            {
                              *(unsigned char *)(v658 + v656) = *((unsigned char *)v659 + v654) != 0;
                              v658 += v653;
                              v659 = (unsigned int *)((char *)v659 + v652);
                              --v660;
                            }
                            while (v660);
                          }
                          v654 += v646;
                          v656 += v647;
                          ++v651;
                        }
                        while (v651 != v649);
                      }
                      v648 += v640;
                      v650 += v641;
                      ++v645;
                    }
                    while (v645 != result);
                  }
                  v634 += v1505;
                  v635 += v1488;
                  ++v633;
                }
                while (v633 != v1522);
              }
              break;
            case 5:
              uint64_t v661 = (result << 30) - 0x500000000;
              int v1433 = *(_DWORD *)(v44 + (v661 >> 30));
              if (v1433 >= 1)
              {
                int v1443 = 0;
                uint64_t v1453 = 0;
                uint64_t v1462 = 0;
                int v662 = v42[3];
                uint64_t v663 = v661 >> 29;
                uint64_t v664 = v4[3];
                uint64_t v1413 = *(void *)(v664 + v663);
                uint64_t v1423 = *(void *)((char *)v662 + v663);
                uint64_t v665 = (result << 30) - 0x400000000;
                uint64_t v1489 = *(void *)(v664 + (v665 >> 29));
                uint64_t v1506 = *(void *)((char *)v662 + (v665 >> 29));
                int v1523 = *(_DWORD *)(v44 + (v665 >> 30));
                uint64_t v1404 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1473 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v666 = ((result << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1523 >= 1)
                  {
                    int v667 = 0;
                    uint64_t v668 = *(void *)&v662[2 * v1404];
                    uint64_t v669 = *(void *)(v664 + 8 * v1404);
                    uint64_t v671 = v1453;
                    uint64_t v670 = v1462;
                    int v672 = *(_DWORD *)(v44 + 4 * v1404);
                    do
                    {
                      if (v672 >= 1)
                      {
                        int v673 = 0;
                        uint64_t v674 = *(void *)&v662[2 * v1473];
                        uint64_t v675 = *(void *)(v664 + 8 * v1473);
                        uint64_t v676 = v670;
                        int v677 = *(_DWORD *)(v44 + 4 * v1473);
                        uint64_t v678 = v671;
                        do
                        {
                          if (v677 >= 1)
                          {
                            int v679 = 0;
                            uint64_t v680 = *(void *)&v662[2 * v666];
                            uint64_t v681 = *(void *)(v664 + 8 * v666);
                            uint64_t v682 = v676;
                            uint64_t result = *(unsigned int *)(v44 + 4 * v666);
                            uint64_t v683 = v678;
                            uint64_t v684 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                uint64_t v685 = v684[19];
                                v686 = v42[19];
                                int v687 = result;
                                do
                                {
                                  *(unsigned char *)(v685 + v683) = *((unsigned char *)v686 + v682) != 0;
                                  v685 += v681;
                                  v686 = (unsigned int *)((char *)v686 + v680);
                                  --v687;
                                }
                                while (v687);
                              }
                              v682 += v674;
                              v683 += v675;
                              ++v679;
                            }
                            while (v679 != v677);
                          }
                          v676 += v668;
                          v678 += v669;
                          ++v673;
                        }
                        while (v673 != v672);
                      }
                      v670 += v1506;
                      v671 += v1489;
                      ++v667;
                    }
                    while (v667 != v1523);
                  }
                  v1462 += v1423;
                  v1453 += v1413;
                  ++v1443;
                }
                while (v1443 != v1433);
              }
              break;
            default:
              LODWORD(v555) = 1;
              uint64_t v556 = -20;
              do
              {
                uint64_t v555 = *(int *)(v43 + v556) * (uint64_t)(int)v555;
                v556 += 4;
              }
              while (v556);
              uint64_t v1393 = v42[6];
              if (v1393)
              {
                uint64_t v557 = 0;
                uint64_t v1373 = *v4;
                uint64_t v558 = (result << 30) - 0x500000000;
                uint64_t v1383 = ((unint64_t)result >> 2) - 1;
                uint64_t v559 = v42[3];
                uint64_t v1378 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                uint64_t v560 = v4[3];
                uint64_t v1412 = *(void *)(v560 + (v558 >> 29));
                uint64_t v1422 = *(void *)((char *)v559 + (v558 >> 29));
                int v1432 = *(_DWORD *)(v44 + (v558 >> 30));
                uint64_t v1369 = ((result << 30) - 0x400000000) >> 32;
                uint64_t v1403 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1471 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v561 = ((result << 30) - 0x100000000) >> 32;
                uint64_t v1388 = v555;
                do
                {
                  uint64_t v562 = v1383;
                  if ((v1383 & 0x80000000) != 0)
                  {
                    uint64_t v563 = 0;
                  }
                  else
                  {
                    uint64_t v563 = 0;
                    LODWORD(result) = v557;
                    do
                    {
                      ldiv_t v564 = ldiv((int)result, *(int *)(v44 + 4 * v562));
                      uint64_t result = v564.quot;
                      v563 += *(void *)&v559[2 * v562--] * v564.rem;
                    }
                    while (v562 != -1);
                  }
                  uint64_t v565 = v1378;
                  uint64_t v1398 = v557;
                  uint64_t v566 = 0;
                  if ((v1378 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v557;
                    do
                    {
                      ldiv_t v567 = ldiv((int)result, *(int *)(v1373 + 4 * v565));
                      uint64_t result = v567.quot;
                      v566 += *(void *)(v560 + 8 * v565--) * v567.rem;
                    }
                    while (v565 != -1);
                  }
                  if (v1432 >= 1)
                  {
                    int v568 = 0;
                    uint64_t v1487 = *(void *)(v560 + 8 * v1369);
                    uint64_t v1504 = *(void *)&v559[2 * v1369];
                    int v1521 = *(_DWORD *)(v44 + 4 * v1369);
                    do
                    {
                      int v1442 = v568;
                      uint64_t v1452 = v566;
                      if (v1521 >= 1)
                      {
                        int v569 = 0;
                        uint64_t v570 = *(void *)&v559[2 * v1403];
                        uint64_t v571 = *(void *)(v560 + 8 * v1403);
                        uint64_t v572 = v566;
                        uint64_t v573 = v563;
                        int v574 = *(_DWORD *)(v44 + 4 * v1403);
                        do
                        {
                          if (v574 >= 1)
                          {
                            LODWORD(result) = 0;
                            uint64_t v575 = *(void *)&v559[2 * v1471];
                            uint64_t v576 = *(void *)(v560 + 8 * v1471);
                            uint64_t v577 = v573;
                            int v578 = *(_DWORD *)(v44 + 4 * v1471);
                            uint64_t v579 = v572;
                            do
                            {
                              if (v578 >= 1)
                              {
                                int v580 = 0;
                                uint64_t v581 = *(void *)&v559[2 * v561];
                                uint64_t v582 = *(void *)(v560 + 8 * v561);
                                uint64_t v583 = v577;
                                int v584 = *(_DWORD *)(v44 + 4 * v561);
                                uint64_t v585 = v579;
                                int v586 = *a2;
                                do
                                {
                                  if (v584 >= 1)
                                  {
                                    uint64_t v587 = v586[19];
                                    v588 = v42[19];
                                    int v589 = v584;
                                    do
                                    {
                                      *(unsigned char *)(v587 + v585) = *((unsigned char *)v588 + v583) != 0;
                                      v587 += v582;
                                      v588 = (unsigned int *)((char *)v588 + v581);
                                      --v589;
                                    }
                                    while (v589);
                                  }
                                  v583 += v575;
                                  v585 += v576;
                                  ++v580;
                                }
                                while (v580 != v578);
                              }
                              v577 += v570;
                              v579 += v571;
                              uint64_t result = (result + 1);
                            }
                            while (result != v574);
                          }
                          v573 += v1504;
                          v572 += v1487;
                          ++v569;
                        }
                        while (v569 != v1521);
                      }
                      v563 += v1422;
                      uint64_t v566 = v1452 + v1412;
                      int v568 = v1442 + 1;
                    }
                    while (v1442 + 1 != v1432);
                  }
                  uint64_t v557 = v1398 + v1388;
                }
                while ((unint64_t)v1393 > v1398 + v1388);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v4[6])
          {
            unint64_t v10 = 0;
            char v11 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v12 = v4[19];
            do
              *(unsigned char *)(v12 + v10++) = v11;
            while ((*a2)[6] > v10);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v52 = *(int ***)result;
          int v53 = **(int ***)result;
          switch(v52[1] - *v52)
          {
            case 1:
              if (*v53 >= 1)
              {
                uint64_t v54 = 0;
                uint64_t v55 = 0;
                uint64_t v56 = v52[19];
                uint64_t v57 = v4[19];
                do
                {
                  *(unsigned char *)(v57 + v54) = *((unsigned char *)v56 + v55);
                  v55 += *(void *)v52[3];
                  ++v54;
                }
                while (**v52 > (int)v54);
              }
              break;
            case 2:
              int v248 = *v53;
              if (*v53 >= 1)
              {
                int v249 = 0;
                uint64_t v250 = 0;
                uint64_t v251 = 0;
                int v252 = v52[19];
                uint64_t v253 = v4[19];
                do
                {
                  int v254 = v53[1];
                  if (v254 < 1)
                  {
                    int v255 = v52[3];
                    uint64_t v256 = *((void *)v255 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v253 + v250 + result) = *((unsigned char *)v252 + v251);
                      int v255 = v52[3];
                      uint64_t v256 = *((void *)v255 + 1);
                      v251 += v256;
                      int v53 = *v52;
                      int v254 = (*v52)[1];
                      ++result;
                    }
                    while ((int)result < v254);
                    int v248 = *v53;
                    v250 += result;
                  }
                  uint64_t v251 = *(void *)v255 + v251 - v256 * v254;
                  ++v249;
                }
                while (v249 < v248);
              }
              break;
            case 3:
              int v257 = *v53;
              if (*v53 >= 1)
              {
                int v258 = 0;
                uint64_t v259 = 0;
                uint64_t v260 = 0;
                int v261 = v52[19];
                uint64_t v262 = v4[19];
                do
                {
                  int v263 = v53[1];
                  if (v263 < 1)
                  {
                    int v267 = v52[3];
                    uint64_t v268 = *((void *)v267 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v263; ++i)
                    {
                      int v265 = v53[2];
                      if (v265 < 1)
                      {
                        int v267 = v52[3];
                        uint64_t result = *((void *)v267 + 2);
                      }
                      else
                      {
                        uint64_t v266 = 0;
                        do
                        {
                          *(unsigned char *)(v262 + v259 + v266) = *((unsigned char *)v261 + v260);
                          int v267 = v52[3];
                          uint64_t result = *((void *)v267 + 2);
                          v260 += result;
                          int v53 = *v52;
                          int v265 = (*v52)[2];
                          ++v266;
                        }
                        while ((int)v266 < v265);
                        v259 += v266;
                      }
                      uint64_t v268 = *((void *)v267 + 1);
                      uint64_t v260 = v268 + v260 - result * v265;
                      int v263 = v53[1];
                    }
                    int v257 = *v53;
                  }
                  uint64_t v260 = *(void *)v267 + v260 - v268 * v263;
                  ++v258;
                }
                while (v258 < v257);
              }
              break;
            case 4:
              int v269 = *v53;
              if (*v53 >= 1)
              {
                int v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = 0;
                int v273 = v52[19];
                uint64_t v274 = v4[19];
                do
                {
                  int v275 = v53[1];
                  if (v275 < 1)
                  {
                    uint64_t v281 = v52[3];
                    uint64_t v283 = *((void *)v281 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v275; ++j)
                    {
                      int v277 = v53[2];
                      if (v277 < 1)
                      {
                        uint64_t v281 = v52[3];
                        uint64_t v282 = *((void *)v281 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v277; ++k)
                        {
                          int v279 = v53[3];
                          if (v279 < 1)
                          {
                            uint64_t v281 = v52[3];
                            uint64_t result = *((void *)v281 + 3);
                          }
                          else
                          {
                            uint64_t v280 = 0;
                            do
                            {
                              *(unsigned char *)(v274 + v271 + v280) = *((unsigned char *)v273 + v272);
                              uint64_t v281 = v52[3];
                              uint64_t result = *((void *)v281 + 3);
                              v272 += result;
                              int v53 = *v52;
                              int v279 = (*v52)[3];
                              ++v280;
                            }
                            while ((int)v280 < v279);
                            v271 += v280;
                          }
                          uint64_t v282 = *((void *)v281 + 2);
                          uint64_t v272 = v282 + v272 - result * v279;
                          int v277 = v53[2];
                        }
                      }
                      uint64_t v283 = *((void *)v281 + 1);
                      uint64_t v272 = v283 + v272 - v282 * v277;
                      int v275 = v53[1];
                    }
                    int v269 = *v53;
                  }
                  uint64_t v272 = *(void *)v281 + v272 - v283 * v275;
                  ++v270;
                }
                while (v270 < v269);
              }
              break;
            default:
              if (v4[6])
              {
                unint64_t v239 = 0;
                v240 = v52[19];
                uint64_t v241 = v4[19];
                do
                {
                  uint64_t v242 = *v52;
                  unint64_t v243 = (unint64_t)((char *)v52[1] - (char *)*v52) >> 2;
                  uint64_t v244 = 0;
                  uint64_t v245 = (v243 - 1);
                  if ((int)v243 - 1 >= 0)
                  {
                    int v246 = v52[3];
                    LODWORD(result) = v239;
                    do
                    {
                      ldiv_t v247 = ldiv((int)result, v242[v245]);
                      uint64_t result = v247.quot;
                      v244 += *(void *)&v246[2 * v245--] * v247.rem;
                    }
                    while (v245 != -1);
                  }
                  *(unsigned char *)(v241 + v239++) = *((unsigned char *)v240 + v244);
                }
                while (v239 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v58 = *(int ***)result;
          uint64_t v59 = (uint64_t *)(*(void *)result + 24);
          int v60 = v4 + 3;
          uint64_t v62 = **(void **)result;
          uint64_t v61 = *(void *)(*(void *)result + 8);
          uint64_t v63 = v61 - v62;
          switch((v61 - v62) >> 2)
          {
            case 1:
              uint64_t v64 = (v63 << 30) - 0x100000000;
              int v65 = *(_DWORD *)(v62 + (v64 >> 30));
              if (v65 >= 1)
              {
                uint64_t v66 = v64 >> 29;
                uint64_t v67 = *(void *)(*v59 + v66);
                uint64_t v68 = *(void *)(*v60 + v66);
                int v69 = (unsigned char *)v4[19];
                v70 = v58[19];
                do
                {
                  *int v69 = *(unsigned char *)v70;
                  v70 = (int *)((char *)v70 + v67);
                  v69 += v68;
                  --v65;
                }
                while (v65);
              }
              break;
            case 2:
              uint64_t v709 = (v63 << 30) - 0x200000000;
              int v710 = *(_DWORD *)(v62 + (v709 >> 30));
              if (v710 >= 1)
              {
                int v711 = 0;
                uint64_t v712 = 0;
                uint64_t v713 = 0;
                uint64_t v714 = v709 >> 29;
                uint64_t v715 = *(void *)(*v59 + (v709 >> 29));
                uint64_t v716 = *(void *)(*v60 + v714);
                do
                {
                  uint64_t v717 = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x100000000;
                  int v718 = *(int *)((char *)*v58 + (v717 >> 30));
                  if (v718 >= 1)
                  {
                    uint64_t v719 = v717 >> 29;
                    uint64_t v720 = *(void *)((char *)v58[3] + (v717 >> 29));
                    uint64_t v721 = *(void *)(*v60 + v719);
                    uint64_t result = (*a2)[19];
                    uint64_t v722 = *(void *)(*(void *)v6 + 152);
                    do
                    {
                      *(unsigned char *)(result + v713) = *(unsigned char *)(v722 + v712);
                      result += v721;
                      v722 += v720;
                      --v718;
                    }
                    while (v718);
                  }
                  v712 += v715;
                  v713 += v716;
                  ++v711;
                }
                while (v711 != v710);
              }
              break;
            case 3:
              uint64_t v723 = (v63 << 30) - 0x300000000;
              int v724 = *(_DWORD *)(v62 + (v723 >> 30));
              if (v724 >= 1)
              {
                int v725 = 0;
                uint64_t v726 = 0;
                uint64_t v727 = 0;
                uint64_t v728 = v723 >> 29;
                uint64_t v729 = *(void *)(*v59 + (v723 >> 29));
                uint64_t v730 = *(void *)(*v60 + v728);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x200000000;
                  int v731 = *(int *)((char *)*v58 + (result >> 30));
                  if (v731 >= 1)
                  {
                    int v732 = 0;
                    uint64_t v733 = result >> 29;
                    uint64_t result = *(void *)((char *)v58[3] + (result >> 29));
                    uint64_t v734 = *(void *)(*v60 + v733);
                    uint64_t v735 = v726;
                    uint64_t v736 = v727;
                    do
                    {
                      uint64_t v737 = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x100000000;
                      int v738 = *(int *)((char *)*v58 + (v737 >> 30));
                      if (v738 >= 1)
                      {
                        uint64_t v739 = v737 >> 29;
                        uint64_t v740 = *(void *)((char *)v58[3] + (v737 >> 29));
                        uint64_t v741 = *(void *)(*v60 + v739);
                        uint64_t v742 = (*a2)[19];
                        uint64_t v743 = *(void *)(*(void *)v6 + 152);
                        do
                        {
                          *(unsigned char *)(v742 + v736) = *(unsigned char *)(v743 + v735);
                          v742 += v741;
                          v743 += v740;
                          --v738;
                        }
                        while (v738);
                      }
                      v735 += result;
                      v736 += v734;
                      ++v732;
                    }
                    while (v732 != v731);
                  }
                  v726 += v729;
                  v727 += v730;
                  ++v725;
                }
                while (v725 != v724);
              }
              break;
            case 4:
              uint64_t v744 = *(int ***)result;
              uint64_t v745 = (void *)(*(void *)result + 24);
              v746 = v4 + 3;
              goto LABEL_563;
            case 5:
              uint64_t v747 = (v63 << 30) - 0x500000000;
              int v748 = *(_DWORD *)(v62 + (v747 >> 30));
              if (v748 >= 1)
              {
                uint64_t v749 = 0;
                uint64_t v750 = 0;
                uint64_t v751 = v747 >> 29;
                uint64_t v752 = *(void *)(*v59 + v751);
                uint64_t v753 = *(void *)(*v60 + v751);
                do
                {
                  v749 += v752;
                  v750 += v753;
                  --v748;
                }
                while (v748);
              }
              break;
            default:
              LODWORD(v688) = 1;
              uint64_t v689 = -20;
              do
              {
                uint64_t v688 = *(int *)(v61 + v689) * (uint64_t)(int)v688;
                v689 += 4;
              }
              while (v689);
              if (v58[6])
              {
                uint64_t result = 0;
                uint64_t v690 = *(void **)v6;
                uint64_t v1507 = v60;
                uint64_t v1474 = v688;
                do
                {
                  uint64_t v691 = *v58;
                  unint64_t v692 = (unint64_t)((char *)v58[1] - (char *)*v58) >> 2;
                  uint64_t v693 = (v692 - 1);
                  uint64_t v1524 = result;
                  uint64_t v1490 = v690;
                  uint64_t v694 = 0;
                  if ((int)v692 - 1 >= 0)
                  {
                    uint64_t v695 = *v59;
                    do
                    {
                      ldiv_t v696 = ldiv((int)result, v691[v693]);
                      LODWORD(result) = v696.quot;
                      v694 += *(void *)(v695 + 8 * v693--) * v696.rem;
                    }
                    while (v693 != -1);
                  }
                  uint64_t v697 = **a2;
                  unint64_t v698 = (unint64_t)((*a2)[1] - v697) >> 2;
                  uint64_t v699 = *v1507;
                  uint64_t v700 = 0;
                  uint64_t v701 = (v698 - 1);
                  if ((int)v698 - 1 >= 0)
                  {
                    int quot = v1524;
                    do
                    {
                      ldiv_t v703 = ldiv(quot, *(int *)(v697 + 4 * v701));
                      int quot = v703.quot;
                      v700 += *(void *)(v699 + 8 * v701--) * v703.rem;
                    }
                    while (v701 != -1);
                  }
                  uint64_t v690 = v1490;
                  uint64_t v704 = ((v690[1] - *v690) << 30) - 0x500000000;
                  int v705 = *(int *)((char *)v691 + (v704 >> 30));
                  if (v705 >= 1)
                  {
                    uint64_t v706 = v704 >> 29;
                    uint64_t v707 = *(void *)(*v59 + v706);
                    uint64_t v708 = *(void *)(v699 + v706);
                    do
                    {
                      v694 += v707;
                      v700 += v708;
                      --v705;
                    }
                    while (v705);
                    uint64_t v690 = *(void **)v6;
                  }
                  uint64_t result = v1524 + v1474;
                }
                while (v690[6] > (unint64_t)(v1524 + v1474));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v13 = v4[6];
          if (v13)
          {
            int v14 = **(unsigned __int8 **)(*(void *)result + 152);
            unint64_t v15 = (_DWORD *)v4[19];
            do
            {
              *v15++ = v14;
              --v13;
            }
            while (v13);
          }
          break;
        case 1:
          uint64_t v71 = *(void *)(*(void *)result + 160);
          if (v71)
          {
            uint64_t v72 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v73 = (_DWORD *)v4[19];
            do
            {
              int v74 = *v72++;
              *v73++ = v74;
              --v71;
            }
            while (v71);
          }
          break;
        case 2:
          uint64_t v75 = *(int ***)result;
          uint64_t v76 = **(int ***)result;
          uint64_t v77 = *(void *)(*(void *)result + 8) - (void)v76;
          switch(v77 >> 2)
          {
            case 1:
              if (*v76 >= 1)
              {
                uint64_t v78 = 0;
                uint64_t v79 = v75[19];
                uint64_t v80 = v4[19];
                uint64_t v81 = *(void *)v75[3];
                do
                {
                  *(_DWORD *)(v80 + 4 * v78) = *(unsigned __int8 *)v79;
                  uint64_t v79 = (int *)((char *)v79 + v81);
                  ++v78;
                }
                while (*v76 > (int)v78);
              }
              break;
            case 2:
              int v293 = *v76;
              if (*v76 >= 1)
              {
                int v294 = 0;
                uint64_t v295 = 0;
                uint64_t v296 = 0;
                v297 = v75[19];
                uint64_t v298 = v4[19];
                uint64_t v299 = v75[3];
                uint64_t v300 = *(void *)v299;
                uint64_t v301 = *((void *)v299 + 1);
                int v302 = v76[1];
                do
                {
                  if (v302 >= 1)
                  {
                    uint64_t v303 = 0;
                    do
                    {
                      *(_DWORD *)(v298 + 4 * v295 + 4 * v303) = *((unsigned __int8 *)v297 + v296);
                      v296 += v301;
                      int v302 = v76[1];
                      ++v303;
                    }
                    while ((int)v303 < v302);
                    int v293 = *v76;
                    v295 += v303;
                  }
                  uint64_t v296 = v296 + v300 - v301 * v302;
                  ++v294;
                }
                while (v294 < v293);
              }
              break;
            case 3:
              uint64_t result = *v76;
              if ((int)result >= 1)
              {
                int v304 = 0;
                uint64_t v305 = 0;
                uint64_t v306 = 0;
                v307 = v75[19];
                uint64_t v308 = v4[19];
                uint64_t v309 = v75[3];
                uint64_t v310 = *(void *)v309;
                uint64_t v311 = *((void *)v309 + 1);
                int v312 = v76[1];
                do
                {
                  if (v312 >= 1)
                  {
                    int v313 = 0;
                    int v314 = v75[3];
                    uint64_t v315 = *((void *)v309 + 2);
                    int v316 = v76[2];
                    do
                    {
                      if (v316 >= 1)
                      {
                        uint64_t v317 = 0;
                        uint64_t v318 = *((void *)v314 + 2);
                        do
                        {
                          *(_DWORD *)(v308 + 4 * v305 + 4 * v317) = *((unsigned __int8 *)v307 + v306);
                          v306 += v318;
                          int v316 = v76[2];
                          ++v317;
                        }
                        while ((int)v317 < v316);
                        int v312 = v76[1];
                        v305 += v317;
                      }
                      uint64_t v306 = v306 + v311 - v315 * v316;
                      ++v313;
                    }
                    while (v313 < v312);
                    uint64_t result = *v76;
                  }
                  uint64_t v306 = v306 + v310 - v311 * v312;
                  ++v304;
                }
                while (v304 < (int)result);
              }
              break;
            case 4:
              int v319 = *v76;
              if (*v76 >= 1)
              {
                int v320 = 0;
                uint64_t v321 = 0;
                uint64_t v322 = 0;
                v323 = v75[19];
                uint64_t v324 = v4[19];
                uint64_t v325 = v75[3];
                uint64_t v326 = *(void *)v325;
                uint64_t v327 = *((void *)v325 + 1);
                int v328 = v76[1];
                do
                {
                  if (v328 >= 1)
                  {
                    int v329 = 0;
                    int v330 = v75[3];
                    uint64_t v331 = *((void *)v325 + 2);
                    int v332 = v76[2];
                    do
                    {
                      if (v332 >= 1)
                      {
                        int v333 = 0;
                        uint64_t v334 = v75[3];
                        uint64_t v335 = *((void *)v330 + 2);
                        uint64_t v336 = *((void *)v330 + 3);
                        int v337 = v76[3];
                        do
                        {
                          if (v337 >= 1)
                          {
                            uint64_t v338 = 0;
                            uint64_t v339 = *((void *)v334 + 3);
                            do
                            {
                              *(_DWORD *)(v324 + 4 * v321 + 4 * v338) = *((unsigned __int8 *)v323 + v322);
                              v322 += v339;
                              int v337 = v76[3];
                              ++v338;
                            }
                            while ((int)v338 < v337);
                            int v332 = v76[2];
                            v321 += v338;
                          }
                          uint64_t v322 = v322 + v335 - v336 * v337;
                          ++v333;
                        }
                        while (v333 < v332);
                        int v328 = v76[1];
                      }
                      uint64_t v322 = v322 + v327 - v331 * v332;
                      ++v329;
                    }
                    while (v329 < v328);
                    int v319 = *v76;
                  }
                  uint64_t result = v328;
                  uint64_t v322 = v322 + v326 - v327 * v328;
                  ++v320;
                }
                while (v320 < v319);
              }
              break;
            default:
              uint64_t v284 = v4[6];
              if (v284)
              {
                uint64_t v285 = 0;
                uint64_t v286 = v75[19];
                uint64_t v287 = v4[19];
                uint64_t v288 = ((unint64_t)v77 >> 2) - 1;
                uint64_t v289 = v75[3];
                do
                {
                  uint64_t v290 = 0;
                  if ((v288 & 0x80000000) == 0)
                  {
                    uint64_t v291 = v288;
                    LODWORD(result) = v285;
                    do
                    {
                      ldiv_t v292 = ldiv((int)result, v76[v291]);
                      uint64_t result = v292.quot;
                      v290 += *(void *)&v289[2 * v291--] * v292.rem;
                    }
                    while (v291 != -1);
                  }
                  *(_DWORD *)(v287 + 4 * v285++) = *((unsigned __int8 *)v286 + v290);
                }
                while (v285 != v284);
              }
              break;
          }
          break;
        case 3:
          int v82 = *(unsigned int ***)result;
          uint64_t v84 = **(void **)result;
          uint64_t v83 = *(void *)(*(void *)result + 8);
          unint64_t v85 = v83 - v84;
          switch((v83 - v84) >> 2)
          {
            case 1:
              uint64_t v86 = (v85 << 30) - 0x100000000;
              int v87 = *(_DWORD *)(v84 + (v86 >> 30));
              if (v87 >= 1)
              {
                uint64_t v88 = v86 >> 29;
                uint64_t v89 = *(void *)((char *)v82[3] + (v86 >> 29));
                uint64_t v90 = *(void *)(v4[3] + v88);
                uint64_t v91 = (_DWORD *)v4[19];
                uint64_t v92 = v82[19];
                uint64_t v93 = 4 * v90;
                do
                {
                  *uint64_t v91 = *(unsigned __int8 *)v92;
                  uint64_t v92 = (unsigned int *)((char *)v92 + v89);
                  uint64_t v91 = (_DWORD *)((char *)v91 + v93);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              uint64_t v789 = (v85 << 30) - 0x200000000;
              int v790 = *(_DWORD *)(v84 + (v789 >> 30));
              if (v790 >= 1)
              {
                uint64_t v791 = 0;
                int v792 = 0;
                uint64_t v793 = 0;
                int v794 = v82[3];
                uint64_t v795 = v789 >> 29;
                uint64_t v796 = *(void *)((char *)v794 + (v789 >> 29));
                uint64_t v797 = v4[3];
                uint64_t v798 = (v85 << 30) - 0x100000000;
                uint64_t v799 = *(void *)((char *)v794 + (v798 >> 29));
                uint64_t v800 = v798 >> 32;
                uint64_t v801 = 4 * *(void *)(v797 + v795);
                uint64_t v802 = 4 * *(void *)(v797 + (v798 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v84 + 4 * v800);
                  if ((int)result >= 1)
                  {
                    uint64_t v803 = v82[19];
                    uint64_t v804 = (_DWORD *)(v4[19] + v791);
                    do
                    {
                      *uint64_t v804 = *((unsigned __int8 *)v803 + v793);
                      uint64_t v804 = (_DWORD *)((char *)v804 + v802);
                      uint64_t v803 = (unsigned int *)((char *)v803 + v799);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v793 += v796;
                  ++v792;
                  v791 += v801;
                }
                while (v792 != v790);
              }
              break;
            case 3:
              uint64_t v805 = (v85 << 30) - 0x300000000;
              int v806 = *(_DWORD *)(v84 + (v805 >> 30));
              if (v806 >= 1)
              {
                uint64_t v807 = 0;
                int v808 = 0;
                uint64_t v809 = 0;
                uint64_t v810 = v85 << 30;
                uint64_t v811 = v82[3];
                uint64_t v812 = v805 >> 29;
                uint64_t v813 = *(void *)((char *)v811 + (v805 >> 29));
                uint64_t v814 = v4[3];
                uint64_t v815 = *(void *)(v814 + v812);
                uint64_t v816 = v810 - 0x200000000;
                uint64_t v817 = (v810 - 0x200000000) >> 29;
                uint64_t v818 = v810 - 0x100000000;
                uint64_t v819 = *(void *)((char *)v811 + v817);
                uint64_t v820 = v816 >> 32;
                uint64_t v821 = *(void *)(v814 + v817);
                uint64_t v822 = v818 >> 32;
                uint64_t result = 4 * v815;
                uint64_t v823 = 4 * v821;
                do
                {
                  int v824 = *(_DWORD *)(v84 + 4 * v820);
                  if (v824 >= 1)
                  {
                    int v825 = 0;
                    uint64_t v826 = *(void *)&v811[2 * v822];
                    int v827 = *a2;
                    uint64_t v828 = 4 * *(void *)(v814 + 8 * v822);
                    uint64_t v829 = v807;
                    uint64_t v830 = v809;
                    do
                    {
                      int v831 = *(_DWORD *)(v84 + 4 * v822);
                      if (v831 >= 1)
                      {
                        uint64_t v832 = v82[19];
                        int v833 = (_DWORD *)(v827[19] + v829);
                        do
                        {
                          *int v833 = *((unsigned __int8 *)v832 + v830);
                          int v833 = (_DWORD *)((char *)v833 + v828);
                          uint64_t v832 = (unsigned int *)((char *)v832 + v826);
                          --v831;
                        }
                        while (v831);
                      }
                      v830 += v819;
                      ++v825;
                      v829 += v823;
                    }
                    while (v825 != v824);
                  }
                  v809 += v813;
                  ++v808;
                  v807 += result;
                }
                while (v808 != v806);
              }
              break;
            case 4:
              uint64_t v834 = (v85 << 30) - 0x400000000;
              int v1526 = *(_DWORD *)(v84 + (v834 >> 30));
              if (v1526 >= 1)
              {
                uint64_t v835 = 0;
                int v836 = 0;
                uint64_t v837 = 0;
                uint64_t v838 = v85 << 30;
                uint64_t v839 = v82[3];
                uint64_t v840 = v834 >> 29;
                uint64_t v1509 = *(void *)((char *)v839 + v840);
                uint64_t v841 = v4[3];
                uint64_t v1492 = (v838 - 0x300000000) >> 32;
                uint64_t v842 = (v838 - 0x300000000) >> 29;
                uint64_t v843 = *(void *)((char *)v839 + v842);
                uint64_t v844 = (v838 - 0x200000000) >> 32;
                uint64_t result = (v838 - 0x100000000) >> 32;
                uint64_t v1476 = 4 * *(void *)(v841 + v840);
                uint64_t v845 = 4 * *(void *)(v841 + v842);
                do
                {
                  int v846 = *(_DWORD *)(v84 + 4 * v1492);
                  if (v846 >= 1)
                  {
                    int v847 = 0;
                    uint64_t v848 = *(void *)&v839[2 * v844];
                    uint64_t v849 = 4 * *(void *)(v841 + 8 * v844);
                    uint64_t v850 = v835;
                    uint64_t v851 = v837;
                    do
                    {
                      int v852 = *(_DWORD *)(v84 + 4 * v844);
                      if (v852 >= 1)
                      {
                        int v853 = 0;
                        uint64_t v854 = *(void *)&v839[2 * result];
                        int v855 = *a2;
                        uint64_t v856 = 4 * *(void *)(v841 + 8 * result);
                        uint64_t v857 = v850;
                        uint64_t v858 = v851;
                        do
                        {
                          int v859 = *(_DWORD *)(v84 + 4 * result);
                          if (v859 >= 1)
                          {
                            uint64_t v860 = v82[19];
                            int v861 = (_DWORD *)(v855[19] + v857);
                            do
                            {
                              *int v861 = *((unsigned __int8 *)v860 + v858);
                              int v861 = (_DWORD *)((char *)v861 + v856);
                              uint64_t v860 = (unsigned int *)((char *)v860 + v854);
                              --v859;
                            }
                            while (v859);
                          }
                          v858 += v848;
                          ++v853;
                          v857 += v849;
                        }
                        while (v853 != v852);
                      }
                      v851 += v843;
                      ++v847;
                      v850 += v845;
                    }
                    while (v847 != v846);
                  }
                  v837 += v1509;
                  ++v836;
                  v835 += v1476;
                }
                while (v836 != v1526);
              }
              break;
            case 5:
              uint64_t v862 = (v85 << 30) - 0x500000000;
              int v1435 = *(_DWORD *)(v84 + (v862 >> 30));
              if (v1435 >= 1)
              {
                uint64_t v1455 = 0;
                uint64_t v1464 = 0;
                int v1445 = 0;
                uint64_t v863 = v85 << 30;
                uint64_t v864 = v82[3];
                uint64_t v865 = v862 >> 29;
                uint64_t v1425 = *(void *)((char *)v864 + v865);
                uint64_t v866 = v4[3];
                uint64_t v867 = (v863 - 0x400000000) >> 29;
                uint64_t v1493 = *(void *)((char *)v864 + v867);
                uint64_t v1415 = (v863 - 0x400000000) >> 32;
                uint64_t v1510 = (v863 - 0x300000000) >> 32;
                uint64_t result = (v863 - 0x200000000) >> 32;
                uint64_t v868 = (v863 - 0x100000000) >> 32;
                uint64_t v1406 = 4 * *(void *)(v866 + v865);
                uint64_t v1477 = 4 * *(void *)(v866 + v867);
                do
                {
                  int v1527 = *(_DWORD *)(v84 + 4 * v1415);
                  if (v1527 >= 1)
                  {
                    int v869 = 0;
                    uint64_t v870 = *(void *)&v864[2 * v1510];
                    uint64_t v871 = 4 * *(void *)(v866 + 8 * v1510);
                    uint64_t v872 = v1455;
                    uint64_t v873 = v1464;
                    do
                    {
                      int v874 = *(_DWORD *)(v84 + 4 * v1510);
                      if (v874 >= 1)
                      {
                        int v875 = 0;
                        uint64_t v876 = *(void *)&v864[2 * result];
                        uint64_t v877 = 4 * *(void *)(v866 + 8 * result);
                        uint64_t v878 = v873;
                        uint64_t v879 = v872;
                        do
                        {
                          int v880 = *(_DWORD *)(v84 + 4 * result);
                          if (v880 >= 1)
                          {
                            int v881 = 0;
                            uint64_t v882 = *(void *)&v864[2 * v868];
                            int v883 = *a2;
                            uint64_t v884 = 4 * *(void *)(v866 + 8 * v868);
                            uint64_t v885 = v878;
                            uint64_t v886 = v879;
                            do
                            {
                              int v887 = *(_DWORD *)(v84 + 4 * v868);
                              if (v887 >= 1)
                              {
                                uint64_t v888 = v82[19];
                                int v889 = (_DWORD *)(v883[19] + v885);
                                do
                                {
                                  *int v889 = *((unsigned __int8 *)v888 + v886);
                                  int v889 = (_DWORD *)((char *)v889 + v884);
                                  uint64_t v888 = (unsigned int *)((char *)v888 + v882);
                                  --v887;
                                }
                                while (v887);
                              }
                              v886 += v876;
                              ++v881;
                              v885 += v877;
                            }
                            while (v881 != v880);
                          }
                          v879 += v870;
                          ++v875;
                          v878 += v871;
                        }
                        while (v875 != v874);
                      }
                      v872 += v1493;
                      ++v869;
                      v873 += v1477;
                    }
                    while (v869 != v1527);
                  }
                  v1455 += v1425;
                  v1464 += v1406;
                  ++v1445;
                }
                while (v1445 != v1435);
              }
              break;
            default:
              LODWORD(v754) = 1;
              uint64_t v755 = -20;
              do
              {
                uint64_t v754 = *(int *)(v83 + v755) * (uint64_t)(int)v754;
                v755 += 4;
              }
              while (v755);
              uint64_t v1394 = v82[6];
              if (v1394)
              {
                uint64_t v756 = 0;
                uint64_t v1384 = (v85 >> 2) - 1;
                uint64_t v757 = v82[3];
                uint64_t v1370 = *v4;
                uint64_t v1379 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                uint64_t v758 = (v85 << 30) - 0x500000000;
                uint64_t v759 = v4[3];
                uint64_t v1374 = v758 >> 32;
                uint64_t v1414 = *(void *)((char *)v757 + (v758 >> 29));
                uint64_t v1424 = (uint64_t)((v85 << 30) - 0x400000000) >> 32;
                uint64_t v1508 = (uint64_t)((v85 << 30) - 0x300000000) >> 32;
                uint64_t v760 = (uint64_t)((v85 << 30) - 0x200000000) >> 32;
                uint64_t v761 = (uint64_t)((v85 << 30) - 0x100000000) >> 32;
                uint64_t v1405 = 4 * *(void *)(v759 + (v758 >> 29));
                uint64_t v1389 = v754;
                do
                {
                  uint64_t v762 = v1384;
                  if ((v1384 & 0x80000000) != 0)
                  {
                    uint64_t v763 = 0;
                  }
                  else
                  {
                    uint64_t v763 = 0;
                    LODWORD(result) = v756;
                    do
                    {
                      ldiv_t v764 = ldiv((int)result, *(int *)(v84 + 4 * v762));
                      uint64_t result = v764.quot;
                      v763 += *(void *)&v757[2 * v762--] * v764.rem;
                    }
                    while (v762 != -1);
                  }
                  uint64_t v1463 = v763;
                  uint64_t v765 = v1379;
                  uint64_t v1399 = v756;
                  uint64_t v766 = 0;
                  if ((v1379 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v756;
                    do
                    {
                      ldiv_t v767 = ldiv((int)result, *(int *)(v1370 + 4 * v765));
                      uint64_t result = v767.quot;
                      v766 += *(void *)(v759 + 8 * v765--) * v767.rem;
                    }
                    while (v765 != -1);
                  }
                  int v1434 = *(_DWORD *)(v84 + 4 * v1374);
                  if (v1434 >= 1)
                  {
                    int v768 = 0;
                    uint64_t v1491 = *(void *)&v757[2 * v1424];
                    uint64_t v1454 = 4 * v766;
                    uint64_t v1475 = 4 * *(void *)(v759 + 8 * v1424);
                    do
                    {
                      int v1444 = v768;
                      int v1525 = *(_DWORD *)(v84 + 4 * v1424);
                      if (v1525 >= 1)
                      {
                        int v769 = 0;
                        uint64_t v770 = *(void *)&v757[2 * v1508];
                        uint64_t v771 = 4 * *(void *)(v759 + 8 * v1508);
                        uint64_t v772 = v1454;
                        uint64_t v773 = v1463;
                        do
                        {
                          int v774 = *(_DWORD *)(v84 + 4 * v1508);
                          if (v774 >= 1)
                          {
                            int v775 = 0;
                            uint64_t v776 = *(void *)&v757[2 * v760];
                            uint64_t v777 = 4 * *(void *)(v759 + 8 * v760);
                            uint64_t v778 = v772;
                            uint64_t result = v773;
                            do
                            {
                              int v779 = *(_DWORD *)(v84 + 4 * v760);
                              if (v779 >= 1)
                              {
                                int v780 = 0;
                                uint64_t v781 = *(void *)&v757[2 * v761];
                                int v782 = *a2;
                                uint64_t v783 = 4 * *(void *)(v759 + 8 * v761);
                                uint64_t v784 = v778;
                                uint64_t v785 = result;
                                do
                                {
                                  int v786 = *(_DWORD *)(v84 + 4 * v761);
                                  if (v786 >= 1)
                                  {
                                    uint64_t v787 = v82[19];
                                    int v788 = (_DWORD *)(v782[19] + v784);
                                    do
                                    {
                                      *int v788 = *((unsigned __int8 *)v787 + v785);
                                      int v788 = (_DWORD *)((char *)v788 + v783);
                                      uint64_t v787 = (unsigned int *)((char *)v787 + v781);
                                      --v786;
                                    }
                                    while (v786);
                                  }
                                  v785 += v776;
                                  ++v780;
                                  v784 += v777;
                                }
                                while (v780 != v779);
                              }
                              result += v770;
                              ++v775;
                              v778 += v771;
                            }
                            while (v775 != v774);
                          }
                          v773 += v1491;
                          ++v769;
                          v772 += v1475;
                        }
                        while (v769 != v1525);
                      }
                      v1463 += v1414;
                      int v768 = v1444 + 1;
                      v1454 += v1405;
                    }
                    while (v1444 + 1 != v1434);
                  }
                  uint64_t v756 = v1399 + v1389;
                }
                while ((unint64_t)v1394 > v1399 + v1389);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v4[6])
          {
            unint64_t v16 = 0;
            char v17 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v18 = v4[19];
            do
              *(unsigned char *)(v18 + v16++) = v17;
            while ((*a2)[6] > v16);
          }
          break;
        case 1:
LABEL_37:
          size_t v28 = *(void *)(*(void *)result + 160);
          if (v28)
          {
            unint64_t v29 = *(const void **)(*(void *)result + 152);
            uint64_t v30 = (void *)v4[19];
            uint64_t result = (uint64_t)memmove(v30, v29, v28);
          }
          break;
        case 2:
          uint64_t v94 = *(int ***)result;
          v95 = **(int ***)result;
          switch(v94[1] - *v94)
          {
            case 1:
              if (*v95 >= 1)
              {
                uint64_t v96 = 0;
                uint64_t v97 = 0;
                uint64_t v98 = v94[19];
                uint64_t v99 = v4[19];
                do
                {
                  *(unsigned char *)(v99 + v96) = *((unsigned char *)v98 + v97);
                  v97 += *(void *)v94[3];
                  ++v96;
                }
                while (**v94 > (int)v96);
              }
              break;
            case 2:
              int v349 = *v95;
              if (*v95 >= 1)
              {
                int v350 = 0;
                uint64_t v351 = 0;
                uint64_t v352 = 0;
                int v353 = v94[19];
                uint64_t v354 = v4[19];
                do
                {
                  int v355 = v95[1];
                  if (v355 < 1)
                  {
                    int v356 = v94[3];
                    uint64_t v357 = *((void *)v356 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v354 + v351 + result) = *((unsigned char *)v353 + v352);
                      int v356 = v94[3];
                      uint64_t v357 = *((void *)v356 + 1);
                      v352 += v357;
                      v95 = *v94;
                      int v355 = (*v94)[1];
                      ++result;
                    }
                    while ((int)result < v355);
                    int v349 = *v95;
                    v351 += result;
                  }
                  uint64_t v352 = *(void *)v356 + v352 - v357 * v355;
                  ++v350;
                }
                while (v350 < v349);
              }
              break;
            case 3:
              int v358 = *v95;
              if (*v95 >= 1)
              {
                int v359 = 0;
                uint64_t v360 = 0;
                uint64_t v361 = 0;
                int v362 = v94[19];
                uint64_t v363 = v4[19];
                do
                {
                  int v364 = v95[1];
                  if (v364 < 1)
                  {
                    int v368 = v94[3];
                    uint64_t v369 = *((void *)v368 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v364; ++m)
                    {
                      int v366 = v95[2];
                      if (v366 < 1)
                      {
                        int v368 = v94[3];
                        uint64_t result = *((void *)v368 + 2);
                      }
                      else
                      {
                        uint64_t v367 = 0;
                        do
                        {
                          *(unsigned char *)(v363 + v360 + v367) = *((unsigned char *)v362 + v361);
                          int v368 = v94[3];
                          uint64_t result = *((void *)v368 + 2);
                          v361 += result;
                          v95 = *v94;
                          int v366 = (*v94)[2];
                          ++v367;
                        }
                        while ((int)v367 < v366);
                        v360 += v367;
                      }
                      uint64_t v369 = *((void *)v368 + 1);
                      uint64_t v361 = v369 + v361 - result * v366;
                      int v364 = v95[1];
                    }
                    int v358 = *v95;
                  }
                  uint64_t v361 = *(void *)v368 + v361 - v369 * v364;
                  ++v359;
                }
                while (v359 < v358);
              }
              break;
            case 4:
              int v370 = *v95;
              if (*v95 >= 1)
              {
                int v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = 0;
                int v374 = v94[19];
                uint64_t v375 = v4[19];
                do
                {
                  int v376 = v95[1];
                  if (v376 < 1)
                  {
                    uint64_t v382 = v94[3];
                    uint64_t v384 = *((void *)v382 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v376; ++n)
                    {
                      int v378 = v95[2];
                      if (v378 < 1)
                      {
                        uint64_t v382 = v94[3];
                        uint64_t v383 = *((void *)v382 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v378; ++ii)
                        {
                          int v380 = v95[3];
                          if (v380 < 1)
                          {
                            uint64_t v382 = v94[3];
                            uint64_t result = *((void *)v382 + 3);
                          }
                          else
                          {
                            uint64_t v381 = 0;
                            do
                            {
                              *(unsigned char *)(v375 + v372 + v381) = *((unsigned char *)v374 + v373);
                              uint64_t v382 = v94[3];
                              uint64_t result = *((void *)v382 + 3);
                              v373 += result;
                              v95 = *v94;
                              int v380 = (*v94)[3];
                              ++v381;
                            }
                            while ((int)v381 < v380);
                            v372 += v381;
                          }
                          uint64_t v383 = *((void *)v382 + 2);
                          uint64_t v373 = v383 + v373 - result * v380;
                          int v378 = v95[2];
                        }
                      }
                      uint64_t v384 = *((void *)v382 + 1);
                      uint64_t v373 = v384 + v373 - v383 * v378;
                      int v376 = v95[1];
                    }
                    int v370 = *v95;
                  }
                  uint64_t v373 = *(void *)v382 + v373 - v384 * v376;
                  ++v371;
                }
                while (v371 < v370);
              }
              break;
            default:
              if (v4[6])
              {
                unint64_t v340 = 0;
                v341 = v94[19];
                uint64_t v342 = v4[19];
                do
                {
                  uint64_t v343 = *v94;
                  unint64_t v344 = (unint64_t)((char *)v94[1] - (char *)*v94) >> 2;
                  uint64_t v345 = 0;
                  uint64_t v346 = (v344 - 1);
                  if ((int)v344 - 1 >= 0)
                  {
                    int v347 = v94[3];
                    LODWORD(result) = v340;
                    do
                    {
                      ldiv_t v348 = ldiv((int)result, v343[v346]);
                      uint64_t result = v348.quot;
                      v345 += *(void *)&v347[2 * v346--] * v348.rem;
                    }
                    while (v346 != -1);
                  }
                  *(unsigned char *)(v342 + v340++) = *((unsigned char *)v341 + v345);
                }
                while (v340 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v100 = *(int ***)result;
          uint64_t v101 = (uint64_t *)(*(void *)result + 24);
          int v102 = v4 + 3;
          uint64_t v104 = **(void **)result;
          uint64_t v103 = *(void *)(*(void *)result + 8);
          uint64_t v105 = v103 - v104;
          switch((v103 - v104) >> 2)
          {
            case 1:
              uint64_t v106 = (v105 << 30) - 0x100000000;
              int v107 = *(_DWORD *)(v104 + (v106 >> 30));
              if (v107 >= 1)
              {
                uint64_t v108 = v106 >> 29;
                uint64_t v109 = *(void *)(*v101 + v108);
                uint64_t v110 = *(void *)(*v102 + v108);
                int v111 = (unsigned char *)v4[19];
                v112 = v100[19];
                do
                {
                  *int v111 = *(unsigned char *)v112;
                  v112 = (int *)((char *)v112 + v109);
                  v111 += v110;
                  --v107;
                }
                while (v107);
              }
              break;
            case 2:
              uint64_t v911 = (v105 << 30) - 0x200000000;
              int v912 = *(_DWORD *)(v104 + (v911 >> 30));
              if (v912 >= 1)
              {
                int v913 = 0;
                uint64_t v914 = 0;
                uint64_t v915 = 0;
                uint64_t v916 = v911 >> 29;
                uint64_t v917 = *(void *)(*v101 + (v911 >> 29));
                uint64_t v918 = *(void *)(*v102 + v916);
                do
                {
                  uint64_t v919 = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x100000000;
                  int v920 = *(int *)((char *)*v100 + (v919 >> 30));
                  if (v920 >= 1)
                  {
                    uint64_t v921 = v919 >> 29;
                    uint64_t v922 = *(void *)((char *)v100[3] + (v919 >> 29));
                    uint64_t v923 = *(void *)(*v102 + v921);
                    uint64_t result = (*a2)[19];
                    uint64_t v924 = *(void *)(*(void *)v6 + 152);
                    do
                    {
                      *(unsigned char *)(result + v915) = *(unsigned char *)(v924 + v914);
                      result += v923;
                      v924 += v922;
                      --v920;
                    }
                    while (v920);
                  }
                  v914 += v917;
                  v915 += v918;
                  ++v913;
                }
                while (v913 != v912);
              }
              break;
            case 3:
              uint64_t v925 = (v105 << 30) - 0x300000000;
              int v926 = *(_DWORD *)(v104 + (v925 >> 30));
              if (v926 >= 1)
              {
                int v927 = 0;
                uint64_t v928 = 0;
                uint64_t v929 = 0;
                uint64_t v930 = v925 >> 29;
                uint64_t v931 = *(void *)(*v101 + (v925 >> 29));
                uint64_t v932 = *(void *)(*v102 + v930);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x200000000;
                  int v933 = *(int *)((char *)*v100 + (result >> 30));
                  if (v933 >= 1)
                  {
                    int v934 = 0;
                    uint64_t v935 = result >> 29;
                    uint64_t result = *(void *)((char *)v100[3] + (result >> 29));
                    uint64_t v936 = *(void *)(*v102 + v935);
                    uint64_t v937 = v928;
                    uint64_t v938 = v929;
                    do
                    {
                      uint64_t v939 = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) << 30) - 0x100000000;
                      int v940 = *(int *)((char *)*v100 + (v939 >> 30));
                      if (v940 >= 1)
                      {
                        uint64_t v941 = v939 >> 29;
                        uint64_t v942 = *(void *)((char *)v100[3] + (v939 >> 29));
                        uint64_t v943 = *(void *)(*v102 + v941);
                        uint64_t v944 = (*a2)[19];
                        uint64_t v945 = *(void *)(*(void *)v6 + 152);
                        do
                        {
                          *(unsigned char *)(v944 + v938) = *(unsigned char *)(v945 + v937);
                          v944 += v943;
                          v945 += v942;
                          --v940;
                        }
                        while (v940);
                      }
                      v937 += result;
                      v938 += v936;
                      ++v934;
                    }
                    while (v934 != v933);
                  }
                  v928 += v931;
                  v929 += v932;
                  ++v927;
                }
                while (v927 != v926);
              }
              break;
            case 4:
              uint64_t v744 = *(int ***)result;
              uint64_t v745 = (void *)(*(void *)result + 24);
              v746 = v4 + 3;
LABEL_563:
              break;
            case 5:
              uint64_t v946 = (v105 << 30) - 0x500000000;
              int v947 = *(_DWORD *)(v104 + (v946 >> 30));
              if (v947 >= 1)
              {
                uint64_t v948 = 0;
                uint64_t v949 = 0;
                uint64_t v950 = v946 >> 29;
                uint64_t v951 = *(void *)(*v101 + v950);
                uint64_t v952 = *(void *)(*v102 + v950);
                do
                {
                  v948 += v951;
                  v949 += v952;
                  --v947;
                }
                while (v947);
              }
              break;
            default:
              LODWORD(v890) = 1;
              uint64_t v891 = -20;
              do
              {
                uint64_t v890 = *(int *)(v103 + v891) * (uint64_t)(int)v890;
                v891 += 4;
              }
              while (v891);
              if (v100[6])
              {
                uint64_t result = 0;
                uint64_t v892 = *(void **)v6;
                uint64_t v1511 = v102;
                uint64_t v1478 = v890;
                do
                {
                  uint64_t v893 = *v100;
                  unint64_t v894 = (unint64_t)((char *)v100[1] - (char *)*v100) >> 2;
                  uint64_t v895 = (v894 - 1);
                  uint64_t v1528 = result;
                  uint64_t v1494 = v892;
                  uint64_t v896 = 0;
                  if ((int)v894 - 1 >= 0)
                  {
                    uint64_t v897 = *v101;
                    do
                    {
                      ldiv_t v898 = ldiv((int)result, v893[v895]);
                      LODWORD(result) = v898.quot;
                      v896 += *(void *)(v897 + 8 * v895--) * v898.rem;
                    }
                    while (v895 != -1);
                  }
                  uint64_t v899 = **a2;
                  unint64_t v900 = (unint64_t)((*a2)[1] - v899) >> 2;
                  uint64_t v901 = *v1511;
                  uint64_t v902 = 0;
                  uint64_t v903 = (v900 - 1);
                  if ((int)v900 - 1 >= 0)
                  {
                    int v904 = v1528;
                    do
                    {
                      ldiv_t v905 = ldiv(v904, *(int *)(v899 + 4 * v903));
                      int v904 = v905.quot;
                      v902 += *(void *)(v901 + 8 * v903--) * v905.rem;
                    }
                    while (v903 != -1);
                  }
                  uint64_t v892 = v1494;
                  uint64_t v906 = ((v892[1] - *v892) << 30) - 0x500000000;
                  int v907 = *(int *)((char *)v893 + (v906 >> 30));
                  if (v907 >= 1)
                  {
                    uint64_t v908 = v906 >> 29;
                    uint64_t v909 = *(void *)(*v101 + v908);
                    uint64_t v910 = *(void *)(v901 + v908);
                    do
                    {
                      v896 += v909;
                      v902 += v910;
                      --v907;
                    }
                    while (v907);
                    uint64_t v892 = *(void **)v6;
                  }
                  uint64_t result = v1528 + v1478;
                }
                while (v892[6] > (unint64_t)(v1528 + v1478));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v19 = v4[6];
          if (v19)
          {
            int v20 = **(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v21 = (_DWORD *)v4[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          uint64_t v113 = *(void *)(*(void *)result + 160);
          if (v113)
          {
            uint64_t v114 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v115 = (_DWORD *)v4[19];
            do
            {
              int v116 = *v114++;
              *v115++ = v116;
              --v113;
            }
            while (v113);
          }
          break;
        case 2:
          uint64_t v117 = *(int ***)result;
          uint64_t v118 = **(int ***)result;
          uint64_t v119 = *(void *)(*(void *)result + 8) - (void)v118;
          switch(v119 >> 2)
          {
            case 1:
              if (*v118 >= 1)
              {
                uint64_t v120 = 0;
                uint64_t v121 = v117[19];
                uint64_t v122 = v4[19];
                uint64_t v123 = *(void *)v117[3];
                do
                {
                  *(_DWORD *)(v122 + 4 * v120) = *(unsigned __int8 *)v121;
                  uint64_t v121 = (int *)((char *)v121 + v123);
                  ++v120;
                }
                while (*v118 > (int)v120);
              }
              break;
            case 2:
              int v394 = *v118;
              if (*v118 >= 1)
              {
                int v395 = 0;
                uint64_t v396 = 0;
                uint64_t v397 = 0;
                v398 = v117[19];
                uint64_t v399 = v4[19];
                uint64_t v400 = v117[3];
                uint64_t v401 = *(void *)v400;
                uint64_t v402 = *((void *)v400 + 1);
                int v403 = v118[1];
                do
                {
                  if (v403 >= 1)
                  {
                    uint64_t v404 = 0;
                    do
                    {
                      *(_DWORD *)(v399 + 4 * v396 + 4 * v404) = *((unsigned __int8 *)v398 + v397);
                      v397 += v402;
                      int v403 = v118[1];
                      ++v404;
                    }
                    while ((int)v404 < v403);
                    int v394 = *v118;
                    v396 += v404;
                  }
                  uint64_t v397 = v397 + v401 - v402 * v403;
                  ++v395;
                }
                while (v395 < v394);
              }
              break;
            case 3:
              uint64_t result = *v118;
              if ((int)result >= 1)
              {
                int v405 = 0;
                uint64_t v406 = 0;
                uint64_t v407 = 0;
                v408 = v117[19];
                uint64_t v409 = v4[19];
                uint64_t v410 = v117[3];
                uint64_t v411 = *(void *)v410;
                uint64_t v412 = *((void *)v410 + 1);
                int v413 = v118[1];
                do
                {
                  if (v413 >= 1)
                  {
                    int v414 = 0;
                    int v415 = v117[3];
                    uint64_t v416 = *((void *)v410 + 2);
                    int v417 = v118[2];
                    do
                    {
                      if (v417 >= 1)
                      {
                        uint64_t v418 = 0;
                        uint64_t v419 = *((void *)v415 + 2);
                        do
                        {
                          *(_DWORD *)(v409 + 4 * v406 + 4 * v418) = *((unsigned __int8 *)v408 + v407);
                          v407 += v419;
                          int v417 = v118[2];
                          ++v418;
                        }
                        while ((int)v418 < v417);
                        int v413 = v118[1];
                        v406 += v418;
                      }
                      uint64_t v407 = v407 + v412 - v416 * v417;
                      ++v414;
                    }
                    while (v414 < v413);
                    uint64_t result = *v118;
                  }
                  uint64_t v407 = v407 + v411 - v412 * v413;
                  ++v405;
                }
                while (v405 < (int)result);
              }
              break;
            case 4:
              int v420 = *v118;
              if (*v118 >= 1)
              {
                int v421 = 0;
                uint64_t v422 = 0;
                uint64_t v423 = 0;
                v424 = v117[19];
                uint64_t v425 = v4[19];
                uint64_t v426 = v117[3];
                uint64_t v427 = *(void *)v426;
                uint64_t v428 = *((void *)v426 + 1);
                int v429 = v118[1];
                do
                {
                  if (v429 >= 1)
                  {
                    int v430 = 0;
                    int v431 = v117[3];
                    uint64_t v432 = *((void *)v426 + 2);
                    int v433 = v118[2];
                    do
                    {
                      if (v433 >= 1)
                      {
                        int v434 = 0;
                        uint64_t v435 = v117[3];
                        uint64_t v436 = *((void *)v431 + 2);
                        uint64_t v437 = *((void *)v431 + 3);
                        int v438 = v118[3];
                        do
                        {
                          if (v438 >= 1)
                          {
                            uint64_t v439 = 0;
                            uint64_t v440 = *((void *)v435 + 3);
                            do
                            {
                              *(_DWORD *)(v425 + 4 * v422 + 4 * v439) = *((unsigned __int8 *)v424 + v423);
                              v423 += v440;
                              int v438 = v118[3];
                              ++v439;
                            }
                            while ((int)v439 < v438);
                            int v433 = v118[2];
                            v422 += v439;
                          }
                          uint64_t v423 = v423 + v436 - v437 * v438;
                          ++v434;
                        }
                        while (v434 < v433);
                        int v429 = v118[1];
                      }
                      uint64_t v423 = v423 + v428 - v432 * v433;
                      ++v430;
                    }
                    while (v430 < v429);
                    int v420 = *v118;
                  }
                  uint64_t result = v429;
                  uint64_t v423 = v423 + v427 - v428 * v429;
                  ++v421;
                }
                while (v421 < v420);
              }
              break;
            default:
              uint64_t v385 = v4[6];
              if (v385)
              {
                uint64_t v386 = 0;
                uint64_t v387 = v117[19];
                uint64_t v388 = v4[19];
                uint64_t v389 = ((unint64_t)v119 >> 2) - 1;
                uint64_t v390 = v117[3];
                do
                {
                  uint64_t v391 = 0;
                  if ((v389 & 0x80000000) == 0)
                  {
                    uint64_t v392 = v389;
                    LODWORD(result) = v386;
                    do
                    {
                      ldiv_t v393 = ldiv((int)result, v118[v392]);
                      uint64_t result = v393.quot;
                      v391 += *(void *)&v390[2 * v392--] * v393.rem;
                    }
                    while (v392 != -1);
                  }
                  *(_DWORD *)(v388 + 4 * v386++) = *((unsigned __int8 *)v387 + v391);
                }
                while (v386 != v385);
              }
              break;
          }
          break;
        case 3:
          int v124 = *(unsigned int ***)result;
          uint64_t v126 = **(void **)result;
          uint64_t v125 = *(void *)(*(void *)result + 8);
          unint64_t v127 = v125 - v126;
          switch((v125 - v126) >> 2)
          {
            case 1:
              uint64_t v128 = (v127 << 30) - 0x100000000;
              int v129 = *(_DWORD *)(v126 + (v128 >> 30));
              if (v129 >= 1)
              {
                uint64_t v130 = v128 >> 29;
                uint64_t v131 = *(void *)((char *)v124[3] + (v128 >> 29));
                uint64_t v132 = *(void *)(v4[3] + v130);
                v133 = (_DWORD *)v4[19];
                unsigned int v134 = v124[19];
                uint64_t v135 = 4 * v132;
                do
                {
                  _DWORD *v133 = *(unsigned __int8 *)v134;
                  unsigned int v134 = (unsigned int *)((char *)v134 + v131);
                  v133 = (_DWORD *)((char *)v133 + v135);
                  --v129;
                }
                while (v129);
              }
              break;
            case 2:
              uint64_t v988 = (v127 << 30) - 0x200000000;
              int v989 = *(_DWORD *)(v126 + (v988 >> 30));
              if (v989 >= 1)
              {
                uint64_t v990 = 0;
                int v991 = 0;
                uint64_t v992 = 0;
                int v993 = v124[3];
                uint64_t v994 = v988 >> 29;
                uint64_t v995 = *(void *)((char *)v993 + (v988 >> 29));
                uint64_t v996 = v4[3];
                uint64_t v997 = (v127 << 30) - 0x100000000;
                uint64_t v998 = *(void *)((char *)v993 + (v997 >> 29));
                uint64_t v999 = v997 >> 32;
                uint64_t v1000 = 4 * *(void *)(v996 + v994);
                uint64_t v1001 = 4 * *(void *)(v996 + (v997 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v126 + 4 * v999);
                  if ((int)result >= 1)
                  {
                    uint64_t v1002 = v124[19];
                    uint64_t v1003 = (_DWORD *)(v4[19] + v990);
                    do
                    {
                      *uint64_t v1003 = *((unsigned __int8 *)v1002 + v992);
                      uint64_t v1003 = (_DWORD *)((char *)v1003 + v1001);
                      uint64_t v1002 = (unsigned int *)((char *)v1002 + v998);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v992 += v995;
                  ++v991;
                  v990 += v1000;
                }
                while (v991 != v989);
              }
              break;
            case 3:
              uint64_t v1004 = (v127 << 30) - 0x300000000;
              int v1005 = *(_DWORD *)(v126 + (v1004 >> 30));
              if (v1005 >= 1)
              {
                uint64_t v1006 = 0;
                int v1007 = 0;
                uint64_t v1008 = 0;
                uint64_t v1009 = v127 << 30;
                uint64_t v1010 = v124[3];
                uint64_t v1011 = v1004 >> 29;
                uint64_t v1012 = *(void *)((char *)v1010 + (v1004 >> 29));
                uint64_t v1013 = v4[3];
                uint64_t v1014 = *(void *)(v1013 + v1011);
                uint64_t v1015 = v1009 - 0x200000000;
                uint64_t v1016 = (v1009 - 0x200000000) >> 29;
                uint64_t v1017 = v1009 - 0x100000000;
                uint64_t v1018 = *(void *)((char *)v1010 + v1016);
                uint64_t v1019 = v1015 >> 32;
                uint64_t v1020 = *(void *)(v1013 + v1016);
                uint64_t v1021 = v1017 >> 32;
                uint64_t result = 4 * v1014;
                uint64_t v1022 = 4 * v1020;
                do
                {
                  int v1023 = *(_DWORD *)(v126 + 4 * v1019);
                  if (v1023 >= 1)
                  {
                    int v1024 = 0;
                    uint64_t v1025 = *(void *)&v1010[2 * v1021];
                    int v1026 = *a2;
                    uint64_t v1027 = 4 * *(void *)(v1013 + 8 * v1021);
                    uint64_t v1028 = v1006;
                    uint64_t v1029 = v1008;
                    do
                    {
                      int v1030 = *(_DWORD *)(v126 + 4 * v1021);
                      if (v1030 >= 1)
                      {
                        uint64_t v1031 = v124[19];
                        int v1032 = (_DWORD *)(v1026[19] + v1028);
                        do
                        {
                          *int v1032 = *((unsigned __int8 *)v1031 + v1029);
                          int v1032 = (_DWORD *)((char *)v1032 + v1027);
                          uint64_t v1031 = (unsigned int *)((char *)v1031 + v1025);
                          --v1030;
                        }
                        while (v1030);
                      }
                      v1029 += v1018;
                      ++v1024;
                      v1028 += v1022;
                    }
                    while (v1024 != v1023);
                  }
                  v1008 += v1012;
                  ++v1007;
                  v1006 += result;
                }
                while (v1007 != v1005);
              }
              break;
            case 4:
              uint64_t v1033 = (v127 << 30) - 0x400000000;
              int v1530 = *(_DWORD *)(v126 + (v1033 >> 30));
              if (v1530 >= 1)
              {
                uint64_t v1034 = 0;
                int v1035 = 0;
                uint64_t v1036 = 0;
                uint64_t v1037 = v127 << 30;
                uint64_t v1038 = v124[3];
                uint64_t v1039 = v1033 >> 29;
                uint64_t v1513 = *(void *)((char *)v1038 + v1039);
                uint64_t v1040 = v4[3];
                uint64_t v1496 = (v1037 - 0x300000000) >> 32;
                uint64_t v1041 = (v1037 - 0x300000000) >> 29;
                uint64_t v1042 = *(void *)((char *)v1038 + v1041);
                uint64_t v1043 = (v1037 - 0x200000000) >> 32;
                uint64_t result = (v1037 - 0x100000000) >> 32;
                uint64_t v1480 = 4 * *(void *)(v1040 + v1039);
                uint64_t v1044 = 4 * *(void *)(v1040 + v1041);
                do
                {
                  int v1045 = *(_DWORD *)(v126 + 4 * v1496);
                  if (v1045 >= 1)
                  {
                    int v1046 = 0;
                    uint64_t v1047 = *(void *)&v1038[2 * v1043];
                    uint64_t v1048 = 4 * *(void *)(v1040 + 8 * v1043);
                    uint64_t v1049 = v1034;
                    uint64_t v1050 = v1036;
                    do
                    {
                      int v1051 = *(_DWORD *)(v126 + 4 * v1043);
                      if (v1051 >= 1)
                      {
                        int v1052 = 0;
                        uint64_t v1053 = *(void *)&v1038[2 * result];
                        int v1054 = *a2;
                        uint64_t v1055 = 4 * *(void *)(v1040 + 8 * result);
                        uint64_t v1056 = v1049;
                        uint64_t v1057 = v1050;
                        do
                        {
                          int v1058 = *(_DWORD *)(v126 + 4 * result);
                          if (v1058 >= 1)
                          {
                            uint64_t v1059 = v124[19];
                            int v1060 = (_DWORD *)(v1054[19] + v1056);
                            do
                            {
                              *int v1060 = *((unsigned __int8 *)v1059 + v1057);
                              int v1060 = (_DWORD *)((char *)v1060 + v1055);
                              uint64_t v1059 = (unsigned int *)((char *)v1059 + v1053);
                              --v1058;
                            }
                            while (v1058);
                          }
                          v1057 += v1047;
                          ++v1052;
                          v1056 += v1048;
                        }
                        while (v1052 != v1051);
                      }
                      v1050 += v1042;
                      ++v1046;
                      v1049 += v1044;
                    }
                    while (v1046 != v1045);
                  }
                  v1036 += v1513;
                  ++v1035;
                  v1034 += v1480;
                }
                while (v1035 != v1530);
              }
              break;
            case 5:
              uint64_t v1061 = (v127 << 30) - 0x500000000;
              int v1437 = *(_DWORD *)(v126 + (v1061 >> 30));
              if (v1437 >= 1)
              {
                uint64_t v1457 = 0;
                uint64_t v1466 = 0;
                int v1447 = 0;
                uint64_t v1062 = v127 << 30;
                uint64_t v1063 = v124[3];
                uint64_t v1064 = v1061 >> 29;
                uint64_t v1427 = *(void *)((char *)v1063 + v1064);
                uint64_t v1065 = v4[3];
                uint64_t v1066 = (v1062 - 0x400000000) >> 29;
                uint64_t v1497 = *(void *)((char *)v1063 + v1066);
                uint64_t v1417 = (v1062 - 0x400000000) >> 32;
                uint64_t v1514 = (v1062 - 0x300000000) >> 32;
                uint64_t result = (v1062 - 0x200000000) >> 32;
                uint64_t v1067 = (v1062 - 0x100000000) >> 32;
                uint64_t v1408 = 4 * *(void *)(v1065 + v1064);
                uint64_t v1481 = 4 * *(void *)(v1065 + v1066);
                do
                {
                  int v1531 = *(_DWORD *)(v126 + 4 * v1417);
                  if (v1531 >= 1)
                  {
                    int v1068 = 0;
                    uint64_t v1069 = *(void *)&v1063[2 * v1514];
                    uint64_t v1070 = 4 * *(void *)(v1065 + 8 * v1514);
                    uint64_t v1071 = v1457;
                    uint64_t v1072 = v1466;
                    do
                    {
                      int v1073 = *(_DWORD *)(v126 + 4 * v1514);
                      if (v1073 >= 1)
                      {
                        int v1074 = 0;
                        uint64_t v1075 = *(void *)&v1063[2 * result];
                        uint64_t v1076 = 4 * *(void *)(v1065 + 8 * result);
                        uint64_t v1077 = v1072;
                        uint64_t v1078 = v1071;
                        do
                        {
                          int v1079 = *(_DWORD *)(v126 + 4 * result);
                          if (v1079 >= 1)
                          {
                            int v1080 = 0;
                            uint64_t v1081 = *(void *)&v1063[2 * v1067];
                            int v1082 = *a2;
                            uint64_t v1083 = 4 * *(void *)(v1065 + 8 * v1067);
                            uint64_t v1084 = v1077;
                            uint64_t v1085 = v1078;
                            do
                            {
                              int v1086 = *(_DWORD *)(v126 + 4 * v1067);
                              if (v1086 >= 1)
                              {
                                uint64_t v1087 = v124[19];
                                int v1088 = (_DWORD *)(v1082[19] + v1084);
                                do
                                {
                                  *int v1088 = *((unsigned __int8 *)v1087 + v1085);
                                  int v1088 = (_DWORD *)((char *)v1088 + v1083);
                                  uint64_t v1087 = (unsigned int *)((char *)v1087 + v1081);
                                  --v1086;
                                }
                                while (v1086);
                              }
                              v1085 += v1075;
                              ++v1080;
                              v1084 += v1076;
                            }
                            while (v1080 != v1079);
                          }
                          v1078 += v1069;
                          ++v1074;
                          v1077 += v1070;
                        }
                        while (v1074 != v1073);
                      }
                      v1071 += v1497;
                      ++v1068;
                      v1072 += v1481;
                    }
                    while (v1068 != v1531);
                  }
                  v1457 += v1427;
                  v1466 += v1408;
                  ++v1447;
                }
                while (v1447 != v1437);
              }
              break;
            default:
              LODWORD(v953) = 1;
              uint64_t v954 = -20;
              do
              {
                uint64_t v953 = *(int *)(v125 + v954) * (uint64_t)(int)v953;
                v954 += 4;
              }
              while (v954);
              uint64_t v1395 = v124[6];
              if (v1395)
              {
                uint64_t v955 = 0;
                uint64_t v1385 = (v127 >> 2) - 1;
                uint64_t v956 = v124[3];
                uint64_t v1371 = *v4;
                uint64_t v1380 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                uint64_t v957 = (v127 << 30) - 0x500000000;
                uint64_t v958 = v4[3];
                uint64_t v1375 = v957 >> 32;
                uint64_t v1416 = *(void *)((char *)v956 + (v957 >> 29));
                uint64_t v1426 = (uint64_t)((v127 << 30) - 0x400000000) >> 32;
                uint64_t v1512 = (uint64_t)((v127 << 30) - 0x300000000) >> 32;
                uint64_t v959 = (uint64_t)((v127 << 30) - 0x200000000) >> 32;
                uint64_t v960 = (uint64_t)((v127 << 30) - 0x100000000) >> 32;
                uint64_t v1407 = 4 * *(void *)(v958 + (v957 >> 29));
                uint64_t v1390 = v953;
                do
                {
                  uint64_t v961 = v1385;
                  if ((v1385 & 0x80000000) != 0)
                  {
                    uint64_t v962 = 0;
                  }
                  else
                  {
                    uint64_t v962 = 0;
                    LODWORD(result) = v955;
                    do
                    {
                      ldiv_t v963 = ldiv((int)result, *(int *)(v126 + 4 * v961));
                      uint64_t result = v963.quot;
                      v962 += *(void *)&v956[2 * v961--] * v963.rem;
                    }
                    while (v961 != -1);
                  }
                  uint64_t v1465 = v962;
                  uint64_t v964 = v1380;
                  uint64_t v1400 = v955;
                  uint64_t v965 = 0;
                  if ((v1380 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v955;
                    do
                    {
                      ldiv_t v966 = ldiv((int)result, *(int *)(v1371 + 4 * v964));
                      uint64_t result = v966.quot;
                      v965 += *(void *)(v958 + 8 * v964--) * v966.rem;
                    }
                    while (v964 != -1);
                  }
                  int v1436 = *(_DWORD *)(v126 + 4 * v1375);
                  if (v1436 >= 1)
                  {
                    int v967 = 0;
                    uint64_t v1495 = *(void *)&v956[2 * v1426];
                    uint64_t v1456 = 4 * v965;
                    uint64_t v1479 = 4 * *(void *)(v958 + 8 * v1426);
                    do
                    {
                      int v1446 = v967;
                      int v1529 = *(_DWORD *)(v126 + 4 * v1426);
                      if (v1529 >= 1)
                      {
                        int v968 = 0;
                        uint64_t v969 = *(void *)&v956[2 * v1512];
                        uint64_t v970 = 4 * *(void *)(v958 + 8 * v1512);
                        uint64_t v971 = v1456;
                        uint64_t v972 = v1465;
                        do
                        {
                          int v973 = *(_DWORD *)(v126 + 4 * v1512);
                          if (v973 >= 1)
                          {
                            int v974 = 0;
                            uint64_t v975 = *(void *)&v956[2 * v959];
                            uint64_t v976 = 4 * *(void *)(v958 + 8 * v959);
                            uint64_t v977 = v971;
                            uint64_t result = v972;
                            do
                            {
                              int v978 = *(_DWORD *)(v126 + 4 * v959);
                              if (v978 >= 1)
                              {
                                int v979 = 0;
                                uint64_t v980 = *(void *)&v956[2 * v960];
                                int v981 = *a2;
                                uint64_t v982 = 4 * *(void *)(v958 + 8 * v960);
                                uint64_t v983 = v977;
                                uint64_t v984 = result;
                                do
                                {
                                  int v985 = *(_DWORD *)(v126 + 4 * v960);
                                  if (v985 >= 1)
                                  {
                                    uint64_t v986 = v124[19];
                                    int v987 = (_DWORD *)(v981[19] + v983);
                                    do
                                    {
                                      *int v987 = *((unsigned __int8 *)v986 + v984);
                                      int v987 = (_DWORD *)((char *)v987 + v982);
                                      uint64_t v986 = (unsigned int *)((char *)v986 + v980);
                                      --v985;
                                    }
                                    while (v985);
                                  }
                                  v984 += v975;
                                  ++v979;
                                  v983 += v976;
                                }
                                while (v979 != v978);
                              }
                              result += v969;
                              ++v974;
                              v977 += v970;
                            }
                            while (v974 != v973);
                          }
                          v972 += v1495;
                          ++v968;
                          v971 += v1479;
                        }
                        while (v968 != v1529);
                      }
                      v1465 += v1416;
                      int v967 = v1446 + 1;
                      v1456 += v1407;
                    }
                    while (v1446 + 1 != v1436);
                  }
                  uint64_t v955 = v1400 + v1390;
                }
                while ((unint64_t)v1395 > v1400 + v1390);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v22 = v4[6];
          if (v22)
          {
            uint64_t v23 = **(unsigned __int8 **)(*(void *)result + 152);
            float v24 = (void *)v4[19];
            do
            {
              *v24++ = v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          uint64_t v136 = *(void *)(*(void *)result + 160);
          if (v136)
          {
            uint64_t v137 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v138 = (void *)v4[19];
            do
            {
              unsigned int v139 = *v137++;
              *v138++ = v139;
              --v136;
            }
            while (v136);
          }
          break;
        case 2:
          v140 = *(int ***)result;
          uint64_t v141 = **(int ***)result;
          uint64_t v142 = *(void *)(*(void *)result + 8) - (void)v141;
          switch(v142 >> 2)
          {
            case 1:
              uint64_t v143 = *v141;
              if ((int)v143 >= 1)
              {
                uint64_t v144 = v140[19];
                unint64_t v145 = (void *)v4[19];
                uint64_t v146 = *(void *)v140[3];
                do
                {
                  *v145++ = *(unsigned __int8 *)v144;
                  uint64_t v144 = (int *)((char *)v144 + v146);
                  --v143;
                }
                while (v143);
              }
              break;
            case 2:
              int v450 = *v141;
              if (*v141 >= 1)
              {
                int v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = 0;
                uint64_t v454 = v140[19];
                uint64_t v455 = v4[19];
                uint64_t v456 = v141[1];
                uint64_t v457 = v140[3];
                uint64_t v459 = *(void *)v457;
                uint64_t v458 = *((void *)v457 + 1);
                uint64_t v460 = v459 - v458 * v456;
                do
                {
                  int v461 = v456;
                  if ((int)v456 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((unsigned __int8 *)v454 + v453);
                      *(void *)(v455 + 8 * v452++) = result;
                      v453 += v458;
                      --v461;
                    }
                    while (v461);
                  }
                  v453 += v460;
                  ++v451;
                }
                while (v451 != v450);
              }
              break;
            case 3:
              int v462 = *v141;
              if (*v141 >= 1)
              {
                int v463 = 0;
                uint64_t result = 0;
                uint64_t v464 = 0;
                uint64_t v465 = v140[19];
                uint64_t v466 = v4[19];
                uint64_t v467 = v141[1];
                uint64_t v468 = v140[3];
                uint64_t v469 = *((void *)v468 + 1);
                uint64_t v470 = *(void *)v468 - v469 * v467;
                do
                {
                  if ((int)v467 < 1)
                  {
                    uint64_t v477 = result;
                  }
                  else
                  {
                    int v471 = 0;
                    uint64_t v472 = v141[2];
                    uint64_t v473 = v140[3];
                    uint64_t v474 = v469 - *((void *)v468 + 2) * v472;
                    do
                    {
                      if ((int)v472 < 1)
                      {
                        uint64_t v477 = result;
                      }
                      else
                      {
                        uint64_t v475 = *((void *)v473 + 2);
                        int v476 = v472;
                        do
                        {
                          uint64_t v477 = result + 1;
                          *(void *)(v466 + 8 * result) = *((unsigned __int8 *)v465 + v464);
                          v464 += v475;
                          ++result;
                          --v476;
                        }
                        while (v476);
                      }
                      v464 += v474;
                      ++v471;
                      uint64_t result = v477;
                    }
                    while (v471 != v467);
                  }
                  v464 += v470;
                  ++v463;
                  uint64_t result = v477;
                }
                while (v463 != v462);
              }
              break;
            case 4:
              int v478 = *v141;
              if (*v141 >= 1)
              {
                int v479 = 0;
                uint64_t result = 0;
                uint64_t v480 = 0;
                uint64_t v481 = v140[19];
                uint64_t v482 = v4[19];
                uint64_t v483 = v141[1];
                uint64_t v484 = v140[3];
                uint64_t v485 = *((void *)v484 + 1);
                uint64_t v486 = *(void *)v484 - v485 * v483;
                do
                {
                  if ((int)v483 < 1)
                  {
                    uint64_t v497 = result;
                  }
                  else
                  {
                    int v487 = 0;
                    uint64_t v488 = v141[2];
                    int v489 = v140[3];
                    uint64_t v490 = v485 - *((void *)v484 + 2) * v488;
                    do
                    {
                      if ((int)v488 < 1)
                      {
                        uint64_t v497 = result;
                      }
                      else
                      {
                        int v491 = 0;
                        uint64_t v492 = v141[3];
                        uint64_t v493 = v140[3];
                        uint64_t v494 = *((void *)v489 + 2) - *((void *)v489 + 3) * v492;
                        do
                        {
                          if ((int)v492 < 1)
                          {
                            uint64_t v497 = result;
                          }
                          else
                          {
                            uint64_t v495 = *((void *)v493 + 3);
                            int v496 = v492;
                            do
                            {
                              uint64_t v497 = result + 1;
                              *(void *)(v482 + 8 * result) = *((unsigned __int8 *)v481 + v480);
                              v480 += v495;
                              ++result;
                              --v496;
                            }
                            while (v496);
                          }
                          v480 += v494;
                          ++v491;
                          uint64_t result = v497;
                        }
                        while (v491 != v488);
                      }
                      v480 += v490;
                      ++v487;
                      uint64_t result = v497;
                    }
                    while (v487 != v483);
                  }
                  v480 += v486;
                  ++v479;
                  uint64_t result = v497;
                }
                while (v479 != v478);
              }
              break;
            default:
              uint64_t v441 = v4[6];
              if (v441)
              {
                uint64_t v442 = 0;
                uint64_t v443 = v140[19];
                uint64_t v444 = v4[19];
                uint64_t v445 = ((unint64_t)v142 >> 2) - 1;
                uint64_t v446 = v140[3];
                do
                {
                  uint64_t v447 = 0;
                  if ((v445 & 0x80000000) == 0)
                  {
                    uint64_t v448 = v445;
                    LODWORD(result) = v442;
                    do
                    {
                      ldiv_t v449 = ldiv((int)result, v141[v448]);
                      uint64_t result = v449.quot;
                      v447 += *(void *)&v446[2 * v448--] * v449.rem;
                    }
                    while (v448 != -1);
                  }
                  *(void *)(v444 + 8 * v442++) = *((unsigned __int8 *)v443 + v447);
                }
                while (v442 != v441);
              }
              break;
          }
          break;
        case 3:
          int v147 = *(unsigned int ***)result;
          uint64_t v149 = **(void **)result;
          uint64_t v148 = *(void *)(*(void *)result + 8);
          unint64_t v150 = v148 - v149;
          switch((v148 - v149) >> 2)
          {
            case 1:
              uint64_t v151 = (v150 << 30) - 0x100000000;
              int v152 = *(_DWORD *)(v149 + (v151 >> 30));
              if (v152 >= 1)
              {
                uint64_t v153 = v151 >> 29;
                uint64_t v154 = *(void *)((char *)v147[3] + (v151 >> 29));
                uint64_t v155 = *(void *)(v4[3] + v153);
                v156 = (void *)v4[19];
                v157 = v147[19];
                uint64_t v158 = 8 * v155;
                do
                {
                  void *v156 = *(unsigned __int8 *)v157;
                  v157 = (unsigned int *)((char *)v157 + v154);
                  v156 = (void *)((char *)v156 + v158);
                  --v152;
                }
                while (v152);
              }
              break;
            case 2:
              uint64_t v1123 = (v150 << 30) - 0x200000000;
              int v1124 = *(_DWORD *)(v149 + (v1123 >> 30));
              if (v1124 >= 1)
              {
                uint64_t v1125 = 0;
                int v1126 = 0;
                uint64_t v1127 = 0;
                uint64_t v1128 = v150 << 30;
                uint64_t v1129 = v147[3];
                uint64_t v1130 = v1123 >> 29;
                uint64_t v1131 = *(void *)((char *)v1129 + (v1123 >> 29));
                uint64_t v1132 = v4[3];
                uint64_t result = v1128 - 0x100000000;
                uint64_t v1133 = (v1128 - 0x100000000) >> 29;
                uint64_t v1134 = *(void *)((char *)v1129 + v1133);
                int v1135 = *(_DWORD *)(v149 + (result >> 30));
                uint64_t v1136 = 8 * *(void *)(v1132 + v1130);
                uint64_t v1137 = 8 * *(void *)(v1132 + v1133);
                do
                {
                  if (v1135 >= 1)
                  {
                    uint64_t result = (uint64_t)v147[19];
                    uint64_t v1138 = (void *)(v4[19] + v1125);
                    int v1139 = v1135;
                    do
                    {
                      *uint64_t v1138 = *(unsigned __int8 *)(result + v1127);
                      uint64_t v1138 = (void *)((char *)v1138 + v1137);
                      result += v1134;
                      --v1139;
                    }
                    while (v1139);
                  }
                  v1127 += v1131;
                  ++v1126;
                  v1125 += v1136;
                }
                while (v1126 != v1124);
              }
              break;
            case 3:
              uint64_t v1140 = (v150 << 30) - 0x300000000;
              int v1141 = *(_DWORD *)(v149 + (v1140 >> 30));
              if (v1141 >= 1)
              {
                uint64_t v1142 = 0;
                int v1143 = 0;
                uint64_t v1144 = 0;
                uint64_t v1145 = v150 << 30;
                uint64_t v1146 = v147[3];
                uint64_t v1147 = v1140 >> 29;
                uint64_t v1148 = *(void *)((char *)v1146 + (v1140 >> 29));
                uint64_t v1149 = v4[3];
                uint64_t v1150 = *(void *)(v1149 + v1147);
                uint64_t v1151 = v1145 - 0x200000000;
                uint64_t v1152 = (v1145 - 0x200000000) >> 29;
                uint64_t v1153 = v1145 - 0x100000000;
                uint64_t v1154 = *(void *)((char *)v1146 + v1152);
                uint64_t v1155 = *(void *)(v1149 + v1152);
                int v1156 = *(_DWORD *)(v149 + (v1151 >> 30));
                uint64_t v1157 = v1153 >> 32;
                uint64_t result = 8 * v1150;
                uint64_t v1158 = 8 * v1155;
                do
                {
                  if (v1156 >= 1)
                  {
                    int v1159 = 0;
                    uint64_t v1160 = *(void *)&v1146[2 * v1157];
                    int v1161 = *(_DWORD *)(v149 + 4 * v1157);
                    uint64_t v1162 = *a2;
                    uint64_t v1163 = 8 * *(void *)(v1149 + 8 * v1157);
                    uint64_t v1164 = v1142;
                    uint64_t v1165 = v1144;
                    do
                    {
                      if (v1161 >= 1)
                      {
                        uint64_t v1166 = v147[19];
                        uint64_t v1167 = (void *)(v1162[19] + v1164);
                        int v1168 = v1161;
                        do
                        {
                          *uint64_t v1167 = *((unsigned __int8 *)v1166 + v1165);
                          uint64_t v1167 = (void *)((char *)v1167 + v1163);
                          uint64_t v1166 = (unsigned int *)((char *)v1166 + v1160);
                          --v1168;
                        }
                        while (v1168);
                      }
                      v1165 += v1154;
                      ++v1159;
                      v1164 += v1158;
                    }
                    while (v1159 != v1156);
                  }
                  v1144 += v1148;
                  ++v1143;
                  v1142 += result;
                }
                while (v1143 != v1141);
              }
              break;
            case 4:
              uint64_t v1169 = (v150 << 30) - 0x400000000;
              int v1533 = *(_DWORD *)(v149 + (v1169 >> 30));
              if (v1533 >= 1)
              {
                uint64_t v1170 = 0;
                int v1171 = 0;
                uint64_t v1172 = 0;
                int v1173 = v147[3];
                uint64_t v1174 = v1169 >> 29;
                uint64_t v1516 = *(void *)((char *)v1173 + v1174);
                uint64_t v1175 = v4[3];
                uint64_t v1176 = (v150 << 30) - 0x300000000;
                uint64_t v1177 = (v150 << 30) - 0x200000000;
                uint64_t v1178 = (v150 << 30) - 0x100000000;
                uint64_t v1179 = *(void *)((char *)v1173 + (v1176 >> 29));
                uint64_t v1180 = *(void *)(v1175 + (v1176 >> 29));
                int v1181 = *(_DWORD *)(v149 + (v1176 >> 30));
                uint64_t v1483 = v1177 >> 32;
                uint64_t result = v1178 >> 32;
                uint64_t v1499 = 8 * *(void *)(v1175 + v1174);
                uint64_t v1182 = 8 * v1180;
                do
                {
                  if (v1181 >= 1)
                  {
                    int v1183 = 0;
                    uint64_t v1184 = *(void *)&v1173[2 * v1483];
                    int v1185 = *(_DWORD *)(v149 + 4 * v1483);
                    uint64_t v1186 = 8 * *(void *)(v1175 + 8 * v1483);
                    uint64_t v1187 = v1170;
                    uint64_t v1188 = v1172;
                    do
                    {
                      if (v1185 >= 1)
                      {
                        int v1189 = 0;
                        uint64_t v1190 = *(void *)&v1173[2 * result];
                        int v1191 = *(_DWORD *)(v149 + 4 * result);
                        int v1192 = *a2;
                        uint64_t v1193 = 8 * *(void *)(v1175 + 8 * result);
                        uint64_t v1194 = v1187;
                        uint64_t v1195 = v1188;
                        do
                        {
                          if (v1191 >= 1)
                          {
                            uint64_t v1196 = v147[19];
                            uint64_t v1197 = (void *)(v1192[19] + v1194);
                            int v1198 = v1191;
                            do
                            {
                              *uint64_t v1197 = *((unsigned __int8 *)v1196 + v1195);
                              uint64_t v1197 = (void *)((char *)v1197 + v1193);
                              uint64_t v1196 = (unsigned int *)((char *)v1196 + v1190);
                              --v1198;
                            }
                            while (v1198);
                          }
                          v1195 += v1184;
                          ++v1189;
                          v1194 += v1186;
                        }
                        while (v1189 != v1185);
                      }
                      v1188 += v1179;
                      ++v1183;
                      v1187 += v1182;
                    }
                    while (v1183 != v1181);
                  }
                  v1172 += v1516;
                  ++v1171;
                  v1170 += v1499;
                }
                while (v1171 != v1533);
              }
              break;
            case 5:
              uint64_t v1199 = (v150 << 30) - 0x500000000;
              int v1439 = *(_DWORD *)(v149 + (v1199 >> 30));
              if (v1439 >= 1)
              {
                uint64_t v1459 = 0;
                uint64_t v1468 = 0;
                int v1449 = 0;
                v1200 = v147[3];
                uint64_t v1201 = v1199 >> 29;
                uint64_t v1429 = *(void *)((char *)v1200 + v1201);
                uint64_t v1202 = v4[3];
                uint64_t v1203 = (v150 << 30) - 0x400000000;
                uint64_t v1517 = *(void *)((char *)v1200 + (v1203 >> 29));
                int v1534 = *(_DWORD *)(v149 + (v1203 >> 30));
                uint64_t v1410 = (uint64_t)((v150 << 30) - 0x300000000) >> 32;
                uint64_t v1484 = (uint64_t)((v150 << 30) - 0x200000000) >> 32;
                uint64_t v1204 = (uint64_t)((v150 << 30) - 0x100000000) >> 32;
                uint64_t v1419 = 8 * *(void *)(v1202 + v1201);
                uint64_t v1500 = 8 * *(void *)(v1202 + (v1203 >> 29));
                do
                {
                  if (v1534 >= 1)
                  {
                    int v1205 = 0;
                    uint64_t v1206 = *(void *)&v1200[2 * v1410];
                    int v1207 = *(_DWORD *)(v149 + 4 * v1410);
                    uint64_t v1208 = 8 * *(void *)(v1202 + 8 * v1410);
                    uint64_t v1209 = v1459;
                    uint64_t v1210 = v1468;
                    do
                    {
                      if (v1207 >= 1)
                      {
                        int v1211 = 0;
                        uint64_t v1212 = *(void *)&v1200[2 * v1484];
                        int v1213 = *(_DWORD *)(v149 + 4 * v1484);
                        uint64_t v1214 = 8 * *(void *)(v1202 + 8 * v1484);
                        uint64_t v1215 = v1210;
                        uint64_t v1216 = v1209;
                        do
                        {
                          if (v1213 >= 1)
                          {
                            int v1217 = 0;
                            uint64_t v1218 = *(void *)&v1200[2 * v1204];
                            int v1219 = *(_DWORD *)(v149 + 4 * v1204);
                            int v1220 = *a2;
                            uint64_t v1221 = 8 * *(void *)(v1202 + 8 * v1204);
                            uint64_t v1222 = v1215;
                            uint64_t v1223 = v1216;
                            do
                            {
                              if (v1219 >= 1)
                              {
                                uint64_t v1224 = v147[19];
                                uint64_t v1225 = (uint64_t *)(v1220[19] + v1222);
                                int v1226 = v1219;
                                do
                                {
                                  uint64_t result = *((unsigned __int8 *)v1224 + v1223);
                                  *uint64_t v1225 = result;
                                  uint64_t v1225 = (uint64_t *)((char *)v1225 + v1221);
                                  uint64_t v1224 = (unsigned int *)((char *)v1224 + v1218);
                                  --v1226;
                                }
                                while (v1226);
                              }
                              v1223 += v1212;
                              ++v1217;
                              v1222 += v1214;
                            }
                            while (v1217 != v1213);
                          }
                          v1216 += v1206;
                          ++v1211;
                          v1215 += v1208;
                        }
                        while (v1211 != v1207);
                      }
                      v1209 += v1517;
                      ++v1205;
                      v1210 += v1500;
                    }
                    while (v1205 != v1534);
                  }
                  v1459 += v1429;
                  v1468 += v1419;
                  ++v1449;
                }
                while (v1449 != v1439);
              }
              break;
            default:
              LODWORD(v1089) = 1;
              uint64_t v1090 = -20;
              do
              {
                uint64_t v1089 = *(int *)(v148 + v1090) * (uint64_t)(int)v1089;
                v1090 += 4;
              }
              while (v1090);
              uint64_t v1396 = v147[6];
              if (v1396)
              {
                uint64_t v1091 = 0;
                uint64_t v1376 = *v4;
                uint64_t v1092 = (v150 << 30) - 0x500000000;
                uint64_t v1386 = (v150 >> 2) - 1;
                uint64_t v1093 = v147[3];
                uint64_t v1094 = v4[3];
                int v1438 = *(_DWORD *)(v149 + (v1092 >> 30));
                uint64_t v1381 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                uint64_t v1372 = (uint64_t)((v150 << 30) - 0x400000000) >> 32;
                uint64_t v1409 = (uint64_t)((v150 << 30) - 0x300000000) >> 32;
                uint64_t v1482 = (uint64_t)((v150 << 30) - 0x200000000) >> 32;
                uint64_t v1095 = (uint64_t)((v150 << 30) - 0x100000000) >> 32;
                uint64_t v1418 = 8 * *(void *)(v1094 + (v1092 >> 29));
                uint64_t v1428 = *(void *)((char *)v1093 + (v1092 >> 29));
                uint64_t v1391 = v1089;
                do
                {
                  uint64_t v1096 = v1386;
                  if ((v1386 & 0x80000000) != 0)
                  {
                    uint64_t v1097 = 0;
                    uint64_t v1098 = v1381;
                  }
                  else
                  {
                    uint64_t v1097 = 0;
                    LODWORD(result) = v1091;
                    uint64_t v1098 = v1381;
                    do
                    {
                      ldiv_t v1099 = ldiv((int)result, *(int *)(v149 + 4 * v1096));
                      uint64_t result = v1099.quot;
                      v1097 += *(void *)&v1093[2 * v1096--] * v1099.rem;
                    }
                    while (v1096 != -1);
                  }
                  uint64_t v1401 = v1091;
                  uint64_t v1100 = 0;
                  if ((v1098 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1091;
                    do
                    {
                      ldiv_t v1101 = ldiv((int)result, *(int *)(v1376 + 4 * v1098));
                      uint64_t result = v1101.quot;
                      v1100 += *(void *)(v1094 + 8 * v1098--) * v1101.rem;
                    }
                    while (v1098 != -1);
                  }
                  if (v1438 >= 1)
                  {
                    int v1102 = 0;
                    uint64_t v1515 = *(void *)&v1093[2 * v1372];
                    int v1532 = *(_DWORD *)(v149 + 4 * v1372);
                    uint64_t v1467 = 8 * v1100;
                    uint64_t v1498 = 8 * *(void *)(v1094 + 8 * v1372);
                    do
                    {
                      int v1448 = v1102;
                      uint64_t v1458 = v1097;
                      if (v1532 >= 1)
                      {
                        int v1103 = 0;
                        uint64_t v1104 = *(void *)&v1093[2 * v1409];
                        int v1105 = *(_DWORD *)(v149 + 4 * v1409);
                        uint64_t v1106 = 8 * *(void *)(v1094 + 8 * v1409);
                        uint64_t v1107 = v1467;
                        do
                        {
                          if (v1105 >= 1)
                          {
                            int v1108 = 0;
                            uint64_t v1109 = *(void *)&v1093[2 * v1482];
                            int v1110 = *(_DWORD *)(v149 + 4 * v1482);
                            uint64_t v1111 = 8 * *(void *)(v1094 + 8 * v1482);
                            uint64_t v1112 = v1107;
                            uint64_t result = v1097;
                            do
                            {
                              if (v1110 >= 1)
                              {
                                int v1113 = 0;
                                uint64_t v1114 = *(void *)&v1093[2 * v1095];
                                int v1115 = *(_DWORD *)(v149 + 4 * v1095);
                                uint64_t v1116 = *a2;
                                uint64_t v1117 = 8 * *(void *)(v1094 + 8 * v1095);
                                uint64_t v1118 = v1112;
                                uint64_t v1119 = result;
                                do
                                {
                                  if (v1115 >= 1)
                                  {
                                    uint64_t v1120 = v147[19];
                                    uint64_t v1121 = (void *)(v1116[19] + v1118);
                                    int v1122 = v1115;
                                    do
                                    {
                                      *uint64_t v1121 = *((unsigned __int8 *)v1120 + v1119);
                                      uint64_t v1121 = (void *)((char *)v1121 + v1117);
                                      uint64_t v1120 = (unsigned int *)((char *)v1120 + v1114);
                                      --v1122;
                                    }
                                    while (v1122);
                                  }
                                  v1119 += v1109;
                                  ++v1113;
                                  v1118 += v1111;
                                }
                                while (v1113 != v1110);
                              }
                              result += v1104;
                              ++v1108;
                              v1112 += v1106;
                            }
                            while (v1108 != v1105);
                          }
                          v1097 += v1515;
                          ++v1103;
                          v1107 += v1498;
                        }
                        while (v1103 != v1532);
                      }
                      uint64_t v1097 = v1458 + v1428;
                      int v1102 = v1448 + 1;
                      v1467 += v1418;
                    }
                    while (v1448 + 1 != v1438);
                  }
                  v1091 += v1391;
                }
                while ((unint64_t)v1396 > v1401 + v1391);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v25 = v4[6];
          if (v25)
          {
            LOBYTE(a4) = **(unsigned char **)(*(void *)result + 152);
            float v26 = (float)LODWORD(a4);
            size_t v27 = (float *)v4[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
          uint64_t v159 = *(void *)(*(void *)result + 160);
          if (v159)
          {
            v160 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v161 = (float *)v4[19];
            do
            {
              unsigned int v162 = *v160++;
              *v161++ = (float)v162;
              --v159;
            }
            while (v159);
          }
          break;
        case 2:
          v163 = *(int ***)result;
          v164 = **(int ***)result;
          uint64_t v165 = *(void *)(*(void *)result + 8) - (void)v164;
          switch(v165 >> 2)
          {
            case 1:
              uint64_t v166 = *v164;
              if ((int)v166 >= 1)
              {
                v167 = v163[19];
                uint64_t v168 = (float *)v4[19];
                uint64_t v169 = *(void *)v163[3];
                do
                {
                  LOBYTE(a4) = *(unsigned char *)v167;
                  a4 = (float)LODWORD(a4);
                  *v168++ = a4;
                  v167 = (int *)((char *)v167 + v169);
                  --v166;
                }
                while (v166);
              }
              break;
            case 2:
              int v507 = *v164;
              if (*v164 >= 1)
              {
                int v508 = 0;
                uint64_t v509 = 0;
                uint64_t v510 = 0;
                uint64_t v511 = v163[19];
                uint64_t v512 = v4[19];
                uint64_t v513 = v164[1];
                uint64_t v514 = v163[3];
                uint64_t v516 = *(void *)v514;
                uint64_t v515 = *((void *)v514 + 1);
                uint64_t v517 = v516 - v515 * v513;
                do
                {
                  int v518 = v513;
                  if ((int)v513 >= 1)
                  {
                    do
                    {
                      LOBYTE(a4) = *((unsigned char *)v511 + v510);
                      a4 = (float)LODWORD(a4);
                      *(float *)(v512 + 4 * v509++) = a4;
                      v510 += v515;
                      --v518;
                    }
                    while (v518);
                  }
                  v510 += v517;
                  ++v508;
                }
                while (v508 != v507);
              }
              break;
            case 3:
              int v519 = *v164;
              if (*v164 >= 1)
              {
                int v520 = 0;
                uint64_t result = 0;
                uint64_t v521 = 0;
                v522 = v163[19];
                uint64_t v523 = v4[19];
                uint64_t v524 = v164[1];
                v525 = v163[3];
                uint64_t v526 = *((void *)v525 + 1);
                uint64_t v527 = *(void *)v525 - v526 * v524;
                do
                {
                  if ((int)v524 < 1)
                  {
                    uint64_t v534 = result;
                  }
                  else
                  {
                    int v528 = 0;
                    uint64_t v529 = v164[2];
                    v530 = v163[3];
                    uint64_t v531 = v526 - *((void *)v525 + 2) * v529;
                    do
                    {
                      if ((int)v529 < 1)
                      {
                        uint64_t v534 = result;
                      }
                      else
                      {
                        uint64_t v532 = *((void *)v530 + 2);
                        int v533 = v529;
                        do
                        {
                          LOBYTE(a4) = *((unsigned char *)v522 + v521);
                          uint64_t v534 = result + 1;
                          a4 = (float)LODWORD(a4);
                          *(float *)(v523 + 4 * result) = a4;
                          v521 += v532;
                          ++result;
                          --v533;
                        }
                        while (v533);
                      }
                      v521 += v531;
                      ++v528;
                      uint64_t result = v534;
                    }
                    while (v528 != v524);
                  }
                  v521 += v527;
                  ++v520;
                  uint64_t result = v534;
                }
                while (v520 != v519);
              }
              break;
            case 4:
              int v535 = *v164;
              if (*v164 >= 1)
              {
                int v536 = 0;
                uint64_t result = 0;
                uint64_t v537 = 0;
                uint64_t v538 = v163[19];
                uint64_t v539 = v4[19];
                uint64_t v540 = v164[1];
                uint64_t v541 = v163[3];
                uint64_t v542 = *((void *)v541 + 1);
                uint64_t v543 = *(void *)v541 - v542 * v540;
                do
                {
                  if ((int)v540 < 1)
                  {
                    uint64_t v554 = result;
                  }
                  else
                  {
                    int v544 = 0;
                    uint64_t v545 = v164[2];
                    uint64_t v546 = v163[3];
                    uint64_t v547 = v542 - *((void *)v541 + 2) * v545;
                    do
                    {
                      if ((int)v545 < 1)
                      {
                        uint64_t v554 = result;
                      }
                      else
                      {
                        int v548 = 0;
                        uint64_t v549 = v164[3];
                        uint64_t v550 = v163[3];
                        uint64_t v551 = *((void *)v546 + 2) - *((void *)v546 + 3) * v549;
                        do
                        {
                          if ((int)v549 < 1)
                          {
                            uint64_t v554 = result;
                          }
                          else
                          {
                            uint64_t v552 = *((void *)v550 + 3);
                            int v553 = v549;
                            do
                            {
                              LOBYTE(a4) = *((unsigned char *)v538 + v537);
                              uint64_t v554 = result + 1;
                              a4 = (float)LODWORD(a4);
                              *(float *)(v539 + 4 * result) = a4;
                              v537 += v552;
                              ++result;
                              --v553;
                            }
                            while (v553);
                          }
                          v537 += v551;
                          ++v548;
                          uint64_t result = v554;
                        }
                        while (v548 != v545);
                      }
                      v537 += v547;
                      ++v544;
                      uint64_t result = v554;
                    }
                    while (v544 != v540);
                  }
                  v537 += v543;
                  ++v536;
                  uint64_t result = v554;
                }
                while (v536 != v535);
              }
              break;
            default:
              uint64_t v498 = v4[6];
              if (v498)
              {
                uint64_t v499 = 0;
                uint64_t v500 = v163[19];
                uint64_t v501 = v4[19];
                uint64_t v502 = ((unint64_t)v165 >> 2) - 1;
                uint64_t v503 = v163[3];
                do
                {
                  uint64_t v504 = 0;
                  if ((v502 & 0x80000000) == 0)
                  {
                    uint64_t v505 = v502;
                    LODWORD(result) = v499;
                    do
                    {
                      ldiv_t v506 = ldiv((int)result, v164[v505]);
                      uint64_t result = v506.quot;
                      v504 += *(void *)&v503[2 * v505--] * v506.rem;
                    }
                    while (v505 != -1);
                  }
                  LOBYTE(a4) = *((unsigned char *)v500 + v504);
                  a4 = (float)LODWORD(a4);
                  *(float *)(v501 + 4 * v499++) = a4;
                }
                while (v499 != v498);
              }
              break;
          }
          break;
        case 3:
          unint64_t v170 = *(unsigned int ***)result;
          uint64_t v172 = **(void **)result;
          uint64_t v171 = *(void *)(*(void *)result + 8);
          unint64_t v173 = v171 - v172;
          switch((v171 - v172) >> 2)
          {
            case 1:
              uint64_t v174 = (v173 << 30) - 0x100000000;
              int v175 = *(_DWORD *)(v172 + (v174 >> 30));
              if (v175 >= 1)
              {
                uint64_t v176 = v174 >> 29;
                uint64_t v177 = *(void *)((char *)v170[3] + (v174 >> 29));
                uint64_t v178 = *(void *)(v4[3] + v176);
                float v179 = (float *)v4[19];
                uint64_t v180 = v170[19];
                uint64_t v181 = 4 * v178;
                do
                {
                  LOBYTE(a4) = *(unsigned char *)v180;
                  a4 = (float)LODWORD(a4);
                  *float v179 = a4;
                  uint64_t v180 = (unsigned int *)((char *)v180 + v177);
                  float v179 = (float *)((char *)v179 + v181);
                  --v175;
                }
                while (v175);
              }
              break;
            case 2:
              uint64_t v1264 = (v173 << 30) - 0x200000000;
              int v1265 = *(_DWORD *)(v172 + (v1264 >> 30));
              if (v1265 >= 1)
              {
                uint64_t v1266 = 0;
                int v1267 = 0;
                uint64_t v1268 = 0;
                uint64_t v1269 = v173 << 30;
                uint64_t v1270 = v170[3];
                uint64_t v1271 = v1264 >> 29;
                uint64_t v1272 = *(void *)((char *)v1270 + (v1264 >> 29));
                uint64_t v1273 = v4[3];
                uint64_t result = v1269 - 0x100000000;
                uint64_t v1274 = (v1269 - 0x100000000) >> 29;
                uint64_t v1275 = *(void *)((char *)v1270 + v1274);
                int v1276 = *(_DWORD *)(v172 + (result >> 30));
                uint64_t v1277 = 4 * *(void *)(v1273 + v1271);
                uint64_t v1278 = 4 * *(void *)(v1273 + v1274);
                do
                {
                  if (v1276 >= 1)
                  {
                    uint64_t result = (uint64_t)v170[19];
                    int v1279 = (float *)(v4[19] + v1266);
                    int v1280 = v1276;
                    do
                    {
                      LOBYTE(a4) = *(unsigned char *)(result + v1268);
                      a4 = (float)LODWORD(a4);
                      *int v1279 = a4;
                      int v1279 = (float *)((char *)v1279 + v1278);
                      result += v1275;
                      --v1280;
                    }
                    while (v1280);
                  }
                  v1268 += v1272;
                  ++v1267;
                  v1266 += v1277;
                }
                while (v1267 != v1265);
              }
              break;
            case 3:
              uint64_t v1281 = (v173 << 30) - 0x300000000;
              int v1282 = *(_DWORD *)(v172 + (v1281 >> 30));
              if (v1282 >= 1)
              {
                uint64_t v1283 = 0;
                int v1284 = 0;
                uint64_t v1285 = 0;
                uint64_t v1286 = v173 << 30;
                uint64_t v1287 = v170[3];
                uint64_t v1288 = v1281 >> 29;
                uint64_t v1289 = *(void *)((char *)v1287 + (v1281 >> 29));
                uint64_t v1290 = v4[3];
                uint64_t v1291 = *(void *)(v1290 + v1288);
                uint64_t v1292 = v1286 - 0x200000000;
                uint64_t v1293 = (v1286 - 0x200000000) >> 29;
                uint64_t v1294 = v1286 - 0x100000000;
                uint64_t v1295 = *(void *)((char *)v1287 + v1293);
                uint64_t v1296 = *(void *)(v1290 + v1293);
                int v1297 = *(_DWORD *)(v172 + (v1292 >> 30));
                uint64_t v1298 = v1294 >> 32;
                uint64_t result = 4 * v1291;
                uint64_t v1299 = 4 * v1296;
                do
                {
                  if (v1297 >= 1)
                  {
                    int v1300 = 0;
                    uint64_t v1301 = *(void *)&v1287[2 * v1298];
                    int v1302 = *(_DWORD *)(v172 + 4 * v1298);
                    uint64_t v1303 = *a2;
                    uint64_t v1304 = 4 * *(void *)(v1290 + 8 * v1298);
                    uint64_t v1305 = v1283;
                    uint64_t v1306 = v1285;
                    do
                    {
                      if (v1302 >= 1)
                      {
                        uint64_t v1307 = v170[19];
                        uint64_t v1308 = (float *)(v1303[19] + v1305);
                        int v1309 = v1302;
                        do
                        {
                          LOBYTE(a4) = *((unsigned char *)v1307 + v1306);
                          a4 = (float)LODWORD(a4);
                          *uint64_t v1308 = a4;
                          uint64_t v1308 = (float *)((char *)v1308 + v1304);
                          uint64_t v1307 = (unsigned int *)((char *)v1307 + v1301);
                          --v1309;
                        }
                        while (v1309);
                      }
                      v1306 += v1295;
                      ++v1300;
                      v1305 += v1299;
                    }
                    while (v1300 != v1297);
                  }
                  v1285 += v1289;
                  ++v1284;
                  v1283 += result;
                }
                while (v1284 != v1282);
              }
              break;
            case 4:
              uint64_t v1310 = (v173 << 30) - 0x400000000;
              int v1536 = *(_DWORD *)(v172 + (v1310 >> 30));
              if (v1536 >= 1)
              {
                uint64_t v1311 = 0;
                int v1312 = 0;
                uint64_t v1313 = 0;
                uint64_t v1314 = v170[3];
                uint64_t v1315 = v1310 >> 29;
                uint64_t v1519 = *(void *)((char *)v1314 + v1315);
                uint64_t v1316 = v4[3];
                uint64_t v1317 = (v173 << 30) - 0x300000000;
                uint64_t v1318 = (v173 << 30) - 0x200000000;
                uint64_t v1319 = (v173 << 30) - 0x100000000;
                uint64_t v1320 = *(void *)((char *)v1314 + (v1317 >> 29));
                uint64_t v1321 = *(void *)(v1316 + (v1317 >> 29));
                int v1322 = *(_DWORD *)(v172 + (v1317 >> 30));
                uint64_t v1323 = v1318 >> 32;
                uint64_t result = v1319 >> 32;
                uint64_t v1502 = 4 * *(void *)(v1316 + v1315);
                uint64_t v1324 = 4 * v1321;
                do
                {
                  if (v1322 >= 1)
                  {
                    int v1325 = 0;
                    uint64_t v1326 = *(void *)&v1314[2 * v1323];
                    int v1327 = *(_DWORD *)(v172 + 4 * v1323);
                    uint64_t v1328 = 4 * *(void *)(v1316 + 8 * v1323);
                    uint64_t v1329 = v1311;
                    uint64_t v1330 = v1313;
                    do
                    {
                      if (v1327 >= 1)
                      {
                        int v1331 = 0;
                        uint64_t v1332 = *(void *)&v1314[2 * result];
                        int v1333 = *(_DWORD *)(v172 + 4 * result);
                        int v1334 = *a2;
                        uint64_t v1335 = 4 * *(void *)(v1316 + 8 * result);
                        uint64_t v1336 = v1329;
                        uint64_t v1337 = v1330;
                        do
                        {
                          if (v1333 >= 1)
                          {
                            uint64_t v1338 = v170[19];
                            v1339 = (float *)(v1334[19] + v1336);
                            int v1340 = v1333;
                            do
                            {
                              LOBYTE(a4) = *((unsigned char *)v1338 + v1337);
                              a4 = (float)LODWORD(a4);
                              float *v1339 = a4;
                              v1339 = (float *)((char *)v1339 + v1335);
                              uint64_t v1338 = (unsigned int *)((char *)v1338 + v1332);
                              --v1340;
                            }
                            while (v1340);
                          }
                          v1337 += v1326;
                          ++v1331;
                          v1336 += v1328;
                        }
                        while (v1331 != v1327);
                      }
                      v1330 += v1320;
                      ++v1325;
                      v1329 += v1324;
                    }
                    while (v1325 != v1322);
                  }
                  v1313 += v1519;
                  ++v1312;
                  v1311 += v1502;
                }
                while (v1312 != v1536);
              }
              break;
            case 5:
              uint64_t v1341 = (v173 << 30) - 0x500000000;
              int v1451 = *(_DWORD *)(v172 + (v1341 >> 30));
              if (v1451 >= 1)
              {
                uint64_t v1470 = 0;
                uint64_t v1486 = 0;
                int v1461 = 0;
                float v1342 = v170[3];
                uint64_t v1343 = v1341 >> 29;
                uint64_t v1441 = *(void *)((char *)v1342 + v1343);
                uint64_t v1344 = v4[3];
                uint64_t v1345 = (v173 << 30) - 0x400000000;
                uint64_t v1520 = *(void *)((char *)v1342 + (v1345 >> 29));
                int v1537 = *(_DWORD *)(v172 + (v1345 >> 30));
                uint64_t result = (uint64_t)((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1346 = (uint64_t)((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1421 = (uint64_t)((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1431 = 4 * *(void *)(v1344 + v1343);
                uint64_t v1503 = 4 * *(void *)(v1344 + (v1345 >> 29));
                do
                {
                  if (v1537 >= 1)
                  {
                    int v1347 = 0;
                    uint64_t v1348 = *(void *)&v1342[2 * v1421];
                    int v1349 = *(_DWORD *)(v172 + 4 * v1421);
                    uint64_t v1350 = 4 * *(void *)(v1344 + 8 * v1421);
                    uint64_t v1351 = v1470;
                    uint64_t v1352 = v1486;
                    do
                    {
                      if (v1349 >= 1)
                      {
                        int v1353 = 0;
                        uint64_t v1354 = *(void *)&v1342[2 * result];
                        int v1355 = *(_DWORD *)(v172 + 4 * result);
                        uint64_t v1356 = 4 * *(void *)(v1344 + 8 * result);
                        uint64_t v1357 = v1352;
                        uint64_t v1358 = v1351;
                        do
                        {
                          if (v1355 >= 1)
                          {
                            int v1359 = 0;
                            uint64_t v1360 = *(void *)&v1342[2 * v1346];
                            int v1361 = *(_DWORD *)(v172 + 4 * v1346);
                            uint64_t v1362 = *a2;
                            uint64_t v1363 = 4 * *(void *)(v1344 + 8 * v1346);
                            uint64_t v1364 = v1357;
                            uint64_t v1365 = v1358;
                            do
                            {
                              if (v1361 >= 1)
                              {
                                uint64_t v1366 = v170[19];
                                uint64_t v1367 = (float *)(v1362[19] + v1364);
                                int v1368 = v1361;
                                do
                                {
                                  LOBYTE(a4) = *((unsigned char *)v1366 + v1365);
                                  a4 = (float)LODWORD(a4);
                                  *uint64_t v1367 = a4;
                                  uint64_t v1367 = (float *)((char *)v1367 + v1363);
                                  uint64_t v1366 = (unsigned int *)((char *)v1366 + v1360);
                                  --v1368;
                                }
                                while (v1368);
                              }
                              v1365 += v1354;
                              ++v1359;
                              v1364 += v1356;
                            }
                            while (v1359 != v1355);
                          }
                          v1358 += v1348;
                          ++v1353;
                          v1357 += v1350;
                        }
                        while (v1353 != v1349);
                      }
                      v1351 += v1520;
                      ++v1347;
                      v1352 += v1503;
                    }
                    while (v1347 != v1537);
                  }
                  v1470 += v1441;
                  v1486 += v1431;
                  ++v1461;
                }
                while (v1461 != v1451);
              }
              break;
            default:
              LODWORD(v1227) = 1;
              uint64_t v1228 = -20;
              do
              {
                uint64_t v1227 = *(int *)(v171 + v1228) * (uint64_t)(int)v1227;
                v1228 += 4;
              }
              while (v1228);
              uint64_t v1402 = v170[6];
              if (v1402)
              {
                uint64_t v1229 = 0;
                uint64_t v1382 = *v4;
                uint64_t v1230 = (v173 << 30) - 0x500000000;
                uint64_t v1392 = (v173 >> 2) - 1;
                uint64_t v1231 = v170[3];
                uint64_t v1232 = v4[3];
                int v1450 = *(_DWORD *)(v172 + (v1230 >> 30));
                uint64_t v1387 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                uint64_t v1377 = (uint64_t)((v173 << 30) - 0x400000000) >> 32;
                uint64_t v1420 = (uint64_t)((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1233 = (uint64_t)((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1234 = (uint64_t)((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1430 = 4 * *(void *)(v1232 + (v1230 >> 29));
                uint64_t v1440 = *(void *)((char *)v1231 + (v1230 >> 29));
                uint64_t v1397 = v1227;
                do
                {
                  uint64_t v1235 = v1392;
                  if ((v1392 & 0x80000000) != 0)
                  {
                    uint64_t v1236 = 0;
                  }
                  else
                  {
                    uint64_t v1236 = 0;
                    LODWORD(result) = v1229;
                    do
                    {
                      uint64_t v1237 = v1236;
                      ldiv_t v1238 = ldiv((int)result, *(int *)(v172 + 4 * v1235));
                      uint64_t result = v1238.quot;
                      uint64_t v1236 = v1237 + *(void *)&v1231[2 * v1235--] * v1238.rem;
                    }
                    while (v1235 != -1);
                  }
                  uint64_t v1239 = v1387;
                  uint64_t v1411 = v1229;
                  uint64_t v1485 = v1236;
                  uint64_t v1240 = 0;
                  if ((v1387 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1229;
                    do
                    {
                      ldiv_t v1241 = ldiv((int)result, *(int *)(v1382 + 4 * v1239));
                      uint64_t result = v1241.quot;
                      v1240 += *(void *)(v1232 + 8 * v1239--) * v1241.rem;
                    }
                    while (v1239 != -1);
                  }
                  if (v1450 >= 1)
                  {
                    int v1242 = 0;
                    uint64_t v1518 = *(void *)&v1231[2 * v1377];
                    int v1535 = *(_DWORD *)(v172 + 4 * v1377);
                    uint64_t v1469 = 4 * v1240;
                    uint64_t v1501 = 4 * *(void *)(v1232 + 8 * v1377);
                    do
                    {
                      int v1460 = v1242;
                      if (v1535 >= 1)
                      {
                        int v1243 = 0;
                        uint64_t v1244 = *(void *)&v1231[2 * v1420];
                        int v1245 = *(_DWORD *)(v172 + 4 * v1420);
                        uint64_t v1246 = 4 * *(void *)(v1232 + 8 * v1420);
                        uint64_t v1247 = v1469;
                        uint64_t v1248 = v1485;
                        do
                        {
                          if (v1245 >= 1)
                          {
                            int v1249 = 0;
                            uint64_t v1250 = *(void *)&v1231[2 * v1233];
                            int v1251 = *(_DWORD *)(v172 + 4 * v1233);
                            uint64_t v1252 = 4 * *(void *)(v1232 + 8 * v1233);
                            uint64_t v1253 = v1247;
                            uint64_t result = v1248;
                            do
                            {
                              if (v1251 >= 1)
                              {
                                int v1254 = 0;
                                uint64_t v1255 = *(void *)&v1231[2 * v1234];
                                int v1256 = *(_DWORD *)(v172 + 4 * v1234);
                                int v1257 = *a2;
                                uint64_t v1258 = 4 * *(void *)(v1232 + 8 * v1234);
                                uint64_t v1259 = v1253;
                                uint64_t v1260 = result;
                                do
                                {
                                  if (v1256 >= 1)
                                  {
                                    uint64_t v1261 = v170[19];
                                    v1262 = (float *)(v1257[19] + v1259);
                                    int v1263 = v1256;
                                    do
                                    {
                                      LOBYTE(a4) = *((unsigned char *)v1261 + v1260);
                                      a4 = (float)LODWORD(a4);
                                      float *v1262 = a4;
                                      v1262 = (float *)((char *)v1262 + v1258);
                                      uint64_t v1261 = (unsigned int *)((char *)v1261 + v1255);
                                      --v1263;
                                    }
                                    while (v1263);
                                  }
                                  v1260 += v1250;
                                  ++v1254;
                                  v1259 += v1252;
                                }
                                while (v1254 != v1251);
                              }
                              result += v1244;
                              ++v1249;
                              v1253 += v1246;
                            }
                            while (v1249 != v1245);
                          }
                          v1248 += v1518;
                          ++v1243;
                          v1247 += v1501;
                        }
                        while (v1243 != v1535);
                      }
                      v1485 += v1440;
                      int v1242 = v1460 + 1;
                      v1469 += v1430;
                    }
                    while (v1460 + 1 != v1450);
                  }
                  uint64_t v1229 = v1411 + v1397;
                }
                while ((unint64_t)v1402 > v1411 + v1397);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<unsigned int>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  uint64_t v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            size_t v7 = (void *)v3[19];
            BOOL v8 = **(_DWORD **)(*(void *)v5 + 152) != 0;
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          uint64_t v30 = *(void *)(*(void *)result + 160);
          if (v30)
          {
            uint64_t v31 = *(int **)(*(void *)result + 152);
            uint64_t v32 = (BOOL *)v3[19];
            uint64_t v33 = 4 * v30;
            do
            {
              int v34 = *v31++;
              *v32++ = v34 != 0;
              v33 -= 4;
            }
            while (v33);
          }
          break;
        case 2:
          uint64_t v35 = *(uint64_t **)result;
          uint64_t v36 = **(int ***)result;
          uint64_t v37 = *(void *)(*(void *)result + 8) - (void)v36;
          switch(v37 >> 2)
          {
            case 1:
              uint64_t v38 = *v36;
              if ((int)v38 >= 1)
              {
                uint64_t v39 = (_DWORD *)v35[19];
                uint64_t v40 = (BOOL *)v3[19];
                uint64_t v41 = 4 * *(void *)v35[3];
                do
                {
                  *v40++ = *v39 != 0;
                  uint64_t v39 = (_DWORD *)((char *)v39 + v41);
                  --v38;
                }
                while (v38);
              }
              break;
            case 2:
              int v203 = *v36;
              if (*v36 >= 1)
              {
                int v204 = 0;
                uint64_t v205 = 0;
                uint64_t v206 = 0;
                uint64_t v207 = v35[19];
                uint64_t v208 = v3[19];
                uint64_t v209 = v36[1];
                uint64_t v210 = (uint64_t *)v35[3];
                uint64_t v212 = *v210;
                uint64_t v211 = v210[1];
                uint64_t v213 = v212 - v211 * v209;
                do
                {
                  int v214 = v209;
                  if ((int)v209 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(_DWORD *)(v207 + 4 * v206) != 0;
                      *(unsigned char *)(v208 + v205++) = result;
                      v206 += v211;
                      --v214;
                    }
                    while (v214);
                  }
                  v206 += v213;
                  ++v204;
                }
                while (v204 != v203);
              }
              break;
            case 3:
              int v215 = *v36;
              if (*v36 >= 1)
              {
                int v216 = 0;
                uint64_t result = 0;
                uint64_t v217 = 0;
                uint64_t v218 = v35[19];
                uint64_t v219 = v3[19];
                uint64_t v220 = v36[1];
                uint64_t v221 = (void *)v35[3];
                uint64_t v222 = v221[1];
                uint64_t v223 = *v221 - v222 * v220;
                do
                {
                  if ((int)v220 < 1)
                  {
                    uint64_t v230 = result;
                  }
                  else
                  {
                    int v224 = 0;
                    uint64_t v225 = v36[2];
                    uint64_t v226 = v35[3];
                    uint64_t v227 = v222 - v221[2] * v225;
                    do
                    {
                      if ((int)v225 < 1)
                      {
                        uint64_t v230 = result;
                      }
                      else
                      {
                        uint64_t v228 = *(void *)(v226 + 16);
                        int v229 = v225;
                        do
                        {
                          uint64_t v230 = result + 1;
                          *(unsigned char *)(v219 + result) = *(_DWORD *)(v218 + 4 * v217) != 0;
                          v217 += v228;
                          ++result;
                          --v229;
                        }
                        while (v229);
                      }
                      v217 += v227;
                      ++v224;
                      uint64_t result = v230;
                    }
                    while (v224 != v220);
                  }
                  v217 += v223;
                  ++v216;
                  uint64_t result = v230;
                }
                while (v216 != v215);
              }
              break;
            case 4:
              int v231 = *v36;
              if (*v36 >= 1)
              {
                int v232 = 0;
                uint64_t result = 0;
                uint64_t v233 = 0;
                uint64_t v234 = v35[19];
                uint64_t v235 = v3[19];
                uint64_t v236 = v36[1];
                int v237 = (void *)v35[3];
                uint64_t v238 = v237[1];
                uint64_t v239 = *v237 - v238 * v236;
                do
                {
                  if ((int)v236 < 1)
                  {
                    uint64_t v250 = result;
                  }
                  else
                  {
                    int v240 = 0;
                    uint64_t v241 = v36[2];
                    uint64_t v242 = v35[3];
                    uint64_t v243 = v238 - v237[2] * v241;
                    do
                    {
                      if ((int)v241 < 1)
                      {
                        uint64_t v250 = result;
                      }
                      else
                      {
                        int v244 = 0;
                        uint64_t v245 = v36[3];
                        uint64_t v246 = v35[3];
                        uint64_t v247 = *(void *)(v242 + 16) - *(void *)(v242 + 24) * v245;
                        do
                        {
                          if ((int)v245 < 1)
                          {
                            uint64_t v250 = result;
                          }
                          else
                          {
                            uint64_t v248 = *(void *)(v246 + 24);
                            int v249 = v245;
                            do
                            {
                              uint64_t v250 = result + 1;
                              *(unsigned char *)(v235 + result) = *(_DWORD *)(v234 + 4 * v233) != 0;
                              v233 += v248;
                              ++result;
                              --v249;
                            }
                            while (v249);
                          }
                          v233 += v247;
                          ++v244;
                          uint64_t result = v250;
                        }
                        while (v244 != v241);
                      }
                      v233 += v243;
                      ++v240;
                      uint64_t result = v250;
                    }
                    while (v240 != v236);
                  }
                  v233 += v239;
                  ++v232;
                  uint64_t result = v250;
                }
                while (v232 != v231);
              }
              break;
            default:
              uint64_t v194 = v3[6];
              if (v194)
              {
                uint64_t v195 = 0;
                uint64_t v196 = v35[19];
                uint64_t v197 = v3[19];
                uint64_t v198 = ((unint64_t)v37 >> 2) - 1;
                uint64_t v199 = v35[3];
                do
                {
                  uint64_t v200 = 0;
                  if ((v198 & 0x80000000) == 0)
                  {
                    uint64_t v201 = v198;
                    LODWORD(result) = v195;
                    do
                    {
                      ldiv_t v202 = ldiv((int)result, v36[v201]);
                      uint64_t result = v202.quot;
                      v200 += *(void *)(v199 + 8 * v201--) * v202.rem;
                    }
                    while (v201 != -1);
                  }
                  *(unsigned char *)(v197 + v195++) = *(_DWORD *)(v196 + 4 * v200) != 0;
                }
                while (v195 != v194);
              }
              break;
          }
          break;
        case 3:
          uint64_t v42 = *(unsigned int ***)result;
          uint64_t v44 = **(void **)result;
          uint64_t v43 = *(void *)(*(void *)result + 8);
          unint64_t v45 = v43 - v44;
          switch((v43 - v44) >> 2)
          {
            case 1:
              uint64_t v46 = (v45 << 30) - 0x100000000;
              int v47 = *(_DWORD *)(v44 + (v46 >> 30));
              if (v47 >= 1)
              {
                uint64_t v48 = v46 >> 29;
                uint64_t v49 = *(void *)((char *)v42[3] + v48);
                uint64_t v50 = *(void *)(v3[3] + v48);
                int v51 = (BOOL *)v3[19];
                uint64_t v52 = v42[19];
                uint64_t v53 = 4 * v49;
                do
                {
                  *int v51 = *v52 != 0;
                  v51 += v50;
                  uint64_t v52 = (unsigned int *)((char *)v52 + v53);
                  --v47;
                }
                while (v47);
              }
              break;
            case 2:
              uint64_t v602 = (v45 << 30) - 0x200000000;
              int v603 = *(_DWORD *)(v44 + (v602 >> 30));
              if (v603 >= 1)
              {
                uint64_t v604 = 0;
                int v605 = 0;
                uint64_t v606 = 0;
                uint64_t v607 = v45 << 30;
                int v608 = v42[3];
                uint64_t v609 = v602 >> 29;
                uint64_t v610 = *(void *)((char *)v608 + v609);
                uint64_t v611 = v3[3];
                uint64_t v612 = *(void *)(v611 + v609);
                uint64_t result = v607 - 0x100000000;
                uint64_t v613 = (v607 - 0x100000000) >> 29;
                uint64_t v614 = *(void *)((char *)v608 + v613);
                uint64_t v615 = *(void *)(v611 + v613);
                int v616 = *(_DWORD *)(v44 + (result >> 30));
                uint64_t v617 = 4 * v610;
                uint64_t v618 = 4 * v614;
                do
                {
                  if (v616 >= 1)
                  {
                    uint64_t result = v3[19];
                    uint64_t v619 = (unsigned int *)((char *)v42[19] + v604);
                    int v620 = v616;
                    do
                    {
                      *(unsigned char *)(result + v606) = *v619 != 0;
                      result += v615;
                      uint64_t v619 = (_DWORD *)((char *)v619 + v618);
                      --v620;
                    }
                    while (v620);
                  }
                  v606 += v612;
                  ++v605;
                  v604 += v617;
                }
                while (v605 != v603);
              }
              break;
            case 3:
              uint64_t v621 = (v45 << 30) - 0x300000000;
              int v622 = *(_DWORD *)(v44 + (v621 >> 30));
              if (v622 >= 1)
              {
                uint64_t v623 = 0;
                int v624 = 0;
                uint64_t v625 = 0;
                uint64_t v626 = v45 << 30;
                uint64_t v627 = v42[3];
                uint64_t v628 = v621 >> 29;
                uint64_t v629 = *(void *)((char *)v627 + v628);
                uint64_t v630 = v3[3];
                uint64_t v631 = *(void *)(v630 + v628);
                uint64_t v632 = v626 - 0x200000000;
                uint64_t v633 = (v626 - 0x200000000) >> 29;
                uint64_t v634 = v626 - 0x100000000;
                uint64_t v635 = *(void *)((char *)v627 + v633);
                uint64_t v636 = *(void *)(v630 + v633);
                int v637 = *(_DWORD *)(v44 + (v632 >> 30));
                uint64_t v638 = v634 >> 32;
                uint64_t result = 4 * v629;
                uint64_t v639 = 4 * v635;
                do
                {
                  if (v637 >= 1)
                  {
                    int v640 = 0;
                    uint64_t v641 = *(void *)(v630 + 8 * v638);
                    int v642 = *(_DWORD *)(v44 + 4 * v638);
                    uint64_t v643 = (void *)*a2;
                    uint64_t v644 = 4 * *(void *)&v627[2 * v638];
                    uint64_t v645 = v623;
                    uint64_t v646 = v625;
                    do
                    {
                      if (v642 >= 1)
                      {
                        uint64_t v647 = v643[19];
                        uint64_t v648 = (unsigned int *)((char *)v42[19] + v645);
                        int v649 = v642;
                        do
                        {
                          *(unsigned char *)(v647 + v646) = *v648 != 0;
                          v647 += v641;
                          uint64_t v648 = (_DWORD *)((char *)v648 + v644);
                          --v649;
                        }
                        while (v649);
                      }
                      v646 += v636;
                      ++v640;
                      v645 += v639;
                    }
                    while (v640 != v637);
                  }
                  v625 += v631;
                  ++v624;
                  v623 += result;
                }
                while (v624 != v622);
              }
              break;
            case 4:
              uint64_t v650 = (v45 << 30) - 0x400000000;
              int v1571 = *(_DWORD *)(v44 + (v650 >> 30));
              if (v1571 >= 1)
              {
                uint64_t v651 = 0;
                int v652 = 0;
                uint64_t v653 = 0;
                uint64_t v654 = v42[3];
                uint64_t v655 = v650 >> 29;
                uint64_t v656 = *(void *)((char *)v654 + v655);
                uint64_t v657 = v3[3];
                uint64_t v1554 = *(void *)(v657 + v655);
                uint64_t v658 = (v45 << 30) - 0x300000000;
                uint64_t v659 = (v45 << 30) - 0x200000000;
                uint64_t v660 = (v45 << 30) - 0x100000000;
                uint64_t v661 = *(void *)(v657 + (v658 >> 29));
                int v662 = *(_DWORD *)(v44 + (v658 >> 30));
                uint64_t v1521 = v659 >> 32;
                uint64_t result = v660 >> 32;
                uint64_t v1537 = 4 * v656;
                uint64_t v663 = 4 * *(void *)((char *)v654 + (v658 >> 29));
                do
                {
                  if (v662 >= 1)
                  {
                    int v664 = 0;
                    uint64_t v665 = *(void *)(v657 + 8 * v1521);
                    int v666 = *(_DWORD *)(v44 + 4 * v1521);
                    uint64_t v667 = 4 * *(void *)&v654[2 * v1521];
                    uint64_t v668 = v651;
                    uint64_t v669 = v653;
                    do
                    {
                      if (v666 >= 1)
                      {
                        int v670 = 0;
                        uint64_t v671 = *(void *)(v657 + 8 * result);
                        int v672 = *(_DWORD *)(v44 + 4 * result);
                        int v673 = (void *)*a2;
                        uint64_t v674 = 4 * *(void *)&v654[2 * result];
                        uint64_t v675 = v668;
                        uint64_t v676 = v669;
                        do
                        {
                          if (v672 >= 1)
                          {
                            uint64_t v677 = v673[19];
                            uint64_t v678 = (unsigned int *)((char *)v42[19] + v675);
                            int v679 = v672;
                            do
                            {
                              *(unsigned char *)(v677 + v676) = *v678 != 0;
                              v677 += v671;
                              uint64_t v678 = (_DWORD *)((char *)v678 + v674);
                              --v679;
                            }
                            while (v679);
                          }
                          v676 += v665;
                          ++v670;
                          v675 += v667;
                        }
                        while (v670 != v666);
                      }
                      v669 += v661;
                      ++v664;
                      v668 += v663;
                    }
                    while (v664 != v662);
                  }
                  v653 += v1554;
                  ++v652;
                  v651 += v1537;
                }
                while (v652 != v1571);
              }
              break;
            case 5:
              uint64_t v680 = (v45 << 30) - 0x500000000;
              int v1481 = *(_DWORD *)(v44 + (v680 >> 30));
              if (v1481 >= 1)
              {
                uint64_t v1501 = 0;
                uint64_t v1511 = 0;
                int v1491 = 0;
                uint64_t v681 = v42[3];
                uint64_t v682 = v680 >> 29;
                uint64_t v683 = v3[3];
                uint64_t v1471 = *(void *)(v683 + v682);
                uint64_t v684 = (v45 << 30) - 0x400000000;
                uint64_t v1555 = *(void *)(v683 + (v684 >> 29));
                int v1572 = *(_DWORD *)(v44 + (v684 >> 30));
                uint64_t v1452 = (uint64_t)((v45 << 30) - 0x300000000) >> 32;
                uint64_t v1522 = (uint64_t)((v45 << 30) - 0x200000000) >> 32;
                uint64_t v685 = (uint64_t)((v45 << 30) - 0x100000000) >> 32;
                uint64_t v1461 = 4 * *(void *)((char *)v681 + v682);
                uint64_t v1538 = 4 * *(void *)((char *)v681 + (v684 >> 29));
                do
                {
                  if (v1572 >= 1)
                  {
                    int v686 = 0;
                    uint64_t v687 = *(void *)(v683 + 8 * v1452);
                    int v688 = *(_DWORD *)(v44 + 4 * v1452);
                    uint64_t v689 = 4 * *(void *)&v681[2 * v1452];
                    uint64_t v690 = v1501;
                    uint64_t v691 = v1511;
                    do
                    {
                      if (v688 >= 1)
                      {
                        int v692 = 0;
                        uint64_t v693 = *(void *)(v683 + 8 * v1522);
                        int v694 = *(_DWORD *)(v44 + 4 * v1522);
                        uint64_t v695 = 4 * *(void *)&v681[2 * v1522];
                        uint64_t v696 = v691;
                        uint64_t v697 = v690;
                        do
                        {
                          if (v694 >= 1)
                          {
                            int v698 = 0;
                            uint64_t v699 = *(void *)(v683 + 8 * v685);
                            int v700 = *(_DWORD *)(v44 + 4 * v685);
                            uint64_t v701 = (void *)*a2;
                            uint64_t v702 = 4 * *(void *)&v681[2 * v685];
                            uint64_t v703 = v696;
                            uint64_t v704 = v697;
                            do
                            {
                              if (v700 >= 1)
                              {
                                uint64_t v705 = v701[19];
                                uint64_t v706 = (unsigned int *)((char *)v42[19] + v703);
                                int v707 = v700;
                                do
                                {
                                  uint64_t result = *v706 != 0;
                                  *(unsigned char *)(v705 + v704) = result;
                                  v705 += v699;
                                  uint64_t v706 = (_DWORD *)((char *)v706 + v702);
                                  --v707;
                                }
                                while (v707);
                              }
                              v704 += v693;
                              ++v698;
                              v703 += v695;
                            }
                            while (v698 != v694);
                          }
                          v697 += v687;
                          ++v692;
                          v696 += v689;
                        }
                        while (v692 != v688);
                      }
                      v690 += v1555;
                      ++v686;
                      v691 += v1538;
                    }
                    while (v686 != v1572);
                  }
                  v1501 += v1471;
                  v1511 += v1461;
                  ++v1491;
                }
                while (v1491 != v1481);
              }
              break;
            default:
              LODWORD(v567) = 1;
              uint64_t v568 = -20;
              do
              {
                uint64_t v567 = *(int *)(v43 + v568) * (uint64_t)(int)v567;
                v568 += 4;
              }
              while (v568);
              uint64_t v1441 = v42[6];
              if (v1441)
              {
                uint64_t v569 = 0;
                uint64_t v1421 = *v3;
                uint64_t v570 = (v45 << 30) - 0x500000000;
                uint64_t v1431 = (v45 >> 2) - 1;
                uint64_t v571 = v42[3];
                uint64_t v572 = v3[3];
                uint64_t v1470 = *(void *)(v572 + (v570 >> 29));
                int v1480 = *(_DWORD *)(v44 + (v570 >> 30));
                uint64_t v1426 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1417 = (uint64_t)((v45 << 30) - 0x400000000) >> 32;
                uint64_t v1520 = (uint64_t)((v45 << 30) - 0x200000000) >> 32;
                uint64_t v573 = (uint64_t)((v45 << 30) - 0x100000000) >> 32;
                uint64_t v1451 = (uint64_t)((v45 << 30) - 0x300000000) >> 32;
                uint64_t v1460 = 4 * *(void *)((char *)v571 + (v570 >> 29));
                uint64_t v1436 = v567;
                do
                {
                  uint64_t v574 = v1431;
                  if ((v1431 & 0x80000000) != 0)
                  {
                    uint64_t v575 = 0;
                  }
                  else
                  {
                    uint64_t v575 = 0;
                    LODWORD(result) = v569;
                    do
                    {
                      ldiv_t v576 = ldiv((int)result, *(int *)(v44 + 4 * v574));
                      uint64_t result = v576.quot;
                      v575 += *(void *)&v571[2 * v574--] * v576.rem;
                    }
                    while (v574 != -1);
                  }
                  uint64_t v577 = v1426;
                  uint64_t v1446 = v569;
                  uint64_t v578 = 0;
                  if ((v1426 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v569;
                    do
                    {
                      ldiv_t v579 = ldiv((int)result, *(int *)(v1421 + 4 * v577));
                      uint64_t result = v579.quot;
                      v578 += *(void *)(v572 + 8 * v577--) * v579.rem;
                    }
                    while (v577 != -1);
                  }
                  if (v1480 >= 1)
                  {
                    int v580 = 0;
                    uint64_t v1553 = *(void *)(v572 + 8 * v1417);
                    int v1570 = *(_DWORD *)(v44 + 4 * v1417);
                    uint64_t v1510 = 4 * v575;
                    uint64_t v1536 = 4 * *(void *)&v571[2 * v1417];
                    do
                    {
                      int v1490 = v580;
                      uint64_t v1500 = v578;
                      if (v1570 >= 1)
                      {
                        int v581 = 0;
                        uint64_t v582 = *(void *)(v572 + 8 * v1451);
                        int v583 = *(_DWORD *)(v44 + 4 * v1451);
                        uint64_t v584 = 4 * *(void *)&v571[2 * v1451];
                        uint64_t v586 = v578;
                        uint64_t v585 = v1510;
                        do
                        {
                          if (v583 >= 1)
                          {
                            int v587 = 0;
                            uint64_t v588 = *(void *)(v572 + 8 * v1520);
                            int v589 = *(_DWORD *)(v44 + 4 * v1520);
                            uint64_t v590 = 4 * *(void *)&v571[2 * v1520];
                            uint64_t v591 = v585;
                            uint64_t result = v586;
                            do
                            {
                              if (v589 >= 1)
                              {
                                int v592 = 0;
                                uint64_t v593 = *(void *)(v572 + 8 * v573);
                                int v594 = *(_DWORD *)(v44 + 4 * v573);
                                uint64_t v595 = (void *)*a2;
                                uint64_t v596 = 4 * *(void *)&v571[2 * v573];
                                uint64_t v597 = v591;
                                uint64_t v598 = result;
                                do
                                {
                                  if (v594 >= 1)
                                  {
                                    uint64_t v599 = v595[19];
                                    uint64_t v600 = (unsigned int *)((char *)v42[19] + v597);
                                    int v601 = v594;
                                    do
                                    {
                                      *(unsigned char *)(v599 + v598) = *v600 != 0;
                                      v599 += v593;
                                      uint64_t v600 = (_DWORD *)((char *)v600 + v596);
                                      --v601;
                                    }
                                    while (v601);
                                  }
                                  v598 += v588;
                                  ++v592;
                                  v597 += v590;
                                }
                                while (v592 != v589);
                              }
                              result += v582;
                              ++v587;
                              v591 += v584;
                            }
                            while (v587 != v583);
                          }
                          v586 += v1553;
                          ++v581;
                          v585 += v1536;
                        }
                        while (v581 != v1570);
                      }
                      uint64_t v578 = v1500 + v1470;
                      int v580 = v1490 + 1;
                      v1510 += v1460;
                    }
                    while (v1490 + 1 != v1480);
                  }
                  v569 += v1436;
                }
                while ((unint64_t)v1441 > v1446 + v1436);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v9 = 0;
            int v10 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v11 = v3[19];
            do
              *(unsigned char *)(v11 + v9++) = v10;
            while (*(void *)(*a2 + 48) > v9);
          }
          break;
        case 1:
          uint64_t v54 = *(void *)(*(void *)result + 160);
          if (v54)
          {
            uint64_t v55 = *(int **)(*(void *)result + 152);
            uint64_t v56 = (unsigned char *)v3[19];
            uint64_t v57 = 4 * v54;
            do
            {
              int v58 = *v55++;
              *v56++ = v58;
              v57 -= 4;
            }
            while (v57);
          }
          break;
        case 2:
          uint64_t v59 = *(int ***)result;
          int v60 = **(int ***)result;
          switch(v59[1] - *v59)
          {
            case 1:
              if (*v60 >= 1)
              {
                uint64_t v61 = 0;
                uint64_t v62 = 0;
                uint64_t v63 = v59[19];
                uint64_t v64 = v3[19];
                do
                {
                  *(unsigned char *)(v64 + v61) = v63[v62];
                  v62 += *(void *)v59[3];
                  ++v61;
                }
                while (**v59 > (int)v61);
              }
              break;
            case 2:
              int v260 = *v60;
              if (*v60 >= 1)
              {
                int v261 = 0;
                uint64_t v262 = 0;
                uint64_t v263 = 0;
                uint64_t v264 = v59[19];
                uint64_t v265 = v3[19];
                do
                {
                  int v266 = v60[1];
                  if (v266 < 1)
                  {
                    int v267 = v59[3];
                    uint64_t v268 = *((void *)v267 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v265 + v262 + result) = v264[v263];
                      int v267 = v59[3];
                      uint64_t v268 = *((void *)v267 + 1);
                      v263 += v268;
                      int v60 = *v59;
                      int v266 = (*v59)[1];
                      ++result;
                    }
                    while ((int)result < v266);
                    int v260 = *v60;
                    v262 += result;
                  }
                  uint64_t v263 = *(void *)v267 + v263 - v268 * v266;
                  ++v261;
                }
                while (v261 < v260);
              }
              break;
            case 3:
              int v269 = *v60;
              if (*v60 >= 1)
              {
                int v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = 0;
                int v273 = v59[19];
                uint64_t v274 = v3[19];
                do
                {
                  int v275 = v60[1];
                  if (v275 < 1)
                  {
                    int v279 = v59[3];
                    uint64_t v280 = *((void *)v279 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v275; ++i)
                    {
                      int v277 = v60[2];
                      if (v277 < 1)
                      {
                        int v279 = v59[3];
                        uint64_t result = *((void *)v279 + 2);
                      }
                      else
                      {
                        uint64_t v278 = 0;
                        do
                        {
                          *(unsigned char *)(v274 + v271 + v278) = v273[v272];
                          int v279 = v59[3];
                          uint64_t result = *((void *)v279 + 2);
                          v272 += result;
                          int v60 = *v59;
                          int v277 = (*v59)[2];
                          ++v278;
                        }
                        while ((int)v278 < v277);
                        v271 += v278;
                      }
                      uint64_t v280 = *((void *)v279 + 1);
                      uint64_t v272 = v280 + v272 - result * v277;
                      int v275 = v60[1];
                    }
                    int v269 = *v60;
                  }
                  uint64_t v272 = *(void *)v279 + v272 - v280 * v275;
                  ++v270;
                }
                while (v270 < v269);
              }
              break;
            case 4:
              int v281 = *v60;
              if (*v60 >= 1)
              {
                int v282 = 0;
                uint64_t v283 = 0;
                uint64_t v284 = 0;
                uint64_t v285 = v59[19];
                uint64_t v286 = v3[19];
                do
                {
                  int v287 = v60[1];
                  if (v287 < 1)
                  {
                    int v293 = v59[3];
                    uint64_t v295 = *((void *)v293 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v287; ++j)
                    {
                      int v289 = v60[2];
                      if (v289 < 1)
                      {
                        int v293 = v59[3];
                        uint64_t v294 = *((void *)v293 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v289; ++k)
                        {
                          int v291 = v60[3];
                          if (v291 < 1)
                          {
                            int v293 = v59[3];
                            uint64_t result = *((void *)v293 + 3);
                          }
                          else
                          {
                            uint64_t v292 = 0;
                            do
                            {
                              *(unsigned char *)(v286 + v283 + v292) = v285[v284];
                              int v293 = v59[3];
                              uint64_t result = *((void *)v293 + 3);
                              v284 += result;
                              int v60 = *v59;
                              int v291 = (*v59)[3];
                              ++v292;
                            }
                            while ((int)v292 < v291);
                            v283 += v292;
                          }
                          uint64_t v294 = *((void *)v293 + 2);
                          uint64_t v284 = v294 + v284 - result * v291;
                          int v289 = v60[2];
                        }
                      }
                      uint64_t v295 = *((void *)v293 + 1);
                      uint64_t v284 = v295 + v284 - v294 * v289;
                      int v287 = v60[1];
                    }
                    int v281 = *v60;
                  }
                  uint64_t v284 = *(void *)v293 + v284 - v295 * v287;
                  ++v282;
                }
                while (v282 < v281);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v251 = 0;
                int v252 = v59[19];
                uint64_t v253 = v3[19];
                do
                {
                  int v254 = *v59;
                  unint64_t v255 = (unint64_t)((char *)v59[1] - (char *)*v59) >> 2;
                  uint64_t v256 = 0;
                  uint64_t v257 = (v255 - 1);
                  if ((int)v255 - 1 >= 0)
                  {
                    int v258 = v59[3];
                    LODWORD(result) = v251;
                    do
                    {
                      ldiv_t v259 = ldiv((int)result, v254[v257]);
                      uint64_t result = v259.quot;
                      v256 += *(void *)&v258[2 * v257--] * v259.rem;
                    }
                    while (v257 != -1);
                  }
                  *(unsigned char *)(v253 + v251++) = v252[v256];
                }
                while (v251 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          int v65 = *(int ***)result;
          uint64_t v66 = (uint64_t *)(*(void *)result + 24);
          uint64_t v67 = v3 + 3;
          uint64_t v69 = **(void **)result;
          uint64_t v68 = *(void *)(*(void *)result + 8);
          uint64_t v70 = v68 - v69;
          switch((v68 - v69) >> 2)
          {
            case 1:
              uint64_t v71 = (v70 << 30) - 0x100000000;
              int v72 = *(_DWORD *)(v69 + (v71 >> 30));
              if (v72 >= 1)
              {
                uint64_t v73 = v71 >> 29;
                uint64_t v74 = *(void *)(*v66 + v73);
                uint64_t v75 = *(void *)(*v67 + v73);
                uint64_t v76 = (unsigned char *)v3[19];
                uint64_t v77 = v65[19];
                uint64_t v78 = 4 * v74;
                do
                {
                  *uint64_t v76 = *v77;
                  v76 += v75;
                  uint64_t v77 = (int *)((char *)v77 + v78);
                  --v72;
                }
                while (v72);
              }
              break;
            case 2:
              uint64_t v729 = (v70 << 30) - 0x200000000;
              int v730 = *(_DWORD *)(v69 + (v729 >> 30));
              if (v730 >= 1)
              {
                uint64_t v731 = 0;
                int v732 = 0;
                uint64_t v733 = 0;
                uint64_t v734 = v729 >> 29;
                uint64_t v735 = *(void *)(*v66 + v734);
                uint64_t v736 = *(void *)(*v67 + v734);
                uint64_t v737 = 4 * v735;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v738 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v739 = *(int *)((char *)*v65 + (v738 >> 30));
                  if (v739 >= 1)
                  {
                    uint64_t v740 = v738 >> 29;
                    uint64_t v741 = *(void *)((char *)v65[3] + v740);
                    uint64_t v742 = *(void *)(*v67 + v740);
                    uint64_t v743 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v731;
                    uint64_t v744 = 4 * v741;
                    do
                    {
                      *(unsigned char *)(v743 + v733) = *(_DWORD *)result;
                      v743 += v742;
                      result += v744;
                      --v739;
                    }
                    while (v739);
                  }
                  v733 += v736;
                  ++v732;
                  v731 += v737;
                }
                while (v732 != v730);
              }
              break;
            case 3:
              uint64_t v745 = (v70 << 30) - 0x300000000;
              int v746 = *(_DWORD *)(v69 + (v745 >> 30));
              if (v746 >= 1)
              {
                uint64_t v747 = 0;
                int v748 = 0;
                uint64_t v749 = 0;
                uint64_t v750 = v745 >> 29;
                uint64_t v751 = *(void *)(*v66 + v750);
                uint64_t v752 = *(void *)(*v67 + v750);
                uint64_t v753 = 4 * v751;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v754 = *(int *)((char *)*v65 + (result >> 30));
                  if (v754 >= 1)
                  {
                    int v755 = 0;
                    uint64_t v756 = result >> 29;
                    uint64_t v757 = *(void *)((char *)v65[3] + v756);
                    uint64_t result = *(void *)(*v67 + v756);
                    uint64_t v758 = 4 * v757;
                    uint64_t v759 = v747;
                    uint64_t v760 = v749;
                    do
                    {
                      uint64_t v761 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v762 = *(int *)((char *)*v65 + (v761 >> 30));
                      if (v762 >= 1)
                      {
                        uint64_t v763 = v761 >> 29;
                        uint64_t v764 = *(void *)((char *)v65[3] + v763);
                        uint64_t v765 = *(void *)(*v67 + v763);
                        uint64_t v766 = *(void *)(*a2 + 152);
                        ldiv_t v767 = (_DWORD *)(*(void *)(*(void *)v5 + 152) + v759);
                        uint64_t v768 = 4 * v764;
                        do
                        {
                          *(unsigned char *)(v766 + v760) = *v767;
                          v766 += v765;
                          ldiv_t v767 = (_DWORD *)((char *)v767 + v768);
                          --v762;
                        }
                        while (v762);
                      }
                      v760 += result;
                      ++v755;
                      v759 += v758;
                    }
                    while (v755 != v754);
                  }
                  v749 += v752;
                  ++v748;
                  v747 += v753;
                }
                while (v748 != v746);
              }
              break;
            case 4:
              int v769 = *(int ***)result;
              uint64_t v770 = (void *)(*(void *)result + 24);
              uint64_t v771 = v3 + 3;
              goto LABEL_563;
            case 5:
              uint64_t v772 = (v70 << 30) - 0x500000000;
              int v773 = *(_DWORD *)(v69 + (v772 >> 30));
              if (v773 >= 1)
              {
                uint64_t v774 = 0;
                uint64_t v775 = 0;
                uint64_t v776 = v772 >> 29;
                uint64_t v777 = *(void *)(*v66 + v776);
                uint64_t v778 = *(void *)(*v67 + v776);
                do
                {
                  v774 += v777;
                  v775 += v778;
                  --v773;
                }
                while (v773);
              }
              break;
            default:
              LODWORD(v708) = 1;
              uint64_t v709 = -20;
              do
              {
                uint64_t v708 = *(int *)(v68 + v709) * (uint64_t)(int)v708;
                v709 += 4;
              }
              while (v709);
              if (v65[6])
              {
                uint64_t result = 0;
                int v710 = *(void **)v5;
                v1556 = v67;
                uint64_t v1523 = v708;
                do
                {
                  int v711 = *v65;
                  unint64_t v712 = (unint64_t)((char *)v65[1] - (char *)*v65) >> 2;
                  uint64_t v713 = (v712 - 1);
                  uint64_t v1573 = result;
                  int v1539 = v710;
                  uint64_t v714 = 0;
                  if ((int)v712 - 1 >= 0)
                  {
                    uint64_t v715 = *v66;
                    do
                    {
                      ldiv_t v716 = ldiv((int)result, v711[v713]);
                      LODWORD(result) = v716.quot;
                      v714 += *(void *)(v715 + 8 * v713--) * v716.rem;
                    }
                    while (v713 != -1);
                  }
                  uint64_t v717 = *(void *)*a2;
                  unint64_t v718 = (unint64_t)(*(void *)(*a2 + 8) - v717) >> 2;
                  uint64_t v719 = *v1556;
                  uint64_t v720 = 0;
                  uint64_t v721 = (v718 - 1);
                  if ((int)v718 - 1 >= 0)
                  {
                    int quot = v1573;
                    do
                    {
                      ldiv_t v723 = ldiv(quot, *(int *)(v717 + 4 * v721));
                      int quot = v723.quot;
                      v720 += *(void *)(v719 + 8 * v721--) * v723.rem;
                    }
                    while (v721 != -1);
                  }
                  int v710 = v1539;
                  uint64_t v724 = ((v710[1] - *v710) << 30) - 0x500000000;
                  int v725 = *(int *)((char *)v711 + (v724 >> 30));
                  if (v725 >= 1)
                  {
                    uint64_t v726 = v724 >> 29;
                    uint64_t v727 = *(void *)(*v66 + v726);
                    uint64_t v728 = *(void *)(v719 + v726);
                    do
                    {
                      v714 += v727;
                      v720 += v728;
                      --v725;
                    }
                    while (v725);
                    int v710 = *(void **)v5;
                  }
                  uint64_t result = v1573 + v1523;
                }
                while (v710[6] > (unint64_t)(v1573 + v1523));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = **(_DWORD **)(*(void *)result + 152);
            int v14 = (_DWORD *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v79 = *(int ***)result;
          uint64_t v80 = **(int ***)result;
          uint64_t v81 = *(void *)(*(void *)result + 8) - (void)v80;
          switch(v81 >> 2)
          {
            case 1:
              if (*v80 >= 1)
              {
                uint64_t v82 = 0;
                uint64_t v83 = v79[19];
                uint64_t v84 = v3[19];
                uint64_t v85 = 4 * *(void *)v79[3];
                do
                {
                  *(_DWORD *)(v84 + 4 * v82) = *v83;
                  uint64_t v83 = (int *)((char *)v83 + v85);
                  ++v82;
                }
                while (*v80 > (int)v82);
              }
              break;
            case 2:
              int v305 = *v80;
              if (*v80 >= 1)
              {
                int v306 = 0;
                uint64_t v307 = 0;
                uint64_t v308 = 0;
                uint64_t v309 = v79[19];
                uint64_t v310 = v3[19];
                uint64_t v311 = v79[3];
                uint64_t v312 = *(void *)v311;
                uint64_t v313 = *((void *)v311 + 1);
                int v314 = v80[1];
                do
                {
                  if (v314 >= 1)
                  {
                    uint64_t v315 = 0;
                    do
                    {
                      *(_DWORD *)(v310 + 4 * v307 + 4 * v315) = v309[v308];
                      v308 += v313;
                      int v314 = v80[1];
                      ++v315;
                    }
                    while ((int)v315 < v314);
                    int v305 = *v80;
                    v307 += v315;
                  }
                  uint64_t v308 = v308 + v312 - v313 * v314;
                  ++v306;
                }
                while (v306 < v305);
              }
              break;
            case 3:
              uint64_t result = *v80;
              if ((int)result >= 1)
              {
                int v316 = 0;
                uint64_t v317 = 0;
                uint64_t v318 = 0;
                int v319 = v79[19];
                uint64_t v320 = v3[19];
                uint64_t v321 = v79[3];
                uint64_t v322 = *(void *)v321;
                uint64_t v323 = *((void *)v321 + 1);
                int v324 = v80[1];
                do
                {
                  if (v324 >= 1)
                  {
                    int v325 = 0;
                    uint64_t v326 = v79[3];
                    uint64_t v327 = *((void *)v321 + 2);
                    int v328 = v80[2];
                    do
                    {
                      if (v328 >= 1)
                      {
                        uint64_t v329 = 0;
                        uint64_t v330 = *((void *)v326 + 2);
                        do
                        {
                          *(_DWORD *)(v320 + 4 * v317 + 4 * v329) = v319[v318];
                          v318 += v330;
                          int v328 = v80[2];
                          ++v329;
                        }
                        while ((int)v329 < v328);
                        int v324 = v80[1];
                        v317 += v329;
                      }
                      uint64_t v318 = v318 + v323 - v327 * v328;
                      ++v325;
                    }
                    while (v325 < v324);
                    uint64_t result = *v80;
                  }
                  uint64_t v318 = v318 + v322 - v323 * v324;
                  ++v316;
                }
                while (v316 < (int)result);
              }
              break;
            case 4:
              int v331 = *v80;
              if (*v80 >= 1)
              {
                int v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = 0;
                uint64_t v335 = v79[19];
                uint64_t v336 = v3[19];
                int v337 = v79[3];
                uint64_t v338 = *(void *)v337;
                uint64_t v339 = *((void *)v337 + 1);
                int v340 = v80[1];
                do
                {
                  if (v340 >= 1)
                  {
                    int v341 = 0;
                    uint64_t v342 = v79[3];
                    uint64_t v343 = *((void *)v337 + 2);
                    int v344 = v80[2];
                    do
                    {
                      if (v344 >= 1)
                      {
                        int v345 = 0;
                        uint64_t v346 = v79[3];
                        uint64_t v347 = *((void *)v342 + 2);
                        uint64_t v348 = *((void *)v342 + 3);
                        int v349 = v80[3];
                        do
                        {
                          if (v349 >= 1)
                          {
                            uint64_t v350 = 0;
                            uint64_t v351 = *((void *)v346 + 3);
                            do
                            {
                              *(_DWORD *)(v336 + 4 * v333 + 4 * v350) = v335[v334];
                              v334 += v351;
                              int v349 = v80[3];
                              ++v350;
                            }
                            while ((int)v350 < v349);
                            int v344 = v80[2];
                            v333 += v350;
                          }
                          uint64_t v334 = v334 + v347 - v348 * v349;
                          ++v345;
                        }
                        while (v345 < v344);
                        int v340 = v80[1];
                      }
                      uint64_t v334 = v334 + v339 - v343 * v344;
                      ++v341;
                    }
                    while (v341 < v340);
                    int v331 = *v80;
                  }
                  uint64_t result = v340;
                  uint64_t v334 = v334 + v338 - v339 * v340;
                  ++v332;
                }
                while (v332 < v331);
              }
              break;
            default:
              uint64_t v296 = v3[6];
              if (v296)
              {
                uint64_t v297 = 0;
                uint64_t v298 = v79[19];
                uint64_t v299 = v3[19];
                uint64_t v300 = ((unint64_t)v81 >> 2) - 1;
                uint64_t v301 = v79[3];
                do
                {
                  uint64_t v302 = 0;
                  if ((v300 & 0x80000000) == 0)
                  {
                    uint64_t v303 = v300;
                    LODWORD(result) = v297;
                    do
                    {
                      ldiv_t v304 = ldiv((int)result, v80[v303]);
                      uint64_t result = v304.quot;
                      v302 += *(void *)&v301[2 * v303--] * v304.rem;
                    }
                    while (v303 != -1);
                  }
                  *(_DWORD *)(v299 + 4 * v297++) = v298[v302];
                }
                while (v297 != v296);
              }
              break;
          }
          break;
        case 3:
          uint64_t v86 = *(unsigned int ***)result;
          uint64_t v88 = **(void **)result;
          uint64_t v87 = *(void *)(*(void *)result + 8);
          unint64_t v89 = v87 - v88;
          switch((v87 - v88) >> 2)
          {
            case 1:
              uint64_t v90 = (v89 << 30) - 0x100000000;
              int v91 = *(_DWORD *)(v88 + (v90 >> 30));
              if (v91 >= 1)
              {
                uint64_t v92 = v90 >> 29;
                uint64_t v93 = *(void *)((char *)v86[3] + v92);
                uint64_t v94 = *(void *)(v3[3] + v92);
                v95 = (unsigned int *)v3[19];
                uint64_t v96 = v86[19];
                uint64_t v97 = 4 * v94;
                uint64_t v98 = 4 * v93;
                do
                {
                  unsigned int *v95 = *v96;
                  v95 = (unsigned int *)((char *)v95 + v97);
                  uint64_t v96 = (unsigned int *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              uint64_t v815 = (v89 << 30) - 0x200000000;
              int v816 = *(_DWORD *)(v88 + (v815 >> 30));
              if (v816 >= 1)
              {
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                int v819 = 0;
                uint64_t v820 = v86[3];
                uint64_t v821 = v815 >> 29;
                uint64_t v822 = *(void *)((char *)v820 + v821);
                uint64_t v823 = v3[3];
                uint64_t v824 = (v89 << 30) - 0x100000000;
                uint64_t v825 = *(void *)((char *)v820 + (v824 >> 29));
                uint64_t v826 = *(void *)(v823 + (v824 >> 29));
                uint64_t v827 = v824 >> 32;
                uint64_t v828 = 4 * *(void *)(v823 + v821);
                uint64_t v829 = 4 * v826;
                uint64_t v830 = 4 * v822;
                uint64_t v831 = 4 * v825;
                do
                {
                  uint64_t result = *(unsigned int *)(v88 + 4 * v827);
                  if ((int)result >= 1)
                  {
                    uint64_t v832 = (_DWORD *)(v3[19] + v818);
                    int v833 = (unsigned int *)((char *)v86[19] + v817);
                    do
                    {
                      *uint64_t v832 = *v833;
                      uint64_t v832 = (_DWORD *)((char *)v832 + v829);
                      int v833 = (_DWORD *)((char *)v833 + v831);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v819;
                  v818 += v828;
                  v817 += v830;
                }
                while (v819 != v816);
              }
              break;
            case 3:
              uint64_t v834 = (v89 << 30) - 0x300000000;
              int v835 = *(_DWORD *)(v88 + (v834 >> 30));
              if (v835 >= 1)
              {
                uint64_t v836 = 0;
                uint64_t v837 = 0;
                int v838 = 0;
                uint64_t v839 = v89 << 30;
                uint64_t v840 = v86[3];
                uint64_t v841 = v834 >> 29;
                uint64_t v842 = *(void *)((char *)v840 + v841);
                uint64_t v843 = v3[3];
                uint64_t v844 = *(void *)(v843 + v841);
                uint64_t v845 = (v839 - 0x200000000) >> 29;
                uint64_t v846 = *(void *)((char *)v840 + v845);
                uint64_t v847 = (v839 - 0x200000000) >> 32;
                uint64_t v848 = (v839 - 0x100000000) >> 32;
                uint64_t v849 = 4 * v844;
                uint64_t v850 = 4 * *(void *)(v843 + v845);
                uint64_t result = 4 * v842;
                uint64_t v851 = 4 * v846;
                do
                {
                  int v852 = *(_DWORD *)(v88 + 4 * v847);
                  if (v852 >= 1)
                  {
                    int v853 = 0;
                    uint64_t v854 = (void *)*a2;
                    uint64_t v855 = 4 * *(void *)(v843 + 8 * v848);
                    uint64_t v856 = 4 * *(void *)&v840[2 * v848];
                    uint64_t v857 = v836;
                    uint64_t v858 = v837;
                    do
                    {
                      int v859 = *(_DWORD *)(v88 + 4 * v848);
                      if (v859 >= 1)
                      {
                        uint64_t v860 = (_DWORD *)(v854[19] + v858);
                        int v861 = (unsigned int *)((char *)v86[19] + v857);
                        do
                        {
                          *uint64_t v860 = *v861;
                          uint64_t v860 = (_DWORD *)((char *)v860 + v855);
                          int v861 = (_DWORD *)((char *)v861 + v856);
                          --v859;
                        }
                        while (v859);
                      }
                      ++v853;
                      v858 += v850;
                      v857 += v851;
                    }
                    while (v853 != v852);
                  }
                  ++v838;
                  v837 += v849;
                  v836 += result;
                }
                while (v838 != v835);
              }
              break;
            case 4:
              uint64_t v862 = (v89 << 30) - 0x400000000;
              int v1575 = *(_DWORD *)(v88 + (v862 >> 30));
              if (v1575 >= 1)
              {
                uint64_t v863 = 0;
                uint64_t v864 = 0;
                int v865 = 0;
                uint64_t v866 = v89 << 30;
                uint64_t v867 = v86[3];
                uint64_t v868 = v862 >> 29;
                uint64_t v869 = v3[3];
                uint64_t v1558 = (v866 - 0x300000000) >> 32;
                uint64_t v870 = (v866 - 0x300000000) >> 29;
                uint64_t v871 = *(void *)((char *)v867 + v870);
                uint64_t v872 = *(void *)(v869 + v870);
                uint64_t v873 = (v866 - 0x200000000) >> 32;
                uint64_t v874 = (v866 - 0x100000000) >> 32;
                uint64_t v1541 = 4 * *(void *)(v869 + v868);
                uint64_t result = 4 * v872;
                uint64_t v1525 = 4 * *(void *)((char *)v867 + v868);
                uint64_t v875 = 4 * v871;
                do
                {
                  int v876 = *(_DWORD *)(v88 + 4 * v1558);
                  if (v876 >= 1)
                  {
                    int v877 = 0;
                    uint64_t v878 = 4 * *(void *)(v869 + 8 * v873);
                    uint64_t v879 = 4 * *(void *)&v867[2 * v873];
                    uint64_t v880 = v863;
                    uint64_t v881 = v864;
                    do
                    {
                      int v882 = *(_DWORD *)(v88 + 4 * v873);
                      if (v882 >= 1)
                      {
                        int v883 = 0;
                        uint64_t v884 = (void *)*a2;
                        uint64_t v885 = 4 * *(void *)(v869 + 8 * v874);
                        uint64_t v886 = 4 * *(void *)&v867[2 * v874];
                        uint64_t v887 = v880;
                        uint64_t v888 = v881;
                        do
                        {
                          int v889 = *(_DWORD *)(v88 + 4 * v874);
                          if (v889 >= 1)
                          {
                            uint64_t v890 = (_DWORD *)(v884[19] + v888);
                            uint64_t v891 = (unsigned int *)((char *)v86[19] + v887);
                            do
                            {
                              _DWORD *v890 = *v891;
                              uint64_t v890 = (_DWORD *)((char *)v890 + v885);
                              uint64_t v891 = (_DWORD *)((char *)v891 + v886);
                              --v889;
                            }
                            while (v889);
                          }
                          ++v883;
                          v888 += v878;
                          v887 += v879;
                        }
                        while (v883 != v882);
                      }
                      ++v877;
                      v881 += result;
                      v880 += v875;
                    }
                    while (v877 != v876);
                  }
                  ++v865;
                  v864 += v1541;
                  v863 += v1525;
                }
                while (v865 != v1575);
              }
              break;
            case 5:
              uint64_t v892 = (v89 << 30) - 0x500000000;
              int v1483 = *(_DWORD *)(v88 + (v892 >> 30));
              if (v1483 >= 1)
              {
                uint64_t v1503 = 0;
                uint64_t v1513 = 0;
                int v1493 = 0;
                uint64_t v893 = v89 << 30;
                unint64_t v894 = v86[3];
                uint64_t v895 = v892 >> 29;
                uint64_t v896 = v3[3];
                uint64_t v1473 = (v893 - 0x400000000) >> 32;
                uint64_t v897 = (v893 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v894 + v897);
                uint64_t v1559 = (v893 - 0x300000000) >> 32;
                uint64_t v898 = (v893 - 0x200000000) >> 32;
                uint64_t v899 = (v893 - 0x100000000) >> 32;
                uint64_t v1463 = 4 * *(void *)(v896 + v895);
                uint64_t v1542 = 4 * *(void *)(v896 + v897);
                uint64_t v1454 = 4 * *(void *)((char *)v894 + v895);
                uint64_t v1526 = 4 * result;
                do
                {
                  int v1576 = *(_DWORD *)(v88 + 4 * v1473);
                  if (v1576 >= 1)
                  {
                    int v900 = 0;
                    uint64_t v901 = 4 * *(void *)(v896 + 8 * v1559);
                    uint64_t v902 = 4 * *(void *)&v894[2 * v1559];
                    uint64_t v904 = v1503;
                    uint64_t v903 = v1513;
                    do
                    {
                      int v905 = *(_DWORD *)(v88 + 4 * v1559);
                      if (v905 >= 1)
                      {
                        int v906 = 0;
                        uint64_t v907 = 4 * *(void *)(v896 + 8 * v898);
                        uint64_t v908 = 4 * *(void *)&v894[2 * v898];
                        uint64_t v909 = v903;
                        uint64_t v910 = v904;
                        do
                        {
                          int v911 = *(_DWORD *)(v88 + 4 * v898);
                          if (v911 >= 1)
                          {
                            int v912 = 0;
                            uint64_t result = *a2;
                            uint64_t v913 = 4 * *(void *)(v896 + 8 * v899);
                            uint64_t v914 = 4 * *(void *)&v894[2 * v899];
                            uint64_t v915 = v909;
                            uint64_t v916 = v910;
                            do
                            {
                              int v917 = *(_DWORD *)(v88 + 4 * v899);
                              if (v917 >= 1)
                              {
                                uint64_t v918 = (_DWORD *)(*(void *)(result + 152) + v916);
                                uint64_t v919 = (unsigned int *)((char *)v86[19] + v915);
                                do
                                {
                                  *uint64_t v918 = *v919;
                                  uint64_t v918 = (_DWORD *)((char *)v918 + v913);
                                  uint64_t v919 = (_DWORD *)((char *)v919 + v914);
                                  --v917;
                                }
                                while (v917);
                              }
                              ++v912;
                              v916 += v907;
                              v915 += v908;
                            }
                            while (v912 != v911);
                          }
                          ++v906;
                          v910 += v901;
                          v909 += v902;
                        }
                        while (v906 != v905);
                      }
                      ++v900;
                      v904 += v1542;
                      v903 += v1526;
                    }
                    while (v900 != v1576);
                  }
                  v1503 += v1463;
                  v1513 += v1454;
                  ++v1493;
                }
                while (v1493 != v1483);
              }
              break;
            default:
              LODWORD(v779) = 1;
              uint64_t v780 = -20;
              do
              {
                uint64_t v779 = *(int *)(v87 + v780) * (uint64_t)(int)v779;
                v780 += 4;
              }
              while (v780);
              int v1437 = v86[6];
              if (v1437)
              {
                uint64_t result = 0;
                uint64_t v1462 = *v3;
                uint64_t v781 = (v89 << 30) - 0x500000000;
                uint64_t v1427 = (v89 >> 2) - 1;
                int v782 = v86[3];
                uint64_t v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1418 = v781 >> 32;
                uint64_t v783 = v3[3];
                uint64_t v1472 = (uint64_t)((v89 << 30) - 0x400000000) >> 32;
                uint64_t v1557 = (uint64_t)((v89 << 30) - 0x300000000) >> 32;
                uint64_t v784 = (uint64_t)((v89 << 30) - 0x200000000) >> 32;
                uint64_t v785 = (uint64_t)((v89 << 30) - 0x100000000) >> 32;
                uint64_t v1447 = 4 * *(void *)((char *)v782 + (v781 >> 29));
                uint64_t v1453 = 4 * *(void *)(v783 + (v781 >> 29));
                uint64_t v1432 = v779;
                do
                {
                  uint64_t v786 = v1427;
                  uint64_t v1442 = result;
                  uint64_t v787 = 0;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    uint64_t v788 = v1422;
                  }
                  else
                  {
                    uint64_t v788 = v1422;
                    do
                    {
                      ldiv_t v789 = ldiv((int)result, *(int *)(v88 + 4 * v786));
                      LODWORD(result) = v789.quot;
                      v787 += *(void *)&v782[2 * v786--] * v789.rem;
                    }
                    while (v786 != -1);
                  }
                  uint64_t v790 = 0;
                  if ((v788 & 0x80000000) == 0)
                  {
                    int v791 = v1442;
                    do
                    {
                      ldiv_t v792 = ldiv(v791, *(int *)(v1462 + 4 * v788));
                      int v791 = v792.quot;
                      v790 += *(void *)(v783 + 8 * v788--) * v792.rem;
                    }
                    while (v788 != -1);
                  }
                  int v1482 = *(_DWORD *)(v88 + 4 * v1418);
                  if (v1482 >= 1)
                  {
                    int v793 = 0;
                    uint64_t v1512 = 4 * v790;
                    uint64_t v1540 = 4 * *(void *)(v783 + 8 * v1472);
                    uint64_t v1502 = 4 * v787;
                    uint64_t v1524 = 4 * *(void *)&v782[2 * v1472];
                    do
                    {
                      int v1492 = v793;
                      int v1574 = *(_DWORD *)(v88 + 4 * v1472);
                      if (v1574 >= 1)
                      {
                        int v794 = 0;
                        uint64_t v795 = 4 * *(void *)(v783 + 8 * v1557);
                        uint64_t v796 = 4 * *(void *)&v782[2 * v1557];
                        uint64_t v798 = v1502;
                        uint64_t v797 = v1512;
                        do
                        {
                          int v799 = *(_DWORD *)(v88 + 4 * v1557);
                          if (v799 >= 1)
                          {
                            int v800 = 0;
                            uint64_t v801 = 4 * *(void *)(v783 + 8 * v784);
                            uint64_t v802 = 4 * *(void *)&v782[2 * v784];
                            uint64_t v803 = v798;
                            uint64_t v804 = v797;
                            do
                            {
                              int v805 = *(_DWORD *)(v88 + 4 * v784);
                              if (v805 >= 1)
                              {
                                int v806 = 0;
                                uint64_t v807 = (void *)*a2;
                                uint64_t v808 = 4 * *(void *)(v783 + 8 * v785);
                                uint64_t v809 = 4 * *(void *)&v782[2 * v785];
                                uint64_t v810 = v803;
                                uint64_t v811 = v804;
                                do
                                {
                                  int v812 = *(_DWORD *)(v88 + 4 * v785);
                                  if (v812 >= 1)
                                  {
                                    uint64_t v813 = (_DWORD *)(v807[19] + v811);
                                    uint64_t v814 = (unsigned int *)((char *)v86[19] + v810);
                                    do
                                    {
                                      _DWORD *v813 = *v814;
                                      uint64_t v813 = (_DWORD *)((char *)v813 + v808);
                                      uint64_t v814 = (_DWORD *)((char *)v814 + v809);
                                      --v812;
                                    }
                                    while (v812);
                                  }
                                  ++v806;
                                  v811 += v801;
                                  v810 += v802;
                                }
                                while (v806 != v805);
                              }
                              ++v800;
                              v804 += v795;
                              v803 += v796;
                            }
                            while (v800 != v799);
                          }
                          ++v794;
                          v797 += v1540;
                          v798 += v1524;
                        }
                        while (v794 != v1574);
                      }
                      int v793 = v1492 + 1;
                      v1512 += v1453;
                      v1502 += v1447;
                    }
                    while (v1492 + 1 != v1482);
                  }
                  uint64_t result = v1442 + v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v15 = 0;
            int v16 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v17 = v3[19];
            do
              *(unsigned char *)(v17 + v15++) = v16;
            while (*(void *)(*a2 + 48) > v15);
          }
          break;
        case 1:
          uint64_t v99 = *(void *)(*(void *)result + 160);
          if (v99)
          {
            uint64_t v100 = *(int **)(*(void *)result + 152);
            uint64_t v101 = (unsigned char *)v3[19];
            uint64_t v102 = 4 * v99;
            do
            {
              int v103 = *v100++;
              *v101++ = v103;
              v102 -= 4;
            }
            while (v102);
          }
          break;
        case 2:
          uint64_t v104 = *(int ***)result;
          uint64_t v105 = **(int ***)result;
          switch(v104[1] - *v104)
          {
            case 1:
              if (*v105 >= 1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                uint64_t v108 = v104[19];
                uint64_t v109 = v3[19];
                do
                {
                  *(unsigned char *)(v109 + v106) = v108[v107];
                  v107 += *(void *)v104[3];
                  ++v106;
                }
                while (**v104 > (int)v106);
              }
              break;
            case 2:
              int v361 = *v105;
              if (*v105 >= 1)
              {
                int v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = 0;
                uint64_t v365 = v104[19];
                uint64_t v366 = v3[19];
                do
                {
                  int v367 = v105[1];
                  if (v367 < 1)
                  {
                    int v368 = v104[3];
                    uint64_t v369 = *((void *)v368 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v366 + v363 + result) = v365[v364];
                      int v368 = v104[3];
                      uint64_t v369 = *((void *)v368 + 1);
                      v364 += v369;
                      uint64_t v105 = *v104;
                      int v367 = (*v104)[1];
                      ++result;
                    }
                    while ((int)result < v367);
                    int v361 = *v105;
                    v363 += result;
                  }
                  uint64_t v364 = *(void *)v368 + v364 - v369 * v367;
                  ++v362;
                }
                while (v362 < v361);
              }
              break;
            case 3:
              int v370 = *v105;
              if (*v105 >= 1)
              {
                int v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = 0;
                int v374 = v104[19];
                uint64_t v375 = v3[19];
                do
                {
                  int v376 = v105[1];
                  if (v376 < 1)
                  {
                    int v380 = v104[3];
                    uint64_t v381 = *((void *)v380 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v376; ++m)
                    {
                      int v378 = v105[2];
                      if (v378 < 1)
                      {
                        int v380 = v104[3];
                        uint64_t result = *((void *)v380 + 2);
                      }
                      else
                      {
                        uint64_t v379 = 0;
                        do
                        {
                          *(unsigned char *)(v375 + v372 + v379) = v374[v373];
                          int v380 = v104[3];
                          uint64_t result = *((void *)v380 + 2);
                          v373 += result;
                          uint64_t v105 = *v104;
                          int v378 = (*v104)[2];
                          ++v379;
                        }
                        while ((int)v379 < v378);
                        v372 += v379;
                      }
                      uint64_t v381 = *((void *)v380 + 1);
                      uint64_t v373 = v381 + v373 - result * v378;
                      int v376 = v105[1];
                    }
                    int v370 = *v105;
                  }
                  uint64_t v373 = *(void *)v380 + v373 - v381 * v376;
                  ++v371;
                }
                while (v371 < v370);
              }
              break;
            case 4:
              int v382 = *v105;
              if (*v105 >= 1)
              {
                int v383 = 0;
                uint64_t v384 = 0;
                uint64_t v385 = 0;
                uint64_t v386 = v104[19];
                uint64_t v387 = v3[19];
                do
                {
                  int v388 = v105[1];
                  if (v388 < 1)
                  {
                    int v394 = v104[3];
                    uint64_t v396 = *((void *)v394 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v388; ++n)
                    {
                      int v390 = v105[2];
                      if (v390 < 1)
                      {
                        int v394 = v104[3];
                        uint64_t v395 = *((void *)v394 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v390; ++ii)
                        {
                          int v392 = v105[3];
                          if (v392 < 1)
                          {
                            int v394 = v104[3];
                            uint64_t result = *((void *)v394 + 3);
                          }
                          else
                          {
                            uint64_t v393 = 0;
                            do
                            {
                              *(unsigned char *)(v387 + v384 + v393) = v386[v385];
                              int v394 = v104[3];
                              uint64_t result = *((void *)v394 + 3);
                              v385 += result;
                              uint64_t v105 = *v104;
                              int v392 = (*v104)[3];
                              ++v393;
                            }
                            while ((int)v393 < v392);
                            v384 += v393;
                          }
                          uint64_t v395 = *((void *)v394 + 2);
                          uint64_t v385 = v395 + v385 - result * v392;
                          int v390 = v105[2];
                        }
                      }
                      uint64_t v396 = *((void *)v394 + 1);
                      uint64_t v385 = v396 + v385 - v395 * v390;
                      int v388 = v105[1];
                    }
                    int v382 = *v105;
                  }
                  uint64_t v385 = *(void *)v394 + v385 - v396 * v388;
                  ++v383;
                }
                while (v383 < v382);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v352 = 0;
                int v353 = v104[19];
                uint64_t v354 = v3[19];
                do
                {
                  int v355 = *v104;
                  unint64_t v356 = (unint64_t)((char *)v104[1] - (char *)*v104) >> 2;
                  uint64_t v357 = 0;
                  uint64_t v358 = (v356 - 1);
                  if ((int)v356 - 1 >= 0)
                  {
                    int v359 = v104[3];
                    LODWORD(result) = v352;
                    do
                    {
                      ldiv_t v360 = ldiv((int)result, v355[v358]);
                      uint64_t result = v360.quot;
                      v357 += *(void *)&v359[2 * v358--] * v360.rem;
                    }
                    while (v358 != -1);
                  }
                  *(unsigned char *)(v354 + v352++) = v353[v357];
                }
                while (v352 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v110 = *(int ***)result;
          int v111 = (uint64_t *)(*(void *)result + 24);
          v112 = v3 + 3;
          uint64_t v114 = **(void **)result;
          uint64_t v113 = *(void *)(*(void *)result + 8);
          uint64_t v115 = v113 - v114;
          switch((v113 - v114) >> 2)
          {
            case 1:
              uint64_t v116 = (v115 << 30) - 0x100000000;
              int v117 = *(_DWORD *)(v114 + (v116 >> 30));
              if (v117 >= 1)
              {
                uint64_t v118 = v116 >> 29;
                uint64_t v119 = *(void *)(*v111 + v118);
                uint64_t v120 = *(void *)(*v112 + v118);
                uint64_t v121 = (unsigned char *)v3[19];
                uint64_t v122 = v110[19];
                uint64_t v123 = 4 * v119;
                do
                {
                  *uint64_t v121 = *v122;
                  v121 += v120;
                  uint64_t v122 = (int *)((char *)v122 + v123);
                  --v117;
                }
                while (v117);
              }
              break;
            case 2:
              uint64_t v941 = (v115 << 30) - 0x200000000;
              int v942 = *(_DWORD *)(v114 + (v941 >> 30));
              if (v942 >= 1)
              {
                uint64_t v943 = 0;
                int v944 = 0;
                uint64_t v945 = 0;
                uint64_t v946 = v941 >> 29;
                uint64_t v947 = *(void *)(*v111 + v946);
                uint64_t v948 = *(void *)(*v112 + v946);
                uint64_t v949 = 4 * v947;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v950 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v951 = *(int *)((char *)*v110 + (v950 >> 30));
                  if (v951 >= 1)
                  {
                    uint64_t v952 = v950 >> 29;
                    uint64_t v953 = *(void *)((char *)v110[3] + v952);
                    uint64_t v954 = *(void *)(*v112 + v952);
                    uint64_t v955 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v943;
                    uint64_t v956 = 4 * v953;
                    do
                    {
                      *(unsigned char *)(v955 + v945) = *(_DWORD *)result;
                      v955 += v954;
                      result += v956;
                      --v951;
                    }
                    while (v951);
                  }
                  v945 += v948;
                  ++v944;
                  v943 += v949;
                }
                while (v944 != v942);
              }
              break;
            case 3:
              uint64_t v957 = (v115 << 30) - 0x300000000;
              int v958 = *(_DWORD *)(v114 + (v957 >> 30));
              if (v958 >= 1)
              {
                uint64_t v959 = 0;
                int v960 = 0;
                uint64_t v961 = 0;
                uint64_t v962 = v957 >> 29;
                uint64_t v963 = *(void *)(*v111 + v962);
                uint64_t v964 = *(void *)(*v112 + v962);
                uint64_t v965 = 4 * v963;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v966 = *(int *)((char *)*v110 + (result >> 30));
                  if (v966 >= 1)
                  {
                    int v967 = 0;
                    uint64_t v968 = result >> 29;
                    uint64_t v969 = *(void *)((char *)v110[3] + v968);
                    uint64_t result = *(void *)(*v112 + v968);
                    uint64_t v970 = 4 * v969;
                    uint64_t v971 = v959;
                    uint64_t v972 = v961;
                    do
                    {
                      uint64_t v973 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v974 = *(int *)((char *)*v110 + (v973 >> 30));
                      if (v974 >= 1)
                      {
                        uint64_t v975 = v973 >> 29;
                        uint64_t v976 = *(void *)((char *)v110[3] + v975);
                        uint64_t v977 = *(void *)(*v112 + v975);
                        uint64_t v978 = *(void *)(*a2 + 152);
                        int v979 = (_DWORD *)(*(void *)(*(void *)v5 + 152) + v971);
                        uint64_t v980 = 4 * v976;
                        do
                        {
                          *(unsigned char *)(v978 + v972) = *v979;
                          v978 += v977;
                          int v979 = (_DWORD *)((char *)v979 + v980);
                          --v974;
                        }
                        while (v974);
                      }
                      v972 += result;
                      ++v967;
                      v971 += v970;
                    }
                    while (v967 != v966);
                  }
                  v961 += v964;
                  ++v960;
                  v959 += v965;
                }
                while (v960 != v958);
              }
              break;
            case 4:
              int v769 = *(int ***)result;
              uint64_t v770 = (void *)(*(void *)result + 24);
              uint64_t v771 = v3 + 3;
LABEL_563:
              break;
            case 5:
              uint64_t v981 = (v115 << 30) - 0x500000000;
              int v982 = *(_DWORD *)(v114 + (v981 >> 30));
              if (v982 >= 1)
              {
                uint64_t v983 = 0;
                uint64_t v984 = 0;
                uint64_t v985 = v981 >> 29;
                uint64_t v986 = *(void *)(*v111 + v985);
                uint64_t v987 = *(void *)(*v112 + v985);
                do
                {
                  v983 += v986;
                  v984 += v987;
                  --v982;
                }
                while (v982);
              }
              break;
            default:
              LODWORD(v920) = 1;
              uint64_t v921 = -20;
              do
              {
                uint64_t v920 = *(int *)(v113 + v921) * (uint64_t)(int)v920;
                v921 += 4;
              }
              while (v921);
              if (v110[6])
              {
                uint64_t result = 0;
                uint64_t v922 = *(void **)v5;
                v1560 = v112;
                uint64_t v1527 = v920;
                do
                {
                  uint64_t v923 = *v110;
                  unint64_t v924 = (unint64_t)((char *)v110[1] - (char *)*v110) >> 2;
                  uint64_t v925 = (v924 - 1);
                  uint64_t v1577 = result;
                  v1543 = v922;
                  uint64_t v926 = 0;
                  if ((int)v924 - 1 >= 0)
                  {
                    uint64_t v927 = *v111;
                    do
                    {
                      ldiv_t v928 = ldiv((int)result, v923[v925]);
                      LODWORD(result) = v928.quot;
                      v926 += *(void *)(v927 + 8 * v925--) * v928.rem;
                    }
                    while (v925 != -1);
                  }
                  uint64_t v929 = *(void *)*a2;
                  unint64_t v930 = (unint64_t)(*(void *)(*a2 + 8) - v929) >> 2;
                  uint64_t v931 = *v1560;
                  uint64_t v932 = 0;
                  uint64_t v933 = (v930 - 1);
                  if ((int)v930 - 1 >= 0)
                  {
                    int v934 = v1577;
                    do
                    {
                      ldiv_t v935 = ldiv(v934, *(int *)(v929 + 4 * v933));
                      int v934 = v935.quot;
                      v932 += *(void *)(v931 + 8 * v933--) * v935.rem;
                    }
                    while (v933 != -1);
                  }
                  uint64_t v922 = v1543;
                  uint64_t v936 = ((v922[1] - *v922) << 30) - 0x500000000;
                  int v937 = *(int *)((char *)v923 + (v936 >> 30));
                  if (v937 >= 1)
                  {
                    uint64_t v938 = v936 >> 29;
                    uint64_t v939 = *(void *)(*v111 + v938);
                    uint64_t v940 = *(void *)(v931 + v938);
                    do
                    {
                      v926 += v939;
                      v932 += v940;
                      --v937;
                    }
                    while (v937);
                    uint64_t v922 = *(void **)v5;
                  }
                  uint64_t result = v1577 + v1527;
                }
                while (v922[6] > (unint64_t)(v1577 + v1527));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(_DWORD **)(*(void *)result + 152);
            int v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
LABEL_37:
          uint64_t v27 = *(void *)(*(void *)result + 160);
          if (v27)
          {
            size_t v28 = *(const void **)(*(void *)result + 152);
            unint64_t v29 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v29, v28, 4 * v27);
          }
          break;
        case 2:
          int v124 = *(int ***)result;
          uint64_t v125 = **(int ***)result;
          uint64_t v126 = *(void *)(*(void *)result + 8) - (void)v125;
          switch(v126 >> 2)
          {
            case 1:
              if (*v125 >= 1)
              {
                uint64_t v127 = 0;
                uint64_t v128 = v124[19];
                uint64_t v129 = v3[19];
                uint64_t v130 = 4 * *(void *)v124[3];
                do
                {
                  *(_DWORD *)(v129 + 4 * v127) = *v128;
                  uint64_t v128 = (int *)((char *)v128 + v130);
                  ++v127;
                }
                while (*v125 > (int)v127);
              }
              break;
            case 2:
              int v406 = *v125;
              if (*v125 >= 1)
              {
                int v407 = 0;
                uint64_t v408 = 0;
                uint64_t v409 = 0;
                uint64_t v410 = v124[19];
                uint64_t v411 = v3[19];
                uint64_t v412 = v124[3];
                uint64_t v413 = *(void *)v412;
                uint64_t v414 = *((void *)v412 + 1);
                int v415 = v125[1];
                do
                {
                  if (v415 >= 1)
                  {
                    uint64_t v416 = 0;
                    do
                    {
                      *(_DWORD *)(v411 + 4 * v408 + 4 * v416) = v410[v409];
                      v409 += v414;
                      int v415 = v125[1];
                      ++v416;
                    }
                    while ((int)v416 < v415);
                    int v406 = *v125;
                    v408 += v416;
                  }
                  uint64_t v409 = v409 + v413 - v414 * v415;
                  ++v407;
                }
                while (v407 < v406);
              }
              break;
            case 3:
              uint64_t result = *v125;
              if ((int)result >= 1)
              {
                int v417 = 0;
                uint64_t v418 = 0;
                uint64_t v419 = 0;
                int v420 = v124[19];
                uint64_t v421 = v3[19];
                uint64_t v422 = v124[3];
                uint64_t v423 = *(void *)v422;
                uint64_t v424 = *((void *)v422 + 1);
                int v425 = v125[1];
                do
                {
                  if (v425 >= 1)
                  {
                    int v426 = 0;
                    uint64_t v427 = v124[3];
                    uint64_t v428 = *((void *)v422 + 2);
                    int v429 = v125[2];
                    do
                    {
                      if (v429 >= 1)
                      {
                        uint64_t v430 = 0;
                        uint64_t v431 = *((void *)v427 + 2);
                        do
                        {
                          *(_DWORD *)(v421 + 4 * v418 + 4 * v430) = v420[v419];
                          v419 += v431;
                          int v429 = v125[2];
                          ++v430;
                        }
                        while ((int)v430 < v429);
                        int v425 = v125[1];
                        v418 += v430;
                      }
                      uint64_t v419 = v419 + v424 - v428 * v429;
                      ++v426;
                    }
                    while (v426 < v425);
                    uint64_t result = *v125;
                  }
                  uint64_t v419 = v419 + v423 - v424 * v425;
                  ++v417;
                }
                while (v417 < (int)result);
              }
              break;
            case 4:
              int v432 = *v125;
              if (*v125 >= 1)
              {
                int v433 = 0;
                uint64_t v434 = 0;
                uint64_t v435 = 0;
                uint64_t v436 = v124[19];
                uint64_t v437 = v3[19];
                int v438 = v124[3];
                uint64_t v439 = *(void *)v438;
                uint64_t v440 = *((void *)v438 + 1);
                int v441 = v125[1];
                do
                {
                  if (v441 >= 1)
                  {
                    int v442 = 0;
                    uint64_t v443 = v124[3];
                    uint64_t v444 = *((void *)v438 + 2);
                    int v445 = v125[2];
                    do
                    {
                      if (v445 >= 1)
                      {
                        int v446 = 0;
                        uint64_t v447 = v124[3];
                        uint64_t v448 = *((void *)v443 + 2);
                        uint64_t v449 = *((void *)v443 + 3);
                        int v450 = v125[3];
                        do
                        {
                          if (v450 >= 1)
                          {
                            uint64_t v451 = 0;
                            uint64_t v452 = *((void *)v447 + 3);
                            do
                            {
                              *(_DWORD *)(v437 + 4 * v434 + 4 * v451) = v436[v435];
                              v435 += v452;
                              int v450 = v125[3];
                              ++v451;
                            }
                            while ((int)v451 < v450);
                            int v445 = v125[2];
                            v434 += v451;
                          }
                          uint64_t v435 = v435 + v448 - v449 * v450;
                          ++v446;
                        }
                        while (v446 < v445);
                        int v441 = v125[1];
                      }
                      uint64_t v435 = v435 + v440 - v444 * v445;
                      ++v442;
                    }
                    while (v442 < v441);
                    int v432 = *v125;
                  }
                  uint64_t result = v441;
                  uint64_t v435 = v435 + v439 - v440 * v441;
                  ++v433;
                }
                while (v433 < v432);
              }
              break;
            default:
              uint64_t v397 = v3[6];
              if (v397)
              {
                uint64_t v398 = 0;
                uint64_t v399 = v124[19];
                uint64_t v400 = v3[19];
                uint64_t v401 = ((unint64_t)v126 >> 2) - 1;
                uint64_t v402 = v124[3];
                do
                {
                  uint64_t v403 = 0;
                  if ((v401 & 0x80000000) == 0)
                  {
                    uint64_t v404 = v401;
                    LODWORD(result) = v398;
                    do
                    {
                      ldiv_t v405 = ldiv((int)result, v125[v404]);
                      uint64_t result = v405.quot;
                      v403 += *(void *)&v402[2 * v404--] * v405.rem;
                    }
                    while (v404 != -1);
                  }
                  *(_DWORD *)(v400 + 4 * v398++) = v399[v403];
                }
                while (v398 != v397);
              }
              break;
          }
          break;
        case 3:
          uint64_t v131 = *(unsigned int ***)result;
          uint64_t v133 = **(void **)result;
          uint64_t v132 = *(void *)(*(void *)result + 8);
          unint64_t v134 = v132 - v133;
          switch((v132 - v133) >> 2)
          {
            case 1:
              uint64_t v135 = (v134 << 30) - 0x100000000;
              int v136 = *(_DWORD *)(v133 + (v135 >> 30));
              if (v136 >= 1)
              {
                uint64_t v137 = v135 >> 29;
                uint64_t v138 = *(void *)((char *)v131[3] + v137);
                uint64_t v139 = *(void *)(v3[3] + v137);
                v140 = (unsigned int *)v3[19];
                uint64_t v141 = v131[19];
                uint64_t v142 = 4 * v139;
                uint64_t v143 = 4 * v138;
                do
                {
                  unsigned int *v140 = *v141;
                  v140 = (unsigned int *)((char *)v140 + v142);
                  uint64_t v141 = (unsigned int *)((char *)v141 + v143);
                  --v136;
                }
                while (v136);
              }
              break;
            case 2:
              uint64_t v1024 = (v134 << 30) - 0x200000000;
              int v1025 = *(_DWORD *)(v133 + (v1024 >> 30));
              if (v1025 >= 1)
              {
                uint64_t v1026 = 0;
                uint64_t v1027 = 0;
                int v1028 = 0;
                uint64_t v1029 = v131[3];
                uint64_t v1030 = v1024 >> 29;
                uint64_t v1031 = *(void *)((char *)v1029 + v1030);
                uint64_t v1032 = v3[3];
                uint64_t v1033 = (v134 << 30) - 0x100000000;
                uint64_t v1034 = *(void *)((char *)v1029 + (v1033 >> 29));
                uint64_t v1035 = *(void *)(v1032 + (v1033 >> 29));
                uint64_t v1036 = v1033 >> 32;
                uint64_t v1037 = 4 * *(void *)(v1032 + v1030);
                uint64_t v1038 = 4 * v1035;
                uint64_t v1039 = 4 * v1031;
                uint64_t v1040 = 4 * v1034;
                do
                {
                  uint64_t result = *(unsigned int *)(v133 + 4 * v1036);
                  if ((int)result >= 1)
                  {
                    uint64_t v1041 = (_DWORD *)(v3[19] + v1027);
                    uint64_t v1042 = (unsigned int *)((char *)v131[19] + v1026);
                    do
                    {
                      *uint64_t v1041 = *v1042;
                      uint64_t v1041 = (_DWORD *)((char *)v1041 + v1038);
                      uint64_t v1042 = (_DWORD *)((char *)v1042 + v1040);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v1028;
                  v1027 += v1037;
                  v1026 += v1039;
                }
                while (v1028 != v1025);
              }
              break;
            case 3:
              uint64_t v1043 = (v134 << 30) - 0x300000000;
              int v1044 = *(_DWORD *)(v133 + (v1043 >> 30));
              if (v1044 >= 1)
              {
                uint64_t v1045 = 0;
                uint64_t v1046 = 0;
                int v1047 = 0;
                uint64_t v1048 = v134 << 30;
                uint64_t v1049 = v131[3];
                uint64_t v1050 = v1043 >> 29;
                uint64_t v1051 = *(void *)((char *)v1049 + v1050);
                uint64_t v1052 = v3[3];
                uint64_t v1053 = *(void *)(v1052 + v1050);
                uint64_t v1054 = (v1048 - 0x200000000) >> 29;
                uint64_t v1055 = *(void *)((char *)v1049 + v1054);
                uint64_t v1056 = (v1048 - 0x200000000) >> 32;
                uint64_t v1057 = (v1048 - 0x100000000) >> 32;
                uint64_t v1058 = 4 * v1053;
                uint64_t v1059 = 4 * *(void *)(v1052 + v1054);
                uint64_t result = 4 * v1051;
                uint64_t v1060 = 4 * v1055;
                do
                {
                  int v1061 = *(_DWORD *)(v133 + 4 * v1056);
                  if (v1061 >= 1)
                  {
                    int v1062 = 0;
                    uint64_t v1063 = (void *)*a2;
                    uint64_t v1064 = 4 * *(void *)(v1052 + 8 * v1057);
                    uint64_t v1065 = 4 * *(void *)&v1049[2 * v1057];
                    uint64_t v1066 = v1045;
                    uint64_t v1067 = v1046;
                    do
                    {
                      int v1068 = *(_DWORD *)(v133 + 4 * v1057);
                      if (v1068 >= 1)
                      {
                        uint64_t v1069 = (_DWORD *)(v1063[19] + v1067);
                        uint64_t v1070 = (unsigned int *)((char *)v131[19] + v1066);
                        do
                        {
                          *uint64_t v1069 = *v1070;
                          uint64_t v1069 = (_DWORD *)((char *)v1069 + v1064);
                          uint64_t v1070 = (_DWORD *)((char *)v1070 + v1065);
                          --v1068;
                        }
                        while (v1068);
                      }
                      ++v1062;
                      v1067 += v1059;
                      v1066 += v1060;
                    }
                    while (v1062 != v1061);
                  }
                  ++v1047;
                  v1046 += v1058;
                  v1045 += result;
                }
                while (v1047 != v1044);
              }
              break;
            case 4:
              uint64_t v1071 = (v134 << 30) - 0x400000000;
              int v1579 = *(_DWORD *)(v133 + (v1071 >> 30));
              if (v1579 >= 1)
              {
                uint64_t v1072 = 0;
                uint64_t v1073 = 0;
                int v1074 = 0;
                uint64_t v1075 = v134 << 30;
                uint64_t v1076 = v131[3];
                uint64_t v1077 = v1071 >> 29;
                uint64_t v1078 = v3[3];
                uint64_t v1562 = (v1075 - 0x300000000) >> 32;
                uint64_t v1079 = (v1075 - 0x300000000) >> 29;
                uint64_t v1080 = *(void *)((char *)v1076 + v1079);
                uint64_t v1081 = *(void *)(v1078 + v1079);
                uint64_t v1082 = (v1075 - 0x200000000) >> 32;
                uint64_t v1083 = (v1075 - 0x100000000) >> 32;
                uint64_t v1545 = 4 * *(void *)(v1078 + v1077);
                uint64_t result = 4 * v1081;
                uint64_t v1529 = 4 * *(void *)((char *)v1076 + v1077);
                uint64_t v1084 = 4 * v1080;
                do
                {
                  int v1085 = *(_DWORD *)(v133 + 4 * v1562);
                  if (v1085 >= 1)
                  {
                    int v1086 = 0;
                    uint64_t v1087 = 4 * *(void *)(v1078 + 8 * v1082);
                    uint64_t v1088 = 4 * *(void *)&v1076[2 * v1082];
                    uint64_t v1089 = v1072;
                    uint64_t v1090 = v1073;
                    do
                    {
                      int v1091 = *(_DWORD *)(v133 + 4 * v1082);
                      if (v1091 >= 1)
                      {
                        int v1092 = 0;
                        uint64_t v1093 = (void *)*a2;
                        uint64_t v1094 = 4 * *(void *)(v1078 + 8 * v1083);
                        uint64_t v1095 = 4 * *(void *)&v1076[2 * v1083];
                        uint64_t v1096 = v1089;
                        uint64_t v1097 = v1090;
                        do
                        {
                          int v1098 = *(_DWORD *)(v133 + 4 * v1083);
                          if (v1098 >= 1)
                          {
                            ldiv_t v1099 = (_DWORD *)(v1093[19] + v1097);
                            uint64_t v1100 = (unsigned int *)((char *)v131[19] + v1096);
                            do
                            {
                              *ldiv_t v1099 = *v1100;
                              ldiv_t v1099 = (_DWORD *)((char *)v1099 + v1094);
                              uint64_t v1100 = (_DWORD *)((char *)v1100 + v1095);
                              --v1098;
                            }
                            while (v1098);
                          }
                          ++v1092;
                          v1097 += v1087;
                          v1096 += v1088;
                        }
                        while (v1092 != v1091);
                      }
                      ++v1086;
                      v1090 += result;
                      v1089 += v1084;
                    }
                    while (v1086 != v1085);
                  }
                  ++v1074;
                  v1073 += v1545;
                  v1072 += v1529;
                }
                while (v1074 != v1579);
              }
              break;
            case 5:
              uint64_t v1101 = (v134 << 30) - 0x500000000;
              int v1485 = *(_DWORD *)(v133 + (v1101 >> 30));
              if (v1485 >= 1)
              {
                uint64_t v1505 = 0;
                uint64_t v1515 = 0;
                int v1495 = 0;
                uint64_t v1102 = v134 << 30;
                int v1103 = v131[3];
                uint64_t v1104 = v1101 >> 29;
                uint64_t v1105 = v3[3];
                uint64_t v1475 = (v1102 - 0x400000000) >> 32;
                uint64_t v1106 = (v1102 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v1103 + v1106);
                uint64_t v1563 = (v1102 - 0x300000000) >> 32;
                uint64_t v1107 = (v1102 - 0x200000000) >> 32;
                uint64_t v1108 = (v1102 - 0x100000000) >> 32;
                uint64_t v1465 = 4 * *(void *)(v1105 + v1104);
                uint64_t v1546 = 4 * *(void *)(v1105 + v1106);
                uint64_t v1456 = 4 * *(void *)((char *)v1103 + v1104);
                uint64_t v1530 = 4 * result;
                do
                {
                  int v1580 = *(_DWORD *)(v133 + 4 * v1475);
                  if (v1580 >= 1)
                  {
                    int v1109 = 0;
                    uint64_t v1110 = 4 * *(void *)(v1105 + 8 * v1563);
                    uint64_t v1111 = 4 * *(void *)&v1103[2 * v1563];
                    uint64_t v1113 = v1505;
                    uint64_t v1112 = v1515;
                    do
                    {
                      int v1114 = *(_DWORD *)(v133 + 4 * v1563);
                      if (v1114 >= 1)
                      {
                        int v1115 = 0;
                        uint64_t v1116 = 4 * *(void *)(v1105 + 8 * v1107);
                        uint64_t v1117 = 4 * *(void *)&v1103[2 * v1107];
                        uint64_t v1118 = v1112;
                        uint64_t v1119 = v1113;
                        do
                        {
                          int v1120 = *(_DWORD *)(v133 + 4 * v1107);
                          if (v1120 >= 1)
                          {
                            int v1121 = 0;
                            uint64_t result = *a2;
                            uint64_t v1122 = 4 * *(void *)(v1105 + 8 * v1108);
                            uint64_t v1123 = 4 * *(void *)&v1103[2 * v1108];
                            uint64_t v1124 = v1118;
                            uint64_t v1125 = v1119;
                            do
                            {
                              int v1126 = *(_DWORD *)(v133 + 4 * v1108);
                              if (v1126 >= 1)
                              {
                                uint64_t v1127 = (_DWORD *)(*(void *)(result + 152) + v1125);
                                uint64_t v1128 = (unsigned int *)((char *)v131[19] + v1124);
                                do
                                {
                                  *uint64_t v1127 = *v1128;
                                  uint64_t v1127 = (_DWORD *)((char *)v1127 + v1122);
                                  uint64_t v1128 = (_DWORD *)((char *)v1128 + v1123);
                                  --v1126;
                                }
                                while (v1126);
                              }
                              ++v1121;
                              v1125 += v1116;
                              v1124 += v1117;
                            }
                            while (v1121 != v1120);
                          }
                          ++v1115;
                          v1119 += v1110;
                          v1118 += v1111;
                        }
                        while (v1115 != v1114);
                      }
                      ++v1109;
                      v1113 += v1546;
                      v1112 += v1530;
                    }
                    while (v1109 != v1580);
                  }
                  v1505 += v1465;
                  v1515 += v1456;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              LODWORD(v988) = 1;
              uint64_t v989 = -20;
              do
              {
                uint64_t v988 = *(int *)(v132 + v989) * (uint64_t)(int)v988;
                v989 += 4;
              }
              while (v989);
              int v1438 = v131[6];
              if (v1438)
              {
                uint64_t result = 0;
                uint64_t v1464 = *v3;
                uint64_t v990 = (v134 << 30) - 0x500000000;
                uint64_t v1428 = (v134 >> 2) - 1;
                int v991 = v131[3];
                uint64_t v1423 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1419 = v990 >> 32;
                uint64_t v992 = v3[3];
                uint64_t v1474 = (uint64_t)((v134 << 30) - 0x400000000) >> 32;
                uint64_t v1561 = (uint64_t)((v134 << 30) - 0x300000000) >> 32;
                uint64_t v993 = (uint64_t)((v134 << 30) - 0x200000000) >> 32;
                uint64_t v994 = (uint64_t)((v134 << 30) - 0x100000000) >> 32;
                uint64_t v1448 = 4 * *(void *)((char *)v991 + (v990 >> 29));
                uint64_t v1455 = 4 * *(void *)(v992 + (v990 >> 29));
                uint64_t v1433 = v988;
                do
                {
                  uint64_t v995 = v1428;
                  uint64_t v1443 = result;
                  uint64_t v996 = 0;
                  if ((v1428 & 0x80000000) != 0)
                  {
                    uint64_t v997 = v1423;
                  }
                  else
                  {
                    uint64_t v997 = v1423;
                    do
                    {
                      ldiv_t v998 = ldiv((int)result, *(int *)(v133 + 4 * v995));
                      LODWORD(result) = v998.quot;
                      v996 += *(void *)&v991[2 * v995--] * v998.rem;
                    }
                    while (v995 != -1);
                  }
                  uint64_t v999 = 0;
                  if ((v997 & 0x80000000) == 0)
                  {
                    int v1000 = v1443;
                    do
                    {
                      ldiv_t v1001 = ldiv(v1000, *(int *)(v1464 + 4 * v997));
                      int v1000 = v1001.quot;
                      v999 += *(void *)(v992 + 8 * v997--) * v1001.rem;
                    }
                    while (v997 != -1);
                  }
                  int v1484 = *(_DWORD *)(v133 + 4 * v1419);
                  if (v1484 >= 1)
                  {
                    int v1002 = 0;
                    uint64_t v1514 = 4 * v999;
                    uint64_t v1544 = 4 * *(void *)(v992 + 8 * v1474);
                    uint64_t v1504 = 4 * v996;
                    uint64_t v1528 = 4 * *(void *)&v991[2 * v1474];
                    do
                    {
                      int v1494 = v1002;
                      int v1578 = *(_DWORD *)(v133 + 4 * v1474);
                      if (v1578 >= 1)
                      {
                        int v1003 = 0;
                        uint64_t v1004 = 4 * *(void *)(v992 + 8 * v1561);
                        uint64_t v1005 = 4 * *(void *)&v991[2 * v1561];
                        uint64_t v1007 = v1504;
                        uint64_t v1006 = v1514;
                        do
                        {
                          int v1008 = *(_DWORD *)(v133 + 4 * v1561);
                          if (v1008 >= 1)
                          {
                            int v1009 = 0;
                            uint64_t v1010 = 4 * *(void *)(v992 + 8 * v993);
                            uint64_t v1011 = 4 * *(void *)&v991[2 * v993];
                            uint64_t v1012 = v1007;
                            uint64_t v1013 = v1006;
                            do
                            {
                              int v1014 = *(_DWORD *)(v133 + 4 * v993);
                              if (v1014 >= 1)
                              {
                                int v1015 = 0;
                                uint64_t v1016 = (void *)*a2;
                                uint64_t v1017 = 4 * *(void *)(v992 + 8 * v994);
                                uint64_t v1018 = 4 * *(void *)&v991[2 * v994];
                                uint64_t v1019 = v1012;
                                uint64_t v1020 = v1013;
                                do
                                {
                                  int v1021 = *(_DWORD *)(v133 + 4 * v994);
                                  if (v1021 >= 1)
                                  {
                                    uint64_t v1022 = (_DWORD *)(v1016[19] + v1020);
                                    int v1023 = (unsigned int *)((char *)v131[19] + v1019);
                                    do
                                    {
                                      *uint64_t v1022 = *v1023;
                                      uint64_t v1022 = (_DWORD *)((char *)v1022 + v1017);
                                      int v1023 = (_DWORD *)((char *)v1023 + v1018);
                                      --v1021;
                                    }
                                    while (v1021);
                                  }
                                  ++v1015;
                                  v1020 += v1010;
                                  v1019 += v1011;
                                }
                                while (v1015 != v1014);
                              }
                              ++v1009;
                              v1013 += v1004;
                              v1012 += v1005;
                            }
                            while (v1009 != v1008);
                          }
                          ++v1003;
                          v1006 += v1544;
                          v1007 += v1528;
                        }
                        while (v1003 != v1578);
                      }
                      int v1002 = v1494 + 1;
                      v1514 += v1455;
                      v1504 += v1448;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  uint64_t result = v1443 + v1433;
                }
                while ((unint64_t)v1438 > v1443 + v1433);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v3[6];
          if (v21)
          {
            uint64_t v22 = **(unsigned int **)(*(void *)result + 152);
            uint64_t v23 = (void *)v3[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v144 = *(void *)(*(void *)result + 160);
          if (v144)
          {
            unint64_t v145 = *(unsigned int **)(*(void *)result + 152);
            uint64_t v146 = (void *)v3[19];
            uint64_t v147 = 4 * v144;
            do
            {
              unsigned int v148 = *v145++;
              *v146++ = v148;
              v147 -= 4;
            }
            while (v147);
          }
          break;
        case 2:
          uint64_t v149 = *(int ***)result;
          unint64_t v150 = **(int ***)result;
          uint64_t v151 = *(void *)(*(void *)result + 8) - (void)v150;
          switch(v151 >> 2)
          {
            case 1:
              uint64_t v152 = *v150;
              if ((int)v152 >= 1)
              {
                uint64_t v153 = v149[19];
                uint64_t v154 = (void *)v3[19];
                uint64_t v155 = 4 * *(void *)v149[3];
                do
                {
                  *v154++ = *v153;
                  uint64_t v153 = (int *)((char *)v153 + v155);
                  --v152;
                }
                while (v152);
              }
              break;
            case 2:
              int v462 = *v150;
              if (*v150 >= 1)
              {
                int v463 = 0;
                uint64_t v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = v149[19];
                uint64_t v467 = v3[19];
                uint64_t v468 = v150[1];
                uint64_t v469 = v149[3];
                uint64_t v471 = *(void *)v469;
                uint64_t v470 = *((void *)v469 + 1);
                uint64_t v472 = v471 - v470 * v468;
                do
                {
                  int v473 = v468;
                  if ((int)v468 >= 1)
                  {
                    do
                    {
                      uint64_t result = v466[v465];
                      *(void *)(v467 + 8 * v464++) = result;
                      v465 += v470;
                      --v473;
                    }
                    while (v473);
                  }
                  v465 += v472;
                  ++v463;
                }
                while (v463 != v462);
              }
              break;
            case 3:
              int v474 = *v150;
              if (*v150 >= 1)
              {
                int v475 = 0;
                uint64_t result = 0;
                uint64_t v476 = 0;
                uint64_t v477 = v149[19];
                uint64_t v478 = v3[19];
                uint64_t v479 = v150[1];
                uint64_t v480 = v149[3];
                uint64_t v481 = *((void *)v480 + 1);
                uint64_t v482 = *(void *)v480 - v481 * v479;
                do
                {
                  if ((int)v479 < 1)
                  {
                    uint64_t v489 = result;
                  }
                  else
                  {
                    int v483 = 0;
                    uint64_t v484 = v150[2];
                    uint64_t v485 = v149[3];
                    uint64_t v486 = v481 - *((void *)v480 + 2) * v484;
                    do
                    {
                      if ((int)v484 < 1)
                      {
                        uint64_t v489 = result;
                      }
                      else
                      {
                        uint64_t v487 = *((void *)v485 + 2);
                        int v488 = v484;
                        do
                        {
                          uint64_t v489 = result + 1;
                          *(void *)(v478 + 8 * result) = v477[v476];
                          v476 += v487;
                          ++result;
                          --v488;
                        }
                        while (v488);
                      }
                      v476 += v486;
                      ++v483;
                      uint64_t result = v489;
                    }
                    while (v483 != v479);
                  }
                  v476 += v482;
                  ++v475;
                  uint64_t result = v489;
                }
                while (v475 != v474);
              }
              break;
            case 4:
              int v490 = *v150;
              if (*v150 >= 1)
              {
                int v491 = 0;
                uint64_t result = 0;
                uint64_t v492 = 0;
                uint64_t v493 = v149[19];
                uint64_t v494 = v3[19];
                uint64_t v495 = v150[1];
                int v496 = v149[3];
                uint64_t v497 = *((void *)v496 + 1);
                uint64_t v498 = *(void *)v496 - v497 * v495;
                do
                {
                  if ((int)v495 < 1)
                  {
                    uint64_t v509 = result;
                  }
                  else
                  {
                    int v499 = 0;
                    uint64_t v500 = v150[2];
                    uint64_t v501 = v149[3];
                    uint64_t v502 = v497 - *((void *)v496 + 2) * v500;
                    do
                    {
                      if ((int)v500 < 1)
                      {
                        uint64_t v509 = result;
                      }
                      else
                      {
                        int v503 = 0;
                        uint64_t v504 = v150[3];
                        uint64_t v505 = v149[3];
                        uint64_t v506 = *((void *)v501 + 2) - *((void *)v501 + 3) * v504;
                        do
                        {
                          if ((int)v504 < 1)
                          {
                            uint64_t v509 = result;
                          }
                          else
                          {
                            uint64_t v507 = *((void *)v505 + 3);
                            int v508 = v504;
                            do
                            {
                              uint64_t v509 = result + 1;
                              *(void *)(v494 + 8 * result) = v493[v492];
                              v492 += v507;
                              ++result;
                              --v508;
                            }
                            while (v508);
                          }
                          v492 += v506;
                          ++v503;
                          uint64_t result = v509;
                        }
                        while (v503 != v500);
                      }
                      v492 += v502;
                      ++v499;
                      uint64_t result = v509;
                    }
                    while (v499 != v495);
                  }
                  v492 += v498;
                  ++v491;
                  uint64_t result = v509;
                }
                while (v491 != v490);
              }
              break;
            default:
              uint64_t v453 = v3[6];
              if (v453)
              {
                uint64_t v454 = 0;
                uint64_t v455 = v149[19];
                uint64_t v456 = v3[19];
                uint64_t v457 = ((unint64_t)v151 >> 2) - 1;
                uint64_t v458 = v149[3];
                do
                {
                  uint64_t v459 = 0;
                  if ((v457 & 0x80000000) == 0)
                  {
                    uint64_t v460 = v457;
                    LODWORD(result) = v454;
                    do
                    {
                      ldiv_t v461 = ldiv((int)result, v150[v460]);
                      uint64_t result = v461.quot;
                      v459 += *(void *)&v458[2 * v460--] * v461.rem;
                    }
                    while (v460 != -1);
                  }
                  *(void *)(v456 + 8 * v454++) = v455[v459];
                }
                while (v454 != v453);
              }
              break;
          }
          break;
        case 3:
          v156 = *(unsigned int ***)result;
          uint64_t v158 = **(void **)result;
          uint64_t v157 = *(void *)(*(void *)result + 8);
          unint64_t v159 = v157 - v158;
          switch((v157 - v158) >> 2)
          {
            case 1:
              uint64_t v160 = (v159 << 30) - 0x100000000;
              int v161 = *(_DWORD *)(v158 + (v160 >> 30));
              if (v161 >= 1)
              {
                uint64_t v162 = v160 >> 29;
                uint64_t v163 = *(void *)((char *)v156[3] + v162);
                uint64_t v164 = *(void *)(v3[3] + v162);
                uint64_t v165 = (void *)v3[19];
                uint64_t v166 = v156[19];
                uint64_t v167 = 8 * v164;
                uint64_t v168 = 4 * v163;
                do
                {
                  *uint64_t v165 = *v166;
                  uint64_t v165 = (void *)((char *)v165 + v167);
                  uint64_t v166 = (unsigned int *)((char *)v166 + v168);
                  --v161;
                }
                while (v161);
              }
              break;
            case 2:
              uint64_t v1164 = (v159 << 30) - 0x200000000;
              int v1165 = *(_DWORD *)(v158 + (v1164 >> 30));
              if (v1165 >= 1)
              {
                uint64_t v1166 = 0;
                uint64_t v1167 = 0;
                int v1168 = 0;
                uint64_t v1169 = v156[3];
                uint64_t v1170 = v1164 >> 29;
                uint64_t v1171 = *(void *)((char *)v1169 + v1170);
                uint64_t v1172 = v3[3];
                uint64_t result = *(void *)(v1172 + v1170);
                uint64_t v1173 = (v159 << 30) - 0x100000000;
                uint64_t v1174 = *(void *)((char *)v1169 + (v1173 >> 29));
                uint64_t v1175 = *(void *)(v1172 + (v1173 >> 29));
                int v1176 = *(_DWORD *)(v158 + (v1173 >> 30));
                uint64_t v1177 = 8 * result;
                uint64_t v1178 = 8 * v1175;
                uint64_t v1179 = 4 * v1171;
                uint64_t v1180 = 4 * v1174;
                do
                {
                  if (v1176 >= 1)
                  {
                    uint64_t result = v3[19] + v1167;
                    int v1181 = (unsigned int *)((char *)v156[19] + v1166);
                    int v1182 = v1176;
                    do
                    {
                      *(void *)uint64_t result = *v1181;
                      result += v1178;
                      int v1181 = (unsigned int *)((char *)v1181 + v1180);
                      --v1182;
                    }
                    while (v1182);
                  }
                  ++v1168;
                  v1167 += v1177;
                  v1166 += v1179;
                }
                while (v1168 != v1165);
              }
              break;
            case 3:
              uint64_t v1183 = (v159 << 30) - 0x300000000;
              int v1184 = *(_DWORD *)(v158 + (v1183 >> 30));
              if (v1184 >= 1)
              {
                uint64_t v1185 = 0;
                uint64_t v1186 = 0;
                int v1187 = 0;
                uint64_t v1188 = v156[3];
                uint64_t v1189 = v1183 >> 29;
                uint64_t v1190 = *(void *)((char *)v1188 + v1189);
                uint64_t v1191 = v3[3];
                uint64_t v1192 = *(void *)(v1191 + v1189);
                uint64_t v1193 = v159 << 30;
                uint64_t v1194 = (v159 << 30) - 0x200000000;
                uint64_t v1195 = *(void *)((char *)v1188 + (v1194 >> 29));
                uint64_t v1196 = *(void *)(v1191 + (v1194 >> 29));
                int v1197 = *(_DWORD *)(v158 + (v1194 >> 30));
                uint64_t v1198 = (v1193 - 0x100000000) >> 32;
                uint64_t v1199 = 8 * v1192;
                uint64_t v1200 = 8 * v1196;
                uint64_t result = 4 * v1190;
                uint64_t v1201 = 4 * v1195;
                do
                {
                  if (v1197 >= 1)
                  {
                    int v1202 = 0;
                    int v1203 = *(_DWORD *)(v158 + 4 * v1198);
                    uint64_t v1204 = (void *)*a2;
                    uint64_t v1205 = 8 * *(void *)(v1191 + 8 * v1198);
                    uint64_t v1206 = 4 * *(void *)&v1188[2 * v1198];
                    uint64_t v1207 = v1185;
                    uint64_t v1208 = v1186;
                    do
                    {
                      if (v1203 >= 1)
                      {
                        uint64_t v1209 = (void *)(v1204[19] + v1208);
                        uint64_t v1210 = (unsigned int *)((char *)v156[19] + v1207);
                        int v1211 = v1203;
                        do
                        {
                          *uint64_t v1209 = *v1210;
                          uint64_t v1209 = (void *)((char *)v1209 + v1205);
                          uint64_t v1210 = (unsigned int *)((char *)v1210 + v1206);
                          --v1211;
                        }
                        while (v1211);
                      }
                      ++v1202;
                      v1208 += v1200;
                      v1207 += v1201;
                    }
                    while (v1202 != v1197);
                  }
                  ++v1187;
                  v1186 += v1199;
                  v1185 += result;
                }
                while (v1187 != v1184);
              }
              break;
            case 4:
              uint64_t v1212 = (v159 << 30) - 0x400000000;
              int v1582 = *(_DWORD *)(v158 + (v1212 >> 30));
              if (v1582 >= 1)
              {
                uint64_t v1213 = 0;
                uint64_t v1214 = 0;
                int v1215 = 0;
                uint64_t v1216 = v156[3];
                uint64_t v1217 = v1212 >> 29;
                uint64_t v1218 = v159 << 30;
                uint64_t v1219 = v3[3];
                uint64_t v1220 = (v1218 - 0x300000000) >> 29;
                uint64_t v1221 = *(void *)((char *)v1216 + v1220);
                uint64_t v1222 = v1218 - 0x200000000;
                uint64_t v1223 = v1218 - 0x100000000;
                uint64_t v1224 = *(void *)(v1219 + v1220);
                int v1225 = *(_DWORD *)(v158 + ((v1218 - 0x300000000) >> 30));
                uint64_t v1532 = v1222 >> 32;
                uint64_t v1226 = v1223 >> 32;
                uint64_t v1565 = 8 * *(void *)(v1219 + v1217);
                uint64_t result = 8 * v1224;
                uint64_t v1548 = 4 * *(void *)((char *)v1216 + v1217);
                uint64_t v1227 = 4 * v1221;
                do
                {
                  if (v1225 >= 1)
                  {
                    int v1228 = 0;
                    int v1229 = *(_DWORD *)(v158 + 4 * v1532);
                    uint64_t v1230 = 8 * *(void *)(v1219 + 8 * v1532);
                    uint64_t v1231 = 4 * *(void *)&v1216[2 * v1532];
                    uint64_t v1232 = v1213;
                    uint64_t v1233 = v1214;
                    do
                    {
                      if (v1229 >= 1)
                      {
                        int v1234 = 0;
                        int v1235 = *(_DWORD *)(v158 + 4 * v1226);
                        uint64_t v1236 = (void *)*a2;
                        uint64_t v1237 = 8 * *(void *)(v1219 + 8 * v1226);
                        uint64_t v1238 = 4 * *(void *)&v1216[2 * v1226];
                        uint64_t v1239 = v1232;
                        uint64_t v1240 = v1233;
                        do
                        {
                          if (v1235 >= 1)
                          {
                            ldiv_t v1241 = (void *)(v1236[19] + v1240);
                            int v1242 = (unsigned int *)((char *)v156[19] + v1239);
                            int v1243 = v1235;
                            do
                            {
                              *ldiv_t v1241 = *v1242;
                              ldiv_t v1241 = (void *)((char *)v1241 + v1237);
                              int v1242 = (unsigned int *)((char *)v1242 + v1238);
                              --v1243;
                            }
                            while (v1243);
                          }
                          ++v1234;
                          v1240 += v1230;
                          v1239 += v1231;
                        }
                        while (v1234 != v1229);
                      }
                      ++v1228;
                      v1233 += result;
                      v1232 += v1227;
                    }
                    while (v1228 != v1225);
                  }
                  ++v1215;
                  v1214 += v1565;
                  v1213 += v1548;
                }
                while (v1215 != v1582);
              }
              break;
            case 5:
              uint64_t v1244 = (v159 << 30) - 0x500000000;
              int v1487 = *(_DWORD *)(v158 + (v1244 >> 30));
              if (v1487 >= 1)
              {
                uint64_t v1507 = 0;
                uint64_t v1517 = 0;
                int v1497 = 0;
                int v1245 = v156[3];
                uint64_t v1246 = v1244 >> 29;
                uint64_t v1247 = v3[3];
                uint64_t v1248 = (v159 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1245 + (v1248 >> 29));
                int v1583 = *(_DWORD *)(v158 + (v1248 >> 30));
                uint64_t v1458 = (uint64_t)((v159 << 30) - 0x300000000) >> 32;
                uint64_t v1533 = (uint64_t)((v159 << 30) - 0x200000000) >> 32;
                uint64_t v1249 = (uint64_t)((v159 << 30) - 0x100000000) >> 32;
                uint64_t v1477 = 8 * *(void *)(v1247 + v1246);
                uint64_t v1566 = 8 * *(void *)(v1247 + (v1248 >> 29));
                uint64_t v1467 = 4 * *(void *)((char *)v1245 + v1246);
                uint64_t v1549 = 4 * result;
                do
                {
                  if (v1583 >= 1)
                  {
                    int v1250 = 0;
                    int v1251 = *(_DWORD *)(v158 + 4 * v1458);
                    uint64_t v1252 = 8 * *(void *)(v1247 + 8 * v1458);
                    uint64_t v1253 = 4 * *(void *)&v1245[2 * v1458];
                    uint64_t v1255 = v1507;
                    uint64_t v1254 = v1517;
                    do
                    {
                      if (v1251 >= 1)
                      {
                        int v1256 = 0;
                        int v1257 = *(_DWORD *)(v158 + 4 * v1533);
                        uint64_t v1258 = 8 * *(void *)(v1247 + 8 * v1533);
                        uint64_t v1259 = 4 * *(void *)&v1245[2 * v1533];
                        uint64_t v1260 = v1254;
                        uint64_t v1261 = v1255;
                        do
                        {
                          if (v1257 >= 1)
                          {
                            int v1262 = 0;
                            int v1263 = *(_DWORD *)(v158 + 4 * v1249);
                            uint64_t v1264 = (void *)*a2;
                            uint64_t v1265 = 8 * *(void *)(v1247 + 8 * v1249);
                            uint64_t v1266 = 4 * *(void *)&v1245[2 * v1249];
                            uint64_t v1267 = v1260;
                            uint64_t v1268 = v1261;
                            do
                            {
                              if (v1263 >= 1)
                              {
                                uint64_t v1269 = (void *)(v1264[19] + v1268);
                                uint64_t v1270 = (unsigned int *)((char *)v156[19] + v1267);
                                LODWORD(result) = v1263;
                                do
                                {
                                  *uint64_t v1269 = *v1270;
                                  uint64_t v1269 = (void *)((char *)v1269 + v1265);
                                  uint64_t v1270 = (unsigned int *)((char *)v1270 + v1266);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1262;
                              v1268 += v1258;
                              v1267 += v1259;
                            }
                            while (v1262 != v1257);
                          }
                          ++v1256;
                          v1261 += v1252;
                          v1260 += v1253;
                        }
                        while (v1256 != v1251);
                      }
                      ++v1250;
                      v1255 += v1566;
                      v1254 += v1549;
                    }
                    while (v1250 != v1583);
                  }
                  v1507 += v1477;
                  v1517 += v1467;
                  ++v1497;
                }
                while (v1497 != v1487);
              }
              break;
            default:
              LODWORD(v1129) = 1;
              uint64_t v1130 = -20;
              do
              {
                uint64_t v1129 = *(int *)(v157 + v1130) * (uint64_t)(int)v1129;
                v1130 += 4;
              }
              while (v1130);
              int v1444 = v156[6];
              if (v1444)
              {
                uint64_t v1131 = 0;
                uint64_t v1424 = *v3;
                uint64_t v1132 = (v159 << 30) - 0x500000000;
                uint64_t v1434 = (v159 >> 2) - 1;
                uint64_t v1133 = v156[3];
                uint64_t v1429 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1134 = v3[3];
                int v1486 = *(_DWORD *)(v158 + (v1132 >> 30));
                uint64_t v1420 = (uint64_t)((v159 << 30) - 0x400000000) >> 32;
                uint64_t v1531 = (uint64_t)((v159 << 30) - 0x200000000) >> 32;
                uint64_t v1135 = (uint64_t)((v159 << 30) - 0x100000000) >> 32;
                uint64_t v1476 = 8 * *(void *)(v1134 + (v1132 >> 29));
                uint64_t v1457 = (uint64_t)((v159 << 30) - 0x300000000) >> 32;
                uint64_t v1466 = 4 * *(void *)((char *)v1133 + (v1132 >> 29));
                uint64_t v1439 = v1129;
                do
                {
                  uint64_t v1136 = v1434;
                  if ((v1434 & 0x80000000) != 0)
                  {
                    uint64_t v1137 = 0;
                    uint64_t v1138 = v1429;
                  }
                  else
                  {
                    uint64_t v1137 = 0;
                    LODWORD(result) = v1131;
                    uint64_t v1138 = v1429;
                    do
                    {
                      ldiv_t v1139 = ldiv((int)result, *(int *)(v158 + 4 * v1136));
                      uint64_t result = v1139.quot;
                      v1137 += *(void *)&v1133[2 * v1136--] * v1139.rem;
                    }
                    while (v1136 != -1);
                  }
                  uint64_t v1449 = v1131;
                  uint64_t v1140 = 0;
                  if ((v1138 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1131;
                    do
                    {
                      ldiv_t v1141 = ldiv((int)result, *(int *)(v1424 + 4 * v1138));
                      uint64_t result = v1141.quot;
                      v1140 += *(void *)(v1134 + 8 * v1138--) * v1141.rem;
                    }
                    while (v1138 != -1);
                  }
                  if (v1486 >= 1)
                  {
                    int v1142 = 0;
                    int v1581 = *(_DWORD *)(v158 + 4 * v1420);
                    uint64_t v1516 = 8 * v1140;
                    uint64_t v1564 = 8 * *(void *)(v1134 + 8 * v1420);
                    uint64_t v1506 = 4 * v1137;
                    uint64_t v1547 = 4 * *(void *)&v1133[2 * v1420];
                    do
                    {
                      int v1496 = v1142;
                      if (v1581 >= 1)
                      {
                        int v1143 = 0;
                        int v1144 = *(_DWORD *)(v158 + 4 * v1457);
                        uint64_t v1145 = 8 * *(void *)(v1134 + 8 * v1457);
                        uint64_t v1146 = 4 * *(void *)&v1133[2 * v1457];
                        uint64_t v1148 = v1506;
                        uint64_t v1147 = v1516;
                        do
                        {
                          if (v1144 >= 1)
                          {
                            int v1149 = 0;
                            int v1150 = *(_DWORD *)(v158 + 4 * v1531);
                            uint64_t v1151 = 8 * *(void *)(v1134 + 8 * v1531);
                            uint64_t v1152 = 4 * *(void *)&v1133[2 * v1531];
                            uint64_t result = v1148;
                            uint64_t v1153 = v1147;
                            do
                            {
                              if (v1150 >= 1)
                              {
                                int v1154 = 0;
                                int v1155 = *(_DWORD *)(v158 + 4 * v1135);
                                int v1156 = (void *)*a2;
                                uint64_t v1157 = 8 * *(void *)(v1134 + 8 * v1135);
                                uint64_t v1158 = 4 * *(void *)&v1133[2 * v1135];
                                uint64_t v1159 = result;
                                uint64_t v1160 = v1153;
                                do
                                {
                                  if (v1155 >= 1)
                                  {
                                    int v1161 = (void *)(v1156[19] + v1160);
                                    uint64_t v1162 = (unsigned int *)((char *)v156[19] + v1159);
                                    int v1163 = v1155;
                                    do
                                    {
                                      *int v1161 = *v1162;
                                      int v1161 = (void *)((char *)v1161 + v1157);
                                      uint64_t v1162 = (unsigned int *)((char *)v1162 + v1158);
                                      --v1163;
                                    }
                                    while (v1163);
                                  }
                                  ++v1154;
                                  v1160 += v1151;
                                  v1159 += v1152;
                                }
                                while (v1154 != v1150);
                              }
                              ++v1149;
                              v1153 += v1145;
                              result += v1146;
                            }
                            while (v1149 != v1144);
                          }
                          ++v1143;
                          v1147 += v1564;
                          v1148 += v1547;
                        }
                        while (v1143 != v1581);
                      }
                      int v1142 = v1496 + 1;
                      v1516 += v1476;
                      v1506 += v1466;
                    }
                    while (v1496 + 1 != v1486);
                  }
                  v1131 += v1439;
                }
                while ((unint64_t)v1444 > v1449 + v1439);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v24 = v3[6];
          if (v24)
          {
            float v25 = (float)**(unsigned int **)(*(void *)result + 152);
            float v26 = (float *)v3[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          uint64_t v169 = *(void *)(*(void *)result + 160);
          if (v169)
          {
            unint64_t v170 = *(unsigned int **)(*(void *)result + 152);
            uint64_t v171 = (float *)v3[19];
            uint64_t v172 = 4 * v169;
            do
            {
              unsigned int v173 = *v170++;
              *v171++ = (float)v173;
              v172 -= 4;
            }
            while (v172);
          }
          break;
        case 2:
          uint64_t v174 = *(int ***)result;
          int v175 = **(int ***)result;
          uint64_t v176 = *(void *)(*(void *)result + 8) - (void)v175;
          switch(v176 >> 2)
          {
            case 1:
              uint64_t v177 = *v175;
              if ((int)v177 >= 1)
              {
                uint64_t v178 = (unsigned int *)v174[19];
                float v179 = (float *)v3[19];
                uint64_t v180 = 4 * *(void *)v174[3];
                do
                {
                  *v179++ = (float)*v178;
                  uint64_t v178 = (unsigned int *)((char *)v178 + v180);
                  --v177;
                }
                while (v177);
              }
              break;
            case 2:
              int v519 = *v175;
              if (*v175 >= 1)
              {
                int v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = v174[19];
                uint64_t v524 = v3[19];
                uint64_t v525 = v175[1];
                uint64_t v526 = v174[3];
                uint64_t v528 = *(void *)v526;
                uint64_t v527 = *((void *)v526 + 1);
                uint64_t v529 = v528 - v527 * v525;
                do
                {
                  int v530 = v525;
                  if ((int)v525 >= 1)
                  {
                    do
                    {
                      *(float *)(v524 + 4 * v521++) = (float)v523[v522];
                      v522 += v527;
                      --v530;
                    }
                    while (v530);
                  }
                  v522 += v529;
                  ++v520;
                }
                while (v520 != v519);
              }
              break;
            case 3:
              int v531 = *v175;
              if (*v175 >= 1)
              {
                int v532 = 0;
                uint64_t result = 0;
                uint64_t v533 = 0;
                uint64_t v534 = v174[19];
                uint64_t v535 = v3[19];
                uint64_t v536 = v175[1];
                uint64_t v537 = v174[3];
                uint64_t v538 = *((void *)v537 + 1);
                uint64_t v539 = *(void *)v537 - v538 * v536;
                do
                {
                  if ((int)v536 < 1)
                  {
                    uint64_t v546 = result;
                  }
                  else
                  {
                    int v540 = 0;
                    uint64_t v541 = v175[2];
                    uint64_t v542 = v174[3];
                    uint64_t v543 = v538 - *((void *)v537 + 2) * v541;
                    do
                    {
                      if ((int)v541 < 1)
                      {
                        uint64_t v546 = result;
                      }
                      else
                      {
                        uint64_t v544 = *((void *)v542 + 2);
                        int v545 = v541;
                        do
                        {
                          uint64_t v546 = result + 1;
                          *(float *)(v535 + 4 * result) = (float)v534[v533];
                          v533 += v544;
                          ++result;
                          --v545;
                        }
                        while (v545);
                      }
                      v533 += v543;
                      ++v540;
                      uint64_t result = v546;
                    }
                    while (v540 != v536);
                  }
                  v533 += v539;
                  ++v532;
                  uint64_t result = v546;
                }
                while (v532 != v531);
              }
              break;
            case 4:
              int v547 = *v175;
              if (*v175 >= 1)
              {
                int v548 = 0;
                uint64_t result = 0;
                uint64_t v549 = 0;
                uint64_t v550 = v174[19];
                uint64_t v551 = v3[19];
                uint64_t v552 = v175[1];
                int v553 = v174[3];
                uint64_t v554 = *((void *)v553 + 1);
                uint64_t v555 = *(void *)v553 - v554 * v552;
                do
                {
                  if ((int)v552 < 1)
                  {
                    uint64_t v566 = result;
                  }
                  else
                  {
                    int v556 = 0;
                    uint64_t v557 = v175[2];
                    uint64_t v558 = v174[3];
                    uint64_t v559 = v554 - *((void *)v553 + 2) * v557;
                    do
                    {
                      if ((int)v557 < 1)
                      {
                        uint64_t v566 = result;
                      }
                      else
                      {
                        int v560 = 0;
                        uint64_t v561 = v175[3];
                        uint64_t v562 = v174[3];
                        uint64_t v563 = *((void *)v558 + 2) - *((void *)v558 + 3) * v561;
                        do
                        {
                          if ((int)v561 < 1)
                          {
                            uint64_t v566 = result;
                          }
                          else
                          {
                            uint64_t v564 = *((void *)v562 + 3);
                            int v565 = v561;
                            do
                            {
                              uint64_t v566 = result + 1;
                              *(float *)(v551 + 4 * result) = (float)v550[v549];
                              v549 += v564;
                              ++result;
                              --v565;
                            }
                            while (v565);
                          }
                          v549 += v563;
                          ++v560;
                          uint64_t result = v566;
                        }
                        while (v560 != v557);
                      }
                      v549 += v559;
                      ++v556;
                      uint64_t result = v566;
                    }
                    while (v556 != v552);
                  }
                  v549 += v555;
                  ++v548;
                  uint64_t result = v566;
                }
                while (v548 != v547);
              }
              break;
            default:
              uint64_t v510 = v3[6];
              if (v510)
              {
                uint64_t v511 = 0;
                uint64_t v512 = v174[19];
                uint64_t v513 = v3[19];
                uint64_t v514 = ((unint64_t)v176 >> 2) - 1;
                uint64_t v515 = v174[3];
                do
                {
                  uint64_t v516 = 0;
                  if ((v514 & 0x80000000) == 0)
                  {
                    uint64_t v517 = v514;
                    LODWORD(result) = v511;
                    do
                    {
                      ldiv_t v518 = ldiv((int)result, v175[v517]);
                      uint64_t result = v518.quot;
                      v516 += *(void *)&v515[2 * v517--] * v518.rem;
                    }
                    while (v517 != -1);
                  }
                  *(float *)(v513 + 4 * v511++) = (float)v512[v516];
                }
                while (v511 != v510);
              }
              break;
          }
          break;
        case 3:
          uint64_t v181 = *(unsigned int ***)result;
          uint64_t v183 = **(void **)result;
          uint64_t v182 = *(void *)(*(void *)result + 8);
          unint64_t v184 = v182 - v183;
          switch((v182 - v183) >> 2)
          {
            case 1:
              uint64_t v185 = (v184 << 30) - 0x100000000;
              int v186 = *(_DWORD *)(v183 + (v185 >> 30));
              if (v186 >= 1)
              {
                uint64_t v187 = v185 >> 29;
                uint64_t v188 = *(void *)((char *)v181[3] + v187);
                uint64_t v189 = *(void *)(v3[3] + v187);
                ldiv_t v190 = (float *)v3[19];
                int v191 = v181[19];
                uint64_t v192 = 4 * v189;
                uint64_t v193 = 4 * v188;
                do
                {
                  *ldiv_t v190 = (float)*v191;
                  ldiv_t v190 = (float *)((char *)v190 + v192);
                  int v191 = (unsigned int *)((char *)v191 + v193);
                  --v186;
                }
                while (v186);
              }
              break;
            case 2:
              uint64_t v1308 = (v184 << 30) - 0x200000000;
              int v1309 = *(_DWORD *)(v183 + (v1308 >> 30));
              if (v1309 >= 1)
              {
                uint64_t v1310 = 0;
                uint64_t v1311 = 0;
                int v1312 = 0;
                uint64_t v1313 = v181[3];
                uint64_t v1314 = v1308 >> 29;
                uint64_t v1315 = *(void *)((char *)v1313 + v1314);
                uint64_t v1316 = v3[3];
                uint64_t result = *(void *)(v1316 + v1314);
                uint64_t v1317 = (v184 << 30) - 0x100000000;
                uint64_t v1318 = *(void *)((char *)v1313 + (v1317 >> 29));
                uint64_t v1319 = *(void *)(v1316 + (v1317 >> 29));
                int v1320 = *(_DWORD *)(v183 + (v1317 >> 30));
                uint64_t v1321 = 4 * result;
                uint64_t v1322 = 4 * v1319;
                uint64_t v1323 = 4 * v1315;
                uint64_t v1324 = 4 * v1318;
                do
                {
                  if (v1320 >= 1)
                  {
                    uint64_t result = v3[19] + v1311;
                    int v1325 = (unsigned int *)((char *)v181[19] + v1310);
                    int v1326 = v1320;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1325;
                      result += v1322;
                      int v1325 = (unsigned int *)((char *)v1325 + v1324);
                      --v1326;
                    }
                    while (v1326);
                  }
                  ++v1312;
                  v1311 += v1321;
                  v1310 += v1323;
                }
                while (v1312 != v1309);
              }
              break;
            case 3:
              uint64_t v1327 = (v184 << 30) - 0x300000000;
              int v1328 = *(_DWORD *)(v183 + (v1327 >> 30));
              if (v1328 >= 1)
              {
                uint64_t v1329 = 0;
                uint64_t v1330 = 0;
                int v1331 = 0;
                uint64_t v1332 = v181[3];
                uint64_t v1333 = v1327 >> 29;
                uint64_t v1334 = *(void *)((char *)v1332 + v1333);
                uint64_t v1335 = v3[3];
                uint64_t v1336 = *(void *)(v1335 + v1333);
                uint64_t v1337 = v184 << 30;
                uint64_t v1338 = (v184 << 30) - 0x200000000;
                uint64_t v1339 = *(void *)((char *)v1332 + (v1338 >> 29));
                uint64_t v1340 = *(void *)(v1335 + (v1338 >> 29));
                int v1341 = *(_DWORD *)(v183 + (v1338 >> 30));
                uint64_t v1342 = (v1337 - 0x100000000) >> 32;
                uint64_t v1343 = 4 * v1336;
                uint64_t v1344 = 4 * v1340;
                uint64_t result = 4 * v1334;
                uint64_t v1345 = 4 * v1339;
                do
                {
                  if (v1341 >= 1)
                  {
                    int v1346 = 0;
                    int v1347 = *(_DWORD *)(v183 + 4 * v1342);
                    uint64_t v1348 = (void *)*a2;
                    uint64_t v1349 = 4 * *(void *)(v1335 + 8 * v1342);
                    uint64_t v1350 = 4 * *(void *)&v1332[2 * v1342];
                    uint64_t v1351 = v1329;
                    uint64_t v1352 = v1330;
                    do
                    {
                      if (v1347 >= 1)
                      {
                        int v1353 = (float *)(v1348[19] + v1352);
                        uint64_t v1354 = (unsigned int *)((char *)v181[19] + v1351);
                        int v1355 = v1347;
                        do
                        {
                          *int v1353 = (float)*v1354;
                          int v1353 = (float *)((char *)v1353 + v1349);
                          uint64_t v1354 = (unsigned int *)((char *)v1354 + v1350);
                          --v1355;
                        }
                        while (v1355);
                      }
                      ++v1346;
                      v1352 += v1344;
                      v1351 += v1345;
                    }
                    while (v1346 != v1341);
                  }
                  ++v1331;
                  v1330 += v1343;
                  v1329 += result;
                }
                while (v1331 != v1328);
              }
              break;
            case 4:
              uint64_t v1356 = (v184 << 30) - 0x400000000;
              int v1585 = *(_DWORD *)(v183 + (v1356 >> 30));
              if (v1585 >= 1)
              {
                uint64_t v1357 = 0;
                uint64_t v1358 = 0;
                int v1359 = 0;
                uint64_t v1360 = v181[3];
                uint64_t v1361 = v1356 >> 29;
                uint64_t v1362 = v184 << 30;
                uint64_t v1363 = v3[3];
                uint64_t v1364 = (v1362 - 0x300000000) >> 29;
                uint64_t v1365 = *(void *)((char *)v1360 + v1364);
                uint64_t v1366 = v1362 - 0x200000000;
                uint64_t v1367 = v1362 - 0x100000000;
                uint64_t v1368 = *(void *)(v1363 + v1364);
                int v1369 = *(_DWORD *)(v183 + ((v1362 - 0x300000000) >> 30));
                uint64_t v1370 = v1366 >> 32;
                uint64_t v1371 = v1367 >> 32;
                uint64_t v1568 = 4 * *(void *)(v1363 + v1361);
                uint64_t result = 4 * v1368;
                uint64_t v1551 = 4 * *(void *)((char *)v1360 + v1361);
                uint64_t v1372 = 4 * v1365;
                do
                {
                  if (v1369 >= 1)
                  {
                    int v1373 = 0;
                    int v1374 = *(_DWORD *)(v183 + 4 * v1370);
                    uint64_t v1375 = 4 * *(void *)(v1363 + 8 * v1370);
                    uint64_t v1376 = 4 * *(void *)&v1360[2 * v1370];
                    uint64_t v1377 = v1357;
                    uint64_t v1378 = v1358;
                    do
                    {
                      if (v1374 >= 1)
                      {
                        int v1379 = 0;
                        int v1380 = *(_DWORD *)(v183 + 4 * v1371);
                        uint64_t v1381 = (void *)*a2;
                        uint64_t v1382 = 4 * *(void *)(v1363 + 8 * v1371);
                        uint64_t v1383 = 4 * *(void *)&v1360[2 * v1371];
                        uint64_t v1384 = v1377;
                        uint64_t v1385 = v1378;
                        do
                        {
                          if (v1380 >= 1)
                          {
                            uint64_t v1386 = (float *)(v1381[19] + v1385);
                            uint64_t v1387 = (unsigned int *)((char *)v181[19] + v1384);
                            int v1388 = v1380;
                            do
                            {
                              *uint64_t v1386 = (float)*v1387;
                              uint64_t v1386 = (float *)((char *)v1386 + v1382);
                              uint64_t v1387 = (unsigned int *)((char *)v1387 + v1383);
                              --v1388;
                            }
                            while (v1388);
                          }
                          ++v1379;
                          v1385 += v1375;
                          v1384 += v1376;
                        }
                        while (v1379 != v1374);
                      }
                      ++v1373;
                      v1378 += result;
                      v1377 += v1372;
                    }
                    while (v1373 != v1369);
                  }
                  ++v1359;
                  v1358 += v1568;
                  v1357 += v1551;
                }
                while (v1359 != v1585);
              }
              break;
            case 5:
              uint64_t v1389 = (v184 << 30) - 0x500000000;
              int v1499 = *(_DWORD *)(v183 + (v1389 >> 30));
              if (v1499 >= 1)
              {
                uint64_t v1519 = 0;
                uint64_t v1535 = 0;
                int v1509 = 0;
                uint64_t v1390 = v181[3];
                uint64_t v1391 = v1389 >> 29;
                uint64_t v1392 = v3[3];
                uint64_t v1393 = (v184 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1390 + (v1393 >> 29));
                int v1586 = *(_DWORD *)(v183 + (v1393 >> 30));
                uint64_t v1469 = (uint64_t)((v184 << 30) - 0x300000000) >> 32;
                uint64_t v1394 = (uint64_t)((v184 << 30) - 0x200000000) >> 32;
                uint64_t v1395 = (uint64_t)((v184 << 30) - 0x100000000) >> 32;
                uint64_t v1489 = 4 * *(void *)(v1392 + v1391);
                uint64_t v1569 = 4 * *(void *)(v1392 + (v1393 >> 29));
                uint64_t v1479 = 4 * *(void *)((char *)v1390 + v1391);
                uint64_t v1552 = 4 * result;
                do
                {
                  if (v1586 >= 1)
                  {
                    int v1396 = 0;
                    int v1397 = *(_DWORD *)(v183 + 4 * v1469);
                    uint64_t v1398 = 4 * *(void *)(v1392 + 8 * v1469);
                    uint64_t v1399 = 4 * *(void *)&v1390[2 * v1469];
                    uint64_t v1401 = v1519;
                    uint64_t v1400 = v1535;
                    do
                    {
                      if (v1397 >= 1)
                      {
                        int v1402 = 0;
                        int v1403 = *(_DWORD *)(v183 + 4 * v1394);
                        uint64_t v1404 = 4 * *(void *)(v1392 + 8 * v1394);
                        uint64_t v1405 = 4 * *(void *)&v1390[2 * v1394];
                        uint64_t v1406 = v1400;
                        uint64_t v1407 = v1401;
                        do
                        {
                          if (v1403 >= 1)
                          {
                            int v1408 = 0;
                            int v1409 = *(_DWORD *)(v183 + 4 * v1395);
                            uint64_t v1410 = (void *)*a2;
                            uint64_t v1411 = 4 * *(void *)(v1392 + 8 * v1395);
                            uint64_t v1412 = 4 * *(void *)&v1390[2 * v1395];
                            uint64_t v1413 = v1406;
                            uint64_t v1414 = v1407;
                            do
                            {
                              if (v1409 >= 1)
                              {
                                uint64_t v1415 = (float *)(v1410[19] + v1414);
                                uint64_t v1416 = (unsigned int *)((char *)v181[19] + v1413);
                                LODWORD(result) = v1409;
                                do
                                {
                                  *uint64_t v1415 = (float)*v1416;
                                  uint64_t v1415 = (float *)((char *)v1415 + v1411);
                                  uint64_t v1416 = (unsigned int *)((char *)v1416 + v1412);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1408;
                              v1414 += v1404;
                              v1413 += v1405;
                            }
                            while (v1408 != v1403);
                          }
                          ++v1402;
                          v1407 += v1398;
                          v1406 += v1399;
                        }
                        while (v1402 != v1397);
                      }
                      ++v1396;
                      v1401 += v1569;
                      v1400 += v1552;
                    }
                    while (v1396 != v1586);
                  }
                  v1519 += v1489;
                  v1535 += v1479;
                  ++v1509;
                }
                while (v1509 != v1499);
              }
              break;
            default:
              LODWORD(v1271) = 1;
              uint64_t v1272 = -20;
              do
              {
                uint64_t v1271 = *(int *)(v182 + v1272) * (uint64_t)(int)v1271;
                v1272 += 4;
              }
              while (v1272);
              int v1445 = v181[6];
              if (v1445)
              {
                uint64_t result = 0;
                uint64_t v1488 = *v3;
                uint64_t v1273 = (v184 << 30) - 0x500000000;
                uint64_t v1435 = (v184 >> 2) - 1;
                uint64_t v1274 = v181[3];
                uint64_t v1430 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1275 = v3[3];
                int v1498 = *(_DWORD *)(v183 + (v1273 >> 30));
                uint64_t v1425 = (uint64_t)((v184 << 30) - 0x400000000) >> 32;
                uint64_t v1276 = (uint64_t)((v184 << 30) - 0x200000000) >> 32;
                uint64_t v1277 = (uint64_t)((v184 << 30) - 0x100000000) >> 32;
                uint64_t v1478 = 4 * *(void *)(v1275 + (v1273 >> 29));
                uint64_t v1459 = (uint64_t)((v184 << 30) - 0x300000000) >> 32;
                uint64_t v1468 = 4 * *(void *)((char *)v1274 + (v1273 >> 29));
                uint64_t v1440 = v1271;
                do
                {
                  uint64_t v1278 = v1435;
                  uint64_t v1450 = result;
                  uint64_t v1279 = 0;
                  if ((v1435 & 0x80000000) != 0)
                  {
                    uint64_t v1280 = v1430;
                  }
                  else
                  {
                    uint64_t v1280 = v1430;
                    do
                    {
                      ldiv_t v1281 = ldiv((int)result, *(int *)(v183 + 4 * v1278));
                      LODWORD(result) = v1281.quot;
                      v1279 += *(void *)&v1274[2 * v1278--] * v1281.rem;
                    }
                    while (v1278 != -1);
                  }
                  uint64_t v1282 = 0;
                  if ((v1280 & 0x80000000) == 0)
                  {
                    int v1283 = v1450;
                    do
                    {
                      ldiv_t v1284 = ldiv(v1283, *(int *)(v1488 + 4 * v1280));
                      int v1283 = v1284.quot;
                      v1282 += *(void *)(v1275 + 8 * v1280--) * v1284.rem;
                    }
                    while (v1280 != -1);
                  }
                  if (v1498 >= 1)
                  {
                    int v1285 = 0;
                    int v1584 = *(_DWORD *)(v183 + 4 * v1425);
                    uint64_t v1534 = 4 * v1282;
                    uint64_t v1567 = 4 * *(void *)(v1275 + 8 * v1425);
                    uint64_t v1518 = 4 * v1279;
                    uint64_t v1550 = 4 * *(void *)&v1274[2 * v1425];
                    do
                    {
                      int v1508 = v1285;
                      if (v1584 >= 1)
                      {
                        int v1286 = 0;
                        int v1287 = *(_DWORD *)(v183 + 4 * v1459);
                        uint64_t v1288 = 4 * *(void *)(v1275 + 8 * v1459);
                        uint64_t v1289 = 4 * *(void *)&v1274[2 * v1459];
                        uint64_t v1291 = v1518;
                        uint64_t v1290 = v1534;
                        do
                        {
                          if (v1287 >= 1)
                          {
                            int v1292 = 0;
                            int v1293 = *(_DWORD *)(v183 + 4 * v1276);
                            uint64_t v1294 = 4 * *(void *)(v1275 + 8 * v1276);
                            uint64_t v1295 = 4 * *(void *)&v1274[2 * v1276];
                            uint64_t v1296 = v1291;
                            uint64_t v1297 = v1290;
                            do
                            {
                              if (v1293 >= 1)
                              {
                                int v1298 = 0;
                                int v1299 = *(_DWORD *)(v183 + 4 * v1277);
                                int v1300 = (void *)*a2;
                                uint64_t v1301 = 4 * *(void *)(v1275 + 8 * v1277);
                                uint64_t v1302 = 4 * *(void *)&v1274[2 * v1277];
                                uint64_t v1303 = v1296;
                                uint64_t v1304 = v1297;
                                do
                                {
                                  if (v1299 >= 1)
                                  {
                                    uint64_t v1305 = (float *)(v1300[19] + v1304);
                                    uint64_t v1306 = (unsigned int *)((char *)v181[19] + v1303);
                                    int v1307 = v1299;
                                    do
                                    {
                                      float *v1305 = (float)*v1306;
                                      uint64_t v1305 = (float *)((char *)v1305 + v1301);
                                      uint64_t v1306 = (unsigned int *)((char *)v1306 + v1302);
                                      --v1307;
                                    }
                                    while (v1307);
                                  }
                                  ++v1298;
                                  v1304 += v1294;
                                  v1303 += v1295;
                                }
                                while (v1298 != v1293);
                              }
                              ++v1292;
                              v1297 += v1288;
                              v1296 += v1289;
                            }
                            while (v1292 != v1287);
                          }
                          ++v1286;
                          v1290 += v1567;
                          v1291 += v1550;
                        }
                        while (v1286 != v1584);
                      }
                      int v1285 = v1508 + 1;
                      v1534 += v1478;
                      v1518 += v1468;
                    }
                    while (v1508 + 1 != v1498);
                  }
                  uint64_t result = v1450 + v1440;
                }
                while ((unint64_t)v1445 > v1450 + v1440);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<signed char>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            size_t v7 = (void *)v3[19];
            BOOL v8 = **(unsigned char **)(*(void *)v5 + 152) != 0;
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          uint64_t v30 = *(void *)(*(void *)result + 160);
          if (v30)
          {
            uint64_t v31 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v32 = (BOOL *)v3[19];
            do
            {
              int v33 = *v31++;
              *v32++ = v33 != 0;
              --v30;
            }
            while (v30);
          }
          break;
        case 2:
          int v34 = *(uint64_t **)result;
          uint64_t v35 = **(int ***)result;
          uint64_t v36 = *(void *)(*(void *)result + 8) - (void)v35;
          switch(v36 >> 2)
          {
            case 1:
              uint64_t v37 = *v35;
              if ((int)v37 >= 1)
              {
                uint64_t v38 = (unsigned char *)v34[19];
                uint64_t v39 = (BOOL *)v3[19];
                uint64_t v40 = *(void *)v34[3];
                do
                {
                  *v39++ = *v38 != 0;
                  v38 += v40;
                  --v37;
                }
                while (v37);
              }
              break;
            case 2:
              int v190 = *v35;
              if (*v35 >= 1)
              {
                int v191 = 0;
                uint64_t v192 = 0;
                uint64_t v193 = 0;
                uint64_t v194 = v34[19];
                uint64_t v195 = v3[19];
                uint64_t v196 = v35[1];
                uint64_t v197 = (uint64_t *)v34[3];
                uint64_t v199 = *v197;
                uint64_t v198 = v197[1];
                uint64_t v200 = v199 - v198 * v196;
                do
                {
                  int v201 = v196;
                  if ((int)v196 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned char *)(v194 + v193) != 0;
                      *(unsigned char *)(v195 + v192++) = result;
                      v193 += v198;
                      --v201;
                    }
                    while (v201);
                  }
                  v193 += v200;
                  ++v191;
                }
                while (v191 != v190);
              }
              break;
            case 3:
              int v202 = *v35;
              if (*v35 >= 1)
              {
                int v203 = 0;
                uint64_t result = 0;
                uint64_t v204 = 0;
                uint64_t v205 = v34[19];
                uint64_t v206 = v3[19];
                uint64_t v207 = v35[1];
                uint64_t v208 = (void *)v34[3];
                uint64_t v209 = v208[1];
                uint64_t v210 = *v208 - v209 * v207;
                do
                {
                  if ((int)v207 < 1)
                  {
                    uint64_t v217 = result;
                  }
                  else
                  {
                    int v211 = 0;
                    uint64_t v212 = v35[2];
                    uint64_t v213 = v34[3];
                    uint64_t v214 = v209 - v208[2] * v212;
                    do
                    {
                      if ((int)v212 < 1)
                      {
                        uint64_t v217 = result;
                      }
                      else
                      {
                        uint64_t v215 = *(void *)(v213 + 16);
                        int v216 = v212;
                        do
                        {
                          uint64_t v217 = result + 1;
                          *(unsigned char *)(v206 + result) = *(unsigned char *)(v205 + v204) != 0;
                          v204 += v215;
                          ++result;
                          --v216;
                        }
                        while (v216);
                      }
                      v204 += v214;
                      ++v211;
                      uint64_t result = v217;
                    }
                    while (v211 != v207);
                  }
                  v204 += v210;
                  ++v203;
                  uint64_t result = v217;
                }
                while (v203 != v202);
              }
              break;
            case 4:
              int v218 = *v35;
              if (*v35 >= 1)
              {
                int v219 = 0;
                uint64_t result = 0;
                uint64_t v220 = 0;
                uint64_t v221 = v34[19];
                uint64_t v222 = v3[19];
                uint64_t v223 = v35[1];
                int v224 = (void *)v34[3];
                uint64_t v225 = v224[1];
                uint64_t v226 = *v224 - v225 * v223;
                do
                {
                  if ((int)v223 < 1)
                  {
                    uint64_t v237 = result;
                  }
                  else
                  {
                    int v227 = 0;
                    uint64_t v228 = v35[2];
                    uint64_t v229 = v34[3];
                    uint64_t v230 = v225 - v224[2] * v228;
                    do
                    {
                      if ((int)v228 < 1)
                      {
                        uint64_t v237 = result;
                      }
                      else
                      {
                        int v231 = 0;
                        uint64_t v232 = v35[3];
                        uint64_t v233 = v34[3];
                        uint64_t v234 = *(void *)(v229 + 16) - *(void *)(v229 + 24) * v232;
                        do
                        {
                          if ((int)v232 < 1)
                          {
                            uint64_t v237 = result;
                          }
                          else
                          {
                            uint64_t v235 = *(void *)(v233 + 24);
                            int v236 = v232;
                            do
                            {
                              uint64_t v237 = result + 1;
                              *(unsigned char *)(v222 + result) = *(unsigned char *)(v221 + v220) != 0;
                              v220 += v235;
                              ++result;
                              --v236;
                            }
                            while (v236);
                          }
                          v220 += v234;
                          ++v231;
                          uint64_t result = v237;
                        }
                        while (v231 != v228);
                      }
                      v220 += v230;
                      ++v227;
                      uint64_t result = v237;
                    }
                    while (v227 != v223);
                  }
                  v220 += v226;
                  ++v219;
                  uint64_t result = v237;
                }
                while (v219 != v218);
              }
              break;
            default:
              uint64_t v181 = v3[6];
              if (v181)
              {
                uint64_t v182 = 0;
                uint64_t v183 = v34[19];
                uint64_t v184 = v3[19];
                uint64_t v185 = ((unint64_t)v36 >> 2) - 1;
                uint64_t v186 = v34[3];
                do
                {
                  uint64_t v187 = 0;
                  if ((v185 & 0x80000000) == 0)
                  {
                    uint64_t v188 = v185;
                    LODWORD(result) = v182;
                    do
                    {
                      ldiv_t v189 = ldiv((int)result, v35[v188]);
                      uint64_t result = v189.quot;
                      v187 += *(void *)(v186 + 8 * v188--) * v189.rem;
                    }
                    while (v188 != -1);
                  }
                  *(unsigned char *)(v184 + v182++) = *(unsigned char *)(v183 + v187) != 0;
                }
                while (v182 != v181);
              }
              break;
          }
          break;
        case 3:
          uint64_t v41 = *(unsigned int ***)result;
          uint64_t v43 = **(void **)result;
          uint64_t v42 = *(void *)(*(void *)result + 8);
          uint64_t result = v42 - v43;
          switch((v42 - v43) >> 2)
          {
            case 1:
              uint64_t v44 = (result << 30) - 0x100000000;
              int v45 = *(_DWORD *)(v43 + (v44 >> 30));
              if (v45 >= 1)
              {
                uint64_t v46 = v44 >> 29;
                uint64_t v47 = *(void *)((char *)v41[3] + (v44 >> 29));
                uint64_t v48 = *(void *)(v3[3] + v46);
                uint64_t v49 = (BOOL *)v3[19];
                uint64_t v50 = v41[19];
                do
                {
                  BOOL *v49 = *(unsigned char *)v50 != 0;
                  uint64_t v50 = (unsigned int *)((char *)v50 + v47);
                  v49 += v48;
                  --v45;
                }
                while (v45);
              }
              break;
            case 2:
              uint64_t v589 = (result << 30) - 0x200000000;
              int v590 = *(_DWORD *)(v43 + (v589 >> 30));
              if (v590 >= 1)
              {
                int v591 = 0;
                uint64_t v592 = 0;
                uint64_t v593 = 0;
                int v594 = v41[3];
                uint64_t v595 = v589 >> 29;
                uint64_t v596 = *(void *)((char *)v594 + (v589 >> 29));
                uint64_t v597 = v3[3];
                uint64_t v598 = *(void *)(v597 + v595);
                uint64_t v599 = (result << 30) - 0x100000000;
                uint64_t result = v599 >> 29;
                uint64_t v600 = *(void *)((char *)v594 + (v599 >> 29));
                uint64_t v601 = *(void *)(v597 + (v599 >> 29));
                int v602 = *(_DWORD *)(v43 + (v599 >> 30));
                do
                {
                  if (v602 >= 1)
                  {
                    uint64_t result = v3[19];
                    int v603 = v41[19];
                    int v604 = v602;
                    do
                    {
                      *(unsigned char *)(result + v593) = *((unsigned char *)v603 + v592) != 0;
                      result += v601;
                      int v603 = (unsigned int *)((char *)v603 + v600);
                      --v604;
                    }
                    while (v604);
                  }
                  v592 += v596;
                  v593 += v598;
                  ++v591;
                }
                while (v591 != v590);
              }
              break;
            case 3:
              uint64_t v605 = (result << 30) - 0x300000000;
              int v606 = *(_DWORD *)(v43 + (v605 >> 30));
              if (v606 >= 1)
              {
                int v607 = 0;
                uint64_t v608 = 0;
                uint64_t v609 = 0;
                uint64_t v610 = result << 30;
                uint64_t v611 = v41[3];
                uint64_t v612 = v605 >> 29;
                uint64_t v613 = *(void *)((char *)v611 + (v605 >> 29));
                uint64_t v614 = v3[3];
                uint64_t v615 = *(void *)(v614 + v612);
                uint64_t v616 = (result << 30) - 0x200000000;
                uint64_t v617 = v610 - 0x100000000;
                uint64_t v618 = *(void *)((char *)v611 + (v616 >> 29));
                uint64_t v619 = *(void *)(v614 + (v616 >> 29));
                uint64_t result = *(unsigned int *)(v43 + (v616 >> 30));
                uint64_t v620 = v617 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v621 = 0;
                    uint64_t v622 = *(void *)&v611[2 * v620];
                    uint64_t v623 = *(void *)(v614 + 8 * v620);
                    uint64_t v624 = v608;
                    int v625 = *(_DWORD *)(v43 + 4 * v620);
                    uint64_t v626 = v609;
                    uint64_t v627 = *a2;
                    do
                    {
                      if (v625 >= 1)
                      {
                        uint64_t v628 = v627[19];
                        uint64_t v629 = v41[19];
                        int v630 = v625;
                        do
                        {
                          *(unsigned char *)(v628 + v626) = *((unsigned char *)v629 + v624) != 0;
                          v628 += v623;
                          uint64_t v629 = (unsigned int *)((char *)v629 + v622);
                          --v630;
                        }
                        while (v630);
                      }
                      v624 += v618;
                      v626 += v619;
                      ++v621;
                    }
                    while (v621 != result);
                  }
                  v608 += v613;
                  v609 += v615;
                  ++v607;
                }
                while (v607 != v606);
              }
              break;
            case 4:
              uint64_t v631 = (result << 30) - 0x400000000;
              int v1520 = *(_DWORD *)(v43 + (v631 >> 30));
              if (v1520 >= 1)
              {
                int v632 = 0;
                uint64_t v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = v41[3];
                uint64_t v636 = v631 >> 29;
                uint64_t v637 = v3[3];
                uint64_t v1486 = *(void *)(v637 + v636);
                uint64_t v1503 = *(void *)((char *)v635 + v636);
                uint64_t v638 = (result << 30) - 0x300000000;
                uint64_t v639 = *(void *)((char *)v635 + (v638 >> 29));
                uint64_t v640 = *(void *)(v637 + (v638 >> 29));
                uint64_t v641 = (result << 30) - 0x200000000;
                uint64_t v642 = (result << 30) - 0x100000000;
                uint64_t result = *(unsigned int *)(v43 + (v638 >> 30));
                uint64_t v1469 = v641 >> 32;
                uint64_t v643 = v642 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    int v644 = 0;
                    uint64_t v645 = *(void *)&v635[2 * v1469];
                    uint64_t v646 = *(void *)(v637 + 8 * v1469);
                    uint64_t v647 = v633;
                    int v648 = *(_DWORD *)(v43 + 4 * v1469);
                    uint64_t v649 = v634;
                    do
                    {
                      if (v648 >= 1)
                      {
                        int v650 = 0;
                        uint64_t v651 = *(void *)&v635[2 * v643];
                        uint64_t v652 = *(void *)(v637 + 8 * v643);
                        uint64_t v653 = v647;
                        int v654 = *(_DWORD *)(v43 + 4 * v643);
                        uint64_t v655 = v649;
                        uint64_t v656 = *a2;
                        do
                        {
                          if (v654 >= 1)
                          {
                            uint64_t v657 = v656[19];
                            uint64_t v658 = v41[19];
                            int v659 = v654;
                            do
                            {
                              *(unsigned char *)(v657 + v655) = *((unsigned char *)v658 + v653) != 0;
                              v657 += v652;
                              uint64_t v658 = (unsigned int *)((char *)v658 + v651);
                              --v659;
                            }
                            while (v659);
                          }
                          v653 += v645;
                          v655 += v646;
                          ++v650;
                        }
                        while (v650 != v648);
                      }
                      v647 += v639;
                      v649 += v640;
                      ++v644;
                    }
                    while (v644 != result);
                  }
                  v633 += v1503;
                  v634 += v1486;
                  ++v632;
                }
                while (v632 != v1520);
              }
              break;
            case 5:
              uint64_t v660 = (result << 30) - 0x500000000;
              int v1430 = *(_DWORD *)(v43 + (v660 >> 30));
              if (v1430 >= 1)
              {
                int v1440 = 0;
                uint64_t v1450 = 0;
                uint64_t v1459 = 0;
                uint64_t v661 = v41[3];
                uint64_t v662 = v660 >> 29;
                uint64_t v663 = v3[3];
                uint64_t v1410 = *(void *)(v663 + v662);
                uint64_t v1420 = *(void *)((char *)v661 + v662);
                uint64_t v664 = (result << 30) - 0x400000000;
                uint64_t v1487 = *(void *)(v663 + (v664 >> 29));
                uint64_t v1504 = *(void *)((char *)v661 + (v664 >> 29));
                int v1521 = *(_DWORD *)(v43 + (v664 >> 30));
                uint64_t v1400 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1470 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v665 = ((result << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1521 >= 1)
                  {
                    int v666 = 0;
                    uint64_t v667 = *(void *)&v661[2 * v1400];
                    uint64_t v668 = *(void *)(v663 + 8 * v1400);
                    uint64_t v670 = v1450;
                    uint64_t v669 = v1459;
                    int v671 = *(_DWORD *)(v43 + 4 * v1400);
                    do
                    {
                      if (v671 >= 1)
                      {
                        int v672 = 0;
                        uint64_t v673 = *(void *)&v661[2 * v1470];
                        uint64_t v674 = *(void *)(v663 + 8 * v1470);
                        uint64_t v675 = v669;
                        int v676 = *(_DWORD *)(v43 + 4 * v1470);
                        uint64_t v677 = v670;
                        do
                        {
                          if (v676 >= 1)
                          {
                            int v678 = 0;
                            uint64_t v679 = *(void *)&v661[2 * v665];
                            uint64_t v680 = *(void *)(v663 + 8 * v665);
                            uint64_t v681 = v675;
                            uint64_t result = *(unsigned int *)(v43 + 4 * v665);
                            uint64_t v682 = v677;
                            uint64_t v683 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                uint64_t v684 = v683[19];
                                uint64_t v685 = v41[19];
                                int v686 = result;
                                do
                                {
                                  *(unsigned char *)(v684 + v682) = *((unsigned char *)v685 + v681) != 0;
                                  v684 += v680;
                                  uint64_t v685 = (unsigned int *)((char *)v685 + v679);
                                  --v686;
                                }
                                while (v686);
                              }
                              v681 += v673;
                              v682 += v674;
                              ++v678;
                            }
                            while (v678 != v676);
                          }
                          v675 += v667;
                          v677 += v668;
                          ++v672;
                        }
                        while (v672 != v671);
                      }
                      v669 += v1504;
                      v670 += v1487;
                      ++v666;
                    }
                    while (v666 != v1521);
                  }
                  v1459 += v1420;
                  v1450 += v1410;
                  ++v1440;
                }
                while (v1440 != v1430);
              }
              break;
            default:
              LODWORD(v554) = 1;
              uint64_t v555 = -20;
              do
              {
                uint64_t v554 = *(int *)(v42 + v555) * (uint64_t)(int)v554;
                v555 += 4;
              }
              while (v555);
              uint64_t v1389 = v41[6];
              if (v1389)
              {
                uint64_t v556 = 0;
                uint64_t v1369 = *v3;
                uint64_t v557 = (result << 30) - 0x500000000;
                uint64_t v1379 = ((unint64_t)result >> 2) - 1;
                uint64_t v558 = v41[3];
                uint64_t v1374 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v559 = v3[3];
                uint64_t v1409 = *(void *)(v559 + (v557 >> 29));
                uint64_t v1419 = *(void *)((char *)v558 + (v557 >> 29));
                int v1429 = *(_DWORD *)(v43 + (v557 >> 30));
                uint64_t v1364 = ((result << 30) - 0x400000000) >> 32;
                uint64_t v1399 = ((result << 30) - 0x300000000) >> 32;
                uint64_t v1468 = ((result << 30) - 0x200000000) >> 32;
                uint64_t v560 = ((result << 30) - 0x100000000) >> 32;
                uint64_t v1384 = v554;
                do
                {
                  uint64_t v561 = v1379;
                  if ((v1379 & 0x80000000) != 0)
                  {
                    uint64_t v562 = 0;
                  }
                  else
                  {
                    uint64_t v562 = 0;
                    LODWORD(result) = v556;
                    do
                    {
                      ldiv_t v563 = ldiv((int)result, *(int *)(v43 + 4 * v561));
                      uint64_t result = v563.quot;
                      v562 += *(void *)&v558[2 * v561--] * v563.rem;
                    }
                    while (v561 != -1);
                  }
                  uint64_t v564 = v1374;
                  uint64_t v1394 = v556;
                  uint64_t v565 = 0;
                  if ((v1374 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v556;
                    do
                    {
                      ldiv_t v566 = ldiv((int)result, *(int *)(v1369 + 4 * v564));
                      uint64_t result = v566.quot;
                      v565 += *(void *)(v559 + 8 * v564--) * v566.rem;
                    }
                    while (v564 != -1);
                  }
                  if (v1429 >= 1)
                  {
                    int v567 = 0;
                    uint64_t v1485 = *(void *)(v559 + 8 * v1364);
                    uint64_t v1502 = *(void *)&v558[2 * v1364];
                    int v1519 = *(_DWORD *)(v43 + 4 * v1364);
                    do
                    {
                      int v1439 = v567;
                      uint64_t v1449 = v565;
                      if (v1519 >= 1)
                      {
                        int v568 = 0;
                        uint64_t v569 = *(void *)&v558[2 * v1399];
                        uint64_t v570 = *(void *)(v559 + 8 * v1399);
                        uint64_t v571 = v565;
                        uint64_t v572 = v562;
                        int v573 = *(_DWORD *)(v43 + 4 * v1399);
                        do
                        {
                          if (v573 >= 1)
                          {
                            LODWORD(result) = 0;
                            uint64_t v574 = *(void *)&v558[2 * v1468];
                            uint64_t v575 = *(void *)(v559 + 8 * v1468);
                            uint64_t v576 = v572;
                            int v577 = *(_DWORD *)(v43 + 4 * v1468);
                            uint64_t v578 = v571;
                            do
                            {
                              if (v577 >= 1)
                              {
                                int v579 = 0;
                                uint64_t v580 = *(void *)&v558[2 * v560];
                                uint64_t v581 = *(void *)(v559 + 8 * v560);
                                uint64_t v582 = v576;
                                int v583 = *(_DWORD *)(v43 + 4 * v560);
                                uint64_t v584 = v578;
                                uint64_t v585 = *a2;
                                do
                                {
                                  if (v583 >= 1)
                                  {
                                    uint64_t v586 = v585[19];
                                    int v587 = v41[19];
                                    int v588 = v583;
                                    do
                                    {
                                      *(unsigned char *)(v586 + v584) = *((unsigned char *)v587 + v582) != 0;
                                      v586 += v581;
                                      int v587 = (unsigned int *)((char *)v587 + v580);
                                      --v588;
                                    }
                                    while (v588);
                                  }
                                  v582 += v574;
                                  v584 += v575;
                                  ++v579;
                                }
                                while (v579 != v577);
                              }
                              v576 += v569;
                              v578 += v570;
                              uint64_t result = (result + 1);
                            }
                            while (result != v573);
                          }
                          v572 += v1502;
                          v571 += v1485;
                          ++v568;
                        }
                        while (v568 != v1519);
                      }
                      v562 += v1419;
                      uint64_t v565 = v1449 + v1409;
                      int v567 = v1439 + 1;
                    }
                    while (v1439 + 1 != v1429);
                  }
                  uint64_t v556 = v1394 + v1384;
                }
                while ((unint64_t)v1389 > v1394 + v1384);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v9 = 0;
            char v10 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v11 = v3[19];
            do
              *(unsigned char *)(v11 + v9++) = v10;
            while ((*a2)[6] > v9);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          int v51 = *(int ***)result;
          uint64_t v52 = **(int ***)result;
          switch(v51[1] - *v51)
          {
            case 1:
              if (*v52 >= 1)
              {
                uint64_t v53 = 0;
                uint64_t v54 = 0;
                uint64_t v55 = v51[19];
                uint64_t v56 = v3[19];
                do
                {
                  *(unsigned char *)(v56 + v53) = *((unsigned char *)v55 + v54);
                  v54 += *(void *)v51[3];
                  ++v53;
                }
                while (**v51 > (int)v53);
              }
              break;
            case 2:
              int v247 = *v52;
              if (*v52 >= 1)
              {
                int v248 = 0;
                uint64_t v249 = 0;
                uint64_t v250 = 0;
                unint64_t v251 = v51[19];
                uint64_t v252 = v3[19];
                do
                {
                  int v253 = v52[1];
                  if (v253 < 1)
                  {
                    int v254 = v51[3];
                    uint64_t v255 = *((void *)v254 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v252 + v249 + result) = *((unsigned char *)v251 + v250);
                      int v254 = v51[3];
                      uint64_t v255 = *((void *)v254 + 1);
                      v250 += v255;
                      uint64_t v52 = *v51;
                      int v253 = (*v51)[1];
                      ++result;
                    }
                    while ((int)result < v253);
                    int v247 = *v52;
                    v249 += result;
                  }
                  uint64_t v250 = *(void *)v254 + v250 - v255 * v253;
                  ++v248;
                }
                while (v248 < v247);
              }
              break;
            case 3:
              int v256 = *v52;
              if (*v52 >= 1)
              {
                int v257 = 0;
                uint64_t v258 = 0;
                uint64_t v259 = 0;
                int v260 = v51[19];
                uint64_t v261 = v3[19];
                do
                {
                  int v262 = v52[1];
                  if (v262 < 1)
                  {
                    int v266 = v51[3];
                    uint64_t v267 = *((void *)v266 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v262; ++i)
                    {
                      int v264 = v52[2];
                      if (v264 < 1)
                      {
                        int v266 = v51[3];
                        uint64_t result = *((void *)v266 + 2);
                      }
                      else
                      {
                        uint64_t v265 = 0;
                        do
                        {
                          *(unsigned char *)(v261 + v258 + v265) = *((unsigned char *)v260 + v259);
                          int v266 = v51[3];
                          uint64_t result = *((void *)v266 + 2);
                          v259 += result;
                          uint64_t v52 = *v51;
                          int v264 = (*v51)[2];
                          ++v265;
                        }
                        while ((int)v265 < v264);
                        v258 += v265;
                      }
                      uint64_t v267 = *((void *)v266 + 1);
                      uint64_t v259 = v267 + v259 - result * v264;
                      int v262 = v52[1];
                    }
                    int v256 = *v52;
                  }
                  uint64_t v259 = *(void *)v266 + v259 - v267 * v262;
                  ++v257;
                }
                while (v257 < v256);
              }
              break;
            case 4:
              int v268 = *v52;
              if (*v52 >= 1)
              {
                int v269 = 0;
                uint64_t v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = v51[19];
                uint64_t v273 = v3[19];
                do
                {
                  int v274 = v52[1];
                  if (v274 < 1)
                  {
                    uint64_t v280 = v51[3];
                    uint64_t v282 = *((void *)v280 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v274; ++j)
                    {
                      int v276 = v52[2];
                      if (v276 < 1)
                      {
                        uint64_t v280 = v51[3];
                        uint64_t v281 = *((void *)v280 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v276; ++k)
                        {
                          int v278 = v52[3];
                          if (v278 < 1)
                          {
                            uint64_t v280 = v51[3];
                            uint64_t result = *((void *)v280 + 3);
                          }
                          else
                          {
                            uint64_t v279 = 0;
                            do
                            {
                              *(unsigned char *)(v273 + v270 + v279) = *((unsigned char *)v272 + v271);
                              uint64_t v280 = v51[3];
                              uint64_t result = *((void *)v280 + 3);
                              v271 += result;
                              uint64_t v52 = *v51;
                              int v278 = (*v51)[3];
                              ++v279;
                            }
                            while ((int)v279 < v278);
                            v270 += v279;
                          }
                          uint64_t v281 = *((void *)v280 + 2);
                          uint64_t v271 = v281 + v271 - result * v278;
                          int v276 = v52[2];
                        }
                      }
                      uint64_t v282 = *((void *)v280 + 1);
                      uint64_t v271 = v282 + v271 - v281 * v276;
                      int v274 = v52[1];
                    }
                    int v268 = *v52;
                  }
                  uint64_t v271 = *(void *)v280 + v271 - v282 * v274;
                  ++v269;
                }
                while (v269 < v268);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v238 = 0;
                uint64_t v239 = v51[19];
                uint64_t v240 = v3[19];
                do
                {
                  uint64_t v241 = *v51;
                  unint64_t v242 = (unint64_t)((char *)v51[1] - (char *)*v51) >> 2;
                  uint64_t v243 = 0;
                  uint64_t v244 = (v242 - 1);
                  if ((int)v242 - 1 >= 0)
                  {
                    uint64_t v245 = v51[3];
                    LODWORD(result) = v238;
                    do
                    {
                      ldiv_t v246 = ldiv((int)result, v241[v244]);
                      uint64_t result = v246.quot;
                      v243 += *(void *)&v245[2 * v244--] * v246.rem;
                    }
                    while (v244 != -1);
                  }
                  *(unsigned char *)(v240 + v238++) = *((unsigned char *)v239 + v243);
                }
                while (v238 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v57 = *(int ***)result;
          int v58 = (uint64_t *)(*(void *)result + 24);
          uint64_t v59 = v3 + 3;
          uint64_t v61 = **(void **)result;
          uint64_t v60 = *(void *)(*(void *)result + 8);
          uint64_t v62 = v60 - v61;
          switch((v60 - v61) >> 2)
          {
            case 1:
              uint64_t v63 = (v62 << 30) - 0x100000000;
              int v64 = *(_DWORD *)(v61 + (v63 >> 30));
              if (v64 >= 1)
              {
                uint64_t v65 = v63 >> 29;
                uint64_t v66 = *(void *)(*v58 + v65);
                uint64_t v67 = *(void *)(*v59 + v65);
                uint64_t v68 = (unsigned char *)v3[19];
                uint64_t v69 = v57[19];
                do
                {
                  unsigned char *v68 = *(unsigned char *)v69;
                  uint64_t v69 = (int *)((char *)v69 + v66);
                  v68 += v67;
                  --v64;
                }
                while (v64);
              }
              break;
            case 2:
              uint64_t v708 = (v62 << 30) - 0x200000000;
              int v709 = *(_DWORD *)(v61 + (v708 >> 30));
              if (v709 >= 1)
              {
                int v710 = 0;
                uint64_t v711 = 0;
                uint64_t v712 = 0;
                uint64_t v713 = v708 >> 29;
                uint64_t v714 = *(void *)(*v58 + (v708 >> 29));
                uint64_t v715 = *(void *)(*v59 + v713);
                do
                {
                  uint64_t v716 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v717 = *(int *)((char *)*v57 + (v716 >> 30));
                  if (v717 >= 1)
                  {
                    uint64_t v718 = v716 >> 29;
                    uint64_t v719 = *(void *)((char *)v57[3] + (v716 >> 29));
                    uint64_t v720 = *(void *)(*v59 + v718);
                    uint64_t result = (*a2)[19];
                    uint64_t v721 = *(void *)(*(void *)v5 + 152);
                    do
                    {
                      *(unsigned char *)(result + v712) = *(unsigned char *)(v721 + v711);
                      result += v720;
                      v721 += v719;
                      --v717;
                    }
                    while (v717);
                  }
                  v711 += v714;
                  v712 += v715;
                  ++v710;
                }
                while (v710 != v709);
              }
              break;
            case 3:
              uint64_t v722 = (v62 << 30) - 0x300000000;
              int v723 = *(_DWORD *)(v61 + (v722 >> 30));
              if (v723 >= 1)
              {
                int v724 = 0;
                uint64_t v725 = 0;
                uint64_t v726 = 0;
                uint64_t v727 = v722 >> 29;
                uint64_t v728 = *(void *)(*v58 + (v722 >> 29));
                uint64_t v729 = *(void *)(*v59 + v727);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v730 = *(int *)((char *)*v57 + (result >> 30));
                  if (v730 >= 1)
                  {
                    int v731 = 0;
                    uint64_t v732 = result >> 29;
                    uint64_t result = *(void *)((char *)v57[3] + (result >> 29));
                    uint64_t v733 = *(void *)(*v59 + v732);
                    uint64_t v734 = v725;
                    uint64_t v735 = v726;
                    do
                    {
                      uint64_t v736 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v737 = *(int *)((char *)*v57 + (v736 >> 30));
                      if (v737 >= 1)
                      {
                        uint64_t v738 = v736 >> 29;
                        uint64_t v739 = *(void *)((char *)v57[3] + (v736 >> 29));
                        uint64_t v740 = *(void *)(*v59 + v738);
                        uint64_t v741 = (*a2)[19];
                        uint64_t v742 = *(void *)(*(void *)v5 + 152);
                        do
                        {
                          *(unsigned char *)(v741 + v735) = *(unsigned char *)(v742 + v734);
                          v741 += v740;
                          v742 += v739;
                          --v737;
                        }
                        while (v737);
                      }
                      v734 += result;
                      v735 += v733;
                      ++v731;
                    }
                    while (v731 != v730);
                  }
                  v725 += v728;
                  v726 += v729;
                  ++v724;
                }
                while (v724 != v723);
              }
              break;
            case 4:
              uint64_t v743 = *(int ***)result;
              uint64_t v744 = (void *)(*(void *)result + 24);
              uint64_t v745 = v3 + 3;
              goto LABEL_563;
            case 5:
              uint64_t v746 = (v62 << 30) - 0x500000000;
              int v747 = *(_DWORD *)(v61 + (v746 >> 30));
              if (v747 >= 1)
              {
                uint64_t v748 = 0;
                uint64_t v749 = 0;
                uint64_t v750 = v746 >> 29;
                uint64_t v751 = *(void *)(*v58 + v750);
                uint64_t v752 = *(void *)(*v59 + v750);
                do
                {
                  v748 += v751;
                  v749 += v752;
                  --v747;
                }
                while (v747);
              }
              break;
            default:
              LODWORD(v687) = 1;
              uint64_t v688 = -20;
              do
              {
                uint64_t v687 = *(int *)(v60 + v688) * (uint64_t)(int)v687;
                v688 += 4;
              }
              while (v688);
              if (v57[6])
              {
                uint64_t result = 0;
                uint64_t v689 = *(void **)v5;
                uint64_t v1505 = v59;
                uint64_t v1471 = v687;
                do
                {
                  uint64_t v690 = *v57;
                  unint64_t v691 = (unint64_t)((char *)v57[1] - (char *)*v57) >> 2;
                  uint64_t v692 = (v691 - 1);
                  uint64_t v1522 = result;
                  uint64_t v1488 = v689;
                  uint64_t v693 = 0;
                  if ((int)v691 - 1 >= 0)
                  {
                    uint64_t v694 = *v58;
                    do
                    {
                      ldiv_t v695 = ldiv((int)result, v690[v692]);
                      LODWORD(result) = v695.quot;
                      v693 += *(void *)(v694 + 8 * v692--) * v695.rem;
                    }
                    while (v692 != -1);
                  }
                  uint64_t v696 = **a2;
                  unint64_t v697 = (unint64_t)((*a2)[1] - v696) >> 2;
                  uint64_t v698 = *v1505;
                  uint64_t v699 = 0;
                  uint64_t v700 = (v697 - 1);
                  if ((int)v697 - 1 >= 0)
                  {
                    int quot = v1522;
                    do
                    {
                      ldiv_t v702 = ldiv(quot, *(int *)(v696 + 4 * v700));
                      int quot = v702.quot;
                      v699 += *(void *)(v698 + 8 * v700--) * v702.rem;
                    }
                    while (v700 != -1);
                  }
                  uint64_t v689 = v1488;
                  uint64_t v703 = ((v689[1] - *v689) << 30) - 0x500000000;
                  int v704 = *(int *)((char *)v690 + (v703 >> 30));
                  if (v704 >= 1)
                  {
                    uint64_t v705 = v703 >> 29;
                    uint64_t v706 = *(void *)(*v58 + v705);
                    uint64_t v707 = *(void *)(v698 + v705);
                    do
                    {
                      v693 += v706;
                      v699 += v707;
                      --v704;
                    }
                    while (v704);
                    uint64_t v689 = *(void **)v5;
                  }
                  uint64_t result = v1522 + v1471;
                }
                while (v689[6] > (unint64_t)(v1522 + v1471));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = **(char **)(*(void *)result + 152);
            int v14 = (_DWORD *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          uint64_t v70 = *(void *)(*(void *)result + 160);
          if (v70)
          {
            uint64_t v71 = *(char **)(*(void *)result + 152);
            int v72 = (_DWORD *)v3[19];
            do
            {
              int v73 = *v71++;
              *v72++ = v73;
              --v70;
            }
            while (v70);
          }
          break;
        case 2:
          uint64_t v74 = *(int ***)result;
          uint64_t v75 = **(int ***)result;
          uint64_t v76 = *(void *)(*(void *)result + 8) - (void)v75;
          switch(v76 >> 2)
          {
            case 1:
              if (*v75 >= 1)
              {
                uint64_t v77 = 0;
                uint64_t v78 = v74[19];
                uint64_t v79 = v3[19];
                uint64_t v80 = *(void *)v74[3];
                do
                {
                  *(_DWORD *)(v79 + 4 * v77) = *(char *)v78;
                  uint64_t v78 = (int *)((char *)v78 + v80);
                  ++v77;
                }
                while (*v75 > (int)v77);
              }
              break;
            case 2:
              int v292 = *v75;
              if (*v75 >= 1)
              {
                int v293 = 0;
                uint64_t v294 = 0;
                uint64_t v295 = 0;
                uint64_t v296 = v74[19];
                uint64_t v297 = v3[19];
                uint64_t v298 = v74[3];
                uint64_t v299 = *(void *)v298;
                uint64_t v300 = *((void *)v298 + 1);
                int v301 = v75[1];
                do
                {
                  if (v301 >= 1)
                  {
                    uint64_t v302 = 0;
                    do
                    {
                      *(_DWORD *)(v297 + 4 * v294 + 4 * v302) = *((char *)v296 + v295);
                      v295 += v300;
                      int v301 = v75[1];
                      ++v302;
                    }
                    while ((int)v302 < v301);
                    int v292 = *v75;
                    v294 += v302;
                  }
                  uint64_t v295 = v295 + v299 - v300 * v301;
                  ++v293;
                }
                while (v293 < v292);
              }
              break;
            case 3:
              uint64_t result = *v75;
              if ((int)result >= 1)
              {
                int v303 = 0;
                uint64_t v304 = 0;
                uint64_t v305 = 0;
                int v306 = v74[19];
                uint64_t v307 = v3[19];
                uint64_t v308 = v74[3];
                uint64_t v309 = *(void *)v308;
                uint64_t v310 = *((void *)v308 + 1);
                int v311 = v75[1];
                do
                {
                  if (v311 >= 1)
                  {
                    int v312 = 0;
                    uint64_t v313 = v74[3];
                    uint64_t v314 = *((void *)v308 + 2);
                    int v315 = v75[2];
                    do
                    {
                      if (v315 >= 1)
                      {
                        uint64_t v316 = 0;
                        uint64_t v317 = *((void *)v313 + 2);
                        do
                        {
                          *(_DWORD *)(v307 + 4 * v304 + 4 * v316) = *((char *)v306 + v305);
                          v305 += v317;
                          int v315 = v75[2];
                          ++v316;
                        }
                        while ((int)v316 < v315);
                        int v311 = v75[1];
                        v304 += v316;
                      }
                      uint64_t v305 = v305 + v310 - v314 * v315;
                      ++v312;
                    }
                    while (v312 < v311);
                    uint64_t result = *v75;
                  }
                  uint64_t v305 = v305 + v309 - v310 * v311;
                  ++v303;
                }
                while (v303 < (int)result);
              }
              break;
            case 4:
              int v318 = *v75;
              if (*v75 >= 1)
              {
                int v319 = 0;
                uint64_t v320 = 0;
                uint64_t v321 = 0;
                uint64_t v322 = v74[19];
                uint64_t v323 = v3[19];
                int v324 = v74[3];
                uint64_t v325 = *(void *)v324;
                uint64_t v326 = *((void *)v324 + 1);
                int v327 = v75[1];
                do
                {
                  if (v327 >= 1)
                  {
                    int v328 = 0;
                    uint64_t v329 = v74[3];
                    uint64_t v330 = *((void *)v324 + 2);
                    int v331 = v75[2];
                    do
                    {
                      if (v331 >= 1)
                      {
                        int v332 = 0;
                        uint64_t v333 = v74[3];
                        uint64_t v334 = *((void *)v329 + 2);
                        uint64_t v335 = *((void *)v329 + 3);
                        int v336 = v75[3];
                        do
                        {
                          if (v336 >= 1)
                          {
                            uint64_t v337 = 0;
                            uint64_t v338 = *((void *)v333 + 3);
                            do
                            {
                              *(_DWORD *)(v323 + 4 * v320 + 4 * v337) = *((char *)v322 + v321);
                              v321 += v338;
                              int v336 = v75[3];
                              ++v337;
                            }
                            while ((int)v337 < v336);
                            int v331 = v75[2];
                            v320 += v337;
                          }
                          uint64_t v321 = v321 + v334 - v335 * v336;
                          ++v332;
                        }
                        while (v332 < v331);
                        int v327 = v75[1];
                      }
                      uint64_t v321 = v321 + v326 - v330 * v331;
                      ++v328;
                    }
                    while (v328 < v327);
                    int v318 = *v75;
                  }
                  uint64_t result = v327;
                  uint64_t v321 = v321 + v325 - v326 * v327;
                  ++v319;
                }
                while (v319 < v318);
              }
              break;
            default:
              uint64_t v283 = v3[6];
              if (v283)
              {
                uint64_t v284 = 0;
                uint64_t v285 = v74[19];
                uint64_t v286 = v3[19];
                uint64_t v287 = ((unint64_t)v76 >> 2) - 1;
                uint64_t v288 = v74[3];
                do
                {
                  uint64_t v289 = 0;
                  if ((v287 & 0x80000000) == 0)
                  {
                    uint64_t v290 = v287;
                    LODWORD(result) = v284;
                    do
                    {
                      ldiv_t v291 = ldiv((int)result, v75[v290]);
                      uint64_t result = v291.quot;
                      v289 += *(void *)&v288[2 * v290--] * v291.rem;
                    }
                    while (v290 != -1);
                  }
                  *(_DWORD *)(v286 + 4 * v284++) = *((char *)v285 + v289);
                }
                while (v284 != v283);
              }
              break;
          }
          break;
        case 3:
          uint64_t v81 = *(unsigned int ***)result;
          uint64_t v83 = **(void **)result;
          uint64_t v82 = *(void *)(*(void *)result + 8);
          unint64_t v84 = v82 - v83;
          switch((v82 - v83) >> 2)
          {
            case 1:
              uint64_t v85 = (v84 << 30) - 0x100000000;
              int v86 = *(_DWORD *)(v83 + (v85 >> 30));
              if (v86 >= 1)
              {
                uint64_t v87 = v85 >> 29;
                uint64_t v88 = *(void *)((char *)v81[3] + (v85 >> 29));
                uint64_t v89 = *(void *)(v3[3] + v87);
                uint64_t v90 = (_DWORD *)v3[19];
                int v91 = v81[19];
                uint64_t v92 = 4 * v89;
                do
                {
                  _DWORD *v90 = *(char *)v91;
                  int v91 = (unsigned int *)((char *)v91 + v88);
                  uint64_t v90 = (_DWORD *)((char *)v90 + v92);
                  --v86;
                }
                while (v86);
              }
              break;
            case 2:
              uint64_t v788 = (v84 << 30) - 0x200000000;
              int v789 = *(_DWORD *)(v83 + (v788 >> 30));
              if (v789 >= 1)
              {
                uint64_t v790 = 0;
                int v791 = 0;
                uint64_t v792 = 0;
                int v793 = v81[3];
                uint64_t v794 = v788 >> 29;
                uint64_t v795 = *(void *)((char *)v793 + (v788 >> 29));
                uint64_t v796 = v3[3];
                uint64_t v797 = (v84 << 30) - 0x100000000;
                uint64_t v798 = *(void *)((char *)v793 + (v797 >> 29));
                uint64_t v799 = v797 >> 32;
                uint64_t v800 = 4 * *(void *)(v796 + v794);
                uint64_t v801 = 4 * *(void *)(v796 + (v797 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v83 + 4 * v799);
                  if ((int)result >= 1)
                  {
                    uint64_t v802 = v81[19];
                    uint64_t v803 = (_DWORD *)(v3[19] + v790);
                    do
                    {
                      *uint64_t v803 = *((char *)v802 + v792);
                      uint64_t v803 = (_DWORD *)((char *)v803 + v801);
                      uint64_t v802 = (unsigned int *)((char *)v802 + v798);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v792 += v795;
                  ++v791;
                  v790 += v800;
                }
                while (v791 != v789);
              }
              break;
            case 3:
              uint64_t v804 = (v84 << 30) - 0x300000000;
              int v805 = *(_DWORD *)(v83 + (v804 >> 30));
              if (v805 >= 1)
              {
                uint64_t v806 = 0;
                int v807 = 0;
                uint64_t v808 = 0;
                uint64_t v809 = v84 << 30;
                uint64_t v810 = v81[3];
                uint64_t v811 = v804 >> 29;
                uint64_t v812 = *(void *)((char *)v810 + (v804 >> 29));
                uint64_t v813 = v3[3];
                uint64_t v814 = *(void *)(v813 + v811);
                uint64_t v815 = v809 - 0x200000000;
                uint64_t v816 = (v809 - 0x200000000) >> 29;
                uint64_t v817 = v809 - 0x100000000;
                uint64_t v818 = *(void *)((char *)v810 + v816);
                uint64_t v819 = v815 >> 32;
                uint64_t v820 = *(void *)(v813 + v816);
                uint64_t v821 = v817 >> 32;
                uint64_t result = 4 * v814;
                uint64_t v822 = 4 * v820;
                do
                {
                  int v823 = *(_DWORD *)(v83 + 4 * v819);
                  if (v823 >= 1)
                  {
                    int v824 = 0;
                    uint64_t v825 = *(void *)&v810[2 * v821];
                    uint64_t v826 = *a2;
                    uint64_t v827 = 4 * *(void *)(v813 + 8 * v821);
                    uint64_t v828 = v806;
                    uint64_t v829 = v808;
                    do
                    {
                      int v830 = *(_DWORD *)(v83 + 4 * v821);
                      if (v830 >= 1)
                      {
                        uint64_t v831 = v81[19];
                        uint64_t v832 = (_DWORD *)(v826[19] + v828);
                        do
                        {
                          *uint64_t v832 = *((char *)v831 + v829);
                          uint64_t v832 = (_DWORD *)((char *)v832 + v827);
                          uint64_t v831 = (unsigned int *)((char *)v831 + v825);
                          --v830;
                        }
                        while (v830);
                      }
                      v829 += v818;
                      ++v824;
                      v828 += v822;
                    }
                    while (v824 != v823);
                  }
                  v808 += v812;
                  ++v807;
                  v806 += result;
                }
                while (v807 != v805);
              }
              break;
            case 4:
              uint64_t v833 = (v84 << 30) - 0x400000000;
              int v1524 = *(_DWORD *)(v83 + (v833 >> 30));
              if (v1524 >= 1)
              {
                uint64_t v834 = 0;
                int v835 = 0;
                uint64_t v836 = 0;
                uint64_t v837 = v84 << 30;
                int v838 = v81[3];
                uint64_t v839 = v833 >> 29;
                uint64_t v1507 = *(void *)((char *)v838 + v839);
                uint64_t v840 = v3[3];
                uint64_t v1490 = (v837 - 0x300000000) >> 32;
                uint64_t v841 = (v837 - 0x300000000) >> 29;
                uint64_t v842 = *(void *)((char *)v838 + v841);
                uint64_t v843 = (v837 - 0x200000000) >> 32;
                uint64_t result = (v837 - 0x100000000) >> 32;
                uint64_t v1473 = 4 * *(void *)(v840 + v839);
                uint64_t v844 = 4 * *(void *)(v840 + v841);
                do
                {
                  int v845 = *(_DWORD *)(v83 + 4 * v1490);
                  if (v845 >= 1)
                  {
                    int v846 = 0;
                    uint64_t v847 = *(void *)&v838[2 * v843];
                    uint64_t v848 = 4 * *(void *)(v840 + 8 * v843);
                    uint64_t v849 = v834;
                    uint64_t v850 = v836;
                    do
                    {
                      int v851 = *(_DWORD *)(v83 + 4 * v843);
                      if (v851 >= 1)
                      {
                        int v852 = 0;
                        uint64_t v853 = *(void *)&v838[2 * result];
                        uint64_t v854 = *a2;
                        uint64_t v855 = 4 * *(void *)(v840 + 8 * result);
                        uint64_t v856 = v849;
                        uint64_t v857 = v850;
                        do
                        {
                          int v858 = *(_DWORD *)(v83 + 4 * result);
                          if (v858 >= 1)
                          {
                            int v859 = v81[19];
                            uint64_t v860 = (_DWORD *)(v854[19] + v856);
                            do
                            {
                              *uint64_t v860 = *((char *)v859 + v857);
                              uint64_t v860 = (_DWORD *)((char *)v860 + v855);
                              int v859 = (unsigned int *)((char *)v859 + v853);
                              --v858;
                            }
                            while (v858);
                          }
                          v857 += v847;
                          ++v852;
                          v856 += v848;
                        }
                        while (v852 != v851);
                      }
                      v850 += v842;
                      ++v846;
                      v849 += v844;
                    }
                    while (v846 != v845);
                  }
                  v836 += v1507;
                  ++v835;
                  v834 += v1473;
                }
                while (v835 != v1524);
              }
              break;
            case 5:
              uint64_t v861 = (v84 << 30) - 0x500000000;
              int v1432 = *(_DWORD *)(v83 + (v861 >> 30));
              if (v1432 >= 1)
              {
                uint64_t v1452 = 0;
                uint64_t v1461 = 0;
                int v1442 = 0;
                uint64_t v862 = v84 << 30;
                uint64_t v863 = v81[3];
                uint64_t v864 = v861 >> 29;
                uint64_t v1422 = *(void *)((char *)v863 + v864);
                uint64_t v865 = v3[3];
                uint64_t v866 = (v862 - 0x400000000) >> 29;
                uint64_t v1491 = *(void *)((char *)v863 + v866);
                uint64_t v1412 = (v862 - 0x400000000) >> 32;
                uint64_t v1508 = (v862 - 0x300000000) >> 32;
                uint64_t result = (v862 - 0x200000000) >> 32;
                uint64_t v867 = (v862 - 0x100000000) >> 32;
                uint64_t v1402 = 4 * *(void *)(v865 + v864);
                uint64_t v1474 = 4 * *(void *)(v865 + v866);
                do
                {
                  int v1525 = *(_DWORD *)(v83 + 4 * v1412);
                  if (v1525 >= 1)
                  {
                    int v868 = 0;
                    uint64_t v869 = *(void *)&v863[2 * v1508];
                    uint64_t v870 = 4 * *(void *)(v865 + 8 * v1508);
                    uint64_t v871 = v1452;
                    uint64_t v872 = v1461;
                    do
                    {
                      int v873 = *(_DWORD *)(v83 + 4 * v1508);
                      if (v873 >= 1)
                      {
                        int v874 = 0;
                        uint64_t v875 = *(void *)&v863[2 * result];
                        uint64_t v876 = 4 * *(void *)(v865 + 8 * result);
                        uint64_t v877 = v872;
                        uint64_t v878 = v871;
                        do
                        {
                          int v879 = *(_DWORD *)(v83 + 4 * result);
                          if (v879 >= 1)
                          {
                            int v880 = 0;
                            uint64_t v881 = *(void *)&v863[2 * v867];
                            int v882 = *a2;
                            uint64_t v883 = 4 * *(void *)(v865 + 8 * v867);
                            uint64_t v884 = v877;
                            uint64_t v885 = v878;
                            do
                            {
                              int v886 = *(_DWORD *)(v83 + 4 * v867);
                              if (v886 >= 1)
                              {
                                uint64_t v887 = v81[19];
                                uint64_t v888 = (_DWORD *)(v882[19] + v884);
                                do
                                {
                                  *uint64_t v888 = *((char *)v887 + v885);
                                  uint64_t v888 = (_DWORD *)((char *)v888 + v883);
                                  uint64_t v887 = (unsigned int *)((char *)v887 + v881);
                                  --v886;
                                }
                                while (v886);
                              }
                              v885 += v875;
                              ++v880;
                              v884 += v876;
                            }
                            while (v880 != v879);
                          }
                          v878 += v869;
                          ++v874;
                          v877 += v870;
                        }
                        while (v874 != v873);
                      }
                      v871 += v1491;
                      ++v868;
                      v872 += v1474;
                    }
                    while (v868 != v1525);
                  }
                  v1452 += v1422;
                  v1461 += v1402;
                  ++v1442;
                }
                while (v1442 != v1432);
              }
              break;
            default:
              LODWORD(v753) = 1;
              uint64_t v754 = -20;
              do
              {
                uint64_t v753 = *(int *)(v82 + v754) * (uint64_t)(int)v753;
                v754 += 4;
              }
              while (v754);
              uint64_t v1390 = v81[6];
              if (v1390)
              {
                uint64_t v755 = 0;
                uint64_t v1380 = (v84 >> 2) - 1;
                uint64_t v756 = v81[3];
                uint64_t v1365 = *v3;
                uint64_t v1375 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v757 = (v84 << 30) - 0x500000000;
                uint64_t v758 = v3[3];
                uint64_t v1370 = v757 >> 32;
                uint64_t v1411 = *(void *)((char *)v756 + (v757 >> 29));
                uint64_t v1421 = (uint64_t)((v84 << 30) - 0x400000000) >> 32;
                uint64_t v1506 = (uint64_t)((v84 << 30) - 0x300000000) >> 32;
                uint64_t v759 = (uint64_t)((v84 << 30) - 0x200000000) >> 32;
                uint64_t v760 = (uint64_t)((v84 << 30) - 0x100000000) >> 32;
                uint64_t v1401 = 4 * *(void *)(v758 + (v757 >> 29));
                uint64_t v1385 = v753;
                do
                {
                  uint64_t v761 = v1380;
                  if ((v1380 & 0x80000000) != 0)
                  {
                    uint64_t v762 = 0;
                  }
                  else
                  {
                    uint64_t v762 = 0;
                    LODWORD(result) = v755;
                    do
                    {
                      ldiv_t v763 = ldiv((int)result, *(int *)(v83 + 4 * v761));
                      uint64_t result = v763.quot;
                      v762 += *(void *)&v756[2 * v761--] * v763.rem;
                    }
                    while (v761 != -1);
                  }
                  uint64_t v1460 = v762;
                  uint64_t v764 = v1375;
                  uint64_t v1395 = v755;
                  uint64_t v765 = 0;
                  if ((v1375 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v755;
                    do
                    {
                      ldiv_t v766 = ldiv((int)result, *(int *)(v1365 + 4 * v764));
                      uint64_t result = v766.quot;
                      v765 += *(void *)(v758 + 8 * v764--) * v766.rem;
                    }
                    while (v764 != -1);
                  }
                  int v1431 = *(_DWORD *)(v83 + 4 * v1370);
                  if (v1431 >= 1)
                  {
                    int v767 = 0;
                    uint64_t v1489 = *(void *)&v756[2 * v1421];
                    uint64_t v1451 = 4 * v765;
                    uint64_t v1472 = 4 * *(void *)(v758 + 8 * v1421);
                    do
                    {
                      int v1441 = v767;
                      int v1523 = *(_DWORD *)(v83 + 4 * v1421);
                      if (v1523 >= 1)
                      {
                        int v768 = 0;
                        uint64_t v769 = *(void *)&v756[2 * v1506];
                        uint64_t v770 = 4 * *(void *)(v758 + 8 * v1506);
                        uint64_t v771 = v1451;
                        uint64_t v772 = v1460;
                        do
                        {
                          int v773 = *(_DWORD *)(v83 + 4 * v1506);
                          if (v773 >= 1)
                          {
                            int v774 = 0;
                            uint64_t v775 = *(void *)&v756[2 * v759];
                            uint64_t v776 = 4 * *(void *)(v758 + 8 * v759);
                            uint64_t v777 = v771;
                            uint64_t result = v772;
                            do
                            {
                              int v778 = *(_DWORD *)(v83 + 4 * v759);
                              if (v778 >= 1)
                              {
                                int v779 = 0;
                                uint64_t v780 = *(void *)&v756[2 * v760];
                                uint64_t v781 = *a2;
                                uint64_t v782 = 4 * *(void *)(v758 + 8 * v760);
                                uint64_t v783 = v777;
                                uint64_t v784 = result;
                                do
                                {
                                  int v785 = *(_DWORD *)(v83 + 4 * v760);
                                  if (v785 >= 1)
                                  {
                                    uint64_t v786 = v81[19];
                                    uint64_t v787 = (_DWORD *)(v781[19] + v783);
                                    do
                                    {
                                      *uint64_t v787 = *((char *)v786 + v784);
                                      uint64_t v787 = (_DWORD *)((char *)v787 + v782);
                                      uint64_t v786 = (unsigned int *)((char *)v786 + v780);
                                      --v785;
                                    }
                                    while (v785);
                                  }
                                  v784 += v775;
                                  ++v779;
                                  v783 += v776;
                                }
                                while (v779 != v778);
                              }
                              result += v769;
                              ++v774;
                              v777 += v770;
                            }
                            while (v774 != v773);
                          }
                          v772 += v1489;
                          ++v768;
                          v771 += v1472;
                        }
                        while (v768 != v1523);
                      }
                      v1460 += v1411;
                      int v767 = v1441 + 1;
                      v1451 += v1401;
                    }
                    while (v1441 + 1 != v1431);
                  }
                  uint64_t v755 = v1395 + v1385;
                }
                while ((unint64_t)v1390 > v1395 + v1385);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v15 = 0;
            char v16 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v17 = v3[19];
            do
              *(unsigned char *)(v17 + v15++) = v16;
            while ((*a2)[6] > v15);
          }
          break;
        case 1:
LABEL_37:
          size_t v27 = *(void *)(*(void *)result + 160);
          if (v27)
          {
            size_t v28 = *(const void **)(*(void *)result + 152);
            unint64_t v29 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v29, v28, v27);
          }
          break;
        case 2:
          uint64_t v93 = *(int ***)result;
          uint64_t v94 = **(int ***)result;
          switch(v93[1] - *v93)
          {
            case 1:
              if (*v94 >= 1)
              {
                uint64_t v95 = 0;
                uint64_t v96 = 0;
                uint64_t v97 = v93[19];
                uint64_t v98 = v3[19];
                do
                {
                  *(unsigned char *)(v98 + v95) = *((unsigned char *)v97 + v96);
                  v96 += *(void *)v93[3];
                  ++v95;
                }
                while (**v93 > (int)v95);
              }
              break;
            case 2:
              int v348 = *v94;
              if (*v94 >= 1)
              {
                int v349 = 0;
                uint64_t v350 = 0;
                uint64_t v351 = 0;
                unint64_t v352 = v93[19];
                uint64_t v353 = v3[19];
                do
                {
                  int v354 = v94[1];
                  if (v354 < 1)
                  {
                    int v355 = v93[3];
                    uint64_t v356 = *((void *)v355 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v353 + v350 + result) = *((unsigned char *)v352 + v351);
                      int v355 = v93[3];
                      uint64_t v356 = *((void *)v355 + 1);
                      v351 += v356;
                      uint64_t v94 = *v93;
                      int v354 = (*v93)[1];
                      ++result;
                    }
                    while ((int)result < v354);
                    int v348 = *v94;
                    v350 += result;
                  }
                  uint64_t v351 = *(void *)v355 + v351 - v356 * v354;
                  ++v349;
                }
                while (v349 < v348);
              }
              break;
            case 3:
              int v357 = *v94;
              if (*v94 >= 1)
              {
                int v358 = 0;
                uint64_t v359 = 0;
                uint64_t v360 = 0;
                int v361 = v93[19];
                uint64_t v362 = v3[19];
                do
                {
                  int v363 = v94[1];
                  if (v363 < 1)
                  {
                    int v367 = v93[3];
                    uint64_t v368 = *((void *)v367 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v363; ++m)
                    {
                      int v365 = v94[2];
                      if (v365 < 1)
                      {
                        int v367 = v93[3];
                        uint64_t result = *((void *)v367 + 2);
                      }
                      else
                      {
                        uint64_t v366 = 0;
                        do
                        {
                          *(unsigned char *)(v362 + v359 + v366) = *((unsigned char *)v361 + v360);
                          int v367 = v93[3];
                          uint64_t result = *((void *)v367 + 2);
                          v360 += result;
                          uint64_t v94 = *v93;
                          int v365 = (*v93)[2];
                          ++v366;
                        }
                        while ((int)v366 < v365);
                        v359 += v366;
                      }
                      uint64_t v368 = *((void *)v367 + 1);
                      uint64_t v360 = v368 + v360 - result * v365;
                      int v363 = v94[1];
                    }
                    int v357 = *v94;
                  }
                  uint64_t v360 = *(void *)v367 + v360 - v368 * v363;
                  ++v358;
                }
                while (v358 < v357);
              }
              break;
            case 4:
              int v369 = *v94;
              if (*v94 >= 1)
              {
                int v370 = 0;
                uint64_t v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = v93[19];
                uint64_t v374 = v3[19];
                do
                {
                  int v375 = v94[1];
                  if (v375 < 1)
                  {
                    uint64_t v381 = v93[3];
                    uint64_t v383 = *((void *)v381 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v375; ++n)
                    {
                      int v377 = v94[2];
                      if (v377 < 1)
                      {
                        uint64_t v381 = v93[3];
                        uint64_t v382 = *((void *)v381 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v377; ++ii)
                        {
                          int v379 = v94[3];
                          if (v379 < 1)
                          {
                            uint64_t v381 = v93[3];
                            uint64_t result = *((void *)v381 + 3);
                          }
                          else
                          {
                            uint64_t v380 = 0;
                            do
                            {
                              *(unsigned char *)(v374 + v371 + v380) = *((unsigned char *)v373 + v372);
                              uint64_t v381 = v93[3];
                              uint64_t result = *((void *)v381 + 3);
                              v372 += result;
                              uint64_t v94 = *v93;
                              int v379 = (*v93)[3];
                              ++v380;
                            }
                            while ((int)v380 < v379);
                            v371 += v380;
                          }
                          uint64_t v382 = *((void *)v381 + 2);
                          uint64_t v372 = v382 + v372 - result * v379;
                          int v377 = v94[2];
                        }
                      }
                      uint64_t v383 = *((void *)v381 + 1);
                      uint64_t v372 = v383 + v372 - v382 * v377;
                      int v375 = v94[1];
                    }
                    int v369 = *v94;
                  }
                  uint64_t v372 = *(void *)v381 + v372 - v383 * v375;
                  ++v370;
                }
                while (v370 < v369);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v339 = 0;
                int v340 = v93[19];
                uint64_t v341 = v3[19];
                do
                {
                  uint64_t v342 = *v93;
                  unint64_t v343 = (unint64_t)((char *)v93[1] - (char *)*v93) >> 2;
                  uint64_t v344 = 0;
                  uint64_t v345 = (v343 - 1);
                  if ((int)v343 - 1 >= 0)
                  {
                    uint64_t v346 = v93[3];
                    LODWORD(result) = v339;
                    do
                    {
                      ldiv_t v347 = ldiv((int)result, v342[v345]);
                      uint64_t result = v347.quot;
                      v344 += *(void *)&v346[2 * v345--] * v347.rem;
                    }
                    while (v345 != -1);
                  }
                  *(unsigned char *)(v341 + v339++) = *((unsigned char *)v340 + v344);
                }
                while (v339 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v99 = *(int ***)result;
          uint64_t v100 = (uint64_t *)(*(void *)result + 24);
          uint64_t v101 = v3 + 3;
          uint64_t v103 = **(void **)result;
          uint64_t v102 = *(void *)(*(void *)result + 8);
          uint64_t v104 = v102 - v103;
          switch((v102 - v103) >> 2)
          {
            case 1:
              uint64_t v105 = (v104 << 30) - 0x100000000;
              int v106 = *(_DWORD *)(v103 + (v105 >> 30));
              if (v106 >= 1)
              {
                uint64_t v107 = v105 >> 29;
                uint64_t v108 = *(void *)(*v100 + v107);
                uint64_t v109 = *(void *)(*v101 + v107);
                uint64_t v110 = (unsigned char *)v3[19];
                int v111 = v99[19];
                do
                {
                  unsigned char *v110 = *(unsigned char *)v111;
                  int v111 = (int *)((char *)v111 + v108);
                  v110 += v109;
                  --v106;
                }
                while (v106);
              }
              break;
            case 2:
              uint64_t v910 = (v104 << 30) - 0x200000000;
              int v911 = *(_DWORD *)(v103 + (v910 >> 30));
              if (v911 >= 1)
              {
                int v912 = 0;
                uint64_t v913 = 0;
                uint64_t v914 = 0;
                uint64_t v915 = v910 >> 29;
                uint64_t v916 = *(void *)(*v100 + (v910 >> 29));
                uint64_t v917 = *(void *)(*v101 + v915);
                do
                {
                  uint64_t v918 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v919 = *(int *)((char *)*v99 + (v918 >> 30));
                  if (v919 >= 1)
                  {
                    uint64_t v920 = v918 >> 29;
                    uint64_t v921 = *(void *)((char *)v99[3] + (v918 >> 29));
                    uint64_t v922 = *(void *)(*v101 + v920);
                    uint64_t result = (*a2)[19];
                    uint64_t v923 = *(void *)(*(void *)v5 + 152);
                    do
                    {
                      *(unsigned char *)(result + v914) = *(unsigned char *)(v923 + v913);
                      result += v922;
                      v923 += v921;
                      --v919;
                    }
                    while (v919);
                  }
                  v913 += v916;
                  v914 += v917;
                  ++v912;
                }
                while (v912 != v911);
              }
              break;
            case 3:
              uint64_t v924 = (v104 << 30) - 0x300000000;
              int v925 = *(_DWORD *)(v103 + (v924 >> 30));
              if (v925 >= 1)
              {
                int v926 = 0;
                uint64_t v927 = 0;
                uint64_t v928 = 0;
                uint64_t v929 = v924 >> 29;
                uint64_t v930 = *(void *)(*v100 + (v924 >> 29));
                uint64_t v931 = *(void *)(*v101 + v929);
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v932 = *(int *)((char *)*v99 + (result >> 30));
                  if (v932 >= 1)
                  {
                    int v933 = 0;
                    uint64_t v934 = result >> 29;
                    uint64_t result = *(void *)((char *)v99[3] + (result >> 29));
                    uint64_t v935 = *(void *)(*v101 + v934);
                    uint64_t v936 = v927;
                    uint64_t v937 = v928;
                    do
                    {
                      uint64_t v938 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v939 = *(int *)((char *)*v99 + (v938 >> 30));
                      if (v939 >= 1)
                      {
                        uint64_t v940 = v938 >> 29;
                        uint64_t v941 = *(void *)((char *)v99[3] + (v938 >> 29));
                        uint64_t v942 = *(void *)(*v101 + v940);
                        uint64_t v943 = (*a2)[19];
                        uint64_t v944 = *(void *)(*(void *)v5 + 152);
                        do
                        {
                          *(unsigned char *)(v943 + v937) = *(unsigned char *)(v944 + v936);
                          v943 += v942;
                          v944 += v941;
                          --v939;
                        }
                        while (v939);
                      }
                      v936 += result;
                      v937 += v935;
                      ++v933;
                    }
                    while (v933 != v932);
                  }
                  v927 += v930;
                  v928 += v931;
                  ++v926;
                }
                while (v926 != v925);
              }
              break;
            case 4:
              uint64_t v743 = *(int ***)result;
              uint64_t v744 = (void *)(*(void *)result + 24);
              uint64_t v745 = v3 + 3;
LABEL_563:
              break;
            case 5:
              uint64_t v945 = (v104 << 30) - 0x500000000;
              int v946 = *(_DWORD *)(v103 + (v945 >> 30));
              if (v946 >= 1)
              {
                uint64_t v947 = 0;
                uint64_t v948 = 0;
                uint64_t v949 = v945 >> 29;
                uint64_t v950 = *(void *)(*v100 + v949);
                uint64_t v951 = *(void *)(*v101 + v949);
                do
                {
                  v947 += v950;
                  v948 += v951;
                  --v946;
                }
                while (v946);
              }
              break;
            default:
              LODWORD(v889) = 1;
              uint64_t v890 = -20;
              do
              {
                uint64_t v889 = *(int *)(v102 + v890) * (uint64_t)(int)v889;
                v890 += 4;
              }
              while (v890);
              if (v99[6])
              {
                uint64_t result = 0;
                uint64_t v891 = *(void **)v5;
                int v1509 = v101;
                uint64_t v1475 = v889;
                do
                {
                  uint64_t v892 = *v99;
                  unint64_t v893 = (unint64_t)((char *)v99[1] - (char *)*v99) >> 2;
                  uint64_t v894 = (v893 - 1);
                  uint64_t v1526 = result;
                  int v1492 = v891;
                  uint64_t v895 = 0;
                  if ((int)v893 - 1 >= 0)
                  {
                    uint64_t v896 = *v100;
                    do
                    {
                      ldiv_t v897 = ldiv((int)result, v892[v894]);
                      LODWORD(result) = v897.quot;
                      v895 += *(void *)(v896 + 8 * v894--) * v897.rem;
                    }
                    while (v894 != -1);
                  }
                  uint64_t v898 = **a2;
                  unint64_t v899 = (unint64_t)((*a2)[1] - v898) >> 2;
                  uint64_t v900 = *v1509;
                  uint64_t v901 = 0;
                  uint64_t v902 = (v899 - 1);
                  if ((int)v899 - 1 >= 0)
                  {
                    int v903 = v1526;
                    do
                    {
                      ldiv_t v904 = ldiv(v903, *(int *)(v898 + 4 * v902));
                      int v903 = v904.quot;
                      v901 += *(void *)(v900 + 8 * v902--) * v904.rem;
                    }
                    while (v902 != -1);
                  }
                  uint64_t v891 = v1492;
                  uint64_t v905 = ((v891[1] - *v891) << 30) - 0x500000000;
                  int v906 = *(int *)((char *)v892 + (v905 >> 30));
                  if (v906 >= 1)
                  {
                    uint64_t v907 = v905 >> 29;
                    uint64_t v908 = *(void *)(*v100 + v907);
                    uint64_t v909 = *(void *)(v900 + v907);
                    do
                    {
                      v895 += v908;
                      v901 += v909;
                      --v906;
                    }
                    while (v906);
                    uint64_t v891 = *(void **)v5;
                  }
                  uint64_t result = v1526 + v1475;
                }
                while (v891[6] > (unint64_t)(v1526 + v1475));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(char **)(*(void *)result + 152);
            int v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          uint64_t v112 = *(void *)(*(void *)result + 160);
          if (v112)
          {
            uint64_t v113 = *(char **)(*(void *)result + 152);
            uint64_t v114 = (_DWORD *)v3[19];
            do
            {
              int v115 = *v113++;
              *v114++ = v115;
              --v112;
            }
            while (v112);
          }
          break;
        case 2:
          uint64_t v116 = *(int ***)result;
          int v117 = **(int ***)result;
          uint64_t v118 = *(void *)(*(void *)result + 8) - (void)v117;
          switch(v118 >> 2)
          {
            case 1:
              if (*v117 >= 1)
              {
                uint64_t v119 = 0;
                uint64_t v120 = v116[19];
                uint64_t v121 = v3[19];
                uint64_t v122 = *(void *)v116[3];
                do
                {
                  *(_DWORD *)(v121 + 4 * v119) = *(char *)v120;
                  uint64_t v120 = (int *)((char *)v120 + v122);
                  ++v119;
                }
                while (*v117 > (int)v119);
              }
              break;
            case 2:
              int v393 = *v117;
              if (*v117 >= 1)
              {
                int v394 = 0;
                uint64_t v395 = 0;
                uint64_t v396 = 0;
                uint64_t v397 = v116[19];
                uint64_t v398 = v3[19];
                uint64_t v399 = v116[3];
                uint64_t v400 = *(void *)v399;
                uint64_t v401 = *((void *)v399 + 1);
                int v402 = v117[1];
                do
                {
                  if (v402 >= 1)
                  {
                    uint64_t v403 = 0;
                    do
                    {
                      *(_DWORD *)(v398 + 4 * v395 + 4 * v403) = *((char *)v397 + v396);
                      v396 += v401;
                      int v402 = v117[1];
                      ++v403;
                    }
                    while ((int)v403 < v402);
                    int v393 = *v117;
                    v395 += v403;
                  }
                  uint64_t v396 = v396 + v400 - v401 * v402;
                  ++v394;
                }
                while (v394 < v393);
              }
              break;
            case 3:
              uint64_t result = *v117;
              if ((int)result >= 1)
              {
                int v404 = 0;
                uint64_t v405 = 0;
                uint64_t v406 = 0;
                int v407 = v116[19];
                uint64_t v408 = v3[19];
                uint64_t v409 = v116[3];
                uint64_t v410 = *(void *)v409;
                uint64_t v411 = *((void *)v409 + 1);
                int v412 = v117[1];
                do
                {
                  if (v412 >= 1)
                  {
                    int v413 = 0;
                    uint64_t v414 = v116[3];
                    uint64_t v415 = *((void *)v409 + 2);
                    int v416 = v117[2];
                    do
                    {
                      if (v416 >= 1)
                      {
                        uint64_t v417 = 0;
                        uint64_t v418 = *((void *)v414 + 2);
                        do
                        {
                          *(_DWORD *)(v408 + 4 * v405 + 4 * v417) = *((char *)v407 + v406);
                          v406 += v418;
                          int v416 = v117[2];
                          ++v417;
                        }
                        while ((int)v417 < v416);
                        int v412 = v117[1];
                        v405 += v417;
                      }
                      uint64_t v406 = v406 + v411 - v415 * v416;
                      ++v413;
                    }
                    while (v413 < v412);
                    uint64_t result = *v117;
                  }
                  uint64_t v406 = v406 + v410 - v411 * v412;
                  ++v404;
                }
                while (v404 < (int)result);
              }
              break;
            case 4:
              int v419 = *v117;
              if (*v117 >= 1)
              {
                int v420 = 0;
                uint64_t v421 = 0;
                uint64_t v422 = 0;
                uint64_t v423 = v116[19];
                uint64_t v424 = v3[19];
                int v425 = v116[3];
                uint64_t v426 = *(void *)v425;
                uint64_t v427 = *((void *)v425 + 1);
                int v428 = v117[1];
                do
                {
                  if (v428 >= 1)
                  {
                    int v429 = 0;
                    uint64_t v430 = v116[3];
                    uint64_t v431 = *((void *)v425 + 2);
                    int v432 = v117[2];
                    do
                    {
                      if (v432 >= 1)
                      {
                        int v433 = 0;
                        uint64_t v434 = v116[3];
                        uint64_t v435 = *((void *)v430 + 2);
                        uint64_t v436 = *((void *)v430 + 3);
                        int v437 = v117[3];
                        do
                        {
                          if (v437 >= 1)
                          {
                            uint64_t v438 = 0;
                            uint64_t v439 = *((void *)v434 + 3);
                            do
                            {
                              *(_DWORD *)(v424 + 4 * v421 + 4 * v438) = *((char *)v423 + v422);
                              v422 += v439;
                              int v437 = v117[3];
                              ++v438;
                            }
                            while ((int)v438 < v437);
                            int v432 = v117[2];
                            v421 += v438;
                          }
                          uint64_t v422 = v422 + v435 - v436 * v437;
                          ++v433;
                        }
                        while (v433 < v432);
                        int v428 = v117[1];
                      }
                      uint64_t v422 = v422 + v427 - v431 * v432;
                      ++v429;
                    }
                    while (v429 < v428);
                    int v419 = *v117;
                  }
                  uint64_t result = v428;
                  uint64_t v422 = v422 + v426 - v427 * v428;
                  ++v420;
                }
                while (v420 < v419);
              }
              break;
            default:
              uint64_t v384 = v3[6];
              if (v384)
              {
                uint64_t v385 = 0;
                uint64_t v386 = v116[19];
                uint64_t v387 = v3[19];
                uint64_t v388 = ((unint64_t)v118 >> 2) - 1;
                uint64_t v389 = v116[3];
                do
                {
                  uint64_t v390 = 0;
                  if ((v388 & 0x80000000) == 0)
                  {
                    uint64_t v391 = v388;
                    LODWORD(result) = v385;
                    do
                    {
                      ldiv_t v392 = ldiv((int)result, v117[v391]);
                      uint64_t result = v392.quot;
                      v390 += *(void *)&v389[2 * v391--] * v392.rem;
                    }
                    while (v391 != -1);
                  }
                  *(_DWORD *)(v387 + 4 * v385++) = *((char *)v386 + v390);
                }
                while (v385 != v384);
              }
              break;
          }
          break;
        case 3:
          uint64_t v123 = *(unsigned int ***)result;
          uint64_t v125 = **(void **)result;
          uint64_t v124 = *(void *)(*(void *)result + 8);
          unint64_t v126 = v124 - v125;
          switch((v124 - v125) >> 2)
          {
            case 1:
              uint64_t v127 = (v126 << 30) - 0x100000000;
              int v128 = *(_DWORD *)(v125 + (v127 >> 30));
              if (v128 >= 1)
              {
                uint64_t v129 = v127 >> 29;
                uint64_t v130 = *(void *)((char *)v123[3] + (v127 >> 29));
                uint64_t v131 = *(void *)(v3[3] + v129);
                uint64_t v132 = (_DWORD *)v3[19];
                uint64_t v133 = v123[19];
                uint64_t v134 = 4 * v131;
                do
                {
                  _DWORD *v132 = *(char *)v133;
                  uint64_t v133 = (unsigned int *)((char *)v133 + v130);
                  uint64_t v132 = (_DWORD *)((char *)v132 + v134);
                  --v128;
                }
                while (v128);
              }
              break;
            case 2:
              uint64_t v987 = (v126 << 30) - 0x200000000;
              int v988 = *(_DWORD *)(v125 + (v987 >> 30));
              if (v988 >= 1)
              {
                uint64_t v989 = 0;
                int v990 = 0;
                uint64_t v991 = 0;
                uint64_t v992 = v123[3];
                uint64_t v993 = v987 >> 29;
                uint64_t v994 = *(void *)((char *)v992 + (v987 >> 29));
                uint64_t v995 = v3[3];
                uint64_t v996 = (v126 << 30) - 0x100000000;
                uint64_t v997 = *(void *)((char *)v992 + (v996 >> 29));
                uint64_t v998 = v996 >> 32;
                uint64_t v999 = 4 * *(void *)(v995 + v993);
                uint64_t v1000 = 4 * *(void *)(v995 + (v996 >> 29));
                do
                {
                  uint64_t result = *(unsigned int *)(v125 + 4 * v998);
                  if ((int)result >= 1)
                  {
                    ldiv_t v1001 = v123[19];
                    int v1002 = (_DWORD *)(v3[19] + v989);
                    do
                    {
                      *int v1002 = *((char *)v1001 + v991);
                      int v1002 = (_DWORD *)((char *)v1002 + v1000);
                      ldiv_t v1001 = (unsigned int *)((char *)v1001 + v997);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v991 += v994;
                  ++v990;
                  v989 += v999;
                }
                while (v990 != v988);
              }
              break;
            case 3:
              uint64_t v1003 = (v126 << 30) - 0x300000000;
              int v1004 = *(_DWORD *)(v125 + (v1003 >> 30));
              if (v1004 >= 1)
              {
                uint64_t v1005 = 0;
                int v1006 = 0;
                uint64_t v1007 = 0;
                uint64_t v1008 = v126 << 30;
                int v1009 = v123[3];
                uint64_t v1010 = v1003 >> 29;
                uint64_t v1011 = *(void *)((char *)v1009 + (v1003 >> 29));
                uint64_t v1012 = v3[3];
                uint64_t v1013 = *(void *)(v1012 + v1010);
                uint64_t v1014 = v1008 - 0x200000000;
                uint64_t v1015 = (v1008 - 0x200000000) >> 29;
                uint64_t v1016 = v1008 - 0x100000000;
                uint64_t v1017 = *(void *)((char *)v1009 + v1015);
                uint64_t v1018 = v1014 >> 32;
                uint64_t v1019 = *(void *)(v1012 + v1015);
                uint64_t v1020 = v1016 >> 32;
                uint64_t result = 4 * v1013;
                uint64_t v1021 = 4 * v1019;
                do
                {
                  int v1022 = *(_DWORD *)(v125 + 4 * v1018);
                  if (v1022 >= 1)
                  {
                    int v1023 = 0;
                    uint64_t v1024 = *(void *)&v1009[2 * v1020];
                    int v1025 = *a2;
                    uint64_t v1026 = 4 * *(void *)(v1012 + 8 * v1020);
                    uint64_t v1027 = v1005;
                    uint64_t v1028 = v1007;
                    do
                    {
                      int v1029 = *(_DWORD *)(v125 + 4 * v1020);
                      if (v1029 >= 1)
                      {
                        uint64_t v1030 = v123[19];
                        uint64_t v1031 = (_DWORD *)(v1025[19] + v1027);
                        do
                        {
                          *uint64_t v1031 = *((char *)v1030 + v1028);
                          uint64_t v1031 = (_DWORD *)((char *)v1031 + v1026);
                          uint64_t v1030 = (unsigned int *)((char *)v1030 + v1024);
                          --v1029;
                        }
                        while (v1029);
                      }
                      v1028 += v1017;
                      ++v1023;
                      v1027 += v1021;
                    }
                    while (v1023 != v1022);
                  }
                  v1007 += v1011;
                  ++v1006;
                  v1005 += result;
                }
                while (v1006 != v1004);
              }
              break;
            case 4:
              uint64_t v1032 = (v126 << 30) - 0x400000000;
              int v1528 = *(_DWORD *)(v125 + (v1032 >> 30));
              if (v1528 >= 1)
              {
                uint64_t v1033 = 0;
                int v1034 = 0;
                uint64_t v1035 = 0;
                uint64_t v1036 = v126 << 30;
                uint64_t v1037 = v123[3];
                uint64_t v1038 = v1032 >> 29;
                uint64_t v1511 = *(void *)((char *)v1037 + v1038);
                uint64_t v1039 = v3[3];
                uint64_t v1494 = (v1036 - 0x300000000) >> 32;
                uint64_t v1040 = (v1036 - 0x300000000) >> 29;
                uint64_t v1041 = *(void *)((char *)v1037 + v1040);
                uint64_t v1042 = (v1036 - 0x200000000) >> 32;
                uint64_t result = (v1036 - 0x100000000) >> 32;
                uint64_t v1477 = 4 * *(void *)(v1039 + v1038);
                uint64_t v1043 = 4 * *(void *)(v1039 + v1040);
                do
                {
                  int v1044 = *(_DWORD *)(v125 + 4 * v1494);
                  if (v1044 >= 1)
                  {
                    int v1045 = 0;
                    uint64_t v1046 = *(void *)&v1037[2 * v1042];
                    uint64_t v1047 = 4 * *(void *)(v1039 + 8 * v1042);
                    uint64_t v1048 = v1033;
                    uint64_t v1049 = v1035;
                    do
                    {
                      int v1050 = *(_DWORD *)(v125 + 4 * v1042);
                      if (v1050 >= 1)
                      {
                        int v1051 = 0;
                        uint64_t v1052 = *(void *)&v1037[2 * result];
                        uint64_t v1053 = *a2;
                        uint64_t v1054 = 4 * *(void *)(v1039 + 8 * result);
                        uint64_t v1055 = v1048;
                        uint64_t v1056 = v1049;
                        do
                        {
                          int v1057 = *(_DWORD *)(v125 + 4 * result);
                          if (v1057 >= 1)
                          {
                            uint64_t v1058 = v123[19];
                            uint64_t v1059 = (_DWORD *)(v1053[19] + v1055);
                            do
                            {
                              *uint64_t v1059 = *((char *)v1058 + v1056);
                              uint64_t v1059 = (_DWORD *)((char *)v1059 + v1054);
                              uint64_t v1058 = (unsigned int *)((char *)v1058 + v1052);
                              --v1057;
                            }
                            while (v1057);
                          }
                          v1056 += v1046;
                          ++v1051;
                          v1055 += v1047;
                        }
                        while (v1051 != v1050);
                      }
                      v1049 += v1041;
                      ++v1045;
                      v1048 += v1043;
                    }
                    while (v1045 != v1044);
                  }
                  v1035 += v1511;
                  ++v1034;
                  v1033 += v1477;
                }
                while (v1034 != v1528);
              }
              break;
            case 5:
              uint64_t v1060 = (v126 << 30) - 0x500000000;
              int v1434 = *(_DWORD *)(v125 + (v1060 >> 30));
              if (v1434 >= 1)
              {
                uint64_t v1454 = 0;
                uint64_t v1463 = 0;
                int v1444 = 0;
                uint64_t v1061 = v126 << 30;
                int v1062 = v123[3];
                uint64_t v1063 = v1060 >> 29;
                uint64_t v1424 = *(void *)((char *)v1062 + v1063);
                uint64_t v1064 = v3[3];
                uint64_t v1065 = (v1061 - 0x400000000) >> 29;
                uint64_t v1495 = *(void *)((char *)v1062 + v1065);
                uint64_t v1414 = (v1061 - 0x400000000) >> 32;
                uint64_t v1512 = (v1061 - 0x300000000) >> 32;
                uint64_t result = (v1061 - 0x200000000) >> 32;
                uint64_t v1066 = (v1061 - 0x100000000) >> 32;
                uint64_t v1404 = 4 * *(void *)(v1064 + v1063);
                uint64_t v1478 = 4 * *(void *)(v1064 + v1065);
                do
                {
                  int v1529 = *(_DWORD *)(v125 + 4 * v1414);
                  if (v1529 >= 1)
                  {
                    int v1067 = 0;
                    uint64_t v1068 = *(void *)&v1062[2 * v1512];
                    uint64_t v1069 = 4 * *(void *)(v1064 + 8 * v1512);
                    uint64_t v1070 = v1454;
                    uint64_t v1071 = v1463;
                    do
                    {
                      int v1072 = *(_DWORD *)(v125 + 4 * v1512);
                      if (v1072 >= 1)
                      {
                        int v1073 = 0;
                        uint64_t v1074 = *(void *)&v1062[2 * result];
                        uint64_t v1075 = 4 * *(void *)(v1064 + 8 * result);
                        uint64_t v1076 = v1071;
                        uint64_t v1077 = v1070;
                        do
                        {
                          int v1078 = *(_DWORD *)(v125 + 4 * result);
                          if (v1078 >= 1)
                          {
                            int v1079 = 0;
                            uint64_t v1080 = *(void *)&v1062[2 * v1066];
                            uint64_t v1081 = *a2;
                            uint64_t v1082 = 4 * *(void *)(v1064 + 8 * v1066);
                            uint64_t v1083 = v1076;
                            uint64_t v1084 = v1077;
                            do
                            {
                              int v1085 = *(_DWORD *)(v125 + 4 * v1066);
                              if (v1085 >= 1)
                              {
                                int v1086 = v123[19];
                                uint64_t v1087 = (_DWORD *)(v1081[19] + v1083);
                                do
                                {
                                  *uint64_t v1087 = *((char *)v1086 + v1084);
                                  uint64_t v1087 = (_DWORD *)((char *)v1087 + v1082);
                                  int v1086 = (unsigned int *)((char *)v1086 + v1080);
                                  --v1085;
                                }
                                while (v1085);
                              }
                              v1084 += v1074;
                              ++v1079;
                              v1083 += v1075;
                            }
                            while (v1079 != v1078);
                          }
                          v1077 += v1068;
                          ++v1073;
                          v1076 += v1069;
                        }
                        while (v1073 != v1072);
                      }
                      v1070 += v1495;
                      ++v1067;
                      v1071 += v1478;
                    }
                    while (v1067 != v1529);
                  }
                  v1454 += v1424;
                  v1463 += v1404;
                  ++v1444;
                }
                while (v1444 != v1434);
              }
              break;
            default:
              LODWORD(v952) = 1;
              uint64_t v953 = -20;
              do
              {
                uint64_t v952 = *(int *)(v124 + v953) * (uint64_t)(int)v952;
                v953 += 4;
              }
              while (v953);
              uint64_t v1391 = v123[6];
              if (v1391)
              {
                uint64_t v954 = 0;
                uint64_t v1381 = (v126 >> 2) - 1;
                uint64_t v955 = v123[3];
                uint64_t v1366 = *v3;
                uint64_t v1376 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v956 = (v126 << 30) - 0x500000000;
                uint64_t v957 = v3[3];
                uint64_t v1371 = v956 >> 32;
                uint64_t v1413 = *(void *)((char *)v955 + (v956 >> 29));
                uint64_t v1423 = (uint64_t)((v126 << 30) - 0x400000000) >> 32;
                uint64_t v1510 = (uint64_t)((v126 << 30) - 0x300000000) >> 32;
                uint64_t v958 = (uint64_t)((v126 << 30) - 0x200000000) >> 32;
                uint64_t v959 = (uint64_t)((v126 << 30) - 0x100000000) >> 32;
                uint64_t v1403 = 4 * *(void *)(v957 + (v956 >> 29));
                uint64_t v1386 = v952;
                do
                {
                  uint64_t v960 = v1381;
                  if ((v1381 & 0x80000000) != 0)
                  {
                    uint64_t v961 = 0;
                  }
                  else
                  {
                    uint64_t v961 = 0;
                    LODWORD(result) = v954;
                    do
                    {
                      ldiv_t v962 = ldiv((int)result, *(int *)(v125 + 4 * v960));
                      uint64_t result = v962.quot;
                      v961 += *(void *)&v955[2 * v960--] * v962.rem;
                    }
                    while (v960 != -1);
                  }
                  uint64_t v1462 = v961;
                  uint64_t v963 = v1376;
                  uint64_t v1396 = v954;
                  uint64_t v964 = 0;
                  if ((v1376 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v954;
                    do
                    {
                      ldiv_t v965 = ldiv((int)result, *(int *)(v1366 + 4 * v963));
                      uint64_t result = v965.quot;
                      v964 += *(void *)(v957 + 8 * v963--) * v965.rem;
                    }
                    while (v963 != -1);
                  }
                  int v1433 = *(_DWORD *)(v125 + 4 * v1371);
                  if (v1433 >= 1)
                  {
                    int v966 = 0;
                    uint64_t v1493 = *(void *)&v955[2 * v1423];
                    uint64_t v1453 = 4 * v964;
                    uint64_t v1476 = 4 * *(void *)(v957 + 8 * v1423);
                    do
                    {
                      int v1443 = v966;
                      int v1527 = *(_DWORD *)(v125 + 4 * v1423);
                      if (v1527 >= 1)
                      {
                        int v967 = 0;
                        uint64_t v968 = *(void *)&v955[2 * v1510];
                        uint64_t v969 = 4 * *(void *)(v957 + 8 * v1510);
                        uint64_t v970 = v1453;
                        uint64_t v971 = v1462;
                        do
                        {
                          int v972 = *(_DWORD *)(v125 + 4 * v1510);
                          if (v972 >= 1)
                          {
                            int v973 = 0;
                            uint64_t v974 = *(void *)&v955[2 * v958];
                            uint64_t v975 = 4 * *(void *)(v957 + 8 * v958);
                            uint64_t v976 = v970;
                            uint64_t result = v971;
                            do
                            {
                              int v977 = *(_DWORD *)(v125 + 4 * v958);
                              if (v977 >= 1)
                              {
                                int v978 = 0;
                                uint64_t v979 = *(void *)&v955[2 * v959];
                                uint64_t v980 = *a2;
                                uint64_t v981 = 4 * *(void *)(v957 + 8 * v959);
                                uint64_t v982 = v976;
                                uint64_t v983 = result;
                                do
                                {
                                  int v984 = *(_DWORD *)(v125 + 4 * v959);
                                  if (v984 >= 1)
                                  {
                                    uint64_t v985 = v123[19];
                                    uint64_t v986 = (_DWORD *)(v980[19] + v982);
                                    do
                                    {
                                      *uint64_t v986 = *((char *)v985 + v983);
                                      uint64_t v986 = (_DWORD *)((char *)v986 + v981);
                                      uint64_t v985 = (unsigned int *)((char *)v985 + v979);
                                      --v984;
                                    }
                                    while (v984);
                                  }
                                  v983 += v974;
                                  ++v978;
                                  v982 += v975;
                                }
                                while (v978 != v977);
                              }
                              result += v968;
                              ++v973;
                              v976 += v969;
                            }
                            while (v973 != v972);
                          }
                          v971 += v1493;
                          ++v967;
                          v970 += v1476;
                        }
                        while (v967 != v1527);
                      }
                      v1462 += v1413;
                      int v966 = v1443 + 1;
                      v1453 += v1403;
                    }
                    while (v1443 + 1 != v1433);
                  }
                  uint64_t v954 = v1396 + v1386;
                }
                while ((unint64_t)v1391 > v1396 + v1386);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v3[6];
          if (v21)
          {
            uint64_t v22 = **(char **)(*(void *)result + 152);
            uint64_t v23 = (void *)v3[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v135 = *(void *)(*(void *)result + 160);
          if (v135)
          {
            int v136 = *(char **)(*(void *)result + 152);
            uint64_t v137 = (void *)v3[19];
            do
            {
              uint64_t v138 = *v136++;
              *v137++ = v138;
              --v135;
            }
            while (v135);
          }
          break;
        case 2:
          uint64_t v139 = *(int ***)result;
          v140 = **(int ***)result;
          uint64_t v141 = *(void *)(*(void *)result + 8) - (void)v140;
          switch(v141 >> 2)
          {
            case 1:
              uint64_t v142 = *v140;
              if ((int)v142 >= 1)
              {
                uint64_t v143 = v139[19];
                uint64_t v144 = (void *)v3[19];
                uint64_t v145 = *(void *)v139[3];
                do
                {
                  *v144++ = *(char *)v143;
                  uint64_t v143 = (int *)((char *)v143 + v145);
                  --v142;
                }
                while (v142);
              }
              break;
            case 2:
              int v449 = *v140;
              if (*v140 >= 1)
              {
                int v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = v139[19];
                uint64_t v454 = v3[19];
                uint64_t v455 = v140[1];
                uint64_t v456 = v139[3];
                uint64_t v458 = *(void *)v456;
                uint64_t v457 = *((void *)v456 + 1);
                uint64_t v459 = v458 - v457 * v455;
                do
                {
                  int v460 = v455;
                  if ((int)v455 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((char *)v453 + v452);
                      *(void *)(v454 + 8 * v451++) = result;
                      v452 += v457;
                      --v460;
                    }
                    while (v460);
                  }
                  v452 += v459;
                  ++v450;
                }
                while (v450 != v449);
              }
              break;
            case 3:
              int v461 = *v140;
              if (*v140 >= 1)
              {
                int v462 = 0;
                uint64_t result = 0;
                uint64_t v463 = 0;
                uint64_t v464 = v139[19];
                uint64_t v465 = v3[19];
                uint64_t v466 = v140[1];
                uint64_t v467 = v139[3];
                uint64_t v468 = *((void *)v467 + 1);
                uint64_t v469 = *(void *)v467 - v468 * v466;
                do
                {
                  if ((int)v466 < 1)
                  {
                    uint64_t v476 = result;
                  }
                  else
                  {
                    int v470 = 0;
                    uint64_t v471 = v140[2];
                    uint64_t v472 = v139[3];
                    uint64_t v473 = v468 - *((void *)v467 + 2) * v471;
                    do
                    {
                      if ((int)v471 < 1)
                      {
                        uint64_t v476 = result;
                      }
                      else
                      {
                        uint64_t v474 = *((void *)v472 + 2);
                        int v475 = v471;
                        do
                        {
                          uint64_t v476 = result + 1;
                          *(void *)(v465 + 8 * result) = *((char *)v464 + v463);
                          v463 += v474;
                          ++result;
                          --v475;
                        }
                        while (v475);
                      }
                      v463 += v473;
                      ++v470;
                      uint64_t result = v476;
                    }
                    while (v470 != v466);
                  }
                  v463 += v469;
                  ++v462;
                  uint64_t result = v476;
                }
                while (v462 != v461);
              }
              break;
            case 4:
              int v477 = *v140;
              if (*v140 >= 1)
              {
                int v478 = 0;
                uint64_t result = 0;
                uint64_t v479 = 0;
                uint64_t v480 = v139[19];
                uint64_t v481 = v3[19];
                uint64_t v482 = v140[1];
                int v483 = v139[3];
                uint64_t v484 = *((void *)v483 + 1);
                uint64_t v485 = *(void *)v483 - v484 * v482;
                do
                {
                  if ((int)v482 < 1)
                  {
                    uint64_t v496 = result;
                  }
                  else
                  {
                    int v486 = 0;
                    uint64_t v487 = v140[2];
                    int v488 = v139[3];
                    uint64_t v489 = v484 - *((void *)v483 + 2) * v487;
                    do
                    {
                      if ((int)v487 < 1)
                      {
                        uint64_t v496 = result;
                      }
                      else
                      {
                        int v490 = 0;
                        uint64_t v491 = v140[3];
                        uint64_t v492 = v139[3];
                        uint64_t v493 = *((void *)v488 + 2) - *((void *)v488 + 3) * v491;
                        do
                        {
                          if ((int)v491 < 1)
                          {
                            uint64_t v496 = result;
                          }
                          else
                          {
                            uint64_t v494 = *((void *)v492 + 3);
                            int v495 = v491;
                            do
                            {
                              uint64_t v496 = result + 1;
                              *(void *)(v481 + 8 * result) = *((char *)v480 + v479);
                              v479 += v494;
                              ++result;
                              --v495;
                            }
                            while (v495);
                          }
                          v479 += v493;
                          ++v490;
                          uint64_t result = v496;
                        }
                        while (v490 != v487);
                      }
                      v479 += v489;
                      ++v486;
                      uint64_t result = v496;
                    }
                    while (v486 != v482);
                  }
                  v479 += v485;
                  ++v478;
                  uint64_t result = v496;
                }
                while (v478 != v477);
              }
              break;
            default:
              uint64_t v440 = v3[6];
              if (v440)
              {
                uint64_t v441 = 0;
                int v442 = v139[19];
                uint64_t v443 = v3[19];
                uint64_t v444 = ((unint64_t)v141 >> 2) - 1;
                int v445 = v139[3];
                do
                {
                  uint64_t v446 = 0;
                  if ((v444 & 0x80000000) == 0)
                  {
                    uint64_t v447 = v444;
                    LODWORD(result) = v441;
                    do
                    {
                      ldiv_t v448 = ldiv((int)result, v140[v447]);
                      uint64_t result = v448.quot;
                      v446 += *(void *)&v445[2 * v447--] * v448.rem;
                    }
                    while (v447 != -1);
                  }
                  *(void *)(v443 + 8 * v441++) = *((char *)v442 + v446);
                }
                while (v441 != v440);
              }
              break;
          }
          break;
        case 3:
          uint64_t v146 = *(unsigned int ***)result;
          uint64_t v148 = **(void **)result;
          uint64_t v147 = *(void *)(*(void *)result + 8);
          unint64_t v149 = v147 - v148;
          switch((v147 - v148) >> 2)
          {
            case 1:
              uint64_t v150 = (v149 << 30) - 0x100000000;
              int v151 = *(_DWORD *)(v148 + (v150 >> 30));
              if (v151 >= 1)
              {
                uint64_t v152 = v150 >> 29;
                uint64_t v153 = *(void *)((char *)v146[3] + (v150 >> 29));
                uint64_t v154 = *(void *)(v3[3] + v152);
                uint64_t v155 = (void *)v3[19];
                v156 = v146[19];
                uint64_t v157 = 8 * v154;
                do
                {
                  void *v155 = *(char *)v156;
                  v156 = (unsigned int *)((char *)v156 + v153);
                  uint64_t v155 = (void *)((char *)v155 + v157);
                  --v151;
                }
                while (v151);
              }
              break;
            case 2:
              uint64_t v1122 = (v149 << 30) - 0x200000000;
              int v1123 = *(_DWORD *)(v148 + (v1122 >> 30));
              if (v1123 >= 1)
              {
                uint64_t v1124 = 0;
                int v1125 = 0;
                uint64_t v1126 = 0;
                uint64_t v1127 = v149 << 30;
                uint64_t v1128 = v146[3];
                uint64_t v1129 = v1122 >> 29;
                uint64_t v1130 = *(void *)((char *)v1128 + (v1122 >> 29));
                uint64_t v1131 = v3[3];
                uint64_t result = v1127 - 0x100000000;
                uint64_t v1132 = (v1127 - 0x100000000) >> 29;
                uint64_t v1133 = *(void *)((char *)v1128 + v1132);
                int v1134 = *(_DWORD *)(v148 + (result >> 30));
                uint64_t v1135 = 8 * *(void *)(v1131 + v1129);
                uint64_t v1136 = 8 * *(void *)(v1131 + v1132);
                do
                {
                  if (v1134 >= 1)
                  {
                    uint64_t result = (uint64_t)v146[19];
                    uint64_t v1137 = (void *)(v3[19] + v1124);
                    int v1138 = v1134;
                    do
                    {
                      *uint64_t v1137 = *(char *)(result + v1126);
                      uint64_t v1137 = (void *)((char *)v1137 + v1136);
                      result += v1133;
                      --v1138;
                    }
                    while (v1138);
                  }
                  v1126 += v1130;
                  ++v1125;
                  v1124 += v1135;
                }
                while (v1125 != v1123);
              }
              break;
            case 3:
              uint64_t v1139 = (v149 << 30) - 0x300000000;
              int v1140 = *(_DWORD *)(v148 + (v1139 >> 30));
              if (v1140 >= 1)
              {
                uint64_t v1141 = 0;
                int v1142 = 0;
                uint64_t v1143 = 0;
                uint64_t v1144 = v149 << 30;
                uint64_t v1145 = v146[3];
                uint64_t v1146 = v1139 >> 29;
                uint64_t v1147 = *(void *)((char *)v1145 + (v1139 >> 29));
                uint64_t v1148 = v3[3];
                uint64_t v1149 = *(void *)(v1148 + v1146);
                uint64_t v1150 = v1144 - 0x200000000;
                uint64_t v1151 = (v1144 - 0x200000000) >> 29;
                uint64_t v1152 = v1144 - 0x100000000;
                uint64_t v1153 = *(void *)((char *)v1145 + v1151);
                uint64_t v1154 = *(void *)(v1148 + v1151);
                int v1155 = *(_DWORD *)(v148 + (v1150 >> 30));
                uint64_t v1156 = v1152 >> 32;
                uint64_t result = 8 * v1149;
                uint64_t v1157 = 8 * v1154;
                do
                {
                  if (v1155 >= 1)
                  {
                    int v1158 = 0;
                    uint64_t v1159 = *(void *)&v1145[2 * v1156];
                    int v1160 = *(_DWORD *)(v148 + 4 * v1156);
                    int v1161 = *a2;
                    uint64_t v1162 = 8 * *(void *)(v1148 + 8 * v1156);
                    uint64_t v1163 = v1141;
                    uint64_t v1164 = v1143;
                    do
                    {
                      if (v1160 >= 1)
                      {
                        int v1165 = v146[19];
                        uint64_t v1166 = (void *)(v1161[19] + v1163);
                        int v1167 = v1160;
                        do
                        {
                          *uint64_t v1166 = *((char *)v1165 + v1164);
                          uint64_t v1166 = (void *)((char *)v1166 + v1162);
                          int v1165 = (unsigned int *)((char *)v1165 + v1159);
                          --v1167;
                        }
                        while (v1167);
                      }
                      v1164 += v1153;
                      ++v1158;
                      v1163 += v1157;
                    }
                    while (v1158 != v1155);
                  }
                  v1143 += v1147;
                  ++v1142;
                  v1141 += result;
                }
                while (v1142 != v1140);
              }
              break;
            case 4:
              uint64_t v1168 = (v149 << 30) - 0x400000000;
              int v1531 = *(_DWORD *)(v148 + (v1168 >> 30));
              if (v1531 >= 1)
              {
                uint64_t v1169 = 0;
                int v1170 = 0;
                uint64_t v1171 = 0;
                uint64_t v1172 = v146[3];
                uint64_t v1173 = v1168 >> 29;
                uint64_t v1514 = *(void *)((char *)v1172 + v1173);
                uint64_t v1174 = v3[3];
                uint64_t v1175 = (v149 << 30) - 0x300000000;
                uint64_t v1176 = (v149 << 30) - 0x200000000;
                uint64_t v1177 = (v149 << 30) - 0x100000000;
                uint64_t v1178 = *(void *)((char *)v1172 + (v1175 >> 29));
                uint64_t v1179 = *(void *)(v1174 + (v1175 >> 29));
                int v1180 = *(_DWORD *)(v148 + (v1175 >> 30));
                uint64_t v1480 = v1176 >> 32;
                uint64_t result = v1177 >> 32;
                uint64_t v1497 = 8 * *(void *)(v1174 + v1173);
                uint64_t v1181 = 8 * v1179;
                do
                {
                  if (v1180 >= 1)
                  {
                    int v1182 = 0;
                    uint64_t v1183 = *(void *)&v1172[2 * v1480];
                    int v1184 = *(_DWORD *)(v148 + 4 * v1480);
                    uint64_t v1185 = 8 * *(void *)(v1174 + 8 * v1480);
                    uint64_t v1186 = v1169;
                    uint64_t v1187 = v1171;
                    do
                    {
                      if (v1184 >= 1)
                      {
                        int v1188 = 0;
                        uint64_t v1189 = *(void *)&v1172[2 * result];
                        int v1190 = *(_DWORD *)(v148 + 4 * result);
                        uint64_t v1191 = *a2;
                        uint64_t v1192 = 8 * *(void *)(v1174 + 8 * result);
                        uint64_t v1193 = v1186;
                        uint64_t v1194 = v1187;
                        do
                        {
                          if (v1190 >= 1)
                          {
                            uint64_t v1195 = v146[19];
                            uint64_t v1196 = (void *)(v1191[19] + v1193);
                            int v1197 = v1190;
                            do
                            {
                              *uint64_t v1196 = *((char *)v1195 + v1194);
                              uint64_t v1196 = (void *)((char *)v1196 + v1192);
                              uint64_t v1195 = (unsigned int *)((char *)v1195 + v1189);
                              --v1197;
                            }
                            while (v1197);
                          }
                          v1194 += v1183;
                          ++v1188;
                          v1193 += v1185;
                        }
                        while (v1188 != v1184);
                      }
                      v1187 += v1178;
                      ++v1182;
                      v1186 += v1181;
                    }
                    while (v1182 != v1180);
                  }
                  v1171 += v1514;
                  ++v1170;
                  v1169 += v1497;
                }
                while (v1170 != v1531);
              }
              break;
            case 5:
              uint64_t v1198 = (v149 << 30) - 0x500000000;
              int v1436 = *(_DWORD *)(v148 + (v1198 >> 30));
              if (v1436 >= 1)
              {
                uint64_t v1456 = 0;
                uint64_t v1465 = 0;
                int v1446 = 0;
                uint64_t v1199 = v146[3];
                uint64_t v1200 = v1198 >> 29;
                uint64_t v1426 = *(void *)((char *)v1199 + v1200);
                uint64_t v1201 = v3[3];
                uint64_t v1202 = (v149 << 30) - 0x400000000;
                uint64_t v1515 = *(void *)((char *)v1199 + (v1202 >> 29));
                int v1532 = *(_DWORD *)(v148 + (v1202 >> 30));
                uint64_t v1406 = (uint64_t)((v149 << 30) - 0x300000000) >> 32;
                uint64_t v1481 = (uint64_t)((v149 << 30) - 0x200000000) >> 32;
                uint64_t v1203 = (uint64_t)((v149 << 30) - 0x100000000) >> 32;
                uint64_t v1416 = 8 * *(void *)(v1201 + v1200);
                uint64_t v1498 = 8 * *(void *)(v1201 + (v1202 >> 29));
                do
                {
                  if (v1532 >= 1)
                  {
                    int v1204 = 0;
                    uint64_t v1205 = *(void *)&v1199[2 * v1406];
                    int v1206 = *(_DWORD *)(v148 + 4 * v1406);
                    uint64_t v1207 = 8 * *(void *)(v1201 + 8 * v1406);
                    uint64_t v1208 = v1456;
                    uint64_t v1209 = v1465;
                    do
                    {
                      if (v1206 >= 1)
                      {
                        int v1210 = 0;
                        uint64_t v1211 = *(void *)&v1199[2 * v1481];
                        int v1212 = *(_DWORD *)(v148 + 4 * v1481);
                        uint64_t v1213 = 8 * *(void *)(v1201 + 8 * v1481);
                        uint64_t v1214 = v1209;
                        uint64_t v1215 = v1208;
                        do
                        {
                          if (v1212 >= 1)
                          {
                            int v1216 = 0;
                            uint64_t v1217 = *(void *)&v1199[2 * v1203];
                            int v1218 = *(_DWORD *)(v148 + 4 * v1203);
                            uint64_t v1219 = *a2;
                            uint64_t v1220 = 8 * *(void *)(v1201 + 8 * v1203);
                            uint64_t v1221 = v1214;
                            uint64_t v1222 = v1215;
                            do
                            {
                              if (v1218 >= 1)
                              {
                                uint64_t v1223 = v146[19];
                                uint64_t v1224 = (uint64_t *)(v1219[19] + v1221);
                                int v1225 = v1218;
                                do
                                {
                                  uint64_t result = *((char *)v1223 + v1222);
                                  *uint64_t v1224 = result;
                                  uint64_t v1224 = (uint64_t *)((char *)v1224 + v1220);
                                  uint64_t v1223 = (unsigned int *)((char *)v1223 + v1217);
                                  --v1225;
                                }
                                while (v1225);
                              }
                              v1222 += v1211;
                              ++v1216;
                              v1221 += v1213;
                            }
                            while (v1216 != v1212);
                          }
                          v1215 += v1205;
                          ++v1210;
                          v1214 += v1207;
                        }
                        while (v1210 != v1206);
                      }
                      v1208 += v1515;
                      ++v1204;
                      v1209 += v1498;
                    }
                    while (v1204 != v1532);
                  }
                  v1456 += v1426;
                  v1465 += v1416;
                  ++v1446;
                }
                while (v1446 != v1436);
              }
              break;
            default:
              LODWORD(v1088) = 1;
              uint64_t v1089 = -20;
              do
              {
                uint64_t v1088 = *(int *)(v147 + v1089) * (uint64_t)(int)v1088;
                v1089 += 4;
              }
              while (v1089);
              uint64_t v1392 = v146[6];
              if (v1392)
              {
                uint64_t v1090 = 0;
                uint64_t v1372 = *v3;
                uint64_t v1091 = (v149 << 30) - 0x500000000;
                uint64_t v1382 = (v149 >> 2) - 1;
                int v1092 = v146[3];
                uint64_t v1093 = v3[3];
                int v1435 = *(_DWORD *)(v148 + (v1091 >> 30));
                uint64_t v1377 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1367 = (uint64_t)((v149 << 30) - 0x400000000) >> 32;
                uint64_t v1405 = (uint64_t)((v149 << 30) - 0x300000000) >> 32;
                uint64_t v1479 = (uint64_t)((v149 << 30) - 0x200000000) >> 32;
                uint64_t v1094 = (uint64_t)((v149 << 30) - 0x100000000) >> 32;
                uint64_t v1415 = 8 * *(void *)(v1093 + (v1091 >> 29));
                uint64_t v1425 = *(void *)((char *)v1092 + (v1091 >> 29));
                uint64_t v1387 = v1088;
                do
                {
                  uint64_t v1095 = v1382;
                  if ((v1382 & 0x80000000) != 0)
                  {
                    uint64_t v1096 = 0;
                    uint64_t v1097 = v1377;
                  }
                  else
                  {
                    uint64_t v1096 = 0;
                    LODWORD(result) = v1090;
                    uint64_t v1097 = v1377;
                    do
                    {
                      ldiv_t v1098 = ldiv((int)result, *(int *)(v148 + 4 * v1095));
                      uint64_t result = v1098.quot;
                      v1096 += *(void *)&v1092[2 * v1095--] * v1098.rem;
                    }
                    while (v1095 != -1);
                  }
                  uint64_t v1397 = v1090;
                  uint64_t v1099 = 0;
                  if ((v1097 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1090;
                    do
                    {
                      ldiv_t v1100 = ldiv((int)result, *(int *)(v1372 + 4 * v1097));
                      uint64_t result = v1100.quot;
                      v1099 += *(void *)(v1093 + 8 * v1097--) * v1100.rem;
                    }
                    while (v1097 != -1);
                  }
                  if (v1435 >= 1)
                  {
                    int v1101 = 0;
                    uint64_t v1513 = *(void *)&v1092[2 * v1367];
                    int v1530 = *(_DWORD *)(v148 + 4 * v1367);
                    uint64_t v1464 = 8 * v1099;
                    uint64_t v1496 = 8 * *(void *)(v1093 + 8 * v1367);
                    do
                    {
                      int v1445 = v1101;
                      uint64_t v1455 = v1096;
                      if (v1530 >= 1)
                      {
                        int v1102 = 0;
                        uint64_t v1103 = *(void *)&v1092[2 * v1405];
                        int v1104 = *(_DWORD *)(v148 + 4 * v1405);
                        uint64_t v1105 = 8 * *(void *)(v1093 + 8 * v1405);
                        uint64_t v1106 = v1464;
                        do
                        {
                          if (v1104 >= 1)
                          {
                            int v1107 = 0;
                            uint64_t v1108 = *(void *)&v1092[2 * v1479];
                            int v1109 = *(_DWORD *)(v148 + 4 * v1479);
                            uint64_t v1110 = 8 * *(void *)(v1093 + 8 * v1479);
                            uint64_t v1111 = v1106;
                            uint64_t result = v1096;
                            do
                            {
                              if (v1109 >= 1)
                              {
                                int v1112 = 0;
                                uint64_t v1113 = *(void *)&v1092[2 * v1094];
                                int v1114 = *(_DWORD *)(v148 + 4 * v1094);
                                int v1115 = *a2;
                                uint64_t v1116 = 8 * *(void *)(v1093 + 8 * v1094);
                                uint64_t v1117 = v1111;
                                uint64_t v1118 = result;
                                do
                                {
                                  if (v1114 >= 1)
                                  {
                                    uint64_t v1119 = v146[19];
                                    int v1120 = (void *)(v1115[19] + v1117);
                                    int v1121 = v1114;
                                    do
                                    {
                                      *int v1120 = *((char *)v1119 + v1118);
                                      int v1120 = (void *)((char *)v1120 + v1116);
                                      uint64_t v1119 = (unsigned int *)((char *)v1119 + v1113);
                                      --v1121;
                                    }
                                    while (v1121);
                                  }
                                  v1118 += v1108;
                                  ++v1112;
                                  v1117 += v1110;
                                }
                                while (v1112 != v1109);
                              }
                              result += v1103;
                              ++v1107;
                              v1111 += v1105;
                            }
                            while (v1107 != v1104);
                          }
                          v1096 += v1513;
                          ++v1102;
                          v1106 += v1496;
                        }
                        while (v1102 != v1530);
                      }
                      uint64_t v1096 = v1455 + v1425;
                      int v1101 = v1445 + 1;
                      v1464 += v1415;
                    }
                    while (v1445 + 1 != v1435);
                  }
                  v1090 += v1387;
                }
                while ((unint64_t)v1392 > v1397 + v1387);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v24 = v3[6];
          if (v24)
          {
            float v25 = (float)**(char **)(*(void *)result + 152);
            float v26 = (float *)v3[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          uint64_t v158 = *(void *)(*(void *)result + 160);
          if (v158)
          {
            unint64_t v159 = *(char **)(*(void *)result + 152);
            uint64_t v160 = (float *)v3[19];
            do
            {
              int v161 = *v159++;
              *v160++ = (float)v161;
              --v158;
            }
            while (v158);
          }
          break;
        case 2:
          uint64_t v162 = *(int ***)result;
          uint64_t v163 = **(int ***)result;
          uint64_t v164 = *(void *)(*(void *)result + 8) - (void)v163;
          switch(v164 >> 2)
          {
            case 1:
              uint64_t v165 = *v163;
              if ((int)v165 >= 1)
              {
                uint64_t v166 = v162[19];
                uint64_t v167 = (float *)v3[19];
                uint64_t v168 = *(void *)v162[3];
                do
                {
                  *v167++ = (float)*(char *)v166;
                  uint64_t v166 = (int *)((char *)v166 + v168);
                  --v165;
                }
                while (v165);
              }
              break;
            case 2:
              int v506 = *v163;
              if (*v163 >= 1)
              {
                int v507 = 0;
                uint64_t v508 = 0;
                uint64_t v509 = 0;
                uint64_t v510 = v162[19];
                uint64_t v511 = v3[19];
                uint64_t v512 = v163[1];
                uint64_t v513 = v162[3];
                uint64_t v515 = *(void *)v513;
                uint64_t v514 = *((void *)v513 + 1);
                uint64_t v516 = v515 - v514 * v512;
                do
                {
                  int v517 = v512;
                  if ((int)v512 >= 1)
                  {
                    do
                    {
                      uint64_t result = *((char *)v510 + v509);
                      *(float *)(v511 + 4 * v508++) = (float)(int)result;
                      v509 += v514;
                      --v517;
                    }
                    while (v517);
                  }
                  v509 += v516;
                  ++v507;
                }
                while (v507 != v506);
              }
              break;
            case 3:
              int v518 = *v163;
              if (*v163 >= 1)
              {
                int v519 = 0;
                uint64_t result = 0;
                uint64_t v520 = 0;
                uint64_t v521 = v162[19];
                uint64_t v522 = v3[19];
                uint64_t v523 = v163[1];
                uint64_t v524 = v162[3];
                uint64_t v525 = *((void *)v524 + 1);
                uint64_t v526 = *(void *)v524 - v525 * v523;
                do
                {
                  if ((int)v523 < 1)
                  {
                    uint64_t v533 = result;
                  }
                  else
                  {
                    int v527 = 0;
                    uint64_t v528 = v163[2];
                    uint64_t v529 = v162[3];
                    uint64_t v530 = v525 - *((void *)v524 + 2) * v528;
                    do
                    {
                      if ((int)v528 < 1)
                      {
                        uint64_t v533 = result;
                      }
                      else
                      {
                        uint64_t v531 = *((void *)v529 + 2);
                        int v532 = v528;
                        do
                        {
                          uint64_t v533 = result + 1;
                          *(float *)(v522 + 4 * result) = (float)*((char *)v521 + v520);
                          v520 += v531;
                          ++result;
                          --v532;
                        }
                        while (v532);
                      }
                      v520 += v530;
                      ++v527;
                      uint64_t result = v533;
                    }
                    while (v527 != v523);
                  }
                  v520 += v526;
                  ++v519;
                  uint64_t result = v533;
                }
                while (v519 != v518);
              }
              break;
            case 4:
              int v534 = *v163;
              if (*v163 >= 1)
              {
                int v535 = 0;
                uint64_t result = 0;
                uint64_t v536 = 0;
                uint64_t v537 = v162[19];
                uint64_t v538 = v3[19];
                uint64_t v539 = v163[1];
                int v540 = v162[3];
                uint64_t v541 = *((void *)v540 + 1);
                uint64_t v542 = *(void *)v540 - v541 * v539;
                do
                {
                  if ((int)v539 < 1)
                  {
                    uint64_t v553 = result;
                  }
                  else
                  {
                    int v543 = 0;
                    uint64_t v544 = v163[2];
                    int v545 = v162[3];
                    uint64_t v546 = v541 - *((void *)v540 + 2) * v544;
                    do
                    {
                      if ((int)v544 < 1)
                      {
                        uint64_t v553 = result;
                      }
                      else
                      {
                        int v547 = 0;
                        uint64_t v548 = v163[3];
                        uint64_t v549 = v162[3];
                        uint64_t v550 = *((void *)v545 + 2) - *((void *)v545 + 3) * v548;
                        do
                        {
                          if ((int)v548 < 1)
                          {
                            uint64_t v553 = result;
                          }
                          else
                          {
                            uint64_t v551 = *((void *)v549 + 3);
                            int v552 = v548;
                            do
                            {
                              uint64_t v553 = result + 1;
                              *(float *)(v538 + 4 * result) = (float)*((char *)v537 + v536);
                              v536 += v551;
                              ++result;
                              --v552;
                            }
                            while (v552);
                          }
                          v536 += v550;
                          ++v547;
                          uint64_t result = v553;
                        }
                        while (v547 != v544);
                      }
                      v536 += v546;
                      ++v543;
                      uint64_t result = v553;
                    }
                    while (v543 != v539);
                  }
                  v536 += v542;
                  ++v535;
                  uint64_t result = v553;
                }
                while (v535 != v534);
              }
              break;
            default:
              uint64_t v497 = v3[6];
              if (v497)
              {
                uint64_t v498 = 0;
                int v499 = v162[19];
                uint64_t v500 = v3[19];
                uint64_t v501 = ((unint64_t)v164 >> 2) - 1;
                uint64_t v502 = v162[3];
                do
                {
                  uint64_t v503 = 0;
                  if ((v501 & 0x80000000) == 0)
                  {
                    uint64_t v504 = v501;
                    LODWORD(result) = v498;
                    do
                    {
                      ldiv_t v505 = ldiv((int)result, v163[v504]);
                      uint64_t result = v505.quot;
                      v503 += *(void *)&v502[2 * v504--] * v505.rem;
                    }
                    while (v504 != -1);
                  }
                  *(float *)(v500 + 4 * v498++) = (float)*((char *)v499 + v503);
                }
                while (v498 != v497);
              }
              break;
          }
          break;
        case 3:
          uint64_t v169 = *(unsigned int ***)result;
          uint64_t v171 = **(void **)result;
          uint64_t v170 = *(void *)(*(void *)result + 8);
          unint64_t v172 = v170 - v171;
          switch((v170 - v171) >> 2)
          {
            case 1:
              uint64_t v173 = (v172 << 30) - 0x100000000;
              int v174 = *(_DWORD *)(v171 + (v173 >> 30));
              if (v174 >= 1)
              {
                uint64_t v175 = v173 >> 29;
                uint64_t v176 = *(void *)((char *)v169[3] + (v173 >> 29));
                uint64_t v177 = *(void *)(v3[3] + v175);
                uint64_t v178 = (float *)v3[19];
                float v179 = v169[19];
                uint64_t v180 = 4 * v177;
                do
                {
                  *uint64_t v178 = (float)*(char *)v179;
                  float v179 = (unsigned int *)((char *)v179 + v176);
                  uint64_t v178 = (float *)((char *)v178 + v180);
                  --v174;
                }
                while (v174);
              }
              break;
            case 2:
              uint64_t v1260 = (v172 << 30) - 0x200000000;
              int v1261 = *(_DWORD *)(v171 + (v1260 >> 30));
              if (v1261 >= 1)
              {
                uint64_t v1262 = 0;
                int v1263 = 0;
                uint64_t v1264 = 0;
                uint64_t v1265 = v172 << 30;
                uint64_t v1266 = v169[3];
                uint64_t v1267 = v1260 >> 29;
                uint64_t v1268 = *(void *)((char *)v1266 + (v1260 >> 29));
                uint64_t v1269 = v3[3];
                uint64_t result = v1265 - 0x100000000;
                uint64_t v1270 = (v1265 - 0x100000000) >> 29;
                uint64_t v1271 = *(void *)((char *)v1266 + v1270);
                int v1272 = *(_DWORD *)(v171 + (result >> 30));
                uint64_t v1273 = 4 * *(void *)(v1269 + v1267);
                uint64_t v1274 = 4 * *(void *)(v1269 + v1270);
                do
                {
                  if (v1272 >= 1)
                  {
                    uint64_t result = (uint64_t)v169[19];
                    uint64_t v1275 = (float *)(v3[19] + v1262);
                    int v1276 = v1272;
                    do
                    {
                      *uint64_t v1275 = (float)*(char *)(result + v1264);
                      uint64_t v1275 = (float *)((char *)v1275 + v1274);
                      result += v1271;
                      --v1276;
                    }
                    while (v1276);
                  }
                  v1264 += v1268;
                  ++v1263;
                  v1262 += v1273;
                }
                while (v1263 != v1261);
              }
              break;
            case 3:
              uint64_t v1277 = (v172 << 30) - 0x300000000;
              int v1278 = *(_DWORD *)(v171 + (v1277 >> 30));
              if (v1278 >= 1)
              {
                uint64_t v1279 = 0;
                int v1280 = 0;
                uint64_t v1281 = 0;
                uint64_t v1282 = v172 << 30;
                int v1283 = v169[3];
                uint64_t v1284 = v1277 >> 29;
                uint64_t v1285 = *(void *)((char *)v1283 + (v1277 >> 29));
                uint64_t v1286 = v3[3];
                uint64_t v1287 = *(void *)(v1286 + v1284);
                uint64_t v1288 = v1282 - 0x200000000;
                uint64_t v1289 = (v1282 - 0x200000000) >> 29;
                uint64_t v1290 = v1282 - 0x100000000;
                uint64_t v1291 = *(void *)((char *)v1283 + v1289);
                uint64_t v1292 = *(void *)(v1286 + v1289);
                int v1293 = *(_DWORD *)(v171 + (v1288 >> 30));
                uint64_t v1294 = v1290 >> 32;
                uint64_t result = 4 * v1287;
                uint64_t v1295 = 4 * v1292;
                do
                {
                  if (v1293 >= 1)
                  {
                    int v1296 = 0;
                    uint64_t v1297 = *(void *)&v1283[2 * v1294];
                    int v1298 = *(_DWORD *)(v171 + 4 * v1294);
                    int v1299 = *a2;
                    uint64_t v1300 = 4 * *(void *)(v1286 + 8 * v1294);
                    uint64_t v1301 = v1279;
                    uint64_t v1302 = v1281;
                    do
                    {
                      if (v1298 >= 1)
                      {
                        uint64_t v1303 = v169[19];
                        uint64_t v1304 = (float *)(v1299[19] + v1301);
                        int v1305 = v1298;
                        do
                        {
                          *uint64_t v1304 = (float)*((char *)v1303 + v1302);
                          uint64_t v1304 = (float *)((char *)v1304 + v1300);
                          uint64_t v1303 = (unsigned int *)((char *)v1303 + v1297);
                          --v1305;
                        }
                        while (v1305);
                      }
                      v1302 += v1291;
                      ++v1296;
                      v1301 += v1295;
                    }
                    while (v1296 != v1293);
                  }
                  v1281 += v1285;
                  ++v1280;
                  v1279 += result;
                }
                while (v1280 != v1278);
              }
              break;
            case 4:
              uint64_t v1306 = (v172 << 30) - 0x400000000;
              int v1534 = *(_DWORD *)(v171 + (v1306 >> 30));
              if (v1534 >= 1)
              {
                uint64_t v1307 = 0;
                int v1308 = 0;
                uint64_t v1309 = 0;
                uint64_t v1310 = v169[3];
                uint64_t v1311 = v1306 >> 29;
                uint64_t v1517 = *(void *)((char *)v1310 + v1311);
                uint64_t v1312 = v3[3];
                uint64_t v1313 = (v172 << 30) - 0x300000000;
                uint64_t v1314 = (v172 << 30) - 0x200000000;
                uint64_t v1315 = (v172 << 30) - 0x100000000;
                uint64_t v1316 = *(void *)((char *)v1310 + (v1313 >> 29));
                uint64_t v1317 = *(void *)(v1312 + (v1313 >> 29));
                int v1318 = *(_DWORD *)(v171 + (v1313 >> 30));
                uint64_t v1483 = v1314 >> 32;
                uint64_t result = v1315 >> 32;
                uint64_t v1500 = 4 * *(void *)(v1312 + v1311);
                uint64_t v1319 = 4 * v1317;
                do
                {
                  if (v1318 >= 1)
                  {
                    int v1320 = 0;
                    uint64_t v1321 = *(void *)&v1310[2 * v1483];
                    int v1322 = *(_DWORD *)(v171 + 4 * v1483);
                    uint64_t v1323 = 4 * *(void *)(v1312 + 8 * v1483);
                    uint64_t v1324 = v1307;
                    uint64_t v1325 = v1309;
                    do
                    {
                      if (v1322 >= 1)
                      {
                        int v1326 = 0;
                        uint64_t v1327 = *(void *)&v1310[2 * result];
                        int v1328 = *(_DWORD *)(v171 + 4 * result);
                        uint64_t v1329 = *a2;
                        uint64_t v1330 = 4 * *(void *)(v1312 + 8 * result);
                        uint64_t v1331 = v1324;
                        uint64_t v1332 = v1325;
                        do
                        {
                          if (v1328 >= 1)
                          {
                            uint64_t v1333 = v169[19];
                            uint64_t v1334 = (float *)(v1329[19] + v1331);
                            int v1335 = v1328;
                            do
                            {
                              *uint64_t v1334 = (float)*((char *)v1333 + v1332);
                              uint64_t v1334 = (float *)((char *)v1334 + v1330);
                              uint64_t v1333 = (unsigned int *)((char *)v1333 + v1327);
                              --v1335;
                            }
                            while (v1335);
                          }
                          v1332 += v1321;
                          ++v1326;
                          v1331 += v1323;
                        }
                        while (v1326 != v1322);
                      }
                      v1325 += v1316;
                      ++v1320;
                      v1324 += v1319;
                    }
                    while (v1320 != v1318);
                  }
                  v1309 += v1517;
                  ++v1308;
                  v1307 += v1500;
                }
                while (v1308 != v1534);
              }
              break;
            case 5:
              uint64_t v1336 = (v172 << 30) - 0x500000000;
              int v1438 = *(_DWORD *)(v171 + (v1336 >> 30));
              if (v1438 >= 1)
              {
                uint64_t v1458 = 0;
                uint64_t v1467 = 0;
                int v1448 = 0;
                uint64_t v1337 = v169[3];
                uint64_t v1338 = v1336 >> 29;
                uint64_t v1428 = *(void *)((char *)v1337 + v1338);
                uint64_t v1339 = v3[3];
                uint64_t v1340 = (v172 << 30) - 0x400000000;
                uint64_t v1518 = *(void *)((char *)v1337 + (v1340 >> 29));
                int v1535 = *(_DWORD *)(v171 + (v1340 >> 30));
                uint64_t v1408 = (uint64_t)((v172 << 30) - 0x300000000) >> 32;
                uint64_t v1484 = (uint64_t)((v172 << 30) - 0x200000000) >> 32;
                uint64_t v1341 = (uint64_t)((v172 << 30) - 0x100000000) >> 32;
                uint64_t v1418 = 4 * *(void *)(v1339 + v1338);
                uint64_t v1501 = 4 * *(void *)(v1339 + (v1340 >> 29));
                do
                {
                  if (v1535 >= 1)
                  {
                    int v1342 = 0;
                    uint64_t v1343 = *(void *)&v1337[2 * v1408];
                    int v1344 = *(_DWORD *)(v171 + 4 * v1408);
                    uint64_t v1345 = 4 * *(void *)(v1339 + 8 * v1408);
                    uint64_t v1346 = v1458;
                    uint64_t v1347 = v1467;
                    do
                    {
                      if (v1344 >= 1)
                      {
                        int v1348 = 0;
                        uint64_t v1349 = *(void *)&v1337[2 * v1484];
                        int v1350 = *(_DWORD *)(v171 + 4 * v1484);
                        uint64_t v1351 = 4 * *(void *)(v1339 + 8 * v1484);
                        uint64_t v1352 = v1347;
                        uint64_t v1353 = v1346;
                        do
                        {
                          if (v1350 >= 1)
                          {
                            int v1354 = 0;
                            uint64_t v1355 = *(void *)&v1337[2 * v1341];
                            int v1356 = *(_DWORD *)(v171 + 4 * v1341);
                            uint64_t v1357 = *a2;
                            uint64_t v1358 = 4 * *(void *)(v1339 + 8 * v1341);
                            uint64_t v1359 = v1352;
                            uint64_t v1360 = v1353;
                            do
                            {
                              if (v1356 >= 1)
                              {
                                uint64_t v1361 = v169[19];
                                uint64_t v1362 = (float *)(v1357[19] + v1359);
                                int v1363 = v1356;
                                do
                                {
                                  uint64_t result = *((char *)v1361 + v1360);
                                  *uint64_t v1362 = (float)(int)result;
                                  uint64_t v1362 = (float *)((char *)v1362 + v1358);
                                  uint64_t v1361 = (unsigned int *)((char *)v1361 + v1355);
                                  --v1363;
                                }
                                while (v1363);
                              }
                              v1360 += v1349;
                              ++v1354;
                              v1359 += v1351;
                            }
                            while (v1354 != v1350);
                          }
                          v1353 += v1343;
                          ++v1348;
                          v1352 += v1345;
                        }
                        while (v1348 != v1344);
                      }
                      v1346 += v1518;
                      ++v1342;
                      v1347 += v1501;
                    }
                    while (v1342 != v1535);
                  }
                  v1458 += v1428;
                  v1467 += v1418;
                  ++v1448;
                }
                while (v1448 != v1438);
              }
              break;
            default:
              LODWORD(v1226) = 1;
              uint64_t v1227 = -20;
              do
              {
                uint64_t v1226 = *(int *)(v170 + v1227) * (uint64_t)(int)v1226;
                v1227 += 4;
              }
              while (v1227);
              uint64_t v1393 = v169[6];
              if (v1393)
              {
                uint64_t v1228 = 0;
                uint64_t v1373 = *v3;
                uint64_t v1229 = (v172 << 30) - 0x500000000;
                uint64_t v1383 = (v172 >> 2) - 1;
                uint64_t v1230 = v169[3];
                uint64_t v1231 = v3[3];
                int v1437 = *(_DWORD *)(v171 + (v1229 >> 30));
                uint64_t v1378 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1368 = (uint64_t)((v172 << 30) - 0x400000000) >> 32;
                uint64_t v1407 = (uint64_t)((v172 << 30) - 0x300000000) >> 32;
                uint64_t v1482 = (uint64_t)((v172 << 30) - 0x200000000) >> 32;
                uint64_t v1232 = (uint64_t)((v172 << 30) - 0x100000000) >> 32;
                uint64_t v1417 = 4 * *(void *)(v1231 + (v1229 >> 29));
                uint64_t v1427 = *(void *)((char *)v1230 + (v1229 >> 29));
                uint64_t v1388 = v1226;
                do
                {
                  uint64_t v1233 = v1383;
                  if ((v1383 & 0x80000000) != 0)
                  {
                    uint64_t v1234 = 0;
                    uint64_t v1235 = v1378;
                  }
                  else
                  {
                    uint64_t v1234 = 0;
                    LODWORD(result) = v1228;
                    uint64_t v1235 = v1378;
                    do
                    {
                      ldiv_t v1236 = ldiv((int)result, *(int *)(v171 + 4 * v1233));
                      uint64_t result = v1236.quot;
                      v1234 += *(void *)&v1230[2 * v1233--] * v1236.rem;
                    }
                    while (v1233 != -1);
                  }
                  uint64_t v1398 = v1228;
                  uint64_t v1237 = 0;
                  if ((v1235 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1228;
                    do
                    {
                      ldiv_t v1238 = ldiv((int)result, *(int *)(v1373 + 4 * v1235));
                      uint64_t result = v1238.quot;
                      v1237 += *(void *)(v1231 + 8 * v1235--) * v1238.rem;
                    }
                    while (v1235 != -1);
                  }
                  if (v1437 >= 1)
                  {
                    int v1239 = 0;
                    uint64_t v1516 = *(void *)&v1230[2 * v1368];
                    int v1533 = *(_DWORD *)(v171 + 4 * v1368);
                    uint64_t v1466 = 4 * v1237;
                    uint64_t v1499 = 4 * *(void *)(v1231 + 8 * v1368);
                    do
                    {
                      int v1447 = v1239;
                      uint64_t v1457 = v1234;
                      if (v1533 >= 1)
                      {
                        int v1240 = 0;
                        uint64_t v1241 = *(void *)&v1230[2 * v1407];
                        int v1242 = *(_DWORD *)(v171 + 4 * v1407);
                        uint64_t v1243 = 4 * *(void *)(v1231 + 8 * v1407);
                        uint64_t v1244 = v1466;
                        do
                        {
                          if (v1242 >= 1)
                          {
                            int v1245 = 0;
                            uint64_t v1246 = *(void *)&v1230[2 * v1482];
                            int v1247 = *(_DWORD *)(v171 + 4 * v1482);
                            uint64_t v1248 = 4 * *(void *)(v1231 + 8 * v1482);
                            uint64_t v1249 = v1244;
                            uint64_t result = v1234;
                            do
                            {
                              if (v1247 >= 1)
                              {
                                int v1250 = 0;
                                uint64_t v1251 = *(void *)&v1230[2 * v1232];
                                int v1252 = *(_DWORD *)(v171 + 4 * v1232);
                                uint64_t v1253 = *a2;
                                uint64_t v1254 = 4 * *(void *)(v1231 + 8 * v1232);
                                uint64_t v1255 = v1249;
                                uint64_t v1256 = result;
                                do
                                {
                                  if (v1252 >= 1)
                                  {
                                    int v1257 = v169[19];
                                    uint64_t v1258 = (float *)(v1253[19] + v1255);
                                    int v1259 = v1252;
                                    do
                                    {
                                      float *v1258 = (float)*((char *)v1257 + v1256);
                                      uint64_t v1258 = (float *)((char *)v1258 + v1254);
                                      int v1257 = (unsigned int *)((char *)v1257 + v1251);
                                      --v1259;
                                    }
                                    while (v1259);
                                  }
                                  v1256 += v1246;
                                  ++v1250;
                                  v1255 += v1248;
                                }
                                while (v1250 != v1247);
                              }
                              result += v1241;
                              ++v1245;
                              v1249 += v1243;
                            }
                            while (v1245 != v1242);
                          }
                          v1234 += v1516;
                          ++v1240;
                          v1244 += v1499;
                        }
                        while (v1240 != v1533);
                      }
                      uint64_t v1234 = v1457 + v1427;
                      int v1239 = v1447 + 1;
                      v1466 += v1417;
                    }
                    while (v1447 + 1 != v1437);
                  }
                  v1228 += v1388;
                }
                while ((unint64_t)v1393 > v1398 + v1388);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<int>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  uint64_t v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            size_t v7 = (void *)v3[19];
            BOOL v8 = **(_DWORD **)(*(void *)v5 + 152) != 0;
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          uint64_t v30 = *(void *)(*(void *)result + 160);
          if (v30)
          {
            uint64_t v31 = *(int **)(*(void *)result + 152);
            uint64_t v32 = (BOOL *)v3[19];
            uint64_t v33 = 4 * v30;
            do
            {
              int v34 = *v31++;
              *v32++ = v34 != 0;
              v33 -= 4;
            }
            while (v33);
          }
          break;
        case 2:
          uint64_t v35 = *(uint64_t **)result;
          uint64_t v36 = **(int ***)result;
          uint64_t v37 = *(void *)(*(void *)result + 8) - (void)v36;
          switch(v37 >> 2)
          {
            case 1:
              uint64_t v38 = *v36;
              if ((int)v38 >= 1)
              {
                uint64_t v39 = (_DWORD *)v35[19];
                uint64_t v40 = (BOOL *)v3[19];
                uint64_t v41 = 4 * *(void *)v35[3];
                do
                {
                  *v40++ = *v39 != 0;
                  uint64_t v39 = (_DWORD *)((char *)v39 + v41);
                  --v38;
                }
                while (v38);
              }
              break;
            case 2:
              int v203 = *v36;
              if (*v36 >= 1)
              {
                int v204 = 0;
                uint64_t v205 = 0;
                uint64_t v206 = 0;
                uint64_t v207 = v35[19];
                uint64_t v208 = v3[19];
                uint64_t v209 = v36[1];
                uint64_t v210 = (uint64_t *)v35[3];
                uint64_t v212 = *v210;
                uint64_t v211 = v210[1];
                uint64_t v213 = v212 - v211 * v209;
                do
                {
                  int v214 = v209;
                  if ((int)v209 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(_DWORD *)(v207 + 4 * v206) != 0;
                      *(unsigned char *)(v208 + v205++) = result;
                      v206 += v211;
                      --v214;
                    }
                    while (v214);
                  }
                  v206 += v213;
                  ++v204;
                }
                while (v204 != v203);
              }
              break;
            case 3:
              int v215 = *v36;
              if (*v36 >= 1)
              {
                int v216 = 0;
                uint64_t result = 0;
                uint64_t v217 = 0;
                uint64_t v218 = v35[19];
                uint64_t v219 = v3[19];
                uint64_t v220 = v36[1];
                uint64_t v221 = (void *)v35[3];
                uint64_t v222 = v221[1];
                uint64_t v223 = *v221 - v222 * v220;
                do
                {
                  if ((int)v220 < 1)
                  {
                    uint64_t v230 = result;
                  }
                  else
                  {
                    int v224 = 0;
                    uint64_t v225 = v36[2];
                    uint64_t v226 = v35[3];
                    uint64_t v227 = v222 - v221[2] * v225;
                    do
                    {
                      if ((int)v225 < 1)
                      {
                        uint64_t v230 = result;
                      }
                      else
                      {
                        uint64_t v228 = *(void *)(v226 + 16);
                        int v229 = v225;
                        do
                        {
                          uint64_t v230 = result + 1;
                          *(unsigned char *)(v219 + result) = *(_DWORD *)(v218 + 4 * v217) != 0;
                          v217 += v228;
                          ++result;
                          --v229;
                        }
                        while (v229);
                      }
                      v217 += v227;
                      ++v224;
                      uint64_t result = v230;
                    }
                    while (v224 != v220);
                  }
                  v217 += v223;
                  ++v216;
                  uint64_t result = v230;
                }
                while (v216 != v215);
              }
              break;
            case 4:
              int v231 = *v36;
              if (*v36 >= 1)
              {
                int v232 = 0;
                uint64_t result = 0;
                uint64_t v233 = 0;
                uint64_t v234 = v35[19];
                uint64_t v235 = v3[19];
                uint64_t v236 = v36[1];
                uint64_t v237 = (void *)v35[3];
                uint64_t v238 = v237[1];
                uint64_t v239 = *v237 - v238 * v236;
                do
                {
                  if ((int)v236 < 1)
                  {
                    uint64_t v250 = result;
                  }
                  else
                  {
                    int v240 = 0;
                    uint64_t v241 = v36[2];
                    uint64_t v242 = v35[3];
                    uint64_t v243 = v238 - v237[2] * v241;
                    do
                    {
                      if ((int)v241 < 1)
                      {
                        uint64_t v250 = result;
                      }
                      else
                      {
                        int v244 = 0;
                        uint64_t v245 = v36[3];
                        uint64_t v246 = v35[3];
                        uint64_t v247 = *(void *)(v242 + 16) - *(void *)(v242 + 24) * v245;
                        do
                        {
                          if ((int)v245 < 1)
                          {
                            uint64_t v250 = result;
                          }
                          else
                          {
                            uint64_t v248 = *(void *)(v246 + 24);
                            int v249 = v245;
                            do
                            {
                              uint64_t v250 = result + 1;
                              *(unsigned char *)(v235 + result) = *(_DWORD *)(v234 + 4 * v233) != 0;
                              v233 += v248;
                              ++result;
                              --v249;
                            }
                            while (v249);
                          }
                          v233 += v247;
                          ++v244;
                          uint64_t result = v250;
                        }
                        while (v244 != v241);
                      }
                      v233 += v243;
                      ++v240;
                      uint64_t result = v250;
                    }
                    while (v240 != v236);
                  }
                  v233 += v239;
                  ++v232;
                  uint64_t result = v250;
                }
                while (v232 != v231);
              }
              break;
            default:
              uint64_t v194 = v3[6];
              if (v194)
              {
                uint64_t v195 = 0;
                uint64_t v196 = v35[19];
                uint64_t v197 = v3[19];
                uint64_t v198 = ((unint64_t)v37 >> 2) - 1;
                uint64_t v199 = v35[3];
                do
                {
                  uint64_t v200 = 0;
                  if ((v198 & 0x80000000) == 0)
                  {
                    uint64_t v201 = v198;
                    LODWORD(result) = v195;
                    do
                    {
                      ldiv_t v202 = ldiv((int)result, v36[v201]);
                      uint64_t result = v202.quot;
                      v200 += *(void *)(v199 + 8 * v201--) * v202.rem;
                    }
                    while (v201 != -1);
                  }
                  *(unsigned char *)(v197 + v195++) = *(_DWORD *)(v196 + 4 * v200) != 0;
                }
                while (v195 != v194);
              }
              break;
          }
          break;
        case 3:
          uint64_t v42 = *(unsigned int ***)result;
          uint64_t v44 = **(void **)result;
          uint64_t v43 = *(void *)(*(void *)result + 8);
          unint64_t v45 = v43 - v44;
          switch((v43 - v44) >> 2)
          {
            case 1:
              uint64_t v46 = (v45 << 30) - 0x100000000;
              int v47 = *(_DWORD *)(v44 + (v46 >> 30));
              if (v47 >= 1)
              {
                uint64_t v48 = v46 >> 29;
                uint64_t v49 = *(void *)((char *)v42[3] + v48);
                uint64_t v50 = *(void *)(v3[3] + v48);
                int v51 = (BOOL *)v3[19];
                uint64_t v52 = v42[19];
                uint64_t v53 = 4 * v49;
                do
                {
                  *int v51 = *v52 != 0;
                  v51 += v50;
                  uint64_t v52 = (unsigned int *)((char *)v52 + v53);
                  --v47;
                }
                while (v47);
              }
              break;
            case 2:
              uint64_t v602 = (v45 << 30) - 0x200000000;
              int v603 = *(_DWORD *)(v44 + (v602 >> 30));
              if (v603 >= 1)
              {
                uint64_t v604 = 0;
                int v605 = 0;
                uint64_t v606 = 0;
                uint64_t v607 = v45 << 30;
                uint64_t v608 = v42[3];
                uint64_t v609 = v602 >> 29;
                uint64_t v610 = *(void *)((char *)v608 + v609);
                uint64_t v611 = v3[3];
                uint64_t v612 = *(void *)(v611 + v609);
                uint64_t result = v607 - 0x100000000;
                uint64_t v613 = (v607 - 0x100000000) >> 29;
                uint64_t v614 = *(void *)((char *)v608 + v613);
                uint64_t v615 = *(void *)(v611 + v613);
                int v616 = *(_DWORD *)(v44 + (result >> 30));
                uint64_t v617 = 4 * v610;
                uint64_t v618 = 4 * v614;
                do
                {
                  if (v616 >= 1)
                  {
                    uint64_t result = v3[19];
                    uint64_t v619 = (unsigned int *)((char *)v42[19] + v604);
                    int v620 = v616;
                    do
                    {
                      *(unsigned char *)(result + v606) = *v619 != 0;
                      result += v615;
                      uint64_t v619 = (_DWORD *)((char *)v619 + v618);
                      --v620;
                    }
                    while (v620);
                  }
                  v606 += v612;
                  ++v605;
                  v604 += v617;
                }
                while (v605 != v603);
              }
              break;
            case 3:
              uint64_t v621 = (v45 << 30) - 0x300000000;
              int v622 = *(_DWORD *)(v44 + (v621 >> 30));
              if (v622 >= 1)
              {
                uint64_t v623 = 0;
                int v624 = 0;
                uint64_t v625 = 0;
                uint64_t v626 = v45 << 30;
                uint64_t v627 = v42[3];
                uint64_t v628 = v621 >> 29;
                uint64_t v629 = *(void *)((char *)v627 + v628);
                uint64_t v630 = v3[3];
                uint64_t v631 = *(void *)(v630 + v628);
                uint64_t v632 = v626 - 0x200000000;
                uint64_t v633 = (v626 - 0x200000000) >> 29;
                uint64_t v634 = v626 - 0x100000000;
                uint64_t v635 = *(void *)((char *)v627 + v633);
                uint64_t v636 = *(void *)(v630 + v633);
                int v637 = *(_DWORD *)(v44 + (v632 >> 30));
                uint64_t v638 = v634 >> 32;
                uint64_t result = 4 * v629;
                uint64_t v639 = 4 * v635;
                do
                {
                  if (v637 >= 1)
                  {
                    int v640 = 0;
                    uint64_t v641 = *(void *)(v630 + 8 * v638);
                    int v642 = *(_DWORD *)(v44 + 4 * v638);
                    uint64_t v643 = (void *)*a2;
                    uint64_t v644 = 4 * *(void *)&v627[2 * v638];
                    uint64_t v645 = v623;
                    uint64_t v646 = v625;
                    do
                    {
                      if (v642 >= 1)
                      {
                        uint64_t v647 = v643[19];
                        int v648 = (unsigned int *)((char *)v42[19] + v645);
                        int v649 = v642;
                        do
                        {
                          *(unsigned char *)(v647 + v646) = *v648 != 0;
                          v647 += v641;
                          int v648 = (_DWORD *)((char *)v648 + v644);
                          --v649;
                        }
                        while (v649);
                      }
                      v646 += v636;
                      ++v640;
                      v645 += v639;
                    }
                    while (v640 != v637);
                  }
                  v625 += v631;
                  ++v624;
                  v623 += result;
                }
                while (v624 != v622);
              }
              break;
            case 4:
              uint64_t v650 = (v45 << 30) - 0x400000000;
              int v1571 = *(_DWORD *)(v44 + (v650 >> 30));
              if (v1571 >= 1)
              {
                uint64_t v651 = 0;
                int v652 = 0;
                uint64_t v653 = 0;
                int v654 = v42[3];
                uint64_t v655 = v650 >> 29;
                uint64_t v656 = *(void *)((char *)v654 + v655);
                uint64_t v657 = v3[3];
                uint64_t v1554 = *(void *)(v657 + v655);
                uint64_t v658 = (v45 << 30) - 0x300000000;
                uint64_t v659 = (v45 << 30) - 0x200000000;
                uint64_t v660 = (v45 << 30) - 0x100000000;
                uint64_t v661 = *(void *)(v657 + (v658 >> 29));
                int v662 = *(_DWORD *)(v44 + (v658 >> 30));
                uint64_t v1521 = v659 >> 32;
                uint64_t result = v660 >> 32;
                uint64_t v1537 = 4 * v656;
                uint64_t v663 = 4 * *(void *)((char *)v654 + (v658 >> 29));
                do
                {
                  if (v662 >= 1)
                  {
                    int v664 = 0;
                    uint64_t v665 = *(void *)(v657 + 8 * v1521);
                    int v666 = *(_DWORD *)(v44 + 4 * v1521);
                    uint64_t v667 = 4 * *(void *)&v654[2 * v1521];
                    uint64_t v668 = v651;
                    uint64_t v669 = v653;
                    do
                    {
                      if (v666 >= 1)
                      {
                        int v670 = 0;
                        uint64_t v671 = *(void *)(v657 + 8 * result);
                        int v672 = *(_DWORD *)(v44 + 4 * result);
                        uint64_t v673 = (void *)*a2;
                        uint64_t v674 = 4 * *(void *)&v654[2 * result];
                        uint64_t v675 = v668;
                        uint64_t v676 = v669;
                        do
                        {
                          if (v672 >= 1)
                          {
                            uint64_t v677 = v673[19];
                            int v678 = (unsigned int *)((char *)v42[19] + v675);
                            int v679 = v672;
                            do
                            {
                              *(unsigned char *)(v677 + v676) = *v678 != 0;
                              v677 += v671;
                              int v678 = (_DWORD *)((char *)v678 + v674);
                              --v679;
                            }
                            while (v679);
                          }
                          v676 += v665;
                          ++v670;
                          v675 += v667;
                        }
                        while (v670 != v666);
                      }
                      v669 += v661;
                      ++v664;
                      v668 += v663;
                    }
                    while (v664 != v662);
                  }
                  v653 += v1554;
                  ++v652;
                  v651 += v1537;
                }
                while (v652 != v1571);
              }
              break;
            case 5:
              uint64_t v680 = (v45 << 30) - 0x500000000;
              int v1481 = *(_DWORD *)(v44 + (v680 >> 30));
              if (v1481 >= 1)
              {
                uint64_t v1501 = 0;
                uint64_t v1511 = 0;
                int v1491 = 0;
                uint64_t v681 = v42[3];
                uint64_t v682 = v680 >> 29;
                uint64_t v683 = v3[3];
                uint64_t v1471 = *(void *)(v683 + v682);
                uint64_t v684 = (v45 << 30) - 0x400000000;
                uint64_t v1555 = *(void *)(v683 + (v684 >> 29));
                int v1572 = *(_DWORD *)(v44 + (v684 >> 30));
                uint64_t v1452 = (uint64_t)((v45 << 30) - 0x300000000) >> 32;
                uint64_t v1522 = (uint64_t)((v45 << 30) - 0x200000000) >> 32;
                uint64_t v685 = (uint64_t)((v45 << 30) - 0x100000000) >> 32;
                uint64_t v1461 = 4 * *(void *)((char *)v681 + v682);
                uint64_t v1538 = 4 * *(void *)((char *)v681 + (v684 >> 29));
                do
                {
                  if (v1572 >= 1)
                  {
                    int v686 = 0;
                    uint64_t v687 = *(void *)(v683 + 8 * v1452);
                    int v688 = *(_DWORD *)(v44 + 4 * v1452);
                    uint64_t v689 = 4 * *(void *)&v681[2 * v1452];
                    uint64_t v690 = v1501;
                    uint64_t v691 = v1511;
                    do
                    {
                      if (v688 >= 1)
                      {
                        int v692 = 0;
                        uint64_t v693 = *(void *)(v683 + 8 * v1522);
                        int v694 = *(_DWORD *)(v44 + 4 * v1522);
                        uint64_t v695 = 4 * *(void *)&v681[2 * v1522];
                        uint64_t v696 = v691;
                        uint64_t v697 = v690;
                        do
                        {
                          if (v694 >= 1)
                          {
                            int v698 = 0;
                            uint64_t v699 = *(void *)(v683 + 8 * v685);
                            int v700 = *(_DWORD *)(v44 + 4 * v685);
                            uint64_t v701 = (void *)*a2;
                            uint64_t v702 = 4 * *(void *)&v681[2 * v685];
                            uint64_t v703 = v696;
                            uint64_t v704 = v697;
                            do
                            {
                              if (v700 >= 1)
                              {
                                uint64_t v705 = v701[19];
                                uint64_t v706 = (unsigned int *)((char *)v42[19] + v703);
                                int v707 = v700;
                                do
                                {
                                  uint64_t result = *v706 != 0;
                                  *(unsigned char *)(v705 + v704) = result;
                                  v705 += v699;
                                  uint64_t v706 = (_DWORD *)((char *)v706 + v702);
                                  --v707;
                                }
                                while (v707);
                              }
                              v704 += v693;
                              ++v698;
                              v703 += v695;
                            }
                            while (v698 != v694);
                          }
                          v697 += v687;
                          ++v692;
                          v696 += v689;
                        }
                        while (v692 != v688);
                      }
                      v690 += v1555;
                      ++v686;
                      v691 += v1538;
                    }
                    while (v686 != v1572);
                  }
                  v1501 += v1471;
                  v1511 += v1461;
                  ++v1491;
                }
                while (v1491 != v1481);
              }
              break;
            default:
              LODWORD(v567) = 1;
              uint64_t v568 = -20;
              do
              {
                uint64_t v567 = *(int *)(v43 + v568) * (uint64_t)(int)v567;
                v568 += 4;
              }
              while (v568);
              int v1441 = v42[6];
              if (v1441)
              {
                uint64_t v569 = 0;
                uint64_t v1421 = *v3;
                uint64_t v570 = (v45 << 30) - 0x500000000;
                uint64_t v1431 = (v45 >> 2) - 1;
                uint64_t v571 = v42[3];
                uint64_t v572 = v3[3];
                uint64_t v1470 = *(void *)(v572 + (v570 >> 29));
                int v1480 = *(_DWORD *)(v44 + (v570 >> 30));
                uint64_t v1426 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1417 = (uint64_t)((v45 << 30) - 0x400000000) >> 32;
                uint64_t v1520 = (uint64_t)((v45 << 30) - 0x200000000) >> 32;
                uint64_t v573 = (uint64_t)((v45 << 30) - 0x100000000) >> 32;
                uint64_t v1451 = (uint64_t)((v45 << 30) - 0x300000000) >> 32;
                uint64_t v1460 = 4 * *(void *)((char *)v571 + (v570 >> 29));
                uint64_t v1436 = v567;
                do
                {
                  uint64_t v574 = v1431;
                  if ((v1431 & 0x80000000) != 0)
                  {
                    uint64_t v575 = 0;
                  }
                  else
                  {
                    uint64_t v575 = 0;
                    LODWORD(result) = v569;
                    do
                    {
                      ldiv_t v576 = ldiv((int)result, *(int *)(v44 + 4 * v574));
                      uint64_t result = v576.quot;
                      v575 += *(void *)&v571[2 * v574--] * v576.rem;
                    }
                    while (v574 != -1);
                  }
                  uint64_t v577 = v1426;
                  uint64_t v1446 = v569;
                  uint64_t v578 = 0;
                  if ((v1426 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v569;
                    do
                    {
                      ldiv_t v579 = ldiv((int)result, *(int *)(v1421 + 4 * v577));
                      uint64_t result = v579.quot;
                      v578 += *(void *)(v572 + 8 * v577--) * v579.rem;
                    }
                    while (v577 != -1);
                  }
                  if (v1480 >= 1)
                  {
                    int v580 = 0;
                    uint64_t v1553 = *(void *)(v572 + 8 * v1417);
                    int v1570 = *(_DWORD *)(v44 + 4 * v1417);
                    uint64_t v1510 = 4 * v575;
                    uint64_t v1536 = 4 * *(void *)&v571[2 * v1417];
                    do
                    {
                      int v1490 = v580;
                      uint64_t v1500 = v578;
                      if (v1570 >= 1)
                      {
                        int v581 = 0;
                        uint64_t v582 = *(void *)(v572 + 8 * v1451);
                        int v583 = *(_DWORD *)(v44 + 4 * v1451);
                        uint64_t v584 = 4 * *(void *)&v571[2 * v1451];
                        uint64_t v586 = v578;
                        uint64_t v585 = v1510;
                        do
                        {
                          if (v583 >= 1)
                          {
                            int v587 = 0;
                            uint64_t v588 = *(void *)(v572 + 8 * v1520);
                            int v589 = *(_DWORD *)(v44 + 4 * v1520);
                            uint64_t v590 = 4 * *(void *)&v571[2 * v1520];
                            uint64_t v591 = v585;
                            uint64_t result = v586;
                            do
                            {
                              if (v589 >= 1)
                              {
                                int v592 = 0;
                                uint64_t v593 = *(void *)(v572 + 8 * v573);
                                int v594 = *(_DWORD *)(v44 + 4 * v573);
                                uint64_t v595 = (void *)*a2;
                                uint64_t v596 = 4 * *(void *)&v571[2 * v573];
                                uint64_t v597 = v591;
                                uint64_t v598 = result;
                                do
                                {
                                  if (v594 >= 1)
                                  {
                                    uint64_t v599 = v595[19];
                                    uint64_t v600 = (unsigned int *)((char *)v42[19] + v597);
                                    int v601 = v594;
                                    do
                                    {
                                      *(unsigned char *)(v599 + v598) = *v600 != 0;
                                      v599 += v593;
                                      uint64_t v600 = (_DWORD *)((char *)v600 + v596);
                                      --v601;
                                    }
                                    while (v601);
                                  }
                                  v598 += v588;
                                  ++v592;
                                  v597 += v590;
                                }
                                while (v592 != v589);
                              }
                              result += v582;
                              ++v587;
                              v591 += v584;
                            }
                            while (v587 != v583);
                          }
                          v586 += v1553;
                          ++v581;
                          v585 += v1536;
                        }
                        while (v581 != v1570);
                      }
                      uint64_t v578 = v1500 + v1470;
                      int v580 = v1490 + 1;
                      v1510 += v1460;
                    }
                    while (v1490 + 1 != v1480);
                  }
                  v569 += v1436;
                }
                while ((unint64_t)v1441 > v1446 + v1436);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v9 = 0;
            int v10 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v11 = v3[19];
            do
              *(unsigned char *)(v11 + v9++) = v10;
            while (*(void *)(*a2 + 48) > v9);
          }
          break;
        case 1:
          uint64_t v54 = *(void *)(*(void *)result + 160);
          if (v54)
          {
            uint64_t v55 = *(int **)(*(void *)result + 152);
            uint64_t v56 = (unsigned char *)v3[19];
            uint64_t v57 = 4 * v54;
            do
            {
              int v58 = *v55++;
              *v56++ = v58;
              v57 -= 4;
            }
            while (v57);
          }
          break;
        case 2:
          uint64_t v59 = *(int ***)result;
          uint64_t v60 = **(int ***)result;
          switch(v59[1] - *v59)
          {
            case 1:
              if (*v60 >= 1)
              {
                uint64_t v61 = 0;
                uint64_t v62 = 0;
                uint64_t v63 = v59[19];
                uint64_t v64 = v3[19];
                do
                {
                  *(unsigned char *)(v64 + v61) = v63[v62];
                  v62 += *(void *)v59[3];
                  ++v61;
                }
                while (**v59 > (int)v61);
              }
              break;
            case 2:
              int v260 = *v60;
              if (*v60 >= 1)
              {
                int v261 = 0;
                uint64_t v262 = 0;
                uint64_t v263 = 0;
                int v264 = v59[19];
                uint64_t v265 = v3[19];
                do
                {
                  int v266 = v60[1];
                  if (v266 < 1)
                  {
                    uint64_t v267 = v59[3];
                    uint64_t v268 = *((void *)v267 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v265 + v262 + result) = v264[v263];
                      uint64_t v267 = v59[3];
                      uint64_t v268 = *((void *)v267 + 1);
                      v263 += v268;
                      uint64_t v60 = *v59;
                      int v266 = (*v59)[1];
                      ++result;
                    }
                    while ((int)result < v266);
                    int v260 = *v60;
                    v262 += result;
                  }
                  uint64_t v263 = *(void *)v267 + v263 - v268 * v266;
                  ++v261;
                }
                while (v261 < v260);
              }
              break;
            case 3:
              int v269 = *v60;
              if (*v60 >= 1)
              {
                int v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = 0;
                uint64_t v273 = v59[19];
                uint64_t v274 = v3[19];
                do
                {
                  int v275 = v60[1];
                  if (v275 < 1)
                  {
                    uint64_t v279 = v59[3];
                    uint64_t v280 = *((void *)v279 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v275; ++i)
                    {
                      int v277 = v60[2];
                      if (v277 < 1)
                      {
                        uint64_t v279 = v59[3];
                        uint64_t result = *((void *)v279 + 2);
                      }
                      else
                      {
                        uint64_t v278 = 0;
                        do
                        {
                          *(unsigned char *)(v274 + v271 + v278) = v273[v272];
                          uint64_t v279 = v59[3];
                          uint64_t result = *((void *)v279 + 2);
                          v272 += result;
                          uint64_t v60 = *v59;
                          int v277 = (*v59)[2];
                          ++v278;
                        }
                        while ((int)v278 < v277);
                        v271 += v278;
                      }
                      uint64_t v280 = *((void *)v279 + 1);
                      uint64_t v272 = v280 + v272 - result * v277;
                      int v275 = v60[1];
                    }
                    int v269 = *v60;
                  }
                  uint64_t v272 = *(void *)v279 + v272 - v280 * v275;
                  ++v270;
                }
                while (v270 < v269);
              }
              break;
            case 4:
              int v281 = *v60;
              if (*v60 >= 1)
              {
                int v282 = 0;
                uint64_t v283 = 0;
                uint64_t v284 = 0;
                uint64_t v285 = v59[19];
                uint64_t v286 = v3[19];
                do
                {
                  int v287 = v60[1];
                  if (v287 < 1)
                  {
                    int v293 = v59[3];
                    uint64_t v295 = *((void *)v293 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v287; ++j)
                    {
                      int v289 = v60[2];
                      if (v289 < 1)
                      {
                        int v293 = v59[3];
                        uint64_t v294 = *((void *)v293 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v289; ++k)
                        {
                          int v291 = v60[3];
                          if (v291 < 1)
                          {
                            int v293 = v59[3];
                            uint64_t result = *((void *)v293 + 3);
                          }
                          else
                          {
                            uint64_t v292 = 0;
                            do
                            {
                              *(unsigned char *)(v286 + v283 + v292) = v285[v284];
                              int v293 = v59[3];
                              uint64_t result = *((void *)v293 + 3);
                              v284 += result;
                              uint64_t v60 = *v59;
                              int v291 = (*v59)[3];
                              ++v292;
                            }
                            while ((int)v292 < v291);
                            v283 += v292;
                          }
                          uint64_t v294 = *((void *)v293 + 2);
                          uint64_t v284 = v294 + v284 - result * v291;
                          int v289 = v60[2];
                        }
                      }
                      uint64_t v295 = *((void *)v293 + 1);
                      uint64_t v284 = v295 + v284 - v294 * v289;
                      int v287 = v60[1];
                    }
                    int v281 = *v60;
                  }
                  uint64_t v284 = *(void *)v293 + v284 - v295 * v287;
                  ++v282;
                }
                while (v282 < v281);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v251 = 0;
                uint64_t v252 = v59[19];
                uint64_t v253 = v3[19];
                do
                {
                  int v254 = *v59;
                  unint64_t v255 = (unint64_t)((char *)v59[1] - (char *)*v59) >> 2;
                  uint64_t v256 = 0;
                  uint64_t v257 = (v255 - 1);
                  if ((int)v255 - 1 >= 0)
                  {
                    uint64_t v258 = v59[3];
                    LODWORD(result) = v251;
                    do
                    {
                      ldiv_t v259 = ldiv((int)result, v254[v257]);
                      uint64_t result = v259.quot;
                      v256 += *(void *)&v258[2 * v257--] * v259.rem;
                    }
                    while (v257 != -1);
                  }
                  *(unsigned char *)(v253 + v251++) = v252[v256];
                }
                while (v251 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v65 = *(int ***)result;
          uint64_t v66 = (uint64_t *)(*(void *)result + 24);
          uint64_t v67 = v3 + 3;
          uint64_t v69 = **(void **)result;
          uint64_t v68 = *(void *)(*(void *)result + 8);
          uint64_t v70 = v68 - v69;
          switch((v68 - v69) >> 2)
          {
            case 1:
              uint64_t v71 = (v70 << 30) - 0x100000000;
              int v72 = *(_DWORD *)(v69 + (v71 >> 30));
              if (v72 >= 1)
              {
                uint64_t v73 = v71 >> 29;
                uint64_t v74 = *(void *)(*v66 + v73);
                uint64_t v75 = *(void *)(*v67 + v73);
                uint64_t v76 = (unsigned char *)v3[19];
                uint64_t v77 = v65[19];
                uint64_t v78 = 4 * v74;
                do
                {
                  *uint64_t v76 = *v77;
                  v76 += v75;
                  uint64_t v77 = (int *)((char *)v77 + v78);
                  --v72;
                }
                while (v72);
              }
              break;
            case 2:
              uint64_t v729 = (v70 << 30) - 0x200000000;
              int v730 = *(_DWORD *)(v69 + (v729 >> 30));
              if (v730 >= 1)
              {
                uint64_t v731 = 0;
                int v732 = 0;
                uint64_t v733 = 0;
                uint64_t v734 = v729 >> 29;
                uint64_t v735 = *(void *)(*v66 + v734);
                uint64_t v736 = *(void *)(*v67 + v734);
                uint64_t v737 = 4 * v735;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v738 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v739 = *(int *)((char *)*v65 + (v738 >> 30));
                  if (v739 >= 1)
                  {
                    uint64_t v740 = v738 >> 29;
                    uint64_t v741 = *(void *)((char *)v65[3] + v740);
                    uint64_t v742 = *(void *)(*v67 + v740);
                    uint64_t v743 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v731;
                    uint64_t v744 = 4 * v741;
                    do
                    {
                      *(unsigned char *)(v743 + v733) = *(_DWORD *)result;
                      v743 += v742;
                      result += v744;
                      --v739;
                    }
                    while (v739);
                  }
                  v733 += v736;
                  ++v732;
                  v731 += v737;
                }
                while (v732 != v730);
              }
              break;
            case 3:
              uint64_t v745 = (v70 << 30) - 0x300000000;
              int v746 = *(_DWORD *)(v69 + (v745 >> 30));
              if (v746 >= 1)
              {
                uint64_t v747 = 0;
                int v748 = 0;
                uint64_t v749 = 0;
                uint64_t v750 = v745 >> 29;
                uint64_t v751 = *(void *)(*v66 + v750);
                uint64_t v752 = *(void *)(*v67 + v750);
                uint64_t v753 = 4 * v751;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v754 = *(int *)((char *)*v65 + (result >> 30));
                  if (v754 >= 1)
                  {
                    int v755 = 0;
                    uint64_t v756 = result >> 29;
                    uint64_t v757 = *(void *)((char *)v65[3] + v756);
                    uint64_t result = *(void *)(*v67 + v756);
                    uint64_t v758 = 4 * v757;
                    uint64_t v759 = v747;
                    uint64_t v760 = v749;
                    do
                    {
                      uint64_t v761 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v762 = *(int *)((char *)*v65 + (v761 >> 30));
                      if (v762 >= 1)
                      {
                        uint64_t v763 = v761 >> 29;
                        uint64_t v764 = *(void *)((char *)v65[3] + v763);
                        uint64_t v765 = *(void *)(*v67 + v763);
                        uint64_t v766 = *(void *)(*a2 + 152);
                        int v767 = (_DWORD *)(*(void *)(*(void *)v5 + 152) + v759);
                        uint64_t v768 = 4 * v764;
                        do
                        {
                          *(unsigned char *)(v766 + v760) = *v767;
                          v766 += v765;
                          int v767 = (_DWORD *)((char *)v767 + v768);
                          --v762;
                        }
                        while (v762);
                      }
                      v760 += result;
                      ++v755;
                      v759 += v758;
                    }
                    while (v755 != v754);
                  }
                  v749 += v752;
                  ++v748;
                  v747 += v753;
                }
                while (v748 != v746);
              }
              break;
            case 4:
              uint64_t v769 = *(int ***)result;
              uint64_t v770 = (void *)(*(void *)result + 24);
              uint64_t v771 = v3 + 3;
              goto LABEL_563;
            case 5:
              uint64_t v772 = (v70 << 30) - 0x500000000;
              int v773 = *(_DWORD *)(v69 + (v772 >> 30));
              if (v773 >= 1)
              {
                uint64_t v774 = 0;
                uint64_t v775 = 0;
                uint64_t v776 = v772 >> 29;
                uint64_t v777 = *(void *)(*v66 + v776);
                uint64_t v778 = *(void *)(*v67 + v776);
                do
                {
                  v774 += v777;
                  v775 += v778;
                  --v773;
                }
                while (v773);
              }
              break;
            default:
              LODWORD(v708) = 1;
              uint64_t v709 = -20;
              do
              {
                uint64_t v708 = *(int *)(v68 + v709) * (uint64_t)(int)v708;
                v709 += 4;
              }
              while (v709);
              if (v65[6])
              {
                uint64_t result = 0;
                int v710 = *(void **)v5;
                v1556 = v67;
                uint64_t v1523 = v708;
                do
                {
                  uint64_t v711 = *v65;
                  unint64_t v712 = (unint64_t)((char *)v65[1] - (char *)*v65) >> 2;
                  uint64_t v713 = (v712 - 1);
                  uint64_t v1573 = result;
                  int v1539 = v710;
                  uint64_t v714 = 0;
                  if ((int)v712 - 1 >= 0)
                  {
                    uint64_t v715 = *v66;
                    do
                    {
                      ldiv_t v716 = ldiv((int)result, v711[v713]);
                      LODWORD(result) = v716.quot;
                      v714 += *(void *)(v715 + 8 * v713--) * v716.rem;
                    }
                    while (v713 != -1);
                  }
                  uint64_t v717 = *(void *)*a2;
                  unint64_t v718 = (unint64_t)(*(void *)(*a2 + 8) - v717) >> 2;
                  uint64_t v719 = *v1556;
                  uint64_t v720 = 0;
                  uint64_t v721 = (v718 - 1);
                  if ((int)v718 - 1 >= 0)
                  {
                    int quot = v1573;
                    do
                    {
                      ldiv_t v723 = ldiv(quot, *(int *)(v717 + 4 * v721));
                      int quot = v723.quot;
                      v720 += *(void *)(v719 + 8 * v721--) * v723.rem;
                    }
                    while (v721 != -1);
                  }
                  int v710 = v1539;
                  uint64_t v724 = ((v710[1] - *v710) << 30) - 0x500000000;
                  int v725 = *(int *)((char *)v711 + (v724 >> 30));
                  if (v725 >= 1)
                  {
                    uint64_t v726 = v724 >> 29;
                    uint64_t v727 = *(void *)(*v66 + v726);
                    uint64_t v728 = *(void *)(v719 + v726);
                    do
                    {
                      v714 += v727;
                      v720 += v728;
                      --v725;
                    }
                    while (v725);
                    int v710 = *(void **)v5;
                  }
                  uint64_t result = v1573 + v1523;
                }
                while (v710[6] > (unint64_t)(v1573 + v1523));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = **(_DWORD **)(*(void *)result + 152);
            int v14 = (_DWORD *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v79 = *(int ***)result;
          uint64_t v80 = **(int ***)result;
          uint64_t v81 = *(void *)(*(void *)result + 8) - (void)v80;
          switch(v81 >> 2)
          {
            case 1:
              if (*v80 >= 1)
              {
                uint64_t v82 = 0;
                uint64_t v83 = v79[19];
                uint64_t v84 = v3[19];
                uint64_t v85 = 4 * *(void *)v79[3];
                do
                {
                  *(_DWORD *)(v84 + 4 * v82) = *v83;
                  uint64_t v83 = (int *)((char *)v83 + v85);
                  ++v82;
                }
                while (*v80 > (int)v82);
              }
              break;
            case 2:
              int v305 = *v80;
              if (*v80 >= 1)
              {
                int v306 = 0;
                uint64_t v307 = 0;
                uint64_t v308 = 0;
                uint64_t v309 = v79[19];
                uint64_t v310 = v3[19];
                int v311 = v79[3];
                uint64_t v312 = *(void *)v311;
                uint64_t v313 = *((void *)v311 + 1);
                int v314 = v80[1];
                do
                {
                  if (v314 >= 1)
                  {
                    uint64_t v315 = 0;
                    do
                    {
                      *(_DWORD *)(v310 + 4 * v307 + 4 * v315) = v309[v308];
                      v308 += v313;
                      int v314 = v80[1];
                      ++v315;
                    }
                    while ((int)v315 < v314);
                    int v305 = *v80;
                    v307 += v315;
                  }
                  uint64_t v308 = v308 + v312 - v313 * v314;
                  ++v306;
                }
                while (v306 < v305);
              }
              break;
            case 3:
              uint64_t result = *v80;
              if ((int)result >= 1)
              {
                int v316 = 0;
                uint64_t v317 = 0;
                uint64_t v318 = 0;
                int v319 = v79[19];
                uint64_t v320 = v3[19];
                uint64_t v321 = v79[3];
                uint64_t v322 = *(void *)v321;
                uint64_t v323 = *((void *)v321 + 1);
                int v324 = v80[1];
                do
                {
                  if (v324 >= 1)
                  {
                    int v325 = 0;
                    uint64_t v326 = v79[3];
                    uint64_t v327 = *((void *)v321 + 2);
                    int v328 = v80[2];
                    do
                    {
                      if (v328 >= 1)
                      {
                        uint64_t v329 = 0;
                        uint64_t v330 = *((void *)v326 + 2);
                        do
                        {
                          *(_DWORD *)(v320 + 4 * v317 + 4 * v329) = v319[v318];
                          v318 += v330;
                          int v328 = v80[2];
                          ++v329;
                        }
                        while ((int)v329 < v328);
                        int v324 = v80[1];
                        v317 += v329;
                      }
                      uint64_t v318 = v318 + v323 - v327 * v328;
                      ++v325;
                    }
                    while (v325 < v324);
                    uint64_t result = *v80;
                  }
                  uint64_t v318 = v318 + v322 - v323 * v324;
                  ++v316;
                }
                while (v316 < (int)result);
              }
              break;
            case 4:
              int v331 = *v80;
              if (*v80 >= 1)
              {
                int v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = 0;
                uint64_t v335 = v79[19];
                uint64_t v336 = v3[19];
                uint64_t v337 = v79[3];
                uint64_t v338 = *(void *)v337;
                uint64_t v339 = *((void *)v337 + 1);
                int v340 = v80[1];
                do
                {
                  if (v340 >= 1)
                  {
                    int v341 = 0;
                    uint64_t v342 = v79[3];
                    uint64_t v343 = *((void *)v337 + 2);
                    int v344 = v80[2];
                    do
                    {
                      if (v344 >= 1)
                      {
                        int v345 = 0;
                        uint64_t v346 = v79[3];
                        uint64_t v347 = *((void *)v342 + 2);
                        uint64_t v348 = *((void *)v342 + 3);
                        int v349 = v80[3];
                        do
                        {
                          if (v349 >= 1)
                          {
                            uint64_t v350 = 0;
                            uint64_t v351 = *((void *)v346 + 3);
                            do
                            {
                              *(_DWORD *)(v336 + 4 * v333 + 4 * v350) = v335[v334];
                              v334 += v351;
                              int v349 = v80[3];
                              ++v350;
                            }
                            while ((int)v350 < v349);
                            int v344 = v80[2];
                            v333 += v350;
                          }
                          uint64_t v334 = v334 + v347 - v348 * v349;
                          ++v345;
                        }
                        while (v345 < v344);
                        int v340 = v80[1];
                      }
                      uint64_t v334 = v334 + v339 - v343 * v344;
                      ++v341;
                    }
                    while (v341 < v340);
                    int v331 = *v80;
                  }
                  uint64_t result = v340;
                  uint64_t v334 = v334 + v338 - v339 * v340;
                  ++v332;
                }
                while (v332 < v331);
              }
              break;
            default:
              uint64_t v296 = v3[6];
              if (v296)
              {
                uint64_t v297 = 0;
                uint64_t v298 = v79[19];
                uint64_t v299 = v3[19];
                uint64_t v300 = ((unint64_t)v81 >> 2) - 1;
                int v301 = v79[3];
                do
                {
                  uint64_t v302 = 0;
                  if ((v300 & 0x80000000) == 0)
                  {
                    uint64_t v303 = v300;
                    LODWORD(result) = v297;
                    do
                    {
                      ldiv_t v304 = ldiv((int)result, v80[v303]);
                      uint64_t result = v304.quot;
                      v302 += *(void *)&v301[2 * v303--] * v304.rem;
                    }
                    while (v303 != -1);
                  }
                  *(_DWORD *)(v299 + 4 * v297++) = v298[v302];
                }
                while (v297 != v296);
              }
              break;
          }
          break;
        case 3:
          int v86 = *(unsigned int ***)result;
          uint64_t v88 = **(void **)result;
          uint64_t v87 = *(void *)(*(void *)result + 8);
          unint64_t v89 = v87 - v88;
          switch((v87 - v88) >> 2)
          {
            case 1:
              uint64_t v90 = (v89 << 30) - 0x100000000;
              int v91 = *(_DWORD *)(v88 + (v90 >> 30));
              if (v91 >= 1)
              {
                uint64_t v92 = v90 >> 29;
                uint64_t v93 = *(void *)((char *)v86[3] + v92);
                uint64_t v94 = *(void *)(v3[3] + v92);
                uint64_t v95 = (unsigned int *)v3[19];
                uint64_t v96 = v86[19];
                uint64_t v97 = 4 * v94;
                uint64_t v98 = 4 * v93;
                do
                {
                  unsigned int *v95 = *v96;
                  uint64_t v95 = (unsigned int *)((char *)v95 + v97);
                  uint64_t v96 = (unsigned int *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              uint64_t v815 = (v89 << 30) - 0x200000000;
              int v816 = *(_DWORD *)(v88 + (v815 >> 30));
              if (v816 >= 1)
              {
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                int v819 = 0;
                uint64_t v820 = v86[3];
                uint64_t v821 = v815 >> 29;
                uint64_t v822 = *(void *)((char *)v820 + v821);
                uint64_t v823 = v3[3];
                uint64_t v824 = (v89 << 30) - 0x100000000;
                uint64_t v825 = *(void *)((char *)v820 + (v824 >> 29));
                uint64_t v826 = *(void *)(v823 + (v824 >> 29));
                uint64_t v827 = v824 >> 32;
                uint64_t v828 = 4 * *(void *)(v823 + v821);
                uint64_t v829 = 4 * v826;
                uint64_t v830 = 4 * v822;
                uint64_t v831 = 4 * v825;
                do
                {
                  uint64_t result = *(unsigned int *)(v88 + 4 * v827);
                  if ((int)result >= 1)
                  {
                    uint64_t v832 = (_DWORD *)(v3[19] + v818);
                    uint64_t v833 = (unsigned int *)((char *)v86[19] + v817);
                    do
                    {
                      *uint64_t v832 = *v833;
                      uint64_t v832 = (_DWORD *)((char *)v832 + v829);
                      uint64_t v833 = (_DWORD *)((char *)v833 + v831);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v819;
                  v818 += v828;
                  v817 += v830;
                }
                while (v819 != v816);
              }
              break;
            case 3:
              uint64_t v834 = (v89 << 30) - 0x300000000;
              int v835 = *(_DWORD *)(v88 + (v834 >> 30));
              if (v835 >= 1)
              {
                uint64_t v836 = 0;
                uint64_t v837 = 0;
                int v838 = 0;
                uint64_t v839 = v89 << 30;
                uint64_t v840 = v86[3];
                uint64_t v841 = v834 >> 29;
                uint64_t v842 = *(void *)((char *)v840 + v841);
                uint64_t v843 = v3[3];
                uint64_t v844 = *(void *)(v843 + v841);
                uint64_t v845 = (v839 - 0x200000000) >> 29;
                uint64_t v846 = *(void *)((char *)v840 + v845);
                uint64_t v847 = (v839 - 0x200000000) >> 32;
                uint64_t v848 = (v839 - 0x100000000) >> 32;
                uint64_t v849 = 4 * v844;
                uint64_t v850 = 4 * *(void *)(v843 + v845);
                uint64_t result = 4 * v842;
                uint64_t v851 = 4 * v846;
                do
                {
                  int v852 = *(_DWORD *)(v88 + 4 * v847);
                  if (v852 >= 1)
                  {
                    int v853 = 0;
                    uint64_t v854 = (void *)*a2;
                    uint64_t v855 = 4 * *(void *)(v843 + 8 * v848);
                    uint64_t v856 = 4 * *(void *)&v840[2 * v848];
                    uint64_t v857 = v836;
                    uint64_t v858 = v837;
                    do
                    {
                      int v859 = *(_DWORD *)(v88 + 4 * v848);
                      if (v859 >= 1)
                      {
                        uint64_t v860 = (_DWORD *)(v854[19] + v858);
                        uint64_t v861 = (unsigned int *)((char *)v86[19] + v857);
                        do
                        {
                          *uint64_t v860 = *v861;
                          uint64_t v860 = (_DWORD *)((char *)v860 + v855);
                          uint64_t v861 = (_DWORD *)((char *)v861 + v856);
                          --v859;
                        }
                        while (v859);
                      }
                      ++v853;
                      v858 += v850;
                      v857 += v851;
                    }
                    while (v853 != v852);
                  }
                  ++v838;
                  v837 += v849;
                  v836 += result;
                }
                while (v838 != v835);
              }
              break;
            case 4:
              uint64_t v862 = (v89 << 30) - 0x400000000;
              int v1575 = *(_DWORD *)(v88 + (v862 >> 30));
              if (v1575 >= 1)
              {
                uint64_t v863 = 0;
                uint64_t v864 = 0;
                int v865 = 0;
                uint64_t v866 = v89 << 30;
                uint64_t v867 = v86[3];
                uint64_t v868 = v862 >> 29;
                uint64_t v869 = v3[3];
                uint64_t v1558 = (v866 - 0x300000000) >> 32;
                uint64_t v870 = (v866 - 0x300000000) >> 29;
                uint64_t v871 = *(void *)((char *)v867 + v870);
                uint64_t v872 = *(void *)(v869 + v870);
                uint64_t v873 = (v866 - 0x200000000) >> 32;
                uint64_t v874 = (v866 - 0x100000000) >> 32;
                uint64_t v1541 = 4 * *(void *)(v869 + v868);
                uint64_t result = 4 * v872;
                uint64_t v1525 = 4 * *(void *)((char *)v867 + v868);
                uint64_t v875 = 4 * v871;
                do
                {
                  int v876 = *(_DWORD *)(v88 + 4 * v1558);
                  if (v876 >= 1)
                  {
                    int v877 = 0;
                    uint64_t v878 = 4 * *(void *)(v869 + 8 * v873);
                    uint64_t v879 = 4 * *(void *)&v867[2 * v873];
                    uint64_t v880 = v863;
                    uint64_t v881 = v864;
                    do
                    {
                      int v882 = *(_DWORD *)(v88 + 4 * v873);
                      if (v882 >= 1)
                      {
                        int v883 = 0;
                        uint64_t v884 = (void *)*a2;
                        uint64_t v885 = 4 * *(void *)(v869 + 8 * v874);
                        uint64_t v886 = 4 * *(void *)&v867[2 * v874];
                        uint64_t v887 = v880;
                        uint64_t v888 = v881;
                        do
                        {
                          int v889 = *(_DWORD *)(v88 + 4 * v874);
                          if (v889 >= 1)
                          {
                            uint64_t v890 = (_DWORD *)(v884[19] + v888);
                            uint64_t v891 = (unsigned int *)((char *)v86[19] + v887);
                            do
                            {
                              _DWORD *v890 = *v891;
                              uint64_t v890 = (_DWORD *)((char *)v890 + v885);
                              uint64_t v891 = (_DWORD *)((char *)v891 + v886);
                              --v889;
                            }
                            while (v889);
                          }
                          ++v883;
                          v888 += v878;
                          v887 += v879;
                        }
                        while (v883 != v882);
                      }
                      ++v877;
                      v881 += result;
                      v880 += v875;
                    }
                    while (v877 != v876);
                  }
                  ++v865;
                  v864 += v1541;
                  v863 += v1525;
                }
                while (v865 != v1575);
              }
              break;
            case 5:
              uint64_t v892 = (v89 << 30) - 0x500000000;
              int v1483 = *(_DWORD *)(v88 + (v892 >> 30));
              if (v1483 >= 1)
              {
                uint64_t v1503 = 0;
                uint64_t v1513 = 0;
                int v1493 = 0;
                uint64_t v893 = v89 << 30;
                uint64_t v894 = v86[3];
                uint64_t v895 = v892 >> 29;
                uint64_t v896 = v3[3];
                uint64_t v1473 = (v893 - 0x400000000) >> 32;
                uint64_t v897 = (v893 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v894 + v897);
                uint64_t v1559 = (v893 - 0x300000000) >> 32;
                uint64_t v898 = (v893 - 0x200000000) >> 32;
                uint64_t v899 = (v893 - 0x100000000) >> 32;
                uint64_t v1463 = 4 * *(void *)(v896 + v895);
                uint64_t v1542 = 4 * *(void *)(v896 + v897);
                uint64_t v1454 = 4 * *(void *)((char *)v894 + v895);
                uint64_t v1526 = 4 * result;
                do
                {
                  int v1576 = *(_DWORD *)(v88 + 4 * v1473);
                  if (v1576 >= 1)
                  {
                    int v900 = 0;
                    uint64_t v901 = 4 * *(void *)(v896 + 8 * v1559);
                    uint64_t v902 = 4 * *(void *)&v894[2 * v1559];
                    uint64_t v904 = v1503;
                    uint64_t v903 = v1513;
                    do
                    {
                      int v905 = *(_DWORD *)(v88 + 4 * v1559);
                      if (v905 >= 1)
                      {
                        int v906 = 0;
                        uint64_t v907 = 4 * *(void *)(v896 + 8 * v898);
                        uint64_t v908 = 4 * *(void *)&v894[2 * v898];
                        uint64_t v909 = v903;
                        uint64_t v910 = v904;
                        do
                        {
                          int v911 = *(_DWORD *)(v88 + 4 * v898);
                          if (v911 >= 1)
                          {
                            int v912 = 0;
                            uint64_t result = *a2;
                            uint64_t v913 = 4 * *(void *)(v896 + 8 * v899);
                            uint64_t v914 = 4 * *(void *)&v894[2 * v899];
                            uint64_t v915 = v909;
                            uint64_t v916 = v910;
                            do
                            {
                              int v917 = *(_DWORD *)(v88 + 4 * v899);
                              if (v917 >= 1)
                              {
                                uint64_t v918 = (_DWORD *)(*(void *)(result + 152) + v916);
                                int v919 = (unsigned int *)((char *)v86[19] + v915);
                                do
                                {
                                  *uint64_t v918 = *v919;
                                  uint64_t v918 = (_DWORD *)((char *)v918 + v913);
                                  int v919 = (_DWORD *)((char *)v919 + v914);
                                  --v917;
                                }
                                while (v917);
                              }
                              ++v912;
                              v916 += v907;
                              v915 += v908;
                            }
                            while (v912 != v911);
                          }
                          ++v906;
                          v910 += v901;
                          v909 += v902;
                        }
                        while (v906 != v905);
                      }
                      ++v900;
                      v904 += v1542;
                      v903 += v1526;
                    }
                    while (v900 != v1576);
                  }
                  v1503 += v1463;
                  v1513 += v1454;
                  ++v1493;
                }
                while (v1493 != v1483);
              }
              break;
            default:
              LODWORD(v779) = 1;
              uint64_t v780 = -20;
              do
              {
                uint64_t v779 = *(int *)(v87 + v780) * (uint64_t)(int)v779;
                v780 += 4;
              }
              while (v780);
              int v1437 = v86[6];
              if (v1437)
              {
                uint64_t result = 0;
                uint64_t v1462 = *v3;
                uint64_t v781 = (v89 << 30) - 0x500000000;
                uint64_t v1427 = (v89 >> 2) - 1;
                uint64_t v782 = v86[3];
                uint64_t v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1418 = v781 >> 32;
                uint64_t v783 = v3[3];
                uint64_t v1472 = (uint64_t)((v89 << 30) - 0x400000000) >> 32;
                uint64_t v1557 = (uint64_t)((v89 << 30) - 0x300000000) >> 32;
                uint64_t v784 = (uint64_t)((v89 << 30) - 0x200000000) >> 32;
                uint64_t v785 = (uint64_t)((v89 << 30) - 0x100000000) >> 32;
                uint64_t v1447 = 4 * *(void *)((char *)v782 + (v781 >> 29));
                uint64_t v1453 = 4 * *(void *)(v783 + (v781 >> 29));
                uint64_t v1432 = v779;
                do
                {
                  uint64_t v786 = v1427;
                  uint64_t v1442 = result;
                  uint64_t v787 = 0;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    uint64_t v788 = v1422;
                  }
                  else
                  {
                    uint64_t v788 = v1422;
                    do
                    {
                      ldiv_t v789 = ldiv((int)result, *(int *)(v88 + 4 * v786));
                      LODWORD(result) = v789.quot;
                      v787 += *(void *)&v782[2 * v786--] * v789.rem;
                    }
                    while (v786 != -1);
                  }
                  uint64_t v790 = 0;
                  if ((v788 & 0x80000000) == 0)
                  {
                    int v791 = v1442;
                    do
                    {
                      ldiv_t v792 = ldiv(v791, *(int *)(v1462 + 4 * v788));
                      int v791 = v792.quot;
                      v790 += *(void *)(v783 + 8 * v788--) * v792.rem;
                    }
                    while (v788 != -1);
                  }
                  int v1482 = *(_DWORD *)(v88 + 4 * v1418);
                  if (v1482 >= 1)
                  {
                    int v793 = 0;
                    uint64_t v1512 = 4 * v790;
                    uint64_t v1540 = 4 * *(void *)(v783 + 8 * v1472);
                    uint64_t v1502 = 4 * v787;
                    uint64_t v1524 = 4 * *(void *)&v782[2 * v1472];
                    do
                    {
                      int v1492 = v793;
                      int v1574 = *(_DWORD *)(v88 + 4 * v1472);
                      if (v1574 >= 1)
                      {
                        int v794 = 0;
                        uint64_t v795 = 4 * *(void *)(v783 + 8 * v1557);
                        uint64_t v796 = 4 * *(void *)&v782[2 * v1557];
                        uint64_t v798 = v1502;
                        uint64_t v797 = v1512;
                        do
                        {
                          int v799 = *(_DWORD *)(v88 + 4 * v1557);
                          if (v799 >= 1)
                          {
                            int v800 = 0;
                            uint64_t v801 = 4 * *(void *)(v783 + 8 * v784);
                            uint64_t v802 = 4 * *(void *)&v782[2 * v784];
                            uint64_t v803 = v798;
                            uint64_t v804 = v797;
                            do
                            {
                              int v805 = *(_DWORD *)(v88 + 4 * v784);
                              if (v805 >= 1)
                              {
                                int v806 = 0;
                                int v807 = (void *)*a2;
                                uint64_t v808 = 4 * *(void *)(v783 + 8 * v785);
                                uint64_t v809 = 4 * *(void *)&v782[2 * v785];
                                uint64_t v810 = v803;
                                uint64_t v811 = v804;
                                do
                                {
                                  int v812 = *(_DWORD *)(v88 + 4 * v785);
                                  if (v812 >= 1)
                                  {
                                    uint64_t v813 = (_DWORD *)(v807[19] + v811);
                                    uint64_t v814 = (unsigned int *)((char *)v86[19] + v810);
                                    do
                                    {
                                      _DWORD *v813 = *v814;
                                      uint64_t v813 = (_DWORD *)((char *)v813 + v808);
                                      uint64_t v814 = (_DWORD *)((char *)v814 + v809);
                                      --v812;
                                    }
                                    while (v812);
                                  }
                                  ++v806;
                                  v811 += v801;
                                  v810 += v802;
                                }
                                while (v806 != v805);
                              }
                              ++v800;
                              v804 += v795;
                              v803 += v796;
                            }
                            while (v800 != v799);
                          }
                          ++v794;
                          v797 += v1540;
                          v798 += v1524;
                        }
                        while (v794 != v1574);
                      }
                      int v793 = v1492 + 1;
                      v1512 += v1453;
                      v1502 += v1447;
                    }
                    while (v1492 + 1 != v1482);
                  }
                  uint64_t result = v1442 + v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v15 = 0;
            int v16 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v17 = v3[19];
            do
              *(unsigned char *)(v17 + v15++) = v16;
            while (*(void *)(*a2 + 48) > v15);
          }
          break;
        case 1:
          uint64_t v99 = *(void *)(*(void *)result + 160);
          if (v99)
          {
            uint64_t v100 = *(int **)(*(void *)result + 152);
            uint64_t v101 = (unsigned char *)v3[19];
            uint64_t v102 = 4 * v99;
            do
            {
              int v103 = *v100++;
              *v101++ = v103;
              v102 -= 4;
            }
            while (v102);
          }
          break;
        case 2:
          uint64_t v104 = *(int ***)result;
          uint64_t v105 = **(int ***)result;
          switch(v104[1] - *v104)
          {
            case 1:
              if (*v105 >= 1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = 0;
                uint64_t v108 = v104[19];
                uint64_t v109 = v3[19];
                do
                {
                  *(unsigned char *)(v109 + v106) = v108[v107];
                  v107 += *(void *)v104[3];
                  ++v106;
                }
                while (**v104 > (int)v106);
              }
              break;
            case 2:
              int v361 = *v105;
              if (*v105 >= 1)
              {
                int v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = 0;
                int v365 = v104[19];
                uint64_t v366 = v3[19];
                do
                {
                  int v367 = v105[1];
                  if (v367 < 1)
                  {
                    uint64_t v368 = v104[3];
                    uint64_t v369 = *((void *)v368 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v366 + v363 + result) = v365[v364];
                      uint64_t v368 = v104[3];
                      uint64_t v369 = *((void *)v368 + 1);
                      v364 += v369;
                      uint64_t v105 = *v104;
                      int v367 = (*v104)[1];
                      ++result;
                    }
                    while ((int)result < v367);
                    int v361 = *v105;
                    v363 += result;
                  }
                  uint64_t v364 = *(void *)v368 + v364 - v369 * v367;
                  ++v362;
                }
                while (v362 < v361);
              }
              break;
            case 3:
              int v370 = *v105;
              if (*v105 >= 1)
              {
                int v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = 0;
                uint64_t v374 = v104[19];
                uint64_t v375 = v3[19];
                do
                {
                  int v376 = v105[1];
                  if (v376 < 1)
                  {
                    uint64_t v380 = v104[3];
                    uint64_t v381 = *((void *)v380 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v376; ++m)
                    {
                      int v378 = v105[2];
                      if (v378 < 1)
                      {
                        uint64_t v380 = v104[3];
                        uint64_t result = *((void *)v380 + 2);
                      }
                      else
                      {
                        uint64_t v379 = 0;
                        do
                        {
                          *(unsigned char *)(v375 + v372 + v379) = v374[v373];
                          uint64_t v380 = v104[3];
                          uint64_t result = *((void *)v380 + 2);
                          v373 += result;
                          uint64_t v105 = *v104;
                          int v378 = (*v104)[2];
                          ++v379;
                        }
                        while ((int)v379 < v378);
                        v372 += v379;
                      }
                      uint64_t v381 = *((void *)v380 + 1);
                      uint64_t v373 = v381 + v373 - result * v378;
                      int v376 = v105[1];
                    }
                    int v370 = *v105;
                  }
                  uint64_t v373 = *(void *)v380 + v373 - v381 * v376;
                  ++v371;
                }
                while (v371 < v370);
              }
              break;
            case 4:
              int v382 = *v105;
              if (*v105 >= 1)
              {
                int v383 = 0;
                uint64_t v384 = 0;
                uint64_t v385 = 0;
                uint64_t v386 = v104[19];
                uint64_t v387 = v3[19];
                do
                {
                  int v388 = v105[1];
                  if (v388 < 1)
                  {
                    int v394 = v104[3];
                    uint64_t v396 = *((void *)v394 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v388; ++n)
                    {
                      int v390 = v105[2];
                      if (v390 < 1)
                      {
                        int v394 = v104[3];
                        uint64_t v395 = *((void *)v394 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v390; ++ii)
                        {
                          int v392 = v105[3];
                          if (v392 < 1)
                          {
                            int v394 = v104[3];
                            uint64_t result = *((void *)v394 + 3);
                          }
                          else
                          {
                            uint64_t v393 = 0;
                            do
                            {
                              *(unsigned char *)(v387 + v384 + v393) = v386[v385];
                              int v394 = v104[3];
                              uint64_t result = *((void *)v394 + 3);
                              v385 += result;
                              uint64_t v105 = *v104;
                              int v392 = (*v104)[3];
                              ++v393;
                            }
                            while ((int)v393 < v392);
                            v384 += v393;
                          }
                          uint64_t v395 = *((void *)v394 + 2);
                          uint64_t v385 = v395 + v385 - result * v392;
                          int v390 = v105[2];
                        }
                      }
                      uint64_t v396 = *((void *)v394 + 1);
                      uint64_t v385 = v396 + v385 - v395 * v390;
                      int v388 = v105[1];
                    }
                    int v382 = *v105;
                  }
                  uint64_t v385 = *(void *)v394 + v385 - v396 * v388;
                  ++v383;
                }
                while (v383 < v382);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v352 = 0;
                uint64_t v353 = v104[19];
                uint64_t v354 = v3[19];
                do
                {
                  int v355 = *v104;
                  unint64_t v356 = (unint64_t)((char *)v104[1] - (char *)*v104) >> 2;
                  uint64_t v357 = 0;
                  uint64_t v358 = (v356 - 1);
                  if ((int)v356 - 1 >= 0)
                  {
                    uint64_t v359 = v104[3];
                    LODWORD(result) = v352;
                    do
                    {
                      ldiv_t v360 = ldiv((int)result, v355[v358]);
                      uint64_t result = v360.quot;
                      v357 += *(void *)&v359[2 * v358--] * v360.rem;
                    }
                    while (v358 != -1);
                  }
                  *(unsigned char *)(v354 + v352++) = v353[v357];
                }
                while (v352 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v110 = *(int ***)result;
          int v111 = (uint64_t *)(*(void *)result + 24);
          uint64_t v112 = v3 + 3;
          uint64_t v114 = **(void **)result;
          uint64_t v113 = *(void *)(*(void *)result + 8);
          uint64_t v115 = v113 - v114;
          switch((v113 - v114) >> 2)
          {
            case 1:
              uint64_t v116 = (v115 << 30) - 0x100000000;
              int v117 = *(_DWORD *)(v114 + (v116 >> 30));
              if (v117 >= 1)
              {
                uint64_t v118 = v116 >> 29;
                uint64_t v119 = *(void *)(*v111 + v118);
                uint64_t v120 = *(void *)(*v112 + v118);
                uint64_t v121 = (unsigned char *)v3[19];
                uint64_t v122 = v110[19];
                uint64_t v123 = 4 * v119;
                do
                {
                  *uint64_t v121 = *v122;
                  v121 += v120;
                  uint64_t v122 = (int *)((char *)v122 + v123);
                  --v117;
                }
                while (v117);
              }
              break;
            case 2:
              uint64_t v941 = (v115 << 30) - 0x200000000;
              int v942 = *(_DWORD *)(v114 + (v941 >> 30));
              if (v942 >= 1)
              {
                uint64_t v943 = 0;
                int v944 = 0;
                uint64_t v945 = 0;
                uint64_t v946 = v941 >> 29;
                uint64_t v947 = *(void *)(*v111 + v946);
                uint64_t v948 = *(void *)(*v112 + v946);
                uint64_t v949 = 4 * v947;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v950 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v951 = *(int *)((char *)*v110 + (v950 >> 30));
                  if (v951 >= 1)
                  {
                    uint64_t v952 = v950 >> 29;
                    uint64_t v953 = *(void *)((char *)v110[3] + v952);
                    uint64_t v954 = *(void *)(*v112 + v952);
                    uint64_t v955 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v943;
                    uint64_t v956 = 4 * v953;
                    do
                    {
                      *(unsigned char *)(v955 + v945) = *(_DWORD *)result;
                      v955 += v954;
                      result += v956;
                      --v951;
                    }
                    while (v951);
                  }
                  v945 += v948;
                  ++v944;
                  v943 += v949;
                }
                while (v944 != v942);
              }
              break;
            case 3:
              uint64_t v957 = (v115 << 30) - 0x300000000;
              int v958 = *(_DWORD *)(v114 + (v957 >> 30));
              if (v958 >= 1)
              {
                uint64_t v959 = 0;
                int v960 = 0;
                uint64_t v961 = 0;
                uint64_t v962 = v957 >> 29;
                uint64_t v963 = *(void *)(*v111 + v962);
                uint64_t v964 = *(void *)(*v112 + v962);
                uint64_t v965 = 4 * v963;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v966 = *(int *)((char *)*v110 + (result >> 30));
                  if (v966 >= 1)
                  {
                    int v967 = 0;
                    uint64_t v968 = result >> 29;
                    uint64_t v969 = *(void *)((char *)v110[3] + v968);
                    uint64_t result = *(void *)(*v112 + v968);
                    uint64_t v970 = 4 * v969;
                    uint64_t v971 = v959;
                    uint64_t v972 = v961;
                    do
                    {
                      uint64_t v973 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v974 = *(int *)((char *)*v110 + (v973 >> 30));
                      if (v974 >= 1)
                      {
                        uint64_t v975 = v973 >> 29;
                        uint64_t v976 = *(void *)((char *)v110[3] + v975);
                        uint64_t v977 = *(void *)(*v112 + v975);
                        uint64_t v978 = *(void *)(*a2 + 152);
                        uint64_t v979 = (_DWORD *)(*(void *)(*(void *)v5 + 152) + v971);
                        uint64_t v980 = 4 * v976;
                        do
                        {
                          *(unsigned char *)(v978 + v972) = *v979;
                          v978 += v977;
                          uint64_t v979 = (_DWORD *)((char *)v979 + v980);
                          --v974;
                        }
                        while (v974);
                      }
                      v972 += result;
                      ++v967;
                      v971 += v970;
                    }
                    while (v967 != v966);
                  }
                  v961 += v964;
                  ++v960;
                  v959 += v965;
                }
                while (v960 != v958);
              }
              break;
            case 4:
              uint64_t v769 = *(int ***)result;
              uint64_t v770 = (void *)(*(void *)result + 24);
              uint64_t v771 = v3 + 3;
LABEL_563:
              break;
            case 5:
              uint64_t v981 = (v115 << 30) - 0x500000000;
              int v982 = *(_DWORD *)(v114 + (v981 >> 30));
              if (v982 >= 1)
              {
                uint64_t v983 = 0;
                uint64_t v984 = 0;
                uint64_t v985 = v981 >> 29;
                uint64_t v986 = *(void *)(*v111 + v985);
                uint64_t v987 = *(void *)(*v112 + v985);
                do
                {
                  v983 += v986;
                  v984 += v987;
                  --v982;
                }
                while (v982);
              }
              break;
            default:
              LODWORD(v920) = 1;
              uint64_t v921 = -20;
              do
              {
                uint64_t v920 = *(int *)(v113 + v921) * (uint64_t)(int)v920;
                v921 += 4;
              }
              while (v921);
              if (v110[6])
              {
                uint64_t result = 0;
                uint64_t v922 = *(void **)v5;
                v1560 = v112;
                uint64_t v1527 = v920;
                do
                {
                  uint64_t v923 = *v110;
                  unint64_t v924 = (unint64_t)((char *)v110[1] - (char *)*v110) >> 2;
                  uint64_t v925 = (v924 - 1);
                  uint64_t v1577 = result;
                  v1543 = v922;
                  uint64_t v926 = 0;
                  if ((int)v924 - 1 >= 0)
                  {
                    uint64_t v927 = *v111;
                    do
                    {
                      ldiv_t v928 = ldiv((int)result, v923[v925]);
                      LODWORD(result) = v928.quot;
                      v926 += *(void *)(v927 + 8 * v925--) * v928.rem;
                    }
                    while (v925 != -1);
                  }
                  uint64_t v929 = *(void *)*a2;
                  unint64_t v930 = (unint64_t)(*(void *)(*a2 + 8) - v929) >> 2;
                  uint64_t v931 = *v1560;
                  uint64_t v932 = 0;
                  uint64_t v933 = (v930 - 1);
                  if ((int)v930 - 1 >= 0)
                  {
                    int v934 = v1577;
                    do
                    {
                      ldiv_t v935 = ldiv(v934, *(int *)(v929 + 4 * v933));
                      int v934 = v935.quot;
                      v932 += *(void *)(v931 + 8 * v933--) * v935.rem;
                    }
                    while (v933 != -1);
                  }
                  uint64_t v922 = v1543;
                  uint64_t v936 = ((v922[1] - *v922) << 30) - 0x500000000;
                  int v937 = *(int *)((char *)v923 + (v936 >> 30));
                  if (v937 >= 1)
                  {
                    uint64_t v938 = v936 >> 29;
                    uint64_t v939 = *(void *)(*v111 + v938);
                    uint64_t v940 = *(void *)(v931 + v938);
                    do
                    {
                      v926 += v939;
                      v932 += v940;
                      --v937;
                    }
                    while (v937);
                    uint64_t v922 = *(void **)v5;
                  }
                  uint64_t result = v1577 + v1527;
                }
                while (v922[6] > (unint64_t)(v1577 + v1527));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(_DWORD **)(*(void *)result + 152);
            int v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
LABEL_37:
          uint64_t v27 = *(void *)(*(void *)result + 160);
          if (v27)
          {
            size_t v28 = *(const void **)(*(void *)result + 152);
            unint64_t v29 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v29, v28, 4 * v27);
          }
          break;
        case 2:
          uint64_t v124 = *(int ***)result;
          uint64_t v125 = **(int ***)result;
          uint64_t v126 = *(void *)(*(void *)result + 8) - (void)v125;
          switch(v126 >> 2)
          {
            case 1:
              if (*v125 >= 1)
              {
                uint64_t v127 = 0;
                int v128 = v124[19];
                uint64_t v129 = v3[19];
                uint64_t v130 = 4 * *(void *)v124[3];
                do
                {
                  *(_DWORD *)(v129 + 4 * v127) = *v128;
                  int v128 = (int *)((char *)v128 + v130);
                  ++v127;
                }
                while (*v125 > (int)v127);
              }
              break;
            case 2:
              int v406 = *v125;
              if (*v125 >= 1)
              {
                int v407 = 0;
                uint64_t v408 = 0;
                uint64_t v409 = 0;
                uint64_t v410 = v124[19];
                uint64_t v411 = v3[19];
                int v412 = v124[3];
                uint64_t v413 = *(void *)v412;
                uint64_t v414 = *((void *)v412 + 1);
                int v415 = v125[1];
                do
                {
                  if (v415 >= 1)
                  {
                    uint64_t v416 = 0;
                    do
                    {
                      *(_DWORD *)(v411 + 4 * v408 + 4 * v416) = v410[v409];
                      v409 += v414;
                      int v415 = v125[1];
                      ++v416;
                    }
                    while ((int)v416 < v415);
                    int v406 = *v125;
                    v408 += v416;
                  }
                  uint64_t v409 = v409 + v413 - v414 * v415;
                  ++v407;
                }
                while (v407 < v406);
              }
              break;
            case 3:
              uint64_t result = *v125;
              if ((int)result >= 1)
              {
                int v417 = 0;
                uint64_t v418 = 0;
                uint64_t v419 = 0;
                int v420 = v124[19];
                uint64_t v421 = v3[19];
                uint64_t v422 = v124[3];
                uint64_t v423 = *(void *)v422;
                uint64_t v424 = *((void *)v422 + 1);
                int v425 = v125[1];
                do
                {
                  if (v425 >= 1)
                  {
                    int v426 = 0;
                    uint64_t v427 = v124[3];
                    uint64_t v428 = *((void *)v422 + 2);
                    int v429 = v125[2];
                    do
                    {
                      if (v429 >= 1)
                      {
                        uint64_t v430 = 0;
                        uint64_t v431 = *((void *)v427 + 2);
                        do
                        {
                          *(_DWORD *)(v421 + 4 * v418 + 4 * v430) = v420[v419];
                          v419 += v431;
                          int v429 = v125[2];
                          ++v430;
                        }
                        while ((int)v430 < v429);
                        int v425 = v125[1];
                        v418 += v430;
                      }
                      uint64_t v419 = v419 + v424 - v428 * v429;
                      ++v426;
                    }
                    while (v426 < v425);
                    uint64_t result = *v125;
                  }
                  uint64_t v419 = v419 + v423 - v424 * v425;
                  ++v417;
                }
                while (v417 < (int)result);
              }
              break;
            case 4:
              int v432 = *v125;
              if (*v125 >= 1)
              {
                int v433 = 0;
                uint64_t v434 = 0;
                uint64_t v435 = 0;
                uint64_t v436 = v124[19];
                uint64_t v437 = v3[19];
                uint64_t v438 = v124[3];
                uint64_t v439 = *(void *)v438;
                uint64_t v440 = *((void *)v438 + 1);
                int v441 = v125[1];
                do
                {
                  if (v441 >= 1)
                  {
                    int v442 = 0;
                    uint64_t v443 = v124[3];
                    uint64_t v444 = *((void *)v438 + 2);
                    int v445 = v125[2];
                    do
                    {
                      if (v445 >= 1)
                      {
                        int v446 = 0;
                        uint64_t v447 = v124[3];
                        uint64_t v448 = *((void *)v443 + 2);
                        uint64_t v449 = *((void *)v443 + 3);
                        int v450 = v125[3];
                        do
                        {
                          if (v450 >= 1)
                          {
                            uint64_t v451 = 0;
                            uint64_t v452 = *((void *)v447 + 3);
                            do
                            {
                              *(_DWORD *)(v437 + 4 * v434 + 4 * v451) = v436[v435];
                              v435 += v452;
                              int v450 = v125[3];
                              ++v451;
                            }
                            while ((int)v451 < v450);
                            int v445 = v125[2];
                            v434 += v451;
                          }
                          uint64_t v435 = v435 + v448 - v449 * v450;
                          ++v446;
                        }
                        while (v446 < v445);
                        int v441 = v125[1];
                      }
                      uint64_t v435 = v435 + v440 - v444 * v445;
                      ++v442;
                    }
                    while (v442 < v441);
                    int v432 = *v125;
                  }
                  uint64_t result = v441;
                  uint64_t v435 = v435 + v439 - v440 * v441;
                  ++v433;
                }
                while (v433 < v432);
              }
              break;
            default:
              uint64_t v397 = v3[6];
              if (v397)
              {
                uint64_t v398 = 0;
                uint64_t v399 = v124[19];
                uint64_t v400 = v3[19];
                uint64_t v401 = ((unint64_t)v126 >> 2) - 1;
                int v402 = v124[3];
                do
                {
                  uint64_t v403 = 0;
                  if ((v401 & 0x80000000) == 0)
                  {
                    uint64_t v404 = v401;
                    LODWORD(result) = v398;
                    do
                    {
                      ldiv_t v405 = ldiv((int)result, v125[v404]);
                      uint64_t result = v405.quot;
                      v403 += *(void *)&v402[2 * v404--] * v405.rem;
                    }
                    while (v404 != -1);
                  }
                  *(_DWORD *)(v400 + 4 * v398++) = v399[v403];
                }
                while (v398 != v397);
              }
              break;
          }
          break;
        case 3:
          uint64_t v131 = *(unsigned int ***)result;
          uint64_t v133 = **(void **)result;
          uint64_t v132 = *(void *)(*(void *)result + 8);
          unint64_t v134 = v132 - v133;
          switch((v132 - v133) >> 2)
          {
            case 1:
              uint64_t v135 = (v134 << 30) - 0x100000000;
              int v136 = *(_DWORD *)(v133 + (v135 >> 30));
              if (v136 >= 1)
              {
                uint64_t v137 = v135 >> 29;
                uint64_t v138 = *(void *)((char *)v131[3] + v137);
                uint64_t v139 = *(void *)(v3[3] + v137);
                v140 = (unsigned int *)v3[19];
                uint64_t v141 = v131[19];
                uint64_t v142 = 4 * v139;
                uint64_t v143 = 4 * v138;
                do
                {
                  unsigned int *v140 = *v141;
                  v140 = (unsigned int *)((char *)v140 + v142);
                  uint64_t v141 = (unsigned int *)((char *)v141 + v143);
                  --v136;
                }
                while (v136);
              }
              break;
            case 2:
              uint64_t v1024 = (v134 << 30) - 0x200000000;
              int v1025 = *(_DWORD *)(v133 + (v1024 >> 30));
              if (v1025 >= 1)
              {
                uint64_t v1026 = 0;
                uint64_t v1027 = 0;
                int v1028 = 0;
                int v1029 = v131[3];
                uint64_t v1030 = v1024 >> 29;
                uint64_t v1031 = *(void *)((char *)v1029 + v1030);
                uint64_t v1032 = v3[3];
                uint64_t v1033 = (v134 << 30) - 0x100000000;
                uint64_t v1034 = *(void *)((char *)v1029 + (v1033 >> 29));
                uint64_t v1035 = *(void *)(v1032 + (v1033 >> 29));
                uint64_t v1036 = v1033 >> 32;
                uint64_t v1037 = 4 * *(void *)(v1032 + v1030);
                uint64_t v1038 = 4 * v1035;
                uint64_t v1039 = 4 * v1031;
                uint64_t v1040 = 4 * v1034;
                do
                {
                  uint64_t result = *(unsigned int *)(v133 + 4 * v1036);
                  if ((int)result >= 1)
                  {
                    uint64_t v1041 = (_DWORD *)(v3[19] + v1027);
                    uint64_t v1042 = (unsigned int *)((char *)v131[19] + v1026);
                    do
                    {
                      *uint64_t v1041 = *v1042;
                      uint64_t v1041 = (_DWORD *)((char *)v1041 + v1038);
                      uint64_t v1042 = (_DWORD *)((char *)v1042 + v1040);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v1028;
                  v1027 += v1037;
                  v1026 += v1039;
                }
                while (v1028 != v1025);
              }
              break;
            case 3:
              uint64_t v1043 = (v134 << 30) - 0x300000000;
              int v1044 = *(_DWORD *)(v133 + (v1043 >> 30));
              if (v1044 >= 1)
              {
                uint64_t v1045 = 0;
                uint64_t v1046 = 0;
                int v1047 = 0;
                uint64_t v1048 = v134 << 30;
                uint64_t v1049 = v131[3];
                uint64_t v1050 = v1043 >> 29;
                uint64_t v1051 = *(void *)((char *)v1049 + v1050);
                uint64_t v1052 = v3[3];
                uint64_t v1053 = *(void *)(v1052 + v1050);
                uint64_t v1054 = (v1048 - 0x200000000) >> 29;
                uint64_t v1055 = *(void *)((char *)v1049 + v1054);
                uint64_t v1056 = (v1048 - 0x200000000) >> 32;
                uint64_t v1057 = (v1048 - 0x100000000) >> 32;
                uint64_t v1058 = 4 * v1053;
                uint64_t v1059 = 4 * *(void *)(v1052 + v1054);
                uint64_t result = 4 * v1051;
                uint64_t v1060 = 4 * v1055;
                do
                {
                  int v1061 = *(_DWORD *)(v133 + 4 * v1056);
                  if (v1061 >= 1)
                  {
                    int v1062 = 0;
                    uint64_t v1063 = (void *)*a2;
                    uint64_t v1064 = 4 * *(void *)(v1052 + 8 * v1057);
                    uint64_t v1065 = 4 * *(void *)&v1049[2 * v1057];
                    uint64_t v1066 = v1045;
                    uint64_t v1067 = v1046;
                    do
                    {
                      int v1068 = *(_DWORD *)(v133 + 4 * v1057);
                      if (v1068 >= 1)
                      {
                        uint64_t v1069 = (_DWORD *)(v1063[19] + v1067);
                        uint64_t v1070 = (unsigned int *)((char *)v131[19] + v1066);
                        do
                        {
                          *uint64_t v1069 = *v1070;
                          uint64_t v1069 = (_DWORD *)((char *)v1069 + v1064);
                          uint64_t v1070 = (_DWORD *)((char *)v1070 + v1065);
                          --v1068;
                        }
                        while (v1068);
                      }
                      ++v1062;
                      v1067 += v1059;
                      v1066 += v1060;
                    }
                    while (v1062 != v1061);
                  }
                  ++v1047;
                  v1046 += v1058;
                  v1045 += result;
                }
                while (v1047 != v1044);
              }
              break;
            case 4:
              uint64_t v1071 = (v134 << 30) - 0x400000000;
              int v1579 = *(_DWORD *)(v133 + (v1071 >> 30));
              if (v1579 >= 1)
              {
                uint64_t v1072 = 0;
                uint64_t v1073 = 0;
                int v1074 = 0;
                uint64_t v1075 = v134 << 30;
                uint64_t v1076 = v131[3];
                uint64_t v1077 = v1071 >> 29;
                uint64_t v1078 = v3[3];
                uint64_t v1562 = (v1075 - 0x300000000) >> 32;
                uint64_t v1079 = (v1075 - 0x300000000) >> 29;
                uint64_t v1080 = *(void *)((char *)v1076 + v1079);
                uint64_t v1081 = *(void *)(v1078 + v1079);
                uint64_t v1082 = (v1075 - 0x200000000) >> 32;
                uint64_t v1083 = (v1075 - 0x100000000) >> 32;
                uint64_t v1545 = 4 * *(void *)(v1078 + v1077);
                uint64_t result = 4 * v1081;
                uint64_t v1529 = 4 * *(void *)((char *)v1076 + v1077);
                uint64_t v1084 = 4 * v1080;
                do
                {
                  int v1085 = *(_DWORD *)(v133 + 4 * v1562);
                  if (v1085 >= 1)
                  {
                    int v1086 = 0;
                    uint64_t v1087 = 4 * *(void *)(v1078 + 8 * v1082);
                    uint64_t v1088 = 4 * *(void *)&v1076[2 * v1082];
                    uint64_t v1089 = v1072;
                    uint64_t v1090 = v1073;
                    do
                    {
                      int v1091 = *(_DWORD *)(v133 + 4 * v1082);
                      if (v1091 >= 1)
                      {
                        int v1092 = 0;
                        uint64_t v1093 = (void *)*a2;
                        uint64_t v1094 = 4 * *(void *)(v1078 + 8 * v1083);
                        uint64_t v1095 = 4 * *(void *)&v1076[2 * v1083];
                        uint64_t v1096 = v1089;
                        uint64_t v1097 = v1090;
                        do
                        {
                          int v1098 = *(_DWORD *)(v133 + 4 * v1083);
                          if (v1098 >= 1)
                          {
                            uint64_t v1099 = (_DWORD *)(v1093[19] + v1097);
                            ldiv_t v1100 = (unsigned int *)((char *)v131[19] + v1096);
                            do
                            {
                              *uint64_t v1099 = *v1100;
                              uint64_t v1099 = (_DWORD *)((char *)v1099 + v1094);
                              ldiv_t v1100 = (_DWORD *)((char *)v1100 + v1095);
                              --v1098;
                            }
                            while (v1098);
                          }
                          ++v1092;
                          v1097 += v1087;
                          v1096 += v1088;
                        }
                        while (v1092 != v1091);
                      }
                      ++v1086;
                      v1090 += result;
                      v1089 += v1084;
                    }
                    while (v1086 != v1085);
                  }
                  ++v1074;
                  v1073 += v1545;
                  v1072 += v1529;
                }
                while (v1074 != v1579);
              }
              break;
            case 5:
              uint64_t v1101 = (v134 << 30) - 0x500000000;
              int v1485 = *(_DWORD *)(v133 + (v1101 >> 30));
              if (v1485 >= 1)
              {
                uint64_t v1505 = 0;
                uint64_t v1515 = 0;
                int v1495 = 0;
                uint64_t v1102 = v134 << 30;
                uint64_t v1103 = v131[3];
                uint64_t v1104 = v1101 >> 29;
                uint64_t v1105 = v3[3];
                uint64_t v1475 = (v1102 - 0x400000000) >> 32;
                uint64_t v1106 = (v1102 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v1103 + v1106);
                uint64_t v1563 = (v1102 - 0x300000000) >> 32;
                uint64_t v1107 = (v1102 - 0x200000000) >> 32;
                uint64_t v1108 = (v1102 - 0x100000000) >> 32;
                uint64_t v1465 = 4 * *(void *)(v1105 + v1104);
                uint64_t v1546 = 4 * *(void *)(v1105 + v1106);
                uint64_t v1456 = 4 * *(void *)((char *)v1103 + v1104);
                uint64_t v1530 = 4 * result;
                do
                {
                  int v1580 = *(_DWORD *)(v133 + 4 * v1475);
                  if (v1580 >= 1)
                  {
                    int v1109 = 0;
                    uint64_t v1110 = 4 * *(void *)(v1105 + 8 * v1563);
                    uint64_t v1111 = 4 * *(void *)&v1103[2 * v1563];
                    uint64_t v1113 = v1505;
                    uint64_t v1112 = v1515;
                    do
                    {
                      int v1114 = *(_DWORD *)(v133 + 4 * v1563);
                      if (v1114 >= 1)
                      {
                        int v1115 = 0;
                        uint64_t v1116 = 4 * *(void *)(v1105 + 8 * v1107);
                        uint64_t v1117 = 4 * *(void *)&v1103[2 * v1107];
                        uint64_t v1118 = v1112;
                        uint64_t v1119 = v1113;
                        do
                        {
                          int v1120 = *(_DWORD *)(v133 + 4 * v1107);
                          if (v1120 >= 1)
                          {
                            int v1121 = 0;
                            uint64_t result = *a2;
                            uint64_t v1122 = 4 * *(void *)(v1105 + 8 * v1108);
                            uint64_t v1123 = 4 * *(void *)&v1103[2 * v1108];
                            uint64_t v1124 = v1118;
                            uint64_t v1125 = v1119;
                            do
                            {
                              int v1126 = *(_DWORD *)(v133 + 4 * v1108);
                              if (v1126 >= 1)
                              {
                                uint64_t v1127 = (_DWORD *)(*(void *)(result + 152) + v1125);
                                uint64_t v1128 = (unsigned int *)((char *)v131[19] + v1124);
                                do
                                {
                                  *uint64_t v1127 = *v1128;
                                  uint64_t v1127 = (_DWORD *)((char *)v1127 + v1122);
                                  uint64_t v1128 = (_DWORD *)((char *)v1128 + v1123);
                                  --v1126;
                                }
                                while (v1126);
                              }
                              ++v1121;
                              v1125 += v1116;
                              v1124 += v1117;
                            }
                            while (v1121 != v1120);
                          }
                          ++v1115;
                          v1119 += v1110;
                          v1118 += v1111;
                        }
                        while (v1115 != v1114);
                      }
                      ++v1109;
                      v1113 += v1546;
                      v1112 += v1530;
                    }
                    while (v1109 != v1580);
                  }
                  v1505 += v1465;
                  v1515 += v1456;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              LODWORD(v988) = 1;
              uint64_t v989 = -20;
              do
              {
                uint64_t v988 = *(int *)(v132 + v989) * (uint64_t)(int)v988;
                v989 += 4;
              }
              while (v989);
              int v1438 = v131[6];
              if (v1438)
              {
                uint64_t result = 0;
                uint64_t v1464 = *v3;
                uint64_t v990 = (v134 << 30) - 0x500000000;
                uint64_t v1428 = (v134 >> 2) - 1;
                uint64_t v991 = v131[3];
                uint64_t v1423 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1419 = v990 >> 32;
                uint64_t v992 = v3[3];
                uint64_t v1474 = (uint64_t)((v134 << 30) - 0x400000000) >> 32;
                uint64_t v1561 = (uint64_t)((v134 << 30) - 0x300000000) >> 32;
                uint64_t v993 = (uint64_t)((v134 << 30) - 0x200000000) >> 32;
                uint64_t v994 = (uint64_t)((v134 << 30) - 0x100000000) >> 32;
                uint64_t v1448 = 4 * *(void *)((char *)v991 + (v990 >> 29));
                uint64_t v1455 = 4 * *(void *)(v992 + (v990 >> 29));
                uint64_t v1433 = v988;
                do
                {
                  uint64_t v995 = v1428;
                  uint64_t v1443 = result;
                  uint64_t v996 = 0;
                  if ((v1428 & 0x80000000) != 0)
                  {
                    uint64_t v997 = v1423;
                  }
                  else
                  {
                    uint64_t v997 = v1423;
                    do
                    {
                      ldiv_t v998 = ldiv((int)result, *(int *)(v133 + 4 * v995));
                      LODWORD(result) = v998.quot;
                      v996 += *(void *)&v991[2 * v995--] * v998.rem;
                    }
                    while (v995 != -1);
                  }
                  uint64_t v999 = 0;
                  if ((v997 & 0x80000000) == 0)
                  {
                    int v1000 = v1443;
                    do
                    {
                      ldiv_t v1001 = ldiv(v1000, *(int *)(v1464 + 4 * v997));
                      int v1000 = v1001.quot;
                      v999 += *(void *)(v992 + 8 * v997--) * v1001.rem;
                    }
                    while (v997 != -1);
                  }
                  int v1484 = *(_DWORD *)(v133 + 4 * v1419);
                  if (v1484 >= 1)
                  {
                    int v1002 = 0;
                    uint64_t v1514 = 4 * v999;
                    uint64_t v1544 = 4 * *(void *)(v992 + 8 * v1474);
                    uint64_t v1504 = 4 * v996;
                    uint64_t v1528 = 4 * *(void *)&v991[2 * v1474];
                    do
                    {
                      int v1494 = v1002;
                      int v1578 = *(_DWORD *)(v133 + 4 * v1474);
                      if (v1578 >= 1)
                      {
                        int v1003 = 0;
                        uint64_t v1004 = 4 * *(void *)(v992 + 8 * v1561);
                        uint64_t v1005 = 4 * *(void *)&v991[2 * v1561];
                        uint64_t v1007 = v1504;
                        uint64_t v1006 = v1514;
                        do
                        {
                          int v1008 = *(_DWORD *)(v133 + 4 * v1561);
                          if (v1008 >= 1)
                          {
                            int v1009 = 0;
                            uint64_t v1010 = 4 * *(void *)(v992 + 8 * v993);
                            uint64_t v1011 = 4 * *(void *)&v991[2 * v993];
                            uint64_t v1012 = v1007;
                            uint64_t v1013 = v1006;
                            do
                            {
                              int v1014 = *(_DWORD *)(v133 + 4 * v993);
                              if (v1014 >= 1)
                              {
                                int v1015 = 0;
                                uint64_t v1016 = (void *)*a2;
                                uint64_t v1017 = 4 * *(void *)(v992 + 8 * v994);
                                uint64_t v1018 = 4 * *(void *)&v991[2 * v994];
                                uint64_t v1019 = v1012;
                                uint64_t v1020 = v1013;
                                do
                                {
                                  int v1021 = *(_DWORD *)(v133 + 4 * v994);
                                  if (v1021 >= 1)
                                  {
                                    int v1022 = (_DWORD *)(v1016[19] + v1020);
                                    int v1023 = (unsigned int *)((char *)v131[19] + v1019);
                                    do
                                    {
                                      *int v1022 = *v1023;
                                      int v1022 = (_DWORD *)((char *)v1022 + v1017);
                                      int v1023 = (_DWORD *)((char *)v1023 + v1018);
                                      --v1021;
                                    }
                                    while (v1021);
                                  }
                                  ++v1015;
                                  v1020 += v1010;
                                  v1019 += v1011;
                                }
                                while (v1015 != v1014);
                              }
                              ++v1009;
                              v1013 += v1004;
                              v1012 += v1005;
                            }
                            while (v1009 != v1008);
                          }
                          ++v1003;
                          v1006 += v1544;
                          v1007 += v1528;
                        }
                        while (v1003 != v1578);
                      }
                      int v1002 = v1494 + 1;
                      v1514 += v1455;
                      v1504 += v1448;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  uint64_t result = v1443 + v1433;
                }
                while ((unint64_t)v1438 > v1443 + v1433);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v3[6];
          if (v21)
          {
            uint64_t v22 = **(int **)(*(void *)result + 152);
            uint64_t v23 = (void *)v3[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v144 = *(void *)(*(void *)result + 160);
          if (v144)
          {
            uint64_t v145 = *(int **)(*(void *)result + 152);
            uint64_t v146 = (void *)v3[19];
            uint64_t v147 = 4 * v144;
            do
            {
              uint64_t v148 = *v145++;
              *v146++ = v148;
              v147 -= 4;
            }
            while (v147);
          }
          break;
        case 2:
          unint64_t v149 = *(int ***)result;
          uint64_t v150 = **(int ***)result;
          uint64_t v151 = *(void *)(*(void *)result + 8) - (void)v150;
          switch(v151 >> 2)
          {
            case 1:
              uint64_t v152 = *v150;
              if ((int)v152 >= 1)
              {
                uint64_t v153 = v149[19];
                uint64_t v154 = (void *)v3[19];
                uint64_t v155 = 4 * *(void *)v149[3];
                do
                {
                  *v154++ = *v153;
                  uint64_t v153 = (int *)((char *)v153 + v155);
                  --v152;
                }
                while (v152);
              }
              break;
            case 2:
              int v462 = *v150;
              if (*v150 >= 1)
              {
                int v463 = 0;
                uint64_t v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = v149[19];
                uint64_t v467 = v3[19];
                uint64_t v468 = v150[1];
                uint64_t v469 = v149[3];
                uint64_t v471 = *(void *)v469;
                uint64_t v470 = *((void *)v469 + 1);
                uint64_t v472 = v471 - v470 * v468;
                do
                {
                  int v473 = v468;
                  if ((int)v468 >= 1)
                  {
                    do
                    {
                      uint64_t result = v466[v465];
                      *(void *)(v467 + 8 * v464++) = result;
                      v465 += v470;
                      --v473;
                    }
                    while (v473);
                  }
                  v465 += v472;
                  ++v463;
                }
                while (v463 != v462);
              }
              break;
            case 3:
              int v474 = *v150;
              if (*v150 >= 1)
              {
                int v475 = 0;
                uint64_t result = 0;
                uint64_t v476 = 0;
                int v477 = v149[19];
                uint64_t v478 = v3[19];
                uint64_t v479 = v150[1];
                uint64_t v480 = v149[3];
                uint64_t v481 = *((void *)v480 + 1);
                uint64_t v482 = *(void *)v480 - v481 * v479;
                do
                {
                  if ((int)v479 < 1)
                  {
                    uint64_t v489 = result;
                  }
                  else
                  {
                    int v483 = 0;
                    uint64_t v484 = v150[2];
                    uint64_t v485 = v149[3];
                    uint64_t v486 = v481 - *((void *)v480 + 2) * v484;
                    do
                    {
                      if ((int)v484 < 1)
                      {
                        uint64_t v489 = result;
                      }
                      else
                      {
                        uint64_t v487 = *((void *)v485 + 2);
                        int v488 = v484;
                        do
                        {
                          uint64_t v489 = result + 1;
                          *(void *)(v478 + 8 * result) = v477[v476];
                          v476 += v487;
                          ++result;
                          --v488;
                        }
                        while (v488);
                      }
                      v476 += v486;
                      ++v483;
                      uint64_t result = v489;
                    }
                    while (v483 != v479);
                  }
                  v476 += v482;
                  ++v475;
                  uint64_t result = v489;
                }
                while (v475 != v474);
              }
              break;
            case 4:
              int v490 = *v150;
              if (*v150 >= 1)
              {
                int v491 = 0;
                uint64_t result = 0;
                uint64_t v492 = 0;
                uint64_t v493 = v149[19];
                uint64_t v494 = v3[19];
                uint64_t v495 = v150[1];
                uint64_t v496 = v149[3];
                uint64_t v497 = *((void *)v496 + 1);
                uint64_t v498 = *(void *)v496 - v497 * v495;
                do
                {
                  if ((int)v495 < 1)
                  {
                    uint64_t v509 = result;
                  }
                  else
                  {
                    int v499 = 0;
                    uint64_t v500 = v150[2];
                    uint64_t v501 = v149[3];
                    uint64_t v502 = v497 - *((void *)v496 + 2) * v500;
                    do
                    {
                      if ((int)v500 < 1)
                      {
                        uint64_t v509 = result;
                      }
                      else
                      {
                        int v503 = 0;
                        uint64_t v504 = v150[3];
                        ldiv_t v505 = v149[3];
                        uint64_t v506 = *((void *)v501 + 2) - *((void *)v501 + 3) * v504;
                        do
                        {
                          if ((int)v504 < 1)
                          {
                            uint64_t v509 = result;
                          }
                          else
                          {
                            uint64_t v507 = *((void *)v505 + 3);
                            int v508 = v504;
                            do
                            {
                              uint64_t v509 = result + 1;
                              *(void *)(v494 + 8 * result) = v493[v492];
                              v492 += v507;
                              ++result;
                              --v508;
                            }
                            while (v508);
                          }
                          v492 += v506;
                          ++v503;
                          uint64_t result = v509;
                        }
                        while (v503 != v500);
                      }
                      v492 += v502;
                      ++v499;
                      uint64_t result = v509;
                    }
                    while (v499 != v495);
                  }
                  v492 += v498;
                  ++v491;
                  uint64_t result = v509;
                }
                while (v491 != v490);
              }
              break;
            default:
              uint64_t v453 = v3[6];
              if (v453)
              {
                uint64_t v454 = 0;
                uint64_t v455 = v149[19];
                uint64_t v456 = v3[19];
                uint64_t v457 = ((unint64_t)v151 >> 2) - 1;
                uint64_t v458 = v149[3];
                do
                {
                  uint64_t v459 = 0;
                  if ((v457 & 0x80000000) == 0)
                  {
                    uint64_t v460 = v457;
                    LODWORD(result) = v454;
                    do
                    {
                      ldiv_t v461 = ldiv((int)result, v150[v460]);
                      uint64_t result = v461.quot;
                      v459 += *(void *)&v458[2 * v460--] * v461.rem;
                    }
                    while (v460 != -1);
                  }
                  *(void *)(v456 + 8 * v454++) = v455[v459];
                }
                while (v454 != v453);
              }
              break;
          }
          break;
        case 3:
          v156 = *(unsigned int ***)result;
          uint64_t v158 = **(void **)result;
          uint64_t v157 = *(void *)(*(void *)result + 8);
          unint64_t v159 = v157 - v158;
          switch((v157 - v158) >> 2)
          {
            case 1:
              uint64_t v160 = (v159 << 30) - 0x100000000;
              int v161 = *(_DWORD *)(v158 + (v160 >> 30));
              if (v161 >= 1)
              {
                uint64_t v162 = v160 >> 29;
                uint64_t v163 = *(void *)((char *)v156[3] + v162);
                uint64_t v164 = *(void *)(v3[3] + v162);
                uint64_t v165 = (void *)v3[19];
                uint64_t v166 = v156[19];
                uint64_t v167 = 8 * v164;
                uint64_t v168 = 4 * v163;
                do
                {
                  *uint64_t v165 = (int)*v166;
                  uint64_t v165 = (void *)((char *)v165 + v167);
                  uint64_t v166 = (unsigned int *)((char *)v166 + v168);
                  --v161;
                }
                while (v161);
              }
              break;
            case 2:
              uint64_t v1164 = (v159 << 30) - 0x200000000;
              int v1165 = *(_DWORD *)(v158 + (v1164 >> 30));
              if (v1165 >= 1)
              {
                uint64_t v1166 = 0;
                uint64_t v1167 = 0;
                int v1168 = 0;
                uint64_t v1169 = v156[3];
                uint64_t v1170 = v1164 >> 29;
                uint64_t v1171 = *(void *)((char *)v1169 + v1170);
                uint64_t v1172 = v3[3];
                uint64_t result = *(void *)(v1172 + v1170);
                uint64_t v1173 = (v159 << 30) - 0x100000000;
                uint64_t v1174 = *(void *)((char *)v1169 + (v1173 >> 29));
                uint64_t v1175 = *(void *)(v1172 + (v1173 >> 29));
                int v1176 = *(_DWORD *)(v158 + (v1173 >> 30));
                uint64_t v1177 = 8 * result;
                uint64_t v1178 = 8 * v1175;
                uint64_t v1179 = 4 * v1171;
                uint64_t v1180 = 4 * v1174;
                do
                {
                  if (v1176 >= 1)
                  {
                    uint64_t result = v3[19] + v1167;
                    uint64_t v1181 = (int *)((char *)v156[19] + v1166);
                    int v1182 = v1176;
                    do
                    {
                      *(void *)uint64_t result = *v1181;
                      result += v1178;
                      uint64_t v1181 = (int *)((char *)v1181 + v1180);
                      --v1182;
                    }
                    while (v1182);
                  }
                  ++v1168;
                  v1167 += v1177;
                  v1166 += v1179;
                }
                while (v1168 != v1165);
              }
              break;
            case 3:
              uint64_t v1183 = (v159 << 30) - 0x300000000;
              int v1184 = *(_DWORD *)(v158 + (v1183 >> 30));
              if (v1184 >= 1)
              {
                uint64_t v1185 = 0;
                uint64_t v1186 = 0;
                int v1187 = 0;
                int v1188 = v156[3];
                uint64_t v1189 = v1183 >> 29;
                uint64_t v1190 = *(void *)((char *)v1188 + v1189);
                uint64_t v1191 = v3[3];
                uint64_t v1192 = *(void *)(v1191 + v1189);
                uint64_t v1193 = v159 << 30;
                uint64_t v1194 = (v159 << 30) - 0x200000000;
                uint64_t v1195 = *(void *)((char *)v1188 + (v1194 >> 29));
                uint64_t v1196 = *(void *)(v1191 + (v1194 >> 29));
                int v1197 = *(_DWORD *)(v158 + (v1194 >> 30));
                uint64_t v1198 = (v1193 - 0x100000000) >> 32;
                uint64_t v1199 = 8 * v1192;
                uint64_t v1200 = 8 * v1196;
                uint64_t result = 4 * v1190;
                uint64_t v1201 = 4 * v1195;
                do
                {
                  if (v1197 >= 1)
                  {
                    int v1202 = 0;
                    int v1203 = *(_DWORD *)(v158 + 4 * v1198);
                    int v1204 = (void *)*a2;
                    uint64_t v1205 = 8 * *(void *)(v1191 + 8 * v1198);
                    uint64_t v1206 = 4 * *(void *)&v1188[2 * v1198];
                    uint64_t v1207 = v1185;
                    uint64_t v1208 = v1186;
                    do
                    {
                      if (v1203 >= 1)
                      {
                        uint64_t v1209 = (void *)(v1204[19] + v1208);
                        int v1210 = (int *)((char *)v156[19] + v1207);
                        int v1211 = v1203;
                        do
                        {
                          *uint64_t v1209 = *v1210;
                          uint64_t v1209 = (void *)((char *)v1209 + v1205);
                          int v1210 = (int *)((char *)v1210 + v1206);
                          --v1211;
                        }
                        while (v1211);
                      }
                      ++v1202;
                      v1208 += v1200;
                      v1207 += v1201;
                    }
                    while (v1202 != v1197);
                  }
                  ++v1187;
                  v1186 += v1199;
                  v1185 += result;
                }
                while (v1187 != v1184);
              }
              break;
            case 4:
              uint64_t v1212 = (v159 << 30) - 0x400000000;
              int v1582 = *(_DWORD *)(v158 + (v1212 >> 30));
              if (v1582 >= 1)
              {
                uint64_t v1213 = 0;
                uint64_t v1214 = 0;
                int v1215 = 0;
                int v1216 = v156[3];
                uint64_t v1217 = v1212 >> 29;
                uint64_t v1218 = v159 << 30;
                uint64_t v1219 = v3[3];
                uint64_t v1220 = (v1218 - 0x300000000) >> 29;
                uint64_t v1221 = *(void *)((char *)v1216 + v1220);
                uint64_t v1222 = v1218 - 0x200000000;
                uint64_t v1223 = v1218 - 0x100000000;
                uint64_t v1224 = *(void *)(v1219 + v1220);
                int v1225 = *(_DWORD *)(v158 + ((v1218 - 0x300000000) >> 30));
                uint64_t v1532 = v1222 >> 32;
                uint64_t v1226 = v1223 >> 32;
                uint64_t v1565 = 8 * *(void *)(v1219 + v1217);
                uint64_t result = 8 * v1224;
                uint64_t v1548 = 4 * *(void *)((char *)v1216 + v1217);
                uint64_t v1227 = 4 * v1221;
                do
                {
                  if (v1225 >= 1)
                  {
                    int v1228 = 0;
                    int v1229 = *(_DWORD *)(v158 + 4 * v1532);
                    uint64_t v1230 = 8 * *(void *)(v1219 + 8 * v1532);
                    uint64_t v1231 = 4 * *(void *)&v1216[2 * v1532];
                    uint64_t v1232 = v1213;
                    uint64_t v1233 = v1214;
                    do
                    {
                      if (v1229 >= 1)
                      {
                        int v1234 = 0;
                        int v1235 = *(_DWORD *)(v158 + 4 * v1226);
                        ldiv_t v1236 = (void *)*a2;
                        uint64_t v1237 = 8 * *(void *)(v1219 + 8 * v1226);
                        uint64_t v1238 = 4 * *(void *)&v1216[2 * v1226];
                        uint64_t v1239 = v1232;
                        uint64_t v1240 = v1233;
                        do
                        {
                          if (v1235 >= 1)
                          {
                            uint64_t v1241 = (void *)(v1236[19] + v1240);
                            int v1242 = (int *)((char *)v156[19] + v1239);
                            int v1243 = v1235;
                            do
                            {
                              *uint64_t v1241 = *v1242;
                              uint64_t v1241 = (void *)((char *)v1241 + v1237);
                              int v1242 = (int *)((char *)v1242 + v1238);
                              --v1243;
                            }
                            while (v1243);
                          }
                          ++v1234;
                          v1240 += v1230;
                          v1239 += v1231;
                        }
                        while (v1234 != v1229);
                      }
                      ++v1228;
                      v1233 += result;
                      v1232 += v1227;
                    }
                    while (v1228 != v1225);
                  }
                  ++v1215;
                  v1214 += v1565;
                  v1213 += v1548;
                }
                while (v1215 != v1582);
              }
              break;
            case 5:
              uint64_t v1244 = (v159 << 30) - 0x500000000;
              int v1487 = *(_DWORD *)(v158 + (v1244 >> 30));
              if (v1487 >= 1)
              {
                uint64_t v1507 = 0;
                uint64_t v1517 = 0;
                int v1497 = 0;
                int v1245 = v156[3];
                uint64_t v1246 = v1244 >> 29;
                uint64_t v1247 = v3[3];
                uint64_t v1248 = (v159 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1245 + (v1248 >> 29));
                int v1583 = *(_DWORD *)(v158 + (v1248 >> 30));
                uint64_t v1458 = (uint64_t)((v159 << 30) - 0x300000000) >> 32;
                uint64_t v1533 = (uint64_t)((v159 << 30) - 0x200000000) >> 32;
                uint64_t v1249 = (uint64_t)((v159 << 30) - 0x100000000) >> 32;
                uint64_t v1477 = 8 * *(void *)(v1247 + v1246);
                uint64_t v1566 = 8 * *(void *)(v1247 + (v1248 >> 29));
                uint64_t v1467 = 4 * *(void *)((char *)v1245 + v1246);
                uint64_t v1549 = 4 * result;
                do
                {
                  if (v1583 >= 1)
                  {
                    int v1250 = 0;
                    int v1251 = *(_DWORD *)(v158 + 4 * v1458);
                    uint64_t v1252 = 8 * *(void *)(v1247 + 8 * v1458);
                    uint64_t v1253 = 4 * *(void *)&v1245[2 * v1458];
                    uint64_t v1255 = v1507;
                    uint64_t v1254 = v1517;
                    do
                    {
                      if (v1251 >= 1)
                      {
                        int v1256 = 0;
                        int v1257 = *(_DWORD *)(v158 + 4 * v1533);
                        uint64_t v1258 = 8 * *(void *)(v1247 + 8 * v1533);
                        uint64_t v1259 = 4 * *(void *)&v1245[2 * v1533];
                        uint64_t v1260 = v1254;
                        uint64_t v1261 = v1255;
                        do
                        {
                          if (v1257 >= 1)
                          {
                            int v1262 = 0;
                            int v1263 = *(_DWORD *)(v158 + 4 * v1249);
                            uint64_t v1264 = (void *)*a2;
                            uint64_t v1265 = 8 * *(void *)(v1247 + 8 * v1249);
                            uint64_t v1266 = 4 * *(void *)&v1245[2 * v1249];
                            uint64_t v1267 = v1260;
                            uint64_t v1268 = v1261;
                            do
                            {
                              if (v1263 >= 1)
                              {
                                uint64_t v1269 = (void *)(v1264[19] + v1268);
                                uint64_t v1270 = (int *)((char *)v156[19] + v1267);
                                LODWORD(result) = v1263;
                                do
                                {
                                  *uint64_t v1269 = *v1270;
                                  uint64_t v1269 = (void *)((char *)v1269 + v1265);
                                  uint64_t v1270 = (int *)((char *)v1270 + v1266);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1262;
                              v1268 += v1258;
                              v1267 += v1259;
                            }
                            while (v1262 != v1257);
                          }
                          ++v1256;
                          v1261 += v1252;
                          v1260 += v1253;
                        }
                        while (v1256 != v1251);
                      }
                      ++v1250;
                      v1255 += v1566;
                      v1254 += v1549;
                    }
                    while (v1250 != v1583);
                  }
                  v1507 += v1477;
                  v1517 += v1467;
                  ++v1497;
                }
                while (v1497 != v1487);
              }
              break;
            default:
              LODWORD(v1129) = 1;
              uint64_t v1130 = -20;
              do
              {
                uint64_t v1129 = *(int *)(v157 + v1130) * (uint64_t)(int)v1129;
                v1130 += 4;
              }
              while (v1130);
              int v1444 = v156[6];
              if (v1444)
              {
                uint64_t v1131 = 0;
                uint64_t v1424 = *v3;
                uint64_t v1132 = (v159 << 30) - 0x500000000;
                uint64_t v1434 = (v159 >> 2) - 1;
                uint64_t v1133 = v156[3];
                uint64_t v1429 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1134 = v3[3];
                int v1486 = *(_DWORD *)(v158 + (v1132 >> 30));
                uint64_t v1420 = (uint64_t)((v159 << 30) - 0x400000000) >> 32;
                uint64_t v1531 = (uint64_t)((v159 << 30) - 0x200000000) >> 32;
                uint64_t v1135 = (uint64_t)((v159 << 30) - 0x100000000) >> 32;
                uint64_t v1476 = 8 * *(void *)(v1134 + (v1132 >> 29));
                uint64_t v1457 = (uint64_t)((v159 << 30) - 0x300000000) >> 32;
                uint64_t v1466 = 4 * *(void *)((char *)v1133 + (v1132 >> 29));
                uint64_t v1439 = v1129;
                do
                {
                  uint64_t v1136 = v1434;
                  if ((v1434 & 0x80000000) != 0)
                  {
                    uint64_t v1137 = 0;
                    uint64_t v1138 = v1429;
                  }
                  else
                  {
                    uint64_t v1137 = 0;
                    LODWORD(result) = v1131;
                    uint64_t v1138 = v1429;
                    do
                    {
                      ldiv_t v1139 = ldiv((int)result, *(int *)(v158 + 4 * v1136));
                      uint64_t result = v1139.quot;
                      v1137 += *(void *)&v1133[2 * v1136--] * v1139.rem;
                    }
                    while (v1136 != -1);
                  }
                  uint64_t v1449 = v1131;
                  uint64_t v1140 = 0;
                  if ((v1138 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1131;
                    do
                    {
                      ldiv_t v1141 = ldiv((int)result, *(int *)(v1424 + 4 * v1138));
                      uint64_t result = v1141.quot;
                      v1140 += *(void *)(v1134 + 8 * v1138--) * v1141.rem;
                    }
                    while (v1138 != -1);
                  }
                  if (v1486 >= 1)
                  {
                    int v1142 = 0;
                    int v1581 = *(_DWORD *)(v158 + 4 * v1420);
                    uint64_t v1516 = 8 * v1140;
                    uint64_t v1564 = 8 * *(void *)(v1134 + 8 * v1420);
                    uint64_t v1506 = 4 * v1137;
                    uint64_t v1547 = 4 * *(void *)&v1133[2 * v1420];
                    do
                    {
                      int v1496 = v1142;
                      if (v1581 >= 1)
                      {
                        int v1143 = 0;
                        int v1144 = *(_DWORD *)(v158 + 4 * v1457);
                        uint64_t v1145 = 8 * *(void *)(v1134 + 8 * v1457);
                        uint64_t v1146 = 4 * *(void *)&v1133[2 * v1457];
                        uint64_t v1148 = v1506;
                        uint64_t v1147 = v1516;
                        do
                        {
                          if (v1144 >= 1)
                          {
                            int v1149 = 0;
                            int v1150 = *(_DWORD *)(v158 + 4 * v1531);
                            uint64_t v1151 = 8 * *(void *)(v1134 + 8 * v1531);
                            uint64_t v1152 = 4 * *(void *)&v1133[2 * v1531];
                            uint64_t result = v1148;
                            uint64_t v1153 = v1147;
                            do
                            {
                              if (v1150 >= 1)
                              {
                                int v1154 = 0;
                                int v1155 = *(_DWORD *)(v158 + 4 * v1135);
                                uint64_t v1156 = (void *)*a2;
                                uint64_t v1157 = 8 * *(void *)(v1134 + 8 * v1135);
                                uint64_t v1158 = 4 * *(void *)&v1133[2 * v1135];
                                uint64_t v1159 = result;
                                uint64_t v1160 = v1153;
                                do
                                {
                                  if (v1155 >= 1)
                                  {
                                    int v1161 = (void *)(v1156[19] + v1160);
                                    uint64_t v1162 = (int *)((char *)v156[19] + v1159);
                                    int v1163 = v1155;
                                    do
                                    {
                                      *int v1161 = *v1162;
                                      int v1161 = (void *)((char *)v1161 + v1157);
                                      uint64_t v1162 = (int *)((char *)v1162 + v1158);
                                      --v1163;
                                    }
                                    while (v1163);
                                  }
                                  ++v1154;
                                  v1160 += v1151;
                                  v1159 += v1152;
                                }
                                while (v1154 != v1150);
                              }
                              ++v1149;
                              v1153 += v1145;
                              result += v1146;
                            }
                            while (v1149 != v1144);
                          }
                          ++v1143;
                          v1147 += v1564;
                          v1148 += v1547;
                        }
                        while (v1143 != v1581);
                      }
                      int v1142 = v1496 + 1;
                      v1516 += v1476;
                      v1506 += v1466;
                    }
                    while (v1496 + 1 != v1486);
                  }
                  v1131 += v1439;
                }
                while ((unint64_t)v1444 > v1449 + v1439);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v24 = v3[6];
          if (v24)
          {
            float v25 = (float)**(int **)(*(void *)result + 152);
            float v26 = (float *)v3[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          uint64_t v169 = *(void *)(*(void *)result + 160);
          if (v169)
          {
            uint64_t v170 = *(int **)(*(void *)result + 152);
            uint64_t v171 = (float *)v3[19];
            uint64_t v172 = 4 * v169;
            do
            {
              int v173 = *v170++;
              *v171++ = (float)v173;
              v172 -= 4;
            }
            while (v172);
          }
          break;
        case 2:
          int v174 = *(int ***)result;
          uint64_t v175 = **(int ***)result;
          uint64_t v176 = *(void *)(*(void *)result + 8) - (void)v175;
          switch(v176 >> 2)
          {
            case 1:
              uint64_t v177 = *v175;
              if ((int)v177 >= 1)
              {
                uint64_t v178 = v174[19];
                float v179 = (float *)v3[19];
                uint64_t v180 = 4 * *(void *)v174[3];
                do
                {
                  *v179++ = (float)*v178;
                  uint64_t v178 = (int *)((char *)v178 + v180);
                  --v177;
                }
                while (v177);
              }
              break;
            case 2:
              int v519 = *v175;
              if (*v175 >= 1)
              {
                int v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = v174[19];
                uint64_t v524 = v3[19];
                uint64_t v525 = v175[1];
                uint64_t v526 = v174[3];
                uint64_t v528 = *(void *)v526;
                uint64_t v527 = *((void *)v526 + 1);
                uint64_t v529 = v528 - v527 * v525;
                do
                {
                  int v530 = v525;
                  if ((int)v525 >= 1)
                  {
                    do
                    {
                      *(float *)(v524 + 4 * v521++) = (float)v523[v522];
                      v522 += v527;
                      --v530;
                    }
                    while (v530);
                  }
                  v522 += v529;
                  ++v520;
                }
                while (v520 != v519);
              }
              break;
            case 3:
              int v531 = *v175;
              if (*v175 >= 1)
              {
                int v532 = 0;
                uint64_t result = 0;
                uint64_t v533 = 0;
                int v534 = v174[19];
                uint64_t v535 = v3[19];
                uint64_t v536 = v175[1];
                uint64_t v537 = v174[3];
                uint64_t v538 = *((void *)v537 + 1);
                uint64_t v539 = *(void *)v537 - v538 * v536;
                do
                {
                  if ((int)v536 < 1)
                  {
                    uint64_t v546 = result;
                  }
                  else
                  {
                    int v540 = 0;
                    uint64_t v541 = v175[2];
                    uint64_t v542 = v174[3];
                    uint64_t v543 = v538 - *((void *)v537 + 2) * v541;
                    do
                    {
                      if ((int)v541 < 1)
                      {
                        uint64_t v546 = result;
                      }
                      else
                      {
                        uint64_t v544 = *((void *)v542 + 2);
                        int v545 = v541;
                        do
                        {
                          uint64_t v546 = result + 1;
                          *(float *)(v535 + 4 * result) = (float)v534[v533];
                          v533 += v544;
                          ++result;
                          --v545;
                        }
                        while (v545);
                      }
                      v533 += v543;
                      ++v540;
                      uint64_t result = v546;
                    }
                    while (v540 != v536);
                  }
                  v533 += v539;
                  ++v532;
                  uint64_t result = v546;
                }
                while (v532 != v531);
              }
              break;
            case 4:
              int v547 = *v175;
              if (*v175 >= 1)
              {
                int v548 = 0;
                uint64_t result = 0;
                uint64_t v549 = 0;
                uint64_t v550 = v174[19];
                uint64_t v551 = v3[19];
                uint64_t v552 = v175[1];
                uint64_t v553 = v174[3];
                uint64_t v554 = *((void *)v553 + 1);
                uint64_t v555 = *(void *)v553 - v554 * v552;
                do
                {
                  if ((int)v552 < 1)
                  {
                    uint64_t v566 = result;
                  }
                  else
                  {
                    int v556 = 0;
                    uint64_t v557 = v175[2];
                    uint64_t v558 = v174[3];
                    uint64_t v559 = v554 - *((void *)v553 + 2) * v557;
                    do
                    {
                      if ((int)v557 < 1)
                      {
                        uint64_t v566 = result;
                      }
                      else
                      {
                        int v560 = 0;
                        uint64_t v561 = v175[3];
                        uint64_t v562 = v174[3];
                        uint64_t v563 = *((void *)v558 + 2) - *((void *)v558 + 3) * v561;
                        do
                        {
                          if ((int)v561 < 1)
                          {
                            uint64_t v566 = result;
                          }
                          else
                          {
                            uint64_t v564 = *((void *)v562 + 3);
                            int v565 = v561;
                            do
                            {
                              uint64_t v566 = result + 1;
                              *(float *)(v551 + 4 * result) = (float)v550[v549];
                              v549 += v564;
                              ++result;
                              --v565;
                            }
                            while (v565);
                          }
                          v549 += v563;
                          ++v560;
                          uint64_t result = v566;
                        }
                        while (v560 != v557);
                      }
                      v549 += v559;
                      ++v556;
                      uint64_t result = v566;
                    }
                    while (v556 != v552);
                  }
                  v549 += v555;
                  ++v548;
                  uint64_t result = v566;
                }
                while (v548 != v547);
              }
              break;
            default:
              uint64_t v510 = v3[6];
              if (v510)
              {
                uint64_t v511 = 0;
                uint64_t v512 = v174[19];
                uint64_t v513 = v3[19];
                uint64_t v514 = ((unint64_t)v176 >> 2) - 1;
                uint64_t v515 = v174[3];
                do
                {
                  uint64_t v516 = 0;
                  if ((v514 & 0x80000000) == 0)
                  {
                    uint64_t v517 = v514;
                    LODWORD(result) = v511;
                    do
                    {
                      ldiv_t v518 = ldiv((int)result, v175[v517]);
                      uint64_t result = v518.quot;
                      v516 += *(void *)&v515[2 * v517--] * v518.rem;
                    }
                    while (v517 != -1);
                  }
                  *(float *)(v513 + 4 * v511++) = (float)v512[v516];
                }
                while (v511 != v510);
              }
              break;
          }
          break;
        case 3:
          uint64_t v181 = *(unsigned int ***)result;
          uint64_t v183 = **(void **)result;
          uint64_t v182 = *(void *)(*(void *)result + 8);
          unint64_t v184 = v182 - v183;
          switch((v182 - v183) >> 2)
          {
            case 1:
              uint64_t v185 = (v184 << 30) - 0x100000000;
              int v186 = *(_DWORD *)(v183 + (v185 >> 30));
              if (v186 >= 1)
              {
                uint64_t v187 = v185 >> 29;
                uint64_t v188 = *(void *)((char *)v181[3] + v187);
                uint64_t v189 = *(void *)(v3[3] + v187);
                int v190 = (float *)v3[19];
                int v191 = (int *)v181[19];
                uint64_t v192 = 4 * v189;
                uint64_t v193 = 4 * v188;
                do
                {
                  *int v190 = (float)*v191;
                  int v190 = (float *)((char *)v190 + v192);
                  int v191 = (int *)((char *)v191 + v193);
                  --v186;
                }
                while (v186);
              }
              break;
            case 2:
              uint64_t v1308 = (v184 << 30) - 0x200000000;
              int v1309 = *(_DWORD *)(v183 + (v1308 >> 30));
              if (v1309 >= 1)
              {
                uint64_t v1310 = 0;
                uint64_t v1311 = 0;
                int v1312 = 0;
                uint64_t v1313 = v181[3];
                uint64_t v1314 = v1308 >> 29;
                uint64_t v1315 = *(void *)((char *)v1313 + v1314);
                uint64_t v1316 = v3[3];
                uint64_t result = *(void *)(v1316 + v1314);
                uint64_t v1317 = (v184 << 30) - 0x100000000;
                uint64_t v1318 = *(void *)((char *)v1313 + (v1317 >> 29));
                uint64_t v1319 = *(void *)(v1316 + (v1317 >> 29));
                int v1320 = *(_DWORD *)(v183 + (v1317 >> 30));
                uint64_t v1321 = 4 * result;
                uint64_t v1322 = 4 * v1319;
                uint64_t v1323 = 4 * v1315;
                uint64_t v1324 = 4 * v1318;
                do
                {
                  if (v1320 >= 1)
                  {
                    uint64_t result = v3[19] + v1311;
                    uint64_t v1325 = (int *)((char *)v181[19] + v1310);
                    int v1326 = v1320;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1325;
                      result += v1322;
                      uint64_t v1325 = (int *)((char *)v1325 + v1324);
                      --v1326;
                    }
                    while (v1326);
                  }
                  ++v1312;
                  v1311 += v1321;
                  v1310 += v1323;
                }
                while (v1312 != v1309);
              }
              break;
            case 3:
              uint64_t v1327 = (v184 << 30) - 0x300000000;
              int v1328 = *(_DWORD *)(v183 + (v1327 >> 30));
              if (v1328 >= 1)
              {
                uint64_t v1329 = 0;
                uint64_t v1330 = 0;
                int v1331 = 0;
                uint64_t v1332 = v181[3];
                uint64_t v1333 = v1327 >> 29;
                uint64_t v1334 = *(void *)((char *)v1332 + v1333);
                uint64_t v1335 = v3[3];
                uint64_t v1336 = *(void *)(v1335 + v1333);
                uint64_t v1337 = v184 << 30;
                uint64_t v1338 = (v184 << 30) - 0x200000000;
                uint64_t v1339 = *(void *)((char *)v1332 + (v1338 >> 29));
                uint64_t v1340 = *(void *)(v1335 + (v1338 >> 29));
                int v1341 = *(_DWORD *)(v183 + (v1338 >> 30));
                uint64_t v1342 = (v1337 - 0x100000000) >> 32;
                uint64_t v1343 = 4 * v1336;
                uint64_t v1344 = 4 * v1340;
                uint64_t result = 4 * v1334;
                uint64_t v1345 = 4 * v1339;
                do
                {
                  if (v1341 >= 1)
                  {
                    int v1346 = 0;
                    int v1347 = *(_DWORD *)(v183 + 4 * v1342);
                    int v1348 = (void *)*a2;
                    uint64_t v1349 = 4 * *(void *)(v1335 + 8 * v1342);
                    uint64_t v1350 = 4 * *(void *)&v1332[2 * v1342];
                    uint64_t v1351 = v1329;
                    uint64_t v1352 = v1330;
                    do
                    {
                      if (v1347 >= 1)
                      {
                        uint64_t v1353 = (float *)(v1348[19] + v1352);
                        int v1354 = (int *)((char *)v181[19] + v1351);
                        int v1355 = v1347;
                        do
                        {
                          *uint64_t v1353 = (float)*v1354;
                          uint64_t v1353 = (float *)((char *)v1353 + v1349);
                          int v1354 = (int *)((char *)v1354 + v1350);
                          --v1355;
                        }
                        while (v1355);
                      }
                      ++v1346;
                      v1352 += v1344;
                      v1351 += v1345;
                    }
                    while (v1346 != v1341);
                  }
                  ++v1331;
                  v1330 += v1343;
                  v1329 += result;
                }
                while (v1331 != v1328);
              }
              break;
            case 4:
              uint64_t v1356 = (v184 << 30) - 0x400000000;
              int v1585 = *(_DWORD *)(v183 + (v1356 >> 30));
              if (v1585 >= 1)
              {
                uint64_t v1357 = 0;
                uint64_t v1358 = 0;
                int v1359 = 0;
                uint64_t v1360 = v181[3];
                uint64_t v1361 = v1356 >> 29;
                uint64_t v1362 = v184 << 30;
                uint64_t v1363 = v3[3];
                uint64_t v1364 = (v1362 - 0x300000000) >> 29;
                uint64_t v1365 = *(void *)((char *)v1360 + v1364);
                uint64_t v1366 = v1362 - 0x200000000;
                uint64_t v1367 = v1362 - 0x100000000;
                uint64_t v1368 = *(void *)(v1363 + v1364);
                int v1369 = *(_DWORD *)(v183 + ((v1362 - 0x300000000) >> 30));
                uint64_t v1370 = v1366 >> 32;
                uint64_t v1371 = v1367 >> 32;
                uint64_t v1568 = 4 * *(void *)(v1363 + v1361);
                uint64_t result = 4 * v1368;
                uint64_t v1551 = 4 * *(void *)((char *)v1360 + v1361);
                uint64_t v1372 = 4 * v1365;
                do
                {
                  if (v1369 >= 1)
                  {
                    int v1373 = 0;
                    int v1374 = *(_DWORD *)(v183 + 4 * v1370);
                    uint64_t v1375 = 4 * *(void *)(v1363 + 8 * v1370);
                    uint64_t v1376 = 4 * *(void *)&v1360[2 * v1370];
                    uint64_t v1377 = v1357;
                    uint64_t v1378 = v1358;
                    do
                    {
                      if (v1374 >= 1)
                      {
                        int v1379 = 0;
                        int v1380 = *(_DWORD *)(v183 + 4 * v1371);
                        uint64_t v1381 = (void *)*a2;
                        uint64_t v1382 = 4 * *(void *)(v1363 + 8 * v1371);
                        uint64_t v1383 = 4 * *(void *)&v1360[2 * v1371];
                        uint64_t v1384 = v1377;
                        uint64_t v1385 = v1378;
                        do
                        {
                          if (v1380 >= 1)
                          {
                            uint64_t v1386 = (float *)(v1381[19] + v1385);
                            uint64_t v1387 = (int *)((char *)v181[19] + v1384);
                            int v1388 = v1380;
                            do
                            {
                              *uint64_t v1386 = (float)*v1387;
                              uint64_t v1386 = (float *)((char *)v1386 + v1382);
                              uint64_t v1387 = (int *)((char *)v1387 + v1383);
                              --v1388;
                            }
                            while (v1388);
                          }
                          ++v1379;
                          v1385 += v1375;
                          v1384 += v1376;
                        }
                        while (v1379 != v1374);
                      }
                      ++v1373;
                      v1378 += result;
                      v1377 += v1372;
                    }
                    while (v1373 != v1369);
                  }
                  ++v1359;
                  v1358 += v1568;
                  v1357 += v1551;
                }
                while (v1359 != v1585);
              }
              break;
            case 5:
              uint64_t v1389 = (v184 << 30) - 0x500000000;
              int v1499 = *(_DWORD *)(v183 + (v1389 >> 30));
              if (v1499 >= 1)
              {
                uint64_t v1519 = 0;
                uint64_t v1535 = 0;
                int v1509 = 0;
                uint64_t v1390 = v181[3];
                uint64_t v1391 = v1389 >> 29;
                uint64_t v1392 = v3[3];
                uint64_t v1393 = (v184 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1390 + (v1393 >> 29));
                int v1586 = *(_DWORD *)(v183 + (v1393 >> 30));
                uint64_t v1469 = (uint64_t)((v184 << 30) - 0x300000000) >> 32;
                uint64_t v1394 = (uint64_t)((v184 << 30) - 0x200000000) >> 32;
                uint64_t v1395 = (uint64_t)((v184 << 30) - 0x100000000) >> 32;
                uint64_t v1489 = 4 * *(void *)(v1392 + v1391);
                uint64_t v1569 = 4 * *(void *)(v1392 + (v1393 >> 29));
                uint64_t v1479 = 4 * *(void *)((char *)v1390 + v1391);
                uint64_t v1552 = 4 * result;
                do
                {
                  if (v1586 >= 1)
                  {
                    int v1396 = 0;
                    int v1397 = *(_DWORD *)(v183 + 4 * v1469);
                    uint64_t v1398 = 4 * *(void *)(v1392 + 8 * v1469);
                    uint64_t v1399 = 4 * *(void *)&v1390[2 * v1469];
                    uint64_t v1401 = v1519;
                    uint64_t v1400 = v1535;
                    do
                    {
                      if (v1397 >= 1)
                      {
                        int v1402 = 0;
                        int v1403 = *(_DWORD *)(v183 + 4 * v1394);
                        uint64_t v1404 = 4 * *(void *)(v1392 + 8 * v1394);
                        uint64_t v1405 = 4 * *(void *)&v1390[2 * v1394];
                        uint64_t v1406 = v1400;
                        uint64_t v1407 = v1401;
                        do
                        {
                          if (v1403 >= 1)
                          {
                            int v1408 = 0;
                            int v1409 = *(_DWORD *)(v183 + 4 * v1395);
                            uint64_t v1410 = (void *)*a2;
                            uint64_t v1411 = 4 * *(void *)(v1392 + 8 * v1395);
                            uint64_t v1412 = 4 * *(void *)&v1390[2 * v1395];
                            uint64_t v1413 = v1406;
                            uint64_t v1414 = v1407;
                            do
                            {
                              if (v1409 >= 1)
                              {
                                uint64_t v1415 = (float *)(v1410[19] + v1414);
                                uint64_t v1416 = (int *)((char *)v181[19] + v1413);
                                LODWORD(result) = v1409;
                                do
                                {
                                  *uint64_t v1415 = (float)*v1416;
                                  uint64_t v1415 = (float *)((char *)v1415 + v1411);
                                  uint64_t v1416 = (int *)((char *)v1416 + v1412);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1408;
                              v1414 += v1404;
                              v1413 += v1405;
                            }
                            while (v1408 != v1403);
                          }
                          ++v1402;
                          v1407 += v1398;
                          v1406 += v1399;
                        }
                        while (v1402 != v1397);
                      }
                      ++v1396;
                      v1401 += v1569;
                      v1400 += v1552;
                    }
                    while (v1396 != v1586);
                  }
                  v1519 += v1489;
                  v1535 += v1479;
                  ++v1509;
                }
                while (v1509 != v1499);
              }
              break;
            default:
              LODWORD(v1271) = 1;
              uint64_t v1272 = -20;
              do
              {
                uint64_t v1271 = *(int *)(v182 + v1272) * (uint64_t)(int)v1271;
                v1272 += 4;
              }
              while (v1272);
              int v1445 = v181[6];
              if (v1445)
              {
                uint64_t result = 0;
                uint64_t v1488 = *v3;
                uint64_t v1273 = (v184 << 30) - 0x500000000;
                uint64_t v1435 = (v184 >> 2) - 1;
                uint64_t v1274 = v181[3];
                uint64_t v1430 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1275 = v3[3];
                int v1498 = *(_DWORD *)(v183 + (v1273 >> 30));
                uint64_t v1425 = (uint64_t)((v184 << 30) - 0x400000000) >> 32;
                uint64_t v1276 = (uint64_t)((v184 << 30) - 0x200000000) >> 32;
                uint64_t v1277 = (uint64_t)((v184 << 30) - 0x100000000) >> 32;
                uint64_t v1478 = 4 * *(void *)(v1275 + (v1273 >> 29));
                uint64_t v1459 = (uint64_t)((v184 << 30) - 0x300000000) >> 32;
                uint64_t v1468 = 4 * *(void *)((char *)v1274 + (v1273 >> 29));
                uint64_t v1440 = v1271;
                do
                {
                  uint64_t v1278 = v1435;
                  uint64_t v1450 = result;
                  uint64_t v1279 = 0;
                  if ((v1435 & 0x80000000) != 0)
                  {
                    uint64_t v1280 = v1430;
                  }
                  else
                  {
                    uint64_t v1280 = v1430;
                    do
                    {
                      ldiv_t v1281 = ldiv((int)result, *(int *)(v183 + 4 * v1278));
                      LODWORD(result) = v1281.quot;
                      v1279 += *(void *)&v1274[2 * v1278--] * v1281.rem;
                    }
                    while (v1278 != -1);
                  }
                  uint64_t v1282 = 0;
                  if ((v1280 & 0x80000000) == 0)
                  {
                    int v1283 = v1450;
                    do
                    {
                      ldiv_t v1284 = ldiv(v1283, *(int *)(v1488 + 4 * v1280));
                      int v1283 = v1284.quot;
                      v1282 += *(void *)(v1275 + 8 * v1280--) * v1284.rem;
                    }
                    while (v1280 != -1);
                  }
                  if (v1498 >= 1)
                  {
                    int v1285 = 0;
                    int v1584 = *(_DWORD *)(v183 + 4 * v1425);
                    uint64_t v1534 = 4 * v1282;
                    uint64_t v1567 = 4 * *(void *)(v1275 + 8 * v1425);
                    uint64_t v1518 = 4 * v1279;
                    uint64_t v1550 = 4 * *(void *)&v1274[2 * v1425];
                    do
                    {
                      int v1508 = v1285;
                      if (v1584 >= 1)
                      {
                        int v1286 = 0;
                        int v1287 = *(_DWORD *)(v183 + 4 * v1459);
                        uint64_t v1288 = 4 * *(void *)(v1275 + 8 * v1459);
                        uint64_t v1289 = 4 * *(void *)&v1274[2 * v1459];
                        uint64_t v1291 = v1518;
                        uint64_t v1290 = v1534;
                        do
                        {
                          if (v1287 >= 1)
                          {
                            int v1292 = 0;
                            int v1293 = *(_DWORD *)(v183 + 4 * v1276);
                            uint64_t v1294 = 4 * *(void *)(v1275 + 8 * v1276);
                            uint64_t v1295 = 4 * *(void *)&v1274[2 * v1276];
                            uint64_t v1296 = v1291;
                            uint64_t v1297 = v1290;
                            do
                            {
                              if (v1293 >= 1)
                              {
                                int v1298 = 0;
                                int v1299 = *(_DWORD *)(v183 + 4 * v1277);
                                uint64_t v1300 = (void *)*a2;
                                uint64_t v1301 = 4 * *(void *)(v1275 + 8 * v1277);
                                uint64_t v1302 = 4 * *(void *)&v1274[2 * v1277];
                                uint64_t v1303 = v1296;
                                uint64_t v1304 = v1297;
                                do
                                {
                                  if (v1299 >= 1)
                                  {
                                    int v1305 = (float *)(v1300[19] + v1304);
                                    uint64_t v1306 = (int *)((char *)v181[19] + v1303);
                                    int v1307 = v1299;
                                    do
                                    {
                                      float *v1305 = (float)*v1306;
                                      int v1305 = (float *)((char *)v1305 + v1301);
                                      uint64_t v1306 = (int *)((char *)v1306 + v1302);
                                      --v1307;
                                    }
                                    while (v1307);
                                  }
                                  ++v1298;
                                  v1304 += v1294;
                                  v1303 += v1295;
                                }
                                while (v1298 != v1293);
                              }
                              ++v1292;
                              v1297 += v1288;
                              v1296 += v1289;
                            }
                            while (v1292 != v1287);
                          }
                          ++v1286;
                          v1290 += v1567;
                          v1291 += v1550;
                        }
                        while (v1286 != v1584);
                      }
                      int v1285 = v1508 + 1;
                      v1534 += v1478;
                      v1518 += v1468;
                    }
                    while (v1508 + 1 != v1498);
                  }
                  uint64_t result = v1450 + v1440;
                }
                while ((unint64_t)v1445 > v1450 + v1440);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<long long>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  uint64_t v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            size_t v7 = (void *)v3[19];
            BOOL v8 = **(void **)(*(void *)v5 + 152) != 0;
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          uint64_t v27 = *(void *)(*(void *)result + 160);
          if (v27)
          {
            size_t v28 = *(uint64_t **)(*(void *)result + 152);
            unint64_t v29 = (BOOL *)v3[19];
            uint64_t v30 = 8 * v27;
            do
            {
              uint64_t v31 = *v28++;
              *v29++ = v31 != 0;
              v30 -= 8;
            }
            while (v30);
          }
          break;
        case 2:
          uint64_t v32 = *(uint64_t **)result;
          uint64_t v33 = **(int ***)result;
          uint64_t v34 = *(void *)(*(void *)result + 8) - (void)v33;
          switch(v34 >> 2)
          {
            case 1:
              uint64_t v35 = *v33;
              if ((int)v35 >= 1)
              {
                uint64_t v36 = (void *)v32[19];
                uint64_t v37 = (BOOL *)v3[19];
                uint64_t v38 = 8 * *(void *)v32[3];
                do
                {
                  *v37++ = *v36 != 0;
                  uint64_t v36 = (void *)((char *)v36 + v38);
                  --v35;
                }
                while (v35);
              }
              break;
            case 2:
              int v208 = *v33;
              if (*v33 >= 1)
              {
                int v209 = 0;
                uint64_t v210 = 0;
                uint64_t v211 = 0;
                uint64_t v212 = v32[19];
                uint64_t v213 = v3[19];
                uint64_t v214 = v33[1];
                int v215 = (uint64_t *)v32[3];
                uint64_t v217 = *v215;
                uint64_t v216 = v215[1];
                uint64_t v218 = v217 - v216 * v214;
                do
                {
                  int v219 = v214;
                  if ((int)v214 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(void *)(v212 + 8 * v211) != 0;
                      *(unsigned char *)(v213 + v210++) = result;
                      v211 += v216;
                      --v219;
                    }
                    while (v219);
                  }
                  v211 += v218;
                  ++v209;
                }
                while (v209 != v208);
              }
              break;
            case 3:
              int v220 = *v33;
              if (*v33 >= 1)
              {
                int v221 = 0;
                uint64_t result = 0;
                uint64_t v222 = 0;
                uint64_t v223 = v32[19];
                uint64_t v224 = v3[19];
                uint64_t v225 = v33[1];
                uint64_t v226 = (void *)v32[3];
                uint64_t v227 = v226[1];
                uint64_t v228 = *v226 - v227 * v225;
                do
                {
                  if ((int)v225 < 1)
                  {
                    uint64_t v235 = result;
                  }
                  else
                  {
                    int v229 = 0;
                    uint64_t v230 = v33[2];
                    uint64_t v231 = v32[3];
                    uint64_t v232 = v227 - v226[2] * v230;
                    do
                    {
                      if ((int)v230 < 1)
                      {
                        uint64_t v235 = result;
                      }
                      else
                      {
                        uint64_t v233 = *(void *)(v231 + 16);
                        int v234 = v230;
                        do
                        {
                          uint64_t v235 = result + 1;
                          *(unsigned char *)(v224 + result) = *(void *)(v223 + 8 * v222) != 0;
                          v222 += v233;
                          ++result;
                          --v234;
                        }
                        while (v234);
                      }
                      v222 += v232;
                      ++v229;
                      uint64_t result = v235;
                    }
                    while (v229 != v225);
                  }
                  v222 += v228;
                  ++v221;
                  uint64_t result = v235;
                }
                while (v221 != v220);
              }
              break;
            case 4:
              int v236 = *v33;
              if (*v33 >= 1)
              {
                int v237 = 0;
                uint64_t result = 0;
                uint64_t v238 = 0;
                uint64_t v239 = v32[19];
                uint64_t v240 = v3[19];
                uint64_t v241 = v33[1];
                uint64_t v242 = (void *)v32[3];
                uint64_t v243 = v242[1];
                uint64_t v244 = *v242 - v243 * v241;
                do
                {
                  if ((int)v241 < 1)
                  {
                    uint64_t v255 = result;
                  }
                  else
                  {
                    int v245 = 0;
                    uint64_t v246 = v33[2];
                    uint64_t v247 = v32[3];
                    uint64_t v248 = v243 - v242[2] * v246;
                    do
                    {
                      if ((int)v246 < 1)
                      {
                        uint64_t v255 = result;
                      }
                      else
                      {
                        int v249 = 0;
                        uint64_t v250 = v33[3];
                        uint64_t v251 = v32[3];
                        uint64_t v252 = *(void *)(v247 + 16) - *(void *)(v247 + 24) * v250;
                        do
                        {
                          if ((int)v250 < 1)
                          {
                            uint64_t v255 = result;
                          }
                          else
                          {
                            uint64_t v253 = *(void *)(v251 + 24);
                            int v254 = v250;
                            do
                            {
                              uint64_t v255 = result + 1;
                              *(unsigned char *)(v240 + result) = *(void *)(v239 + 8 * v238) != 0;
                              v238 += v253;
                              ++result;
                              --v254;
                            }
                            while (v254);
                          }
                          v238 += v252;
                          ++v249;
                          uint64_t result = v255;
                        }
                        while (v249 != v246);
                      }
                      v238 += v248;
                      ++v245;
                      uint64_t result = v255;
                    }
                    while (v245 != v241);
                  }
                  v238 += v244;
                  ++v237;
                  uint64_t result = v255;
                }
                while (v237 != v236);
              }
              break;
            default:
              uint64_t v199 = v3[6];
              if (v199)
              {
                uint64_t v200 = 0;
                uint64_t v201 = v32[19];
                uint64_t v202 = v3[19];
                uint64_t v203 = ((unint64_t)v34 >> 2) - 1;
                uint64_t v204 = v32[3];
                do
                {
                  uint64_t v205 = 0;
                  if ((v203 & 0x80000000) == 0)
                  {
                    uint64_t v206 = v203;
                    LODWORD(result) = v200;
                    do
                    {
                      ldiv_t v207 = ldiv((int)result, v33[v206]);
                      uint64_t result = v207.quot;
                      v205 += *(void *)(v204 + 8 * v206--) * v207.rem;
                    }
                    while (v206 != -1);
                  }
                  *(unsigned char *)(v202 + v200++) = *(void *)(v201 + 8 * v205) != 0;
                }
                while (v200 != v199);
              }
              break;
          }
          break;
        case 3:
          uint64_t v39 = *(unsigned int ***)result;
          uint64_t v41 = **(void **)result;
          uint64_t v40 = *(void *)(*(void *)result + 8);
          unint64_t v42 = v40 - v41;
          switch((v40 - v41) >> 2)
          {
            case 1:
              uint64_t v43 = (v42 << 30) - 0x100000000;
              int v44 = *(_DWORD *)(v41 + (v43 >> 30));
              if (v44 >= 1)
              {
                uint64_t v45 = v43 >> 29;
                uint64_t v46 = *(void *)((char *)v39[3] + v45);
                uint64_t v47 = *(void *)(v3[3] + v45);
                uint64_t v48 = (BOOL *)v3[19];
                uint64_t v49 = v39[19];
                uint64_t v50 = 8 * v46;
                do
                {
                  *uint64_t v48 = *(void *)v49 != 0;
                  v48 += v47;
                  uint64_t v49 = (unsigned int *)((char *)v49 + v50);
                  --v44;
                }
                while (v44);
              }
              break;
            case 2:
              uint64_t v607 = (v42 << 30) - 0x200000000;
              int v608 = *(_DWORD *)(v41 + (v607 >> 30));
              if (v608 >= 1)
              {
                uint64_t v609 = 0;
                int v610 = 0;
                uint64_t v611 = 0;
                uint64_t v612 = v42 << 30;
                uint64_t v613 = v39[3];
                uint64_t v614 = v607 >> 29;
                uint64_t v615 = *(void *)((char *)v613 + v614);
                uint64_t v616 = v3[3];
                uint64_t v617 = *(void *)(v616 + v614);
                uint64_t result = v612 - 0x100000000;
                uint64_t v618 = (v612 - 0x100000000) >> 29;
                uint64_t v619 = *(void *)((char *)v613 + v618);
                uint64_t v620 = *(void *)(v616 + v618);
                int v621 = *(_DWORD *)(v41 + (result >> 30));
                uint64_t v622 = 8 * v615;
                uint64_t v623 = 8 * v619;
                do
                {
                  if (v621 >= 1)
                  {
                    uint64_t result = v3[19];
                    int v624 = (void *)((char *)v39[19] + v609);
                    int v625 = v621;
                    do
                    {
                      *(unsigned char *)(result + v611) = *v624 != 0;
                      result += v620;
                      int v624 = (void *)((char *)v624 + v623);
                      --v625;
                    }
                    while (v625);
                  }
                  v611 += v617;
                  ++v610;
                  v609 += v622;
                }
                while (v610 != v608);
              }
              break;
            case 3:
              uint64_t v626 = (v42 << 30) - 0x300000000;
              int v627 = *(_DWORD *)(v41 + (v626 >> 30));
              if (v627 >= 1)
              {
                uint64_t v628 = 0;
                int v629 = 0;
                uint64_t v630 = 0;
                uint64_t v631 = v42 << 30;
                uint64_t v632 = v39[3];
                uint64_t v633 = v626 >> 29;
                uint64_t v634 = *(void *)((char *)v632 + v633);
                uint64_t v635 = v3[3];
                uint64_t v636 = *(void *)(v635 + v633);
                uint64_t v637 = v631 - 0x200000000;
                uint64_t v638 = (v631 - 0x200000000) >> 29;
                uint64_t v639 = v631 - 0x100000000;
                uint64_t v640 = *(void *)((char *)v632 + v638);
                uint64_t v641 = *(void *)(v635 + v638);
                int v642 = *(_DWORD *)(v41 + (v637 >> 30));
                uint64_t v643 = v639 >> 32;
                uint64_t result = 8 * v634;
                uint64_t v644 = 8 * v640;
                do
                {
                  if (v642 >= 1)
                  {
                    int v645 = 0;
                    uint64_t v646 = *(void *)(v635 + 8 * v643);
                    int v647 = *(_DWORD *)(v41 + 4 * v643);
                    int v648 = (void *)*a2;
                    uint64_t v649 = 8 * *(void *)&v632[2 * v643];
                    uint64_t v650 = v628;
                    uint64_t v651 = v630;
                    do
                    {
                      if (v647 >= 1)
                      {
                        uint64_t v652 = v648[19];
                        uint64_t v653 = (void *)((char *)v39[19] + v650);
                        int v654 = v647;
                        do
                        {
                          *(unsigned char *)(v652 + v651) = *v653 != 0;
                          v652 += v646;
                          uint64_t v653 = (void *)((char *)v653 + v649);
                          --v654;
                        }
                        while (v654);
                      }
                      v651 += v641;
                      ++v645;
                      v650 += v644;
                    }
                    while (v645 != v642);
                  }
                  v630 += v636;
                  ++v629;
                  v628 += result;
                }
                while (v629 != v627);
              }
              break;
            case 4:
              uint64_t v655 = (v42 << 30) - 0x400000000;
              int v1575 = *(_DWORD *)(v41 + (v655 >> 30));
              if (v1575 >= 1)
              {
                uint64_t v656 = 0;
                int v657 = 0;
                uint64_t v658 = 0;
                uint64_t v659 = v39[3];
                uint64_t v660 = v655 >> 29;
                uint64_t v661 = *(void *)((char *)v659 + v660);
                uint64_t v662 = v3[3];
                uint64_t v1558 = *(void *)(v662 + v660);
                uint64_t v663 = (v42 << 30) - 0x300000000;
                uint64_t v664 = (v42 << 30) - 0x200000000;
                uint64_t v665 = (v42 << 30) - 0x100000000;
                uint64_t v666 = *(void *)(v662 + (v663 >> 29));
                int v667 = *(_DWORD *)(v41 + (v663 >> 30));
                uint64_t v1524 = v664 >> 32;
                uint64_t result = v665 >> 32;
                uint64_t v1541 = 8 * v661;
                uint64_t v668 = 8 * *(void *)((char *)v659 + (v663 >> 29));
                do
                {
                  if (v667 >= 1)
                  {
                    int v669 = 0;
                    uint64_t v670 = *(void *)(v662 + 8 * v1524);
                    int v671 = *(_DWORD *)(v41 + 4 * v1524);
                    uint64_t v672 = 8 * *(void *)&v659[2 * v1524];
                    uint64_t v673 = v656;
                    uint64_t v674 = v658;
                    do
                    {
                      if (v671 >= 1)
                      {
                        int v675 = 0;
                        uint64_t v676 = *(void *)(v662 + 8 * result);
                        int v677 = *(_DWORD *)(v41 + 4 * result);
                        int v678 = (void *)*a2;
                        uint64_t v679 = 8 * *(void *)&v659[2 * result];
                        uint64_t v680 = v673;
                        uint64_t v681 = v674;
                        do
                        {
                          if (v677 >= 1)
                          {
                            uint64_t v682 = v678[19];
                            uint64_t v683 = (void *)((char *)v39[19] + v680);
                            int v684 = v677;
                            do
                            {
                              *(unsigned char *)(v682 + v681) = *v683 != 0;
                              v682 += v676;
                              uint64_t v683 = (void *)((char *)v683 + v679);
                              --v684;
                            }
                            while (v684);
                          }
                          v681 += v670;
                          ++v675;
                          v680 += v672;
                        }
                        while (v675 != v671);
                      }
                      v674 += v666;
                      ++v669;
                      v673 += v668;
                    }
                    while (v669 != v667);
                  }
                  v658 += v1558;
                  ++v657;
                  v656 += v1541;
                }
                while (v657 != v1575);
              }
              break;
            case 5:
              uint64_t v685 = (v42 << 30) - 0x500000000;
              int v1484 = *(_DWORD *)(v41 + (v685 >> 30));
              if (v1484 >= 1)
              {
                uint64_t v1504 = 0;
                uint64_t v1514 = 0;
                int v1494 = 0;
                int v686 = v39[3];
                uint64_t v687 = v685 >> 29;
                uint64_t v688 = v3[3];
                uint64_t v1474 = *(void *)(v688 + v687);
                uint64_t v689 = (v42 << 30) - 0x400000000;
                uint64_t v1559 = *(void *)(v688 + (v689 >> 29));
                int v1576 = *(_DWORD *)(v41 + (v689 >> 30));
                uint64_t v1454 = (uint64_t)((v42 << 30) - 0x300000000) >> 32;
                uint64_t v1525 = (uint64_t)((v42 << 30) - 0x200000000) >> 32;
                uint64_t v690 = (uint64_t)((v42 << 30) - 0x100000000) >> 32;
                uint64_t v1464 = 8 * *(void *)((char *)v686 + v687);
                uint64_t v1542 = 8 * *(void *)((char *)v686 + (v689 >> 29));
                do
                {
                  if (v1576 >= 1)
                  {
                    int v691 = 0;
                    uint64_t v692 = *(void *)(v688 + 8 * v1454);
                    int v693 = *(_DWORD *)(v41 + 4 * v1454);
                    uint64_t v694 = 8 * *(void *)&v686[2 * v1454];
                    uint64_t v695 = v1504;
                    uint64_t v696 = v1514;
                    do
                    {
                      if (v693 >= 1)
                      {
                        int v697 = 0;
                        uint64_t v698 = *(void *)(v688 + 8 * v1525);
                        int v699 = *(_DWORD *)(v41 + 4 * v1525);
                        uint64_t v700 = 8 * *(void *)&v686[2 * v1525];
                        uint64_t v701 = v696;
                        uint64_t v702 = v695;
                        do
                        {
                          if (v699 >= 1)
                          {
                            int v703 = 0;
                            uint64_t v704 = *(void *)(v688 + 8 * v690);
                            int v705 = *(_DWORD *)(v41 + 4 * v690);
                            uint64_t v706 = (void *)*a2;
                            uint64_t v707 = 8 * *(void *)&v686[2 * v690];
                            uint64_t v708 = v701;
                            uint64_t v709 = v702;
                            do
                            {
                              if (v705 >= 1)
                              {
                                uint64_t v710 = v706[19];
                                uint64_t v711 = (void *)((char *)v39[19] + v708);
                                int v712 = v705;
                                do
                                {
                                  uint64_t result = *v711 != 0;
                                  *(unsigned char *)(v710 + v709) = result;
                                  v710 += v704;
                                  uint64_t v711 = (void *)((char *)v711 + v707);
                                  --v712;
                                }
                                while (v712);
                              }
                              v709 += v698;
                              ++v703;
                              v708 += v700;
                            }
                            while (v703 != v699);
                          }
                          v702 += v692;
                          ++v697;
                          v701 += v694;
                        }
                        while (v697 != v693);
                      }
                      v695 += v1559;
                      ++v691;
                      v696 += v1542;
                    }
                    while (v691 != v1576);
                  }
                  v1504 += v1474;
                  v1514 += v1464;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              LODWORD(v572) = 1;
              uint64_t v573 = -20;
              do
              {
                uint64_t v572 = *(int *)(v40 + v573) * (uint64_t)(int)v572;
                v573 += 4;
              }
              while (v573);
              uint64_t v1443 = v39[6];
              if (v1443)
              {
                uint64_t v574 = 0;
                uint64_t v1423 = *v3;
                uint64_t v575 = (v42 << 30) - 0x500000000;
                uint64_t v1433 = (v42 >> 2) - 1;
                ldiv_t v576 = v39[3];
                uint64_t v577 = v3[3];
                uint64_t v1473 = *(void *)(v577 + (v575 >> 29));
                int v1483 = *(_DWORD *)(v41 + (v575 >> 30));
                uint64_t v1428 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1418 = (uint64_t)((v42 << 30) - 0x400000000) >> 32;
                uint64_t v1523 = (uint64_t)((v42 << 30) - 0x200000000) >> 32;
                uint64_t v578 = (uint64_t)((v42 << 30) - 0x100000000) >> 32;
                uint64_t v1453 = (uint64_t)((v42 << 30) - 0x300000000) >> 32;
                uint64_t v1463 = 8 * *(void *)((char *)v576 + (v575 >> 29));
                uint64_t v1438 = v572;
                do
                {
                  uint64_t v579 = v1433;
                  if ((v1433 & 0x80000000) != 0)
                  {
                    uint64_t v580 = 0;
                  }
                  else
                  {
                    uint64_t v580 = 0;
                    LODWORD(result) = v574;
                    do
                    {
                      ldiv_t v581 = ldiv((int)result, *(int *)(v41 + 4 * v579));
                      uint64_t result = v581.quot;
                      v580 += *(void *)&v576[2 * v579--] * v581.rem;
                    }
                    while (v579 != -1);
                  }
                  uint64_t v582 = v1428;
                  uint64_t v1448 = v574;
                  uint64_t v583 = 0;
                  if ((v1428 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v574;
                    do
                    {
                      ldiv_t v584 = ldiv((int)result, *(int *)(v1423 + 4 * v582));
                      uint64_t result = v584.quot;
                      v583 += *(void *)(v577 + 8 * v582--) * v584.rem;
                    }
                    while (v582 != -1);
                  }
                  if (v1483 >= 1)
                  {
                    int v585 = 0;
                    uint64_t v1557 = *(void *)(v577 + 8 * v1418);
                    int v1574 = *(_DWORD *)(v41 + 4 * v1418);
                    uint64_t v1513 = 8 * v580;
                    uint64_t v1540 = 8 * *(void *)&v576[2 * v1418];
                    do
                    {
                      int v1493 = v585;
                      uint64_t v1503 = v583;
                      if (v1574 >= 1)
                      {
                        int v586 = 0;
                        uint64_t v587 = *(void *)(v577 + 8 * v1453);
                        int v588 = *(_DWORD *)(v41 + 4 * v1453);
                        uint64_t v589 = 8 * *(void *)&v576[2 * v1453];
                        uint64_t v591 = v583;
                        uint64_t v590 = v1513;
                        do
                        {
                          if (v588 >= 1)
                          {
                            int v592 = 0;
                            uint64_t v593 = *(void *)(v577 + 8 * v1523);
                            int v594 = *(_DWORD *)(v41 + 4 * v1523);
                            uint64_t v595 = 8 * *(void *)&v576[2 * v1523];
                            uint64_t v596 = v590;
                            uint64_t result = v591;
                            do
                            {
                              if (v594 >= 1)
                              {
                                int v597 = 0;
                                uint64_t v598 = *(void *)(v577 + 8 * v578);
                                int v599 = *(_DWORD *)(v41 + 4 * v578);
                                uint64_t v600 = (void *)*a2;
                                uint64_t v601 = 8 * *(void *)&v576[2 * v578];
                                uint64_t v602 = v596;
                                uint64_t v603 = result;
                                do
                                {
                                  if (v599 >= 1)
                                  {
                                    uint64_t v604 = v600[19];
                                    int v605 = (void *)((char *)v39[19] + v602);
                                    int v606 = v599;
                                    do
                                    {
                                      *(unsigned char *)(v604 + v603) = *v605 != 0;
                                      v604 += v598;
                                      int v605 = (void *)((char *)v605 + v601);
                                      --v606;
                                    }
                                    while (v606);
                                  }
                                  v603 += v593;
                                  ++v597;
                                  v602 += v595;
                                }
                                while (v597 != v594);
                              }
                              result += v587;
                              ++v592;
                              v596 += v589;
                            }
                            while (v592 != v588);
                          }
                          v591 += v1557;
                          ++v586;
                          v590 += v1540;
                        }
                        while (v586 != v1574);
                      }
                      uint64_t v583 = v1503 + v1473;
                      int v585 = v1493 + 1;
                      v1513 += v1463;
                    }
                    while (v1493 + 1 != v1483);
                  }
                  v574 += v1438;
                }
                while ((unint64_t)v1443 > v1448 + v1438);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v9 = 0;
            char v10 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v11 = v3[19];
            do
              *(unsigned char *)(v11 + v9++) = v10;
            while (*(void *)(*a2 + 48) > v9);
          }
          break;
        case 1:
          uint64_t v51 = *(void *)(*(void *)result + 160);
          if (v51)
          {
            uint64_t v52 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v53 = (unsigned char *)v3[19];
            uint64_t v54 = 8 * v51;
            do
            {
              uint64_t v55 = *v52++;
              *v53++ = v55;
              v54 -= 8;
            }
            while (v54);
          }
          break;
        case 2:
          uint64_t v56 = *(int ***)result;
          uint64_t v57 = **(int ***)result;
          switch(v56[1] - *v56)
          {
            case 1:
              if (*v57 >= 1)
              {
                uint64_t v58 = 0;
                uint64_t v59 = 0;
                uint64_t v60 = v56[19];
                uint64_t v61 = v3[19];
                do
                {
                  *(unsigned char *)(v61 + v58) = *(void *)&v60[2 * v59];
                  v59 += *(void *)v56[3];
                  ++v58;
                }
                while (**v56 > (int)v58);
              }
              break;
            case 2:
              int v265 = *v57;
              if (*v57 >= 1)
              {
                int v266 = 0;
                uint64_t v267 = 0;
                uint64_t v268 = 0;
                int v269 = v56[19];
                uint64_t v270 = v3[19];
                do
                {
                  int v271 = v57[1];
                  if (v271 < 1)
                  {
                    uint64_t v272 = v56[3];
                    uint64_t v273 = *((void *)v272 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v270 + v267 + result) = *(void *)&v269[2 * v268];
                      uint64_t v272 = v56[3];
                      uint64_t v273 = *((void *)v272 + 1);
                      v268 += v273;
                      uint64_t v57 = *v56;
                      int v271 = (*v56)[1];
                      ++result;
                    }
                    while ((int)result < v271);
                    int v265 = *v57;
                    v267 += result;
                  }
                  uint64_t v268 = *(void *)v272 + v268 - v273 * v271;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            case 3:
              int v274 = *v57;
              if (*v57 >= 1)
              {
                int v275 = 0;
                uint64_t v276 = 0;
                uint64_t v277 = 0;
                uint64_t v278 = v56[19];
                uint64_t v279 = v3[19];
                do
                {
                  int v280 = v57[1];
                  if (v280 < 1)
                  {
                    uint64_t v284 = v56[3];
                    uint64_t v285 = *((void *)v284 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v280; ++i)
                    {
                      int v282 = v57[2];
                      if (v282 < 1)
                      {
                        uint64_t v284 = v56[3];
                        uint64_t result = *((void *)v284 + 2);
                      }
                      else
                      {
                        uint64_t v283 = 0;
                        do
                        {
                          *(unsigned char *)(v279 + v276 + v283) = *(void *)&v278[2 * v277];
                          uint64_t v284 = v56[3];
                          uint64_t result = *((void *)v284 + 2);
                          v277 += result;
                          uint64_t v57 = *v56;
                          int v282 = (*v56)[2];
                          ++v283;
                        }
                        while ((int)v283 < v282);
                        v276 += v283;
                      }
                      uint64_t v285 = *((void *)v284 + 1);
                      uint64_t v277 = v285 + v277 - result * v282;
                      int v280 = v57[1];
                    }
                    int v274 = *v57;
                  }
                  uint64_t v277 = *(void *)v284 + v277 - v285 * v280;
                  ++v275;
                }
                while (v275 < v274);
              }
              break;
            case 4:
              int v286 = *v57;
              if (*v57 >= 1)
              {
                int v287 = 0;
                uint64_t v288 = 0;
                uint64_t v289 = 0;
                uint64_t v290 = v56[19];
                uint64_t v291 = v3[19];
                do
                {
                  int v292 = v57[1];
                  if (v292 < 1)
                  {
                    uint64_t v298 = v56[3];
                    uint64_t v300 = *((void *)v298 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v292; ++j)
                    {
                      int v294 = v57[2];
                      if (v294 < 1)
                      {
                        uint64_t v298 = v56[3];
                        uint64_t v299 = *((void *)v298 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v294; ++k)
                        {
                          int v296 = v57[3];
                          if (v296 < 1)
                          {
                            uint64_t v298 = v56[3];
                            uint64_t result = *((void *)v298 + 3);
                          }
                          else
                          {
                            uint64_t v297 = 0;
                            do
                            {
                              *(unsigned char *)(v291 + v288 + v297) = *(void *)&v290[2 * v289];
                              uint64_t v298 = v56[3];
                              uint64_t result = *((void *)v298 + 3);
                              v289 += result;
                              uint64_t v57 = *v56;
                              int v296 = (*v56)[3];
                              ++v297;
                            }
                            while ((int)v297 < v296);
                            v288 += v297;
                          }
                          uint64_t v299 = *((void *)v298 + 2);
                          uint64_t v289 = v299 + v289 - result * v296;
                          int v294 = v57[2];
                        }
                      }
                      uint64_t v300 = *((void *)v298 + 1);
                      uint64_t v289 = v300 + v289 - v299 * v294;
                      int v292 = v57[1];
                    }
                    int v286 = *v57;
                  }
                  uint64_t v289 = *(void *)v298 + v289 - v300 * v292;
                  ++v287;
                }
                while (v287 < v286);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v256 = 0;
                uint64_t v257 = v56[19];
                uint64_t v258 = v3[19];
                do
                {
                  ldiv_t v259 = *v56;
                  unint64_t v260 = (unint64_t)((char *)v56[1] - (char *)*v56) >> 2;
                  uint64_t v261 = 0;
                  uint64_t v262 = (v260 - 1);
                  if ((int)v260 - 1 >= 0)
                  {
                    uint64_t v263 = v56[3];
                    LODWORD(result) = v256;
                    do
                    {
                      ldiv_t v264 = ldiv((int)result, v259[v262]);
                      uint64_t result = v264.quot;
                      v261 += *(void *)&v263[2 * v262--] * v264.rem;
                    }
                    while (v262 != -1);
                  }
                  *(unsigned char *)(v258 + v256++) = *(void *)&v257[2 * v261];
                }
                while (v256 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v62 = *(int ***)result;
          uint64_t v63 = (uint64_t *)(*(void *)result + 24);
          uint64_t v64 = v3 + 3;
          uint64_t v66 = **(void **)result;
          uint64_t v65 = *(void *)(*(void *)result + 8);
          uint64_t v67 = v65 - v66;
          switch((v65 - v66) >> 2)
          {
            case 1:
              uint64_t v68 = (v67 << 30) - 0x100000000;
              int v69 = *(_DWORD *)(v66 + (v68 >> 30));
              if (v69 >= 1)
              {
                uint64_t v70 = v68 >> 29;
                uint64_t v71 = *(void *)(*v63 + v70);
                uint64_t v72 = *(void *)(*v64 + v70);
                uint64_t v73 = (unsigned char *)v3[19];
                uint64_t v74 = v62[19];
                uint64_t v75 = 8 * v71;
                do
                {
                  *uint64_t v73 = *(void *)v74;
                  v73 += v72;
                  uint64_t v74 = (int *)((char *)v74 + v75);
                  --v69;
                }
                while (v69);
              }
              break;
            case 2:
              uint64_t v734 = (v67 << 30) - 0x200000000;
              int v735 = *(_DWORD *)(v66 + (v734 >> 30));
              if (v735 >= 1)
              {
                uint64_t v736 = 0;
                int v737 = 0;
                uint64_t v738 = 0;
                uint64_t v739 = v734 >> 29;
                uint64_t v740 = *(void *)(*v63 + v739);
                uint64_t v741 = *(void *)(*v64 + v739);
                uint64_t v742 = 8 * v740;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v743 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v744 = *(int *)((char *)*v62 + (v743 >> 30));
                  if (v744 >= 1)
                  {
                    uint64_t v745 = v743 >> 29;
                    uint64_t v746 = *(void *)((char *)v62[3] + v745);
                    uint64_t v747 = *(void *)(*v64 + v745);
                    uint64_t v748 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v736;
                    uint64_t v749 = 8 * v746;
                    do
                    {
                      *(unsigned char *)(v748 + v738) = *(void *)result;
                      v748 += v747;
                      result += v749;
                      --v744;
                    }
                    while (v744);
                  }
                  v738 += v741;
                  ++v737;
                  v736 += v742;
                }
                while (v737 != v735);
              }
              break;
            case 3:
              uint64_t v750 = (v67 << 30) - 0x300000000;
              int v751 = *(_DWORD *)(v66 + (v750 >> 30));
              if (v751 >= 1)
              {
                uint64_t v752 = 0;
                int v753 = 0;
                uint64_t v754 = 0;
                uint64_t v755 = v750 >> 29;
                uint64_t v756 = *(void *)(*v63 + v755);
                uint64_t v757 = *(void *)(*v64 + v755);
                uint64_t v758 = 8 * v756;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v759 = *(int *)((char *)*v62 + (result >> 30));
                  if (v759 >= 1)
                  {
                    int v760 = 0;
                    uint64_t v761 = result >> 29;
                    uint64_t v762 = *(void *)((char *)v62[3] + v761);
                    uint64_t result = *(void *)(*v64 + v761);
                    uint64_t v763 = 8 * v762;
                    uint64_t v764 = v752;
                    uint64_t v765 = v754;
                    do
                    {
                      uint64_t v766 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v767 = *(int *)((char *)*v62 + (v766 >> 30));
                      if (v767 >= 1)
                      {
                        uint64_t v768 = v766 >> 29;
                        uint64_t v769 = *(void *)((char *)v62[3] + v768);
                        uint64_t v770 = *(void *)(*v64 + v768);
                        uint64_t v771 = *(void *)(*a2 + 152);
                        uint64_t v772 = (void *)(*(void *)(*(void *)v5 + 152) + v764);
                        uint64_t v773 = 8 * v769;
                        do
                        {
                          *(unsigned char *)(v771 + v765) = *v772;
                          v771 += v770;
                          uint64_t v772 = (void *)((char *)v772 + v773);
                          --v767;
                        }
                        while (v767);
                      }
                      v765 += result;
                      ++v760;
                      v764 += v763;
                    }
                    while (v760 != v759);
                  }
                  v754 += v757;
                  ++v753;
                  v752 += v758;
                }
                while (v753 != v751);
              }
              break;
            case 4:
              uint64_t v774 = *(int ***)result;
              uint64_t v775 = (void *)(*(void *)result + 24);
              uint64_t v776 = v3 + 3;
              goto LABEL_567;
            case 5:
              uint64_t v777 = (v67 << 30) - 0x500000000;
              int v778 = *(_DWORD *)(v66 + (v777 >> 30));
              if (v778 >= 1)
              {
                uint64_t v779 = 0;
                uint64_t v780 = 0;
                uint64_t v781 = v777 >> 29;
                uint64_t v782 = *(void *)(*v63 + v781);
                uint64_t v783 = *(void *)(*v64 + v781);
                do
                {
                  v779 += v782;
                  v780 += v783;
                  --v778;
                }
                while (v778);
              }
              break;
            default:
              LODWORD(v713) = 1;
              uint64_t v714 = -20;
              do
              {
                uint64_t v713 = *(int *)(v65 + v714) * (uint64_t)(int)v713;
                v714 += 4;
              }
              while (v714);
              if (v62[6])
              {
                uint64_t result = 0;
                uint64_t v715 = *(void **)v5;
                v1560 = v64;
                uint64_t v1526 = v713;
                do
                {
                  ldiv_t v716 = *v62;
                  unint64_t v717 = (unint64_t)((char *)v62[1] - (char *)*v62) >> 2;
                  uint64_t v718 = (v717 - 1);
                  uint64_t v1577 = result;
                  v1543 = v715;
                  uint64_t v719 = 0;
                  if ((int)v717 - 1 >= 0)
                  {
                    uint64_t v720 = *v63;
                    do
                    {
                      ldiv_t v721 = ldiv((int)result, v716[v718]);
                      LODWORD(result) = v721.quot;
                      v719 += *(void *)(v720 + 8 * v718--) * v721.rem;
                    }
                    while (v718 != -1);
                  }
                  uint64_t v722 = *(void *)*a2;
                  unint64_t v723 = (unint64_t)(*(void *)(*a2 + 8) - v722) >> 2;
                  uint64_t v724 = *v1560;
                  uint64_t v725 = 0;
                  uint64_t v726 = (v723 - 1);
                  if ((int)v723 - 1 >= 0)
                  {
                    int quot = v1577;
                    do
                    {
                      ldiv_t v728 = ldiv(quot, *(int *)(v722 + 4 * v726));
                      int quot = v728.quot;
                      v725 += *(void *)(v724 + 8 * v726--) * v728.rem;
                    }
                    while (v726 != -1);
                  }
                  uint64_t v715 = v1543;
                  uint64_t v729 = ((v715[1] - *v715) << 30) - 0x500000000;
                  int v730 = *(int *)((char *)v716 + (v729 >> 30));
                  if (v730 >= 1)
                  {
                    uint64_t v731 = v729 >> 29;
                    uint64_t v732 = *(void *)(*v63 + v731);
                    uint64_t v733 = *(void *)(v724 + v731);
                    do
                    {
                      v719 += v732;
                      v725 += v733;
                      --v730;
                    }
                    while (v730);
                    uint64_t v715 = *(void **)v5;
                  }
                  uint64_t result = v1577 + v1526;
                }
                while (v715[6] > (unint64_t)(v1577 + v1526));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = **(_DWORD **)(*(void *)result + 152);
            int v14 = (_DWORD *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          uint64_t v76 = *(void *)(*(void *)result + 160);
          if (v76)
          {
            uint64_t v77 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v78 = (_DWORD *)v3[19];
            uint64_t v79 = 8 * v76;
            do
            {
              uint64_t v80 = *v77++;
              *v78++ = v80;
              v79 -= 8;
            }
            while (v79);
          }
          break;
        case 2:
          uint64_t v81 = *(int ***)result;
          uint64_t v82 = **(int ***)result;
          uint64_t v83 = *(void *)(*(void *)result + 8) - (void)v82;
          switch(v83 >> 2)
          {
            case 1:
              if (*v82 >= 1)
              {
                uint64_t v84 = 0;
                uint64_t v85 = v81[19];
                uint64_t v86 = v3[19];
                uint64_t v87 = 8 * *(void *)v81[3];
                do
                {
                  *(_DWORD *)(v86 + 4 * v84) = *(void *)v85;
                  uint64_t v85 = (int *)((char *)v85 + v87);
                  ++v84;
                }
                while (*v82 > (int)v84);
              }
              break;
            case 2:
              int v310 = *v82;
              if (*v82 >= 1)
              {
                int v311 = 0;
                uint64_t v312 = 0;
                uint64_t v313 = 0;
                int v314 = v81[19];
                uint64_t v315 = v3[19];
                int v316 = v81[3];
                uint64_t v317 = *(void *)v316;
                uint64_t v318 = *((void *)v316 + 1);
                int v319 = v82[1];
                do
                {
                  if (v319 >= 1)
                  {
                    uint64_t v320 = 0;
                    do
                    {
                      *(_DWORD *)(v315 + 4 * v312 + 4 * v320) = *(void *)&v314[2 * v313];
                      v313 += v318;
                      int v319 = v82[1];
                      ++v320;
                    }
                    while ((int)v320 < v319);
                    int v310 = *v82;
                    v312 += v320;
                  }
                  uint64_t v313 = v313 + v317 - v318 * v319;
                  ++v311;
                }
                while (v311 < v310);
              }
              break;
            case 3:
              uint64_t result = *v82;
              if ((int)result >= 1)
              {
                int v321 = 0;
                uint64_t v322 = 0;
                uint64_t v323 = 0;
                int v324 = v81[19];
                uint64_t v325 = v3[19];
                uint64_t v326 = v81[3];
                uint64_t v327 = *(void *)v326;
                uint64_t v328 = *((void *)v326 + 1);
                int v329 = v82[1];
                do
                {
                  if (v329 >= 1)
                  {
                    int v330 = 0;
                    int v331 = v81[3];
                    uint64_t v332 = *((void *)v326 + 2);
                    int v333 = v82[2];
                    do
                    {
                      if (v333 >= 1)
                      {
                        uint64_t v334 = 0;
                        uint64_t v335 = *((void *)v331 + 2);
                        do
                        {
                          *(_DWORD *)(v325 + 4 * v322 + 4 * v334) = *(void *)&v324[2 * v323];
                          v323 += v335;
                          int v333 = v82[2];
                          ++v334;
                        }
                        while ((int)v334 < v333);
                        int v329 = v82[1];
                        v322 += v334;
                      }
                      uint64_t v323 = v323 + v328 - v332 * v333;
                      ++v330;
                    }
                    while (v330 < v329);
                    uint64_t result = *v82;
                  }
                  uint64_t v323 = v323 + v327 - v328 * v329;
                  ++v321;
                }
                while (v321 < (int)result);
              }
              break;
            case 4:
              int v336 = *v82;
              if (*v82 >= 1)
              {
                int v337 = 0;
                uint64_t v338 = 0;
                uint64_t v339 = 0;
                int v340 = v81[19];
                uint64_t v341 = v3[19];
                uint64_t v342 = v81[3];
                uint64_t v343 = *(void *)v342;
                uint64_t v344 = *((void *)v342 + 1);
                int v345 = v82[1];
                do
                {
                  if (v345 >= 1)
                  {
                    int v346 = 0;
                    uint64_t v347 = v81[3];
                    uint64_t v348 = *((void *)v342 + 2);
                    int v349 = v82[2];
                    do
                    {
                      if (v349 >= 1)
                      {
                        int v350 = 0;
                        uint64_t v351 = v81[3];
                        uint64_t v352 = *((void *)v347 + 2);
                        uint64_t v353 = *((void *)v347 + 3);
                        int v354 = v82[3];
                        do
                        {
                          if (v354 >= 1)
                          {
                            uint64_t v355 = 0;
                            uint64_t v356 = *((void *)v351 + 3);
                            do
                            {
                              *(_DWORD *)(v341 + 4 * v338 + 4 * v355) = *(void *)&v340[2 * v339];
                              v339 += v356;
                              int v354 = v82[3];
                              ++v355;
                            }
                            while ((int)v355 < v354);
                            int v349 = v82[2];
                            v338 += v355;
                          }
                          uint64_t v339 = v339 + v352 - v353 * v354;
                          ++v350;
                        }
                        while (v350 < v349);
                        int v345 = v82[1];
                      }
                      uint64_t v339 = v339 + v344 - v348 * v349;
                      ++v346;
                    }
                    while (v346 < v345);
                    int v336 = *v82;
                  }
                  uint64_t result = v345;
                  uint64_t v339 = v339 + v343 - v344 * v345;
                  ++v337;
                }
                while (v337 < v336);
              }
              break;
            default:
              uint64_t v301 = v3[6];
              if (v301)
              {
                uint64_t v302 = 0;
                uint64_t v303 = v81[19];
                uint64_t v304 = v3[19];
                uint64_t v305 = ((unint64_t)v83 >> 2) - 1;
                int v306 = v81[3];
                do
                {
                  uint64_t v307 = 0;
                  if ((v305 & 0x80000000) == 0)
                  {
                    uint64_t v308 = v305;
                    LODWORD(result) = v302;
                    do
                    {
                      ldiv_t v309 = ldiv((int)result, v82[v308]);
                      uint64_t result = v309.quot;
                      v307 += *(void *)&v306[2 * v308--] * v309.rem;
                    }
                    while (v308 != -1);
                  }
                  *(_DWORD *)(v304 + 4 * v302++) = *(void *)&v303[2 * v307];
                }
                while (v302 != v301);
              }
              break;
          }
          break;
        case 3:
          uint64_t v88 = *(unsigned int ***)result;
          uint64_t v90 = **(void **)result;
          uint64_t v89 = *(void *)(*(void *)result + 8);
          unint64_t v91 = v89 - v90;
          switch((v89 - v90) >> 2)
          {
            case 1:
              uint64_t v92 = (v91 << 30) - 0x100000000;
              int v93 = *(_DWORD *)(v90 + (v92 >> 30));
              if (v93 >= 1)
              {
                uint64_t v94 = v92 >> 29;
                uint64_t v95 = *(void *)((char *)v88[3] + v94);
                uint64_t v96 = *(void *)(v3[3] + v94);
                uint64_t v97 = (_DWORD *)v3[19];
                uint64_t v98 = v88[19];
                uint64_t v99 = 4 * v96;
                uint64_t v100 = 8 * v95;
                do
                {
                  _DWORD *v97 = *(void *)v98;
                  uint64_t v97 = (_DWORD *)((char *)v97 + v99);
                  uint64_t v98 = (unsigned int *)((char *)v98 + v100);
                  --v93;
                }
                while (v93);
              }
              break;
            case 2:
              uint64_t v820 = (v91 << 30) - 0x200000000;
              int v821 = *(_DWORD *)(v90 + (v820 >> 30));
              if (v821 >= 1)
              {
                uint64_t v822 = 0;
                uint64_t v823 = 0;
                int v824 = 0;
                uint64_t v825 = v88[3];
                uint64_t v826 = v820 >> 29;
                uint64_t v827 = *(void *)((char *)v825 + v826);
                uint64_t v828 = v3[3];
                uint64_t v829 = (v91 << 30) - 0x100000000;
                uint64_t v830 = *(void *)((char *)v825 + (v829 >> 29));
                uint64_t v831 = *(void *)(v828 + (v829 >> 29));
                uint64_t v832 = v829 >> 32;
                uint64_t v833 = 4 * *(void *)(v828 + v826);
                uint64_t v834 = 4 * v831;
                uint64_t v835 = 8 * v827;
                uint64_t v836 = 8 * v830;
                do
                {
                  uint64_t result = *(unsigned int *)(v90 + 4 * v832);
                  if ((int)result >= 1)
                  {
                    uint64_t v837 = (_DWORD *)(v3[19] + v823);
                    int v838 = (void *)((char *)v88[19] + v822);
                    do
                    {
                      *uint64_t v837 = *v838;
                      uint64_t v837 = (_DWORD *)((char *)v837 + v834);
                      int v838 = (void *)((char *)v838 + v836);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v824;
                  v823 += v833;
                  v822 += v835;
                }
                while (v824 != v821);
              }
              break;
            case 3:
              uint64_t v839 = (v91 << 30) - 0x300000000;
              int v840 = *(_DWORD *)(v90 + (v839 >> 30));
              if (v840 >= 1)
              {
                uint64_t v841 = 0;
                uint64_t v842 = 0;
                int v843 = 0;
                uint64_t v844 = v91 << 30;
                uint64_t v845 = v88[3];
                uint64_t v846 = v839 >> 29;
                uint64_t v847 = *(void *)((char *)v845 + v846);
                uint64_t v848 = v3[3];
                uint64_t v849 = *(void *)(v848 + v846);
                uint64_t v850 = (v844 - 0x200000000) >> 29;
                uint64_t v851 = *(void *)((char *)v845 + v850);
                uint64_t v852 = (v844 - 0x200000000) >> 32;
                uint64_t v853 = (v844 - 0x100000000) >> 32;
                uint64_t v854 = 4 * v849;
                uint64_t v855 = 4 * *(void *)(v848 + v850);
                uint64_t result = 8 * v847;
                uint64_t v856 = 8 * v851;
                do
                {
                  int v857 = *(_DWORD *)(v90 + 4 * v852);
                  if (v857 >= 1)
                  {
                    int v858 = 0;
                    int v859 = (void *)*a2;
                    uint64_t v860 = 4 * *(void *)(v848 + 8 * v853);
                    uint64_t v861 = 8 * *(void *)&v845[2 * v853];
                    uint64_t v862 = v841;
                    uint64_t v863 = v842;
                    do
                    {
                      int v864 = *(_DWORD *)(v90 + 4 * v853);
                      if (v864 >= 1)
                      {
                        int v865 = (_DWORD *)(v859[19] + v863);
                        uint64_t v866 = (void *)((char *)v88[19] + v862);
                        do
                        {
                          *int v865 = *v866;
                          int v865 = (_DWORD *)((char *)v865 + v860);
                          uint64_t v866 = (void *)((char *)v866 + v861);
                          --v864;
                        }
                        while (v864);
                      }
                      ++v858;
                      v863 += v855;
                      v862 += v856;
                    }
                    while (v858 != v857);
                  }
                  ++v843;
                  v842 += v854;
                  v841 += result;
                }
                while (v843 != v840);
              }
              break;
            case 4:
              uint64_t v867 = (v91 << 30) - 0x400000000;
              int v1579 = *(_DWORD *)(v90 + (v867 >> 30));
              if (v1579 >= 1)
              {
                uint64_t v868 = 0;
                uint64_t v869 = 0;
                int v870 = 0;
                uint64_t v871 = v91 << 30;
                uint64_t v872 = v88[3];
                uint64_t v873 = v867 >> 29;
                uint64_t v874 = v3[3];
                uint64_t v1562 = (v871 - 0x300000000) >> 32;
                uint64_t v875 = (v871 - 0x300000000) >> 29;
                uint64_t v876 = *(void *)((char *)v872 + v875);
                uint64_t v877 = *(void *)(v874 + v875);
                uint64_t v878 = (v871 - 0x200000000) >> 32;
                uint64_t v879 = (v871 - 0x100000000) >> 32;
                uint64_t v1545 = 4 * *(void *)(v874 + v873);
                uint64_t result = 4 * v877;
                uint64_t v1528 = 8 * *(void *)((char *)v872 + v873);
                uint64_t v880 = 8 * v876;
                do
                {
                  int v881 = *(_DWORD *)(v90 + 4 * v1562);
                  if (v881 >= 1)
                  {
                    int v882 = 0;
                    uint64_t v883 = 4 * *(void *)(v874 + 8 * v878);
                    uint64_t v884 = 8 * *(void *)&v872[2 * v878];
                    uint64_t v885 = v868;
                    uint64_t v886 = v869;
                    do
                    {
                      int v887 = *(_DWORD *)(v90 + 4 * v878);
                      if (v887 >= 1)
                      {
                        int v888 = 0;
                        int v889 = (void *)*a2;
                        uint64_t v890 = 4 * *(void *)(v874 + 8 * v879);
                        uint64_t v891 = 8 * *(void *)&v872[2 * v879];
                        uint64_t v892 = v885;
                        uint64_t v893 = v886;
                        do
                        {
                          int v894 = *(_DWORD *)(v90 + 4 * v879);
                          if (v894 >= 1)
                          {
                            uint64_t v895 = (_DWORD *)(v889[19] + v893);
                            uint64_t v896 = (void *)((char *)v88[19] + v892);
                            do
                            {
                              _DWORD *v895 = *v896;
                              uint64_t v895 = (_DWORD *)((char *)v895 + v890);
                              uint64_t v896 = (void *)((char *)v896 + v891);
                              --v894;
                            }
                            while (v894);
                          }
                          ++v888;
                          v893 += v883;
                          v892 += v884;
                        }
                        while (v888 != v887);
                      }
                      ++v882;
                      v886 += result;
                      v885 += v880;
                    }
                    while (v882 != v881);
                  }
                  ++v870;
                  v869 += v1545;
                  v868 += v1528;
                }
                while (v870 != v1579);
              }
              break;
            case 5:
              uint64_t v897 = (v91 << 30) - 0x500000000;
              int v1486 = *(_DWORD *)(v90 + (v897 >> 30));
              if (v1486 >= 1)
              {
                uint64_t v1506 = 0;
                uint64_t v1516 = 0;
                int v1496 = 0;
                uint64_t v898 = v91 << 30;
                uint64_t v899 = v88[3];
                uint64_t v900 = v897 >> 29;
                uint64_t v901 = v3[3];
                uint64_t v1476 = (v898 - 0x400000000) >> 32;
                uint64_t v902 = (v898 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v899 + v902);
                uint64_t v1563 = (v898 - 0x300000000) >> 32;
                uint64_t v903 = (v898 - 0x200000000) >> 32;
                uint64_t v904 = (v898 - 0x100000000) >> 32;
                uint64_t v1466 = 4 * *(void *)(v901 + v900);
                uint64_t v1546 = 4 * *(void *)(v901 + v902);
                uint64_t v1456 = 8 * *(void *)((char *)v899 + v900);
                uint64_t v1529 = 8 * result;
                do
                {
                  int v1580 = *(_DWORD *)(v90 + 4 * v1476);
                  if (v1580 >= 1)
                  {
                    int v905 = 0;
                    uint64_t v906 = 4 * *(void *)(v901 + 8 * v1563);
                    uint64_t v907 = 8 * *(void *)&v899[2 * v1563];
                    uint64_t v909 = v1506;
                    uint64_t v908 = v1516;
                    do
                    {
                      int v910 = *(_DWORD *)(v90 + 4 * v1563);
                      if (v910 >= 1)
                      {
                        int v911 = 0;
                        uint64_t v912 = 4 * *(void *)(v901 + 8 * v903);
                        uint64_t v913 = 8 * *(void *)&v899[2 * v903];
                        uint64_t v914 = v908;
                        uint64_t v915 = v909;
                        do
                        {
                          int v916 = *(_DWORD *)(v90 + 4 * v903);
                          if (v916 >= 1)
                          {
                            int v917 = 0;
                            uint64_t result = *a2;
                            uint64_t v918 = 4 * *(void *)(v901 + 8 * v904);
                            uint64_t v919 = 8 * *(void *)&v899[2 * v904];
                            uint64_t v920 = v914;
                            uint64_t v921 = v915;
                            do
                            {
                              int v922 = *(_DWORD *)(v90 + 4 * v904);
                              if (v922 >= 1)
                              {
                                uint64_t v923 = (_DWORD *)(*(void *)(result + 152) + v921);
                                unint64_t v924 = (void *)((char *)v88[19] + v920);
                                do
                                {
                                  *uint64_t v923 = *v924;
                                  uint64_t v923 = (_DWORD *)((char *)v923 + v918);
                                  unint64_t v924 = (void *)((char *)v924 + v919);
                                  --v922;
                                }
                                while (v922);
                              }
                              ++v917;
                              v921 += v912;
                              v920 += v913;
                            }
                            while (v917 != v916);
                          }
                          ++v911;
                          v915 += v906;
                          v914 += v907;
                        }
                        while (v911 != v910);
                      }
                      ++v905;
                      v909 += v1546;
                      v908 += v1529;
                    }
                    while (v905 != v1580);
                  }
                  v1506 += v1466;
                  v1516 += v1456;
                  ++v1496;
                }
                while (v1496 != v1486);
              }
              break;
            default:
              LODWORD(v784) = 1;
              uint64_t v785 = -20;
              do
              {
                uint64_t v784 = *(int *)(v89 + v785) * (uint64_t)(int)v784;
                v785 += 4;
              }
              while (v785);
              uint64_t v1439 = v88[6];
              if (v1439)
              {
                uint64_t result = 0;
                uint64_t v1465 = *v3;
                uint64_t v786 = (v91 << 30) - 0x500000000;
                uint64_t v1429 = (v91 >> 2) - 1;
                uint64_t v787 = v88[3];
                uint64_t v1424 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1419 = v786 >> 32;
                uint64_t v788 = v3[3];
                uint64_t v1475 = (uint64_t)((v91 << 30) - 0x400000000) >> 32;
                uint64_t v1561 = (uint64_t)((v91 << 30) - 0x300000000) >> 32;
                uint64_t v789 = (uint64_t)((v91 << 30) - 0x200000000) >> 32;
                uint64_t v790 = (uint64_t)((v91 << 30) - 0x100000000) >> 32;
                uint64_t v1449 = 8 * *(void *)((char *)v787 + (v786 >> 29));
                uint64_t v1455 = 4 * *(void *)(v788 + (v786 >> 29));
                uint64_t v1434 = v784;
                do
                {
                  uint64_t v791 = v1429;
                  uint64_t v1444 = result;
                  uint64_t v792 = 0;
                  if ((v1429 & 0x80000000) != 0)
                  {
                    uint64_t v793 = v1424;
                  }
                  else
                  {
                    uint64_t v793 = v1424;
                    do
                    {
                      ldiv_t v794 = ldiv((int)result, *(int *)(v90 + 4 * v791));
                      LODWORD(result) = v794.quot;
                      v792 += *(void *)&v787[2 * v791--] * v794.rem;
                    }
                    while (v791 != -1);
                  }
                  uint64_t v795 = 0;
                  if ((v793 & 0x80000000) == 0)
                  {
                    int v796 = v1444;
                    do
                    {
                      ldiv_t v797 = ldiv(v796, *(int *)(v1465 + 4 * v793));
                      int v796 = v797.quot;
                      v795 += *(void *)(v788 + 8 * v793--) * v797.rem;
                    }
                    while (v793 != -1);
                  }
                  int v1485 = *(_DWORD *)(v90 + 4 * v1419);
                  if (v1485 >= 1)
                  {
                    int v798 = 0;
                    uint64_t v1515 = 4 * v795;
                    uint64_t v1544 = 4 * *(void *)(v788 + 8 * v1475);
                    uint64_t v1505 = 8 * v792;
                    uint64_t v1527 = 8 * *(void *)&v787[2 * v1475];
                    do
                    {
                      int v1495 = v798;
                      int v1578 = *(_DWORD *)(v90 + 4 * v1475);
                      if (v1578 >= 1)
                      {
                        int v799 = 0;
                        uint64_t v800 = 4 * *(void *)(v788 + 8 * v1561);
                        uint64_t v801 = 8 * *(void *)&v787[2 * v1561];
                        uint64_t v803 = v1505;
                        uint64_t v802 = v1515;
                        do
                        {
                          int v804 = *(_DWORD *)(v90 + 4 * v1561);
                          if (v804 >= 1)
                          {
                            int v805 = 0;
                            uint64_t v806 = 4 * *(void *)(v788 + 8 * v789);
                            uint64_t v807 = 8 * *(void *)&v787[2 * v789];
                            uint64_t v808 = v803;
                            uint64_t v809 = v802;
                            do
                            {
                              int v810 = *(_DWORD *)(v90 + 4 * v789);
                              if (v810 >= 1)
                              {
                                int v811 = 0;
                                int v812 = (void *)*a2;
                                uint64_t v813 = 4 * *(void *)(v788 + 8 * v790);
                                uint64_t v814 = 8 * *(void *)&v787[2 * v790];
                                uint64_t v815 = v808;
                                uint64_t v816 = v809;
                                do
                                {
                                  int v817 = *(_DWORD *)(v90 + 4 * v790);
                                  if (v817 >= 1)
                                  {
                                    uint64_t v818 = (_DWORD *)(v812[19] + v816);
                                    int v819 = (void *)((char *)v88[19] + v815);
                                    do
                                    {
                                      *uint64_t v818 = *v819;
                                      uint64_t v818 = (_DWORD *)((char *)v818 + v813);
                                      int v819 = (void *)((char *)v819 + v814);
                                      --v817;
                                    }
                                    while (v817);
                                  }
                                  ++v811;
                                  v816 += v806;
                                  v815 += v807;
                                }
                                while (v811 != v810);
                              }
                              ++v805;
                              v809 += v800;
                              v808 += v801;
                            }
                            while (v805 != v804);
                          }
                          ++v799;
                          v802 += v1544;
                          v803 += v1527;
                        }
                        while (v799 != v1578);
                      }
                      int v798 = v1495 + 1;
                      v1515 += v1455;
                      v1505 += v1449;
                    }
                    while (v1495 + 1 != v1485);
                  }
                  uint64_t result = v1444 + v1434;
                }
                while ((unint64_t)v1439 > v1444 + v1434);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            unint64_t v15 = 0;
            char v16 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v17 = v3[19];
            do
              *(unsigned char *)(v17 + v15++) = v16;
            while (*(void *)(*a2 + 48) > v15);
          }
          break;
        case 1:
          uint64_t v101 = *(void *)(*(void *)result + 160);
          if (v101)
          {
            uint64_t v102 = *(uint64_t **)(*(void *)result + 152);
            int v103 = (unsigned char *)v3[19];
            uint64_t v104 = 8 * v101;
            do
            {
              uint64_t v105 = *v102++;
              *v103++ = v105;
              v104 -= 8;
            }
            while (v104);
          }
          break;
        case 2:
          uint64_t v106 = *(int ***)result;
          uint64_t v107 = **(int ***)result;
          switch(v106[1] - *v106)
          {
            case 1:
              if (*v107 >= 1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = 0;
                uint64_t v110 = v106[19];
                uint64_t v111 = v3[19];
                do
                {
                  *(unsigned char *)(v111 + v108) = *(void *)&v110[2 * v109];
                  v109 += *(void *)v106[3];
                  ++v108;
                }
                while (**v106 > (int)v108);
              }
              break;
            case 2:
              int v366 = *v107;
              if (*v107 >= 1)
              {
                int v367 = 0;
                uint64_t v368 = 0;
                uint64_t v369 = 0;
                int v370 = v106[19];
                uint64_t v371 = v3[19];
                do
                {
                  int v372 = v107[1];
                  if (v372 < 1)
                  {
                    uint64_t v373 = v106[3];
                    uint64_t v374 = *((void *)v373 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v371 + v368 + result) = *(void *)&v370[2 * v369];
                      uint64_t v373 = v106[3];
                      uint64_t v374 = *((void *)v373 + 1);
                      v369 += v374;
                      uint64_t v107 = *v106;
                      int v372 = (*v106)[1];
                      ++result;
                    }
                    while ((int)result < v372);
                    int v366 = *v107;
                    v368 += result;
                  }
                  uint64_t v369 = *(void *)v373 + v369 - v374 * v372;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            case 3:
              int v375 = *v107;
              if (*v107 >= 1)
              {
                int v376 = 0;
                uint64_t v377 = 0;
                uint64_t v378 = 0;
                uint64_t v379 = v106[19];
                uint64_t v380 = v3[19];
                do
                {
                  int v381 = v107[1];
                  if (v381 < 1)
                  {
                    uint64_t v385 = v106[3];
                    uint64_t v386 = *((void *)v385 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v381; ++m)
                    {
                      int v383 = v107[2];
                      if (v383 < 1)
                      {
                        uint64_t v385 = v106[3];
                        uint64_t result = *((void *)v385 + 2);
                      }
                      else
                      {
                        uint64_t v384 = 0;
                        do
                        {
                          *(unsigned char *)(v380 + v377 + v384) = *(void *)&v379[2 * v378];
                          uint64_t v385 = v106[3];
                          uint64_t result = *((void *)v385 + 2);
                          v378 += result;
                          uint64_t v107 = *v106;
                          int v383 = (*v106)[2];
                          ++v384;
                        }
                        while ((int)v384 < v383);
                        v377 += v384;
                      }
                      uint64_t v386 = *((void *)v385 + 1);
                      uint64_t v378 = v386 + v378 - result * v383;
                      int v381 = v107[1];
                    }
                    int v375 = *v107;
                  }
                  uint64_t v378 = *(void *)v385 + v378 - v386 * v381;
                  ++v376;
                }
                while (v376 < v375);
              }
              break;
            case 4:
              int v387 = *v107;
              if (*v107 >= 1)
              {
                int v388 = 0;
                uint64_t v389 = 0;
                uint64_t v390 = 0;
                uint64_t v391 = v106[19];
                uint64_t v392 = v3[19];
                do
                {
                  int v393 = v107[1];
                  if (v393 < 1)
                  {
                    uint64_t v399 = v106[3];
                    uint64_t v401 = *((void *)v399 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v393; ++n)
                    {
                      int v395 = v107[2];
                      if (v395 < 1)
                      {
                        uint64_t v399 = v106[3];
                        uint64_t v400 = *((void *)v399 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v395; ++ii)
                        {
                          int v397 = v107[3];
                          if (v397 < 1)
                          {
                            uint64_t v399 = v106[3];
                            uint64_t result = *((void *)v399 + 3);
                          }
                          else
                          {
                            uint64_t v398 = 0;
                            do
                            {
                              *(unsigned char *)(v392 + v389 + v398) = *(void *)&v391[2 * v390];
                              uint64_t v399 = v106[3];
                              uint64_t result = *((void *)v399 + 3);
                              v390 += result;
                              uint64_t v107 = *v106;
                              int v397 = (*v106)[3];
                              ++v398;
                            }
                            while ((int)v398 < v397);
                            v389 += v398;
                          }
                          uint64_t v400 = *((void *)v399 + 2);
                          uint64_t v390 = v400 + v390 - result * v397;
                          int v395 = v107[2];
                        }
                      }
                      uint64_t v401 = *((void *)v399 + 1);
                      uint64_t v390 = v401 + v390 - v400 * v395;
                      int v393 = v107[1];
                    }
                    int v387 = *v107;
                  }
                  uint64_t v390 = *(void *)v399 + v390 - v401 * v393;
                  ++v388;
                }
                while (v388 < v387);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v357 = 0;
                uint64_t v358 = v106[19];
                uint64_t v359 = v3[19];
                do
                {
                  ldiv_t v360 = *v106;
                  unint64_t v361 = (unint64_t)((char *)v106[1] - (char *)*v106) >> 2;
                  uint64_t v362 = 0;
                  uint64_t v363 = (v361 - 1);
                  if ((int)v361 - 1 >= 0)
                  {
                    uint64_t v364 = v106[3];
                    LODWORD(result) = v357;
                    do
                    {
                      ldiv_t v365 = ldiv((int)result, v360[v363]);
                      uint64_t result = v365.quot;
                      v362 += *(void *)&v364[2 * v363--] * v365.rem;
                    }
                    while (v363 != -1);
                  }
                  *(unsigned char *)(v359 + v357++) = *(void *)&v358[2 * v362];
                }
                while (v357 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v112 = *(int ***)result;
          uint64_t v113 = (uint64_t *)(*(void *)result + 24);
          uint64_t v114 = v3 + 3;
          uint64_t v116 = **(void **)result;
          uint64_t v115 = *(void *)(*(void *)result + 8);
          uint64_t v117 = v115 - v116;
          switch((v115 - v116) >> 2)
          {
            case 1:
              uint64_t v118 = (v117 << 30) - 0x100000000;
              int v119 = *(_DWORD *)(v116 + (v118 >> 30));
              if (v119 >= 1)
              {
                uint64_t v120 = v118 >> 29;
                uint64_t v121 = *(void *)(*v113 + v120);
                uint64_t v122 = *(void *)(*v114 + v120);
                uint64_t v123 = (unsigned char *)v3[19];
                uint64_t v124 = v112[19];
                uint64_t v125 = 8 * v121;
                do
                {
                  *uint64_t v123 = *(void *)v124;
                  v123 += v122;
                  uint64_t v124 = (int *)((char *)v124 + v125);
                  --v119;
                }
                while (v119);
              }
              break;
            case 2:
              uint64_t v946 = (v117 << 30) - 0x200000000;
              int v947 = *(_DWORD *)(v116 + (v946 >> 30));
              if (v947 >= 1)
              {
                uint64_t v948 = 0;
                int v949 = 0;
                uint64_t v950 = 0;
                uint64_t v951 = v946 >> 29;
                uint64_t v952 = *(void *)(*v113 + v951);
                uint64_t v953 = *(void *)(*v114 + v951);
                uint64_t v954 = 8 * v952;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v955 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v956 = *(int *)((char *)*v112 + (v955 >> 30));
                  if (v956 >= 1)
                  {
                    uint64_t v957 = v955 >> 29;
                    uint64_t v958 = *(void *)((char *)v112[3] + v957);
                    uint64_t v959 = *(void *)(*v114 + v957);
                    uint64_t v960 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v948;
                    uint64_t v961 = 8 * v958;
                    do
                    {
                      *(unsigned char *)(v960 + v950) = *(void *)result;
                      v960 += v959;
                      result += v961;
                      --v956;
                    }
                    while (v956);
                  }
                  v950 += v953;
                  ++v949;
                  v948 += v954;
                }
                while (v949 != v947);
              }
              break;
            case 3:
              uint64_t v962 = (v117 << 30) - 0x300000000;
              int v963 = *(_DWORD *)(v116 + (v962 >> 30));
              if (v963 >= 1)
              {
                uint64_t v964 = 0;
                int v965 = 0;
                uint64_t v966 = 0;
                uint64_t v967 = v962 >> 29;
                uint64_t v968 = *(void *)(*v113 + v967);
                uint64_t v969 = *(void *)(*v114 + v967);
                uint64_t v970 = 8 * v968;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v971 = *(int *)((char *)*v112 + (result >> 30));
                  if (v971 >= 1)
                  {
                    int v972 = 0;
                    uint64_t v973 = result >> 29;
                    uint64_t v974 = *(void *)((char *)v112[3] + v973);
                    uint64_t result = *(void *)(*v114 + v973);
                    uint64_t v975 = 8 * v974;
                    uint64_t v976 = v964;
                    uint64_t v977 = v966;
                    do
                    {
                      uint64_t v978 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v979 = *(int *)((char *)*v112 + (v978 >> 30));
                      if (v979 >= 1)
                      {
                        uint64_t v980 = v978 >> 29;
                        uint64_t v981 = *(void *)((char *)v112[3] + v980);
                        uint64_t v982 = *(void *)(*v114 + v980);
                        uint64_t v983 = *(void *)(*a2 + 152);
                        uint64_t v984 = (void *)(*(void *)(*(void *)v5 + 152) + v976);
                        uint64_t v985 = 8 * v981;
                        do
                        {
                          *(unsigned char *)(v983 + v977) = *v984;
                          v983 += v982;
                          uint64_t v984 = (void *)((char *)v984 + v985);
                          --v979;
                        }
                        while (v979);
                      }
                      v977 += result;
                      ++v972;
                      v976 += v975;
                    }
                    while (v972 != v971);
                  }
                  v966 += v969;
                  ++v965;
                  v964 += v970;
                }
                while (v965 != v963);
              }
              break;
            case 4:
              uint64_t v774 = *(int ***)result;
              uint64_t v775 = (void *)(*(void *)result + 24);
              uint64_t v776 = v3 + 3;
LABEL_567:
              break;
            case 5:
              uint64_t v986 = (v117 << 30) - 0x500000000;
              int v987 = *(_DWORD *)(v116 + (v986 >> 30));
              if (v987 >= 1)
              {
                uint64_t v988 = 0;
                uint64_t v989 = 0;
                uint64_t v990 = v986 >> 29;
                uint64_t v991 = *(void *)(*v113 + v990);
                uint64_t v992 = *(void *)(*v114 + v990);
                do
                {
                  v988 += v991;
                  v989 += v992;
                  --v987;
                }
                while (v987);
              }
              break;
            default:
              LODWORD(v925) = 1;
              uint64_t v926 = -20;
              do
              {
                uint64_t v925 = *(int *)(v115 + v926) * (uint64_t)(int)v925;
                v926 += 4;
              }
              while (v926);
              if (v112[6])
              {
                uint64_t result = 0;
                uint64_t v927 = *(void **)v5;
                uint64_t v1564 = v114;
                uint64_t v1530 = v925;
                do
                {
                  ldiv_t v928 = *v112;
                  unint64_t v929 = (unint64_t)((char *)v112[1] - (char *)*v112) >> 2;
                  uint64_t v930 = (v929 - 1);
                  uint64_t v1581 = result;
                  uint64_t v1547 = v927;
                  uint64_t v931 = 0;
                  if ((int)v929 - 1 >= 0)
                  {
                    uint64_t v932 = *v113;
                    do
                    {
                      ldiv_t v933 = ldiv((int)result, v928[v930]);
                      LODWORD(result) = v933.quot;
                      v931 += *(void *)(v932 + 8 * v930--) * v933.rem;
                    }
                    while (v930 != -1);
                  }
                  uint64_t v934 = *(void *)*a2;
                  unint64_t v935 = (unint64_t)(*(void *)(*a2 + 8) - v934) >> 2;
                  uint64_t v936 = *v1564;
                  uint64_t v937 = 0;
                  uint64_t v938 = (v935 - 1);
                  if ((int)v935 - 1 >= 0)
                  {
                    int v939 = v1581;
                    do
                    {
                      ldiv_t v940 = ldiv(v939, *(int *)(v934 + 4 * v938));
                      int v939 = v940.quot;
                      v937 += *(void *)(v936 + 8 * v938--) * v940.rem;
                    }
                    while (v938 != -1);
                  }
                  uint64_t v927 = v1547;
                  uint64_t v941 = ((v927[1] - *v927) << 30) - 0x500000000;
                  int v942 = *(int *)((char *)v928 + (v941 >> 30));
                  if (v942 >= 1)
                  {
                    uint64_t v943 = v941 >> 29;
                    uint64_t v944 = *(void *)(*v113 + v943);
                    uint64_t v945 = *(void *)(v936 + v943);
                    do
                    {
                      v931 += v944;
                      v937 += v945;
                      --v942;
                    }
                    while (v942);
                    uint64_t v927 = *(void **)v5;
                  }
                  uint64_t result = v1581 + v1530;
                }
                while (v927[6] > (unint64_t)(v1581 + v1530));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(_DWORD **)(*(void *)result + 152);
            int v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          uint64_t v126 = *(void *)(*(void *)result + 160);
          if (v126)
          {
            uint64_t v127 = *(uint64_t **)(*(void *)result + 152);
            int v128 = (_DWORD *)v3[19];
            uint64_t v129 = 8 * v126;
            do
            {
              uint64_t v130 = *v127++;
              *v128++ = v130;
              v129 -= 8;
            }
            while (v129);
          }
          break;
        case 2:
          uint64_t v131 = *(int ***)result;
          uint64_t v132 = **(int ***)result;
          uint64_t v133 = *(void *)(*(void *)result + 8) - (void)v132;
          switch(v133 >> 2)
          {
            case 1:
              if (*v132 >= 1)
              {
                uint64_t v134 = 0;
                uint64_t v135 = v131[19];
                uint64_t v136 = v3[19];
                uint64_t v137 = 8 * *(void *)v131[3];
                do
                {
                  *(_DWORD *)(v136 + 4 * v134) = *(void *)v135;
                  uint64_t v135 = (int *)((char *)v135 + v137);
                  ++v134;
                }
                while (*v132 > (int)v134);
              }
              break;
            case 2:
              int v411 = *v132;
              if (*v132 >= 1)
              {
                int v412 = 0;
                uint64_t v413 = 0;
                uint64_t v414 = 0;
                int v415 = v131[19];
                uint64_t v416 = v3[19];
                int v417 = v131[3];
                uint64_t v418 = *(void *)v417;
                uint64_t v419 = *((void *)v417 + 1);
                int v420 = v132[1];
                do
                {
                  if (v420 >= 1)
                  {
                    uint64_t v421 = 0;
                    do
                    {
                      *(_DWORD *)(v416 + 4 * v413 + 4 * v421) = *(void *)&v415[2 * v414];
                      v414 += v419;
                      int v420 = v132[1];
                      ++v421;
                    }
                    while ((int)v421 < v420);
                    int v411 = *v132;
                    v413 += v421;
                  }
                  uint64_t v414 = v414 + v418 - v419 * v420;
                  ++v412;
                }
                while (v412 < v411);
              }
              break;
            case 3:
              uint64_t result = *v132;
              if ((int)result >= 1)
              {
                int v422 = 0;
                uint64_t v423 = 0;
                uint64_t v424 = 0;
                int v425 = v131[19];
                uint64_t v426 = v3[19];
                uint64_t v427 = v131[3];
                uint64_t v428 = *(void *)v427;
                uint64_t v429 = *((void *)v427 + 1);
                int v430 = v132[1];
                do
                {
                  if (v430 >= 1)
                  {
                    int v431 = 0;
                    int v432 = v131[3];
                    uint64_t v433 = *((void *)v427 + 2);
                    int v434 = v132[2];
                    do
                    {
                      if (v434 >= 1)
                      {
                        uint64_t v435 = 0;
                        uint64_t v436 = *((void *)v432 + 2);
                        do
                        {
                          *(_DWORD *)(v426 + 4 * v423 + 4 * v435) = *(void *)&v425[2 * v424];
                          v424 += v436;
                          int v434 = v132[2];
                          ++v435;
                        }
                        while ((int)v435 < v434);
                        int v430 = v132[1];
                        v423 += v435;
                      }
                      uint64_t v424 = v424 + v429 - v433 * v434;
                      ++v431;
                    }
                    while (v431 < v430);
                    uint64_t result = *v132;
                  }
                  uint64_t v424 = v424 + v428 - v429 * v430;
                  ++v422;
                }
                while (v422 < (int)result);
              }
              break;
            case 4:
              int v437 = *v132;
              if (*v132 >= 1)
              {
                int v438 = 0;
                uint64_t v439 = 0;
                uint64_t v440 = 0;
                int v441 = v131[19];
                uint64_t v442 = v3[19];
                uint64_t v443 = v131[3];
                uint64_t v444 = *(void *)v443;
                uint64_t v445 = *((void *)v443 + 1);
                int v446 = v132[1];
                do
                {
                  if (v446 >= 1)
                  {
                    int v447 = 0;
                    uint64_t v448 = v131[3];
                    uint64_t v449 = *((void *)v443 + 2);
                    int v450 = v132[2];
                    do
                    {
                      if (v450 >= 1)
                      {
                        int v451 = 0;
                        uint64_t v452 = v131[3];
                        uint64_t v453 = *((void *)v448 + 2);
                        uint64_t v454 = *((void *)v448 + 3);
                        int v455 = v132[3];
                        do
                        {
                          if (v455 >= 1)
                          {
                            uint64_t v456 = 0;
                            uint64_t v457 = *((void *)v452 + 3);
                            do
                            {
                              *(_DWORD *)(v442 + 4 * v439 + 4 * v456) = *(void *)&v441[2 * v440];
                              v440 += v457;
                              int v455 = v132[3];
                              ++v456;
                            }
                            while ((int)v456 < v455);
                            int v450 = v132[2];
                            v439 += v456;
                          }
                          uint64_t v440 = v440 + v453 - v454 * v455;
                          ++v451;
                        }
                        while (v451 < v450);
                        int v446 = v132[1];
                      }
                      uint64_t v440 = v440 + v445 - v449 * v450;
                      ++v447;
                    }
                    while (v447 < v446);
                    int v437 = *v132;
                  }
                  uint64_t result = v446;
                  uint64_t v440 = v440 + v444 - v445 * v446;
                  ++v438;
                }
                while (v438 < v437);
              }
              break;
            default:
              uint64_t v402 = v3[6];
              if (v402)
              {
                uint64_t v403 = 0;
                uint64_t v404 = v131[19];
                uint64_t v405 = v3[19];
                uint64_t v406 = ((unint64_t)v133 >> 2) - 1;
                int v407 = v131[3];
                do
                {
                  uint64_t v408 = 0;
                  if ((v406 & 0x80000000) == 0)
                  {
                    uint64_t v409 = v406;
                    LODWORD(result) = v403;
                    do
                    {
                      ldiv_t v410 = ldiv((int)result, v132[v409]);
                      uint64_t result = v410.quot;
                      v408 += *(void *)&v407[2 * v409--] * v410.rem;
                    }
                    while (v409 != -1);
                  }
                  *(_DWORD *)(v405 + 4 * v403++) = *(void *)&v404[2 * v408];
                }
                while (v403 != v402);
              }
              break;
          }
          break;
        case 3:
          uint64_t v138 = *(unsigned int ***)result;
          uint64_t v140 = **(void **)result;
          uint64_t v139 = *(void *)(*(void *)result + 8);
          unint64_t v141 = v139 - v140;
          switch((v139 - v140) >> 2)
          {
            case 1:
              uint64_t v142 = (v141 << 30) - 0x100000000;
              int v143 = *(_DWORD *)(v140 + (v142 >> 30));
              if (v143 >= 1)
              {
                uint64_t v144 = v142 >> 29;
                uint64_t v145 = *(void *)((char *)v138[3] + v144);
                uint64_t v146 = *(void *)(v3[3] + v144);
                uint64_t v147 = (_DWORD *)v3[19];
                uint64_t v148 = v138[19];
                uint64_t v149 = 4 * v146;
                uint64_t v150 = 8 * v145;
                do
                {
                  *uint64_t v147 = *(void *)v148;
                  uint64_t v147 = (_DWORD *)((char *)v147 + v149);
                  uint64_t v148 = (unsigned int *)((char *)v148 + v150);
                  --v143;
                }
                while (v143);
              }
              break;
            case 2:
              uint64_t v1029 = (v141 << 30) - 0x200000000;
              int v1030 = *(_DWORD *)(v140 + (v1029 >> 30));
              if (v1030 >= 1)
              {
                uint64_t v1031 = 0;
                uint64_t v1032 = 0;
                int v1033 = 0;
                uint64_t v1034 = v138[3];
                uint64_t v1035 = v1029 >> 29;
                uint64_t v1036 = *(void *)((char *)v1034 + v1035);
                uint64_t v1037 = v3[3];
                uint64_t v1038 = (v141 << 30) - 0x100000000;
                uint64_t v1039 = *(void *)((char *)v1034 + (v1038 >> 29));
                uint64_t v1040 = *(void *)(v1037 + (v1038 >> 29));
                uint64_t v1041 = v1038 >> 32;
                uint64_t v1042 = 4 * *(void *)(v1037 + v1035);
                uint64_t v1043 = 4 * v1040;
                uint64_t v1044 = 8 * v1036;
                uint64_t v1045 = 8 * v1039;
                do
                {
                  uint64_t result = *(unsigned int *)(v140 + 4 * v1041);
                  if ((int)result >= 1)
                  {
                    uint64_t v1046 = (_DWORD *)(v3[19] + v1032);
                    int v1047 = (void *)((char *)v138[19] + v1031);
                    do
                    {
                      *uint64_t v1046 = *v1047;
                      uint64_t v1046 = (_DWORD *)((char *)v1046 + v1043);
                      int v1047 = (void *)((char *)v1047 + v1045);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v1033;
                  v1032 += v1042;
                  v1031 += v1044;
                }
                while (v1033 != v1030);
              }
              break;
            case 3:
              uint64_t v1048 = (v141 << 30) - 0x300000000;
              int v1049 = *(_DWORD *)(v140 + (v1048 >> 30));
              if (v1049 >= 1)
              {
                uint64_t v1050 = 0;
                uint64_t v1051 = 0;
                int v1052 = 0;
                uint64_t v1053 = v141 << 30;
                uint64_t v1054 = v138[3];
                uint64_t v1055 = v1048 >> 29;
                uint64_t v1056 = *(void *)((char *)v1054 + v1055);
                uint64_t v1057 = v3[3];
                uint64_t v1058 = *(void *)(v1057 + v1055);
                uint64_t v1059 = (v1053 - 0x200000000) >> 29;
                uint64_t v1060 = *(void *)((char *)v1054 + v1059);
                uint64_t v1061 = (v1053 - 0x200000000) >> 32;
                uint64_t v1062 = (v1053 - 0x100000000) >> 32;
                uint64_t v1063 = 4 * v1058;
                uint64_t v1064 = 4 * *(void *)(v1057 + v1059);
                uint64_t result = 8 * v1056;
                uint64_t v1065 = 8 * v1060;
                do
                {
                  int v1066 = *(_DWORD *)(v140 + 4 * v1061);
                  if (v1066 >= 1)
                  {
                    int v1067 = 0;
                    int v1068 = (void *)*a2;
                    uint64_t v1069 = 4 * *(void *)(v1057 + 8 * v1062);
                    uint64_t v1070 = 8 * *(void *)&v1054[2 * v1062];
                    uint64_t v1071 = v1050;
                    uint64_t v1072 = v1051;
                    do
                    {
                      int v1073 = *(_DWORD *)(v140 + 4 * v1062);
                      if (v1073 >= 1)
                      {
                        int v1074 = (_DWORD *)(v1068[19] + v1072);
                        uint64_t v1075 = (void *)((char *)v138[19] + v1071);
                        do
                        {
                          *int v1074 = *v1075;
                          int v1074 = (_DWORD *)((char *)v1074 + v1069);
                          uint64_t v1075 = (void *)((char *)v1075 + v1070);
                          --v1073;
                        }
                        while (v1073);
                      }
                      ++v1067;
                      v1072 += v1064;
                      v1071 += v1065;
                    }
                    while (v1067 != v1066);
                  }
                  ++v1052;
                  v1051 += v1063;
                  v1050 += result;
                }
                while (v1052 != v1049);
              }
              break;
            case 4:
              uint64_t v1076 = (v141 << 30) - 0x400000000;
              int v1583 = *(_DWORD *)(v140 + (v1076 >> 30));
              if (v1583 >= 1)
              {
                uint64_t v1077 = 0;
                uint64_t v1078 = 0;
                int v1079 = 0;
                uint64_t v1080 = v141 << 30;
                uint64_t v1081 = v138[3];
                uint64_t v1082 = v1076 >> 29;
                uint64_t v1083 = v3[3];
                uint64_t v1566 = (v1080 - 0x300000000) >> 32;
                uint64_t v1084 = (v1080 - 0x300000000) >> 29;
                uint64_t v1085 = *(void *)((char *)v1081 + v1084);
                uint64_t v1086 = *(void *)(v1083 + v1084);
                uint64_t v1087 = (v1080 - 0x200000000) >> 32;
                uint64_t v1088 = (v1080 - 0x100000000) >> 32;
                uint64_t v1549 = 4 * *(void *)(v1083 + v1082);
                uint64_t result = 4 * v1086;
                uint64_t v1532 = 8 * *(void *)((char *)v1081 + v1082);
                uint64_t v1089 = 8 * v1085;
                do
                {
                  int v1090 = *(_DWORD *)(v140 + 4 * v1566);
                  if (v1090 >= 1)
                  {
                    int v1091 = 0;
                    uint64_t v1092 = 4 * *(void *)(v1083 + 8 * v1087);
                    uint64_t v1093 = 8 * *(void *)&v1081[2 * v1087];
                    uint64_t v1094 = v1077;
                    uint64_t v1095 = v1078;
                    do
                    {
                      int v1096 = *(_DWORD *)(v140 + 4 * v1087);
                      if (v1096 >= 1)
                      {
                        int v1097 = 0;
                        int v1098 = (void *)*a2;
                        uint64_t v1099 = 4 * *(void *)(v1083 + 8 * v1088);
                        uint64_t v1100 = 8 * *(void *)&v1081[2 * v1088];
                        uint64_t v1101 = v1094;
                        uint64_t v1102 = v1095;
                        do
                        {
                          int v1103 = *(_DWORD *)(v140 + 4 * v1088);
                          if (v1103 >= 1)
                          {
                            uint64_t v1104 = (_DWORD *)(v1098[19] + v1102);
                            uint64_t v1105 = (void *)((char *)v138[19] + v1101);
                            do
                            {
                              *uint64_t v1104 = *v1105;
                              uint64_t v1104 = (_DWORD *)((char *)v1104 + v1099);
                              uint64_t v1105 = (void *)((char *)v1105 + v1100);
                              --v1103;
                            }
                            while (v1103);
                          }
                          ++v1097;
                          v1102 += v1092;
                          v1101 += v1093;
                        }
                        while (v1097 != v1096);
                      }
                      ++v1091;
                      v1095 += result;
                      v1094 += v1089;
                    }
                    while (v1091 != v1090);
                  }
                  ++v1079;
                  v1078 += v1549;
                  v1077 += v1532;
                }
                while (v1079 != v1583);
              }
              break;
            case 5:
              uint64_t v1106 = (v141 << 30) - 0x500000000;
              int v1488 = *(_DWORD *)(v140 + (v1106 >> 30));
              if (v1488 >= 1)
              {
                uint64_t v1508 = 0;
                uint64_t v1518 = 0;
                int v1498 = 0;
                uint64_t v1107 = v141 << 30;
                uint64_t v1108 = v138[3];
                uint64_t v1109 = v1106 >> 29;
                uint64_t v1110 = v3[3];
                uint64_t v1478 = (v1107 - 0x400000000) >> 32;
                uint64_t v1111 = (v1107 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v1108 + v1111);
                uint64_t v1567 = (v1107 - 0x300000000) >> 32;
                uint64_t v1112 = (v1107 - 0x200000000) >> 32;
                uint64_t v1113 = (v1107 - 0x100000000) >> 32;
                uint64_t v1468 = 4 * *(void *)(v1110 + v1109);
                uint64_t v1550 = 4 * *(void *)(v1110 + v1111);
                uint64_t v1458 = 8 * *(void *)((char *)v1108 + v1109);
                uint64_t v1533 = 8 * result;
                do
                {
                  int v1584 = *(_DWORD *)(v140 + 4 * v1478);
                  if (v1584 >= 1)
                  {
                    int v1114 = 0;
                    uint64_t v1115 = 4 * *(void *)(v1110 + 8 * v1567);
                    uint64_t v1116 = 8 * *(void *)&v1108[2 * v1567];
                    uint64_t v1118 = v1508;
                    uint64_t v1117 = v1518;
                    do
                    {
                      int v1119 = *(_DWORD *)(v140 + 4 * v1567);
                      if (v1119 >= 1)
                      {
                        int v1120 = 0;
                        uint64_t v1121 = 4 * *(void *)(v1110 + 8 * v1112);
                        uint64_t v1122 = 8 * *(void *)&v1108[2 * v1112];
                        uint64_t v1123 = v1117;
                        uint64_t v1124 = v1118;
                        do
                        {
                          int v1125 = *(_DWORD *)(v140 + 4 * v1112);
                          if (v1125 >= 1)
                          {
                            int v1126 = 0;
                            uint64_t result = *a2;
                            uint64_t v1127 = 4 * *(void *)(v1110 + 8 * v1113);
                            uint64_t v1128 = 8 * *(void *)&v1108[2 * v1113];
                            uint64_t v1129 = v1123;
                            uint64_t v1130 = v1124;
                            do
                            {
                              int v1131 = *(_DWORD *)(v140 + 4 * v1113);
                              if (v1131 >= 1)
                              {
                                uint64_t v1132 = (_DWORD *)(*(void *)(result + 152) + v1130);
                                uint64_t v1133 = (void *)((char *)v138[19] + v1129);
                                do
                                {
                                  *uint64_t v1132 = *v1133;
                                  uint64_t v1132 = (_DWORD *)((char *)v1132 + v1127);
                                  uint64_t v1133 = (void *)((char *)v1133 + v1128);
                                  --v1131;
                                }
                                while (v1131);
                              }
                              ++v1126;
                              v1130 += v1121;
                              v1129 += v1122;
                            }
                            while (v1126 != v1125);
                          }
                          ++v1120;
                          v1124 += v1115;
                          v1123 += v1116;
                        }
                        while (v1120 != v1119);
                      }
                      ++v1114;
                      v1118 += v1550;
                      v1117 += v1533;
                    }
                    while (v1114 != v1584);
                  }
                  v1508 += v1468;
                  v1518 += v1458;
                  ++v1498;
                }
                while (v1498 != v1488);
              }
              break;
            default:
              LODWORD(v993) = 1;
              uint64_t v994 = -20;
              do
              {
                uint64_t v993 = *(int *)(v139 + v994) * (uint64_t)(int)v993;
                v994 += 4;
              }
              while (v994);
              uint64_t v1440 = v138[6];
              if (v1440)
              {
                uint64_t result = 0;
                uint64_t v1467 = *v3;
                uint64_t v995 = (v141 << 30) - 0x500000000;
                uint64_t v1430 = (v141 >> 2) - 1;
                uint64_t v996 = v138[3];
                uint64_t v1425 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1420 = v995 >> 32;
                uint64_t v997 = v3[3];
                uint64_t v1477 = (uint64_t)((v141 << 30) - 0x400000000) >> 32;
                uint64_t v1565 = (uint64_t)((v141 << 30) - 0x300000000) >> 32;
                uint64_t v998 = (uint64_t)((v141 << 30) - 0x200000000) >> 32;
                uint64_t v999 = (uint64_t)((v141 << 30) - 0x100000000) >> 32;
                uint64_t v1450 = 8 * *(void *)((char *)v996 + (v995 >> 29));
                uint64_t v1457 = 4 * *(void *)(v997 + (v995 >> 29));
                uint64_t v1435 = v993;
                do
                {
                  uint64_t v1000 = v1430;
                  uint64_t v1445 = result;
                  uint64_t v1001 = 0;
                  if ((v1430 & 0x80000000) != 0)
                  {
                    uint64_t v1002 = v1425;
                  }
                  else
                  {
                    uint64_t v1002 = v1425;
                    do
                    {
                      ldiv_t v1003 = ldiv((int)result, *(int *)(v140 + 4 * v1000));
                      LODWORD(result) = v1003.quot;
                      v1001 += *(void *)&v996[2 * v1000--] * v1003.rem;
                    }
                    while (v1000 != -1);
                  }
                  uint64_t v1004 = 0;
                  if ((v1002 & 0x80000000) == 0)
                  {
                    int v1005 = v1445;
                    do
                    {
                      ldiv_t v1006 = ldiv(v1005, *(int *)(v1467 + 4 * v1002));
                      int v1005 = v1006.quot;
                      v1004 += *(void *)(v997 + 8 * v1002--) * v1006.rem;
                    }
                    while (v1002 != -1);
                  }
                  int v1487 = *(_DWORD *)(v140 + 4 * v1420);
                  if (v1487 >= 1)
                  {
                    int v1007 = 0;
                    uint64_t v1517 = 4 * v1004;
                    uint64_t v1548 = 4 * *(void *)(v997 + 8 * v1477);
                    uint64_t v1507 = 8 * v1001;
                    uint64_t v1531 = 8 * *(void *)&v996[2 * v1477];
                    do
                    {
                      int v1497 = v1007;
                      int v1582 = *(_DWORD *)(v140 + 4 * v1477);
                      if (v1582 >= 1)
                      {
                        int v1008 = 0;
                        uint64_t v1009 = 4 * *(void *)(v997 + 8 * v1565);
                        uint64_t v1010 = 8 * *(void *)&v996[2 * v1565];
                        uint64_t v1012 = v1507;
                        uint64_t v1011 = v1517;
                        do
                        {
                          int v1013 = *(_DWORD *)(v140 + 4 * v1565);
                          if (v1013 >= 1)
                          {
                            int v1014 = 0;
                            uint64_t v1015 = 4 * *(void *)(v997 + 8 * v998);
                            uint64_t v1016 = 8 * *(void *)&v996[2 * v998];
                            uint64_t v1017 = v1012;
                            uint64_t v1018 = v1011;
                            do
                            {
                              int v1019 = *(_DWORD *)(v140 + 4 * v998);
                              if (v1019 >= 1)
                              {
                                int v1020 = 0;
                                int v1021 = (void *)*a2;
                                uint64_t v1022 = 4 * *(void *)(v997 + 8 * v999);
                                uint64_t v1023 = 8 * *(void *)&v996[2 * v999];
                                uint64_t v1024 = v1017;
                                uint64_t v1025 = v1018;
                                do
                                {
                                  int v1026 = *(_DWORD *)(v140 + 4 * v999);
                                  if (v1026 >= 1)
                                  {
                                    uint64_t v1027 = (_DWORD *)(v1021[19] + v1025);
                                    int v1028 = (void *)((char *)v138[19] + v1024);
                                    do
                                    {
                                      *uint64_t v1027 = *v1028;
                                      uint64_t v1027 = (_DWORD *)((char *)v1027 + v1022);
                                      int v1028 = (void *)((char *)v1028 + v1023);
                                      --v1026;
                                    }
                                    while (v1026);
                                  }
                                  ++v1020;
                                  v1025 += v1015;
                                  v1024 += v1016;
                                }
                                while (v1020 != v1019);
                              }
                              ++v1014;
                              v1018 += v1009;
                              v1017 += v1010;
                            }
                            while (v1014 != v1013);
                          }
                          ++v1008;
                          v1011 += v1548;
                          v1012 += v1531;
                        }
                        while (v1008 != v1582);
                      }
                      int v1007 = v1497 + 1;
                      v1517 += v1457;
                      v1507 += v1450;
                    }
                    while (v1497 + 1 != v1487);
                  }
                  uint64_t result = v1445 + v1435;
                }
                while ((unint64_t)v1440 > v1445 + v1435);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v3[6];
          if (v21)
          {
            uint64_t v22 = **(void **)(*(void *)result + 152);
            uint64_t v23 = (void *)v3[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v151 = *(void *)(*(void *)result + 160);
          if (v151)
          {
            uint64_t v152 = *(const void **)(*(void *)result + 152);
            uint64_t v153 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v153, v152, 8 * v151);
          }
          break;
        case 2:
          uint64_t v154 = *(int ***)result;
          uint64_t v155 = **(int ***)result;
          uint64_t v156 = *(void *)(*(void *)result + 8) - (void)v155;
          switch(v156 >> 2)
          {
            case 1:
              uint64_t v157 = *v155;
              if ((int)v157 >= 1)
              {
                uint64_t v158 = v154[19];
                unint64_t v159 = (void *)v3[19];
                uint64_t v160 = 8 * *(void *)v154[3];
                do
                {
                  *v159++ = *(void *)v158;
                  uint64_t v158 = (int *)((char *)v158 + v160);
                  --v157;
                }
                while (v157);
              }
              break;
            case 2:
              int v467 = *v155;
              if (*v155 >= 1)
              {
                int v468 = 0;
                uint64_t v469 = 0;
                uint64_t v470 = 0;
                uint64_t v471 = v154[19];
                uint64_t v472 = v3[19];
                uint64_t v473 = v155[1];
                int v474 = v154[3];
                uint64_t v476 = *(void *)v474;
                uint64_t v475 = *((void *)v474 + 1);
                uint64_t v477 = v476 - v475 * v473;
                do
                {
                  int v478 = v473;
                  if ((int)v473 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(void *)&v471[2 * v470];
                      *(void *)(v472 + 8 * v469++) = result;
                      v470 += v475;
                      --v478;
                    }
                    while (v478);
                  }
                  v470 += v477;
                  ++v468;
                }
                while (v468 != v467);
              }
              break;
            case 3:
              int v479 = *v155;
              if (*v155 >= 1)
              {
                int v480 = 0;
                uint64_t result = 0;
                uint64_t v481 = 0;
                uint64_t v482 = v154[19];
                uint64_t v483 = v3[19];
                uint64_t v484 = v155[1];
                uint64_t v485 = v154[3];
                uint64_t v486 = *((void *)v485 + 1);
                uint64_t v487 = *(void *)v485 - v486 * v484;
                do
                {
                  if ((int)v484 < 1)
                  {
                    uint64_t v494 = result;
                  }
                  else
                  {
                    int v488 = 0;
                    uint64_t v489 = v155[2];
                    int v490 = v154[3];
                    uint64_t v491 = v486 - *((void *)v485 + 2) * v489;
                    do
                    {
                      if ((int)v489 < 1)
                      {
                        uint64_t v494 = result;
                      }
                      else
                      {
                        uint64_t v492 = *((void *)v490 + 2);
                        int v493 = v489;
                        do
                        {
                          uint64_t v494 = result + 1;
                          *(void *)(v483 + 8 * result) = *(void *)&v482[2 * v481];
                          v481 += v492;
                          ++result;
                          --v493;
                        }
                        while (v493);
                      }
                      v481 += v491;
                      ++v488;
                      uint64_t result = v494;
                    }
                    while (v488 != v484);
                  }
                  v481 += v487;
                  ++v480;
                  uint64_t result = v494;
                }
                while (v480 != v479);
              }
              break;
            case 4:
              int v495 = *v155;
              if (*v155 >= 1)
              {
                int v496 = 0;
                uint64_t result = 0;
                uint64_t v497 = 0;
                uint64_t v498 = v154[19];
                uint64_t v499 = v3[19];
                uint64_t v500 = v155[1];
                uint64_t v501 = v154[3];
                uint64_t v502 = *((void *)v501 + 1);
                uint64_t v503 = *(void *)v501 - v502 * v500;
                do
                {
                  if ((int)v500 < 1)
                  {
                    uint64_t v514 = result;
                  }
                  else
                  {
                    int v504 = 0;
                    uint64_t v505 = v155[2];
                    uint64_t v506 = v154[3];
                    uint64_t v507 = v502 - *((void *)v501 + 2) * v505;
                    do
                    {
                      if ((int)v505 < 1)
                      {
                        uint64_t v514 = result;
                      }
                      else
                      {
                        int v508 = 0;
                        uint64_t v509 = v155[3];
                        uint64_t v510 = v154[3];
                        uint64_t v511 = *((void *)v506 + 2) - *((void *)v506 + 3) * v509;
                        do
                        {
                          if ((int)v509 < 1)
                          {
                            uint64_t v514 = result;
                          }
                          else
                          {
                            uint64_t v512 = *((void *)v510 + 3);
                            int v513 = v509;
                            do
                            {
                              uint64_t v514 = result + 1;
                              *(void *)(v499 + 8 * result) = *(void *)&v498[2 * v497];
                              v497 += v512;
                              ++result;
                              --v513;
                            }
                            while (v513);
                          }
                          v497 += v511;
                          ++v508;
                          uint64_t result = v514;
                        }
                        while (v508 != v505);
                      }
                      v497 += v507;
                      ++v504;
                      uint64_t result = v514;
                    }
                    while (v504 != v500);
                  }
                  v497 += v503;
                  ++v496;
                  uint64_t result = v514;
                }
                while (v496 != v495);
              }
              break;
            default:
              uint64_t v458 = v3[6];
              if (v458)
              {
                uint64_t v459 = 0;
                uint64_t v460 = v154[19];
                uint64_t v461 = v3[19];
                uint64_t v462 = ((unint64_t)v156 >> 2) - 1;
                int v463 = v154[3];
                do
                {
                  uint64_t v464 = 0;
                  if ((v462 & 0x80000000) == 0)
                  {
                    uint64_t v465 = v462;
                    LODWORD(result) = v459;
                    do
                    {
                      ldiv_t v466 = ldiv((int)result, v155[v465]);
                      uint64_t result = v466.quot;
                      v464 += *(void *)&v463[2 * v465--] * v466.rem;
                    }
                    while (v465 != -1);
                  }
                  *(void *)(v461 + 8 * v459++) = *(void *)&v460[2 * v464];
                }
                while (v459 != v458);
              }
              break;
          }
          break;
        case 3:
          int v161 = *(unsigned int ***)result;
          uint64_t v163 = **(void **)result;
          uint64_t v162 = *(void *)(*(void *)result + 8);
          unint64_t v164 = v162 - v163;
          switch((v162 - v163) >> 2)
          {
            case 1:
              uint64_t v165 = (v164 << 30) - 0x100000000;
              int v166 = *(_DWORD *)(v163 + (v165 >> 30));
              if (v166 >= 1)
              {
                uint64_t v167 = v165 >> 29;
                uint64_t v168 = *(void *)((char *)v161[3] + v167);
                uint64_t v169 = *(void *)(v3[3] + v167);
                uint64_t v170 = (void *)v3[19];
                uint64_t v171 = v161[19];
                uint64_t v172 = 8 * v169;
                uint64_t v173 = 8 * v168;
                do
                {
                  *uint64_t v170 = *(void *)v171;
                  uint64_t v170 = (void *)((char *)v170 + v172);
                  uint64_t v171 = (unsigned int *)((char *)v171 + v173);
                  --v166;
                }
                while (v166);
              }
              break;
            case 2:
              uint64_t v1169 = (v164 << 30) - 0x200000000;
              int v1170 = *(_DWORD *)(v163 + (v1169 >> 30));
              if (v1170 >= 1)
              {
                uint64_t v1171 = 0;
                uint64_t v1172 = 0;
                int v1173 = 0;
                uint64_t v1174 = v161[3];
                uint64_t v1175 = v1169 >> 29;
                uint64_t v1176 = *(void *)((char *)v1174 + v1175);
                uint64_t v1177 = v3[3];
                uint64_t result = *(void *)(v1177 + v1175);
                uint64_t v1178 = (v164 << 30) - 0x100000000;
                uint64_t v1179 = *(void *)((char *)v1174 + (v1178 >> 29));
                uint64_t v1180 = *(void *)(v1177 + (v1178 >> 29));
                int v1181 = *(_DWORD *)(v163 + (v1178 >> 30));
                uint64_t v1182 = 8 * result;
                uint64_t v1183 = 8 * v1180;
                uint64_t v1184 = 8 * v1176;
                uint64_t v1185 = 8 * v1179;
                do
                {
                  if (v1181 >= 1)
                  {
                    uint64_t result = v3[19] + v1172;
                    uint64_t v1186 = (void *)((char *)v161[19] + v1171);
                    int v1187 = v1181;
                    do
                    {
                      *(void *)uint64_t result = *v1186;
                      result += v1183;
                      uint64_t v1186 = (void *)((char *)v1186 + v1185);
                      --v1187;
                    }
                    while (v1187);
                  }
                  ++v1173;
                  v1172 += v1182;
                  v1171 += v1184;
                }
                while (v1173 != v1170);
              }
              break;
            case 3:
              uint64_t v1188 = (v164 << 30) - 0x300000000;
              int v1189 = *(_DWORD *)(v163 + (v1188 >> 30));
              if (v1189 >= 1)
              {
                uint64_t v1190 = 0;
                uint64_t v1191 = 0;
                int v1192 = 0;
                uint64_t v1193 = v161[3];
                uint64_t v1194 = v1188 >> 29;
                uint64_t v1195 = *(void *)((char *)v1193 + v1194);
                uint64_t v1196 = v3[3];
                uint64_t v1197 = *(void *)(v1196 + v1194);
                uint64_t v1198 = v164 << 30;
                uint64_t v1199 = (v164 << 30) - 0x200000000;
                uint64_t v1200 = *(void *)((char *)v1193 + (v1199 >> 29));
                uint64_t v1201 = *(void *)(v1196 + (v1199 >> 29));
                int v1202 = *(_DWORD *)(v163 + (v1199 >> 30));
                uint64_t v1203 = (v1198 - 0x100000000) >> 32;
                uint64_t v1204 = 8 * v1197;
                uint64_t v1205 = 8 * v1201;
                uint64_t result = 8 * v1195;
                uint64_t v1206 = 8 * v1200;
                do
                {
                  if (v1202 >= 1)
                  {
                    int v1207 = 0;
                    int v1208 = *(_DWORD *)(v163 + 4 * v1203);
                    uint64_t v1209 = (void *)*a2;
                    uint64_t v1210 = 8 * *(void *)(v1196 + 8 * v1203);
                    uint64_t v1211 = 8 * *(void *)&v1193[2 * v1203];
                    uint64_t v1212 = v1190;
                    uint64_t v1213 = v1191;
                    do
                    {
                      if (v1208 >= 1)
                      {
                        uint64_t v1214 = (void *)(v1209[19] + v1213);
                        int v1215 = (void *)((char *)v161[19] + v1212);
                        int v1216 = v1208;
                        do
                        {
                          *uint64_t v1214 = *v1215;
                          uint64_t v1214 = (void *)((char *)v1214 + v1210);
                          int v1215 = (void *)((char *)v1215 + v1211);
                          --v1216;
                        }
                        while (v1216);
                      }
                      ++v1207;
                      v1213 += v1205;
                      v1212 += v1206;
                    }
                    while (v1207 != v1202);
                  }
                  ++v1192;
                  v1191 += v1204;
                  v1190 += result;
                }
                while (v1192 != v1189);
              }
              break;
            case 4:
              uint64_t v1217 = (v164 << 30) - 0x400000000;
              int v1586 = *(_DWORD *)(v163 + (v1217 >> 30));
              if (v1586 >= 1)
              {
                uint64_t v1218 = 0;
                uint64_t v1219 = 0;
                int v1220 = 0;
                uint64_t v1221 = v161[3];
                uint64_t v1222 = v1217 >> 29;
                uint64_t v1223 = v164 << 30;
                uint64_t v1224 = v3[3];
                uint64_t v1225 = (v1223 - 0x300000000) >> 29;
                uint64_t v1226 = *(void *)((char *)v1221 + v1225);
                uint64_t v1227 = v1223 - 0x200000000;
                uint64_t v1228 = v1223 - 0x100000000;
                uint64_t v1229 = *(void *)(v1224 + v1225);
                int v1230 = *(_DWORD *)(v163 + ((v1223 - 0x300000000) >> 30));
                uint64_t v1535 = v1227 >> 32;
                uint64_t v1231 = v1228 >> 32;
                uint64_t v1569 = 8 * *(void *)(v1224 + v1222);
                uint64_t result = 8 * v1229;
                uint64_t v1552 = 8 * *(void *)((char *)v1221 + v1222);
                uint64_t v1232 = 8 * v1226;
                do
                {
                  if (v1230 >= 1)
                  {
                    int v1233 = 0;
                    int v1234 = *(_DWORD *)(v163 + 4 * v1535);
                    uint64_t v1235 = 8 * *(void *)(v1224 + 8 * v1535);
                    uint64_t v1236 = 8 * *(void *)&v1221[2 * v1535];
                    uint64_t v1237 = v1218;
                    uint64_t v1238 = v1219;
                    do
                    {
                      if (v1234 >= 1)
                      {
                        int v1239 = 0;
                        int v1240 = *(_DWORD *)(v163 + 4 * v1231);
                        uint64_t v1241 = (void *)*a2;
                        uint64_t v1242 = 8 * *(void *)(v1224 + 8 * v1231);
                        uint64_t v1243 = 8 * *(void *)&v1221[2 * v1231];
                        uint64_t v1244 = v1237;
                        uint64_t v1245 = v1238;
                        do
                        {
                          if (v1240 >= 1)
                          {
                            uint64_t v1246 = (void *)(v1241[19] + v1245);
                            uint64_t v1247 = (void *)((char *)v161[19] + v1244);
                            int v1248 = v1240;
                            do
                            {
                              *uint64_t v1246 = *v1247;
                              uint64_t v1246 = (void *)((char *)v1246 + v1242);
                              uint64_t v1247 = (void *)((char *)v1247 + v1243);
                              --v1248;
                            }
                            while (v1248);
                          }
                          ++v1239;
                          v1245 += v1235;
                          v1244 += v1236;
                        }
                        while (v1239 != v1234);
                      }
                      ++v1233;
                      v1238 += result;
                      v1237 += v1232;
                    }
                    while (v1233 != v1230);
                  }
                  ++v1220;
                  v1219 += v1569;
                  v1218 += v1552;
                }
                while (v1220 != v1586);
              }
              break;
            case 5:
              uint64_t v1249 = (v164 << 30) - 0x500000000;
              int v1490 = *(_DWORD *)(v163 + (v1249 >> 30));
              if (v1490 >= 1)
              {
                uint64_t v1510 = 0;
                uint64_t v1520 = 0;
                int v1500 = 0;
                int v1250 = v161[3];
                uint64_t v1251 = v1249 >> 29;
                uint64_t v1252 = v3[3];
                uint64_t v1253 = (v164 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1250 + (v1253 >> 29));
                int v1587 = *(_DWORD *)(v163 + (v1253 >> 30));
                uint64_t v1460 = (uint64_t)((v164 << 30) - 0x300000000) >> 32;
                uint64_t v1536 = (uint64_t)((v164 << 30) - 0x200000000) >> 32;
                uint64_t v1254 = (uint64_t)((v164 << 30) - 0x100000000) >> 32;
                uint64_t v1480 = 8 * *(void *)(v1252 + v1251);
                uint64_t v1570 = 8 * *(void *)(v1252 + (v1253 >> 29));
                uint64_t v1470 = 8 * *(void *)((char *)v1250 + v1251);
                uint64_t v1553 = 8 * result;
                do
                {
                  if (v1587 >= 1)
                  {
                    int v1255 = 0;
                    int v1256 = *(_DWORD *)(v163 + 4 * v1460);
                    uint64_t v1257 = 8 * *(void *)(v1252 + 8 * v1460);
                    uint64_t v1258 = 8 * *(void *)&v1250[2 * v1460];
                    uint64_t v1260 = v1510;
                    uint64_t v1259 = v1520;
                    do
                    {
                      if (v1256 >= 1)
                      {
                        int v1261 = 0;
                        int v1262 = *(_DWORD *)(v163 + 4 * v1536);
                        uint64_t v1263 = 8 * *(void *)(v1252 + 8 * v1536);
                        uint64_t v1264 = 8 * *(void *)&v1250[2 * v1536];
                        uint64_t v1265 = v1259;
                        uint64_t v1266 = v1260;
                        do
                        {
                          if (v1262 >= 1)
                          {
                            int v1267 = 0;
                            int v1268 = *(_DWORD *)(v163 + 4 * v1254);
                            uint64_t v1269 = (void *)*a2;
                            uint64_t v1270 = 8 * *(void *)(v1252 + 8 * v1254);
                            uint64_t v1271 = 8 * *(void *)&v1250[2 * v1254];
                            uint64_t v1272 = v1265;
                            uint64_t v1273 = v1266;
                            do
                            {
                              if (v1268 >= 1)
                              {
                                uint64_t v1274 = (void *)(v1269[19] + v1273);
                                uint64_t v1275 = (void *)((char *)v161[19] + v1272);
                                LODWORD(result) = v1268;
                                do
                                {
                                  *uint64_t v1274 = *v1275;
                                  uint64_t v1274 = (void *)((char *)v1274 + v1270);
                                  uint64_t v1275 = (void *)((char *)v1275 + v1271);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1267;
                              v1273 += v1263;
                              v1272 += v1264;
                            }
                            while (v1267 != v1262);
                          }
                          ++v1261;
                          v1266 += v1257;
                          v1265 += v1258;
                        }
                        while (v1261 != v1256);
                      }
                      ++v1255;
                      v1260 += v1570;
                      v1259 += v1553;
                    }
                    while (v1255 != v1587);
                  }
                  v1510 += v1480;
                  v1520 += v1470;
                  ++v1500;
                }
                while (v1500 != v1490);
              }
              break;
            default:
              LODWORD(v1134) = 1;
              uint64_t v1135 = -20;
              do
              {
                uint64_t v1134 = *(int *)(v162 + v1135) * (uint64_t)(int)v1134;
                v1135 += 4;
              }
              while (v1135);
              uint64_t v1446 = v161[6];
              if (v1446)
              {
                uint64_t v1136 = 0;
                uint64_t v1426 = *v3;
                uint64_t v1137 = (v164 << 30) - 0x500000000;
                uint64_t v1436 = (v164 >> 2) - 1;
                uint64_t v1138 = v161[3];
                uint64_t v1431 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1139 = v3[3];
                int v1489 = *(_DWORD *)(v163 + (v1137 >> 30));
                uint64_t v1421 = (uint64_t)((v164 << 30) - 0x400000000) >> 32;
                uint64_t v1534 = (uint64_t)((v164 << 30) - 0x200000000) >> 32;
                uint64_t v1140 = (uint64_t)((v164 << 30) - 0x100000000) >> 32;
                uint64_t v1479 = 8 * *(void *)(v1139 + (v1137 >> 29));
                uint64_t v1459 = (uint64_t)((v164 << 30) - 0x300000000) >> 32;
                uint64_t v1469 = 8 * *(void *)((char *)v1138 + (v1137 >> 29));
                uint64_t v1441 = v1134;
                do
                {
                  uint64_t v1141 = v1436;
                  if ((v1436 & 0x80000000) != 0)
                  {
                    uint64_t v1142 = 0;
                    uint64_t v1143 = v1431;
                  }
                  else
                  {
                    uint64_t v1142 = 0;
                    LODWORD(result) = v1136;
                    uint64_t v1143 = v1431;
                    do
                    {
                      ldiv_t v1144 = ldiv((int)result, *(int *)(v163 + 4 * v1141));
                      uint64_t result = v1144.quot;
                      v1142 += *(void *)&v1138[2 * v1141--] * v1144.rem;
                    }
                    while (v1141 != -1);
                  }
                  uint64_t v1451 = v1136;
                  uint64_t v1145 = 0;
                  if ((v1143 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1136;
                    do
                    {
                      ldiv_t v1146 = ldiv((int)result, *(int *)(v1426 + 4 * v1143));
                      uint64_t result = v1146.quot;
                      v1145 += *(void *)(v1139 + 8 * v1143--) * v1146.rem;
                    }
                    while (v1143 != -1);
                  }
                  if (v1489 >= 1)
                  {
                    int v1147 = 0;
                    int v1585 = *(_DWORD *)(v163 + 4 * v1421);
                    uint64_t v1519 = 8 * v1145;
                    uint64_t v1568 = 8 * *(void *)(v1139 + 8 * v1421);
                    uint64_t v1509 = 8 * v1142;
                    uint64_t v1551 = 8 * *(void *)&v1138[2 * v1421];
                    do
                    {
                      int v1499 = v1147;
                      if (v1585 >= 1)
                      {
                        int v1148 = 0;
                        int v1149 = *(_DWORD *)(v163 + 4 * v1459);
                        uint64_t v1150 = 8 * *(void *)(v1139 + 8 * v1459);
                        uint64_t v1151 = 8 * *(void *)&v1138[2 * v1459];
                        uint64_t v1153 = v1509;
                        uint64_t v1152 = v1519;
                        do
                        {
                          if (v1149 >= 1)
                          {
                            int v1154 = 0;
                            int v1155 = *(_DWORD *)(v163 + 4 * v1534);
                            uint64_t v1156 = 8 * *(void *)(v1139 + 8 * v1534);
                            uint64_t v1157 = 8 * *(void *)&v1138[2 * v1534];
                            uint64_t result = v1153;
                            uint64_t v1158 = v1152;
                            do
                            {
                              if (v1155 >= 1)
                              {
                                int v1159 = 0;
                                int v1160 = *(_DWORD *)(v163 + 4 * v1140);
                                int v1161 = (void *)*a2;
                                uint64_t v1162 = 8 * *(void *)(v1139 + 8 * v1140);
                                uint64_t v1163 = 8 * *(void *)&v1138[2 * v1140];
                                uint64_t v1164 = result;
                                uint64_t v1165 = v1158;
                                do
                                {
                                  if (v1160 >= 1)
                                  {
                                    uint64_t v1166 = (void *)(v1161[19] + v1165);
                                    uint64_t v1167 = (void *)((char *)v161[19] + v1164);
                                    int v1168 = v1160;
                                    do
                                    {
                                      *uint64_t v1166 = *v1167;
                                      uint64_t v1166 = (void *)((char *)v1166 + v1162);
                                      uint64_t v1167 = (void *)((char *)v1167 + v1163);
                                      --v1168;
                                    }
                                    while (v1168);
                                  }
                                  ++v1159;
                                  v1165 += v1156;
                                  v1164 += v1157;
                                }
                                while (v1159 != v1155);
                              }
                              ++v1154;
                              v1158 += v1150;
                              result += v1151;
                            }
                            while (v1154 != v1149);
                          }
                          ++v1148;
                          v1152 += v1568;
                          v1153 += v1551;
                        }
                        while (v1148 != v1585);
                      }
                      int v1147 = v1499 + 1;
                      v1519 += v1479;
                      v1509 += v1469;
                    }
                    while (v1499 + 1 != v1489);
                  }
                  v1136 += v1441;
                }
                while ((unint64_t)v1446 > v1451 + v1441);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v24 = v3[6];
          if (v24)
          {
            float v25 = (float)**(uint64_t **)(*(void *)result + 152);
            float v26 = (float *)v3[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          uint64_t v174 = *(void *)(*(void *)result + 160);
          if (v174)
          {
            uint64_t v175 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v176 = (float *)v3[19];
            uint64_t v177 = 8 * v174;
            do
            {
              uint64_t v178 = *v175++;
              *v176++ = (float)v178;
              v177 -= 8;
            }
            while (v177);
          }
          break;
        case 2:
          float v179 = *(int ***)result;
          uint64_t v180 = **(int ***)result;
          uint64_t v181 = *(void *)(*(void *)result + 8) - (void)v180;
          switch(v181 >> 2)
          {
            case 1:
              uint64_t v182 = *v180;
              if ((int)v182 >= 1)
              {
                uint64_t v183 = (uint64_t *)v179[19];
                unint64_t v184 = (float *)v3[19];
                uint64_t v185 = 8 * *(void *)v179[3];
                do
                {
                  *v184++ = (float)*v183;
                  uint64_t v183 = (uint64_t *)((char *)v183 + v185);
                  --v182;
                }
                while (v182);
              }
              break;
            case 2:
              int v524 = *v180;
              if (*v180 >= 1)
              {
                int v525 = 0;
                uint64_t v526 = 0;
                uint64_t v527 = 0;
                uint64_t v528 = v179[19];
                uint64_t v529 = v3[19];
                uint64_t v530 = v180[1];
                int v531 = v179[3];
                uint64_t v533 = *(void *)v531;
                uint64_t v532 = *((void *)v531 + 1);
                uint64_t v534 = v533 - v532 * v530;
                do
                {
                  int v535 = v530;
                  if ((int)v530 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(void *)&v528[2 * v527];
                      *(float *)(v529 + 4 * v526++) = (float)result;
                      v527 += v532;
                      --v535;
                    }
                    while (v535);
                  }
                  v527 += v534;
                  ++v525;
                }
                while (v525 != v524);
              }
              break;
            case 3:
              int v536 = *v180;
              if (*v180 >= 1)
              {
                int v537 = 0;
                uint64_t result = 0;
                uint64_t v538 = 0;
                uint64_t v539 = v179[19];
                uint64_t v540 = v3[19];
                uint64_t v541 = v180[1];
                uint64_t v542 = v179[3];
                uint64_t v543 = *((void *)v542 + 1);
                uint64_t v544 = *(void *)v542 - v543 * v541;
                do
                {
                  if ((int)v541 < 1)
                  {
                    uint64_t v551 = result;
                  }
                  else
                  {
                    int v545 = 0;
                    uint64_t v546 = v180[2];
                    int v547 = v179[3];
                    uint64_t v548 = v543 - *((void *)v542 + 2) * v546;
                    do
                    {
                      if ((int)v546 < 1)
                      {
                        uint64_t v551 = result;
                      }
                      else
                      {
                        uint64_t v549 = *((void *)v547 + 2);
                        int v550 = v546;
                        do
                        {
                          uint64_t v551 = result + 1;
                          *(float *)(v540 + 4 * result) = (float)*(uint64_t *)&v539[2 * v538];
                          v538 += v549;
                          ++result;
                          --v550;
                        }
                        while (v550);
                      }
                      v538 += v548;
                      ++v545;
                      uint64_t result = v551;
                    }
                    while (v545 != v541);
                  }
                  v538 += v544;
                  ++v537;
                  uint64_t result = v551;
                }
                while (v537 != v536);
              }
              break;
            case 4:
              int v552 = *v180;
              if (*v180 >= 1)
              {
                int v553 = 0;
                uint64_t result = 0;
                uint64_t v554 = 0;
                uint64_t v555 = v179[19];
                uint64_t v556 = v3[19];
                uint64_t v557 = v180[1];
                uint64_t v558 = v179[3];
                uint64_t v559 = *((void *)v558 + 1);
                uint64_t v560 = *(void *)v558 - v559 * v557;
                do
                {
                  if ((int)v557 < 1)
                  {
                    uint64_t v571 = result;
                  }
                  else
                  {
                    int v561 = 0;
                    uint64_t v562 = v180[2];
                    uint64_t v563 = v179[3];
                    uint64_t v564 = v559 - *((void *)v558 + 2) * v562;
                    do
                    {
                      if ((int)v562 < 1)
                      {
                        uint64_t v571 = result;
                      }
                      else
                      {
                        int v565 = 0;
                        uint64_t v566 = v180[3];
                        uint64_t v567 = v179[3];
                        uint64_t v568 = *((void *)v563 + 2) - *((void *)v563 + 3) * v566;
                        do
                        {
                          if ((int)v566 < 1)
                          {
                            uint64_t v571 = result;
                          }
                          else
                          {
                            uint64_t v569 = *((void *)v567 + 3);
                            int v570 = v566;
                            do
                            {
                              uint64_t v571 = result + 1;
                              *(float *)(v556 + 4 * result) = (float)*(uint64_t *)&v555[2 * v554];
                              v554 += v569;
                              ++result;
                              --v570;
                            }
                            while (v570);
                          }
                          v554 += v568;
                          ++v565;
                          uint64_t result = v571;
                        }
                        while (v565 != v562);
                      }
                      v554 += v564;
                      ++v561;
                      uint64_t result = v571;
                    }
                    while (v561 != v557);
                  }
                  v554 += v560;
                  ++v553;
                  uint64_t result = v571;
                }
                while (v553 != v552);
              }
              break;
            default:
              uint64_t v515 = v3[6];
              if (v515)
              {
                uint64_t v516 = 0;
                uint64_t v517 = v179[19];
                uint64_t v518 = v3[19];
                uint64_t v519 = ((unint64_t)v181 >> 2) - 1;
                int v520 = v179[3];
                do
                {
                  uint64_t v521 = 0;
                  if ((v519 & 0x80000000) == 0)
                  {
                    uint64_t v522 = v519;
                    LODWORD(result) = v516;
                    do
                    {
                      ldiv_t v523 = ldiv((int)result, v180[v522]);
                      uint64_t result = v523.quot;
                      v521 += *(void *)&v520[2 * v522--] * v523.rem;
                    }
                    while (v522 != -1);
                  }
                  *(float *)(v518 + 4 * v516++) = (float)*(uint64_t *)&v517[2 * v521];
                }
                while (v516 != v515);
              }
              break;
          }
          break;
        case 3:
          int v186 = *(unsigned int ***)result;
          uint64_t v188 = **(void **)result;
          uint64_t v187 = *(void *)(*(void *)result + 8);
          unint64_t v189 = v187 - v188;
          switch((v187 - v188) >> 2)
          {
            case 1:
              uint64_t v190 = (v189 << 30) - 0x100000000;
              int v191 = *(_DWORD *)(v188 + (v190 >> 30));
              if (v191 >= 1)
              {
                uint64_t v192 = v190 >> 29;
                uint64_t v193 = *(void *)((char *)v186[3] + v192);
                uint64_t v194 = *(void *)(v3[3] + v192);
                uint64_t v195 = (float *)v3[19];
                uint64_t v196 = (uint64_t *)v186[19];
                uint64_t v197 = 4 * v194;
                uint64_t v198 = 8 * v193;
                do
                {
                  *uint64_t v195 = (float)*v196;
                  uint64_t v195 = (float *)((char *)v195 + v197);
                  uint64_t v196 = (uint64_t *)((char *)v196 + v198);
                  --v191;
                }
                while (v191);
              }
              break;
            case 2:
              uint64_t v1311 = (v189 << 30) - 0x200000000;
              int v1312 = *(_DWORD *)(v188 + (v1311 >> 30));
              if (v1312 >= 1)
              {
                uint64_t v1313 = 0;
                uint64_t v1314 = 0;
                int v1315 = 0;
                uint64_t v1316 = v186[3];
                uint64_t v1317 = v1311 >> 29;
                uint64_t v1318 = *(void *)((char *)v1316 + v1317);
                uint64_t v1319 = v3[3];
                uint64_t result = *(void *)(v1319 + v1317);
                uint64_t v1320 = (v189 << 30) - 0x100000000;
                uint64_t v1321 = *(void *)((char *)v1316 + (v1320 >> 29));
                uint64_t v1322 = *(void *)(v1319 + (v1320 >> 29));
                int v1323 = *(_DWORD *)(v188 + (v1320 >> 30));
                uint64_t v1324 = 4 * result;
                uint64_t v1325 = 4 * v1322;
                uint64_t v1326 = 8 * v1318;
                uint64_t v1327 = 8 * v1321;
                do
                {
                  if (v1323 >= 1)
                  {
                    uint64_t result = v3[19] + v1314;
                    int v1328 = (uint64_t *)((char *)v186[19] + v1313);
                    int v1329 = v1323;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1328;
                      result += v1325;
                      int v1328 = (uint64_t *)((char *)v1328 + v1327);
                      --v1329;
                    }
                    while (v1329);
                  }
                  ++v1315;
                  v1314 += v1324;
                  v1313 += v1326;
                }
                while (v1315 != v1312);
              }
              break;
            case 3:
              uint64_t v1330 = (v189 << 30) - 0x300000000;
              int v1331 = *(_DWORD *)(v188 + (v1330 >> 30));
              if (v1331 >= 1)
              {
                uint64_t v1332 = 0;
                uint64_t v1333 = 0;
                int v1334 = 0;
                uint64_t v1335 = v186[3];
                uint64_t v1336 = v1330 >> 29;
                uint64_t v1337 = *(void *)((char *)v1335 + v1336);
                uint64_t v1338 = v3[3];
                uint64_t v1339 = *(void *)(v1338 + v1336);
                uint64_t v1340 = v189 << 30;
                uint64_t v1341 = (v189 << 30) - 0x200000000;
                uint64_t v1342 = *(void *)((char *)v1335 + (v1341 >> 29));
                uint64_t v1343 = *(void *)(v1338 + (v1341 >> 29));
                int v1344 = *(_DWORD *)(v188 + (v1341 >> 30));
                uint64_t v1345 = (v1340 - 0x100000000) >> 32;
                uint64_t v1346 = 4 * v1339;
                uint64_t v1347 = 4 * v1343;
                uint64_t result = 8 * v1337;
                uint64_t v1348 = 8 * v1342;
                do
                {
                  if (v1344 >= 1)
                  {
                    int v1349 = 0;
                    int v1350 = *(_DWORD *)(v188 + 4 * v1345);
                    uint64_t v1351 = (void *)*a2;
                    uint64_t v1352 = 4 * *(void *)(v1338 + 8 * v1345);
                    uint64_t v1353 = 8 * *(void *)&v1335[2 * v1345];
                    uint64_t v1354 = v1332;
                    uint64_t v1355 = v1333;
                    do
                    {
                      if (v1350 >= 1)
                      {
                        uint64_t v1356 = (float *)(v1351[19] + v1355);
                        uint64_t v1357 = (uint64_t *)((char *)v186[19] + v1354);
                        int v1358 = v1350;
                        do
                        {
                          *uint64_t v1356 = (float)*v1357;
                          uint64_t v1356 = (float *)((char *)v1356 + v1352);
                          uint64_t v1357 = (uint64_t *)((char *)v1357 + v1353);
                          --v1358;
                        }
                        while (v1358);
                      }
                      ++v1349;
                      v1355 += v1347;
                      v1354 += v1348;
                    }
                    while (v1349 != v1344);
                  }
                  ++v1334;
                  v1333 += v1346;
                  v1332 += result;
                }
                while (v1334 != v1331);
              }
              break;
            case 4:
              uint64_t v1359 = (v189 << 30) - 0x400000000;
              int v1589 = *(_DWORD *)(v188 + (v1359 >> 30));
              if (v1589 >= 1)
              {
                uint64_t v1360 = 0;
                uint64_t v1361 = 0;
                int v1362 = 0;
                uint64_t v1363 = v186[3];
                uint64_t v1364 = v1359 >> 29;
                uint64_t v1365 = v189 << 30;
                uint64_t v1366 = v3[3];
                uint64_t v1367 = (v1365 - 0x300000000) >> 29;
                uint64_t v1368 = *(void *)((char *)v1363 + v1367);
                uint64_t v1369 = v1365 - 0x200000000;
                uint64_t v1370 = v1365 - 0x100000000;
                uint64_t v1371 = *(void *)(v1366 + v1367);
                int v1372 = *(_DWORD *)(v188 + ((v1365 - 0x300000000) >> 30));
                uint64_t v1538 = v1369 >> 32;
                uint64_t v1373 = v1370 >> 32;
                uint64_t v1572 = 4 * *(void *)(v1366 + v1364);
                uint64_t result = 4 * v1371;
                uint64_t v1555 = 8 * *(void *)((char *)v1363 + v1364);
                uint64_t v1374 = 8 * v1368;
                do
                {
                  if (v1372 >= 1)
                  {
                    int v1375 = 0;
                    int v1376 = *(_DWORD *)(v188 + 4 * v1538);
                    uint64_t v1377 = 4 * *(void *)(v1366 + 8 * v1538);
                    uint64_t v1378 = 8 * *(void *)&v1363[2 * v1538];
                    uint64_t v1379 = v1360;
                    uint64_t v1380 = v1361;
                    do
                    {
                      if (v1376 >= 1)
                      {
                        int v1381 = 0;
                        int v1382 = *(_DWORD *)(v188 + 4 * v1373);
                        uint64_t v1383 = (void *)*a2;
                        uint64_t v1384 = 4 * *(void *)(v1366 + 8 * v1373);
                        uint64_t v1385 = 8 * *(void *)&v1363[2 * v1373];
                        uint64_t v1386 = v1379;
                        uint64_t v1387 = v1380;
                        do
                        {
                          if (v1382 >= 1)
                          {
                            int v1388 = (float *)(v1383[19] + v1387);
                            uint64_t v1389 = (uint64_t *)((char *)v186[19] + v1386);
                            int v1390 = v1382;
                            do
                            {
                              *int v1388 = (float)*v1389;
                              int v1388 = (float *)((char *)v1388 + v1384);
                              uint64_t v1389 = (uint64_t *)((char *)v1389 + v1385);
                              --v1390;
                            }
                            while (v1390);
                          }
                          ++v1381;
                          v1387 += v1377;
                          v1386 += v1378;
                        }
                        while (v1381 != v1376);
                      }
                      ++v1375;
                      v1380 += result;
                      v1379 += v1374;
                    }
                    while (v1375 != v1372);
                  }
                  ++v1362;
                  v1361 += v1572;
                  v1360 += v1555;
                }
                while (v1362 != v1589);
              }
              break;
            case 5:
              uint64_t v1391 = (v189 << 30) - 0x500000000;
              int v1492 = *(_DWORD *)(v188 + (v1391 >> 30));
              if (v1492 >= 1)
              {
                uint64_t v1512 = 0;
                uint64_t v1522 = 0;
                int v1502 = 0;
                uint64_t v1392 = v186[3];
                uint64_t v1393 = v1391 >> 29;
                uint64_t v1394 = v3[3];
                uint64_t v1395 = (v189 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1392 + (v1395 >> 29));
                int v1590 = *(_DWORD *)(v188 + (v1395 >> 30));
                uint64_t v1462 = (uint64_t)((v189 << 30) - 0x300000000) >> 32;
                uint64_t v1539 = (uint64_t)((v189 << 30) - 0x200000000) >> 32;
                uint64_t v1396 = (uint64_t)((v189 << 30) - 0x100000000) >> 32;
                uint64_t v1482 = 4 * *(void *)(v1394 + v1393);
                uint64_t v1573 = 4 * *(void *)(v1394 + (v1395 >> 29));
                uint64_t v1472 = 8 * *(void *)((char *)v1392 + v1393);
                uint64_t v1556 = 8 * result;
                do
                {
                  if (v1590 >= 1)
                  {
                    int v1397 = 0;
                    int v1398 = *(_DWORD *)(v188 + 4 * v1462);
                    uint64_t v1399 = 4 * *(void *)(v1394 + 8 * v1462);
                    uint64_t v1400 = 8 * *(void *)&v1392[2 * v1462];
                    uint64_t v1402 = v1512;
                    uint64_t v1401 = v1522;
                    do
                    {
                      if (v1398 >= 1)
                      {
                        int v1403 = 0;
                        int v1404 = *(_DWORD *)(v188 + 4 * v1539);
                        uint64_t v1405 = 4 * *(void *)(v1394 + 8 * v1539);
                        uint64_t v1406 = 8 * *(void *)&v1392[2 * v1539];
                        uint64_t v1407 = v1401;
                        uint64_t v1408 = v1402;
                        do
                        {
                          if (v1404 >= 1)
                          {
                            int v1409 = 0;
                            int v1410 = *(_DWORD *)(v188 + 4 * v1396);
                            uint64_t v1411 = (void *)*a2;
                            uint64_t v1412 = 4 * *(void *)(v1394 + 8 * v1396);
                            uint64_t v1413 = 8 * *(void *)&v1392[2 * v1396];
                            uint64_t v1414 = v1407;
                            uint64_t v1415 = v1408;
                            do
                            {
                              if (v1410 >= 1)
                              {
                                uint64_t v1416 = (float *)(v1411[19] + v1415);
                                uint64_t v1417 = (uint64_t *)((char *)v186[19] + v1414);
                                LODWORD(result) = v1410;
                                do
                                {
                                  *uint64_t v1416 = (float)*v1417;
                                  uint64_t v1416 = (float *)((char *)v1416 + v1412);
                                  uint64_t v1417 = (uint64_t *)((char *)v1417 + v1413);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1409;
                              v1415 += v1405;
                              v1414 += v1406;
                            }
                            while (v1409 != v1404);
                          }
                          ++v1403;
                          v1408 += v1399;
                          v1407 += v1400;
                        }
                        while (v1403 != v1398);
                      }
                      ++v1397;
                      v1402 += v1573;
                      v1401 += v1556;
                    }
                    while (v1397 != v1590);
                  }
                  v1512 += v1482;
                  v1522 += v1472;
                  ++v1502;
                }
                while (v1502 != v1492);
              }
              break;
            default:
              LODWORD(v1276) = 1;
              uint64_t v1277 = -20;
              do
              {
                uint64_t v1276 = *(int *)(v187 + v1277) * (uint64_t)(int)v1276;
                v1277 += 4;
              }
              while (v1277);
              uint64_t v1447 = v186[6];
              if (v1447)
              {
                uint64_t v1278 = 0;
                uint64_t v1427 = *v3;
                uint64_t v1279 = (v189 << 30) - 0x500000000;
                uint64_t v1437 = (v189 >> 2) - 1;
                uint64_t v1280 = v186[3];
                uint64_t v1432 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1281 = v3[3];
                int v1491 = *(_DWORD *)(v188 + (v1279 >> 30));
                uint64_t v1422 = (uint64_t)((v189 << 30) - 0x400000000) >> 32;
                uint64_t v1537 = (uint64_t)((v189 << 30) - 0x200000000) >> 32;
                uint64_t v1282 = (uint64_t)((v189 << 30) - 0x100000000) >> 32;
                uint64_t v1481 = 4 * *(void *)(v1281 + (v1279 >> 29));
                uint64_t v1461 = (uint64_t)((v189 << 30) - 0x300000000) >> 32;
                uint64_t v1471 = 8 * *(void *)((char *)v1280 + (v1279 >> 29));
                uint64_t v1442 = v1276;
                do
                {
                  uint64_t v1283 = v1437;
                  if ((v1437 & 0x80000000) != 0)
                  {
                    uint64_t v1284 = 0;
                    uint64_t v1285 = v1432;
                  }
                  else
                  {
                    uint64_t v1284 = 0;
                    LODWORD(result) = v1278;
                    uint64_t v1285 = v1432;
                    do
                    {
                      ldiv_t v1286 = ldiv((int)result, *(int *)(v188 + 4 * v1283));
                      uint64_t result = v1286.quot;
                      v1284 += *(void *)&v1280[2 * v1283--] * v1286.rem;
                    }
                    while (v1283 != -1);
                  }
                  uint64_t v1452 = v1278;
                  uint64_t v1287 = 0;
                  if ((v1285 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1278;
                    do
                    {
                      ldiv_t v1288 = ldiv((int)result, *(int *)(v1427 + 4 * v1285));
                      uint64_t result = v1288.quot;
                      v1287 += *(void *)(v1281 + 8 * v1285--) * v1288.rem;
                    }
                    while (v1285 != -1);
                  }
                  if (v1491 >= 1)
                  {
                    int v1289 = 0;
                    int v1588 = *(_DWORD *)(v188 + 4 * v1422);
                    uint64_t v1521 = 4 * v1287;
                    uint64_t v1571 = 4 * *(void *)(v1281 + 8 * v1422);
                    uint64_t v1511 = 8 * v1284;
                    uint64_t v1554 = 8 * *(void *)&v1280[2 * v1422];
                    do
                    {
                      int v1501 = v1289;
                      if (v1588 >= 1)
                      {
                        int v1290 = 0;
                        int v1291 = *(_DWORD *)(v188 + 4 * v1461);
                        uint64_t v1292 = 4 * *(void *)(v1281 + 8 * v1461);
                        uint64_t v1293 = 8 * *(void *)&v1280[2 * v1461];
                        uint64_t v1295 = v1511;
                        uint64_t v1294 = v1521;
                        do
                        {
                          if (v1291 >= 1)
                          {
                            int v1296 = 0;
                            int v1297 = *(_DWORD *)(v188 + 4 * v1537);
                            uint64_t v1298 = 4 * *(void *)(v1281 + 8 * v1537);
                            uint64_t v1299 = 8 * *(void *)&v1280[2 * v1537];
                            uint64_t result = v1295;
                            uint64_t v1300 = v1294;
                            do
                            {
                              if (v1297 >= 1)
                              {
                                int v1301 = 0;
                                int v1302 = *(_DWORD *)(v188 + 4 * v1282);
                                uint64_t v1303 = (void *)*a2;
                                uint64_t v1304 = 4 * *(void *)(v1281 + 8 * v1282);
                                uint64_t v1305 = 8 * *(void *)&v1280[2 * v1282];
                                uint64_t v1306 = result;
                                uint64_t v1307 = v1300;
                                do
                                {
                                  if (v1302 >= 1)
                                  {
                                    uint64_t v1308 = (float *)(v1303[19] + v1307);
                                    int v1309 = (uint64_t *)((char *)v186[19] + v1306);
                                    int v1310 = v1302;
                                    do
                                    {
                                      *uint64_t v1308 = (float)*v1309;
                                      uint64_t v1308 = (float *)((char *)v1308 + v1304);
                                      int v1309 = (uint64_t *)((char *)v1309 + v1305);
                                      --v1310;
                                    }
                                    while (v1310);
                                  }
                                  ++v1301;
                                  v1307 += v1298;
                                  v1306 += v1299;
                                }
                                while (v1301 != v1297);
                              }
                              ++v1296;
                              v1300 += v1292;
                              result += v1293;
                            }
                            while (v1296 != v1291);
                          }
                          ++v1290;
                          v1294 += v1571;
                          v1295 += v1554;
                        }
                        while (v1290 != v1588);
                      }
                      int v1289 = v1501 + 1;
                      v1521 += v1481;
                      v1511 += v1471;
                    }
                    while (v1501 + 1 != v1491);
                  }
                  v1278 += v1442;
                }
                while ((unint64_t)v1447 > v1452 + v1442);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<float>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  uint64_t v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v6 = v3[6];
          if (v6)
          {
            size_t v7 = (void *)v3[19];
            BOOL v8 = **(float **)(*(void *)v5 + 152) != 0.0;
            uint64_t result = (uint64_t)memset(v7, v8, v6);
          }
          break;
        case 1:
          uint64_t v21 = *(void *)(*(void *)result + 160);
          if (v21)
          {
            uint64_t v22 = *(float **)(*(void *)result + 152);
            uint64_t v23 = (BOOL *)v3[19];
            uint64_t v24 = 4 * v21;
            do
            {
              float v25 = *v22++;
              *v23++ = v25 != 0.0;
              v24 -= 4;
            }
            while (v24);
          }
          break;
        case 2:
          float v26 = *(uint64_t **)result;
          uint64_t v27 = **(int ***)result;
          uint64_t v28 = *(void *)(*(void *)result + 8) - (void)v27;
          switch(v28 >> 2)
          {
            case 1:
              uint64_t v29 = *v27;
              if ((int)v29 >= 1)
              {
                uint64_t v30 = (float *)v26[19];
                uint64_t v31 = (BOOL *)v3[19];
                uint64_t v32 = 4 * *(void *)v26[3];
                do
                {
                  *v31++ = *v30 != 0.0;
                  uint64_t v30 = (float *)((char *)v30 + v32);
                  --v29;
                }
                while (v29);
              }
              break;
            case 2:
              int v202 = *v27;
              if (*v27 >= 1)
              {
                int v203 = 0;
                uint64_t v204 = 0;
                uint64_t v205 = 0;
                uint64_t v206 = v26[19];
                uint64_t v207 = v3[19];
                uint64_t v208 = v27[1];
                int v209 = (uint64_t *)v26[3];
                uint64_t v211 = *v209;
                uint64_t v210 = v209[1];
                uint64_t v212 = v211 - v210 * v208;
                do
                {
                  int v213 = v208;
                  if ((int)v208 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(float *)(v206 + 4 * v205) != 0.0;
                      *(unsigned char *)(v207 + v204++) = result;
                      v205 += v210;
                      --v213;
                    }
                    while (v213);
                  }
                  v205 += v212;
                  ++v203;
                }
                while (v203 != v202);
              }
              break;
            case 3:
              int v214 = *v27;
              if (*v27 >= 1)
              {
                int v215 = 0;
                uint64_t result = 0;
                uint64_t v216 = 0;
                uint64_t v217 = v26[19];
                uint64_t v218 = v3[19];
                uint64_t v219 = v27[1];
                int v220 = (void *)v26[3];
                uint64_t v221 = v220[1];
                uint64_t v222 = *v220 - v221 * v219;
                do
                {
                  if ((int)v219 < 1)
                  {
                    uint64_t v229 = result;
                  }
                  else
                  {
                    int v223 = 0;
                    uint64_t v224 = v27[2];
                    uint64_t v225 = v26[3];
                    uint64_t v226 = v221 - v220[2] * v224;
                    do
                    {
                      if ((int)v224 < 1)
                      {
                        uint64_t v229 = result;
                      }
                      else
                      {
                        uint64_t v227 = *(void *)(v225 + 16);
                        int v228 = v224;
                        do
                        {
                          uint64_t v229 = result + 1;
                          *(unsigned char *)(v218 + result) = *(float *)(v217 + 4 * v216) != 0.0;
                          v216 += v227;
                          ++result;
                          --v228;
                        }
                        while (v228);
                      }
                      v216 += v226;
                      ++v223;
                      uint64_t result = v229;
                    }
                    while (v223 != v219);
                  }
                  v216 += v222;
                  ++v215;
                  uint64_t result = v229;
                }
                while (v215 != v214);
              }
              break;
            case 4:
              int v230 = *v27;
              if (*v27 >= 1)
              {
                int v231 = 0;
                uint64_t result = 0;
                uint64_t v232 = 0;
                uint64_t v233 = v26[19];
                uint64_t v234 = v3[19];
                uint64_t v235 = v27[1];
                int v236 = (void *)v26[3];
                uint64_t v237 = v236[1];
                uint64_t v238 = *v236 - v237 * v235;
                do
                {
                  if ((int)v235 < 1)
                  {
                    uint64_t v249 = result;
                  }
                  else
                  {
                    int v239 = 0;
                    uint64_t v240 = v27[2];
                    uint64_t v241 = v26[3];
                    uint64_t v242 = v237 - v236[2] * v240;
                    do
                    {
                      if ((int)v240 < 1)
                      {
                        uint64_t v249 = result;
                      }
                      else
                      {
                        int v243 = 0;
                        uint64_t v244 = v27[3];
                        uint64_t v245 = v26[3];
                        uint64_t v246 = *(void *)(v241 + 16) - *(void *)(v241 + 24) * v244;
                        do
                        {
                          if ((int)v244 < 1)
                          {
                            uint64_t v249 = result;
                          }
                          else
                          {
                            uint64_t v247 = *(void *)(v245 + 24);
                            int v248 = v244;
                            do
                            {
                              uint64_t v249 = result + 1;
                              *(unsigned char *)(v234 + result) = *(float *)(v233 + 4 * v232) != 0.0;
                              v232 += v247;
                              ++result;
                              --v248;
                            }
                            while (v248);
                          }
                          v232 += v246;
                          ++v243;
                          uint64_t result = v249;
                        }
                        while (v243 != v240);
                      }
                      v232 += v242;
                      ++v239;
                      uint64_t result = v249;
                    }
                    while (v239 != v235);
                  }
                  v232 += v238;
                  ++v231;
                  uint64_t result = v249;
                }
                while (v231 != v230);
              }
              break;
            default:
              uint64_t v193 = v3[6];
              if (v193)
              {
                uint64_t v194 = 0;
                uint64_t v195 = v26[19];
                uint64_t v196 = v3[19];
                uint64_t v197 = ((unint64_t)v28 >> 2) - 1;
                uint64_t v198 = v26[3];
                do
                {
                  uint64_t v199 = 0;
                  if ((v197 & 0x80000000) == 0)
                  {
                    uint64_t v200 = v197;
                    LODWORD(result) = v194;
                    do
                    {
                      ldiv_t v201 = ldiv((int)result, v27[v200]);
                      uint64_t result = v201.quot;
                      v199 += *(void *)(v198 + 8 * v200--) * v201.rem;
                    }
                    while (v200 != -1);
                  }
                  *(unsigned char *)(v196 + v194++) = *(float *)(v195 + 4 * v199) != 0.0;
                }
                while (v194 != v193);
              }
              break;
          }
          break;
        case 3:
          uint64_t v33 = *(unsigned int ***)result;
          uint64_t v35 = **(void **)result;
          uint64_t v34 = *(void *)(*(void *)result + 8);
          unint64_t v36 = v34 - v35;
          switch((v34 - v35) >> 2)
          {
            case 1:
              uint64_t v37 = (v36 << 30) - 0x100000000;
              int v38 = *(_DWORD *)(v35 + (v37 >> 30));
              if (v38 >= 1)
              {
                uint64_t v39 = v37 >> 29;
                uint64_t v40 = *(void *)((char *)v33[3] + v39);
                uint64_t v41 = *(void *)(v3[3] + v39);
                unint64_t v42 = (BOOL *)v3[19];
                uint64_t v43 = (float *)v33[19];
                uint64_t v44 = 4 * v40;
                do
                {
                  *unint64_t v42 = *v43 != 0.0;
                  v42 += v41;
                  uint64_t v43 = (float *)((char *)v43 + v44);
                  --v38;
                }
                while (v38);
              }
              break;
            case 2:
              uint64_t v601 = (v36 << 30) - 0x200000000;
              int v602 = *(_DWORD *)(v35 + (v601 >> 30));
              if (v602 >= 1)
              {
                uint64_t v603 = 0;
                int v604 = 0;
                uint64_t v605 = 0;
                uint64_t v606 = v36 << 30;
                uint64_t v607 = v33[3];
                uint64_t v608 = v601 >> 29;
                uint64_t v609 = *(void *)((char *)v607 + v608);
                uint64_t v610 = v3[3];
                uint64_t v611 = *(void *)(v610 + v608);
                uint64_t result = v606 - 0x100000000;
                uint64_t v612 = (v606 - 0x100000000) >> 29;
                uint64_t v613 = *(void *)((char *)v607 + v612);
                uint64_t v614 = *(void *)(v610 + v612);
                int v615 = *(_DWORD *)(v35 + (result >> 30));
                uint64_t v616 = 4 * v609;
                uint64_t v617 = 4 * v613;
                do
                {
                  if (v615 >= 1)
                  {
                    uint64_t result = v3[19];
                    uint64_t v618 = (float *)((char *)v33[19] + v603);
                    int v619 = v615;
                    do
                    {
                      *(unsigned char *)(result + v605) = *v618 != 0.0;
                      result += v614;
                      uint64_t v618 = (float *)((char *)v618 + v617);
                      --v619;
                    }
                    while (v619);
                  }
                  v605 += v611;
                  ++v604;
                  v603 += v616;
                }
                while (v604 != v602);
              }
              break;
            case 3:
              uint64_t v620 = (v36 << 30) - 0x300000000;
              int v621 = *(_DWORD *)(v35 + (v620 >> 30));
              if (v621 >= 1)
              {
                uint64_t v622 = 0;
                int v623 = 0;
                uint64_t v624 = 0;
                uint64_t v625 = v36 << 30;
                uint64_t v626 = v33[3];
                uint64_t v627 = v620 >> 29;
                uint64_t v628 = *(void *)((char *)v626 + v627);
                uint64_t v629 = v3[3];
                uint64_t v630 = *(void *)(v629 + v627);
                uint64_t v631 = v625 - 0x200000000;
                uint64_t v632 = (v625 - 0x200000000) >> 29;
                uint64_t v633 = v625 - 0x100000000;
                uint64_t v634 = *(void *)((char *)v626 + v632);
                uint64_t v635 = *(void *)(v629 + v632);
                int v636 = *(_DWORD *)(v35 + (v631 >> 30));
                uint64_t v637 = v633 >> 32;
                uint64_t result = 4 * v628;
                uint64_t v638 = 4 * v634;
                do
                {
                  if (v636 >= 1)
                  {
                    int v639 = 0;
                    uint64_t v640 = *(void *)(v629 + 8 * v637);
                    int v641 = *(_DWORD *)(v35 + 4 * v637);
                    int v642 = (void *)*a2;
                    uint64_t v643 = 4 * *(void *)&v626[2 * v637];
                    uint64_t v644 = v622;
                    uint64_t v645 = v624;
                    do
                    {
                      if (v641 >= 1)
                      {
                        uint64_t v646 = v642[19];
                        int v647 = (float *)((char *)v33[19] + v644);
                        int v648 = v641;
                        do
                        {
                          *(unsigned char *)(v646 + v645) = *v647 != 0.0;
                          v646 += v640;
                          int v647 = (float *)((char *)v647 + v643);
                          --v648;
                        }
                        while (v648);
                      }
                      v645 += v635;
                      ++v639;
                      v644 += v638;
                    }
                    while (v639 != v636);
                  }
                  v624 += v630;
                  ++v623;
                  v622 += result;
                }
                while (v623 != v621);
              }
              break;
            case 4:
              uint64_t v649 = (v36 << 30) - 0x400000000;
              int v1570 = *(_DWORD *)(v35 + (v649 >> 30));
              if (v1570 >= 1)
              {
                uint64_t v650 = 0;
                int v651 = 0;
                uint64_t v652 = 0;
                uint64_t v653 = v33[3];
                uint64_t v654 = v649 >> 29;
                uint64_t v655 = *(void *)((char *)v653 + v654);
                uint64_t v656 = v3[3];
                uint64_t v1553 = *(void *)(v656 + v654);
                uint64_t v657 = (v36 << 30) - 0x300000000;
                uint64_t v658 = (v36 << 30) - 0x200000000;
                uint64_t v659 = (v36 << 30) - 0x100000000;
                uint64_t v660 = *(void *)(v656 + (v657 >> 29));
                int v661 = *(_DWORD *)(v35 + (v657 >> 30));
                uint64_t v1520 = v658 >> 32;
                uint64_t result = v659 >> 32;
                uint64_t v1536 = 4 * v655;
                uint64_t v662 = 4 * *(void *)((char *)v653 + (v657 >> 29));
                do
                {
                  if (v661 >= 1)
                  {
                    int v663 = 0;
                    uint64_t v664 = *(void *)(v656 + 8 * v1520);
                    int v665 = *(_DWORD *)(v35 + 4 * v1520);
                    uint64_t v666 = 4 * *(void *)&v653[2 * v1520];
                    uint64_t v667 = v650;
                    uint64_t v668 = v652;
                    do
                    {
                      if (v665 >= 1)
                      {
                        int v669 = 0;
                        uint64_t v670 = *(void *)(v656 + 8 * result);
                        int v671 = *(_DWORD *)(v35 + 4 * result);
                        uint64_t v672 = (void *)*a2;
                        uint64_t v673 = 4 * *(void *)&v653[2 * result];
                        uint64_t v674 = v667;
                        uint64_t v675 = v668;
                        do
                        {
                          if (v671 >= 1)
                          {
                            uint64_t v676 = v672[19];
                            int v677 = (float *)((char *)v33[19] + v674);
                            int v678 = v671;
                            do
                            {
                              *(unsigned char *)(v676 + v675) = *v677 != 0.0;
                              v676 += v670;
                              int v677 = (float *)((char *)v677 + v673);
                              --v678;
                            }
                            while (v678);
                          }
                          v675 += v664;
                          ++v669;
                          v674 += v666;
                        }
                        while (v669 != v665);
                      }
                      v668 += v660;
                      ++v663;
                      v667 += v662;
                    }
                    while (v663 != v661);
                  }
                  v652 += v1553;
                  ++v651;
                  v650 += v1536;
                }
                while (v651 != v1570);
              }
              break;
            case 5:
              uint64_t v679 = (v36 << 30) - 0x500000000;
              int v1480 = *(_DWORD *)(v35 + (v679 >> 30));
              if (v1480 >= 1)
              {
                uint64_t v1500 = 0;
                uint64_t v1510 = 0;
                int v1490 = 0;
                uint64_t v680 = v33[3];
                uint64_t v681 = v679 >> 29;
                uint64_t v682 = v3[3];
                uint64_t v1470 = *(void *)(v682 + v681);
                uint64_t v683 = (v36 << 30) - 0x400000000;
                uint64_t v1554 = *(void *)(v682 + (v683 >> 29));
                int v1571 = *(_DWORD *)(v35 + (v683 >> 30));
                uint64_t v1451 = (uint64_t)((v36 << 30) - 0x300000000) >> 32;
                uint64_t v1521 = (uint64_t)((v36 << 30) - 0x200000000) >> 32;
                uint64_t v684 = (uint64_t)((v36 << 30) - 0x100000000) >> 32;
                uint64_t v1460 = 4 * *(void *)((char *)v680 + v681);
                uint64_t v1537 = 4 * *(void *)((char *)v680 + (v683 >> 29));
                do
                {
                  if (v1571 >= 1)
                  {
                    int v685 = 0;
                    uint64_t v686 = *(void *)(v682 + 8 * v1451);
                    int v687 = *(_DWORD *)(v35 + 4 * v1451);
                    uint64_t v688 = 4 * *(void *)&v680[2 * v1451];
                    uint64_t v689 = v1500;
                    uint64_t v690 = v1510;
                    do
                    {
                      if (v687 >= 1)
                      {
                        int v691 = 0;
                        uint64_t v692 = *(void *)(v682 + 8 * v1521);
                        int v693 = *(_DWORD *)(v35 + 4 * v1521);
                        uint64_t v694 = 4 * *(void *)&v680[2 * v1521];
                        uint64_t v695 = v690;
                        uint64_t v696 = v689;
                        do
                        {
                          if (v693 >= 1)
                          {
                            int v697 = 0;
                            uint64_t v698 = *(void *)(v682 + 8 * v684);
                            int v699 = *(_DWORD *)(v35 + 4 * v684);
                            uint64_t v700 = (void *)*a2;
                            uint64_t v701 = 4 * *(void *)&v680[2 * v684];
                            uint64_t v702 = v695;
                            uint64_t v703 = v696;
                            do
                            {
                              if (v699 >= 1)
                              {
                                uint64_t v704 = v700[19];
                                int v705 = (float *)((char *)v33[19] + v702);
                                int v706 = v699;
                                do
                                {
                                  uint64_t result = *v705 != 0.0;
                                  *(unsigned char *)(v704 + v703) = result;
                                  v704 += v698;
                                  int v705 = (float *)((char *)v705 + v701);
                                  --v706;
                                }
                                while (v706);
                              }
                              v703 += v692;
                              ++v697;
                              v702 += v694;
                            }
                            while (v697 != v693);
                          }
                          v696 += v686;
                          ++v691;
                          v695 += v688;
                        }
                        while (v691 != v687);
                      }
                      v689 += v1554;
                      ++v685;
                      v690 += v1537;
                    }
                    while (v685 != v1571);
                  }
                  v1500 += v1470;
                  v1510 += v1460;
                  ++v1490;
                }
                while (v1490 != v1480);
              }
              break;
            default:
              LODWORD(v566) = 1;
              uint64_t v567 = -20;
              do
              {
                uint64_t v566 = *(int *)(v34 + v567) * (uint64_t)(int)v566;
                v567 += 4;
              }
              while (v567);
              uint64_t v1440 = v33[6];
              if (v1440)
              {
                uint64_t v568 = 0;
                uint64_t v1420 = *v3;
                uint64_t v569 = (v36 << 30) - 0x500000000;
                uint64_t v1430 = (v36 >> 2) - 1;
                int v570 = v33[3];
                uint64_t v571 = v3[3];
                uint64_t v1469 = *(void *)(v571 + (v569 >> 29));
                int v1479 = *(_DWORD *)(v35 + (v569 >> 30));
                uint64_t v1425 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1416 = (uint64_t)((v36 << 30) - 0x400000000) >> 32;
                uint64_t v1519 = (uint64_t)((v36 << 30) - 0x200000000) >> 32;
                uint64_t v572 = (uint64_t)((v36 << 30) - 0x100000000) >> 32;
                uint64_t v1450 = (uint64_t)((v36 << 30) - 0x300000000) >> 32;
                uint64_t v1459 = 4 * *(void *)((char *)v570 + (v569 >> 29));
                uint64_t v1435 = v566;
                do
                {
                  uint64_t v573 = v1430;
                  if ((v1430 & 0x80000000) != 0)
                  {
                    uint64_t v574 = 0;
                  }
                  else
                  {
                    uint64_t v574 = 0;
                    LODWORD(result) = v568;
                    do
                    {
                      ldiv_t v575 = ldiv((int)result, *(int *)(v35 + 4 * v573));
                      uint64_t result = v575.quot;
                      v574 += *(void *)&v570[2 * v573--] * v575.rem;
                    }
                    while (v573 != -1);
                  }
                  uint64_t v576 = v1425;
                  uint64_t v1445 = v568;
                  uint64_t v577 = 0;
                  if ((v1425 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v568;
                    do
                    {
                      ldiv_t v578 = ldiv((int)result, *(int *)(v1420 + 4 * v576));
                      uint64_t result = v578.quot;
                      v577 += *(void *)(v571 + 8 * v576--) * v578.rem;
                    }
                    while (v576 != -1);
                  }
                  if (v1479 >= 1)
                  {
                    int v579 = 0;
                    uint64_t v1552 = *(void *)(v571 + 8 * v1416);
                    int v1569 = *(_DWORD *)(v35 + 4 * v1416);
                    uint64_t v1509 = 4 * v574;
                    uint64_t v1535 = 4 * *(void *)&v570[2 * v1416];
                    do
                    {
                      int v1489 = v579;
                      uint64_t v1499 = v577;
                      if (v1569 >= 1)
                      {
                        int v580 = 0;
                        uint64_t v581 = *(void *)(v571 + 8 * v1450);
                        int v582 = *(_DWORD *)(v35 + 4 * v1450);
                        uint64_t v583 = 4 * *(void *)&v570[2 * v1450];
                        uint64_t v585 = v577;
                        uint64_t v584 = v1509;
                        do
                        {
                          if (v582 >= 1)
                          {
                            int v586 = 0;
                            uint64_t v587 = *(void *)(v571 + 8 * v1519);
                            int v588 = *(_DWORD *)(v35 + 4 * v1519);
                            uint64_t v589 = 4 * *(void *)&v570[2 * v1519];
                            uint64_t v590 = v584;
                            uint64_t result = v585;
                            do
                            {
                              if (v588 >= 1)
                              {
                                int v591 = 0;
                                uint64_t v592 = *(void *)(v571 + 8 * v572);
                                int v593 = *(_DWORD *)(v35 + 4 * v572);
                                int v594 = (void *)*a2;
                                uint64_t v595 = 4 * *(void *)&v570[2 * v572];
                                uint64_t v596 = v590;
                                uint64_t v597 = result;
                                do
                                {
                                  if (v593 >= 1)
                                  {
                                    uint64_t v598 = v594[19];
                                    int v599 = (float *)((char *)v33[19] + v596);
                                    int v600 = v593;
                                    do
                                    {
                                      *(unsigned char *)(v598 + v597) = *v599 != 0.0;
                                      v598 += v592;
                                      int v599 = (float *)((char *)v599 + v595);
                                      --v600;
                                    }
                                    while (v600);
                                  }
                                  v597 += v587;
                                  ++v591;
                                  v596 += v589;
                                }
                                while (v591 != v588);
                              }
                              result += v581;
                              ++v586;
                              v590 += v583;
                            }
                            while (v586 != v582);
                          }
                          v585 += v1552;
                          ++v580;
                          v584 += v1535;
                        }
                        while (v580 != v1569);
                      }
                      uint64_t v577 = v1499 + v1469;
                      int v579 = v1489 + 1;
                      v1509 += v1459;
                    }
                    while (v1489 + 1 != v1479);
                  }
                  v568 += v1435;
                }
                while ((unint64_t)v1440 > v1445 + v1435);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          goto LABEL_10;
        case 1:
          uint64_t v45 = *(void *)(*(void *)result + 160);
          if (v45)
          {
            uint64_t v46 = *(float **)(*(void *)result + 152);
            uint64_t v47 = (unsigned char *)v3[19];
            uint64_t v48 = 4 * v45;
            do
            {
              float v49 = *v46++;
              *v47++ = (int)v49;
              v48 -= 4;
            }
            while (v48);
          }
          break;
        case 2:
          uint64_t v50 = *(int ***)result;
          uint64_t v51 = **(int ***)result;
          switch(v50[1] - *v50)
          {
            case 1:
              if (*v51 >= 1)
              {
                uint64_t v52 = 0;
                uint64_t v53 = 0;
                uint64_t v54 = v50[19];
                uint64_t v55 = v3[19];
                do
                {
                  *(unsigned char *)(v55 + v52) = (int)*(float *)&v54[v53];
                  v53 += *(void *)v50[3];
                  ++v52;
                }
                while (**v50 > (int)v52);
              }
              break;
            case 2:
              int v259 = *v51;
              if (*v51 >= 1)
              {
                int v260 = 0;
                uint64_t v261 = 0;
                uint64_t v262 = 0;
                uint64_t v263 = v50[19];
                uint64_t v264 = v3[19];
                do
                {
                  int v265 = v51[1];
                  if (v265 < 1)
                  {
                    int v266 = v50[3];
                    uint64_t v267 = *((void *)v266 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v264 + v261 + result) = (int)*(float *)&v263[v262];
                      int v266 = v50[3];
                      uint64_t v267 = *((void *)v266 + 1);
                      v262 += v267;
                      uint64_t v51 = *v50;
                      int v265 = (*v50)[1];
                      ++result;
                    }
                    while ((int)result < v265);
                    int v259 = *v51;
                    v261 += result;
                  }
                  uint64_t v262 = *(void *)v266 + v262 - v267 * v265;
                  ++v260;
                }
                while (v260 < v259);
              }
              break;
            case 3:
              int v268 = *v51;
              if (*v51 >= 1)
              {
                int v269 = 0;
                uint64_t v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = v50[19];
                uint64_t v273 = v3[19];
                do
                {
                  int v274 = v51[1];
                  if (v274 < 1)
                  {
                    uint64_t v278 = v50[3];
                    uint64_t v279 = *((void *)v278 + 1);
                  }
                  else
                  {
                    for (int i = 0; i < v274; ++i)
                    {
                      int v276 = v51[2];
                      if (v276 < 1)
                      {
                        uint64_t v278 = v50[3];
                        uint64_t result = *((void *)v278 + 2);
                      }
                      else
                      {
                        uint64_t v277 = 0;
                        do
                        {
                          *(unsigned char *)(v273 + v270 + v277) = (int)*(float *)&v272[v271];
                          uint64_t v278 = v50[3];
                          uint64_t result = *((void *)v278 + 2);
                          v271 += result;
                          uint64_t v51 = *v50;
                          int v276 = (*v50)[2];
                          ++v277;
                        }
                        while ((int)v277 < v276);
                        v270 += v277;
                      }
                      uint64_t v279 = *((void *)v278 + 1);
                      uint64_t v271 = v279 + v271 - result * v276;
                      int v274 = v51[1];
                    }
                    int v268 = *v51;
                  }
                  uint64_t v271 = *(void *)v278 + v271 - v279 * v274;
                  ++v269;
                }
                while (v269 < v268);
              }
              break;
            case 4:
              int v280 = *v51;
              if (*v51 >= 1)
              {
                int v281 = 0;
                uint64_t v282 = 0;
                uint64_t v283 = 0;
                uint64_t v284 = v50[19];
                uint64_t v285 = v3[19];
                do
                {
                  int v286 = v51[1];
                  if (v286 < 1)
                  {
                    int v292 = v50[3];
                    uint64_t v294 = *((void *)v292 + 1);
                  }
                  else
                  {
                    for (int j = 0; j < v286; ++j)
                    {
                      int v288 = v51[2];
                      if (v288 < 1)
                      {
                        int v292 = v50[3];
                        uint64_t v293 = *((void *)v292 + 2);
                      }
                      else
                      {
                        for (int k = 0; k < v288; ++k)
                        {
                          int v290 = v51[3];
                          if (v290 < 1)
                          {
                            int v292 = v50[3];
                            uint64_t result = *((void *)v292 + 3);
                          }
                          else
                          {
                            uint64_t v291 = 0;
                            do
                            {
                              *(unsigned char *)(v285 + v282 + v291) = (int)*(float *)&v284[v283];
                              int v292 = v50[3];
                              uint64_t result = *((void *)v292 + 3);
                              v283 += result;
                              uint64_t v51 = *v50;
                              int v290 = (*v50)[3];
                              ++v291;
                            }
                            while ((int)v291 < v290);
                            v282 += v291;
                          }
                          uint64_t v293 = *((void *)v292 + 2);
                          uint64_t v283 = v293 + v283 - result * v290;
                          int v288 = v51[2];
                        }
                      }
                      uint64_t v294 = *((void *)v292 + 1);
                      uint64_t v283 = v294 + v283 - v293 * v288;
                      int v286 = v51[1];
                    }
                    int v280 = *v51;
                  }
                  uint64_t v283 = *(void *)v292 + v283 - v294 * v286;
                  ++v281;
                }
                while (v281 < v280);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v250 = 0;
                uint64_t v251 = v50[19];
                uint64_t v252 = v3[19];
                do
                {
                  uint64_t v253 = *v50;
                  unint64_t v254 = (unint64_t)((char *)v50[1] - (char *)*v50) >> 2;
                  uint64_t v255 = 0;
                  uint64_t v256 = (v254 - 1);
                  if ((int)v254 - 1 >= 0)
                  {
                    uint64_t v257 = v50[3];
                    LODWORD(result) = v250;
                    do
                    {
                      ldiv_t v258 = ldiv((int)result, v253[v256]);
                      uint64_t result = v258.quot;
                      v255 += *(void *)&v257[2 * v256--] * v258.rem;
                    }
                    while (v256 != -1);
                  }
                  *(unsigned char *)(v252 + v250++) = (int)*(float *)&v251[v255];
                }
                while (v250 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v56 = *(int ***)result;
          uint64_t v57 = (uint64_t *)(*(void *)result + 24);
          uint64_t v58 = v3 + 3;
          uint64_t v60 = **(void **)result;
          uint64_t v59 = *(void *)(*(void *)result + 8);
          uint64_t v61 = v59 - v60;
          switch((v59 - v60) >> 2)
          {
            case 1:
              uint64_t v62 = (v61 << 30) - 0x100000000;
              int v63 = *(_DWORD *)(v60 + (v62 >> 30));
              if (v63 >= 1)
              {
                uint64_t v64 = v62 >> 29;
                uint64_t v65 = *(void *)(*v57 + v64);
                uint64_t v66 = *(void *)(*v58 + v64);
                uint64_t v67 = (unsigned char *)v3[19];
                uint64_t v68 = (float *)v56[19];
                uint64_t v69 = 4 * v65;
                do
                {
                  unsigned char *v67 = (int)*v68;
                  v67 += v66;
                  uint64_t v68 = (float *)((char *)v68 + v69);
                  --v63;
                }
                while (v63);
              }
              break;
            case 2:
              uint64_t v728 = (v61 << 30) - 0x200000000;
              int v729 = *(_DWORD *)(v60 + (v728 >> 30));
              if (v729 >= 1)
              {
                uint64_t v730 = 0;
                int v731 = 0;
                uint64_t v732 = 0;
                uint64_t v733 = v728 >> 29;
                uint64_t v734 = *(void *)(*v57 + v733);
                uint64_t v735 = *(void *)(*v58 + v733);
                uint64_t v736 = 4 * v734;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v737 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v738 = *(int *)((char *)*v56 + (v737 >> 30));
                  if (v738 >= 1)
                  {
                    uint64_t v739 = v737 >> 29;
                    uint64_t v740 = *(void *)((char *)v56[3] + v739);
                    uint64_t v741 = *(void *)(*v58 + v739);
                    uint64_t v742 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v730;
                    uint64_t v743 = 4 * v740;
                    do
                    {
                      *(unsigned char *)(v742 + v732) = (int)*(float *)result;
                      v742 += v741;
                      result += v743;
                      --v738;
                    }
                    while (v738);
                  }
                  v732 += v735;
                  ++v731;
                  v730 += v736;
                }
                while (v731 != v729);
              }
              break;
            case 3:
              uint64_t v744 = (v61 << 30) - 0x300000000;
              int v745 = *(_DWORD *)(v60 + (v744 >> 30));
              if (v745 >= 1)
              {
                uint64_t v746 = 0;
                int v747 = 0;
                uint64_t v748 = 0;
                uint64_t v749 = v744 >> 29;
                uint64_t v750 = *(void *)(*v57 + v749);
                uint64_t v751 = *(void *)(*v58 + v749);
                uint64_t v752 = 4 * v750;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v753 = *(int *)((char *)*v56 + (result >> 30));
                  if (v753 >= 1)
                  {
                    int v754 = 0;
                    uint64_t v755 = result >> 29;
                    uint64_t v756 = *(void *)((char *)v56[3] + v755);
                    uint64_t result = *(void *)(*v58 + v755);
                    uint64_t v757 = 4 * v756;
                    uint64_t v758 = v746;
                    uint64_t v759 = v748;
                    do
                    {
                      uint64_t v760 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v761 = *(int *)((char *)*v56 + (v760 >> 30));
                      if (v761 >= 1)
                      {
                        uint64_t v762 = v760 >> 29;
                        uint64_t v763 = *(void *)((char *)v56[3] + v762);
                        uint64_t v764 = *(void *)(*v58 + v762);
                        uint64_t v765 = *(void *)(*a2 + 152);
                        uint64_t v766 = (float *)(*(void *)(*(void *)v5 + 152) + v758);
                        uint64_t v767 = 4 * v763;
                        do
                        {
                          *(unsigned char *)(v765 + v759) = (int)*v766;
                          v765 += v764;
                          uint64_t v766 = (float *)((char *)v766 + v767);
                          --v761;
                        }
                        while (v761);
                      }
                      v759 += result;
                      ++v754;
                      v758 += v757;
                    }
                    while (v754 != v753);
                  }
                  v748 += v751;
                  ++v747;
                  v746 += v752;
                }
                while (v747 != v745);
              }
              break;
            case 4:
              uint64_t v768 = *(int ***)result;
              uint64_t v769 = (void *)(*(void *)result + 24);
              uint64_t v770 = v3 + 3;
              goto LABEL_565;
            case 5:
              uint64_t v771 = (v61 << 30) - 0x500000000;
              int v772 = *(_DWORD *)(v60 + (v771 >> 30));
              if (v772 >= 1)
              {
                uint64_t v773 = 0;
                uint64_t v774 = 0;
                uint64_t v775 = v771 >> 29;
                uint64_t v776 = *(void *)(*v57 + v775);
                uint64_t v777 = *(void *)(*v58 + v775);
                do
                {
                  v773 += v776;
                  v774 += v777;
                  --v772;
                }
                while (v772);
              }
              break;
            default:
              LODWORD(v707) = 1;
              uint64_t v708 = -20;
              do
              {
                uint64_t v707 = *(int *)(v59 + v708) * (uint64_t)(int)v707;
                v708 += 4;
              }
              while (v708);
              if (v56[6])
              {
                uint64_t result = 0;
                uint64_t v709 = *(void **)v5;
                uint64_t v1555 = v58;
                uint64_t v1522 = v707;
                do
                {
                  uint64_t v710 = *v56;
                  unint64_t v711 = (unint64_t)((char *)v56[1] - (char *)*v56) >> 2;
                  uint64_t v712 = (v711 - 1);
                  uint64_t v1572 = result;
                  uint64_t v1538 = v709;
                  uint64_t v713 = 0;
                  if ((int)v711 - 1 >= 0)
                  {
                    uint64_t v714 = *v57;
                    do
                    {
                      ldiv_t v715 = ldiv((int)result, v710[v712]);
                      LODWORD(result) = v715.quot;
                      v713 += *(void *)(v714 + 8 * v712--) * v715.rem;
                    }
                    while (v712 != -1);
                  }
                  uint64_t v716 = *(void *)*a2;
                  unint64_t v717 = (unint64_t)(*(void *)(*a2 + 8) - v716) >> 2;
                  uint64_t v718 = *v1555;
                  uint64_t v719 = 0;
                  uint64_t v720 = (v717 - 1);
                  if ((int)v717 - 1 >= 0)
                  {
                    int quot = v1572;
                    do
                    {
                      ldiv_t v722 = ldiv(quot, *(int *)(v716 + 4 * v720));
                      int quot = v722.quot;
                      v719 += *(void *)(v718 + 8 * v720--) * v722.rem;
                    }
                    while (v720 != -1);
                  }
                  uint64_t v709 = v1538;
                  uint64_t v723 = ((v709[1] - *v709) << 30) - 0x500000000;
                  int v724 = *(int *)((char *)v710 + (v723 >> 30));
                  if (v724 >= 1)
                  {
                    uint64_t v725 = v723 >> 29;
                    uint64_t v726 = *(void *)(*v57 + v725);
                    uint64_t v727 = *(void *)(v718 + v725);
                    do
                    {
                      v713 += v726;
                      v719 += v727;
                      --v724;
                    }
                    while (v724);
                    uint64_t v709 = *(void **)v5;
                  }
                  uint64_t result = v1572 + v1522;
                }
                while (v709[6] > (unint64_t)(v1572 + v1522));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v9 = v3[6];
          if (v9)
          {
            unsigned int v10 = **(float **)(*(void *)result + 152);
            uint64_t v11 = (unsigned int *)v3[19];
            do
            {
              *v11++ = v10;
              --v9;
            }
            while (v9);
          }
          break;
        case 1:
          uint64_t v70 = *(void *)(*(void *)result + 160);
          if (v70)
          {
            uint64_t v71 = *(float **)(*(void *)result + 152);
            uint64_t v72 = (_DWORD *)v3[19];
            uint64_t v73 = 4 * v70;
            do
            {
              float v74 = *v71++;
              *v72++ = v74;
              v73 -= 4;
            }
            while (v73);
          }
          break;
        case 2:
          uint64_t v75 = *(int ***)result;
          uint64_t v76 = **(int ***)result;
          uint64_t v77 = *(void *)(*(void *)result + 8) - (void)v76;
          switch(v77 >> 2)
          {
            case 1:
              if (*v76 >= 1)
              {
                uint64_t v78 = 0;
                uint64_t v79 = (float *)v75[19];
                uint64_t v80 = v3[19];
                uint64_t v81 = 4 * *(void *)v75[3];
                do
                {
                  *(_DWORD *)(v80 + 4 * v78) = *v79;
                  uint64_t v79 = (float *)((char *)v79 + v81);
                  ++v78;
                }
                while (*v76 > (int)v78);
              }
              break;
            case 2:
              int v304 = *v76;
              if (*v76 >= 1)
              {
                int v305 = 0;
                uint64_t v306 = 0;
                uint64_t v307 = 0;
                uint64_t v308 = v75[19];
                uint64_t v309 = v3[19];
                int v310 = v75[3];
                uint64_t v311 = *(void *)v310;
                uint64_t v312 = *((void *)v310 + 1);
                int v313 = v76[1];
                do
                {
                  if (v313 >= 1)
                  {
                    uint64_t v314 = 0;
                    do
                    {
                      *(_DWORD *)(v309 + 4 * v306 + 4 * v314) = *(float *)&v308[v307];
                      v307 += v312;
                      int v313 = v76[1];
                      ++v314;
                    }
                    while ((int)v314 < v313);
                    int v304 = *v76;
                    v306 += v314;
                  }
                  uint64_t v307 = v307 + v311 - v312 * v313;
                  ++v305;
                }
                while (v305 < v304);
              }
              break;
            case 3:
              uint64_t result = *v76;
              if ((int)result >= 1)
              {
                int v315 = 0;
                uint64_t v316 = 0;
                uint64_t v317 = 0;
                uint64_t v318 = v75[19];
                uint64_t v319 = v3[19];
                uint64_t v320 = v75[3];
                uint64_t v321 = *(void *)v320;
                uint64_t v322 = *((void *)v320 + 1);
                int v323 = v76[1];
                do
                {
                  if (v323 >= 1)
                  {
                    int v324 = 0;
                    uint64_t v325 = v75[3];
                    uint64_t v326 = *((void *)v320 + 2);
                    int v327 = v76[2];
                    do
                    {
                      if (v327 >= 1)
                      {
                        uint64_t v328 = 0;
                        uint64_t v329 = *((void *)v325 + 2);
                        do
                        {
                          *(_DWORD *)(v319 + 4 * v316 + 4 * v328) = *(float *)&v318[v317];
                          v317 += v329;
                          int v327 = v76[2];
                          ++v328;
                        }
                        while ((int)v328 < v327);
                        int v323 = v76[1];
                        v316 += v328;
                      }
                      uint64_t v317 = v317 + v322 - v326 * v327;
                      ++v324;
                    }
                    while (v324 < v323);
                    uint64_t result = *v76;
                  }
                  uint64_t v317 = v317 + v321 - v322 * v323;
                  ++v315;
                }
                while (v315 < (int)result);
              }
              break;
            case 4:
              int v330 = *v76;
              if (*v76 >= 1)
              {
                int v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = v75[19];
                uint64_t v335 = v3[19];
                int v336 = v75[3];
                uint64_t v337 = *(void *)v336;
                uint64_t v338 = *((void *)v336 + 1);
                int v339 = v76[1];
                do
                {
                  if (v339 >= 1)
                  {
                    int v340 = 0;
                    uint64_t v341 = v75[3];
                    uint64_t v342 = *((void *)v336 + 2);
                    int v343 = v76[2];
                    do
                    {
                      if (v343 >= 1)
                      {
                        int v344 = 0;
                        int v345 = v75[3];
                        uint64_t v346 = *((void *)v341 + 2);
                        uint64_t v347 = *((void *)v341 + 3);
                        int v348 = v76[3];
                        do
                        {
                          if (v348 >= 1)
                          {
                            uint64_t v349 = 0;
                            uint64_t v350 = *((void *)v345 + 3);
                            do
                            {
                              *(_DWORD *)(v335 + 4 * v332 + 4 * v349) = *(float *)&v334[v333];
                              v333 += v350;
                              int v348 = v76[3];
                              ++v349;
                            }
                            while ((int)v349 < v348);
                            int v343 = v76[2];
                            v332 += v349;
                          }
                          uint64_t v333 = v333 + v346 - v347 * v348;
                          ++v344;
                        }
                        while (v344 < v343);
                        int v339 = v76[1];
                      }
                      uint64_t v333 = v333 + v338 - v342 * v343;
                      ++v340;
                    }
                    while (v340 < v339);
                    int v330 = *v76;
                  }
                  uint64_t result = v339;
                  uint64_t v333 = v333 + v337 - v338 * v339;
                  ++v331;
                }
                while (v331 < v330);
              }
              break;
            default:
              uint64_t v295 = v3[6];
              if (v295)
              {
                uint64_t v296 = 0;
                uint64_t v297 = v75[19];
                uint64_t v298 = v3[19];
                uint64_t v299 = ((unint64_t)v77 >> 2) - 1;
                uint64_t v300 = v75[3];
                do
                {
                  uint64_t v301 = 0;
                  if ((v299 & 0x80000000) == 0)
                  {
                    uint64_t v302 = v299;
                    LODWORD(result) = v296;
                    do
                    {
                      ldiv_t v303 = ldiv((int)result, v76[v302]);
                      uint64_t result = v303.quot;
                      v301 += *(void *)&v300[2 * v302--] * v303.rem;
                    }
                    while (v302 != -1);
                  }
                  *(_DWORD *)(v298 + 4 * v296++) = *(float *)&v297[v301];
                }
                while (v296 != v295);
              }
              break;
          }
          break;
        case 3:
          uint64_t v82 = *(unsigned int ***)result;
          uint64_t v84 = **(void **)result;
          uint64_t v83 = *(void *)(*(void *)result + 8);
          unint64_t v85 = v83 - v84;
          switch((v83 - v84) >> 2)
          {
            case 1:
              uint64_t v86 = (v85 << 30) - 0x100000000;
              int v87 = *(_DWORD *)(v84 + (v86 >> 30));
              if (v87 >= 1)
              {
                uint64_t v88 = v86 >> 29;
                uint64_t v89 = *(void *)((char *)v82[3] + v88);
                uint64_t v90 = *(void *)(v3[3] + v88);
                unint64_t v91 = (_DWORD *)v3[19];
                uint64_t v92 = (float *)v82[19];
                uint64_t v93 = 4 * v90;
                uint64_t v94 = 4 * v89;
                do
                {
                  *unint64_t v91 = *v92;
                  unint64_t v91 = (_DWORD *)((char *)v91 + v93);
                  uint64_t v92 = (float *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              uint64_t v814 = (v85 << 30) - 0x200000000;
              int v815 = *(_DWORD *)(v84 + (v814 >> 30));
              if (v815 >= 1)
              {
                uint64_t v816 = 0;
                uint64_t v817 = 0;
                int v818 = 0;
                int v819 = v82[3];
                uint64_t v820 = v814 >> 29;
                uint64_t v821 = *(void *)((char *)v819 + v820);
                uint64_t v822 = v3[3];
                uint64_t v823 = (v85 << 30) - 0x100000000;
                uint64_t v824 = *(void *)((char *)v819 + (v823 >> 29));
                uint64_t v825 = *(void *)(v822 + (v823 >> 29));
                uint64_t v826 = v823 >> 32;
                uint64_t v827 = 4 * *(void *)(v822 + v820);
                uint64_t v828 = 4 * v825;
                uint64_t v829 = 4 * v821;
                uint64_t v830 = 4 * v824;
                do
                {
                  uint64_t result = *(unsigned int *)(v84 + 4 * v826);
                  if ((int)result >= 1)
                  {
                    uint64_t v831 = (_DWORD *)(v3[19] + v817);
                    uint64_t v832 = (float *)((char *)v82[19] + v816);
                    do
                    {
                      *uint64_t v831 = *v832;
                      uint64_t v831 = (_DWORD *)((char *)v831 + v828);
                      uint64_t v832 = (float *)((char *)v832 + v830);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v818;
                  v817 += v827;
                  v816 += v829;
                }
                while (v818 != v815);
              }
              break;
            case 3:
              uint64_t v833 = (v85 << 30) - 0x300000000;
              int v834 = *(_DWORD *)(v84 + (v833 >> 30));
              if (v834 >= 1)
              {
                uint64_t v835 = 0;
                uint64_t v836 = 0;
                int v837 = 0;
                uint64_t v838 = v85 << 30;
                uint64_t v839 = v82[3];
                uint64_t v840 = v833 >> 29;
                uint64_t v841 = *(void *)((char *)v839 + v840);
                uint64_t v842 = v3[3];
                uint64_t v843 = *(void *)(v842 + v840);
                uint64_t v844 = (v838 - 0x200000000) >> 29;
                uint64_t v845 = *(void *)((char *)v839 + v844);
                uint64_t v846 = (v838 - 0x200000000) >> 32;
                uint64_t v847 = (v838 - 0x100000000) >> 32;
                uint64_t v848 = 4 * v843;
                uint64_t v849 = 4 * *(void *)(v842 + v844);
                uint64_t result = 4 * v841;
                uint64_t v850 = 4 * v845;
                do
                {
                  int v851 = *(_DWORD *)(v84 + 4 * v846);
                  if (v851 >= 1)
                  {
                    int v852 = 0;
                    uint64_t v853 = (void *)*a2;
                    uint64_t v854 = 4 * *(void *)(v842 + 8 * v847);
                    uint64_t v855 = 4 * *(void *)&v839[2 * v847];
                    uint64_t v856 = v835;
                    uint64_t v857 = v836;
                    do
                    {
                      int v858 = *(_DWORD *)(v84 + 4 * v847);
                      if (v858 >= 1)
                      {
                        int v859 = (_DWORD *)(v853[19] + v857);
                        uint64_t v860 = (float *)((char *)v82[19] + v856);
                        do
                        {
                          *int v859 = *v860;
                          int v859 = (_DWORD *)((char *)v859 + v854);
                          uint64_t v860 = (float *)((char *)v860 + v855);
                          --v858;
                        }
                        while (v858);
                      }
                      ++v852;
                      v857 += v849;
                      v856 += v850;
                    }
                    while (v852 != v851);
                  }
                  ++v837;
                  v836 += v848;
                  v835 += result;
                }
                while (v837 != v834);
              }
              break;
            case 4:
              uint64_t v861 = (v85 << 30) - 0x400000000;
              int v1574 = *(_DWORD *)(v84 + (v861 >> 30));
              if (v1574 >= 1)
              {
                uint64_t v862 = 0;
                uint64_t v863 = 0;
                int v864 = 0;
                uint64_t v865 = v85 << 30;
                uint64_t v866 = v82[3];
                uint64_t v867 = v861 >> 29;
                uint64_t v868 = v3[3];
                uint64_t v1557 = (v865 - 0x300000000) >> 32;
                uint64_t v869 = (v865 - 0x300000000) >> 29;
                uint64_t v870 = *(void *)((char *)v866 + v869);
                uint64_t v871 = *(void *)(v868 + v869);
                uint64_t v872 = (v865 - 0x200000000) >> 32;
                uint64_t v873 = (v865 - 0x100000000) >> 32;
                uint64_t v1540 = 4 * *(void *)(v868 + v867);
                uint64_t result = 4 * v871;
                uint64_t v1524 = 4 * *(void *)((char *)v866 + v867);
                uint64_t v874 = 4 * v870;
                do
                {
                  int v875 = *(_DWORD *)(v84 + 4 * v1557);
                  if (v875 >= 1)
                  {
                    int v876 = 0;
                    uint64_t v877 = 4 * *(void *)(v868 + 8 * v872);
                    uint64_t v878 = 4 * *(void *)&v866[2 * v872];
                    uint64_t v879 = v862;
                    uint64_t v880 = v863;
                    do
                    {
                      int v881 = *(_DWORD *)(v84 + 4 * v872);
                      if (v881 >= 1)
                      {
                        int v882 = 0;
                        uint64_t v883 = (void *)*a2;
                        uint64_t v884 = 4 * *(void *)(v868 + 8 * v873);
                        uint64_t v885 = 4 * *(void *)&v866[2 * v873];
                        uint64_t v886 = v879;
                        uint64_t v887 = v880;
                        do
                        {
                          int v888 = *(_DWORD *)(v84 + 4 * v873);
                          if (v888 >= 1)
                          {
                            int v889 = (_DWORD *)(v883[19] + v887);
                            uint64_t v890 = (float *)((char *)v82[19] + v886);
                            do
                            {
                              *int v889 = *v890;
                              int v889 = (_DWORD *)((char *)v889 + v884);
                              uint64_t v890 = (float *)((char *)v890 + v885);
                              --v888;
                            }
                            while (v888);
                          }
                          ++v882;
                          v887 += v877;
                          v886 += v878;
                        }
                        while (v882 != v881);
                      }
                      ++v876;
                      v880 += result;
                      v879 += v874;
                    }
                    while (v876 != v875);
                  }
                  ++v864;
                  v863 += v1540;
                  v862 += v1524;
                }
                while (v864 != v1574);
              }
              break;
            case 5:
              uint64_t v891 = (v85 << 30) - 0x500000000;
              int v1482 = *(_DWORD *)(v84 + (v891 >> 30));
              if (v1482 >= 1)
              {
                uint64_t v1502 = 0;
                uint64_t v1512 = 0;
                int v1492 = 0;
                uint64_t v892 = v85 << 30;
                uint64_t v893 = v82[3];
                uint64_t v894 = v891 >> 29;
                uint64_t v895 = v3[3];
                uint64_t v1472 = (v892 - 0x400000000) >> 32;
                uint64_t v896 = (v892 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v893 + v896);
                uint64_t v1558 = (v892 - 0x300000000) >> 32;
                uint64_t v897 = (v892 - 0x200000000) >> 32;
                uint64_t v898 = (v892 - 0x100000000) >> 32;
                uint64_t v1462 = 4 * *(void *)(v895 + v894);
                uint64_t v1541 = 4 * *(void *)(v895 + v896);
                uint64_t v1453 = 4 * *(void *)((char *)v893 + v894);
                uint64_t v1525 = 4 * result;
                do
                {
                  int v1575 = *(_DWORD *)(v84 + 4 * v1472);
                  if (v1575 >= 1)
                  {
                    int v899 = 0;
                    uint64_t v900 = 4 * *(void *)(v895 + 8 * v1558);
                    uint64_t v901 = 4 * *(void *)&v893[2 * v1558];
                    uint64_t v903 = v1502;
                    uint64_t v902 = v1512;
                    do
                    {
                      int v904 = *(_DWORD *)(v84 + 4 * v1558);
                      if (v904 >= 1)
                      {
                        int v905 = 0;
                        uint64_t v906 = 4 * *(void *)(v895 + 8 * v897);
                        uint64_t v907 = 4 * *(void *)&v893[2 * v897];
                        uint64_t v908 = v902;
                        uint64_t v909 = v903;
                        do
                        {
                          int v910 = *(_DWORD *)(v84 + 4 * v897);
                          if (v910 >= 1)
                          {
                            int v911 = 0;
                            uint64_t result = *a2;
                            uint64_t v912 = 4 * *(void *)(v895 + 8 * v898);
                            uint64_t v913 = 4 * *(void *)&v893[2 * v898];
                            uint64_t v914 = v908;
                            uint64_t v915 = v909;
                            do
                            {
                              int v916 = *(_DWORD *)(v84 + 4 * v898);
                              if (v916 >= 1)
                              {
                                int v917 = (_DWORD *)(*(void *)(result + 152) + v915);
                                uint64_t v918 = (float *)((char *)v82[19] + v914);
                                do
                                {
                                  *int v917 = *v918;
                                  int v917 = (_DWORD *)((char *)v917 + v912);
                                  uint64_t v918 = (float *)((char *)v918 + v913);
                                  --v916;
                                }
                                while (v916);
                              }
                              ++v911;
                              v915 += v906;
                              v914 += v907;
                            }
                            while (v911 != v910);
                          }
                          ++v905;
                          v909 += v900;
                          v908 += v901;
                        }
                        while (v905 != v904);
                      }
                      ++v899;
                      v903 += v1541;
                      v902 += v1525;
                    }
                    while (v899 != v1575);
                  }
                  v1502 += v1462;
                  v1512 += v1453;
                  ++v1492;
                }
                while (v1492 != v1482);
              }
              break;
            default:
              LODWORD(v778) = 1;
              uint64_t v779 = -20;
              do
              {
                uint64_t v778 = *(int *)(v83 + v779) * (uint64_t)(int)v778;
                v779 += 4;
              }
              while (v779);
              uint64_t v1436 = v82[6];
              if (v1436)
              {
                uint64_t result = 0;
                uint64_t v1461 = *v3;
                uint64_t v780 = (v85 << 30) - 0x500000000;
                uint64_t v1426 = (v85 >> 2) - 1;
                uint64_t v781 = v82[3];
                uint64_t v1421 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1417 = v780 >> 32;
                uint64_t v782 = v3[3];
                uint64_t v1471 = (uint64_t)((v85 << 30) - 0x400000000) >> 32;
                uint64_t v1556 = (uint64_t)((v85 << 30) - 0x300000000) >> 32;
                uint64_t v783 = (uint64_t)((v85 << 30) - 0x200000000) >> 32;
                uint64_t v784 = (uint64_t)((v85 << 30) - 0x100000000) >> 32;
                uint64_t v1446 = 4 * *(void *)((char *)v781 + (v780 >> 29));
                uint64_t v1452 = 4 * *(void *)(v782 + (v780 >> 29));
                uint64_t v1431 = v778;
                do
                {
                  uint64_t v785 = v1426;
                  uint64_t v1441 = result;
                  uint64_t v786 = 0;
                  if ((v1426 & 0x80000000) != 0)
                  {
                    uint64_t v787 = v1421;
                  }
                  else
                  {
                    uint64_t v787 = v1421;
                    do
                    {
                      ldiv_t v788 = ldiv((int)result, *(int *)(v84 + 4 * v785));
                      LODWORD(result) = v788.quot;
                      v786 += *(void *)&v781[2 * v785--] * v788.rem;
                    }
                    while (v785 != -1);
                  }
                  uint64_t v789 = 0;
                  if ((v787 & 0x80000000) == 0)
                  {
                    int v790 = v1441;
                    do
                    {
                      ldiv_t v791 = ldiv(v790, *(int *)(v1461 + 4 * v787));
                      int v790 = v791.quot;
                      v789 += *(void *)(v782 + 8 * v787--) * v791.rem;
                    }
                    while (v787 != -1);
                  }
                  int v1481 = *(_DWORD *)(v84 + 4 * v1417);
                  if (v1481 >= 1)
                  {
                    int v792 = 0;
                    uint64_t v1511 = 4 * v789;
                    uint64_t v1539 = 4 * *(void *)(v782 + 8 * v1471);
                    uint64_t v1501 = 4 * v786;
                    uint64_t v1523 = 4 * *(void *)&v781[2 * v1471];
                    do
                    {
                      int v1491 = v792;
                      int v1573 = *(_DWORD *)(v84 + 4 * v1471);
                      if (v1573 >= 1)
                      {
                        int v793 = 0;
                        uint64_t v794 = 4 * *(void *)(v782 + 8 * v1556);
                        uint64_t v795 = 4 * *(void *)&v781[2 * v1556];
                        uint64_t v797 = v1501;
                        uint64_t v796 = v1511;
                        do
                        {
                          int v798 = *(_DWORD *)(v84 + 4 * v1556);
                          if (v798 >= 1)
                          {
                            int v799 = 0;
                            uint64_t v800 = 4 * *(void *)(v782 + 8 * v783);
                            uint64_t v801 = 4 * *(void *)&v781[2 * v783];
                            uint64_t v802 = v797;
                            uint64_t v803 = v796;
                            do
                            {
                              int v804 = *(_DWORD *)(v84 + 4 * v783);
                              if (v804 >= 1)
                              {
                                int v805 = 0;
                                uint64_t v806 = (void *)*a2;
                                uint64_t v807 = 4 * *(void *)(v782 + 8 * v784);
                                uint64_t v808 = 4 * *(void *)&v781[2 * v784];
                                uint64_t v809 = v802;
                                uint64_t v810 = v803;
                                do
                                {
                                  int v811 = *(_DWORD *)(v84 + 4 * v784);
                                  if (v811 >= 1)
                                  {
                                    int v812 = (_DWORD *)(v806[19] + v810);
                                    uint64_t v813 = (float *)((char *)v82[19] + v809);
                                    do
                                    {
                                      *int v812 = *v813;
                                      int v812 = (_DWORD *)((char *)v812 + v807);
                                      uint64_t v813 = (float *)((char *)v813 + v808);
                                      --v811;
                                    }
                                    while (v811);
                                  }
                                  ++v805;
                                  v810 += v800;
                                  v809 += v801;
                                }
                                while (v805 != v804);
                              }
                              ++v799;
                              v803 += v794;
                              v802 += v795;
                            }
                            while (v799 != v798);
                          }
                          ++v793;
                          v796 += v1539;
                          v797 += v1523;
                        }
                        while (v793 != v1573);
                      }
                      int v792 = v1491 + 1;
                      v1511 += v1452;
                      v1501 += v1446;
                    }
                    while (v1491 + 1 != v1481);
                  }
                  uint64_t result = v1441 + v1431;
                }
                while ((unint64_t)v1436 > v1441 + v1431);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
LABEL_10:
          break;
        case 1:
          uint64_t v95 = *(void *)(*(void *)result + 160);
          if (v95)
          {
            uint64_t v96 = *(float **)(*(void *)result + 152);
            uint64_t v97 = (unsigned char *)v3[19];
            uint64_t v98 = 4 * v95;
            do
            {
              float v99 = *v96++;
              *v97++ = (int)v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          uint64_t v100 = *(int ***)result;
          uint64_t v101 = **(int ***)result;
          switch(v100[1] - *v100)
          {
            case 1:
              if (*v101 >= 1)
              {
                uint64_t v102 = 0;
                uint64_t v103 = 0;
                uint64_t v104 = v100[19];
                uint64_t v105 = v3[19];
                do
                {
                  *(unsigned char *)(v105 + v102) = (int)*(float *)&v104[v103];
                  v103 += *(void *)v100[3];
                  ++v102;
                }
                while (**v100 > (int)v102);
              }
              break;
            case 2:
              int v360 = *v101;
              if (*v101 >= 1)
              {
                int v361 = 0;
                uint64_t v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = v100[19];
                uint64_t v365 = v3[19];
                do
                {
                  int v366 = v101[1];
                  if (v366 < 1)
                  {
                    int v367 = v100[3];
                    uint64_t v368 = *((void *)v367 + 1);
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v365 + v362 + result) = (int)*(float *)&v364[v363];
                      int v367 = v100[3];
                      uint64_t v368 = *((void *)v367 + 1);
                      v363 += v368;
                      uint64_t v101 = *v100;
                      int v366 = (*v100)[1];
                      ++result;
                    }
                    while ((int)result < v366);
                    int v360 = *v101;
                    v362 += result;
                  }
                  uint64_t v363 = *(void *)v367 + v363 - v368 * v366;
                  ++v361;
                }
                while (v361 < v360);
              }
              break;
            case 3:
              int v369 = *v101;
              if (*v101 >= 1)
              {
                int v370 = 0;
                uint64_t v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = v100[19];
                uint64_t v374 = v3[19];
                do
                {
                  int v375 = v101[1];
                  if (v375 < 1)
                  {
                    uint64_t v379 = v100[3];
                    uint64_t v380 = *((void *)v379 + 1);
                  }
                  else
                  {
                    for (int m = 0; m < v375; ++m)
                    {
                      int v377 = v101[2];
                      if (v377 < 1)
                      {
                        uint64_t v379 = v100[3];
                        uint64_t result = *((void *)v379 + 2);
                      }
                      else
                      {
                        uint64_t v378 = 0;
                        do
                        {
                          *(unsigned char *)(v374 + v371 + v378) = (int)*(float *)&v373[v372];
                          uint64_t v379 = v100[3];
                          uint64_t result = *((void *)v379 + 2);
                          v372 += result;
                          uint64_t v101 = *v100;
                          int v377 = (*v100)[2];
                          ++v378;
                        }
                        while ((int)v378 < v377);
                        v371 += v378;
                      }
                      uint64_t v380 = *((void *)v379 + 1);
                      uint64_t v372 = v380 + v372 - result * v377;
                      int v375 = v101[1];
                    }
                    int v369 = *v101;
                  }
                  uint64_t v372 = *(void *)v379 + v372 - v380 * v375;
                  ++v370;
                }
                while (v370 < v369);
              }
              break;
            case 4:
              int v381 = *v101;
              if (*v101 >= 1)
              {
                int v382 = 0;
                uint64_t v383 = 0;
                uint64_t v384 = 0;
                uint64_t v385 = v100[19];
                uint64_t v386 = v3[19];
                do
                {
                  int v387 = v101[1];
                  if (v387 < 1)
                  {
                    int v393 = v100[3];
                    uint64_t v395 = *((void *)v393 + 1);
                  }
                  else
                  {
                    for (int n = 0; n < v387; ++n)
                    {
                      int v389 = v101[2];
                      if (v389 < 1)
                      {
                        int v393 = v100[3];
                        uint64_t v394 = *((void *)v393 + 2);
                      }
                      else
                      {
                        for (iint i = 0; ii < v389; ++ii)
                        {
                          int v391 = v101[3];
                          if (v391 < 1)
                          {
                            int v393 = v100[3];
                            uint64_t result = *((void *)v393 + 3);
                          }
                          else
                          {
                            uint64_t v392 = 0;
                            do
                            {
                              *(unsigned char *)(v386 + v383 + v392) = (int)*(float *)&v385[v384];
                              int v393 = v100[3];
                              uint64_t result = *((void *)v393 + 3);
                              v384 += result;
                              uint64_t v101 = *v100;
                              int v391 = (*v100)[3];
                              ++v392;
                            }
                            while ((int)v392 < v391);
                            v383 += v392;
                          }
                          uint64_t v394 = *((void *)v393 + 2);
                          uint64_t v384 = v394 + v384 - result * v391;
                          int v389 = v101[2];
                        }
                      }
                      uint64_t v395 = *((void *)v393 + 1);
                      uint64_t v384 = v395 + v384 - v394 * v389;
                      int v387 = v101[1];
                    }
                    int v381 = *v101;
                  }
                  uint64_t v384 = *(void *)v393 + v384 - v395 * v387;
                  ++v382;
                }
                while (v382 < v381);
              }
              break;
            default:
              if (v3[6])
              {
                unint64_t v351 = 0;
                uint64_t v352 = v100[19];
                uint64_t v353 = v3[19];
                do
                {
                  int v354 = *v100;
                  unint64_t v355 = (unint64_t)((char *)v100[1] - (char *)*v100) >> 2;
                  uint64_t v356 = 0;
                  uint64_t v357 = (v355 - 1);
                  if ((int)v355 - 1 >= 0)
                  {
                    uint64_t v358 = v100[3];
                    LODWORD(result) = v351;
                    do
                    {
                      ldiv_t v359 = ldiv((int)result, v354[v357]);
                      uint64_t result = v359.quot;
                      v356 += *(void *)&v358[2 * v357--] * v359.rem;
                    }
                    while (v357 != -1);
                  }
                  *(unsigned char *)(v353 + v351++) = (int)*(float *)&v352[v356];
                }
                while (v351 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v106 = *(int ***)result;
          uint64_t v107 = (uint64_t *)(*(void *)result + 24);
          uint64_t v108 = v3 + 3;
          uint64_t v110 = **(void **)result;
          uint64_t v109 = *(void *)(*(void *)result + 8);
          uint64_t v111 = v109 - v110;
          switch((v109 - v110) >> 2)
          {
            case 1:
              uint64_t v112 = (v111 << 30) - 0x100000000;
              int v113 = *(_DWORD *)(v110 + (v112 >> 30));
              if (v113 >= 1)
              {
                uint64_t v114 = v112 >> 29;
                uint64_t v115 = *(void *)(*v107 + v114);
                uint64_t v116 = *(void *)(*v108 + v114);
                uint64_t v117 = (unsigned char *)v3[19];
                uint64_t v118 = (float *)v106[19];
                uint64_t v119 = 4 * v115;
                do
                {
                  *uint64_t v117 = (int)*v118;
                  v117 += v116;
                  uint64_t v118 = (float *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              uint64_t v940 = (v111 << 30) - 0x200000000;
              int v941 = *(_DWORD *)(v110 + (v940 >> 30));
              if (v941 >= 1)
              {
                uint64_t v942 = 0;
                int v943 = 0;
                uint64_t v944 = 0;
                uint64_t v945 = v940 >> 29;
                uint64_t v946 = *(void *)(*v107 + v945);
                uint64_t v947 = *(void *)(*v108 + v945);
                uint64_t v948 = 4 * v946;
                do
                {
                  uint64_t result = *(void *)v5;
                  uint64_t v949 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                  int v950 = *(int *)((char *)*v106 + (v949 >> 30));
                  if (v950 >= 1)
                  {
                    uint64_t v951 = v949 >> 29;
                    uint64_t v952 = *(void *)((char *)v106[3] + v951);
                    uint64_t v953 = *(void *)(*v108 + v951);
                    uint64_t v954 = *(void *)(*a2 + 152);
                    uint64_t result = *(void *)(result + 152) + v942;
                    uint64_t v955 = 4 * v952;
                    do
                    {
                      *(unsigned char *)(v954 + v944) = (int)*(float *)result;
                      v954 += v953;
                      result += v955;
                      --v950;
                    }
                    while (v950);
                  }
                  v944 += v947;
                  ++v943;
                  v942 += v948;
                }
                while (v943 != v941);
              }
              break;
            case 3:
              uint64_t v956 = (v111 << 30) - 0x300000000;
              int v957 = *(_DWORD *)(v110 + (v956 >> 30));
              if (v957 >= 1)
              {
                uint64_t v958 = 0;
                int v959 = 0;
                uint64_t v960 = 0;
                uint64_t v961 = v956 >> 29;
                uint64_t v962 = *(void *)(*v107 + v961);
                uint64_t v963 = *(void *)(*v108 + v961);
                uint64_t v964 = 4 * v962;
                do
                {
                  uint64_t result = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x200000000;
                  int v965 = *(int *)((char *)*v106 + (result >> 30));
                  if (v965 >= 1)
                  {
                    int v966 = 0;
                    uint64_t v967 = result >> 29;
                    uint64_t v968 = *(void *)((char *)v106[3] + v967);
                    uint64_t result = *(void *)(*v108 + v967);
                    uint64_t v969 = 4 * v968;
                    uint64_t v970 = v958;
                    uint64_t v971 = v960;
                    do
                    {
                      uint64_t v972 = ((*(void *)(*(void *)v5 + 8) - **(void **)v5) << 30) - 0x100000000;
                      int v973 = *(int *)((char *)*v106 + (v972 >> 30));
                      if (v973 >= 1)
                      {
                        uint64_t v974 = v972 >> 29;
                        uint64_t v975 = *(void *)((char *)v106[3] + v974);
                        uint64_t v976 = *(void *)(*v108 + v974);
                        uint64_t v977 = *(void *)(*a2 + 152);
                        uint64_t v978 = (float *)(*(void *)(*(void *)v5 + 152) + v970);
                        uint64_t v979 = 4 * v975;
                        do
                        {
                          *(unsigned char *)(v977 + v971) = (int)*v978;
                          v977 += v976;
                          uint64_t v978 = (float *)((char *)v978 + v979);
                          --v973;
                        }
                        while (v973);
                      }
                      v971 += result;
                      ++v966;
                      v970 += v969;
                    }
                    while (v966 != v965);
                  }
                  v960 += v963;
                  ++v959;
                  v958 += v964;
                }
                while (v959 != v957);
              }
              break;
            case 4:
              uint64_t v768 = *(int ***)result;
              uint64_t v769 = (void *)(*(void *)result + 24);
              uint64_t v770 = v3 + 3;
LABEL_565:
              break;
            case 5:
              uint64_t v980 = (v111 << 30) - 0x500000000;
              int v981 = *(_DWORD *)(v110 + (v980 >> 30));
              if (v981 >= 1)
              {
                uint64_t v982 = 0;
                uint64_t v983 = 0;
                uint64_t v984 = v980 >> 29;
                uint64_t v985 = *(void *)(*v107 + v984);
                uint64_t v986 = *(void *)(*v108 + v984);
                do
                {
                  v982 += v985;
                  v983 += v986;
                  --v981;
                }
                while (v981);
              }
              break;
            default:
              LODWORD(v919) = 1;
              uint64_t v920 = -20;
              do
              {
                uint64_t v919 = *(int *)(v109 + v920) * (uint64_t)(int)v919;
                v920 += 4;
              }
              while (v920);
              if (v106[6])
              {
                uint64_t result = 0;
                uint64_t v921 = *(void **)v5;
                uint64_t v1559 = v108;
                uint64_t v1526 = v919;
                do
                {
                  int v922 = *v106;
                  unint64_t v923 = (unint64_t)((char *)v106[1] - (char *)*v106) >> 2;
                  uint64_t v924 = (v923 - 1);
                  uint64_t v1576 = result;
                  uint64_t v1542 = v921;
                  uint64_t v925 = 0;
                  if ((int)v923 - 1 >= 0)
                  {
                    uint64_t v926 = *v107;
                    do
                    {
                      ldiv_t v927 = ldiv((int)result, v922[v924]);
                      LODWORD(result) = v927.quot;
                      v925 += *(void *)(v926 + 8 * v924--) * v927.rem;
                    }
                    while (v924 != -1);
                  }
                  uint64_t v928 = *(void *)*a2;
                  unint64_t v929 = (unint64_t)(*(void *)(*a2 + 8) - v928) >> 2;
                  uint64_t v930 = *v1559;
                  uint64_t v931 = 0;
                  uint64_t v932 = (v929 - 1);
                  if ((int)v929 - 1 >= 0)
                  {
                    int v933 = v1576;
                    do
                    {
                      ldiv_t v934 = ldiv(v933, *(int *)(v928 + 4 * v932));
                      int v933 = v934.quot;
                      v931 += *(void *)(v930 + 8 * v932--) * v934.rem;
                    }
                    while (v932 != -1);
                  }
                  uint64_t v921 = v1542;
                  uint64_t v935 = ((v921[1] - *v921) << 30) - 0x500000000;
                  int v936 = *(int *)((char *)v922 + (v935 >> 30));
                  if (v936 >= 1)
                  {
                    uint64_t v937 = v935 >> 29;
                    uint64_t v938 = *(void *)(*v107 + v937);
                    uint64_t v939 = *(void *)(v930 + v937);
                    do
                    {
                      v925 += v938;
                      v931 += v939;
                      --v936;
                    }
                    while (v936);
                    uint64_t v921 = *(void **)v5;
                  }
                  uint64_t result = v1576 + v1526;
                }
                while (v921[6] > (unint64_t)(v1576 + v1526));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v12 = v3[6];
          if (v12)
          {
            int v13 = (int)**(float **)(*(void *)result + 152);
            int v14 = (int *)v3[19];
            do
            {
              *v14++ = v13;
              --v12;
            }
            while (v12);
          }
          break;
        case 1:
          uint64_t v120 = *(void *)(*(void *)result + 160);
          if (v120)
          {
            uint64_t v121 = *(float **)(*(void *)result + 152);
            uint64_t v122 = (_DWORD *)v3[19];
            uint64_t v123 = 4 * v120;
            do
            {
              float v124 = *v121++;
              *v122++ = (int)v124;
              v123 -= 4;
            }
            while (v123);
          }
          break;
        case 2:
          uint64_t v125 = *(int ***)result;
          uint64_t v126 = **(int ***)result;
          uint64_t v127 = *(void *)(*(void *)result + 8) - (void)v126;
          switch(v127 >> 2)
          {
            case 1:
              if (*v126 >= 1)
              {
                uint64_t v128 = 0;
                uint64_t v129 = (float *)v125[19];
                uint64_t v130 = v3[19];
                uint64_t v131 = 4 * *(void *)v125[3];
                do
                {
                  *(_DWORD *)(v130 + 4 * v128) = (int)*v129;
                  uint64_t v129 = (float *)((char *)v129 + v131);
                  ++v128;
                }
                while (*v126 > (int)v128);
              }
              break;
            case 2:
              int v405 = *v126;
              if (*v126 >= 1)
              {
                int v406 = 0;
                uint64_t v407 = 0;
                uint64_t v408 = 0;
                uint64_t v409 = v125[19];
                uint64_t v410 = v3[19];
                int v411 = v125[3];
                uint64_t v412 = *(void *)v411;
                uint64_t v413 = *((void *)v411 + 1);
                int v414 = v126[1];
                do
                {
                  if (v414 >= 1)
                  {
                    uint64_t v415 = 0;
                    do
                    {
                      *(_DWORD *)(v410 + 4 * v407 + 4 * v415) = (int)*(float *)&v409[v408];
                      v408 += v413;
                      int v414 = v126[1];
                      ++v415;
                    }
                    while ((int)v415 < v414);
                    int v405 = *v126;
                    v407 += v415;
                  }
                  uint64_t v408 = v408 + v412 - v413 * v414;
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            case 3:
              uint64_t result = *v126;
              if ((int)result >= 1)
              {
                int v416 = 0;
                uint64_t v417 = 0;
                uint64_t v418 = 0;
                uint64_t v419 = v125[19];
                uint64_t v420 = v3[19];
                uint64_t v421 = v125[3];
                uint64_t v422 = *(void *)v421;
                uint64_t v423 = *((void *)v421 + 1);
                int v424 = v126[1];
                do
                {
                  if (v424 >= 1)
                  {
                    int v425 = 0;
                    uint64_t v426 = v125[3];
                    uint64_t v427 = *((void *)v421 + 2);
                    int v428 = v126[2];
                    do
                    {
                      if (v428 >= 1)
                      {
                        uint64_t v429 = 0;
                        uint64_t v430 = *((void *)v426 + 2);
                        do
                        {
                          *(_DWORD *)(v420 + 4 * v417 + 4 * v429) = (int)*(float *)&v419[v418];
                          v418 += v430;
                          int v428 = v126[2];
                          ++v429;
                        }
                        while ((int)v429 < v428);
                        int v424 = v126[1];
                        v417 += v429;
                      }
                      uint64_t v418 = v418 + v423 - v427 * v428;
                      ++v425;
                    }
                    while (v425 < v424);
                    uint64_t result = *v126;
                  }
                  uint64_t v418 = v418 + v422 - v423 * v424;
                  ++v416;
                }
                while (v416 < (int)result);
              }
              break;
            case 4:
              int v431 = *v126;
              if (*v126 >= 1)
              {
                int v432 = 0;
                uint64_t v433 = 0;
                uint64_t v434 = 0;
                uint64_t v435 = v125[19];
                uint64_t v436 = v3[19];
                int v437 = v125[3];
                uint64_t v438 = *(void *)v437;
                uint64_t v439 = *((void *)v437 + 1);
                int v440 = v126[1];
                do
                {
                  if (v440 >= 1)
                  {
                    int v441 = 0;
                    uint64_t v442 = v125[3];
                    uint64_t v443 = *((void *)v437 + 2);
                    int v444 = v126[2];
                    do
                    {
                      if (v444 >= 1)
                      {
                        int v445 = 0;
                        int v446 = v125[3];
                        uint64_t v447 = *((void *)v442 + 2);
                        uint64_t v448 = *((void *)v442 + 3);
                        int v449 = v126[3];
                        do
                        {
                          if (v449 >= 1)
                          {
                            uint64_t v450 = 0;
                            uint64_t v451 = *((void *)v446 + 3);
                            do
                            {
                              *(_DWORD *)(v436 + 4 * v433 + 4 * v450) = (int)*(float *)&v435[v434];
                              v434 += v451;
                              int v449 = v126[3];
                              ++v450;
                            }
                            while ((int)v450 < v449);
                            int v444 = v126[2];
                            v433 += v450;
                          }
                          uint64_t v434 = v434 + v447 - v448 * v449;
                          ++v445;
                        }
                        while (v445 < v444);
                        int v440 = v126[1];
                      }
                      uint64_t v434 = v434 + v439 - v443 * v444;
                      ++v441;
                    }
                    while (v441 < v440);
                    int v431 = *v126;
                  }
                  uint64_t result = v440;
                  uint64_t v434 = v434 + v438 - v439 * v440;
                  ++v432;
                }
                while (v432 < v431);
              }
              break;
            default:
              uint64_t v396 = v3[6];
              if (v396)
              {
                uint64_t v397 = 0;
                uint64_t v398 = v125[19];
                uint64_t v399 = v3[19];
                uint64_t v400 = ((unint64_t)v127 >> 2) - 1;
                uint64_t v401 = v125[3];
                do
                {
                  uint64_t v402 = 0;
                  if ((v400 & 0x80000000) == 0)
                  {
                    uint64_t v403 = v400;
                    LODWORD(result) = v397;
                    do
                    {
                      ldiv_t v404 = ldiv((int)result, v126[v403]);
                      uint64_t result = v404.quot;
                      v402 += *(void *)&v401[2 * v403--] * v404.rem;
                    }
                    while (v403 != -1);
                  }
                  *(_DWORD *)(v399 + 4 * v397++) = (int)*(float *)&v398[v402];
                }
                while (v397 != v396);
              }
              break;
          }
          break;
        case 3:
          uint64_t v132 = *(unsigned int ***)result;
          uint64_t v134 = **(void **)result;
          uint64_t v133 = *(void *)(*(void *)result + 8);
          unint64_t v135 = v133 - v134;
          switch((v133 - v134) >> 2)
          {
            case 1:
              uint64_t v136 = (v135 << 30) - 0x100000000;
              int v137 = *(_DWORD *)(v134 + (v136 >> 30));
              if (v137 >= 1)
              {
                uint64_t v138 = v136 >> 29;
                uint64_t v139 = *(void *)((char *)v132[3] + v138);
                uint64_t v140 = *(void *)(v3[3] + v138);
                unint64_t v141 = (_DWORD *)v3[19];
                uint64_t v142 = (float *)v132[19];
                uint64_t v143 = 4 * v140;
                uint64_t v144 = 4 * v139;
                do
                {
                  *unint64_t v141 = (int)*v142;
                  unint64_t v141 = (_DWORD *)((char *)v141 + v143);
                  uint64_t v142 = (float *)((char *)v142 + v144);
                  --v137;
                }
                while (v137);
              }
              break;
            case 2:
              uint64_t v1023 = (v135 << 30) - 0x200000000;
              int v1024 = *(_DWORD *)(v134 + (v1023 >> 30));
              if (v1024 >= 1)
              {
                uint64_t v1025 = 0;
                uint64_t v1026 = 0;
                int v1027 = 0;
                int v1028 = v132[3];
                uint64_t v1029 = v1023 >> 29;
                uint64_t v1030 = *(void *)((char *)v1028 + v1029);
                uint64_t v1031 = v3[3];
                uint64_t v1032 = (v135 << 30) - 0x100000000;
                uint64_t v1033 = *(void *)((char *)v1028 + (v1032 >> 29));
                uint64_t v1034 = *(void *)(v1031 + (v1032 >> 29));
                uint64_t v1035 = v1032 >> 32;
                uint64_t v1036 = 4 * *(void *)(v1031 + v1029);
                uint64_t v1037 = 4 * v1034;
                uint64_t v1038 = 4 * v1030;
                uint64_t v1039 = 4 * v1033;
                do
                {
                  uint64_t result = *(unsigned int *)(v134 + 4 * v1035);
                  if ((int)result >= 1)
                  {
                    uint64_t v1040 = (_DWORD *)(v3[19] + v1026);
                    uint64_t v1041 = (float *)((char *)v132[19] + v1025);
                    do
                    {
                      _DWORD *v1040 = (int)*v1041;
                      uint64_t v1040 = (_DWORD *)((char *)v1040 + v1037);
                      uint64_t v1041 = (float *)((char *)v1041 + v1039);
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  ++v1027;
                  v1026 += v1036;
                  v1025 += v1038;
                }
                while (v1027 != v1024);
              }
              break;
            case 3:
              uint64_t v1042 = (v135 << 30) - 0x300000000;
              int v1043 = *(_DWORD *)(v134 + (v1042 >> 30));
              if (v1043 >= 1)
              {
                uint64_t v1044 = 0;
                uint64_t v1045 = 0;
                int v1046 = 0;
                uint64_t v1047 = v135 << 30;
                uint64_t v1048 = v132[3];
                uint64_t v1049 = v1042 >> 29;
                uint64_t v1050 = *(void *)((char *)v1048 + v1049);
                uint64_t v1051 = v3[3];
                uint64_t v1052 = *(void *)(v1051 + v1049);
                uint64_t v1053 = (v1047 - 0x200000000) >> 29;
                uint64_t v1054 = *(void *)((char *)v1048 + v1053);
                uint64_t v1055 = (v1047 - 0x200000000) >> 32;
                uint64_t v1056 = (v1047 - 0x100000000) >> 32;
                uint64_t v1057 = 4 * v1052;
                uint64_t v1058 = 4 * *(void *)(v1051 + v1053);
                uint64_t result = 4 * v1050;
                uint64_t v1059 = 4 * v1054;
                do
                {
                  int v1060 = *(_DWORD *)(v134 + 4 * v1055);
                  if (v1060 >= 1)
                  {
                    int v1061 = 0;
                    uint64_t v1062 = (void *)*a2;
                    uint64_t v1063 = 4 * *(void *)(v1051 + 8 * v1056);
                    uint64_t v1064 = 4 * *(void *)&v1048[2 * v1056];
                    uint64_t v1065 = v1044;
                    uint64_t v1066 = v1045;
                    do
                    {
                      int v1067 = *(_DWORD *)(v134 + 4 * v1056);
                      if (v1067 >= 1)
                      {
                        int v1068 = (_DWORD *)(v1062[19] + v1066);
                        uint64_t v1069 = (float *)((char *)v132[19] + v1065);
                        do
                        {
                          *int v1068 = (int)*v1069;
                          int v1068 = (_DWORD *)((char *)v1068 + v1063);
                          uint64_t v1069 = (float *)((char *)v1069 + v1064);
                          --v1067;
                        }
                        while (v1067);
                      }
                      ++v1061;
                      v1066 += v1058;
                      v1065 += v1059;
                    }
                    while (v1061 != v1060);
                  }
                  ++v1046;
                  v1045 += v1057;
                  v1044 += result;
                }
                while (v1046 != v1043);
              }
              break;
            case 4:
              uint64_t v1070 = (v135 << 30) - 0x400000000;
              int v1578 = *(_DWORD *)(v134 + (v1070 >> 30));
              if (v1578 >= 1)
              {
                uint64_t v1071 = 0;
                uint64_t v1072 = 0;
                int v1073 = 0;
                uint64_t v1074 = v135 << 30;
                uint64_t v1075 = v132[3];
                uint64_t v1076 = v1070 >> 29;
                uint64_t v1077 = v3[3];
                uint64_t v1561 = (v1074 - 0x300000000) >> 32;
                uint64_t v1078 = (v1074 - 0x300000000) >> 29;
                uint64_t v1079 = *(void *)((char *)v1075 + v1078);
                uint64_t v1080 = *(void *)(v1077 + v1078);
                uint64_t v1081 = (v1074 - 0x200000000) >> 32;
                uint64_t v1082 = (v1074 - 0x100000000) >> 32;
                uint64_t v1544 = 4 * *(void *)(v1077 + v1076);
                uint64_t result = 4 * v1080;
                uint64_t v1528 = 4 * *(void *)((char *)v1075 + v1076);
                uint64_t v1083 = 4 * v1079;
                do
                {
                  int v1084 = *(_DWORD *)(v134 + 4 * v1561);
                  if (v1084 >= 1)
                  {
                    int v1085 = 0;
                    uint64_t v1086 = 4 * *(void *)(v1077 + 8 * v1081);
                    uint64_t v1087 = 4 * *(void *)&v1075[2 * v1081];
                    uint64_t v1088 = v1071;
                    uint64_t v1089 = v1072;
                    do
                    {
                      int v1090 = *(_DWORD *)(v134 + 4 * v1081);
                      if (v1090 >= 1)
                      {
                        int v1091 = 0;
                        uint64_t v1092 = (void *)*a2;
                        uint64_t v1093 = 4 * *(void *)(v1077 + 8 * v1082);
                        uint64_t v1094 = 4 * *(void *)&v1075[2 * v1082];
                        uint64_t v1095 = v1088;
                        uint64_t v1096 = v1089;
                        do
                        {
                          int v1097 = *(_DWORD *)(v134 + 4 * v1082);
                          if (v1097 >= 1)
                          {
                            int v1098 = (_DWORD *)(v1092[19] + v1096);
                            uint64_t v1099 = (float *)((char *)v132[19] + v1095);
                            do
                            {
                              *int v1098 = (int)*v1099;
                              int v1098 = (_DWORD *)((char *)v1098 + v1093);
                              uint64_t v1099 = (float *)((char *)v1099 + v1094);
                              --v1097;
                            }
                            while (v1097);
                          }
                          ++v1091;
                          v1096 += v1086;
                          v1095 += v1087;
                        }
                        while (v1091 != v1090);
                      }
                      ++v1085;
                      v1089 += result;
                      v1088 += v1083;
                    }
                    while (v1085 != v1084);
                  }
                  ++v1073;
                  v1072 += v1544;
                  v1071 += v1528;
                }
                while (v1073 != v1578);
              }
              break;
            case 5:
              uint64_t v1100 = (v135 << 30) - 0x500000000;
              int v1484 = *(_DWORD *)(v134 + (v1100 >> 30));
              if (v1484 >= 1)
              {
                uint64_t v1504 = 0;
                uint64_t v1514 = 0;
                int v1494 = 0;
                uint64_t v1101 = v135 << 30;
                uint64_t v1102 = v132[3];
                uint64_t v1103 = v1100 >> 29;
                uint64_t v1104 = v3[3];
                uint64_t v1474 = (v1101 - 0x400000000) >> 32;
                uint64_t v1105 = (v1101 - 0x400000000) >> 29;
                uint64_t result = *(void *)((char *)v1102 + v1105);
                uint64_t v1562 = (v1101 - 0x300000000) >> 32;
                uint64_t v1106 = (v1101 - 0x200000000) >> 32;
                uint64_t v1107 = (v1101 - 0x100000000) >> 32;
                uint64_t v1464 = 4 * *(void *)(v1104 + v1103);
                uint64_t v1545 = 4 * *(void *)(v1104 + v1105);
                uint64_t v1455 = 4 * *(void *)((char *)v1102 + v1103);
                uint64_t v1529 = 4 * result;
                do
                {
                  int v1579 = *(_DWORD *)(v134 + 4 * v1474);
                  if (v1579 >= 1)
                  {
                    int v1108 = 0;
                    uint64_t v1109 = 4 * *(void *)(v1104 + 8 * v1562);
                    uint64_t v1110 = 4 * *(void *)&v1102[2 * v1562];
                    uint64_t v1112 = v1504;
                    uint64_t v1111 = v1514;
                    do
                    {
                      int v1113 = *(_DWORD *)(v134 + 4 * v1562);
                      if (v1113 >= 1)
                      {
                        int v1114 = 0;
                        uint64_t v1115 = 4 * *(void *)(v1104 + 8 * v1106);
                        uint64_t v1116 = 4 * *(void *)&v1102[2 * v1106];
                        uint64_t v1117 = v1111;
                        uint64_t v1118 = v1112;
                        do
                        {
                          int v1119 = *(_DWORD *)(v134 + 4 * v1106);
                          if (v1119 >= 1)
                          {
                            int v1120 = 0;
                            uint64_t result = *a2;
                            uint64_t v1121 = 4 * *(void *)(v1104 + 8 * v1107);
                            uint64_t v1122 = 4 * *(void *)&v1102[2 * v1107];
                            uint64_t v1123 = v1117;
                            uint64_t v1124 = v1118;
                            do
                            {
                              int v1125 = *(_DWORD *)(v134 + 4 * v1107);
                              if (v1125 >= 1)
                              {
                                int v1126 = (_DWORD *)(*(void *)(result + 152) + v1124);
                                uint64_t v1127 = (float *)((char *)v132[19] + v1123);
                                do
                                {
                                  *int v1126 = (int)*v1127;
                                  int v1126 = (_DWORD *)((char *)v1126 + v1121);
                                  uint64_t v1127 = (float *)((char *)v1127 + v1122);
                                  --v1125;
                                }
                                while (v1125);
                              }
                              ++v1120;
                              v1124 += v1115;
                              v1123 += v1116;
                            }
                            while (v1120 != v1119);
                          }
                          ++v1114;
                          v1118 += v1109;
                          v1117 += v1110;
                        }
                        while (v1114 != v1113);
                      }
                      ++v1108;
                      v1112 += v1545;
                      v1111 += v1529;
                    }
                    while (v1108 != v1579);
                  }
                  v1504 += v1464;
                  v1514 += v1455;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              LODWORD(v987) = 1;
              uint64_t v988 = -20;
              do
              {
                uint64_t v987 = *(int *)(v133 + v988) * (uint64_t)(int)v987;
                v988 += 4;
              }
              while (v988);
              uint64_t v1437 = v132[6];
              if (v1437)
              {
                uint64_t result = 0;
                uint64_t v1463 = *v3;
                uint64_t v989 = (v135 << 30) - 0x500000000;
                uint64_t v1427 = (v135 >> 2) - 1;
                uint64_t v990 = v132[3];
                uint64_t v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1418 = v989 >> 32;
                uint64_t v991 = v3[3];
                uint64_t v1473 = (uint64_t)((v135 << 30) - 0x400000000) >> 32;
                uint64_t v1560 = (uint64_t)((v135 << 30) - 0x300000000) >> 32;
                uint64_t v992 = (uint64_t)((v135 << 30) - 0x200000000) >> 32;
                uint64_t v993 = (uint64_t)((v135 << 30) - 0x100000000) >> 32;
                uint64_t v1447 = 4 * *(void *)((char *)v990 + (v989 >> 29));
                uint64_t v1454 = 4 * *(void *)(v991 + (v989 >> 29));
                uint64_t v1432 = v987;
                do
                {
                  uint64_t v994 = v1427;
                  uint64_t v1442 = result;
                  uint64_t v995 = 0;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    uint64_t v996 = v1422;
                  }
                  else
                  {
                    uint64_t v996 = v1422;
                    do
                    {
                      ldiv_t v997 = ldiv((int)result, *(int *)(v134 + 4 * v994));
                      LODWORD(result) = v997.quot;
                      v995 += *(void *)&v990[2 * v994--] * v997.rem;
                    }
                    while (v994 != -1);
                  }
                  uint64_t v998 = 0;
                  if ((v996 & 0x80000000) == 0)
                  {
                    int v999 = v1442;
                    do
                    {
                      ldiv_t v1000 = ldiv(v999, *(int *)(v1463 + 4 * v996));
                      int v999 = v1000.quot;
                      v998 += *(void *)(v991 + 8 * v996--) * v1000.rem;
                    }
                    while (v996 != -1);
                  }
                  int v1483 = *(_DWORD *)(v134 + 4 * v1418);
                  if (v1483 >= 1)
                  {
                    int v1001 = 0;
                    uint64_t v1513 = 4 * v998;
                    uint64_t v1543 = 4 * *(void *)(v991 + 8 * v1473);
                    uint64_t v1503 = 4 * v995;
                    uint64_t v1527 = 4 * *(void *)&v990[2 * v1473];
                    do
                    {
                      int v1493 = v1001;
                      int v1577 = *(_DWORD *)(v134 + 4 * v1473);
                      if (v1577 >= 1)
                      {
                        int v1002 = 0;
                        uint64_t v1003 = 4 * *(void *)(v991 + 8 * v1560);
                        uint64_t v1004 = 4 * *(void *)&v990[2 * v1560];
                        uint64_t v1006 = v1503;
                        uint64_t v1005 = v1513;
                        do
                        {
                          int v1007 = *(_DWORD *)(v134 + 4 * v1560);
                          if (v1007 >= 1)
                          {
                            int v1008 = 0;
                            uint64_t v1009 = 4 * *(void *)(v991 + 8 * v992);
                            uint64_t v1010 = 4 * *(void *)&v990[2 * v992];
                            uint64_t v1011 = v1006;
                            uint64_t v1012 = v1005;
                            do
                            {
                              int v1013 = *(_DWORD *)(v134 + 4 * v992);
                              if (v1013 >= 1)
                              {
                                int v1014 = 0;
                                uint64_t v1015 = (void *)*a2;
                                uint64_t v1016 = 4 * *(void *)(v991 + 8 * v993);
                                uint64_t v1017 = 4 * *(void *)&v990[2 * v993];
                                uint64_t v1018 = v1011;
                                uint64_t v1019 = v1012;
                                do
                                {
                                  int v1020 = *(_DWORD *)(v134 + 4 * v993);
                                  if (v1020 >= 1)
                                  {
                                    int v1021 = (_DWORD *)(v1015[19] + v1019);
                                    uint64_t v1022 = (float *)((char *)v132[19] + v1018);
                                    do
                                    {
                                      *int v1021 = (int)*v1022;
                                      int v1021 = (_DWORD *)((char *)v1021 + v1016);
                                      uint64_t v1022 = (float *)((char *)v1022 + v1017);
                                      --v1020;
                                    }
                                    while (v1020);
                                  }
                                  ++v1014;
                                  v1019 += v1009;
                                  v1018 += v1010;
                                }
                                while (v1014 != v1013);
                              }
                              ++v1008;
                              v1012 += v1003;
                              v1011 += v1004;
                            }
                            while (v1008 != v1007);
                          }
                          ++v1002;
                          v1005 += v1543;
                          v1006 += v1527;
                        }
                        while (v1002 != v1577);
                      }
                      int v1001 = v1493 + 1;
                      v1513 += v1454;
                      v1503 += v1447;
                    }
                    while (v1493 + 1 != v1483);
                  }
                  uint64_t result = v1442 + v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v15 = v3[6];
          if (v15)
          {
            float v16 = **(float **)(*(void *)result + 152);
            uint64_t v17 = (void *)v3[19];
            do
            {
              *v17++ = (uint64_t)v16;
              --v15;
            }
            while (v15);
          }
          break;
        case 1:
          uint64_t v145 = *(void *)(*(void *)result + 160);
          if (v145)
          {
            uint64_t v146 = *(float **)(*(void *)result + 152);
            uint64_t v147 = (void *)v3[19];
            uint64_t v148 = 4 * v145;
            do
            {
              float v149 = *v146++;
              *v147++ = (uint64_t)v149;
              v148 -= 4;
            }
            while (v148);
          }
          break;
        case 2:
          uint64_t v150 = *(int ***)result;
          uint64_t v151 = **(int ***)result;
          uint64_t v152 = *(void *)(*(void *)result + 8) - (void)v151;
          switch(v152 >> 2)
          {
            case 1:
              uint64_t v153 = *v151;
              if ((int)v153 >= 1)
              {
                uint64_t v154 = (float *)v150[19];
                uint64_t v155 = (void *)v3[19];
                uint64_t v156 = 4 * *(void *)v150[3];
                do
                {
                  *v155++ = (uint64_t)*v154;
                  uint64_t v154 = (float *)((char *)v154 + v156);
                  --v153;
                }
                while (v153);
              }
              break;
            case 2:
              int v461 = *v151;
              if (*v151 >= 1)
              {
                int v462 = 0;
                uint64_t v463 = 0;
                uint64_t v464 = 0;
                uint64_t v465 = v150[19];
                uint64_t v466 = v3[19];
                uint64_t v467 = v151[1];
                int v468 = v150[3];
                uint64_t v470 = *(void *)v468;
                uint64_t v469 = *((void *)v468 + 1);
                uint64_t v471 = v470 - v469 * v467;
                do
                {
                  int v472 = v467;
                  if ((int)v467 >= 1)
                  {
                    do
                    {
                      uint64_t result = (uint64_t)*(float *)&v465[v464];
                      *(void *)(v466 + 8 * v463++) = result;
                      v464 += v469;
                      --v472;
                    }
                    while (v472);
                  }
                  v464 += v471;
                  ++v462;
                }
                while (v462 != v461);
              }
              break;
            case 3:
              int v473 = *v151;
              if (*v151 >= 1)
              {
                int v474 = 0;
                uint64_t result = 0;
                uint64_t v475 = 0;
                uint64_t v476 = v150[19];
                uint64_t v477 = v3[19];
                uint64_t v478 = v151[1];
                int v479 = v150[3];
                uint64_t v480 = *((void *)v479 + 1);
                uint64_t v481 = *(void *)v479 - v480 * v478;
                do
                {
                  if ((int)v478 < 1)
                  {
                    uint64_t v488 = result;
                  }
                  else
                  {
                    int v482 = 0;
                    uint64_t v483 = v151[2];
                    uint64_t v484 = v150[3];
                    uint64_t v485 = v480 - *((void *)v479 + 2) * v483;
                    do
                    {
                      if ((int)v483 < 1)
                      {
                        uint64_t v488 = result;
                      }
                      else
                      {
                        uint64_t v486 = *((void *)v484 + 2);
                        int v487 = v483;
                        do
                        {
                          uint64_t v488 = result + 1;
                          *(void *)(v477 + 8 * result) = (uint64_t)*(float *)&v476[v475];
                          v475 += v486;
                          ++result;
                          --v487;
                        }
                        while (v487);
                      }
                      v475 += v485;
                      ++v482;
                      uint64_t result = v488;
                    }
                    while (v482 != v478);
                  }
                  v475 += v481;
                  ++v474;
                  uint64_t result = v488;
                }
                while (v474 != v473);
              }
              break;
            case 4:
              int v489 = *v151;
              if (*v151 >= 1)
              {
                int v490 = 0;
                uint64_t result = 0;
                uint64_t v491 = 0;
                uint64_t v492 = v150[19];
                uint64_t v493 = v3[19];
                uint64_t v494 = v151[1];
                int v495 = v150[3];
                uint64_t v496 = *((void *)v495 + 1);
                uint64_t v497 = *(void *)v495 - v496 * v494;
                do
                {
                  if ((int)v494 < 1)
                  {
                    uint64_t v508 = result;
                  }
                  else
                  {
                    int v498 = 0;
                    uint64_t v499 = v151[2];
                    uint64_t v500 = v150[3];
                    uint64_t v501 = v496 - *((void *)v495 + 2) * v499;
                    do
                    {
                      if ((int)v499 < 1)
                      {
                        uint64_t v508 = result;
                      }
                      else
                      {
                        int v502 = 0;
                        uint64_t v503 = v151[3];
                        int v504 = v150[3];
                        uint64_t v505 = *((void *)v500 + 2) - *((void *)v500 + 3) * v503;
                        do
                        {
                          if ((int)v503 < 1)
                          {
                            uint64_t v508 = result;
                          }
                          else
                          {
                            uint64_t v506 = *((void *)v504 + 3);
                            int v507 = v503;
                            do
                            {
                              uint64_t v508 = result + 1;
                              *(void *)(v493 + 8 * result) = (uint64_t)*(float *)&v492[v491];
                              v491 += v506;
                              ++result;
                              --v507;
                            }
                            while (v507);
                          }
                          v491 += v505;
                          ++v502;
                          uint64_t result = v508;
                        }
                        while (v502 != v499);
                      }
                      v491 += v501;
                      ++v498;
                      uint64_t result = v508;
                    }
                    while (v498 != v494);
                  }
                  v491 += v497;
                  ++v490;
                  uint64_t result = v508;
                }
                while (v490 != v489);
              }
              break;
            default:
              uint64_t v452 = v3[6];
              if (v452)
              {
                uint64_t v453 = 0;
                uint64_t v454 = v150[19];
                uint64_t v455 = v3[19];
                uint64_t v456 = ((unint64_t)v152 >> 2) - 1;
                uint64_t v457 = v150[3];
                do
                {
                  uint64_t v458 = 0;
                  if ((v456 & 0x80000000) == 0)
                  {
                    uint64_t v459 = v456;
                    LODWORD(result) = v453;
                    do
                    {
                      ldiv_t v460 = ldiv((int)result, v151[v459]);
                      uint64_t result = v460.quot;
                      v458 += *(void *)&v457[2 * v459--] * v460.rem;
                    }
                    while (v459 != -1);
                  }
                  *(void *)(v455 + 8 * v453++) = (uint64_t)*(float *)&v454[v458];
                }
                while (v453 != v452);
              }
              break;
          }
          break;
        case 3:
          uint64_t v157 = *(unsigned int ***)result;
          uint64_t v159 = **(void **)result;
          uint64_t v158 = *(void *)(*(void *)result + 8);
          unint64_t v160 = v158 - v159;
          switch((v158 - v159) >> 2)
          {
            case 1:
              uint64_t v161 = (v160 << 30) - 0x100000000;
              int v162 = *(_DWORD *)(v159 + (v161 >> 30));
              if (v162 >= 1)
              {
                uint64_t v163 = v161 >> 29;
                uint64_t v164 = *(void *)((char *)v157[3] + v163);
                uint64_t v165 = *(void *)(v3[3] + v163);
                int v166 = (void *)v3[19];
                uint64_t v167 = (float *)v157[19];
                uint64_t v168 = 8 * v165;
                uint64_t v169 = 4 * v164;
                do
                {
                  *int v166 = (uint64_t)*v167;
                  int v166 = (void *)((char *)v166 + v168);
                  uint64_t v167 = (float *)((char *)v167 + v169);
                  --v162;
                }
                while (v162);
              }
              break;
            case 2:
              uint64_t v1163 = (v160 << 30) - 0x200000000;
              int v1164 = *(_DWORD *)(v159 + (v1163 >> 30));
              if (v1164 >= 1)
              {
                uint64_t v1165 = 0;
                uint64_t v1166 = 0;
                int v1167 = 0;
                int v1168 = v157[3];
                uint64_t v1169 = v1163 >> 29;
                uint64_t v1170 = *(void *)((char *)v1168 + v1169);
                uint64_t v1171 = v3[3];
                uint64_t result = *(void *)(v1171 + v1169);
                uint64_t v1172 = (v160 << 30) - 0x100000000;
                uint64_t v1173 = *(void *)((char *)v1168 + (v1172 >> 29));
                uint64_t v1174 = *(void *)(v1171 + (v1172 >> 29));
                int v1175 = *(_DWORD *)(v159 + (v1172 >> 30));
                uint64_t v1176 = 8 * result;
                uint64_t v1177 = 8 * v1174;
                uint64_t v1178 = 4 * v1170;
                uint64_t v1179 = 4 * v1173;
                do
                {
                  if (v1175 >= 1)
                  {
                    uint64_t result = v3[19] + v1166;
                    uint64_t v1180 = (float *)((char *)v157[19] + v1165);
                    int v1181 = v1175;
                    do
                    {
                      *(void *)uint64_t result = (uint64_t)*v1180;
                      result += v1177;
                      uint64_t v1180 = (float *)((char *)v1180 + v1179);
                      --v1181;
                    }
                    while (v1181);
                  }
                  ++v1167;
                  v1166 += v1176;
                  v1165 += v1178;
                }
                while (v1167 != v1164);
              }
              break;
            case 3:
              uint64_t v1182 = (v160 << 30) - 0x300000000;
              int v1183 = *(_DWORD *)(v159 + (v1182 >> 30));
              if (v1183 >= 1)
              {
                uint64_t v1184 = 0;
                uint64_t v1185 = 0;
                int v1186 = 0;
                int v1187 = v157[3];
                uint64_t v1188 = v1182 >> 29;
                uint64_t v1189 = *(void *)((char *)v1187 + v1188);
                uint64_t v1190 = v3[3];
                uint64_t v1191 = *(void *)(v1190 + v1188);
                uint64_t v1192 = v160 << 30;
                uint64_t v1193 = (v160 << 30) - 0x200000000;
                uint64_t v1194 = *(void *)((char *)v1187 + (v1193 >> 29));
                uint64_t v1195 = *(void *)(v1190 + (v1193 >> 29));
                int v1196 = *(_DWORD *)(v159 + (v1193 >> 30));
                uint64_t v1197 = (v1192 - 0x100000000) >> 32;
                uint64_t v1198 = 8 * v1191;
                uint64_t v1199 = 8 * v1195;
                uint64_t result = 4 * v1189;
                uint64_t v1200 = 4 * v1194;
                do
                {
                  if (v1196 >= 1)
                  {
                    int v1201 = 0;
                    int v1202 = *(_DWORD *)(v159 + 4 * v1197);
                    uint64_t v1203 = (void *)*a2;
                    uint64_t v1204 = 8 * *(void *)(v1190 + 8 * v1197);
                    uint64_t v1205 = 4 * *(void *)&v1187[2 * v1197];
                    uint64_t v1206 = v1184;
                    uint64_t v1207 = v1185;
                    do
                    {
                      if (v1202 >= 1)
                      {
                        int v1208 = (void *)(v1203[19] + v1207);
                        uint64_t v1209 = (float *)((char *)v157[19] + v1206);
                        int v1210 = v1202;
                        do
                        {
                          *int v1208 = (uint64_t)*v1209;
                          int v1208 = (void *)((char *)v1208 + v1204);
                          uint64_t v1209 = (float *)((char *)v1209 + v1205);
                          --v1210;
                        }
                        while (v1210);
                      }
                      ++v1201;
                      v1207 += v1199;
                      v1206 += v1200;
                    }
                    while (v1201 != v1196);
                  }
                  ++v1186;
                  v1185 += v1198;
                  v1184 += result;
                }
                while (v1186 != v1183);
              }
              break;
            case 4:
              uint64_t v1211 = (v160 << 30) - 0x400000000;
              int v1581 = *(_DWORD *)(v159 + (v1211 >> 30));
              if (v1581 >= 1)
              {
                uint64_t v1212 = 0;
                uint64_t v1213 = 0;
                int v1214 = 0;
                int v1215 = v157[3];
                uint64_t v1216 = v1211 >> 29;
                uint64_t v1217 = v160 << 30;
                uint64_t v1218 = v3[3];
                uint64_t v1219 = (v1217 - 0x300000000) >> 29;
                uint64_t v1220 = *(void *)((char *)v1215 + v1219);
                uint64_t v1221 = v1217 - 0x200000000;
                uint64_t v1222 = v1217 - 0x100000000;
                uint64_t v1223 = *(void *)(v1218 + v1219);
                int v1224 = *(_DWORD *)(v159 + ((v1217 - 0x300000000) >> 30));
                uint64_t v1531 = v1221 >> 32;
                uint64_t v1225 = v1222 >> 32;
                uint64_t v1564 = 8 * *(void *)(v1218 + v1216);
                uint64_t result = 8 * v1223;
                uint64_t v1547 = 4 * *(void *)((char *)v1215 + v1216);
                uint64_t v1226 = 4 * v1220;
                do
                {
                  if (v1224 >= 1)
                  {
                    int v1227 = 0;
                    int v1228 = *(_DWORD *)(v159 + 4 * v1531);
                    uint64_t v1229 = 8 * *(void *)(v1218 + 8 * v1531);
                    uint64_t v1230 = 4 * *(void *)&v1215[2 * v1531];
                    uint64_t v1231 = v1212;
                    uint64_t v1232 = v1213;
                    do
                    {
                      if (v1228 >= 1)
                      {
                        int v1233 = 0;
                        int v1234 = *(_DWORD *)(v159 + 4 * v1225);
                        uint64_t v1235 = (void *)*a2;
                        uint64_t v1236 = 8 * *(void *)(v1218 + 8 * v1225);
                        uint64_t v1237 = 4 * *(void *)&v1215[2 * v1225];
                        uint64_t v1238 = v1231;
                        uint64_t v1239 = v1232;
                        do
                        {
                          if (v1234 >= 1)
                          {
                            int v1240 = (void *)(v1235[19] + v1239);
                            uint64_t v1241 = (float *)((char *)v157[19] + v1238);
                            int v1242 = v1234;
                            do
                            {
                              *int v1240 = (uint64_t)*v1241;
                              int v1240 = (void *)((char *)v1240 + v1236);
                              uint64_t v1241 = (float *)((char *)v1241 + v1237);
                              --v1242;
                            }
                            while (v1242);
                          }
                          ++v1233;
                          v1239 += v1229;
                          v1238 += v1230;
                        }
                        while (v1233 != v1228);
                      }
                      ++v1227;
                      v1232 += result;
                      v1231 += v1226;
                    }
                    while (v1227 != v1224);
                  }
                  ++v1214;
                  v1213 += v1564;
                  v1212 += v1547;
                }
                while (v1214 != v1581);
              }
              break;
            case 5:
              uint64_t v1243 = (v160 << 30) - 0x500000000;
              int v1486 = *(_DWORD *)(v159 + (v1243 >> 30));
              if (v1486 >= 1)
              {
                uint64_t v1506 = 0;
                uint64_t v1516 = 0;
                int v1496 = 0;
                uint64_t v1244 = v157[3];
                uint64_t v1245 = v1243 >> 29;
                uint64_t v1246 = v3[3];
                uint64_t v1247 = (v160 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1244 + (v1247 >> 29));
                int v1582 = *(_DWORD *)(v159 + (v1247 >> 30));
                uint64_t v1457 = (uint64_t)((v160 << 30) - 0x300000000) >> 32;
                uint64_t v1532 = (uint64_t)((v160 << 30) - 0x200000000) >> 32;
                uint64_t v1248 = (uint64_t)((v160 << 30) - 0x100000000) >> 32;
                uint64_t v1476 = 8 * *(void *)(v1246 + v1245);
                uint64_t v1565 = 8 * *(void *)(v1246 + (v1247 >> 29));
                uint64_t v1466 = 4 * *(void *)((char *)v1244 + v1245);
                uint64_t v1548 = 4 * result;
                do
                {
                  if (v1582 >= 1)
                  {
                    int v1249 = 0;
                    int v1250 = *(_DWORD *)(v159 + 4 * v1457);
                    uint64_t v1251 = 8 * *(void *)(v1246 + 8 * v1457);
                    uint64_t v1252 = 4 * *(void *)&v1244[2 * v1457];
                    uint64_t v1254 = v1506;
                    uint64_t v1253 = v1516;
                    do
                    {
                      if (v1250 >= 1)
                      {
                        int v1255 = 0;
                        int v1256 = *(_DWORD *)(v159 + 4 * v1532);
                        uint64_t v1257 = 8 * *(void *)(v1246 + 8 * v1532);
                        uint64_t v1258 = 4 * *(void *)&v1244[2 * v1532];
                        uint64_t v1259 = v1253;
                        uint64_t v1260 = v1254;
                        do
                        {
                          if (v1256 >= 1)
                          {
                            int v1261 = 0;
                            int v1262 = *(_DWORD *)(v159 + 4 * v1248);
                            uint64_t v1263 = (void *)*a2;
                            uint64_t v1264 = 8 * *(void *)(v1246 + 8 * v1248);
                            uint64_t v1265 = 4 * *(void *)&v1244[2 * v1248];
                            uint64_t v1266 = v1259;
                            uint64_t v1267 = v1260;
                            do
                            {
                              if (v1262 >= 1)
                              {
                                int v1268 = (void *)(v1263[19] + v1267);
                                uint64_t v1269 = (float *)((char *)v157[19] + v1266);
                                LODWORD(result) = v1262;
                                do
                                {
                                  *int v1268 = (uint64_t)*v1269;
                                  int v1268 = (void *)((char *)v1268 + v1264);
                                  uint64_t v1269 = (float *)((char *)v1269 + v1265);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1261;
                              v1267 += v1257;
                              v1266 += v1258;
                            }
                            while (v1261 != v1256);
                          }
                          ++v1255;
                          v1260 += v1251;
                          v1259 += v1252;
                        }
                        while (v1255 != v1250);
                      }
                      ++v1249;
                      v1254 += v1565;
                      v1253 += v1548;
                    }
                    while (v1249 != v1582);
                  }
                  v1506 += v1476;
                  v1516 += v1466;
                  ++v1496;
                }
                while (v1496 != v1486);
              }
              break;
            default:
              LODWORD(v1128) = 1;
              uint64_t v1129 = -20;
              do
              {
                uint64_t v1128 = *(int *)(v158 + v1129) * (uint64_t)(int)v1128;
                v1129 += 4;
              }
              while (v1129);
              uint64_t v1443 = v157[6];
              if (v1443)
              {
                uint64_t v1130 = 0;
                uint64_t v1423 = *v3;
                uint64_t v1131 = (v160 << 30) - 0x500000000;
                uint64_t v1433 = (v160 >> 2) - 1;
                uint64_t v1132 = v157[3];
                uint64_t v1428 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1133 = v3[3];
                int v1485 = *(_DWORD *)(v159 + (v1131 >> 30));
                uint64_t v1419 = (uint64_t)((v160 << 30) - 0x400000000) >> 32;
                uint64_t v1530 = (uint64_t)((v160 << 30) - 0x200000000) >> 32;
                uint64_t v1134 = (uint64_t)((v160 << 30) - 0x100000000) >> 32;
                uint64_t v1475 = 8 * *(void *)(v1133 + (v1131 >> 29));
                uint64_t v1456 = (uint64_t)((v160 << 30) - 0x300000000) >> 32;
                uint64_t v1465 = 4 * *(void *)((char *)v1132 + (v1131 >> 29));
                uint64_t v1438 = v1128;
                do
                {
                  uint64_t v1135 = v1433;
                  if ((v1433 & 0x80000000) != 0)
                  {
                    uint64_t v1136 = 0;
                    uint64_t v1137 = v1428;
                  }
                  else
                  {
                    uint64_t v1136 = 0;
                    LODWORD(result) = v1130;
                    uint64_t v1137 = v1428;
                    do
                    {
                      ldiv_t v1138 = ldiv((int)result, *(int *)(v159 + 4 * v1135));
                      uint64_t result = v1138.quot;
                      v1136 += *(void *)&v1132[2 * v1135--] * v1138.rem;
                    }
                    while (v1135 != -1);
                  }
                  uint64_t v1448 = v1130;
                  uint64_t v1139 = 0;
                  if ((v1137 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1130;
                    do
                    {
                      ldiv_t v1140 = ldiv((int)result, *(int *)(v1423 + 4 * v1137));
                      uint64_t result = v1140.quot;
                      v1139 += *(void *)(v1133 + 8 * v1137--) * v1140.rem;
                    }
                    while (v1137 != -1);
                  }
                  if (v1485 >= 1)
                  {
                    int v1141 = 0;
                    int v1580 = *(_DWORD *)(v159 + 4 * v1419);
                    uint64_t v1515 = 8 * v1139;
                    uint64_t v1563 = 8 * *(void *)(v1133 + 8 * v1419);
                    uint64_t v1505 = 4 * v1136;
                    uint64_t v1546 = 4 * *(void *)&v1132[2 * v1419];
                    do
                    {
                      int v1495 = v1141;
                      if (v1580 >= 1)
                      {
                        int v1142 = 0;
                        int v1143 = *(_DWORD *)(v159 + 4 * v1456);
                        uint64_t v1144 = 8 * *(void *)(v1133 + 8 * v1456);
                        uint64_t v1145 = 4 * *(void *)&v1132[2 * v1456];
                        uint64_t v1147 = v1505;
                        uint64_t v1146 = v1515;
                        do
                        {
                          if (v1143 >= 1)
                          {
                            int v1148 = 0;
                            int v1149 = *(_DWORD *)(v159 + 4 * v1530);
                            uint64_t v1150 = 8 * *(void *)(v1133 + 8 * v1530);
                            uint64_t v1151 = 4 * *(void *)&v1132[2 * v1530];
                            uint64_t result = v1147;
                            uint64_t v1152 = v1146;
                            do
                            {
                              if (v1149 >= 1)
                              {
                                int v1153 = 0;
                                int v1154 = *(_DWORD *)(v159 + 4 * v1134);
                                int v1155 = (void *)*a2;
                                uint64_t v1156 = 8 * *(void *)(v1133 + 8 * v1134);
                                uint64_t v1157 = 4 * *(void *)&v1132[2 * v1134];
                                uint64_t v1158 = result;
                                uint64_t v1159 = v1152;
                                do
                                {
                                  if (v1154 >= 1)
                                  {
                                    int v1160 = (void *)(v1155[19] + v1159);
                                    int v1161 = (float *)((char *)v157[19] + v1158);
                                    int v1162 = v1154;
                                    do
                                    {
                                      *int v1160 = (uint64_t)*v1161;
                                      int v1160 = (void *)((char *)v1160 + v1156);
                                      int v1161 = (float *)((char *)v1161 + v1157);
                                      --v1162;
                                    }
                                    while (v1162);
                                  }
                                  ++v1153;
                                  v1159 += v1150;
                                  v1158 += v1151;
                                }
                                while (v1153 != v1149);
                              }
                              ++v1148;
                              v1152 += v1144;
                              result += v1145;
                            }
                            while (v1148 != v1143);
                          }
                          ++v1142;
                          v1146 += v1563;
                          v1147 += v1546;
                        }
                        while (v1142 != v1580);
                      }
                      int v1141 = v1495 + 1;
                      v1515 += v1475;
                      v1505 += v1465;
                    }
                    while (v1495 + 1 != v1485);
                  }
                  v1130 += v1438;
                }
                while ((unint64_t)v1443 > v1448 + v1438);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v18 = v3[6];
          if (v18)
          {
            int v19 = **(_DWORD **)(*(void *)result + 152);
            int v20 = (_DWORD *)v3[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          uint64_t v170 = *(void *)(*(void *)result + 160);
          if (v170)
          {
            uint64_t v171 = *(const void **)(*(void *)result + 152);
            uint64_t v172 = (void *)v3[19];
            uint64_t result = (uint64_t)memmove(v172, v171, 4 * v170);
          }
          break;
        case 2:
          uint64_t v173 = *(int ***)result;
          uint64_t v174 = **(int ***)result;
          uint64_t v175 = *(void *)(*(void *)result + 8) - (void)v174;
          switch(v175 >> 2)
          {
            case 1:
              uint64_t v176 = *v174;
              if ((int)v176 >= 1)
              {
                uint64_t v177 = v173[19];
                uint64_t v178 = (int *)v3[19];
                uint64_t v179 = 4 * *(void *)v173[3];
                do
                {
                  *v178++ = *v177;
                  uint64_t v177 = (int *)((char *)v177 + v179);
                  --v176;
                }
                while (v176);
              }
              break;
            case 2:
              int v518 = *v174;
              if (*v174 >= 1)
              {
                int v519 = 0;
                uint64_t v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = v173[19];
                uint64_t v523 = v3[19];
                uint64_t v524 = v174[1];
                int v525 = v173[3];
                uint64_t v527 = *(void *)v525;
                uint64_t v526 = *((void *)v525 + 1);
                uint64_t v528 = v527 - v526 * v524;
                do
                {
                  int v529 = v524;
                  if ((int)v524 >= 1)
                  {
                    do
                    {
                      *(_DWORD *)(v523 + 4 * v520++) = v522[v521];
                      v521 += v526;
                      --v529;
                    }
                    while (v529);
                  }
                  v521 += v528;
                  ++v519;
                }
                while (v519 != v518);
              }
              break;
            case 3:
              int v530 = *v174;
              if (*v174 >= 1)
              {
                int v531 = 0;
                uint64_t result = 0;
                uint64_t v532 = 0;
                uint64_t v533 = v173[19];
                uint64_t v534 = v3[19];
                uint64_t v535 = v174[1];
                int v536 = v173[3];
                uint64_t v537 = *((void *)v536 + 1);
                uint64_t v538 = *(void *)v536 - v537 * v535;
                do
                {
                  if ((int)v535 < 1)
                  {
                    uint64_t v545 = result;
                  }
                  else
                  {
                    int v539 = 0;
                    uint64_t v540 = v174[2];
                    uint64_t v541 = v173[3];
                    uint64_t v542 = v537 - *((void *)v536 + 2) * v540;
                    do
                    {
                      if ((int)v540 < 1)
                      {
                        uint64_t v545 = result;
                      }
                      else
                      {
                        uint64_t v543 = *((void *)v541 + 2);
                        int v544 = v540;
                        do
                        {
                          uint64_t v545 = result + 1;
                          *(_DWORD *)(v534 + 4 * result) = v533[v532];
                          v532 += v543;
                          ++result;
                          --v544;
                        }
                        while (v544);
                      }
                      v532 += v542;
                      ++v539;
                      uint64_t result = v545;
                    }
                    while (v539 != v535);
                  }
                  v532 += v538;
                  ++v531;
                  uint64_t result = v545;
                }
                while (v531 != v530);
              }
              break;
            case 4:
              int v546 = *v174;
              if (*v174 >= 1)
              {
                int v547 = 0;
                uint64_t result = 0;
                uint64_t v548 = 0;
                uint64_t v549 = v173[19];
                uint64_t v550 = v3[19];
                uint64_t v551 = v174[1];
                int v552 = v173[3];
                uint64_t v553 = *((void *)v552 + 1);
                uint64_t v554 = *(void *)v552 - v553 * v551;
                do
                {
                  if ((int)v551 < 1)
                  {
                    uint64_t v565 = result;
                  }
                  else
                  {
                    int v555 = 0;
                    uint64_t v556 = v174[2];
                    uint64_t v557 = v173[3];
                    uint64_t v558 = v553 - *((void *)v552 + 2) * v556;
                    do
                    {
                      if ((int)v556 < 1)
                      {
                        uint64_t v565 = result;
                      }
                      else
                      {
                        int v559 = 0;
                        uint64_t v560 = v174[3];
                        int v561 = v173[3];
                        uint64_t v562 = *((void *)v557 + 2) - *((void *)v557 + 3) * v560;
                        do
                        {
                          if ((int)v560 < 1)
                          {
                            uint64_t v565 = result;
                          }
                          else
                          {
                            uint64_t v563 = *((void *)v561 + 3);
                            int v564 = v560;
                            do
                            {
                              uint64_t v565 = result + 1;
                              *(_DWORD *)(v550 + 4 * result) = v549[v548];
                              v548 += v563;
                              ++result;
                              --v564;
                            }
                            while (v564);
                          }
                          v548 += v562;
                          ++v559;
                          uint64_t result = v565;
                        }
                        while (v559 != v556);
                      }
                      v548 += v558;
                      ++v555;
                      uint64_t result = v565;
                    }
                    while (v555 != v551);
                  }
                  v548 += v554;
                  ++v547;
                  uint64_t result = v565;
                }
                while (v547 != v546);
              }
              break;
            default:
              uint64_t v509 = v3[6];
              if (v509)
              {
                uint64_t v510 = 0;
                uint64_t v511 = v173[19];
                uint64_t v512 = v3[19];
                uint64_t v513 = ((unint64_t)v175 >> 2) - 1;
                uint64_t v514 = v173[3];
                do
                {
                  uint64_t v515 = 0;
                  if ((v513 & 0x80000000) == 0)
                  {
                    uint64_t v516 = v513;
                    LODWORD(result) = v510;
                    do
                    {
                      ldiv_t v517 = ldiv((int)result, v174[v516]);
                      uint64_t result = v517.quot;
                      v515 += *(void *)&v514[2 * v516--] * v517.rem;
                    }
                    while (v516 != -1);
                  }
                  *(_DWORD *)(v512 + 4 * v510++) = v511[v515];
                }
                while (v510 != v509);
              }
              break;
          }
          break;
        case 3:
          uint64_t v180 = *(unsigned int ***)result;
          uint64_t v182 = **(void **)result;
          uint64_t v181 = *(void *)(*(void *)result + 8);
          unint64_t v183 = v181 - v182;
          switch((v181 - v182) >> 2)
          {
            case 1:
              uint64_t v184 = (v183 << 30) - 0x100000000;
              int v185 = *(_DWORD *)(v182 + (v184 >> 30));
              if (v185 >= 1)
              {
                uint64_t v186 = v184 >> 29;
                uint64_t v187 = *(void *)((char *)v180[3] + v186);
                uint64_t v188 = *(void *)(v3[3] + v186);
                unint64_t v189 = (unsigned int *)v3[19];
                uint64_t v190 = v180[19];
                uint64_t v191 = 4 * v188;
                uint64_t v192 = 4 * v187;
                do
                {
                  *unint64_t v189 = *v190;
                  unint64_t v189 = (unsigned int *)((char *)v189 + v191);
                  uint64_t v190 = (unsigned int *)((char *)v190 + v192);
                  --v185;
                }
                while (v185);
              }
              break;
            case 2:
              uint64_t v1307 = (v183 << 30) - 0x200000000;
              int v1308 = *(_DWORD *)(v182 + (v1307 >> 30));
              if (v1308 >= 1)
              {
                uint64_t v1309 = 0;
                uint64_t v1310 = 0;
                int v1311 = 0;
                int v1312 = v180[3];
                uint64_t v1313 = v1307 >> 29;
                uint64_t v1314 = *(void *)((char *)v1312 + v1313);
                uint64_t v1315 = v3[3];
                uint64_t result = *(void *)(v1315 + v1313);
                uint64_t v1316 = (v183 << 30) - 0x100000000;
                uint64_t v1317 = *(void *)((char *)v1312 + (v1316 >> 29));
                uint64_t v1318 = *(void *)(v1315 + (v1316 >> 29));
                int v1319 = *(_DWORD *)(v182 + (v1316 >> 30));
                uint64_t v1320 = 4 * result;
                uint64_t v1321 = 4 * v1318;
                uint64_t v1322 = 4 * v1314;
                uint64_t v1323 = 4 * v1317;
                do
                {
                  if (v1319 >= 1)
                  {
                    uint64_t result = v3[19] + v1310;
                    uint64_t v1324 = (unsigned int *)((char *)v180[19] + v1309);
                    int v1325 = v1319;
                    do
                    {
                      *(_DWORD *)uint64_t result = *v1324;
                      result += v1321;
                      uint64_t v1324 = (_DWORD *)((char *)v1324 + v1323);
                      --v1325;
                    }
                    while (v1325);
                  }
                  ++v1311;
                  v1310 += v1320;
                  v1309 += v1322;
                }
                while (v1311 != v1308);
              }
              break;
            case 3:
              uint64_t v1326 = (v183 << 30) - 0x300000000;
              int v1327 = *(_DWORD *)(v182 + (v1326 >> 30));
              if (v1327 >= 1)
              {
                uint64_t v1328 = 0;
                uint64_t v1329 = 0;
                int v1330 = 0;
                int v1331 = v180[3];
                uint64_t v1332 = v1326 >> 29;
                uint64_t v1333 = *(void *)((char *)v1331 + v1332);
                uint64_t v1334 = v3[3];
                uint64_t v1335 = *(void *)(v1334 + v1332);
                uint64_t v1336 = v183 << 30;
                uint64_t v1337 = (v183 << 30) - 0x200000000;
                uint64_t v1338 = *(void *)((char *)v1331 + (v1337 >> 29));
                uint64_t v1339 = *(void *)(v1334 + (v1337 >> 29));
                int v1340 = *(_DWORD *)(v182 + (v1337 >> 30));
                uint64_t v1341 = (v1336 - 0x100000000) >> 32;
                uint64_t v1342 = 4 * v1335;
                uint64_t v1343 = 4 * v1339;
                uint64_t result = 4 * v1333;
                uint64_t v1344 = 4 * v1338;
                do
                {
                  if (v1340 >= 1)
                  {
                    int v1345 = 0;
                    int v1346 = *(_DWORD *)(v182 + 4 * v1341);
                    uint64_t v1347 = (void *)*a2;
                    uint64_t v1348 = 4 * *(void *)(v1334 + 8 * v1341);
                    uint64_t v1349 = 4 * *(void *)&v1331[2 * v1341];
                    uint64_t v1350 = v1328;
                    uint64_t v1351 = v1329;
                    do
                    {
                      if (v1346 >= 1)
                      {
                        uint64_t v1352 = (_DWORD *)(v1347[19] + v1351);
                        uint64_t v1353 = (unsigned int *)((char *)v180[19] + v1350);
                        int v1354 = v1346;
                        do
                        {
                          *uint64_t v1352 = *v1353;
                          uint64_t v1352 = (_DWORD *)((char *)v1352 + v1348);
                          uint64_t v1353 = (_DWORD *)((char *)v1353 + v1349);
                          --v1354;
                        }
                        while (v1354);
                      }
                      ++v1345;
                      v1351 += v1343;
                      v1350 += v1344;
                    }
                    while (v1345 != v1340);
                  }
                  ++v1330;
                  v1329 += v1342;
                  v1328 += result;
                }
                while (v1330 != v1327);
              }
              break;
            case 4:
              uint64_t v1355 = (v183 << 30) - 0x400000000;
              int v1584 = *(_DWORD *)(v182 + (v1355 >> 30));
              if (v1584 >= 1)
              {
                uint64_t v1356 = 0;
                uint64_t v1357 = 0;
                int v1358 = 0;
                uint64_t v1359 = v180[3];
                uint64_t v1360 = v1355 >> 29;
                uint64_t v1361 = v183 << 30;
                uint64_t v1362 = v3[3];
                uint64_t v1363 = (v1361 - 0x300000000) >> 29;
                uint64_t v1364 = *(void *)((char *)v1359 + v1363);
                uint64_t v1365 = v1361 - 0x200000000;
                uint64_t v1366 = v1361 - 0x100000000;
                uint64_t v1367 = *(void *)(v1362 + v1363);
                int v1368 = *(_DWORD *)(v182 + ((v1361 - 0x300000000) >> 30));
                uint64_t v1369 = v1365 >> 32;
                uint64_t v1370 = v1366 >> 32;
                uint64_t v1567 = 4 * *(void *)(v1362 + v1360);
                uint64_t result = 4 * v1367;
                uint64_t v1550 = 4 * *(void *)((char *)v1359 + v1360);
                uint64_t v1371 = 4 * v1364;
                do
                {
                  if (v1368 >= 1)
                  {
                    int v1372 = 0;
                    int v1373 = *(_DWORD *)(v182 + 4 * v1369);
                    uint64_t v1374 = 4 * *(void *)(v1362 + 8 * v1369);
                    uint64_t v1375 = 4 * *(void *)&v1359[2 * v1369];
                    uint64_t v1376 = v1356;
                    uint64_t v1377 = v1357;
                    do
                    {
                      if (v1373 >= 1)
                      {
                        int v1378 = 0;
                        int v1379 = *(_DWORD *)(v182 + 4 * v1370);
                        uint64_t v1380 = (void *)*a2;
                        uint64_t v1381 = 4 * *(void *)(v1362 + 8 * v1370);
                        uint64_t v1382 = 4 * *(void *)&v1359[2 * v1370];
                        uint64_t v1383 = v1376;
                        uint64_t v1384 = v1377;
                        do
                        {
                          if (v1379 >= 1)
                          {
                            uint64_t v1385 = (_DWORD *)(v1380[19] + v1384);
                            uint64_t v1386 = (unsigned int *)((char *)v180[19] + v1383);
                            int v1387 = v1379;
                            do
                            {
                              *uint64_t v1385 = *v1386;
                              uint64_t v1385 = (_DWORD *)((char *)v1385 + v1381);
                              uint64_t v1386 = (_DWORD *)((char *)v1386 + v1382);
                              --v1387;
                            }
                            while (v1387);
                          }
                          ++v1378;
                          v1384 += v1374;
                          v1383 += v1375;
                        }
                        while (v1378 != v1373);
                      }
                      ++v1372;
                      v1377 += result;
                      v1376 += v1371;
                    }
                    while (v1372 != v1368);
                  }
                  ++v1358;
                  v1357 += v1567;
                  v1356 += v1550;
                }
                while (v1358 != v1584);
              }
              break;
            case 5:
              uint64_t v1388 = (v183 << 30) - 0x500000000;
              int v1498 = *(_DWORD *)(v182 + (v1388 >> 30));
              if (v1498 >= 1)
              {
                uint64_t v1518 = 0;
                uint64_t v1534 = 0;
                int v1508 = 0;
                uint64_t v1389 = v180[3];
                uint64_t v1390 = v1388 >> 29;
                uint64_t v1391 = v3[3];
                uint64_t v1392 = (v183 << 30) - 0x400000000;
                uint64_t result = *(void *)((char *)v1389 + (v1392 >> 29));
                int v1585 = *(_DWORD *)(v182 + (v1392 >> 30));
                uint64_t v1468 = (uint64_t)((v183 << 30) - 0x300000000) >> 32;
                uint64_t v1393 = (uint64_t)((v183 << 30) - 0x200000000) >> 32;
                uint64_t v1394 = (uint64_t)((v183 << 30) - 0x100000000) >> 32;
                uint64_t v1488 = 4 * *(void *)(v1391 + v1390);
                uint64_t v1568 = 4 * *(void *)(v1391 + (v1392 >> 29));
                uint64_t v1478 = 4 * *(void *)((char *)v1389 + v1390);
                uint64_t v1551 = 4 * result;
                do
                {
                  if (v1585 >= 1)
                  {
                    int v1395 = 0;
                    int v1396 = *(_DWORD *)(v182 + 4 * v1468);
                    uint64_t v1397 = 4 * *(void *)(v1391 + 8 * v1468);
                    uint64_t v1398 = 4 * *(void *)&v1389[2 * v1468];
                    uint64_t v1400 = v1518;
                    uint64_t v1399 = v1534;
                    do
                    {
                      if (v1396 >= 1)
                      {
                        int v1401 = 0;
                        int v1402 = *(_DWORD *)(v182 + 4 * v1393);
                        uint64_t v1403 = 4 * *(void *)(v1391 + 8 * v1393);
                        uint64_t v1404 = 4 * *(void *)&v1389[2 * v1393];
                        uint64_t v1405 = v1399;
                        uint64_t v1406 = v1400;
                        do
                        {
                          if (v1402 >= 1)
                          {
                            int v1407 = 0;
                            int v1408 = *(_DWORD *)(v182 + 4 * v1394);
                            int v1409 = (void *)*a2;
                            uint64_t v1410 = 4 * *(void *)(v1391 + 8 * v1394);
                            uint64_t v1411 = 4 * *(void *)&v1389[2 * v1394];
                            uint64_t v1412 = v1405;
                            uint64_t v1413 = v1406;
                            do
                            {
                              if (v1408 >= 1)
                              {
                                uint64_t v1414 = (_DWORD *)(v1409[19] + v1413);
                                uint64_t v1415 = (unsigned int *)((char *)v180[19] + v1412);
                                LODWORD(result) = v1408;
                                do
                                {
                                  *uint64_t v1414 = *v1415;
                                  uint64_t v1414 = (_DWORD *)((char *)v1414 + v1410);
                                  uint64_t v1415 = (_DWORD *)((char *)v1415 + v1411);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1407;
                              v1413 += v1403;
                              v1412 += v1404;
                            }
                            while (v1407 != v1402);
                          }
                          ++v1401;
                          v1406 += v1397;
                          v1405 += v1398;
                        }
                        while (v1401 != v1396);
                      }
                      ++v1395;
                      v1400 += v1568;
                      v1399 += v1551;
                    }
                    while (v1395 != v1585);
                  }
                  v1518 += v1488;
                  v1534 += v1478;
                  ++v1508;
                }
                while (v1508 != v1498);
              }
              break;
            default:
              LODWORD(v1270) = 1;
              uint64_t v1271 = -20;
              do
              {
                uint64_t v1270 = *(int *)(v181 + v1271) * (uint64_t)(int)v1270;
                v1271 += 4;
              }
              while (v1271);
              uint64_t v1444 = v180[6];
              if (v1444)
              {
                uint64_t result = 0;
                uint64_t v1487 = *v3;
                uint64_t v1272 = (v183 << 30) - 0x500000000;
                uint64_t v1434 = (v183 >> 2) - 1;
                uint64_t v1273 = v180[3];
                uint64_t v1429 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                uint64_t v1274 = v3[3];
                int v1497 = *(_DWORD *)(v182 + (v1272 >> 30));
                uint64_t v1424 = (uint64_t)((v183 << 30) - 0x400000000) >> 32;
                uint64_t v1275 = (uint64_t)((v183 << 30) - 0x200000000) >> 32;
                uint64_t v1276 = (uint64_t)((v183 << 30) - 0x100000000) >> 32;
                uint64_t v1477 = 4 * *(void *)(v1274 + (v1272 >> 29));
                uint64_t v1458 = (uint64_t)((v183 << 30) - 0x300000000) >> 32;
                uint64_t v1467 = 4 * *(void *)((char *)v1273 + (v1272 >> 29));
                uint64_t v1439 = v1270;
                do
                {
                  uint64_t v1277 = v1434;
                  uint64_t v1449 = result;
                  uint64_t v1278 = 0;
                  if ((v1434 & 0x80000000) != 0)
                  {
                    uint64_t v1279 = v1429;
                  }
                  else
                  {
                    uint64_t v1279 = v1429;
                    do
                    {
                      ldiv_t v1280 = ldiv((int)result, *(int *)(v182 + 4 * v1277));
                      LODWORD(result) = v1280.quot;
                      v1278 += *(void *)&v1273[2 * v1277--] * v1280.rem;
                    }
                    while (v1277 != -1);
                  }
                  uint64_t v1281 = 0;
                  if ((v1279 & 0x80000000) == 0)
                  {
                    int v1282 = v1449;
                    do
                    {
                      ldiv_t v1283 = ldiv(v1282, *(int *)(v1487 + 4 * v1279));
                      int v1282 = v1283.quot;
                      v1281 += *(void *)(v1274 + 8 * v1279--) * v1283.rem;
                    }
                    while (v1279 != -1);
                  }
                  if (v1497 >= 1)
                  {
                    int v1284 = 0;
                    int v1583 = *(_DWORD *)(v182 + 4 * v1424);
                    uint64_t v1533 = 4 * v1281;
                    uint64_t v1566 = 4 * *(void *)(v1274 + 8 * v1424);
                    uint64_t v1517 = 4 * v1278;
                    uint64_t v1549 = 4 * *(void *)&v1273[2 * v1424];
                    do
                    {
                      int v1507 = v1284;
                      if (v1583 >= 1)
                      {
                        int v1285 = 0;
                        int v1286 = *(_DWORD *)(v182 + 4 * v1458);
                        uint64_t v1287 = 4 * *(void *)(v1274 + 8 * v1458);
                        uint64_t v1288 = 4 * *(void *)&v1273[2 * v1458];
                        uint64_t v1290 = v1517;
                        uint64_t v1289 = v1533;
                        do
                        {
                          if (v1286 >= 1)
                          {
                            int v1291 = 0;
                            int v1292 = *(_DWORD *)(v182 + 4 * v1275);
                            uint64_t v1293 = 4 * *(void *)(v1274 + 8 * v1275);
                            uint64_t v1294 = 4 * *(void *)&v1273[2 * v1275];
                            uint64_t v1295 = v1290;
                            uint64_t v1296 = v1289;
                            do
                            {
                              if (v1292 >= 1)
                              {
                                int v1297 = 0;
                                int v1298 = *(_DWORD *)(v182 + 4 * v1276);
                                uint64_t v1299 = (void *)*a2;
                                uint64_t v1300 = 4 * *(void *)(v1274 + 8 * v1276);
                                uint64_t v1301 = 4 * *(void *)&v1273[2 * v1276];
                                uint64_t v1302 = v1295;
                                uint64_t v1303 = v1296;
                                do
                                {
                                  if (v1298 >= 1)
                                  {
                                    uint64_t v1304 = (_DWORD *)(v1299[19] + v1303);
                                    uint64_t v1305 = (unsigned int *)((char *)v180[19] + v1302);
                                    int v1306 = v1298;
                                    do
                                    {
                                      *uint64_t v1304 = *v1305;
                                      uint64_t v1304 = (_DWORD *)((char *)v1304 + v1300);
                                      uint64_t v1305 = (_DWORD *)((char *)v1305 + v1301);
                                      --v1306;
                                    }
                                    while (v1306);
                                  }
                                  ++v1297;
                                  v1303 += v1293;
                                  v1302 += v1294;
                                }
                                while (v1297 != v1292);
                              }
                              ++v1291;
                              v1296 += v1287;
                              v1295 += v1288;
                            }
                            while (v1291 != v1286);
                          }
                          ++v1285;
                          v1289 += v1566;
                          v1290 += v1549;
                        }
                        while (v1285 != v1583);
                      }
                      int v1284 = v1507 + 1;
                      v1533 += v1477;
                      v1517 += v1467;
                    }
                    while (v1507 + 1 != v1497);
                  }
                  uint64_t result = v1449 + v1439;
                }
                while ((unint64_t)v1444 > v1449 + v1439);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy_general_general_dims<BOOL,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x400000000;
  int v8 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v8 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = v7 >> 29;
    uint64_t v35 = *(void *)(*a4 + v10);
    uint64_t v34 = *(void *)(*a5 + v10);
    do
    {
      uint64_t v11 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x300000000;
      int v12 = *(_DWORD *)(*a3 + (v11 >> 30));
      if (v12 >= 1)
      {
        int v13 = 0;
        uint64_t v14 = v11 >> 29;
        uint64_t v15 = *(void *)(*a4 + v14);
        uint64_t v16 = *(void *)(*a5 + v14);
        uint64_t v17 = a6;
        uint64_t v18 = a7;
        do
        {
          uint64_t v19 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x200000000;
          int v20 = *(_DWORD *)(*a3 + (v19 >> 30));
          if (v20 >= 1)
          {
            int v21 = 0;
            uint64_t v22 = v19 >> 29;
            uint64_t v23 = *(void *)(*a4 + v22);
            uint64_t v24 = *(void *)(*a5 + v22);
            uint64_t v25 = v17;
            uint64_t v26 = v18;
            do
            {
              uint64_t v27 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x100000000;
              int v28 = *(_DWORD *)(*a3 + (v27 >> 30));
              if (v28 >= 1)
              {
                uint64_t v29 = v27 >> 29;
                uint64_t v30 = *(void *)(*a4 + v29);
                uint64_t v31 = *(void *)(*a5 + v29);
                uint64_t v32 = *(void *)(*(void *)a2 + 152);
                uint64_t v33 = *(void *)(*(void *)result + 152);
                do
                {
                  *(unsigned char *)(v32 + v26) = *(unsigned char *)(v33 + v25);
                  v32 += v31;
                  v33 += v30;
                  --v28;
                }
                while (v28);
              }
              v25 += v23;
              v26 += v24;
              ++v21;
            }
            while (v21 != v20);
          }
          v17 += v15;
          v18 += v16;
          ++v13;
        }
        while (v13 != v12);
      }
      a6 += v35;
      a7 += v34;
      ++v9;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy_general_general_dims<unsigned int,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x400000000;
  int v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = v7 >> 29;
    uint64_t v35 = *(void *)(*a5 + v9);
    uint64_t v10 = 4 * a6;
    uint64_t v11 = 4 * *(void *)(*a4 + v9);
    do
    {
      uint64_t v12 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x300000000;
      int v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        int v14 = 0;
        uint64_t v15 = v12 >> 29;
        uint64_t v16 = *(void *)(*a5 + v15);
        uint64_t v17 = 4 * *(void *)(*a4 + v15);
        uint64_t v18 = v10;
        uint64_t v19 = a7;
        do
        {
          uint64_t v20 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x200000000;
          int v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            int v22 = 0;
            uint64_t v23 = v20 >> 29;
            uint64_t v24 = *(void *)(*a5 + v23);
            uint64_t v25 = 4 * *(void *)(*a4 + v23);
            uint64_t v26 = v18;
            uint64_t v27 = v19;
            do
            {
              uint64_t v28 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x100000000;
              int v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                uint64_t v30 = v28 >> 29;
                uint64_t v31 = *(void *)(*a4 + v30);
                uint64_t v32 = *(void *)(*a5 + v30);
                uint64_t v33 = *(void *)(*(void *)a2 + 152);
                uint64_t v34 = (_DWORD *)(*(void *)(*(void *)result + 152) + v26);
                do
                {
                  *(unsigned char *)(v33 + v27) = *v34;
                  v33 += v32;
                  v34 += v31;
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy_general_general_dims<long long,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x400000000;
  int v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = v7 >> 29;
    uint64_t v35 = *(void *)(*a5 + v9);
    uint64_t v10 = 8 * a6;
    uint64_t v11 = 8 * *(void *)(*a4 + v9);
    do
    {
      uint64_t v12 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x300000000;
      int v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        int v14 = 0;
        uint64_t v15 = v12 >> 29;
        uint64_t v16 = *(void *)(*a5 + v15);
        uint64_t v17 = 8 * *(void *)(*a4 + v15);
        uint64_t v18 = v10;
        uint64_t v19 = a7;
        do
        {
          uint64_t v20 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x200000000;
          int v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            int v22 = 0;
            uint64_t v23 = v20 >> 29;
            uint64_t v24 = *(void *)(*a5 + v23);
            uint64_t v25 = 8 * *(void *)(*a4 + v23);
            uint64_t v26 = v18;
            uint64_t v27 = v19;
            do
            {
              uint64_t v28 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x100000000;
              int v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                uint64_t v30 = v28 >> 29;
                uint64_t v31 = *(void *)(*a5 + v30);
                uint64_t v32 = *(void *)(*(void *)a2 + 152);
                uint64_t v33 = (void *)(*(void *)(*(void *)result + 152) + v26);
                uint64_t v34 = 8 * *(void *)(*a4 + v30);
                do
                {
                  *(unsigned char *)(v32 + v27) = *v33;
                  v32 += v31;
                  uint64_t v33 = (void *)((char *)v33 + v34);
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy_single<float,unsigned char>(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 48))
  {
    unint64_t v2 = 0;
    int v3 = (int)**(float **)(*(void *)result + 152);
    uint64_t v4 = *(void *)(*(void *)a2 + 152);
    do
      *(unsigned char *)(v4 + v2++) = v3;
    while (*(void *)(*(void *)a2 + 48) > v2);
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy_general_general_dims<float,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x400000000;
  int v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = v7 >> 29;
    uint64_t v35 = *(void *)(*a5 + v9);
    uint64_t v10 = 4 * a6;
    uint64_t v11 = 4 * *(void *)(*a4 + v9);
    do
    {
      uint64_t v12 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x300000000;
      int v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        int v14 = 0;
        uint64_t v15 = v12 >> 29;
        uint64_t v16 = *(void *)(*a5 + v15);
        uint64_t v17 = 4 * *(void *)(*a4 + v15);
        uint64_t v18 = v10;
        uint64_t v19 = a7;
        do
        {
          uint64_t v20 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x200000000;
          int v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            int v22 = 0;
            uint64_t v23 = v20 >> 29;
            uint64_t v24 = *(void *)(*a5 + v23);
            uint64_t v25 = 4 * *(void *)(*a4 + v23);
            uint64_t v26 = v18;
            uint64_t v27 = v19;
            do
            {
              uint64_t v28 = ((*(void *)(*(void *)result + 8) - **(void **)result) << 30) - 0x100000000;
              int v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                uint64_t v30 = v28 >> 29;
                uint64_t v31 = *(void *)(*a4 + v30);
                uint64_t v32 = *(void *)(*a5 + v30);
                uint64_t v33 = *(void *)(*(void *)a2 + 152);
                uint64_t v34 = (float *)(*(void *)(*(void *)result + 152) + v26);
                do
                {
                  *(unsigned char *)(v33 + v27) = (int)*v34;
                  v33 += v32;
                  v34 += v31;
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<BOOL,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t **a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = *a2;
  uint64_t v9 = a6;
  uint64_t v13 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v14 = v8[6];
          if (v14)
          {
            uint64_t v15 = (void *)v8[19];
            int v16 = **(unsigned __int8 **)(*(void *)v13 + 152);
            uint64_t result = (uint64_t)memset(v15, v16, v14);
          }
          break;
        case 1:
          goto LABEL_39;
        case 2:
          uint64_t v38 = *a7;
          uint64_t v39 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v40 = **a4;
              if ((int)v40 >= 1)
              {
                uint64_t v41 = (unsigned char *)v8[19];
                uint64_t v42 = **a5;
                uint64_t v43 = (unsigned char *)(*(void *)(v39 + 152) + v38);
                do
                {
                  *v41++ = *v43;
                  v43 += v42;
                  --v40;
                }
                while (v40);
              }
              break;
            case 2:
              int v182 = **a4;
              if (v182 >= 1)
              {
                int v183 = 0;
                uint64_t v184 = 0;
                uint64_t v185 = *(void *)(v39 + 152);
                uint64_t v186 = v8[19];
                uint64_t v187 = (*a4)[1];
                uint64_t v188 = (*a5)[1];
                uint64_t v189 = **a5 - v188 * v187;
                do
                {
                  int v190 = v187;
                  if ((int)v187 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v185 + v38);
                      *(unsigned char *)(v186 + v184++) = result;
                      v38 += v188;
                      --v190;
                    }
                    while (v190);
                  }
                  v38 += v189;
                  ++v183;
                }
                while (v183 != v182);
              }
              break;
            case 3:
              uint64_t v191 = *a4;
              int v192 = **a4;
              if (v192 >= 1)
              {
                int v193 = 0;
                uint64_t result = 0;
                uint64_t v194 = *(void *)(v39 + 152);
                uint64_t v195 = v8[19];
                uint64_t v196 = v191[1];
                uint64_t v197 = *a5;
                uint64_t v198 = (*a5)[1];
                uint64_t v199 = **a5 - v198 * v196;
                do
                {
                  if ((int)v196 < 1)
                  {
                    uint64_t v206 = result;
                  }
                  else
                  {
                    int v200 = 0;
                    uint64_t v201 = v191[2];
                    int v202 = *a5;
                    uint64_t v203 = v198 - v197[2] * v201;
                    do
                    {
                      if ((int)v201 < 1)
                      {
                        uint64_t v206 = result;
                      }
                      else
                      {
                        uint64_t v204 = v202[2];
                        int v205 = v201;
                        do
                        {
                          uint64_t v206 = result + 1;
                          *(unsigned char *)(v195 + result) = *(unsigned char *)(v194 + v38);
                          v38 += v204;
                          ++result;
                          --v205;
                        }
                        while (v205);
                      }
                      v38 += v203;
                      ++v200;
                      uint64_t result = v206;
                    }
                    while (v200 != v196);
                  }
                  v38 += v199;
                  ++v193;
                  uint64_t result = v206;
                }
                while (v193 != v192);
              }
              break;
            case 4:
              uint64_t v207 = *a4;
              int v208 = **a4;
              if (v208 >= 1)
              {
                int v209 = 0;
                uint64_t result = 0;
                uint64_t v210 = *(void *)(v39 + 152);
                uint64_t v211 = v8[19];
                uint64_t v212 = v207[1];
                int v213 = *a5;
                uint64_t v214 = (*a5)[1];
                uint64_t v215 = **a5 - v214 * v212;
                do
                {
                  if ((int)v212 < 1)
                  {
                    uint64_t v226 = result;
                  }
                  else
                  {
                    int v216 = 0;
                    uint64_t v217 = v207[2];
                    uint64_t v218 = *a5;
                    uint64_t v219 = v214 - v213[2] * v217;
                    do
                    {
                      if ((int)v217 < 1)
                      {
                        uint64_t v226 = result;
                      }
                      else
                      {
                        int v220 = 0;
                        uint64_t v221 = v207[3];
                        uint64_t v222 = *a5;
                        uint64_t v223 = v218[2] - v218[3] * v221;
                        do
                        {
                          if ((int)v221 < 1)
                          {
                            uint64_t v226 = result;
                          }
                          else
                          {
                            uint64_t v224 = v222[3];
                            int v225 = v221;
                            do
                            {
                              uint64_t v226 = result + 1;
                              *(unsigned char *)(v211 + result) = *(unsigned char *)(v210 + v38);
                              v38 += v224;
                              ++result;
                              --v225;
                            }
                            while (v225);
                          }
                          v38 += v223;
                          ++v220;
                          uint64_t result = v226;
                        }
                        while (v220 != v217);
                      }
                      v38 += v219;
                      ++v216;
                      uint64_t result = v226;
                    }
                    while (v216 != v212);
                  }
                  v38 += v215;
                  ++v209;
                  uint64_t result = v226;
                }
                while (v209 != v208);
              }
              break;
            default:
              uint64_t v172 = v8[6];
              if (v172)
              {
                uint64_t v173 = 0;
                uint64_t v174 = *(void *)(v39 + 152) + v38;
                uint64_t v175 = v8[19];
                uint64_t v176 = *a4;
                uint64_t v177 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v178 = *a5;
                do
                {
                  uint64_t v179 = 0;
                  if ((v177 & 0x80000000) == 0)
                  {
                    uint64_t v180 = v177;
                    LODWORD(result) = v173;
                    do
                    {
                      ldiv_t v181 = ldiv((int)result, v176[v180]);
                      uint64_t result = v181.quot;
                      v179 += v178[v180--] * v181.rem;
                    }
                    while (v180 != -1);
                  }
                  *(unsigned char *)(v175 + v173++) = *(unsigned char *)(v174 + v179);
                }
                while (v173 != v172);
              }
              break;
          }
          break;
        case 3:
          uint64_t v44 = *a7;
          uint64_t v45 = *a8;
          uint64_t v46 = *(void **)result;
          uint64_t v47 = v46[1] - *v46;
          switch(v47 >> 2)
          {
            case 1:
              uint64_t v48 = (v47 << 30) - 0x100000000;
              int v49 = *(int *)((char *)*a4 + (v48 >> 30));
              if (v49 >= 1)
              {
                uint64_t v50 = v48 >> 29;
                uint64_t v51 = *(uint64_t *)((char *)*a5 + (v48 >> 29));
                uint64_t v52 = *(void *)(*a6 + v50);
                uint64_t v53 = (unsigned char *)(v8[19] + v45);
                uint64_t v54 = (unsigned char *)(v46[19] + v44);
                do
                {
                  *uint64_t v53 = *v54;
                  v54 += v51;
                  v53 += v52;
                  --v49;
                }
                while (v49);
              }
              break;
            case 2:
              uint64_t v571 = (v47 << 30) - 0x200000000;
              int v572 = *(int *)((char *)*a4 + (v571 >> 30));
              if (v572 >= 1)
              {
                int v573 = 0;
                uint64_t v574 = v571 >> 29;
                uint64_t v575 = *(uint64_t *)((char *)*a5 + (v571 >> 29));
                uint64_t v576 = *(void *)(*a6 + v574);
                uint64_t v577 = (v47 << 30) - 0x100000000;
                uint64_t result = v577 >> 29;
                uint64_t v578 = *(uint64_t *)((char *)*a5 + (v577 >> 29));
                uint64_t v579 = *(void *)(*a6 + (v577 >> 29));
                int v580 = *(int *)((char *)*a4 + (v577 >> 30));
                do
                {
                  if (v580 >= 1)
                  {
                    uint64_t v581 = v8[19];
                    uint64_t v582 = v46[19];
                    LODWORD(result) = v580;
                    do
                    {
                      *(unsigned char *)(v581 + v45) = *(unsigned char *)(v582 + v44);
                      v581 += v579;
                      v582 += v578;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v44 += v575;
                  v45 += v576;
                  ++v573;
                }
                while (v573 != v572);
              }
              break;
            case 3:
              uint64_t v583 = (v47 << 30) - 0x300000000;
              uint64_t v584 = *a4;
              int v585 = *(int *)((char *)*a4 + (v583 >> 30));
              if (v585 >= 1)
              {
                int v586 = 0;
                uint64_t v587 = v47 << 30;
                int v588 = *a5;
                uint64_t v589 = v583 >> 29;
                uint64_t v590 = *(uint64_t *)((char *)*a5 + (v583 >> 29));
                uint64_t v591 = *a6;
                uint64_t v592 = *(void *)(*a6 + v589);
                uint64_t v593 = v587 - 0x200000000;
                uint64_t v594 = (v587 - 0x200000000) >> 29;
                uint64_t v595 = v587 - 0x100000000;
                uint64_t v596 = *(uint64_t *)((char *)*a5 + v594);
                uint64_t v597 = *(void *)(*a6 + v594);
                int v598 = *(int *)((char *)v584 + (v593 >> 30));
                uint64_t result = v595 >> 32;
                do
                {
                  if (v598 >= 1)
                  {
                    int v599 = 0;
                    uint64_t v600 = v588[result];
                    uint64_t v601 = *(void *)(v591 + 8 * result);
                    uint64_t v602 = v44;
                    int v603 = v584[result];
                    uint64_t v604 = v45;
                    uint64_t v605 = *a2;
                    do
                    {
                      if (v603 >= 1)
                      {
                        uint64_t v606 = v605[19];
                        uint64_t v607 = v46[19];
                        int v608 = v603;
                        do
                        {
                          *(unsigned char *)(v606 + v604) = *(unsigned char *)(v607 + v602);
                          v606 += v601;
                          v607 += v600;
                          --v608;
                        }
                        while (v608);
                      }
                      v602 += v596;
                      v604 += v597;
                      ++v599;
                    }
                    while (v599 != v598);
                  }
                  v44 += v590;
                  v45 += v592;
                  ++v586;
                }
                while (v586 != v585);
              }
              break;
            case 4:
              uint64_t v609 = (v47 << 30) - 0x400000000;
              uint64_t v610 = *a4;
              int v1532 = *(int *)((char *)*a4 + (v609 >> 30));
              if (v1532 >= 1)
              {
                int v611 = 0;
                uint64_t v612 = *a5;
                uint64_t v613 = v609 >> 29;
                uint64_t v1499 = *(uint64_t *)((char *)*a5 + v613);
                uint64_t v614 = *a6;
                uint64_t v1516 = *(void *)(*a6 + v613);
                uint64_t v615 = v47 << 30;
                uint64_t v616 = (v47 << 30) - 0x300000000;
                uint64_t v617 = *(uint64_t *)((char *)*a5 + (v616 >> 29));
                uint64_t v618 = *(void *)(*a6 + (v616 >> 29));
                int v619 = *(int *)((char *)v610 + (v616 >> 30));
                uint64_t v1482 = (v615 - 0x200000000) >> 32;
                uint64_t v620 = (v615 - 0x100000000) >> 32;
                do
                {
                  uint64_t result = v45;
                  uint64_t v621 = v44;
                  if (v619 >= 1)
                  {
                    int v622 = 0;
                    uint64_t v623 = v612[v1482];
                    uint64_t v624 = *(void *)(v614 + 8 * v1482);
                    uint64_t v625 = v44;
                    int v626 = v610[v1482];
                    uint64_t v627 = v45;
                    do
                    {
                      if (v626 >= 1)
                      {
                        int v628 = 0;
                        uint64_t v629 = v612[v620];
                        uint64_t v630 = *(void *)(v614 + 8 * v620);
                        uint64_t v631 = v625;
                        int v632 = v610[v620];
                        uint64_t v633 = v627;
                        uint64_t v634 = *a2;
                        do
                        {
                          if (v632 >= 1)
                          {
                            uint64_t v635 = v634[19];
                            uint64_t v636 = v46[19];
                            int v637 = v632;
                            do
                            {
                              *(unsigned char *)(v635 + v633) = *(unsigned char *)(v636 + v631);
                              v635 += v630;
                              v636 += v629;
                              --v637;
                            }
                            while (v637);
                          }
                          v631 += v623;
                          v633 += v624;
                          ++v628;
                        }
                        while (v628 != v626);
                      }
                      v625 += v617;
                      v627 += v618;
                      ++v622;
                    }
                    while (v622 != v619);
                  }
                  uint64_t v44 = v621 + v1499;
                  uint64_t v45 = result + v1516;
                  ++v611;
                }
                while (v611 != v1532);
              }
              break;
            case 5:
              uint64_t v638 = (v47 << 30) - 0x500000000;
              int v639 = *a4;
              int v1458 = *(int *)((char *)*a4 + (v638 >> 30));
              if (v1458 >= 1)
              {
                int v1470 = 0;
                uint64_t v640 = v47 << 30;
                int v641 = *a5;
                uint64_t v642 = v638 >> 29;
                uint64_t v643 = *a6;
                uint64_t v1438 = *(void *)(*a6 + v642);
                uint64_t v1448 = *(uint64_t *)((char *)*a5 + v642);
                uint64_t v644 = ((v47 << 30) - 0x400000000) >> 29;
                uint64_t v1500 = *(void *)(*a6 + v644);
                uint64_t v1517 = *(uint64_t *)((char *)*a5 + v644);
                int v1533 = *(int *)((char *)v639 + ((v640 - 0x400000000) >> 30));
                uint64_t v1428 = (v640 - 0x300000000) >> 32;
                uint64_t v1483 = (v640 - 0x200000000) >> 32;
                uint64_t v645 = (v640 - 0x100000000) >> 32;
                do
                {
                  uint64_t v1396 = v45;
                  uint64_t v1406 = v44;
                  if (v1533 >= 1)
                  {
                    int v646 = 0;
                    uint64_t v647 = v641[v1428];
                    uint64_t v648 = *(void *)(v643 + 8 * v1428);
                    uint64_t result = v45;
                    uint64_t v649 = v44;
                    int v650 = v639[v1428];
                    do
                    {
                      if (v650 >= 1)
                      {
                        int v651 = 0;
                        uint64_t v652 = v641[v1483];
                        uint64_t v653 = *(void *)(v643 + 8 * v1483);
                        uint64_t v654 = v649;
                        int v655 = v639[v1483];
                        uint64_t v656 = result;
                        do
                        {
                          if (v655 >= 1)
                          {
                            int v657 = 0;
                            uint64_t v658 = v641[v645];
                            uint64_t v659 = *(void *)(v643 + 8 * v645);
                            uint64_t v660 = v654;
                            int v661 = v639[v645];
                            uint64_t v662 = v656;
                            int v663 = *a2;
                            do
                            {
                              if (v661 >= 1)
                              {
                                uint64_t v664 = v663[19];
                                uint64_t v665 = v46[19];
                                int v666 = v661;
                                do
                                {
                                  *(unsigned char *)(v664 + v662) = *(unsigned char *)(v665 + v660);
                                  v664 += v659;
                                  v665 += v658;
                                  --v666;
                                }
                                while (v666);
                              }
                              v660 += v652;
                              v662 += v653;
                              ++v657;
                            }
                            while (v657 != v655);
                          }
                          v654 += v647;
                          v656 += v648;
                          ++v651;
                        }
                        while (v651 != v650);
                      }
                      v649 += v1517;
                      result += v1500;
                      ++v646;
                    }
                    while (v646 != v1533);
                  }
                  uint64_t v44 = v1406 + v1448;
                  uint64_t v45 = v1396 + v1438;
                  ++v1470;
                }
                while (v1470 != v1458);
              }
              break;
            default:
              uint64_t v534 = (char *)a4[1];
              LODWORD(v535) = 1;
              uint64_t v536 = -20;
              do
              {
                uint64_t v535 = *(int *)&v534[v536] * (uint64_t)(int)v535;
                v536 += 4;
              }
              while (v536);
              unint64_t v1388 = v46[6];
              if (v1388)
              {
                uint64_t v537 = 0;
                uint64_t v538 = (v47 << 30) - 0x500000000;
                int v539 = *a4;
                uint64_t v1365 = *v8;
                uint64_t v540 = *a5;
                uint64_t v1370 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1375 = ((unint64_t)(v534 - (char *)*a4) >> 2) - 1;
                uint64_t v541 = *a6;
                uint64_t v1418 = *(void *)(*a6 + (v538 >> 29));
                uint64_t v1427 = *(uint64_t *)((char *)*a5 + (v538 >> 29));
                int v1437 = *(int *)((char *)*a4 + (v538 >> 30));
                uint64_t v1360 = ((v47 << 30) - 0x400000000) >> 32;
                uint64_t v1405 = *a7;
                uint64_t v1412 = ((v47 << 30) - 0x300000000) >> 32;
                uint64_t v1481 = ((v47 << 30) - 0x200000000) >> 32;
                uint64_t v542 = ((v47 << 30) - 0x100000000) >> 32;
                uint64_t v1395 = *a8;
                uint64_t v1380 = v535;
                do
                {
                  uint64_t v543 = v1375;
                  if ((v1375 & 0x80000000) != 0)
                  {
                    uint64_t v544 = 0;
                  }
                  else
                  {
                    uint64_t v544 = 0;
                    LODWORD(result) = v537;
                    do
                    {
                      ldiv_t v545 = ldiv((int)result, v539[v543]);
                      uint64_t result = v545.quot;
                      v544 += v540[v543--] * v545.rem;
                    }
                    while (v543 != -1);
                  }
                  uint64_t v546 = v1370;
                  uint64_t v1391 = v537;
                  uint64_t v547 = 0;
                  if ((v1370 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v537;
                    do
                    {
                      ldiv_t v548 = ldiv((int)result, *(int *)(v1365 + 4 * v546));
                      uint64_t result = v548.quot;
                      v547 += *(void *)(v541 + 8 * v546--) * v548.rem;
                    }
                    while (v546 != -1);
                  }
                  if (v1437 >= 1)
                  {
                    int v549 = 0;
                    uint64_t v1469 = v544 + v1405;
                    uint64_t v1457 = v547 + v1395;
                    uint64_t v1498 = *(void *)(v541 + 8 * v1360);
                    uint64_t v1515 = v540[v1360];
                    int v1531 = v539[v1360];
                    do
                    {
                      int v1447 = v549;
                      if (v1531 >= 1)
                      {
                        int v550 = 0;
                        uint64_t v551 = v540[v1412];
                        uint64_t v552 = *(void *)(v541 + 8 * v1412);
                        uint64_t v554 = v1457;
                        uint64_t v553 = v1469;
                        uint64_t result = v539[v1412];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            int v555 = 0;
                            uint64_t v556 = v540[v1481];
                            uint64_t v557 = *(void *)(v541 + 8 * v1481);
                            uint64_t v558 = v553;
                            int v559 = v539[v1481];
                            uint64_t v560 = v554;
                            do
                            {
                              if (v559 >= 1)
                              {
                                int v561 = 0;
                                uint64_t v562 = v540[v542];
                                uint64_t v563 = *(void *)(v541 + 8 * v542);
                                uint64_t v564 = v558;
                                int v565 = v539[v542];
                                uint64_t v566 = v560;
                                uint64_t v567 = *a2;
                                do
                                {
                                  if (v565 >= 1)
                                  {
                                    uint64_t v568 = v567[19];
                                    uint64_t v569 = v46[19];
                                    int v570 = v565;
                                    do
                                    {
                                      *(unsigned char *)(v568 + v566) = *(unsigned char *)(v569 + v564);
                                      v568 += v563;
                                      v569 += v562;
                                      --v570;
                                    }
                                    while (v570);
                                  }
                                  v564 += v556;
                                  v566 += v557;
                                  ++v561;
                                }
                                while (v561 != v559);
                              }
                              v558 += v551;
                              v560 += v552;
                              ++v555;
                            }
                            while (v555 != result);
                          }
                          v553 += v1515;
                          v554 += v1498;
                          ++v550;
                        }
                        while (v550 != v1531);
                      }
                      v1469 += v1427;
                      v1457 += v1418;
                      int v549 = v1447 + 1;
                    }
                    while (v1447 + 1 != v1437);
                  }
                  v537 += v1380;
                }
                while (v1388 > v1391 + v1380);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v17 = 0;
            char v18 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v19 = v8[19];
            do
              *(unsigned char *)(v19 + v17++) = v18;
            while ((*a2)[6] > v17);
          }
          break;
        case 1:
          goto LABEL_39;
        case 2:
          uint64_t v55 = *a7;
          uint64_t v56 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v57 = 0;
                uint64_t v58 = *(void *)(v56 + 152);
                uint64_t v59 = v8[19];
                do
                {
                  *(unsigned char *)(v59 + v57) = *(unsigned char *)(v58 + v55);
                  v55 += **a5;
                  ++v57;
                }
                while (**a4 > (int)v57);
              }
              break;
            case 2:
              int v236 = *a4;
              int v237 = **a4;
              if (v237 >= 1)
              {
                int v238 = 0;
                uint64_t v239 = 0;
                uint64_t v240 = *(void *)(v56 + 152);
                uint64_t v241 = v8[19];
                do
                {
                  int v242 = v236[1];
                  if (v242 < 1)
                  {
                    int v243 = *a5;
                    uint64_t v244 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v241 + v239 + result) = *(unsigned char *)(v240 + v55);
                      int v243 = *a5;
                      uint64_t v244 = (*a5)[1];
                      v55 += v244;
                      int v236 = *a4;
                      int v242 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v242);
                    int v237 = *v236;
                    v239 += result;
                  }
                  uint64_t v55 = *v243 + v55 - v244 * v242;
                  ++v238;
                }
                while (v238 < v237);
              }
              break;
            case 3:
              uint64_t v245 = *a4;
              int v246 = **a4;
              if (v246 >= 1)
              {
                int v247 = 0;
                uint64_t v248 = 0;
                uint64_t v249 = *(void *)(v56 + 152);
                uint64_t v250 = v8[19];
                do
                {
                  int v251 = v245[1];
                  if (v251 < 1)
                  {
                    uint64_t v255 = *a5;
                    uint64_t v256 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v251; ++i)
                    {
                      int v253 = v245[2];
                      if (v253 < 1)
                      {
                        uint64_t v255 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v254 = 0;
                        do
                        {
                          *(unsigned char *)(v250 + v248 + v254) = *(unsigned char *)(v249 + v55);
                          uint64_t v255 = *a5;
                          uint64_t result = (*a5)[2];
                          v55 += result;
                          uint64_t v245 = *a4;
                          int v253 = (*a4)[2];
                          ++v254;
                        }
                        while ((int)v254 < v253);
                        v248 += v254;
                      }
                      uint64_t v256 = v255[1];
                      uint64_t v55 = v256 + v55 - result * v253;
                      int v251 = v245[1];
                    }
                    int v246 = *v245;
                  }
                  uint64_t v55 = *v255 + v55 - v256 * v251;
                  ++v247;
                }
                while (v247 < v246);
              }
              break;
            case 4:
              uint64_t v257 = *a4;
              int v258 = **a4;
              if (v258 >= 1)
              {
                int v259 = 0;
                uint64_t v260 = 0;
                uint64_t v261 = *(void *)(v56 + 152);
                uint64_t v262 = v8[19];
                do
                {
                  int v263 = v257[1];
                  if (v263 < 1)
                  {
                    int v269 = *a5;
                    uint64_t v271 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v263; ++j)
                    {
                      int v265 = v257[2];
                      if (v265 < 1)
                      {
                        int v269 = *a5;
                        uint64_t v270 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v265; ++k)
                        {
                          int v267 = v257[3];
                          if (v267 < 1)
                          {
                            int v269 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v268 = 0;
                            do
                            {
                              *(unsigned char *)(v262 + v260 + v268) = *(unsigned char *)(v261 + v55);
                              int v269 = *a5;
                              uint64_t result = (*a5)[3];
                              v55 += result;
                              uint64_t v257 = *a4;
                              int v267 = (*a4)[3];
                              ++v268;
                            }
                            while ((int)v268 < v267);
                            v260 += v268;
                          }
                          uint64_t v270 = v269[2];
                          uint64_t v55 = v270 + v55 - result * v267;
                          int v265 = v257[2];
                        }
                      }
                      uint64_t v271 = v269[1];
                      uint64_t v55 = v271 + v55 - v270 * v265;
                      int v263 = v257[1];
                    }
                    int v258 = *v257;
                  }
                  uint64_t v55 = *v269 + v55 - v271 * v263;
                  ++v259;
                }
                while (v259 < v258);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v227 = 0;
                uint64_t v228 = *(void *)(v56 + 152) + v55;
                uint64_t v229 = v8[19];
                do
                {
                  int v230 = *a4;
                  unint64_t v231 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v232 = 0;
                  uint64_t v233 = (v231 - 1);
                  if ((int)v231 - 1 >= 0)
                  {
                    uint64_t v234 = *a5;
                    LODWORD(result) = v227;
                    do
                    {
                      ldiv_t v235 = ldiv((int)result, v230[v233]);
                      uint64_t result = v235.quot;
                      v232 += v234[v233--] * v235.rem;
                    }
                    while (v233 != -1);
                  }
                  *(unsigned char *)(v229 + v227++) = *(unsigned char *)(v228 + v232);
                }
                while (v227 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v60 = *a7;
          uint64_t v61 = *a8;
          uint64_t v62 = *(void **)result;
          uint64_t v63 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v63 >> 2)
          {
            case 1:
              uint64_t v64 = (v63 << 30) - 0x100000000;
              int v65 = *(int *)((char *)*a4 + (v64 >> 30));
              if (v65 >= 1)
              {
                uint64_t v66 = v64 >> 29;
                uint64_t v67 = *(uint64_t *)((char *)*a5 + (v64 >> 29));
                uint64_t v68 = *(void *)(*a6 + v66);
                uint64_t v69 = (unsigned char *)(v8[19] + v61);
                uint64_t v70 = (unsigned char *)(v62[19] + v60);
                do
                {
                  *uint64_t v69 = *v70;
                  v70 += v67;
                  v69 += v68;
                  --v65;
                }
                while (v65);
              }
              break;
            case 2:
              uint64_t v689 = (v63 << 30) - 0x200000000;
              int v690 = *(int *)((char *)*a4 + (v689 >> 30));
              if (v690 >= 1)
              {
                int v691 = 0;
                uint64_t v692 = v689 >> 29;
                uint64_t v693 = *(uint64_t *)((char *)*a5 + (v689 >> 29));
                uint64_t v694 = *(void *)(*a6 + v692);
                do
                {
                  uint64_t v695 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                  int v696 = *(int *)((char *)*a4 + (v695 >> 30));
                  if (v696 >= 1)
                  {
                    uint64_t v697 = v695 >> 29;
                    uint64_t v698 = *(uint64_t *)((char *)*a5 + (v695 >> 29));
                    uint64_t v699 = *(void *)(*a6 + v697);
                    uint64_t v700 = (*a2)[19];
                    uint64_t v701 = *(void *)(*(void *)v13 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v701 + v60);
                      *(unsigned char *)(v700 + v61) = result;
                      v700 += v699;
                      v701 += v698;
                      --v696;
                    }
                    while (v696);
                  }
                  v60 += v693;
                  v61 += v694;
                  ++v691;
                }
                while (v691 != v690);
              }
              break;
            case 3:
              uint64_t v702 = (v63 << 30) - 0x300000000;
              int v703 = *(int *)((char *)*a4 + (v702 >> 30));
              if (v703 >= 1)
              {
                int v704 = 0;
                uint64_t v705 = v702 >> 29;
                uint64_t v706 = *(uint64_t *)((char *)*a5 + (v702 >> 29));
                uint64_t v707 = *(void *)(*a6 + v705);
                do
                {
                  uint64_t v708 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x200000000;
                  int v709 = *(int *)((char *)*a4 + (v708 >> 30));
                  if (v709 >= 1)
                  {
                    int v710 = 0;
                    uint64_t v711 = v708 >> 29;
                    uint64_t v712 = *(uint64_t *)((char *)*a5 + (v708 >> 29));
                    uint64_t v713 = *(void *)(*v9 + v711);
                    uint64_t result = v60;
                    uint64_t v714 = v61;
                    do
                    {
                      uint64_t v715 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                      int v716 = *(int *)((char *)*a4 + (v715 >> 30));
                      if (v716 >= 1)
                      {
                        uint64_t v717 = v715 >> 29;
                        uint64_t v718 = *(uint64_t *)((char *)*a5 + (v715 >> 29));
                        uint64_t v719 = *(void *)(*v9 + v717);
                        uint64_t v720 = (*a2)[19];
                        uint64_t v721 = *(void *)(*(void *)v13 + 152);
                        do
                        {
                          *(unsigned char *)(v720 + v714) = *(unsigned char *)(v721 + result);
                          v720 += v719;
                          v721 += v718;
                          --v716;
                        }
                        while (v716);
                      }
                      result += v712;
                      v714 += v713;
                      ++v710;
                    }
                    while (v710 != v709);
                  }
                  v60 += v706;
                  v61 += v707;
                  ++v704;
                }
                while (v704 != v703);
              }
              break;
            case 4:
              ldiv_t v722 = a4;
              uint64_t v723 = a5;
              int v724 = a6;
              uint64_t v725 = *a7;
              uint64_t v726 = *a8;
              goto LABEL_577;
            case 5:
              uint64_t v727 = (v63 << 30) - 0x500000000;
              int v728 = *(int *)((char *)*a4 + (v727 >> 30));
              if (v728 >= 1)
              {
                uint64_t v729 = v727 >> 29;
                uint64_t v730 = *(uint64_t *)((char *)*a5 + v729);
                uint64_t v731 = *(void *)(*a6 + v729);
                do
                {
                  v60 += v730;
                  v61 += v731;
                  --v728;
                }
                while (v728);
              }
              break;
            default:
              LODWORD(v667) = 1;
              uint64_t v668 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v667 = a4[1][v668++] * (uint64_t)(int)v667;
              while (v668 * 4);
              if (v62[6])
              {
                uint64_t result = 0;
                uint64_t v1459 = *a8;
                uint64_t v1471 = *a7;
                uint64_t v1484 = v667;
                do
                {
                  int v669 = *a4;
                  unint64_t v670 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v671 = (v670 - 1);
                  uint64_t v1501 = v62;
                  uint64_t v1534 = result;
                  uint64_t v672 = 0;
                  if ((int)v670 - 1 >= 0)
                  {
                    uint64_t v673 = *a5;
                    do
                    {
                      ldiv_t v674 = ldiv((int)result, v669[v671]);
                      LODWORD(result) = v674.quot;
                      v672 += v673[v671--] * v674.rem;
                    }
                    while (v671 != -1);
                  }
                  uint64_t v675 = **a2;
                  unint64_t v676 = (unint64_t)((*a2)[1] - v675) >> 2;
                  uint64_t v677 = *v9;
                  uint64_t v678 = 0;
                  uint64_t v679 = (v676 - 1);
                  if ((int)v676 - 1 >= 0)
                  {
                    int quot = v1534;
                    do
                    {
                      ldiv_t v681 = ldiv(quot, *(int *)(v675 + 4 * v679));
                      int quot = v681.quot;
                      v678 += *(void *)(v677 + 8 * v679--) * v681.rem;
                    }
                    while (v679 != -1);
                  }
                  uint64_t v62 = v1501;
                  uint64_t v682 = ((v62[1] - *v62) << 30) - 0x500000000;
                  int v683 = *(int *)((char *)v669 + (v682 >> 30));
                  if (v683 >= 1)
                  {
                    uint64_t v684 = v672 + v1471;
                    uint64_t v685 = v682 >> 29;
                    uint64_t v686 = *(uint64_t *)((char *)*a5 + v685);
                    uint64_t v687 = *(void *)(v677 + v685);
                    uint64_t v688 = v678 + v1459;
                    do
                    {
                      v684 += v686;
                      v688 += v687;
                      --v683;
                    }
                    while (v683);
                    uint64_t v62 = *(void **)v13;
                  }
                  uint64_t v9 = a6;
                  uint64_t result = v1534 + v1484;
                }
                while (v62[6] > (unint64_t)(v1534 + v1484));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v20 = v8[6];
          if (v20)
          {
            int v21 = **(unsigned __int8 **)(*(void *)result + 152);
            int v22 = (_DWORD *)v8[19];
            do
            {
              *v22++ = v21;
              --v20;
            }
            while (v20);
          }
          break;
        case 1:
          uint64_t v71 = *(void *)(*(void *)result + 160);
          if (v71)
          {
            uint64_t v72 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v73 = (_DWORD *)v8[19];
            do
            {
              int v74 = *v72++;
              *v73++ = v74;
              --v71;
            }
            while (v71);
          }
          break;
        case 2:
          uint64_t v75 = *a7;
          uint64_t v76 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v77 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v78 = 0;
                uint64_t v79 = v8[19];
                uint64_t v80 = **a5;
                uint64_t v81 = (unsigned __int8 *)(*(void *)(v76 + 152) + v75);
                do
                {
                  *(_DWORD *)(v79 + 4 * v78) = *v81;
                  v81 += v80;
                  ++v78;
                }
                while (*v77 > (int)v78);
              }
              break;
            case 2:
              uint64_t v282 = *a4;
              int v283 = **a4;
              if (v283 >= 1)
              {
                int v284 = 0;
                uint64_t v285 = 0;
                uint64_t v286 = *(void *)(v76 + 152);
                uint64_t v287 = v8[19];
                uint64_t v288 = **a5;
                uint64_t v289 = (*a5)[1];
                int v290 = v282[1];
                do
                {
                  if (v290 >= 1)
                  {
                    uint64_t v291 = 0;
                    do
                    {
                      *(_DWORD *)(v287 + 4 * v285 + 4 * v291) = *(unsigned __int8 *)(v286 + v75);
                      v75 += v289;
                      int v290 = v282[1];
                      ++v291;
                    }
                    while ((int)v291 < v290);
                    int v283 = *v282;
                    v285 += v291;
                  }
                  uint64_t result = v290;
                  uint64_t v75 = v75 + v288 - v289 * v290;
                  ++v284;
                }
                while (v284 < v283);
              }
              break;
            case 3:
              int v292 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v293 = 0;
                uint64_t v294 = 0;
                uint64_t v295 = *(void *)(v76 + 152);
                uint64_t v296 = v8[19];
                uint64_t v297 = *a5;
                uint64_t v298 = **a5;
                uint64_t v299 = (*a5)[1];
                int v300 = v292[1];
                do
                {
                  if (v300 >= 1)
                  {
                    int v301 = 0;
                    uint64_t v302 = *a5;
                    uint64_t v303 = v297[2];
                    int v304 = v292[2];
                    do
                    {
                      if (v304 >= 1)
                      {
                        uint64_t v305 = 0;
                        uint64_t v306 = v302[2];
                        do
                        {
                          *(_DWORD *)(v296 + 4 * v294 + 4 * v305) = *(unsigned __int8 *)(v295 + v75);
                          v75 += v306;
                          int v304 = v292[2];
                          ++v305;
                        }
                        while ((int)v305 < v304);
                        int v300 = v292[1];
                        v294 += v305;
                      }
                      uint64_t v75 = v75 + v299 - v303 * v304;
                      ++v301;
                    }
                    while (v301 < v300);
                    uint64_t result = *v292;
                  }
                  uint64_t v75 = v75 + v298 - v299 * v300;
                  ++v293;
                }
                while (v293 < (int)result);
              }
              break;
            case 4:
              uint64_t v307 = *a4;
              int v308 = **a4;
              if (v308 >= 1)
              {
                int v309 = 0;
                uint64_t v310 = 0;
                uint64_t v311 = *(void *)(v76 + 152);
                uint64_t v312 = v8[19];
                int v313 = *a5;
                uint64_t v314 = **a5;
                uint64_t v315 = (*a5)[1];
                int v316 = v307[1];
                do
                {
                  if (v316 >= 1)
                  {
                    int v317 = 0;
                    uint64_t v318 = *a5;
                    uint64_t v319 = v313[2];
                    int v320 = v307[2];
                    do
                    {
                      if (v320 >= 1)
                      {
                        int v321 = 0;
                        uint64_t v322 = *a5;
                        uint64_t v323 = v318[2];
                        uint64_t v324 = v318[3];
                        int v325 = v307[3];
                        do
                        {
                          if (v325 >= 1)
                          {
                            uint64_t v326 = 0;
                            uint64_t v327 = v322[3];
                            do
                            {
                              *(_DWORD *)(v312 + 4 * v310 + 4 * v326) = *(unsigned __int8 *)(v311 + v75);
                              v75 += v327;
                              int v325 = v307[3];
                              ++v326;
                            }
                            while ((int)v326 < v325);
                            int v320 = v307[2];
                            v310 += v326;
                          }
                          uint64_t v75 = v75 + v323 - v324 * v325;
                          ++v321;
                        }
                        while (v321 < v320);
                        int v316 = v307[1];
                      }
                      uint64_t v75 = v75 + v315 - v319 * v320;
                      ++v317;
                    }
                    while (v317 < v316);
                    int v308 = *v307;
                  }
                  uint64_t result = v316;
                  uint64_t v75 = v75 + v314 - v315 * v316;
                  ++v309;
                }
                while (v309 < v308);
              }
              break;
            default:
              uint64_t v272 = v8[6];
              if (v272)
              {
                uint64_t v273 = 0;
                uint64_t v274 = *(void *)(v76 + 152) + v75;
                uint64_t v275 = v8[19];
                int v276 = *a4;
                uint64_t v277 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v278 = *a5;
                do
                {
                  uint64_t v279 = 0;
                  if ((v277 & 0x80000000) == 0)
                  {
                    uint64_t v280 = v277;
                    LODWORD(result) = v273;
                    do
                    {
                      ldiv_t v281 = ldiv((int)result, v276[v280]);
                      uint64_t result = v281.quot;
                      v279 += v278[v280--] * v281.rem;
                    }
                    while (v280 != -1);
                  }
                  *(_DWORD *)(v275 + 4 * v273++) = *(unsigned __int8 *)(v274 + v279);
                }
                while (v273 != v272);
              }
              break;
          }
          break;
        case 3:
          uint64_t v82 = *a7;
          uint64_t v1385 = *a8;
          uint64_t v83 = *(void **)result;
          uint64_t v84 = v83[1] - *v83;
          switch(v84 >> 2)
          {
            case 1:
              uint64_t v85 = (v84 << 30) - 0x100000000;
              int v86 = *(int *)((char *)*a4 + (v85 >> 30));
              if (v86 >= 1)
              {
                uint64_t v87 = v85 >> 29;
                uint64_t v88 = *(uint64_t *)((char *)*a5 + (v85 >> 29));
                uint64_t v89 = (_DWORD *)(v8[19] + 4 * v1385);
                uint64_t v90 = (unsigned __int8 *)(v83[19] + v82);
                uint64_t v91 = 4 * *(void *)(*a6 + v87);
                do
                {
                  *uint64_t v89 = *v90;
                  v90 += v88;
                  uint64_t v89 = (_DWORD *)((char *)v89 + v91);
                  --v86;
                }
                while (v86);
              }
              break;
            case 2:
              uint64_t v770 = (v84 << 30) - 0x200000000;
              uint64_t v771 = *a4;
              int v772 = *(int *)((char *)*a4 + (v770 >> 30));
              if (v772 >= 1)
              {
                int v773 = 0;
                uint64_t v774 = v770 >> 29;
                uint64_t v775 = *(uint64_t *)((char *)*a5 + (v770 >> 29));
                uint64_t v776 = *(void *)(*a6 + v774);
                uint64_t v777 = (v84 << 30) - 0x100000000;
                uint64_t v778 = *(uint64_t *)((char *)*a5 + (v777 >> 29));
                uint64_t v779 = *(void *)(*a6 + (v777 >> 29));
                uint64_t v780 = v777 >> 32;
                uint64_t v781 = 4 * v1385;
                uint64_t v782 = 4 * v776;
                uint64_t v783 = 4 * v779;
                do
                {
                  uint64_t result = v771[v780];
                  if ((int)result >= 1)
                  {
                    uint64_t v784 = v83[19];
                    uint64_t v785 = (_DWORD *)(v8[19] + v781);
                    do
                    {
                      *uint64_t v785 = *(unsigned __int8 *)(v784 + v82);
                      uint64_t v785 = (_DWORD *)((char *)v785 + v783);
                      v784 += v778;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v82 += v775;
                  ++v773;
                  v781 += v782;
                }
                while (v773 != v772);
              }
              break;
            case 3:
              uint64_t v786 = (v84 << 30) - 0x300000000;
              uint64_t v787 = *a4;
              int v788 = *(int *)((char *)*a4 + (v786 >> 30));
              if (v788 >= 1)
              {
                int v789 = 0;
                int v790 = *a5;
                uint64_t v791 = v786 >> 29;
                uint64_t v792 = *(uint64_t *)((char *)*a5 + (v786 >> 29));
                uint64_t v793 = v84 << 30;
                uint64_t v794 = *a6;
                uint64_t v795 = *(void *)(*a6 + v791);
                uint64_t v796 = (v793 - 0x200000000) >> 32;
                uint64_t v797 = (v793 - 0x200000000) >> 29;
                uint64_t v798 = v793 - 0x100000000;
                uint64_t v799 = *(uint64_t *)((char *)*a5 + v797);
                uint64_t v800 = *(void *)(*a6 + v797);
                uint64_t v801 = v798 >> 32;
                uint64_t v802 = 4 * v1385;
                uint64_t result = 4 * v795;
                uint64_t v803 = 4 * v800;
                do
                {
                  int v804 = v787[v796];
                  if (v804 >= 1)
                  {
                    int v805 = 0;
                    uint64_t v806 = v790[v801];
                    uint64_t v807 = *a2;
                    uint64_t v808 = 4 * *(void *)(v794 + 8 * v801);
                    uint64_t v809 = v802;
                    uint64_t v810 = v82;
                    do
                    {
                      int v811 = v787[v801];
                      if (v811 >= 1)
                      {
                        uint64_t v812 = v83[19];
                        uint64_t v813 = (_DWORD *)(v807[19] + v809);
                        do
                        {
                          _DWORD *v813 = *(unsigned __int8 *)(v812 + v810);
                          uint64_t v813 = (_DWORD *)((char *)v813 + v808);
                          v812 += v806;
                          --v811;
                        }
                        while (v811);
                      }
                      v810 += v799;
                      ++v805;
                      v809 += v803;
                    }
                    while (v805 != v804);
                  }
                  v82 += v792;
                  ++v789;
                  v802 += result;
                }
                while (v789 != v788);
              }
              break;
            case 4:
              uint64_t v814 = (v84 << 30) - 0x400000000;
              int v815 = *a4;
              int v1536 = *(int *)((char *)*a4 + (v814 >> 30));
              if (v1536 >= 1)
              {
                int v816 = 0;
                uint64_t v817 = *a5;
                uint64_t v818 = v814 >> 29;
                uint64_t v1503 = *(uint64_t *)((char *)*a5 + v818);
                uint64_t v819 = *a6;
                uint64_t v820 = (v84 << 30) - 0x300000000;
                uint64_t v821 = (v84 << 30) - 0x200000000;
                uint64_t v822 = (v84 << 30) - 0x100000000;
                uint64_t v823 = *(uint64_t *)((char *)*a5 + (v820 >> 29));
                uint64_t v824 = v821 >> 32;
                uint64_t v825 = v822 >> 32;
                uint64_t result = 4 * v1385;
                uint64_t v1486 = 4 * *(void *)(*a6 + v818);
                uint64_t v826 = 4 * *(void *)(*a6 + (v820 >> 29));
                do
                {
                  uint64_t v827 = v82;
                  int v828 = v815[v820 >> 32];
                  if (v828 >= 1)
                  {
                    int v829 = 0;
                    uint64_t v830 = v817[v824];
                    uint64_t v831 = 4 * *(void *)(v819 + 8 * v824);
                    uint64_t v832 = result;
                    uint64_t v833 = v82;
                    do
                    {
                      int v834 = v815[v824];
                      if (v834 >= 1)
                      {
                        int v835 = 0;
                        uint64_t v836 = v817[v825];
                        int v837 = *a2;
                        uint64_t v838 = 4 * *(void *)(v819 + 8 * v825);
                        uint64_t v839 = v832;
                        uint64_t v840 = v833;
                        do
                        {
                          int v841 = v815[v825];
                          if (v841 >= 1)
                          {
                            uint64_t v842 = v83[19];
                            uint64_t v843 = (_DWORD *)(v837[19] + v839);
                            do
                            {
                              *uint64_t v843 = *(unsigned __int8 *)(v842 + v840);
                              uint64_t v843 = (_DWORD *)((char *)v843 + v838);
                              v842 += v836;
                              --v841;
                            }
                            while (v841);
                          }
                          v840 += v830;
                          ++v835;
                          v839 += v831;
                        }
                        while (v835 != v834);
                      }
                      v833 += v823;
                      ++v829;
                      v832 += v826;
                    }
                    while (v829 != v828);
                  }
                  uint64_t v82 = v827 + v1503;
                  ++v816;
                  result += v1486;
                }
                while (v816 != v1536);
              }
              break;
            case 5:
              uint64_t v844 = (v84 << 30) - 0x500000000;
              uint64_t v845 = *a4;
              int v1450 = *(int *)((char *)*a4 + (v844 >> 30));
              if (v1450 >= 1)
              {
                int v1461 = 0;
                uint64_t v846 = *a5;
                uint64_t v847 = v844 >> 29;
                uint64_t v1440 = *(uint64_t *)((char *)*a5 + v847);
                uint64_t v848 = v84 << 30;
                uint64_t v849 = *a6;
                uint64_t v1430 = (v848 - 0x400000000) >> 32;
                uint64_t v850 = (v848 - 0x400000000) >> 29;
                uint64_t v1504 = *(uint64_t *)((char *)*a5 + v850);
                uint64_t v1520 = (v848 - 0x300000000) >> 32;
                uint64_t v851 = (v848 - 0x200000000) >> 32;
                uint64_t result = (v848 - 0x100000000) >> 32;
                uint64_t v1420 = 4 * *(void *)(*a6 + v847);
                uint64_t v1473 = 4 * v1385;
                uint64_t v1487 = 4 * *(void *)(*a6 + v850);
                do
                {
                  uint64_t v1398 = v82;
                  int v1537 = v845[v1430];
                  if (v1537 >= 1)
                  {
                    int v852 = 0;
                    uint64_t v853 = v846[v1520];
                    uint64_t v854 = 4 * *(void *)(v849 + 8 * v1520);
                    uint64_t v855 = v1473;
                    uint64_t v856 = v82;
                    do
                    {
                      int v857 = v845[v1520];
                      if (v857 >= 1)
                      {
                        int v858 = 0;
                        uint64_t v859 = v846[v851];
                        uint64_t v860 = 4 * *(void *)(v849 + 8 * v851);
                        uint64_t v861 = v855;
                        uint64_t v862 = v856;
                        do
                        {
                          int v863 = v845[v851];
                          if (v863 >= 1)
                          {
                            int v864 = 0;
                            uint64_t v865 = v846[result];
                            uint64_t v866 = *a2;
                            uint64_t v867 = 4 * *(void *)(v849 + 8 * result);
                            uint64_t v868 = v861;
                            uint64_t v869 = v862;
                            do
                            {
                              int v870 = v845[result];
                              if (v870 >= 1)
                              {
                                uint64_t v871 = v83[19];
                                uint64_t v872 = (_DWORD *)(v866[19] + v868);
                                do
                                {
                                  *uint64_t v872 = *(unsigned __int8 *)(v871 + v869);
                                  uint64_t v872 = (_DWORD *)((char *)v872 + v867);
                                  v871 += v865;
                                  --v870;
                                }
                                while (v870);
                              }
                              v869 += v859;
                              ++v864;
                              v868 += v860;
                            }
                            while (v864 != v863);
                          }
                          v862 += v853;
                          ++v858;
                          v861 += v854;
                        }
                        while (v858 != v857);
                      }
                      v856 += v1504;
                      ++v852;
                      v855 += v1487;
                    }
                    while (v852 != v1537);
                  }
                  uint64_t v82 = v1398 + v1440;
                  v1473 += v1420;
                  ++v1461;
                }
                while (v1461 != v1450);
              }
              break;
            default:
              uint64_t v732 = (char *)a4[1];
              LODWORD(v733) = 1;
              uint64_t v734 = -20;
              do
              {
                uint64_t v733 = *(int *)&v732[v734] * (uint64_t)(int)v733;
                v734 += 4;
              }
              while (v734);
              unint64_t v1381 = v83[6];
              if (v1381)
              {
                uint64_t result = 0;
                uint64_t v735 = *a4;
                uint64_t v1371 = ((unint64_t)(v732 - (char *)*a4) >> 2) - 1;
                uint64_t v736 = *a5;
                uint64_t v1419 = *v8;
                uint64_t v1366 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v737 = (v84 << 30) - 0x500000000;
                uint64_t v738 = *a6;
                uint64_t v1413 = *(uint64_t *)((char *)*a5 + (v737 >> 29));
                uint64_t v1361 = v737 >> 32;
                uint64_t v1429 = ((v84 << 30) - 0x400000000) >> 32;
                uint64_t v1519 = ((v84 << 30) - 0x300000000) >> 32;
                uint64_t v739 = ((v84 << 30) - 0x200000000) >> 32;
                uint64_t v740 = ((v84 << 30) - 0x100000000) >> 32;
                uint64_t v1397 = *a7;
                uint64_t v1407 = 4 * *(void *)(*a6 + (v737 >> 29));
                uint64_t v1376 = v733;
                do
                {
                  uint64_t v741 = v1371;
                  uint64_t v1392 = result;
                  uint64_t v742 = 0;
                  if ((v1371 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v743 = ldiv((int)result, v735[v741]);
                      LODWORD(result) = v743.quot;
                      v742 += v736[v741--] * v743.rem;
                    }
                    while (v741 != -1);
                  }
                  uint64_t v744 = v1366;
                  if ((v1366 & 0x80000000) != 0)
                  {
                    uint64_t v745 = 0;
                  }
                  else
                  {
                    uint64_t v745 = 0;
                    int v746 = v1392;
                    do
                    {
                      ldiv_t v747 = ldiv(v746, *(int *)(v1419 + 4 * v744));
                      int v746 = v747.quot;
                      v745 += *(void *)(v738 + 8 * v744--) * v747.rem;
                    }
                    while (v744 != -1);
                  }
                  int v1439 = v735[v1361];
                  if (v1439 >= 1)
                  {
                    int v748 = 0;
                    uint64_t v1502 = v736[v1429];
                    uint64_t v1472 = v742 + v1397;
                    uint64_t v1460 = 4 * (v745 + v1385);
                    uint64_t v1485 = 4 * *(void *)(v738 + 8 * v1429);
                    do
                    {
                      int v1449 = v748;
                      int v1535 = v735[v1429];
                      if (v1535 >= 1)
                      {
                        int v749 = 0;
                        uint64_t v750 = v736[v1519];
                        uint64_t v751 = 4 * *(void *)(v738 + 8 * v1519);
                        uint64_t v753 = v1460;
                        uint64_t v752 = v1472;
                        do
                        {
                          int v754 = v735[v1519];
                          if (v754 >= 1)
                          {
                            int v755 = 0;
                            uint64_t v756 = v736[v739];
                            uint64_t v757 = 4 * *(void *)(v738 + 8 * v739);
                            uint64_t v758 = v753;
                            uint64_t v759 = v752;
                            do
                            {
                              int v760 = v735[v739];
                              if (v760 >= 1)
                              {
                                int v761 = 0;
                                uint64_t v762 = v736[v740];
                                uint64_t v763 = *a2;
                                uint64_t v764 = 4 * *(void *)(v738 + 8 * v740);
                                uint64_t v765 = v758;
                                uint64_t v766 = v759;
                                do
                                {
                                  int v767 = v735[v740];
                                  if (v767 >= 1)
                                  {
                                    uint64_t v768 = v83[19];
                                    uint64_t v769 = (_DWORD *)(v763[19] + v765);
                                    do
                                    {
                                      *uint64_t v769 = *(unsigned __int8 *)(v768 + v766);
                                      uint64_t v769 = (_DWORD *)((char *)v769 + v764);
                                      v768 += v762;
                                      --v767;
                                    }
                                    while (v767);
                                  }
                                  v766 += v756;
                                  ++v761;
                                  v765 += v757;
                                }
                                while (v761 != v760);
                              }
                              v759 += v750;
                              ++v755;
                              v758 += v751;
                            }
                            while (v755 != v754);
                          }
                          v752 += v1502;
                          ++v749;
                          v753 += v1485;
                        }
                        while (v749 != v1535);
                      }
                      v1472 += v1413;
                      int v748 = v1449 + 1;
                      v1460 += v1407;
                    }
                    while (v1449 + 1 != v1439);
                  }
                  uint64_t result = v1392 + v1376;
                }
                while (v1381 > v1392 + v1376);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v23 = 0;
            char v24 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v25 = v8[19];
            do
              *(unsigned char *)(v25 + v23++) = v24;
            while ((*a2)[6] > v23);
          }
          break;
        case 1:
LABEL_39:
          size_t v35 = *(void *)(*(void *)result + 160);
          if (v35)
          {
            int v36 = *(const void **)(*(void *)result + 152);
            uint64_t v37 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v37, v36, v35);
          }
          break;
        case 2:
          uint64_t v92 = *a7;
          uint64_t v93 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v94 = 0;
                uint64_t v95 = *(void *)(v93 + 152);
                uint64_t v96 = v8[19];
                do
                {
                  *(unsigned char *)(v96 + v94) = *(unsigned char *)(v95 + v92);
                  v92 += **a5;
                  ++v94;
                }
                while (**a4 > (int)v94);
              }
              break;
            case 2:
              uint64_t v337 = *a4;
              int v338 = **a4;
              if (v338 >= 1)
              {
                int v339 = 0;
                uint64_t v340 = 0;
                uint64_t v341 = *(void *)(v93 + 152);
                uint64_t v342 = v8[19];
                do
                {
                  int v343 = v337[1];
                  if (v343 < 1)
                  {
                    int v344 = *a5;
                    uint64_t v345 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v342 + v340 + result) = *(unsigned char *)(v341 + v92);
                      int v344 = *a5;
                      uint64_t v345 = (*a5)[1];
                      v92 += v345;
                      uint64_t v337 = *a4;
                      int v343 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v343);
                    int v338 = *v337;
                    v340 += result;
                  }
                  uint64_t v92 = *v344 + v92 - v345 * v343;
                  ++v339;
                }
                while (v339 < v338);
              }
              break;
            case 3:
              uint64_t v346 = *a4;
              int v347 = **a4;
              if (v347 >= 1)
              {
                int v348 = 0;
                uint64_t v349 = 0;
                uint64_t v350 = *(void *)(v93 + 152);
                uint64_t v351 = v8[19];
                do
                {
                  int v352 = v346[1];
                  if (v352 < 1)
                  {
                    uint64_t v356 = *a5;
                    uint64_t v357 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v352; ++m)
                    {
                      int v354 = v346[2];
                      if (v354 < 1)
                      {
                        uint64_t v356 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v355 = 0;
                        do
                        {
                          *(unsigned char *)(v351 + v349 + v355) = *(unsigned char *)(v350 + v92);
                          uint64_t v356 = *a5;
                          uint64_t result = (*a5)[2];
                          v92 += result;
                          uint64_t v346 = *a4;
                          int v354 = (*a4)[2];
                          ++v355;
                        }
                        while ((int)v355 < v354);
                        v349 += v355;
                      }
                      uint64_t v357 = v356[1];
                      uint64_t v92 = v357 + v92 - result * v354;
                      int v352 = v346[1];
                    }
                    int v347 = *v346;
                  }
                  uint64_t v92 = *v356 + v92 - v357 * v352;
                  ++v348;
                }
                while (v348 < v347);
              }
              break;
            case 4:
              uint64_t v358 = *a4;
              int v359 = **a4;
              if (v359 >= 1)
              {
                int v360 = 0;
                uint64_t v361 = 0;
                uint64_t v362 = *(void *)(v93 + 152);
                uint64_t v363 = v8[19];
                do
                {
                  int v364 = v358[1];
                  if (v364 < 1)
                  {
                    int v370 = *a5;
                    uint64_t v372 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v364; ++n)
                    {
                      int v366 = v358[2];
                      if (v366 < 1)
                      {
                        int v370 = *a5;
                        uint64_t v371 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v366; ++ii)
                        {
                          int v368 = v358[3];
                          if (v368 < 1)
                          {
                            int v370 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v369 = 0;
                            do
                            {
                              *(unsigned char *)(v363 + v361 + v369) = *(unsigned char *)(v362 + v92);
                              int v370 = *a5;
                              uint64_t result = (*a5)[3];
                              v92 += result;
                              uint64_t v358 = *a4;
                              int v368 = (*a4)[3];
                              ++v369;
                            }
                            while ((int)v369 < v368);
                            v361 += v369;
                          }
                          uint64_t v371 = v370[2];
                          uint64_t v92 = v371 + v92 - result * v368;
                          int v366 = v358[2];
                        }
                      }
                      uint64_t v372 = v370[1];
                      uint64_t v92 = v372 + v92 - v371 * v366;
                      int v364 = v358[1];
                    }
                    int v359 = *v358;
                  }
                  uint64_t v92 = *v370 + v92 - v372 * v364;
                  ++v360;
                }
                while (v360 < v359);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v328 = 0;
                uint64_t v329 = *(void *)(v93 + 152) + v92;
                uint64_t v330 = v8[19];
                do
                {
                  int v331 = *a4;
                  unint64_t v332 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v333 = 0;
                  uint64_t v334 = (v332 - 1);
                  if ((int)v332 - 1 >= 0)
                  {
                    uint64_t v335 = *a5;
                    LODWORD(result) = v328;
                    do
                    {
                      ldiv_t v336 = ldiv((int)result, v331[v334]);
                      uint64_t result = v336.quot;
                      v333 += v335[v334--] * v336.rem;
                    }
                    while (v334 != -1);
                  }
                  *(unsigned char *)(v330 + v328++) = *(unsigned char *)(v329 + v333);
                }
                while (v328 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v97 = *a7;
          uint64_t v98 = *a8;
          float v99 = *(void **)result;
          uint64_t v100 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v100 >> 2)
          {
            case 1:
              uint64_t v101 = (v100 << 30) - 0x100000000;
              int v102 = *(int *)((char *)*a4 + (v101 >> 30));
              if (v102 >= 1)
              {
                uint64_t v103 = v101 >> 29;
                uint64_t v104 = *(uint64_t *)((char *)*a5 + (v101 >> 29));
                uint64_t v105 = *(void *)(*a6 + v103);
                uint64_t v106 = (unsigned char *)(v8[19] + v98);
                uint64_t v107 = (unsigned char *)(v99[19] + v97);
                do
                {
                  unsigned char *v106 = *v107;
                  v107 += v104;
                  v106 += v105;
                  --v102;
                }
                while (v102);
              }
              break;
            case 2:
              uint64_t v895 = (v100 << 30) - 0x200000000;
              int v896 = *(int *)((char *)*a4 + (v895 >> 30));
              if (v896 >= 1)
              {
                int v897 = 0;
                uint64_t v898 = v895 >> 29;
                uint64_t v899 = *(uint64_t *)((char *)*a5 + (v895 >> 29));
                uint64_t v900 = *(void *)(*a6 + v898);
                do
                {
                  uint64_t v901 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                  int v902 = *(int *)((char *)*a4 + (v901 >> 30));
                  if (v902 >= 1)
                  {
                    uint64_t v903 = v901 >> 29;
                    uint64_t v904 = *(uint64_t *)((char *)*a5 + (v901 >> 29));
                    uint64_t v905 = *(void *)(*a6 + v903);
                    uint64_t v906 = (*a2)[19];
                    uint64_t v907 = *(void *)(*(void *)v13 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v907 + v97);
                      *(unsigned char *)(v906 + v98) = result;
                      v906 += v905;
                      v907 += v904;
                      --v902;
                    }
                    while (v902);
                  }
                  v97 += v899;
                  v98 += v900;
                  ++v897;
                }
                while (v897 != v896);
              }
              break;
            case 3:
              uint64_t v908 = (v100 << 30) - 0x300000000;
              int v909 = *(int *)((char *)*a4 + (v908 >> 30));
              if (v909 >= 1)
              {
                int v910 = 0;
                uint64_t v911 = v908 >> 29;
                uint64_t v912 = *(uint64_t *)((char *)*a5 + (v908 >> 29));
                uint64_t v913 = *(void *)(*a6 + v911);
                do
                {
                  uint64_t v914 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x200000000;
                  int v915 = *(int *)((char *)*a4 + (v914 >> 30));
                  if (v915 >= 1)
                  {
                    int v916 = 0;
                    uint64_t v917 = v914 >> 29;
                    uint64_t v918 = *(uint64_t *)((char *)*a5 + (v914 >> 29));
                    uint64_t v919 = *(void *)(*v9 + v917);
                    uint64_t result = v97;
                    uint64_t v920 = v98;
                    do
                    {
                      uint64_t v921 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                      int v922 = *(int *)((char *)*a4 + (v921 >> 30));
                      if (v922 >= 1)
                      {
                        uint64_t v923 = v921 >> 29;
                        uint64_t v924 = *(uint64_t *)((char *)*a5 + (v921 >> 29));
                        uint64_t v925 = *(void *)(*v9 + v923);
                        uint64_t v926 = (*a2)[19];
                        uint64_t v927 = *(void *)(*(void *)v13 + 152);
                        do
                        {
                          *(unsigned char *)(v926 + v920) = *(unsigned char *)(v927 + result);
                          v926 += v925;
                          v927 += v924;
                          --v922;
                        }
                        while (v922);
                      }
                      result += v918;
                      v920 += v919;
                      ++v916;
                    }
                    while (v916 != v915);
                  }
                  v97 += v912;
                  v98 += v913;
                  ++v910;
                }
                while (v910 != v909);
              }
              break;
            case 4:
              ldiv_t v722 = a4;
              uint64_t v723 = a5;
              int v724 = a6;
              uint64_t v725 = *a7;
              uint64_t v726 = *a8;
LABEL_577:
              break;
            case 5:
              uint64_t v928 = (v100 << 30) - 0x500000000;
              int v929 = *(int *)((char *)*a4 + (v928 >> 30));
              if (v929 >= 1)
              {
                uint64_t v930 = v928 >> 29;
                uint64_t v931 = *(uint64_t *)((char *)*a5 + v930);
                uint64_t v932 = *(void *)(*a6 + v930);
                do
                {
                  v97 += v931;
                  v98 += v932;
                  --v929;
                }
                while (v929);
              }
              break;
            default:
              LODWORD(v873) = 1;
              uint64_t v874 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v873 = a4[1][v874++] * (uint64_t)(int)v873;
              while (v874 * 4);
              if (v99[6])
              {
                uint64_t result = 0;
                uint64_t v1462 = *a8;
                uint64_t v1474 = *a7;
                uint64_t v1488 = v873;
                do
                {
                  int v875 = *a4;
                  unint64_t v876 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v877 = (v876 - 1);
                  uint64_t v1505 = v99;
                  uint64_t v1538 = result;
                  uint64_t v878 = 0;
                  if ((int)v876 - 1 >= 0)
                  {
                    uint64_t v879 = *a5;
                    do
                    {
                      ldiv_t v880 = ldiv((int)result, v875[v877]);
                      LODWORD(result) = v880.quot;
                      v878 += v879[v877--] * v880.rem;
                    }
                    while (v877 != -1);
                  }
                  uint64_t v881 = **a2;
                  unint64_t v882 = (unint64_t)((*a2)[1] - v881) >> 2;
                  uint64_t v883 = *v9;
                  uint64_t v884 = 0;
                  uint64_t v885 = (v882 - 1);
                  if ((int)v882 - 1 >= 0)
                  {
                    int v886 = v1538;
                    do
                    {
                      ldiv_t v887 = ldiv(v886, *(int *)(v881 + 4 * v885));
                      int v886 = v887.quot;
                      v884 += *(void *)(v883 + 8 * v885--) * v887.rem;
                    }
                    while (v885 != -1);
                  }
                  float v99 = v1505;
                  uint64_t v888 = ((v99[1] - *v99) << 30) - 0x500000000;
                  int v889 = *(int *)((char *)v875 + (v888 >> 30));
                  if (v889 >= 1)
                  {
                    uint64_t v890 = v878 + v1474;
                    uint64_t v891 = v888 >> 29;
                    uint64_t v892 = *(uint64_t *)((char *)*a5 + v891);
                    uint64_t v893 = *(void *)(v883 + v891);
                    uint64_t v894 = v884 + v1462;
                    do
                    {
                      v890 += v892;
                      v894 += v893;
                      --v889;
                    }
                    while (v889);
                    float v99 = *(void **)v13;
                  }
                  uint64_t v9 = a6;
                  uint64_t result = v1538 + v1488;
                }
                while (v99[6] > (unint64_t)(v1538 + v1488));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v26 = v8[6];
          if (v26)
          {
            int v27 = **(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v28 = (_DWORD *)v8[19];
            do
            {
              *v28++ = v27;
              --v26;
            }
            while (v26);
          }
          break;
        case 1:
          uint64_t v108 = *(void *)(*(void *)result + 160);
          if (v108)
          {
            uint64_t v109 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v110 = (_DWORD *)v8[19];
            do
            {
              int v111 = *v109++;
              *v110++ = v111;
              --v108;
            }
            while (v108);
          }
          break;
        case 2:
          uint64_t v112 = *a7;
          uint64_t v113 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v114 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v115 = 0;
                uint64_t v116 = v8[19];
                uint64_t v117 = **a5;
                uint64_t v118 = (unsigned __int8 *)(*(void *)(v113 + 152) + v112);
                do
                {
                  *(_DWORD *)(v116 + 4 * v115) = *v118;
                  v118 += v117;
                  ++v115;
                }
                while (*v114 > (int)v115);
              }
              break;
            case 2:
              uint64_t v383 = *a4;
              int v384 = **a4;
              if (v384 >= 1)
              {
                int v385 = 0;
                uint64_t v386 = 0;
                uint64_t v387 = *(void *)(v113 + 152);
                uint64_t v388 = v8[19];
                uint64_t v389 = **a5;
                uint64_t v390 = (*a5)[1];
                int v391 = v383[1];
                do
                {
                  if (v391 >= 1)
                  {
                    uint64_t v392 = 0;
                    do
                    {
                      *(_DWORD *)(v388 + 4 * v386 + 4 * v392) = *(unsigned __int8 *)(v387 + v112);
                      v112 += v390;
                      int v391 = v383[1];
                      ++v392;
                    }
                    while ((int)v392 < v391);
                    int v384 = *v383;
                    v386 += v392;
                  }
                  uint64_t result = v391;
                  uint64_t v112 = v112 + v389 - v390 * v391;
                  ++v385;
                }
                while (v385 < v384);
              }
              break;
            case 3:
              int v393 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v394 = 0;
                uint64_t v395 = 0;
                uint64_t v396 = *(void *)(v113 + 152);
                uint64_t v397 = v8[19];
                uint64_t v398 = *a5;
                uint64_t v399 = **a5;
                uint64_t v400 = (*a5)[1];
                int v401 = v393[1];
                do
                {
                  if (v401 >= 1)
                  {
                    int v402 = 0;
                    uint64_t v403 = *a5;
                    uint64_t v404 = v398[2];
                    int v405 = v393[2];
                    do
                    {
                      if (v405 >= 1)
                      {
                        uint64_t v406 = 0;
                        uint64_t v407 = v403[2];
                        do
                        {
                          *(_DWORD *)(v397 + 4 * v395 + 4 * v406) = *(unsigned __int8 *)(v396 + v112);
                          v112 += v407;
                          int v405 = v393[2];
                          ++v406;
                        }
                        while ((int)v406 < v405);
                        int v401 = v393[1];
                        v395 += v406;
                      }
                      uint64_t v112 = v112 + v400 - v404 * v405;
                      ++v402;
                    }
                    while (v402 < v401);
                    uint64_t result = *v393;
                  }
                  uint64_t v112 = v112 + v399 - v400 * v401;
                  ++v394;
                }
                while (v394 < (int)result);
              }
              break;
            case 4:
              uint64_t v408 = *a4;
              int v409 = **a4;
              if (v409 >= 1)
              {
                int v410 = 0;
                uint64_t v411 = 0;
                uint64_t v412 = *(void *)(v113 + 152);
                uint64_t v413 = v8[19];
                int v414 = *a5;
                uint64_t v415 = **a5;
                uint64_t v416 = (*a5)[1];
                int v417 = v408[1];
                do
                {
                  if (v417 >= 1)
                  {
                    int v418 = 0;
                    uint64_t v419 = *a5;
                    uint64_t v420 = v414[2];
                    int v421 = v408[2];
                    do
                    {
                      if (v421 >= 1)
                      {
                        int v422 = 0;
                        uint64_t v423 = *a5;
                        uint64_t v424 = v419[2];
                        uint64_t v425 = v419[3];
                        int v426 = v408[3];
                        do
                        {
                          if (v426 >= 1)
                          {
                            uint64_t v427 = 0;
                            uint64_t v428 = v423[3];
                            do
                            {
                              *(_DWORD *)(v413 + 4 * v411 + 4 * v427) = *(unsigned __int8 *)(v412 + v112);
                              v112 += v428;
                              int v426 = v408[3];
                              ++v427;
                            }
                            while ((int)v427 < v426);
                            int v421 = v408[2];
                            v411 += v427;
                          }
                          uint64_t v112 = v112 + v424 - v425 * v426;
                          ++v422;
                        }
                        while (v422 < v421);
                        int v417 = v408[1];
                      }
                      uint64_t v112 = v112 + v416 - v420 * v421;
                      ++v418;
                    }
                    while (v418 < v417);
                    int v409 = *v408;
                  }
                  uint64_t result = v417;
                  uint64_t v112 = v112 + v415 - v416 * v417;
                  ++v410;
                }
                while (v410 < v409);
              }
              break;
            default:
              uint64_t v373 = v8[6];
              if (v373)
              {
                uint64_t v374 = 0;
                uint64_t v375 = *(void *)(v113 + 152) + v112;
                uint64_t v376 = v8[19];
                int v377 = *a4;
                uint64_t v378 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v379 = *a5;
                do
                {
                  uint64_t v380 = 0;
                  if ((v378 & 0x80000000) == 0)
                  {
                    uint64_t v381 = v378;
                    LODWORD(result) = v374;
                    do
                    {
                      ldiv_t v382 = ldiv((int)result, v377[v381]);
                      uint64_t result = v382.quot;
                      v380 += v379[v381--] * v382.rem;
                    }
                    while (v381 != -1);
                  }
                  *(_DWORD *)(v376 + 4 * v374++) = *(unsigned __int8 *)(v375 + v380);
                }
                while (v374 != v373);
              }
              break;
          }
          break;
        case 3:
          uint64_t v119 = *a7;
          uint64_t v1386 = *a8;
          uint64_t v120 = *(void **)result;
          uint64_t v121 = v120[1] - *v120;
          switch(v121 >> 2)
          {
            case 1:
              uint64_t v122 = (v121 << 30) - 0x100000000;
              int v123 = *(int *)((char *)*a4 + (v122 >> 30));
              if (v123 >= 1)
              {
                uint64_t v124 = v122 >> 29;
                uint64_t v125 = *(uint64_t *)((char *)*a5 + (v122 >> 29));
                uint64_t v126 = (_DWORD *)(v8[19] + 4 * v1386);
                uint64_t v127 = (unsigned __int8 *)(v120[19] + v119);
                uint64_t v128 = 4 * *(void *)(*a6 + v124);
                do
                {
                  *uint64_t v126 = *v127;
                  v127 += v125;
                  uint64_t v126 = (_DWORD *)((char *)v126 + v128);
                  --v123;
                }
                while (v123);
              }
              break;
            case 2:
              uint64_t v971 = (v121 << 30) - 0x200000000;
              uint64_t v972 = *a4;
              int v973 = *(int *)((char *)*a4 + (v971 >> 30));
              if (v973 >= 1)
              {
                int v974 = 0;
                uint64_t v975 = v971 >> 29;
                uint64_t v976 = *(uint64_t *)((char *)*a5 + (v971 >> 29));
                uint64_t v977 = *(void *)(*a6 + v975);
                uint64_t v978 = (v121 << 30) - 0x100000000;
                uint64_t v979 = *(uint64_t *)((char *)*a5 + (v978 >> 29));
                uint64_t v980 = *(void *)(*a6 + (v978 >> 29));
                uint64_t v981 = v978 >> 32;
                uint64_t v982 = 4 * v1386;
                uint64_t v983 = 4 * v977;
                uint64_t v984 = 4 * v980;
                do
                {
                  uint64_t result = v972[v981];
                  if ((int)result >= 1)
                  {
                    uint64_t v985 = v120[19];
                    uint64_t v986 = (_DWORD *)(v8[19] + v982);
                    do
                    {
                      *uint64_t v986 = *(unsigned __int8 *)(v985 + v119);
                      uint64_t v986 = (_DWORD *)((char *)v986 + v984);
                      v985 += v979;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v119 += v976;
                  ++v974;
                  v982 += v983;
                }
                while (v974 != v973);
              }
              break;
            case 3:
              uint64_t v987 = (v121 << 30) - 0x300000000;
              uint64_t v988 = *a4;
              int v989 = *(int *)((char *)*a4 + (v987 >> 30));
              if (v989 >= 1)
              {
                int v990 = 0;
                uint64_t v991 = *a5;
                uint64_t v992 = v987 >> 29;
                uint64_t v993 = *(uint64_t *)((char *)*a5 + (v987 >> 29));
                uint64_t v994 = v121 << 30;
                uint64_t v995 = *a6;
                uint64_t v996 = *(void *)(*a6 + v992);
                uint64_t v997 = (v994 - 0x200000000) >> 32;
                uint64_t v998 = (v994 - 0x200000000) >> 29;
                uint64_t v999 = v994 - 0x100000000;
                uint64_t v1000 = *(uint64_t *)((char *)*a5 + v998);
                uint64_t v1001 = *(void *)(*a6 + v998);
                uint64_t v1002 = v999 >> 32;
                uint64_t v1003 = 4 * v1386;
                uint64_t result = 4 * v996;
                uint64_t v1004 = 4 * v1001;
                do
                {
                  int v1005 = v988[v997];
                  if (v1005 >= 1)
                  {
                    int v1006 = 0;
                    uint64_t v1007 = v991[v1002];
                    int v1008 = *a2;
                    uint64_t v1009 = 4 * *(void *)(v995 + 8 * v1002);
                    uint64_t v1010 = v1003;
                    uint64_t v1011 = v119;
                    do
                    {
                      int v1012 = v988[v1002];
                      if (v1012 >= 1)
                      {
                        uint64_t v1013 = v120[19];
                        int v1014 = (_DWORD *)(v1008[19] + v1010);
                        do
                        {
                          *int v1014 = *(unsigned __int8 *)(v1013 + v1011);
                          int v1014 = (_DWORD *)((char *)v1014 + v1009);
                          v1013 += v1007;
                          --v1012;
                        }
                        while (v1012);
                      }
                      v1011 += v1000;
                      ++v1006;
                      v1010 += v1004;
                    }
                    while (v1006 != v1005);
                  }
                  v119 += v993;
                  ++v990;
                  v1003 += result;
                }
                while (v990 != v989);
              }
              break;
            case 4:
              uint64_t v1015 = (v121 << 30) - 0x400000000;
              uint64_t v1016 = *a4;
              int v1540 = *(int *)((char *)*a4 + (v1015 >> 30));
              if (v1540 >= 1)
              {
                int v1017 = 0;
                uint64_t v1018 = *a5;
                uint64_t v1019 = v1015 >> 29;
                uint64_t v1507 = *(uint64_t *)((char *)*a5 + v1019);
                uint64_t v1020 = *a6;
                uint64_t v1021 = (v121 << 30) - 0x300000000;
                uint64_t v1022 = (v121 << 30) - 0x200000000;
                uint64_t v1023 = (v121 << 30) - 0x100000000;
                uint64_t v1024 = *(uint64_t *)((char *)*a5 + (v1021 >> 29));
                uint64_t v1025 = v1022 >> 32;
                uint64_t v1026 = v1023 >> 32;
                uint64_t result = 4 * v1386;
                uint64_t v1490 = 4 * *(void *)(*a6 + v1019);
                uint64_t v1027 = 4 * *(void *)(*a6 + (v1021 >> 29));
                do
                {
                  uint64_t v1028 = v119;
                  int v1029 = v1016[v1021 >> 32];
                  if (v1029 >= 1)
                  {
                    int v1030 = 0;
                    uint64_t v1031 = v1018[v1025];
                    uint64_t v1032 = 4 * *(void *)(v1020 + 8 * v1025);
                    uint64_t v1033 = result;
                    uint64_t v1034 = v119;
                    do
                    {
                      int v1035 = v1016[v1025];
                      if (v1035 >= 1)
                      {
                        int v1036 = 0;
                        uint64_t v1037 = v1018[v1026];
                        uint64_t v1038 = *a2;
                        uint64_t v1039 = 4 * *(void *)(v1020 + 8 * v1026);
                        uint64_t v1040 = v1033;
                        uint64_t v1041 = v1034;
                        do
                        {
                          int v1042 = v1016[v1026];
                          if (v1042 >= 1)
                          {
                            uint64_t v1043 = v120[19];
                            uint64_t v1044 = (_DWORD *)(v1038[19] + v1040);
                            do
                            {
                              *uint64_t v1044 = *(unsigned __int8 *)(v1043 + v1041);
                              uint64_t v1044 = (_DWORD *)((char *)v1044 + v1039);
                              v1043 += v1037;
                              --v1042;
                            }
                            while (v1042);
                          }
                          v1041 += v1031;
                          ++v1036;
                          v1040 += v1032;
                        }
                        while (v1036 != v1035);
                      }
                      v1034 += v1024;
                      ++v1030;
                      v1033 += v1027;
                    }
                    while (v1030 != v1029);
                  }
                  uint64_t v119 = v1028 + v1507;
                  ++v1017;
                  result += v1490;
                }
                while (v1017 != v1540);
              }
              break;
            case 5:
              uint64_t v1045 = (v121 << 30) - 0x500000000;
              int v1046 = *a4;
              int v1452 = *(int *)((char *)*a4 + (v1045 >> 30));
              if (v1452 >= 1)
              {
                int v1464 = 0;
                uint64_t v1047 = *a5;
                uint64_t v1048 = v1045 >> 29;
                uint64_t v1442 = *(uint64_t *)((char *)*a5 + v1048);
                uint64_t v1049 = v121 << 30;
                uint64_t v1050 = *a6;
                uint64_t v1432 = (v1049 - 0x400000000) >> 32;
                uint64_t v1051 = (v1049 - 0x400000000) >> 29;
                uint64_t v1508 = *(uint64_t *)((char *)*a5 + v1051);
                uint64_t v1523 = (v1049 - 0x300000000) >> 32;
                uint64_t v1052 = (v1049 - 0x200000000) >> 32;
                uint64_t result = (v1049 - 0x100000000) >> 32;
                uint64_t v1422 = 4 * *(void *)(*a6 + v1048);
                uint64_t v1476 = 4 * v1386;
                uint64_t v1491 = 4 * *(void *)(*a6 + v1051);
                do
                {
                  uint64_t v1400 = v119;
                  int v1541 = v1046[v1432];
                  if (v1541 >= 1)
                  {
                    int v1053 = 0;
                    uint64_t v1054 = v1047[v1523];
                    uint64_t v1055 = 4 * *(void *)(v1050 + 8 * v1523);
                    uint64_t v1056 = v1476;
                    uint64_t v1057 = v119;
                    do
                    {
                      int v1058 = v1046[v1523];
                      if (v1058 >= 1)
                      {
                        int v1059 = 0;
                        uint64_t v1060 = v1047[v1052];
                        uint64_t v1061 = 4 * *(void *)(v1050 + 8 * v1052);
                        uint64_t v1062 = v1056;
                        uint64_t v1063 = v1057;
                        do
                        {
                          int v1064 = v1046[v1052];
                          if (v1064 >= 1)
                          {
                            int v1065 = 0;
                            uint64_t v1066 = v1047[result];
                            int v1067 = *a2;
                            uint64_t v1068 = 4 * *(void *)(v1050 + 8 * result);
                            uint64_t v1069 = v1062;
                            uint64_t v1070 = v1063;
                            do
                            {
                              int v1071 = v1046[result];
                              if (v1071 >= 1)
                              {
                                uint64_t v1072 = v120[19];
                                int v1073 = (_DWORD *)(v1067[19] + v1069);
                                do
                                {
                                  *int v1073 = *(unsigned __int8 *)(v1072 + v1070);
                                  int v1073 = (_DWORD *)((char *)v1073 + v1068);
                                  v1072 += v1066;
                                  --v1071;
                                }
                                while (v1071);
                              }
                              v1070 += v1060;
                              ++v1065;
                              v1069 += v1061;
                            }
                            while (v1065 != v1064);
                          }
                          v1063 += v1054;
                          ++v1059;
                          v1062 += v1055;
                        }
                        while (v1059 != v1058);
                      }
                      v1057 += v1508;
                      ++v1053;
                      v1056 += v1491;
                    }
                    while (v1053 != v1541);
                  }
                  uint64_t v119 = v1400 + v1442;
                  v1476 += v1422;
                  ++v1464;
                }
                while (v1464 != v1452);
              }
              break;
            default:
              int v933 = (char *)a4[1];
              LODWORD(v934) = 1;
              uint64_t v935 = -20;
              do
              {
                uint64_t v934 = *(int *)&v933[v935] * (uint64_t)(int)v934;
                v935 += 4;
              }
              while (v935);
              unint64_t v1382 = v120[6];
              if (v1382)
              {
                uint64_t result = 0;
                int v936 = *a4;
                uint64_t v1372 = ((unint64_t)(v933 - (char *)*a4) >> 2) - 1;
                uint64_t v937 = *a5;
                uint64_t v1421 = *v8;
                uint64_t v1367 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v938 = (v121 << 30) - 0x500000000;
                uint64_t v939 = *a6;
                uint64_t v1414 = *(uint64_t *)((char *)*a5 + (v938 >> 29));
                uint64_t v1362 = v938 >> 32;
                uint64_t v1431 = ((v121 << 30) - 0x400000000) >> 32;
                uint64_t v1522 = ((v121 << 30) - 0x300000000) >> 32;
                uint64_t v940 = ((v121 << 30) - 0x200000000) >> 32;
                uint64_t v941 = ((v121 << 30) - 0x100000000) >> 32;
                uint64_t v1399 = *a7;
                uint64_t v1408 = 4 * *(void *)(*a6 + (v938 >> 29));
                uint64_t v1377 = v934;
                do
                {
                  uint64_t v942 = v1372;
                  uint64_t v1393 = result;
                  uint64_t v943 = 0;
                  if ((v1372 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v944 = ldiv((int)result, v936[v942]);
                      LODWORD(result) = v944.quot;
                      v943 += v937[v942--] * v944.rem;
                    }
                    while (v942 != -1);
                  }
                  uint64_t v945 = v1367;
                  if ((v1367 & 0x80000000) != 0)
                  {
                    uint64_t v946 = 0;
                  }
                  else
                  {
                    uint64_t v946 = 0;
                    int v947 = v1393;
                    do
                    {
                      ldiv_t v948 = ldiv(v947, *(int *)(v1421 + 4 * v945));
                      int v947 = v948.quot;
                      v946 += *(void *)(v939 + 8 * v945--) * v948.rem;
                    }
                    while (v945 != -1);
                  }
                  int v1441 = v936[v1362];
                  if (v1441 >= 1)
                  {
                    int v949 = 0;
                    uint64_t v1506 = v937[v1431];
                    uint64_t v1475 = v943 + v1399;
                    uint64_t v1463 = 4 * (v946 + v1386);
                    uint64_t v1489 = 4 * *(void *)(v939 + 8 * v1431);
                    do
                    {
                      int v1451 = v949;
                      int v1539 = v936[v1431];
                      if (v1539 >= 1)
                      {
                        int v950 = 0;
                        uint64_t v951 = v937[v1522];
                        uint64_t v952 = 4 * *(void *)(v939 + 8 * v1522);
                        uint64_t v954 = v1463;
                        uint64_t v953 = v1475;
                        do
                        {
                          int v955 = v936[v1522];
                          if (v955 >= 1)
                          {
                            int v956 = 0;
                            uint64_t v957 = v937[v940];
                            uint64_t v958 = 4 * *(void *)(v939 + 8 * v940);
                            uint64_t v959 = v954;
                            uint64_t v960 = v953;
                            do
                            {
                              int v961 = v936[v940];
                              if (v961 >= 1)
                              {
                                int v962 = 0;
                                uint64_t v963 = v937[v941];
                                uint64_t v964 = *a2;
                                uint64_t v965 = 4 * *(void *)(v939 + 8 * v941);
                                uint64_t v966 = v959;
                                uint64_t v967 = v960;
                                do
                                {
                                  int v968 = v936[v941];
                                  if (v968 >= 1)
                                  {
                                    uint64_t v969 = v120[19];
                                    uint64_t v970 = (_DWORD *)(v964[19] + v966);
                                    do
                                    {
                                      *uint64_t v970 = *(unsigned __int8 *)(v969 + v967);
                                      uint64_t v970 = (_DWORD *)((char *)v970 + v965);
                                      v969 += v963;
                                      --v968;
                                    }
                                    while (v968);
                                  }
                                  v967 += v957;
                                  ++v962;
                                  v966 += v958;
                                }
                                while (v962 != v961);
                              }
                              v960 += v951;
                              ++v956;
                              v959 += v952;
                            }
                            while (v956 != v955);
                          }
                          v953 += v1506;
                          ++v950;
                          v954 += v1489;
                        }
                        while (v950 != v1539);
                      }
                      v1475 += v1414;
                      int v949 = v1451 + 1;
                      v1463 += v1408;
                    }
                    while (v1451 + 1 != v1441);
                  }
                  uint64_t result = v1393 + v1377;
                }
                while (v1382 > v1393 + v1377);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v29 = v8[6];
          if (v29)
          {
            uint64_t v30 = **(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v31 = (void *)v8[19];
            do
            {
              *v31++ = v30;
              --v29;
            }
            while (v29);
          }
          break;
        case 1:
          uint64_t v129 = *(void *)(*(void *)result + 160);
          if (v129)
          {
            uint64_t v130 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v131 = (void *)v8[19];
            do
            {
              unsigned int v132 = *v130++;
              *v131++ = v132;
              --v129;
            }
            while (v129);
          }
          break;
        case 2:
          uint64_t v133 = *a7;
          uint64_t v134 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v135 = **a4;
              if ((int)v135 >= 1)
              {
                uint64_t v136 = *(void *)(v134 + 152);
                int v137 = (void *)v8[19];
                uint64_t v138 = *a5;
                do
                {
                  *v137++ = *(unsigned __int8 *)(v136 + v133);
                  v133 += *v138;
                  --v135;
                }
                while (v135);
              }
              break;
            case 2:
              int v439 = **a4;
              if (v439 >= 1)
              {
                int v440 = 0;
                uint64_t v441 = 0;
                uint64_t v442 = *(void *)(v134 + 152);
                uint64_t v443 = v8[19];
                int v444 = (*a4)[1];
                int v445 = *a5;
                do
                {
                  if (v444 <= 0)
                  {
                    uint64_t v447 = v445[1];
                  }
                  else
                  {
                    int v446 = v444;
                    do
                    {
                      *(void *)(v443 + 8 * v441++) = *(unsigned __int8 *)(v442 + v133);
                      uint64_t v447 = v445[1];
                      v133 += v447;
                      --v446;
                    }
                    while (v446);
                  }
                  uint64_t result = *v445;
                  uint64_t v133 = v133 - v447 * v444 + *v445;
                  ++v440;
                }
                while (v440 != v439);
              }
              break;
            case 3:
              uint64_t v448 = *a4;
              int v449 = **a4;
              if (v449 >= 1)
              {
                int v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = *(void *)(v134 + 152);
                uint64_t v453 = v8[19];
                uint64_t v454 = v448[1];
                uint64_t v455 = *a5;
                do
                {
                  if ((int)v454 <= 0)
                  {
                    uint64_t v459 = v455[1];
                  }
                  else
                  {
                    int v456 = 0;
                    uint64_t result = v448[2];
                    uint64_t v457 = *a5;
                    do
                    {
                      int v458 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v453 + 8 * v451++) = *(unsigned __int8 *)(v452 + v133);
                          v133 += v457[2];
                          --v458;
                        }
                        while (v458);
                      }
                      uint64_t v459 = v455[1];
                      uint64_t v133 = v459 + v133 - v455[2] * (int)result;
                      ++v456;
                    }
                    while (v456 != v454);
                  }
                  uint64_t v133 = v133 - v459 * v454 + *v455;
                  ++v450;
                }
                while (v450 != v449);
              }
              break;
            case 4:
              ldiv_t v460 = *a4;
              int v461 = **a4;
              if (v461 >= 1)
              {
                int v462 = 0;
                uint64_t v463 = 0;
                uint64_t v464 = *(void *)(v134 + 152);
                uint64_t v465 = v8[19];
                uint64_t v466 = v460[1];
                uint64_t v467 = *a5;
                do
                {
                  if ((int)v466 <= 0)
                  {
                    uint64_t v474 = v467[1];
                  }
                  else
                  {
                    int v468 = 0;
                    uint64_t result = v460[2];
                    uint64_t v469 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v470 = 0;
                        int v471 = v460[3];
                        int v472 = *a5;
                        do
                        {
                          int v473 = v471;
                          if (v471 >= 1)
                          {
                            do
                            {
                              *(void *)(v465 + 8 * v463++) = *(unsigned __int8 *)(v464 + v133);
                              v133 += v472[3];
                              --v473;
                            }
                            while (v473);
                          }
                          uint64_t v133 = v469[2] + v133 - v469[3] * v471;
                          ++v470;
                        }
                        while (v470 != result);
                      }
                      uint64_t v474 = v467[1];
                      uint64_t v133 = v474 + v133 - v467[2] * result;
                      ++v468;
                    }
                    while (v468 != v466);
                  }
                  uint64_t v133 = v133 - v474 * v466 + *v467;
                  ++v462;
                }
                while (v462 != v461);
              }
              break;
            default:
              uint64_t v429 = v8[6];
              if (v429)
              {
                uint64_t v430 = 0;
                uint64_t v431 = *(void *)(v134 + 152) + v133;
                uint64_t v432 = v8[19];
                uint64_t v433 = *a4;
                uint64_t v434 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v435 = *a5;
                do
                {
                  uint64_t v436 = 0;
                  if ((v434 & 0x80000000) == 0)
                  {
                    uint64_t v437 = v434;
                    LODWORD(result) = v430;
                    do
                    {
                      ldiv_t v438 = ldiv((int)result, v433[v437]);
                      uint64_t result = v438.quot;
                      v436 += v435[v437--] * v438.rem;
                    }
                    while (v437 != -1);
                  }
                  *(void *)(v432 + 8 * v430++) = *(unsigned __int8 *)(v431 + v436);
                }
                while (v430 != v429);
              }
              break;
          }
          break;
        case 3:
          uint64_t v139 = *a7;
          uint64_t v1387 = *a8;
          uint64_t v140 = *(void **)result;
          uint64_t v141 = v140[1] - *v140;
          switch(v141 >> 2)
          {
            case 1:
              uint64_t v142 = (v141 << 30) - 0x100000000;
              int v143 = *(int *)((char *)*a4 + (v142 >> 30));
              if (v143 >= 1)
              {
                uint64_t v144 = v142 >> 29;
                uint64_t v145 = *(uint64_t *)((char *)*a5 + (v142 >> 29));
                uint64_t v146 = (void *)(v8[19] + 8 * v1387);
                uint64_t v147 = (unsigned __int8 *)(v140[19] + v139);
                uint64_t v148 = 8 * *(void *)(*a6 + v144);
                do
                {
                  *uint64_t v146 = *v147;
                  v147 += v145;
                  uint64_t v146 = (void *)((char *)v146 + v148);
                  --v143;
                }
                while (v143);
              }
              break;
            case 2:
              uint64_t v1112 = (v141 << 30) - 0x200000000;
              int v1113 = *(int *)((char *)*a4 + (v1112 >> 30));
              if (v1113 >= 1)
              {
                int v1114 = 0;
                uint64_t v1115 = *a5;
                uint64_t v1116 = v1112 >> 29;
                uint64_t v1117 = *(uint64_t *)((char *)*a5 + (v1112 >> 29));
                uint64_t v1118 = *a6;
                uint64_t v1119 = *(void *)(*a6 + v1116);
                uint64_t v1120 = (v141 << 30) - 0x100000000;
                uint64_t v1121 = v1120 >> 32;
                int v1122 = *(int *)((char *)*a4 + (v1120 >> 30));
                uint64_t v1123 = 8 * v1387;
                uint64_t v1124 = 8 * v1119;
                do
                {
                  if (v1122 >= 1)
                  {
                    uint64_t result = v1115[v1121];
                    uint64_t v1125 = v140[19];
                    int v1126 = (void *)(v8[19] + v1123);
                    uint64_t v1127 = 8 * *(void *)(v1118 + 8 * v1121);
                    int v1128 = v1122;
                    do
                    {
                      *int v1126 = *(unsigned __int8 *)(v1125 + v139);
                      int v1126 = (void *)((char *)v1126 + v1127);
                      v1125 += result;
                      --v1128;
                    }
                    while (v1128);
                  }
                  v139 += v1117;
                  ++v1114;
                  v1123 += v1124;
                }
                while (v1114 != v1113);
              }
              break;
            case 3:
              uint64_t v1129 = (v141 << 30) - 0x300000000;
              uint64_t v1130 = *a4;
              int v1131 = *(int *)((char *)*a4 + (v1129 >> 30));
              if (v1131 >= 1)
              {
                int v1132 = 0;
                uint64_t v1133 = *a5;
                uint64_t v1134 = v1129 >> 29;
                uint64_t v1135 = *(uint64_t *)((char *)*a5 + (v1129 >> 29));
                uint64_t v1136 = *a6;
                uint64_t v1137 = *(void *)(*a6 + v1134);
                uint64_t v1138 = v141 << 30;
                uint64_t v1139 = v1138 - 0x200000000;
                uint64_t v1140 = v1138 - 0x100000000;
                uint64_t v1141 = (v1138 - 0x200000000) >> 32;
                int v1142 = *(int *)((char *)v1130 + (v1139 >> 30));
                uint64_t v1143 = v1140 >> 32;
                uint64_t v1144 = 8 * v1387;
                uint64_t result = 8 * v1137;
                do
                {
                  if (v1142 >= 1)
                  {
                    int v1145 = 0;
                    uint64_t v1146 = v1133[v1141];
                    int v1147 = v1130[v1143];
                    int v1148 = *a2;
                    uint64_t v1149 = 8 * *(void *)(v1136 + 8 * v1141);
                    uint64_t v1150 = v1144;
                    uint64_t v1151 = v139;
                    do
                    {
                      if (v1147 >= 1)
                      {
                        uint64_t v1152 = v1133[v1143];
                        uint64_t v1153 = v140[19];
                        int v1154 = (void *)(v1148[19] + v1150);
                        uint64_t v1155 = 8 * *(void *)(v1136 + 8 * v1143);
                        int v1156 = v1147;
                        do
                        {
                          *int v1154 = *(unsigned __int8 *)(v1153 + v1151);
                          int v1154 = (void *)((char *)v1154 + v1155);
                          v1153 += v1152;
                          --v1156;
                        }
                        while (v1156);
                      }
                      v1151 += v1146;
                      ++v1145;
                      v1150 += v1149;
                    }
                    while (v1145 != v1142);
                  }
                  v139 += v1135;
                  ++v1132;
                  v1144 += result;
                }
                while (v1132 != v1131);
              }
              break;
            case 4:
              uint64_t v1157 = (v141 << 30) - 0x400000000;
              uint64_t v1158 = *a4;
              int v1542 = *(int *)((char *)*a4 + (v1157 >> 30));
              if (v1542 >= 1)
              {
                int v1159 = 0;
                int v1160 = *a5;
                uint64_t v1161 = v1157 >> 29;
                uint64_t v1510 = *(uint64_t *)((char *)*a5 + v1161);
                uint64_t v1162 = *a6;
                uint64_t v1163 = (v141 << 30) - 0x300000000;
                uint64_t v1493 = v1163 >> 32;
                int v1164 = *(int *)((char *)v1158 + (v1163 >> 30));
                uint64_t v1165 = ((v141 << 30) - 0x200000000) >> 32;
                uint64_t v1166 = ((v141 << 30) - 0x100000000) >> 32;
                uint64_t result = 8 * v1387;
                uint64_t v1525 = 8 * *(void *)(*a6 + v1161);
                do
                {
                  uint64_t v1402 = v139;
                  if (v1164 >= 1)
                  {
                    int v1167 = 0;
                    uint64_t v1168 = v1160[v1493];
                    int v1169 = v1158[v1165];
                    uint64_t v1170 = 8 * *(void *)(v1162 + 8 * v1493);
                    uint64_t v1171 = result;
                    uint64_t v1172 = v139;
                    do
                    {
                      if (v1169 >= 1)
                      {
                        int v1173 = 0;
                        uint64_t v1174 = v1160[v1165];
                        int v1175 = v1158[v1166];
                        uint64_t v1176 = *a2;
                        uint64_t v1177 = 8 * *(void *)(v1162 + 8 * v1165);
                        uint64_t v1178 = v1171;
                        uint64_t v1179 = v1172;
                        do
                        {
                          if (v1175 >= 1)
                          {
                            uint64_t v1180 = v1160[v1166];
                            uint64_t v1181 = v140[19];
                            uint64_t v1182 = (void *)(v1176[19] + v1178);
                            uint64_t v1183 = 8 * *(void *)(v1162 + 8 * v1166);
                            int v1184 = v1175;
                            do
                            {
                              *uint64_t v1182 = *(unsigned __int8 *)(v1181 + v1179);
                              uint64_t v1182 = (void *)((char *)v1182 + v1183);
                              v1181 += v1180;
                              --v1184;
                            }
                            while (v1184);
                          }
                          v1179 += v1174;
                          ++v1173;
                          v1178 += v1177;
                        }
                        while (v1173 != v1169);
                      }
                      v1172 += v1168;
                      ++v1167;
                      v1171 += v1170;
                    }
                    while (v1167 != v1164);
                  }
                  uint64_t v139 = v1402 + v1510;
                  ++v1159;
                  result += v1525;
                }
                while (v1159 != v1542);
              }
              break;
            case 5:
              uint64_t v1185 = (v141 << 30) - 0x500000000;
              int v1186 = *a4;
              int v1444 = *(int *)((char *)*a4 + (v1185 >> 30));
              if (v1444 >= 1)
              {
                int v1454 = 0;
                int v1187 = *a5;
                uint64_t v1188 = v1185 >> 29;
                uint64_t v1434 = *(uint64_t *)((char *)*a5 + v1188);
                uint64_t v1189 = *a6;
                uint64_t v1190 = (v141 << 30) - 0x400000000;
                int v1526 = *(int *)((char *)v1186 + (v1190 >> 30));
                uint64_t v1416 = v1190 >> 32;
                uint64_t v1191 = ((v141 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v141 << 30) - 0x100000000) >> 32;
                uint64_t v1466 = 8 * v1387;
                uint64_t v1478 = ((v141 << 30) - 0x300000000) >> 32;
                uint64_t v1424 = 8 * *(void *)(*a6 + v1188);
                do
                {
                  uint64_t v1403 = v139;
                  if (v1526 >= 1)
                  {
                    int v1192 = 0;
                    uint64_t v1511 = v1187[v1416];
                    uint64_t v1193 = v1466;
                    int v1194 = v1186[v1478];
                    uint64_t v1494 = 8 * *(void *)(v1189 + 8 * v1416);
                    uint64_t v1195 = v139;
                    do
                    {
                      int v1543 = v1192;
                      if (v1194 >= 1)
                      {
                        int v1196 = 0;
                        uint64_t v1197 = v1187[v1478];
                        int v1198 = v1186[v1191];
                        uint64_t v1199 = 8 * *(void *)(v1189 + 8 * v1478);
                        uint64_t v1200 = v1193;
                        uint64_t v1201 = v1195;
                        do
                        {
                          if (v1198 >= 1)
                          {
                            int v1202 = 0;
                            uint64_t v1203 = v1187[v1191];
                            int v1204 = v1186[result];
                            uint64_t v1205 = *a2;
                            uint64_t v1206 = 8 * *(void *)(v1189 + 8 * v1191);
                            uint64_t v1207 = v1200;
                            uint64_t v1208 = v1201;
                            do
                            {
                              if (v1204 >= 1)
                              {
                                uint64_t v1209 = v1187[result];
                                uint64_t v1210 = v140[19];
                                uint64_t v1211 = (void *)(v1205[19] + v1207);
                                uint64_t v1212 = 8 * *(void *)(v1189 + 8 * result);
                                int v1213 = v1204;
                                do
                                {
                                  *uint64_t v1211 = *(unsigned __int8 *)(v1210 + v1208);
                                  uint64_t v1211 = (void *)((char *)v1211 + v1212);
                                  v1210 += v1209;
                                  --v1213;
                                }
                                while (v1213);
                              }
                              v1208 += v1203;
                              ++v1202;
                              v1207 += v1206;
                            }
                            while (v1202 != v1198);
                          }
                          v1201 += v1197;
                          ++v1196;
                          v1200 += v1199;
                        }
                        while (v1196 != v1194);
                      }
                      v1195 += v1511;
                      int v1192 = v1543 + 1;
                      v1193 += v1494;
                    }
                    while (v1543 + 1 != v1526);
                  }
                  uint64_t v139 = v1403 + v1434;
                  v1466 += v1424;
                  ++v1454;
                }
                while (v1454 != v1444);
              }
              break;
            default:
              uint64_t v1074 = (char *)a4[1];
              LODWORD(v1075) = 1;
              uint64_t v1076 = -20;
              do
              {
                uint64_t v1075 = *(int *)&v1074[v1076] * (uint64_t)(int)v1075;
                v1076 += 4;
              }
              while (v1076);
              unint64_t v1383 = v140[6];
              if (v1383)
              {
                uint64_t v1077 = 0;
                uint64_t v1078 = (v141 << 30) - 0x500000000;
                uint64_t v1079 = *a4;
                uint64_t v1363 = *v8;
                uint64_t v1080 = *a5;
                uint64_t v1368 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1373 = ((unint64_t)(v1074 - (char *)*a4) >> 2) - 1;
                uint64_t v1081 = *a6;
                uint64_t v1359 = v1078 >> 32;
                int v1433 = *(int *)((char *)*a4 + (v1078 >> 30));
                uint64_t v1401 = *a7;
                uint64_t v1409 = ((v141 << 30) - 0x400000000) >> 32;
                uint64_t v1477 = ((v141 << 30) - 0x300000000) >> 32;
                uint64_t v1082 = ((v141 << 30) - 0x200000000) >> 32;
                uint64_t v1083 = ((v141 << 30) - 0x100000000) >> 32;
                uint64_t v1378 = v1075;
                do
                {
                  uint64_t v1084 = v1373;
                  if ((v1373 & 0x80000000) != 0)
                  {
                    uint64_t v1085 = 0;
                  }
                  else
                  {
                    uint64_t v1085 = 0;
                    LODWORD(result) = v1077;
                    do
                    {
                      ldiv_t v1086 = ldiv((int)result, v1079[v1084]);
                      uint64_t result = v1086.quot;
                      v1085 += v1080[v1084--] * v1086.rem;
                    }
                    while (v1084 != -1);
                  }
                  uint64_t v1087 = v1368;
                  uint64_t v1394 = v1077;
                  uint64_t v1088 = 0;
                  if ((v1368 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1077;
                    do
                    {
                      ldiv_t v1089 = ldiv((int)result, *(int *)(v1363 + 4 * v1087));
                      uint64_t result = v1089.quot;
                      v1088 += *(void *)(v1081 + 8 * v1087--) * v1089.rem;
                    }
                    while (v1087 != -1);
                  }
                  if (v1433 >= 1)
                  {
                    int v1090 = 0;
                    uint64_t v1423 = v1080[v1359];
                    uint64_t v1465 = v1085 + v1401;
                    int v1524 = v1079[v1409];
                    uint64_t v1453 = 8 * (v1088 + v1387);
                    uint64_t v1415 = 8 * *(void *)(v1081 + 8 * v1359);
                    do
                    {
                      int v1443 = v1090;
                      if (v1524 >= 1)
                      {
                        int v1091 = 0;
                        uint64_t v1509 = v1080[v1409];
                        uint64_t v1092 = v1465;
                        int v1093 = v1079[v1477];
                        uint64_t v1492 = 8 * *(void *)(v1081 + 8 * v1409);
                        uint64_t v1094 = v1453;
                        do
                        {
                          if (v1093 >= 1)
                          {
                            int v1095 = 0;
                            uint64_t v1096 = v1080[v1477];
                            int v1097 = v1079[v1082];
                            uint64_t v1098 = 8 * *(void *)(v1081 + 8 * v1477);
                            uint64_t result = v1094;
                            uint64_t v1099 = v1092;
                            do
                            {
                              if (v1097 >= 1)
                              {
                                int v1100 = 0;
                                uint64_t v1101 = v1080[v1082];
                                int v1102 = v1079[v1083];
                                uint64_t v1103 = *a2;
                                uint64_t v1104 = 8 * *(void *)(v1081 + 8 * v1082);
                                uint64_t v1105 = result;
                                uint64_t v1106 = v1099;
                                do
                                {
                                  if (v1102 >= 1)
                                  {
                                    uint64_t v1107 = v1080[v1083];
                                    uint64_t v1108 = v140[19];
                                    uint64_t v1109 = (void *)(v1103[19] + v1105);
                                    uint64_t v1110 = 8 * *(void *)(v1081 + 8 * v1083);
                                    int v1111 = v1102;
                                    do
                                    {
                                      *uint64_t v1109 = *(unsigned __int8 *)(v1108 + v1106);
                                      uint64_t v1109 = (void *)((char *)v1109 + v1110);
                                      v1108 += v1107;
                                      --v1111;
                                    }
                                    while (v1111);
                                  }
                                  v1106 += v1101;
                                  ++v1100;
                                  v1105 += v1104;
                                }
                                while (v1100 != v1097);
                              }
                              v1099 += v1096;
                              ++v1095;
                              result += v1098;
                            }
                            while (v1095 != v1093);
                          }
                          v1092 += v1509;
                          ++v1091;
                          v1094 += v1492;
                        }
                        while (v1091 != v1524);
                      }
                      v1465 += v1423;
                      int v1090 = v1443 + 1;
                      v1453 += v1415;
                    }
                    while (v1443 + 1 != v1433);
                  }
                  v1077 += v1378;
                }
                while (v1383 > v1394 + v1378);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          float v32 = 0.0;
          if (**(unsigned char **)(*(void *)result + 152)) {
            float v32 = 1.0;
          }
          uint64_t v33 = v8[6];
          if (v33)
          {
            uint64_t v34 = (float *)v8[19];
            do
            {
              *v34++ = v32;
              --v33;
            }
            while (v33);
          }
          break;
        case 1:
          uint64_t v149 = *(void *)(*(void *)result + 160);
          if (v149)
          {
            uint64_t v150 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v151 = (float *)v8[19];
            do
            {
              if (*v150++) {
                float v153 = 1.0;
              }
              else {
                float v153 = 0.0;
              }
              *v151++ = v153;
              --v149;
            }
            while (v149);
          }
          break;
        case 2:
          uint64_t v154 = *a7;
          uint64_t v155 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v156 = **a4;
              if ((int)v156 >= 1)
              {
                uint64_t v157 = (float *)v8[19];
                uint64_t v158 = **a5;
                uint64_t v159 = (unsigned char *)(*(void *)(v155 + 152) + v154);
                do
                {
                  if (*v159) {
                    float v160 = 1.0;
                  }
                  else {
                    float v160 = 0.0;
                  }
                  *v157++ = v160;
                  v159 += v158;
                  --v156;
                }
                while (v156);
              }
              break;
            case 2:
              int v486 = **a4;
              if (v486 >= 1)
              {
                int v487 = 0;
                uint64_t v488 = 0;
                uint64_t v489 = *(void *)(v155 + 152);
                uint64_t v490 = v8[19];
                uint64_t v491 = (*a4)[1];
                uint64_t v492 = (*a5)[1];
                uint64_t v493 = **a5 - v492 * v491;
                do
                {
                  int v494 = v491;
                  if ((int)v491 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v489 + v154);
                      if (*(unsigned char *)(v489 + v154)) {
                        float v495 = 1.0;
                      }
                      else {
                        float v495 = 0.0;
                      }
                      *(float *)(v490 + 4 * v488++) = v495;
                      v154 += v492;
                      --v494;
                    }
                    while (v494);
                  }
                  v154 += v493;
                  ++v487;
                }
                while (v487 != v486);
              }
              break;
            case 3:
              uint64_t v496 = *a4;
              int v497 = **a4;
              if (v497 >= 1)
              {
                int v498 = 0;
                uint64_t result = 0;
                uint64_t v499 = *(void *)(v155 + 152);
                uint64_t v500 = v8[19];
                uint64_t v501 = v496[1];
                int v502 = *a5;
                uint64_t v503 = (*a5)[1];
                uint64_t v504 = **a5 - v503 * v501;
                do
                {
                  if ((int)v501 < 1)
                  {
                    uint64_t v511 = result;
                  }
                  else
                  {
                    int v505 = 0;
                    uint64_t v506 = v496[2];
                    int v507 = *a5;
                    uint64_t v508 = v503 - v502[2] * v506;
                    do
                    {
                      if ((int)v506 < 1)
                      {
                        uint64_t v511 = result;
                      }
                      else
                      {
                        uint64_t v509 = v507[2];
                        int v510 = v506;
                        do
                        {
                          uint64_t v511 = result + 1;
                          if (*(unsigned char *)(v499 + v154)) {
                            float v512 = 1.0;
                          }
                          else {
                            float v512 = 0.0;
                          }
                          *(float *)(v500 + 4 * result) = v512;
                          v154 += v509;
                          ++result;
                          --v510;
                        }
                        while (v510);
                      }
                      v154 += v508;
                      ++v505;
                      uint64_t result = v511;
                    }
                    while (v505 != v501);
                  }
                  v154 += v504;
                  ++v498;
                  uint64_t result = v511;
                }
                while (v498 != v497);
              }
              break;
            case 4:
              uint64_t v513 = *a4;
              int v514 = **a4;
              if (v514 >= 1)
              {
                int v515 = 0;
                uint64_t result = 0;
                uint64_t v516 = *(void *)(v155 + 152);
                uint64_t v517 = v8[19];
                uint64_t v518 = v513[1];
                int v519 = *a5;
                uint64_t v520 = (*a5)[1];
                uint64_t v521 = **a5 - v520 * v518;
                do
                {
                  if ((int)v518 < 1)
                  {
                    uint64_t v532 = result;
                  }
                  else
                  {
                    int v522 = 0;
                    uint64_t v523 = v513[2];
                    uint64_t v524 = *a5;
                    uint64_t v525 = v520 - v519[2] * v523;
                    do
                    {
                      if ((int)v523 < 1)
                      {
                        uint64_t v532 = result;
                      }
                      else
                      {
                        int v526 = 0;
                        uint64_t v527 = v513[3];
                        uint64_t v528 = *a5;
                        uint64_t v529 = v524[2] - v524[3] * v527;
                        do
                        {
                          if ((int)v527 < 1)
                          {
                            uint64_t v532 = result;
                          }
                          else
                          {
                            uint64_t v530 = v528[3];
                            int v531 = v527;
                            do
                            {
                              uint64_t v532 = result + 1;
                              if (*(unsigned char *)(v516 + v154)) {
                                float v533 = 1.0;
                              }
                              else {
                                float v533 = 0.0;
                              }
                              *(float *)(v517 + 4 * result) = v533;
                              v154 += v530;
                              ++result;
                              --v531;
                            }
                            while (v531);
                          }
                          v154 += v529;
                          ++v526;
                          uint64_t result = v532;
                        }
                        while (v526 != v523);
                      }
                      v154 += v525;
                      ++v522;
                      uint64_t result = v532;
                    }
                    while (v522 != v518);
                  }
                  v154 += v521;
                  ++v515;
                  uint64_t result = v532;
                }
                while (v515 != v514);
              }
              break;
            default:
              uint64_t v475 = v8[6];
              if (v475)
              {
                uint64_t v476 = 0;
                uint64_t v477 = *(void *)(v155 + 152) + v154;
                uint64_t v478 = v8[19];
                int v479 = *a4;
                uint64_t v480 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v481 = *a5;
                do
                {
                  uint64_t v482 = 0;
                  if ((v480 & 0x80000000) == 0)
                  {
                    uint64_t v483 = v480;
                    LODWORD(result) = v476;
                    do
                    {
                      ldiv_t v484 = ldiv((int)result, v479[v483]);
                      uint64_t result = v484.quot;
                      v482 += v481[v483--] * v484.rem;
                    }
                    while (v483 != -1);
                  }
                  if (*(unsigned char *)(v477 + v482)) {
                    float v485 = 1.0;
                  }
                  else {
                    float v485 = 0.0;
                  }
                  *(float *)(v478 + 4 * v476++) = v485;
                }
                while (v476 != v475);
              }
              break;
          }
          break;
        case 3:
          uint64_t v161 = *a7;
          uint64_t v1390 = *a8;
          int v162 = *(void **)result;
          uint64_t v163 = v162[1] - *v162;
          switch(v163 >> 2)
          {
            case 1:
              uint64_t v164 = (v163 << 30) - 0x100000000;
              int v165 = *(int *)((char *)*a4 + (v164 >> 30));
              if (v165 >= 1)
              {
                uint64_t v166 = v164 >> 29;
                uint64_t v167 = *(uint64_t *)((char *)*a5 + (v164 >> 29));
                uint64_t v168 = (float *)(v8[19] + 4 * v1390);
                uint64_t v169 = (unsigned char *)(v162[19] + v161);
                uint64_t v170 = 4 * *(void *)(*a6 + v166);
                do
                {
                  if (*v169) {
                    float v171 = 1.0;
                  }
                  else {
                    float v171 = 0.0;
                  }
                  *uint64_t v168 = v171;
                  v169 += v167;
                  uint64_t v168 = (float *)((char *)v168 + v170);
                  --v165;
                }
                while (v165);
              }
              break;
            case 2:
              uint64_t v1253 = (v163 << 30) - 0x200000000;
              int v1254 = *(int *)((char *)*a4 + (v1253 >> 30));
              if (v1254 >= 1)
              {
                int v1255 = 0;
                uint64_t v1256 = v1253 >> 29;
                uint64_t v1257 = *(uint64_t *)((char *)*a5 + (v1253 >> 29));
                uint64_t v1258 = (v163 << 30) - 0x100000000;
                uint64_t result = v1258 >> 29;
                uint64_t v1259 = *(uint64_t *)((char *)*a5 + (v1258 >> 29));
                int v1260 = *(int *)((char *)*a4 + (v1258 >> 30));
                uint64_t v1261 = 4 * v1390;
                uint64_t v1262 = 4 * *(void *)(*a6 + v1256);
                uint64_t v1263 = 4 * *(void *)(*a6 + (v1258 >> 29));
                do
                {
                  if (v1260 >= 1)
                  {
                    uint64_t v1264 = v162[19];
                    uint64_t result = v8[19] + v1261;
                    int v1265 = v1260;
                    do
                    {
                      if (*(unsigned char *)(v1264 + v161)) {
                        float v1266 = 1.0;
                      }
                      else {
                        float v1266 = 0.0;
                      }
                      *(float *)uint64_t result = v1266;
                      result += v1263;
                      v1264 += v1259;
                      --v1265;
                    }
                    while (v1265);
                  }
                  v161 += v1257;
                  ++v1255;
                  v1261 += v1262;
                }
                while (v1255 != v1254);
              }
              break;
            case 3:
              uint64_t v1267 = (v163 << 30) - 0x300000000;
              int v1268 = *a4;
              int v1269 = *(int *)((char *)*a4 + (v1267 >> 30));
              if (v1269 >= 1)
              {
                int v1270 = 0;
                uint64_t v1271 = v163 << 30;
                uint64_t v1272 = *a5;
                uint64_t v1273 = v1267 >> 29;
                uint64_t v1274 = *(uint64_t *)((char *)*a5 + (v1267 >> 29));
                uint64_t v1275 = *a6;
                uint64_t v1276 = *(void *)(*a6 + v1273);
                uint64_t v1277 = (v1271 - 0x200000000) >> 29;
                uint64_t v1278 = *(uint64_t *)((char *)*a5 + v1277);
                uint64_t v1279 = v1271 - 0x100000000;
                uint64_t v1280 = *(void *)(*a6 + v1277);
                int v1281 = *(int *)((char *)v1268 + ((v1271 - 0x200000000) >> 30));
                uint64_t v1282 = v1279 >> 32;
                uint64_t v1283 = 4 * v1390;
                uint64_t result = 4 * v1276;
                uint64_t v1284 = 4 * v1280;
                do
                {
                  if (v1281 >= 1)
                  {
                    int v1285 = 0;
                    uint64_t v1286 = v1272[v1282];
                    int v1287 = v1268[v1282];
                    uint64_t v1288 = *a2;
                    uint64_t v1289 = 4 * *(void *)(v1275 + 8 * v1282);
                    uint64_t v1290 = v1283;
                    uint64_t v1291 = v161;
                    do
                    {
                      if (v1287 >= 1)
                      {
                        uint64_t v1292 = v162[19];
                        uint64_t v1293 = (float *)(v1288[19] + v1290);
                        int v1294 = v1287;
                        do
                        {
                          if (*(unsigned char *)(v1292 + v1291)) {
                            float v1295 = 1.0;
                          }
                          else {
                            float v1295 = 0.0;
                          }
                          *uint64_t v1293 = v1295;
                          uint64_t v1293 = (float *)((char *)v1293 + v1289);
                          v1292 += v1286;
                          --v1294;
                        }
                        while (v1294);
                      }
                      v1291 += v1278;
                      ++v1285;
                      v1290 += v1284;
                    }
                    while (v1285 != v1281);
                  }
                  v161 += v1274;
                  ++v1270;
                  v1283 += result;
                }
                while (v1270 != v1269);
              }
              break;
            case 4:
              uint64_t v1296 = (v163 << 30) - 0x400000000;
              int v1297 = *a4;
              int v1513 = *(int *)((char *)*a4 + (v1296 >> 30));
              if (v1513 >= 1)
              {
                int v1298 = 0;
                uint64_t v1299 = v163 << 30;
                uint64_t v1300 = *a5;
                uint64_t v1301 = v1296 >> 29;
                uint64_t v1496 = *(uint64_t *)((char *)*a5 + v1301);
                uint64_t v1302 = *a6;
                uint64_t v1303 = (v1299 - 0x300000000) >> 29;
                uint64_t v1304 = *(uint64_t *)((char *)*a5 + v1303);
                uint64_t v1305 = *(void *)(*a6 + v1303);
                int v1306 = *(int *)((char *)v1297 + ((v1299 - 0x300000000) >> 30));
                uint64_t v1307 = (v1299 - 0x200000000) >> 32;
                uint64_t v1308 = (v1299 - 0x100000000) >> 32;
                uint64_t result = 4 * v1390;
                uint64_t v1528 = 4 * *(void *)(*a6 + v1301);
                uint64_t v1309 = 4 * v1305;
                do
                {
                  uint64_t v1310 = v161;
                  if (v1306 >= 1)
                  {
                    int v1311 = 0;
                    uint64_t v1312 = v1300[v1307];
                    int v1313 = v1297[v1307];
                    uint64_t v1314 = 4 * *(void *)(v1302 + 8 * v1307);
                    uint64_t v1315 = result;
                    uint64_t v1316 = v161;
                    do
                    {
                      if (v1313 >= 1)
                      {
                        int v1317 = 0;
                        uint64_t v1318 = v1300[v1308];
                        int v1319 = v1297[v1308];
                        uint64_t v1320 = *a2;
                        uint64_t v1321 = 4 * *(void *)(v1302 + 8 * v1308);
                        uint64_t v1322 = v1315;
                        uint64_t v1323 = v1316;
                        do
                        {
                          if (v1319 >= 1)
                          {
                            uint64_t v1324 = v162[19];
                            int v1325 = (float *)(v1320[19] + v1322);
                            int v1326 = v1319;
                            do
                            {
                              if (*(unsigned char *)(v1324 + v1323)) {
                                float v1327 = 1.0;
                              }
                              else {
                                float v1327 = 0.0;
                              }
                              *int v1325 = v1327;
                              int v1325 = (float *)((char *)v1325 + v1321);
                              v1324 += v1318;
                              --v1326;
                            }
                            while (v1326);
                          }
                          v1323 += v1312;
                          ++v1317;
                          v1322 += v1314;
                        }
                        while (v1317 != v1313);
                      }
                      v1316 += v1304;
                      ++v1311;
                      v1315 += v1309;
                    }
                    while (v1311 != v1306);
                  }
                  uint64_t v161 = v1310 + v1496;
                  ++v1298;
                  result += v1528;
                }
                while (v1298 != v1513);
              }
              break;
            case 5:
              uint64_t v1328 = (v163 << 30) - 0x500000000;
              uint64_t v1329 = *a4;
              int v1456 = *(int *)((char *)*a4 + (v1328 >> 30));
              if (v1456 >= 1)
              {
                int v1468 = 0;
                uint64_t v1330 = v163 << 30;
                int v1331 = *a5;
                uint64_t v1332 = v1328 >> 29;
                uint64_t v1446 = *(uint64_t *)((char *)*a5 + v1332);
                uint64_t v1333 = *a6;
                uint64_t v1334 = (v1330 - 0x400000000) >> 29;
                uint64_t v1514 = *(uint64_t *)((char *)*a5 + v1334);
                int v1529 = *(int *)((char *)v1329 + ((v1330 - 0x400000000) >> 30));
                uint64_t v1335 = (v1330 - 0x200000000) >> 32;
                uint64_t result = (v1330 - 0x100000000) >> 32;
                uint64_t v1426 = (v1330 - 0x300000000) >> 32;
                uint64_t v1436 = 4 * *(void *)(*a6 + v1332);
                uint64_t v1480 = 4 * v1390;
                uint64_t v1497 = 4 * *(void *)(*a6 + v1334);
                do
                {
                  uint64_t v1411 = v161;
                  if (v1529 >= 1)
                  {
                    int v1336 = 0;
                    uint64_t v1337 = v1331[v1426];
                    int v1338 = v1329[v1426];
                    uint64_t v1339 = 4 * *(void *)(v1333 + 8 * v1426);
                    uint64_t v1340 = v1480;
                    uint64_t v1341 = v161;
                    do
                    {
                      if (v1338 >= 1)
                      {
                        int v1342 = 0;
                        uint64_t v1343 = v1331[v1335];
                        int v1344 = v1329[v1335];
                        uint64_t v1345 = 4 * *(void *)(v1333 + 8 * v1335);
                        uint64_t v1346 = v1340;
                        uint64_t v1347 = v1341;
                        do
                        {
                          if (v1344 >= 1)
                          {
                            int v1348 = 0;
                            uint64_t v1349 = v1331[result];
                            int v1350 = v1329[result];
                            uint64_t v1351 = *a2;
                            uint64_t v1352 = 4 * *(void *)(v1333 + 8 * result);
                            uint64_t v1353 = v1346;
                            uint64_t v1354 = v1347;
                            do
                            {
                              if (v1350 >= 1)
                              {
                                uint64_t v1355 = v162[19];
                                uint64_t v1356 = (float *)(v1351[19] + v1353);
                                int v1357 = v1350;
                                do
                                {
                                  if (*(unsigned char *)(v1355 + v1354)) {
                                    float v1358 = 1.0;
                                  }
                                  else {
                                    float v1358 = 0.0;
                                  }
                                  *uint64_t v1356 = v1358;
                                  uint64_t v1356 = (float *)((char *)v1356 + v1352);
                                  v1355 += v1349;
                                  --v1357;
                                }
                                while (v1357);
                              }
                              v1354 += v1343;
                              ++v1348;
                              v1353 += v1345;
                            }
                            while (v1348 != v1344);
                          }
                          v1347 += v1337;
                          ++v1342;
                          v1346 += v1339;
                        }
                        while (v1342 != v1338);
                      }
                      v1341 += v1514;
                      ++v1336;
                      v1340 += v1497;
                    }
                    while (v1336 != v1529);
                  }
                  uint64_t v161 = v1411 + v1446;
                  v1480 += v1436;
                  ++v1468;
                }
                while (v1468 != v1456);
              }
              break;
            default:
              int v1214 = (char *)a4[1];
              LODWORD(v1215) = 1;
              uint64_t v1216 = -20;
              do
              {
                uint64_t v1215 = *(int *)&v1214[v1216] * (uint64_t)(int)v1215;
                v1216 += 4;
              }
              while (v1216);
              unint64_t v1389 = v162[6];
              if (v1389)
              {
                uint64_t v1217 = 0;
                uint64_t v1218 = (v163 << 30) - 0x500000000;
                uint64_t v1219 = *a4;
                uint64_t v1369 = *v8;
                uint64_t v1220 = *a5;
                uint64_t v1374 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1379 = ((unint64_t)(v1214 - (char *)*a4) >> 2) - 1;
                uint64_t v1221 = *a6;
                int v1445 = *(int *)((char *)*a4 + (v1218 >> 30));
                uint64_t v1364 = ((v163 << 30) - 0x400000000) >> 32;
                uint64_t v1410 = *a7;
                uint64_t v1417 = ((v163 << 30) - 0x300000000) >> 32;
                uint64_t v1222 = ((v163 << 30) - 0x200000000) >> 32;
                uint64_t v1223 = ((v163 << 30) - 0x100000000) >> 32;
                uint64_t v1425 = 4 * *(void *)(*a6 + (v1218 >> 29));
                uint64_t v1435 = *(uint64_t *)((char *)*a5 + (v1218 >> 29));
                uint64_t v1384 = v1215;
                do
                {
                  uint64_t v1224 = v1379;
                  if ((v1379 & 0x80000000) != 0)
                  {
                    uint64_t v1225 = 0;
                    uint64_t v1226 = v1374;
                  }
                  else
                  {
                    uint64_t v1225 = 0;
                    LODWORD(result) = v1217;
                    uint64_t v1226 = v1374;
                    do
                    {
                      ldiv_t v1227 = ldiv((int)result, v1219[v1224]);
                      uint64_t result = v1227.quot;
                      v1225 += v1220[v1224--] * v1227.rem;
                    }
                    while (v1224 != -1);
                  }
                  uint64_t v1404 = v1217;
                  uint64_t v1228 = 0;
                  if ((v1226 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1217;
                    do
                    {
                      ldiv_t v1229 = ldiv((int)result, *(int *)(v1369 + 4 * v1226));
                      uint64_t result = v1229.quot;
                      v1228 += *(void *)(v1221 + 8 * v1226--) * v1229.rem;
                    }
                    while (v1226 != -1);
                  }
                  if (v1445 >= 1)
                  {
                    int v1230 = 0;
                    uint64_t v1512 = v1220[v1364];
                    uint64_t v1479 = v1225 + v1410;
                    int v1527 = v1219[v1364];
                    uint64_t v1467 = 4 * (v1228 + v1390);
                    uint64_t v1495 = 4 * *(void *)(v1221 + 8 * v1364);
                    do
                    {
                      int v1455 = v1230;
                      if (v1527 >= 1)
                      {
                        int v1231 = 0;
                        uint64_t v1232 = v1220[v1417];
                        int v1233 = v1219[v1417];
                        uint64_t v1234 = 4 * *(void *)(v1221 + 8 * v1417);
                        uint64_t v1236 = v1467;
                        uint64_t v1235 = v1479;
                        do
                        {
                          if (v1233 >= 1)
                          {
                            int v1237 = 0;
                            uint64_t v1238 = v1220[v1222];
                            int v1239 = v1219[v1222];
                            uint64_t v1240 = 4 * *(void *)(v1221 + 8 * v1222);
                            uint64_t result = v1236;
                            uint64_t v1241 = v1235;
                            do
                            {
                              if (v1239 >= 1)
                              {
                                int v1242 = 0;
                                uint64_t v1243 = v1220[v1223];
                                int v1244 = v1219[v1223];
                                uint64_t v1245 = *a2;
                                uint64_t v1246 = 4 * *(void *)(v1221 + 8 * v1223);
                                uint64_t v1247 = result;
                                uint64_t v1248 = v1241;
                                do
                                {
                                  if (v1244 >= 1)
                                  {
                                    uint64_t v1249 = v162[19];
                                    int v1250 = (float *)(v1245[19] + v1247);
                                    int v1251 = v1244;
                                    do
                                    {
                                      if (*(unsigned char *)(v1249 + v1248)) {
                                        float v1252 = 1.0;
                                      }
                                      else {
                                        float v1252 = 0.0;
                                      }
                                      *int v1250 = v1252;
                                      int v1250 = (float *)((char *)v1250 + v1246);
                                      v1249 += v1243;
                                      --v1251;
                                    }
                                    while (v1251);
                                  }
                                  v1248 += v1238;
                                  ++v1242;
                                  v1247 += v1240;
                                }
                                while (v1242 != v1239);
                              }
                              v1241 += v1232;
                              ++v1237;
                              result += v1234;
                            }
                            while (v1237 != v1233);
                          }
                          v1235 += v1512;
                          ++v1231;
                          v1236 += v1495;
                        }
                        while (v1231 != v1527);
                      }
                      v1479 += v1435;
                      int v1230 = v1455 + 1;
                      v1467 += v1425;
                    }
                    while (v1455 + 1 != v1445);
                  }
                  v1217 += v1384;
                }
                while (v1389 > v1404 + v1384);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<unsigned char,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, float a9)
{
  uint64_t v9 = *(uint64_t **)a2;
  uint64_t v10 = a6;
  uint64_t v13 = (uint64_t **)a2;
  uint64_t v14 = result;
  switch(*(_DWORD *)(*(void *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v15 = v9[6];
          if (v15)
          {
            int v16 = (void *)v9[19];
            BOOL v17 = **(unsigned char **)(*(void *)v14 + 152) != 0;
            uint64_t result = (uint64_t)memset(v16, v17, v15);
          }
          break;
        case 1:
          uint64_t v39 = *(void *)(*(void *)result + 160);
          if (v39)
          {
            uint64_t v40 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v41 = (BOOL *)v9[19];
            do
            {
              int v42 = *v40++;
              *v41++ = v42 != 0;
              --v39;
            }
            while (v39);
          }
          break;
        case 2:
          uint64_t v43 = *a7;
          uint64_t v44 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v45 = **a4;
              if ((int)v45 >= 1)
              {
                uint64_t v46 = (BOOL *)v9[19];
                uint64_t v47 = **a5;
                uint64_t v48 = (unsigned char *)(*(void *)(v44 + 152) + v43);
                do
                {
                  *v46++ = *v48 != 0;
                  v48 += v47;
                  --v45;
                }
                while (v45);
              }
              break;
            case 2:
              int v184 = **a4;
              if (v184 >= 1)
              {
                int v185 = 0;
                uint64_t v186 = 0;
                uint64_t v187 = *(void *)(v44 + 152);
                uint64_t v188 = v9[19];
                uint64_t v189 = (*a4)[1];
                uint64_t v190 = (*a5)[1];
                uint64_t v191 = **a5 - v190 * v189;
                do
                {
                  int v192 = v189;
                  if ((int)v189 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned char *)(v187 + v43) != 0;
                      *(unsigned char *)(v188 + v186++) = result;
                      v43 += v190;
                      --v192;
                    }
                    while (v192);
                  }
                  v43 += v191;
                  ++v185;
                }
                while (v185 != v184);
              }
              break;
            case 3:
              int v193 = *a4;
              int v194 = **a4;
              if (v194 >= 1)
              {
                int v195 = 0;
                uint64_t result = 0;
                uint64_t v196 = *(void *)(v44 + 152);
                uint64_t v197 = v9[19];
                uint64_t v198 = v193[1];
                uint64_t v199 = *a5;
                uint64_t v200 = (*a5)[1];
                uint64_t v201 = **a5 - v200 * v198;
                do
                {
                  if ((int)v198 < 1)
                  {
                    uint64_t v208 = result;
                  }
                  else
                  {
                    int v202 = 0;
                    uint64_t v203 = v193[2];
                    uint64_t v204 = *a5;
                    uint64_t v205 = v200 - v199[2] * v203;
                    do
                    {
                      if ((int)v203 < 1)
                      {
                        uint64_t v208 = result;
                      }
                      else
                      {
                        uint64_t v206 = v204[2];
                        int v207 = v203;
                        do
                        {
                          uint64_t v208 = result + 1;
                          *(unsigned char *)(v197 + result) = *(unsigned char *)(v196 + v43) != 0;
                          v43 += v206;
                          ++result;
                          --v207;
                        }
                        while (v207);
                      }
                      v43 += v205;
                      ++v202;
                      uint64_t result = v208;
                    }
                    while (v202 != v198);
                  }
                  v43 += v201;
                  ++v195;
                  uint64_t result = v208;
                }
                while (v195 != v194);
              }
              break;
            case 4:
              int v209 = *a4;
              int v210 = **a4;
              if (v210 >= 1)
              {
                int v211 = 0;
                uint64_t result = 0;
                uint64_t v212 = *(void *)(v44 + 152);
                uint64_t v213 = v9[19];
                uint64_t v214 = v209[1];
                uint64_t v215 = *a5;
                uint64_t v216 = (*a5)[1];
                uint64_t v217 = **a5 - v216 * v214;
                do
                {
                  if ((int)v214 < 1)
                  {
                    uint64_t v228 = result;
                  }
                  else
                  {
                    int v218 = 0;
                    uint64_t v219 = v209[2];
                    int v220 = *a5;
                    uint64_t v221 = v216 - v215[2] * v219;
                    do
                    {
                      if ((int)v219 < 1)
                      {
                        uint64_t v228 = result;
                      }
                      else
                      {
                        int v222 = 0;
                        uint64_t v223 = v209[3];
                        uint64_t v224 = *a5;
                        uint64_t v225 = v220[2] - v220[3] * v223;
                        do
                        {
                          if ((int)v223 < 1)
                          {
                            uint64_t v228 = result;
                          }
                          else
                          {
                            uint64_t v226 = v224[3];
                            int v227 = v223;
                            do
                            {
                              uint64_t v228 = result + 1;
                              *(unsigned char *)(v213 + result) = *(unsigned char *)(v212 + v43) != 0;
                              v43 += v226;
                              ++result;
                              --v227;
                            }
                            while (v227);
                          }
                          v43 += v225;
                          ++v222;
                          uint64_t result = v228;
                        }
                        while (v222 != v219);
                      }
                      v43 += v221;
                      ++v218;
                      uint64_t result = v228;
                    }
                    while (v218 != v214);
                  }
                  v43 += v217;
                  ++v211;
                  uint64_t result = v228;
                }
                while (v211 != v210);
              }
              break;
            default:
              uint64_t v174 = v9[6];
              if (v174)
              {
                uint64_t v175 = 0;
                uint64_t v176 = *(void *)(v44 + 152) + v43;
                uint64_t v177 = v9[19];
                uint64_t v178 = *a4;
                uint64_t v179 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v180 = *a5;
                do
                {
                  uint64_t v181 = 0;
                  if ((v179 & 0x80000000) == 0)
                  {
                    uint64_t v182 = v179;
                    LODWORD(result) = v175;
                    do
                    {
                      ldiv_t v183 = ldiv((int)result, v178[v182]);
                      uint64_t result = v183.quot;
                      v181 += v180[v182--] * v183.rem;
                    }
                    while (v182 != -1);
                  }
                  *(unsigned char *)(v177 + v175++) = *(unsigned char *)(v176 + v181) != 0;
                }
                while (v175 != v174);
              }
              break;
          }
          break;
        case 3:
          uint64_t v49 = *a7;
          uint64_t v50 = *a8;
          uint64_t v51 = *(void **)result;
          uint64_t v52 = v51[1] - *v51;
          switch(v52 >> 2)
          {
            case 1:
              uint64_t v53 = (v52 << 30) - 0x100000000;
              int v54 = *(int *)((char *)*a4 + (v53 >> 30));
              if (v54 >= 1)
              {
                uint64_t v55 = v53 >> 29;
                uint64_t v56 = *(uint64_t *)((char *)*a5 + (v53 >> 29));
                uint64_t v57 = *(void *)(*a6 + v55);
                uint64_t v58 = (BOOL *)(v9[19] + v50);
                uint64_t v59 = (unsigned char *)(v51[19] + v49);
                do
                {
                  BOOL *v58 = *v59 != 0;
                  v59 += v56;
                  v58 += v57;
                  --v54;
                }
                while (v54);
              }
              break;
            case 2:
              uint64_t v569 = (v52 << 30) - 0x200000000;
              int v570 = *(int *)((char *)*a4 + (v569 >> 30));
              if (v570 >= 1)
              {
                int v571 = 0;
                uint64_t v572 = v569 >> 29;
                uint64_t v573 = *(uint64_t *)((char *)*a5 + (v569 >> 29));
                uint64_t v574 = *(void *)(*a6 + v572);
                uint64_t v575 = (v52 << 30) - 0x100000000;
                uint64_t result = v575 >> 29;
                uint64_t v576 = *(uint64_t *)((char *)*a5 + (v575 >> 29));
                uint64_t v577 = *(void *)(*a6 + (v575 >> 29));
                int v578 = *(int *)((char *)*a4 + (v575 >> 30));
                do
                {
                  if (v578 >= 1)
                  {
                    uint64_t v579 = v9[19];
                    uint64_t v580 = v51[19];
                    LODWORD(result) = v578;
                    do
                    {
                      *(unsigned char *)(v579 + v50) = *(unsigned char *)(v580 + v49) != 0;
                      v579 += v577;
                      v580 += v576;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v49 += v573;
                  v50 += v574;
                  ++v571;
                }
                while (v571 != v570);
              }
              break;
            case 3:
              uint64_t v581 = (v52 << 30) - 0x300000000;
              uint64_t v582 = *a4;
              int v583 = *(int *)((char *)*a4 + (v581 >> 30));
              if (v583 >= 1)
              {
                int v584 = 0;
                uint64_t v585 = v52 << 30;
                int v586 = *a5;
                uint64_t v587 = v581 >> 29;
                uint64_t v588 = *(uint64_t *)((char *)*a5 + (v581 >> 29));
                uint64_t v589 = *a6;
                uint64_t v590 = *(void *)(*a6 + v587);
                uint64_t v591 = v585 - 0x200000000;
                uint64_t v592 = (v585 - 0x200000000) >> 29;
                uint64_t v593 = v585 - 0x100000000;
                uint64_t v594 = *(uint64_t *)((char *)*a5 + v592);
                uint64_t v595 = *(void *)(*a6 + v592);
                int v596 = *(int *)((char *)v582 + (v591 >> 30));
                uint64_t result = v593 >> 32;
                do
                {
                  if (v596 >= 1)
                  {
                    int v597 = 0;
                    uint64_t v598 = v586[result];
                    uint64_t v599 = *(void *)(v589 + 8 * result);
                    uint64_t v600 = v49;
                    int v601 = v582[result];
                    uint64_t v602 = v50;
                    int v603 = *v13;
                    do
                    {
                      if (v601 >= 1)
                      {
                        uint64_t v604 = v603[19];
                        uint64_t v605 = v51[19];
                        int v606 = v601;
                        do
                        {
                          *(unsigned char *)(v604 + v602) = *(unsigned char *)(v605 + v600) != 0;
                          v604 += v599;
                          v605 += v598;
                          --v606;
                        }
                        while (v606);
                      }
                      v600 += v594;
                      v602 += v595;
                      ++v597;
                    }
                    while (v597 != v596);
                  }
                  v49 += v588;
                  v50 += v590;
                  ++v584;
                }
                while (v584 != v583);
              }
              break;
            case 4:
              uint64_t v607 = (v52 << 30) - 0x400000000;
              int v608 = *a4;
              int v1523 = *(int *)((char *)*a4 + (v607 >> 30));
              if (v1523 >= 1)
              {
                int v609 = 0;
                uint64_t v610 = *a5;
                uint64_t v611 = v607 >> 29;
                uint64_t v1490 = *(uint64_t *)((char *)*a5 + v611);
                uint64_t v612 = *a6;
                uint64_t v1507 = *(void *)(*a6 + v611);
                uint64_t v613 = v52 << 30;
                uint64_t v614 = (v52 << 30) - 0x300000000;
                uint64_t v615 = *(uint64_t *)((char *)*a5 + (v614 >> 29));
                uint64_t v616 = *(void *)(*a6 + (v614 >> 29));
                int v617 = *(int *)((char *)v608 + (v614 >> 30));
                uint64_t v1474 = (v613 - 0x200000000) >> 32;
                uint64_t v618 = (v613 - 0x100000000) >> 32;
                do
                {
                  uint64_t result = v50;
                  uint64_t v619 = v49;
                  if (v617 >= 1)
                  {
                    int v620 = 0;
                    uint64_t v621 = v610[v1474];
                    uint64_t v622 = *(void *)(v612 + 8 * v1474);
                    uint64_t v623 = v49;
                    int v624 = v608[v1474];
                    uint64_t v625 = v50;
                    do
                    {
                      if (v624 >= 1)
                      {
                        int v626 = 0;
                        uint64_t v627 = v610[v618];
                        uint64_t v628 = *(void *)(v612 + 8 * v618);
                        uint64_t v629 = v623;
                        int v630 = v608[v618];
                        uint64_t v631 = v625;
                        int v632 = *v13;
                        do
                        {
                          if (v630 >= 1)
                          {
                            uint64_t v633 = v632[19];
                            uint64_t v634 = v51[19];
                            int v635 = v630;
                            do
                            {
                              *(unsigned char *)(v633 + v631) = *(unsigned char *)(v634 + v629) != 0;
                              v633 += v628;
                              v634 += v627;
                              --v635;
                            }
                            while (v635);
                          }
                          v629 += v621;
                          v631 += v622;
                          ++v626;
                        }
                        while (v626 != v624);
                      }
                      v623 += v615;
                      v625 += v616;
                      ++v620;
                    }
                    while (v620 != v617);
                  }
                  uint64_t v49 = v619 + v1490;
                  uint64_t v50 = result + v1507;
                  ++v609;
                }
                while (v609 != v1523);
              }
              break;
            case 5:
              uint64_t v636 = (v52 << 30) - 0x500000000;
              int v637 = *a4;
              int v1450 = *(int *)((char *)*a4 + (v636 >> 30));
              if (v1450 >= 1)
              {
                int v1462 = 0;
                uint64_t v638 = v52 << 30;
                int v639 = *a5;
                uint64_t v640 = v636 >> 29;
                uint64_t v641 = *a6;
                uint64_t v1430 = *(void *)(*a6 + v640);
                uint64_t v1440 = *(uint64_t *)((char *)*a5 + v640);
                uint64_t v642 = (v638 - 0x400000000) >> 29;
                uint64_t v1491 = *(void *)(*a6 + v642);
                uint64_t v1508 = *(uint64_t *)((char *)*a5 + v642);
                int v1524 = *(int *)((char *)v637 + ((v638 - 0x400000000) >> 30));
                uint64_t v1420 = (v638 - 0x300000000) >> 32;
                uint64_t v1475 = (v638 - 0x200000000) >> 32;
                uint64_t v643 = (v638 - 0x100000000) >> 32;
                do
                {
                  uint64_t v1389 = v50;
                  uint64_t v1399 = v49;
                  if (v1524 >= 1)
                  {
                    int v644 = 0;
                    uint64_t v645 = v639[v1420];
                    uint64_t v646 = *(void *)(v641 + 8 * v1420);
                    uint64_t result = v50;
                    uint64_t v647 = v49;
                    int v648 = v637[v1420];
                    do
                    {
                      if (v648 >= 1)
                      {
                        int v649 = 0;
                        uint64_t v650 = v639[v1475];
                        uint64_t v651 = *(void *)(v641 + 8 * v1475);
                        uint64_t v652 = v647;
                        int v653 = v637[v1475];
                        uint64_t v654 = result;
                        do
                        {
                          if (v653 >= 1)
                          {
                            int v655 = 0;
                            uint64_t v656 = v639[v643];
                            uint64_t v657 = *(void *)(v641 + 8 * v643);
                            uint64_t v658 = v652;
                            int v659 = v637[v643];
                            uint64_t v660 = v654;
                            int v661 = *(uint64_t **)a2;
                            do
                            {
                              if (v659 >= 1)
                              {
                                uint64_t v662 = v661[19];
                                uint64_t v663 = v51[19];
                                int v664 = v659;
                                do
                                {
                                  *(unsigned char *)(v662 + v660) = *(unsigned char *)(v663 + v658) != 0;
                                  v662 += v657;
                                  v663 += v656;
                                  --v664;
                                }
                                while (v664);
                              }
                              v658 += v650;
                              v660 += v651;
                              ++v655;
                            }
                            while (v655 != v653);
                          }
                          v652 += v645;
                          v654 += v646;
                          ++v649;
                        }
                        while (v649 != v648);
                      }
                      v647 += v1508;
                      result += v1491;
                      ++v644;
                    }
                    while (v644 != v1524);
                  }
                  uint64_t v49 = v1399 + v1440;
                  uint64_t v50 = v1389 + v1430;
                  ++v1462;
                }
                while (v1462 != v1450);
              }
              break;
            default:
              uint64_t v532 = (char *)a4[1];
              LODWORD(v533) = 1;
              uint64_t v534 = -20;
              do
              {
                uint64_t v533 = *(int *)&v532[v534] * (uint64_t)(int)v533;
                v534 += 4;
              }
              while (v534);
              unint64_t v1381 = v51[6];
              if (v1381)
              {
                uint64_t v535 = 0;
                uint64_t v536 = (v52 << 30) - 0x500000000;
                uint64_t v537 = *a4;
                uint64_t v1358 = *v9;
                uint64_t v538 = *a5;
                uint64_t v1363 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                uint64_t v1368 = ((unint64_t)(v532 - (char *)*a4) >> 2) - 1;
                uint64_t v539 = *a6;
                uint64_t v1411 = *(void *)(*a6 + (v536 >> 29));
                uint64_t v1419 = *(uint64_t *)((char *)*a5 + (v536 >> 29));
                int v1429 = *(int *)((char *)*a4 + (v536 >> 30));
                uint64_t v1354 = ((v52 << 30) - 0x400000000) >> 32;
                uint64_t v1405 = ((v52 << 30) - 0x300000000) >> 32;
                uint64_t v1473 = ((v52 << 30) - 0x200000000) >> 32;
                uint64_t v540 = ((v52 << 30) - 0x100000000) >> 32;
                uint64_t v1388 = *a8;
                uint64_t v1398 = *a7;
                uint64_t v1373 = v533;
                do
                {
                  uint64_t v541 = v1368;
                  if ((v1368 & 0x80000000) != 0)
                  {
                    uint64_t v542 = 0;
                  }
                  else
                  {
                    uint64_t v542 = 0;
                    LODWORD(result) = v535;
                    do
                    {
                      ldiv_t v543 = ldiv((int)result, v537[v541]);
                      uint64_t result = v543.quot;
                      v542 += v538[v541--] * v543.rem;
                    }
                    while (v541 != -1);
                  }
                  uint64_t v544 = v1363;
                  uint64_t v1384 = v535;
                  uint64_t v545 = 0;
                  if ((v1363 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v535;
                    do
                    {
                      ldiv_t v546 = ldiv((int)result, *(int *)(v1358 + 4 * v544));
                      uint64_t result = v546.quot;
                      v545 += *(void *)(v539 + 8 * v544--) * v546.rem;
                    }
                    while (v544 != -1);
                  }
                  if (v1429 >= 1)
                  {
                    int v547 = 0;
                    uint64_t v1461 = v542 + v1398;
                    uint64_t v1449 = v545 + v1388;
                    uint64_t v1489 = *(void *)(v539 + 8 * v1354);
                    uint64_t v1506 = v538[v1354];
                    int v1522 = v537[v1354];
                    do
                    {
                      int v1439 = v547;
                      if (v1522 >= 1)
                      {
                        int v548 = 0;
                        uint64_t v549 = v538[v1405];
                        uint64_t v550 = *(void *)(v539 + 8 * v1405);
                        uint64_t v552 = v1449;
                        uint64_t v551 = v1461;
                        uint64_t result = v537[v1405];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            int v553 = 0;
                            uint64_t v554 = v538[v1473];
                            uint64_t v555 = *(void *)(v539 + 8 * v1473);
                            uint64_t v556 = v551;
                            int v557 = v537[v1473];
                            uint64_t v558 = v552;
                            do
                            {
                              if (v557 >= 1)
                              {
                                int v559 = 0;
                                uint64_t v560 = v538[v540];
                                uint64_t v561 = *(void *)(v539 + 8 * v540);
                                uint64_t v562 = v556;
                                int v563 = v537[v540];
                                uint64_t v564 = v558;
                                int v565 = *v13;
                                do
                                {
                                  if (v563 >= 1)
                                  {
                                    uint64_t v566 = v565[19];
                                    uint64_t v567 = v51[19];
                                    int v568 = v563;
                                    do
                                    {
                                      *(unsigned char *)(v566 + v564) = *(unsigned char *)(v567 + v562) != 0;
                                      v566 += v561;
                                      v567 += v560;
                                      --v568;
                                    }
                                    while (v568);
                                  }
                                  v562 += v554;
                                  v564 += v555;
                                  ++v559;
                                }
                                while (v559 != v557);
                              }
                              v556 += v549;
                              v558 += v550;
                              ++v553;
                            }
                            while (v553 != result);
                          }
                          v551 += v1506;
                          v552 += v1489;
                          ++v548;
                        }
                        while (v548 != v1522);
                      }
                      v1461 += v1419;
                      v1449 += v1411;
                      int v547 = v1439 + 1;
                    }
                    while (v1439 + 1 != v1429);
                  }
                  v535 += v1373;
                }
                while (v1381 > v1384 + v1373);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v9[6])
          {
            unint64_t v18 = 0;
            char v19 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v20 = v9[19];
            do
              *(unsigned char *)(v20 + v18++) = v19;
            while (*(void *)(*(void *)a2 + 48) > v18);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v60 = *a7;
          uint64_t v61 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v62 = 0;
                uint64_t v63 = *(void *)(v61 + 152);
                uint64_t v64 = v9[19];
                do
                {
                  *(unsigned char *)(v64 + v62) = *(unsigned char *)(v63 + v60);
                  v60 += **a5;
                  ++v62;
                }
                while (**a4 > (int)v62);
              }
              break;
            case 2:
              int v238 = *a4;
              int v239 = **a4;
              if (v239 >= 1)
              {
                int v240 = 0;
                uint64_t v241 = 0;
                uint64_t v242 = *(void *)(v61 + 152);
                uint64_t v243 = v9[19];
                do
                {
                  int v244 = v238[1];
                  if (v244 < 1)
                  {
                    uint64_t v245 = *a5;
                    uint64_t v246 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v243 + v241 + result) = *(unsigned char *)(v242 + v60);
                      uint64_t v245 = *a5;
                      uint64_t v246 = (*a5)[1];
                      v60 += v246;
                      int v238 = *a4;
                      int v244 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v244);
                    int v239 = *v238;
                    v241 += result;
                  }
                  uint64_t v60 = *v245 + v60 - v246 * v244;
                  ++v240;
                }
                while (v240 < v239);
              }
              break;
            case 3:
              int v247 = *a4;
              int v248 = **a4;
              if (v248 >= 1)
              {
                int v249 = 0;
                uint64_t v250 = 0;
                uint64_t v251 = *(void *)(v61 + 152);
                uint64_t v252 = v9[19];
                do
                {
                  int v253 = v247[1];
                  if (v253 < 1)
                  {
                    uint64_t v257 = *a5;
                    uint64_t v258 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v253; ++i)
                    {
                      int v255 = v247[2];
                      if (v255 < 1)
                      {
                        uint64_t v257 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v256 = 0;
                        do
                        {
                          *(unsigned char *)(v252 + v250 + v256) = *(unsigned char *)(v251 + v60);
                          uint64_t v257 = *a5;
                          uint64_t result = (*a5)[2];
                          v60 += result;
                          int v247 = *a4;
                          int v255 = (*a4)[2];
                          ++v256;
                        }
                        while ((int)v256 < v255);
                        v250 += v256;
                      }
                      uint64_t v258 = v257[1];
                      uint64_t v60 = v258 + v60 - result * v255;
                      int v253 = v247[1];
                    }
                    int v248 = *v247;
                  }
                  uint64_t v60 = *v257 + v60 - v258 * v253;
                  ++v249;
                }
                while (v249 < v248);
              }
              break;
            case 4:
              int v259 = *a4;
              int v260 = **a4;
              if (v260 >= 1)
              {
                int v261 = 0;
                uint64_t v262 = 0;
                uint64_t v263 = *(void *)(v61 + 152);
                uint64_t v264 = v9[19];
                do
                {
                  int v265 = v259[1];
                  if (v265 < 1)
                  {
                    uint64_t v271 = *a5;
                    uint64_t v273 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v265; ++j)
                    {
                      int v267 = v259[2];
                      if (v267 < 1)
                      {
                        uint64_t v271 = *a5;
                        uint64_t v272 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v267; ++k)
                        {
                          int v269 = v259[3];
                          if (v269 < 1)
                          {
                            uint64_t v271 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v270 = 0;
                            do
                            {
                              *(unsigned char *)(v264 + v262 + v270) = *(unsigned char *)(v263 + v60);
                              uint64_t v271 = *a5;
                              uint64_t result = (*a5)[3];
                              v60 += result;
                              int v259 = *a4;
                              int v269 = (*a4)[3];
                              ++v270;
                            }
                            while ((int)v270 < v269);
                            v262 += v270;
                          }
                          uint64_t v272 = v271[2];
                          uint64_t v60 = v272 + v60 - result * v269;
                          int v267 = v259[2];
                        }
                      }
                      uint64_t v273 = v271[1];
                      uint64_t v60 = v273 + v60 - v272 * v267;
                      int v265 = v259[1];
                    }
                    int v260 = *v259;
                  }
                  uint64_t v60 = *v271 + v60 - v273 * v265;
                  ++v261;
                }
                while (v261 < v260);
              }
              break;
            default:
              if (v9[6])
              {
                unint64_t v229 = 0;
                uint64_t v230 = *(void *)(v61 + 152) + v60;
                uint64_t v231 = v9[19];
                do
                {
                  uint64_t v232 = *a4;
                  unint64_t v233 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v234 = 0;
                  uint64_t v235 = (v233 - 1);
                  if ((int)v233 - 1 >= 0)
                  {
                    int v236 = *a5;
                    LODWORD(result) = v229;
                    do
                    {
                      ldiv_t v237 = ldiv((int)result, v232[v235]);
                      uint64_t result = v237.quot;
                      v234 += v236[v235--] * v237.rem;
                    }
                    while (v235 != -1);
                  }
                  *(unsigned char *)(v231 + v229++) = *(unsigned char *)(v230 + v234);
                }
                while (v229 < (*v13)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v65 = *a7;
          uint64_t v66 = *a8;
          uint64_t v67 = *(void **)result;
          uint64_t v68 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v68 >> 2)
          {
            case 1:
              uint64_t v69 = (v68 << 30) - 0x100000000;
              int v70 = *(int *)((char *)*a4 + (v69 >> 30));
              if (v70 >= 1)
              {
                uint64_t v71 = v69 >> 29;
                uint64_t v72 = *(uint64_t *)((char *)*a5 + (v69 >> 29));
                uint64_t v73 = *(void *)(*a6 + v71);
                int v74 = (unsigned char *)(v9[19] + v66);
                uint64_t v75 = (unsigned char *)(v67[19] + v65);
                do
                {
                  unsigned char *v74 = *v75;
                  v75 += v72;
                  v74 += v73;
                  --v70;
                }
                while (v70);
              }
              break;
            case 2:
              uint64_t v687 = (v68 << 30) - 0x200000000;
              int v688 = *(int *)((char *)*a4 + (v687 >> 30));
              if (v688 >= 1)
              {
                int v689 = 0;
                uint64_t v690 = v687 >> 29;
                uint64_t v691 = *(uint64_t *)((char *)*a5 + (v687 >> 29));
                uint64_t v692 = *(void *)(*a6 + v690);
                do
                {
                  uint64_t v693 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x100000000;
                  int v694 = *(int *)((char *)*a4 + (v693 >> 30));
                  if (v694 >= 1)
                  {
                    uint64_t v695 = v693 >> 29;
                    uint64_t v696 = *(uint64_t *)((char *)*a5 + (v693 >> 29));
                    uint64_t v697 = *(void *)(*a6 + v695);
                    uint64_t v698 = *(void *)(*(void *)a2 + 152);
                    uint64_t v699 = *(void *)(*(void *)v14 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v699 + v65);
                      *(unsigned char *)(v698 + v66) = result;
                      v698 += v697;
                      v699 += v696;
                      --v694;
                    }
                    while (v694);
                  }
                  v65 += v691;
                  v66 += v692;
                  ++v689;
                }
                while (v689 != v688);
              }
              break;
            case 3:
              uint64_t v700 = (v68 << 30) - 0x300000000;
              int v701 = *(int *)((char *)*a4 + (v700 >> 30));
              if (v701 >= 1)
              {
                int v702 = 0;
                uint64_t v703 = v700 >> 29;
                uint64_t v704 = *(uint64_t *)((char *)*a5 + (v700 >> 29));
                uint64_t v705 = *(void *)(*a6 + v703);
                do
                {
                  uint64_t v706 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x200000000;
                  int v707 = *(int *)((char *)*a4 + (v706 >> 30));
                  if (v707 >= 1)
                  {
                    int v708 = 0;
                    uint64_t v709 = v706 >> 29;
                    uint64_t v710 = *(uint64_t *)((char *)*a5 + (v706 >> 29));
                    uint64_t v711 = *(void *)(*v10 + v709);
                    uint64_t result = v65;
                    uint64_t v712 = v66;
                    do
                    {
                      uint64_t v713 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x100000000;
                      int v714 = *(int *)((char *)*a4 + (v713 >> 30));
                      if (v714 >= 1)
                      {
                        uint64_t v715 = v713 >> 29;
                        uint64_t v716 = *(uint64_t *)((char *)*a5 + (v713 >> 29));
                        uint64_t v717 = *(void *)(*v10 + v715);
                        uint64_t v718 = (*v13)[19];
                        uint64_t v719 = *(void *)(*(void *)v14 + 152);
                        do
                        {
                          *(unsigned char *)(v718 + v712) = *(unsigned char *)(v719 + result);
                          v718 += v717;
                          v719 += v716;
                          --v714;
                        }
                        while (v714);
                      }
                      result += v710;
                      v712 += v711;
                      ++v708;
                    }
                    while (v708 != v707);
                  }
                  v65 += v704;
                  v66 += v705;
                  ++v702;
                }
                while (v702 != v701);
              }
              break;
            case 4:
              uint64_t v720 = a4;
              uint64_t v721 = a5;
              ldiv_t v722 = a6;
              uint64_t v723 = *a7;
              uint64_t v724 = *a8;
              goto LABEL_558;
            case 5:
              uint64_t v725 = (v68 << 30) - 0x500000000;
              int v726 = *(int *)((char *)*a4 + (v725 >> 30));
              if (v726 >= 1)
              {
                uint64_t v727 = v725 >> 29;
                uint64_t v728 = *(uint64_t *)((char *)*a5 + v727);
                uint64_t v729 = *(void *)(*a6 + v727);
                do
                {
                  v65 += v728;
                  v66 += v729;
                  --v726;
                }
                while (v726);
              }
              break;
            default:
              LODWORD(v665) = 1;
              uint64_t v666 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v665 = a4[1][v666++] * (uint64_t)(int)v665;
              while (v666 * 4);
              if (v67[6])
              {
                uint64_t result = 0;
                uint64_t v1451 = *a8;
                uint64_t v1463 = *a7;
                uint64_t v1476 = v665;
                do
                {
                  uint64_t v667 = *a4;
                  unint64_t v668 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v669 = (v668 - 1);
                  uint64_t v1492 = v67;
                  uint64_t v1525 = result;
                  uint64_t v670 = 0;
                  if ((int)v668 - 1 >= 0)
                  {
                    uint64_t v671 = *a5;
                    do
                    {
                      ldiv_t v672 = ldiv((int)result, v667[v669]);
                      LODWORD(result) = v672.quot;
                      v670 += v671[v669--] * v672.rem;
                    }
                    while (v669 != -1);
                  }
                  uint64_t v673 = **v13;
                  unint64_t v674 = (unint64_t)((*v13)[1] - v673) >> 2;
                  uint64_t v675 = *v10;
                  uint64_t v676 = 0;
                  uint64_t v677 = (v674 - 1);
                  if ((int)v674 - 1 >= 0)
                  {
                    int quot = v1525;
                    do
                    {
                      ldiv_t v679 = ldiv(quot, *(int *)(v673 + 4 * v677));
                      int quot = v679.quot;
                      v676 += *(void *)(v675 + 8 * v677--) * v679.rem;
                    }
                    while (v677 != -1);
                  }
                  uint64_t v67 = v1492;
                  uint64_t v680 = ((v67[1] - *v67) << 30) - 0x500000000;
                  int v681 = *(int *)((char *)v667 + (v680 >> 30));
                  if (v681 >= 1)
                  {
                    uint64_t v682 = v670 + v1463;
                    uint64_t v683 = v680 >> 29;
                    uint64_t v684 = *(uint64_t *)((char *)*a5 + v683);
                    uint64_t v685 = *(void *)(v675 + v683);
                    uint64_t v686 = v676 + v1451;
                    do
                    {
                      v682 += v684;
                      v686 += v685;
                      --v681;
                    }
                    while (v681);
                    uint64_t v67 = *(void **)v14;
                  }
                  uint64_t v10 = a6;
                  uint64_t result = v1525 + v1476;
                }
                while (v67[6] > (unint64_t)(v1525 + v1476));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v21 = v9[6];
          if (v21)
          {
            int v22 = **(unsigned __int8 **)(*(void *)result + 152);
            unint64_t v23 = (_DWORD *)v9[19];
            do
            {
              *v23++ = v22;
              --v21;
            }
            while (v21);
          }
          break;
        case 1:
          uint64_t v76 = *(void *)(*(void *)result + 160);
          if (v76)
          {
            uint64_t v77 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v78 = (_DWORD *)v9[19];
            do
            {
              int v79 = *v77++;
              *v78++ = v79;
              --v76;
            }
            while (v76);
          }
          break;
        case 2:
          uint64_t v80 = *a7;
          uint64_t v81 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v82 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v83 = 0;
                uint64_t v84 = v9[19];
                uint64_t v85 = **a5;
                int v86 = (unsigned __int8 *)(*(void *)(v81 + 152) + v80);
                do
                {
                  *(_DWORD *)(v84 + 4 * v83) = *v86;
                  v86 += v85;
                  ++v83;
                }
                while (*v82 > (int)v83);
              }
              break;
            case 2:
              int v284 = *a4;
              int v285 = **a4;
              if (v285 >= 1)
              {
                int v286 = 0;
                uint64_t v287 = 0;
                uint64_t v288 = *(void *)(v81 + 152);
                uint64_t v289 = v9[19];
                uint64_t v290 = **a5;
                uint64_t v291 = (*a5)[1];
                int v292 = v284[1];
                do
                {
                  if (v292 >= 1)
                  {
                    uint64_t v293 = 0;
                    do
                    {
                      *(_DWORD *)(v289 + 4 * v287 + 4 * v293) = *(unsigned __int8 *)(v288 + v80);
                      v80 += v291;
                      int v292 = v284[1];
                      ++v293;
                    }
                    while ((int)v293 < v292);
                    int v285 = *v284;
                    v287 += v293;
                  }
                  uint64_t result = v292;
                  uint64_t v80 = v80 + v290 - v291 * v292;
                  ++v286;
                }
                while (v286 < v285);
              }
              break;
            case 3:
              uint64_t v294 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v295 = 0;
                uint64_t v296 = 0;
                uint64_t v297 = *(void *)(v81 + 152);
                uint64_t v298 = v9[19];
                uint64_t v299 = *a5;
                uint64_t v300 = **a5;
                uint64_t v301 = (*a5)[1];
                int v302 = v294[1];
                do
                {
                  if (v302 >= 1)
                  {
                    int v303 = 0;
                    int v304 = *a5;
                    uint64_t v305 = v299[2];
                    int v306 = v294[2];
                    do
                    {
                      if (v306 >= 1)
                      {
                        uint64_t v307 = 0;
                        uint64_t v308 = v304[2];
                        do
                        {
                          *(_DWORD *)(v298 + 4 * v296 + 4 * v307) = *(unsigned __int8 *)(v297 + v80);
                          v80 += v308;
                          int v306 = v294[2];
                          ++v307;
                        }
                        while ((int)v307 < v306);
                        int v302 = v294[1];
                        v296 += v307;
                      }
                      uint64_t v80 = v80 + v301 - v305 * v306;
                      ++v303;
                    }
                    while (v303 < v302);
                    uint64_t result = *v294;
                  }
                  uint64_t v80 = v80 + v300 - v301 * v302;
                  ++v295;
                }
                while (v295 < (int)result);
              }
              break;
            case 4:
              int v309 = *a4;
              int v310 = **a4;
              if (v310 >= 1)
              {
                int v311 = 0;
                uint64_t v312 = 0;
                uint64_t v313 = *(void *)(v81 + 152);
                uint64_t v314 = v9[19];
                uint64_t v315 = *a5;
                uint64_t v316 = **a5;
                uint64_t v317 = (*a5)[1];
                int v318 = v309[1];
                do
                {
                  if (v318 >= 1)
                  {
                    int v319 = 0;
                    int v320 = *a5;
                    uint64_t v321 = v315[2];
                    int v322 = v309[2];
                    do
                    {
                      if (v322 >= 1)
                      {
                        int v323 = 0;
                        uint64_t v324 = *a5;
                        uint64_t v325 = v320[2];
                        uint64_t v326 = v320[3];
                        int v327 = v309[3];
                        do
                        {
                          if (v327 >= 1)
                          {
                            uint64_t v328 = 0;
                            uint64_t v329 = v324[3];
                            do
                            {
                              *(_DWORD *)(v314 + 4 * v312 + 4 * v328) = *(unsigned __int8 *)(v313 + v80);
                              v80 += v329;
                              int v327 = v309[3];
                              ++v328;
                            }
                            while ((int)v328 < v327);
                            int v322 = v309[2];
                            v312 += v328;
                          }
                          uint64_t v80 = v80 + v325 - v326 * v327;
                          ++v323;
                        }
                        while (v323 < v322);
                        int v318 = v309[1];
                      }
                      uint64_t v80 = v80 + v317 - v321 * v322;
                      ++v319;
                    }
                    while (v319 < v318);
                    int v310 = *v309;
                  }
                  uint64_t result = v318;
                  uint64_t v80 = v80 + v316 - v317 * v318;
                  ++v311;
                }
                while (v311 < v310);
              }
              break;
            default:
              uint64_t v274 = v9[6];
              if (v274)
              {
                uint64_t v275 = 0;
                uint64_t v276 = *(void *)(v81 + 152) + v80;
                uint64_t v277 = v9[19];
                uint64_t v278 = *a4;
                uint64_t v279 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v280 = *a5;
                do
                {
                  uint64_t v281 = 0;
                  if ((v279 & 0x80000000) == 0)
                  {
                    uint64_t v282 = v279;
                    LODWORD(result) = v275;
                    do
                    {
                      ldiv_t v283 = ldiv((int)result, v278[v282]);
                      uint64_t result = v283.quot;
                      v281 += v280[v282--] * v283.rem;
                    }
                    while (v282 != -1);
                  }
                  *(_DWORD *)(v277 + 4 * v275++) = *(unsigned __int8 *)(v276 + v281);
                }
                while (v275 != v274);
              }
              break;
          }
          break;
        case 3:
          uint64_t v87 = *a7;
          uint64_t v1378 = *a8;
          uint64_t v88 = *(void **)result;
          uint64_t v89 = v88[1] - *v88;
          switch(v89 >> 2)
          {
            case 1:
              uint64_t v90 = (v89 << 30) - 0x100000000;
              int v91 = *(int *)((char *)*a4 + (v90 >> 30));
              if (v91 >= 1)
              {
                uint64_t v92 = v90 >> 29;
                uint64_t v93 = *(uint64_t *)((char *)*a5 + (v90 >> 29));
                uint64_t v94 = (_DWORD *)(v9[19] + 4 * v1378);
                uint64_t v95 = (unsigned __int8 *)(v88[19] + v87);
                uint64_t v96 = 4 * *(void *)(*a6 + v92);
                do
                {
                  *uint64_t v94 = *v95;
                  v95 += v93;
                  uint64_t v94 = (_DWORD *)((char *)v94 + v96);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              uint64_t v768 = (v89 << 30) - 0x200000000;
              uint64_t v769 = *a4;
              int v770 = *(int *)((char *)*a4 + (v768 >> 30));
              if (v770 >= 1)
              {
                int v771 = 0;
                uint64_t v772 = v768 >> 29;
                uint64_t v773 = *(uint64_t *)((char *)*a5 + (v768 >> 29));
                uint64_t v774 = *(void *)(*a6 + v772);
                uint64_t v775 = (v89 << 30) - 0x100000000;
                uint64_t v776 = *(uint64_t *)((char *)*a5 + (v775 >> 29));
                uint64_t v777 = *(void *)(*a6 + (v775 >> 29));
                uint64_t v778 = v775 >> 32;
                uint64_t v779 = 4 * v1378;
                uint64_t v780 = 4 * v774;
                uint64_t v781 = 4 * v777;
                do
                {
                  uint64_t result = v769[v778];
                  if ((int)result >= 1)
                  {
                    uint64_t v782 = v88[19];
                    uint64_t v783 = (_DWORD *)(v9[19] + v779);
                    do
                    {
                      *uint64_t v783 = *(unsigned __int8 *)(v782 + v87);
                      uint64_t v783 = (_DWORD *)((char *)v783 + v781);
                      v782 += v776;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v87 += v773;
                  ++v771;
                  v779 += v780;
                }
                while (v771 != v770);
              }
              break;
            case 3:
              uint64_t v784 = (v89 << 30) - 0x300000000;
              uint64_t v785 = *a4;
              int v786 = *(int *)((char *)*a4 + (v784 >> 30));
              if (v786 >= 1)
              {
                int v787 = 0;
                int v788 = *a5;
                uint64_t v789 = v784 >> 29;
                uint64_t v790 = *(uint64_t *)((char *)*a5 + (v784 >> 29));
                uint64_t v791 = v89 << 30;
                uint64_t v792 = *a6;
                uint64_t v793 = *(void *)(*a6 + v789);
                uint64_t v794 = (v791 - 0x200000000) >> 32;
                uint64_t v795 = (v791 - 0x200000000) >> 29;
                uint64_t v796 = v791 - 0x100000000;
                uint64_t v797 = *(uint64_t *)((char *)*a5 + v795);
                uint64_t v798 = *(void *)(*a6 + v795);
                uint64_t v799 = v796 >> 32;
                uint64_t v800 = 4 * v1378;
                uint64_t result = 4 * v793;
                uint64_t v801 = 4 * v798;
                do
                {
                  int v802 = v785[v794];
                  if (v802 >= 1)
                  {
                    int v803 = 0;
                    uint64_t v804 = v788[v799];
                    int v805 = *v13;
                    uint64_t v806 = 4 * *(void *)(v792 + 8 * v799);
                    uint64_t v807 = v800;
                    uint64_t v808 = v87;
                    do
                    {
                      int v809 = v785[v799];
                      if (v809 >= 1)
                      {
                        uint64_t v810 = v88[19];
                        int v811 = (_DWORD *)(v805[19] + v807);
                        do
                        {
                          *int v811 = *(unsigned __int8 *)(v810 + v808);
                          int v811 = (_DWORD *)((char *)v811 + v806);
                          v810 += v804;
                          --v809;
                        }
                        while (v809);
                      }
                      v808 += v797;
                      ++v803;
                      v807 += v801;
                    }
                    while (v803 != v802);
                  }
                  v87 += v790;
                  ++v787;
                  v800 += result;
                }
                while (v787 != v786);
              }
              break;
            case 4:
              uint64_t v812 = (v89 << 30) - 0x400000000;
              uint64_t v813 = *a4;
              int v1527 = *(int *)((char *)*a4 + (v812 >> 30));
              if (v1527 >= 1)
              {
                int v814 = 0;
                int v815 = *a5;
                uint64_t v816 = v812 >> 29;
                uint64_t v1494 = *(uint64_t *)((char *)*a5 + v816);
                uint64_t v817 = *a6;
                uint64_t v818 = (v89 << 30) - 0x300000000;
                uint64_t v819 = (v89 << 30) - 0x200000000;
                uint64_t v820 = (v89 << 30) - 0x100000000;
                uint64_t v821 = *(uint64_t *)((char *)*a5 + (v818 >> 29));
                uint64_t v822 = v819 >> 32;
                uint64_t v823 = v820 >> 32;
                uint64_t result = 4 * v1378;
                uint64_t v1478 = 4 * *(void *)(*a6 + v816);
                uint64_t v824 = 4 * *(void *)(*a6 + (v818 >> 29));
                do
                {
                  uint64_t v825 = v87;
                  int v826 = v813[v818 >> 32];
                  if (v826 >= 1)
                  {
                    int v827 = 0;
                    uint64_t v828 = v815[v822];
                    uint64_t v829 = 4 * *(void *)(v817 + 8 * v822);
                    uint64_t v830 = result;
                    uint64_t v831 = v87;
                    do
                    {
                      int v832 = v813[v822];
                      if (v832 >= 1)
                      {
                        int v833 = 0;
                        uint64_t v834 = v815[v823];
                        int v835 = *v13;
                        uint64_t v836 = 4 * *(void *)(v817 + 8 * v823);
                        uint64_t v837 = v830;
                        uint64_t v838 = v831;
                        do
                        {
                          int v839 = v813[v823];
                          if (v839 >= 1)
                          {
                            uint64_t v840 = v88[19];
                            int v841 = (_DWORD *)(v835[19] + v837);
                            do
                            {
                              _DWORD *v841 = *(unsigned __int8 *)(v840 + v838);
                              int v841 = (_DWORD *)((char *)v841 + v836);
                              v840 += v834;
                              --v839;
                            }
                            while (v839);
                          }
                          v838 += v828;
                          ++v833;
                          v837 += v829;
                        }
                        while (v833 != v832);
                      }
                      v831 += v821;
                      ++v827;
                      v830 += v824;
                    }
                    while (v827 != v826);
                  }
                  uint64_t v87 = v825 + v1494;
                  ++v814;
                  result += v1478;
                }
                while (v814 != v1527);
              }
              break;
            case 5:
              uint64_t v842 = (v89 << 30) - 0x500000000;
              uint64_t v843 = *a4;
              int v1442 = *(int *)((char *)*a4 + (v842 >> 30));
              if (v1442 >= 1)
              {
                int v1453 = 0;
                uint64_t v844 = *a5;
                uint64_t v845 = v842 >> 29;
                uint64_t v1432 = *(uint64_t *)((char *)*a5 + v845);
                uint64_t v846 = v89 << 30;
                uint64_t v847 = *a6;
                uint64_t v1422 = (v846 - 0x400000000) >> 32;
                uint64_t v848 = (v846 - 0x400000000) >> 29;
                uint64_t v1495 = *(uint64_t *)((char *)*a5 + v848);
                uint64_t v1511 = (v846 - 0x300000000) >> 32;
                uint64_t v849 = (v846 - 0x200000000) >> 32;
                uint64_t result = (v846 - 0x100000000) >> 32;
                uint64_t v1465 = 4 * v1378;
                uint64_t v1413 = 4 * *(void *)(*a6 + v845);
                uint64_t v1479 = 4 * *(void *)(*a6 + v848);
                do
                {
                  uint64_t v1391 = v87;
                  int v1528 = v843[v1422];
                  if (v1528 >= 1)
                  {
                    int v850 = 0;
                    uint64_t v851 = v844[v1511];
                    uint64_t v852 = 4 * *(void *)(v847 + 8 * v1511);
                    uint64_t v853 = v1465;
                    uint64_t v854 = v87;
                    do
                    {
                      int v855 = v843[v1511];
                      if (v855 >= 1)
                      {
                        int v856 = 0;
                        uint64_t v857 = v844[v849];
                        uint64_t v858 = 4 * *(void *)(v847 + 8 * v849);
                        uint64_t v859 = v853;
                        uint64_t v860 = v854;
                        do
                        {
                          int v861 = v843[v849];
                          if (v861 >= 1)
                          {
                            int v862 = 0;
                            uint64_t v863 = v844[result];
                            int v864 = *v13;
                            uint64_t v865 = 4 * *(void *)(v847 + 8 * result);
                            uint64_t v866 = v859;
                            uint64_t v867 = v860;
                            do
                            {
                              int v868 = v843[result];
                              if (v868 >= 1)
                              {
                                uint64_t v869 = v88[19];
                                int v870 = (_DWORD *)(v864[19] + v866);
                                do
                                {
                                  *int v870 = *(unsigned __int8 *)(v869 + v867);
                                  int v870 = (_DWORD *)((char *)v870 + v865);
                                  v869 += v863;
                                  --v868;
                                }
                                while (v868);
                              }
                              v867 += v857;
                              ++v862;
                              v866 += v858;
                            }
                            while (v862 != v861);
                          }
                          v860 += v851;
                          ++v856;
                          v859 += v852;
                        }
                        while (v856 != v855);
                      }
                      v854 += v1495;
                      ++v850;
                      v853 += v1479;
                    }
                    while (v850 != v1528);
                  }
                  uint64_t v87 = v1391 + v1432;
                  v1465 += v1413;
                  ++v1453;
                }
                while (v1453 != v1442);
              }
              break;
            default:
              uint64_t v730 = (char *)a4[1];
              LODWORD(v731) = 1;
              uint64_t v732 = -20;
              do
              {
                uint64_t v731 = *(int *)&v730[v732] * (uint64_t)(int)v731;
                v732 += 4;
              }
              while (v732);
              unint64_t v1374 = v88[6];
              if (v1374)
              {
                uint64_t result = 0;
                uint64_t v733 = *a4;
                uint64_t v1364 = ((unint64_t)(v730 - (char *)*a4) >> 2) - 1;
                uint64_t v734 = *a5;
                uint64_t v1412 = *v9;
                uint64_t v1359 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                uint64_t v735 = (v89 << 30) - 0x500000000;
                uint64_t v736 = *a6;
                uint64_t v1406 = *(uint64_t *)((char *)*a5 + (v735 >> 29));
                uint64_t v1355 = v735 >> 32;
                uint64_t v1421 = ((v89 << 30) - 0x400000000) >> 32;
                uint64_t v1510 = ((v89 << 30) - 0x300000000) >> 32;
                uint64_t v737 = ((v89 << 30) - 0x200000000) >> 32;
                uint64_t v738 = ((v89 << 30) - 0x100000000) >> 32;
                uint64_t v1390 = *a7;
                uint64_t v1400 = 4 * *(void *)(*a6 + (v735 >> 29));
                uint64_t v1369 = v731;
                do
                {
                  uint64_t v739 = v1364;
                  uint64_t v1385 = result;
                  uint64_t v740 = 0;
                  if ((v1364 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v741 = ldiv((int)result, v733[v739]);
                      LODWORD(result) = v741.quot;
                      v740 += v734[v739--] * v741.rem;
                    }
                    while (v739 != -1);
                  }
                  uint64_t v742 = v1359;
                  if ((v1359 & 0x80000000) != 0)
                  {
                    uint64_t v743 = 0;
                  }
                  else
                  {
                    uint64_t v743 = 0;
                    int v744 = v1385;
                    do
                    {
                      ldiv_t v745 = ldiv(v744, *(int *)(v1412 + 4 * v742));
                      int v744 = v745.quot;
                      v743 += *(void *)(v736 + 8 * v742--) * v745.rem;
                    }
                    while (v742 != -1);
                  }
                  int v1431 = v733[v1355];
                  if (v1431 >= 1)
                  {
                    int v746 = 0;
                    uint64_t v1493 = v734[v1421];
                    uint64_t v1464 = v740 + v1390;
                    uint64_t v1452 = 4 * (v743 + v1378);
                    uint64_t v1477 = 4 * *(void *)(v736 + 8 * v1421);
                    do
                    {
                      int v1441 = v746;
                      int v1526 = v733[v1421];
                      if (v1526 >= 1)
                      {
                        int v747 = 0;
                        uint64_t v748 = v734[v1510];
                        uint64_t v749 = 4 * *(void *)(v736 + 8 * v1510);
                        uint64_t v751 = v1452;
                        uint64_t v750 = v1464;
                        do
                        {
                          int v752 = v733[v1510];
                          if (v752 >= 1)
                          {
                            int v753 = 0;
                            uint64_t v754 = v734[v737];
                            uint64_t v755 = 4 * *(void *)(v736 + 8 * v737);
                            uint64_t v756 = v751;
                            uint64_t v757 = v750;
                            do
                            {
                              int v758 = v733[v737];
                              if (v758 >= 1)
                              {
                                int v759 = 0;
                                uint64_t v760 = v734[v738];
                                int v761 = *v13;
                                uint64_t v762 = 4 * *(void *)(v736 + 8 * v738);
                                uint64_t v763 = v756;
                                uint64_t v764 = v757;
                                do
                                {
                                  int v765 = v733[v738];
                                  if (v765 >= 1)
                                  {
                                    uint64_t v766 = v88[19];
                                    int v767 = (_DWORD *)(v761[19] + v763);
                                    do
                                    {
                                      *int v767 = *(unsigned __int8 *)(v766 + v764);
                                      int v767 = (_DWORD *)((char *)v767 + v762);
                                      v766 += v760;
                                      --v765;
                                    }
                                    while (v765);
                                  }
                                  v764 += v754;
                                  ++v759;
                                  v763 += v755;
                                }
                                while (v759 != v758);
                              }
                              v757 += v748;
                              ++v753;
                              v756 += v749;
                            }
                            while (v753 != v752);
                          }
                          v750 += v1493;
                          ++v747;
                          v751 += v1477;
                        }
                        while (v747 != v1526);
                      }
                      v1464 += v1406;
                      int v746 = v1441 + 1;
                      v1452 += v1400;
                    }
                    while (v1441 + 1 != v1431);
                  }
                  uint64_t result = v1385 + v1369;
                }
                while (v1374 > v1385 + v1369);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v9[6])
          {
            unint64_t v24 = 0;
            char v25 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v26 = v9[19];
            do
              *(unsigned char *)(v26 + v24++) = v25;
            while (*(void *)(*(void *)a2 + 48) > v24);
          }
          break;
        case 1:
LABEL_37:
          size_t v36 = *(void *)(*(void *)result + 160);
          if (v36)
          {
            uint64_t v37 = *(const void **)(*(void *)result + 152);
            uint64_t v38 = (void *)v9[19];
            uint64_t result = (uint64_t)memmove(v38, v37, v36);
          }
          break;
        case 2:
          uint64_t v97 = *a7;
          uint64_t v98 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v99 = 0;
                uint64_t v100 = *(void *)(v98 + 152);
                uint64_t v101 = v9[19];
                do
                {
                  *(unsigned char *)(v101 + v99) = *(unsigned char *)(v100 + v97);
                  v97 += **a5;
                  ++v99;
                }
                while (**a4 > (int)v99);
              }
              break;
            case 2:
              int v339 = *a4;
              int v340 = **a4;
              if (v340 >= 1)
              {
                int v341 = 0;
                uint64_t v342 = 0;
                uint64_t v343 = *(void *)(v98 + 152);
                uint64_t v344 = v9[19];
                do
                {
                  int v345 = v339[1];
                  if (v345 < 1)
                  {
                    uint64_t v346 = *a5;
                    uint64_t v347 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v344 + v342 + result) = *(unsigned char *)(v343 + v97);
                      uint64_t v346 = *a5;
                      uint64_t v347 = (*a5)[1];
                      v97 += v347;
                      int v339 = *a4;
                      int v345 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v345);
                    int v340 = *v339;
                    v342 += result;
                  }
                  uint64_t v97 = *v346 + v97 - v347 * v345;
                  ++v341;
                }
                while (v341 < v340);
              }
              break;
            case 3:
              int v348 = *a4;
              int v349 = **a4;
              if (v349 >= 1)
              {
                int v350 = 0;
                uint64_t v351 = 0;
                uint64_t v352 = *(void *)(v98 + 152);
                uint64_t v353 = v9[19];
                do
                {
                  int v354 = v348[1];
                  if (v354 < 1)
                  {
                    uint64_t v358 = *a5;
                    uint64_t v359 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v354; ++m)
                    {
                      int v356 = v348[2];
                      if (v356 < 1)
                      {
                        uint64_t v358 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v357 = 0;
                        do
                        {
                          *(unsigned char *)(v353 + v351 + v357) = *(unsigned char *)(v352 + v97);
                          uint64_t v358 = *a5;
                          uint64_t result = (*a5)[2];
                          v97 += result;
                          int v348 = *a4;
                          int v356 = (*a4)[2];
                          ++v357;
                        }
                        while ((int)v357 < v356);
                        v351 += v357;
                      }
                      uint64_t v359 = v358[1];
                      uint64_t v97 = v359 + v97 - result * v356;
                      int v354 = v348[1];
                    }
                    int v349 = *v348;
                  }
                  uint64_t v97 = *v358 + v97 - v359 * v354;
                  ++v350;
                }
                while (v350 < v349);
              }
              break;
            case 4:
              int v360 = *a4;
              int v361 = **a4;
              if (v361 >= 1)
              {
                int v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = *(void *)(v98 + 152);
                uint64_t v365 = v9[19];
                do
                {
                  int v366 = v360[1];
                  if (v366 < 1)
                  {
                    uint64_t v372 = *a5;
                    uint64_t v374 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v366; ++n)
                    {
                      int v368 = v360[2];
                      if (v368 < 1)
                      {
                        uint64_t v372 = *a5;
                        uint64_t v373 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v368; ++ii)
                        {
                          int v370 = v360[3];
                          if (v370 < 1)
                          {
                            uint64_t v372 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v371 = 0;
                            do
                            {
                              *(unsigned char *)(v365 + v363 + v371) = *(unsigned char *)(v364 + v97);
                              uint64_t v372 = *a5;
                              uint64_t result = (*a5)[3];
                              v97 += result;
                              int v360 = *a4;
                              int v370 = (*a4)[3];
                              ++v371;
                            }
                            while ((int)v371 < v370);
                            v363 += v371;
                          }
                          uint64_t v373 = v372[2];
                          uint64_t v97 = v373 + v97 - result * v370;
                          int v368 = v360[2];
                        }
                      }
                      uint64_t v374 = v372[1];
                      uint64_t v97 = v374 + v97 - v373 * v368;
                      int v366 = v360[1];
                    }
                    int v361 = *v360;
                  }
                  uint64_t v97 = *v372 + v97 - v374 * v366;
                  ++v362;
                }
                while (v362 < v361);
              }
              break;
            default:
              if (v9[6])
              {
                unint64_t v330 = 0;
                uint64_t v331 = *(void *)(v98 + 152) + v97;
                uint64_t v332 = v9[19];
                do
                {
                  uint64_t v333 = *a4;
                  unint64_t v334 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v335 = 0;
                  uint64_t v336 = (v334 - 1);
                  if ((int)v334 - 1 >= 0)
                  {
                    uint64_t v337 = *a5;
                    LODWORD(result) = v330;
                    do
                    {
                      ldiv_t v338 = ldiv((int)result, v333[v336]);
                      uint64_t result = v338.quot;
                      v335 += v337[v336--] * v338.rem;
                    }
                    while (v336 != -1);
                  }
                  *(unsigned char *)(v332 + v330++) = *(unsigned char *)(v331 + v335);
                }
                while (v330 < (*v13)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v102 = *a7;
          uint64_t v103 = *a8;
          uint64_t v104 = *(void **)result;
          uint64_t v105 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v105 >> 2)
          {
            case 1:
              uint64_t v106 = (v105 << 30) - 0x100000000;
              int v107 = *(int *)((char *)*a4 + (v106 >> 30));
              if (v107 >= 1)
              {
                uint64_t v108 = v106 >> 29;
                uint64_t v109 = *(uint64_t *)((char *)*a5 + (v106 >> 29));
                uint64_t v110 = *(void *)(*a6 + v108);
                int v111 = (unsigned char *)(v9[19] + v103);
                uint64_t v112 = (unsigned char *)(v104[19] + v102);
                do
                {
                  *int v111 = *v112;
                  v112 += v109;
                  v111 += v110;
                  --v107;
                }
                while (v107);
              }
              break;
            case 2:
              uint64_t v893 = (v105 << 30) - 0x200000000;
              int v894 = *(int *)((char *)*a4 + (v893 >> 30));
              if (v894 >= 1)
              {
                int v895 = 0;
                uint64_t v896 = v893 >> 29;
                uint64_t v897 = *(uint64_t *)((char *)*a5 + (v893 >> 29));
                uint64_t v898 = *(void *)(*a6 + v896);
                do
                {
                  uint64_t v899 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x100000000;
                  int v900 = *(int *)((char *)*a4 + (v899 >> 30));
                  if (v900 >= 1)
                  {
                    uint64_t v901 = v899 >> 29;
                    uint64_t v902 = *(uint64_t *)((char *)*a5 + (v899 >> 29));
                    uint64_t v903 = *(void *)(*a6 + v901);
                    uint64_t v904 = *(void *)(*(void *)a2 + 152);
                    uint64_t v905 = *(void *)(*(void *)v14 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v905 + v102);
                      *(unsigned char *)(v904 + v103) = result;
                      v904 += v903;
                      v905 += v902;
                      --v900;
                    }
                    while (v900);
                  }
                  v102 += v897;
                  v103 += v898;
                  ++v895;
                }
                while (v895 != v894);
              }
              break;
            case 3:
              uint64_t v906 = (v105 << 30) - 0x300000000;
              int v907 = *(int *)((char *)*a4 + (v906 >> 30));
              if (v907 >= 1)
              {
                int v908 = 0;
                uint64_t v909 = v906 >> 29;
                uint64_t v910 = *(uint64_t *)((char *)*a5 + (v906 >> 29));
                uint64_t v911 = *(void *)(*a6 + v909);
                do
                {
                  uint64_t v912 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x200000000;
                  int v913 = *(int *)((char *)*a4 + (v912 >> 30));
                  if (v913 >= 1)
                  {
                    int v914 = 0;
                    uint64_t v915 = v912 >> 29;
                    uint64_t v916 = *(uint64_t *)((char *)*a5 + (v912 >> 29));
                    uint64_t v917 = *(void *)(*v10 + v915);
                    uint64_t result = v102;
                    uint64_t v918 = v103;
                    do
                    {
                      uint64_t v919 = ((*(void *)(*(void *)v14 + 8) - **(void **)v14) << 30) - 0x100000000;
                      int v920 = *(int *)((char *)*a4 + (v919 >> 30));
                      if (v920 >= 1)
                      {
                        uint64_t v921 = v919 >> 29;
                        uint64_t v922 = *(uint64_t *)((char *)*a5 + (v919 >> 29));
                        uint64_t v923 = *(void *)(*v10 + v921);
                        uint64_t v924 = (*v13)[19];
                        uint64_t v925 = *(void *)(*(void *)v14 + 152);
                        do
                        {
                          *(unsigned char *)(v924 + v918) = *(unsigned char *)(v925 + result);
                          v924 += v923;
                          v925 += v922;
                          --v920;
                        }
                        while (v920);
                      }
                      result += v916;
                      v918 += v917;
                      ++v914;
                    }
                    while (v914 != v913);
                  }
                  v102 += v910;
                  v103 += v911;
                  ++v908;
                }
                while (v908 != v907);
              }
              break;
            case 4:
              uint64_t v720 = a4;
              uint64_t v721 = a5;
              ldiv_t v722 = a6;
              uint64_t v723 = *a7;
              uint64_t v724 = *a8;
LABEL_558:
              break;
            case 5:
              uint64_t v926 = (v105 << 30) - 0x500000000;
              int v927 = *(int *)((char *)*a4 + (v926 >> 30));
              if (v927 >= 1)
              {
                uint64_t v928 = v926 >> 29;
                uint64_t v929 = *(uint64_t *)((char *)*a5 + v928);
                uint64_t v930 = *(void *)(*a6 + v928);
                do
                {
                  v102 += v929;
                  v103 += v930;
                  --v927;
                }
                while (v927);
              }
              break;
            default:
              LODWORD(v871) = 1;
              uint64_t v872 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v871 = a4[1][v872++] * (uint64_t)(int)v871;
              while (v872 * 4);
              if (v104[6])
              {
                uint64_t result = 0;
                uint64_t v1454 = *a8;
                uint64_t v1466 = *a7;
                uint64_t v1480 = v871;
                do
                {
                  uint64_t v873 = *a4;
                  unint64_t v874 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v875 = (v874 - 1);
                  uint64_t v1496 = v104;
                  uint64_t v1529 = result;
                  uint64_t v876 = 0;
                  if ((int)v874 - 1 >= 0)
                  {
                    uint64_t v877 = *a5;
                    do
                    {
                      ldiv_t v878 = ldiv((int)result, v873[v875]);
                      LODWORD(result) = v878.quot;
                      v876 += v877[v875--] * v878.rem;
                    }
                    while (v875 != -1);
                  }
                  uint64_t v879 = **v13;
                  unint64_t v880 = (unint64_t)((*v13)[1] - v879) >> 2;
                  uint64_t v881 = *v10;
                  uint64_t v882 = 0;
                  uint64_t v883 = (v880 - 1);
                  if ((int)v880 - 1 >= 0)
                  {
                    int v884 = v1529;
                    do
                    {
                      ldiv_t v885 = ldiv(v884, *(int *)(v879 + 4 * v883));
                      int v884 = v885.quot;
                      v882 += *(void *)(v881 + 8 * v883--) * v885.rem;
                    }
                    while (v883 != -1);
                  }
                  uint64_t v104 = v1496;
                  uint64_t v886 = ((v104[1] - *v104) << 30) - 0x500000000;
                  int v887 = *(int *)((char *)v873 + (v886 >> 30));
                  if (v887 >= 1)
                  {
                    uint64_t v888 = v876 + v1466;
                    uint64_t v889 = v886 >> 29;
                    uint64_t v890 = *(uint64_t *)((char *)*a5 + v889);
                    uint64_t v891 = *(void *)(v881 + v889);
                    uint64_t v892 = v882 + v1454;
                    do
                    {
                      v888 += v890;
                      v892 += v891;
                      --v887;
                    }
                    while (v887);
                    uint64_t v104 = *(void **)v14;
                  }
                  uint64_t v10 = a6;
                  uint64_t result = v1529 + v1480;
                }
                while (v104[6] > (unint64_t)(v1529 + v1480));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v27 = v9[6];
          if (v27)
          {
            int v28 = **(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v29 = (_DWORD *)v9[19];
            do
            {
              *v29++ = v28;
              --v27;
            }
            while (v27);
          }
          break;
        case 1:
          uint64_t v113 = *(void *)(*(void *)result + 160);
          if (v113)
          {
            uint64_t v114 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v115 = (_DWORD *)v9[19];
            do
            {
              int v116 = *v114++;
              *v115++ = v116;
              --v113;
            }
            while (v113);
          }
          break;
        case 2:
          uint64_t v117 = *a7;
          uint64_t v118 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v119 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v120 = 0;
                uint64_t v121 = v9[19];
                uint64_t v122 = **a5;
                int v123 = (unsigned __int8 *)(*(void *)(v118 + 152) + v117);
                do
                {
                  *(_DWORD *)(v121 + 4 * v120) = *v123;
                  v123 += v122;
                  ++v120;
                }
                while (*v119 > (int)v120);
              }
              break;
            case 2:
              int v385 = *a4;
              int v386 = **a4;
              if (v386 >= 1)
              {
                int v387 = 0;
                uint64_t v388 = 0;
                uint64_t v389 = *(void *)(v118 + 152);
                uint64_t v390 = v9[19];
                uint64_t v391 = **a5;
                uint64_t v392 = (*a5)[1];
                int v393 = v385[1];
                do
                {
                  if (v393 >= 1)
                  {
                    uint64_t v394 = 0;
                    do
                    {
                      *(_DWORD *)(v390 + 4 * v388 + 4 * v394) = *(unsigned __int8 *)(v389 + v117);
                      v117 += v392;
                      int v393 = v385[1];
                      ++v394;
                    }
                    while ((int)v394 < v393);
                    int v386 = *v385;
                    v388 += v394;
                  }
                  uint64_t result = v393;
                  uint64_t v117 = v117 + v391 - v392 * v393;
                  ++v387;
                }
                while (v387 < v386);
              }
              break;
            case 3:
              uint64_t v395 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v396 = 0;
                uint64_t v397 = 0;
                uint64_t v398 = *(void *)(v118 + 152);
                uint64_t v399 = v9[19];
                uint64_t v400 = *a5;
                uint64_t v401 = **a5;
                uint64_t v402 = (*a5)[1];
                int v403 = v395[1];
                do
                {
                  if (v403 >= 1)
                  {
                    int v404 = 0;
                    int v405 = *a5;
                    uint64_t v406 = v400[2];
                    int v407 = v395[2];
                    do
                    {
                      if (v407 >= 1)
                      {
                        uint64_t v408 = 0;
                        uint64_t v409 = v405[2];
                        do
                        {
                          *(_DWORD *)(v399 + 4 * v397 + 4 * v408) = *(unsigned __int8 *)(v398 + v117);
                          v117 += v409;
                          int v407 = v395[2];
                          ++v408;
                        }
                        while ((int)v408 < v407);
                        int v403 = v395[1];
                        v397 += v408;
                      }
                      uint64_t v117 = v117 + v402 - v406 * v407;
                      ++v404;
                    }
                    while (v404 < v403);
                    uint64_t result = *v395;
                  }
                  uint64_t v117 = v117 + v401 - v402 * v403;
                  ++v396;
                }
                while (v396 < (int)result);
              }
              break;
            case 4:
              int v410 = *a4;
              int v411 = **a4;
              if (v411 >= 1)
              {
                int v412 = 0;
                uint64_t v413 = 0;
                uint64_t v414 = *(void *)(v118 + 152);
                uint64_t v415 = v9[19];
                uint64_t v416 = *a5;
                uint64_t v417 = **a5;
                uint64_t v418 = (*a5)[1];
                int v419 = v410[1];
                do
                {
                  if (v419 >= 1)
                  {
                    int v420 = 0;
                    int v421 = *a5;
                    uint64_t v422 = v416[2];
                    int v423 = v410[2];
                    do
                    {
                      if (v423 >= 1)
                      {
                        int v424 = 0;
                        uint64_t v425 = *a5;
                        uint64_t v426 = v421[2];
                        uint64_t v427 = v421[3];
                        int v428 = v410[3];
                        do
                        {
                          if (v428 >= 1)
                          {
                            uint64_t v429 = 0;
                            uint64_t v430 = v425[3];
                            do
                            {
                              *(_DWORD *)(v415 + 4 * v413 + 4 * v429) = *(unsigned __int8 *)(v414 + v117);
                              v117 += v430;
                              int v428 = v410[3];
                              ++v429;
                            }
                            while ((int)v429 < v428);
                            int v423 = v410[2];
                            v413 += v429;
                          }
                          uint64_t v117 = v117 + v426 - v427 * v428;
                          ++v424;
                        }
                        while (v424 < v423);
                        int v419 = v410[1];
                      }
                      uint64_t v117 = v117 + v418 - v422 * v423;
                      ++v420;
                    }
                    while (v420 < v419);
                    int v411 = *v410;
                  }
                  uint64_t result = v419;
                  uint64_t v117 = v117 + v417 - v418 * v419;
                  ++v412;
                }
                while (v412 < v411);
              }
              break;
            default:
              uint64_t v375 = v9[6];
              if (v375)
              {
                uint64_t v376 = 0;
                uint64_t v377 = *(void *)(v118 + 152) + v117;
                uint64_t v378 = v9[19];
                uint64_t v379 = *a4;
                uint64_t v380 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v381 = *a5;
                do
                {
                  uint64_t v382 = 0;
                  if ((v380 & 0x80000000) == 0)
                  {
                    uint64_t v383 = v380;
                    LODWORD(result) = v376;
                    do
                    {
                      ldiv_t v384 = ldiv((int)result, v379[v383]);
                      uint64_t result = v384.quot;
                      v382 += v381[v383--] * v384.rem;
                    }
                    while (v383 != -1);
                  }
                  *(_DWORD *)(v378 + 4 * v376++) = *(unsigned __int8 *)(v377 + v382);
                }
                while (v376 != v375);
              }
              break;
          }
          break;
        case 3:
          uint64_t v124 = *a7;
          uint64_t v1379 = *a8;
          uint64_t v125 = *(void **)result;
          uint64_t v126 = v125[1] - *v125;
          switch(v126 >> 2)
          {
            case 1:
              uint64_t v127 = (v126 << 30) - 0x100000000;
              int v128 = *(int *)((char *)*a4 + (v127 >> 30));
              if (v128 >= 1)
              {
                uint64_t v129 = v127 >> 29;
                uint64_t v130 = *(uint64_t *)((char *)*a5 + (v127 >> 29));
                uint64_t v131 = (_DWORD *)(v9[19] + 4 * v1379);
                unsigned int v132 = (unsigned __int8 *)(v125[19] + v124);
                uint64_t v133 = 4 * *(void *)(*a6 + v129);
                do
                {
                  *uint64_t v131 = *v132;
                  v132 += v130;
                  uint64_t v131 = (_DWORD *)((char *)v131 + v133);
                  --v128;
                }
                while (v128);
              }
              break;
            case 2:
              uint64_t v969 = (v126 << 30) - 0x200000000;
              uint64_t v970 = *a4;
              int v971 = *(int *)((char *)*a4 + (v969 >> 30));
              if (v971 >= 1)
              {
                int v972 = 0;
                uint64_t v973 = v969 >> 29;
                uint64_t v974 = *(uint64_t *)((char *)*a5 + (v969 >> 29));
                uint64_t v975 = *(void *)(*a6 + v973);
                uint64_t v976 = (v126 << 30) - 0x100000000;
                uint64_t v977 = *(uint64_t *)((char *)*a5 + (v976 >> 29));
                uint64_t v978 = *(void *)(*a6 + (v976 >> 29));
                uint64_t v979 = v976 >> 32;
                uint64_t v980 = 4 * v1379;
                uint64_t v981 = 4 * v975;
                uint64_t v982 = 4 * v978;
                do
                {
                  uint64_t result = v970[v979];
                  if ((int)result >= 1)
                  {
                    uint64_t v983 = v125[19];
                    uint64_t v984 = (_DWORD *)(v9[19] + v980);
                    do
                    {
                      *uint64_t v984 = *(unsigned __int8 *)(v983 + v124);
                      uint64_t v984 = (_DWORD *)((char *)v984 + v982);
                      v983 += v977;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v124 += v974;
                  ++v972;
                  v980 += v981;
                }
                while (v972 != v971);
              }
              break;
            case 3:
              uint64_t v985 = (v126 << 30) - 0x300000000;
              uint64_t v986 = *a4;
              int v987 = *(int *)((char *)*a4 + (v985 >> 30));
              if (v987 >= 1)
              {
                int v988 = 0;
                int v989 = *a5;
                uint64_t v990 = v985 >> 29;
                uint64_t v991 = *(uint64_t *)((char *)*a5 + (v985 >> 29));
                uint64_t v992 = v126 << 30;
                uint64_t v993 = *a6;
                uint64_t v994 = *(void *)(*a6 + v990);
                uint64_t v995 = (v992 - 0x200000000) >> 32;
                uint64_t v996 = (v992 - 0x200000000) >> 29;
                uint64_t v997 = v992 - 0x100000000;
                uint64_t v998 = *(uint64_t *)((char *)*a5 + v996);
                uint64_t v999 = *(void *)(*a6 + v996);
                uint64_t v1000 = v997 >> 32;
                uint64_t v1001 = 4 * v1379;
                uint64_t result = 4 * v994;
                uint64_t v1002 = 4 * v999;
                do
                {
                  int v1003 = v986[v995];
                  if (v1003 >= 1)
                  {
                    int v1004 = 0;
                    uint64_t v1005 = v989[v1000];
                    int v1006 = *v13;
                    uint64_t v1007 = 4 * *(void *)(v993 + 8 * v1000);
                    uint64_t v1008 = v1001;
                    uint64_t v1009 = v124;
                    do
                    {
                      int v1010 = v986[v1000];
                      if (v1010 >= 1)
                      {
                        uint64_t v1011 = v125[19];
                        int v1012 = (_DWORD *)(v1006[19] + v1008);
                        do
                        {
                          _DWORD *v1012 = *(unsigned __int8 *)(v1011 + v1009);
                          int v1012 = (_DWORD *)((char *)v1012 + v1007);
                          v1011 += v1005;
                          --v1010;
                        }
                        while (v1010);
                      }
                      v1009 += v998;
                      ++v1004;
                      v1008 += v1002;
                    }
                    while (v1004 != v1003);
                  }
                  v124 += v991;
                  ++v988;
                  v1001 += result;
                }
                while (v988 != v987);
              }
              break;
            case 4:
              uint64_t v1013 = (v126 << 30) - 0x400000000;
              int v1014 = *a4;
              int v1531 = *(int *)((char *)*a4 + (v1013 >> 30));
              if (v1531 >= 1)
              {
                int v1015 = 0;
                uint64_t v1016 = *a5;
                uint64_t v1017 = v1013 >> 29;
                uint64_t v1498 = *(uint64_t *)((char *)*a5 + v1017);
                uint64_t v1018 = *a6;
                uint64_t v1019 = (v126 << 30) - 0x300000000;
                uint64_t v1020 = (v126 << 30) - 0x200000000;
                uint64_t v1021 = (v126 << 30) - 0x100000000;
                uint64_t v1022 = *(uint64_t *)((char *)*a5 + (v1019 >> 29));
                uint64_t v1023 = v1020 >> 32;
                uint64_t v1024 = v1021 >> 32;
                uint64_t result = 4 * v1379;
                uint64_t v1482 = 4 * *(void *)(*a6 + v1017);
                uint64_t v1025 = 4 * *(void *)(*a6 + (v1019 >> 29));
                do
                {
                  uint64_t v1026 = v124;
                  int v1027 = v1014[v1019 >> 32];
                  if (v1027 >= 1)
                  {
                    int v1028 = 0;
                    uint64_t v1029 = v1016[v1023];
                    uint64_t v1030 = 4 * *(void *)(v1018 + 8 * v1023);
                    uint64_t v1031 = result;
                    uint64_t v1032 = v124;
                    do
                    {
                      int v1033 = v1014[v1023];
                      if (v1033 >= 1)
                      {
                        int v1034 = 0;
                        uint64_t v1035 = v1016[v1024];
                        int v1036 = *v13;
                        uint64_t v1037 = 4 * *(void *)(v1018 + 8 * v1024);
                        uint64_t v1038 = v1031;
                        uint64_t v1039 = v1032;
                        do
                        {
                          int v1040 = v1014[v1024];
                          if (v1040 >= 1)
                          {
                            uint64_t v1041 = v125[19];
                            int v1042 = (_DWORD *)(v1036[19] + v1038);
                            do
                            {
                              *int v1042 = *(unsigned __int8 *)(v1041 + v1039);
                              int v1042 = (_DWORD *)((char *)v1042 + v1037);
                              v1041 += v1035;
                              --v1040;
                            }
                            while (v1040);
                          }
                          v1039 += v1029;
                          ++v1034;
                          v1038 += v1030;
                        }
                        while (v1034 != v1033);
                      }
                      v1032 += v1022;
                      ++v1028;
                      v1031 += v1025;
                    }
                    while (v1028 != v1027);
                  }
                  uint64_t v124 = v1026 + v1498;
                  ++v1015;
                  result += v1482;
                }
                while (v1015 != v1531);
              }
              break;
            case 5:
              uint64_t v1043 = (v126 << 30) - 0x500000000;
              uint64_t v1044 = *a4;
              int v1444 = *(int *)((char *)*a4 + (v1043 >> 30));
              if (v1444 >= 1)
              {
                int v1456 = 0;
                uint64_t v1045 = *a5;
                uint64_t v1046 = v1043 >> 29;
                uint64_t v1434 = *(uint64_t *)((char *)*a5 + v1046);
                uint64_t v1047 = v126 << 30;
                uint64_t v1048 = *a6;
                uint64_t v1424 = (v1047 - 0x400000000) >> 32;
                uint64_t v1049 = (v1047 - 0x400000000) >> 29;
                uint64_t v1499 = *(uint64_t *)((char *)*a5 + v1049);
                uint64_t v1514 = (v1047 - 0x300000000) >> 32;
                uint64_t v1050 = (v1047 - 0x200000000) >> 32;
                uint64_t result = (v1047 - 0x100000000) >> 32;
                uint64_t v1468 = 4 * v1379;
                uint64_t v1415 = 4 * *(void *)(*a6 + v1046);
                uint64_t v1483 = 4 * *(void *)(*a6 + v1049);
                do
                {
                  uint64_t v1393 = v124;
                  int v1532 = v1044[v1424];
                  if (v1532 >= 1)
                  {
                    int v1051 = 0;
                    uint64_t v1052 = v1045[v1514];
                    uint64_t v1053 = 4 * *(void *)(v1048 + 8 * v1514);
                    uint64_t v1054 = v1468;
                    uint64_t v1055 = v124;
                    do
                    {
                      int v1056 = v1044[v1514];
                      if (v1056 >= 1)
                      {
                        int v1057 = 0;
                        uint64_t v1058 = v1045[v1050];
                        uint64_t v1059 = 4 * *(void *)(v1048 + 8 * v1050);
                        uint64_t v1060 = v1054;
                        uint64_t v1061 = v1055;
                        do
                        {
                          int v1062 = v1044[v1050];
                          if (v1062 >= 1)
                          {
                            int v1063 = 0;
                            uint64_t v1064 = v1045[result];
                            int v1065 = *v13;
                            uint64_t v1066 = 4 * *(void *)(v1048 + 8 * result);
                            uint64_t v1067 = v1060;
                            uint64_t v1068 = v1061;
                            do
                            {
                              int v1069 = v1044[result];
                              if (v1069 >= 1)
                              {
                                uint64_t v1070 = v125[19];
                                int v1071 = (_DWORD *)(v1065[19] + v1067);
                                do
                                {
                                  *int v1071 = *(unsigned __int8 *)(v1070 + v1068);
                                  int v1071 = (_DWORD *)((char *)v1071 + v1066);
                                  v1070 += v1064;
                                  --v1069;
                                }
                                while (v1069);
                              }
                              v1068 += v1058;
                              ++v1063;
                              v1067 += v1059;
                            }
                            while (v1063 != v1062);
                          }
                          v1061 += v1052;
                          ++v1057;
                          v1060 += v1053;
                        }
                        while (v1057 != v1056);
                      }
                      v1055 += v1499;
                      ++v1051;
                      v1054 += v1483;
                    }
                    while (v1051 != v1532);
                  }
                  uint64_t v124 = v1393 + v1434;
                  v1468 += v1415;
                  ++v1456;
                }
                while (v1456 != v1444);
              }
              break;
            default:
              uint64_t v931 = (char *)a4[1];
              LODWORD(v932) = 1;
              uint64_t v933 = -20;
              do
              {
                uint64_t v932 = *(int *)&v931[v933] * (uint64_t)(int)v932;
                v933 += 4;
              }
              while (v933);
              unint64_t v1375 = v125[6];
              if (v1375)
              {
                uint64_t result = 0;
                uint64_t v934 = *a4;
                uint64_t v1365 = ((unint64_t)(v931 - (char *)*a4) >> 2) - 1;
                uint64_t v935 = *a5;
                uint64_t v1414 = *v9;
                uint64_t v1360 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                uint64_t v936 = (v126 << 30) - 0x500000000;
                uint64_t v937 = *a6;
                uint64_t v1407 = *(uint64_t *)((char *)*a5 + (v936 >> 29));
                uint64_t v1356 = v936 >> 32;
                uint64_t v1423 = ((v126 << 30) - 0x400000000) >> 32;
                uint64_t v1513 = ((v126 << 30) - 0x300000000) >> 32;
                uint64_t v938 = ((v126 << 30) - 0x200000000) >> 32;
                uint64_t v939 = ((v126 << 30) - 0x100000000) >> 32;
                uint64_t v1392 = *a7;
                uint64_t v1401 = 4 * *(void *)(*a6 + (v936 >> 29));
                uint64_t v1370 = v932;
                do
                {
                  uint64_t v940 = v1365;
                  uint64_t v1386 = result;
                  uint64_t v941 = 0;
                  if ((v1365 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v942 = ldiv((int)result, v934[v940]);
                      LODWORD(result) = v942.quot;
                      v941 += v935[v940--] * v942.rem;
                    }
                    while (v940 != -1);
                  }
                  uint64_t v943 = v1360;
                  if ((v1360 & 0x80000000) != 0)
                  {
                    uint64_t v944 = 0;
                  }
                  else
                  {
                    uint64_t v944 = 0;
                    int v945 = v1386;
                    do
                    {
                      ldiv_t v946 = ldiv(v945, *(int *)(v1414 + 4 * v943));
                      int v945 = v946.quot;
                      v944 += *(void *)(v937 + 8 * v943--) * v946.rem;
                    }
                    while (v943 != -1);
                  }
                  int v1433 = v934[v1356];
                  if (v1433 >= 1)
                  {
                    int v947 = 0;
                    uint64_t v1497 = v935[v1423];
                    uint64_t v1467 = v941 + v1392;
                    uint64_t v1455 = 4 * (v944 + v1379);
                    uint64_t v1481 = 4 * *(void *)(v937 + 8 * v1423);
                    do
                    {
                      int v1443 = v947;
                      int v1530 = v934[v1423];
                      if (v1530 >= 1)
                      {
                        int v948 = 0;
                        uint64_t v949 = v935[v1513];
                        uint64_t v950 = 4 * *(void *)(v937 + 8 * v1513);
                        uint64_t v952 = v1455;
                        uint64_t v951 = v1467;
                        do
                        {
                          int v953 = v934[v1513];
                          if (v953 >= 1)
                          {
                            int v954 = 0;
                            uint64_t v955 = v935[v938];
                            uint64_t v956 = 4 * *(void *)(v937 + 8 * v938);
                            uint64_t v957 = v952;
                            uint64_t v958 = v951;
                            do
                            {
                              int v959 = v934[v938];
                              if (v959 >= 1)
                              {
                                int v960 = 0;
                                uint64_t v961 = v935[v939];
                                int v962 = *v13;
                                uint64_t v963 = 4 * *(void *)(v937 + 8 * v939);
                                uint64_t v964 = v957;
                                uint64_t v965 = v958;
                                do
                                {
                                  int v966 = v934[v939];
                                  if (v966 >= 1)
                                  {
                                    uint64_t v967 = v125[19];
                                    int v968 = (_DWORD *)(v962[19] + v964);
                                    do
                                    {
                                      *int v968 = *(unsigned __int8 *)(v967 + v965);
                                      int v968 = (_DWORD *)((char *)v968 + v963);
                                      v967 += v961;
                                      --v966;
                                    }
                                    while (v966);
                                  }
                                  v965 += v955;
                                  ++v960;
                                  v964 += v956;
                                }
                                while (v960 != v959);
                              }
                              v958 += v949;
                              ++v954;
                              v957 += v950;
                            }
                            while (v954 != v953);
                          }
                          v951 += v1497;
                          ++v948;
                          v952 += v1481;
                        }
                        while (v948 != v1530);
                      }
                      v1467 += v1407;
                      int v947 = v1443 + 1;
                      v1455 += v1401;
                    }
                    while (v1443 + 1 != v1433);
                  }
                  uint64_t result = v1386 + v1370;
                }
                while (v1375 > v1386 + v1370);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v30 = v9[6];
          if (v30)
          {
            uint64_t v31 = **(unsigned __int8 **)(*(void *)result + 152);
            float v32 = (void *)v9[19];
            do
            {
              *v32++ = v31;
              --v30;
            }
            while (v30);
          }
          break;
        case 1:
          uint64_t v134 = *(void *)(*(void *)result + 160);
          if (v134)
          {
            uint64_t v135 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v136 = (void *)v9[19];
            do
            {
              unsigned int v137 = *v135++;
              *v136++ = v137;
              --v134;
            }
            while (v134);
          }
          break;
        case 2:
          uint64_t v138 = *a7;
          uint64_t v139 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v140 = **a4;
              if ((int)v140 >= 1)
              {
                uint64_t v141 = *(void *)(v139 + 152);
                uint64_t v142 = (void *)v9[19];
                int v143 = *a5;
                do
                {
                  *v142++ = *(unsigned __int8 *)(v141 + v138);
                  v138 += *v143;
                  --v140;
                }
                while (v140);
              }
              break;
            case 2:
              int v441 = **a4;
              if (v441 >= 1)
              {
                int v442 = 0;
                uint64_t v443 = 0;
                uint64_t v444 = *(void *)(v139 + 152);
                uint64_t v445 = v9[19];
                int v446 = (*a4)[1];
                uint64_t v447 = *a5;
                do
                {
                  if (v446 <= 0)
                  {
                    uint64_t v449 = v447[1];
                  }
                  else
                  {
                    int v448 = v446;
                    do
                    {
                      *(void *)(v445 + 8 * v443++) = *(unsigned __int8 *)(v444 + v138);
                      uint64_t v449 = v447[1];
                      v138 += v449;
                      --v448;
                    }
                    while (v448);
                  }
                  uint64_t result = *v447;
                  uint64_t v138 = v138 - v449 * v446 + *v447;
                  ++v442;
                }
                while (v442 != v441);
              }
              break;
            case 3:
              int v450 = *a4;
              int v451 = **a4;
              if (v451 >= 1)
              {
                int v452 = 0;
                uint64_t v453 = 0;
                uint64_t v454 = *(void *)(v139 + 152);
                uint64_t v455 = v9[19];
                uint64_t v456 = v450[1];
                uint64_t v457 = *a5;
                do
                {
                  if ((int)v456 <= 0)
                  {
                    uint64_t v461 = v457[1];
                  }
                  else
                  {
                    int v458 = 0;
                    uint64_t result = v450[2];
                    uint64_t v459 = *a5;
                    do
                    {
                      int v460 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v455 + 8 * v453++) = *(unsigned __int8 *)(v454 + v138);
                          v138 += v459[2];
                          --v460;
                        }
                        while (v460);
                      }
                      uint64_t v461 = v457[1];
                      uint64_t v138 = v461 + v138 - v457[2] * (int)result;
                      ++v458;
                    }
                    while (v458 != v456);
                  }
                  uint64_t v138 = v138 - v461 * v456 + *v457;
                  ++v452;
                }
                while (v452 != v451);
              }
              break;
            case 4:
              int v462 = *a4;
              int v463 = **a4;
              if (v463 >= 1)
              {
                int v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = *(void *)(v139 + 152);
                uint64_t v467 = v9[19];
                uint64_t v468 = v462[1];
                uint64_t v469 = *a5;
                do
                {
                  if ((int)v468 <= 0)
                  {
                    uint64_t v476 = v469[1];
                  }
                  else
                  {
                    int v470 = 0;
                    uint64_t result = v462[2];
                    int v471 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v472 = 0;
                        int v473 = v462[3];
                        uint64_t v474 = *a5;
                        do
                        {
                          int v475 = v473;
                          if (v473 >= 1)
                          {
                            do
                            {
                              *(void *)(v467 + 8 * v465++) = *(unsigned __int8 *)(v466 + v138);
                              v138 += v474[3];
                              --v475;
                            }
                            while (v475);
                          }
                          uint64_t v138 = v471[2] + v138 - v471[3] * v473;
                          ++v472;
                        }
                        while (v472 != result);
                      }
                      uint64_t v476 = v469[1];
                      uint64_t v138 = v476 + v138 - v469[2] * result;
                      ++v470;
                    }
                    while (v470 != v468);
                  }
                  uint64_t v138 = v138 - v476 * v468 + *v469;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            default:
              uint64_t v431 = v9[6];
              if (v431)
              {
                uint64_t v432 = 0;
                uint64_t v433 = *(void *)(v139 + 152) + v138;
                uint64_t v434 = v9[19];
                uint64_t v435 = *a4;
                uint64_t v436 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v437 = *a5;
                do
                {
                  uint64_t v438 = 0;
                  if ((v436 & 0x80000000) == 0)
                  {
                    uint64_t v439 = v436;
                    LODWORD(result) = v432;
                    do
                    {
                      ldiv_t v440 = ldiv((int)result, v435[v439]);
                      uint64_t result = v440.quot;
                      v438 += v437[v439--] * v440.rem;
                    }
                    while (v439 != -1);
                  }
                  *(void *)(v434 + 8 * v432++) = *(unsigned __int8 *)(v433 + v438);
                }
                while (v432 != v431);
              }
              break;
          }
          break;
        case 3:
          uint64_t v144 = *a7;
          uint64_t v1380 = *a8;
          uint64_t v145 = *(void **)result;
          uint64_t v146 = v145[1] - *v145;
          switch(v146 >> 2)
          {
            case 1:
              uint64_t v147 = (v146 << 30) - 0x100000000;
              int v148 = *(int *)((char *)*a4 + (v147 >> 30));
              if (v148 >= 1)
              {
                uint64_t v149 = v147 >> 29;
                uint64_t v150 = *(uint64_t *)((char *)*a5 + (v147 >> 29));
                uint64_t v151 = (void *)(v9[19] + 8 * v1380);
                uint64_t v152 = (unsigned __int8 *)(v145[19] + v144);
                uint64_t v153 = 8 * *(void *)(*a6 + v149);
                do
                {
                  void *v151 = *v152;
                  v152 += v150;
                  uint64_t v151 = (void *)((char *)v151 + v153);
                  --v148;
                }
                while (v148);
              }
              break;
            case 2:
              uint64_t v1110 = (v146 << 30) - 0x200000000;
              int v1111 = *(int *)((char *)*a4 + (v1110 >> 30));
              if (v1111 >= 1)
              {
                int v1112 = 0;
                int v1113 = *a5;
                uint64_t v1114 = v1110 >> 29;
                uint64_t v1115 = *(uint64_t *)((char *)*a5 + (v1110 >> 29));
                uint64_t v1116 = *a6;
                uint64_t v1117 = *(void *)(*a6 + v1114);
                uint64_t v1118 = (v146 << 30) - 0x100000000;
                uint64_t v1119 = v1118 >> 32;
                int v1120 = *(int *)((char *)*a4 + (v1118 >> 30));
                uint64_t v1121 = 8 * v1380;
                uint64_t v1122 = 8 * v1117;
                do
                {
                  if (v1120 >= 1)
                  {
                    uint64_t result = v1113[v1119];
                    uint64_t v1123 = v145[19];
                    uint64_t v1124 = (void *)(v9[19] + v1121);
                    uint64_t v1125 = 8 * *(void *)(v1116 + 8 * v1119);
                    int v1126 = v1120;
                    do
                    {
                      *uint64_t v1124 = *(unsigned __int8 *)(v1123 + v144);
                      uint64_t v1124 = (void *)((char *)v1124 + v1125);
                      v1123 += result;
                      --v1126;
                    }
                    while (v1126);
                  }
                  v144 += v1115;
                  ++v1112;
                  v1121 += v1122;
                }
                while (v1112 != v1111);
              }
              break;
            case 3:
              uint64_t v1127 = (v146 << 30) - 0x300000000;
              int v1128 = *a4;
              int v1129 = *(int *)((char *)*a4 + (v1127 >> 30));
              if (v1129 >= 1)
              {
                int v1130 = 0;
                int v1131 = *a5;
                uint64_t v1132 = v1127 >> 29;
                uint64_t v1133 = *(uint64_t *)((char *)*a5 + (v1127 >> 29));
                uint64_t v1134 = *a6;
                uint64_t v1135 = *(void *)(*a6 + v1132);
                uint64_t v1136 = v146 << 30;
                uint64_t v1137 = v1136 - 0x200000000;
                uint64_t v1138 = v1136 - 0x100000000;
                uint64_t v1139 = (v1136 - 0x200000000) >> 32;
                int v1140 = *(int *)((char *)v1128 + (v1137 >> 30));
                uint64_t v1141 = v1138 >> 32;
                uint64_t v1142 = 8 * v1380;
                uint64_t result = 8 * v1135;
                do
                {
                  if (v1140 >= 1)
                  {
                    int v1143 = 0;
                    uint64_t v1144 = v1131[v1139];
                    int v1145 = v1128[v1141];
                    uint64_t v1146 = *v13;
                    uint64_t v1147 = 8 * *(void *)(v1134 + 8 * v1139);
                    uint64_t v1148 = v1142;
                    uint64_t v1149 = v144;
                    do
                    {
                      if (v1145 >= 1)
                      {
                        uint64_t v1150 = v1131[v1141];
                        uint64_t v1151 = v145[19];
                        uint64_t v1152 = (void *)(v1146[19] + v1148);
                        uint64_t v1153 = 8 * *(void *)(v1134 + 8 * v1141);
                        int v1154 = v1145;
                        do
                        {
                          *uint64_t v1152 = *(unsigned __int8 *)(v1151 + v1149);
                          uint64_t v1152 = (void *)((char *)v1152 + v1153);
                          v1151 += v1150;
                          --v1154;
                        }
                        while (v1154);
                      }
                      v1149 += v1144;
                      ++v1143;
                      v1148 += v1147;
                    }
                    while (v1143 != v1140);
                  }
                  v144 += v1133;
                  ++v1130;
                  v1142 += result;
                }
                while (v1130 != v1129);
              }
              break;
            case 4:
              uint64_t v1155 = (v146 << 30) - 0x400000000;
              int v1156 = *a4;
              int v1533 = *(int *)((char *)*a4 + (v1155 >> 30));
              if (v1533 >= 1)
              {
                int v1157 = 0;
                uint64_t v1158 = *a5;
                uint64_t v1159 = v1155 >> 29;
                uint64_t v1501 = *(uint64_t *)((char *)*a5 + v1159);
                uint64_t v1160 = *a6;
                uint64_t v1161 = (v146 << 30) - 0x300000000;
                uint64_t v1485 = v1161 >> 32;
                int v1162 = *(int *)((char *)v1156 + (v1161 >> 30));
                uint64_t v1163 = ((v146 << 30) - 0x200000000) >> 32;
                uint64_t v1164 = ((v146 << 30) - 0x100000000) >> 32;
                uint64_t result = 8 * v1380;
                uint64_t v1516 = 8 * *(void *)(*a6 + v1159);
                do
                {
                  uint64_t v1395 = v144;
                  if (v1162 >= 1)
                  {
                    int v1165 = 0;
                    uint64_t v1166 = v1158[v1485];
                    int v1167 = v1156[v1163];
                    uint64_t v1168 = 8 * *(void *)(v1160 + 8 * v1485);
                    uint64_t v1169 = result;
                    uint64_t v1170 = v144;
                    do
                    {
                      if (v1167 >= 1)
                      {
                        int v1171 = 0;
                        uint64_t v1172 = v1158[v1163];
                        int v1173 = v1156[v1164];
                        uint64_t v1174 = *v13;
                        uint64_t v1175 = 8 * *(void *)(v1160 + 8 * v1163);
                        uint64_t v1176 = v1169;
                        uint64_t v1177 = v1170;
                        do
                        {
                          if (v1173 >= 1)
                          {
                            uint64_t v1178 = v1158[v1164];
                            uint64_t v1179 = v145[19];
                            uint64_t v1180 = (void *)(v1174[19] + v1176);
                            uint64_t v1181 = 8 * *(void *)(v1160 + 8 * v1164);
                            int v1182 = v1173;
                            do
                            {
                              *uint64_t v1180 = *(unsigned __int8 *)(v1179 + v1177);
                              uint64_t v1180 = (void *)((char *)v1180 + v1181);
                              v1179 += v1178;
                              --v1182;
                            }
                            while (v1182);
                          }
                          v1177 += v1172;
                          ++v1171;
                          v1176 += v1175;
                        }
                        while (v1171 != v1167);
                      }
                      v1170 += v1166;
                      ++v1165;
                      v1169 += v1168;
                    }
                    while (v1165 != v1162);
                  }
                  uint64_t v144 = v1395 + v1501;
                  ++v1157;
                  result += v1516;
                }
                while (v1157 != v1533);
              }
              break;
            case 5:
              uint64_t v1183 = (v146 << 30) - 0x500000000;
              int v1184 = *a4;
              int v1436 = *(int *)((char *)*a4 + (v1183 >> 30));
              if (v1436 >= 1)
              {
                int v1446 = 0;
                uint64_t v1185 = *a5;
                uint64_t v1186 = v1183 >> 29;
                uint64_t v1426 = *(uint64_t *)((char *)*a5 + v1186);
                uint64_t v1187 = *a6;
                uint64_t v1188 = (v146 << 30) - 0x400000000;
                int v1517 = *(int *)((char *)v1184 + (v1188 >> 30));
                uint64_t v1409 = v1188 >> 32;
                uint64_t v1189 = ((v146 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v146 << 30) - 0x100000000) >> 32;
                uint64_t v1458 = 8 * v1380;
                uint64_t v1470 = ((v146 << 30) - 0x300000000) >> 32;
                uint64_t v1417 = 8 * *(void *)(*a6 + v1186);
                do
                {
                  uint64_t v1396 = v144;
                  if (v1517 >= 1)
                  {
                    int v1190 = 0;
                    uint64_t v1502 = v1185[v1409];
                    int v1191 = v1184[v1470];
                    uint64_t v1486 = 8 * *(void *)(v1187 + 8 * v1409);
                    uint64_t v1192 = v1458;
                    uint64_t v1193 = v144;
                    do
                    {
                      int v1534 = v1190;
                      if (v1191 >= 1)
                      {
                        int v1194 = 0;
                        uint64_t v1195 = v1185[v1470];
                        int v1196 = v1184[v1189];
                        uint64_t v1197 = 8 * *(void *)(v1187 + 8 * v1470);
                        uint64_t v1198 = v1192;
                        uint64_t v1199 = v1193;
                        do
                        {
                          if (v1196 >= 1)
                          {
                            int v1200 = 0;
                            uint64_t v1201 = v1185[v1189];
                            int v1202 = v1184[result];
                            uint64_t v1203 = *v13;
                            uint64_t v1204 = 8 * *(void *)(v1187 + 8 * v1189);
                            uint64_t v1205 = v1198;
                            uint64_t v1206 = v1199;
                            do
                            {
                              if (v1202 >= 1)
                              {
                                uint64_t v1207 = v1185[result];
                                uint64_t v1208 = v145[19];
                                uint64_t v1209 = (void *)(v1203[19] + v1205);
                                uint64_t v1210 = 8 * *(void *)(v1187 + 8 * result);
                                int v1211 = v1202;
                                do
                                {
                                  *uint64_t v1209 = *(unsigned __int8 *)(v1208 + v1206);
                                  uint64_t v1209 = (void *)((char *)v1209 + v1210);
                                  v1208 += v1207;
                                  --v1211;
                                }
                                while (v1211);
                              }
                              v1206 += v1201;
                              ++v1200;
                              v1205 += v1204;
                            }
                            while (v1200 != v1196);
                          }
                          v1199 += v1195;
                          ++v1194;
                          v1198 += v1197;
                        }
                        while (v1194 != v1191);
                      }
                      v1193 += v1502;
                      int v1190 = v1534 + 1;
                      v1192 += v1486;
                    }
                    while (v1534 + 1 != v1517);
                  }
                  uint64_t v144 = v1396 + v1426;
                  v1458 += v1417;
                  ++v1446;
                }
                while (v1446 != v1436);
              }
              break;
            default:
              uint64_t v1072 = (char *)a4[1];
              LODWORD(v1073) = 1;
              uint64_t v1074 = -20;
              do
              {
                uint64_t v1073 = *(int *)&v1072[v1074] * (uint64_t)(int)v1073;
                v1074 += 4;
              }
              while (v1074);
              unint64_t v1376 = v145[6];
              if (v1376)
              {
                uint64_t v1075 = 0;
                uint64_t v1076 = (v146 << 30) - 0x500000000;
                uint64_t v1077 = *a4;
                uint64_t v1357 = *v9;
                uint64_t v1078 = *a5;
                uint64_t v1361 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                uint64_t v1366 = ((unint64_t)(v1072 - (char *)*a4) >> 2) - 1;
                uint64_t v1079 = *a6;
                uint64_t v1353 = v1076 >> 32;
                int v1425 = *(int *)((char *)*a4 + (v1076 >> 30));
                uint64_t v1394 = *a7;
                uint64_t v1402 = ((v146 << 30) - 0x400000000) >> 32;
                uint64_t v1469 = ((v146 << 30) - 0x300000000) >> 32;
                uint64_t v1080 = ((v146 << 30) - 0x200000000) >> 32;
                uint64_t v1081 = ((v146 << 30) - 0x100000000) >> 32;
                uint64_t v1371 = v1073;
                do
                {
                  uint64_t v1082 = v1366;
                  if ((v1366 & 0x80000000) != 0)
                  {
                    uint64_t v1083 = 0;
                  }
                  else
                  {
                    uint64_t v1083 = 0;
                    LODWORD(result) = v1075;
                    do
                    {
                      ldiv_t v1084 = ldiv((int)result, v1077[v1082]);
                      uint64_t result = v1084.quot;
                      v1083 += v1078[v1082--] * v1084.rem;
                    }
                    while (v1082 != -1);
                  }
                  uint64_t v1085 = v1361;
                  uint64_t v1387 = v1075;
                  uint64_t v1086 = 0;
                  if ((v1361 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1075;
                    do
                    {
                      ldiv_t v1087 = ldiv((int)result, *(int *)(v1357 + 4 * v1085));
                      uint64_t result = v1087.quot;
                      v1086 += *(void *)(v1079 + 8 * v1085--) * v1087.rem;
                    }
                    while (v1085 != -1);
                  }
                  if (v1425 >= 1)
                  {
                    int v1088 = 0;
                    uint64_t v1416 = v1078[v1353];
                    uint64_t v1457 = v1083 + v1394;
                    int v1515 = v1077[v1402];
                    uint64_t v1445 = 8 * (v1086 + v1380);
                    uint64_t v1408 = 8 * *(void *)(v1079 + 8 * v1353);
                    do
                    {
                      int v1435 = v1088;
                      if (v1515 >= 1)
                      {
                        int v1089 = 0;
                        uint64_t v1500 = v1078[v1402];
                        int v1090 = v1077[v1469];
                        uint64_t v1484 = 8 * *(void *)(v1079 + 8 * v1402);
                        uint64_t v1092 = v1445;
                        uint64_t v1091 = v1457;
                        do
                        {
                          if (v1090 >= 1)
                          {
                            int v1093 = 0;
                            uint64_t v1094 = v1078[v1469];
                            int v1095 = v1077[v1080];
                            uint64_t v1096 = 8 * *(void *)(v1079 + 8 * v1469);
                            uint64_t result = v1092;
                            uint64_t v1097 = v1091;
                            do
                            {
                              if (v1095 >= 1)
                              {
                                int v1098 = 0;
                                uint64_t v1099 = v1078[v1080];
                                int v1100 = v1077[v1081];
                                uint64_t v1101 = *(uint64_t **)a2;
                                uint64_t v1102 = 8 * *(void *)(v1079 + 8 * v1080);
                                uint64_t v1103 = result;
                                uint64_t v1104 = v1097;
                                do
                                {
                                  if (v1100 >= 1)
                                  {
                                    uint64_t v1105 = v1078[v1081];
                                    uint64_t v1106 = v145[19];
                                    uint64_t v1107 = (void *)(v1101[19] + v1103);
                                    uint64_t v1108 = 8 * *(void *)(v1079 + 8 * v1081);
                                    int v1109 = v1100;
                                    do
                                    {
                                      *uint64_t v1107 = *(unsigned __int8 *)(v1106 + v1104);
                                      uint64_t v1107 = (void *)((char *)v1107 + v1108);
                                      v1106 += v1105;
                                      --v1109;
                                    }
                                    while (v1109);
                                  }
                                  v1104 += v1099;
                                  ++v1098;
                                  v1103 += v1102;
                                }
                                while (v1098 != v1095);
                              }
                              v1097 += v1094;
                              ++v1093;
                              result += v1096;
                            }
                            while (v1093 != v1090);
                          }
                          v1091 += v1500;
                          ++v1089;
                          v1092 += v1484;
                        }
                        while (v1089 != v1515);
                      }
                      v1457 += v1416;
                      int v1088 = v1435 + 1;
                      v1445 += v1408;
                    }
                    while (v1435 + 1 != v1425);
                  }
                  v1075 += v1371;
                }
                while (v1376 > v1387 + v1371);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v33 = v9[6];
          if (v33)
          {
            LOBYTE(a9) = **(unsigned char **)(*(void *)result + 152);
            float v34 = (float)LODWORD(a9);
            size_t v35 = (float *)v9[19];
            do
            {
              *v35++ = v34;
              --v33;
            }
            while (v33);
          }
          break;
        case 1:
          uint64_t v154 = *(void *)(*(void *)result + 160);
          if (v154)
          {
            uint64_t v155 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v156 = (float *)v9[19];
            do
            {
              unsigned int v157 = *v155++;
              *v156++ = (float)v157;
              --v154;
            }
            while (v154);
          }
          break;
        case 2:
          uint64_t v158 = *a7;
          uint64_t v159 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v160 = **a4;
              if ((int)v160 >= 1)
              {
                uint64_t v161 = (float *)v9[19];
                uint64_t v162 = **a5;
                uint64_t v163 = (unsigned char *)(*(void *)(v159 + 152) + v158);
                do
                {
                  LOBYTE(a9) = *v163;
                  a9 = (float)LODWORD(a9);
                  *v161++ = a9;
                  v163 += v162;
                  --v160;
                }
                while (v160);
              }
              break;
            case 2:
              int v487 = **a4;
              if (v487 >= 1)
              {
                int v488 = 0;
                uint64_t v489 = 0;
                uint64_t v490 = *(void *)(v159 + 152);
                uint64_t v491 = v9[19];
                uint64_t v492 = (*a4)[1];
                uint64_t v493 = (*a5)[1];
                uint64_t v494 = **a5 - v493 * v492;
                do
                {
                  int v495 = v492;
                  if ((int)v492 >= 1)
                  {
                    do
                    {
                      LOBYTE(a9) = *(unsigned char *)(v490 + v158);
                      a9 = (float)LODWORD(a9);
                      *(float *)(v491 + 4 * v489++) = a9;
                      v158 += v493;
                      --v495;
                    }
                    while (v495);
                  }
                  v158 += v494;
                  ++v488;
                }
                while (v488 != v487);
              }
              break;
            case 3:
              uint64_t v496 = *a4;
              int v497 = **a4;
              if (v497 >= 1)
              {
                int v498 = 0;
                uint64_t result = 0;
                uint64_t v499 = *(void *)(v159 + 152);
                uint64_t v500 = v9[19];
                uint64_t v501 = v496[1];
                int v502 = *a5;
                uint64_t v503 = (*a5)[1];
                uint64_t v504 = **a5 - v503 * v501;
                do
                {
                  if ((int)v501 < 1)
                  {
                    uint64_t v511 = result;
                  }
                  else
                  {
                    int v505 = 0;
                    uint64_t v506 = v496[2];
                    int v507 = *a5;
                    uint64_t v508 = v503 - v502[2] * v506;
                    do
                    {
                      if ((int)v506 < 1)
                      {
                        uint64_t v511 = result;
                      }
                      else
                      {
                        uint64_t v509 = v507[2];
                        int v510 = v506;
                        do
                        {
                          LOBYTE(a9) = *(unsigned char *)(v499 + v158);
                          uint64_t v511 = result + 1;
                          a9 = (float)LODWORD(a9);
                          *(float *)(v500 + 4 * result) = a9;
                          v158 += v509;
                          ++result;
                          --v510;
                        }
                        while (v510);
                      }
                      v158 += v508;
                      ++v505;
                      uint64_t result = v511;
                    }
                    while (v505 != v501);
                  }
                  v158 += v504;
                  ++v498;
                  uint64_t result = v511;
                }
                while (v498 != v497);
              }
              break;
            case 4:
              float v512 = *a4;
              int v513 = **a4;
              if (v513 >= 1)
              {
                int v514 = 0;
                uint64_t result = 0;
                uint64_t v515 = *(void *)(v159 + 152);
                uint64_t v516 = v9[19];
                uint64_t v517 = v512[1];
                uint64_t v518 = *a5;
                uint64_t v519 = (*a5)[1];
                uint64_t v520 = **a5 - v519 * v517;
                do
                {
                  if ((int)v517 < 1)
                  {
                    uint64_t v531 = result;
                  }
                  else
                  {
                    int v521 = 0;
                    uint64_t v522 = v512[2];
                    uint64_t v523 = *a5;
                    uint64_t v524 = v519 - v518[2] * v522;
                    do
                    {
                      if ((int)v522 < 1)
                      {
                        uint64_t v531 = result;
                      }
                      else
                      {
                        int v525 = 0;
                        uint64_t v526 = v512[3];
                        uint64_t v527 = *a5;
                        uint64_t v528 = v523[2] - v523[3] * v526;
                        do
                        {
                          if ((int)v526 < 1)
                          {
                            uint64_t v531 = result;
                          }
                          else
                          {
                            uint64_t v529 = v527[3];
                            int v530 = v526;
                            do
                            {
                              LOBYTE(a9) = *(unsigned char *)(v515 + v158);
                              uint64_t v531 = result + 1;
                              a9 = (float)LODWORD(a9);
                              *(float *)(v516 + 4 * result) = a9;
                              v158 += v529;
                              ++result;
                              --v530;
                            }
                            while (v530);
                          }
                          v158 += v528;
                          ++v525;
                          uint64_t result = v531;
                        }
                        while (v525 != v522);
                      }
                      v158 += v524;
                      ++v521;
                      uint64_t result = v531;
                    }
                    while (v521 != v517);
                  }
                  v158 += v520;
                  ++v514;
                  uint64_t result = v531;
                }
                while (v514 != v513);
              }
              break;
            default:
              uint64_t v477 = v9[6];
              if (v477)
              {
                uint64_t v478 = 0;
                uint64_t v479 = *(void *)(v159 + 152) + v158;
                uint64_t v480 = v9[19];
                uint64_t v481 = *a4;
                uint64_t v482 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v483 = *a5;
                do
                {
                  uint64_t v484 = 0;
                  if ((v482 & 0x80000000) == 0)
                  {
                    uint64_t v485 = v482;
                    LODWORD(result) = v478;
                    do
                    {
                      ldiv_t v486 = ldiv((int)result, v481[v485]);
                      uint64_t result = v486.quot;
                      v484 += v483[v485--] * v486.rem;
                    }
                    while (v485 != -1);
                  }
                  LOBYTE(a9) = *(unsigned char *)(v479 + v484);
                  a9 = (float)LODWORD(a9);
                  *(float *)(v480 + 4 * v478++) = a9;
                }
                while (v478 != v477);
              }
              break;
          }
          break;
        case 3:
          uint64_t v164 = *a7;
          uint64_t v1383 = *a8;
          int v165 = *(void **)result;
          uint64_t v166 = v165[1] - *v165;
          switch(v166 >> 2)
          {
            case 1:
              uint64_t v167 = (v166 << 30) - 0x100000000;
              int v168 = *(int *)((char *)*a4 + (v167 >> 30));
              if (v168 >= 1)
              {
                uint64_t v169 = v167 >> 29;
                uint64_t v170 = *(uint64_t *)((char *)*a5 + (v167 >> 29));
                float v171 = (float *)(v9[19] + 4 * v1383);
                uint64_t v172 = (unsigned char *)(v165[19] + v164);
                uint64_t v173 = 4 * *(void *)(*a6 + v169);
                do
                {
                  LOBYTE(a9) = *v172;
                  a9 = (float)LODWORD(a9);
                  *float v171 = a9;
                  v172 += v170;
                  float v171 = (float *)((char *)v171 + v173);
                  --v168;
                }
                while (v168);
              }
              break;
            case 2:
              uint64_t v1251 = (v166 << 30) - 0x200000000;
              int v1252 = *(int *)((char *)*a4 + (v1251 >> 30));
              if (v1252 >= 1)
              {
                int v1253 = 0;
                uint64_t v1254 = v1251 >> 29;
                uint64_t v1255 = *(uint64_t *)((char *)*a5 + (v1251 >> 29));
                uint64_t v1256 = (v166 << 30) - 0x100000000;
                uint64_t result = v1256 >> 29;
                uint64_t v1257 = *(uint64_t *)((char *)*a5 + (v1256 >> 29));
                int v1258 = *(int *)((char *)*a4 + (v1256 >> 30));
                uint64_t v1259 = 4 * v1383;
                uint64_t v1260 = 4 * *(void *)(*a6 + v1254);
                uint64_t v1261 = 4 * *(void *)(*a6 + (v1256 >> 29));
                do
                {
                  if (v1258 >= 1)
                  {
                    uint64_t v1262 = v165[19];
                    uint64_t result = v9[19] + v1259;
                    int v1263 = v1258;
                    do
                    {
                      LOBYTE(a9) = *(unsigned char *)(v1262 + v164);
                      a9 = (float)LODWORD(a9);
                      *(float *)uint64_t result = a9;
                      result += v1261;
                      v1262 += v1257;
                      --v1263;
                    }
                    while (v1263);
                  }
                  v164 += v1255;
                  ++v1253;
                  v1259 += v1260;
                }
                while (v1253 != v1252);
              }
              break;
            case 3:
              uint64_t v1264 = (v166 << 30) - 0x300000000;
              int v1265 = *a4;
              int v1266 = *(int *)((char *)*a4 + (v1264 >> 30));
              if (v1266 >= 1)
              {
                int v1267 = 0;
                uint64_t v1268 = v166 << 30;
                int v1269 = *a5;
                uint64_t v1270 = v1264 >> 29;
                uint64_t v1271 = *(uint64_t *)((char *)*a5 + (v1264 >> 29));
                uint64_t v1272 = *a6;
                uint64_t v1273 = *(void *)(*a6 + v1270);
                uint64_t v1274 = v1268 - 0x200000000;
                uint64_t v1275 = (v1268 - 0x200000000) >> 29;
                uint64_t v1276 = v1268 - 0x100000000;
                uint64_t v1277 = *(uint64_t *)((char *)*a5 + v1275);
                uint64_t v1278 = *(void *)(*a6 + v1275);
                int v1279 = *(int *)((char *)v1265 + (v1274 >> 30));
                uint64_t v1280 = v1276 >> 32;
                uint64_t v1281 = 4 * v1383;
                uint64_t result = 4 * v1273;
                uint64_t v1282 = 4 * v1278;
                do
                {
                  if (v1279 >= 1)
                  {
                    int v1283 = 0;
                    uint64_t v1284 = v1269[v1280];
                    int v1285 = v1265[v1280];
                    uint64_t v1286 = *v13;
                    uint64_t v1287 = 4 * *(void *)(v1272 + 8 * v1280);
                    uint64_t v1288 = v1281;
                    uint64_t v1289 = v164;
                    do
                    {
                      if (v1285 >= 1)
                      {
                        uint64_t v1290 = v165[19];
                        uint64_t v1291 = (float *)(v1286[19] + v1288);
                        uint64_t v13 = (uint64_t **)a2;
                        int v1292 = v1285;
                        do
                        {
                          LOBYTE(a9) = *(unsigned char *)(v1290 + v1289);
                          a9 = (float)LODWORD(a9);
                          *uint64_t v1291 = a9;
                          uint64_t v1291 = (float *)((char *)v1291 + v1287);
                          v1290 += v1284;
                          --v1292;
                        }
                        while (v1292);
                      }
                      v1289 += v1277;
                      ++v1283;
                      v1288 += v1282;
                    }
                    while (v1283 != v1279);
                  }
                  v164 += v1271;
                  ++v1267;
                  v1281 += result;
                }
                while (v1267 != v1266);
              }
              break;
            case 4:
              uint64_t v1293 = (v166 << 30) - 0x400000000;
              int v1294 = *a4;
              int v1536 = *(int *)((char *)*a4 + (v1293 >> 30));
              if (v1536 >= 1)
              {
                int v1295 = 0;
                uint64_t v1296 = v166 << 30;
                int v1297 = *a5;
                uint64_t v1298 = v1293 >> 29;
                uint64_t v1504 = *(uint64_t *)((char *)*a5 + v1298);
                uint64_t v1299 = *a6;
                uint64_t v1300 = (v166 << 30) - 0x300000000;
                uint64_t v1301 = *(uint64_t *)((char *)*a5 + (v1300 >> 29));
                uint64_t v1302 = *(void *)(*a6 + (v1300 >> 29));
                int v1303 = *(int *)((char *)v1294 + (v1300 >> 30));
                uint64_t v1304 = (v1296 - 0x200000000) >> 32;
                uint64_t v1305 = (v1296 - 0x100000000) >> 32;
                uint64_t result = 4 * v1383;
                uint64_t v1519 = 4 * *(void *)(*a6 + v1298);
                uint64_t v1306 = 4 * v1302;
                do
                {
                  uint64_t v1307 = v164;
                  if (v1303 >= 1)
                  {
                    int v1308 = 0;
                    uint64_t v1309 = v1297[v1304];
                    int v1310 = v1294[v1304];
                    uint64_t v1311 = 4 * *(void *)(v1299 + 8 * v1304);
                    uint64_t v1312 = result;
                    uint64_t v1313 = v164;
                    do
                    {
                      if (v1310 >= 1)
                      {
                        int v1314 = 0;
                        uint64_t v1315 = v1297[v1305];
                        int v1316 = v1294[v1305];
                        int v1317 = *v13;
                        uint64_t v1318 = 4 * *(void *)(v1299 + 8 * v1305);
                        uint64_t v1319 = v1312;
                        uint64_t v1320 = v1313;
                        do
                        {
                          if (v1316 >= 1)
                          {
                            uint64_t v1321 = v165[19];
                            uint64_t v1322 = (float *)(v1317[19] + v1319);
                            int v1323 = v1316;
                            do
                            {
                              LOBYTE(a9) = *(unsigned char *)(v1321 + v1320);
                              a9 = (float)LODWORD(a9);
                              *uint64_t v1322 = a9;
                              uint64_t v1322 = (float *)((char *)v1322 + v1318);
                              v1321 += v1315;
                              --v1323;
                            }
                            while (v1323);
                          }
                          v1320 += v1309;
                          ++v1314;
                          v1319 += v1311;
                        }
                        while (v1314 != v1310);
                      }
                      v1313 += v1301;
                      ++v1308;
                      v1312 += v1306;
                    }
                    while (v1308 != v1303);
                  }
                  uint64_t v164 = v1307 + v1504;
                  ++v1295;
                  result += v1519;
                }
                while (v1295 != v1536);
              }
              break;
            case 5:
              uint64_t v1324 = (v166 << 30) - 0x500000000;
              int v1325 = *a4;
              int v1460 = *(int *)((char *)*a4 + (v1324 >> 30));
              if (v1460 >= 1)
              {
                int v1472 = 0;
                int v1326 = *a5;
                uint64_t v1327 = v1324 >> 29;
                uint64_t v1448 = *(uint64_t *)((char *)*a5 + v1327);
                uint64_t v1328 = *a6;
                uint64_t v1329 = (v166 << 30) - 0x400000000;
                uint64_t v1520 = *(uint64_t *)((char *)*a5 + (v1329 >> 29));
                int v1537 = *(int *)((char *)v1325 + (v1329 >> 30));
                uint64_t v1428 = ((v166 << 30) - 0x300000000) >> 32;
                uint64_t v1330 = ((v166 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v166 << 30) - 0x100000000) >> 32;
                uint64_t v1488 = 4 * v1383;
                uint64_t v1438 = 4 * *(void *)(*a6 + v1327);
                uint64_t v1505 = 4 * *(void *)(*a6 + (v1329 >> 29));
                do
                {
                  uint64_t v1404 = v164;
                  if (v1537 >= 1)
                  {
                    int v1331 = 0;
                    uint64_t v1332 = v1326[v1428];
                    int v1333 = v1325[v1428];
                    uint64_t v1334 = 4 * *(void *)(v1328 + 8 * v1428);
                    uint64_t v1335 = v1488;
                    uint64_t v1336 = v164;
                    do
                    {
                      if (v1333 >= 1)
                      {
                        int v1337 = 0;
                        uint64_t v1338 = v1326[v1330];
                        int v1339 = v1325[v1330];
                        uint64_t v1340 = 4 * *(void *)(v1328 + 8 * v1330);
                        uint64_t v1341 = v1335;
                        uint64_t v1342 = v1336;
                        do
                        {
                          if (v1339 >= 1)
                          {
                            int v1343 = 0;
                            uint64_t v1344 = v1326[result];
                            int v1345 = v1325[result];
                            uint64_t v1346 = *v13;
                            uint64_t v1347 = 4 * *(void *)(v1328 + 8 * result);
                            uint64_t v1348 = v1341;
                            uint64_t v1349 = v1342;
                            do
                            {
                              if (v1345 >= 1)
                              {
                                uint64_t v1350 = v165[19];
                                uint64_t v1351 = (float *)(v1346[19] + v1348);
                                int v1352 = v1345;
                                do
                                {
                                  LOBYTE(a9) = *(unsigned char *)(v1350 + v1349);
                                  a9 = (float)LODWORD(a9);
                                  *uint64_t v1351 = a9;
                                  uint64_t v1351 = (float *)((char *)v1351 + v1347);
                                  v1350 += v1344;
                                  --v1352;
                                }
                                while (v1352);
                              }
                              v1349 += v1338;
                              ++v1343;
                              v1348 += v1340;
                            }
                            while (v1343 != v1339);
                          }
                          v1342 += v1332;
                          ++v1337;
                          v1341 += v1334;
                        }
                        while (v1337 != v1333);
                      }
                      v1336 += v1520;
                      ++v1331;
                      v1335 += v1505;
                    }
                    while (v1331 != v1537);
                  }
                  uint64_t v164 = v1404 + v1448;
                  v1488 += v1438;
                  ++v1472;
                }
                while (v1472 != v1460);
              }
              break;
            default:
              uint64_t v1212 = (char *)a4[1];
              LODWORD(v1213) = 1;
              uint64_t v1214 = -20;
              do
              {
                uint64_t v1213 = *(int *)&v1212[v1214] * (uint64_t)(int)v1213;
                v1214 += 4;
              }
              while (v1214);
              unint64_t v1382 = v165[6];
              if (v1382)
              {
                uint64_t result = 0;
                uint64_t v1215 = (v166 << 30) - 0x500000000;
                uint64_t v1216 = *a4;
                uint64_t v1437 = *v9;
                uint64_t v1372 = ((unint64_t)(v1212 - (char *)*a4) >> 2) - 1;
                uint64_t v1217 = *a5;
                uint64_t v1218 = *a6;
                int v1447 = *(int *)((char *)*a4 + (v1215 >> 30));
                uint64_t v1367 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                uint64_t v1362 = ((v166 << 30) - 0x400000000) >> 32;
                uint64_t v1403 = *a7;
                uint64_t v1410 = ((v166 << 30) - 0x300000000) >> 32;
                uint64_t v1219 = ((v166 << 30) - 0x200000000) >> 32;
                uint64_t v1220 = ((v166 << 30) - 0x100000000) >> 32;
                uint64_t v1418 = 4 * *(void *)(*a6 + (v1215 >> 29));
                uint64_t v1427 = *(uint64_t *)((char *)*a5 + (v1215 >> 29));
                uint64_t v1377 = v1213;
                do
                {
                  uint64_t v1221 = v1372;
                  uint64_t v1397 = result;
                  uint64_t v1222 = 0;
                  if ((v1372 & 0x80000000) != 0)
                  {
                    uint64_t v1223 = v1367;
                  }
                  else
                  {
                    uint64_t v1223 = v1367;
                    do
                    {
                      ldiv_t v1224 = ldiv((int)result, v1216[v1221]);
                      LODWORD(result) = v1224.quot;
                      v1222 += v1217[v1221--] * v1224.rem;
                    }
                    while (v1221 != -1);
                  }
                  uint64_t v1225 = 0;
                  if ((v1223 & 0x80000000) == 0)
                  {
                    int v1226 = v1397;
                    do
                    {
                      ldiv_t v1227 = ldiv(v1226, *(int *)(v1437 + 4 * v1223));
                      int v1226 = v1227.quot;
                      v1225 += *(void *)(v1218 + 8 * v1223--) * v1227.rem;
                    }
                    while (v1223 != -1);
                  }
                  if (v1447 >= 1)
                  {
                    int v1228 = 0;
                    uint64_t v1518 = v1217[v1362];
                    uint64_t v1487 = v1222 + v1403;
                    int v1535 = v1216[v1362];
                    uint64_t v1471 = 4 * (v1225 + v1383);
                    uint64_t v1503 = 4 * *(void *)(v1218 + 8 * v1362);
                    do
                    {
                      int v1459 = v1228;
                      if (v1535 >= 1)
                      {
                        int v1229 = 0;
                        uint64_t v1230 = v1217[v1410];
                        int v1231 = v1216[v1410];
                        uint64_t v1232 = 4 * *(void *)(v1218 + 8 * v1410);
                        uint64_t v1233 = v1471;
                        uint64_t v1234 = v1487;
                        do
                        {
                          if (v1231 >= 1)
                          {
                            int v1235 = 0;
                            uint64_t v1236 = v1217[v1219];
                            int v1237 = v1216[v1219];
                            uint64_t v1238 = 4 * *(void *)(v1218 + 8 * v1219);
                            uint64_t v1239 = v1233;
                            uint64_t v1240 = v1234;
                            do
                            {
                              if (v1237 >= 1)
                              {
                                int v1241 = 0;
                                uint64_t v1242 = v1217[v1220];
                                int v1243 = v1216[v1220];
                                int v1244 = *v13;
                                uint64_t v1245 = 4 * *(void *)(v1218 + 8 * v1220);
                                uint64_t v1246 = v1239;
                                uint64_t v1247 = v1240;
                                do
                                {
                                  if (v1243 >= 1)
                                  {
                                    uint64_t v1248 = v165[19];
                                    uint64_t v1249 = (float *)(v1244[19] + v1246);
                                    int v1250 = v1243;
                                    do
                                    {
                                      LOBYTE(a9) = *(unsigned char *)(v1248 + v1247);
                                      a9 = (float)LODWORD(a9);
                                      *uint64_t v1249 = a9;
                                      uint64_t v1249 = (float *)((char *)v1249 + v1245);
                                      v1248 += v1242;
                                      --v1250;
                                    }
                                    while (v1250);
                                  }
                                  v1247 += v1236;
                                  ++v1241;
                                  v1246 += v1238;
                                }
                                while (v1241 != v1237);
                              }
                              v1240 += v1230;
                              ++v1235;
                              v1239 += v1232;
                            }
                            while (v1235 != v1231);
                          }
                          v1234 += v1518;
                          ++v1229;
                          v1233 += v1503;
                        }
                        while (v1229 != v1535);
                      }
                      v1487 += v1427;
                      int v1228 = v1459 + 1;
                      v1471 += v1418;
                    }
                    while (v1459 + 1 != v1447);
                  }
                  uint64_t result = v1397 + v1377;
                }
                while (v1382 > v1397 + v1377);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<unsigned int,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, void *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = *(uint64_t **)a2;
  uint64_t v11 = (uint64_t *)a2;
  uint64_t v12 = result;
  switch(*(_DWORD *)(*(void *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v13 = v8[6];
          if (v13)
          {
            uint64_t v14 = (void *)v8[19];
            BOOL v15 = **(_DWORD **)(*(void *)v12 + 152) != 0;
            uint64_t result = (uint64_t)memset(v14, v15, v13);
          }
          break;
        case 1:
          uint64_t v37 = *(void *)(*(void *)result + 160);
          if (v37)
          {
            uint64_t v38 = *(int **)(*(void *)result + 152);
            uint64_t v39 = (BOOL *)v8[19];
            uint64_t v40 = 4 * v37;
            do
            {
              int v41 = *v38++;
              *v39++ = v41 != 0;
              v40 -= 4;
            }
            while (v40);
          }
          break;
        case 2:
          uint64_t v42 = *a7;
          uint64_t v43 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v44 = **a4;
              if ((int)v44 >= 1)
              {
                uint64_t v45 = (BOOL *)v8[19];
                uint64_t v46 = (_DWORD *)(*(void *)(v43 + 152) + 4 * v42);
                uint64_t v47 = 4 * **a5;
                do
                {
                  *v45++ = *v46 != 0;
                  uint64_t v46 = (_DWORD *)((char *)v46 + v47);
                  --v44;
                }
                while (v44);
              }
              break;
            case 2:
              int v193 = **a4;
              if (v193 >= 1)
              {
                int v194 = 0;
                uint64_t v195 = 0;
                uint64_t v196 = *(void *)(v43 + 152);
                uint64_t v197 = v8[19];
                uint64_t v198 = (*a4)[1];
                uint64_t v199 = (*a5)[1];
                uint64_t v200 = **a5 - v199 * v198;
                do
                {
                  int v201 = v198;
                  if ((int)v198 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(_DWORD *)(v196 + 4 * v42) != 0;
                      *(unsigned char *)(v197 + v195++) = result;
                      v42 += v199;
                      --v201;
                    }
                    while (v201);
                  }
                  v42 += v200;
                  ++v194;
                }
                while (v194 != v193);
              }
              break;
            case 3:
              int v202 = *a4;
              int v203 = **a4;
              if (v203 >= 1)
              {
                int v204 = 0;
                uint64_t result = 0;
                uint64_t v205 = *(void *)(v43 + 152);
                uint64_t v206 = v8[19];
                uint64_t v207 = v202[1];
                uint64_t v208 = *a5;
                uint64_t v209 = (*a5)[1];
                uint64_t v210 = **a5 - v209 * v207;
                do
                {
                  if ((int)v207 < 1)
                  {
                    uint64_t v217 = result;
                  }
                  else
                  {
                    int v211 = 0;
                    uint64_t v212 = v202[2];
                    uint64_t v213 = *a5;
                    uint64_t v214 = v209 - v208[2] * v212;
                    do
                    {
                      if ((int)v212 < 1)
                      {
                        uint64_t v217 = result;
                      }
                      else
                      {
                        uint64_t v215 = v213[2];
                        int v216 = v212;
                        do
                        {
                          uint64_t v217 = result + 1;
                          *(unsigned char *)(v206 + result) = *(_DWORD *)(v205 + 4 * v42) != 0;
                          v42 += v215;
                          ++result;
                          --v216;
                        }
                        while (v216);
                      }
                      v42 += v214;
                      ++v211;
                      uint64_t result = v217;
                    }
                    while (v211 != v207);
                  }
                  v42 += v210;
                  ++v204;
                  uint64_t result = v217;
                }
                while (v204 != v203);
              }
              break;
            case 4:
              int v218 = *a4;
              int v219 = **a4;
              if (v219 >= 1)
              {
                int v220 = 0;
                uint64_t result = 0;
                uint64_t v221 = *(void *)(v43 + 152);
                uint64_t v222 = v8[19];
                uint64_t v223 = v218[1];
                uint64_t v224 = *a5;
                uint64_t v225 = (*a5)[1];
                uint64_t v226 = **a5 - v225 * v223;
                do
                {
                  if ((int)v223 < 1)
                  {
                    uint64_t v237 = result;
                  }
                  else
                  {
                    int v227 = 0;
                    uint64_t v228 = v218[2];
                    unint64_t v229 = *a5;
                    uint64_t v230 = v225 - v224[2] * v228;
                    do
                    {
                      if ((int)v228 < 1)
                      {
                        uint64_t v237 = result;
                      }
                      else
                      {
                        int v231 = 0;
                        uint64_t v232 = v218[3];
                        unint64_t v233 = *a5;
                        uint64_t v234 = v229[2] - v229[3] * v232;
                        do
                        {
                          if ((int)v232 < 1)
                          {
                            uint64_t v237 = result;
                          }
                          else
                          {
                            uint64_t v235 = v233[3];
                            int v236 = v232;
                            do
                            {
                              uint64_t v237 = result + 1;
                              *(unsigned char *)(v222 + result) = *(_DWORD *)(v221 + 4 * v42) != 0;
                              v42 += v235;
                              ++result;
                              --v236;
                            }
                            while (v236);
                          }
                          v42 += v234;
                          ++v231;
                          uint64_t result = v237;
                        }
                        while (v231 != v228);
                      }
                      v42 += v230;
                      ++v227;
                      uint64_t result = v237;
                    }
                    while (v227 != v223);
                  }
                  v42 += v226;
                  ++v220;
                  uint64_t result = v237;
                }
                while (v220 != v219);
              }
              break;
            default:
              uint64_t v183 = v8[6];
              if (v183)
              {
                uint64_t v184 = 0;
                uint64_t v185 = *(void *)(v43 + 152) + 4 * v42;
                uint64_t v186 = v8[19];
                uint64_t v187 = *a4;
                uint64_t v188 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v189 = *a5;
                do
                {
                  uint64_t v190 = 0;
                  if ((v188 & 0x80000000) == 0)
                  {
                    uint64_t v191 = v188;
                    LODWORD(result) = v184;
                    do
                    {
                      ldiv_t v192 = ldiv((int)result, v187[v191]);
                      uint64_t result = v192.quot;
                      v190 += v189[v191--] * v192.rem;
                    }
                    while (v191 != -1);
                  }
                  *(unsigned char *)(v186 + v184++) = *(_DWORD *)(v185 + 4 * v190) != 0;
                }
                while (v184 != v183);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1437 = *a7;
          uint64_t v48 = *a8;
          uint64_t v49 = *(void **)result;
          uint64_t v50 = v49[1] - *v49;
          switch(v50 >> 2)
          {
            case 1:
              uint64_t v51 = (v50 << 30) - 0x100000000;
              int v52 = *(int *)((char *)*a4 + (v51 >> 30));
              if (v52 >= 1)
              {
                uint64_t v53 = v51 >> 29;
                uint64_t v54 = *(uint64_t *)((char *)*a5 + v53);
                uint64_t v55 = *(void *)(*a6 + v53);
                uint64_t v56 = (BOOL *)(v8[19] + v48);
                uint64_t v57 = (_DWORD *)(v49[19] + 4 * v1437);
                uint64_t v58 = 4 * v54;
                do
                {
                  *uint64_t v56 = *v57 != 0;
                  v56 += v55;
                  uint64_t v57 = (_DWORD *)((char *)v57 + v58);
                  --v52;
                }
                while (v52);
              }
              break;
            case 2:
              uint64_t v578 = (v50 << 30) - 0x200000000;
              int v579 = *(int *)((char *)*a4 + (v578 >> 30));
              if (v579 >= 1)
              {
                int v580 = 0;
                uint64_t v581 = v578 >> 29;
                uint64_t v582 = *(uint64_t *)((char *)*a5 + v581);
                uint64_t v583 = *(void *)(*a6 + v581);
                uint64_t v584 = (v50 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v584 >> 29));
                uint64_t v585 = *(void *)(*a6 + (v584 >> 29));
                int v586 = *(int *)((char *)*a4 + (v584 >> 30));
                uint64_t v587 = 4 * v1437;
                uint64_t v588 = 4 * v582;
                uint64_t v589 = 4 * result;
                do
                {
                  if (v586 >= 1)
                  {
                    uint64_t v590 = v8[19];
                    uint64_t result = v49[19] + v587;
                    int v591 = v586;
                    do
                    {
                      *(unsigned char *)(v590 + v48) = *(_DWORD *)result != 0;
                      v590 += v585;
                      result += v589;
                      --v591;
                    }
                    while (v591);
                  }
                  v48 += v583;
                  ++v580;
                  v587 += v588;
                }
                while (v580 != v579);
              }
              break;
            case 3:
              uint64_t v592 = (v50 << 30) - 0x300000000;
              uint64_t v593 = *a4;
              int v594 = *(int *)((char *)*a4 + (v592 >> 30));
              if (v594 >= 1)
              {
                int v595 = 0;
                uint64_t v596 = v50 << 30;
                int v597 = *a5;
                uint64_t v598 = v592 >> 29;
                uint64_t v599 = *(uint64_t *)((char *)*a5 + (v592 >> 29));
                uint64_t v600 = *a6;
                uint64_t v601 = *(void *)(*a6 + v598);
                uint64_t v602 = v596 - 0x200000000;
                uint64_t v603 = (v596 - 0x200000000) >> 29;
                uint64_t v604 = v596 - 0x100000000;
                uint64_t v605 = *(uint64_t *)((char *)*a5 + v603);
                uint64_t v606 = *(void *)(*a6 + v603);
                int v607 = *(int *)((char *)v593 + (v602 >> 30));
                uint64_t v608 = v604 >> 32;
                uint64_t v609 = 4 * v1437;
                uint64_t result = 4 * v599;
                uint64_t v610 = 4 * v605;
                do
                {
                  if (v607 >= 1)
                  {
                    int v611 = 0;
                    uint64_t v612 = *(void *)(v600 + 8 * v608);
                    int v613 = v593[v608];
                    uint64_t v614 = (void *)*v11;
                    uint64_t v615 = 4 * v597[v608];
                    uint64_t v616 = v609;
                    uint64_t v617 = v48;
                    do
                    {
                      if (v613 >= 1)
                      {
                        uint64_t v618 = v614[19];
                        uint64_t v619 = (_DWORD *)(v49[19] + v616);
                        int v620 = v613;
                        do
                        {
                          *(unsigned char *)(v618 + v617) = *v619 != 0;
                          v618 += v612;
                          uint64_t v619 = (_DWORD *)((char *)v619 + v615);
                          --v620;
                        }
                        while (v620);
                      }
                      v617 += v606;
                      ++v611;
                      v616 += v610;
                    }
                    while (v611 != v607);
                  }
                  v48 += v601;
                  ++v595;
                  v609 += result;
                }
                while (v595 != v594);
              }
              break;
            case 4:
              uint64_t v621 = (v50 << 30) - 0x400000000;
              uint64_t v622 = *a4;
              int v1579 = *(int *)((char *)*a4 + (v621 >> 30));
              if (v1579 >= 1)
              {
                int v623 = 0;
                uint64_t v624 = v50 << 30;
                uint64_t v625 = *a5;
                uint64_t v626 = v621 >> 29;
                uint64_t v627 = *(uint64_t *)((char *)*a5 + v626);
                uint64_t v628 = *a6;
                uint64_t v1561 = *(void *)(*a6 + v626);
                uint64_t v629 = (v50 << 30) - 0x300000000;
                uint64_t v630 = *(void *)(*a6 + (v629 >> 29));
                int v631 = *(int *)((char *)v622 + (v629 >> 30));
                uint64_t v1528 = (v624 - 0x200000000) >> 32;
                uint64_t v632 = (v624 - 0x100000000) >> 32;
                uint64_t result = 4 * v1437;
                uint64_t v633 = 4 * *(uint64_t *)((char *)*a5 + (v629 >> 29));
                do
                {
                  uint64_t v634 = v48;
                  if (v631 >= 1)
                  {
                    int v635 = 0;
                    uint64_t v636 = *(void *)(v628 + 8 * v1528);
                    int v637 = v622[v1528];
                    uint64_t v638 = 4 * v625[v1528];
                    uint64_t v639 = result;
                    uint64_t v640 = v48;
                    do
                    {
                      if (v637 >= 1)
                      {
                        int v641 = 0;
                        uint64_t v642 = *(void *)(v628 + 8 * v632);
                        int v643 = v622[v632];
                        uint64_t v644 = *v11;
                        uint64_t v645 = 4 * v625[v632];
                        uint64_t v646 = v639;
                        uint64_t v647 = v640;
                        do
                        {
                          if (v643 >= 1)
                          {
                            uint64_t v648 = *(void *)(v644 + 152);
                            int v649 = (_DWORD *)(v49[19] + v646);
                            int v650 = v643;
                            do
                            {
                              *(unsigned char *)(v648 + v647) = *v649 != 0;
                              v648 += v642;
                              int v649 = (_DWORD *)((char *)v649 + v645);
                              --v650;
                            }
                            while (v650);
                          }
                          v647 += v636;
                          ++v641;
                          v646 += v638;
                        }
                        while (v641 != v637);
                      }
                      v640 += v630;
                      ++v635;
                      v639 += v633;
                    }
                    while (v635 != v631);
                  }
                  uint64_t v48 = v634 + v1561;
                  ++v623;
                  result += 4 * v627;
                }
                while (v623 != v1579);
              }
              break;
            case 5:
              uint64_t v651 = (v50 << 30) - 0x500000000;
              uint64_t v652 = *a4;
              int v1493 = *(int *)((char *)*a4 + (v651 >> 30));
              if (v1493 >= 1)
              {
                int v1503 = 0;
                int v653 = *a5;
                uint64_t v654 = v651 >> 29;
                uint64_t v655 = *a6;
                uint64_t v1483 = *(void *)(*a6 + v654);
                uint64_t v656 = (v50 << 30) - 0x400000000;
                uint64_t v1562 = *(void *)(*a6 + (v656 >> 29));
                int v1580 = *(int *)((char *)v652 + (v656 >> 30));
                uint64_t v1463 = ((v50 << 30) - 0x300000000) >> 32;
                uint64_t v1529 = ((v50 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v50 << 30) - 0x100000000) >> 32;
                uint64_t v1515 = 4 * v1437;
                uint64_t v1473 = 4 * *(uint64_t *)((char *)*a5 + v654);
                uint64_t v1544 = 4 * *(uint64_t *)((char *)*a5 + (v656 >> 29));
                do
                {
                  uint64_t v1448 = v48;
                  if (v1580 >= 1)
                  {
                    int v657 = 0;
                    uint64_t v658 = *(void *)(v655 + 8 * v1463);
                    int v659 = v652[v1463];
                    uint64_t v660 = 4 * v653[v1463];
                    uint64_t v661 = v1515;
                    uint64_t v662 = v48;
                    do
                    {
                      if (v659 >= 1)
                      {
                        int v663 = 0;
                        uint64_t v664 = *(void *)(v655 + 8 * v1529);
                        int v665 = v652[v1529];
                        uint64_t v666 = 4 * v653[v1529];
                        uint64_t v667 = v661;
                        uint64_t v668 = v662;
                        do
                        {
                          if (v665 >= 1)
                          {
                            int v669 = 0;
                            uint64_t v670 = *(void *)(v655 + 8 * result);
                            int v671 = v652[result];
                            uint64_t v672 = *v11;
                            uint64_t v673 = 4 * v653[result];
                            uint64_t v674 = v667;
                            uint64_t v675 = v668;
                            do
                            {
                              if (v671 >= 1)
                              {
                                uint64_t v676 = *(void *)(v672 + 152);
                                uint64_t v677 = (_DWORD *)(v49[19] + v674);
                                int v678 = v671;
                                do
                                {
                                  *(unsigned char *)(v676 + v675) = *v677 != 0;
                                  v676 += v670;
                                  uint64_t v677 = (_DWORD *)((char *)v677 + v673);
                                  --v678;
                                }
                                while (v678);
                              }
                              v675 += v664;
                              ++v669;
                              v674 += v666;
                            }
                            while (v669 != v665);
                          }
                          v668 += v658;
                          ++v663;
                          v667 += v660;
                        }
                        while (v663 != v659);
                      }
                      v662 += v1562;
                      ++v657;
                      v661 += v1544;
                    }
                    while (v657 != v1580);
                  }
                  uint64_t v48 = v1448 + v1483;
                  v1515 += v1473;
                  ++v1503;
                }
                while (v1503 != v1493);
              }
              break;
            default:
              uint64_t v541 = (char *)a4[1];
              LODWORD(v542) = 1;
              uint64_t v543 = -20;
              do
              {
                uint64_t v542 = *(int *)&v541[v543] * (uint64_t)(int)v542;
                v543 += 4;
              }
              while (v543);
              unint64_t v1435 = v49[6];
              if (v1435)
              {
                uint64_t v544 = 0;
                uint64_t v545 = (v50 << 30) - 0x500000000;
                ldiv_t v546 = *a4;
                uint64_t v1412 = *v8;
                uint64_t v1422 = ((unint64_t)(v541 - (char *)*a4) >> 2) - 1;
                int v547 = *a5;
                uint64_t v548 = *a6;
                uint64_t v1472 = *(void *)(*a6 + (v545 >> 29));
                int v1482 = *(int *)((char *)*a4 + (v545 >> 30));
                uint64_t v1417 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1408 = ((v50 << 30) - 0x400000000) >> 32;
                uint64_t v1454 = ((v50 << 30) - 0x300000000) >> 32;
                uint64_t v1527 = ((v50 << 30) - 0x200000000) >> 32;
                uint64_t v549 = ((v50 << 30) - 0x100000000) >> 32;
                uint64_t v1462 = 4 * *(uint64_t *)((char *)*a5 + (v545 >> 29));
                uint64_t v1447 = *a8;
                uint64_t v1427 = v542;
                do
                {
                  uint64_t v550 = v1422;
                  if ((v1422 & 0x80000000) != 0)
                  {
                    uint64_t v551 = 0;
                    uint64_t v552 = v1417;
                  }
                  else
                  {
                    uint64_t v551 = 0;
                    LODWORD(result) = v544;
                    uint64_t v552 = v1417;
                    do
                    {
                      ldiv_t v553 = ldiv((int)result, v546[v550]);
                      uint64_t result = v553.quot;
                      v551 += v547[v550--] * v553.rem;
                    }
                    while (v550 != -1);
                  }
                  uint64_t v1443 = v544;
                  uint64_t v554 = 0;
                  if ((v552 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v544;
                    do
                    {
                      ldiv_t v555 = ldiv((int)result, *(int *)(v1412 + 4 * v552));
                      uint64_t result = v555.quot;
                      v554 += *(void *)(v548 + 8 * v552--) * v555.rem;
                    }
                    while (v552 != -1);
                  }
                  if (v1482 >= 1)
                  {
                    int v556 = 0;
                    uint64_t v1560 = *(void *)(v548 + 8 * v1408);
                    int v1578 = v546[v1408];
                    uint64_t v1502 = 4 * (v551 + v1437);
                    uint64_t v1514 = v554 + v1447;
                    uint64_t v1543 = 4 * v547[v1408];
                    do
                    {
                      int v1492 = v556;
                      if (v1578 >= 1)
                      {
                        int v557 = 0;
                        uint64_t v558 = *(void *)(v548 + 8 * v1454);
                        int v559 = v546[v1454];
                        uint64_t v560 = 4 * v547[v1454];
                        uint64_t v562 = v1502;
                        uint64_t v561 = v1514;
                        do
                        {
                          if (v559 >= 1)
                          {
                            int v563 = 0;
                            uint64_t v564 = *(void *)(v548 + 8 * v1527);
                            int v565 = v546[v1527];
                            uint64_t v566 = 4 * v547[v1527];
                            uint64_t result = v562;
                            uint64_t v567 = v561;
                            do
                            {
                              if (v565 >= 1)
                              {
                                int v568 = 0;
                                uint64_t v569 = *(void *)(v548 + 8 * v549);
                                int v570 = v546[v549];
                                uint64_t v571 = *v11;
                                uint64_t v572 = 4 * v547[v549];
                                uint64_t v573 = result;
                                uint64_t v574 = v567;
                                do
                                {
                                  if (v570 >= 1)
                                  {
                                    uint64_t v575 = *(void *)(v571 + 152);
                                    uint64_t v576 = (_DWORD *)(v49[19] + v573);
                                    int v577 = v570;
                                    do
                                    {
                                      *(unsigned char *)(v575 + v574) = *v576 != 0;
                                      v575 += v569;
                                      uint64_t v576 = (_DWORD *)((char *)v576 + v572);
                                      --v577;
                                    }
                                    while (v577);
                                  }
                                  v574 += v564;
                                  ++v568;
                                  v573 += v566;
                                }
                                while (v568 != v565);
                              }
                              v567 += v558;
                              ++v563;
                              result += v560;
                            }
                            while (v563 != v559);
                          }
                          v561 += v1560;
                          ++v557;
                          v562 += v1543;
                        }
                        while (v557 != v1578);
                      }
                      v1514 += v1472;
                      int v556 = v1492 + 1;
                      v1502 += v1462;
                    }
                    while (v1492 + 1 != v1482);
                  }
                  v544 += v1427;
                }
                while (v1435 > v1443 + v1427);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v16 = 0;
            int v17 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v18 = v8[19];
            do
              *(unsigned char *)(v18 + v16++) = v17;
            while (*(void *)(*(void *)a2 + 48) > v16);
          }
          break;
        case 1:
          uint64_t v59 = *(void *)(*(void *)result + 160);
          if (v59)
          {
            uint64_t v60 = *(int **)(*(void *)result + 152);
            uint64_t v61 = (unsigned char *)v8[19];
            uint64_t v62 = 4 * v59;
            do
            {
              int v63 = *v60++;
              *v61++ = v63;
              v62 -= 4;
            }
            while (v62);
          }
          break;
        case 2:
          uint64_t v64 = *a7;
          uint64_t v65 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v66 = 0;
                uint64_t v67 = *(void *)(v65 + 152);
                uint64_t v68 = v8[19];
                do
                {
                  *(unsigned char *)(v68 + v66) = *(_DWORD *)(v67 + 4 * v64);
                  v64 += **a5;
                  ++v66;
                }
                while (**a4 > (int)v66);
              }
              break;
            case 2:
              int v247 = *a4;
              int v248 = **a4;
              if (v248 >= 1)
              {
                int v249 = 0;
                uint64_t v250 = 0;
                uint64_t v251 = *(void *)(v65 + 152);
                uint64_t v252 = v8[19];
                do
                {
                  int v253 = v247[1];
                  if (v253 < 1)
                  {
                    uint64_t v254 = *a5;
                    uint64_t v255 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v252 + v250 + result) = *(_DWORD *)(v251 + 4 * v64);
                      uint64_t v254 = *a5;
                      uint64_t v255 = (*a5)[1];
                      v64 += v255;
                      int v247 = *a4;
                      int v253 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v253);
                    int v248 = *v247;
                    v250 += result;
                  }
                  uint64_t v64 = *v254 + v64 - v255 * v253;
                  ++v249;
                }
                while (v249 < v248);
              }
              break;
            case 3:
              uint64_t v256 = *a4;
              int v257 = **a4;
              if (v257 >= 1)
              {
                int v258 = 0;
                uint64_t v259 = 0;
                uint64_t v260 = *(void *)(v65 + 152);
                uint64_t v261 = v8[19];
                do
                {
                  int v262 = v256[1];
                  if (v262 < 1)
                  {
                    int v266 = *a5;
                    uint64_t v267 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v262; ++i)
                    {
                      int v264 = v256[2];
                      if (v264 < 1)
                      {
                        int v266 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v265 = 0;
                        do
                        {
                          *(unsigned char *)(v261 + v259 + v265) = *(_DWORD *)(v260 + 4 * v64);
                          int v266 = *a5;
                          uint64_t result = (*a5)[2];
                          v64 += result;
                          uint64_t v256 = *a4;
                          int v264 = (*a4)[2];
                          ++v265;
                        }
                        while ((int)v265 < v264);
                        v259 += v265;
                      }
                      uint64_t v267 = v266[1];
                      uint64_t v64 = v267 + v64 - result * v264;
                      int v262 = v256[1];
                    }
                    int v257 = *v256;
                  }
                  uint64_t v64 = *v266 + v64 - v267 * v262;
                  ++v258;
                }
                while (v258 < v257);
              }
              break;
            case 4:
              uint64_t v268 = *a4;
              int v269 = **a4;
              if (v269 >= 1)
              {
                int v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = *(void *)(v65 + 152);
                uint64_t v273 = v8[19];
                do
                {
                  int v274 = v268[1];
                  if (v274 < 1)
                  {
                    uint64_t v280 = *a5;
                    uint64_t v282 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v274; ++j)
                    {
                      int v276 = v268[2];
                      if (v276 < 1)
                      {
                        uint64_t v280 = *a5;
                        uint64_t v281 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v276; ++k)
                        {
                          int v278 = v268[3];
                          if (v278 < 1)
                          {
                            uint64_t v280 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v279 = 0;
                            do
                            {
                              *(unsigned char *)(v273 + v271 + v279) = *(_DWORD *)(v272 + 4 * v64);
                              uint64_t v280 = *a5;
                              uint64_t result = (*a5)[3];
                              v64 += result;
                              uint64_t v268 = *a4;
                              int v278 = (*a4)[3];
                              ++v279;
                            }
                            while ((int)v279 < v278);
                            v271 += v279;
                          }
                          uint64_t v281 = v280[2];
                          uint64_t v64 = v281 + v64 - result * v278;
                          int v276 = v268[2];
                        }
                      }
                      uint64_t v282 = v280[1];
                      uint64_t v64 = v282 + v64 - v281 * v276;
                      int v274 = v268[1];
                    }
                    int v269 = *v268;
                  }
                  uint64_t v64 = *v280 + v64 - v282 * v274;
                  ++v270;
                }
                while (v270 < v269);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v238 = 0;
                uint64_t v239 = *(void *)(v65 + 152) + 4 * v64;
                uint64_t v240 = v8[19];
                do
                {
                  uint64_t v241 = *a4;
                  unint64_t v242 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v243 = 0;
                  uint64_t v244 = (v242 - 1);
                  if ((int)v242 - 1 >= 0)
                  {
                    uint64_t v245 = *a5;
                    LODWORD(result) = v238;
                    do
                    {
                      ldiv_t v246 = ldiv((int)result, v241[v244]);
                      uint64_t result = v246.quot;
                      v243 += v245[v244--] * v246.rem;
                    }
                    while (v244 != -1);
                  }
                  *(unsigned char *)(v240 + v238++) = *(_DWORD *)(v239 + 4 * v243);
                }
                while (v238 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1576 = *a7;
          uint64_t v69 = *a8;
          int v70 = *(void **)result;
          uint64_t v71 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v71 >> 2)
          {
            case 1:
              uint64_t v72 = (v71 << 30) - 0x100000000;
              int v73 = *(int *)((char *)*a4 + (v72 >> 30));
              if (v73 >= 1)
              {
                uint64_t v74 = v72 >> 29;
                uint64_t v75 = *(uint64_t *)((char *)*a5 + v74);
                uint64_t v76 = *(void *)(*a6 + v74);
                uint64_t v77 = (unsigned char *)(v8[19] + v69);
                uint64_t v78 = (_DWORD *)(v70[19] + 4 * v1576);
                uint64_t v79 = 4 * v75;
                do
                {
                  *uint64_t v77 = *v78;
                  v77 += v76;
                  uint64_t v78 = (_DWORD *)((char *)v78 + v79);
                  --v73;
                }
                while (v73);
              }
              break;
            case 2:
              uint64_t v701 = (v71 << 30) - 0x200000000;
              int v702 = *(int *)((char *)*a4 + (v701 >> 30));
              if (v702 >= 1)
              {
                int v703 = 0;
                uint64_t v704 = v701 >> 29;
                uint64_t v705 = *(uint64_t *)((char *)*a5 + v704);
                uint64_t v706 = *(void *)(*a6 + v704);
                uint64_t v707 = 4 * v1576;
                uint64_t v708 = 4 * v705;
                do
                {
                  uint64_t v709 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v710 = *(int *)((char *)*a4 + (v709 >> 30));
                  if (v710 >= 1)
                  {
                    uint64_t v711 = v709 >> 29;
                    uint64_t v712 = *(uint64_t *)((char *)*a5 + v711);
                    uint64_t v713 = *(void *)(*a6 + v711);
                    uint64_t v714 = *(void *)(*(void *)a2 + 152);
                    uint64_t v715 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v707);
                    uint64_t result = 4 * v712;
                    do
                    {
                      *(unsigned char *)(v714 + v69) = *v715;
                      v714 += v713;
                      uint64_t v715 = (_DWORD *)((char *)v715 + result);
                      --v710;
                    }
                    while (v710);
                  }
                  v69 += v706;
                  ++v703;
                  v707 += v708;
                }
                while (v703 != v702);
              }
              break;
            case 3:
              uint64_t v716 = (v71 << 30) - 0x300000000;
              int v717 = *(int *)((char *)*a4 + (v716 >> 30));
              if (v717 >= 1)
              {
                int v718 = 0;
                uint64_t v719 = v716 >> 29;
                uint64_t v720 = *(uint64_t *)((char *)*a5 + v719);
                uint64_t v721 = *(void *)(*a6 + v719);
                uint64_t v722 = 4 * v1576;
                uint64_t v723 = 4 * v720;
                do
                {
                  uint64_t v724 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v725 = *(int *)((char *)*a4 + (v724 >> 30));
                  if (v725 >= 1)
                  {
                    int v726 = 0;
                    uint64_t v727 = v724 >> 29;
                    uint64_t v728 = *(uint64_t *)((char *)*a5 + v727);
                    uint64_t v729 = *(void *)(*a6 + v727);
                    uint64_t result = 4 * v728;
                    uint64_t v730 = v722;
                    uint64_t v731 = v69;
                    do
                    {
                      uint64_t v732 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v733 = *(int *)((char *)*a4 + (v732 >> 30));
                      if (v733 >= 1)
                      {
                        uint64_t v734 = v732 >> 29;
                        uint64_t v735 = *(uint64_t *)((char *)*a5 + v734);
                        uint64_t v736 = *(void *)(*a6 + v734);
                        uint64_t v737 = *(void *)(*v11 + 152);
                        uint64_t v738 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v730);
                        uint64_t v739 = 4 * v735;
                        do
                        {
                          *(unsigned char *)(v737 + v731) = *v738;
                          v737 += v736;
                          uint64_t v738 = (_DWORD *)((char *)v738 + v739);
                          --v733;
                        }
                        while (v733);
                      }
                      v731 += v729;
                      ++v726;
                      v730 += result;
                    }
                    while (v726 != v725);
                  }
                  v69 += v721;
                  ++v718;
                  v722 += v723;
                }
                while (v718 != v717);
              }
              break;
            case 4:
              uint64_t v740 = a4;
              ldiv_t v741 = a5;
              uint64_t v742 = a6;
              uint64_t v743 = *a7;
              uint64_t v744 = *a8;
              goto LABEL_558;
            case 5:
              uint64_t v745 = (v71 << 30) - 0x500000000;
              int v746 = *(int *)((char *)*a4 + (v745 >> 30));
              if (v746 >= 1)
              {
                uint64_t v747 = v745 >> 29;
                uint64_t v748 = *(uint64_t *)((char *)*a5 + v747);
                uint64_t v749 = *(void *)(*a6 + v747);
                do
                {
                  v1576 += v748;
                  v69 += v749;
                  --v746;
                }
                while (v746);
              }
              break;
            default:
              LODWORD(v679) = 1;
              uint64_t v680 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v679 = a4[1][v680++] * (uint64_t)(int)v679;
              while (v680 * 4);
              if (v70[6])
              {
                uint64_t result = 0;
                uint64_t v1504 = *a8;
                uint64_t v1516 = v679;
                do
                {
                  int v681 = *a4;
                  unint64_t v682 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v683 = (v682 - 1);
                  int v1530 = v70;
                  uint64_t v1545 = result;
                  uint64_t v684 = 0;
                  if ((int)v682 - 1 >= 0)
                  {
                    uint64_t v685 = *a5;
                    do
                    {
                      ldiv_t v686 = ldiv((int)result, v681[v683]);
                      LODWORD(result) = v686.quot;
                      v684 += v685[v683--] * v686.rem;
                    }
                    while (v683 != -1);
                  }
                  uint64_t v687 = *(void *)*v11;
                  unint64_t v688 = (unint64_t)(*(void *)(*v11 + 8) - v687) >> 2;
                  uint64_t v689 = *a6;
                  uint64_t v690 = 0;
                  uint64_t v691 = (v688 - 1);
                  if ((int)v688 - 1 >= 0)
                  {
                    int quot = v1545;
                    do
                    {
                      ldiv_t v693 = ldiv(quot, *(int *)(v687 + 4 * v691));
                      int quot = v693.quot;
                      v690 += *(void *)(v689 + 8 * v691--) * v693.rem;
                    }
                    while (v691 != -1);
                  }
                  int v70 = v1530;
                  uint64_t v694 = ((v70[1] - *v70) << 30) - 0x500000000;
                  int v695 = *(int *)((char *)v681 + (v694 >> 30));
                  if (v695 >= 1)
                  {
                    uint64_t v696 = v684 + v1576;
                    uint64_t v697 = v694 >> 29;
                    uint64_t v698 = *(uint64_t *)((char *)*a5 + v697);
                    uint64_t v699 = *(void *)(v689 + v697);
                    uint64_t v700 = v690 + v1504;
                    do
                    {
                      v696 += v698;
                      v700 += v699;
                      --v695;
                    }
                    while (v695);
                    int v70 = *(void **)v12;
                  }
                  uint64_t result = v1545 + v1516;
                }
                while (v70[6] > (unint64_t)(v1545 + v1516));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v19 = v8[6];
          if (v19)
          {
            int v20 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v21 = (_DWORD *)v8[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v80 = *a7;
          uint64_t v81 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v82 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v83 = 0;
                uint64_t v84 = *(void *)(v81 + 152);
                uint64_t v85 = v8[19];
                uint64_t v86 = **a5;
                uint64_t v87 = (_DWORD *)(v84 + 4 * v80);
                do
                {
                  *(_DWORD *)(v85 + 4 * v83) = *v87;
                  v87 += v86;
                  ++v83;
                }
                while (*v82 > (int)v83);
              }
              break;
            case 2:
              uint64_t v293 = *a4;
              int v294 = **a4;
              if (v294 >= 1)
              {
                int v295 = 0;
                uint64_t v296 = 0;
                uint64_t v297 = *(void *)(v81 + 152);
                uint64_t v298 = v8[19];
                uint64_t v299 = **a5;
                uint64_t v300 = (*a5)[1];
                int v301 = v293[1];
                do
                {
                  if (v301 >= 1)
                  {
                    uint64_t v302 = 0;
                    do
                    {
                      *(_DWORD *)(v298 + 4 * v296 + 4 * v302) = *(_DWORD *)(v297 + 4 * v80);
                      v80 += v300;
                      int v301 = v293[1];
                      ++v302;
                    }
                    while ((int)v302 < v301);
                    int v294 = *v293;
                    v296 += v302;
                  }
                  uint64_t result = v301;
                  uint64_t v80 = v80 + v299 - v300 * v301;
                  ++v295;
                }
                while (v295 < v294);
              }
              break;
            case 3:
              int v303 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v304 = 0;
                uint64_t v305 = 0;
                uint64_t v306 = *(void *)(v81 + 152);
                uint64_t v307 = v8[19];
                uint64_t v308 = *a5;
                uint64_t v309 = **a5;
                uint64_t v310 = (*a5)[1];
                int v311 = v303[1];
                do
                {
                  if (v311 >= 1)
                  {
                    int v312 = 0;
                    uint64_t v313 = *a5;
                    uint64_t v314 = v308[2];
                    int v315 = v303[2];
                    do
                    {
                      if (v315 >= 1)
                      {
                        uint64_t v316 = 0;
                        uint64_t v317 = v313[2];
                        do
                        {
                          *(_DWORD *)(v307 + 4 * v305 + 4 * v316) = *(_DWORD *)(v306 + 4 * v80);
                          v80 += v317;
                          int v315 = v303[2];
                          ++v316;
                        }
                        while ((int)v316 < v315);
                        int v311 = v303[1];
                        v305 += v316;
                      }
                      uint64_t v80 = v80 + v310 - v314 * v315;
                      ++v312;
                    }
                    while (v312 < v311);
                    uint64_t result = *v303;
                  }
                  uint64_t v80 = v80 + v309 - v310 * v311;
                  ++v304;
                }
                while (v304 < (int)result);
              }
              break;
            case 4:
              int v318 = *a4;
              int v319 = **a4;
              if (v319 >= 1)
              {
                int v320 = 0;
                uint64_t v321 = 0;
                uint64_t v322 = *(void *)(v81 + 152);
                uint64_t v323 = v8[19];
                uint64_t v324 = *a5;
                uint64_t v325 = **a5;
                uint64_t v326 = (*a5)[1];
                int v327 = v318[1];
                do
                {
                  if (v327 >= 1)
                  {
                    int v328 = 0;
                    uint64_t v329 = *a5;
                    uint64_t v330 = v324[2];
                    int v331 = v318[2];
                    do
                    {
                      if (v331 >= 1)
                      {
                        int v332 = 0;
                        uint64_t v333 = *a5;
                        uint64_t v334 = v329[2];
                        uint64_t v335 = v329[3];
                        int v336 = v318[3];
                        do
                        {
                          if (v336 >= 1)
                          {
                            uint64_t v337 = 0;
                            uint64_t v338 = v333[3];
                            do
                            {
                              *(_DWORD *)(v323 + 4 * v321 + 4 * v337) = *(_DWORD *)(v322 + 4 * v80);
                              v80 += v338;
                              int v336 = v318[3];
                              ++v337;
                            }
                            while ((int)v337 < v336);
                            int v331 = v318[2];
                            v321 += v337;
                          }
                          uint64_t v80 = v80 + v334 - v335 * v336;
                          ++v332;
                        }
                        while (v332 < v331);
                        int v327 = v318[1];
                      }
                      uint64_t v80 = v80 + v326 - v330 * v331;
                      ++v328;
                    }
                    while (v328 < v327);
                    int v319 = *v318;
                  }
                  uint64_t result = v327;
                  uint64_t v80 = v80 + v325 - v326 * v327;
                  ++v320;
                }
                while (v320 < v319);
              }
              break;
            default:
              uint64_t v283 = v8[6];
              if (v283)
              {
                uint64_t v284 = 0;
                uint64_t v285 = *(void *)(v81 + 152) + 4 * v80;
                uint64_t v286 = v8[19];
                uint64_t v287 = *a4;
                uint64_t v288 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v289 = *a5;
                do
                {
                  uint64_t v290 = 0;
                  if ((v288 & 0x80000000) == 0)
                  {
                    uint64_t v291 = v288;
                    LODWORD(result) = v284;
                    do
                    {
                      ldiv_t v292 = ldiv((int)result, v287[v291]);
                      uint64_t result = v292.quot;
                      v290 += v289[v291--] * v292.rem;
                    }
                    while (v291 != -1);
                  }
                  *(_DWORD *)(v286 + 4 * v284++) = *(_DWORD *)(v285 + 4 * v290);
                }
                while (v284 != v283);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1432 = *a8;
          uint64_t v1438 = *a7;
          uint64_t v88 = *(void **)result;
          uint64_t v89 = v88[1] - *v88;
          switch(v89 >> 2)
          {
            case 1:
              uint64_t v90 = (v89 << 30) - 0x100000000;
              int v91 = *(int *)((char *)*a4 + (v90 >> 30));
              if (v91 >= 1)
              {
                uint64_t v92 = v90 >> 29;
                uint64_t v93 = *(uint64_t *)((char *)*a5 + v92);
                uint64_t v94 = *(void *)(*a6 + v92);
                uint64_t v95 = (_DWORD *)(v8[19] + 4 * v1432);
                uint64_t v96 = (_DWORD *)(v88[19] + 4 * v1438);
                uint64_t v97 = 4 * v94;
                uint64_t v98 = 4 * v93;
                do
                {
                  _DWORD *v95 = *v96;
                  uint64_t v95 = (_DWORD *)((char *)v95 + v97);
                  uint64_t v96 = (_DWORD *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              uint64_t v788 = (v89 << 30) - 0x200000000;
              uint64_t v789 = *a4;
              int v790 = *(int *)((char *)*a4 + (v788 >> 30));
              if (v790 >= 1)
              {
                int v791 = 0;
                uint64_t v792 = v788 >> 29;
                uint64_t v793 = *(uint64_t *)((char *)*a5 + v792);
                uint64_t v794 = *(void *)(*a6 + v792);
                uint64_t v795 = (v89 << 30) - 0x100000000;
                uint64_t v796 = *(uint64_t *)((char *)*a5 + (v795 >> 29));
                uint64_t v797 = *(void *)(*a6 + (v795 >> 29));
                uint64_t v798 = v795 >> 32;
                uint64_t v799 = 4 * v1432;
                uint64_t v800 = 4 * v794;
                uint64_t v801 = 4 * v797;
                uint64_t v802 = 4 * v1438;
                uint64_t v803 = 4 * v793;
                uint64_t result = 4 * v796;
                do
                {
                  int v804 = v789[v798];
                  if (v804 >= 1)
                  {
                    int v805 = (_DWORD *)(v8[19] + v799);
                    uint64_t v806 = (_DWORD *)(v88[19] + v802);
                    do
                    {
                      _DWORD *v805 = *v806;
                      int v805 = (_DWORD *)((char *)v805 + v801);
                      uint64_t v806 = (_DWORD *)((char *)v806 + result);
                      --v804;
                    }
                    while (v804);
                  }
                  ++v791;
                  v799 += v800;
                  v802 += v803;
                }
                while (v791 != v790);
              }
              break;
            case 3:
              uint64_t v807 = (v89 << 30) - 0x300000000;
              uint64_t v808 = *a4;
              int v809 = *(int *)((char *)*a4 + (v807 >> 30));
              if (v809 >= 1)
              {
                int v810 = 0;
                int v811 = *a5;
                uint64_t v812 = v807 >> 29;
                uint64_t v813 = *(uint64_t *)((char *)*a5 + (v807 >> 29));
                uint64_t v814 = *a6;
                uint64_t v815 = *(void *)(*a6 + v812);
                uint64_t v816 = v89 << 30;
                uint64_t v817 = (v89 << 30) - 0x200000000;
                uint64_t v818 = v817 >> 32;
                v817 >>= 29;
                uint64_t v819 = *(uint64_t *)((char *)*a5 + v817);
                uint64_t v820 = *(void *)(*a6 + v817);
                uint64_t v821 = (v816 - 0x100000000) >> 32;
                uint64_t v822 = 4 * v1432;
                uint64_t v823 = 4 * v815;
                uint64_t v824 = 4 * v820;
                uint64_t result = 4 * v1438;
                uint64_t v825 = 4 * v813;
                uint64_t v826 = 4 * v819;
                do
                {
                  int v827 = v808[v818];
                  if (v827 >= 1)
                  {
                    int v828 = 0;
                    uint64_t v829 = (void *)*v11;
                    uint64_t v830 = 4 * *(void *)(v814 + 8 * v821);
                    uint64_t v831 = 4 * v811[v821];
                    uint64_t v832 = result;
                    uint64_t v833 = v822;
                    do
                    {
                      int v834 = v808[v821];
                      if (v834 >= 1)
                      {
                        int v835 = (_DWORD *)(v829[19] + v833);
                        uint64_t v836 = (_DWORD *)(v88[19] + v832);
                        do
                        {
                          _DWORD *v835 = *v836;
                          int v835 = (_DWORD *)((char *)v835 + v830);
                          uint64_t v836 = (_DWORD *)((char *)v836 + v831);
                          --v834;
                        }
                        while (v834);
                      }
                      ++v828;
                      v833 += v824;
                      v832 += v826;
                    }
                    while (v828 != v827);
                  }
                  ++v810;
                  v822 += v823;
                  result += v825;
                }
                while (v810 != v809);
              }
              break;
            case 4:
              uint64_t v837 = (v89 << 30) - 0x400000000;
              uint64_t v838 = *a4;
              int v1582 = *(int *)((char *)*a4 + (v837 >> 30));
              if (v1582 >= 1)
              {
                int v839 = 0;
                uint64_t v840 = *a5;
                uint64_t v841 = v837 >> 29;
                uint64_t v842 = v89 << 30;
                uint64_t v843 = *a6;
                uint64_t v1564 = (v842 - 0x300000000) >> 32;
                uint64_t v844 = (v842 - 0x300000000) >> 29;
                uint64_t v845 = *(uint64_t *)((char *)*a5 + v844);
                uint64_t v846 = *(void *)(*a6 + v844);
                uint64_t v847 = (v842 - 0x200000000) >> 32;
                uint64_t v848 = (v842 - 0x100000000) >> 32;
                uint64_t v849 = 4 * v1432;
                uint64_t v1547 = 4 * *(void *)(*a6 + v841);
                uint64_t result = 4 * v846;
                uint64_t v850 = 4 * v1438;
                uint64_t v1532 = 4 * *(uint64_t *)((char *)*a5 + v841);
                uint64_t v851 = 4 * v845;
                do
                {
                  int v852 = v838[v1564];
                  if (v852 >= 1)
                  {
                    int v853 = 0;
                    uint64_t v854 = 4 * *(void *)(v843 + 8 * v847);
                    uint64_t v855 = 4 * v840[v847];
                    uint64_t v856 = v850;
                    uint64_t v857 = v849;
                    do
                    {
                      int v858 = v838[v847];
                      if (v858 >= 1)
                      {
                        int v859 = 0;
                        uint64_t v860 = (void *)*v11;
                        uint64_t v861 = 4 * *(void *)(v843 + 8 * v848);
                        uint64_t v862 = 4 * v840[v848];
                        uint64_t v863 = v856;
                        uint64_t v864 = v857;
                        do
                        {
                          int v865 = v838[v848];
                          if (v865 >= 1)
                          {
                            uint64_t v866 = (_DWORD *)(v860[19] + v864);
                            uint64_t v867 = (_DWORD *)(v88[19] + v863);
                            do
                            {
                              _DWORD *v866 = *v867;
                              uint64_t v866 = (_DWORD *)((char *)v866 + v861);
                              uint64_t v867 = (_DWORD *)((char *)v867 + v862);
                              --v865;
                            }
                            while (v865);
                          }
                          ++v859;
                          v864 += v854;
                          v863 += v855;
                        }
                        while (v859 != v858);
                      }
                      ++v853;
                      v857 += result;
                      v856 += v851;
                    }
                    while (v853 != v852);
                  }
                  ++v839;
                  v849 += v1547;
                  v850 += v1532;
                }
                while (v839 != v1582);
              }
              break;
            case 5:
              uint64_t v868 = (v89 << 30) - 0x500000000;
              uint64_t v869 = *a4;
              int v1485 = *(int *)((char *)*a4 + (v868 >> 30));
              if (v1485 >= 1)
              {
                int v1495 = 0;
                int v870 = *a5;
                uint64_t v871 = v868 >> 29;
                uint64_t v872 = *a6;
                uint64_t v873 = v89 << 30;
                uint64_t v874 = (v873 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v874);
                uint64_t v1475 = (v873 - 0x400000000) >> 32;
                uint64_t v875 = *(void *)(*a6 + v874);
                uint64_t v1565 = (v873 - 0x300000000) >> 32;
                uint64_t v876 = (v873 - 0x200000000) >> 32;
                uint64_t v877 = (v873 - 0x100000000) >> 32;
                uint64_t v1518 = 4 * v1432;
                uint64_t v1465 = 4 * *(void *)(*a6 + v871);
                uint64_t v1548 = 4 * v875;
                uint64_t v1506 = 4 * v1438;
                uint64_t v1456 = 4 * *(uint64_t *)((char *)*a5 + v871);
                uint64_t v1533 = 4 * result;
                do
                {
                  int v1583 = v869[v1475];
                  if (v1583 >= 1)
                  {
                    int v878 = 0;
                    uint64_t v879 = 4 * *(void *)(v872 + 8 * v1565);
                    uint64_t v880 = 4 * v870[v1565];
                    uint64_t v881 = v1506;
                    uint64_t v882 = v1518;
                    do
                    {
                      int v883 = v869[v1565];
                      if (v883 >= 1)
                      {
                        int v884 = 0;
                        uint64_t v885 = 4 * *(void *)(v872 + 8 * v876);
                        uint64_t v886 = 4 * v870[v876];
                        uint64_t v887 = v881;
                        uint64_t v888 = v882;
                        do
                        {
                          int v889 = v869[v876];
                          if (v889 >= 1)
                          {
                            int v890 = 0;
                            uint64_t result = *v11;
                            uint64_t v891 = 4 * *(void *)(v872 + 8 * v877);
                            uint64_t v892 = 4 * v870[v877];
                            uint64_t v893 = v887;
                            uint64_t v894 = v888;
                            do
                            {
                              int v895 = v869[v877];
                              if (v895 >= 1)
                              {
                                uint64_t v896 = (_DWORD *)(*(void *)(result + 152) + v894);
                                uint64_t v897 = (_DWORD *)(v88[19] + v893);
                                do
                                {
                                  *uint64_t v896 = *v897;
                                  uint64_t v896 = (_DWORD *)((char *)v896 + v891);
                                  uint64_t v897 = (_DWORD *)((char *)v897 + v892);
                                  --v895;
                                }
                                while (v895);
                              }
                              ++v890;
                              v894 += v885;
                              v893 += v886;
                            }
                            while (v890 != v889);
                          }
                          ++v884;
                          v888 += v879;
                          v887 += v880;
                        }
                        while (v884 != v883);
                      }
                      ++v878;
                      v882 += v1548;
                      v881 += v1533;
                    }
                    while (v878 != v1583);
                  }
                  v1518 += v1465;
                  v1506 += v1456;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              uint64_t v750 = (char *)a4[1];
              LODWORD(v751) = 1;
              uint64_t v752 = -20;
              do
              {
                uint64_t v751 = *(int *)&v750[v752] * (uint64_t)(int)v751;
                v752 += 4;
              }
              while (v752);
              unint64_t v1428 = v88[6];
              if (v1428)
              {
                uint64_t result = 0;
                uint64_t v753 = (v89 << 30) - 0x500000000;
                uint64_t v754 = *a4;
                uint64_t v1464 = *v8;
                uint64_t v755 = *a5;
                uint64_t v1413 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1418 = ((unint64_t)(v750 - (char *)*a4) >> 2) - 1;
                uint64_t v1409 = v753 >> 32;
                uint64_t v756 = *a6;
                uint64_t v1474 = ((v89 << 30) - 0x400000000) >> 32;
                uint64_t v1563 = ((v89 << 30) - 0x300000000) >> 32;
                uint64_t v757 = ((v89 << 30) - 0x200000000) >> 32;
                uint64_t v758 = ((v89 << 30) - 0x100000000) >> 32;
                uint64_t v1449 = 4 * *(uint64_t *)((char *)*a5 + (v753 >> 29));
                uint64_t v1455 = 4 * *(void *)(*a6 + (v753 >> 29));
                uint64_t v1423 = v751;
                do
                {
                  uint64_t v759 = v1418;
                  uint64_t v1444 = result;
                  uint64_t v760 = 0;
                  if ((v1418 & 0x80000000) != 0)
                  {
                    uint64_t v761 = v1413;
                  }
                  else
                  {
                    uint64_t v761 = v1413;
                    do
                    {
                      ldiv_t v762 = ldiv((int)result, v754[v759]);
                      LODWORD(result) = v762.quot;
                      v760 += v755[v759--] * v762.rem;
                    }
                    while (v759 != -1);
                  }
                  uint64_t v763 = 0;
                  if ((v761 & 0x80000000) == 0)
                  {
                    int v764 = v1444;
                    do
                    {
                      ldiv_t v765 = ldiv(v764, *(int *)(v1464 + 4 * v761));
                      int v764 = v765.quot;
                      v763 += *(void *)(v756 + 8 * v761--) * v765.rem;
                    }
                    while (v761 != -1);
                  }
                  int v1484 = v754[v1409];
                  if (v1484 >= 1)
                  {
                    int v766 = 0;
                    uint64_t v1517 = 4 * (v763 + v1432);
                    uint64_t v1546 = 4 * *(void *)(v756 + 8 * v1474);
                    uint64_t v1505 = 4 * (v760 + v1438);
                    uint64_t v1531 = 4 * v755[v1474];
                    do
                    {
                      int v1494 = v766;
                      int v1581 = v754[v1474];
                      if (v1581 >= 1)
                      {
                        int v767 = 0;
                        uint64_t v768 = 4 * *(void *)(v756 + 8 * v1563);
                        uint64_t v769 = 4 * v755[v1563];
                        uint64_t v771 = v1505;
                        uint64_t v770 = v1517;
                        do
                        {
                          int v772 = v754[v1563];
                          if (v772 >= 1)
                          {
                            int v773 = 0;
                            uint64_t v774 = 4 * *(void *)(v756 + 8 * v757);
                            uint64_t v775 = 4 * v755[v757];
                            uint64_t v776 = v771;
                            uint64_t v777 = v770;
                            do
                            {
                              int v778 = v754[v757];
                              if (v778 >= 1)
                              {
                                int v779 = 0;
                                uint64_t v780 = (void *)*v11;
                                uint64_t v781 = 4 * *(void *)(v756 + 8 * v758);
                                uint64_t v782 = 4 * v755[v758];
                                uint64_t v783 = v776;
                                uint64_t v784 = v777;
                                do
                                {
                                  int v785 = v754[v758];
                                  if (v785 >= 1)
                                  {
                                    int v786 = (_DWORD *)(v780[19] + v784);
                                    int v787 = (_DWORD *)(v88[19] + v783);
                                    do
                                    {
                                      *int v786 = *v787;
                                      int v786 = (_DWORD *)((char *)v786 + v781);
                                      int v787 = (_DWORD *)((char *)v787 + v782);
                                      --v785;
                                    }
                                    while (v785);
                                  }
                                  ++v779;
                                  v784 += v774;
                                  v783 += v775;
                                }
                                while (v779 != v778);
                              }
                              ++v773;
                              v777 += v768;
                              v776 += v769;
                            }
                            while (v773 != v772);
                          }
                          ++v767;
                          v770 += v1546;
                          v771 += v1531;
                        }
                        while (v767 != v1581);
                      }
                      int v766 = v1494 + 1;
                      v1517 += v1455;
                      v1505 += v1449;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  uint64_t result = v1444 + v1423;
                }
                while (v1428 > v1444 + v1423);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v22 = 0;
            int v23 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v24 = v8[19];
            do
              *(unsigned char *)(v24 + v22++) = v23;
            while (*(void *)(*(void *)a2 + 48) > v22);
          }
          break;
        case 1:
          uint64_t v99 = *(void *)(*(void *)result + 160);
          if (v99)
          {
            uint64_t v100 = *(int **)(*(void *)result + 152);
            uint64_t v101 = (unsigned char *)v8[19];
            uint64_t v102 = 4 * v99;
            do
            {
              int v103 = *v100++;
              *v101++ = v103;
              v102 -= 4;
            }
            while (v102);
          }
          break;
        case 2:
          uint64_t v104 = *a7;
          uint64_t v105 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = *(void *)(v105 + 152);
                uint64_t v108 = v8[19];
                do
                {
                  *(unsigned char *)(v108 + v106) = *(_DWORD *)(v107 + 4 * v104);
                  v104 += **a5;
                  ++v106;
                }
                while (**a4 > (int)v106);
              }
              break;
            case 2:
              int v348 = *a4;
              int v349 = **a4;
              if (v349 >= 1)
              {
                int v350 = 0;
                uint64_t v351 = 0;
                uint64_t v352 = *(void *)(v105 + 152);
                uint64_t v353 = v8[19];
                do
                {
                  int v354 = v348[1];
                  if (v354 < 1)
                  {
                    uint64_t v355 = *a5;
                    uint64_t v356 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v353 + v351 + result) = *(_DWORD *)(v352 + 4 * v104);
                      uint64_t v355 = *a5;
                      uint64_t v356 = (*a5)[1];
                      v104 += v356;
                      int v348 = *a4;
                      int v354 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v354);
                    int v349 = *v348;
                    v351 += result;
                  }
                  uint64_t v104 = *v355 + v104 - v356 * v354;
                  ++v350;
                }
                while (v350 < v349);
              }
              break;
            case 3:
              uint64_t v357 = *a4;
              int v358 = **a4;
              if (v358 >= 1)
              {
                int v359 = 0;
                uint64_t v360 = 0;
                uint64_t v361 = *(void *)(v105 + 152);
                uint64_t v362 = v8[19];
                do
                {
                  int v363 = v357[1];
                  if (v363 < 1)
                  {
                    int v367 = *a5;
                    uint64_t v368 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v363; ++m)
                    {
                      int v365 = v357[2];
                      if (v365 < 1)
                      {
                        int v367 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v366 = 0;
                        do
                        {
                          *(unsigned char *)(v362 + v360 + v366) = *(_DWORD *)(v361 + 4 * v104);
                          int v367 = *a5;
                          uint64_t result = (*a5)[2];
                          v104 += result;
                          uint64_t v357 = *a4;
                          int v365 = (*a4)[2];
                          ++v366;
                        }
                        while ((int)v366 < v365);
                        v360 += v366;
                      }
                      uint64_t v368 = v367[1];
                      uint64_t v104 = v368 + v104 - result * v365;
                      int v363 = v357[1];
                    }
                    int v358 = *v357;
                  }
                  uint64_t v104 = *v367 + v104 - v368 * v363;
                  ++v359;
                }
                while (v359 < v358);
              }
              break;
            case 4:
              uint64_t v369 = *a4;
              int v370 = **a4;
              if (v370 >= 1)
              {
                int v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = *(void *)(v105 + 152);
                uint64_t v374 = v8[19];
                do
                {
                  int v375 = v369[1];
                  if (v375 < 1)
                  {
                    uint64_t v381 = *a5;
                    uint64_t v383 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v375; ++n)
                    {
                      int v377 = v369[2];
                      if (v377 < 1)
                      {
                        uint64_t v381 = *a5;
                        uint64_t v382 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v377; ++ii)
                        {
                          int v379 = v369[3];
                          if (v379 < 1)
                          {
                            uint64_t v381 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v380 = 0;
                            do
                            {
                              *(unsigned char *)(v374 + v372 + v380) = *(_DWORD *)(v373 + 4 * v104);
                              uint64_t v381 = *a5;
                              uint64_t result = (*a5)[3];
                              v104 += result;
                              uint64_t v369 = *a4;
                              int v379 = (*a4)[3];
                              ++v380;
                            }
                            while ((int)v380 < v379);
                            v372 += v380;
                          }
                          uint64_t v382 = v381[2];
                          uint64_t v104 = v382 + v104 - result * v379;
                          int v377 = v369[2];
                        }
                      }
                      uint64_t v383 = v381[1];
                      uint64_t v104 = v383 + v104 - v382 * v377;
                      int v375 = v369[1];
                    }
                    int v370 = *v369;
                  }
                  uint64_t v104 = *v381 + v104 - v383 * v375;
                  ++v371;
                }
                while (v371 < v370);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v339 = 0;
                uint64_t v340 = *(void *)(v105 + 152) + 4 * v104;
                uint64_t v341 = v8[19];
                do
                {
                  uint64_t v342 = *a4;
                  unint64_t v343 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v344 = 0;
                  uint64_t v345 = (v343 - 1);
                  if ((int)v343 - 1 >= 0)
                  {
                    uint64_t v346 = *a5;
                    LODWORD(result) = v339;
                    do
                    {
                      ldiv_t v347 = ldiv((int)result, v342[v345]);
                      uint64_t result = v347.quot;
                      v344 += v346[v345--] * v347.rem;
                    }
                    while (v345 != -1);
                  }
                  *(unsigned char *)(v341 + v339++) = *(_DWORD *)(v340 + 4 * v344);
                }
                while (v339 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1577 = *a7;
          uint64_t v109 = *a8;
          uint64_t v110 = *(void **)result;
          uint64_t v111 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v111 >> 2)
          {
            case 1:
              uint64_t v112 = (v111 << 30) - 0x100000000;
              int v113 = *(int *)((char *)*a4 + (v112 >> 30));
              if (v113 >= 1)
              {
                uint64_t v114 = v112 >> 29;
                uint64_t v115 = *(uint64_t *)((char *)*a5 + v114);
                uint64_t v116 = *(void *)(*a6 + v114);
                uint64_t v117 = (unsigned char *)(v8[19] + v109);
                uint64_t v118 = (_DWORD *)(v110[19] + 4 * v1577);
                uint64_t v119 = 4 * v115;
                do
                {
                  *uint64_t v117 = *v118;
                  v117 += v116;
                  uint64_t v118 = (_DWORD *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              uint64_t v920 = (v111 << 30) - 0x200000000;
              int v921 = *(int *)((char *)*a4 + (v920 >> 30));
              if (v921 >= 1)
              {
                int v922 = 0;
                uint64_t v923 = v920 >> 29;
                uint64_t v924 = *(uint64_t *)((char *)*a5 + v923);
                uint64_t v925 = *(void *)(*a6 + v923);
                uint64_t v926 = 4 * v1577;
                uint64_t v927 = 4 * v924;
                do
                {
                  uint64_t v928 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v929 = *(int *)((char *)*a4 + (v928 >> 30));
                  if (v929 >= 1)
                  {
                    uint64_t v930 = v928 >> 29;
                    uint64_t v931 = *(uint64_t *)((char *)*a5 + v930);
                    uint64_t v932 = *(void *)(*a6 + v930);
                    uint64_t v933 = *(void *)(*(void *)a2 + 152);
                    uint64_t v934 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v926);
                    uint64_t result = 4 * v931;
                    do
                    {
                      *(unsigned char *)(v933 + v109) = *v934;
                      v933 += v932;
                      uint64_t v934 = (_DWORD *)((char *)v934 + result);
                      --v929;
                    }
                    while (v929);
                  }
                  v109 += v925;
                  ++v922;
                  v926 += v927;
                }
                while (v922 != v921);
              }
              break;
            case 3:
              uint64_t v935 = (v111 << 30) - 0x300000000;
              int v936 = *(int *)((char *)*a4 + (v935 >> 30));
              if (v936 >= 1)
              {
                int v937 = 0;
                uint64_t v938 = v935 >> 29;
                uint64_t v939 = *(uint64_t *)((char *)*a5 + v938);
                uint64_t v940 = *(void *)(*a6 + v938);
                uint64_t v941 = 4 * v1577;
                uint64_t v942 = 4 * v939;
                do
                {
                  uint64_t v943 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v944 = *(int *)((char *)*a4 + (v943 >> 30));
                  if (v944 >= 1)
                  {
                    int v945 = 0;
                    uint64_t v946 = v943 >> 29;
                    uint64_t v947 = *(uint64_t *)((char *)*a5 + v946);
                    uint64_t v948 = *(void *)(*a6 + v946);
                    uint64_t result = 4 * v947;
                    uint64_t v949 = v941;
                    uint64_t v950 = v109;
                    do
                    {
                      uint64_t v951 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v952 = *(int *)((char *)*a4 + (v951 >> 30));
                      if (v952 >= 1)
                      {
                        uint64_t v953 = v951 >> 29;
                        uint64_t v954 = *(uint64_t *)((char *)*a5 + v953);
                        uint64_t v955 = *(void *)(*a6 + v953);
                        uint64_t v956 = *(void *)(*v11 + 152);
                        uint64_t v957 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v949);
                        uint64_t v958 = 4 * v954;
                        do
                        {
                          *(unsigned char *)(v956 + v950) = *v957;
                          v956 += v955;
                          uint64_t v957 = (_DWORD *)((char *)v957 + v958);
                          --v952;
                        }
                        while (v952);
                      }
                      v950 += v948;
                      ++v945;
                      v949 += result;
                    }
                    while (v945 != v944);
                  }
                  v109 += v940;
                  ++v937;
                  v941 += v942;
                }
                while (v937 != v936);
              }
              break;
            case 4:
              uint64_t v740 = a4;
              ldiv_t v741 = a5;
              uint64_t v742 = a6;
              uint64_t v743 = *a7;
              uint64_t v744 = *a8;
LABEL_558:
              break;
            case 5:
              uint64_t v959 = (v111 << 30) - 0x500000000;
              int v960 = *(int *)((char *)*a4 + (v959 >> 30));
              if (v960 >= 1)
              {
                uint64_t v961 = v959 >> 29;
                uint64_t v962 = *(uint64_t *)((char *)*a5 + v961);
                uint64_t v963 = *(void *)(*a6 + v961);
                do
                {
                  v1577 += v962;
                  v109 += v963;
                  --v960;
                }
                while (v960);
              }
              break;
            default:
              LODWORD(v898) = 1;
              uint64_t v899 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v898 = a4[1][v899++] * (uint64_t)(int)v898;
              while (v899 * 4);
              if (v110[6])
              {
                uint64_t result = 0;
                uint64_t v1507 = *a8;
                uint64_t v1519 = v898;
                do
                {
                  int v900 = *a4;
                  unint64_t v901 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v902 = (v901 - 1);
                  int v1534 = v110;
                  uint64_t v1549 = result;
                  uint64_t v903 = 0;
                  if ((int)v901 - 1 >= 0)
                  {
                    uint64_t v904 = *a5;
                    do
                    {
                      ldiv_t v905 = ldiv((int)result, v900[v902]);
                      LODWORD(result) = v905.quot;
                      v903 += v904[v902--] * v905.rem;
                    }
                    while (v902 != -1);
                  }
                  uint64_t v906 = *(void *)*v11;
                  unint64_t v907 = (unint64_t)(*(void *)(*v11 + 8) - v906) >> 2;
                  uint64_t v908 = *a6;
                  uint64_t v909 = 0;
                  uint64_t v910 = (v907 - 1);
                  if ((int)v907 - 1 >= 0)
                  {
                    int v911 = v1549;
                    do
                    {
                      ldiv_t v912 = ldiv(v911, *(int *)(v906 + 4 * v910));
                      int v911 = v912.quot;
                      v909 += *(void *)(v908 + 8 * v910--) * v912.rem;
                    }
                    while (v910 != -1);
                  }
                  uint64_t v110 = v1534;
                  uint64_t v913 = ((v110[1] - *v110) << 30) - 0x500000000;
                  int v914 = *(int *)((char *)v900 + (v913 >> 30));
                  if (v914 >= 1)
                  {
                    uint64_t v915 = v903 + v1577;
                    uint64_t v916 = v913 >> 29;
                    uint64_t v917 = *(uint64_t *)((char *)*a5 + v916);
                    uint64_t v918 = *(void *)(v908 + v916);
                    uint64_t v919 = v909 + v1507;
                    do
                    {
                      v915 += v917;
                      v919 += v918;
                      --v914;
                    }
                    while (v914);
                    uint64_t v110 = *(void **)v12;
                  }
                  uint64_t result = v1549 + v1519;
                }
                while (v110[6] > (unint64_t)(v1549 + v1519));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v25 = v8[6];
          if (v25)
          {
            int v26 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v27 = (_DWORD *)v8[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
LABEL_37:
          uint64_t v34 = *(void *)(*(void *)result + 160);
          if (v34)
          {
            size_t v35 = *(const void **)(*(void *)result + 152);
            size_t v36 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v36, v35, 4 * v34);
          }
          break;
        case 2:
          uint64_t v120 = *a7;
          uint64_t v121 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v122 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v123 = 0;
                uint64_t v124 = *(void *)(v121 + 152);
                uint64_t v125 = v8[19];
                uint64_t v126 = **a5;
                uint64_t v127 = (_DWORD *)(v124 + 4 * v120);
                do
                {
                  *(_DWORD *)(v125 + 4 * v123) = *v127;
                  v127 += v126;
                  ++v123;
                }
                while (*v122 > (int)v123);
              }
              break;
            case 2:
              uint64_t v394 = *a4;
              int v395 = **a4;
              if (v395 >= 1)
              {
                int v396 = 0;
                uint64_t v397 = 0;
                uint64_t v398 = *(void *)(v121 + 152);
                uint64_t v399 = v8[19];
                uint64_t v400 = **a5;
                uint64_t v401 = (*a5)[1];
                int v402 = v394[1];
                do
                {
                  if (v402 >= 1)
                  {
                    uint64_t v403 = 0;
                    do
                    {
                      *(_DWORD *)(v399 + 4 * v397 + 4 * v403) = *(_DWORD *)(v398 + 4 * v120);
                      v120 += v401;
                      int v402 = v394[1];
                      ++v403;
                    }
                    while ((int)v403 < v402);
                    int v395 = *v394;
                    v397 += v403;
                  }
                  uint64_t result = v402;
                  uint64_t v120 = v120 + v400 - v401 * v402;
                  ++v396;
                }
                while (v396 < v395);
              }
              break;
            case 3:
              int v404 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v405 = 0;
                uint64_t v406 = 0;
                uint64_t v407 = *(void *)(v121 + 152);
                uint64_t v408 = v8[19];
                uint64_t v409 = *a5;
                uint64_t v410 = **a5;
                uint64_t v411 = (*a5)[1];
                int v412 = v404[1];
                do
                {
                  if (v412 >= 1)
                  {
                    int v413 = 0;
                    uint64_t v414 = *a5;
                    uint64_t v415 = v409[2];
                    int v416 = v404[2];
                    do
                    {
                      if (v416 >= 1)
                      {
                        uint64_t v417 = 0;
                        uint64_t v418 = v414[2];
                        do
                        {
                          *(_DWORD *)(v408 + 4 * v406 + 4 * v417) = *(_DWORD *)(v407 + 4 * v120);
                          v120 += v418;
                          int v416 = v404[2];
                          ++v417;
                        }
                        while ((int)v417 < v416);
                        int v412 = v404[1];
                        v406 += v417;
                      }
                      uint64_t v120 = v120 + v411 - v415 * v416;
                      ++v413;
                    }
                    while (v413 < v412);
                    uint64_t result = *v404;
                  }
                  uint64_t v120 = v120 + v410 - v411 * v412;
                  ++v405;
                }
                while (v405 < (int)result);
              }
              break;
            case 4:
              int v419 = *a4;
              int v420 = **a4;
              if (v420 >= 1)
              {
                int v421 = 0;
                uint64_t v422 = 0;
                uint64_t v423 = *(void *)(v121 + 152);
                uint64_t v424 = v8[19];
                uint64_t v425 = *a5;
                uint64_t v426 = **a5;
                uint64_t v427 = (*a5)[1];
                int v428 = v419[1];
                do
                {
                  if (v428 >= 1)
                  {
                    int v429 = 0;
                    uint64_t v430 = *a5;
                    uint64_t v431 = v425[2];
                    int v432 = v419[2];
                    do
                    {
                      if (v432 >= 1)
                      {
                        int v433 = 0;
                        uint64_t v434 = *a5;
                        uint64_t v435 = v430[2];
                        uint64_t v436 = v430[3];
                        int v437 = v419[3];
                        do
                        {
                          if (v437 >= 1)
                          {
                            uint64_t v438 = 0;
                            uint64_t v439 = v434[3];
                            do
                            {
                              *(_DWORD *)(v424 + 4 * v422 + 4 * v438) = *(_DWORD *)(v423 + 4 * v120);
                              v120 += v439;
                              int v437 = v419[3];
                              ++v438;
                            }
                            while ((int)v438 < v437);
                            int v432 = v419[2];
                            v422 += v438;
                          }
                          uint64_t v120 = v120 + v435 - v436 * v437;
                          ++v433;
                        }
                        while (v433 < v432);
                        int v428 = v419[1];
                      }
                      uint64_t v120 = v120 + v427 - v431 * v432;
                      ++v429;
                    }
                    while (v429 < v428);
                    int v420 = *v419;
                  }
                  uint64_t result = v428;
                  uint64_t v120 = v120 + v426 - v427 * v428;
                  ++v421;
                }
                while (v421 < v420);
              }
              break;
            default:
              uint64_t v384 = v8[6];
              if (v384)
              {
                uint64_t v385 = 0;
                uint64_t v386 = *(void *)(v121 + 152) + 4 * v120;
                uint64_t v387 = v8[19];
                uint64_t v388 = *a4;
                uint64_t v389 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v390 = *a5;
                do
                {
                  uint64_t v391 = 0;
                  if ((v389 & 0x80000000) == 0)
                  {
                    uint64_t v392 = v389;
                    LODWORD(result) = v385;
                    do
                    {
                      ldiv_t v393 = ldiv((int)result, v388[v392]);
                      uint64_t result = v393.quot;
                      v391 += v390[v392--] * v393.rem;
                    }
                    while (v392 != -1);
                  }
                  *(_DWORD *)(v387 + 4 * v385++) = *(_DWORD *)(v386 + 4 * v391);
                }
                while (v385 != v384);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1433 = *a8;
          uint64_t v1439 = *a7;
          int v128 = *(void **)result;
          uint64_t v129 = v128[1] - *v128;
          switch(v129 >> 2)
          {
            case 1:
              uint64_t v130 = (v129 << 30) - 0x100000000;
              int v131 = *(int *)((char *)*a4 + (v130 >> 30));
              if (v131 >= 1)
              {
                uint64_t v132 = v130 >> 29;
                uint64_t v133 = *(uint64_t *)((char *)*a5 + v132);
                uint64_t v134 = *(void *)(*a6 + v132);
                uint64_t v135 = (_DWORD *)(v8[19] + 4 * v1433);
                uint64_t v136 = (_DWORD *)(v128[19] + 4 * v1439);
                uint64_t v137 = 4 * v134;
                uint64_t v138 = 4 * v133;
                do
                {
                  *uint64_t v135 = *v136;
                  uint64_t v135 = (_DWORD *)((char *)v135 + v137);
                  uint64_t v136 = (_DWORD *)((char *)v136 + v138);
                  --v131;
                }
                while (v131);
              }
              break;
            case 2:
              uint64_t v1002 = (v129 << 30) - 0x200000000;
              int v1003 = *a4;
              int v1004 = *(int *)((char *)*a4 + (v1002 >> 30));
              if (v1004 >= 1)
              {
                int v1005 = 0;
                uint64_t v1006 = v1002 >> 29;
                uint64_t v1007 = *(uint64_t *)((char *)*a5 + v1006);
                uint64_t v1008 = *(void *)(*a6 + v1006);
                uint64_t v1009 = (v129 << 30) - 0x100000000;
                uint64_t v1010 = *(uint64_t *)((char *)*a5 + (v1009 >> 29));
                uint64_t v1011 = *(void *)(*a6 + (v1009 >> 29));
                uint64_t v1012 = v1009 >> 32;
                uint64_t v1013 = 4 * v1433;
                uint64_t v1014 = 4 * v1008;
                uint64_t v1015 = 4 * v1011;
                uint64_t v1016 = 4 * v1439;
                uint64_t v1017 = 4 * v1007;
                uint64_t result = 4 * v1010;
                do
                {
                  int v1018 = v1003[v1012];
                  if (v1018 >= 1)
                  {
                    uint64_t v1019 = (_DWORD *)(v8[19] + v1013);
                    uint64_t v1020 = (_DWORD *)(v128[19] + v1016);
                    do
                    {
                      *uint64_t v1019 = *v1020;
                      uint64_t v1019 = (_DWORD *)((char *)v1019 + v1015);
                      uint64_t v1020 = (_DWORD *)((char *)v1020 + result);
                      --v1018;
                    }
                    while (v1018);
                  }
                  ++v1005;
                  v1013 += v1014;
                  v1016 += v1017;
                }
                while (v1005 != v1004);
              }
              break;
            case 3:
              uint64_t v1021 = (v129 << 30) - 0x300000000;
              uint64_t v1022 = *a4;
              int v1023 = *(int *)((char *)*a4 + (v1021 >> 30));
              if (v1023 >= 1)
              {
                int v1024 = 0;
                uint64_t v1025 = *a5;
                uint64_t v1026 = v1021 >> 29;
                uint64_t v1027 = *(uint64_t *)((char *)*a5 + (v1021 >> 29));
                uint64_t v1028 = *a6;
                uint64_t v1029 = *(void *)(*a6 + v1026);
                uint64_t v1030 = v129 << 30;
                uint64_t v1031 = (v129 << 30) - 0x200000000;
                uint64_t v1032 = v1031 >> 32;
                v1031 >>= 29;
                uint64_t v1033 = *(uint64_t *)((char *)*a5 + v1031);
                uint64_t v1034 = *(void *)(*a6 + v1031);
                uint64_t v1035 = (v1030 - 0x100000000) >> 32;
                uint64_t v1036 = 4 * v1433;
                uint64_t v1037 = 4 * v1029;
                uint64_t v1038 = 4 * v1034;
                uint64_t result = 4 * v1439;
                uint64_t v1039 = 4 * v1027;
                uint64_t v1040 = 4 * v1033;
                do
                {
                  int v1041 = v1022[v1032];
                  if (v1041 >= 1)
                  {
                    int v1042 = 0;
                    uint64_t v1043 = (void *)*v11;
                    uint64_t v1044 = 4 * *(void *)(v1028 + 8 * v1035);
                    uint64_t v1045 = 4 * v1025[v1035];
                    uint64_t v1046 = result;
                    uint64_t v1047 = v1036;
                    do
                    {
                      int v1048 = v1022[v1035];
                      if (v1048 >= 1)
                      {
                        uint64_t v1049 = (_DWORD *)(v1043[19] + v1047);
                        uint64_t v1050 = (_DWORD *)(v128[19] + v1046);
                        do
                        {
                          *uint64_t v1049 = *v1050;
                          uint64_t v1049 = (_DWORD *)((char *)v1049 + v1044);
                          uint64_t v1050 = (_DWORD *)((char *)v1050 + v1045);
                          --v1048;
                        }
                        while (v1048);
                      }
                      ++v1042;
                      v1047 += v1038;
                      v1046 += v1040;
                    }
                    while (v1042 != v1041);
                  }
                  ++v1024;
                  v1036 += v1037;
                  result += v1039;
                }
                while (v1024 != v1023);
              }
              break;
            case 4:
              uint64_t v1051 = (v129 << 30) - 0x400000000;
              uint64_t v1052 = *a4;
              int v1585 = *(int *)((char *)*a4 + (v1051 >> 30));
              if (v1585 >= 1)
              {
                int v1053 = 0;
                uint64_t v1054 = *a5;
                uint64_t v1055 = v1051 >> 29;
                uint64_t v1056 = v129 << 30;
                uint64_t v1057 = *a6;
                uint64_t v1567 = (v1056 - 0x300000000) >> 32;
                uint64_t v1058 = (v1056 - 0x300000000) >> 29;
                uint64_t v1059 = *(uint64_t *)((char *)*a5 + v1058);
                uint64_t v1060 = *(void *)(*a6 + v1058);
                uint64_t v1061 = (v1056 - 0x200000000) >> 32;
                uint64_t v1062 = (v1056 - 0x100000000) >> 32;
                uint64_t v1063 = 4 * v1433;
                uint64_t v1551 = 4 * *(void *)(*a6 + v1055);
                uint64_t result = 4 * v1060;
                uint64_t v1064 = 4 * v1439;
                uint64_t v1536 = 4 * *(uint64_t *)((char *)*a5 + v1055);
                uint64_t v1065 = 4 * v1059;
                do
                {
                  int v1066 = v1052[v1567];
                  if (v1066 >= 1)
                  {
                    int v1067 = 0;
                    uint64_t v1068 = 4 * *(void *)(v1057 + 8 * v1061);
                    uint64_t v1069 = 4 * v1054[v1061];
                    uint64_t v1070 = v1064;
                    uint64_t v1071 = v1063;
                    do
                    {
                      int v1072 = v1052[v1061];
                      if (v1072 >= 1)
                      {
                        int v1073 = 0;
                        uint64_t v1074 = (void *)*v11;
                        uint64_t v1075 = 4 * *(void *)(v1057 + 8 * v1062);
                        uint64_t v1076 = 4 * v1054[v1062];
                        uint64_t v1077 = v1070;
                        uint64_t v1078 = v1071;
                        do
                        {
                          int v1079 = v1052[v1062];
                          if (v1079 >= 1)
                          {
                            uint64_t v1080 = (_DWORD *)(v1074[19] + v1078);
                            uint64_t v1081 = (_DWORD *)(v128[19] + v1077);
                            do
                            {
                              *uint64_t v1080 = *v1081;
                              uint64_t v1080 = (_DWORD *)((char *)v1080 + v1075);
                              uint64_t v1081 = (_DWORD *)((char *)v1081 + v1076);
                              --v1079;
                            }
                            while (v1079);
                          }
                          ++v1073;
                          v1078 += v1068;
                          v1077 += v1069;
                        }
                        while (v1073 != v1072);
                      }
                      ++v1067;
                      v1071 += result;
                      v1070 += v1065;
                    }
                    while (v1067 != v1066);
                  }
                  ++v1053;
                  v1063 += v1551;
                  v1064 += v1536;
                }
                while (v1053 != v1585);
              }
              break;
            case 5:
              uint64_t v1082 = (v129 << 30) - 0x500000000;
              uint64_t v1083 = *a4;
              int v1487 = *(int *)((char *)*a4 + (v1082 >> 30));
              if (v1487 >= 1)
              {
                int v1497 = 0;
                ldiv_t v1084 = *a5;
                uint64_t v1085 = v1082 >> 29;
                uint64_t v1086 = *a6;
                uint64_t v1087 = v129 << 30;
                uint64_t v1088 = (v1087 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1088);
                uint64_t v1477 = (v1087 - 0x400000000) >> 32;
                uint64_t v1089 = *(void *)(*a6 + v1088);
                uint64_t v1568 = (v1087 - 0x300000000) >> 32;
                uint64_t v1090 = (v1087 - 0x200000000) >> 32;
                uint64_t v1091 = (v1087 - 0x100000000) >> 32;
                uint64_t v1521 = 4 * v1433;
                uint64_t v1467 = 4 * *(void *)(*a6 + v1085);
                uint64_t v1552 = 4 * v1089;
                uint64_t v1509 = 4 * v1439;
                uint64_t v1458 = 4 * *(uint64_t *)((char *)*a5 + v1085);
                uint64_t v1537 = 4 * result;
                do
                {
                  int v1586 = v1083[v1477];
                  if (v1586 >= 1)
                  {
                    int v1092 = 0;
                    uint64_t v1093 = 4 * *(void *)(v1086 + 8 * v1568);
                    uint64_t v1094 = 4 * v1084[v1568];
                    uint64_t v1095 = v1509;
                    uint64_t v1096 = v1521;
                    do
                    {
                      int v1097 = v1083[v1568];
                      if (v1097 >= 1)
                      {
                        int v1098 = 0;
                        uint64_t v1099 = 4 * *(void *)(v1086 + 8 * v1090);
                        uint64_t v1100 = 4 * v1084[v1090];
                        uint64_t v1101 = v1095;
                        uint64_t v1102 = v1096;
                        do
                        {
                          int v1103 = v1083[v1090];
                          if (v1103 >= 1)
                          {
                            int v1104 = 0;
                            uint64_t result = *v11;
                            uint64_t v1105 = 4 * *(void *)(v1086 + 8 * v1091);
                            uint64_t v1106 = 4 * v1084[v1091];
                            uint64_t v1107 = v1101;
                            uint64_t v1108 = v1102;
                            do
                            {
                              int v1109 = v1083[v1091];
                              if (v1109 >= 1)
                              {
                                uint64_t v1110 = (_DWORD *)(*(void *)(result + 152) + v1108);
                                int v1111 = (_DWORD *)(v128[19] + v1107);
                                do
                                {
                                  *uint64_t v1110 = *v1111;
                                  uint64_t v1110 = (_DWORD *)((char *)v1110 + v1105);
                                  int v1111 = (_DWORD *)((char *)v1111 + v1106);
                                  --v1109;
                                }
                                while (v1109);
                              }
                              ++v1104;
                              v1108 += v1099;
                              v1107 += v1100;
                            }
                            while (v1104 != v1103);
                          }
                          ++v1098;
                          v1102 += v1093;
                          v1101 += v1094;
                        }
                        while (v1098 != v1097);
                      }
                      ++v1092;
                      v1096 += v1552;
                      v1095 += v1537;
                    }
                    while (v1092 != v1586);
                  }
                  v1521 += v1467;
                  v1509 += v1458;
                  ++v1497;
                }
                while (v1497 != v1487);
              }
              break;
            default:
              uint64_t v964 = (char *)a4[1];
              LODWORD(v965) = 1;
              uint64_t v966 = -20;
              do
              {
                uint64_t v965 = *(int *)&v964[v966] * (uint64_t)(int)v965;
                v966 += 4;
              }
              while (v966);
              unint64_t v1429 = v128[6];
              if (v1429)
              {
                uint64_t result = 0;
                uint64_t v967 = (v129 << 30) - 0x500000000;
                int v968 = *a4;
                uint64_t v1466 = *v8;
                uint64_t v969 = *a5;
                uint64_t v1414 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1419 = ((unint64_t)(v964 - (char *)*a4) >> 2) - 1;
                uint64_t v1410 = v967 >> 32;
                uint64_t v970 = *a6;
                uint64_t v1476 = ((v129 << 30) - 0x400000000) >> 32;
                uint64_t v1566 = ((v129 << 30) - 0x300000000) >> 32;
                uint64_t v971 = ((v129 << 30) - 0x200000000) >> 32;
                uint64_t v972 = ((v129 << 30) - 0x100000000) >> 32;
                uint64_t v1450 = 4 * *(uint64_t *)((char *)*a5 + (v967 >> 29));
                uint64_t v1457 = 4 * *(void *)(*a6 + (v967 >> 29));
                uint64_t v1424 = v965;
                do
                {
                  uint64_t v973 = v1419;
                  uint64_t v1445 = result;
                  uint64_t v974 = 0;
                  if ((v1419 & 0x80000000) != 0)
                  {
                    uint64_t v975 = v1414;
                  }
                  else
                  {
                    uint64_t v975 = v1414;
                    do
                    {
                      ldiv_t v976 = ldiv((int)result, v968[v973]);
                      LODWORD(result) = v976.quot;
                      v974 += v969[v973--] * v976.rem;
                    }
                    while (v973 != -1);
                  }
                  uint64_t v977 = 0;
                  if ((v975 & 0x80000000) == 0)
                  {
                    int v978 = v1445;
                    do
                    {
                      ldiv_t v979 = ldiv(v978, *(int *)(v1466 + 4 * v975));
                      int v978 = v979.quot;
                      v977 += *(void *)(v970 + 8 * v975--) * v979.rem;
                    }
                    while (v975 != -1);
                  }
                  int v1486 = v968[v1410];
                  if (v1486 >= 1)
                  {
                    int v980 = 0;
                    uint64_t v1520 = 4 * (v977 + v1433);
                    uint64_t v1550 = 4 * *(void *)(v970 + 8 * v1476);
                    uint64_t v1508 = 4 * (v974 + v1439);
                    uint64_t v1535 = 4 * v969[v1476];
                    do
                    {
                      int v1496 = v980;
                      int v1584 = v968[v1476];
                      if (v1584 >= 1)
                      {
                        int v981 = 0;
                        uint64_t v982 = 4 * *(void *)(v970 + 8 * v1566);
                        uint64_t v983 = 4 * v969[v1566];
                        uint64_t v985 = v1508;
                        uint64_t v984 = v1520;
                        do
                        {
                          int v986 = v968[v1566];
                          if (v986 >= 1)
                          {
                            int v987 = 0;
                            uint64_t v988 = 4 * *(void *)(v970 + 8 * v971);
                            uint64_t v989 = 4 * v969[v971];
                            uint64_t v990 = v985;
                            uint64_t v991 = v984;
                            do
                            {
                              int v992 = v968[v971];
                              if (v992 >= 1)
                              {
                                int v993 = 0;
                                uint64_t v994 = (void *)*v11;
                                uint64_t v995 = 4 * *(void *)(v970 + 8 * v972);
                                uint64_t v996 = 4 * v969[v972];
                                uint64_t v997 = v990;
                                uint64_t v998 = v991;
                                do
                                {
                                  int v999 = v968[v972];
                                  if (v999 >= 1)
                                  {
                                    uint64_t v1000 = (_DWORD *)(v994[19] + v998);
                                    uint64_t v1001 = (_DWORD *)(v128[19] + v997);
                                    do
                                    {
                                      *uint64_t v1000 = *v1001;
                                      uint64_t v1000 = (_DWORD *)((char *)v1000 + v995);
                                      uint64_t v1001 = (_DWORD *)((char *)v1001 + v996);
                                      --v999;
                                    }
                                    while (v999);
                                  }
                                  ++v993;
                                  v998 += v988;
                                  v997 += v989;
                                }
                                while (v993 != v992);
                              }
                              ++v987;
                              v991 += v982;
                              v990 += v983;
                            }
                            while (v987 != v986);
                          }
                          ++v981;
                          v984 += v1550;
                          v985 += v1535;
                        }
                        while (v981 != v1584);
                      }
                      int v980 = v1496 + 1;
                      v1520 += v1457;
                      v1508 += v1450;
                    }
                    while (v1496 + 1 != v1486);
                  }
                  uint64_t result = v1445 + v1424;
                }
                while (v1429 > v1445 + v1424);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v28 = v8[6];
          if (v28)
          {
            uint64_t v29 = **(unsigned int **)(*(void *)result + 152);
            uint64_t v30 = (void *)v8[19];
            do
            {
              *v30++ = v29;
              --v28;
            }
            while (v28);
          }
          break;
        case 1:
          uint64_t v139 = *(void *)(*(void *)result + 160);
          if (v139)
          {
            uint64_t v140 = *(unsigned int **)(*(void *)result + 152);
            uint64_t v141 = (void *)v8[19];
            uint64_t v142 = 4 * v139;
            do
            {
              unsigned int v143 = *v140++;
              *v141++ = v143;
              v142 -= 4;
            }
            while (v142);
          }
          break;
        case 2:
          uint64_t v144 = *a7;
          uint64_t v145 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v146 = **a4;
              if ((int)v146 >= 1)
              {
                uint64_t v147 = *(void *)(v145 + 152);
                int v148 = (void *)v8[19];
                uint64_t v149 = *a5;
                do
                {
                  *v148++ = *(unsigned int *)(v147 + 4 * v144);
                  v144 += *v149;
                  --v146;
                }
                while (v146);
              }
              break;
            case 2:
              int v450 = **a4;
              if (v450 >= 1)
              {
                int v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = *(void *)(v145 + 152);
                uint64_t v454 = v8[19];
                int v455 = (*a4)[1];
                uint64_t v456 = *a5;
                do
                {
                  if (v455 <= 0)
                  {
                    uint64_t v458 = v456[1];
                  }
                  else
                  {
                    int v457 = v455;
                    do
                    {
                      *(void *)(v454 + 8 * v452++) = *(unsigned int *)(v453 + 4 * v144);
                      uint64_t v458 = v456[1];
                      v144 += v458;
                      --v457;
                    }
                    while (v457);
                  }
                  uint64_t result = *v456;
                  uint64_t v144 = v144 - v458 * v455 + *v456;
                  ++v451;
                }
                while (v451 != v450);
              }
              break;
            case 3:
              uint64_t v459 = *a4;
              int v460 = **a4;
              if (v460 >= 1)
              {
                int v461 = 0;
                uint64_t v462 = 0;
                uint64_t v463 = *(void *)(v145 + 152);
                uint64_t v464 = v8[19];
                uint64_t v465 = v459[1];
                uint64_t v466 = *a5;
                do
                {
                  if ((int)v465 <= 0)
                  {
                    uint64_t v470 = v466[1];
                  }
                  else
                  {
                    int v467 = 0;
                    uint64_t result = v459[2];
                    uint64_t v468 = *a5;
                    do
                    {
                      int v469 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v464 + 8 * v462++) = *(unsigned int *)(v463 + 4 * v144);
                          v144 += v468[2];
                          --v469;
                        }
                        while (v469);
                      }
                      uint64_t v470 = v466[1];
                      uint64_t v144 = v470 + v144 - v466[2] * (int)result;
                      ++v467;
                    }
                    while (v467 != v465);
                  }
                  uint64_t v144 = v144 - v470 * v465 + *v466;
                  ++v461;
                }
                while (v461 != v460);
              }
              break;
            case 4:
              int v471 = *a4;
              int v472 = **a4;
              if (v472 >= 1)
              {
                int v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = *(void *)(v145 + 152);
                uint64_t v476 = v8[19];
                uint64_t v477 = v471[1];
                uint64_t v478 = *a5;
                do
                {
                  if ((int)v477 <= 0)
                  {
                    uint64_t v485 = v478[1];
                  }
                  else
                  {
                    int v479 = 0;
                    uint64_t result = v471[2];
                    uint64_t v480 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v481 = 0;
                        int v482 = v471[3];
                        uint64_t v483 = *a5;
                        do
                        {
                          int v484 = v482;
                          if (v482 >= 1)
                          {
                            do
                            {
                              *(void *)(v476 + 8 * v474++) = *(unsigned int *)(v475 + 4 * v144);
                              v144 += v483[3];
                              --v484;
                            }
                            while (v484);
                          }
                          uint64_t v144 = v480[2] + v144 - v480[3] * v482;
                          ++v481;
                        }
                        while (v481 != result);
                      }
                      uint64_t v485 = v478[1];
                      uint64_t v144 = v485 + v144 - v478[2] * result;
                      ++v479;
                    }
                    while (v479 != v477);
                  }
                  uint64_t v144 = v144 - v485 * v477 + *v478;
                  ++v473;
                }
                while (v473 != v472);
              }
              break;
            default:
              uint64_t v440 = v8[6];
              if (v440)
              {
                uint64_t v441 = 0;
                uint64_t v442 = *(void *)(v145 + 152) + 4 * v144;
                uint64_t v443 = v8[19];
                uint64_t v444 = *a4;
                uint64_t v445 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v446 = *a5;
                do
                {
                  uint64_t v447 = 0;
                  if ((v445 & 0x80000000) == 0)
                  {
                    uint64_t v448 = v445;
                    LODWORD(result) = v441;
                    do
                    {
                      ldiv_t v449 = ldiv((int)result, v444[v448]);
                      uint64_t result = v449.quot;
                      v447 += v446[v448--] * v449.rem;
                    }
                    while (v448 != -1);
                  }
                  *(void *)(v443 + 8 * v441++) = *(unsigned int *)(v442 + 4 * v447);
                }
                while (v441 != v440);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1434 = *a8;
          uint64_t v1440 = *a7;
          uint64_t v150 = *(void **)result;
          uint64_t v151 = v150[1] - *v150;
          switch(v151 >> 2)
          {
            case 1:
              uint64_t v152 = (v151 << 30) - 0x100000000;
              int v153 = *(int *)((char *)*a4 + (v152 >> 30));
              if (v153 >= 1)
              {
                uint64_t v154 = v152 >> 29;
                uint64_t v155 = *(uint64_t *)((char *)*a5 + v154);
                uint64_t v156 = *(void *)(*a6 + v154);
                unsigned int v157 = (void *)(v8[19] + 8 * v1434);
                uint64_t v158 = (unsigned int *)(v150[19] + 4 * v1440);
                uint64_t v159 = 8 * v156;
                uint64_t v160 = 4 * v155;
                do
                {
                  void *v157 = *v158;
                  unsigned int v157 = (void *)((char *)v157 + v159);
                  uint64_t v158 = (unsigned int *)((char *)v158 + v160);
                  --v153;
                }
                while (v153);
              }
              break;
            case 2:
              uint64_t v1150 = (v151 << 30) - 0x200000000;
              int v1151 = *(int *)((char *)*a4 + (v1150 >> 30));
              if (v1151 >= 1)
              {
                int v1152 = 0;
                uint64_t v1153 = v151 << 30;
                int v1154 = *a5;
                v1153 -= 0x100000000;
                int v1155 = *(int *)((char *)*a4 + (v1153 >> 30));
                uint64_t v1156 = v1150 >> 29;
                uint64_t v1157 = *(uint64_t *)((char *)*a5 + (v1150 >> 29));
                uint64_t v1158 = *a6;
                uint64_t v1159 = *(void *)(*a6 + v1156);
                uint64_t v1160 = v1153 >> 32;
                uint64_t v1161 = 8 * v1434;
                uint64_t v1162 = 8 * v1159;
                uint64_t v1163 = 4 * v1440;
                uint64_t result = 4 * v1157;
                do
                {
                  if (v1155 >= 1)
                  {
                    uint64_t v1164 = (void *)(v8[19] + v1161);
                    uint64_t v1165 = 8 * *(void *)(v1158 + 8 * v1160);
                    uint64_t v1166 = (unsigned int *)(v150[19] + v1163);
                    uint64_t v1167 = 4 * v1154[v1160];
                    int v1168 = v1155;
                    do
                    {
                      void *v1164 = *v1166;
                      uint64_t v1164 = (void *)((char *)v1164 + v1165);
                      uint64_t v1166 = (unsigned int *)((char *)v1166 + v1167);
                      --v1168;
                    }
                    while (v1168);
                  }
                  ++v1152;
                  v1161 += v1162;
                  v1163 += result;
                }
                while (v1152 != v1151);
              }
              break;
            case 3:
              uint64_t v1169 = (v151 << 30) - 0x300000000;
              uint64_t v1170 = *a4;
              int v1171 = *(int *)((char *)*a4 + (v1169 >> 30));
              if (v1171 >= 1)
              {
                int v1172 = 0;
                uint64_t v1173 = v151 << 30;
                uint64_t v1174 = *a5;
                uint64_t v1175 = v1169 >> 29;
                uint64_t v1176 = *(uint64_t *)((char *)*a5 + (v1169 >> 29));
                uint64_t v1177 = *a6;
                uint64_t v1178 = *(void *)(*a6 + v1175);
                uint64_t v1179 = v1173 - 0x200000000;
                uint64_t v1180 = v1173 - 0x100000000;
                int v1181 = *(int *)((char *)v1170 + ((v1173 - 0x200000000) >> 30));
                uint64_t v1182 = v1179 >> 32;
                uint64_t v1183 = v1180 >> 32;
                uint64_t v1184 = 8 * v1434;
                uint64_t v1185 = 8 * v1178;
                uint64_t result = 4 * v1440;
                uint64_t v1186 = 4 * v1176;
                do
                {
                  if (v1181 >= 1)
                  {
                    int v1187 = 0;
                    int v1188 = v1170[v1183];
                    uint64_t v1189 = (void *)*v11;
                    uint64_t v1190 = 8 * *(void *)(v1177 + 8 * v1182);
                    uint64_t v1191 = 4 * v1174[v1182];
                    uint64_t v1192 = result;
                    uint64_t v1193 = v1184;
                    do
                    {
                      if (v1188 >= 1)
                      {
                        int v1194 = (void *)(v1189[19] + v1193);
                        uint64_t v1195 = 8 * *(void *)(v1177 + 8 * v1183);
                        int v1196 = (unsigned int *)(v150[19] + v1192);
                        uint64_t v1197 = 4 * v1174[v1183];
                        int v1198 = v1188;
                        do
                        {
                          *int v1194 = *v1196;
                          int v1194 = (void *)((char *)v1194 + v1195);
                          int v1196 = (unsigned int *)((char *)v1196 + v1197);
                          --v1198;
                        }
                        while (v1198);
                      }
                      ++v1187;
                      v1193 += v1190;
                      v1192 += v1191;
                    }
                    while (v1187 != v1181);
                  }
                  ++v1172;
                  v1184 += v1185;
                  result += v1186;
                }
                while (v1172 != v1171);
              }
              break;
            case 4:
              uint64_t v1199 = (v151 << 30) - 0x400000000;
              int v1200 = *a4;
              int v1554 = *(int *)((char *)*a4 + (v1199 >> 30));
              if (v1554 >= 1)
              {
                int v1587 = 0;
                uint64_t v1201 = v151 << 30;
                int v1202 = *a5;
                uint64_t v1203 = v1199 >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1203);
                uint64_t v1204 = *a6;
                uint64_t v1523 = (v1201 - 0x300000000) >> 32;
                int v1205 = *(int *)((char *)v1200 + ((v1201 - 0x300000000) >> 30));
                uint64_t v1206 = (v1201 - 0x200000000) >> 32;
                uint64_t v1207 = (v1201 - 0x100000000) >> 32;
                uint64_t v1208 = 8 * v1434;
                uint64_t v1570 = 8 * *(void *)(*a6 + v1203);
                uint64_t v1209 = 4 * v1440;
                uint64_t v1539 = 4 * result;
                do
                {
                  if (v1205 >= 1)
                  {
                    int v1210 = 0;
                    int v1211 = v1200[v1206];
                    uint64_t v1212 = 8 * *(void *)(v1204 + 8 * v1523);
                    uint64_t v1213 = 4 * v1202[v1523];
                    uint64_t v1214 = v1209;
                    uint64_t v1215 = v1208;
                    do
                    {
                      if (v1211 >= 1)
                      {
                        int v1216 = 0;
                        uint64_t result = *(void *)(v1204 + 8 * v1206);
                        int v1217 = v1200[v1207];
                        uint64_t v1218 = (void *)*v11;
                        uint64_t v1219 = 8 * result;
                        uint64_t v1220 = 4 * v1202[v1206];
                        uint64_t v1221 = v1214;
                        uint64_t v1222 = v1215;
                        do
                        {
                          if (v1217 >= 1)
                          {
                            uint64_t v1223 = (void *)(v1218[19] + v1222);
                            uint64_t v1224 = 8 * *(void *)(v1204 + 8 * v1207);
                            uint64_t result = v150[19] + v1221;
                            uint64_t v1225 = 4 * v1202[v1207];
                            int v1226 = v1217;
                            do
                            {
                              void *v1223 = *(unsigned int *)result;
                              uint64_t v1223 = (void *)((char *)v1223 + v1224);
                              result += v1225;
                              --v1226;
                            }
                            while (v1226);
                          }
                          ++v1216;
                          v1222 += v1219;
                          v1221 += v1220;
                        }
                        while (v1216 != v1211);
                      }
                      ++v1210;
                      v1215 += v1212;
                      v1214 += v1213;
                    }
                    while (v1210 != v1205);
                  }
                  v1208 += v1570;
                  v1209 += v1539;
                  ++v1587;
                }
                while (v1587 != v1554);
              }
              break;
            case 5:
              uint64_t v1227 = (v151 << 30) - 0x500000000;
              int v1228 = *a4;
              int v1479 = *(int *)((char *)*a4 + (v1227 >> 30));
              if (v1479 >= 1)
              {
                int v1489 = 0;
                uint64_t v1229 = v151 << 30;
                uint64_t v1230 = *a5;
                uint64_t v1231 = v1227 >> 29;
                uint64_t v1232 = *a6;
                uint64_t v1452 = (v1229 - 0x400000000) >> 32;
                int v1571 = *(int *)((char *)v1228 + ((v1229 - 0x400000000) >> 30));
                uint64_t v1233 = (v1229 - 0x200000000) >> 32;
                uint64_t v1234 = (v1229 - 0x100000000) >> 32;
                uint64_t v1511 = 8 * v1434;
                uint64_t v1524 = (v1229 - 0x300000000) >> 32;
                uint64_t v1499 = 4 * v1440;
                uint64_t v1460 = 4 * *(uint64_t *)((char *)*a5 + v1231);
                uint64_t v1469 = 8 * *(void *)(*a6 + v1231);
                do
                {
                  if (v1571 >= 1)
                  {
                    int v1235 = 0;
                    int v1236 = v1228[v1524];
                    uint64_t v1540 = 4 * v1230[v1452];
                    uint64_t v1555 = 8 * *(void *)(v1232 + 8 * v1452);
                    uint64_t v1237 = v1499;
                    uint64_t result = v1511;
                    do
                    {
                      int v1588 = v1235;
                      if (v1236 >= 1)
                      {
                        int v1238 = 0;
                        int v1239 = v1228[v1233];
                        uint64_t v1240 = 8 * *(void *)(v1232 + 8 * v1524);
                        uint64_t v1241 = 4 * v1230[v1524];
                        uint64_t v1242 = v1237;
                        uint64_t v1243 = result;
                        do
                        {
                          if (v1239 >= 1)
                          {
                            int v1244 = 0;
                            int v1245 = v1228[v1234];
                            uint64_t v1246 = (void *)*v11;
                            uint64_t v1247 = 8 * *(void *)(v1232 + 8 * v1233);
                            uint64_t v1248 = 4 * v1230[v1233];
                            uint64_t v1249 = v1242;
                            uint64_t v1250 = v1243;
                            do
                            {
                              if (v1245 >= 1)
                              {
                                uint64_t v1251 = (void *)(v1246[19] + v1250);
                                uint64_t v1252 = 8 * *(void *)(v1232 + 8 * v1234);
                                int v1253 = (unsigned int *)(v150[19] + v1249);
                                uint64_t v1254 = 4 * v1230[v1234];
                                int v1255 = v1245;
                                do
                                {
                                  *uint64_t v1251 = *v1253;
                                  uint64_t v1251 = (void *)((char *)v1251 + v1252);
                                  int v1253 = (unsigned int *)((char *)v1253 + v1254);
                                  --v1255;
                                }
                                while (v1255);
                              }
                              ++v1244;
                              v1250 += v1247;
                              v1249 += v1248;
                            }
                            while (v1244 != v1239);
                          }
                          ++v1238;
                          v1243 += v1240;
                          v1242 += v1241;
                        }
                        while (v1238 != v1236);
                      }
                      int v1235 = v1588 + 1;
                      result += v1555;
                      v1237 += v1540;
                    }
                    while (v1588 + 1 != v1571);
                  }
                  v1511 += v1469;
                  v1499 += v1460;
                  ++v1489;
                }
                while (v1489 != v1479);
              }
              break;
            default:
              int v1112 = (char *)a4[1];
              LODWORD(v1113) = 1;
              uint64_t v1114 = -20;
              do
              {
                uint64_t v1113 = *(int *)&v1112[v1114] * (uint64_t)(int)v1113;
                v1114 += 4;
              }
              while (v1114);
              unint64_t v1430 = v150[6];
              if (v1430)
              {
                uint64_t v1115 = 0;
                uint64_t v1116 = (v151 << 30) - 0x500000000;
                uint64_t v1117 = *a4;
                uint64_t v1411 = *v8;
                uint64_t v1118 = *a5;
                uint64_t v1415 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1420 = ((unint64_t)(v1112 - (char *)*a4) >> 2) - 1;
                uint64_t v1119 = *a6;
                uint64_t v1407 = v1116 >> 32;
                int v1478 = *(int *)((char *)*a4 + (v1116 >> 30));
                uint64_t v1451 = ((v151 << 30) - 0x400000000) >> 32;
                uint64_t v1522 = ((v151 << 30) - 0x300000000) >> 32;
                uint64_t v1120 = ((v151 << 30) - 0x200000000) >> 32;
                uint64_t v1121 = ((v151 << 30) - 0x100000000) >> 32;
                uint64_t v1425 = v1113;
                do
                {
                  uint64_t v1122 = v1420;
                  if ((v1420 & 0x80000000) != 0)
                  {
                    uint64_t v1123 = 0;
                    uint64_t v1124 = v1415;
                  }
                  else
                  {
                    uint64_t v1123 = 0;
                    LODWORD(result) = v1115;
                    uint64_t v1124 = v1415;
                    do
                    {
                      ldiv_t v1125 = ldiv((int)result, v1117[v1122]);
                      uint64_t result = v1125.quot;
                      v1123 += v1118[v1122--] * v1125.rem;
                    }
                    while (v1122 != -1);
                  }
                  uint64_t v1446 = v1115;
                  uint64_t v1126 = 0;
                  if ((v1124 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1115;
                    do
                    {
                      ldiv_t v1127 = ldiv((int)result, *(int *)(v1411 + 4 * v1124));
                      uint64_t result = v1127.quot;
                      v1126 += *(void *)(v1119 + 8 * v1124--) * v1127.rem;
                    }
                    while (v1124 != -1);
                  }
                  if (v1478 >= 1)
                  {
                    int v1128 = 0;
                    int v1569 = v1117[v1451];
                    uint64_t v1468 = 8 * *(void *)(v1119 + 8 * v1407);
                    uint64_t v1498 = 4 * (v1123 + v1440);
                    uint64_t v1510 = 8 * (v1126 + v1434);
                    uint64_t v1459 = 4 * v1118[v1407];
                    do
                    {
                      int v1488 = v1128;
                      if (v1569 >= 1)
                      {
                        int v1129 = 0;
                        int v1130 = v1117[v1522];
                        uint64_t v1538 = 4 * v1118[v1451];
                        uint64_t v1553 = 8 * *(void *)(v1119 + 8 * v1451);
                        uint64_t v1132 = v1498;
                        uint64_t v1131 = v1510;
                        do
                        {
                          if (v1130 >= 1)
                          {
                            int v1133 = 0;
                            int v1134 = v1117[v1120];
                            uint64_t v1135 = 8 * *(void *)(v1119 + 8 * v1522);
                            uint64_t v1136 = 4 * v1118[v1522];
                            uint64_t result = v1132;
                            uint64_t v1137 = v1131;
                            do
                            {
                              if (v1134 >= 1)
                              {
                                int v1138 = 0;
                                int v1139 = v1117[v1121];
                                int v1140 = *(uint64_t **)a2;
                                uint64_t v1141 = 8 * *(void *)(v1119 + 8 * v1120);
                                uint64_t v1142 = 4 * v1118[v1120];
                                uint64_t v1143 = result;
                                uint64_t v1144 = v1137;
                                do
                                {
                                  if (v1139 >= 1)
                                  {
                                    int v1145 = (void *)(v1140[19] + v1144);
                                    uint64_t v1146 = 8 * *(void *)(v1119 + 8 * v1121);
                                    uint64_t v1147 = (unsigned int *)(v150[19] + v1143);
                                    uint64_t v1148 = 4 * v1118[v1121];
                                    int v1149 = v1139;
                                    do
                                    {
                                      *int v1145 = *v1147;
                                      int v1145 = (void *)((char *)v1145 + v1146);
                                      uint64_t v1147 = (unsigned int *)((char *)v1147 + v1148);
                                      --v1149;
                                    }
                                    while (v1149);
                                  }
                                  ++v1138;
                                  v1144 += v1141;
                                  v1143 += v1142;
                                }
                                while (v1138 != v1134);
                              }
                              ++v1133;
                              v1137 += v1135;
                              result += v1136;
                            }
                            while (v1133 != v1130);
                          }
                          ++v1129;
                          v1131 += v1553;
                          v1132 += v1538;
                        }
                        while (v1129 != v1569);
                      }
                      int v1128 = v1488 + 1;
                      v1510 += v1468;
                      v1498 += v1459;
                    }
                    while (v1488 + 1 != v1478);
                  }
                  v1115 += v1425;
                }
                while (v1430 > v1446 + v1425);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v31 = v8[6];
          if (v31)
          {
            float v32 = (float)**(unsigned int **)(*(void *)result + 152);
            uint64_t v33 = (float *)v8[19];
            do
            {
              *v33++ = v32;
              --v31;
            }
            while (v31);
          }
          break;
        case 1:
          uint64_t v161 = *(void *)(*(void *)result + 160);
          if (v161)
          {
            uint64_t v162 = *(unsigned int **)(*(void *)result + 152);
            uint64_t v163 = (float *)v8[19];
            uint64_t v164 = 4 * v161;
            do
            {
              unsigned int v165 = *v162++;
              *v163++ = (float)v165;
              v164 -= 4;
            }
            while (v164);
          }
          break;
        case 2:
          uint64_t v166 = *a7;
          uint64_t v167 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v168 = **a4;
              if ((int)v168 >= 1)
              {
                uint64_t v169 = (float *)v8[19];
                uint64_t v170 = **a5;
                float v171 = (unsigned int *)(*(void *)(v167 + 152) + 4 * v166);
                do
                {
                  *v169++ = (float)*v171;
                  v171 += v170;
                  --v168;
                }
                while (v168);
              }
              break;
            case 2:
              int v496 = **a4;
              if (v496 >= 1)
              {
                int v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = *(void *)(v167 + 152);
                uint64_t v500 = v8[19];
                uint64_t v501 = (*a4)[1];
                uint64_t v502 = (*a5)[1];
                uint64_t v503 = **a5 - v502 * v501;
                do
                {
                  int v504 = v501;
                  if ((int)v501 >= 1)
                  {
                    do
                    {
                      *(float *)(v500 + 4 * v498++) = (float)*(unsigned int *)(v499 + 4 * v166);
                      v166 += v502;
                      --v504;
                    }
                    while (v504);
                  }
                  v166 += v503;
                  ++v497;
                }
                while (v497 != v496);
              }
              break;
            case 3:
              int v505 = *a4;
              int v506 = **a4;
              if (v506 >= 1)
              {
                int v507 = 0;
                uint64_t result = 0;
                uint64_t v508 = *(void *)(v167 + 152);
                uint64_t v509 = v8[19];
                uint64_t v510 = v505[1];
                uint64_t v511 = *a5;
                uint64_t v512 = (*a5)[1];
                uint64_t v513 = **a5 - v512 * v510;
                do
                {
                  if ((int)v510 < 1)
                  {
                    uint64_t v520 = result;
                  }
                  else
                  {
                    int v514 = 0;
                    uint64_t v515 = v505[2];
                    uint64_t v516 = *a5;
                    uint64_t v517 = v512 - v511[2] * v515;
                    do
                    {
                      if ((int)v515 < 1)
                      {
                        uint64_t v520 = result;
                      }
                      else
                      {
                        uint64_t v518 = v516[2];
                        int v519 = v515;
                        do
                        {
                          uint64_t v520 = result + 1;
                          *(float *)(v509 + 4 * result) = (float)*(unsigned int *)(v508 + 4 * v166);
                          v166 += v518;
                          ++result;
                          --v519;
                        }
                        while (v519);
                      }
                      v166 += v517;
                      ++v514;
                      uint64_t result = v520;
                    }
                    while (v514 != v510);
                  }
                  v166 += v513;
                  ++v507;
                  uint64_t result = v520;
                }
                while (v507 != v506);
              }
              break;
            case 4:
              int v521 = *a4;
              int v522 = **a4;
              if (v522 >= 1)
              {
                int v523 = 0;
                uint64_t result = 0;
                uint64_t v524 = *(void *)(v167 + 152);
                uint64_t v525 = v8[19];
                uint64_t v526 = v521[1];
                uint64_t v527 = *a5;
                uint64_t v528 = (*a5)[1];
                uint64_t v529 = **a5 - v528 * v526;
                do
                {
                  if ((int)v526 < 1)
                  {
                    uint64_t v540 = result;
                  }
                  else
                  {
                    int v530 = 0;
                    uint64_t v531 = v521[2];
                    uint64_t v532 = *a5;
                    uint64_t v533 = v528 - v527[2] * v531;
                    do
                    {
                      if ((int)v531 < 1)
                      {
                        uint64_t v540 = result;
                      }
                      else
                      {
                        int v534 = 0;
                        uint64_t v535 = v521[3];
                        uint64_t v536 = *a5;
                        uint64_t v537 = v532[2] - v532[3] * v535;
                        do
                        {
                          if ((int)v535 < 1)
                          {
                            uint64_t v540 = result;
                          }
                          else
                          {
                            uint64_t v538 = v536[3];
                            int v539 = v535;
                            do
                            {
                              uint64_t v540 = result + 1;
                              *(float *)(v525 + 4 * result) = (float)*(unsigned int *)(v524 + 4 * v166);
                              v166 += v538;
                              ++result;
                              --v539;
                            }
                            while (v539);
                          }
                          v166 += v537;
                          ++v534;
                          uint64_t result = v540;
                        }
                        while (v534 != v531);
                      }
                      v166 += v533;
                      ++v530;
                      uint64_t result = v540;
                    }
                    while (v530 != v526);
                  }
                  v166 += v529;
                  ++v523;
                  uint64_t result = v540;
                }
                while (v523 != v522);
              }
              break;
            default:
              uint64_t v486 = v8[6];
              if (v486)
              {
                uint64_t v487 = 0;
                uint64_t v488 = *(void *)(v167 + 152) + 4 * v166;
                uint64_t v489 = v8[19];
                uint64_t v490 = *a4;
                uint64_t v491 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v492 = *a5;
                do
                {
                  uint64_t v493 = 0;
                  if ((v491 & 0x80000000) == 0)
                  {
                    uint64_t v494 = v491;
                    LODWORD(result) = v487;
                    do
                    {
                      ldiv_t v495 = ldiv((int)result, v490[v494]);
                      uint64_t result = v495.quot;
                      v493 += v492[v494--] * v495.rem;
                    }
                    while (v494 != -1);
                  }
                  *(float *)(v489 + 4 * v487++) = (float)*(unsigned int *)(v488 + 4 * v493);
                }
                while (v487 != v486);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1441 = *a8;
          uint64_t v1442 = *a7;
          uint64_t v172 = *(void **)result;
          uint64_t v173 = v172[1] - *v172;
          switch(v173 >> 2)
          {
            case 1:
              uint64_t v174 = (v173 << 30) - 0x100000000;
              int v175 = *(int *)((char *)*a4 + (v174 >> 30));
              if (v175 >= 1)
              {
                uint64_t v176 = v174 >> 29;
                uint64_t v177 = *(uint64_t *)((char *)*a5 + v176);
                uint64_t v178 = *(void *)(*a6 + v176);
                uint64_t v179 = (float *)(v8[19] + 4 * v1441);
                uint64_t v180 = (unsigned int *)(v172[19] + 4 * v1442);
                uint64_t v181 = 4 * v178;
                uint64_t v182 = 4 * v177;
                do
                {
                  *uint64_t v179 = (float)*v180;
                  uint64_t v179 = (float *)((char *)v179 + v181);
                  uint64_t v180 = (unsigned int *)((char *)v180 + v182);
                  --v175;
                }
                while (v175);
              }
              break;
            case 2:
              uint64_t v1295 = (v173 << 30) - 0x200000000;
              int v1296 = *(int *)((char *)*a4 + (v1295 >> 30));
              if (v1296 >= 1)
              {
                int v1297 = 0;
                uint64_t v1298 = v1295 >> 29;
                uint64_t v1299 = *(uint64_t *)((char *)*a5 + v1298);
                uint64_t v1300 = *(void *)(*a6 + v1298);
                uint64_t v1301 = (v173 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v1301 >> 29));
                uint64_t v1302 = *(void *)(*a6 + (v1301 >> 29));
                int v1303 = *(int *)((char *)*a4 + (v1301 >> 30));
                uint64_t v1304 = 4 * v1441;
                uint64_t v1305 = 4 * v1300;
                uint64_t v1306 = 4 * v1302;
                uint64_t v1307 = 4 * v1442;
                uint64_t v1308 = 4 * v1299;
                uint64_t v1309 = 4 * result;
                do
                {
                  if (v1303 >= 1)
                  {
                    uint64_t result = v8[19] + v1304;
                    int v1310 = (unsigned int *)(v172[19] + v1307);
                    int v1311 = v1303;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1310;
                      result += v1306;
                      int v1310 = (unsigned int *)((char *)v1310 + v1309);
                      --v1311;
                    }
                    while (v1311);
                  }
                  ++v1297;
                  v1304 += v1305;
                  v1307 += v1308;
                }
                while (v1297 != v1296);
              }
              break;
            case 3:
              uint64_t v1312 = (v173 << 30) - 0x300000000;
              uint64_t v1313 = *a4;
              int v1314 = *(int *)((char *)*a4 + (v1312 >> 30));
              if (v1314 >= 1)
              {
                int v1315 = 0;
                uint64_t v1316 = v173 << 30;
                int v1317 = *a5;
                uint64_t v1318 = v1312 >> 29;
                uint64_t v1319 = *(uint64_t *)((char *)*a5 + (v1312 >> 29));
                uint64_t v1320 = *a6;
                uint64_t v1321 = *(void *)(*a6 + v1318);
                uint64_t v1322 = (v1316 - 0x200000000) >> 29;
                uint64_t v1323 = v1316 - 0x100000000;
                uint64_t v1324 = *(uint64_t *)((char *)*a5 + v1322);
                uint64_t v1325 = *(void *)(*a6 + v1322);
                int v1326 = *(int *)((char *)v1313 + ((v1316 - 0x200000000) >> 30));
                uint64_t v1327 = v1323 >> 32;
                uint64_t v1328 = 4 * v1441;
                uint64_t v1329 = 4 * v1321;
                uint64_t v1330 = 4 * v1325;
                uint64_t result = 4 * v1442;
                uint64_t v1331 = 4 * v1319;
                uint64_t v1332 = 4 * v1324;
                do
                {
                  if (v1326 >= 1)
                  {
                    int v1333 = 0;
                    int v1334 = v1313[v1327];
                    uint64_t v1335 = (void *)*v11;
                    uint64_t v1336 = 4 * *(void *)(v1320 + 8 * v1327);
                    uint64_t v1337 = 4 * v1317[v1327];
                    uint64_t v1338 = result;
                    uint64_t v1339 = v1328;
                    do
                    {
                      if (v1334 >= 1)
                      {
                        uint64_t v1340 = (float *)(v1335[19] + v1339);
                        uint64_t v11 = (uint64_t *)a2;
                        uint64_t v1341 = (unsigned int *)(v172[19] + v1338);
                        int v1342 = v1334;
                        do
                        {
                          float *v1340 = (float)*v1341;
                          uint64_t v1340 = (float *)((char *)v1340 + v1336);
                          uint64_t v1341 = (unsigned int *)((char *)v1341 + v1337);
                          --v1342;
                        }
                        while (v1342);
                      }
                      ++v1333;
                      v1339 += v1330;
                      v1338 += v1332;
                    }
                    while (v1333 != v1326);
                  }
                  ++v1315;
                  v1328 += v1329;
                  result += v1331;
                }
                while (v1315 != v1314);
              }
              break;
            case 4:
              uint64_t v1343 = (v173 << 30) - 0x400000000;
              uint64_t v1344 = *a4;
              int v1590 = *(int *)((char *)*a4 + (v1343 >> 30));
              if (v1590 >= 1)
              {
                int v1345 = 0;
                uint64_t v1346 = *a5;
                uint64_t v1347 = v1343 >> 29;
                uint64_t v1348 = *a6;
                uint64_t v1349 = v173 << 30;
                uint64_t v1350 = (v1349 - 0x300000000) >> 29;
                uint64_t v1351 = *(uint64_t *)((char *)*a5 + v1350);
                uint64_t v1352 = *(void *)(*a6 + v1350);
                uint64_t v1353 = v1349 - 0x200000000;
                uint64_t v1354 = v1349 - 0x100000000;
                int v1355 = *(int *)((char *)v1344 + ((v1349 - 0x300000000) >> 30));
                uint64_t v1356 = v1353 >> 32;
                uint64_t v1357 = v1354 >> 32;
                uint64_t v1358 = 4 * v1441;
                uint64_t v1573 = 4 * *(void *)(*a6 + v1347);
                uint64_t result = 4 * v1352;
                uint64_t v1359 = 4 * v1442;
                uint64_t v1557 = 4 * *(uint64_t *)((char *)*a5 + v1347);
                uint64_t v1360 = 4 * v1351;
                do
                {
                  if (v1355 >= 1)
                  {
                    int v1361 = 0;
                    int v1362 = v1344[v1356];
                    uint64_t v1363 = 4 * *(void *)(v1348 + 8 * v1356);
                    uint64_t v1364 = 4 * v1346[v1356];
                    uint64_t v1365 = v1359;
                    uint64_t v1366 = v1358;
                    do
                    {
                      if (v1362 >= 1)
                      {
                        int v1367 = 0;
                        int v1368 = v1344[v1357];
                        uint64_t v1369 = (void *)*v11;
                        uint64_t v1370 = 4 * *(void *)(v1348 + 8 * v1357);
                        uint64_t v1371 = 4 * v1346[v1357];
                        uint64_t v1372 = v1365;
                        uint64_t v1373 = v1366;
                        do
                        {
                          if (v1368 >= 1)
                          {
                            unint64_t v1374 = (float *)(v1369[19] + v1373);
                            unint64_t v1375 = (unsigned int *)(v172[19] + v1372);
                            int v1376 = v1368;
                            do
                            {
                              *unint64_t v1374 = (float)*v1375;
                              unint64_t v1374 = (float *)((char *)v1374 + v1370);
                              unint64_t v1375 = (unsigned int *)((char *)v1375 + v1371);
                              --v1376;
                            }
                            while (v1376);
                          }
                          ++v1367;
                          v1373 += v1363;
                          v1372 += v1364;
                        }
                        while (v1367 != v1362);
                      }
                      ++v1361;
                      v1366 += result;
                      v1365 += v1360;
                    }
                    while (v1361 != v1355);
                  }
                  ++v1345;
                  v1358 += v1573;
                  v1359 += v1557;
                }
                while (v1345 != v1590);
              }
              break;
            case 5:
              uint64_t v1377 = (v173 << 30) - 0x500000000;
              uint64_t v1378 = *a4;
              int v1501 = *(int *)((char *)*a4 + (v1377 >> 30));
              if (v1501 >= 1)
              {
                int v1513 = 0;
                uint64_t v1379 = *a5;
                uint64_t v1380 = v1377 >> 29;
                uint64_t v1381 = *a6;
                uint64_t v1382 = ((v173 << 30) - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1382);
                uint64_t v1383 = *(void *)(*a6 + v1382);
                int v1591 = *(int *)((char *)v1378 + (((v173 << 30) - 0x400000000) >> 30));
                uint64_t v1471 = ((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1384 = ((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1385 = ((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1542 = 4 * v1441;
                uint64_t v1491 = 4 * *(void *)(*a6 + v1380);
                uint64_t v1574 = 4 * v1383;
                uint64_t v1526 = 4 * v1442;
                uint64_t v1481 = 4 * *(uint64_t *)((char *)*a5 + v1380);
                uint64_t v1558 = 4 * result;
                do
                {
                  if (v1591 >= 1)
                  {
                    int v1386 = 0;
                    int v1387 = v1378[v1471];
                    uint64_t v1388 = 4 * *(void *)(v1381 + 8 * v1471);
                    uint64_t v1389 = 4 * v1379[v1471];
                    uint64_t v1390 = v1526;
                    uint64_t v1391 = v1542;
                    do
                    {
                      if (v1387 >= 1)
                      {
                        int v1392 = 0;
                        int v1393 = v1378[v1384];
                        uint64_t v1394 = 4 * *(void *)(v1381 + 8 * v1384);
                        uint64_t v1395 = 4 * v1379[v1384];
                        uint64_t v1396 = v1390;
                        uint64_t v1397 = v1391;
                        do
                        {
                          if (v1393 >= 1)
                          {
                            int v1398 = 0;
                            int v1399 = v1378[v1385];
                            uint64_t v1400 = (void *)*v11;
                            uint64_t v1401 = 4 * *(void *)(v1381 + 8 * v1385);
                            uint64_t v1402 = 4 * v1379[v1385];
                            uint64_t v1403 = v1396;
                            uint64_t v1404 = v1397;
                            do
                            {
                              if (v1399 >= 1)
                              {
                                uint64_t v1405 = (float *)(v1400[19] + v1404);
                                uint64_t v1406 = (unsigned int *)(v172[19] + v1403);
                                LODWORD(result) = v1399;
                                do
                                {
                                  *uint64_t v1405 = (float)*v1406;
                                  uint64_t v1405 = (float *)((char *)v1405 + v1401);
                                  uint64_t v1406 = (unsigned int *)((char *)v1406 + v1402);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1398;
                              v1404 += v1394;
                              v1403 += v1395;
                            }
                            while (v1398 != v1393);
                          }
                          ++v1392;
                          v1397 += v1388;
                          v1396 += v1389;
                        }
                        while (v1392 != v1387);
                      }
                      ++v1386;
                      v1391 += v1574;
                      v1390 += v1558;
                    }
                    while (v1386 != v1591);
                  }
                  v1542 += v1491;
                  v1526 += v1481;
                  ++v1513;
                }
                while (v1513 != v1501);
              }
              break;
            default:
              uint64_t v1256 = (char *)a4[1];
              LODWORD(v1257) = 1;
              uint64_t v1258 = -20;
              do
              {
                uint64_t v1257 = *(int *)&v1256[v1258] * (uint64_t)(int)v1257;
                v1258 += 4;
              }
              while (v1258);
              unint64_t v1436 = v172[6];
              if (v1436)
              {
                uint64_t result = 0;
                uint64_t v1259 = (v173 << 30) - 0x500000000;
                uint64_t v1260 = *a4;
                uint64_t v1490 = *v8;
                uint64_t v1261 = *a5;
                uint64_t v1421 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1426 = ((unint64_t)(v1256 - (char *)*a4) >> 2) - 1;
                uint64_t v1262 = *a6;
                int v1500 = *(int *)((char *)*a4 + (v1259 >> 30));
                uint64_t v1416 = ((v173 << 30) - 0x400000000) >> 32;
                uint64_t v1263 = ((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1264 = ((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1480 = 4 * *(void *)(*a6 + (v1259 >> 29));
                uint64_t v1461 = ((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1470 = 4 * *(uint64_t *)((char *)*a5 + (v1259 >> 29));
                uint64_t v1431 = v1257;
                do
                {
                  uint64_t v1265 = v1426;
                  uint64_t v1453 = result;
                  uint64_t v1266 = 0;
                  if ((v1426 & 0x80000000) != 0)
                  {
                    uint64_t v1267 = v1421;
                  }
                  else
                  {
                    uint64_t v1267 = v1421;
                    do
                    {
                      ldiv_t v1268 = ldiv((int)result, v1260[v1265]);
                      LODWORD(result) = v1268.quot;
                      v1266 += v1261[v1265--] * v1268.rem;
                    }
                    while (v1265 != -1);
                  }
                  uint64_t v1269 = 0;
                  if ((v1267 & 0x80000000) == 0)
                  {
                    int v1270 = v1453;
                    do
                    {
                      ldiv_t v1271 = ldiv(v1270, *(int *)(v1490 + 4 * v1267));
                      int v1270 = v1271.quot;
                      v1269 += *(void *)(v1262 + 8 * v1267--) * v1271.rem;
                    }
                    while (v1267 != -1);
                  }
                  if (v1500 >= 1)
                  {
                    int v1272 = 0;
                    int v1589 = v1260[v1416];
                    uint64_t v1541 = 4 * (v1269 + v1441);
                    uint64_t v1572 = 4 * *(void *)(v1262 + 8 * v1416);
                    uint64_t v1525 = 4 * (v1266 + v1442);
                    uint64_t v1556 = 4 * v1261[v1416];
                    do
                    {
                      int v1512 = v1272;
                      if (v1589 >= 1)
                      {
                        int v1273 = 0;
                        int v1274 = v1260[v1461];
                        uint64_t v1275 = 4 * *(void *)(v1262 + 8 * v1461);
                        uint64_t v1276 = 4 * v1261[v1461];
                        uint64_t v1277 = v1525;
                        uint64_t v1278 = v1541;
                        do
                        {
                          if (v1274 >= 1)
                          {
                            int v1279 = 0;
                            int v1280 = v1260[v1263];
                            uint64_t v1281 = 4 * *(void *)(v1262 + 8 * v1263);
                            uint64_t v1282 = 4 * v1261[v1263];
                            uint64_t v1283 = v1277;
                            uint64_t v1284 = v1278;
                            do
                            {
                              if (v1280 >= 1)
                              {
                                int v1285 = 0;
                                int v1286 = v1260[v1264];
                                uint64_t v1287 = (void *)*v11;
                                uint64_t v1288 = 4 * *(void *)(v1262 + 8 * v1264);
                                uint64_t v1289 = 4 * v1261[v1264];
                                uint64_t v1290 = v1283;
                                uint64_t v1291 = v1284;
                                do
                                {
                                  if (v1286 >= 1)
                                  {
                                    int v1292 = (float *)(v1287[19] + v1291);
                                    uint64_t v1293 = (unsigned int *)(v172[19] + v1290);
                                    int v1294 = v1286;
                                    do
                                    {
                                      *int v1292 = (float)*v1293;
                                      int v1292 = (float *)((char *)v1292 + v1288);
                                      uint64_t v1293 = (unsigned int *)((char *)v1293 + v1289);
                                      --v1294;
                                    }
                                    while (v1294);
                                  }
                                  ++v1285;
                                  v1291 += v1281;
                                  v1290 += v1282;
                                }
                                while (v1285 != v1280);
                              }
                              ++v1279;
                              v1284 += v1275;
                              v1283 += v1276;
                            }
                            while (v1279 != v1274);
                          }
                          ++v1273;
                          v1278 += v1572;
                          v1277 += v1556;
                        }
                        while (v1273 != v1589);
                      }
                      int v1272 = v1512 + 1;
                      v1541 += v1480;
                      v1525 += v1470;
                    }
                    while (v1512 + 1 != v1500);
                  }
                  uint64_t result = v1453 + v1431;
                }
                while (v1436 > v1453 + v1431);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<signed char,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t **a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = *a2;
  uint64_t v9 = a6;
  uint64_t v13 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v14 = v8[6];
          if (v14)
          {
            BOOL v15 = (void *)v8[19];
            BOOL v16 = **(unsigned char **)(*(void *)v13 + 152) != 0;
            uint64_t result = (uint64_t)memset(v15, v16, v14);
          }
          break;
        case 1:
          uint64_t v38 = *(void *)(*(void *)result + 160);
          if (v38)
          {
            uint64_t v39 = *(unsigned __int8 **)(*(void *)result + 152);
            uint64_t v40 = (BOOL *)v8[19];
            do
            {
              int v41 = *v39++;
              *v40++ = v41 != 0;
              --v38;
            }
            while (v38);
          }
          break;
        case 2:
          uint64_t v42 = *a7;
          uint64_t v43 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v44 = **a4;
              if ((int)v44 >= 1)
              {
                uint64_t v45 = (BOOL *)v8[19];
                uint64_t v46 = **a5;
                uint64_t v47 = (unsigned char *)(*(void *)(v43 + 152) + v42);
                do
                {
                  *v45++ = *v47 != 0;
                  v47 += v46;
                  --v44;
                }
                while (v44);
              }
              break;
            case 2:
              int v183 = **a4;
              if (v183 >= 1)
              {
                int v184 = 0;
                uint64_t v185 = 0;
                uint64_t v186 = *(void *)(v43 + 152);
                uint64_t v187 = v8[19];
                uint64_t v188 = (*a4)[1];
                uint64_t v189 = (*a5)[1];
                uint64_t v190 = **a5 - v189 * v188;
                do
                {
                  int v191 = v188;
                  if ((int)v188 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(unsigned char *)(v186 + v42) != 0;
                      *(unsigned char *)(v187 + v185++) = result;
                      v42 += v189;
                      --v191;
                    }
                    while (v191);
                  }
                  v42 += v190;
                  ++v184;
                }
                while (v184 != v183);
              }
              break;
            case 3:
              ldiv_t v192 = *a4;
              int v193 = **a4;
              if (v193 >= 1)
              {
                int v194 = 0;
                uint64_t result = 0;
                uint64_t v195 = *(void *)(v43 + 152);
                uint64_t v196 = v8[19];
                uint64_t v197 = v192[1];
                uint64_t v198 = *a5;
                uint64_t v199 = (*a5)[1];
                uint64_t v200 = **a5 - v199 * v197;
                do
                {
                  if ((int)v197 < 1)
                  {
                    uint64_t v207 = result;
                  }
                  else
                  {
                    int v201 = 0;
                    uint64_t v202 = v192[2];
                    int v203 = *a5;
                    uint64_t v204 = v199 - v198[2] * v202;
                    do
                    {
                      if ((int)v202 < 1)
                      {
                        uint64_t v207 = result;
                      }
                      else
                      {
                        uint64_t v205 = v203[2];
                        int v206 = v202;
                        do
                        {
                          uint64_t v207 = result + 1;
                          *(unsigned char *)(v196 + result) = *(unsigned char *)(v195 + v42) != 0;
                          v42 += v205;
                          ++result;
                          --v206;
                        }
                        while (v206);
                      }
                      v42 += v204;
                      ++v201;
                      uint64_t result = v207;
                    }
                    while (v201 != v197);
                  }
                  v42 += v200;
                  ++v194;
                  uint64_t result = v207;
                }
                while (v194 != v193);
              }
              break;
            case 4:
              uint64_t v208 = *a4;
              int v209 = **a4;
              if (v209 >= 1)
              {
                int v210 = 0;
                uint64_t result = 0;
                uint64_t v211 = *(void *)(v43 + 152);
                uint64_t v212 = v8[19];
                uint64_t v213 = v208[1];
                uint64_t v214 = *a5;
                uint64_t v215 = (*a5)[1];
                uint64_t v216 = **a5 - v215 * v213;
                do
                {
                  if ((int)v213 < 1)
                  {
                    uint64_t v227 = result;
                  }
                  else
                  {
                    int v217 = 0;
                    uint64_t v218 = v208[2];
                    int v219 = *a5;
                    uint64_t v220 = v215 - v214[2] * v218;
                    do
                    {
                      if ((int)v218 < 1)
                      {
                        uint64_t v227 = result;
                      }
                      else
                      {
                        int v221 = 0;
                        uint64_t v222 = v208[3];
                        uint64_t v223 = *a5;
                        uint64_t v224 = v219[2] - v219[3] * v222;
                        do
                        {
                          if ((int)v222 < 1)
                          {
                            uint64_t v227 = result;
                          }
                          else
                          {
                            uint64_t v225 = v223[3];
                            int v226 = v222;
                            do
                            {
                              uint64_t v227 = result + 1;
                              *(unsigned char *)(v212 + result) = *(unsigned char *)(v211 + v42) != 0;
                              v42 += v225;
                              ++result;
                              --v226;
                            }
                            while (v226);
                          }
                          v42 += v224;
                          ++v221;
                          uint64_t result = v227;
                        }
                        while (v221 != v218);
                      }
                      v42 += v220;
                      ++v217;
                      uint64_t result = v227;
                    }
                    while (v217 != v213);
                  }
                  v42 += v216;
                  ++v210;
                  uint64_t result = v227;
                }
                while (v210 != v209);
              }
              break;
            default:
              uint64_t v173 = v8[6];
              if (v173)
              {
                uint64_t v174 = 0;
                uint64_t v175 = *(void *)(v43 + 152) + v42;
                uint64_t v176 = v8[19];
                uint64_t v177 = *a4;
                uint64_t v178 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v179 = *a5;
                do
                {
                  uint64_t v180 = 0;
                  if ((v178 & 0x80000000) == 0)
                  {
                    uint64_t v181 = v178;
                    LODWORD(result) = v174;
                    do
                    {
                      ldiv_t v182 = ldiv((int)result, v177[v181]);
                      uint64_t result = v182.quot;
                      v180 += v179[v181--] * v182.rem;
                    }
                    while (v181 != -1);
                  }
                  *(unsigned char *)(v176 + v174++) = *(unsigned char *)(v175 + v180) != 0;
                }
                while (v174 != v173);
              }
              break;
          }
          break;
        case 3:
          uint64_t v48 = *a7;
          uint64_t v49 = *a8;
          uint64_t v50 = *(void **)result;
          uint64_t v51 = v50[1] - *v50;
          switch(v51 >> 2)
          {
            case 1:
              uint64_t v52 = (v51 << 30) - 0x100000000;
              int v53 = *(int *)((char *)*a4 + (v52 >> 30));
              if (v53 >= 1)
              {
                uint64_t v54 = v52 >> 29;
                uint64_t v55 = *(uint64_t *)((char *)*a5 + (v52 >> 29));
                uint64_t v56 = *(void *)(*a6 + v54);
                uint64_t v57 = (BOOL *)(v8[19] + v49);
                uint64_t v58 = (unsigned char *)(v50[19] + v48);
                do
                {
                  *uint64_t v57 = *v58 != 0;
                  v58 += v55;
                  v57 += v56;
                  --v53;
                }
                while (v53);
              }
              break;
            case 2:
              uint64_t v568 = (v51 << 30) - 0x200000000;
              int v569 = *(int *)((char *)*a4 + (v568 >> 30));
              if (v569 >= 1)
              {
                int v570 = 0;
                uint64_t v571 = v568 >> 29;
                uint64_t v572 = *(uint64_t *)((char *)*a5 + (v568 >> 29));
                uint64_t v573 = *(void *)(*a6 + v571);
                uint64_t v574 = (v51 << 30) - 0x100000000;
                uint64_t result = v574 >> 29;
                uint64_t v575 = *(uint64_t *)((char *)*a5 + (v574 >> 29));
                uint64_t v576 = *(void *)(*a6 + (v574 >> 29));
                int v577 = *(int *)((char *)*a4 + (v574 >> 30));
                do
                {
                  if (v577 >= 1)
                  {
                    uint64_t v578 = v8[19];
                    uint64_t v579 = v50[19];
                    LODWORD(result) = v577;
                    do
                    {
                      *(unsigned char *)(v578 + v49) = *(unsigned char *)(v579 + v48) != 0;
                      v578 += v576;
                      v579 += v575;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v48 += v572;
                  v49 += v573;
                  ++v570;
                }
                while (v570 != v569);
              }
              break;
            case 3:
              uint64_t v580 = (v51 << 30) - 0x300000000;
              uint64_t v581 = *a4;
              int v582 = *(int *)((char *)*a4 + (v580 >> 30));
              if (v582 >= 1)
              {
                int v583 = 0;
                uint64_t v584 = v51 << 30;
                uint64_t v585 = *a5;
                uint64_t v586 = v580 >> 29;
                uint64_t v587 = *(uint64_t *)((char *)*a5 + (v580 >> 29));
                uint64_t v588 = *a6;
                uint64_t v589 = *(void *)(*a6 + v586);
                uint64_t v590 = v584 - 0x200000000;
                uint64_t v591 = (v584 - 0x200000000) >> 29;
                uint64_t v592 = v584 - 0x100000000;
                uint64_t v593 = *(uint64_t *)((char *)*a5 + v591);
                uint64_t v594 = *(void *)(*a6 + v591);
                int v595 = *(int *)((char *)v581 + (v590 >> 30));
                uint64_t result = v592 >> 32;
                do
                {
                  if (v595 >= 1)
                  {
                    int v596 = 0;
                    uint64_t v597 = v585[result];
                    uint64_t v598 = *(void *)(v588 + 8 * result);
                    uint64_t v599 = v48;
                    int v600 = v581[result];
                    uint64_t v601 = v49;
                    uint64_t v602 = *a2;
                    do
                    {
                      if (v600 >= 1)
                      {
                        uint64_t v603 = v602[19];
                        uint64_t v604 = v50[19];
                        int v605 = v600;
                        do
                        {
                          *(unsigned char *)(v603 + v601) = *(unsigned char *)(v604 + v599) != 0;
                          v603 += v598;
                          v604 += v597;
                          --v605;
                        }
                        while (v605);
                      }
                      v599 += v593;
                      v601 += v594;
                      ++v596;
                    }
                    while (v596 != v595);
                  }
                  v48 += v587;
                  v49 += v589;
                  ++v583;
                }
                while (v583 != v582);
              }
              break;
            case 4:
              uint64_t v606 = (v51 << 30) - 0x400000000;
              int v607 = *a4;
              int v1524 = *(int *)((char *)*a4 + (v606 >> 30));
              if (v1524 >= 1)
              {
                int v608 = 0;
                uint64_t v609 = *a5;
                uint64_t v610 = v606 >> 29;
                uint64_t v1491 = *(uint64_t *)((char *)*a5 + v610);
                uint64_t v611 = *a6;
                uint64_t v1508 = *(void *)(*a6 + v610);
                uint64_t v612 = v51 << 30;
                uint64_t v613 = (v51 << 30) - 0x300000000;
                uint64_t v614 = *(uint64_t *)((char *)*a5 + (v613 >> 29));
                uint64_t v615 = *(void *)(*a6 + (v613 >> 29));
                int v616 = *(int *)((char *)v607 + (v613 >> 30));
                uint64_t v1474 = (v612 - 0x200000000) >> 32;
                uint64_t v617 = (v612 - 0x100000000) >> 32;
                do
                {
                  uint64_t result = v49;
                  uint64_t v618 = v48;
                  if (v616 >= 1)
                  {
                    int v619 = 0;
                    uint64_t v620 = v609[v1474];
                    uint64_t v621 = *(void *)(v611 + 8 * v1474);
                    uint64_t v622 = v48;
                    int v623 = v607[v1474];
                    uint64_t v624 = v49;
                    do
                    {
                      if (v623 >= 1)
                      {
                        int v625 = 0;
                        uint64_t v626 = v609[v617];
                        uint64_t v627 = *(void *)(v611 + 8 * v617);
                        uint64_t v628 = v622;
                        int v629 = v607[v617];
                        uint64_t v630 = v624;
                        int v631 = *a2;
                        do
                        {
                          if (v629 >= 1)
                          {
                            uint64_t v632 = v631[19];
                            uint64_t v633 = v50[19];
                            int v634 = v629;
                            do
                            {
                              *(unsigned char *)(v632 + v630) = *(unsigned char *)(v633 + v628) != 0;
                              v632 += v627;
                              v633 += v626;
                              --v634;
                            }
                            while (v634);
                          }
                          v628 += v620;
                          v630 += v621;
                          ++v625;
                        }
                        while (v625 != v623);
                      }
                      v622 += v614;
                      v624 += v615;
                      ++v619;
                    }
                    while (v619 != v616);
                  }
                  uint64_t v48 = v618 + v1491;
                  uint64_t v49 = result + v1508;
                  ++v608;
                }
                while (v608 != v1524);
              }
              break;
            case 5:
              uint64_t v635 = (v51 << 30) - 0x500000000;
              uint64_t v636 = *a4;
              int v1450 = *(int *)((char *)*a4 + (v635 >> 30));
              if (v1450 >= 1)
              {
                int v1462 = 0;
                uint64_t v637 = v51 << 30;
                uint64_t v638 = *a5;
                uint64_t v639 = v635 >> 29;
                uint64_t v640 = *a6;
                uint64_t v1430 = *(void *)(*a6 + v639);
                uint64_t v1440 = *(uint64_t *)((char *)*a5 + v639);
                uint64_t v641 = (v637 - 0x400000000) >> 29;
                uint64_t v1492 = *(void *)(*a6 + v641);
                uint64_t v1509 = *(uint64_t *)((char *)*a5 + v641);
                int v1525 = *(int *)((char *)v636 + ((v637 - 0x400000000) >> 30));
                uint64_t v1420 = (v637 - 0x300000000) >> 32;
                uint64_t v1475 = (v637 - 0x200000000) >> 32;
                uint64_t v642 = (v637 - 0x100000000) >> 32;
                do
                {
                  uint64_t v1388 = v49;
                  uint64_t v1398 = v48;
                  if (v1525 >= 1)
                  {
                    int v643 = 0;
                    uint64_t v644 = v638[v1420];
                    uint64_t v645 = *(void *)(v640 + 8 * v1420);
                    uint64_t result = v49;
                    uint64_t v646 = v48;
                    int v647 = v636[v1420];
                    do
                    {
                      if (v647 >= 1)
                      {
                        int v648 = 0;
                        uint64_t v649 = v638[v1475];
                        uint64_t v650 = *(void *)(v640 + 8 * v1475);
                        uint64_t v651 = v646;
                        int v652 = v636[v1475];
                        uint64_t v653 = result;
                        do
                        {
                          if (v652 >= 1)
                          {
                            int v654 = 0;
                            uint64_t v655 = v638[v642];
                            uint64_t v656 = *(void *)(v640 + 8 * v642);
                            uint64_t v657 = v651;
                            int v658 = v636[v642];
                            uint64_t v659 = v653;
                            uint64_t v660 = *a2;
                            do
                            {
                              if (v658 >= 1)
                              {
                                uint64_t v661 = v660[19];
                                uint64_t v662 = v50[19];
                                int v663 = v658;
                                do
                                {
                                  *(unsigned char *)(v661 + v659) = *(unsigned char *)(v662 + v657) != 0;
                                  v661 += v656;
                                  v662 += v655;
                                  --v663;
                                }
                                while (v663);
                              }
                              v657 += v649;
                              v659 += v650;
                              ++v654;
                            }
                            while (v654 != v652);
                          }
                          v651 += v644;
                          v653 += v645;
                          ++v648;
                        }
                        while (v648 != v647);
                      }
                      v646 += v1509;
                      result += v1492;
                      ++v643;
                    }
                    while (v643 != v1525);
                  }
                  uint64_t v48 = v1398 + v1440;
                  uint64_t v49 = v1388 + v1430;
                  ++v1462;
                }
                while (v1462 != v1450);
              }
              break;
            default:
              uint64_t v531 = (char *)a4[1];
              LODWORD(v532) = 1;
              uint64_t v533 = -20;
              do
              {
                uint64_t v532 = *(int *)&v531[v533] * (uint64_t)(int)v532;
                v533 += 4;
              }
              while (v533);
              unint64_t v1380 = v50[6];
              if (v1380)
              {
                uint64_t v534 = 0;
                uint64_t v535 = (v51 << 30) - 0x500000000;
                uint64_t v536 = *a4;
                uint64_t v1357 = *v8;
                uint64_t v537 = *a5;
                uint64_t v1362 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1367 = ((unint64_t)(v531 - (char *)*a4) >> 2) - 1;
                uint64_t v538 = *a6;
                uint64_t v1410 = *(void *)(*a6 + (v535 >> 29));
                uint64_t v1419 = *(uint64_t *)((char *)*a5 + (v535 >> 29));
                int v1429 = *(int *)((char *)*a4 + (v535 >> 30));
                uint64_t v1352 = ((v51 << 30) - 0x400000000) >> 32;
                uint64_t v1404 = ((v51 << 30) - 0x300000000) >> 32;
                uint64_t v1473 = ((v51 << 30) - 0x200000000) >> 32;
                uint64_t v539 = ((v51 << 30) - 0x100000000) >> 32;
                uint64_t v1387 = *a8;
                uint64_t v1397 = *a7;
                uint64_t v1372 = v532;
                do
                {
                  uint64_t v540 = v1367;
                  if ((v1367 & 0x80000000) != 0)
                  {
                    uint64_t v541 = 0;
                  }
                  else
                  {
                    uint64_t v541 = 0;
                    LODWORD(result) = v534;
                    do
                    {
                      ldiv_t v542 = ldiv((int)result, v536[v540]);
                      uint64_t result = v542.quot;
                      v541 += v537[v540--] * v542.rem;
                    }
                    while (v540 != -1);
                  }
                  uint64_t v543 = v1362;
                  uint64_t v1383 = v534;
                  uint64_t v544 = 0;
                  if ((v1362 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v534;
                    do
                    {
                      ldiv_t v545 = ldiv((int)result, *(int *)(v1357 + 4 * v543));
                      uint64_t result = v545.quot;
                      v544 += *(void *)(v538 + 8 * v543--) * v545.rem;
                    }
                    while (v543 != -1);
                  }
                  if (v1429 >= 1)
                  {
                    int v546 = 0;
                    uint64_t v1461 = v541 + v1397;
                    uint64_t v1449 = v544 + v1387;
                    uint64_t v1490 = *(void *)(v538 + 8 * v1352);
                    uint64_t v1507 = v537[v1352];
                    int v1523 = v536[v1352];
                    do
                    {
                      int v1439 = v546;
                      if (v1523 >= 1)
                      {
                        int v547 = 0;
                        uint64_t v548 = v537[v1404];
                        uint64_t v549 = *(void *)(v538 + 8 * v1404);
                        uint64_t v551 = v1449;
                        uint64_t v550 = v1461;
                        uint64_t result = v536[v1404];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            int v552 = 0;
                            uint64_t v553 = v537[v1473];
                            uint64_t v554 = *(void *)(v538 + 8 * v1473);
                            uint64_t v555 = v550;
                            int v556 = v536[v1473];
                            uint64_t v557 = v551;
                            do
                            {
                              if (v556 >= 1)
                              {
                                int v558 = 0;
                                uint64_t v559 = v537[v539];
                                uint64_t v560 = *(void *)(v538 + 8 * v539);
                                uint64_t v561 = v555;
                                int v562 = v536[v539];
                                uint64_t v563 = v557;
                                uint64_t v564 = *a2;
                                do
                                {
                                  if (v562 >= 1)
                                  {
                                    uint64_t v565 = v564[19];
                                    uint64_t v566 = v50[19];
                                    int v567 = v562;
                                    do
                                    {
                                      *(unsigned char *)(v565 + v563) = *(unsigned char *)(v566 + v561) != 0;
                                      v565 += v560;
                                      v566 += v559;
                                      --v567;
                                    }
                                    while (v567);
                                  }
                                  v561 += v553;
                                  v563 += v554;
                                  ++v558;
                                }
                                while (v558 != v556);
                              }
                              v555 += v548;
                              v557 += v549;
                              ++v552;
                            }
                            while (v552 != result);
                          }
                          v550 += v1507;
                          v551 += v1490;
                          ++v547;
                        }
                        while (v547 != v1523);
                      }
                      v1461 += v1419;
                      v1449 += v1410;
                      int v546 = v1439 + 1;
                    }
                    while (v1439 + 1 != v1429);
                  }
                  v534 += v1372;
                }
                while (v1380 > v1383 + v1372);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v17 = 0;
            char v18 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v19 = v8[19];
            do
              *(unsigned char *)(v19 + v17++) = v18;
            while ((*a2)[6] > v17);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v59 = *a7;
          uint64_t v60 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v61 = 0;
                uint64_t v62 = *(void *)(v60 + 152);
                uint64_t v63 = v8[19];
                do
                {
                  *(unsigned char *)(v63 + v61) = *(unsigned char *)(v62 + v59);
                  v59 += **a5;
                  ++v61;
                }
                while (**a4 > (int)v61);
              }
              break;
            case 2:
              uint64_t v237 = *a4;
              int v238 = **a4;
              if (v238 >= 1)
              {
                int v239 = 0;
                uint64_t v240 = 0;
                uint64_t v241 = *(void *)(v60 + 152);
                uint64_t v242 = v8[19];
                do
                {
                  int v243 = v237[1];
                  if (v243 < 1)
                  {
                    uint64_t v244 = *a5;
                    uint64_t v245 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v242 + v240 + result) = *(unsigned char *)(v241 + v59);
                      uint64_t v244 = *a5;
                      uint64_t v245 = (*a5)[1];
                      v59 += v245;
                      uint64_t v237 = *a4;
                      int v243 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v243);
                    int v238 = *v237;
                    v240 += result;
                  }
                  uint64_t v59 = *v244 + v59 - v245 * v243;
                  ++v239;
                }
                while (v239 < v238);
              }
              break;
            case 3:
              ldiv_t v246 = *a4;
              int v247 = **a4;
              if (v247 >= 1)
              {
                int v248 = 0;
                uint64_t v249 = 0;
                uint64_t v250 = *(void *)(v60 + 152);
                uint64_t v251 = v8[19];
                do
                {
                  int v252 = v246[1];
                  if (v252 < 1)
                  {
                    uint64_t v256 = *a5;
                    uint64_t v257 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v252; ++i)
                    {
                      int v254 = v246[2];
                      if (v254 < 1)
                      {
                        uint64_t v256 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v255 = 0;
                        do
                        {
                          *(unsigned char *)(v251 + v249 + v255) = *(unsigned char *)(v250 + v59);
                          uint64_t v256 = *a5;
                          uint64_t result = (*a5)[2];
                          v59 += result;
                          ldiv_t v246 = *a4;
                          int v254 = (*a4)[2];
                          ++v255;
                        }
                        while ((int)v255 < v254);
                        v249 += v255;
                      }
                      uint64_t v257 = v256[1];
                      uint64_t v59 = v257 + v59 - result * v254;
                      int v252 = v246[1];
                    }
                    int v247 = *v246;
                  }
                  uint64_t v59 = *v256 + v59 - v257 * v252;
                  ++v248;
                }
                while (v248 < v247);
              }
              break;
            case 4:
              int v258 = *a4;
              int v259 = **a4;
              if (v259 >= 1)
              {
                int v260 = 0;
                uint64_t v261 = 0;
                uint64_t v262 = *(void *)(v60 + 152);
                uint64_t v263 = v8[19];
                do
                {
                  int v264 = v258[1];
                  if (v264 < 1)
                  {
                    int v270 = *a5;
                    uint64_t v272 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v264; ++j)
                    {
                      int v266 = v258[2];
                      if (v266 < 1)
                      {
                        int v270 = *a5;
                        uint64_t v271 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v266; ++k)
                        {
                          int v268 = v258[3];
                          if (v268 < 1)
                          {
                            int v270 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v269 = 0;
                            do
                            {
                              *(unsigned char *)(v263 + v261 + v269) = *(unsigned char *)(v262 + v59);
                              int v270 = *a5;
                              uint64_t result = (*a5)[3];
                              v59 += result;
                              int v258 = *a4;
                              int v268 = (*a4)[3];
                              ++v269;
                            }
                            while ((int)v269 < v268);
                            v261 += v269;
                          }
                          uint64_t v271 = v270[2];
                          uint64_t v59 = v271 + v59 - result * v268;
                          int v266 = v258[2];
                        }
                      }
                      uint64_t v272 = v270[1];
                      uint64_t v59 = v272 + v59 - v271 * v266;
                      int v264 = v258[1];
                    }
                    int v259 = *v258;
                  }
                  uint64_t v59 = *v270 + v59 - v272 * v264;
                  ++v260;
                }
                while (v260 < v259);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v228 = 0;
                uint64_t v229 = *(void *)(v60 + 152) + v59;
                uint64_t v230 = v8[19];
                do
                {
                  int v231 = *a4;
                  unint64_t v232 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v233 = 0;
                  uint64_t v234 = (v232 - 1);
                  if ((int)v232 - 1 >= 0)
                  {
                    uint64_t v235 = *a5;
                    LODWORD(result) = v228;
                    do
                    {
                      ldiv_t v236 = ldiv((int)result, v231[v234]);
                      uint64_t result = v236.quot;
                      v233 += v235[v234--] * v236.rem;
                    }
                    while (v234 != -1);
                  }
                  *(unsigned char *)(v230 + v228++) = *(unsigned char *)(v229 + v233);
                }
                while (v228 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v64 = *a7;
          uint64_t v65 = *a8;
          uint64_t v66 = *(void **)result;
          uint64_t v67 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v67 >> 2)
          {
            case 1:
              uint64_t v68 = (v67 << 30) - 0x100000000;
              int v69 = *(int *)((char *)*a4 + (v68 >> 30));
              if (v69 >= 1)
              {
                uint64_t v70 = v68 >> 29;
                uint64_t v71 = *(uint64_t *)((char *)*a5 + (v68 >> 29));
                uint64_t v72 = *(void *)(*a6 + v70);
                int v73 = (unsigned char *)(v8[19] + v65);
                uint64_t v74 = (unsigned char *)(v66[19] + v64);
                do
                {
                  *int v73 = *v74;
                  v74 += v71;
                  v73 += v72;
                  --v69;
                }
                while (v69);
              }
              break;
            case 2:
              uint64_t v686 = (v67 << 30) - 0x200000000;
              int v687 = *(int *)((char *)*a4 + (v686 >> 30));
              if (v687 >= 1)
              {
                int v688 = 0;
                uint64_t v689 = v686 >> 29;
                uint64_t v690 = *(uint64_t *)((char *)*a5 + (v686 >> 29));
                uint64_t v691 = *(void *)(*a6 + v689);
                do
                {
                  uint64_t v692 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                  int v693 = *(int *)((char *)*a4 + (v692 >> 30));
                  if (v693 >= 1)
                  {
                    uint64_t v694 = v692 >> 29;
                    uint64_t v695 = *(uint64_t *)((char *)*a5 + (v692 >> 29));
                    uint64_t v696 = *(void *)(*a6 + v694);
                    uint64_t v697 = (*a2)[19];
                    uint64_t v698 = *(void *)(*(void *)v13 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v698 + v64);
                      *(unsigned char *)(v697 + v65) = result;
                      v697 += v696;
                      v698 += v695;
                      --v693;
                    }
                    while (v693);
                  }
                  v64 += v690;
                  v65 += v691;
                  ++v688;
                }
                while (v688 != v687);
              }
              break;
            case 3:
              uint64_t v699 = (v67 << 30) - 0x300000000;
              int v700 = *(int *)((char *)*a4 + (v699 >> 30));
              if (v700 >= 1)
              {
                int v701 = 0;
                uint64_t v702 = v699 >> 29;
                uint64_t v703 = *(uint64_t *)((char *)*a5 + (v699 >> 29));
                uint64_t v704 = *(void *)(*a6 + v702);
                do
                {
                  uint64_t v705 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x200000000;
                  int v706 = *(int *)((char *)*a4 + (v705 >> 30));
                  if (v706 >= 1)
                  {
                    int v707 = 0;
                    uint64_t v708 = v705 >> 29;
                    uint64_t v709 = *(uint64_t *)((char *)*a5 + (v705 >> 29));
                    uint64_t v710 = *(void *)(*v9 + v708);
                    uint64_t result = v64;
                    uint64_t v711 = v65;
                    do
                    {
                      uint64_t v712 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                      int v713 = *(int *)((char *)*a4 + (v712 >> 30));
                      if (v713 >= 1)
                      {
                        uint64_t v714 = v712 >> 29;
                        uint64_t v715 = *(uint64_t *)((char *)*a5 + (v712 >> 29));
                        uint64_t v716 = *(void *)(*v9 + v714);
                        uint64_t v717 = (*a2)[19];
                        uint64_t v718 = *(void *)(*(void *)v13 + 152);
                        do
                        {
                          *(unsigned char *)(v717 + v711) = *(unsigned char *)(v718 + result);
                          v717 += v716;
                          v718 += v715;
                          --v713;
                        }
                        while (v713);
                      }
                      result += v709;
                      v711 += v710;
                      ++v707;
                    }
                    while (v707 != v706);
                  }
                  v64 += v703;
                  v65 += v704;
                  ++v701;
                }
                while (v701 != v700);
              }
              break;
            case 4:
              uint64_t v719 = a4;
              uint64_t v720 = a5;
              uint64_t v721 = a6;
              uint64_t v722 = *a7;
              uint64_t v723 = *a8;
              goto LABEL_558;
            case 5:
              uint64_t v724 = (v67 << 30) - 0x500000000;
              int v725 = *(int *)((char *)*a4 + (v724 >> 30));
              if (v725 >= 1)
              {
                uint64_t v726 = v724 >> 29;
                uint64_t v727 = *(uint64_t *)((char *)*a5 + v726);
                uint64_t v728 = *(void *)(*a6 + v726);
                do
                {
                  v64 += v727;
                  v65 += v728;
                  --v725;
                }
                while (v725);
              }
              break;
            default:
              LODWORD(v664) = 1;
              uint64_t v665 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v664 = a4[1][v665++] * (uint64_t)(int)v664;
              while (v665 * 4);
              if (v66[6])
              {
                uint64_t result = 0;
                uint64_t v1451 = *a8;
                uint64_t v1463 = *a7;
                uint64_t v1476 = v664;
                do
                {
                  uint64_t v666 = *a4;
                  unint64_t v667 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v668 = (v667 - 1);
                  int v1493 = v66;
                  uint64_t v1526 = result;
                  uint64_t v669 = 0;
                  if ((int)v667 - 1 >= 0)
                  {
                    uint64_t v670 = *a5;
                    do
                    {
                      ldiv_t v671 = ldiv((int)result, v666[v668]);
                      LODWORD(result) = v671.quot;
                      v669 += v670[v668--] * v671.rem;
                    }
                    while (v668 != -1);
                  }
                  uint64_t v672 = **a2;
                  unint64_t v673 = (unint64_t)((*a2)[1] - v672) >> 2;
                  uint64_t v674 = *v9;
                  uint64_t v675 = 0;
                  uint64_t v676 = (v673 - 1);
                  if ((int)v673 - 1 >= 0)
                  {
                    int quot = v1526;
                    do
                    {
                      ldiv_t v678 = ldiv(quot, *(int *)(v672 + 4 * v676));
                      int quot = v678.quot;
                      v675 += *(void *)(v674 + 8 * v676--) * v678.rem;
                    }
                    while (v676 != -1);
                  }
                  uint64_t v66 = v1493;
                  uint64_t v679 = ((v66[1] - *v66) << 30) - 0x500000000;
                  int v680 = *(int *)((char *)v666 + (v679 >> 30));
                  if (v680 >= 1)
                  {
                    uint64_t v681 = v669 + v1463;
                    uint64_t v682 = v679 >> 29;
                    uint64_t v683 = *(uint64_t *)((char *)*a5 + v682);
                    uint64_t v684 = *(void *)(v674 + v682);
                    uint64_t v685 = v675 + v1451;
                    do
                    {
                      v681 += v683;
                      v685 += v684;
                      --v680;
                    }
                    while (v680);
                    uint64_t v66 = *(void **)v13;
                  }
                  uint64_t v9 = a6;
                  uint64_t result = v1526 + v1476;
                }
                while (v66[6] > (unint64_t)(v1526 + v1476));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v20 = v8[6];
          if (v20)
          {
            int v21 = **(char **)(*(void *)result + 152);
            unint64_t v22 = (_DWORD *)v8[19];
            do
            {
              *v22++ = v21;
              --v20;
            }
            while (v20);
          }
          break;
        case 1:
          uint64_t v75 = *(void *)(*(void *)result + 160);
          if (v75)
          {
            uint64_t v76 = *(char **)(*(void *)result + 152);
            uint64_t v77 = (_DWORD *)v8[19];
            do
            {
              int v78 = *v76++;
              *v77++ = v78;
              --v75;
            }
            while (v75);
          }
          break;
        case 2:
          uint64_t v79 = *a7;
          uint64_t v80 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v81 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v82 = 0;
                uint64_t v83 = v8[19];
                uint64_t v84 = **a5;
                uint64_t v85 = (char *)(*(void *)(v80 + 152) + v79);
                do
                {
                  *(_DWORD *)(v83 + 4 * v82) = *v85;
                  v85 += v84;
                  ++v82;
                }
                while (*v81 > (int)v82);
              }
              break;
            case 2:
              uint64_t v283 = *a4;
              int v284 = **a4;
              if (v284 >= 1)
              {
                int v285 = 0;
                uint64_t v286 = 0;
                uint64_t v287 = *(void *)(v80 + 152);
                uint64_t v288 = v8[19];
                uint64_t v289 = **a5;
                uint64_t v290 = (*a5)[1];
                int v291 = v283[1];
                do
                {
                  if (v291 >= 1)
                  {
                    uint64_t v292 = 0;
                    do
                    {
                      *(_DWORD *)(v288 + 4 * v286 + 4 * v292) = *(char *)(v287 + v79);
                      v79 += v290;
                      int v291 = v283[1];
                      ++v292;
                    }
                    while ((int)v292 < v291);
                    int v284 = *v283;
                    v286 += v292;
                  }
                  uint64_t result = v291;
                  uint64_t v79 = v79 + v289 - v290 * v291;
                  ++v285;
                }
                while (v285 < v284);
              }
              break;
            case 3:
              uint64_t v293 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v294 = 0;
                uint64_t v295 = 0;
                uint64_t v296 = *(void *)(v80 + 152);
                uint64_t v297 = v8[19];
                uint64_t v298 = *a5;
                uint64_t v299 = **a5;
                uint64_t v300 = (*a5)[1];
                int v301 = v293[1];
                do
                {
                  if (v301 >= 1)
                  {
                    int v302 = 0;
                    int v303 = *a5;
                    uint64_t v304 = v298[2];
                    int v305 = v293[2];
                    do
                    {
                      if (v305 >= 1)
                      {
                        uint64_t v306 = 0;
                        uint64_t v307 = v303[2];
                        do
                        {
                          *(_DWORD *)(v297 + 4 * v295 + 4 * v306) = *(char *)(v296 + v79);
                          v79 += v307;
                          int v305 = v293[2];
                          ++v306;
                        }
                        while ((int)v306 < v305);
                        int v301 = v293[1];
                        v295 += v306;
                      }
                      uint64_t v79 = v79 + v300 - v304 * v305;
                      ++v302;
                    }
                    while (v302 < v301);
                    uint64_t result = *v293;
                  }
                  uint64_t v79 = v79 + v299 - v300 * v301;
                  ++v294;
                }
                while (v294 < (int)result);
              }
              break;
            case 4:
              uint64_t v308 = *a4;
              int v309 = **a4;
              if (v309 >= 1)
              {
                int v310 = 0;
                uint64_t v311 = 0;
                uint64_t v312 = *(void *)(v80 + 152);
                uint64_t v313 = v8[19];
                uint64_t v314 = *a5;
                uint64_t v315 = **a5;
                uint64_t v316 = (*a5)[1];
                int v317 = v308[1];
                do
                {
                  if (v317 >= 1)
                  {
                    int v318 = 0;
                    int v319 = *a5;
                    uint64_t v320 = v314[2];
                    int v321 = v308[2];
                    do
                    {
                      if (v321 >= 1)
                      {
                        int v322 = 0;
                        uint64_t v323 = *a5;
                        uint64_t v324 = v319[2];
                        uint64_t v325 = v319[3];
                        int v326 = v308[3];
                        do
                        {
                          if (v326 >= 1)
                          {
                            uint64_t v327 = 0;
                            uint64_t v328 = v323[3];
                            do
                            {
                              *(_DWORD *)(v313 + 4 * v311 + 4 * v327) = *(char *)(v312 + v79);
                              v79 += v328;
                              int v326 = v308[3];
                              ++v327;
                            }
                            while ((int)v327 < v326);
                            int v321 = v308[2];
                            v311 += v327;
                          }
                          uint64_t v79 = v79 + v324 - v325 * v326;
                          ++v322;
                        }
                        while (v322 < v321);
                        int v317 = v308[1];
                      }
                      uint64_t v79 = v79 + v316 - v320 * v321;
                      ++v318;
                    }
                    while (v318 < v317);
                    int v309 = *v308;
                  }
                  uint64_t result = v317;
                  uint64_t v79 = v79 + v315 - v316 * v317;
                  ++v310;
                }
                while (v310 < v309);
              }
              break;
            default:
              uint64_t v273 = v8[6];
              if (v273)
              {
                uint64_t v274 = 0;
                uint64_t v275 = *(void *)(v80 + 152) + v79;
                uint64_t v276 = v8[19];
                uint64_t v277 = *a4;
                uint64_t v278 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v279 = *a5;
                do
                {
                  uint64_t v280 = 0;
                  if ((v278 & 0x80000000) == 0)
                  {
                    uint64_t v281 = v278;
                    LODWORD(result) = v274;
                    do
                    {
                      ldiv_t v282 = ldiv((int)result, v277[v281]);
                      uint64_t result = v282.quot;
                      v280 += v279[v281--] * v282.rem;
                    }
                    while (v281 != -1);
                  }
                  *(_DWORD *)(v276 + 4 * v274++) = *(char *)(v275 + v280);
                }
                while (v274 != v273);
              }
              break;
          }
          break;
        case 3:
          uint64_t v86 = *a7;
          uint64_t v1377 = *a8;
          uint64_t v87 = *(void **)result;
          uint64_t v88 = v87[1] - *v87;
          switch(v88 >> 2)
          {
            case 1:
              uint64_t v89 = (v88 << 30) - 0x100000000;
              int v90 = *(int *)((char *)*a4 + (v89 >> 30));
              if (v90 >= 1)
              {
                uint64_t v91 = v89 >> 29;
                uint64_t v92 = *(uint64_t *)((char *)*a5 + (v89 >> 29));
                uint64_t v93 = (_DWORD *)(v8[19] + 4 * v1377);
                uint64_t v94 = (char *)(v87[19] + v86);
                uint64_t v95 = 4 * *(void *)(*a6 + v91);
                do
                {
                  _DWORD *v93 = *v94;
                  v94 += v92;
                  uint64_t v93 = (_DWORD *)((char *)v93 + v95);
                  --v90;
                }
                while (v90);
              }
              break;
            case 2:
              uint64_t v767 = (v88 << 30) - 0x200000000;
              uint64_t v768 = *a4;
              int v769 = *(int *)((char *)*a4 + (v767 >> 30));
              if (v769 >= 1)
              {
                int v770 = 0;
                uint64_t v771 = v767 >> 29;
                uint64_t v772 = *(uint64_t *)((char *)*a5 + (v767 >> 29));
                uint64_t v773 = *(void *)(*a6 + v771);
                uint64_t v774 = (v88 << 30) - 0x100000000;
                uint64_t v775 = *(uint64_t *)((char *)*a5 + (v774 >> 29));
                uint64_t v776 = *(void *)(*a6 + (v774 >> 29));
                uint64_t v777 = v774 >> 32;
                uint64_t v778 = 4 * v1377;
                uint64_t v779 = 4 * v773;
                uint64_t v780 = 4 * v776;
                do
                {
                  uint64_t result = v768[v777];
                  if ((int)result >= 1)
                  {
                    uint64_t v781 = v87[19];
                    uint64_t v782 = (_DWORD *)(v8[19] + v778);
                    do
                    {
                      *uint64_t v782 = *(char *)(v781 + v86);
                      uint64_t v782 = (_DWORD *)((char *)v782 + v780);
                      v781 += v775;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v86 += v772;
                  ++v770;
                  v778 += v779;
                }
                while (v770 != v769);
              }
              break;
            case 3:
              uint64_t v783 = (v88 << 30) - 0x300000000;
              uint64_t v784 = *a4;
              int v785 = *(int *)((char *)*a4 + (v783 >> 30));
              if (v785 >= 1)
              {
                int v786 = 0;
                int v787 = *a5;
                uint64_t v788 = v783 >> 29;
                uint64_t v789 = *(uint64_t *)((char *)*a5 + (v783 >> 29));
                uint64_t v790 = v88 << 30;
                uint64_t v791 = *a6;
                uint64_t v792 = *(void *)(*a6 + v788);
                uint64_t v793 = (v790 - 0x200000000) >> 32;
                uint64_t v794 = (v790 - 0x200000000) >> 29;
                uint64_t v795 = v790 - 0x100000000;
                uint64_t v796 = *(uint64_t *)((char *)*a5 + v794);
                uint64_t v797 = *(void *)(*a6 + v794);
                uint64_t v798 = v795 >> 32;
                uint64_t v799 = 4 * v1377;
                uint64_t result = 4 * v792;
                uint64_t v800 = 4 * v797;
                do
                {
                  int v801 = v784[v793];
                  if (v801 >= 1)
                  {
                    int v802 = 0;
                    uint64_t v803 = v787[v798];
                    int v804 = *a2;
                    uint64_t v805 = 4 * *(void *)(v791 + 8 * v798);
                    uint64_t v806 = v799;
                    uint64_t v807 = v86;
                    do
                    {
                      int v808 = v784[v798];
                      if (v808 >= 1)
                      {
                        uint64_t v809 = v87[19];
                        int v810 = (_DWORD *)(v804[19] + v806);
                        do
                        {
                          *int v810 = *(char *)(v809 + v807);
                          int v810 = (_DWORD *)((char *)v810 + v805);
                          v809 += v803;
                          --v808;
                        }
                        while (v808);
                      }
                      v807 += v796;
                      ++v802;
                      v806 += v800;
                    }
                    while (v802 != v801);
                  }
                  v86 += v789;
                  ++v786;
                  v799 += result;
                }
                while (v786 != v785);
              }
              break;
            case 4:
              uint64_t v811 = (v88 << 30) - 0x400000000;
              uint64_t v812 = *a4;
              int v1528 = *(int *)((char *)*a4 + (v811 >> 30));
              if (v1528 >= 1)
              {
                int v813 = 0;
                uint64_t v814 = *a5;
                uint64_t v815 = v811 >> 29;
                uint64_t v1495 = *(uint64_t *)((char *)*a5 + v815);
                uint64_t v816 = *a6;
                uint64_t v817 = (v88 << 30) - 0x300000000;
                uint64_t v818 = (v88 << 30) - 0x200000000;
                uint64_t v819 = (v88 << 30) - 0x100000000;
                uint64_t v820 = *(uint64_t *)((char *)*a5 + (v817 >> 29));
                uint64_t v821 = v818 >> 32;
                uint64_t v822 = v819 >> 32;
                uint64_t result = 4 * v1377;
                uint64_t v1478 = 4 * *(void *)(*a6 + v815);
                uint64_t v823 = 4 * *(void *)(*a6 + (v817 >> 29));
                do
                {
                  uint64_t v824 = v86;
                  int v825 = v812[v817 >> 32];
                  if (v825 >= 1)
                  {
                    int v826 = 0;
                    uint64_t v827 = v814[v821];
                    uint64_t v828 = 4 * *(void *)(v816 + 8 * v821);
                    uint64_t v829 = result;
                    uint64_t v830 = v86;
                    do
                    {
                      int v831 = v812[v821];
                      if (v831 >= 1)
                      {
                        int v832 = 0;
                        uint64_t v833 = v814[v822];
                        int v834 = *a2;
                        uint64_t v835 = 4 * *(void *)(v816 + 8 * v822);
                        uint64_t v836 = v829;
                        uint64_t v837 = v830;
                        do
                        {
                          int v838 = v812[v822];
                          if (v838 >= 1)
                          {
                            uint64_t v839 = v87[19];
                            uint64_t v840 = (_DWORD *)(v834[19] + v836);
                            do
                            {
                              *uint64_t v840 = *(char *)(v839 + v837);
                              uint64_t v840 = (_DWORD *)((char *)v840 + v835);
                              v839 += v833;
                              --v838;
                            }
                            while (v838);
                          }
                          v837 += v827;
                          ++v832;
                          v836 += v828;
                        }
                        while (v832 != v831);
                      }
                      v830 += v820;
                      ++v826;
                      v829 += v823;
                    }
                    while (v826 != v825);
                  }
                  uint64_t v86 = v824 + v1495;
                  ++v813;
                  result += v1478;
                }
                while (v813 != v1528);
              }
              break;
            case 5:
              uint64_t v841 = (v88 << 30) - 0x500000000;
              uint64_t v842 = *a4;
              int v1442 = *(int *)((char *)*a4 + (v841 >> 30));
              if (v1442 >= 1)
              {
                int v1453 = 0;
                uint64_t v843 = *a5;
                uint64_t v844 = v841 >> 29;
                uint64_t v1432 = *(uint64_t *)((char *)*a5 + v844);
                uint64_t v845 = v88 << 30;
                uint64_t v846 = *a6;
                uint64_t v1422 = (v845 - 0x400000000) >> 32;
                uint64_t v847 = (v845 - 0x400000000) >> 29;
                uint64_t v1496 = *(uint64_t *)((char *)*a5 + v847);
                uint64_t v1512 = (v845 - 0x300000000) >> 32;
                uint64_t v848 = (v845 - 0x200000000) >> 32;
                uint64_t result = (v845 - 0x100000000) >> 32;
                uint64_t v1465 = 4 * v1377;
                uint64_t v1412 = 4 * *(void *)(*a6 + v844);
                uint64_t v1479 = 4 * *(void *)(*a6 + v847);
                do
                {
                  uint64_t v1390 = v86;
                  int v1529 = v842[v1422];
                  if (v1529 >= 1)
                  {
                    int v849 = 0;
                    uint64_t v850 = v843[v1512];
                    uint64_t v851 = 4 * *(void *)(v846 + 8 * v1512);
                    uint64_t v852 = v1465;
                    uint64_t v853 = v86;
                    do
                    {
                      int v854 = v842[v1512];
                      if (v854 >= 1)
                      {
                        int v855 = 0;
                        uint64_t v856 = v843[v848];
                        uint64_t v857 = 4 * *(void *)(v846 + 8 * v848);
                        uint64_t v858 = v852;
                        uint64_t v859 = v853;
                        do
                        {
                          int v860 = v842[v848];
                          if (v860 >= 1)
                          {
                            int v861 = 0;
                            uint64_t v862 = v843[result];
                            uint64_t v863 = *a2;
                            uint64_t v864 = 4 * *(void *)(v846 + 8 * result);
                            uint64_t v865 = v858;
                            uint64_t v866 = v859;
                            do
                            {
                              int v867 = v842[result];
                              if (v867 >= 1)
                              {
                                uint64_t v868 = v87[19];
                                uint64_t v869 = (_DWORD *)(v863[19] + v865);
                                do
                                {
                                  *uint64_t v869 = *(char *)(v868 + v866);
                                  uint64_t v869 = (_DWORD *)((char *)v869 + v864);
                                  v868 += v862;
                                  --v867;
                                }
                                while (v867);
                              }
                              v866 += v856;
                              ++v861;
                              v865 += v857;
                            }
                            while (v861 != v860);
                          }
                          v859 += v850;
                          ++v855;
                          v858 += v851;
                        }
                        while (v855 != v854);
                      }
                      v853 += v1496;
                      ++v849;
                      v852 += v1479;
                    }
                    while (v849 != v1529);
                  }
                  uint64_t v86 = v1390 + v1432;
                  v1465 += v1412;
                  ++v1453;
                }
                while (v1453 != v1442);
              }
              break;
            default:
              uint64_t v729 = (char *)a4[1];
              LODWORD(v730) = 1;
              uint64_t v731 = -20;
              do
              {
                uint64_t v730 = *(int *)&v729[v731] * (uint64_t)(int)v730;
                v731 += 4;
              }
              while (v731);
              unint64_t v1373 = v87[6];
              if (v1373)
              {
                uint64_t result = 0;
                uint64_t v732 = *a4;
                uint64_t v1363 = ((unint64_t)(v729 - (char *)*a4) >> 2) - 1;
                int v733 = *a5;
                uint64_t v1411 = *v8;
                uint64_t v1358 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v734 = (v88 << 30) - 0x500000000;
                uint64_t v735 = *a6;
                uint64_t v1405 = *(uint64_t *)((char *)*a5 + (v734 >> 29));
                uint64_t v1353 = v734 >> 32;
                uint64_t v1421 = ((v88 << 30) - 0x400000000) >> 32;
                uint64_t v1511 = ((v88 << 30) - 0x300000000) >> 32;
                uint64_t v736 = ((v88 << 30) - 0x200000000) >> 32;
                uint64_t v737 = ((v88 << 30) - 0x100000000) >> 32;
                uint64_t v1389 = *a7;
                uint64_t v1399 = 4 * *(void *)(*a6 + (v734 >> 29));
                uint64_t v1368 = v730;
                do
                {
                  uint64_t v738 = v1363;
                  uint64_t v1384 = result;
                  uint64_t v739 = 0;
                  if ((v1363 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v740 = ldiv((int)result, v732[v738]);
                      LODWORD(result) = v740.quot;
                      v739 += v733[v738--] * v740.rem;
                    }
                    while (v738 != -1);
                  }
                  uint64_t v741 = v1358;
                  if ((v1358 & 0x80000000) != 0)
                  {
                    uint64_t v742 = 0;
                  }
                  else
                  {
                    uint64_t v742 = 0;
                    int v743 = v1384;
                    do
                    {
                      ldiv_t v744 = ldiv(v743, *(int *)(v1411 + 4 * v741));
                      int v743 = v744.quot;
                      v742 += *(void *)(v735 + 8 * v741--) * v744.rem;
                    }
                    while (v741 != -1);
                  }
                  int v1431 = v732[v1353];
                  if (v1431 >= 1)
                  {
                    int v745 = 0;
                    uint64_t v1494 = v733[v1421];
                    uint64_t v1464 = v739 + v1389;
                    uint64_t v1452 = 4 * (v742 + v1377);
                    uint64_t v1477 = 4 * *(void *)(v735 + 8 * v1421);
                    do
                    {
                      int v1441 = v745;
                      int v1527 = v732[v1421];
                      if (v1527 >= 1)
                      {
                        int v746 = 0;
                        uint64_t v747 = v733[v1511];
                        uint64_t v748 = 4 * *(void *)(v735 + 8 * v1511);
                        uint64_t v750 = v1452;
                        uint64_t v749 = v1464;
                        do
                        {
                          int v751 = v732[v1511];
                          if (v751 >= 1)
                          {
                            int v752 = 0;
                            uint64_t v753 = v733[v736];
                            uint64_t v754 = 4 * *(void *)(v735 + 8 * v736);
                            uint64_t v755 = v750;
                            uint64_t v756 = v749;
                            do
                            {
                              int v757 = v732[v736];
                              if (v757 >= 1)
                              {
                                int v758 = 0;
                                uint64_t v759 = v733[v737];
                                uint64_t v760 = *a2;
                                uint64_t v761 = 4 * *(void *)(v735 + 8 * v737);
                                uint64_t v762 = v755;
                                uint64_t v763 = v756;
                                do
                                {
                                  int v764 = v732[v737];
                                  if (v764 >= 1)
                                  {
                                    uint64_t v765 = v87[19];
                                    int v766 = (_DWORD *)(v760[19] + v762);
                                    do
                                    {
                                      *int v766 = *(char *)(v765 + v763);
                                      int v766 = (_DWORD *)((char *)v766 + v761);
                                      v765 += v759;
                                      --v764;
                                    }
                                    while (v764);
                                  }
                                  v763 += v753;
                                  ++v758;
                                  v762 += v754;
                                }
                                while (v758 != v757);
                              }
                              v756 += v747;
                              ++v752;
                              v755 += v748;
                            }
                            while (v752 != v751);
                          }
                          v749 += v1494;
                          ++v746;
                          v750 += v1477;
                        }
                        while (v746 != v1527);
                      }
                      v1464 += v1405;
                      int v745 = v1441 + 1;
                      v1452 += v1399;
                    }
                    while (v1441 + 1 != v1431);
                  }
                  uint64_t result = v1384 + v1368;
                }
                while (v1373 > v1384 + v1368);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v23 = 0;
            char v24 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v25 = v8[19];
            do
              *(unsigned char *)(v25 + v23++) = v24;
            while ((*a2)[6] > v23);
          }
          break;
        case 1:
LABEL_37:
          size_t v35 = *(void *)(*(void *)result + 160);
          if (v35)
          {
            size_t v36 = *(const void **)(*(void *)result + 152);
            uint64_t v37 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v37, v36, v35);
          }
          break;
        case 2:
          uint64_t v96 = *a7;
          uint64_t v97 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v98 = 0;
                uint64_t v99 = *(void *)(v97 + 152);
                uint64_t v100 = v8[19];
                do
                {
                  *(unsigned char *)(v100 + v98) = *(unsigned char *)(v99 + v96);
                  v96 += **a5;
                  ++v98;
                }
                while (**a4 > (int)v98);
              }
              break;
            case 2:
              uint64_t v338 = *a4;
              int v339 = **a4;
              if (v339 >= 1)
              {
                int v340 = 0;
                uint64_t v341 = 0;
                uint64_t v342 = *(void *)(v97 + 152);
                uint64_t v343 = v8[19];
                do
                {
                  int v344 = v338[1];
                  if (v344 < 1)
                  {
                    uint64_t v345 = *a5;
                    uint64_t v346 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v343 + v341 + result) = *(unsigned char *)(v342 + v96);
                      uint64_t v345 = *a5;
                      uint64_t v346 = (*a5)[1];
                      v96 += v346;
                      uint64_t v338 = *a4;
                      int v344 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v344);
                    int v339 = *v338;
                    v341 += result;
                  }
                  uint64_t v96 = *v345 + v96 - v346 * v344;
                  ++v340;
                }
                while (v340 < v339);
              }
              break;
            case 3:
              ldiv_t v347 = *a4;
              int v348 = **a4;
              if (v348 >= 1)
              {
                int v349 = 0;
                uint64_t v350 = 0;
                uint64_t v351 = *(void *)(v97 + 152);
                uint64_t v352 = v8[19];
                do
                {
                  int v353 = v347[1];
                  if (v353 < 1)
                  {
                    uint64_t v357 = *a5;
                    uint64_t v358 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v353; ++m)
                    {
                      int v355 = v347[2];
                      if (v355 < 1)
                      {
                        uint64_t v357 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v356 = 0;
                        do
                        {
                          *(unsigned char *)(v352 + v350 + v356) = *(unsigned char *)(v351 + v96);
                          uint64_t v357 = *a5;
                          uint64_t result = (*a5)[2];
                          v96 += result;
                          ldiv_t v347 = *a4;
                          int v355 = (*a4)[2];
                          ++v356;
                        }
                        while ((int)v356 < v355);
                        v350 += v356;
                      }
                      uint64_t v358 = v357[1];
                      uint64_t v96 = v358 + v96 - result * v355;
                      int v353 = v347[1];
                    }
                    int v348 = *v347;
                  }
                  uint64_t v96 = *v357 + v96 - v358 * v353;
                  ++v349;
                }
                while (v349 < v348);
              }
              break;
            case 4:
              int v359 = *a4;
              int v360 = **a4;
              if (v360 >= 1)
              {
                int v361 = 0;
                uint64_t v362 = 0;
                uint64_t v363 = *(void *)(v97 + 152);
                uint64_t v364 = v8[19];
                do
                {
                  int v365 = v359[1];
                  if (v365 < 1)
                  {
                    int v371 = *a5;
                    uint64_t v373 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v365; ++n)
                    {
                      int v367 = v359[2];
                      if (v367 < 1)
                      {
                        int v371 = *a5;
                        uint64_t v372 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v367; ++ii)
                        {
                          int v369 = v359[3];
                          if (v369 < 1)
                          {
                            int v371 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v370 = 0;
                            do
                            {
                              *(unsigned char *)(v364 + v362 + v370) = *(unsigned char *)(v363 + v96);
                              int v371 = *a5;
                              uint64_t result = (*a5)[3];
                              v96 += result;
                              int v359 = *a4;
                              int v369 = (*a4)[3];
                              ++v370;
                            }
                            while ((int)v370 < v369);
                            v362 += v370;
                          }
                          uint64_t v372 = v371[2];
                          uint64_t v96 = v372 + v96 - result * v369;
                          int v367 = v359[2];
                        }
                      }
                      uint64_t v373 = v371[1];
                      uint64_t v96 = v373 + v96 - v372 * v367;
                      int v365 = v359[1];
                    }
                    int v360 = *v359;
                  }
                  uint64_t v96 = *v371 + v96 - v373 * v365;
                  ++v361;
                }
                while (v361 < v360);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v329 = 0;
                uint64_t v330 = *(void *)(v97 + 152) + v96;
                uint64_t v331 = v8[19];
                do
                {
                  int v332 = *a4;
                  unint64_t v333 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v334 = 0;
                  uint64_t v335 = (v333 - 1);
                  if ((int)v333 - 1 >= 0)
                  {
                    int v336 = *a5;
                    LODWORD(result) = v329;
                    do
                    {
                      ldiv_t v337 = ldiv((int)result, v332[v335]);
                      uint64_t result = v337.quot;
                      v334 += v336[v335--] * v337.rem;
                    }
                    while (v335 != -1);
                  }
                  *(unsigned char *)(v331 + v329++) = *(unsigned char *)(v330 + v334);
                }
                while (v329 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          uint64_t v101 = *a7;
          uint64_t v102 = *a8;
          int v103 = *(void **)result;
          uint64_t v104 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v104 >> 2)
          {
            case 1:
              uint64_t v105 = (v104 << 30) - 0x100000000;
              int v106 = *(int *)((char *)*a4 + (v105 >> 30));
              if (v106 >= 1)
              {
                uint64_t v107 = v105 >> 29;
                uint64_t v108 = *(uint64_t *)((char *)*a5 + (v105 >> 29));
                uint64_t v109 = *(void *)(*a6 + v107);
                uint64_t v110 = (unsigned char *)(v8[19] + v102);
                uint64_t v111 = (unsigned char *)(v103[19] + v101);
                do
                {
                  unsigned char *v110 = *v111;
                  v111 += v108;
                  v110 += v109;
                  --v106;
                }
                while (v106);
              }
              break;
            case 2:
              uint64_t v892 = (v104 << 30) - 0x200000000;
              int v893 = *(int *)((char *)*a4 + (v892 >> 30));
              if (v893 >= 1)
              {
                int v894 = 0;
                uint64_t v895 = v892 >> 29;
                uint64_t v896 = *(uint64_t *)((char *)*a5 + (v892 >> 29));
                uint64_t v897 = *(void *)(*a6 + v895);
                do
                {
                  uint64_t v898 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                  int v899 = *(int *)((char *)*a4 + (v898 >> 30));
                  if (v899 >= 1)
                  {
                    uint64_t v900 = v898 >> 29;
                    uint64_t v901 = *(uint64_t *)((char *)*a5 + (v898 >> 29));
                    uint64_t v902 = *(void *)(*a6 + v900);
                    uint64_t v903 = (*a2)[19];
                    uint64_t v904 = *(void *)(*(void *)v13 + 152);
                    do
                    {
                      uint64_t result = *(unsigned __int8 *)(v904 + v101);
                      *(unsigned char *)(v903 + v102) = result;
                      v903 += v902;
                      v904 += v901;
                      --v899;
                    }
                    while (v899);
                  }
                  v101 += v896;
                  v102 += v897;
                  ++v894;
                }
                while (v894 != v893);
              }
              break;
            case 3:
              uint64_t v905 = (v104 << 30) - 0x300000000;
              int v906 = *(int *)((char *)*a4 + (v905 >> 30));
              if (v906 >= 1)
              {
                int v907 = 0;
                uint64_t v908 = v905 >> 29;
                uint64_t v909 = *(uint64_t *)((char *)*a5 + (v905 >> 29));
                uint64_t v910 = *(void *)(*a6 + v908);
                do
                {
                  uint64_t v911 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x200000000;
                  int v912 = *(int *)((char *)*a4 + (v911 >> 30));
                  if (v912 >= 1)
                  {
                    int v913 = 0;
                    uint64_t v914 = v911 >> 29;
                    uint64_t v915 = *(uint64_t *)((char *)*a5 + (v911 >> 29));
                    uint64_t v916 = *(void *)(*v9 + v914);
                    uint64_t result = v101;
                    uint64_t v917 = v102;
                    do
                    {
                      uint64_t v918 = ((*(void *)(*(void *)v13 + 8) - **(void **)v13) << 30) - 0x100000000;
                      int v919 = *(int *)((char *)*a4 + (v918 >> 30));
                      if (v919 >= 1)
                      {
                        uint64_t v920 = v918 >> 29;
                        uint64_t v921 = *(uint64_t *)((char *)*a5 + (v918 >> 29));
                        uint64_t v922 = *(void *)(*v9 + v920);
                        uint64_t v923 = (*a2)[19];
                        uint64_t v924 = *(void *)(*(void *)v13 + 152);
                        do
                        {
                          *(unsigned char *)(v923 + v917) = *(unsigned char *)(v924 + result);
                          v923 += v922;
                          v924 += v921;
                          --v919;
                        }
                        while (v919);
                      }
                      result += v915;
                      v917 += v916;
                      ++v913;
                    }
                    while (v913 != v912);
                  }
                  v101 += v909;
                  v102 += v910;
                  ++v907;
                }
                while (v907 != v906);
              }
              break;
            case 4:
              uint64_t v719 = a4;
              uint64_t v720 = a5;
              uint64_t v721 = a6;
              uint64_t v722 = *a7;
              uint64_t v723 = *a8;
LABEL_558:
              break;
            case 5:
              uint64_t v925 = (v104 << 30) - 0x500000000;
              int v926 = *(int *)((char *)*a4 + (v925 >> 30));
              if (v926 >= 1)
              {
                uint64_t v927 = v925 >> 29;
                uint64_t v928 = *(uint64_t *)((char *)*a5 + v927);
                uint64_t v929 = *(void *)(*a6 + v927);
                do
                {
                  v101 += v928;
                  v102 += v929;
                  --v926;
                }
                while (v926);
              }
              break;
            default:
              LODWORD(v870) = 1;
              uint64_t v871 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v870 = a4[1][v871++] * (uint64_t)(int)v870;
              while (v871 * 4);
              if (v103[6])
              {
                uint64_t result = 0;
                uint64_t v1454 = *a8;
                uint64_t v1466 = *a7;
                uint64_t v1480 = v870;
                do
                {
                  uint64_t v872 = *a4;
                  unint64_t v873 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v874 = (v873 - 1);
                  int v1497 = v103;
                  uint64_t v1530 = result;
                  uint64_t v875 = 0;
                  if ((int)v873 - 1 >= 0)
                  {
                    uint64_t v876 = *a5;
                    do
                    {
                      ldiv_t v877 = ldiv((int)result, v872[v874]);
                      LODWORD(result) = v877.quot;
                      v875 += v876[v874--] * v877.rem;
                    }
                    while (v874 != -1);
                  }
                  uint64_t v878 = **a2;
                  unint64_t v879 = (unint64_t)((*a2)[1] - v878) >> 2;
                  uint64_t v880 = *v9;
                  uint64_t v881 = 0;
                  uint64_t v882 = (v879 - 1);
                  if ((int)v879 - 1 >= 0)
                  {
                    int v883 = v1530;
                    do
                    {
                      ldiv_t v884 = ldiv(v883, *(int *)(v878 + 4 * v882));
                      int v883 = v884.quot;
                      v881 += *(void *)(v880 + 8 * v882--) * v884.rem;
                    }
                    while (v882 != -1);
                  }
                  int v103 = v1497;
                  uint64_t v885 = ((v103[1] - *v103) << 30) - 0x500000000;
                  int v886 = *(int *)((char *)v872 + (v885 >> 30));
                  if (v886 >= 1)
                  {
                    uint64_t v887 = v875 + v1466;
                    uint64_t v888 = v885 >> 29;
                    uint64_t v889 = *(uint64_t *)((char *)*a5 + v888);
                    uint64_t v890 = *(void *)(v880 + v888);
                    uint64_t v891 = v881 + v1454;
                    do
                    {
                      v887 += v889;
                      v891 += v890;
                      --v886;
                    }
                    while (v886);
                    int v103 = *(void **)v13;
                  }
                  uint64_t v9 = a6;
                  uint64_t result = v1530 + v1480;
                }
                while (v103[6] > (unint64_t)(v1530 + v1480));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v26 = v8[6];
          if (v26)
          {
            int v27 = **(char **)(*(void *)result + 152);
            uint64_t v28 = (_DWORD *)v8[19];
            do
            {
              *v28++ = v27;
              --v26;
            }
            while (v26);
          }
          break;
        case 1:
          uint64_t v112 = *(void *)(*(void *)result + 160);
          if (v112)
          {
            int v113 = *(char **)(*(void *)result + 152);
            uint64_t v114 = (_DWORD *)v8[19];
            do
            {
              int v115 = *v113++;
              *v114++ = v115;
              --v112;
            }
            while (v112);
          }
          break;
        case 2:
          uint64_t v116 = *a7;
          uint64_t v117 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v118 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v119 = 0;
                uint64_t v120 = v8[19];
                uint64_t v121 = **a5;
                uint64_t v122 = (char *)(*(void *)(v117 + 152) + v116);
                do
                {
                  *(_DWORD *)(v120 + 4 * v119) = *v122;
                  v122 += v121;
                  ++v119;
                }
                while (*v118 > (int)v119);
              }
              break;
            case 2:
              uint64_t v384 = *a4;
              int v385 = **a4;
              if (v385 >= 1)
              {
                int v386 = 0;
                uint64_t v387 = 0;
                uint64_t v388 = *(void *)(v117 + 152);
                uint64_t v389 = v8[19];
                uint64_t v390 = **a5;
                uint64_t v391 = (*a5)[1];
                int v392 = v384[1];
                do
                {
                  if (v392 >= 1)
                  {
                    uint64_t v393 = 0;
                    do
                    {
                      *(_DWORD *)(v389 + 4 * v387 + 4 * v393) = *(char *)(v388 + v116);
                      v116 += v391;
                      int v392 = v384[1];
                      ++v393;
                    }
                    while ((int)v393 < v392);
                    int v385 = *v384;
                    v387 += v393;
                  }
                  uint64_t result = v392;
                  uint64_t v116 = v116 + v390 - v391 * v392;
                  ++v386;
                }
                while (v386 < v385);
              }
              break;
            case 3:
              uint64_t v394 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v395 = 0;
                uint64_t v396 = 0;
                uint64_t v397 = *(void *)(v117 + 152);
                uint64_t v398 = v8[19];
                uint64_t v399 = *a5;
                uint64_t v400 = **a5;
                uint64_t v401 = (*a5)[1];
                int v402 = v394[1];
                do
                {
                  if (v402 >= 1)
                  {
                    int v403 = 0;
                    int v404 = *a5;
                    uint64_t v405 = v399[2];
                    int v406 = v394[2];
                    do
                    {
                      if (v406 >= 1)
                      {
                        uint64_t v407 = 0;
                        uint64_t v408 = v404[2];
                        do
                        {
                          *(_DWORD *)(v398 + 4 * v396 + 4 * v407) = *(char *)(v397 + v116);
                          v116 += v408;
                          int v406 = v394[2];
                          ++v407;
                        }
                        while ((int)v407 < v406);
                        int v402 = v394[1];
                        v396 += v407;
                      }
                      uint64_t v116 = v116 + v401 - v405 * v406;
                      ++v403;
                    }
                    while (v403 < v402);
                    uint64_t result = *v394;
                  }
                  uint64_t v116 = v116 + v400 - v401 * v402;
                  ++v395;
                }
                while (v395 < (int)result);
              }
              break;
            case 4:
              uint64_t v409 = *a4;
              int v410 = **a4;
              if (v410 >= 1)
              {
                int v411 = 0;
                uint64_t v412 = 0;
                uint64_t v413 = *(void *)(v117 + 152);
                uint64_t v414 = v8[19];
                uint64_t v415 = *a5;
                uint64_t v416 = **a5;
                uint64_t v417 = (*a5)[1];
                int v418 = v409[1];
                do
                {
                  if (v418 >= 1)
                  {
                    int v419 = 0;
                    int v420 = *a5;
                    uint64_t v421 = v415[2];
                    int v422 = v409[2];
                    do
                    {
                      if (v422 >= 1)
                      {
                        int v423 = 0;
                        uint64_t v424 = *a5;
                        uint64_t v425 = v420[2];
                        uint64_t v426 = v420[3];
                        int v427 = v409[3];
                        do
                        {
                          if (v427 >= 1)
                          {
                            uint64_t v428 = 0;
                            uint64_t v429 = v424[3];
                            do
                            {
                              *(_DWORD *)(v414 + 4 * v412 + 4 * v428) = *(char *)(v413 + v116);
                              v116 += v429;
                              int v427 = v409[3];
                              ++v428;
                            }
                            while ((int)v428 < v427);
                            int v422 = v409[2];
                            v412 += v428;
                          }
                          uint64_t v116 = v116 + v425 - v426 * v427;
                          ++v423;
                        }
                        while (v423 < v422);
                        int v418 = v409[1];
                      }
                      uint64_t v116 = v116 + v417 - v421 * v422;
                      ++v419;
                    }
                    while (v419 < v418);
                    int v410 = *v409;
                  }
                  uint64_t result = v418;
                  uint64_t v116 = v116 + v416 - v417 * v418;
                  ++v411;
                }
                while (v411 < v410);
              }
              break;
            default:
              uint64_t v374 = v8[6];
              if (v374)
              {
                uint64_t v375 = 0;
                uint64_t v376 = *(void *)(v117 + 152) + v116;
                uint64_t v377 = v8[19];
                uint64_t v378 = *a4;
                uint64_t v379 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v380 = *a5;
                do
                {
                  uint64_t v381 = 0;
                  if ((v379 & 0x80000000) == 0)
                  {
                    uint64_t v382 = v379;
                    LODWORD(result) = v375;
                    do
                    {
                      ldiv_t v383 = ldiv((int)result, v378[v382]);
                      uint64_t result = v383.quot;
                      v381 += v380[v382--] * v383.rem;
                    }
                    while (v382 != -1);
                  }
                  *(_DWORD *)(v377 + 4 * v375++) = *(char *)(v376 + v381);
                }
                while (v375 != v374);
              }
              break;
          }
          break;
        case 3:
          uint64_t v123 = *a7;
          uint64_t v1378 = *a8;
          uint64_t v124 = *(void **)result;
          uint64_t v125 = v124[1] - *v124;
          switch(v125 >> 2)
          {
            case 1:
              uint64_t v126 = (v125 << 30) - 0x100000000;
              int v127 = *(int *)((char *)*a4 + (v126 >> 30));
              if (v127 >= 1)
              {
                uint64_t v128 = v126 >> 29;
                uint64_t v129 = *(uint64_t *)((char *)*a5 + (v126 >> 29));
                uint64_t v130 = (_DWORD *)(v8[19] + 4 * v1378);
                int v131 = (char *)(v124[19] + v123);
                uint64_t v132 = 4 * *(void *)(*a6 + v128);
                do
                {
                  *uint64_t v130 = *v131;
                  v131 += v129;
                  uint64_t v130 = (_DWORD *)((char *)v130 + v132);
                  --v127;
                }
                while (v127);
              }
              break;
            case 2:
              uint64_t v968 = (v125 << 30) - 0x200000000;
              uint64_t v969 = *a4;
              int v970 = *(int *)((char *)*a4 + (v968 >> 30));
              if (v970 >= 1)
              {
                int v971 = 0;
                uint64_t v972 = v968 >> 29;
                uint64_t v973 = *(uint64_t *)((char *)*a5 + (v968 >> 29));
                uint64_t v974 = *(void *)(*a6 + v972);
                uint64_t v975 = (v125 << 30) - 0x100000000;
                uint64_t v976 = *(uint64_t *)((char *)*a5 + (v975 >> 29));
                uint64_t v977 = *(void *)(*a6 + (v975 >> 29));
                uint64_t v978 = v975 >> 32;
                uint64_t v979 = 4 * v1378;
                uint64_t v980 = 4 * v974;
                uint64_t v981 = 4 * v977;
                do
                {
                  uint64_t result = v969[v978];
                  if ((int)result >= 1)
                  {
                    uint64_t v982 = v124[19];
                    uint64_t v983 = (_DWORD *)(v8[19] + v979);
                    do
                    {
                      _DWORD *v983 = *(char *)(v982 + v123);
                      uint64_t v983 = (_DWORD *)((char *)v983 + v981);
                      v982 += v976;
                      uint64_t result = (result - 1);
                    }
                    while (result);
                  }
                  v123 += v973;
                  ++v971;
                  v979 += v980;
                }
                while (v971 != v970);
              }
              break;
            case 3:
              uint64_t v984 = (v125 << 30) - 0x300000000;
              uint64_t v985 = *a4;
              int v986 = *(int *)((char *)*a4 + (v984 >> 30));
              if (v986 >= 1)
              {
                int v987 = 0;
                uint64_t v988 = *a5;
                uint64_t v989 = v984 >> 29;
                uint64_t v990 = *(uint64_t *)((char *)*a5 + (v984 >> 29));
                uint64_t v991 = v125 << 30;
                uint64_t v992 = *a6;
                uint64_t v993 = *(void *)(*a6 + v989);
                uint64_t v994 = (v991 - 0x200000000) >> 32;
                uint64_t v995 = (v991 - 0x200000000) >> 29;
                uint64_t v996 = v991 - 0x100000000;
                uint64_t v997 = *(uint64_t *)((char *)*a5 + v995);
                uint64_t v998 = *(void *)(*a6 + v995);
                uint64_t v999 = v996 >> 32;
                uint64_t v1000 = 4 * v1378;
                uint64_t result = 4 * v993;
                uint64_t v1001 = 4 * v998;
                do
                {
                  int v1002 = v985[v994];
                  if (v1002 >= 1)
                  {
                    int v1003 = 0;
                    uint64_t v1004 = v988[v999];
                    int v1005 = *a2;
                    uint64_t v1006 = 4 * *(void *)(v992 + 8 * v999);
                    uint64_t v1007 = v1000;
                    uint64_t v1008 = v123;
                    do
                    {
                      int v1009 = v985[v999];
                      if (v1009 >= 1)
                      {
                        uint64_t v1010 = v124[19];
                        uint64_t v1011 = (_DWORD *)(v1005[19] + v1007);
                        do
                        {
                          *uint64_t v1011 = *(char *)(v1010 + v1008);
                          uint64_t v1011 = (_DWORD *)((char *)v1011 + v1006);
                          v1010 += v1004;
                          --v1009;
                        }
                        while (v1009);
                      }
                      v1008 += v997;
                      ++v1003;
                      v1007 += v1001;
                    }
                    while (v1003 != v1002);
                  }
                  v123 += v990;
                  ++v987;
                  v1000 += result;
                }
                while (v987 != v986);
              }
              break;
            case 4:
              uint64_t v1012 = (v125 << 30) - 0x400000000;
              uint64_t v1013 = *a4;
              int v1532 = *(int *)((char *)*a4 + (v1012 >> 30));
              if (v1532 >= 1)
              {
                int v1014 = 0;
                uint64_t v1015 = *a5;
                uint64_t v1016 = v1012 >> 29;
                uint64_t v1499 = *(uint64_t *)((char *)*a5 + v1016);
                uint64_t v1017 = *a6;
                uint64_t v1018 = (v125 << 30) - 0x300000000;
                uint64_t v1019 = (v125 << 30) - 0x200000000;
                uint64_t v1020 = (v125 << 30) - 0x100000000;
                uint64_t v1021 = *(uint64_t *)((char *)*a5 + (v1018 >> 29));
                uint64_t v1022 = v1019 >> 32;
                uint64_t v1023 = v1020 >> 32;
                uint64_t result = 4 * v1378;
                uint64_t v1482 = 4 * *(void *)(*a6 + v1016);
                uint64_t v1024 = 4 * *(void *)(*a6 + (v1018 >> 29));
                do
                {
                  uint64_t v1025 = v123;
                  int v1026 = v1013[v1018 >> 32];
                  if (v1026 >= 1)
                  {
                    int v1027 = 0;
                    uint64_t v1028 = v1015[v1022];
                    uint64_t v1029 = 4 * *(void *)(v1017 + 8 * v1022);
                    uint64_t v1030 = result;
                    uint64_t v1031 = v123;
                    do
                    {
                      int v1032 = v1013[v1022];
                      if (v1032 >= 1)
                      {
                        int v1033 = 0;
                        uint64_t v1034 = v1015[v1023];
                        uint64_t v1035 = *a2;
                        uint64_t v1036 = 4 * *(void *)(v1017 + 8 * v1023);
                        uint64_t v1037 = v1030;
                        uint64_t v1038 = v1031;
                        do
                        {
                          int v1039 = v1013[v1023];
                          if (v1039 >= 1)
                          {
                            uint64_t v1040 = v124[19];
                            int v1041 = (_DWORD *)(v1035[19] + v1037);
                            do
                            {
                              *int v1041 = *(char *)(v1040 + v1038);
                              int v1041 = (_DWORD *)((char *)v1041 + v1036);
                              v1040 += v1034;
                              --v1039;
                            }
                            while (v1039);
                          }
                          v1038 += v1028;
                          ++v1033;
                          v1037 += v1029;
                        }
                        while (v1033 != v1032);
                      }
                      v1031 += v1021;
                      ++v1027;
                      v1030 += v1024;
                    }
                    while (v1027 != v1026);
                  }
                  uint64_t v123 = v1025 + v1499;
                  ++v1014;
                  result += v1482;
                }
                while (v1014 != v1532);
              }
              break;
            case 5:
              uint64_t v1042 = (v125 << 30) - 0x500000000;
              uint64_t v1043 = *a4;
              int v1444 = *(int *)((char *)*a4 + (v1042 >> 30));
              if (v1444 >= 1)
              {
                int v1456 = 0;
                uint64_t v1044 = *a5;
                uint64_t v1045 = v1042 >> 29;
                uint64_t v1434 = *(uint64_t *)((char *)*a5 + v1045);
                uint64_t v1046 = v125 << 30;
                uint64_t v1047 = *a6;
                uint64_t v1424 = (v1046 - 0x400000000) >> 32;
                uint64_t v1048 = (v1046 - 0x400000000) >> 29;
                uint64_t v1500 = *(uint64_t *)((char *)*a5 + v1048);
                uint64_t v1515 = (v1046 - 0x300000000) >> 32;
                uint64_t v1049 = (v1046 - 0x200000000) >> 32;
                uint64_t result = (v1046 - 0x100000000) >> 32;
                uint64_t v1468 = 4 * v1378;
                uint64_t v1414 = 4 * *(void *)(*a6 + v1045);
                uint64_t v1483 = 4 * *(void *)(*a6 + v1048);
                do
                {
                  uint64_t v1392 = v123;
                  int v1533 = v1043[v1424];
                  if (v1533 >= 1)
                  {
                    int v1050 = 0;
                    uint64_t v1051 = v1044[v1515];
                    uint64_t v1052 = 4 * *(void *)(v1047 + 8 * v1515);
                    uint64_t v1053 = v1468;
                    uint64_t v1054 = v123;
                    do
                    {
                      int v1055 = v1043[v1515];
                      if (v1055 >= 1)
                      {
                        int v1056 = 0;
                        uint64_t v1057 = v1044[v1049];
                        uint64_t v1058 = 4 * *(void *)(v1047 + 8 * v1049);
                        uint64_t v1059 = v1053;
                        uint64_t v1060 = v1054;
                        do
                        {
                          int v1061 = v1043[v1049];
                          if (v1061 >= 1)
                          {
                            int v1062 = 0;
                            uint64_t v1063 = v1044[result];
                            uint64_t v1064 = *a2;
                            uint64_t v1065 = 4 * *(void *)(v1047 + 8 * result);
                            uint64_t v1066 = v1059;
                            uint64_t v1067 = v1060;
                            do
                            {
                              int v1068 = v1043[result];
                              if (v1068 >= 1)
                              {
                                uint64_t v1069 = v124[19];
                                uint64_t v1070 = (_DWORD *)(v1064[19] + v1066);
                                do
                                {
                                  *uint64_t v1070 = *(char *)(v1069 + v1067);
                                  uint64_t v1070 = (_DWORD *)((char *)v1070 + v1065);
                                  v1069 += v1063;
                                  --v1068;
                                }
                                while (v1068);
                              }
                              v1067 += v1057;
                              ++v1062;
                              v1066 += v1058;
                            }
                            while (v1062 != v1061);
                          }
                          v1060 += v1051;
                          ++v1056;
                          v1059 += v1052;
                        }
                        while (v1056 != v1055);
                      }
                      v1054 += v1500;
                      ++v1050;
                      v1053 += v1483;
                    }
                    while (v1050 != v1533);
                  }
                  uint64_t v123 = v1392 + v1434;
                  v1468 += v1414;
                  ++v1456;
                }
                while (v1456 != v1444);
              }
              break;
            default:
              uint64_t v930 = (char *)a4[1];
              LODWORD(v931) = 1;
              uint64_t v932 = -20;
              do
              {
                uint64_t v931 = *(int *)&v930[v932] * (uint64_t)(int)v931;
                v932 += 4;
              }
              while (v932);
              unint64_t v1374 = v124[6];
              if (v1374)
              {
                uint64_t result = 0;
                uint64_t v933 = *a4;
                uint64_t v1364 = ((unint64_t)(v930 - (char *)*a4) >> 2) - 1;
                uint64_t v934 = *a5;
                uint64_t v1413 = *v8;
                uint64_t v1359 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v935 = (v125 << 30) - 0x500000000;
                uint64_t v936 = *a6;
                uint64_t v1406 = *(uint64_t *)((char *)*a5 + (v935 >> 29));
                uint64_t v1354 = v935 >> 32;
                uint64_t v1423 = ((v125 << 30) - 0x400000000) >> 32;
                uint64_t v1514 = ((v125 << 30) - 0x300000000) >> 32;
                uint64_t v937 = ((v125 << 30) - 0x200000000) >> 32;
                uint64_t v938 = ((v125 << 30) - 0x100000000) >> 32;
                uint64_t v1391 = *a7;
                uint64_t v1400 = 4 * *(void *)(*a6 + (v935 >> 29));
                uint64_t v1369 = v931;
                do
                {
                  uint64_t v939 = v1364;
                  uint64_t v1385 = result;
                  uint64_t v940 = 0;
                  if ((v1364 & 0x80000000) == 0)
                  {
                    do
                    {
                      ldiv_t v941 = ldiv((int)result, v933[v939]);
                      LODWORD(result) = v941.quot;
                      v940 += v934[v939--] * v941.rem;
                    }
                    while (v939 != -1);
                  }
                  uint64_t v942 = v1359;
                  if ((v1359 & 0x80000000) != 0)
                  {
                    uint64_t v943 = 0;
                  }
                  else
                  {
                    uint64_t v943 = 0;
                    int v944 = v1385;
                    do
                    {
                      ldiv_t v945 = ldiv(v944, *(int *)(v1413 + 4 * v942));
                      int v944 = v945.quot;
                      v943 += *(void *)(v936 + 8 * v942--) * v945.rem;
                    }
                    while (v942 != -1);
                  }
                  int v1433 = v933[v1354];
                  if (v1433 >= 1)
                  {
                    int v946 = 0;
                    uint64_t v1498 = v934[v1423];
                    uint64_t v1467 = v940 + v1391;
                    uint64_t v1455 = 4 * (v943 + v1378);
                    uint64_t v1481 = 4 * *(void *)(v936 + 8 * v1423);
                    do
                    {
                      int v1443 = v946;
                      int v1531 = v933[v1423];
                      if (v1531 >= 1)
                      {
                        int v947 = 0;
                        uint64_t v948 = v934[v1514];
                        uint64_t v949 = 4 * *(void *)(v936 + 8 * v1514);
                        uint64_t v951 = v1455;
                        uint64_t v950 = v1467;
                        do
                        {
                          int v952 = v933[v1514];
                          if (v952 >= 1)
                          {
                            int v953 = 0;
                            uint64_t v954 = v934[v937];
                            uint64_t v955 = 4 * *(void *)(v936 + 8 * v937);
                            uint64_t v956 = v951;
                            uint64_t v957 = v950;
                            do
                            {
                              int v958 = v933[v937];
                              if (v958 >= 1)
                              {
                                int v959 = 0;
                                uint64_t v960 = v934[v938];
                                uint64_t v961 = *a2;
                                uint64_t v962 = 4 * *(void *)(v936 + 8 * v938);
                                uint64_t v963 = v956;
                                uint64_t v964 = v957;
                                do
                                {
                                  int v965 = v933[v938];
                                  if (v965 >= 1)
                                  {
                                    uint64_t v966 = v124[19];
                                    uint64_t v967 = (_DWORD *)(v961[19] + v963);
                                    do
                                    {
                                      *uint64_t v967 = *(char *)(v966 + v964);
                                      uint64_t v967 = (_DWORD *)((char *)v967 + v962);
                                      v966 += v960;
                                      --v965;
                                    }
                                    while (v965);
                                  }
                                  v964 += v954;
                                  ++v959;
                                  v963 += v955;
                                }
                                while (v959 != v958);
                              }
                              v957 += v948;
                              ++v953;
                              v956 += v949;
                            }
                            while (v953 != v952);
                          }
                          v950 += v1498;
                          ++v947;
                          v951 += v1481;
                        }
                        while (v947 != v1531);
                      }
                      v1467 += v1406;
                      int v946 = v1443 + 1;
                      v1455 += v1400;
                    }
                    while (v1443 + 1 != v1433);
                  }
                  uint64_t result = v1385 + v1369;
                }
                while (v1374 > v1385 + v1369);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v29 = v8[6];
          if (v29)
          {
            uint64_t v30 = **(char **)(*(void *)result + 152);
            uint64_t v31 = (void *)v8[19];
            do
            {
              *v31++ = v30;
              --v29;
            }
            while (v29);
          }
          break;
        case 1:
          uint64_t v133 = *(void *)(*(void *)result + 160);
          if (v133)
          {
            uint64_t v134 = *(char **)(*(void *)result + 152);
            uint64_t v135 = (void *)v8[19];
            do
            {
              uint64_t v136 = *v134++;
              *v135++ = v136;
              --v133;
            }
            while (v133);
          }
          break;
        case 2:
          uint64_t v137 = *a7;
          uint64_t v138 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v139 = **a4;
              if ((int)v139 >= 1)
              {
                uint64_t v140 = *(void *)(v138 + 152);
                uint64_t v141 = (void *)v8[19];
                uint64_t v142 = *a5;
                do
                {
                  *v141++ = *(char *)(v140 + v137);
                  v137 += *v142;
                  --v139;
                }
                while (v139);
              }
              break;
            case 2:
              int v440 = **a4;
              if (v440 >= 1)
              {
                int v441 = 0;
                uint64_t v442 = 0;
                uint64_t v443 = *(void *)(v138 + 152);
                uint64_t v444 = v8[19];
                int v445 = (*a4)[1];
                int v446 = *a5;
                do
                {
                  if (v445 <= 0)
                  {
                    uint64_t v448 = v446[1];
                  }
                  else
                  {
                    int v447 = v445;
                    do
                    {
                      *(void *)(v444 + 8 * v442++) = *(char *)(v443 + v137);
                      uint64_t v448 = v446[1];
                      v137 += v448;
                      --v447;
                    }
                    while (v447);
                  }
                  uint64_t result = *v446;
                  uint64_t v137 = v137 - v448 * v445 + *v446;
                  ++v441;
                }
                while (v441 != v440);
              }
              break;
            case 3:
              ldiv_t v449 = *a4;
              int v450 = **a4;
              if (v450 >= 1)
              {
                int v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = *(void *)(v138 + 152);
                uint64_t v454 = v8[19];
                uint64_t v455 = v449[1];
                uint64_t v456 = *a5;
                do
                {
                  if ((int)v455 <= 0)
                  {
                    uint64_t v460 = v456[1];
                  }
                  else
                  {
                    int v457 = 0;
                    uint64_t result = v449[2];
                    uint64_t v458 = *a5;
                    do
                    {
                      int v459 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v454 + 8 * v452++) = *(char *)(v453 + v137);
                          v137 += v458[2];
                          --v459;
                        }
                        while (v459);
                      }
                      uint64_t v460 = v456[1];
                      uint64_t v137 = v460 + v137 - v456[2] * (int)result;
                      ++v457;
                    }
                    while (v457 != v455);
                  }
                  uint64_t v137 = v137 - v460 * v455 + *v456;
                  ++v451;
                }
                while (v451 != v450);
              }
              break;
            case 4:
              int v461 = *a4;
              int v462 = **a4;
              if (v462 >= 1)
              {
                int v463 = 0;
                uint64_t v464 = 0;
                uint64_t v465 = *(void *)(v138 + 152);
                uint64_t v466 = v8[19];
                uint64_t v467 = v461[1];
                uint64_t v468 = *a5;
                do
                {
                  if ((int)v467 <= 0)
                  {
                    uint64_t v475 = v468[1];
                  }
                  else
                  {
                    int v469 = 0;
                    uint64_t result = v461[2];
                    uint64_t v470 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v471 = 0;
                        int v472 = v461[3];
                        int v473 = *a5;
                        do
                        {
                          int v474 = v472;
                          if (v472 >= 1)
                          {
                            do
                            {
                              *(void *)(v466 + 8 * v464++) = *(char *)(v465 + v137);
                              v137 += v473[3];
                              --v474;
                            }
                            while (v474);
                          }
                          uint64_t v137 = v470[2] + v137 - v470[3] * v472;
                          ++v471;
                        }
                        while (v471 != result);
                      }
                      uint64_t v475 = v468[1];
                      uint64_t v137 = v475 + v137 - v468[2] * result;
                      ++v469;
                    }
                    while (v469 != v467);
                  }
                  uint64_t v137 = v137 - v475 * v467 + *v468;
                  ++v463;
                }
                while (v463 != v462);
              }
              break;
            default:
              uint64_t v430 = v8[6];
              if (v430)
              {
                uint64_t v431 = 0;
                uint64_t v432 = *(void *)(v138 + 152) + v137;
                uint64_t v433 = v8[19];
                uint64_t v434 = *a4;
                uint64_t v435 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v436 = *a5;
                do
                {
                  uint64_t v437 = 0;
                  if ((v435 & 0x80000000) == 0)
                  {
                    uint64_t v438 = v435;
                    LODWORD(result) = v431;
                    do
                    {
                      ldiv_t v439 = ldiv((int)result, v434[v438]);
                      uint64_t result = v439.quot;
                      v437 += v436[v438--] * v439.rem;
                    }
                    while (v438 != -1);
                  }
                  *(void *)(v433 + 8 * v431++) = *(char *)(v432 + v437);
                }
                while (v431 != v430);
              }
              break;
          }
          break;
        case 3:
          uint64_t v143 = *a7;
          uint64_t v1379 = *a8;
          uint64_t v144 = *(void **)result;
          uint64_t v145 = v144[1] - *v144;
          switch(v145 >> 2)
          {
            case 1:
              uint64_t v146 = (v145 << 30) - 0x100000000;
              int v147 = *(int *)((char *)*a4 + (v146 >> 30));
              if (v147 >= 1)
              {
                uint64_t v148 = v146 >> 29;
                uint64_t v149 = *(uint64_t *)((char *)*a5 + (v146 >> 29));
                uint64_t v150 = (void *)(v8[19] + 8 * v1379);
                uint64_t v151 = (char *)(v144[19] + v143);
                uint64_t v152 = 8 * *(void *)(*a6 + v148);
                do
                {
                  *uint64_t v150 = *v151;
                  v151 += v149;
                  uint64_t v150 = (void *)((char *)v150 + v152);
                  --v147;
                }
                while (v147);
              }
              break;
            case 2:
              uint64_t v1109 = (v145 << 30) - 0x200000000;
              int v1110 = *(int *)((char *)*a4 + (v1109 >> 30));
              if (v1110 >= 1)
              {
                int v1111 = 0;
                int v1112 = *a5;
                uint64_t v1113 = v1109 >> 29;
                uint64_t v1114 = *(uint64_t *)((char *)*a5 + (v1109 >> 29));
                uint64_t v1115 = *a6;
                uint64_t v1116 = *(void *)(*a6 + v1113);
                uint64_t v1117 = (v145 << 30) - 0x100000000;
                uint64_t v1118 = v1117 >> 32;
                int v1119 = *(int *)((char *)*a4 + (v1117 >> 30));
                uint64_t v1120 = 8 * v1379;
                uint64_t v1121 = 8 * v1116;
                do
                {
                  if (v1119 >= 1)
                  {
                    uint64_t result = v1112[v1118];
                    uint64_t v1122 = v144[19];
                    uint64_t v1123 = (void *)(v8[19] + v1120);
                    uint64_t v1124 = 8 * *(void *)(v1115 + 8 * v1118);
                    int v1125 = v1119;
                    do
                    {
                      void *v1123 = *(char *)(v1122 + v143);
                      uint64_t v1123 = (void *)((char *)v1123 + v1124);
                      v1122 += result;
                      --v1125;
                    }
                    while (v1125);
                  }
                  v143 += v1114;
                  ++v1111;
                  v1120 += v1121;
                }
                while (v1111 != v1110);
              }
              break;
            case 3:
              uint64_t v1126 = (v145 << 30) - 0x300000000;
              ldiv_t v1127 = *a4;
              int v1128 = *(int *)((char *)*a4 + (v1126 >> 30));
              if (v1128 >= 1)
              {
                int v1129 = 0;
                int v1130 = *a5;
                uint64_t v1131 = v1126 >> 29;
                uint64_t v1132 = *(uint64_t *)((char *)*a5 + (v1126 >> 29));
                uint64_t v1133 = *a6;
                uint64_t v1134 = *(void *)(*a6 + v1131);
                uint64_t v1135 = v145 << 30;
                uint64_t v1136 = v1135 - 0x200000000;
                uint64_t v1137 = v1135 - 0x100000000;
                uint64_t v1138 = (v1135 - 0x200000000) >> 32;
                int v1139 = *(int *)((char *)v1127 + (v1136 >> 30));
                uint64_t v1140 = v1137 >> 32;
                uint64_t v1141 = 8 * v1379;
                uint64_t result = 8 * v1134;
                do
                {
                  if (v1139 >= 1)
                  {
                    int v1142 = 0;
                    uint64_t v1143 = v1130[v1138];
                    int v1144 = v1127[v1140];
                    int v1145 = *a2;
                    uint64_t v1146 = 8 * *(void *)(v1133 + 8 * v1138);
                    uint64_t v1147 = v1141;
                    uint64_t v1148 = v143;
                    do
                    {
                      if (v1144 >= 1)
                      {
                        uint64_t v1149 = v1130[v1140];
                        uint64_t v1150 = v144[19];
                        int v1151 = (void *)(v1145[19] + v1147);
                        uint64_t v1152 = 8 * *(void *)(v1133 + 8 * v1140);
                        int v1153 = v1144;
                        do
                        {
                          *int v1151 = *(char *)(v1150 + v1148);
                          int v1151 = (void *)((char *)v1151 + v1152);
                          v1150 += v1149;
                          --v1153;
                        }
                        while (v1153);
                      }
                      v1148 += v1143;
                      ++v1142;
                      v1147 += v1146;
                    }
                    while (v1142 != v1139);
                  }
                  v143 += v1132;
                  ++v1129;
                  v1141 += result;
                }
                while (v1129 != v1128);
              }
              break;
            case 4:
              uint64_t v1154 = (v145 << 30) - 0x400000000;
              int v1155 = *a4;
              int v1534 = *(int *)((char *)*a4 + (v1154 >> 30));
              if (v1534 >= 1)
              {
                int v1156 = 0;
                uint64_t v1157 = *a5;
                uint64_t v1158 = v1154 >> 29;
                uint64_t v1502 = *(uint64_t *)((char *)*a5 + v1158);
                uint64_t v1159 = *a6;
                uint64_t v1160 = (v145 << 30) - 0x300000000;
                uint64_t v1485 = v1160 >> 32;
                int v1161 = *(int *)((char *)v1155 + (v1160 >> 30));
                uint64_t v1162 = ((v145 << 30) - 0x200000000) >> 32;
                uint64_t v1163 = ((v145 << 30) - 0x100000000) >> 32;
                uint64_t result = 8 * v1379;
                uint64_t v1517 = 8 * *(void *)(*a6 + v1158);
                do
                {
                  uint64_t v1394 = v143;
                  if (v1161 >= 1)
                  {
                    int v1164 = 0;
                    uint64_t v1165 = v1157[v1485];
                    int v1166 = v1155[v1162];
                    uint64_t v1167 = 8 * *(void *)(v1159 + 8 * v1485);
                    uint64_t v1168 = result;
                    uint64_t v1169 = v143;
                    do
                    {
                      if (v1166 >= 1)
                      {
                        int v1170 = 0;
                        uint64_t v1171 = v1157[v1162];
                        int v1172 = v1155[v1163];
                        uint64_t v1173 = *a2;
                        uint64_t v1174 = 8 * *(void *)(v1159 + 8 * v1162);
                        uint64_t v1175 = v1168;
                        uint64_t v1176 = v1169;
                        do
                        {
                          if (v1172 >= 1)
                          {
                            uint64_t v1177 = v1157[v1163];
                            uint64_t v1178 = v144[19];
                            uint64_t v1179 = (void *)(v1173[19] + v1175);
                            uint64_t v1180 = 8 * *(void *)(v1159 + 8 * v1163);
                            int v1181 = v1172;
                            do
                            {
                              *uint64_t v1179 = *(char *)(v1178 + v1176);
                              uint64_t v1179 = (void *)((char *)v1179 + v1180);
                              v1178 += v1177;
                              --v1181;
                            }
                            while (v1181);
                          }
                          v1176 += v1171;
                          ++v1170;
                          v1175 += v1174;
                        }
                        while (v1170 != v1166);
                      }
                      v1169 += v1165;
                      ++v1164;
                      v1168 += v1167;
                    }
                    while (v1164 != v1161);
                  }
                  uint64_t v143 = v1394 + v1502;
                  ++v1156;
                  result += v1517;
                }
                while (v1156 != v1534);
              }
              break;
            case 5:
              uint64_t v1182 = (v145 << 30) - 0x500000000;
              uint64_t v1183 = *a4;
              int v1436 = *(int *)((char *)*a4 + (v1182 >> 30));
              if (v1436 >= 1)
              {
                int v1446 = 0;
                uint64_t v1184 = *a5;
                uint64_t v1185 = v1182 >> 29;
                uint64_t v1426 = *(uint64_t *)((char *)*a5 + v1185);
                uint64_t v1186 = *a6;
                uint64_t v1187 = (v145 << 30) - 0x400000000;
                int v1518 = *(int *)((char *)v1183 + (v1187 >> 30));
                uint64_t v1408 = v1187 >> 32;
                uint64_t v1188 = ((v145 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v145 << 30) - 0x100000000) >> 32;
                uint64_t v1458 = 8 * v1379;
                uint64_t v1470 = ((v145 << 30) - 0x300000000) >> 32;
                uint64_t v1416 = 8 * *(void *)(*a6 + v1185);
                do
                {
                  uint64_t v1395 = v143;
                  if (v1518 >= 1)
                  {
                    int v1189 = 0;
                    uint64_t v1503 = v1184[v1408];
                    int v1190 = v1183[v1470];
                    uint64_t v1486 = 8 * *(void *)(v1186 + 8 * v1408);
                    uint64_t v1191 = v1458;
                    uint64_t v1192 = v143;
                    do
                    {
                      int v1535 = v1189;
                      if (v1190 >= 1)
                      {
                        int v1193 = 0;
                        uint64_t v1194 = v1184[v1470];
                        int v1195 = v1183[v1188];
                        uint64_t v1196 = 8 * *(void *)(v1186 + 8 * v1470);
                        uint64_t v1197 = v1191;
                        uint64_t v1198 = v1192;
                        do
                        {
                          if (v1195 >= 1)
                          {
                            int v1199 = 0;
                            uint64_t v1200 = v1184[v1188];
                            int v1201 = v1183[result];
                            int v1202 = *a2;
                            uint64_t v1203 = 8 * *(void *)(v1186 + 8 * v1188);
                            uint64_t v1204 = v1197;
                            uint64_t v1205 = v1198;
                            do
                            {
                              if (v1201 >= 1)
                              {
                                uint64_t v1206 = v1184[result];
                                uint64_t v1207 = v144[19];
                                uint64_t v1208 = (void *)(v1202[19] + v1204);
                                uint64_t v1209 = 8 * *(void *)(v1186 + 8 * result);
                                int v1210 = v1201;
                                do
                                {
                                  *uint64_t v1208 = *(char *)(v1207 + v1205);
                                  uint64_t v1208 = (void *)((char *)v1208 + v1209);
                                  v1207 += v1206;
                                  --v1210;
                                }
                                while (v1210);
                              }
                              v1205 += v1200;
                              ++v1199;
                              v1204 += v1203;
                            }
                            while (v1199 != v1195);
                          }
                          v1198 += v1194;
                          ++v1193;
                          v1197 += v1196;
                        }
                        while (v1193 != v1190);
                      }
                      v1192 += v1503;
                      int v1189 = v1535 + 1;
                      v1191 += v1486;
                    }
                    while (v1535 + 1 != v1518);
                  }
                  uint64_t v143 = v1395 + v1426;
                  v1458 += v1416;
                  ++v1446;
                }
                while (v1446 != v1436);
              }
              break;
            default:
              uint64_t v1071 = (char *)a4[1];
              LODWORD(v1072) = 1;
              uint64_t v1073 = -20;
              do
              {
                uint64_t v1072 = *(int *)&v1071[v1073] * (uint64_t)(int)v1072;
                v1073 += 4;
              }
              while (v1073);
              unint64_t v1375 = v144[6];
              if (v1375)
              {
                uint64_t v1074 = 0;
                uint64_t v1075 = (v145 << 30) - 0x500000000;
                uint64_t v1076 = *a4;
                uint64_t v1355 = *v8;
                uint64_t v1077 = *a5;
                uint64_t v1360 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1365 = ((unint64_t)(v1071 - (char *)*a4) >> 2) - 1;
                uint64_t v1078 = *a6;
                uint64_t v1351 = v1075 >> 32;
                int v1425 = *(int *)((char *)*a4 + (v1075 >> 30));
                uint64_t v1393 = *a7;
                uint64_t v1401 = ((v145 << 30) - 0x400000000) >> 32;
                uint64_t v1469 = ((v145 << 30) - 0x300000000) >> 32;
                uint64_t v1079 = ((v145 << 30) - 0x200000000) >> 32;
                uint64_t v1080 = ((v145 << 30) - 0x100000000) >> 32;
                uint64_t v1370 = v1072;
                do
                {
                  uint64_t v1081 = v1365;
                  if ((v1365 & 0x80000000) != 0)
                  {
                    uint64_t v1082 = 0;
                  }
                  else
                  {
                    uint64_t v1082 = 0;
                    LODWORD(result) = v1074;
                    do
                    {
                      ldiv_t v1083 = ldiv((int)result, v1076[v1081]);
                      uint64_t result = v1083.quot;
                      v1082 += v1077[v1081--] * v1083.rem;
                    }
                    while (v1081 != -1);
                  }
                  uint64_t v1084 = v1360;
                  uint64_t v1386 = v1074;
                  uint64_t v1085 = 0;
                  if ((v1360 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1074;
                    do
                    {
                      ldiv_t v1086 = ldiv((int)result, *(int *)(v1355 + 4 * v1084));
                      uint64_t result = v1086.quot;
                      v1085 += *(void *)(v1078 + 8 * v1084--) * v1086.rem;
                    }
                    while (v1084 != -1);
                  }
                  if (v1425 >= 1)
                  {
                    int v1087 = 0;
                    uint64_t v1415 = v1077[v1351];
                    uint64_t v1457 = v1082 + v1393;
                    int v1516 = v1076[v1401];
                    uint64_t v1445 = 8 * (v1085 + v1379);
                    uint64_t v1407 = 8 * *(void *)(v1078 + 8 * v1351);
                    do
                    {
                      int v1435 = v1087;
                      if (v1516 >= 1)
                      {
                        int v1088 = 0;
                        uint64_t v1501 = v1077[v1401];
                        int v1089 = v1076[v1469];
                        uint64_t v1484 = 8 * *(void *)(v1078 + 8 * v1401);
                        uint64_t v1091 = v1445;
                        uint64_t v1090 = v1457;
                        do
                        {
                          if (v1089 >= 1)
                          {
                            int v1092 = 0;
                            uint64_t v1093 = v1077[v1469];
                            int v1094 = v1076[v1079];
                            uint64_t v1095 = 8 * *(void *)(v1078 + 8 * v1469);
                            uint64_t result = v1091;
                            uint64_t v1096 = v1090;
                            do
                            {
                              if (v1094 >= 1)
                              {
                                int v1097 = 0;
                                uint64_t v1098 = v1077[v1079];
                                int v1099 = v1076[v1080];
                                uint64_t v1100 = *a2;
                                uint64_t v1101 = 8 * *(void *)(v1078 + 8 * v1079);
                                uint64_t v1102 = result;
                                uint64_t v1103 = v1096;
                                do
                                {
                                  if (v1099 >= 1)
                                  {
                                    uint64_t v1104 = v1077[v1080];
                                    uint64_t v1105 = v144[19];
                                    uint64_t v1106 = (void *)(v1100[19] + v1102);
                                    uint64_t v1107 = 8 * *(void *)(v1078 + 8 * v1080);
                                    int v1108 = v1099;
                                    do
                                    {
                                      *uint64_t v1106 = *(char *)(v1105 + v1103);
                                      uint64_t v1106 = (void *)((char *)v1106 + v1107);
                                      v1105 += v1104;
                                      --v1108;
                                    }
                                    while (v1108);
                                  }
                                  v1103 += v1098;
                                  ++v1097;
                                  v1102 += v1101;
                                }
                                while (v1097 != v1094);
                              }
                              v1096 += v1093;
                              ++v1092;
                              result += v1095;
                            }
                            while (v1092 != v1089);
                          }
                          v1090 += v1501;
                          ++v1088;
                          v1091 += v1484;
                        }
                        while (v1088 != v1516);
                      }
                      v1457 += v1415;
                      int v1087 = v1435 + 1;
                      v1445 += v1407;
                    }
                    while (v1435 + 1 != v1425);
                  }
                  v1074 += v1370;
                }
                while (v1375 > v1386 + v1370);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v32 = v8[6];
          if (v32)
          {
            float v33 = (float)**(char **)(*(void *)result + 152);
            uint64_t v34 = (float *)v8[19];
            do
            {
              *v34++ = v33;
              --v32;
            }
            while (v32);
          }
          break;
        case 1:
          uint64_t v153 = *(void *)(*(void *)result + 160);
          if (v153)
          {
            uint64_t v154 = *(char **)(*(void *)result + 152);
            uint64_t v155 = (float *)v8[19];
            do
            {
              int v156 = *v154++;
              *v155++ = (float)v156;
              --v153;
            }
            while (v153);
          }
          break;
        case 2:
          uint64_t v157 = *a7;
          uint64_t v158 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v159 = **a4;
              if ((int)v159 >= 1)
              {
                uint64_t v160 = (float *)v8[19];
                uint64_t v161 = **a5;
                uint64_t v162 = (char *)(*(void *)(v158 + 152) + v157);
                do
                {
                  *v160++ = (float)*v162;
                  v162 += v161;
                  --v159;
                }
                while (v159);
              }
              break;
            case 2:
              int v486 = **a4;
              if (v486 >= 1)
              {
                int v487 = 0;
                uint64_t v488 = 0;
                uint64_t v489 = *(void *)(v158 + 152);
                uint64_t v490 = v8[19];
                uint64_t v491 = (*a4)[1];
                uint64_t v492 = (*a5)[1];
                uint64_t v493 = **a5 - v492 * v491;
                do
                {
                  int v494 = v491;
                  if ((int)v491 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(char *)(v489 + v157);
                      *(float *)(v490 + 4 * v488++) = (float)(int)result;
                      v157 += v492;
                      --v494;
                    }
                    while (v494);
                  }
                  v157 += v493;
                  ++v487;
                }
                while (v487 != v486);
              }
              break;
            case 3:
              ldiv_t v495 = *a4;
              int v496 = **a4;
              if (v496 >= 1)
              {
                int v497 = 0;
                uint64_t result = 0;
                uint64_t v498 = *(void *)(v158 + 152);
                uint64_t v499 = v8[19];
                uint64_t v500 = v495[1];
                uint64_t v501 = *a5;
                uint64_t v502 = (*a5)[1];
                uint64_t v503 = **a5 - v502 * v500;
                do
                {
                  if ((int)v500 < 1)
                  {
                    uint64_t v510 = result;
                  }
                  else
                  {
                    int v504 = 0;
                    uint64_t v505 = v495[2];
                    int v506 = *a5;
                    uint64_t v507 = v502 - v501[2] * v505;
                    do
                    {
                      if ((int)v505 < 1)
                      {
                        uint64_t v510 = result;
                      }
                      else
                      {
                        uint64_t v508 = v506[2];
                        int v509 = v505;
                        do
                        {
                          uint64_t v510 = result + 1;
                          *(float *)(v499 + 4 * result) = (float)*(char *)(v498 + v157);
                          v157 += v508;
                          ++result;
                          --v509;
                        }
                        while (v509);
                      }
                      v157 += v507;
                      ++v504;
                      uint64_t result = v510;
                    }
                    while (v504 != v500);
                  }
                  v157 += v503;
                  ++v497;
                  uint64_t result = v510;
                }
                while (v497 != v496);
              }
              break;
            case 4:
              uint64_t v511 = *a4;
              int v512 = **a4;
              if (v512 >= 1)
              {
                int v513 = 0;
                uint64_t result = 0;
                uint64_t v514 = *(void *)(v158 + 152);
                uint64_t v515 = v8[19];
                uint64_t v516 = v511[1];
                uint64_t v517 = *a5;
                uint64_t v518 = (*a5)[1];
                uint64_t v519 = **a5 - v518 * v516;
                do
                {
                  if ((int)v516 < 1)
                  {
                    uint64_t v530 = result;
                  }
                  else
                  {
                    int v520 = 0;
                    uint64_t v521 = v511[2];
                    int v522 = *a5;
                    uint64_t v523 = v518 - v517[2] * v521;
                    do
                    {
                      if ((int)v521 < 1)
                      {
                        uint64_t v530 = result;
                      }
                      else
                      {
                        int v524 = 0;
                        uint64_t v525 = v511[3];
                        uint64_t v526 = *a5;
                        uint64_t v527 = v522[2] - v522[3] * v525;
                        do
                        {
                          if ((int)v525 < 1)
                          {
                            uint64_t v530 = result;
                          }
                          else
                          {
                            uint64_t v528 = v526[3];
                            int v529 = v525;
                            do
                            {
                              uint64_t v530 = result + 1;
                              *(float *)(v515 + 4 * result) = (float)*(char *)(v514 + v157);
                              v157 += v528;
                              ++result;
                              --v529;
                            }
                            while (v529);
                          }
                          v157 += v527;
                          ++v524;
                          uint64_t result = v530;
                        }
                        while (v524 != v521);
                      }
                      v157 += v523;
                      ++v520;
                      uint64_t result = v530;
                    }
                    while (v520 != v516);
                  }
                  v157 += v519;
                  ++v513;
                  uint64_t result = v530;
                }
                while (v513 != v512);
              }
              break;
            default:
              uint64_t v476 = v8[6];
              if (v476)
              {
                uint64_t v477 = 0;
                uint64_t v478 = *(void *)(v158 + 152) + v157;
                uint64_t v479 = v8[19];
                uint64_t v480 = *a4;
                uint64_t v481 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v482 = *a5;
                do
                {
                  uint64_t v483 = 0;
                  if ((v481 & 0x80000000) == 0)
                  {
                    uint64_t v484 = v481;
                    LODWORD(result) = v477;
                    do
                    {
                      ldiv_t v485 = ldiv((int)result, v480[v484]);
                      uint64_t result = v485.quot;
                      v483 += v482[v484--] * v485.rem;
                    }
                    while (v484 != -1);
                  }
                  *(float *)(v479 + 4 * v477++) = (float)*(char *)(v478 + v483);
                }
                while (v477 != v476);
              }
              break;
          }
          break;
        case 3:
          uint64_t v163 = *a7;
          uint64_t v1382 = *a8;
          uint64_t v164 = *(void **)result;
          uint64_t v165 = v164[1] - *v164;
          switch(v165 >> 2)
          {
            case 1:
              uint64_t v166 = (v165 << 30) - 0x100000000;
              int v167 = *(int *)((char *)*a4 + (v166 >> 30));
              if (v167 >= 1)
              {
                uint64_t v168 = v166 >> 29;
                uint64_t v169 = *(uint64_t *)((char *)*a5 + (v166 >> 29));
                uint64_t v170 = (float *)(v8[19] + 4 * v1382);
                float v171 = (char *)(v164[19] + v163);
                uint64_t v172 = 4 * *(void *)(*a6 + v168);
                do
                {
                  *uint64_t v170 = (float)*v171;
                  v171 += v169;
                  uint64_t v170 = (float *)((char *)v170 + v172);
                  --v167;
                }
                while (v167);
              }
              break;
            case 2:
              uint64_t v1249 = (v165 << 30) - 0x200000000;
              int v1250 = *(int *)((char *)*a4 + (v1249 >> 30));
              if (v1250 >= 1)
              {
                int v1251 = 0;
                uint64_t v1252 = v1249 >> 29;
                uint64_t v1253 = *(uint64_t *)((char *)*a5 + (v1249 >> 29));
                uint64_t v1254 = (v165 << 30) - 0x100000000;
                uint64_t result = v1254 >> 29;
                uint64_t v1255 = *(uint64_t *)((char *)*a5 + (v1254 >> 29));
                int v1256 = *(int *)((char *)*a4 + (v1254 >> 30));
                uint64_t v1257 = 4 * v1382;
                uint64_t v1258 = 4 * *(void *)(*a6 + v1252);
                uint64_t v1259 = 4 * *(void *)(*a6 + (v1254 >> 29));
                do
                {
                  if (v1256 >= 1)
                  {
                    uint64_t v1260 = v164[19];
                    uint64_t result = v8[19] + v1257;
                    int v1261 = v1256;
                    do
                    {
                      *(float *)uint64_t result = (float)*(char *)(v1260 + v163);
                      result += v1259;
                      v1260 += v1255;
                      --v1261;
                    }
                    while (v1261);
                  }
                  v163 += v1253;
                  ++v1251;
                  v1257 += v1258;
                }
                while (v1251 != v1250);
              }
              break;
            case 3:
              uint64_t v1262 = (v165 << 30) - 0x300000000;
              uint64_t v1263 = *a4;
              int v1264 = *(int *)((char *)*a4 + (v1262 >> 30));
              if (v1264 >= 1)
              {
                int v1265 = 0;
                uint64_t v1266 = v165 << 30;
                uint64_t v1267 = *a5;
                uint64_t v1268 = v1262 >> 29;
                uint64_t v1269 = *(uint64_t *)((char *)*a5 + (v1262 >> 29));
                uint64_t v1270 = *a6;
                uint64_t v1271 = *(void *)(*a6 + v1268);
                uint64_t v1272 = v1266 - 0x200000000;
                uint64_t v1273 = (v1266 - 0x200000000) >> 29;
                uint64_t v1274 = v1266 - 0x100000000;
                uint64_t v1275 = *(uint64_t *)((char *)*a5 + v1273);
                uint64_t v1276 = *(void *)(*a6 + v1273);
                int v1277 = *(int *)((char *)v1263 + (v1272 >> 30));
                uint64_t v1278 = v1274 >> 32;
                uint64_t v1279 = 4 * v1382;
                uint64_t result = 4 * v1271;
                uint64_t v1280 = 4 * v1276;
                do
                {
                  if (v1277 >= 1)
                  {
                    int v1281 = 0;
                    uint64_t v1282 = v1267[v1278];
                    int v1283 = v1263[v1278];
                    uint64_t v1284 = *a2;
                    uint64_t v1285 = 4 * *(void *)(v1270 + 8 * v1278);
                    uint64_t v1286 = v1279;
                    uint64_t v1287 = v163;
                    do
                    {
                      if (v1283 >= 1)
                      {
                        uint64_t v1288 = v164[19];
                        uint64_t v1289 = (float *)(v1284[19] + v1286);
                        int v1290 = v1283;
                        do
                        {
                          *uint64_t v1289 = (float)*(char *)(v1288 + v1287);
                          uint64_t v1289 = (float *)((char *)v1289 + v1285);
                          v1288 += v1282;
                          --v1290;
                        }
                        while (v1290);
                      }
                      v1287 += v1275;
                      ++v1281;
                      v1286 += v1280;
                    }
                    while (v1281 != v1277);
                  }
                  v163 += v1269;
                  ++v1265;
                  v1279 += result;
                }
                while (v1265 != v1264);
              }
              break;
            case 4:
              uint64_t v1291 = (v165 << 30) - 0x400000000;
              int v1292 = *a4;
              int v1505 = *(int *)((char *)*a4 + (v1291 >> 30));
              if (v1505 >= 1)
              {
                int v1293 = 0;
                uint64_t v1294 = v165 << 30;
                uint64_t v1295 = *a5;
                uint64_t v1296 = v1291 >> 29;
                uint64_t v1488 = *(uint64_t *)((char *)*a5 + v1296);
                uint64_t v1297 = *a6;
                uint64_t v1298 = (v165 << 30) - 0x300000000;
                uint64_t v1299 = *(uint64_t *)((char *)*a5 + (v1298 >> 29));
                uint64_t v1300 = *(void *)(*a6 + (v1298 >> 29));
                int v1301 = *(int *)((char *)v1292 + (v1298 >> 30));
                uint64_t v1302 = (v1294 - 0x200000000) >> 32;
                uint64_t v1303 = (v1294 - 0x100000000) >> 32;
                uint64_t result = 4 * v1382;
                uint64_t v1520 = 4 * *(void *)(*a6 + v1296);
                uint64_t v1304 = 4 * v1300;
                do
                {
                  uint64_t v1305 = v163;
                  if (v1301 >= 1)
                  {
                    int v1306 = 0;
                    uint64_t v1307 = v1295[v1302];
                    int v1308 = v1292[v1302];
                    uint64_t v1309 = 4 * *(void *)(v1297 + 8 * v1302);
                    uint64_t v1310 = result;
                    uint64_t v1311 = v163;
                    do
                    {
                      if (v1308 >= 1)
                      {
                        int v1312 = 0;
                        uint64_t v1313 = v1295[v1303];
                        int v1314 = v1292[v1303];
                        int v1315 = *a2;
                        uint64_t v1316 = 4 * *(void *)(v1297 + 8 * v1303);
                        uint64_t v1317 = v1310;
                        uint64_t v1318 = v1311;
                        do
                        {
                          if (v1314 >= 1)
                          {
                            uint64_t v1319 = v164[19];
                            uint64_t v1320 = (float *)(v1315[19] + v1317);
                            int v1321 = v1314;
                            do
                            {
                              *uint64_t v1320 = (float)*(char *)(v1319 + v1318);
                              uint64_t v1320 = (float *)((char *)v1320 + v1316);
                              v1319 += v1313;
                              --v1321;
                            }
                            while (v1321);
                          }
                          v1318 += v1307;
                          ++v1312;
                          v1317 += v1309;
                        }
                        while (v1312 != v1308);
                      }
                      v1311 += v1299;
                      ++v1306;
                      v1310 += v1304;
                    }
                    while (v1306 != v1301);
                  }
                  uint64_t v163 = v1305 + v1488;
                  ++v1293;
                  result += v1520;
                }
                while (v1293 != v1505);
              }
              break;
            case 5:
              uint64_t v1322 = (v165 << 30) - 0x500000000;
              uint64_t v1323 = *a4;
              int v1448 = *(int *)((char *)*a4 + (v1322 >> 30));
              if (v1448 >= 1)
              {
                int v1460 = 0;
                uint64_t v1324 = *a5;
                uint64_t v1325 = v1322 >> 29;
                uint64_t v1438 = *(uint64_t *)((char *)*a5 + v1325);
                uint64_t v1326 = *a6;
                uint64_t v1327 = (v165 << 30) - 0x400000000;
                uint64_t v1506 = *(uint64_t *)((char *)*a5 + (v1327 >> 29));
                int v1521 = *(int *)((char *)v1323 + (v1327 >> 30));
                uint64_t v1328 = ((v165 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v165 << 30) - 0x100000000) >> 32;
                uint64_t v1472 = 4 * v1382;
                uint64_t v1418 = ((v165 << 30) - 0x300000000) >> 32;
                uint64_t v1428 = 4 * *(void *)(*a6 + v1325);
                uint64_t v1489 = 4 * *(void *)(*a6 + (v1327 >> 29));
                do
                {
                  uint64_t v1403 = v163;
                  if (v1521 >= 1)
                  {
                    int v1329 = 0;
                    uint64_t v1330 = v1324[v1418];
                    int v1331 = v1323[v1418];
                    uint64_t v1332 = 4 * *(void *)(v1326 + 8 * v1418);
                    uint64_t v1333 = v1472;
                    uint64_t v1334 = v163;
                    do
                    {
                      if (v1331 >= 1)
                      {
                        int v1335 = 0;
                        uint64_t v1336 = v1324[v1328];
                        int v1337 = v1323[v1328];
                        uint64_t v1338 = 4 * *(void *)(v1326 + 8 * v1328);
                        uint64_t v1339 = v1333;
                        uint64_t v1340 = v1334;
                        do
                        {
                          if (v1337 >= 1)
                          {
                            int v1341 = 0;
                            uint64_t v1342 = v1324[result];
                            int v1343 = v1323[result];
                            uint64_t v1344 = *a2;
                            uint64_t v1345 = 4 * *(void *)(v1326 + 8 * result);
                            uint64_t v1346 = v1339;
                            uint64_t v1347 = v1340;
                            do
                            {
                              if (v1343 >= 1)
                              {
                                uint64_t v1348 = v164[19];
                                uint64_t v1349 = (float *)(v1344[19] + v1346);
                                int v1350 = v1343;
                                do
                                {
                                  *uint64_t v1349 = (float)*(char *)(v1348 + v1347);
                                  uint64_t v1349 = (float *)((char *)v1349 + v1345);
                                  v1348 += v1342;
                                  --v1350;
                                }
                                while (v1350);
                              }
                              v1347 += v1336;
                              ++v1341;
                              v1346 += v1338;
                            }
                            while (v1341 != v1337);
                          }
                          v1340 += v1330;
                          ++v1335;
                          v1339 += v1332;
                        }
                        while (v1335 != v1331);
                      }
                      v1334 += v1506;
                      ++v1329;
                      v1333 += v1489;
                    }
                    while (v1329 != v1521);
                  }
                  uint64_t v163 = v1403 + v1438;
                  v1472 += v1428;
                  ++v1460;
                }
                while (v1460 != v1448);
              }
              break;
            default:
              int v1211 = (char *)a4[1];
              LODWORD(v1212) = 1;
              uint64_t v1213 = -20;
              do
              {
                uint64_t v1212 = *(int *)&v1211[v1213] * (uint64_t)(int)v1212;
                v1213 += 4;
              }
              while (v1213);
              unint64_t v1381 = v164[6];
              if (v1381)
              {
                uint64_t v1214 = 0;
                uint64_t v1215 = (v165 << 30) - 0x500000000;
                int v1216 = *a4;
                uint64_t v1361 = *v8;
                uint64_t v1371 = ((unint64_t)(v1211 - (char *)*a4) >> 2) - 1;
                int v1217 = *a5;
                uint64_t v1218 = *a6;
                int v1437 = *(int *)((char *)*a4 + (v1215 >> 30));
                uint64_t v1366 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1356 = ((v165 << 30) - 0x400000000) >> 32;
                uint64_t v1402 = *a7;
                uint64_t v1409 = ((v165 << 30) - 0x300000000) >> 32;
                uint64_t v1219 = ((v165 << 30) - 0x200000000) >> 32;
                uint64_t v1220 = ((v165 << 30) - 0x100000000) >> 32;
                uint64_t v1417 = 4 * *(void *)(*a6 + (v1215 >> 29));
                uint64_t v1427 = *(uint64_t *)((char *)*a5 + (v1215 >> 29));
                uint64_t v1376 = v1212;
                do
                {
                  uint64_t v1221 = v1371;
                  if ((v1371 & 0x80000000) != 0)
                  {
                    uint64_t v1222 = 0;
                    uint64_t v1223 = v1366;
                  }
                  else
                  {
                    uint64_t v1222 = 0;
                    LODWORD(result) = v1214;
                    uint64_t v1223 = v1366;
                    do
                    {
                      ldiv_t v1224 = ldiv((int)result, v1216[v1221]);
                      uint64_t result = v1224.quot;
                      v1222 += v1217[v1221--] * v1224.rem;
                    }
                    while (v1221 != -1);
                  }
                  uint64_t v1396 = v1214;
                  uint64_t v1225 = 0;
                  if ((v1223 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1214;
                    do
                    {
                      ldiv_t v1226 = ldiv((int)result, *(int *)(v1361 + 4 * v1223));
                      uint64_t result = v1226.quot;
                      v1225 += *(void *)(v1218 + 8 * v1223--) * v1226.rem;
                    }
                    while (v1223 != -1);
                  }
                  if (v1437 >= 1)
                  {
                    int v1227 = 0;
                    uint64_t v1504 = v1217[v1356];
                    uint64_t v1471 = v1222 + v1402;
                    int v1519 = v1216[v1356];
                    uint64_t v1459 = 4 * (v1225 + v1382);
                    uint64_t v1487 = 4 * *(void *)(v1218 + 8 * v1356);
                    do
                    {
                      int v1447 = v1227;
                      if (v1519 >= 1)
                      {
                        int v1228 = 0;
                        uint64_t v1229 = v1217[v1409];
                        int v1230 = v1216[v1409];
                        uint64_t v1231 = 4 * *(void *)(v1218 + 8 * v1409);
                        uint64_t v1233 = v1459;
                        uint64_t v1232 = v1471;
                        do
                        {
                          if (v1230 >= 1)
                          {
                            int v1234 = 0;
                            uint64_t v1235 = v1217[v1219];
                            int v1236 = v1216[v1219];
                            uint64_t v1237 = 4 * *(void *)(v1218 + 8 * v1219);
                            uint64_t result = v1233;
                            uint64_t v1238 = v1232;
                            do
                            {
                              if (v1236 >= 1)
                              {
                                int v1239 = 0;
                                uint64_t v1240 = v1217[v1220];
                                int v1241 = v1216[v1220];
                                uint64_t v1242 = *a2;
                                uint64_t v1243 = 4 * *(void *)(v1218 + 8 * v1220);
                                uint64_t v1244 = result;
                                uint64_t v1245 = v1238;
                                do
                                {
                                  if (v1241 >= 1)
                                  {
                                    uint64_t v1246 = v164[19];
                                    uint64_t v1247 = (float *)(v1242[19] + v1244);
                                    int v1248 = v1241;
                                    do
                                    {
                                      *uint64_t v1247 = (float)*(char *)(v1246 + v1245);
                                      uint64_t v1247 = (float *)((char *)v1247 + v1243);
                                      v1246 += v1240;
                                      --v1248;
                                    }
                                    while (v1248);
                                  }
                                  v1245 += v1235;
                                  ++v1239;
                                  v1244 += v1237;
                                }
                                while (v1239 != v1236);
                              }
                              v1238 += v1229;
                              ++v1234;
                              result += v1231;
                            }
                            while (v1234 != v1230);
                          }
                          v1232 += v1504;
                          ++v1228;
                          v1233 += v1487;
                        }
                        while (v1228 != v1519);
                      }
                      v1471 += v1427;
                      int v1227 = v1447 + 1;
                      v1459 += v1417;
                    }
                    while (v1447 + 1 != v1437);
                  }
                  v1214 += v1376;
                }
                while (v1381 > v1396 + v1376);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<int,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, void *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = *(uint64_t **)a2;
  uint64_t v11 = (uint64_t *)a2;
  uint64_t v12 = result;
  switch(*(_DWORD *)(*(void *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v13 = v8[6];
          if (v13)
          {
            size_t v14 = (void *)v8[19];
            BOOL v15 = **(_DWORD **)(*(void *)v12 + 152) != 0;
            uint64_t result = (uint64_t)memset(v14, v15, v13);
          }
          break;
        case 1:
          uint64_t v37 = *(void *)(*(void *)result + 160);
          if (v37)
          {
            uint64_t v38 = *(int **)(*(void *)result + 152);
            uint64_t v39 = (BOOL *)v8[19];
            uint64_t v40 = 4 * v37;
            do
            {
              int v41 = *v38++;
              *v39++ = v41 != 0;
              v40 -= 4;
            }
            while (v40);
          }
          break;
        case 2:
          uint64_t v42 = *a7;
          uint64_t v43 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v44 = **a4;
              if ((int)v44 >= 1)
              {
                uint64_t v45 = (BOOL *)v8[19];
                uint64_t v46 = (_DWORD *)(*(void *)(v43 + 152) + 4 * v42);
                uint64_t v47 = 4 * **a5;
                do
                {
                  *v45++ = *v46 != 0;
                  uint64_t v46 = (_DWORD *)((char *)v46 + v47);
                  --v44;
                }
                while (v44);
              }
              break;
            case 2:
              int v193 = **a4;
              if (v193 >= 1)
              {
                int v194 = 0;
                uint64_t v195 = 0;
                uint64_t v196 = *(void *)(v43 + 152);
                uint64_t v197 = v8[19];
                uint64_t v198 = (*a4)[1];
                uint64_t v199 = (*a5)[1];
                uint64_t v200 = **a5 - v199 * v198;
                do
                {
                  int v201 = v198;
                  if ((int)v198 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(_DWORD *)(v196 + 4 * v42) != 0;
                      *(unsigned char *)(v197 + v195++) = result;
                      v42 += v199;
                      --v201;
                    }
                    while (v201);
                  }
                  v42 += v200;
                  ++v194;
                }
                while (v194 != v193);
              }
              break;
            case 3:
              uint64_t v202 = *a4;
              int v203 = **a4;
              if (v203 >= 1)
              {
                int v204 = 0;
                uint64_t result = 0;
                uint64_t v205 = *(void *)(v43 + 152);
                uint64_t v206 = v8[19];
                uint64_t v207 = v202[1];
                uint64_t v208 = *a5;
                uint64_t v209 = (*a5)[1];
                uint64_t v210 = **a5 - v209 * v207;
                do
                {
                  if ((int)v207 < 1)
                  {
                    uint64_t v217 = result;
                  }
                  else
                  {
                    int v211 = 0;
                    uint64_t v212 = v202[2];
                    uint64_t v213 = *a5;
                    uint64_t v214 = v209 - v208[2] * v212;
                    do
                    {
                      if ((int)v212 < 1)
                      {
                        uint64_t v217 = result;
                      }
                      else
                      {
                        uint64_t v215 = v213[2];
                        int v216 = v212;
                        do
                        {
                          uint64_t v217 = result + 1;
                          *(unsigned char *)(v206 + result) = *(_DWORD *)(v205 + 4 * v42) != 0;
                          v42 += v215;
                          ++result;
                          --v216;
                        }
                        while (v216);
                      }
                      v42 += v214;
                      ++v211;
                      uint64_t result = v217;
                    }
                    while (v211 != v207);
                  }
                  v42 += v210;
                  ++v204;
                  uint64_t result = v217;
                }
                while (v204 != v203);
              }
              break;
            case 4:
              uint64_t v218 = *a4;
              int v219 = **a4;
              if (v219 >= 1)
              {
                int v220 = 0;
                uint64_t result = 0;
                uint64_t v221 = *(void *)(v43 + 152);
                uint64_t v222 = v8[19];
                uint64_t v223 = v218[1];
                uint64_t v224 = *a5;
                uint64_t v225 = (*a5)[1];
                uint64_t v226 = **a5 - v225 * v223;
                do
                {
                  if ((int)v223 < 1)
                  {
                    uint64_t v237 = result;
                  }
                  else
                  {
                    int v227 = 0;
                    uint64_t v228 = v218[2];
                    uint64_t v229 = *a5;
                    uint64_t v230 = v225 - v224[2] * v228;
                    do
                    {
                      if ((int)v228 < 1)
                      {
                        uint64_t v237 = result;
                      }
                      else
                      {
                        int v231 = 0;
                        uint64_t v232 = v218[3];
                        uint64_t v233 = *a5;
                        uint64_t v234 = v229[2] - v229[3] * v232;
                        do
                        {
                          if ((int)v232 < 1)
                          {
                            uint64_t v237 = result;
                          }
                          else
                          {
                            uint64_t v235 = v233[3];
                            int v236 = v232;
                            do
                            {
                              uint64_t v237 = result + 1;
                              *(unsigned char *)(v222 + result) = *(_DWORD *)(v221 + 4 * v42) != 0;
                              v42 += v235;
                              ++result;
                              --v236;
                            }
                            while (v236);
                          }
                          v42 += v234;
                          ++v231;
                          uint64_t result = v237;
                        }
                        while (v231 != v228);
                      }
                      v42 += v230;
                      ++v227;
                      uint64_t result = v237;
                    }
                    while (v227 != v223);
                  }
                  v42 += v226;
                  ++v220;
                  uint64_t result = v237;
                }
                while (v220 != v219);
              }
              break;
            default:
              uint64_t v183 = v8[6];
              if (v183)
              {
                uint64_t v184 = 0;
                uint64_t v185 = *(void *)(v43 + 152) + 4 * v42;
                uint64_t v186 = v8[19];
                uint64_t v187 = *a4;
                uint64_t v188 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v189 = *a5;
                do
                {
                  uint64_t v190 = 0;
                  if ((v188 & 0x80000000) == 0)
                  {
                    uint64_t v191 = v188;
                    LODWORD(result) = v184;
                    do
                    {
                      ldiv_t v192 = ldiv((int)result, v187[v191]);
                      uint64_t result = v192.quot;
                      v190 += v189[v191--] * v192.rem;
                    }
                    while (v191 != -1);
                  }
                  *(unsigned char *)(v186 + v184++) = *(_DWORD *)(v185 + 4 * v190) != 0;
                }
                while (v184 != v183);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1437 = *a7;
          uint64_t v48 = *a8;
          uint64_t v49 = *(void **)result;
          uint64_t v50 = v49[1] - *v49;
          switch(v50 >> 2)
          {
            case 1:
              uint64_t v51 = (v50 << 30) - 0x100000000;
              int v52 = *(int *)((char *)*a4 + (v51 >> 30));
              if (v52 >= 1)
              {
                uint64_t v53 = v51 >> 29;
                uint64_t v54 = *(uint64_t *)((char *)*a5 + v53);
                uint64_t v55 = *(void *)(*a6 + v53);
                uint64_t v56 = (BOOL *)(v8[19] + v48);
                uint64_t v57 = (_DWORD *)(v49[19] + 4 * v1437);
                uint64_t v58 = 4 * v54;
                do
                {
                  *uint64_t v56 = *v57 != 0;
                  v56 += v55;
                  uint64_t v57 = (_DWORD *)((char *)v57 + v58);
                  --v52;
                }
                while (v52);
              }
              break;
            case 2:
              uint64_t v578 = (v50 << 30) - 0x200000000;
              int v579 = *(int *)((char *)*a4 + (v578 >> 30));
              if (v579 >= 1)
              {
                int v580 = 0;
                uint64_t v581 = v578 >> 29;
                uint64_t v582 = *(uint64_t *)((char *)*a5 + v581);
                uint64_t v583 = *(void *)(*a6 + v581);
                uint64_t v584 = (v50 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v584 >> 29));
                uint64_t v585 = *(void *)(*a6 + (v584 >> 29));
                int v586 = *(int *)((char *)*a4 + (v584 >> 30));
                uint64_t v587 = 4 * v1437;
                uint64_t v588 = 4 * v582;
                uint64_t v589 = 4 * result;
                do
                {
                  if (v586 >= 1)
                  {
                    uint64_t v590 = v8[19];
                    uint64_t result = v49[19] + v587;
                    int v591 = v586;
                    do
                    {
                      *(unsigned char *)(v590 + v48) = *(_DWORD *)result != 0;
                      v590 += v585;
                      result += v589;
                      --v591;
                    }
                    while (v591);
                  }
                  v48 += v583;
                  ++v580;
                  v587 += v588;
                }
                while (v580 != v579);
              }
              break;
            case 3:
              uint64_t v592 = (v50 << 30) - 0x300000000;
              uint64_t v593 = *a4;
              int v594 = *(int *)((char *)*a4 + (v592 >> 30));
              if (v594 >= 1)
              {
                int v595 = 0;
                uint64_t v596 = v50 << 30;
                uint64_t v597 = *a5;
                uint64_t v598 = v592 >> 29;
                uint64_t v599 = *(uint64_t *)((char *)*a5 + (v592 >> 29));
                uint64_t v600 = *a6;
                uint64_t v601 = *(void *)(*a6 + v598);
                uint64_t v602 = v596 - 0x200000000;
                uint64_t v603 = (v596 - 0x200000000) >> 29;
                uint64_t v604 = v596 - 0x100000000;
                uint64_t v605 = *(uint64_t *)((char *)*a5 + v603);
                uint64_t v606 = *(void *)(*a6 + v603);
                int v607 = *(int *)((char *)v593 + (v602 >> 30));
                uint64_t v608 = v604 >> 32;
                uint64_t v609 = 4 * v1437;
                uint64_t result = 4 * v599;
                uint64_t v610 = 4 * v605;
                do
                {
                  if (v607 >= 1)
                  {
                    int v611 = 0;
                    uint64_t v612 = *(void *)(v600 + 8 * v608);
                    int v613 = v593[v608];
                    uint64_t v614 = (void *)*v11;
                    uint64_t v615 = 4 * v597[v608];
                    uint64_t v616 = v609;
                    uint64_t v617 = v48;
                    do
                    {
                      if (v613 >= 1)
                      {
                        uint64_t v618 = v614[19];
                        int v619 = (_DWORD *)(v49[19] + v616);
                        int v620 = v613;
                        do
                        {
                          *(unsigned char *)(v618 + v617) = *v619 != 0;
                          v618 += v612;
                          int v619 = (_DWORD *)((char *)v619 + v615);
                          --v620;
                        }
                        while (v620);
                      }
                      v617 += v606;
                      ++v611;
                      v616 += v610;
                    }
                    while (v611 != v607);
                  }
                  v48 += v601;
                  ++v595;
                  v609 += result;
                }
                while (v595 != v594);
              }
              break;
            case 4:
              uint64_t v621 = (v50 << 30) - 0x400000000;
              uint64_t v622 = *a4;
              int v1579 = *(int *)((char *)*a4 + (v621 >> 30));
              if (v1579 >= 1)
              {
                int v623 = 0;
                uint64_t v624 = v50 << 30;
                int v625 = *a5;
                uint64_t v626 = v621 >> 29;
                uint64_t v627 = *(uint64_t *)((char *)*a5 + v626);
                uint64_t v628 = *a6;
                uint64_t v1561 = *(void *)(*a6 + v626);
                uint64_t v629 = (v50 << 30) - 0x300000000;
                uint64_t v630 = *(void *)(*a6 + (v629 >> 29));
                int v631 = *(int *)((char *)v622 + (v629 >> 30));
                uint64_t v1528 = (v624 - 0x200000000) >> 32;
                uint64_t v632 = (v624 - 0x100000000) >> 32;
                uint64_t result = 4 * v1437;
                uint64_t v633 = 4 * *(uint64_t *)((char *)*a5 + (v629 >> 29));
                do
                {
                  uint64_t v634 = v48;
                  if (v631 >= 1)
                  {
                    int v635 = 0;
                    uint64_t v636 = *(void *)(v628 + 8 * v1528);
                    int v637 = v622[v1528];
                    uint64_t v638 = 4 * v625[v1528];
                    uint64_t v639 = result;
                    uint64_t v640 = v48;
                    do
                    {
                      if (v637 >= 1)
                      {
                        int v641 = 0;
                        uint64_t v642 = *(void *)(v628 + 8 * v632);
                        int v643 = v622[v632];
                        uint64_t v644 = *v11;
                        uint64_t v645 = 4 * v625[v632];
                        uint64_t v646 = v639;
                        uint64_t v647 = v640;
                        do
                        {
                          if (v643 >= 1)
                          {
                            uint64_t v648 = *(void *)(v644 + 152);
                            uint64_t v649 = (_DWORD *)(v49[19] + v646);
                            int v650 = v643;
                            do
                            {
                              *(unsigned char *)(v648 + v647) = *v649 != 0;
                              v648 += v642;
                              uint64_t v649 = (_DWORD *)((char *)v649 + v645);
                              --v650;
                            }
                            while (v650);
                          }
                          v647 += v636;
                          ++v641;
                          v646 += v638;
                        }
                        while (v641 != v637);
                      }
                      v640 += v630;
                      ++v635;
                      v639 += v633;
                    }
                    while (v635 != v631);
                  }
                  uint64_t v48 = v634 + v1561;
                  ++v623;
                  result += 4 * v627;
                }
                while (v623 != v1579);
              }
              break;
            case 5:
              uint64_t v651 = (v50 << 30) - 0x500000000;
              int v652 = *a4;
              int v1493 = *(int *)((char *)*a4 + (v651 >> 30));
              if (v1493 >= 1)
              {
                int v1503 = 0;
                uint64_t v653 = *a5;
                uint64_t v654 = v651 >> 29;
                uint64_t v655 = *a6;
                uint64_t v1483 = *(void *)(*a6 + v654);
                uint64_t v656 = (v50 << 30) - 0x400000000;
                uint64_t v1562 = *(void *)(*a6 + (v656 >> 29));
                int v1580 = *(int *)((char *)v652 + (v656 >> 30));
                uint64_t v1463 = ((v50 << 30) - 0x300000000) >> 32;
                uint64_t v1529 = ((v50 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v50 << 30) - 0x100000000) >> 32;
                uint64_t v1515 = 4 * v1437;
                uint64_t v1473 = 4 * *(uint64_t *)((char *)*a5 + v654);
                uint64_t v1544 = 4 * *(uint64_t *)((char *)*a5 + (v656 >> 29));
                do
                {
                  uint64_t v1448 = v48;
                  if (v1580 >= 1)
                  {
                    int v657 = 0;
                    uint64_t v658 = *(void *)(v655 + 8 * v1463);
                    int v659 = v652[v1463];
                    uint64_t v660 = 4 * v653[v1463];
                    uint64_t v661 = v1515;
                    uint64_t v662 = v48;
                    do
                    {
                      if (v659 >= 1)
                      {
                        int v663 = 0;
                        uint64_t v664 = *(void *)(v655 + 8 * v1529);
                        int v665 = v652[v1529];
                        uint64_t v666 = 4 * v653[v1529];
                        uint64_t v667 = v661;
                        uint64_t v668 = v662;
                        do
                        {
                          if (v665 >= 1)
                          {
                            int v669 = 0;
                            uint64_t v670 = *(void *)(v655 + 8 * result);
                            int v671 = v652[result];
                            uint64_t v672 = *v11;
                            uint64_t v673 = 4 * v653[result];
                            uint64_t v674 = v667;
                            uint64_t v675 = v668;
                            do
                            {
                              if (v671 >= 1)
                              {
                                uint64_t v676 = *(void *)(v672 + 152);
                                uint64_t v677 = (_DWORD *)(v49[19] + v674);
                                int v678 = v671;
                                do
                                {
                                  *(unsigned char *)(v676 + v675) = *v677 != 0;
                                  v676 += v670;
                                  uint64_t v677 = (_DWORD *)((char *)v677 + v673);
                                  --v678;
                                }
                                while (v678);
                              }
                              v675 += v664;
                              ++v669;
                              v674 += v666;
                            }
                            while (v669 != v665);
                          }
                          v668 += v658;
                          ++v663;
                          v667 += v660;
                        }
                        while (v663 != v659);
                      }
                      v662 += v1562;
                      ++v657;
                      v661 += v1544;
                    }
                    while (v657 != v1580);
                  }
                  uint64_t v48 = v1448 + v1483;
                  v1515 += v1473;
                  ++v1503;
                }
                while (v1503 != v1493);
              }
              break;
            default:
              uint64_t v541 = (char *)a4[1];
              LODWORD(v542) = 1;
              uint64_t v543 = -20;
              do
              {
                uint64_t v542 = *(int *)&v541[v543] * (uint64_t)(int)v542;
                v543 += 4;
              }
              while (v543);
              unint64_t v1435 = v49[6];
              if (v1435)
              {
                uint64_t v544 = 0;
                uint64_t v545 = (v50 << 30) - 0x500000000;
                int v546 = *a4;
                uint64_t v1412 = *v8;
                uint64_t v1422 = ((unint64_t)(v541 - (char *)*a4) >> 2) - 1;
                int v547 = *a5;
                uint64_t v548 = *a6;
                uint64_t v1472 = *(void *)(*a6 + (v545 >> 29));
                int v1482 = *(int *)((char *)*a4 + (v545 >> 30));
                uint64_t v1417 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1408 = ((v50 << 30) - 0x400000000) >> 32;
                uint64_t v1454 = ((v50 << 30) - 0x300000000) >> 32;
                uint64_t v1527 = ((v50 << 30) - 0x200000000) >> 32;
                uint64_t v549 = ((v50 << 30) - 0x100000000) >> 32;
                uint64_t v1462 = 4 * *(uint64_t *)((char *)*a5 + (v545 >> 29));
                uint64_t v1447 = *a8;
                uint64_t v1427 = v542;
                do
                {
                  uint64_t v550 = v1422;
                  if ((v1422 & 0x80000000) != 0)
                  {
                    uint64_t v551 = 0;
                    uint64_t v552 = v1417;
                  }
                  else
                  {
                    uint64_t v551 = 0;
                    LODWORD(result) = v544;
                    uint64_t v552 = v1417;
                    do
                    {
                      ldiv_t v553 = ldiv((int)result, v546[v550]);
                      uint64_t result = v553.quot;
                      v551 += v547[v550--] * v553.rem;
                    }
                    while (v550 != -1);
                  }
                  uint64_t v1443 = v544;
                  uint64_t v554 = 0;
                  if ((v552 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v544;
                    do
                    {
                      ldiv_t v555 = ldiv((int)result, *(int *)(v1412 + 4 * v552));
                      uint64_t result = v555.quot;
                      v554 += *(void *)(v548 + 8 * v552--) * v555.rem;
                    }
                    while (v552 != -1);
                  }
                  if (v1482 >= 1)
                  {
                    int v556 = 0;
                    uint64_t v1560 = *(void *)(v548 + 8 * v1408);
                    int v1578 = v546[v1408];
                    uint64_t v1502 = 4 * (v551 + v1437);
                    uint64_t v1514 = v554 + v1447;
                    uint64_t v1543 = 4 * v547[v1408];
                    do
                    {
                      int v1492 = v556;
                      if (v1578 >= 1)
                      {
                        int v557 = 0;
                        uint64_t v558 = *(void *)(v548 + 8 * v1454);
                        int v559 = v546[v1454];
                        uint64_t v560 = 4 * v547[v1454];
                        uint64_t v562 = v1502;
                        uint64_t v561 = v1514;
                        do
                        {
                          if (v559 >= 1)
                          {
                            int v563 = 0;
                            uint64_t v564 = *(void *)(v548 + 8 * v1527);
                            int v565 = v546[v1527];
                            uint64_t v566 = 4 * v547[v1527];
                            uint64_t result = v562;
                            uint64_t v567 = v561;
                            do
                            {
                              if (v565 >= 1)
                              {
                                int v568 = 0;
                                uint64_t v569 = *(void *)(v548 + 8 * v549);
                                int v570 = v546[v549];
                                uint64_t v571 = *v11;
                                uint64_t v572 = 4 * v547[v549];
                                uint64_t v573 = result;
                                uint64_t v574 = v567;
                                do
                                {
                                  if (v570 >= 1)
                                  {
                                    uint64_t v575 = *(void *)(v571 + 152);
                                    uint64_t v576 = (_DWORD *)(v49[19] + v573);
                                    int v577 = v570;
                                    do
                                    {
                                      *(unsigned char *)(v575 + v574) = *v576 != 0;
                                      v575 += v569;
                                      uint64_t v576 = (_DWORD *)((char *)v576 + v572);
                                      --v577;
                                    }
                                    while (v577);
                                  }
                                  v574 += v564;
                                  ++v568;
                                  v573 += v566;
                                }
                                while (v568 != v565);
                              }
                              v567 += v558;
                              ++v563;
                              result += v560;
                            }
                            while (v563 != v559);
                          }
                          v561 += v1560;
                          ++v557;
                          v562 += v1543;
                        }
                        while (v557 != v1578);
                      }
                      v1514 += v1472;
                      int v556 = v1492 + 1;
                      v1502 += v1462;
                    }
                    while (v1492 + 1 != v1482);
                  }
                  v544 += v1427;
                }
                while (v1435 > v1443 + v1427);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v16 = 0;
            int v17 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v18 = v8[19];
            do
              *(unsigned char *)(v18 + v16++) = v17;
            while (*(void *)(*(void *)a2 + 48) > v16);
          }
          break;
        case 1:
          uint64_t v59 = *(void *)(*(void *)result + 160);
          if (v59)
          {
            uint64_t v60 = *(int **)(*(void *)result + 152);
            uint64_t v61 = (unsigned char *)v8[19];
            uint64_t v62 = 4 * v59;
            do
            {
              int v63 = *v60++;
              *v61++ = v63;
              v62 -= 4;
            }
            while (v62);
          }
          break;
        case 2:
          uint64_t v64 = *a7;
          uint64_t v65 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v66 = 0;
                uint64_t v67 = *(void *)(v65 + 152);
                uint64_t v68 = v8[19];
                do
                {
                  *(unsigned char *)(v68 + v66) = *(_DWORD *)(v67 + 4 * v64);
                  v64 += **a5;
                  ++v66;
                }
                while (**a4 > (int)v66);
              }
              break;
            case 2:
              int v247 = *a4;
              int v248 = **a4;
              if (v248 >= 1)
              {
                int v249 = 0;
                uint64_t v250 = 0;
                uint64_t v251 = *(void *)(v65 + 152);
                uint64_t v252 = v8[19];
                do
                {
                  int v253 = v247[1];
                  if (v253 < 1)
                  {
                    int v254 = *a5;
                    uint64_t v255 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v252 + v250 + result) = *(_DWORD *)(v251 + 4 * v64);
                      int v254 = *a5;
                      uint64_t v255 = (*a5)[1];
                      v64 += v255;
                      int v247 = *a4;
                      int v253 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v253);
                    int v248 = *v247;
                    v250 += result;
                  }
                  uint64_t v64 = *v254 + v64 - v255 * v253;
                  ++v249;
                }
                while (v249 < v248);
              }
              break;
            case 3:
              uint64_t v256 = *a4;
              int v257 = **a4;
              if (v257 >= 1)
              {
                int v258 = 0;
                uint64_t v259 = 0;
                uint64_t v260 = *(void *)(v65 + 152);
                uint64_t v261 = v8[19];
                do
                {
                  int v262 = v256[1];
                  if (v262 < 1)
                  {
                    int v266 = *a5;
                    uint64_t v267 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v262; ++i)
                    {
                      int v264 = v256[2];
                      if (v264 < 1)
                      {
                        int v266 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v265 = 0;
                        do
                        {
                          *(unsigned char *)(v261 + v259 + v265) = *(_DWORD *)(v260 + 4 * v64);
                          int v266 = *a5;
                          uint64_t result = (*a5)[2];
                          v64 += result;
                          uint64_t v256 = *a4;
                          int v264 = (*a4)[2];
                          ++v265;
                        }
                        while ((int)v265 < v264);
                        v259 += v265;
                      }
                      uint64_t v267 = v266[1];
                      uint64_t v64 = v267 + v64 - result * v264;
                      int v262 = v256[1];
                    }
                    int v257 = *v256;
                  }
                  uint64_t v64 = *v266 + v64 - v267 * v262;
                  ++v258;
                }
                while (v258 < v257);
              }
              break;
            case 4:
              int v268 = *a4;
              int v269 = **a4;
              if (v269 >= 1)
              {
                int v270 = 0;
                uint64_t v271 = 0;
                uint64_t v272 = *(void *)(v65 + 152);
                uint64_t v273 = v8[19];
                do
                {
                  int v274 = v268[1];
                  if (v274 < 1)
                  {
                    uint64_t v280 = *a5;
                    uint64_t v282 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v274; ++j)
                    {
                      int v276 = v268[2];
                      if (v276 < 1)
                      {
                        uint64_t v280 = *a5;
                        uint64_t v281 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v276; ++k)
                        {
                          int v278 = v268[3];
                          if (v278 < 1)
                          {
                            uint64_t v280 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v279 = 0;
                            do
                            {
                              *(unsigned char *)(v273 + v271 + v279) = *(_DWORD *)(v272 + 4 * v64);
                              uint64_t v280 = *a5;
                              uint64_t result = (*a5)[3];
                              v64 += result;
                              int v268 = *a4;
                              int v278 = (*a4)[3];
                              ++v279;
                            }
                            while ((int)v279 < v278);
                            v271 += v279;
                          }
                          uint64_t v281 = v280[2];
                          uint64_t v64 = v281 + v64 - result * v278;
                          int v276 = v268[2];
                        }
                      }
                      uint64_t v282 = v280[1];
                      uint64_t v64 = v282 + v64 - v281 * v276;
                      int v274 = v268[1];
                    }
                    int v269 = *v268;
                  }
                  uint64_t v64 = *v280 + v64 - v282 * v274;
                  ++v270;
                }
                while (v270 < v269);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v238 = 0;
                uint64_t v239 = *(void *)(v65 + 152) + 4 * v64;
                uint64_t v240 = v8[19];
                do
                {
                  uint64_t v241 = *a4;
                  unint64_t v242 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v243 = 0;
                  uint64_t v244 = (v242 - 1);
                  if ((int)v242 - 1 >= 0)
                  {
                    uint64_t v245 = *a5;
                    LODWORD(result) = v238;
                    do
                    {
                      ldiv_t v246 = ldiv((int)result, v241[v244]);
                      uint64_t result = v246.quot;
                      v243 += v245[v244--] * v246.rem;
                    }
                    while (v244 != -1);
                  }
                  *(unsigned char *)(v240 + v238++) = *(_DWORD *)(v239 + 4 * v243);
                }
                while (v238 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1576 = *a7;
          uint64_t v69 = *a8;
          uint64_t v70 = *(void **)result;
          uint64_t v71 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v71 >> 2)
          {
            case 1:
              uint64_t v72 = (v71 << 30) - 0x100000000;
              int v73 = *(int *)((char *)*a4 + (v72 >> 30));
              if (v73 >= 1)
              {
                uint64_t v74 = v72 >> 29;
                uint64_t v75 = *(uint64_t *)((char *)*a5 + v74);
                uint64_t v76 = *(void *)(*a6 + v74);
                uint64_t v77 = (unsigned char *)(v8[19] + v69);
                int v78 = (_DWORD *)(v70[19] + 4 * v1576);
                uint64_t v79 = 4 * v75;
                do
                {
                  *uint64_t v77 = *v78;
                  v77 += v76;
                  int v78 = (_DWORD *)((char *)v78 + v79);
                  --v73;
                }
                while (v73);
              }
              break;
            case 2:
              uint64_t v701 = (v71 << 30) - 0x200000000;
              int v702 = *(int *)((char *)*a4 + (v701 >> 30));
              if (v702 >= 1)
              {
                int v703 = 0;
                uint64_t v704 = v701 >> 29;
                uint64_t v705 = *(uint64_t *)((char *)*a5 + v704);
                uint64_t v706 = *(void *)(*a6 + v704);
                uint64_t v707 = 4 * v1576;
                uint64_t v708 = 4 * v705;
                do
                {
                  uint64_t v709 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v710 = *(int *)((char *)*a4 + (v709 >> 30));
                  if (v710 >= 1)
                  {
                    uint64_t v711 = v709 >> 29;
                    uint64_t v712 = *(uint64_t *)((char *)*a5 + v711);
                    uint64_t v713 = *(void *)(*a6 + v711);
                    uint64_t v714 = *(void *)(*(void *)a2 + 152);
                    uint64_t v715 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v707);
                    uint64_t result = 4 * v712;
                    do
                    {
                      *(unsigned char *)(v714 + v69) = *v715;
                      v714 += v713;
                      uint64_t v715 = (_DWORD *)((char *)v715 + result);
                      --v710;
                    }
                    while (v710);
                  }
                  v69 += v706;
                  ++v703;
                  v707 += v708;
                }
                while (v703 != v702);
              }
              break;
            case 3:
              uint64_t v716 = (v71 << 30) - 0x300000000;
              int v717 = *(int *)((char *)*a4 + (v716 >> 30));
              if (v717 >= 1)
              {
                int v718 = 0;
                uint64_t v719 = v716 >> 29;
                uint64_t v720 = *(uint64_t *)((char *)*a5 + v719);
                uint64_t v721 = *(void *)(*a6 + v719);
                uint64_t v722 = 4 * v1576;
                uint64_t v723 = 4 * v720;
                do
                {
                  uint64_t v724 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v725 = *(int *)((char *)*a4 + (v724 >> 30));
                  if (v725 >= 1)
                  {
                    int v726 = 0;
                    uint64_t v727 = v724 >> 29;
                    uint64_t v728 = *(uint64_t *)((char *)*a5 + v727);
                    uint64_t v729 = *(void *)(*a6 + v727);
                    uint64_t result = 4 * v728;
                    uint64_t v730 = v722;
                    uint64_t v731 = v69;
                    do
                    {
                      uint64_t v732 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v733 = *(int *)((char *)*a4 + (v732 >> 30));
                      if (v733 >= 1)
                      {
                        uint64_t v734 = v732 >> 29;
                        uint64_t v735 = *(uint64_t *)((char *)*a5 + v734);
                        uint64_t v736 = *(void *)(*a6 + v734);
                        uint64_t v737 = *(void *)(*v11 + 152);
                        uint64_t v738 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v730);
                        uint64_t v739 = 4 * v735;
                        do
                        {
                          *(unsigned char *)(v737 + v731) = *v738;
                          v737 += v736;
                          uint64_t v738 = (_DWORD *)((char *)v738 + v739);
                          --v733;
                        }
                        while (v733);
                      }
                      v731 += v729;
                      ++v726;
                      v730 += result;
                    }
                    while (v726 != v725);
                  }
                  v69 += v721;
                  ++v718;
                  v722 += v723;
                }
                while (v718 != v717);
              }
              break;
            case 4:
              ldiv_t v740 = a4;
              uint64_t v741 = a5;
              uint64_t v742 = a6;
              uint64_t v743 = *a7;
              uint64_t v744 = *a8;
              goto LABEL_558;
            case 5:
              uint64_t v745 = (v71 << 30) - 0x500000000;
              int v746 = *(int *)((char *)*a4 + (v745 >> 30));
              if (v746 >= 1)
              {
                uint64_t v747 = v745 >> 29;
                uint64_t v748 = *(uint64_t *)((char *)*a5 + v747);
                uint64_t v749 = *(void *)(*a6 + v747);
                do
                {
                  v1576 += v748;
                  v69 += v749;
                  --v746;
                }
                while (v746);
              }
              break;
            default:
              LODWORD(v679) = 1;
              uint64_t v680 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v679 = a4[1][v680++] * (uint64_t)(int)v679;
              while (v680 * 4);
              if (v70[6])
              {
                uint64_t result = 0;
                uint64_t v1504 = *a8;
                uint64_t v1516 = v679;
                do
                {
                  uint64_t v681 = *a4;
                  unint64_t v682 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v683 = (v682 - 1);
                  uint64_t v1530 = v70;
                  uint64_t v1545 = result;
                  uint64_t v684 = 0;
                  if ((int)v682 - 1 >= 0)
                  {
                    uint64_t v685 = *a5;
                    do
                    {
                      ldiv_t v686 = ldiv((int)result, v681[v683]);
                      LODWORD(result) = v686.quot;
                      v684 += v685[v683--] * v686.rem;
                    }
                    while (v683 != -1);
                  }
                  uint64_t v687 = *(void *)*v11;
                  unint64_t v688 = (unint64_t)(*(void *)(*v11 + 8) - v687) >> 2;
                  uint64_t v689 = *a6;
                  uint64_t v690 = 0;
                  uint64_t v691 = (v688 - 1);
                  if ((int)v688 - 1 >= 0)
                  {
                    int quot = v1545;
                    do
                    {
                      ldiv_t v693 = ldiv(quot, *(int *)(v687 + 4 * v691));
                      int quot = v693.quot;
                      v690 += *(void *)(v689 + 8 * v691--) * v693.rem;
                    }
                    while (v691 != -1);
                  }
                  uint64_t v70 = v1530;
                  uint64_t v694 = ((v70[1] - *v70) << 30) - 0x500000000;
                  int v695 = *(int *)((char *)v681 + (v694 >> 30));
                  if (v695 >= 1)
                  {
                    uint64_t v696 = v684 + v1576;
                    uint64_t v697 = v694 >> 29;
                    uint64_t v698 = *(uint64_t *)((char *)*a5 + v697);
                    uint64_t v699 = *(void *)(v689 + v697);
                    uint64_t v700 = v690 + v1504;
                    do
                    {
                      v696 += v698;
                      v700 += v699;
                      --v695;
                    }
                    while (v695);
                    uint64_t v70 = *(void **)v12;
                  }
                  uint64_t result = v1545 + v1516;
                }
                while (v70[6] > (unint64_t)(v1545 + v1516));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v19 = v8[6];
          if (v19)
          {
            int v20 = **(_DWORD **)(*(void *)result + 152);
            int v21 = (_DWORD *)v8[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          uint64_t v80 = *a7;
          uint64_t v81 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v82 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v83 = 0;
                uint64_t v84 = *(void *)(v81 + 152);
                uint64_t v85 = v8[19];
                uint64_t v86 = **a5;
                uint64_t v87 = (_DWORD *)(v84 + 4 * v80);
                do
                {
                  *(_DWORD *)(v85 + 4 * v83) = *v87;
                  v87 += v86;
                  ++v83;
                }
                while (*v82 > (int)v83);
              }
              break;
            case 2:
              uint64_t v293 = *a4;
              int v294 = **a4;
              if (v294 >= 1)
              {
                int v295 = 0;
                uint64_t v296 = 0;
                uint64_t v297 = *(void *)(v81 + 152);
                uint64_t v298 = v8[19];
                uint64_t v299 = **a5;
                uint64_t v300 = (*a5)[1];
                int v301 = v293[1];
                do
                {
                  if (v301 >= 1)
                  {
                    uint64_t v302 = 0;
                    do
                    {
                      *(_DWORD *)(v298 + 4 * v296 + 4 * v302) = *(_DWORD *)(v297 + 4 * v80);
                      v80 += v300;
                      int v301 = v293[1];
                      ++v302;
                    }
                    while ((int)v302 < v301);
                    int v294 = *v293;
                    v296 += v302;
                  }
                  uint64_t result = v301;
                  uint64_t v80 = v80 + v299 - v300 * v301;
                  ++v295;
                }
                while (v295 < v294);
              }
              break;
            case 3:
              int v303 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v304 = 0;
                uint64_t v305 = 0;
                uint64_t v306 = *(void *)(v81 + 152);
                uint64_t v307 = v8[19];
                uint64_t v308 = *a5;
                uint64_t v309 = **a5;
                uint64_t v310 = (*a5)[1];
                int v311 = v303[1];
                do
                {
                  if (v311 >= 1)
                  {
                    int v312 = 0;
                    uint64_t v313 = *a5;
                    uint64_t v314 = v308[2];
                    int v315 = v303[2];
                    do
                    {
                      if (v315 >= 1)
                      {
                        uint64_t v316 = 0;
                        uint64_t v317 = v313[2];
                        do
                        {
                          *(_DWORD *)(v307 + 4 * v305 + 4 * v316) = *(_DWORD *)(v306 + 4 * v80);
                          v80 += v317;
                          int v315 = v303[2];
                          ++v316;
                        }
                        while ((int)v316 < v315);
                        int v311 = v303[1];
                        v305 += v316;
                      }
                      uint64_t v80 = v80 + v310 - v314 * v315;
                      ++v312;
                    }
                    while (v312 < v311);
                    uint64_t result = *v303;
                  }
                  uint64_t v80 = v80 + v309 - v310 * v311;
                  ++v304;
                }
                while (v304 < (int)result);
              }
              break;
            case 4:
              int v318 = *a4;
              int v319 = **a4;
              if (v319 >= 1)
              {
                int v320 = 0;
                uint64_t v321 = 0;
                uint64_t v322 = *(void *)(v81 + 152);
                uint64_t v323 = v8[19];
                uint64_t v324 = *a5;
                uint64_t v325 = **a5;
                uint64_t v326 = (*a5)[1];
                int v327 = v318[1];
                do
                {
                  if (v327 >= 1)
                  {
                    int v328 = 0;
                    unint64_t v329 = *a5;
                    uint64_t v330 = v324[2];
                    int v331 = v318[2];
                    do
                    {
                      if (v331 >= 1)
                      {
                        int v332 = 0;
                        unint64_t v333 = *a5;
                        uint64_t v334 = v329[2];
                        uint64_t v335 = v329[3];
                        int v336 = v318[3];
                        do
                        {
                          if (v336 >= 1)
                          {
                            uint64_t v337 = 0;
                            uint64_t v338 = v333[3];
                            do
                            {
                              *(_DWORD *)(v323 + 4 * v321 + 4 * v337) = *(_DWORD *)(v322 + 4 * v80);
                              v80 += v338;
                              int v336 = v318[3];
                              ++v337;
                            }
                            while ((int)v337 < v336);
                            int v331 = v318[2];
                            v321 += v337;
                          }
                          uint64_t v80 = v80 + v334 - v335 * v336;
                          ++v332;
                        }
                        while (v332 < v331);
                        int v327 = v318[1];
                      }
                      uint64_t v80 = v80 + v326 - v330 * v331;
                      ++v328;
                    }
                    while (v328 < v327);
                    int v319 = *v318;
                  }
                  uint64_t result = v327;
                  uint64_t v80 = v80 + v325 - v326 * v327;
                  ++v320;
                }
                while (v320 < v319);
              }
              break;
            default:
              uint64_t v283 = v8[6];
              if (v283)
              {
                uint64_t v284 = 0;
                uint64_t v285 = *(void *)(v81 + 152) + 4 * v80;
                uint64_t v286 = v8[19];
                uint64_t v287 = *a4;
                uint64_t v288 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v289 = *a5;
                do
                {
                  uint64_t v290 = 0;
                  if ((v288 & 0x80000000) == 0)
                  {
                    uint64_t v291 = v288;
                    LODWORD(result) = v284;
                    do
                    {
                      ldiv_t v292 = ldiv((int)result, v287[v291]);
                      uint64_t result = v292.quot;
                      v290 += v289[v291--] * v292.rem;
                    }
                    while (v291 != -1);
                  }
                  *(_DWORD *)(v286 + 4 * v284++) = *(_DWORD *)(v285 + 4 * v290);
                }
                while (v284 != v283);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1432 = *a8;
          uint64_t v1438 = *a7;
          uint64_t v88 = *(void **)result;
          uint64_t v89 = v88[1] - *v88;
          switch(v89 >> 2)
          {
            case 1:
              uint64_t v90 = (v89 << 30) - 0x100000000;
              int v91 = *(int *)((char *)*a4 + (v90 >> 30));
              if (v91 >= 1)
              {
                uint64_t v92 = v90 >> 29;
                uint64_t v93 = *(uint64_t *)((char *)*a5 + v92);
                uint64_t v94 = *(void *)(*a6 + v92);
                uint64_t v95 = (_DWORD *)(v8[19] + 4 * v1432);
                uint64_t v96 = (_DWORD *)(v88[19] + 4 * v1438);
                uint64_t v97 = 4 * v94;
                uint64_t v98 = 4 * v93;
                do
                {
                  _DWORD *v95 = *v96;
                  uint64_t v95 = (_DWORD *)((char *)v95 + v97);
                  uint64_t v96 = (_DWORD *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              uint64_t v788 = (v89 << 30) - 0x200000000;
              uint64_t v789 = *a4;
              int v790 = *(int *)((char *)*a4 + (v788 >> 30));
              if (v790 >= 1)
              {
                int v791 = 0;
                uint64_t v792 = v788 >> 29;
                uint64_t v793 = *(uint64_t *)((char *)*a5 + v792);
                uint64_t v794 = *(void *)(*a6 + v792);
                uint64_t v795 = (v89 << 30) - 0x100000000;
                uint64_t v796 = *(uint64_t *)((char *)*a5 + (v795 >> 29));
                uint64_t v797 = *(void *)(*a6 + (v795 >> 29));
                uint64_t v798 = v795 >> 32;
                uint64_t v799 = 4 * v1432;
                uint64_t v800 = 4 * v794;
                uint64_t v801 = 4 * v797;
                uint64_t v802 = 4 * v1438;
                uint64_t v803 = 4 * v793;
                uint64_t result = 4 * v796;
                do
                {
                  int v804 = v789[v798];
                  if (v804 >= 1)
                  {
                    uint64_t v805 = (_DWORD *)(v8[19] + v799);
                    uint64_t v806 = (_DWORD *)(v88[19] + v802);
                    do
                    {
                      _DWORD *v805 = *v806;
                      uint64_t v805 = (_DWORD *)((char *)v805 + v801);
                      uint64_t v806 = (_DWORD *)((char *)v806 + result);
                      --v804;
                    }
                    while (v804);
                  }
                  ++v791;
                  v799 += v800;
                  v802 += v803;
                }
                while (v791 != v790);
              }
              break;
            case 3:
              uint64_t v807 = (v89 << 30) - 0x300000000;
              int v808 = *a4;
              int v809 = *(int *)((char *)*a4 + (v807 >> 30));
              if (v809 >= 1)
              {
                int v810 = 0;
                uint64_t v811 = *a5;
                uint64_t v812 = v807 >> 29;
                uint64_t v813 = *(uint64_t *)((char *)*a5 + (v807 >> 29));
                uint64_t v814 = *a6;
                uint64_t v815 = *(void *)(*a6 + v812);
                uint64_t v816 = v89 << 30;
                uint64_t v817 = (v89 << 30) - 0x200000000;
                uint64_t v818 = v817 >> 32;
                v817 >>= 29;
                uint64_t v819 = *(uint64_t *)((char *)*a5 + v817);
                uint64_t v820 = *(void *)(*a6 + v817);
                uint64_t v821 = (v816 - 0x100000000) >> 32;
                uint64_t v822 = 4 * v1432;
                uint64_t v823 = 4 * v815;
                uint64_t v824 = 4 * v820;
                uint64_t result = 4 * v1438;
                uint64_t v825 = 4 * v813;
                uint64_t v826 = 4 * v819;
                do
                {
                  int v827 = v808[v818];
                  if (v827 >= 1)
                  {
                    int v828 = 0;
                    uint64_t v829 = (void *)*v11;
                    uint64_t v830 = 4 * *(void *)(v814 + 8 * v821);
                    uint64_t v831 = 4 * v811[v821];
                    uint64_t v832 = result;
                    uint64_t v833 = v822;
                    do
                    {
                      int v834 = v808[v821];
                      if (v834 >= 1)
                      {
                        uint64_t v835 = (_DWORD *)(v829[19] + v833);
                        uint64_t v836 = (_DWORD *)(v88[19] + v832);
                        do
                        {
                          _DWORD *v835 = *v836;
                          uint64_t v835 = (_DWORD *)((char *)v835 + v830);
                          uint64_t v836 = (_DWORD *)((char *)v836 + v831);
                          --v834;
                        }
                        while (v834);
                      }
                      ++v828;
                      v833 += v824;
                      v832 += v826;
                    }
                    while (v828 != v827);
                  }
                  ++v810;
                  v822 += v823;
                  result += v825;
                }
                while (v810 != v809);
              }
              break;
            case 4:
              uint64_t v837 = (v89 << 30) - 0x400000000;
              int v838 = *a4;
              int v1582 = *(int *)((char *)*a4 + (v837 >> 30));
              if (v1582 >= 1)
              {
                int v839 = 0;
                uint64_t v840 = *a5;
                uint64_t v841 = v837 >> 29;
                uint64_t v842 = v89 << 30;
                uint64_t v843 = *a6;
                uint64_t v1564 = (v842 - 0x300000000) >> 32;
                uint64_t v844 = (v842 - 0x300000000) >> 29;
                uint64_t v845 = *(uint64_t *)((char *)*a5 + v844);
                uint64_t v846 = *(void *)(*a6 + v844);
                uint64_t v847 = (v842 - 0x200000000) >> 32;
                uint64_t v848 = (v842 - 0x100000000) >> 32;
                uint64_t v849 = 4 * v1432;
                uint64_t v1547 = 4 * *(void *)(*a6 + v841);
                uint64_t result = 4 * v846;
                uint64_t v850 = 4 * v1438;
                uint64_t v1532 = 4 * *(uint64_t *)((char *)*a5 + v841);
                uint64_t v851 = 4 * v845;
                do
                {
                  int v852 = v838[v1564];
                  if (v852 >= 1)
                  {
                    int v853 = 0;
                    uint64_t v854 = 4 * *(void *)(v843 + 8 * v847);
                    uint64_t v855 = 4 * v840[v847];
                    uint64_t v856 = v850;
                    uint64_t v857 = v849;
                    do
                    {
                      int v858 = v838[v847];
                      if (v858 >= 1)
                      {
                        int v859 = 0;
                        int v860 = (void *)*v11;
                        uint64_t v861 = 4 * *(void *)(v843 + 8 * v848);
                        uint64_t v862 = 4 * v840[v848];
                        uint64_t v863 = v856;
                        uint64_t v864 = v857;
                        do
                        {
                          int v865 = v838[v848];
                          if (v865 >= 1)
                          {
                            uint64_t v866 = (_DWORD *)(v860[19] + v864);
                            int v867 = (_DWORD *)(v88[19] + v863);
                            do
                            {
                              _DWORD *v866 = *v867;
                              uint64_t v866 = (_DWORD *)((char *)v866 + v861);
                              int v867 = (_DWORD *)((char *)v867 + v862);
                              --v865;
                            }
                            while (v865);
                          }
                          ++v859;
                          v864 += v854;
                          v863 += v855;
                        }
                        while (v859 != v858);
                      }
                      ++v853;
                      v857 += result;
                      v856 += v851;
                    }
                    while (v853 != v852);
                  }
                  ++v839;
                  v849 += v1547;
                  v850 += v1532;
                }
                while (v839 != v1582);
              }
              break;
            case 5:
              uint64_t v868 = (v89 << 30) - 0x500000000;
              uint64_t v869 = *a4;
              int v1485 = *(int *)((char *)*a4 + (v868 >> 30));
              if (v1485 >= 1)
              {
                int v1495 = 0;
                uint64_t v870 = *a5;
                uint64_t v871 = v868 >> 29;
                uint64_t v872 = *a6;
                uint64_t v873 = v89 << 30;
                uint64_t v874 = (v873 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v874);
                uint64_t v1475 = (v873 - 0x400000000) >> 32;
                uint64_t v875 = *(void *)(*a6 + v874);
                uint64_t v1565 = (v873 - 0x300000000) >> 32;
                uint64_t v876 = (v873 - 0x200000000) >> 32;
                uint64_t v877 = (v873 - 0x100000000) >> 32;
                uint64_t v1518 = 4 * v1432;
                uint64_t v1465 = 4 * *(void *)(*a6 + v871);
                uint64_t v1548 = 4 * v875;
                uint64_t v1506 = 4 * v1438;
                uint64_t v1456 = 4 * *(uint64_t *)((char *)*a5 + v871);
                uint64_t v1533 = 4 * result;
                do
                {
                  int v1583 = v869[v1475];
                  if (v1583 >= 1)
                  {
                    int v878 = 0;
                    uint64_t v879 = 4 * *(void *)(v872 + 8 * v1565);
                    uint64_t v880 = 4 * v870[v1565];
                    uint64_t v881 = v1506;
                    uint64_t v882 = v1518;
                    do
                    {
                      int v883 = v869[v1565];
                      if (v883 >= 1)
                      {
                        int v884 = 0;
                        uint64_t v885 = 4 * *(void *)(v872 + 8 * v876);
                        uint64_t v886 = 4 * v870[v876];
                        uint64_t v887 = v881;
                        uint64_t v888 = v882;
                        do
                        {
                          int v889 = v869[v876];
                          if (v889 >= 1)
                          {
                            int v890 = 0;
                            uint64_t result = *v11;
                            uint64_t v891 = 4 * *(void *)(v872 + 8 * v877);
                            uint64_t v892 = 4 * v870[v877];
                            uint64_t v893 = v887;
                            uint64_t v894 = v888;
                            do
                            {
                              int v895 = v869[v877];
                              if (v895 >= 1)
                              {
                                uint64_t v896 = (_DWORD *)(*(void *)(result + 152) + v894);
                                uint64_t v897 = (_DWORD *)(v88[19] + v893);
                                do
                                {
                                  *uint64_t v896 = *v897;
                                  uint64_t v896 = (_DWORD *)((char *)v896 + v891);
                                  uint64_t v897 = (_DWORD *)((char *)v897 + v892);
                                  --v895;
                                }
                                while (v895);
                              }
                              ++v890;
                              v894 += v885;
                              v893 += v886;
                            }
                            while (v890 != v889);
                          }
                          ++v884;
                          v888 += v879;
                          v887 += v880;
                        }
                        while (v884 != v883);
                      }
                      ++v878;
                      v882 += v1548;
                      v881 += v1533;
                    }
                    while (v878 != v1583);
                  }
                  v1518 += v1465;
                  v1506 += v1456;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              uint64_t v750 = (char *)a4[1];
              LODWORD(v751) = 1;
              uint64_t v752 = -20;
              do
              {
                uint64_t v751 = *(int *)&v750[v752] * (uint64_t)(int)v751;
                v752 += 4;
              }
              while (v752);
              unint64_t v1428 = v88[6];
              if (v1428)
              {
                uint64_t result = 0;
                uint64_t v753 = (v89 << 30) - 0x500000000;
                uint64_t v754 = *a4;
                uint64_t v1464 = *v8;
                uint64_t v755 = *a5;
                uint64_t v1413 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1418 = ((unint64_t)(v750 - (char *)*a4) >> 2) - 1;
                uint64_t v1409 = v753 >> 32;
                uint64_t v756 = *a6;
                uint64_t v1474 = ((v89 << 30) - 0x400000000) >> 32;
                uint64_t v1563 = ((v89 << 30) - 0x300000000) >> 32;
                uint64_t v757 = ((v89 << 30) - 0x200000000) >> 32;
                uint64_t v758 = ((v89 << 30) - 0x100000000) >> 32;
                uint64_t v1449 = 4 * *(uint64_t *)((char *)*a5 + (v753 >> 29));
                uint64_t v1455 = 4 * *(void *)(*a6 + (v753 >> 29));
                uint64_t v1423 = v751;
                do
                {
                  uint64_t v759 = v1418;
                  uint64_t v1444 = result;
                  uint64_t v760 = 0;
                  if ((v1418 & 0x80000000) != 0)
                  {
                    uint64_t v761 = v1413;
                  }
                  else
                  {
                    uint64_t v761 = v1413;
                    do
                    {
                      ldiv_t v762 = ldiv((int)result, v754[v759]);
                      LODWORD(result) = v762.quot;
                      v760 += v755[v759--] * v762.rem;
                    }
                    while (v759 != -1);
                  }
                  uint64_t v763 = 0;
                  if ((v761 & 0x80000000) == 0)
                  {
                    int v764 = v1444;
                    do
                    {
                      ldiv_t v765 = ldiv(v764, *(int *)(v1464 + 4 * v761));
                      int v764 = v765.quot;
                      v763 += *(void *)(v756 + 8 * v761--) * v765.rem;
                    }
                    while (v761 != -1);
                  }
                  int v1484 = v754[v1409];
                  if (v1484 >= 1)
                  {
                    int v766 = 0;
                    uint64_t v1517 = 4 * (v763 + v1432);
                    uint64_t v1546 = 4 * *(void *)(v756 + 8 * v1474);
                    uint64_t v1505 = 4 * (v760 + v1438);
                    uint64_t v1531 = 4 * v755[v1474];
                    do
                    {
                      int v1494 = v766;
                      int v1581 = v754[v1474];
                      if (v1581 >= 1)
                      {
                        int v767 = 0;
                        uint64_t v768 = 4 * *(void *)(v756 + 8 * v1563);
                        uint64_t v769 = 4 * v755[v1563];
                        uint64_t v771 = v1505;
                        uint64_t v770 = v1517;
                        do
                        {
                          int v772 = v754[v1563];
                          if (v772 >= 1)
                          {
                            int v773 = 0;
                            uint64_t v774 = 4 * *(void *)(v756 + 8 * v757);
                            uint64_t v775 = 4 * v755[v757];
                            uint64_t v776 = v771;
                            uint64_t v777 = v770;
                            do
                            {
                              int v778 = v754[v757];
                              if (v778 >= 1)
                              {
                                int v779 = 0;
                                uint64_t v780 = (void *)*v11;
                                uint64_t v781 = 4 * *(void *)(v756 + 8 * v758);
                                uint64_t v782 = 4 * v755[v758];
                                uint64_t v783 = v776;
                                uint64_t v784 = v777;
                                do
                                {
                                  int v785 = v754[v758];
                                  if (v785 >= 1)
                                  {
                                    int v786 = (_DWORD *)(v780[19] + v784);
                                    int v787 = (_DWORD *)(v88[19] + v783);
                                    do
                                    {
                                      *int v786 = *v787;
                                      int v786 = (_DWORD *)((char *)v786 + v781);
                                      int v787 = (_DWORD *)((char *)v787 + v782);
                                      --v785;
                                    }
                                    while (v785);
                                  }
                                  ++v779;
                                  v784 += v774;
                                  v783 += v775;
                                }
                                while (v779 != v778);
                              }
                              ++v773;
                              v777 += v768;
                              v776 += v769;
                            }
                            while (v773 != v772);
                          }
                          ++v767;
                          v770 += v1546;
                          v771 += v1531;
                        }
                        while (v767 != v1581);
                      }
                      int v766 = v1494 + 1;
                      v1517 += v1455;
                      v1505 += v1449;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  uint64_t result = v1444 + v1423;
                }
                while (v1428 > v1444 + v1423);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v22 = 0;
            int v23 = **(_DWORD **)(*(void *)result + 152);
            uint64_t v24 = v8[19];
            do
              *(unsigned char *)(v24 + v22++) = v23;
            while (*(void *)(*(void *)a2 + 48) > v22);
          }
          break;
        case 1:
          uint64_t v99 = *(void *)(*(void *)result + 160);
          if (v99)
          {
            uint64_t v100 = *(int **)(*(void *)result + 152);
            uint64_t v101 = (unsigned char *)v8[19];
            uint64_t v102 = 4 * v99;
            do
            {
              int v103 = *v100++;
              *v101++ = v103;
              v102 -= 4;
            }
            while (v102);
          }
          break;
        case 2:
          uint64_t v104 = *a7;
          uint64_t v105 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v106 = 0;
                uint64_t v107 = *(void *)(v105 + 152);
                uint64_t v108 = v8[19];
                do
                {
                  *(unsigned char *)(v108 + v106) = *(_DWORD *)(v107 + 4 * v104);
                  v104 += **a5;
                  ++v106;
                }
                while (**a4 > (int)v106);
              }
              break;
            case 2:
              int v348 = *a4;
              int v349 = **a4;
              if (v349 >= 1)
              {
                int v350 = 0;
                uint64_t v351 = 0;
                uint64_t v352 = *(void *)(v105 + 152);
                uint64_t v353 = v8[19];
                do
                {
                  int v354 = v348[1];
                  if (v354 < 1)
                  {
                    int v355 = *a5;
                    uint64_t v356 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v353 + v351 + result) = *(_DWORD *)(v352 + 4 * v104);
                      int v355 = *a5;
                      uint64_t v356 = (*a5)[1];
                      v104 += v356;
                      int v348 = *a4;
                      int v354 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v354);
                    int v349 = *v348;
                    v351 += result;
                  }
                  uint64_t v104 = *v355 + v104 - v356 * v354;
                  ++v350;
                }
                while (v350 < v349);
              }
              break;
            case 3:
              uint64_t v357 = *a4;
              int v358 = **a4;
              if (v358 >= 1)
              {
                int v359 = 0;
                uint64_t v360 = 0;
                uint64_t v361 = *(void *)(v105 + 152);
                uint64_t v362 = v8[19];
                do
                {
                  int v363 = v357[1];
                  if (v363 < 1)
                  {
                    int v367 = *a5;
                    uint64_t v368 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v363; ++m)
                    {
                      int v365 = v357[2];
                      if (v365 < 1)
                      {
                        int v367 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v366 = 0;
                        do
                        {
                          *(unsigned char *)(v362 + v360 + v366) = *(_DWORD *)(v361 + 4 * v104);
                          int v367 = *a5;
                          uint64_t result = (*a5)[2];
                          v104 += result;
                          uint64_t v357 = *a4;
                          int v365 = (*a4)[2];
                          ++v366;
                        }
                        while ((int)v366 < v365);
                        v360 += v366;
                      }
                      uint64_t v368 = v367[1];
                      uint64_t v104 = v368 + v104 - result * v365;
                      int v363 = v357[1];
                    }
                    int v358 = *v357;
                  }
                  uint64_t v104 = *v367 + v104 - v368 * v363;
                  ++v359;
                }
                while (v359 < v358);
              }
              break;
            case 4:
              int v369 = *a4;
              int v370 = **a4;
              if (v370 >= 1)
              {
                int v371 = 0;
                uint64_t v372 = 0;
                uint64_t v373 = *(void *)(v105 + 152);
                uint64_t v374 = v8[19];
                do
                {
                  int v375 = v369[1];
                  if (v375 < 1)
                  {
                    uint64_t v381 = *a5;
                    uint64_t v383 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v375; ++n)
                    {
                      int v377 = v369[2];
                      if (v377 < 1)
                      {
                        uint64_t v381 = *a5;
                        uint64_t v382 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v377; ++ii)
                        {
                          int v379 = v369[3];
                          if (v379 < 1)
                          {
                            uint64_t v381 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v380 = 0;
                            do
                            {
                              *(unsigned char *)(v374 + v372 + v380) = *(_DWORD *)(v373 + 4 * v104);
                              uint64_t v381 = *a5;
                              uint64_t result = (*a5)[3];
                              v104 += result;
                              int v369 = *a4;
                              int v379 = (*a4)[3];
                              ++v380;
                            }
                            while ((int)v380 < v379);
                            v372 += v380;
                          }
                          uint64_t v382 = v381[2];
                          uint64_t v104 = v382 + v104 - result * v379;
                          int v377 = v369[2];
                        }
                      }
                      uint64_t v383 = v381[1];
                      uint64_t v104 = v383 + v104 - v382 * v377;
                      int v375 = v369[1];
                    }
                    int v370 = *v369;
                  }
                  uint64_t v104 = *v381 + v104 - v383 * v375;
                  ++v371;
                }
                while (v371 < v370);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v339 = 0;
                uint64_t v340 = *(void *)(v105 + 152) + 4 * v104;
                uint64_t v341 = v8[19];
                do
                {
                  uint64_t v342 = *a4;
                  unint64_t v343 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v344 = 0;
                  uint64_t v345 = (v343 - 1);
                  if ((int)v343 - 1 >= 0)
                  {
                    uint64_t v346 = *a5;
                    LODWORD(result) = v339;
                    do
                    {
                      ldiv_t v347 = ldiv((int)result, v342[v345]);
                      uint64_t result = v347.quot;
                      v344 += v346[v345--] * v347.rem;
                    }
                    while (v345 != -1);
                  }
                  *(unsigned char *)(v341 + v339++) = *(_DWORD *)(v340 + 4 * v344);
                }
                while (v339 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1577 = *a7;
          uint64_t v109 = *a8;
          uint64_t v110 = *(void **)result;
          uint64_t v111 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v111 >> 2)
          {
            case 1:
              uint64_t v112 = (v111 << 30) - 0x100000000;
              int v113 = *(int *)((char *)*a4 + (v112 >> 30));
              if (v113 >= 1)
              {
                uint64_t v114 = v112 >> 29;
                uint64_t v115 = *(uint64_t *)((char *)*a5 + v114);
                uint64_t v116 = *(void *)(*a6 + v114);
                uint64_t v117 = (unsigned char *)(v8[19] + v109);
                uint64_t v118 = (_DWORD *)(v110[19] + 4 * v1577);
                uint64_t v119 = 4 * v115;
                do
                {
                  *uint64_t v117 = *v118;
                  v117 += v116;
                  uint64_t v118 = (_DWORD *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              uint64_t v920 = (v111 << 30) - 0x200000000;
              int v921 = *(int *)((char *)*a4 + (v920 >> 30));
              if (v921 >= 1)
              {
                int v922 = 0;
                uint64_t v923 = v920 >> 29;
                uint64_t v924 = *(uint64_t *)((char *)*a5 + v923);
                uint64_t v925 = *(void *)(*a6 + v923);
                uint64_t v926 = 4 * v1577;
                uint64_t v927 = 4 * v924;
                do
                {
                  uint64_t v928 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v929 = *(int *)((char *)*a4 + (v928 >> 30));
                  if (v929 >= 1)
                  {
                    uint64_t v930 = v928 >> 29;
                    uint64_t v931 = *(uint64_t *)((char *)*a5 + v930);
                    uint64_t v932 = *(void *)(*a6 + v930);
                    uint64_t v933 = *(void *)(*(void *)a2 + 152);
                    uint64_t v934 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v926);
                    uint64_t result = 4 * v931;
                    do
                    {
                      *(unsigned char *)(v933 + v109) = *v934;
                      v933 += v932;
                      uint64_t v934 = (_DWORD *)((char *)v934 + result);
                      --v929;
                    }
                    while (v929);
                  }
                  v109 += v925;
                  ++v922;
                  v926 += v927;
                }
                while (v922 != v921);
              }
              break;
            case 3:
              uint64_t v935 = (v111 << 30) - 0x300000000;
              int v936 = *(int *)((char *)*a4 + (v935 >> 30));
              if (v936 >= 1)
              {
                int v937 = 0;
                uint64_t v938 = v935 >> 29;
                uint64_t v939 = *(uint64_t *)((char *)*a5 + v938);
                uint64_t v940 = *(void *)(*a6 + v938);
                uint64_t v941 = 4 * v1577;
                uint64_t v942 = 4 * v939;
                do
                {
                  uint64_t v943 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v944 = *(int *)((char *)*a4 + (v943 >> 30));
                  if (v944 >= 1)
                  {
                    int v945 = 0;
                    uint64_t v946 = v943 >> 29;
                    uint64_t v947 = *(uint64_t *)((char *)*a5 + v946);
                    uint64_t v948 = *(void *)(*a6 + v946);
                    uint64_t result = 4 * v947;
                    uint64_t v949 = v941;
                    uint64_t v950 = v109;
                    do
                    {
                      uint64_t v951 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v952 = *(int *)((char *)*a4 + (v951 >> 30));
                      if (v952 >= 1)
                      {
                        uint64_t v953 = v951 >> 29;
                        uint64_t v954 = *(uint64_t *)((char *)*a5 + v953);
                        uint64_t v955 = *(void *)(*a6 + v953);
                        uint64_t v956 = *(void *)(*v11 + 152);
                        uint64_t v957 = (_DWORD *)(*(void *)(*(void *)v12 + 152) + v949);
                        uint64_t v958 = 4 * v954;
                        do
                        {
                          *(unsigned char *)(v956 + v950) = *v957;
                          v956 += v955;
                          uint64_t v957 = (_DWORD *)((char *)v957 + v958);
                          --v952;
                        }
                        while (v952);
                      }
                      v950 += v948;
                      ++v945;
                      v949 += result;
                    }
                    while (v945 != v944);
                  }
                  v109 += v940;
                  ++v937;
                  v941 += v942;
                }
                while (v937 != v936);
              }
              break;
            case 4:
              ldiv_t v740 = a4;
              uint64_t v741 = a5;
              uint64_t v742 = a6;
              uint64_t v743 = *a7;
              uint64_t v744 = *a8;
LABEL_558:
              break;
            case 5:
              uint64_t v959 = (v111 << 30) - 0x500000000;
              int v960 = *(int *)((char *)*a4 + (v959 >> 30));
              if (v960 >= 1)
              {
                uint64_t v961 = v959 >> 29;
                uint64_t v962 = *(uint64_t *)((char *)*a5 + v961);
                uint64_t v963 = *(void *)(*a6 + v961);
                do
                {
                  v1577 += v962;
                  v109 += v963;
                  --v960;
                }
                while (v960);
              }
              break;
            default:
              LODWORD(v898) = 1;
              uint64_t v899 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v898 = a4[1][v899++] * (uint64_t)(int)v898;
              while (v899 * 4);
              if (v110[6])
              {
                uint64_t result = 0;
                uint64_t v1507 = *a8;
                uint64_t v1519 = v898;
                do
                {
                  uint64_t v900 = *a4;
                  unint64_t v901 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v902 = (v901 - 1);
                  int v1534 = v110;
                  uint64_t v1549 = result;
                  uint64_t v903 = 0;
                  if ((int)v901 - 1 >= 0)
                  {
                    uint64_t v904 = *a5;
                    do
                    {
                      ldiv_t v905 = ldiv((int)result, v900[v902]);
                      LODWORD(result) = v905.quot;
                      v903 += v904[v902--] * v905.rem;
                    }
                    while (v902 != -1);
                  }
                  uint64_t v906 = *(void *)*v11;
                  unint64_t v907 = (unint64_t)(*(void *)(*v11 + 8) - v906) >> 2;
                  uint64_t v908 = *a6;
                  uint64_t v909 = 0;
                  uint64_t v910 = (v907 - 1);
                  if ((int)v907 - 1 >= 0)
                  {
                    int v911 = v1549;
                    do
                    {
                      ldiv_t v912 = ldiv(v911, *(int *)(v906 + 4 * v910));
                      int v911 = v912.quot;
                      v909 += *(void *)(v908 + 8 * v910--) * v912.rem;
                    }
                    while (v910 != -1);
                  }
                  uint64_t v110 = v1534;
                  uint64_t v913 = ((v110[1] - *v110) << 30) - 0x500000000;
                  int v914 = *(int *)((char *)v900 + (v913 >> 30));
                  if (v914 >= 1)
                  {
                    uint64_t v915 = v903 + v1577;
                    uint64_t v916 = v913 >> 29;
                    uint64_t v917 = *(uint64_t *)((char *)*a5 + v916);
                    uint64_t v918 = *(void *)(v908 + v916);
                    uint64_t v919 = v909 + v1507;
                    do
                    {
                      v915 += v917;
                      v919 += v918;
                      --v914;
                    }
                    while (v914);
                    uint64_t v110 = *(void **)v12;
                  }
                  uint64_t result = v1549 + v1519;
                }
                while (v110[6] > (unint64_t)(v1549 + v1519));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v25 = v8[6];
          if (v25)
          {
            int v26 = **(_DWORD **)(*(void *)result + 152);
            int v27 = (_DWORD *)v8[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
LABEL_37:
          uint64_t v34 = *(void *)(*(void *)result + 160);
          if (v34)
          {
            size_t v35 = *(const void **)(*(void *)result + 152);
            size_t v36 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v36, v35, 4 * v34);
          }
          break;
        case 2:
          uint64_t v120 = *a7;
          uint64_t v121 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v122 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v123 = 0;
                uint64_t v124 = *(void *)(v121 + 152);
                uint64_t v125 = v8[19];
                uint64_t v126 = **a5;
                int v127 = (_DWORD *)(v124 + 4 * v120);
                do
                {
                  *(_DWORD *)(v125 + 4 * v123) = *v127;
                  v127 += v126;
                  ++v123;
                }
                while (*v122 > (int)v123);
              }
              break;
            case 2:
              uint64_t v394 = *a4;
              int v395 = **a4;
              if (v395 >= 1)
              {
                int v396 = 0;
                uint64_t v397 = 0;
                uint64_t v398 = *(void *)(v121 + 152);
                uint64_t v399 = v8[19];
                uint64_t v400 = **a5;
                uint64_t v401 = (*a5)[1];
                int v402 = v394[1];
                do
                {
                  if (v402 >= 1)
                  {
                    uint64_t v403 = 0;
                    do
                    {
                      *(_DWORD *)(v399 + 4 * v397 + 4 * v403) = *(_DWORD *)(v398 + 4 * v120);
                      v120 += v401;
                      int v402 = v394[1];
                      ++v403;
                    }
                    while ((int)v403 < v402);
                    int v395 = *v394;
                    v397 += v403;
                  }
                  uint64_t result = v402;
                  uint64_t v120 = v120 + v400 - v401 * v402;
                  ++v396;
                }
                while (v396 < v395);
              }
              break;
            case 3:
              int v404 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v405 = 0;
                uint64_t v406 = 0;
                uint64_t v407 = *(void *)(v121 + 152);
                uint64_t v408 = v8[19];
                uint64_t v409 = *a5;
                uint64_t v410 = **a5;
                uint64_t v411 = (*a5)[1];
                int v412 = v404[1];
                do
                {
                  if (v412 >= 1)
                  {
                    int v413 = 0;
                    uint64_t v414 = *a5;
                    uint64_t v415 = v409[2];
                    int v416 = v404[2];
                    do
                    {
                      if (v416 >= 1)
                      {
                        uint64_t v417 = 0;
                        uint64_t v418 = v414[2];
                        do
                        {
                          *(_DWORD *)(v408 + 4 * v406 + 4 * v417) = *(_DWORD *)(v407 + 4 * v120);
                          v120 += v418;
                          int v416 = v404[2];
                          ++v417;
                        }
                        while ((int)v417 < v416);
                        int v412 = v404[1];
                        v406 += v417;
                      }
                      uint64_t v120 = v120 + v411 - v415 * v416;
                      ++v413;
                    }
                    while (v413 < v412);
                    uint64_t result = *v404;
                  }
                  uint64_t v120 = v120 + v410 - v411 * v412;
                  ++v405;
                }
                while (v405 < (int)result);
              }
              break;
            case 4:
              int v419 = *a4;
              int v420 = **a4;
              if (v420 >= 1)
              {
                int v421 = 0;
                uint64_t v422 = 0;
                uint64_t v423 = *(void *)(v121 + 152);
                uint64_t v424 = v8[19];
                uint64_t v425 = *a5;
                uint64_t v426 = **a5;
                uint64_t v427 = (*a5)[1];
                int v428 = v419[1];
                do
                {
                  if (v428 >= 1)
                  {
                    int v429 = 0;
                    uint64_t v430 = *a5;
                    uint64_t v431 = v425[2];
                    int v432 = v419[2];
                    do
                    {
                      if (v432 >= 1)
                      {
                        int v433 = 0;
                        uint64_t v434 = *a5;
                        uint64_t v435 = v430[2];
                        uint64_t v436 = v430[3];
                        int v437 = v419[3];
                        do
                        {
                          if (v437 >= 1)
                          {
                            uint64_t v438 = 0;
                            uint64_t v439 = v434[3];
                            do
                            {
                              *(_DWORD *)(v424 + 4 * v422 + 4 * v438) = *(_DWORD *)(v423 + 4 * v120);
                              v120 += v439;
                              int v437 = v419[3];
                              ++v438;
                            }
                            while ((int)v438 < v437);
                            int v432 = v419[2];
                            v422 += v438;
                          }
                          uint64_t v120 = v120 + v435 - v436 * v437;
                          ++v433;
                        }
                        while (v433 < v432);
                        int v428 = v419[1];
                      }
                      uint64_t v120 = v120 + v427 - v431 * v432;
                      ++v429;
                    }
                    while (v429 < v428);
                    int v420 = *v419;
                  }
                  uint64_t result = v428;
                  uint64_t v120 = v120 + v426 - v427 * v428;
                  ++v421;
                }
                while (v421 < v420);
              }
              break;
            default:
              uint64_t v384 = v8[6];
              if (v384)
              {
                uint64_t v385 = 0;
                uint64_t v386 = *(void *)(v121 + 152) + 4 * v120;
                uint64_t v387 = v8[19];
                uint64_t v388 = *a4;
                uint64_t v389 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v390 = *a5;
                do
                {
                  uint64_t v391 = 0;
                  if ((v389 & 0x80000000) == 0)
                  {
                    uint64_t v392 = v389;
                    LODWORD(result) = v385;
                    do
                    {
                      ldiv_t v393 = ldiv((int)result, v388[v392]);
                      uint64_t result = v393.quot;
                      v391 += v390[v392--] * v393.rem;
                    }
                    while (v392 != -1);
                  }
                  *(_DWORD *)(v387 + 4 * v385++) = *(_DWORD *)(v386 + 4 * v391);
                }
                while (v385 != v384);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1433 = *a8;
          uint64_t v1439 = *a7;
          uint64_t v128 = *(void **)result;
          uint64_t v129 = v128[1] - *v128;
          switch(v129 >> 2)
          {
            case 1:
              uint64_t v130 = (v129 << 30) - 0x100000000;
              int v131 = *(int *)((char *)*a4 + (v130 >> 30));
              if (v131 >= 1)
              {
                uint64_t v132 = v130 >> 29;
                uint64_t v133 = *(uint64_t *)((char *)*a5 + v132);
                uint64_t v134 = *(void *)(*a6 + v132);
                uint64_t v135 = (_DWORD *)(v8[19] + 4 * v1433);
                uint64_t v136 = (_DWORD *)(v128[19] + 4 * v1439);
                uint64_t v137 = 4 * v134;
                uint64_t v138 = 4 * v133;
                do
                {
                  *uint64_t v135 = *v136;
                  uint64_t v135 = (_DWORD *)((char *)v135 + v137);
                  uint64_t v136 = (_DWORD *)((char *)v136 + v138);
                  --v131;
                }
                while (v131);
              }
              break;
            case 2:
              uint64_t v1002 = (v129 << 30) - 0x200000000;
              int v1003 = *a4;
              int v1004 = *(int *)((char *)*a4 + (v1002 >> 30));
              if (v1004 >= 1)
              {
                int v1005 = 0;
                uint64_t v1006 = v1002 >> 29;
                uint64_t v1007 = *(uint64_t *)((char *)*a5 + v1006);
                uint64_t v1008 = *(void *)(*a6 + v1006);
                uint64_t v1009 = (v129 << 30) - 0x100000000;
                uint64_t v1010 = *(uint64_t *)((char *)*a5 + (v1009 >> 29));
                uint64_t v1011 = *(void *)(*a6 + (v1009 >> 29));
                uint64_t v1012 = v1009 >> 32;
                uint64_t v1013 = 4 * v1433;
                uint64_t v1014 = 4 * v1008;
                uint64_t v1015 = 4 * v1011;
                uint64_t v1016 = 4 * v1439;
                uint64_t v1017 = 4 * v1007;
                uint64_t result = 4 * v1010;
                do
                {
                  int v1018 = v1003[v1012];
                  if (v1018 >= 1)
                  {
                    uint64_t v1019 = (_DWORD *)(v8[19] + v1013);
                    uint64_t v1020 = (_DWORD *)(v128[19] + v1016);
                    do
                    {
                      *uint64_t v1019 = *v1020;
                      uint64_t v1019 = (_DWORD *)((char *)v1019 + v1015);
                      uint64_t v1020 = (_DWORD *)((char *)v1020 + result);
                      --v1018;
                    }
                    while (v1018);
                  }
                  ++v1005;
                  v1013 += v1014;
                  v1016 += v1017;
                }
                while (v1005 != v1004);
              }
              break;
            case 3:
              uint64_t v1021 = (v129 << 30) - 0x300000000;
              uint64_t v1022 = *a4;
              int v1023 = *(int *)((char *)*a4 + (v1021 >> 30));
              if (v1023 >= 1)
              {
                int v1024 = 0;
                uint64_t v1025 = *a5;
                uint64_t v1026 = v1021 >> 29;
                uint64_t v1027 = *(uint64_t *)((char *)*a5 + (v1021 >> 29));
                uint64_t v1028 = *a6;
                uint64_t v1029 = *(void *)(*a6 + v1026);
                uint64_t v1030 = v129 << 30;
                uint64_t v1031 = (v129 << 30) - 0x200000000;
                uint64_t v1032 = v1031 >> 32;
                v1031 >>= 29;
                uint64_t v1033 = *(uint64_t *)((char *)*a5 + v1031);
                uint64_t v1034 = *(void *)(*a6 + v1031);
                uint64_t v1035 = (v1030 - 0x100000000) >> 32;
                uint64_t v1036 = 4 * v1433;
                uint64_t v1037 = 4 * v1029;
                uint64_t v1038 = 4 * v1034;
                uint64_t result = 4 * v1439;
                uint64_t v1039 = 4 * v1027;
                uint64_t v1040 = 4 * v1033;
                do
                {
                  int v1041 = v1022[v1032];
                  if (v1041 >= 1)
                  {
                    int v1042 = 0;
                    uint64_t v1043 = (void *)*v11;
                    uint64_t v1044 = 4 * *(void *)(v1028 + 8 * v1035);
                    uint64_t v1045 = 4 * v1025[v1035];
                    uint64_t v1046 = result;
                    uint64_t v1047 = v1036;
                    do
                    {
                      int v1048 = v1022[v1035];
                      if (v1048 >= 1)
                      {
                        uint64_t v1049 = (_DWORD *)(v1043[19] + v1047);
                        int v1050 = (_DWORD *)(v128[19] + v1046);
                        do
                        {
                          *uint64_t v1049 = *v1050;
                          uint64_t v1049 = (_DWORD *)((char *)v1049 + v1044);
                          int v1050 = (_DWORD *)((char *)v1050 + v1045);
                          --v1048;
                        }
                        while (v1048);
                      }
                      ++v1042;
                      v1047 += v1038;
                      v1046 += v1040;
                    }
                    while (v1042 != v1041);
                  }
                  ++v1024;
                  v1036 += v1037;
                  result += v1039;
                }
                while (v1024 != v1023);
              }
              break;
            case 4:
              uint64_t v1051 = (v129 << 30) - 0x400000000;
              uint64_t v1052 = *a4;
              int v1585 = *(int *)((char *)*a4 + (v1051 >> 30));
              if (v1585 >= 1)
              {
                int v1053 = 0;
                uint64_t v1054 = *a5;
                uint64_t v1055 = v1051 >> 29;
                uint64_t v1056 = v129 << 30;
                uint64_t v1057 = *a6;
                uint64_t v1567 = (v1056 - 0x300000000) >> 32;
                uint64_t v1058 = (v1056 - 0x300000000) >> 29;
                uint64_t v1059 = *(uint64_t *)((char *)*a5 + v1058);
                uint64_t v1060 = *(void *)(*a6 + v1058);
                uint64_t v1061 = (v1056 - 0x200000000) >> 32;
                uint64_t v1062 = (v1056 - 0x100000000) >> 32;
                uint64_t v1063 = 4 * v1433;
                uint64_t v1551 = 4 * *(void *)(*a6 + v1055);
                uint64_t result = 4 * v1060;
                uint64_t v1064 = 4 * v1439;
                uint64_t v1536 = 4 * *(uint64_t *)((char *)*a5 + v1055);
                uint64_t v1065 = 4 * v1059;
                do
                {
                  int v1066 = v1052[v1567];
                  if (v1066 >= 1)
                  {
                    int v1067 = 0;
                    uint64_t v1068 = 4 * *(void *)(v1057 + 8 * v1061);
                    uint64_t v1069 = 4 * v1054[v1061];
                    uint64_t v1070 = v1064;
                    uint64_t v1071 = v1063;
                    do
                    {
                      int v1072 = v1052[v1061];
                      if (v1072 >= 1)
                      {
                        int v1073 = 0;
                        uint64_t v1074 = (void *)*v11;
                        uint64_t v1075 = 4 * *(void *)(v1057 + 8 * v1062);
                        uint64_t v1076 = 4 * v1054[v1062];
                        uint64_t v1077 = v1070;
                        uint64_t v1078 = v1071;
                        do
                        {
                          int v1079 = v1052[v1062];
                          if (v1079 >= 1)
                          {
                            uint64_t v1080 = (_DWORD *)(v1074[19] + v1078);
                            uint64_t v1081 = (_DWORD *)(v128[19] + v1077);
                            do
                            {
                              *uint64_t v1080 = *v1081;
                              uint64_t v1080 = (_DWORD *)((char *)v1080 + v1075);
                              uint64_t v1081 = (_DWORD *)((char *)v1081 + v1076);
                              --v1079;
                            }
                            while (v1079);
                          }
                          ++v1073;
                          v1078 += v1068;
                          v1077 += v1069;
                        }
                        while (v1073 != v1072);
                      }
                      ++v1067;
                      v1071 += result;
                      v1070 += v1065;
                    }
                    while (v1067 != v1066);
                  }
                  ++v1053;
                  v1063 += v1551;
                  v1064 += v1536;
                }
                while (v1053 != v1585);
              }
              break;
            case 5:
              uint64_t v1082 = (v129 << 30) - 0x500000000;
              ldiv_t v1083 = *a4;
              int v1487 = *(int *)((char *)*a4 + (v1082 >> 30));
              if (v1487 >= 1)
              {
                int v1497 = 0;
                uint64_t v1084 = *a5;
                uint64_t v1085 = v1082 >> 29;
                uint64_t v1086 = *a6;
                uint64_t v1087 = v129 << 30;
                uint64_t v1088 = (v1087 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1088);
                uint64_t v1477 = (v1087 - 0x400000000) >> 32;
                uint64_t v1089 = *(void *)(*a6 + v1088);
                uint64_t v1568 = (v1087 - 0x300000000) >> 32;
                uint64_t v1090 = (v1087 - 0x200000000) >> 32;
                uint64_t v1091 = (v1087 - 0x100000000) >> 32;
                uint64_t v1521 = 4 * v1433;
                uint64_t v1467 = 4 * *(void *)(*a6 + v1085);
                uint64_t v1552 = 4 * v1089;
                uint64_t v1509 = 4 * v1439;
                uint64_t v1458 = 4 * *(uint64_t *)((char *)*a5 + v1085);
                uint64_t v1537 = 4 * result;
                do
                {
                  int v1586 = v1083[v1477];
                  if (v1586 >= 1)
                  {
                    int v1092 = 0;
                    uint64_t v1093 = 4 * *(void *)(v1086 + 8 * v1568);
                    uint64_t v1094 = 4 * v1084[v1568];
                    uint64_t v1095 = v1509;
                    uint64_t v1096 = v1521;
                    do
                    {
                      int v1097 = v1083[v1568];
                      if (v1097 >= 1)
                      {
                        int v1098 = 0;
                        uint64_t v1099 = 4 * *(void *)(v1086 + 8 * v1090);
                        uint64_t v1100 = 4 * v1084[v1090];
                        uint64_t v1101 = v1095;
                        uint64_t v1102 = v1096;
                        do
                        {
                          int v1103 = v1083[v1090];
                          if (v1103 >= 1)
                          {
                            int v1104 = 0;
                            uint64_t result = *v11;
                            uint64_t v1105 = 4 * *(void *)(v1086 + 8 * v1091);
                            uint64_t v1106 = 4 * v1084[v1091];
                            uint64_t v1107 = v1101;
                            uint64_t v1108 = v1102;
                            do
                            {
                              int v1109 = v1083[v1091];
                              if (v1109 >= 1)
                              {
                                int v1110 = (_DWORD *)(*(void *)(result + 152) + v1108);
                                int v1111 = (_DWORD *)(v128[19] + v1107);
                                do
                                {
                                  *int v1110 = *v1111;
                                  int v1110 = (_DWORD *)((char *)v1110 + v1105);
                                  int v1111 = (_DWORD *)((char *)v1111 + v1106);
                                  --v1109;
                                }
                                while (v1109);
                              }
                              ++v1104;
                              v1108 += v1099;
                              v1107 += v1100;
                            }
                            while (v1104 != v1103);
                          }
                          ++v1098;
                          v1102 += v1093;
                          v1101 += v1094;
                        }
                        while (v1098 != v1097);
                      }
                      ++v1092;
                      v1096 += v1552;
                      v1095 += v1537;
                    }
                    while (v1092 != v1586);
                  }
                  v1521 += v1467;
                  v1509 += v1458;
                  ++v1497;
                }
                while (v1497 != v1487);
              }
              break;
            default:
              uint64_t v964 = (char *)a4[1];
              LODWORD(v965) = 1;
              uint64_t v966 = -20;
              do
              {
                uint64_t v965 = *(int *)&v964[v966] * (uint64_t)(int)v965;
                v966 += 4;
              }
              while (v966);
              unint64_t v1429 = v128[6];
              if (v1429)
              {
                uint64_t result = 0;
                uint64_t v967 = (v129 << 30) - 0x500000000;
                uint64_t v968 = *a4;
                uint64_t v1466 = *v8;
                uint64_t v969 = *a5;
                uint64_t v1414 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1419 = ((unint64_t)(v964 - (char *)*a4) >> 2) - 1;
                uint64_t v1410 = v967 >> 32;
                uint64_t v970 = *a6;
                uint64_t v1476 = ((v129 << 30) - 0x400000000) >> 32;
                uint64_t v1566 = ((v129 << 30) - 0x300000000) >> 32;
                uint64_t v971 = ((v129 << 30) - 0x200000000) >> 32;
                uint64_t v972 = ((v129 << 30) - 0x100000000) >> 32;
                uint64_t v1450 = 4 * *(uint64_t *)((char *)*a5 + (v967 >> 29));
                uint64_t v1457 = 4 * *(void *)(*a6 + (v967 >> 29));
                uint64_t v1424 = v965;
                do
                {
                  uint64_t v973 = v1419;
                  uint64_t v1445 = result;
                  uint64_t v974 = 0;
                  if ((v1419 & 0x80000000) != 0)
                  {
                    uint64_t v975 = v1414;
                  }
                  else
                  {
                    uint64_t v975 = v1414;
                    do
                    {
                      ldiv_t v976 = ldiv((int)result, v968[v973]);
                      LODWORD(result) = v976.quot;
                      v974 += v969[v973--] * v976.rem;
                    }
                    while (v973 != -1);
                  }
                  uint64_t v977 = 0;
                  if ((v975 & 0x80000000) == 0)
                  {
                    int v978 = v1445;
                    do
                    {
                      ldiv_t v979 = ldiv(v978, *(int *)(v1466 + 4 * v975));
                      int v978 = v979.quot;
                      v977 += *(void *)(v970 + 8 * v975--) * v979.rem;
                    }
                    while (v975 != -1);
                  }
                  int v1486 = v968[v1410];
                  if (v1486 >= 1)
                  {
                    int v980 = 0;
                    uint64_t v1520 = 4 * (v977 + v1433);
                    uint64_t v1550 = 4 * *(void *)(v970 + 8 * v1476);
                    uint64_t v1508 = 4 * (v974 + v1439);
                    uint64_t v1535 = 4 * v969[v1476];
                    do
                    {
                      int v1496 = v980;
                      int v1584 = v968[v1476];
                      if (v1584 >= 1)
                      {
                        int v981 = 0;
                        uint64_t v982 = 4 * *(void *)(v970 + 8 * v1566);
                        uint64_t v983 = 4 * v969[v1566];
                        uint64_t v985 = v1508;
                        uint64_t v984 = v1520;
                        do
                        {
                          int v986 = v968[v1566];
                          if (v986 >= 1)
                          {
                            int v987 = 0;
                            uint64_t v988 = 4 * *(void *)(v970 + 8 * v971);
                            uint64_t v989 = 4 * v969[v971];
                            uint64_t v990 = v985;
                            uint64_t v991 = v984;
                            do
                            {
                              int v992 = v968[v971];
                              if (v992 >= 1)
                              {
                                int v993 = 0;
                                uint64_t v994 = (void *)*v11;
                                uint64_t v995 = 4 * *(void *)(v970 + 8 * v972);
                                uint64_t v996 = 4 * v969[v972];
                                uint64_t v997 = v990;
                                uint64_t v998 = v991;
                                do
                                {
                                  int v999 = v968[v972];
                                  if (v999 >= 1)
                                  {
                                    uint64_t v1000 = (_DWORD *)(v994[19] + v998);
                                    uint64_t v1001 = (_DWORD *)(v128[19] + v997);
                                    do
                                    {
                                      *uint64_t v1000 = *v1001;
                                      uint64_t v1000 = (_DWORD *)((char *)v1000 + v995);
                                      uint64_t v1001 = (_DWORD *)((char *)v1001 + v996);
                                      --v999;
                                    }
                                    while (v999);
                                  }
                                  ++v993;
                                  v998 += v988;
                                  v997 += v989;
                                }
                                while (v993 != v992);
                              }
                              ++v987;
                              v991 += v982;
                              v990 += v983;
                            }
                            while (v987 != v986);
                          }
                          ++v981;
                          v984 += v1550;
                          v985 += v1535;
                        }
                        while (v981 != v1584);
                      }
                      int v980 = v1496 + 1;
                      v1520 += v1457;
                      v1508 += v1450;
                    }
                    while (v1496 + 1 != v1486);
                  }
                  uint64_t result = v1445 + v1424;
                }
                while (v1429 > v1445 + v1424);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v28 = v8[6];
          if (v28)
          {
            uint64_t v29 = **(int **)(*(void *)result + 152);
            uint64_t v30 = (void *)v8[19];
            do
            {
              *v30++ = v29;
              --v28;
            }
            while (v28);
          }
          break;
        case 1:
          uint64_t v139 = *(void *)(*(void *)result + 160);
          if (v139)
          {
            uint64_t v140 = *(int **)(*(void *)result + 152);
            uint64_t v141 = (void *)v8[19];
            uint64_t v142 = 4 * v139;
            do
            {
              uint64_t v143 = *v140++;
              *v141++ = v143;
              v142 -= 4;
            }
            while (v142);
          }
          break;
        case 2:
          uint64_t v144 = *a7;
          uint64_t v145 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v146 = **a4;
              if ((int)v146 >= 1)
              {
                uint64_t v147 = *(void *)(v145 + 152);
                uint64_t v148 = (void *)v8[19];
                uint64_t v149 = *a5;
                do
                {
                  *v148++ = *(int *)(v147 + 4 * v144);
                  v144 += *v149;
                  --v146;
                }
                while (v146);
              }
              break;
            case 2:
              int v450 = **a4;
              if (v450 >= 1)
              {
                int v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = *(void *)(v145 + 152);
                uint64_t v454 = v8[19];
                int v455 = (*a4)[1];
                uint64_t v456 = *a5;
                do
                {
                  if (v455 <= 0)
                  {
                    uint64_t v458 = v456[1];
                  }
                  else
                  {
                    int v457 = v455;
                    do
                    {
                      *(void *)(v454 + 8 * v452++) = *(int *)(v453 + 4 * v144);
                      uint64_t v458 = v456[1];
                      v144 += v458;
                      --v457;
                    }
                    while (v457);
                  }
                  uint64_t result = *v456;
                  uint64_t v144 = v144 - v458 * v455 + *v456;
                  ++v451;
                }
                while (v451 != v450);
              }
              break;
            case 3:
              int v459 = *a4;
              int v460 = **a4;
              if (v460 >= 1)
              {
                int v461 = 0;
                uint64_t v462 = 0;
                uint64_t v463 = *(void *)(v145 + 152);
                uint64_t v464 = v8[19];
                uint64_t v465 = v459[1];
                uint64_t v466 = *a5;
                do
                {
                  if ((int)v465 <= 0)
                  {
                    uint64_t v470 = v466[1];
                  }
                  else
                  {
                    int v467 = 0;
                    uint64_t result = v459[2];
                    uint64_t v468 = *a5;
                    do
                    {
                      int v469 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v464 + 8 * v462++) = *(int *)(v463 + 4 * v144);
                          v144 += v468[2];
                          --v469;
                        }
                        while (v469);
                      }
                      uint64_t v470 = v466[1];
                      uint64_t v144 = v470 + v144 - v466[2] * (int)result;
                      ++v467;
                    }
                    while (v467 != v465);
                  }
                  uint64_t v144 = v144 - v470 * v465 + *v466;
                  ++v461;
                }
                while (v461 != v460);
              }
              break;
            case 4:
              int v471 = *a4;
              int v472 = **a4;
              if (v472 >= 1)
              {
                int v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = *(void *)(v145 + 152);
                uint64_t v476 = v8[19];
                uint64_t v477 = v471[1];
                uint64_t v478 = *a5;
                do
                {
                  if ((int)v477 <= 0)
                  {
                    uint64_t v485 = v478[1];
                  }
                  else
                  {
                    int v479 = 0;
                    uint64_t result = v471[2];
                    uint64_t v480 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v481 = 0;
                        int v482 = v471[3];
                        uint64_t v483 = *a5;
                        do
                        {
                          int v484 = v482;
                          if (v482 >= 1)
                          {
                            do
                            {
                              *(void *)(v476 + 8 * v474++) = *(int *)(v475 + 4 * v144);
                              v144 += v483[3];
                              --v484;
                            }
                            while (v484);
                          }
                          uint64_t v144 = v480[2] + v144 - v480[3] * v482;
                          ++v481;
                        }
                        while (v481 != result);
                      }
                      uint64_t v485 = v478[1];
                      uint64_t v144 = v485 + v144 - v478[2] * result;
                      ++v479;
                    }
                    while (v479 != v477);
                  }
                  uint64_t v144 = v144 - v485 * v477 + *v478;
                  ++v473;
                }
                while (v473 != v472);
              }
              break;
            default:
              uint64_t v440 = v8[6];
              if (v440)
              {
                uint64_t v441 = 0;
                uint64_t v442 = *(void *)(v145 + 152) + 4 * v144;
                uint64_t v443 = v8[19];
                uint64_t v444 = *a4;
                uint64_t v445 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v446 = *a5;
                do
                {
                  uint64_t v447 = 0;
                  if ((v445 & 0x80000000) == 0)
                  {
                    uint64_t v448 = v445;
                    LODWORD(result) = v441;
                    do
                    {
                      ldiv_t v449 = ldiv((int)result, v444[v448]);
                      uint64_t result = v449.quot;
                      v447 += v446[v448--] * v449.rem;
                    }
                    while (v448 != -1);
                  }
                  *(void *)(v443 + 8 * v441++) = *(int *)(v442 + 4 * v447);
                }
                while (v441 != v440);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1434 = *a8;
          uint64_t v1440 = *a7;
          uint64_t v150 = *(void **)result;
          uint64_t v151 = v150[1] - *v150;
          switch(v151 >> 2)
          {
            case 1:
              uint64_t v152 = (v151 << 30) - 0x100000000;
              int v153 = *(int *)((char *)*a4 + (v152 >> 30));
              if (v153 >= 1)
              {
                uint64_t v154 = v152 >> 29;
                uint64_t v155 = *(uint64_t *)((char *)*a5 + v154);
                uint64_t v156 = *(void *)(*a6 + v154);
                uint64_t v157 = (void *)(v8[19] + 8 * v1434);
                uint64_t v158 = (int *)(v150[19] + 4 * v1440);
                uint64_t v159 = 8 * v156;
                uint64_t v160 = 4 * v155;
                do
                {
                  void *v157 = *v158;
                  uint64_t v157 = (void *)((char *)v157 + v159);
                  uint64_t v158 = (int *)((char *)v158 + v160);
                  --v153;
                }
                while (v153);
              }
              break;
            case 2:
              uint64_t v1150 = (v151 << 30) - 0x200000000;
              int v1151 = *(int *)((char *)*a4 + (v1150 >> 30));
              if (v1151 >= 1)
              {
                int v1152 = 0;
                uint64_t v1153 = v151 << 30;
                uint64_t v1154 = *a5;
                v1153 -= 0x100000000;
                int v1155 = *(int *)((char *)*a4 + (v1153 >> 30));
                uint64_t v1156 = v1150 >> 29;
                uint64_t v1157 = *(uint64_t *)((char *)*a5 + (v1150 >> 29));
                uint64_t v1158 = *a6;
                uint64_t v1159 = *(void *)(*a6 + v1156);
                uint64_t v1160 = v1153 >> 32;
                uint64_t v1161 = 8 * v1434;
                uint64_t v1162 = 8 * v1159;
                uint64_t v1163 = 4 * v1440;
                uint64_t result = 4 * v1157;
                do
                {
                  if (v1155 >= 1)
                  {
                    int v1164 = (void *)(v8[19] + v1161);
                    uint64_t v1165 = 8 * *(void *)(v1158 + 8 * v1160);
                    int v1166 = (int *)(v150[19] + v1163);
                    uint64_t v1167 = 4 * v1154[v1160];
                    int v1168 = v1155;
                    do
                    {
                      void *v1164 = *v1166;
                      int v1164 = (void *)((char *)v1164 + v1165);
                      int v1166 = (int *)((char *)v1166 + v1167);
                      --v1168;
                    }
                    while (v1168);
                  }
                  ++v1152;
                  v1161 += v1162;
                  v1163 += result;
                }
                while (v1152 != v1151);
              }
              break;
            case 3:
              uint64_t v1169 = (v151 << 30) - 0x300000000;
              int v1170 = *a4;
              int v1171 = *(int *)((char *)*a4 + (v1169 >> 30));
              if (v1171 >= 1)
              {
                int v1172 = 0;
                uint64_t v1173 = v151 << 30;
                uint64_t v1174 = *a5;
                uint64_t v1175 = v1169 >> 29;
                uint64_t v1176 = *(uint64_t *)((char *)*a5 + (v1169 >> 29));
                uint64_t v1177 = *a6;
                uint64_t v1178 = *(void *)(*a6 + v1175);
                uint64_t v1179 = v1173 - 0x200000000;
                uint64_t v1180 = v1173 - 0x100000000;
                int v1181 = *(int *)((char *)v1170 + ((v1173 - 0x200000000) >> 30));
                uint64_t v1182 = v1179 >> 32;
                uint64_t v1183 = v1180 >> 32;
                uint64_t v1184 = 8 * v1434;
                uint64_t v1185 = 8 * v1178;
                uint64_t result = 4 * v1440;
                uint64_t v1186 = 4 * v1176;
                do
                {
                  if (v1181 >= 1)
                  {
                    int v1187 = 0;
                    int v1188 = v1170[v1183];
                    int v1189 = (void *)*v11;
                    uint64_t v1190 = 8 * *(void *)(v1177 + 8 * v1182);
                    uint64_t v1191 = 4 * v1174[v1182];
                    uint64_t v1192 = result;
                    uint64_t v1193 = v1184;
                    do
                    {
                      if (v1188 >= 1)
                      {
                        uint64_t v1194 = (void *)(v1189[19] + v1193);
                        uint64_t v1195 = 8 * *(void *)(v1177 + 8 * v1183);
                        uint64_t v1196 = (int *)(v150[19] + v1192);
                        uint64_t v1197 = 4 * v1174[v1183];
                        int v1198 = v1188;
                        do
                        {
                          *uint64_t v1194 = *v1196;
                          uint64_t v1194 = (void *)((char *)v1194 + v1195);
                          uint64_t v1196 = (int *)((char *)v1196 + v1197);
                          --v1198;
                        }
                        while (v1198);
                      }
                      ++v1187;
                      v1193 += v1190;
                      v1192 += v1191;
                    }
                    while (v1187 != v1181);
                  }
                  ++v1172;
                  v1184 += v1185;
                  result += v1186;
                }
                while (v1172 != v1171);
              }
              break;
            case 4:
              uint64_t v1199 = (v151 << 30) - 0x400000000;
              uint64_t v1200 = *a4;
              int v1554 = *(int *)((char *)*a4 + (v1199 >> 30));
              if (v1554 >= 1)
              {
                int v1587 = 0;
                uint64_t v1201 = v151 << 30;
                int v1202 = *a5;
                uint64_t v1203 = v1199 >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1203);
                uint64_t v1204 = *a6;
                uint64_t v1523 = (v1201 - 0x300000000) >> 32;
                int v1205 = *(int *)((char *)v1200 + ((v1201 - 0x300000000) >> 30));
                uint64_t v1206 = (v1201 - 0x200000000) >> 32;
                uint64_t v1207 = (v1201 - 0x100000000) >> 32;
                uint64_t v1208 = 8 * v1434;
                uint64_t v1570 = 8 * *(void *)(*a6 + v1203);
                uint64_t v1209 = 4 * v1440;
                uint64_t v1539 = 4 * result;
                do
                {
                  if (v1205 >= 1)
                  {
                    int v1210 = 0;
                    int v1211 = v1200[v1206];
                    uint64_t v1212 = 8 * *(void *)(v1204 + 8 * v1523);
                    uint64_t v1213 = 4 * v1202[v1523];
                    uint64_t v1214 = v1209;
                    uint64_t v1215 = v1208;
                    do
                    {
                      if (v1211 >= 1)
                      {
                        int v1216 = 0;
                        uint64_t result = *(void *)(v1204 + 8 * v1206);
                        int v1217 = v1200[v1207];
                        uint64_t v1218 = (void *)*v11;
                        uint64_t v1219 = 8 * result;
                        uint64_t v1220 = 4 * v1202[v1206];
                        uint64_t v1221 = v1214;
                        uint64_t v1222 = v1215;
                        do
                        {
                          if (v1217 >= 1)
                          {
                            uint64_t v1223 = (void *)(v1218[19] + v1222);
                            uint64_t v1224 = 8 * *(void *)(v1204 + 8 * v1207);
                            uint64_t result = v150[19] + v1221;
                            uint64_t v1225 = 4 * v1202[v1207];
                            int v1226 = v1217;
                            do
                            {
                              void *v1223 = *(int *)result;
                              uint64_t v1223 = (void *)((char *)v1223 + v1224);
                              result += v1225;
                              --v1226;
                            }
                            while (v1226);
                          }
                          ++v1216;
                          v1222 += v1219;
                          v1221 += v1220;
                        }
                        while (v1216 != v1211);
                      }
                      ++v1210;
                      v1215 += v1212;
                      v1214 += v1213;
                    }
                    while (v1210 != v1205);
                  }
                  v1208 += v1570;
                  v1209 += v1539;
                  ++v1587;
                }
                while (v1587 != v1554);
              }
              break;
            case 5:
              uint64_t v1227 = (v151 << 30) - 0x500000000;
              int v1228 = *a4;
              int v1479 = *(int *)((char *)*a4 + (v1227 >> 30));
              if (v1479 >= 1)
              {
                int v1489 = 0;
                uint64_t v1229 = v151 << 30;
                int v1230 = *a5;
                uint64_t v1231 = v1227 >> 29;
                uint64_t v1232 = *a6;
                uint64_t v1452 = (v1229 - 0x400000000) >> 32;
                int v1571 = *(int *)((char *)v1228 + ((v1229 - 0x400000000) >> 30));
                uint64_t v1233 = (v1229 - 0x200000000) >> 32;
                uint64_t v1234 = (v1229 - 0x100000000) >> 32;
                uint64_t v1511 = 8 * v1434;
                uint64_t v1524 = (v1229 - 0x300000000) >> 32;
                uint64_t v1499 = 4 * v1440;
                uint64_t v1460 = 4 * *(uint64_t *)((char *)*a5 + v1231);
                uint64_t v1469 = 8 * *(void *)(*a6 + v1231);
                do
                {
                  if (v1571 >= 1)
                  {
                    int v1235 = 0;
                    int v1236 = v1228[v1524];
                    uint64_t v1540 = 4 * v1230[v1452];
                    uint64_t v1555 = 8 * *(void *)(v1232 + 8 * v1452);
                    uint64_t v1237 = v1499;
                    uint64_t result = v1511;
                    do
                    {
                      int v1588 = v1235;
                      if (v1236 >= 1)
                      {
                        int v1238 = 0;
                        int v1239 = v1228[v1233];
                        uint64_t v1240 = 8 * *(void *)(v1232 + 8 * v1524);
                        uint64_t v1241 = 4 * v1230[v1524];
                        uint64_t v1242 = v1237;
                        uint64_t v1243 = result;
                        do
                        {
                          if (v1239 >= 1)
                          {
                            int v1244 = 0;
                            int v1245 = v1228[v1234];
                            uint64_t v1246 = (void *)*v11;
                            uint64_t v1247 = 8 * *(void *)(v1232 + 8 * v1233);
                            uint64_t v1248 = 4 * v1230[v1233];
                            uint64_t v1249 = v1242;
                            uint64_t v1250 = v1243;
                            do
                            {
                              if (v1245 >= 1)
                              {
                                int v1251 = (void *)(v1246[19] + v1250);
                                uint64_t v1252 = 8 * *(void *)(v1232 + 8 * v1234);
                                uint64_t v1253 = (int *)(v150[19] + v1249);
                                uint64_t v1254 = 4 * v1230[v1234];
                                int v1255 = v1245;
                                do
                                {
                                  *int v1251 = *v1253;
                                  int v1251 = (void *)((char *)v1251 + v1252);
                                  uint64_t v1253 = (int *)((char *)v1253 + v1254);
                                  --v1255;
                                }
                                while (v1255);
                              }
                              ++v1244;
                              v1250 += v1247;
                              v1249 += v1248;
                            }
                            while (v1244 != v1239);
                          }
                          ++v1238;
                          v1243 += v1240;
                          v1242 += v1241;
                        }
                        while (v1238 != v1236);
                      }
                      int v1235 = v1588 + 1;
                      result += v1555;
                      v1237 += v1540;
                    }
                    while (v1588 + 1 != v1571);
                  }
                  v1511 += v1469;
                  v1499 += v1460;
                  ++v1489;
                }
                while (v1489 != v1479);
              }
              break;
            default:
              int v1112 = (char *)a4[1];
              LODWORD(v1113) = 1;
              uint64_t v1114 = -20;
              do
              {
                uint64_t v1113 = *(int *)&v1112[v1114] * (uint64_t)(int)v1113;
                v1114 += 4;
              }
              while (v1114);
              unint64_t v1430 = v150[6];
              if (v1430)
              {
                uint64_t v1115 = 0;
                uint64_t v1116 = (v151 << 30) - 0x500000000;
                uint64_t v1117 = *a4;
                uint64_t v1411 = *v8;
                uint64_t v1118 = *a5;
                uint64_t v1415 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1420 = ((unint64_t)(v1112 - (char *)*a4) >> 2) - 1;
                uint64_t v1119 = *a6;
                uint64_t v1407 = v1116 >> 32;
                int v1478 = *(int *)((char *)*a4 + (v1116 >> 30));
                uint64_t v1451 = ((v151 << 30) - 0x400000000) >> 32;
                uint64_t v1522 = ((v151 << 30) - 0x300000000) >> 32;
                uint64_t v1120 = ((v151 << 30) - 0x200000000) >> 32;
                uint64_t v1121 = ((v151 << 30) - 0x100000000) >> 32;
                uint64_t v1425 = v1113;
                do
                {
                  uint64_t v1122 = v1420;
                  if ((v1420 & 0x80000000) != 0)
                  {
                    uint64_t v1123 = 0;
                    uint64_t v1124 = v1415;
                  }
                  else
                  {
                    uint64_t v1123 = 0;
                    LODWORD(result) = v1115;
                    uint64_t v1124 = v1415;
                    do
                    {
                      ldiv_t v1125 = ldiv((int)result, v1117[v1122]);
                      uint64_t result = v1125.quot;
                      v1123 += v1118[v1122--] * v1125.rem;
                    }
                    while (v1122 != -1);
                  }
                  uint64_t v1446 = v1115;
                  uint64_t v1126 = 0;
                  if ((v1124 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1115;
                    do
                    {
                      ldiv_t v1127 = ldiv((int)result, *(int *)(v1411 + 4 * v1124));
                      uint64_t result = v1127.quot;
                      v1126 += *(void *)(v1119 + 8 * v1124--) * v1127.rem;
                    }
                    while (v1124 != -1);
                  }
                  if (v1478 >= 1)
                  {
                    int v1128 = 0;
                    int v1569 = v1117[v1451];
                    uint64_t v1468 = 8 * *(void *)(v1119 + 8 * v1407);
                    uint64_t v1498 = 4 * (v1123 + v1440);
                    uint64_t v1510 = 8 * (v1126 + v1434);
                    uint64_t v1459 = 4 * v1118[v1407];
                    do
                    {
                      int v1488 = v1128;
                      if (v1569 >= 1)
                      {
                        int v1129 = 0;
                        int v1130 = v1117[v1522];
                        uint64_t v1538 = 4 * v1118[v1451];
                        uint64_t v1553 = 8 * *(void *)(v1119 + 8 * v1451);
                        uint64_t v1132 = v1498;
                        uint64_t v1131 = v1510;
                        do
                        {
                          if (v1130 >= 1)
                          {
                            int v1133 = 0;
                            int v1134 = v1117[v1120];
                            uint64_t v1135 = 8 * *(void *)(v1119 + 8 * v1522);
                            uint64_t v1136 = 4 * v1118[v1522];
                            uint64_t result = v1132;
                            uint64_t v1137 = v1131;
                            do
                            {
                              if (v1134 >= 1)
                              {
                                int v1138 = 0;
                                int v1139 = v1117[v1121];
                                uint64_t v1140 = *(uint64_t **)a2;
                                uint64_t v1141 = 8 * *(void *)(v1119 + 8 * v1120);
                                uint64_t v1142 = 4 * v1118[v1120];
                                uint64_t v1143 = result;
                                uint64_t v1144 = v1137;
                                do
                                {
                                  if (v1139 >= 1)
                                  {
                                    int v1145 = (void *)(v1140[19] + v1144);
                                    uint64_t v1146 = 8 * *(void *)(v1119 + 8 * v1121);
                                    uint64_t v1147 = (int *)(v150[19] + v1143);
                                    uint64_t v1148 = 4 * v1118[v1121];
                                    int v1149 = v1139;
                                    do
                                    {
                                      *int v1145 = *v1147;
                                      int v1145 = (void *)((char *)v1145 + v1146);
                                      uint64_t v1147 = (int *)((char *)v1147 + v1148);
                                      --v1149;
                                    }
                                    while (v1149);
                                  }
                                  ++v1138;
                                  v1144 += v1141;
                                  v1143 += v1142;
                                }
                                while (v1138 != v1134);
                              }
                              ++v1133;
                              v1137 += v1135;
                              result += v1136;
                            }
                            while (v1133 != v1130);
                          }
                          ++v1129;
                          v1131 += v1553;
                          v1132 += v1538;
                        }
                        while (v1129 != v1569);
                      }
                      int v1128 = v1488 + 1;
                      v1510 += v1468;
                      v1498 += v1459;
                    }
                    while (v1488 + 1 != v1478);
                  }
                  v1115 += v1425;
                }
                while (v1430 > v1446 + v1425);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v31 = v8[6];
          if (v31)
          {
            float v32 = (float)**(int **)(*(void *)result + 152);
            float v33 = (float *)v8[19];
            do
            {
              *v33++ = v32;
              --v31;
            }
            while (v31);
          }
          break;
        case 1:
          uint64_t v161 = *(void *)(*(void *)result + 160);
          if (v161)
          {
            uint64_t v162 = *(int **)(*(void *)result + 152);
            uint64_t v163 = (float *)v8[19];
            uint64_t v164 = 4 * v161;
            do
            {
              int v165 = *v162++;
              *v163++ = (float)v165;
              v164 -= 4;
            }
            while (v164);
          }
          break;
        case 2:
          uint64_t v166 = *a7;
          uint64_t v167 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v168 = **a4;
              if ((int)v168 >= 1)
              {
                uint64_t v169 = (float *)v8[19];
                uint64_t v170 = **a5;
                float v171 = (int *)(*(void *)(v167 + 152) + 4 * v166);
                do
                {
                  *v169++ = (float)*v171;
                  v171 += v170;
                  --v168;
                }
                while (v168);
              }
              break;
            case 2:
              int v496 = **a4;
              if (v496 >= 1)
              {
                int v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = *(void *)(v167 + 152);
                uint64_t v500 = v8[19];
                uint64_t v501 = (*a4)[1];
                uint64_t v502 = (*a5)[1];
                uint64_t v503 = **a5 - v502 * v501;
                do
                {
                  int v504 = v501;
                  if ((int)v501 >= 1)
                  {
                    do
                    {
                      *(float *)(v500 + 4 * v498++) = (float)*(int *)(v499 + 4 * v166);
                      v166 += v502;
                      --v504;
                    }
                    while (v504);
                  }
                  v166 += v503;
                  ++v497;
                }
                while (v497 != v496);
              }
              break;
            case 3:
              uint64_t v505 = *a4;
              int v506 = **a4;
              if (v506 >= 1)
              {
                int v507 = 0;
                uint64_t result = 0;
                uint64_t v508 = *(void *)(v167 + 152);
                uint64_t v509 = v8[19];
                uint64_t v510 = v505[1];
                uint64_t v511 = *a5;
                uint64_t v512 = (*a5)[1];
                uint64_t v513 = **a5 - v512 * v510;
                do
                {
                  if ((int)v510 < 1)
                  {
                    uint64_t v520 = result;
                  }
                  else
                  {
                    int v514 = 0;
                    uint64_t v515 = v505[2];
                    uint64_t v516 = *a5;
                    uint64_t v517 = v512 - v511[2] * v515;
                    do
                    {
                      if ((int)v515 < 1)
                      {
                        uint64_t v520 = result;
                      }
                      else
                      {
                        uint64_t v518 = v516[2];
                        int v519 = v515;
                        do
                        {
                          uint64_t v520 = result + 1;
                          *(float *)(v509 + 4 * result) = (float)*(int *)(v508 + 4 * v166);
                          v166 += v518;
                          ++result;
                          --v519;
                        }
                        while (v519);
                      }
                      v166 += v517;
                      ++v514;
                      uint64_t result = v520;
                    }
                    while (v514 != v510);
                  }
                  v166 += v513;
                  ++v507;
                  uint64_t result = v520;
                }
                while (v507 != v506);
              }
              break;
            case 4:
              uint64_t v521 = *a4;
              int v522 = **a4;
              if (v522 >= 1)
              {
                int v523 = 0;
                uint64_t result = 0;
                uint64_t v524 = *(void *)(v167 + 152);
                uint64_t v525 = v8[19];
                uint64_t v526 = v521[1];
                uint64_t v527 = *a5;
                uint64_t v528 = (*a5)[1];
                uint64_t v529 = **a5 - v528 * v526;
                do
                {
                  if ((int)v526 < 1)
                  {
                    uint64_t v540 = result;
                  }
                  else
                  {
                    int v530 = 0;
                    uint64_t v531 = v521[2];
                    uint64_t v532 = *a5;
                    uint64_t v533 = v528 - v527[2] * v531;
                    do
                    {
                      if ((int)v531 < 1)
                      {
                        uint64_t v540 = result;
                      }
                      else
                      {
                        int v534 = 0;
                        uint64_t v535 = v521[3];
                        uint64_t v536 = *a5;
                        uint64_t v537 = v532[2] - v532[3] * v535;
                        do
                        {
                          if ((int)v535 < 1)
                          {
                            uint64_t v540 = result;
                          }
                          else
                          {
                            uint64_t v538 = v536[3];
                            int v539 = v535;
                            do
                            {
                              uint64_t v540 = result + 1;
                              *(float *)(v525 + 4 * result) = (float)*(int *)(v524 + 4 * v166);
                              v166 += v538;
                              ++result;
                              --v539;
                            }
                            while (v539);
                          }
                          v166 += v537;
                          ++v534;
                          uint64_t result = v540;
                        }
                        while (v534 != v531);
                      }
                      v166 += v533;
                      ++v530;
                      uint64_t result = v540;
                    }
                    while (v530 != v526);
                  }
                  v166 += v529;
                  ++v523;
                  uint64_t result = v540;
                }
                while (v523 != v522);
              }
              break;
            default:
              uint64_t v486 = v8[6];
              if (v486)
              {
                uint64_t v487 = 0;
                uint64_t v488 = *(void *)(v167 + 152) + 4 * v166;
                uint64_t v489 = v8[19];
                uint64_t v490 = *a4;
                uint64_t v491 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v492 = *a5;
                do
                {
                  uint64_t v493 = 0;
                  if ((v491 & 0x80000000) == 0)
                  {
                    uint64_t v494 = v491;
                    LODWORD(result) = v487;
                    do
                    {
                      ldiv_t v495 = ldiv((int)result, v490[v494]);
                      uint64_t result = v495.quot;
                      v493 += v492[v494--] * v495.rem;
                    }
                    while (v494 != -1);
                  }
                  *(float *)(v489 + 4 * v487++) = (float)*(int *)(v488 + 4 * v493);
                }
                while (v487 != v486);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1441 = *a8;
          uint64_t v1442 = *a7;
          uint64_t v172 = *(void **)result;
          uint64_t v173 = v172[1] - *v172;
          switch(v173 >> 2)
          {
            case 1:
              uint64_t v174 = (v173 << 30) - 0x100000000;
              int v175 = *(int *)((char *)*a4 + (v174 >> 30));
              if (v175 >= 1)
              {
                uint64_t v176 = v174 >> 29;
                uint64_t v177 = *(uint64_t *)((char *)*a5 + v176);
                uint64_t v178 = *(void *)(*a6 + v176);
                uint64_t v179 = (float *)(v8[19] + 4 * v1441);
                uint64_t v180 = (int *)(v172[19] + 4 * v1442);
                uint64_t v181 = 4 * v178;
                uint64_t v182 = 4 * v177;
                do
                {
                  *uint64_t v179 = (float)*v180;
                  uint64_t v179 = (float *)((char *)v179 + v181);
                  uint64_t v180 = (int *)((char *)v180 + v182);
                  --v175;
                }
                while (v175);
              }
              break;
            case 2:
              uint64_t v1295 = (v173 << 30) - 0x200000000;
              int v1296 = *(int *)((char *)*a4 + (v1295 >> 30));
              if (v1296 >= 1)
              {
                int v1297 = 0;
                uint64_t v1298 = v1295 >> 29;
                uint64_t v1299 = *(uint64_t *)((char *)*a5 + v1298);
                uint64_t v1300 = *(void *)(*a6 + v1298);
                uint64_t v1301 = (v173 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v1301 >> 29));
                uint64_t v1302 = *(void *)(*a6 + (v1301 >> 29));
                int v1303 = *(int *)((char *)*a4 + (v1301 >> 30));
                uint64_t v1304 = 4 * v1441;
                uint64_t v1305 = 4 * v1300;
                uint64_t v1306 = 4 * v1302;
                uint64_t v1307 = 4 * v1442;
                uint64_t v1308 = 4 * v1299;
                uint64_t v1309 = 4 * result;
                do
                {
                  if (v1303 >= 1)
                  {
                    uint64_t result = v8[19] + v1304;
                    uint64_t v1310 = (int *)(v172[19] + v1307);
                    int v1311 = v1303;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1310;
                      result += v1306;
                      uint64_t v1310 = (int *)((char *)v1310 + v1309);
                      --v1311;
                    }
                    while (v1311);
                  }
                  ++v1297;
                  v1304 += v1305;
                  v1307 += v1308;
                }
                while (v1297 != v1296);
              }
              break;
            case 3:
              uint64_t v1312 = (v173 << 30) - 0x300000000;
              uint64_t v1313 = *a4;
              int v1314 = *(int *)((char *)*a4 + (v1312 >> 30));
              if (v1314 >= 1)
              {
                int v1315 = 0;
                uint64_t v1316 = v173 << 30;
                uint64_t v1317 = *a5;
                uint64_t v1318 = v1312 >> 29;
                uint64_t v1319 = *(uint64_t *)((char *)*a5 + (v1312 >> 29));
                uint64_t v1320 = *a6;
                uint64_t v1321 = *(void *)(*a6 + v1318);
                uint64_t v1322 = (v1316 - 0x200000000) >> 29;
                uint64_t v1323 = v1316 - 0x100000000;
                uint64_t v1324 = *(uint64_t *)((char *)*a5 + v1322);
                uint64_t v1325 = *(void *)(*a6 + v1322);
                int v1326 = *(int *)((char *)v1313 + ((v1316 - 0x200000000) >> 30));
                uint64_t v1327 = v1323 >> 32;
                uint64_t v1328 = 4 * v1441;
                uint64_t v1329 = 4 * v1321;
                uint64_t v1330 = 4 * v1325;
                uint64_t result = 4 * v1442;
                uint64_t v1331 = 4 * v1319;
                uint64_t v1332 = 4 * v1324;
                do
                {
                  if (v1326 >= 1)
                  {
                    int v1333 = 0;
                    int v1334 = v1313[v1327];
                    int v1335 = (void *)*v11;
                    uint64_t v1336 = 4 * *(void *)(v1320 + 8 * v1327);
                    uint64_t v1337 = 4 * v1317[v1327];
                    uint64_t v1338 = result;
                    uint64_t v1339 = v1328;
                    do
                    {
                      if (v1334 >= 1)
                      {
                        uint64_t v1340 = (float *)(v1335[19] + v1339);
                        uint64_t v11 = (uint64_t *)a2;
                        int v1341 = (int *)(v172[19] + v1338);
                        int v1342 = v1334;
                        do
                        {
                          float *v1340 = (float)*v1341;
                          uint64_t v1340 = (float *)((char *)v1340 + v1336);
                          int v1341 = (int *)((char *)v1341 + v1337);
                          --v1342;
                        }
                        while (v1342);
                      }
                      ++v1333;
                      v1339 += v1330;
                      v1338 += v1332;
                    }
                    while (v1333 != v1326);
                  }
                  ++v1315;
                  v1328 += v1329;
                  result += v1331;
                }
                while (v1315 != v1314);
              }
              break;
            case 4:
              uint64_t v1343 = (v173 << 30) - 0x400000000;
              uint64_t v1344 = *a4;
              int v1590 = *(int *)((char *)*a4 + (v1343 >> 30));
              if (v1590 >= 1)
              {
                int v1345 = 0;
                uint64_t v1346 = *a5;
                uint64_t v1347 = v1343 >> 29;
                uint64_t v1348 = *a6;
                uint64_t v1349 = v173 << 30;
                uint64_t v1350 = (v1349 - 0x300000000) >> 29;
                uint64_t v1351 = *(uint64_t *)((char *)*a5 + v1350);
                uint64_t v1352 = *(void *)(*a6 + v1350);
                uint64_t v1353 = v1349 - 0x200000000;
                uint64_t v1354 = v1349 - 0x100000000;
                int v1355 = *(int *)((char *)v1344 + ((v1349 - 0x300000000) >> 30));
                uint64_t v1356 = v1353 >> 32;
                uint64_t v1357 = v1354 >> 32;
                uint64_t v1358 = 4 * v1441;
                uint64_t v1573 = 4 * *(void *)(*a6 + v1347);
                uint64_t result = 4 * v1352;
                uint64_t v1359 = 4 * v1442;
                uint64_t v1557 = 4 * *(uint64_t *)((char *)*a5 + v1347);
                uint64_t v1360 = 4 * v1351;
                do
                {
                  if (v1355 >= 1)
                  {
                    int v1361 = 0;
                    int v1362 = v1344[v1356];
                    uint64_t v1363 = 4 * *(void *)(v1348 + 8 * v1356);
                    uint64_t v1364 = 4 * v1346[v1356];
                    uint64_t v1365 = v1359;
                    uint64_t v1366 = v1358;
                    do
                    {
                      if (v1362 >= 1)
                      {
                        int v1367 = 0;
                        int v1368 = v1344[v1357];
                        uint64_t v1369 = (void *)*v11;
                        uint64_t v1370 = 4 * *(void *)(v1348 + 8 * v1357);
                        uint64_t v1371 = 4 * v1346[v1357];
                        uint64_t v1372 = v1365;
                        uint64_t v1373 = v1366;
                        do
                        {
                          if (v1368 >= 1)
                          {
                            unint64_t v1374 = (float *)(v1369[19] + v1373);
                            unint64_t v1375 = (int *)(v172[19] + v1372);
                            int v1376 = v1368;
                            do
                            {
                              *unint64_t v1374 = (float)*v1375;
                              unint64_t v1374 = (float *)((char *)v1374 + v1370);
                              unint64_t v1375 = (int *)((char *)v1375 + v1371);
                              --v1376;
                            }
                            while (v1376);
                          }
                          ++v1367;
                          v1373 += v1363;
                          v1372 += v1364;
                        }
                        while (v1367 != v1362);
                      }
                      ++v1361;
                      v1366 += result;
                      v1365 += v1360;
                    }
                    while (v1361 != v1355);
                  }
                  ++v1345;
                  v1358 += v1573;
                  v1359 += v1557;
                }
                while (v1345 != v1590);
              }
              break;
            case 5:
              uint64_t v1377 = (v173 << 30) - 0x500000000;
              uint64_t v1378 = *a4;
              int v1501 = *(int *)((char *)*a4 + (v1377 >> 30));
              if (v1501 >= 1)
              {
                int v1513 = 0;
                uint64_t v1379 = *a5;
                uint64_t v1380 = v1377 >> 29;
                uint64_t v1381 = *a6;
                uint64_t v1382 = ((v173 << 30) - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1382);
                uint64_t v1383 = *(void *)(*a6 + v1382);
                int v1591 = *(int *)((char *)v1378 + (((v173 << 30) - 0x400000000) >> 30));
                uint64_t v1471 = ((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1384 = ((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1385 = ((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1542 = 4 * v1441;
                uint64_t v1491 = 4 * *(void *)(*a6 + v1380);
                uint64_t v1574 = 4 * v1383;
                uint64_t v1526 = 4 * v1442;
                uint64_t v1481 = 4 * *(uint64_t *)((char *)*a5 + v1380);
                uint64_t v1558 = 4 * result;
                do
                {
                  if (v1591 >= 1)
                  {
                    int v1386 = 0;
                    int v1387 = v1378[v1471];
                    uint64_t v1388 = 4 * *(void *)(v1381 + 8 * v1471);
                    uint64_t v1389 = 4 * v1379[v1471];
                    uint64_t v1390 = v1526;
                    uint64_t v1391 = v1542;
                    do
                    {
                      if (v1387 >= 1)
                      {
                        int v1392 = 0;
                        int v1393 = v1378[v1384];
                        uint64_t v1394 = 4 * *(void *)(v1381 + 8 * v1384);
                        uint64_t v1395 = 4 * v1379[v1384];
                        uint64_t v1396 = v1390;
                        uint64_t v1397 = v1391;
                        do
                        {
                          if (v1393 >= 1)
                          {
                            int v1398 = 0;
                            int v1399 = v1378[v1385];
                            uint64_t v1400 = (void *)*v11;
                            uint64_t v1401 = 4 * *(void *)(v1381 + 8 * v1385);
                            uint64_t v1402 = 4 * v1379[v1385];
                            uint64_t v1403 = v1396;
                            uint64_t v1404 = v1397;
                            do
                            {
                              if (v1399 >= 1)
                              {
                                uint64_t v1405 = (float *)(v1400[19] + v1404);
                                uint64_t v1406 = (int *)(v172[19] + v1403);
                                LODWORD(result) = v1399;
                                do
                                {
                                  *uint64_t v1405 = (float)*v1406;
                                  uint64_t v1405 = (float *)((char *)v1405 + v1401);
                                  uint64_t v1406 = (int *)((char *)v1406 + v1402);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1398;
                              v1404 += v1394;
                              v1403 += v1395;
                            }
                            while (v1398 != v1393);
                          }
                          ++v1392;
                          v1397 += v1388;
                          v1396 += v1389;
                        }
                        while (v1392 != v1387);
                      }
                      ++v1386;
                      v1391 += v1574;
                      v1390 += v1558;
                    }
                    while (v1386 != v1591);
                  }
                  v1542 += v1491;
                  v1526 += v1481;
                  ++v1513;
                }
                while (v1513 != v1501);
              }
              break;
            default:
              int v1256 = (char *)a4[1];
              LODWORD(v1257) = 1;
              uint64_t v1258 = -20;
              do
              {
                uint64_t v1257 = *(int *)&v1256[v1258] * (uint64_t)(int)v1257;
                v1258 += 4;
              }
              while (v1258);
              unint64_t v1436 = v172[6];
              if (v1436)
              {
                uint64_t result = 0;
                uint64_t v1259 = (v173 << 30) - 0x500000000;
                uint64_t v1260 = *a4;
                uint64_t v1490 = *v8;
                int v1261 = *a5;
                uint64_t v1421 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1426 = ((unint64_t)(v1256 - (char *)*a4) >> 2) - 1;
                uint64_t v1262 = *a6;
                int v1500 = *(int *)((char *)*a4 + (v1259 >> 30));
                uint64_t v1416 = ((v173 << 30) - 0x400000000) >> 32;
                uint64_t v1263 = ((v173 << 30) - 0x200000000) >> 32;
                uint64_t v1264 = ((v173 << 30) - 0x100000000) >> 32;
                uint64_t v1480 = 4 * *(void *)(*a6 + (v1259 >> 29));
                uint64_t v1461 = ((v173 << 30) - 0x300000000) >> 32;
                uint64_t v1470 = 4 * *(uint64_t *)((char *)*a5 + (v1259 >> 29));
                uint64_t v1431 = v1257;
                do
                {
                  uint64_t v1265 = v1426;
                  uint64_t v1453 = result;
                  uint64_t v1266 = 0;
                  if ((v1426 & 0x80000000) != 0)
                  {
                    uint64_t v1267 = v1421;
                  }
                  else
                  {
                    uint64_t v1267 = v1421;
                    do
                    {
                      ldiv_t v1268 = ldiv((int)result, v1260[v1265]);
                      LODWORD(result) = v1268.quot;
                      v1266 += v1261[v1265--] * v1268.rem;
                    }
                    while (v1265 != -1);
                  }
                  uint64_t v1269 = 0;
                  if ((v1267 & 0x80000000) == 0)
                  {
                    int v1270 = v1453;
                    do
                    {
                      ldiv_t v1271 = ldiv(v1270, *(int *)(v1490 + 4 * v1267));
                      int v1270 = v1271.quot;
                      v1269 += *(void *)(v1262 + 8 * v1267--) * v1271.rem;
                    }
                    while (v1267 != -1);
                  }
                  if (v1500 >= 1)
                  {
                    int v1272 = 0;
                    int v1589 = v1260[v1416];
                    uint64_t v1541 = 4 * (v1269 + v1441);
                    uint64_t v1572 = 4 * *(void *)(v1262 + 8 * v1416);
                    uint64_t v1525 = 4 * (v1266 + v1442);
                    uint64_t v1556 = 4 * v1261[v1416];
                    do
                    {
                      int v1512 = v1272;
                      if (v1589 >= 1)
                      {
                        int v1273 = 0;
                        int v1274 = v1260[v1461];
                        uint64_t v1275 = 4 * *(void *)(v1262 + 8 * v1461);
                        uint64_t v1276 = 4 * v1261[v1461];
                        uint64_t v1277 = v1525;
                        uint64_t v1278 = v1541;
                        do
                        {
                          if (v1274 >= 1)
                          {
                            int v1279 = 0;
                            int v1280 = v1260[v1263];
                            uint64_t v1281 = 4 * *(void *)(v1262 + 8 * v1263);
                            uint64_t v1282 = 4 * v1261[v1263];
                            uint64_t v1283 = v1277;
                            uint64_t v1284 = v1278;
                            do
                            {
                              if (v1280 >= 1)
                              {
                                int v1285 = 0;
                                int v1286 = v1260[v1264];
                                uint64_t v1287 = (void *)*v11;
                                uint64_t v1288 = 4 * *(void *)(v1262 + 8 * v1264);
                                uint64_t v1289 = 4 * v1261[v1264];
                                uint64_t v1290 = v1283;
                                uint64_t v1291 = v1284;
                                do
                                {
                                  if (v1286 >= 1)
                                  {
                                    int v1292 = (float *)(v1287[19] + v1291);
                                    int v1293 = (int *)(v172[19] + v1290);
                                    int v1294 = v1286;
                                    do
                                    {
                                      *int v1292 = (float)*v1293;
                                      int v1292 = (float *)((char *)v1292 + v1288);
                                      int v1293 = (int *)((char *)v1293 + v1289);
                                      --v1294;
                                    }
                                    while (v1294);
                                  }
                                  ++v1285;
                                  v1291 += v1281;
                                  v1290 += v1282;
                                }
                                while (v1285 != v1280);
                              }
                              ++v1279;
                              v1284 += v1275;
                              v1283 += v1276;
                            }
                            while (v1279 != v1274);
                          }
                          ++v1273;
                          v1278 += v1572;
                          v1277 += v1556;
                        }
                        while (v1273 != v1589);
                      }
                      int v1272 = v1512 + 1;
                      v1541 += v1480;
                      v1525 += v1470;
                    }
                    while (v1512 + 1 != v1500);
                  }
                  uint64_t result = v1453 + v1431;
                }
                while (v1436 > v1453 + v1431);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<long long,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t *a2, int a3, int **a4, uint64_t **a5, void *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = (uint64_t *)*a2;
  uint64_t v12 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v13 = v8[6];
          if (v13)
          {
            size_t v14 = (void *)v8[19];
            BOOL v15 = **(void **)(*(void *)v12 + 152) != 0;
            uint64_t result = (uint64_t)memset(v14, v15, v13);
          }
          break;
        case 1:
          uint64_t v34 = *(void *)(*(void *)result + 160);
          if (v34)
          {
            size_t v35 = *(uint64_t **)(*(void *)result + 152);
            size_t v36 = (BOOL *)v8[19];
            uint64_t v37 = 8 * v34;
            do
            {
              uint64_t v38 = *v35++;
              *v36++ = v38 != 0;
              v37 -= 8;
            }
            while (v37);
          }
          break;
        case 2:
          uint64_t v39 = *a7;
          uint64_t v40 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v41 = **a4;
              if ((int)v41 >= 1)
              {
                uint64_t v42 = (BOOL *)v8[19];
                uint64_t v43 = (void *)(*(void *)(v40 + 152) + 8 * v39);
                uint64_t v44 = 8 * **a5;
                do
                {
                  *v42++ = *v43 != 0;
                  uint64_t v43 = (void *)((char *)v43 + v44);
                  --v41;
                }
                while (v41);
              }
              break;
            case 2:
              int v198 = **a4;
              if (v198 >= 1)
              {
                int v199 = 0;
                uint64_t v200 = 0;
                uint64_t v201 = *(void *)(v40 + 152);
                uint64_t v202 = v8[19];
                uint64_t v203 = (*a4)[1];
                uint64_t v204 = (*a5)[1];
                uint64_t v205 = **a5 - v204 * v203;
                do
                {
                  int v206 = v203;
                  if ((int)v203 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(void *)(v201 + 8 * v39) != 0;
                      *(unsigned char *)(v202 + v200++) = result;
                      v39 += v204;
                      --v206;
                    }
                    while (v206);
                  }
                  v39 += v205;
                  ++v199;
                }
                while (v199 != v198);
              }
              break;
            case 3:
              uint64_t v207 = *a4;
              int v208 = **a4;
              if (v208 >= 1)
              {
                int v209 = 0;
                uint64_t result = 0;
                uint64_t v210 = *(void *)(v40 + 152);
                uint64_t v211 = v8[19];
                uint64_t v212 = v207[1];
                uint64_t v213 = *a5;
                uint64_t v214 = (*a5)[1];
                uint64_t v215 = **a5 - v214 * v212;
                do
                {
                  if ((int)v212 < 1)
                  {
                    uint64_t v222 = result;
                  }
                  else
                  {
                    int v216 = 0;
                    uint64_t v217 = v207[2];
                    uint64_t v218 = *a5;
                    uint64_t v219 = v214 - v213[2] * v217;
                    do
                    {
                      if ((int)v217 < 1)
                      {
                        uint64_t v222 = result;
                      }
                      else
                      {
                        uint64_t v220 = v218[2];
                        int v221 = v217;
                        do
                        {
                          uint64_t v222 = result + 1;
                          *(unsigned char *)(v211 + result) = *(void *)(v210 + 8 * v39) != 0;
                          v39 += v220;
                          ++result;
                          --v221;
                        }
                        while (v221);
                      }
                      v39 += v219;
                      ++v216;
                      uint64_t result = v222;
                    }
                    while (v216 != v212);
                  }
                  v39 += v215;
                  ++v209;
                  uint64_t result = v222;
                }
                while (v209 != v208);
              }
              break;
            case 4:
              uint64_t v223 = *a4;
              int v224 = **a4;
              if (v224 >= 1)
              {
                int v225 = 0;
                uint64_t result = 0;
                uint64_t v226 = *(void *)(v40 + 152);
                uint64_t v227 = v8[19];
                uint64_t v228 = v223[1];
                uint64_t v229 = *a5;
                uint64_t v230 = (*a5)[1];
                uint64_t v231 = **a5 - v230 * v228;
                do
                {
                  if ((int)v228 < 1)
                  {
                    uint64_t v242 = result;
                  }
                  else
                  {
                    int v232 = 0;
                    uint64_t v233 = v223[2];
                    uint64_t v234 = *a5;
                    uint64_t v235 = v230 - v229[2] * v233;
                    do
                    {
                      if ((int)v233 < 1)
                      {
                        uint64_t v242 = result;
                      }
                      else
                      {
                        int v236 = 0;
                        uint64_t v237 = v223[3];
                        unint64_t v238 = *a5;
                        uint64_t v239 = v234[2] - v234[3] * v237;
                        do
                        {
                          if ((int)v237 < 1)
                          {
                            uint64_t v242 = result;
                          }
                          else
                          {
                            uint64_t v240 = v238[3];
                            int v241 = v237;
                            do
                            {
                              uint64_t v242 = result + 1;
                              *(unsigned char *)(v227 + result) = *(void *)(v226 + 8 * v39) != 0;
                              v39 += v240;
                              ++result;
                              --v241;
                            }
                            while (v241);
                          }
                          v39 += v239;
                          ++v236;
                          uint64_t result = v242;
                        }
                        while (v236 != v233);
                      }
                      v39 += v235;
                      ++v232;
                      uint64_t result = v242;
                    }
                    while (v232 != v228);
                  }
                  v39 += v231;
                  ++v225;
                  uint64_t result = v242;
                }
                while (v225 != v224);
              }
              break;
            default:
              uint64_t v188 = v8[6];
              if (v188)
              {
                uint64_t v189 = 0;
                uint64_t v190 = *(void *)(v40 + 152) + 8 * v39;
                uint64_t v191 = v8[19];
                ldiv_t v192 = *a4;
                uint64_t v193 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v194 = *a5;
                do
                {
                  uint64_t v195 = 0;
                  if ((v193 & 0x80000000) == 0)
                  {
                    uint64_t v196 = v193;
                    LODWORD(result) = v189;
                    do
                    {
                      ldiv_t v197 = ldiv((int)result, v192[v196]);
                      uint64_t result = v197.quot;
                      v195 += v194[v196--] * v197.rem;
                    }
                    while (v196 != -1);
                  }
                  *(unsigned char *)(v191 + v189++) = *(void *)(v190 + 8 * v195) != 0;
                }
                while (v189 != v188);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1442 = *a7;
          uint64_t v45 = *a8;
          uint64_t v46 = *(void **)result;
          uint64_t v47 = v46[1] - *v46;
          switch(v47 >> 2)
          {
            case 1:
              uint64_t v48 = (v47 << 30) - 0x100000000;
              int v49 = *(int *)((char *)*a4 + (v48 >> 30));
              if (v49 >= 1)
              {
                uint64_t v50 = v48 >> 29;
                uint64_t v51 = *(uint64_t *)((char *)*a5 + v50);
                uint64_t v52 = *(void *)(*a6 + v50);
                uint64_t v53 = (BOOL *)(v8[19] + v45);
                uint64_t v54 = (void *)(v46[19] + 8 * v1442);
                uint64_t v55 = 8 * v51;
                do
                {
                  *uint64_t v53 = *v54 != 0;
                  v53 += v52;
                  uint64_t v54 = (void *)((char *)v54 + v55);
                  --v49;
                }
                while (v49);
              }
              break;
            case 2:
              uint64_t v583 = (v47 << 30) - 0x200000000;
              int v584 = *(int *)((char *)*a4 + (v583 >> 30));
              if (v584 >= 1)
              {
                int v585 = 0;
                uint64_t v586 = v583 >> 29;
                uint64_t v587 = *(uint64_t *)((char *)*a5 + v586);
                uint64_t v588 = *(void *)(*a6 + v586);
                uint64_t v589 = (v47 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v589 >> 29));
                uint64_t v590 = *(void *)(*a6 + (v589 >> 29));
                int v591 = *(int *)((char *)*a4 + (v589 >> 30));
                uint64_t v592 = 8 * v1442;
                uint64_t v593 = 8 * v587;
                uint64_t v594 = 8 * result;
                do
                {
                  if (v591 >= 1)
                  {
                    uint64_t v595 = v8[19];
                    uint64_t result = v46[19] + v592;
                    int v596 = v591;
                    do
                    {
                      *(unsigned char *)(v595 + v45) = *(void *)result != 0;
                      v595 += v590;
                      result += v594;
                      --v596;
                    }
                    while (v596);
                  }
                  v45 += v588;
                  ++v585;
                  v592 += v593;
                }
                while (v585 != v584);
              }
              break;
            case 3:
              uint64_t v597 = (v47 << 30) - 0x300000000;
              uint64_t v598 = *a4;
              int v599 = *(int *)((char *)*a4 + (v597 >> 30));
              if (v599 >= 1)
              {
                int v600 = 0;
                uint64_t v601 = v47 << 30;
                uint64_t v602 = *a5;
                uint64_t v603 = v597 >> 29;
                uint64_t v604 = *(uint64_t *)((char *)*a5 + (v597 >> 29));
                uint64_t v605 = *a6;
                uint64_t v606 = *(void *)(*a6 + v603);
                uint64_t v607 = v601 - 0x200000000;
                uint64_t v608 = (v601 - 0x200000000) >> 29;
                uint64_t v609 = v601 - 0x100000000;
                uint64_t v610 = *(uint64_t *)((char *)*a5 + v608);
                uint64_t v611 = *(void *)(*a6 + v608);
                int v612 = *(int *)((char *)v598 + (v607 >> 30));
                uint64_t v613 = v609 >> 32;
                uint64_t v614 = 8 * v1442;
                uint64_t result = 8 * v604;
                uint64_t v615 = 8 * v610;
                do
                {
                  if (v612 >= 1)
                  {
                    int v616 = 0;
                    uint64_t v617 = *(void *)(v605 + 8 * v613);
                    int v618 = v598[v613];
                    int v619 = (void *)*a2;
                    uint64_t v620 = 8 * v602[v613];
                    uint64_t v621 = v614;
                    uint64_t v622 = v45;
                    do
                    {
                      if (v618 >= 1)
                      {
                        uint64_t v623 = v619[19];
                        uint64_t v624 = (void *)(v46[19] + v621);
                        int v625 = v618;
                        do
                        {
                          *(unsigned char *)(v623 + v622) = *v624 != 0;
                          v623 += v617;
                          uint64_t v624 = (void *)((char *)v624 + v620);
                          --v625;
                        }
                        while (v625);
                      }
                      v622 += v611;
                      ++v616;
                      v621 += v615;
                    }
                    while (v616 != v612);
                  }
                  v45 += v606;
                  ++v600;
                  v614 += result;
                }
                while (v600 != v599);
              }
              break;
            case 4:
              uint64_t v626 = (v47 << 30) - 0x400000000;
              uint64_t v627 = *a4;
              int v1586 = *(int *)((char *)*a4 + (v626 >> 30));
              if (v1586 >= 1)
              {
                int v628 = 0;
                uint64_t v629 = v47 << 30;
                uint64_t v630 = *a5;
                uint64_t v631 = v626 >> 29;
                uint64_t v632 = *(uint64_t *)((char *)*a5 + v631);
                uint64_t v633 = *a6;
                uint64_t v1568 = *(void *)(*a6 + v631);
                uint64_t v634 = (v47 << 30) - 0x300000000;
                uint64_t v635 = *(void *)(*a6 + (v634 >> 29));
                int v636 = *(int *)((char *)v627 + (v634 >> 30));
                uint64_t v1534 = (v629 - 0x200000000) >> 32;
                uint64_t v637 = (v629 - 0x100000000) >> 32;
                uint64_t result = 8 * v1442;
                uint64_t v638 = 8 * *(uint64_t *)((char *)*a5 + (v634 >> 29));
                do
                {
                  uint64_t v639 = v45;
                  if (v636 >= 1)
                  {
                    int v640 = 0;
                    uint64_t v641 = *(void *)(v633 + 8 * v1534);
                    int v642 = v627[v1534];
                    uint64_t v643 = 8 * v630[v1534];
                    uint64_t v644 = result;
                    uint64_t v645 = v45;
                    do
                    {
                      if (v642 >= 1)
                      {
                        int v646 = 0;
                        uint64_t v647 = *(void *)(v633 + 8 * v637);
                        int v648 = v627[v637];
                        uint64_t v649 = (void *)*a2;
                        uint64_t v650 = 8 * v630[v637];
                        uint64_t v651 = v644;
                        uint64_t v652 = v645;
                        do
                        {
                          if (v648 >= 1)
                          {
                            uint64_t v653 = v649[19];
                            uint64_t v654 = (void *)(v46[19] + v651);
                            int v655 = v648;
                            do
                            {
                              *(unsigned char *)(v653 + v652) = *v654 != 0;
                              v653 += v647;
                              uint64_t v654 = (void *)((char *)v654 + v650);
                              --v655;
                            }
                            while (v655);
                          }
                          v652 += v641;
                          ++v646;
                          v651 += v643;
                        }
                        while (v646 != v642);
                      }
                      v645 += v635;
                      ++v640;
                      v644 += v638;
                    }
                    while (v640 != v636);
                  }
                  uint64_t v45 = v639 + v1568;
                  ++v628;
                  result += 8 * v632;
                }
                while (v628 != v1586);
              }
              break;
            case 5:
              uint64_t v656 = (v47 << 30) - 0x500000000;
              int v657 = *a4;
              int v1499 = *(int *)((char *)*a4 + (v656 >> 30));
              if (v1499 >= 1)
              {
                int v1509 = 0;
                uint64_t v658 = *a5;
                uint64_t v659 = v656 >> 29;
                uint64_t v660 = *a6;
                uint64_t v1489 = *(void *)(*a6 + v659);
                uint64_t v661 = (v47 << 30) - 0x400000000;
                uint64_t v1569 = *(void *)(*a6 + (v661 >> 29));
                int v1587 = *(int *)((char *)v657 + (v661 >> 30));
                uint64_t v1469 = ((v47 << 30) - 0x300000000) >> 32;
                uint64_t v1535 = ((v47 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v47 << 30) - 0x100000000) >> 32;
                uint64_t v1521 = 8 * v1442;
                uint64_t v1479 = 8 * *(uint64_t *)((char *)*a5 + v659);
                uint64_t v1551 = 8 * *(uint64_t *)((char *)*a5 + (v661 >> 29));
                do
                {
                  uint64_t v1453 = v45;
                  if (v1587 >= 1)
                  {
                    int v662 = 0;
                    uint64_t v663 = *(void *)(v660 + 8 * v1469);
                    int v664 = v657[v1469];
                    uint64_t v665 = 8 * v658[v1469];
                    uint64_t v666 = v1521;
                    uint64_t v667 = v45;
                    do
                    {
                      if (v664 >= 1)
                      {
                        int v668 = 0;
                        uint64_t v669 = *(void *)(v660 + 8 * v1535);
                        int v670 = v657[v1535];
                        uint64_t v671 = 8 * v658[v1535];
                        uint64_t v672 = v666;
                        uint64_t v673 = v667;
                        do
                        {
                          if (v670 >= 1)
                          {
                            int v674 = 0;
                            uint64_t v675 = *(void *)(v660 + 8 * result);
                            int v676 = v657[result];
                            uint64_t v677 = (void *)*a2;
                            uint64_t v678 = 8 * v658[result];
                            uint64_t v679 = v672;
                            uint64_t v680 = v673;
                            do
                            {
                              if (v676 >= 1)
                              {
                                uint64_t v681 = v677[19];
                                unint64_t v682 = (void *)(v46[19] + v679);
                                int v683 = v676;
                                do
                                {
                                  *(unsigned char *)(v681 + v680) = *v682 != 0;
                                  v681 += v675;
                                  unint64_t v682 = (void *)((char *)v682 + v678);
                                  --v683;
                                }
                                while (v683);
                              }
                              v680 += v669;
                              ++v674;
                              v679 += v671;
                            }
                            while (v674 != v670);
                          }
                          v673 += v663;
                          ++v668;
                          v672 += v665;
                        }
                        while (v668 != v664);
                      }
                      v667 += v1569;
                      ++v662;
                      v666 += v1551;
                    }
                    while (v662 != v1587);
                  }
                  uint64_t v45 = v1453 + v1489;
                  v1521 += v1479;
                  ++v1509;
                }
                while (v1509 != v1499);
              }
              break;
            default:
              int v546 = (char *)a4[1];
              LODWORD(v547) = 1;
              uint64_t v548 = -20;
              do
              {
                uint64_t v547 = *(int *)&v546[v548] * (uint64_t)(int)v547;
                v548 += 4;
              }
              while (v548);
              unint64_t v1440 = v46[6];
              if (v1440)
              {
                uint64_t v549 = 0;
                uint64_t v550 = (v47 << 30) - 0x500000000;
                uint64_t v551 = *a4;
                uint64_t v1417 = *v8;
                uint64_t v1427 = ((unint64_t)(v546 - (char *)*a4) >> 2) - 1;
                uint64_t v552 = *a5;
                uint64_t v553 = *a6;
                uint64_t v1478 = *(void *)(*a6 + (v550 >> 29));
                int v1488 = *(int *)((char *)*a4 + (v550 >> 30));
                uint64_t v1422 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1412 = ((v47 << 30) - 0x400000000) >> 32;
                uint64_t v1459 = ((v47 << 30) - 0x300000000) >> 32;
                uint64_t v1533 = ((v47 << 30) - 0x200000000) >> 32;
                uint64_t v554 = ((v47 << 30) - 0x100000000) >> 32;
                uint64_t v1468 = 8 * *(uint64_t *)((char *)*a5 + (v550 >> 29));
                uint64_t v1452 = *a8;
                uint64_t v1432 = v547;
                do
                {
                  uint64_t v555 = v1427;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    uint64_t v556 = 0;
                    uint64_t v557 = v1422;
                  }
                  else
                  {
                    uint64_t v556 = 0;
                    LODWORD(result) = v549;
                    uint64_t v557 = v1422;
                    do
                    {
                      ldiv_t v558 = ldiv((int)result, v551[v555]);
                      uint64_t result = v558.quot;
                      v556 += v552[v555--] * v558.rem;
                    }
                    while (v555 != -1);
                  }
                  uint64_t v1448 = v549;
                  uint64_t v559 = 0;
                  if ((v557 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v549;
                    do
                    {
                      ldiv_t v560 = ldiv((int)result, *(int *)(v1417 + 4 * v557));
                      uint64_t result = v560.quot;
                      v559 += *(void *)(v553 + 8 * v557--) * v560.rem;
                    }
                    while (v557 != -1);
                  }
                  if (v1488 >= 1)
                  {
                    int v561 = 0;
                    uint64_t v1567 = *(void *)(v553 + 8 * v1412);
                    int v1585 = v551[v1412];
                    uint64_t v1508 = 8 * (v556 + v1442);
                    uint64_t v1520 = v559 + v1452;
                    uint64_t v1550 = 8 * v552[v1412];
                    do
                    {
                      int v1498 = v561;
                      if (v1585 >= 1)
                      {
                        int v562 = 0;
                        uint64_t v563 = *(void *)(v553 + 8 * v1459);
                        int v564 = v551[v1459];
                        uint64_t v565 = 8 * v552[v1459];
                        uint64_t v567 = v1508;
                        uint64_t v566 = v1520;
                        do
                        {
                          if (v564 >= 1)
                          {
                            int v568 = 0;
                            uint64_t v569 = *(void *)(v553 + 8 * v1533);
                            int v570 = v551[v1533];
                            uint64_t v571 = 8 * v552[v1533];
                            uint64_t result = v567;
                            uint64_t v572 = v566;
                            do
                            {
                              if (v570 >= 1)
                              {
                                int v573 = 0;
                                uint64_t v574 = *(void *)(v553 + 8 * v554);
                                int v575 = v551[v554];
                                uint64_t v576 = (void *)*a2;
                                uint64_t v577 = 8 * v552[v554];
                                uint64_t v578 = result;
                                uint64_t v579 = v572;
                                do
                                {
                                  if (v575 >= 1)
                                  {
                                    uint64_t v580 = v576[19];
                                    uint64_t v581 = (void *)(v46[19] + v578);
                                    int v582 = v575;
                                    do
                                    {
                                      *(unsigned char *)(v580 + v579) = *v581 != 0;
                                      v580 += v574;
                                      uint64_t v581 = (void *)((char *)v581 + v577);
                                      --v582;
                                    }
                                    while (v582);
                                  }
                                  v579 += v569;
                                  ++v573;
                                  v578 += v571;
                                }
                                while (v573 != v570);
                              }
                              v572 += v563;
                              ++v568;
                              result += v565;
                            }
                            while (v568 != v564);
                          }
                          v566 += v1567;
                          ++v562;
                          v567 += v1550;
                        }
                        while (v562 != v1585);
                      }
                      v1520 += v1478;
                      int v561 = v1498 + 1;
                      v1508 += v1468;
                    }
                    while (v1498 + 1 != v1488);
                  }
                  v549 += v1432;
                }
                while (v1440 > v1448 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v16 = 0;
            char v17 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v18 = v8[19];
            do
              *(unsigned char *)(v18 + v16++) = v17;
            while (*(void *)(*a2 + 48) > v16);
          }
          break;
        case 1:
          uint64_t v56 = *(void *)(*(void *)result + 160);
          if (v56)
          {
            uint64_t v57 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v58 = (unsigned char *)v8[19];
            uint64_t v59 = 8 * v56;
            do
            {
              uint64_t v60 = *v57++;
              *v58++ = v60;
              v59 -= 8;
            }
            while (v59);
          }
          break;
        case 2:
          uint64_t v61 = *a7;
          uint64_t v62 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v63 = 0;
                uint64_t v64 = *(void *)(v62 + 152);
                uint64_t v65 = v8[19];
                do
                {
                  *(unsigned char *)(v65 + v63) = *(void *)(v64 + 8 * v61);
                  v61 += **a5;
                  ++v63;
                }
                while (**a4 > (int)v63);
              }
              break;
            case 2:
              uint64_t v252 = *a4;
              int v253 = **a4;
              if (v253 >= 1)
              {
                int v254 = 0;
                uint64_t v255 = 0;
                uint64_t v256 = *(void *)(v62 + 152);
                uint64_t v257 = v8[19];
                do
                {
                  int v258 = v252[1];
                  if (v258 < 1)
                  {
                    uint64_t v259 = *a5;
                    uint64_t v260 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v257 + v255 + result) = *(void *)(v256 + 8 * v61);
                      uint64_t v259 = *a5;
                      uint64_t v260 = (*a5)[1];
                      v61 += v260;
                      uint64_t v252 = *a4;
                      int v258 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v258);
                    int v253 = *v252;
                    v255 += result;
                  }
                  uint64_t v61 = *v259 + v61 - v260 * v258;
                  ++v254;
                }
                while (v254 < v253);
              }
              break;
            case 3:
              uint64_t v261 = *a4;
              int v262 = **a4;
              if (v262 >= 1)
              {
                int v263 = 0;
                uint64_t v264 = 0;
                uint64_t v265 = *(void *)(v62 + 152);
                uint64_t v266 = v8[19];
                do
                {
                  int v267 = v261[1];
                  if (v267 < 1)
                  {
                    uint64_t v271 = *a5;
                    uint64_t v272 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v267; ++i)
                    {
                      int v269 = v261[2];
                      if (v269 < 1)
                      {
                        uint64_t v271 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v270 = 0;
                        do
                        {
                          *(unsigned char *)(v266 + v264 + v270) = *(void *)(v265 + 8 * v61);
                          uint64_t v271 = *a5;
                          uint64_t result = (*a5)[2];
                          v61 += result;
                          uint64_t v261 = *a4;
                          int v269 = (*a4)[2];
                          ++v270;
                        }
                        while ((int)v270 < v269);
                        v264 += v270;
                      }
                      uint64_t v272 = v271[1];
                      uint64_t v61 = v272 + v61 - result * v269;
                      int v267 = v261[1];
                    }
                    int v262 = *v261;
                  }
                  uint64_t v61 = *v271 + v61 - v272 * v267;
                  ++v263;
                }
                while (v263 < v262);
              }
              break;
            case 4:
              uint64_t v273 = *a4;
              int v274 = **a4;
              if (v274 >= 1)
              {
                int v275 = 0;
                uint64_t v276 = 0;
                uint64_t v277 = *(void *)(v62 + 152);
                uint64_t v278 = v8[19];
                do
                {
                  int v279 = v273[1];
                  if (v279 < 1)
                  {
                    uint64_t v285 = *a5;
                    uint64_t v287 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v279; ++j)
                    {
                      int v281 = v273[2];
                      if (v281 < 1)
                      {
                        uint64_t v285 = *a5;
                        uint64_t v286 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v281; ++k)
                        {
                          int v283 = v273[3];
                          if (v283 < 1)
                          {
                            uint64_t v285 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v284 = 0;
                            do
                            {
                              *(unsigned char *)(v278 + v276 + v284) = *(void *)(v277 + 8 * v61);
                              uint64_t v285 = *a5;
                              uint64_t result = (*a5)[3];
                              v61 += result;
                              uint64_t v273 = *a4;
                              int v283 = (*a4)[3];
                              ++v284;
                            }
                            while ((int)v284 < v283);
                            v276 += v284;
                          }
                          uint64_t v286 = v285[2];
                          uint64_t v61 = v286 + v61 - result * v283;
                          int v281 = v273[2];
                        }
                      }
                      uint64_t v287 = v285[1];
                      uint64_t v61 = v287 + v61 - v286 * v281;
                      int v279 = v273[1];
                    }
                    int v274 = *v273;
                  }
                  uint64_t v61 = *v285 + v61 - v287 * v279;
                  ++v275;
                }
                while (v275 < v274);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v243 = 0;
                uint64_t v244 = *(void *)(v62 + 152) + 8 * v61;
                uint64_t v245 = v8[19];
                do
                {
                  ldiv_t v246 = *a4;
                  unint64_t v247 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v248 = 0;
                  uint64_t v249 = (v247 - 1);
                  if ((int)v247 - 1 >= 0)
                  {
                    uint64_t v250 = *a5;
                    LODWORD(result) = v243;
                    do
                    {
                      ldiv_t v251 = ldiv((int)result, v246[v249]);
                      uint64_t result = v251.quot;
                      v248 += v250[v249--] * v251.rem;
                    }
                    while (v249 != -1);
                  }
                  *(unsigned char *)(v245 + v243++) = *(void *)(v244 + 8 * v248);
                }
                while (v243 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1583 = *a7;
          uint64_t v66 = *a8;
          uint64_t v67 = *(void **)result;
          uint64_t v68 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v68 >> 2)
          {
            case 1:
              uint64_t v69 = (v68 << 30) - 0x100000000;
              int v70 = *(int *)((char *)*a4 + (v69 >> 30));
              if (v70 >= 1)
              {
                uint64_t v71 = v69 >> 29;
                uint64_t v72 = *(uint64_t *)((char *)*a5 + v71);
                uint64_t v73 = *(void *)(*a6 + v71);
                uint64_t v74 = (unsigned char *)(v8[19] + v66);
                uint64_t v75 = (void *)(v67[19] + 8 * v1583);
                uint64_t v76 = 8 * v72;
                do
                {
                  unsigned char *v74 = *v75;
                  v74 += v73;
                  uint64_t v75 = (void *)((char *)v75 + v76);
                  --v70;
                }
                while (v70);
              }
              break;
            case 2:
              uint64_t v706 = (v68 << 30) - 0x200000000;
              int v707 = *(int *)((char *)*a4 + (v706 >> 30));
              if (v707 >= 1)
              {
                int v708 = 0;
                uint64_t v709 = v706 >> 29;
                uint64_t v710 = *(uint64_t *)((char *)*a5 + v709);
                uint64_t v711 = *(void *)(*a6 + v709);
                uint64_t v712 = 8 * v1583;
                uint64_t v713 = 8 * v710;
                do
                {
                  uint64_t v714 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v715 = *(int *)((char *)*a4 + (v714 >> 30));
                  if (v715 >= 1)
                  {
                    uint64_t v716 = v714 >> 29;
                    uint64_t v717 = *(uint64_t *)((char *)*a5 + v716);
                    uint64_t v718 = *(void *)(*a6 + v716);
                    uint64_t v719 = *(void *)(*a2 + 152);
                    uint64_t v720 = (void *)(*(void *)(*(void *)v12 + 152) + v712);
                    uint64_t result = 8 * v717;
                    do
                    {
                      *(unsigned char *)(v719 + v66) = *v720;
                      v719 += v718;
                      uint64_t v720 = (void *)((char *)v720 + result);
                      --v715;
                    }
                    while (v715);
                  }
                  v66 += v711;
                  ++v708;
                  v712 += v713;
                }
                while (v708 != v707);
              }
              break;
            case 3:
              uint64_t v721 = (v68 << 30) - 0x300000000;
              int v722 = *(int *)((char *)*a4 + (v721 >> 30));
              if (v722 >= 1)
              {
                int v723 = 0;
                uint64_t v724 = v721 >> 29;
                uint64_t v725 = *(uint64_t *)((char *)*a5 + v724);
                uint64_t v726 = *(void *)(*a6 + v724);
                uint64_t v727 = 8 * v1583;
                uint64_t v728 = 8 * v725;
                do
                {
                  uint64_t v729 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v730 = *(int *)((char *)*a4 + (v729 >> 30));
                  if (v730 >= 1)
                  {
                    int v731 = 0;
                    uint64_t v732 = v729 >> 29;
                    uint64_t v733 = *(uint64_t *)((char *)*a5 + v732);
                    uint64_t v734 = *(void *)(*a6 + v732);
                    uint64_t result = 8 * v733;
                    uint64_t v735 = v727;
                    uint64_t v736 = v66;
                    do
                    {
                      uint64_t v737 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v738 = *(int *)((char *)*a4 + (v737 >> 30));
                      if (v738 >= 1)
                      {
                        uint64_t v739 = v737 >> 29;
                        uint64_t v740 = *(uint64_t *)((char *)*a5 + v739);
                        uint64_t v741 = *(void *)(*a6 + v739);
                        uint64_t v742 = *(void *)(*a2 + 152);
                        uint64_t v743 = (void *)(*(void *)(*(void *)v12 + 152) + v735);
                        uint64_t v744 = 8 * v740;
                        do
                        {
                          *(unsigned char *)(v742 + v736) = *v743;
                          v742 += v741;
                          uint64_t v743 = (void *)((char *)v743 + v744);
                          --v738;
                        }
                        while (v738);
                      }
                      v736 += v734;
                      ++v731;
                      v735 += result;
                    }
                    while (v731 != v730);
                  }
                  v66 += v726;
                  ++v723;
                  v727 += v728;
                }
                while (v723 != v722);
              }
              break;
            case 4:
              uint64_t v745 = a4;
              int v746 = a5;
              uint64_t v747 = a6;
              uint64_t v748 = *a7;
              uint64_t v749 = *a8;
              goto LABEL_562;
            case 5:
              uint64_t v750 = (v68 << 30) - 0x500000000;
              int v751 = *(int *)((char *)*a4 + (v750 >> 30));
              if (v751 >= 1)
              {
                uint64_t v752 = v750 >> 29;
                uint64_t v753 = *(uint64_t *)((char *)*a5 + v752);
                uint64_t v754 = *(void *)(*a6 + v752);
                do
                {
                  v1583 += v753;
                  v66 += v754;
                  --v751;
                }
                while (v751);
              }
              break;
            default:
              LODWORD(v684) = 1;
              uint64_t v685 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v684 = a4[1][v685++] * (uint64_t)(int)v684;
              while (v685 * 4);
              if (v67[6])
              {
                uint64_t result = 0;
                uint64_t v1510 = *a8;
                uint64_t v1522 = v684;
                do
                {
                  ldiv_t v686 = *a4;
                  unint64_t v687 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v688 = (v687 - 1);
                  uint64_t v1536 = v67;
                  uint64_t v1552 = result;
                  uint64_t v689 = 0;
                  if ((int)v687 - 1 >= 0)
                  {
                    uint64_t v690 = *a5;
                    do
                    {
                      ldiv_t v691 = ldiv((int)result, v686[v688]);
                      LODWORD(result) = v691.quot;
                      v689 += v690[v688--] * v691.rem;
                    }
                    while (v688 != -1);
                  }
                  uint64_t v692 = *(void *)*a2;
                  unint64_t v693 = (unint64_t)(*(void *)(*a2 + 8) - v692) >> 2;
                  uint64_t v694 = *a6;
                  uint64_t v695 = 0;
                  uint64_t v696 = (v693 - 1);
                  if ((int)v693 - 1 >= 0)
                  {
                    int quot = v1552;
                    do
                    {
                      ldiv_t v698 = ldiv(quot, *(int *)(v692 + 4 * v696));
                      int quot = v698.quot;
                      v695 += *(void *)(v694 + 8 * v696--) * v698.rem;
                    }
                    while (v696 != -1);
                  }
                  uint64_t v67 = v1536;
                  uint64_t v699 = ((v67[1] - *v67) << 30) - 0x500000000;
                  int v700 = *(int *)((char *)v686 + (v699 >> 30));
                  if (v700 >= 1)
                  {
                    uint64_t v701 = v689 + v1583;
                    uint64_t v702 = v699 >> 29;
                    uint64_t v703 = *(uint64_t *)((char *)*a5 + v702);
                    uint64_t v704 = *(void *)(v694 + v702);
                    uint64_t v705 = v695 + v1510;
                    do
                    {
                      v701 += v703;
                      v705 += v704;
                      --v700;
                    }
                    while (v700);
                    uint64_t v67 = *(void **)v12;
                  }
                  uint64_t result = v1552 + v1522;
                }
                while (v67[6] > (unint64_t)(v1552 + v1522));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v19 = v8[6];
          if (v19)
          {
            int v20 = **(_DWORD **)(*(void *)result + 152);
            int v21 = (_DWORD *)v8[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          uint64_t v77 = *(void *)(*(void *)result + 160);
          if (v77)
          {
            int v78 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v79 = (_DWORD *)v8[19];
            uint64_t v80 = 8 * v77;
            do
            {
              uint64_t v81 = *v78++;
              *v79++ = v81;
              v80 -= 8;
            }
            while (v80);
          }
          break;
        case 2:
          uint64_t v82 = *a7;
          uint64_t v83 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v84 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v85 = 0;
                uint64_t v86 = *(void *)(v83 + 152);
                uint64_t v87 = v8[19];
                uint64_t v88 = **a5;
                uint64_t v89 = (void *)(v86 + 8 * v82);
                do
                {
                  *(_DWORD *)(v87 + 4 * v85) = *v89;
                  v89 += v88;
                  ++v85;
                }
                while (*v84 > (int)v85);
              }
              break;
            case 2:
              uint64_t v298 = *a4;
              int v299 = **a4;
              if (v299 >= 1)
              {
                int v300 = 0;
                uint64_t v301 = 0;
                uint64_t v302 = *(void *)(v83 + 152);
                uint64_t v303 = v8[19];
                uint64_t v304 = **a5;
                uint64_t v305 = (*a5)[1];
                int v306 = v298[1];
                do
                {
                  if (v306 >= 1)
                  {
                    uint64_t v307 = 0;
                    do
                    {
                      *(_DWORD *)(v303 + 4 * v301 + 4 * v307) = *(void *)(v302 + 8 * v82);
                      v82 += v305;
                      int v306 = v298[1];
                      ++v307;
                    }
                    while ((int)v307 < v306);
                    int v299 = *v298;
                    v301 += v307;
                  }
                  uint64_t result = v306;
                  uint64_t v82 = v82 + v304 - v305 * v306;
                  ++v300;
                }
                while (v300 < v299);
              }
              break;
            case 3:
              uint64_t v308 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v309 = 0;
                uint64_t v310 = 0;
                uint64_t v311 = *(void *)(v83 + 152);
                uint64_t v312 = v8[19];
                uint64_t v313 = *a5;
                uint64_t v314 = **a5;
                uint64_t v315 = (*a5)[1];
                int v316 = v308[1];
                do
                {
                  if (v316 >= 1)
                  {
                    int v317 = 0;
                    int v318 = *a5;
                    uint64_t v319 = v313[2];
                    int v320 = v308[2];
                    do
                    {
                      if (v320 >= 1)
                      {
                        uint64_t v321 = 0;
                        uint64_t v322 = v318[2];
                        do
                        {
                          *(_DWORD *)(v312 + 4 * v310 + 4 * v321) = *(void *)(v311 + 8 * v82);
                          v82 += v322;
                          int v320 = v308[2];
                          ++v321;
                        }
                        while ((int)v321 < v320);
                        int v316 = v308[1];
                        v310 += v321;
                      }
                      uint64_t v82 = v82 + v315 - v319 * v320;
                      ++v317;
                    }
                    while (v317 < v316);
                    uint64_t result = *v308;
                  }
                  uint64_t v82 = v82 + v314 - v315 * v316;
                  ++v309;
                }
                while (v309 < (int)result);
              }
              break;
            case 4:
              uint64_t v323 = *a4;
              int v324 = **a4;
              if (v324 >= 1)
              {
                int v325 = 0;
                uint64_t v326 = 0;
                uint64_t v327 = *(void *)(v83 + 152);
                uint64_t v328 = v8[19];
                unint64_t v329 = *a5;
                uint64_t v330 = **a5;
                uint64_t v331 = (*a5)[1];
                int v332 = v323[1];
                do
                {
                  if (v332 >= 1)
                  {
                    int v333 = 0;
                    uint64_t v334 = *a5;
                    uint64_t v335 = v329[2];
                    int v336 = v323[2];
                    do
                    {
                      if (v336 >= 1)
                      {
                        int v337 = 0;
                        uint64_t v338 = *a5;
                        uint64_t v339 = v334[2];
                        uint64_t v340 = v334[3];
                        int v341 = v323[3];
                        do
                        {
                          if (v341 >= 1)
                          {
                            uint64_t v342 = 0;
                            uint64_t v343 = v338[3];
                            do
                            {
                              *(_DWORD *)(v328 + 4 * v326 + 4 * v342) = *(void *)(v327 + 8 * v82);
                              v82 += v343;
                              int v341 = v323[3];
                              ++v342;
                            }
                            while ((int)v342 < v341);
                            int v336 = v323[2];
                            v326 += v342;
                          }
                          uint64_t v82 = v82 + v339 - v340 * v341;
                          ++v337;
                        }
                        while (v337 < v336);
                        int v332 = v323[1];
                      }
                      uint64_t v82 = v82 + v331 - v335 * v336;
                      ++v333;
                    }
                    while (v333 < v332);
                    int v324 = *v323;
                  }
                  uint64_t result = v332;
                  uint64_t v82 = v82 + v330 - v331 * v332;
                  ++v325;
                }
                while (v325 < v324);
              }
              break;
            default:
              uint64_t v288 = v8[6];
              if (v288)
              {
                uint64_t v289 = 0;
                uint64_t v290 = *(void *)(v83 + 152) + 8 * v82;
                uint64_t v291 = v8[19];
                ldiv_t v292 = *a4;
                uint64_t v293 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v294 = *a5;
                do
                {
                  uint64_t v295 = 0;
                  if ((v293 & 0x80000000) == 0)
                  {
                    uint64_t v296 = v293;
                    LODWORD(result) = v289;
                    do
                    {
                      ldiv_t v297 = ldiv((int)result, v292[v296]);
                      uint64_t result = v297.quot;
                      v295 += v294[v296--] * v297.rem;
                    }
                    while (v296 != -1);
                  }
                  *(_DWORD *)(v291 + 4 * v289++) = *(void *)(v290 + 8 * v295);
                }
                while (v289 != v288);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1437 = *a8;
          uint64_t v1443 = *a7;
          uint64_t v90 = *(void **)result;
          uint64_t v91 = v90[1] - *v90;
          switch(v91 >> 2)
          {
            case 1:
              uint64_t v92 = (v91 << 30) - 0x100000000;
              int v93 = *(int *)((char *)*a4 + (v92 >> 30));
              if (v93 >= 1)
              {
                uint64_t v94 = v92 >> 29;
                uint64_t v95 = *(uint64_t *)((char *)*a5 + v94);
                uint64_t v96 = *(void *)(*a6 + v94);
                uint64_t v97 = (_DWORD *)(v8[19] + 4 * v1437);
                uint64_t v98 = (void *)(v90[19] + 8 * v1443);
                uint64_t v99 = 4 * v96;
                uint64_t v100 = 8 * v95;
                do
                {
                  _DWORD *v97 = *v98;
                  uint64_t v97 = (_DWORD *)((char *)v97 + v99);
                  uint64_t v98 = (void *)((char *)v98 + v100);
                  --v93;
                }
                while (v93);
              }
              break;
            case 2:
              uint64_t v793 = (v91 << 30) - 0x200000000;
              uint64_t v794 = *a4;
              int v795 = *(int *)((char *)*a4 + (v793 >> 30));
              if (v795 >= 1)
              {
                int v796 = 0;
                uint64_t v797 = v793 >> 29;
                uint64_t v798 = *(uint64_t *)((char *)*a5 + v797);
                uint64_t v799 = *(void *)(*a6 + v797);
                uint64_t v800 = (v91 << 30) - 0x100000000;
                uint64_t v801 = *(uint64_t *)((char *)*a5 + (v800 >> 29));
                uint64_t v802 = *(void *)(*a6 + (v800 >> 29));
                uint64_t v803 = v800 >> 32;
                uint64_t v804 = 4 * v1437;
                uint64_t v805 = 4 * v799;
                uint64_t v806 = 4 * v802;
                uint64_t v807 = 8 * v1443;
                uint64_t v808 = 8 * v798;
                uint64_t result = 8 * v801;
                do
                {
                  int v809 = v794[v803];
                  if (v809 >= 1)
                  {
                    int v810 = (_DWORD *)(v8[19] + v804);
                    uint64_t v811 = (void *)(v90[19] + v807);
                    do
                    {
                      *int v810 = *v811;
                      int v810 = (_DWORD *)((char *)v810 + v806);
                      uint64_t v811 = (void *)((char *)v811 + result);
                      --v809;
                    }
                    while (v809);
                  }
                  ++v796;
                  v804 += v805;
                  v807 += v808;
                }
                while (v796 != v795);
              }
              break;
            case 3:
              uint64_t v812 = (v91 << 30) - 0x300000000;
              uint64_t v813 = *a4;
              int v814 = *(int *)((char *)*a4 + (v812 >> 30));
              if (v814 >= 1)
              {
                int v815 = 0;
                uint64_t v816 = *a5;
                uint64_t v817 = v812 >> 29;
                uint64_t v818 = *(uint64_t *)((char *)*a5 + (v812 >> 29));
                uint64_t v819 = *a6;
                uint64_t v820 = *(void *)(*a6 + v817);
                uint64_t v821 = v91 << 30;
                uint64_t v822 = (v91 << 30) - 0x200000000;
                uint64_t v823 = v822 >> 32;
                v822 >>= 29;
                uint64_t v824 = *(uint64_t *)((char *)*a5 + v822);
                uint64_t v825 = *(void *)(*a6 + v822);
                uint64_t v826 = (v821 - 0x100000000) >> 32;
                uint64_t v827 = 4 * v1437;
                uint64_t v828 = 4 * v820;
                uint64_t v829 = 4 * v825;
                uint64_t result = 8 * v1443;
                uint64_t v830 = 8 * v818;
                uint64_t v831 = 8 * v824;
                do
                {
                  int v832 = v813[v823];
                  if (v832 >= 1)
                  {
                    int v833 = 0;
                    int v834 = (void *)*a2;
                    uint64_t v835 = 4 * *(void *)(v819 + 8 * v826);
                    uint64_t v836 = 8 * v816[v826];
                    uint64_t v837 = result;
                    uint64_t v838 = v827;
                    do
                    {
                      int v839 = v813[v826];
                      if (v839 >= 1)
                      {
                        uint64_t v840 = (_DWORD *)(v834[19] + v838);
                        uint64_t v841 = (void *)(v90[19] + v837);
                        do
                        {
                          *uint64_t v840 = *v841;
                          uint64_t v840 = (_DWORD *)((char *)v840 + v835);
                          uint64_t v841 = (void *)((char *)v841 + v836);
                          --v839;
                        }
                        while (v839);
                      }
                      ++v833;
                      v838 += v829;
                      v837 += v831;
                    }
                    while (v833 != v832);
                  }
                  ++v815;
                  v827 += v828;
                  result += v830;
                }
                while (v815 != v814);
              }
              break;
            case 4:
              uint64_t v842 = (v91 << 30) - 0x400000000;
              uint64_t v843 = *a4;
              int v1589 = *(int *)((char *)*a4 + (v842 >> 30));
              if (v1589 >= 1)
              {
                int v844 = 0;
                uint64_t v845 = *a5;
                uint64_t v846 = v842 >> 29;
                uint64_t v847 = v91 << 30;
                uint64_t v848 = *a6;
                uint64_t v1571 = (v847 - 0x300000000) >> 32;
                uint64_t v849 = (v847 - 0x300000000) >> 29;
                uint64_t v850 = *(uint64_t *)((char *)*a5 + v849);
                uint64_t v851 = *(void *)(*a6 + v849);
                uint64_t v852 = (v847 - 0x200000000) >> 32;
                uint64_t v853 = (v847 - 0x100000000) >> 32;
                uint64_t v854 = 4 * v1437;
                uint64_t v1554 = 4 * *(void *)(*a6 + v846);
                uint64_t result = 4 * v851;
                uint64_t v855 = 8 * v1443;
                uint64_t v1538 = 8 * *(uint64_t *)((char *)*a5 + v846);
                uint64_t v856 = 8 * v850;
                do
                {
                  int v857 = v843[v1571];
                  if (v857 >= 1)
                  {
                    int v858 = 0;
                    uint64_t v859 = 4 * *(void *)(v848 + 8 * v852);
                    uint64_t v860 = 8 * v845[v852];
                    uint64_t v861 = v855;
                    uint64_t v862 = v854;
                    do
                    {
                      int v863 = v843[v852];
                      if (v863 >= 1)
                      {
                        int v864 = 0;
                        int v865 = (void *)*a2;
                        uint64_t v866 = 4 * *(void *)(v848 + 8 * v853);
                        uint64_t v867 = 8 * v845[v853];
                        uint64_t v868 = v861;
                        uint64_t v869 = v862;
                        do
                        {
                          int v870 = v843[v853];
                          if (v870 >= 1)
                          {
                            uint64_t v871 = (_DWORD *)(v865[19] + v869);
                            uint64_t v872 = (void *)(v90[19] + v868);
                            do
                            {
                              *uint64_t v871 = *v872;
                              uint64_t v871 = (_DWORD *)((char *)v871 + v866);
                              uint64_t v872 = (void *)((char *)v872 + v867);
                              --v870;
                            }
                            while (v870);
                          }
                          ++v864;
                          v869 += v859;
                          v868 += v860;
                        }
                        while (v864 != v863);
                      }
                      ++v858;
                      v862 += result;
                      v861 += v856;
                    }
                    while (v858 != v857);
                  }
                  ++v844;
                  v854 += v1554;
                  v855 += v1538;
                }
                while (v844 != v1589);
              }
              break;
            case 5:
              uint64_t v873 = (v91 << 30) - 0x500000000;
              uint64_t v874 = *a4;
              int v1491 = *(int *)((char *)*a4 + (v873 >> 30));
              if (v1491 >= 1)
              {
                int v1501 = 0;
                uint64_t v875 = *a5;
                uint64_t v876 = v873 >> 29;
                uint64_t v877 = *a6;
                uint64_t v878 = v91 << 30;
                uint64_t v879 = (v878 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v879);
                uint64_t v1481 = (v878 - 0x400000000) >> 32;
                uint64_t v880 = *(void *)(*a6 + v879);
                uint64_t v1572 = (v878 - 0x300000000) >> 32;
                uint64_t v881 = (v878 - 0x200000000) >> 32;
                uint64_t v882 = (v878 - 0x100000000) >> 32;
                uint64_t v1524 = 4 * v1437;
                uint64_t v1471 = 4 * *(void *)(*a6 + v876);
                uint64_t v1555 = 4 * v880;
                uint64_t v1512 = 8 * v1443;
                uint64_t v1461 = 8 * *(uint64_t *)((char *)*a5 + v876);
                uint64_t v1539 = 8 * result;
                do
                {
                  int v1590 = v874[v1481];
                  if (v1590 >= 1)
                  {
                    int v883 = 0;
                    uint64_t v884 = 4 * *(void *)(v877 + 8 * v1572);
                    uint64_t v885 = 8 * v875[v1572];
                    uint64_t v886 = v1512;
                    uint64_t v887 = v1524;
                    do
                    {
                      int v888 = v874[v1572];
                      if (v888 >= 1)
                      {
                        int v889 = 0;
                        uint64_t v890 = 4 * *(void *)(v877 + 8 * v881);
                        uint64_t v891 = 8 * v875[v881];
                        uint64_t v892 = v886;
                        uint64_t v893 = v887;
                        do
                        {
                          int v894 = v874[v881];
                          if (v894 >= 1)
                          {
                            int v895 = 0;
                            uint64_t result = *a2;
                            uint64_t v896 = 4 * *(void *)(v877 + 8 * v882);
                            uint64_t v897 = 8 * v875[v882];
                            uint64_t v898 = v892;
                            uint64_t v899 = v893;
                            do
                            {
                              int v900 = v874[v882];
                              if (v900 >= 1)
                              {
                                unint64_t v901 = (_DWORD *)(*(void *)(result + 152) + v899);
                                uint64_t v902 = (void *)(v90[19] + v898);
                                do
                                {
                                  *unint64_t v901 = *v902;
                                  unint64_t v901 = (_DWORD *)((char *)v901 + v896);
                                  uint64_t v902 = (void *)((char *)v902 + v897);
                                  --v900;
                                }
                                while (v900);
                              }
                              ++v895;
                              v899 += v890;
                              v898 += v891;
                            }
                            while (v895 != v894);
                          }
                          ++v889;
                          v893 += v884;
                          v892 += v885;
                        }
                        while (v889 != v888);
                      }
                      ++v883;
                      v887 += v1555;
                      v886 += v1539;
                    }
                    while (v883 != v1590);
                  }
                  v1524 += v1471;
                  v1512 += v1461;
                  ++v1501;
                }
                while (v1501 != v1491);
              }
              break;
            default:
              uint64_t v755 = (char *)a4[1];
              LODWORD(v756) = 1;
              uint64_t v757 = -20;
              do
              {
                uint64_t v756 = *(int *)&v755[v757] * (uint64_t)(int)v756;
                v757 += 4;
              }
              while (v757);
              unint64_t v1433 = v90[6];
              if (v1433)
              {
                uint64_t result = 0;
                uint64_t v758 = (v91 << 30) - 0x500000000;
                uint64_t v759 = *a4;
                uint64_t v1470 = *v8;
                uint64_t v760 = *a5;
                uint64_t v1418 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1423 = ((unint64_t)(v755 - (char *)*a4) >> 2) - 1;
                uint64_t v1413 = v758 >> 32;
                uint64_t v761 = *a6;
                uint64_t v1480 = ((v91 << 30) - 0x400000000) >> 32;
                uint64_t v1570 = ((v91 << 30) - 0x300000000) >> 32;
                uint64_t v762 = ((v91 << 30) - 0x200000000) >> 32;
                uint64_t v763 = ((v91 << 30) - 0x100000000) >> 32;
                uint64_t v1454 = 8 * *(uint64_t *)((char *)*a5 + (v758 >> 29));
                uint64_t v1460 = 4 * *(void *)(*a6 + (v758 >> 29));
                uint64_t v1428 = v756;
                do
                {
                  uint64_t v764 = v1423;
                  uint64_t v1449 = result;
                  uint64_t v765 = 0;
                  if ((v1423 & 0x80000000) != 0)
                  {
                    uint64_t v766 = v1418;
                  }
                  else
                  {
                    uint64_t v766 = v1418;
                    do
                    {
                      ldiv_t v767 = ldiv((int)result, v759[v764]);
                      LODWORD(result) = v767.quot;
                      v765 += v760[v764--] * v767.rem;
                    }
                    while (v764 != -1);
                  }
                  uint64_t v768 = 0;
                  if ((v766 & 0x80000000) == 0)
                  {
                    int v769 = v1449;
                    do
                    {
                      ldiv_t v770 = ldiv(v769, *(int *)(v1470 + 4 * v766));
                      int v769 = v770.quot;
                      v768 += *(void *)(v761 + 8 * v766--) * v770.rem;
                    }
                    while (v766 != -1);
                  }
                  int v1490 = v759[v1413];
                  if (v1490 >= 1)
                  {
                    int v771 = 0;
                    uint64_t v1523 = 4 * (v768 + v1437);
                    uint64_t v1553 = 4 * *(void *)(v761 + 8 * v1480);
                    uint64_t v1511 = 8 * (v765 + v1443);
                    uint64_t v1537 = 8 * v760[v1480];
                    do
                    {
                      int v1500 = v771;
                      int v1588 = v759[v1480];
                      if (v1588 >= 1)
                      {
                        int v772 = 0;
                        uint64_t v773 = 4 * *(void *)(v761 + 8 * v1570);
                        uint64_t v774 = 8 * v760[v1570];
                        uint64_t v776 = v1511;
                        uint64_t v775 = v1523;
                        do
                        {
                          int v777 = v759[v1570];
                          if (v777 >= 1)
                          {
                            int v778 = 0;
                            uint64_t v779 = 4 * *(void *)(v761 + 8 * v762);
                            uint64_t v780 = 8 * v760[v762];
                            uint64_t v781 = v776;
                            uint64_t v782 = v775;
                            do
                            {
                              int v783 = v759[v762];
                              if (v783 >= 1)
                              {
                                int v784 = 0;
                                int v785 = (void *)*a2;
                                uint64_t v786 = 4 * *(void *)(v761 + 8 * v763);
                                uint64_t v787 = 8 * v760[v763];
                                uint64_t v788 = v781;
                                uint64_t v789 = v782;
                                do
                                {
                                  int v790 = v759[v763];
                                  if (v790 >= 1)
                                  {
                                    int v791 = (_DWORD *)(v785[19] + v789);
                                    uint64_t v792 = (void *)(v90[19] + v788);
                                    do
                                    {
                                      *int v791 = *v792;
                                      int v791 = (_DWORD *)((char *)v791 + v786);
                                      uint64_t v792 = (void *)((char *)v792 + v787);
                                      --v790;
                                    }
                                    while (v790);
                                  }
                                  ++v784;
                                  v789 += v779;
                                  v788 += v780;
                                }
                                while (v784 != v783);
                              }
                              ++v778;
                              v782 += v773;
                              v781 += v774;
                            }
                            while (v778 != v777);
                          }
                          ++v772;
                          v775 += v1553;
                          v776 += v1537;
                        }
                        while (v772 != v1588);
                      }
                      int v771 = v1500 + 1;
                      v1523 += v1460;
                      v1511 += v1454;
                    }
                    while (v1500 + 1 != v1490);
                  }
                  uint64_t result = v1449 + v1428;
                }
                while (v1433 > v1449 + v1428);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            unint64_t v22 = 0;
            char v23 = **(unsigned char **)(*(void *)result + 152);
            uint64_t v24 = v8[19];
            do
              *(unsigned char *)(v24 + v22++) = v23;
            while (*(void *)(*a2 + 48) > v22);
          }
          break;
        case 1:
          uint64_t v101 = *(void *)(*(void *)result + 160);
          if (v101)
          {
            uint64_t v102 = *(uint64_t **)(*(void *)result + 152);
            int v103 = (unsigned char *)v8[19];
            uint64_t v104 = 8 * v101;
            do
            {
              uint64_t v105 = *v102++;
              *v103++ = v105;
              v104 -= 8;
            }
            while (v104);
          }
          break;
        case 2:
          uint64_t v106 = *a7;
          uint64_t v107 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v108 = 0;
                uint64_t v109 = *(void *)(v107 + 152);
                uint64_t v110 = v8[19];
                do
                {
                  *(unsigned char *)(v110 + v108) = *(void *)(v109 + 8 * v106);
                  v106 += **a5;
                  ++v108;
                }
                while (**a4 > (int)v108);
              }
              break;
            case 2:
              uint64_t v353 = *a4;
              int v354 = **a4;
              if (v354 >= 1)
              {
                int v355 = 0;
                uint64_t v356 = 0;
                uint64_t v357 = *(void *)(v107 + 152);
                uint64_t v358 = v8[19];
                do
                {
                  int v359 = v353[1];
                  if (v359 < 1)
                  {
                    uint64_t v360 = *a5;
                    uint64_t v361 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v358 + v356 + result) = *(void *)(v357 + 8 * v106);
                      uint64_t v360 = *a5;
                      uint64_t v361 = (*a5)[1];
                      v106 += v361;
                      uint64_t v353 = *a4;
                      int v359 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v359);
                    int v354 = *v353;
                    v356 += result;
                  }
                  uint64_t v106 = *v360 + v106 - v361 * v359;
                  ++v355;
                }
                while (v355 < v354);
              }
              break;
            case 3:
              uint64_t v362 = *a4;
              int v363 = **a4;
              if (v363 >= 1)
              {
                int v364 = 0;
                uint64_t v365 = 0;
                uint64_t v366 = *(void *)(v107 + 152);
                uint64_t v367 = v8[19];
                do
                {
                  int v368 = v362[1];
                  if (v368 < 1)
                  {
                    uint64_t v372 = *a5;
                    uint64_t v373 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v368; ++m)
                    {
                      int v370 = v362[2];
                      if (v370 < 1)
                      {
                        uint64_t v372 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v371 = 0;
                        do
                        {
                          *(unsigned char *)(v367 + v365 + v371) = *(void *)(v366 + 8 * v106);
                          uint64_t v372 = *a5;
                          uint64_t result = (*a5)[2];
                          v106 += result;
                          uint64_t v362 = *a4;
                          int v370 = (*a4)[2];
                          ++v371;
                        }
                        while ((int)v371 < v370);
                        v365 += v371;
                      }
                      uint64_t v373 = v372[1];
                      uint64_t v106 = v373 + v106 - result * v370;
                      int v368 = v362[1];
                    }
                    int v363 = *v362;
                  }
                  uint64_t v106 = *v372 + v106 - v373 * v368;
                  ++v364;
                }
                while (v364 < v363);
              }
              break;
            case 4:
              uint64_t v374 = *a4;
              int v375 = **a4;
              if (v375 >= 1)
              {
                int v376 = 0;
                uint64_t v377 = 0;
                uint64_t v378 = *(void *)(v107 + 152);
                uint64_t v379 = v8[19];
                do
                {
                  int v380 = v374[1];
                  if (v380 < 1)
                  {
                    uint64_t v386 = *a5;
                    uint64_t v388 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v380; ++n)
                    {
                      int v382 = v374[2];
                      if (v382 < 1)
                      {
                        uint64_t v386 = *a5;
                        uint64_t v387 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v382; ++ii)
                        {
                          int v384 = v374[3];
                          if (v384 < 1)
                          {
                            uint64_t v386 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v385 = 0;
                            do
                            {
                              *(unsigned char *)(v379 + v377 + v385) = *(void *)(v378 + 8 * v106);
                              uint64_t v386 = *a5;
                              uint64_t result = (*a5)[3];
                              v106 += result;
                              uint64_t v374 = *a4;
                              int v384 = (*a4)[3];
                              ++v385;
                            }
                            while ((int)v385 < v384);
                            v377 += v385;
                          }
                          uint64_t v387 = v386[2];
                          uint64_t v106 = v387 + v106 - result * v384;
                          int v382 = v374[2];
                        }
                      }
                      uint64_t v388 = v386[1];
                      uint64_t v106 = v388 + v106 - v387 * v382;
                      int v380 = v374[1];
                    }
                    int v375 = *v374;
                  }
                  uint64_t v106 = *v386 + v106 - v388 * v380;
                  ++v376;
                }
                while (v376 < v375);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v344 = 0;
                uint64_t v345 = *(void *)(v107 + 152) + 8 * v106;
                uint64_t v346 = v8[19];
                do
                {
                  ldiv_t v347 = *a4;
                  unint64_t v348 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v349 = 0;
                  uint64_t v350 = (v348 - 1);
                  if ((int)v348 - 1 >= 0)
                  {
                    uint64_t v351 = *a5;
                    LODWORD(result) = v344;
                    do
                    {
                      ldiv_t v352 = ldiv((int)result, v347[v350]);
                      uint64_t result = v352.quot;
                      v349 += v351[v350--] * v352.rem;
                    }
                    while (v350 != -1);
                  }
                  *(unsigned char *)(v346 + v344++) = *(void *)(v345 + 8 * v349);
                }
                while (v344 < *(void *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1584 = *a7;
          uint64_t v111 = *a8;
          uint64_t v112 = *(void **)result;
          uint64_t v113 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v113 >> 2)
          {
            case 1:
              uint64_t v114 = (v113 << 30) - 0x100000000;
              int v115 = *(int *)((char *)*a4 + (v114 >> 30));
              if (v115 >= 1)
              {
                uint64_t v116 = v114 >> 29;
                uint64_t v117 = *(uint64_t *)((char *)*a5 + v116);
                uint64_t v118 = *(void *)(*a6 + v116);
                uint64_t v119 = (unsigned char *)(v8[19] + v111);
                uint64_t v120 = (void *)(v112[19] + 8 * v1584);
                uint64_t v121 = 8 * v117;
                do
                {
                  *uint64_t v119 = *v120;
                  v119 += v118;
                  uint64_t v120 = (void *)((char *)v120 + v121);
                  --v115;
                }
                while (v115);
              }
              break;
            case 2:
              uint64_t v925 = (v113 << 30) - 0x200000000;
              int v926 = *(int *)((char *)*a4 + (v925 >> 30));
              if (v926 >= 1)
              {
                int v927 = 0;
                uint64_t v928 = v925 >> 29;
                uint64_t v929 = *(uint64_t *)((char *)*a5 + v928);
                uint64_t v930 = *(void *)(*a6 + v928);
                uint64_t v931 = 8 * v1584;
                uint64_t v932 = 8 * v929;
                do
                {
                  uint64_t v933 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v934 = *(int *)((char *)*a4 + (v933 >> 30));
                  if (v934 >= 1)
                  {
                    uint64_t v935 = v933 >> 29;
                    uint64_t v936 = *(uint64_t *)((char *)*a5 + v935);
                    uint64_t v937 = *(void *)(*a6 + v935);
                    uint64_t v938 = *(void *)(*a2 + 152);
                    uint64_t v939 = (void *)(*(void *)(*(void *)v12 + 152) + v931);
                    uint64_t result = 8 * v936;
                    do
                    {
                      *(unsigned char *)(v938 + v111) = *v939;
                      v938 += v937;
                      uint64_t v939 = (void *)((char *)v939 + result);
                      --v934;
                    }
                    while (v934);
                  }
                  v111 += v930;
                  ++v927;
                  v931 += v932;
                }
                while (v927 != v926);
              }
              break;
            case 3:
              uint64_t v940 = (v113 << 30) - 0x300000000;
              int v941 = *(int *)((char *)*a4 + (v940 >> 30));
              if (v941 >= 1)
              {
                int v942 = 0;
                uint64_t v943 = v940 >> 29;
                uint64_t v944 = *(uint64_t *)((char *)*a5 + v943);
                uint64_t v945 = *(void *)(*a6 + v943);
                uint64_t v946 = 8 * v1584;
                uint64_t v947 = 8 * v944;
                do
                {
                  uint64_t v948 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v949 = *(int *)((char *)*a4 + (v948 >> 30));
                  if (v949 >= 1)
                  {
                    int v950 = 0;
                    uint64_t v951 = v948 >> 29;
                    uint64_t v952 = *(uint64_t *)((char *)*a5 + v951);
                    uint64_t v953 = *(void *)(*a6 + v951);
                    uint64_t result = 8 * v952;
                    uint64_t v954 = v946;
                    uint64_t v955 = v111;
                    do
                    {
                      uint64_t v956 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v957 = *(int *)((char *)*a4 + (v956 >> 30));
                      if (v957 >= 1)
                      {
                        uint64_t v958 = v956 >> 29;
                        uint64_t v959 = *(uint64_t *)((char *)*a5 + v958);
                        uint64_t v960 = *(void *)(*a6 + v958);
                        uint64_t v961 = *(void *)(*a2 + 152);
                        uint64_t v962 = (void *)(*(void *)(*(void *)v12 + 152) + v954);
                        uint64_t v963 = 8 * v959;
                        do
                        {
                          *(unsigned char *)(v961 + v955) = *v962;
                          v961 += v960;
                          uint64_t v962 = (void *)((char *)v962 + v963);
                          --v957;
                        }
                        while (v957);
                      }
                      v955 += v953;
                      ++v950;
                      v954 += result;
                    }
                    while (v950 != v949);
                  }
                  v111 += v945;
                  ++v942;
                  v946 += v947;
                }
                while (v942 != v941);
              }
              break;
            case 4:
              uint64_t v745 = a4;
              int v746 = a5;
              uint64_t v747 = a6;
              uint64_t v748 = *a7;
              uint64_t v749 = *a8;
LABEL_562:
              break;
            case 5:
              uint64_t v964 = (v113 << 30) - 0x500000000;
              int v965 = *(int *)((char *)*a4 + (v964 >> 30));
              if (v965 >= 1)
              {
                uint64_t v966 = v964 >> 29;
                uint64_t v967 = *(uint64_t *)((char *)*a5 + v966);
                uint64_t v968 = *(void *)(*a6 + v966);
                do
                {
                  v1584 += v967;
                  v111 += v968;
                  --v965;
                }
                while (v965);
              }
              break;
            default:
              LODWORD(v903) = 1;
              uint64_t v904 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v903 = a4[1][v904++] * (uint64_t)(int)v903;
              while (v904 * 4);
              if (v112[6])
              {
                uint64_t result = 0;
                uint64_t v1513 = *a8;
                uint64_t v1525 = v903;
                do
                {
                  ldiv_t v905 = *a4;
                  unint64_t v906 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v907 = (v906 - 1);
                  uint64_t v1540 = v112;
                  uint64_t v1556 = result;
                  uint64_t v908 = 0;
                  if ((int)v906 - 1 >= 0)
                  {
                    uint64_t v909 = *a5;
                    do
                    {
                      ldiv_t v910 = ldiv((int)result, v905[v907]);
                      LODWORD(result) = v910.quot;
                      v908 += v909[v907--] * v910.rem;
                    }
                    while (v907 != -1);
                  }
                  uint64_t v911 = *(void *)*a2;
                  unint64_t v912 = (unint64_t)(*(void *)(*a2 + 8) - v911) >> 2;
                  uint64_t v913 = *a6;
                  uint64_t v914 = 0;
                  uint64_t v915 = (v912 - 1);
                  if ((int)v912 - 1 >= 0)
                  {
                    int v916 = v1556;
                    do
                    {
                      ldiv_t v917 = ldiv(v916, *(int *)(v911 + 4 * v915));
                      int v916 = v917.quot;
                      v914 += *(void *)(v913 + 8 * v915--) * v917.rem;
                    }
                    while (v915 != -1);
                  }
                  uint64_t v112 = v1540;
                  uint64_t v918 = ((v112[1] - *v112) << 30) - 0x500000000;
                  int v919 = *(int *)((char *)v905 + (v918 >> 30));
                  if (v919 >= 1)
                  {
                    uint64_t v920 = v908 + v1584;
                    uint64_t v921 = v918 >> 29;
                    uint64_t v922 = *(uint64_t *)((char *)*a5 + v921);
                    uint64_t v923 = *(void *)(v913 + v921);
                    uint64_t v924 = v914 + v1513;
                    do
                    {
                      v920 += v922;
                      v924 += v923;
                      --v919;
                    }
                    while (v919);
                    uint64_t v112 = *(void **)v12;
                  }
                  uint64_t result = v1556 + v1525;
                }
                while (v112[6] > (unint64_t)(v1556 + v1525));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v25 = v8[6];
          if (v25)
          {
            int v26 = **(_DWORD **)(*(void *)result + 152);
            int v27 = (_DWORD *)v8[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
          uint64_t v122 = *(void *)(*(void *)result + 160);
          if (v122)
          {
            uint64_t v123 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v124 = (_DWORD *)v8[19];
            uint64_t v125 = 8 * v122;
            do
            {
              uint64_t v126 = *v123++;
              *v124++ = v126;
              v125 -= 8;
            }
            while (v125);
          }
          break;
        case 2:
          uint64_t v127 = *a7;
          uint64_t v128 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v129 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v130 = 0;
                uint64_t v131 = *(void *)(v128 + 152);
                uint64_t v132 = v8[19];
                uint64_t v133 = **a5;
                uint64_t v134 = (void *)(v131 + 8 * v127);
                do
                {
                  *(_DWORD *)(v132 + 4 * v130) = *v134;
                  v134 += v133;
                  ++v130;
                }
                while (*v129 > (int)v130);
              }
              break;
            case 2:
              uint64_t v399 = *a4;
              int v400 = **a4;
              if (v400 >= 1)
              {
                int v401 = 0;
                uint64_t v402 = 0;
                uint64_t v403 = *(void *)(v128 + 152);
                uint64_t v404 = v8[19];
                uint64_t v405 = **a5;
                uint64_t v406 = (*a5)[1];
                int v407 = v399[1];
                do
                {
                  if (v407 >= 1)
                  {
                    uint64_t v408 = 0;
                    do
                    {
                      *(_DWORD *)(v404 + 4 * v402 + 4 * v408) = *(void *)(v403 + 8 * v127);
                      v127 += v406;
                      int v407 = v399[1];
                      ++v408;
                    }
                    while ((int)v408 < v407);
                    int v400 = *v399;
                    v402 += v408;
                  }
                  uint64_t result = v407;
                  uint64_t v127 = v127 + v405 - v406 * v407;
                  ++v401;
                }
                while (v401 < v400);
              }
              break;
            case 3:
              uint64_t v409 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v410 = 0;
                uint64_t v411 = 0;
                uint64_t v412 = *(void *)(v128 + 152);
                uint64_t v413 = v8[19];
                uint64_t v414 = *a5;
                uint64_t v415 = **a5;
                uint64_t v416 = (*a5)[1];
                int v417 = v409[1];
                do
                {
                  if (v417 >= 1)
                  {
                    int v418 = 0;
                    int v419 = *a5;
                    uint64_t v420 = v414[2];
                    int v421 = v409[2];
                    do
                    {
                      if (v421 >= 1)
                      {
                        uint64_t v422 = 0;
                        uint64_t v423 = v419[2];
                        do
                        {
                          *(_DWORD *)(v413 + 4 * v411 + 4 * v422) = *(void *)(v412 + 8 * v127);
                          v127 += v423;
                          int v421 = v409[2];
                          ++v422;
                        }
                        while ((int)v422 < v421);
                        int v417 = v409[1];
                        v411 += v422;
                      }
                      uint64_t v127 = v127 + v416 - v420 * v421;
                      ++v418;
                    }
                    while (v418 < v417);
                    uint64_t result = *v409;
                  }
                  uint64_t v127 = v127 + v415 - v416 * v417;
                  ++v410;
                }
                while (v410 < (int)result);
              }
              break;
            case 4:
              uint64_t v424 = *a4;
              int v425 = **a4;
              if (v425 >= 1)
              {
                int v426 = 0;
                uint64_t v427 = 0;
                uint64_t v428 = *(void *)(v128 + 152);
                uint64_t v429 = v8[19];
                uint64_t v430 = *a5;
                uint64_t v431 = **a5;
                uint64_t v432 = (*a5)[1];
                int v433 = v424[1];
                do
                {
                  if (v433 >= 1)
                  {
                    int v434 = 0;
                    uint64_t v435 = *a5;
                    uint64_t v436 = v430[2];
                    int v437 = v424[2];
                    do
                    {
                      if (v437 >= 1)
                      {
                        int v438 = 0;
                        uint64_t v439 = *a5;
                        uint64_t v440 = v435[2];
                        uint64_t v441 = v435[3];
                        int v442 = v424[3];
                        do
                        {
                          if (v442 >= 1)
                          {
                            uint64_t v443 = 0;
                            uint64_t v444 = v439[3];
                            do
                            {
                              *(_DWORD *)(v429 + 4 * v427 + 4 * v443) = *(void *)(v428 + 8 * v127);
                              v127 += v444;
                              int v442 = v424[3];
                              ++v443;
                            }
                            while ((int)v443 < v442);
                            int v437 = v424[2];
                            v427 += v443;
                          }
                          uint64_t v127 = v127 + v440 - v441 * v442;
                          ++v438;
                        }
                        while (v438 < v437);
                        int v433 = v424[1];
                      }
                      uint64_t v127 = v127 + v432 - v436 * v437;
                      ++v434;
                    }
                    while (v434 < v433);
                    int v425 = *v424;
                  }
                  uint64_t result = v433;
                  uint64_t v127 = v127 + v431 - v432 * v433;
                  ++v426;
                }
                while (v426 < v425);
              }
              break;
            default:
              uint64_t v389 = v8[6];
              if (v389)
              {
                uint64_t v390 = 0;
                uint64_t v391 = *(void *)(v128 + 152) + 8 * v127;
                uint64_t v392 = v8[19];
                ldiv_t v393 = *a4;
                uint64_t v394 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v395 = *a5;
                do
                {
                  uint64_t v396 = 0;
                  if ((v394 & 0x80000000) == 0)
                  {
                    uint64_t v397 = v394;
                    LODWORD(result) = v390;
                    do
                    {
                      ldiv_t v398 = ldiv((int)result, v393[v397]);
                      uint64_t result = v398.quot;
                      v396 += v395[v397--] * v398.rem;
                    }
                    while (v397 != -1);
                  }
                  *(_DWORD *)(v392 + 4 * v390++) = *(void *)(v391 + 8 * v396);
                }
                while (v390 != v389);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1438 = *a8;
          uint64_t v1444 = *a7;
          uint64_t v135 = *(void **)result;
          uint64_t v136 = v135[1] - *v135;
          switch(v136 >> 2)
          {
            case 1:
              uint64_t v137 = (v136 << 30) - 0x100000000;
              int v138 = *(int *)((char *)*a4 + (v137 >> 30));
              if (v138 >= 1)
              {
                uint64_t v139 = v137 >> 29;
                uint64_t v140 = *(uint64_t *)((char *)*a5 + v139);
                uint64_t v141 = *(void *)(*a6 + v139);
                uint64_t v142 = (_DWORD *)(v8[19] + 4 * v1438);
                uint64_t v143 = (void *)(v135[19] + 8 * v1444);
                uint64_t v144 = 4 * v141;
                uint64_t v145 = 8 * v140;
                do
                {
                  *uint64_t v142 = *v143;
                  uint64_t v142 = (_DWORD *)((char *)v142 + v144);
                  uint64_t v143 = (void *)((char *)v143 + v145);
                  --v138;
                }
                while (v138);
              }
              break;
            case 2:
              uint64_t v1007 = (v136 << 30) - 0x200000000;
              uint64_t v1008 = *a4;
              int v1009 = *(int *)((char *)*a4 + (v1007 >> 30));
              if (v1009 >= 1)
              {
                int v1010 = 0;
                uint64_t v1011 = v1007 >> 29;
                uint64_t v1012 = *(uint64_t *)((char *)*a5 + v1011);
                uint64_t v1013 = *(void *)(*a6 + v1011);
                uint64_t v1014 = (v136 << 30) - 0x100000000;
                uint64_t v1015 = *(uint64_t *)((char *)*a5 + (v1014 >> 29));
                uint64_t v1016 = *(void *)(*a6 + (v1014 >> 29));
                uint64_t v1017 = v1014 >> 32;
                uint64_t v1018 = 4 * v1438;
                uint64_t v1019 = 4 * v1013;
                uint64_t v1020 = 4 * v1016;
                uint64_t v1021 = 8 * v1444;
                uint64_t v1022 = 8 * v1012;
                uint64_t result = 8 * v1015;
                do
                {
                  int v1023 = v1008[v1017];
                  if (v1023 >= 1)
                  {
                    int v1024 = (_DWORD *)(v8[19] + v1018);
                    uint64_t v1025 = (void *)(v135[19] + v1021);
                    do
                    {
                      *int v1024 = *v1025;
                      int v1024 = (_DWORD *)((char *)v1024 + v1020);
                      uint64_t v1025 = (void *)((char *)v1025 + result);
                      --v1023;
                    }
                    while (v1023);
                  }
                  ++v1010;
                  v1018 += v1019;
                  v1021 += v1022;
                }
                while (v1010 != v1009);
              }
              break;
            case 3:
              uint64_t v1026 = (v136 << 30) - 0x300000000;
              uint64_t v1027 = *a4;
              int v1028 = *(int *)((char *)*a4 + (v1026 >> 30));
              if (v1028 >= 1)
              {
                int v1029 = 0;
                uint64_t v1030 = *a5;
                uint64_t v1031 = v1026 >> 29;
                uint64_t v1032 = *(uint64_t *)((char *)*a5 + (v1026 >> 29));
                uint64_t v1033 = *a6;
                uint64_t v1034 = *(void *)(*a6 + v1031);
                uint64_t v1035 = v136 << 30;
                uint64_t v1036 = (v136 << 30) - 0x200000000;
                uint64_t v1037 = v1036 >> 32;
                v1036 >>= 29;
                uint64_t v1038 = *(uint64_t *)((char *)*a5 + v1036);
                uint64_t v1039 = *(void *)(*a6 + v1036);
                uint64_t v1040 = (v1035 - 0x100000000) >> 32;
                uint64_t v1041 = 4 * v1438;
                uint64_t v1042 = 4 * v1034;
                uint64_t v1043 = 4 * v1039;
                uint64_t result = 8 * v1444;
                uint64_t v1044 = 8 * v1032;
                uint64_t v1045 = 8 * v1038;
                do
                {
                  int v1046 = v1027[v1037];
                  if (v1046 >= 1)
                  {
                    int v1047 = 0;
                    int v1048 = (void *)*a2;
                    uint64_t v1049 = 4 * *(void *)(v1033 + 8 * v1040);
                    uint64_t v1050 = 8 * v1030[v1040];
                    uint64_t v1051 = result;
                    uint64_t v1052 = v1041;
                    do
                    {
                      int v1053 = v1027[v1040];
                      if (v1053 >= 1)
                      {
                        uint64_t v1054 = (_DWORD *)(v1048[19] + v1052);
                        uint64_t v1055 = (void *)(v135[19] + v1051);
                        do
                        {
                          *uint64_t v1054 = *v1055;
                          uint64_t v1054 = (_DWORD *)((char *)v1054 + v1049);
                          uint64_t v1055 = (void *)((char *)v1055 + v1050);
                          --v1053;
                        }
                        while (v1053);
                      }
                      ++v1047;
                      v1052 += v1043;
                      v1051 += v1045;
                    }
                    while (v1047 != v1046);
                  }
                  ++v1029;
                  v1041 += v1042;
                  result += v1044;
                }
                while (v1029 != v1028);
              }
              break;
            case 4:
              uint64_t v1056 = (v136 << 30) - 0x400000000;
              uint64_t v1057 = *a4;
              int v1592 = *(int *)((char *)*a4 + (v1056 >> 30));
              if (v1592 >= 1)
              {
                int v1058 = 0;
                uint64_t v1059 = *a5;
                uint64_t v1060 = v1056 >> 29;
                uint64_t v1061 = v136 << 30;
                uint64_t v1062 = *a6;
                uint64_t v1574 = (v1061 - 0x300000000) >> 32;
                uint64_t v1063 = (v1061 - 0x300000000) >> 29;
                uint64_t v1064 = *(uint64_t *)((char *)*a5 + v1063);
                uint64_t v1065 = *(void *)(*a6 + v1063);
                uint64_t v1066 = (v1061 - 0x200000000) >> 32;
                uint64_t v1067 = (v1061 - 0x100000000) >> 32;
                uint64_t v1068 = 4 * v1438;
                uint64_t v1558 = 4 * *(void *)(*a6 + v1060);
                uint64_t result = 4 * v1065;
                uint64_t v1069 = 8 * v1444;
                uint64_t v1542 = 8 * *(uint64_t *)((char *)*a5 + v1060);
                uint64_t v1070 = 8 * v1064;
                do
                {
                  int v1071 = v1057[v1574];
                  if (v1071 >= 1)
                  {
                    int v1072 = 0;
                    uint64_t v1073 = 4 * *(void *)(v1062 + 8 * v1066);
                    uint64_t v1074 = 8 * v1059[v1066];
                    uint64_t v1075 = v1069;
                    uint64_t v1076 = v1068;
                    do
                    {
                      int v1077 = v1057[v1066];
                      if (v1077 >= 1)
                      {
                        int v1078 = 0;
                        int v1079 = (void *)*a2;
                        uint64_t v1080 = 4 * *(void *)(v1062 + 8 * v1067);
                        uint64_t v1081 = 8 * v1059[v1067];
                        uint64_t v1082 = v1075;
                        uint64_t v1083 = v1076;
                        do
                        {
                          int v1084 = v1057[v1067];
                          if (v1084 >= 1)
                          {
                            uint64_t v1085 = (_DWORD *)(v1079[19] + v1083);
                            uint64_t v1086 = (void *)(v135[19] + v1082);
                            do
                            {
                              *uint64_t v1085 = *v1086;
                              uint64_t v1085 = (_DWORD *)((char *)v1085 + v1080);
                              uint64_t v1086 = (void *)((char *)v1086 + v1081);
                              --v1084;
                            }
                            while (v1084);
                          }
                          ++v1078;
                          v1083 += v1073;
                          v1082 += v1074;
                        }
                        while (v1078 != v1077);
                      }
                      ++v1072;
                      v1076 += result;
                      v1075 += v1070;
                    }
                    while (v1072 != v1071);
                  }
                  ++v1058;
                  v1068 += v1558;
                  v1069 += v1542;
                }
                while (v1058 != v1592);
              }
              break;
            case 5:
              uint64_t v1087 = (v136 << 30) - 0x500000000;
              uint64_t v1088 = *a4;
              int v1493 = *(int *)((char *)*a4 + (v1087 >> 30));
              if (v1493 >= 1)
              {
                int v1503 = 0;
                uint64_t v1089 = *a5;
                uint64_t v1090 = v1087 >> 29;
                uint64_t v1091 = *a6;
                uint64_t v1092 = v136 << 30;
                uint64_t v1093 = (v1092 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1093);
                uint64_t v1483 = (v1092 - 0x400000000) >> 32;
                uint64_t v1094 = *(void *)(*a6 + v1093);
                uint64_t v1575 = (v1092 - 0x300000000) >> 32;
                uint64_t v1095 = (v1092 - 0x200000000) >> 32;
                uint64_t v1096 = (v1092 - 0x100000000) >> 32;
                uint64_t v1527 = 4 * v1438;
                uint64_t v1473 = 4 * *(void *)(*a6 + v1090);
                uint64_t v1559 = 4 * v1094;
                uint64_t v1515 = 8 * v1444;
                uint64_t v1463 = 8 * *(uint64_t *)((char *)*a5 + v1090);
                uint64_t v1543 = 8 * result;
                do
                {
                  int v1593 = v1088[v1483];
                  if (v1593 >= 1)
                  {
                    int v1097 = 0;
                    uint64_t v1098 = 4 * *(void *)(v1091 + 8 * v1575);
                    uint64_t v1099 = 8 * v1089[v1575];
                    uint64_t v1100 = v1515;
                    uint64_t v1101 = v1527;
                    do
                    {
                      int v1102 = v1088[v1575];
                      if (v1102 >= 1)
                      {
                        int v1103 = 0;
                        uint64_t v1104 = 4 * *(void *)(v1091 + 8 * v1095);
                        uint64_t v1105 = 8 * v1089[v1095];
                        uint64_t v1106 = v1100;
                        uint64_t v1107 = v1101;
                        do
                        {
                          int v1108 = v1088[v1095];
                          if (v1108 >= 1)
                          {
                            int v1109 = 0;
                            uint64_t result = *a2;
                            uint64_t v1110 = 4 * *(void *)(v1091 + 8 * v1096);
                            uint64_t v1111 = 8 * v1089[v1096];
                            uint64_t v1112 = v1106;
                            uint64_t v1113 = v1107;
                            do
                            {
                              int v1114 = v1088[v1096];
                              if (v1114 >= 1)
                              {
                                uint64_t v1115 = (_DWORD *)(*(void *)(result + 152) + v1113);
                                uint64_t v1116 = (void *)(v135[19] + v1112);
                                do
                                {
                                  *uint64_t v1115 = *v1116;
                                  uint64_t v1115 = (_DWORD *)((char *)v1115 + v1110);
                                  uint64_t v1116 = (void *)((char *)v1116 + v1111);
                                  --v1114;
                                }
                                while (v1114);
                              }
                              ++v1109;
                              v1113 += v1104;
                              v1112 += v1105;
                            }
                            while (v1109 != v1108);
                          }
                          ++v1103;
                          v1107 += v1098;
                          v1106 += v1099;
                        }
                        while (v1103 != v1102);
                      }
                      ++v1097;
                      v1101 += v1559;
                      v1100 += v1543;
                    }
                    while (v1097 != v1593);
                  }
                  v1527 += v1473;
                  v1515 += v1463;
                  ++v1503;
                }
                while (v1503 != v1493);
              }
              break;
            default:
              uint64_t v969 = (char *)a4[1];
              LODWORD(v970) = 1;
              uint64_t v971 = -20;
              do
              {
                uint64_t v970 = *(int *)&v969[v971] * (uint64_t)(int)v970;
                v971 += 4;
              }
              while (v971);
              unint64_t v1434 = v135[6];
              if (v1434)
              {
                uint64_t result = 0;
                uint64_t v972 = (v136 << 30) - 0x500000000;
                uint64_t v973 = *a4;
                uint64_t v1472 = *v8;
                uint64_t v974 = *a5;
                uint64_t v1419 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1424 = ((unint64_t)(v969 - (char *)*a4) >> 2) - 1;
                uint64_t v1414 = v972 >> 32;
                uint64_t v975 = *a6;
                uint64_t v1482 = ((v136 << 30) - 0x400000000) >> 32;
                uint64_t v1573 = ((v136 << 30) - 0x300000000) >> 32;
                uint64_t v976 = ((v136 << 30) - 0x200000000) >> 32;
                uint64_t v977 = ((v136 << 30) - 0x100000000) >> 32;
                uint64_t v1455 = 8 * *(uint64_t *)((char *)*a5 + (v972 >> 29));
                uint64_t v1462 = 4 * *(void *)(*a6 + (v972 >> 29));
                uint64_t v1429 = v970;
                do
                {
                  uint64_t v978 = v1424;
                  uint64_t v1450 = result;
                  uint64_t v979 = 0;
                  if ((v1424 & 0x80000000) != 0)
                  {
                    uint64_t v980 = v1419;
                  }
                  else
                  {
                    uint64_t v980 = v1419;
                    do
                    {
                      ldiv_t v981 = ldiv((int)result, v973[v978]);
                      LODWORD(result) = v981.quot;
                      v979 += v974[v978--] * v981.rem;
                    }
                    while (v978 != -1);
                  }
                  uint64_t v982 = 0;
                  if ((v980 & 0x80000000) == 0)
                  {
                    int v983 = v1450;
                    do
                    {
                      ldiv_t v984 = ldiv(v983, *(int *)(v1472 + 4 * v980));
                      int v983 = v984.quot;
                      v982 += *(void *)(v975 + 8 * v980--) * v984.rem;
                    }
                    while (v980 != -1);
                  }
                  int v1492 = v973[v1414];
                  if (v1492 >= 1)
                  {
                    int v985 = 0;
                    uint64_t v1526 = 4 * (v982 + v1438);
                    uint64_t v1557 = 4 * *(void *)(v975 + 8 * v1482);
                    uint64_t v1514 = 8 * (v979 + v1444);
                    uint64_t v1541 = 8 * v974[v1482];
                    do
                    {
                      int v1502 = v985;
                      int v1591 = v973[v1482];
                      if (v1591 >= 1)
                      {
                        int v986 = 0;
                        uint64_t v987 = 4 * *(void *)(v975 + 8 * v1573);
                        uint64_t v988 = 8 * v974[v1573];
                        uint64_t v990 = v1514;
                        uint64_t v989 = v1526;
                        do
                        {
                          int v991 = v973[v1573];
                          if (v991 >= 1)
                          {
                            int v992 = 0;
                            uint64_t v993 = 4 * *(void *)(v975 + 8 * v976);
                            uint64_t v994 = 8 * v974[v976];
                            uint64_t v995 = v990;
                            uint64_t v996 = v989;
                            do
                            {
                              int v997 = v973[v976];
                              if (v997 >= 1)
                              {
                                int v998 = 0;
                                int v999 = (void *)*a2;
                                uint64_t v1000 = 4 * *(void *)(v975 + 8 * v977);
                                uint64_t v1001 = 8 * v974[v977];
                                uint64_t v1002 = v995;
                                uint64_t v1003 = v996;
                                do
                                {
                                  int v1004 = v973[v977];
                                  if (v1004 >= 1)
                                  {
                                    int v1005 = (_DWORD *)(v999[19] + v1003);
                                    uint64_t v1006 = (void *)(v135[19] + v1002);
                                    do
                                    {
                                      _DWORD *v1005 = *v1006;
                                      int v1005 = (_DWORD *)((char *)v1005 + v1000);
                                      uint64_t v1006 = (void *)((char *)v1006 + v1001);
                                      --v1004;
                                    }
                                    while (v1004);
                                  }
                                  ++v998;
                                  v1003 += v993;
                                  v1002 += v994;
                                }
                                while (v998 != v997);
                              }
                              ++v992;
                              v996 += v987;
                              v995 += v988;
                            }
                            while (v992 != v991);
                          }
                          ++v986;
                          v989 += v1557;
                          v990 += v1541;
                        }
                        while (v986 != v1591);
                      }
                      int v985 = v1502 + 1;
                      v1526 += v1462;
                      v1514 += v1455;
                    }
                    while (v1502 + 1 != v1492);
                  }
                  uint64_t result = v1450 + v1429;
                }
                while (v1434 > v1450 + v1429);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v28 = v8[6];
          if (v28)
          {
            uint64_t v29 = **(void **)(*(void *)result + 152);
            uint64_t v30 = (void *)v8[19];
            do
            {
              *v30++ = v29;
              --v28;
            }
            while (v28);
          }
          break;
        case 1:
          uint64_t v146 = *(void *)(*(void *)result + 160);
          if (v146)
          {
            uint64_t v147 = *(const void **)(*(void *)result + 152);
            uint64_t v148 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v148, v147, 8 * v146);
          }
          break;
        case 2:
          uint64_t v149 = *a7;
          uint64_t v150 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v151 = **a4;
              if ((int)v151 >= 1)
              {
                uint64_t v152 = *(void *)(v150 + 152);
                int v153 = (void *)v8[19];
                uint64_t v154 = *a5;
                do
                {
                  *v153++ = *(void *)(v152 + 8 * v149);
                  v149 += *v154;
                  --v151;
                }
                while (v151);
              }
              break;
            case 2:
              int v455 = **a4;
              if (v455 >= 1)
              {
                int v456 = 0;
                uint64_t v457 = 0;
                uint64_t v458 = *(void *)(v150 + 152);
                uint64_t v459 = v8[19];
                int v460 = (*a4)[1];
                int v461 = *a5;
                do
                {
                  if (v460 <= 0)
                  {
                    uint64_t v463 = v461[1];
                  }
                  else
                  {
                    int v462 = v460;
                    do
                    {
                      *(void *)(v459 + 8 * v457++) = *(void *)(v458 + 8 * v149);
                      uint64_t v463 = v461[1];
                      v149 += v463;
                      --v462;
                    }
                    while (v462);
                  }
                  uint64_t result = *v461;
                  uint64_t v149 = v149 - v463 * v460 + *v461;
                  ++v456;
                }
                while (v456 != v455);
              }
              break;
            case 3:
              uint64_t v464 = *a4;
              int v465 = **a4;
              if (v465 >= 1)
              {
                int v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = *(void *)(v150 + 152);
                uint64_t v469 = v8[19];
                uint64_t v470 = v464[1];
                int v471 = *a5;
                do
                {
                  if ((int)v470 <= 0)
                  {
                    uint64_t v475 = v471[1];
                  }
                  else
                  {
                    int v472 = 0;
                    uint64_t result = v464[2];
                    int v473 = *a5;
                    do
                    {
                      int v474 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v469 + 8 * v467++) = *(void *)(v468 + 8 * v149);
                          v149 += v473[2];
                          --v474;
                        }
                        while (v474);
                      }
                      uint64_t v475 = v471[1];
                      uint64_t v149 = v475 + v149 - v471[2] * (int)result;
                      ++v472;
                    }
                    while (v472 != v470);
                  }
                  uint64_t v149 = v149 - v475 * v470 + *v471;
                  ++v466;
                }
                while (v466 != v465);
              }
              break;
            case 4:
              uint64_t v476 = *a4;
              int v477 = **a4;
              if (v477 >= 1)
              {
                int v478 = 0;
                uint64_t v479 = 0;
                uint64_t v480 = *(void *)(v150 + 152);
                uint64_t v481 = v8[19];
                uint64_t v482 = v476[1];
                uint64_t v483 = *a5;
                do
                {
                  if ((int)v482 <= 0)
                  {
                    uint64_t v490 = v483[1];
                  }
                  else
                  {
                    int v484 = 0;
                    uint64_t result = v476[2];
                    uint64_t v485 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v486 = 0;
                        int v487 = v476[3];
                        uint64_t v488 = *a5;
                        do
                        {
                          int v489 = v487;
                          if (v487 >= 1)
                          {
                            do
                            {
                              *(void *)(v481 + 8 * v479++) = *(void *)(v480 + 8 * v149);
                              v149 += v488[3];
                              --v489;
                            }
                            while (v489);
                          }
                          uint64_t v149 = v485[2] + v149 - v485[3] * v487;
                          ++v486;
                        }
                        while (v486 != result);
                      }
                      uint64_t v490 = v483[1];
                      uint64_t v149 = v490 + v149 - v483[2] * result;
                      ++v484;
                    }
                    while (v484 != v482);
                  }
                  uint64_t v149 = v149 - v490 * v482 + *v483;
                  ++v478;
                }
                while (v478 != v477);
              }
              break;
            default:
              uint64_t v445 = v8[6];
              if (v445)
              {
                uint64_t v446 = 0;
                uint64_t v447 = *(void *)(v150 + 152) + 8 * v149;
                uint64_t v448 = v8[19];
                ldiv_t v449 = *a4;
                uint64_t v450 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v451 = *a5;
                do
                {
                  uint64_t v452 = 0;
                  if ((v450 & 0x80000000) == 0)
                  {
                    uint64_t v453 = v450;
                    LODWORD(result) = v446;
                    do
                    {
                      ldiv_t v454 = ldiv((int)result, v449[v453]);
                      uint64_t result = v454.quot;
                      v452 += v451[v453--] * v454.rem;
                    }
                    while (v453 != -1);
                  }
                  *(void *)(v448 + 8 * v446++) = *(void *)(v447 + 8 * v452);
                }
                while (v446 != v445);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1439 = *a8;
          uint64_t v1445 = *a7;
          uint64_t v155 = *(void **)result;
          uint64_t v156 = v155[1] - *v155;
          switch(v156 >> 2)
          {
            case 1:
              uint64_t v157 = (v156 << 30) - 0x100000000;
              int v158 = *(int *)((char *)*a4 + (v157 >> 30));
              if (v158 >= 1)
              {
                uint64_t v159 = v157 >> 29;
                uint64_t v160 = *(uint64_t *)((char *)*a5 + v159);
                uint64_t v161 = *(void *)(*a6 + v159);
                uint64_t v162 = (void *)(v8[19] + 8 * v1439);
                uint64_t v163 = (void *)(v155[19] + 8 * v1445);
                uint64_t v164 = 8 * v161;
                uint64_t v165 = 8 * v160;
                do
                {
                  *uint64_t v162 = *v163;
                  uint64_t v162 = (void *)((char *)v162 + v164);
                  uint64_t v163 = (void *)((char *)v163 + v165);
                  --v158;
                }
                while (v158);
              }
              break;
            case 2:
              uint64_t v1155 = (v156 << 30) - 0x200000000;
              int v1156 = *(int *)((char *)*a4 + (v1155 >> 30));
              if (v1156 >= 1)
              {
                int v1157 = 0;
                uint64_t v1158 = v156 << 30;
                uint64_t v1159 = *a5;
                v1158 -= 0x100000000;
                int v1160 = *(int *)((char *)*a4 + (v1158 >> 30));
                uint64_t v1161 = v1155 >> 29;
                uint64_t v1162 = *(uint64_t *)((char *)*a5 + (v1155 >> 29));
                uint64_t v1163 = *a6;
                uint64_t v1164 = *(void *)(*a6 + v1161);
                uint64_t v1165 = v1158 >> 32;
                uint64_t v1166 = 8 * v1439;
                uint64_t v1167 = 8 * v1164;
                uint64_t v1168 = 8 * v1445;
                uint64_t result = 8 * v1162;
                do
                {
                  if (v1160 >= 1)
                  {
                    uint64_t v1169 = (void *)(v8[19] + v1166);
                    uint64_t v1170 = 8 * *(void *)(v1163 + 8 * v1165);
                    int v1171 = (void *)(v155[19] + v1168);
                    uint64_t v1172 = 8 * v1159[v1165];
                    int v1173 = v1160;
                    do
                    {
                      void *v1169 = *v1171;
                      uint64_t v1169 = (void *)((char *)v1169 + v1170);
                      int v1171 = (void *)((char *)v1171 + v1172);
                      --v1173;
                    }
                    while (v1173);
                  }
                  ++v1157;
                  v1166 += v1167;
                  v1168 += result;
                }
                while (v1157 != v1156);
              }
              break;
            case 3:
              uint64_t v1174 = (v156 << 30) - 0x300000000;
              uint64_t v1175 = *a4;
              int v1176 = *(int *)((char *)*a4 + (v1174 >> 30));
              if (v1176 >= 1)
              {
                int v1177 = 0;
                uint64_t v1178 = v156 << 30;
                uint64_t v1179 = *a5;
                uint64_t v1180 = v1174 >> 29;
                uint64_t v1181 = *(uint64_t *)((char *)*a5 + (v1174 >> 29));
                uint64_t v1182 = *a6;
                uint64_t v1183 = *(void *)(*a6 + v1180);
                uint64_t v1184 = v1178 - 0x200000000;
                uint64_t v1185 = v1178 - 0x100000000;
                int v1186 = *(int *)((char *)v1175 + ((v1178 - 0x200000000) >> 30));
                uint64_t v1187 = v1184 >> 32;
                uint64_t v1188 = v1185 >> 32;
                uint64_t v1189 = 8 * v1439;
                uint64_t v1190 = 8 * v1183;
                uint64_t result = 8 * v1445;
                uint64_t v1191 = 8 * v1181;
                do
                {
                  if (v1186 >= 1)
                  {
                    int v1192 = 0;
                    int v1193 = v1175[v1188];
                    uint64_t v1194 = (void *)*a2;
                    uint64_t v1195 = 8 * *(void *)(v1182 + 8 * v1187);
                    uint64_t v1196 = 8 * v1179[v1187];
                    uint64_t v1197 = result;
                    uint64_t v1198 = v1189;
                    do
                    {
                      if (v1193 >= 1)
                      {
                        uint64_t v1199 = (void *)(v1194[19] + v1198);
                        uint64_t v1200 = 8 * *(void *)(v1182 + 8 * v1188);
                        uint64_t v1201 = (void *)(v155[19] + v1197);
                        uint64_t v1202 = 8 * v1179[v1188];
                        int v1203 = v1193;
                        do
                        {
                          void *v1199 = *v1201;
                          uint64_t v1199 = (void *)((char *)v1199 + v1200);
                          uint64_t v1201 = (void *)((char *)v1201 + v1202);
                          --v1203;
                        }
                        while (v1203);
                      }
                      ++v1192;
                      v1198 += v1195;
                      v1197 += v1196;
                    }
                    while (v1192 != v1186);
                  }
                  ++v1177;
                  v1189 += v1190;
                  result += v1191;
                }
                while (v1177 != v1176);
              }
              break;
            case 4:
              uint64_t v1204 = (v156 << 30) - 0x400000000;
              int v1205 = *a4;
              int v1561 = *(int *)((char *)*a4 + (v1204 >> 30));
              if (v1561 >= 1)
              {
                int v1594 = 0;
                uint64_t v1206 = v156 << 30;
                uint64_t v1207 = *a5;
                uint64_t v1208 = v1204 >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1208);
                uint64_t v1209 = *a6;
                uint64_t v1529 = (v1206 - 0x300000000) >> 32;
                int v1210 = *(int *)((char *)v1205 + ((v1206 - 0x300000000) >> 30));
                uint64_t v1211 = (v1206 - 0x200000000) >> 32;
                uint64_t v1212 = (v1206 - 0x100000000) >> 32;
                uint64_t v1213 = 8 * v1439;
                uint64_t v1577 = 8 * *(void *)(*a6 + v1208);
                uint64_t v1214 = 8 * v1445;
                uint64_t v1545 = 8 * result;
                do
                {
                  if (v1210 >= 1)
                  {
                    int v1215 = 0;
                    int v1216 = v1205[v1211];
                    uint64_t v1217 = 8 * *(void *)(v1209 + 8 * v1529);
                    uint64_t v1218 = 8 * v1207[v1529];
                    uint64_t v1219 = v1214;
                    uint64_t v1220 = v1213;
                    do
                    {
                      if (v1216 >= 1)
                      {
                        int v1221 = 0;
                        uint64_t result = *(void *)(v1209 + 8 * v1211);
                        int v1222 = v1205[v1212];
                        uint64_t v1223 = (void *)*a2;
                        uint64_t v1224 = 8 * result;
                        uint64_t v1225 = 8 * v1207[v1211];
                        uint64_t v1226 = v1219;
                        uint64_t v1227 = v1220;
                        do
                        {
                          if (v1222 >= 1)
                          {
                            int v1228 = (void *)(v1223[19] + v1227);
                            uint64_t v1229 = 8 * *(void *)(v1209 + 8 * v1212);
                            uint64_t result = v155[19] + v1226;
                            uint64_t v1230 = 8 * v1207[v1212];
                            int v1231 = v1222;
                            do
                            {
                              void *v1228 = *(void *)result;
                              int v1228 = (void *)((char *)v1228 + v1229);
                              result += v1230;
                              --v1231;
                            }
                            while (v1231);
                          }
                          ++v1221;
                          v1227 += v1224;
                          v1226 += v1225;
                        }
                        while (v1221 != v1216);
                      }
                      ++v1215;
                      v1220 += v1217;
                      v1219 += v1218;
                    }
                    while (v1215 != v1210);
                  }
                  v1213 += v1577;
                  v1214 += v1545;
                  ++v1594;
                }
                while (v1594 != v1561);
              }
              break;
            case 5:
              uint64_t v1232 = (v156 << 30) - 0x500000000;
              uint64_t v1233 = *a4;
              int v1485 = *(int *)((char *)*a4 + (v1232 >> 30));
              if (v1485 >= 1)
              {
                int v1495 = 0;
                uint64_t v1234 = v156 << 30;
                int v1235 = *a5;
                uint64_t v1236 = v1232 >> 29;
                uint64_t v1237 = *a6;
                uint64_t v1457 = (v1234 - 0x400000000) >> 32;
                int v1578 = *(int *)((char *)v1233 + ((v1234 - 0x400000000) >> 30));
                uint64_t v1238 = (v1234 - 0x200000000) >> 32;
                uint64_t v1239 = (v1234 - 0x100000000) >> 32;
                uint64_t v1517 = 8 * v1439;
                uint64_t v1530 = (v1234 - 0x300000000) >> 32;
                uint64_t v1505 = 8 * v1445;
                uint64_t v1465 = 8 * *(uint64_t *)((char *)*a5 + v1236);
                uint64_t v1475 = 8 * *(void *)(*a6 + v1236);
                do
                {
                  if (v1578 >= 1)
                  {
                    int v1240 = 0;
                    int v1241 = v1233[v1530];
                    uint64_t v1546 = 8 * v1235[v1457];
                    uint64_t v1562 = 8 * *(void *)(v1237 + 8 * v1457);
                    uint64_t v1242 = v1505;
                    uint64_t result = v1517;
                    do
                    {
                      int v1595 = v1240;
                      if (v1241 >= 1)
                      {
                        int v1243 = 0;
                        int v1244 = v1233[v1238];
                        uint64_t v1245 = 8 * *(void *)(v1237 + 8 * v1530);
                        uint64_t v1246 = 8 * v1235[v1530];
                        uint64_t v1247 = v1242;
                        uint64_t v1248 = result;
                        do
                        {
                          if (v1244 >= 1)
                          {
                            int v1249 = 0;
                            int v1250 = v1233[v1239];
                            int v1251 = (void *)*a2;
                            uint64_t v1252 = 8 * *(void *)(v1237 + 8 * v1238);
                            uint64_t v1253 = 8 * v1235[v1238];
                            uint64_t v1254 = v1247;
                            uint64_t v1255 = v1248;
                            do
                            {
                              if (v1250 >= 1)
                              {
                                int v1256 = (void *)(v1251[19] + v1255);
                                uint64_t v1257 = 8 * *(void *)(v1237 + 8 * v1239);
                                uint64_t v1258 = (void *)(v155[19] + v1254);
                                uint64_t v1259 = 8 * v1235[v1239];
                                int v1260 = v1250;
                                do
                                {
                                  *int v1256 = *v1258;
                                  int v1256 = (void *)((char *)v1256 + v1257);
                                  uint64_t v1258 = (void *)((char *)v1258 + v1259);
                                  --v1260;
                                }
                                while (v1260);
                              }
                              ++v1249;
                              v1255 += v1252;
                              v1254 += v1253;
                            }
                            while (v1249 != v1244);
                          }
                          ++v1243;
                          v1248 += v1245;
                          v1247 += v1246;
                        }
                        while (v1243 != v1241);
                      }
                      int v1240 = v1595 + 1;
                      result += v1562;
                      v1242 += v1546;
                    }
                    while (v1595 + 1 != v1578);
                  }
                  v1517 += v1475;
                  v1505 += v1465;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              uint64_t v1117 = (char *)a4[1];
              LODWORD(v1118) = 1;
              uint64_t v1119 = -20;
              do
              {
                uint64_t v1118 = *(int *)&v1117[v1119] * (uint64_t)(int)v1118;
                v1119 += 4;
              }
              while (v1119);
              unint64_t v1435 = v155[6];
              if (v1435)
              {
                uint64_t v1120 = 0;
                uint64_t v1121 = (v156 << 30) - 0x500000000;
                uint64_t v1122 = *a4;
                uint64_t v1415 = *v8;
                uint64_t v1123 = *a5;
                uint64_t v1420 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1425 = ((unint64_t)(v1117 - (char *)*a4) >> 2) - 1;
                uint64_t v1124 = *a6;
                uint64_t v1411 = v1121 >> 32;
                int v1484 = *(int *)((char *)*a4 + (v1121 >> 30));
                uint64_t v1456 = ((v156 << 30) - 0x400000000) >> 32;
                uint64_t v1528 = ((v156 << 30) - 0x300000000) >> 32;
                uint64_t v1125 = ((v156 << 30) - 0x200000000) >> 32;
                uint64_t v1126 = ((v156 << 30) - 0x100000000) >> 32;
                uint64_t v1430 = v1118;
                do
                {
                  uint64_t v1127 = v1425;
                  if ((v1425 & 0x80000000) != 0)
                  {
                    uint64_t v1128 = 0;
                    uint64_t v1129 = v1420;
                  }
                  else
                  {
                    uint64_t v1128 = 0;
                    LODWORD(result) = v1120;
                    uint64_t v1129 = v1420;
                    do
                    {
                      ldiv_t v1130 = ldiv((int)result, v1122[v1127]);
                      uint64_t result = v1130.quot;
                      v1128 += v1123[v1127--] * v1130.rem;
                    }
                    while (v1127 != -1);
                  }
                  uint64_t v1451 = v1120;
                  uint64_t v1131 = 0;
                  if ((v1129 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1120;
                    do
                    {
                      ldiv_t v1132 = ldiv((int)result, *(int *)(v1415 + 4 * v1129));
                      uint64_t result = v1132.quot;
                      v1131 += *(void *)(v1124 + 8 * v1129--) * v1132.rem;
                    }
                    while (v1129 != -1);
                  }
                  if (v1484 >= 1)
                  {
                    int v1133 = 0;
                    int v1576 = v1122[v1456];
                    uint64_t v1474 = 8 * *(void *)(v1124 + 8 * v1411);
                    uint64_t v1504 = 8 * (v1128 + v1445);
                    uint64_t v1516 = 8 * (v1131 + v1439);
                    uint64_t v1464 = 8 * v1123[v1411];
                    do
                    {
                      int v1494 = v1133;
                      if (v1576 >= 1)
                      {
                        int v1134 = 0;
                        int v1135 = v1122[v1528];
                        uint64_t v1544 = 8 * v1123[v1456];
                        uint64_t v1560 = 8 * *(void *)(v1124 + 8 * v1456);
                        uint64_t v1137 = v1504;
                        uint64_t v1136 = v1516;
                        do
                        {
                          if (v1135 >= 1)
                          {
                            int v1138 = 0;
                            int v1139 = v1122[v1125];
                            uint64_t v1140 = 8 * *(void *)(v1124 + 8 * v1528);
                            uint64_t v1141 = 8 * v1123[v1528];
                            uint64_t result = v1137;
                            uint64_t v1142 = v1136;
                            do
                            {
                              if (v1139 >= 1)
                              {
                                int v1143 = 0;
                                int v1144 = v1122[v1126];
                                int v1145 = (void *)*a2;
                                uint64_t v1146 = 8 * *(void *)(v1124 + 8 * v1125);
                                uint64_t v1147 = 8 * v1123[v1125];
                                uint64_t v1148 = result;
                                uint64_t v1149 = v1142;
                                do
                                {
                                  if (v1144 >= 1)
                                  {
                                    uint64_t v1150 = (void *)(v1145[19] + v1149);
                                    uint64_t v1151 = 8 * *(void *)(v1124 + 8 * v1126);
                                    int v1152 = (void *)(v155[19] + v1148);
                                    uint64_t v1153 = 8 * v1123[v1126];
                                    int v1154 = v1144;
                                    do
                                    {
                                      *uint64_t v1150 = *v1152;
                                      uint64_t v1150 = (void *)((char *)v1150 + v1151);
                                      int v1152 = (void *)((char *)v1152 + v1153);
                                      --v1154;
                                    }
                                    while (v1154);
                                  }
                                  ++v1143;
                                  v1149 += v1146;
                                  v1148 += v1147;
                                }
                                while (v1143 != v1139);
                              }
                              ++v1138;
                              v1142 += v1140;
                              result += v1141;
                            }
                            while (v1138 != v1135);
                          }
                          ++v1134;
                          v1136 += v1560;
                          v1137 += v1544;
                        }
                        while (v1134 != v1576);
                      }
                      int v1133 = v1494 + 1;
                      v1516 += v1474;
                      v1504 += v1464;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  v1120 += v1430;
                }
                while (v1435 > v1451 + v1430);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v31 = v8[6];
          if (v31)
          {
            float v32 = (float)**(uint64_t **)(*(void *)result + 152);
            float v33 = (float *)v8[19];
            do
            {
              *v33++ = v32;
              --v31;
            }
            while (v31);
          }
          break;
        case 1:
          uint64_t v166 = *(void *)(*(void *)result + 160);
          if (v166)
          {
            uint64_t v167 = *(uint64_t **)(*(void *)result + 152);
            uint64_t v168 = (float *)v8[19];
            uint64_t v169 = 8 * v166;
            do
            {
              uint64_t v170 = *v167++;
              *v168++ = (float)v170;
              v169 -= 8;
            }
            while (v169);
          }
          break;
        case 2:
          uint64_t v171 = *a7;
          uint64_t v172 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v173 = **a4;
              if ((int)v173 >= 1)
              {
                uint64_t v174 = (float *)v8[19];
                int v175 = (uint64_t *)(*(void *)(v172 + 152) + 8 * v171);
                uint64_t v176 = 8 * **a5;
                do
                {
                  *v174++ = (float)*v175;
                  int v175 = (uint64_t *)((char *)v175 + v176);
                  --v173;
                }
                while (v173);
              }
              break;
            case 2:
              int v501 = **a4;
              if (v501 >= 1)
              {
                int v502 = 0;
                uint64_t v503 = 0;
                uint64_t v504 = *(void *)(v172 + 152);
                uint64_t v505 = v8[19];
                uint64_t v506 = (*a4)[1];
                uint64_t v507 = (*a5)[1];
                uint64_t v508 = **a5 - v507 * v506;
                do
                {
                  int v509 = v506;
                  if ((int)v506 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(void *)(v504 + 8 * v171);
                      *(float *)(v505 + 4 * v503++) = (float)result;
                      v171 += v507;
                      --v509;
                    }
                    while (v509);
                  }
                  v171 += v508;
                  ++v502;
                }
                while (v502 != v501);
              }
              break;
            case 3:
              uint64_t v510 = *a4;
              int v511 = **a4;
              if (v511 >= 1)
              {
                int v512 = 0;
                uint64_t result = 0;
                uint64_t v513 = *(void *)(v172 + 152);
                uint64_t v514 = v8[19];
                uint64_t v515 = v510[1];
                uint64_t v516 = *a5;
                uint64_t v517 = (*a5)[1];
                uint64_t v518 = **a5 - v517 * v515;
                do
                {
                  if ((int)v515 < 1)
                  {
                    uint64_t v525 = result;
                  }
                  else
                  {
                    int v519 = 0;
                    uint64_t v520 = v510[2];
                    uint64_t v521 = *a5;
                    uint64_t v522 = v517 - v516[2] * v520;
                    do
                    {
                      if ((int)v520 < 1)
                      {
                        uint64_t v525 = result;
                      }
                      else
                      {
                        uint64_t v523 = v521[2];
                        int v524 = v520;
                        do
                        {
                          uint64_t v525 = result + 1;
                          *(float *)(v514 + 4 * result) = (float)*(uint64_t *)(v513 + 8 * v171);
                          v171 += v523;
                          ++result;
                          --v524;
                        }
                        while (v524);
                      }
                      v171 += v522;
                      ++v519;
                      uint64_t result = v525;
                    }
                    while (v519 != v515);
                  }
                  v171 += v518;
                  ++v512;
                  uint64_t result = v525;
                }
                while (v512 != v511);
              }
              break;
            case 4:
              uint64_t v526 = *a4;
              int v527 = **a4;
              if (v527 >= 1)
              {
                int v528 = 0;
                uint64_t result = 0;
                uint64_t v529 = *(void *)(v172 + 152);
                uint64_t v530 = v8[19];
                uint64_t v531 = v526[1];
                uint64_t v532 = *a5;
                uint64_t v533 = (*a5)[1];
                uint64_t v534 = **a5 - v533 * v531;
                do
                {
                  if ((int)v531 < 1)
                  {
                    uint64_t v545 = result;
                  }
                  else
                  {
                    int v535 = 0;
                    uint64_t v536 = v526[2];
                    uint64_t v537 = *a5;
                    uint64_t v538 = v533 - v532[2] * v536;
                    do
                    {
                      if ((int)v536 < 1)
                      {
                        uint64_t v545 = result;
                      }
                      else
                      {
                        int v539 = 0;
                        uint64_t v540 = v526[3];
                        uint64_t v541 = *a5;
                        uint64_t v542 = v537[2] - v537[3] * v540;
                        do
                        {
                          if ((int)v540 < 1)
                          {
                            uint64_t v545 = result;
                          }
                          else
                          {
                            uint64_t v543 = v541[3];
                            int v544 = v540;
                            do
                            {
                              uint64_t v545 = result + 1;
                              *(float *)(v530 + 4 * result) = (float)*(uint64_t *)(v529 + 8 * v171);
                              v171 += v543;
                              ++result;
                              --v544;
                            }
                            while (v544);
                          }
                          v171 += v542;
                          ++v539;
                          uint64_t result = v545;
                        }
                        while (v539 != v536);
                      }
                      v171 += v538;
                      ++v535;
                      uint64_t result = v545;
                    }
                    while (v535 != v531);
                  }
                  v171 += v534;
                  ++v528;
                  uint64_t result = v545;
                }
                while (v528 != v527);
              }
              break;
            default:
              uint64_t v491 = v8[6];
              if (v491)
              {
                uint64_t v492 = 0;
                uint64_t v493 = *(void *)(v172 + 152) + 8 * v171;
                uint64_t v494 = v8[19];
                ldiv_t v495 = *a4;
                uint64_t v496 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                int v497 = *a5;
                do
                {
                  uint64_t v498 = 0;
                  if ((v496 & 0x80000000) == 0)
                  {
                    uint64_t v499 = v496;
                    LODWORD(result) = v492;
                    do
                    {
                      ldiv_t v500 = ldiv((int)result, v495[v499]);
                      uint64_t result = v500.quot;
                      v498 += v497[v499--] * v500.rem;
                    }
                    while (v499 != -1);
                  }
                  *(float *)(v494 + 4 * v492++) = (float)*(uint64_t *)(v493 + 8 * v498);
                }
                while (v492 != v491);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1446 = *a8;
          uint64_t v1447 = *a7;
          uint64_t v177 = *(void **)result;
          uint64_t v178 = v177[1] - *v177;
          switch(v178 >> 2)
          {
            case 1:
              uint64_t v179 = (v178 << 30) - 0x100000000;
              int v180 = *(int *)((char *)*a4 + (v179 >> 30));
              if (v180 >= 1)
              {
                uint64_t v181 = v179 >> 29;
                uint64_t v182 = *(uint64_t *)((char *)*a5 + v181);
                uint64_t v183 = *(void *)(*a6 + v181);
                uint64_t v184 = (float *)(v8[19] + 4 * v1446);
                uint64_t v185 = (uint64_t *)(v177[19] + 8 * v1447);
                uint64_t v186 = 4 * v183;
                uint64_t v187 = 8 * v182;
                do
                {
                  *uint64_t v184 = (float)*v185;
                  uint64_t v184 = (float *)((char *)v184 + v186);
                  uint64_t v185 = (uint64_t *)((char *)v185 + v187);
                  --v180;
                }
                while (v180);
              }
              break;
            case 2:
              uint64_t v1299 = (v178 << 30) - 0x200000000;
              int v1300 = *(int *)((char *)*a4 + (v1299 >> 30));
              if (v1300 >= 1)
              {
                int v1301 = 0;
                uint64_t v1302 = v1299 >> 29;
                uint64_t v1303 = *(uint64_t *)((char *)*a5 + v1302);
                uint64_t v1304 = *(void *)(*a6 + v1302);
                uint64_t v1305 = (v178 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v1305 >> 29));
                uint64_t v1306 = *(void *)(*a6 + (v1305 >> 29));
                int v1307 = *(int *)((char *)*a4 + (v1305 >> 30));
                uint64_t v1308 = 4 * v1446;
                uint64_t v1309 = 4 * v1304;
                uint64_t v1310 = 4 * v1306;
                uint64_t v1311 = 8 * v1447;
                uint64_t v1312 = 8 * v1303;
                uint64_t v1313 = 8 * result;
                do
                {
                  if (v1307 >= 1)
                  {
                    uint64_t result = v8[19] + v1308;
                    int v1314 = (uint64_t *)(v177[19] + v1311);
                    int v1315 = v1307;
                    do
                    {
                      *(float *)uint64_t result = (float)*v1314;
                      result += v1310;
                      int v1314 = (uint64_t *)((char *)v1314 + v1313);
                      --v1315;
                    }
                    while (v1315);
                  }
                  ++v1301;
                  v1308 += v1309;
                  v1311 += v1312;
                }
                while (v1301 != v1300);
              }
              break;
            case 3:
              uint64_t v1316 = (v178 << 30) - 0x300000000;
              uint64_t v1317 = *a4;
              int v1318 = *(int *)((char *)*a4 + (v1316 >> 30));
              if (v1318 >= 1)
              {
                int v1319 = 0;
                uint64_t v1320 = v178 << 30;
                uint64_t v1321 = *a5;
                uint64_t v1322 = v1316 >> 29;
                uint64_t v1323 = *(uint64_t *)((char *)*a5 + (v1316 >> 29));
                uint64_t v1324 = *a6;
                uint64_t v1325 = *(void *)(*a6 + v1322);
                uint64_t v1326 = (v1320 - 0x200000000) >> 29;
                uint64_t v1327 = v1320 - 0x100000000;
                uint64_t v1328 = *(uint64_t *)((char *)*a5 + v1326);
                uint64_t v1329 = *(void *)(*a6 + v1326);
                int v1330 = *(int *)((char *)v1317 + ((v1320 - 0x200000000) >> 30));
                uint64_t v1331 = v1327 >> 32;
                uint64_t v1332 = 4 * v1446;
                uint64_t v1333 = 4 * v1325;
                uint64_t v1334 = 4 * v1329;
                uint64_t result = 8 * v1447;
                uint64_t v1335 = 8 * v1323;
                uint64_t v1336 = 8 * v1328;
                do
                {
                  if (v1330 >= 1)
                  {
                    int v1337 = 0;
                    int v1338 = v1317[v1331];
                    uint64_t v1339 = (void *)*a2;
                    uint64_t v1340 = 4 * *(void *)(v1324 + 8 * v1331);
                    uint64_t v1341 = 8 * v1321[v1331];
                    uint64_t v1342 = result;
                    uint64_t v1343 = v1332;
                    do
                    {
                      if (v1338 >= 1)
                      {
                        uint64_t v1344 = (float *)(v1339[19] + v1343);
                        int v1345 = (uint64_t *)(v177[19] + v1342);
                        int v1346 = v1338;
                        do
                        {
                          float *v1344 = (float)*v1345;
                          uint64_t v1344 = (float *)((char *)v1344 + v1340);
                          int v1345 = (uint64_t *)((char *)v1345 + v1341);
                          --v1346;
                        }
                        while (v1346);
                      }
                      ++v1337;
                      v1343 += v1334;
                      v1342 += v1336;
                    }
                    while (v1337 != v1330);
                  }
                  ++v1319;
                  v1332 += v1333;
                  result += v1335;
                }
                while (v1319 != v1318);
              }
              break;
            case 4:
              uint64_t v1347 = (v178 << 30) - 0x400000000;
              uint64_t v1348 = *a4;
              int v1564 = *(int *)((char *)*a4 + (v1347 >> 30));
              if (v1564 >= 1)
              {
                int v1349 = 0;
                uint64_t v1350 = *a5;
                uint64_t v1351 = v1347 >> 29;
                uint64_t v1352 = *a6;
                uint64_t v1353 = v178 << 30;
                uint64_t v1354 = (v1353 - 0x300000000) >> 29;
                uint64_t v1355 = *(uint64_t *)((char *)*a5 + v1354);
                uint64_t v1356 = *(void *)(*a6 + v1354);
                uint64_t v1357 = v1353 - 0x200000000;
                uint64_t v1358 = v1353 - 0x100000000;
                int v1359 = *(int *)((char *)v1348 + ((v1353 - 0x300000000) >> 30));
                uint64_t v1360 = v1357 >> 32;
                uint64_t v1361 = v1358 >> 32;
                uint64_t v1362 = 4 * v1446;
                uint64_t v1580 = 4 * *(void *)(*a6 + v1351);
                uint64_t result = 4 * v1356;
                uint64_t v1363 = 8 * v1447;
                uint64_t v1548 = 8 * *(uint64_t *)((char *)*a5 + v1351);
                uint64_t v1364 = 8 * v1355;
                do
                {
                  if (v1359 >= 1)
                  {
                    int v1365 = 0;
                    int v1366 = v1348[v1360];
                    uint64_t v1367 = 4 * *(void *)(v1352 + 8 * v1360);
                    uint64_t v1368 = 8 * v1350[v1360];
                    uint64_t v1369 = v1363;
                    uint64_t v1370 = v1362;
                    do
                    {
                      if (v1366 >= 1)
                      {
                        int v1371 = 0;
                        int v1372 = v1348[v1361];
                        uint64_t v1373 = (void *)*a2;
                        uint64_t v1374 = 4 * *(void *)(v1352 + 8 * v1361);
                        uint64_t v1375 = 8 * v1350[v1361];
                        uint64_t v1376 = v1369;
                        uint64_t v1377 = v1370;
                        do
                        {
                          if (v1372 >= 1)
                          {
                            uint64_t v1378 = (float *)(v1373[19] + v1377);
                            uint64_t v1379 = (uint64_t *)(v177[19] + v1376);
                            int v1380 = v1372;
                            do
                            {
                              *uint64_t v1378 = (float)*v1379;
                              uint64_t v1378 = (float *)((char *)v1378 + v1374);
                              uint64_t v1379 = (uint64_t *)((char *)v1379 + v1375);
                              --v1380;
                            }
                            while (v1380);
                          }
                          ++v1371;
                          v1377 += v1367;
                          v1376 += v1368;
                        }
                        while (v1371 != v1366);
                      }
                      ++v1365;
                      v1370 += result;
                      v1369 += v1364;
                    }
                    while (v1365 != v1359);
                  }
                  ++v1349;
                  v1362 += v1580;
                  v1363 += v1548;
                }
                while (v1349 != v1564);
              }
              break;
            case 5:
              uint64_t v1381 = (v178 << 30) - 0x500000000;
              uint64_t v1382 = *a4;
              int v1497 = *(int *)((char *)*a4 + (v1381 >> 30));
              if (v1497 >= 1)
              {
                int v1507 = 0;
                uint64_t v1383 = *a5;
                uint64_t v1384 = v1381 >> 29;
                uint64_t v1385 = *a6;
                uint64_t v1386 = ((v178 << 30) - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1386);
                uint64_t v1387 = *(void *)(*a6 + v1386);
                int v1581 = *(int *)((char *)v1382 + (((v178 << 30) - 0x400000000) >> 30));
                uint64_t v1467 = ((v178 << 30) - 0x300000000) >> 32;
                uint64_t v1388 = ((v178 << 30) - 0x200000000) >> 32;
                uint64_t v1389 = ((v178 << 30) - 0x100000000) >> 32;
                uint64_t v1532 = 4 * v1446;
                uint64_t v1487 = 4 * *(void *)(*a6 + v1384);
                uint64_t v1565 = 4 * v1387;
                uint64_t v1519 = 8 * v1447;
                uint64_t v1477 = 8 * *(uint64_t *)((char *)*a5 + v1384);
                uint64_t v1549 = 8 * result;
                do
                {
                  if (v1581 >= 1)
                  {
                    int v1390 = 0;
                    int v1391 = v1382[v1467];
                    uint64_t v1392 = 4 * *(void *)(v1385 + 8 * v1467);
                    uint64_t v1393 = 8 * v1383[v1467];
                    uint64_t v1394 = v1519;
                    uint64_t v1395 = v1532;
                    do
                    {
                      if (v1391 >= 1)
                      {
                        int v1396 = 0;
                        int v1397 = v1382[v1388];
                        uint64_t v1398 = 4 * *(void *)(v1385 + 8 * v1388);
                        uint64_t v1399 = 8 * v1383[v1388];
                        uint64_t v1400 = v1394;
                        uint64_t v1401 = v1395;
                        do
                        {
                          if (v1397 >= 1)
                          {
                            int v1402 = 0;
                            int v1403 = v1382[v1389];
                            uint64_t result = (uint64_t)a2;
                            uint64_t v1404 = (void *)*a2;
                            uint64_t v1405 = 4 * *(void *)(v1385 + 8 * v1389);
                            uint64_t v1406 = 8 * v1383[v1389];
                            uint64_t v1407 = v1400;
                            uint64_t v1408 = v1401;
                            do
                            {
                              if (v1403 >= 1)
                              {
                                uint64_t v1409 = (float *)(v1404[19] + v1408);
                                uint64_t v1410 = (uint64_t *)(v177[19] + v1407);
                                LODWORD(result) = v1403;
                                do
                                {
                                  *uint64_t v1409 = (float)*v1410;
                                  uint64_t v1409 = (float *)((char *)v1409 + v1405);
                                  uint64_t v1410 = (uint64_t *)((char *)v1410 + v1406);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1402;
                              v1408 += v1398;
                              v1407 += v1399;
                            }
                            while (v1402 != v1397);
                          }
                          ++v1396;
                          v1401 += v1392;
                          v1400 += v1393;
                        }
                        while (v1396 != v1391);
                      }
                      ++v1390;
                      v1395 += v1565;
                      v1394 += v1549;
                    }
                    while (v1390 != v1581);
                  }
                  v1532 += v1487;
                  v1519 += v1477;
                  ++v1507;
                }
                while (v1507 != v1497);
              }
              break;
            default:
              int v1261 = (char *)a4[1];
              LODWORD(v1262) = 1;
              uint64_t v1263 = -20;
              do
              {
                uint64_t v1262 = *(int *)&v1261[v1263] * (uint64_t)(int)v1262;
                v1263 += 4;
              }
              while (v1263);
              unint64_t v1441 = v177[6];
              if (v1441)
              {
                uint64_t v1264 = 0;
                uint64_t v1265 = (v178 << 30) - 0x500000000;
                uint64_t v1266 = *a4;
                uint64_t v1421 = *v8;
                uint64_t v1267 = *a5;
                uint64_t v1426 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1431 = ((unint64_t)(v1261 - (char *)*a4) >> 2) - 1;
                uint64_t v1268 = *a6;
                int v1496 = *(int *)((char *)*a4 + (v1265 >> 30));
                uint64_t v1416 = ((v178 << 30) - 0x400000000) >> 32;
                uint64_t v1269 = ((v178 << 30) - 0x200000000) >> 32;
                uint64_t v1270 = ((v178 << 30) - 0x100000000) >> 32;
                uint64_t v1486 = 4 * *(void *)(*a6 + (v1265 >> 29));
                uint64_t v1466 = ((v178 << 30) - 0x300000000) >> 32;
                uint64_t v1476 = 8 * *(uint64_t *)((char *)*a5 + (v1265 >> 29));
                uint64_t v1436 = v1262;
                do
                {
                  uint64_t v1271 = v1431;
                  if ((v1431 & 0x80000000) != 0)
                  {
                    uint64_t v1272 = 0;
                    uint64_t v1273 = v1426;
                  }
                  else
                  {
                    uint64_t v1272 = 0;
                    LODWORD(result) = v1264;
                    uint64_t v1273 = v1426;
                    do
                    {
                      ldiv_t v1274 = ldiv((int)result, v1266[v1271]);
                      uint64_t result = v1274.quot;
                      v1272 += v1267[v1271--] * v1274.rem;
                    }
                    while (v1271 != -1);
                  }
                  uint64_t v1458 = v1264;
                  uint64_t v1275 = 0;
                  if ((v1273 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1264;
                    do
                    {
                      ldiv_t v1276 = ldiv((int)result, *(int *)(v1421 + 4 * v1273));
                      uint64_t result = v1276.quot;
                      v1275 += *(void *)(v1268 + 8 * v1273--) * v1276.rem;
                    }
                    while (v1273 != -1);
                  }
                  if (v1496 >= 1)
                  {
                    int v1277 = 0;
                    int v1579 = v1266[v1416];
                    uint64_t v1531 = 4 * (v1275 + v1446);
                    uint64_t v1563 = 4 * *(void *)(v1268 + 8 * v1416);
                    uint64_t v1518 = 8 * (v1272 + v1447);
                    uint64_t v1547 = 8 * v1267[v1416];
                    do
                    {
                      int v1506 = v1277;
                      if (v1579 >= 1)
                      {
                        int v1278 = 0;
                        int v1279 = v1266[v1466];
                        uint64_t v1280 = 4 * *(void *)(v1268 + 8 * v1466);
                        uint64_t v1281 = 8 * v1267[v1466];
                        uint64_t v1283 = v1518;
                        uint64_t v1282 = v1531;
                        do
                        {
                          if (v1279 >= 1)
                          {
                            int v1284 = 0;
                            int v1285 = v1266[v1269];
                            uint64_t v1286 = 4 * *(void *)(v1268 + 8 * v1269);
                            uint64_t v1287 = 8 * v1267[v1269];
                            uint64_t result = v1283;
                            uint64_t v1288 = v1282;
                            do
                            {
                              if (v1285 >= 1)
                              {
                                int v1289 = 0;
                                int v1290 = v1266[v1270];
                                uint64_t v1291 = (void *)*a2;
                                uint64_t v1292 = 4 * *(void *)(v1268 + 8 * v1270);
                                uint64_t v1293 = 8 * v1267[v1270];
                                uint64_t v1294 = result;
                                uint64_t v1295 = v1288;
                                do
                                {
                                  if (v1290 >= 1)
                                  {
                                    int v1296 = (float *)(v1291[19] + v1295);
                                    int v1297 = (uint64_t *)(v177[19] + v1294);
                                    int v1298 = v1290;
                                    do
                                    {
                                      *int v1296 = (float)*v1297;
                                      int v1296 = (float *)((char *)v1296 + v1292);
                                      int v1297 = (uint64_t *)((char *)v1297 + v1293);
                                      --v1298;
                                    }
                                    while (v1298);
                                  }
                                  ++v1289;
                                  v1295 += v1286;
                                  v1294 += v1287;
                                }
                                while (v1289 != v1285);
                              }
                              ++v1284;
                              v1288 += v1280;
                              result += v1281;
                            }
                            while (v1284 != v1279);
                          }
                          ++v1278;
                          v1282 += v1563;
                          v1283 += v1547;
                        }
                        while (v1278 != v1579);
                      }
                      int v1277 = v1506 + 1;
                      v1531 += v1486;
                      v1518 += v1476;
                    }
                    while (v1506 + 1 != v1496);
                  }
                  v1264 += v1436;
                }
                while (v1441 > v1458 + v1436);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::anonymous namespace'::copy<float,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, void *a6, uint64_t *a7, uint64_t *a8)
{
  int v8 = *(uint64_t **)a2;
  uint64_t v11 = (uint64_t *)a2;
  uint64_t v12 = result;
  switch(*(_DWORD *)(*(void *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          size_t v13 = v8[6];
          if (v13)
          {
            size_t v14 = (void *)v8[19];
            BOOL v15 = **(float **)(*(void *)v12 + 152) != 0.0;
            uint64_t result = (uint64_t)memset(v14, v15, v13);
          }
          break;
        case 1:
          uint64_t v28 = *(void *)(*(void *)result + 160);
          if (v28)
          {
            uint64_t v29 = *(float **)(*(void *)result + 152);
            uint64_t v30 = (BOOL *)v8[19];
            uint64_t v31 = 4 * v28;
            do
            {
              float v32 = *v29++;
              *v30++ = v32 != 0.0;
              v31 -= 4;
            }
            while (v31);
          }
          break;
        case 2:
          uint64_t v33 = *a7;
          uint64_t v34 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v35 = **a4;
              if ((int)v35 >= 1)
              {
                size_t v36 = (BOOL *)v8[19];
                uint64_t v37 = (float *)(*(void *)(v34 + 152) + 4 * v33);
                uint64_t v38 = 4 * **a5;
                do
                {
                  *v36++ = *v37 != 0.0;
                  uint64_t v37 = (float *)((char *)v37 + v38);
                  --v35;
                }
                while (v35);
              }
              break;
            case 2:
              int v192 = **a4;
              if (v192 >= 1)
              {
                int v193 = 0;
                uint64_t v194 = 0;
                uint64_t v195 = *(void *)(v34 + 152);
                uint64_t v196 = v8[19];
                uint64_t v197 = (*a4)[1];
                uint64_t v198 = (*a5)[1];
                uint64_t v199 = **a5 - v198 * v197;
                do
                {
                  int v200 = v197;
                  if ((int)v197 >= 1)
                  {
                    do
                    {
                      uint64_t result = *(float *)(v195 + 4 * v33) != 0.0;
                      *(unsigned char *)(v196 + v194++) = result;
                      v33 += v198;
                      --v200;
                    }
                    while (v200);
                  }
                  v33 += v199;
                  ++v193;
                }
                while (v193 != v192);
              }
              break;
            case 3:
              uint64_t v201 = *a4;
              int v202 = **a4;
              if (v202 >= 1)
              {
                int v203 = 0;
                uint64_t result = 0;
                uint64_t v204 = *(void *)(v34 + 152);
                uint64_t v205 = v8[19];
                uint64_t v206 = v201[1];
                uint64_t v207 = *a5;
                uint64_t v208 = (*a5)[1];
                uint64_t v209 = **a5 - v208 * v206;
                do
                {
                  if ((int)v206 < 1)
                  {
                    uint64_t v216 = result;
                  }
                  else
                  {
                    int v210 = 0;
                    uint64_t v211 = v201[2];
                    uint64_t v212 = *a5;
                    uint64_t v213 = v208 - v207[2] * v211;
                    do
                    {
                      if ((int)v211 < 1)
                      {
                        uint64_t v216 = result;
                      }
                      else
                      {
                        uint64_t v214 = v212[2];
                        int v215 = v211;
                        do
                        {
                          uint64_t v216 = result + 1;
                          *(unsigned char *)(v205 + result) = *(float *)(v204 + 4 * v33) != 0.0;
                          v33 += v214;
                          ++result;
                          --v215;
                        }
                        while (v215);
                      }
                      v33 += v213;
                      ++v210;
                      uint64_t result = v216;
                    }
                    while (v210 != v206);
                  }
                  v33 += v209;
                  ++v203;
                  uint64_t result = v216;
                }
                while (v203 != v202);
              }
              break;
            case 4:
              uint64_t v217 = *a4;
              int v218 = **a4;
              if (v218 >= 1)
              {
                int v219 = 0;
                uint64_t result = 0;
                uint64_t v220 = *(void *)(v34 + 152);
                uint64_t v221 = v8[19];
                uint64_t v222 = v217[1];
                uint64_t v223 = *a5;
                uint64_t v224 = (*a5)[1];
                uint64_t v225 = **a5 - v224 * v222;
                do
                {
                  if ((int)v222 < 1)
                  {
                    uint64_t v236 = result;
                  }
                  else
                  {
                    int v226 = 0;
                    uint64_t v227 = v217[2];
                    uint64_t v228 = *a5;
                    uint64_t v229 = v224 - v223[2] * v227;
                    do
                    {
                      if ((int)v227 < 1)
                      {
                        uint64_t v236 = result;
                      }
                      else
                      {
                        int v230 = 0;
                        uint64_t v231 = v217[3];
                        int v232 = *a5;
                        uint64_t v233 = v228[2] - v228[3] * v231;
                        do
                        {
                          if ((int)v231 < 1)
                          {
                            uint64_t v236 = result;
                          }
                          else
                          {
                            uint64_t v234 = v232[3];
                            int v235 = v231;
                            do
                            {
                              uint64_t v236 = result + 1;
                              *(unsigned char *)(v221 + result) = *(float *)(v220 + 4 * v33) != 0.0;
                              v33 += v234;
                              ++result;
                              --v235;
                            }
                            while (v235);
                          }
                          v33 += v233;
                          ++v230;
                          uint64_t result = v236;
                        }
                        while (v230 != v227);
                      }
                      v33 += v229;
                      ++v226;
                      uint64_t result = v236;
                    }
                    while (v226 != v222);
                  }
                  v33 += v225;
                  ++v219;
                  uint64_t result = v236;
                }
                while (v219 != v218);
              }
              break;
            default:
              uint64_t v182 = v8[6];
              if (v182)
              {
                uint64_t v183 = 0;
                uint64_t v184 = *(void *)(v34 + 152) + 4 * v33;
                uint64_t v185 = v8[19];
                uint64_t v186 = *a4;
                uint64_t v187 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v188 = *a5;
                do
                {
                  uint64_t v189 = 0;
                  if ((v187 & 0x80000000) == 0)
                  {
                    uint64_t v190 = v187;
                    LODWORD(result) = v183;
                    do
                    {
                      ldiv_t v191 = ldiv((int)result, v186[v190]);
                      uint64_t result = v191.quot;
                      v189 += v188[v190--] * v191.rem;
                    }
                    while (v190 != -1);
                  }
                  *(unsigned char *)(v185 + v183++) = *(float *)(v184 + 4 * v189) != 0.0;
                }
                while (v183 != v182);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1436 = *a7;
          uint64_t v39 = *a8;
          uint64_t v40 = *(void **)result;
          uint64_t v41 = v40[1] - *v40;
          switch(v41 >> 2)
          {
            case 1:
              uint64_t v42 = (v41 << 30) - 0x100000000;
              int v43 = *(int *)((char *)*a4 + (v42 >> 30));
              if (v43 >= 1)
              {
                uint64_t v44 = v42 >> 29;
                uint64_t v45 = *(uint64_t *)((char *)*a5 + v44);
                uint64_t v46 = *(void *)(*a6 + v44);
                uint64_t v47 = (BOOL *)(v8[19] + v39);
                uint64_t v48 = (float *)(v40[19] + 4 * v1436);
                uint64_t v49 = 4 * v45;
                do
                {
                  *uint64_t v47 = *v48 != 0.0;
                  v47 += v46;
                  uint64_t v48 = (float *)((char *)v48 + v49);
                  --v43;
                }
                while (v43);
              }
              break;
            case 2:
              uint64_t v577 = (v41 << 30) - 0x200000000;
              int v578 = *(int *)((char *)*a4 + (v577 >> 30));
              if (v578 >= 1)
              {
                int v579 = 0;
                uint64_t v580 = v577 >> 29;
                uint64_t v581 = *(uint64_t *)((char *)*a5 + v580);
                uint64_t v582 = *(void *)(*a6 + v580);
                uint64_t v583 = (v41 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v583 >> 29));
                uint64_t v584 = *(void *)(*a6 + (v583 >> 29));
                int v585 = *(int *)((char *)*a4 + (v583 >> 30));
                uint64_t v586 = 4 * v1436;
                uint64_t v587 = 4 * v581;
                uint64_t v588 = 4 * result;
                do
                {
                  if (v585 >= 1)
                  {
                    uint64_t v589 = v8[19];
                    uint64_t result = v40[19] + v586;
                    int v590 = v585;
                    do
                    {
                      *(unsigned char *)(v589 + v39) = *(float *)result != 0.0;
                      v589 += v584;
                      result += v588;
                      --v590;
                    }
                    while (v590);
                  }
                  v39 += v582;
                  ++v579;
                  v586 += v587;
                }
                while (v579 != v578);
              }
              break;
            case 3:
              uint64_t v591 = (v41 << 30) - 0x300000000;
              uint64_t v592 = *a4;
              int v593 = *(int *)((char *)*a4 + (v591 >> 30));
              if (v593 >= 1)
              {
                int v594 = 0;
                uint64_t v595 = v41 << 30;
                int v596 = *a5;
                uint64_t v597 = v591 >> 29;
                uint64_t v598 = *(uint64_t *)((char *)*a5 + (v591 >> 29));
                uint64_t v599 = *a6;
                uint64_t v600 = *(void *)(*a6 + v597);
                uint64_t v601 = v595 - 0x200000000;
                uint64_t v602 = (v595 - 0x200000000) >> 29;
                uint64_t v603 = v595 - 0x100000000;
                uint64_t v604 = *(uint64_t *)((char *)*a5 + v602);
                uint64_t v605 = *(void *)(*a6 + v602);
                int v606 = *(int *)((char *)v592 + (v601 >> 30));
                uint64_t v607 = v603 >> 32;
                uint64_t v608 = 4 * v1436;
                uint64_t result = 4 * v598;
                uint64_t v609 = 4 * v604;
                do
                {
                  if (v606 >= 1)
                  {
                    int v610 = 0;
                    uint64_t v611 = *(void *)(v599 + 8 * v607);
                    int v612 = v592[v607];
                    uint64_t v613 = (void *)*v11;
                    uint64_t v614 = 4 * v596[v607];
                    uint64_t v615 = v608;
                    uint64_t v616 = v39;
                    do
                    {
                      if (v612 >= 1)
                      {
                        uint64_t v617 = v613[19];
                        int v618 = (float *)(v40[19] + v615);
                        int v619 = v612;
                        do
                        {
                          *(unsigned char *)(v617 + v616) = *v618 != 0.0;
                          v617 += v611;
                          int v618 = (float *)((char *)v618 + v614);
                          --v619;
                        }
                        while (v619);
                      }
                      v616 += v605;
                      ++v610;
                      v615 += v609;
                    }
                    while (v610 != v606);
                  }
                  v39 += v600;
                  ++v594;
                  v608 += result;
                }
                while (v594 != v593);
              }
              break;
            case 4:
              uint64_t v620 = (v41 << 30) - 0x400000000;
              uint64_t v621 = *a4;
              int v1578 = *(int *)((char *)*a4 + (v620 >> 30));
              if (v1578 >= 1)
              {
                int v622 = 0;
                uint64_t v623 = v41 << 30;
                uint64_t v624 = *a5;
                uint64_t v625 = v620 >> 29;
                uint64_t v626 = *(uint64_t *)((char *)*a5 + v625);
                uint64_t v627 = *a6;
                uint64_t v1560 = *(void *)(*a6 + v625);
                uint64_t v628 = (v41 << 30) - 0x300000000;
                uint64_t v629 = *(void *)(*a6 + (v628 >> 29));
                int v630 = *(int *)((char *)v621 + (v628 >> 30));
                uint64_t v1527 = (v623 - 0x200000000) >> 32;
                uint64_t v631 = (v623 - 0x100000000) >> 32;
                uint64_t result = 4 * v1436;
                uint64_t v632 = 4 * *(uint64_t *)((char *)*a5 + (v628 >> 29));
                do
                {
                  uint64_t v633 = v39;
                  if (v630 >= 1)
                  {
                    int v634 = 0;
                    uint64_t v635 = *(void *)(v627 + 8 * v1527);
                    int v636 = v621[v1527];
                    uint64_t v637 = 4 * v624[v1527];
                    uint64_t v638 = result;
                    uint64_t v639 = v39;
                    do
                    {
                      if (v636 >= 1)
                      {
                        int v640 = 0;
                        uint64_t v641 = *(void *)(v627 + 8 * v631);
                        int v642 = v621[v631];
                        uint64_t v643 = *v11;
                        uint64_t v644 = 4 * v624[v631];
                        uint64_t v645 = v638;
                        uint64_t v646 = v639;
                        do
                        {
                          if (v642 >= 1)
                          {
                            uint64_t v647 = *(void *)(v643 + 152);
                            int v648 = (float *)(v40[19] + v645);
                            int v649 = v642;
                            do
                            {
                              *(unsigned char *)(v647 + v646) = *v648 != 0.0;
                              v647 += v641;
                              int v648 = (float *)((char *)v648 + v644);
                              --v649;
                            }
                            while (v649);
                          }
                          v646 += v635;
                          ++v640;
                          v645 += v637;
                        }
                        while (v640 != v636);
                      }
                      v639 += v629;
                      ++v634;
                      v638 += v632;
                    }
                    while (v634 != v630);
                  }
                  uint64_t v39 = v633 + v1560;
                  ++v622;
                  result += 4 * v626;
                }
                while (v622 != v1578);
              }
              break;
            case 5:
              uint64_t v650 = (v41 << 30) - 0x500000000;
              uint64_t v651 = *a4;
              int v1492 = *(int *)((char *)*a4 + (v650 >> 30));
              if (v1492 >= 1)
              {
                int v1502 = 0;
                uint64_t v652 = *a5;
                uint64_t v653 = v650 >> 29;
                uint64_t v654 = *a6;
                uint64_t v1482 = *(void *)(*a6 + v653);
                uint64_t v655 = (v41 << 30) - 0x400000000;
                uint64_t v1561 = *(void *)(*a6 + (v655 >> 29));
                int v1579 = *(int *)((char *)v651 + (v655 >> 30));
                uint64_t v1462 = ((v41 << 30) - 0x300000000) >> 32;
                uint64_t v1528 = ((v41 << 30) - 0x200000000) >> 32;
                uint64_t result = ((v41 << 30) - 0x100000000) >> 32;
                uint64_t v1514 = 4 * v1436;
                uint64_t v1472 = 4 * *(uint64_t *)((char *)*a5 + v653);
                uint64_t v1543 = 4 * *(uint64_t *)((char *)*a5 + (v655 >> 29));
                do
                {
                  uint64_t v1447 = v39;
                  if (v1579 >= 1)
                  {
                    int v656 = 0;
                    uint64_t v657 = *(void *)(v654 + 8 * v1462);
                    int v658 = v651[v1462];
                    uint64_t v659 = 4 * v652[v1462];
                    uint64_t v660 = v1514;
                    uint64_t v661 = v39;
                    do
                    {
                      if (v658 >= 1)
                      {
                        int v662 = 0;
                        uint64_t v663 = *(void *)(v654 + 8 * v1528);
                        int v664 = v651[v1528];
                        uint64_t v665 = 4 * v652[v1528];
                        uint64_t v666 = v660;
                        uint64_t v667 = v661;
                        do
                        {
                          if (v664 >= 1)
                          {
                            int v668 = 0;
                            uint64_t v669 = *(void *)(v654 + 8 * result);
                            int v670 = v651[result];
                            uint64_t v671 = *v11;
                            uint64_t v672 = 4 * v652[result];
                            uint64_t v673 = v666;
                            uint64_t v674 = v667;
                            do
                            {
                              if (v670 >= 1)
                              {
                                uint64_t v675 = *(void *)(v671 + 152);
                                int v676 = (float *)(v40[19] + v673);
                                int v677 = v670;
                                do
                                {
                                  *(unsigned char *)(v675 + v674) = *v676 != 0.0;
                                  v675 += v669;
                                  int v676 = (float *)((char *)v676 + v672);
                                  --v677;
                                }
                                while (v677);
                              }
                              v674 += v663;
                              ++v668;
                              v673 += v665;
                            }
                            while (v668 != v664);
                          }
                          v667 += v657;
                          ++v662;
                          v666 += v659;
                        }
                        while (v662 != v658);
                      }
                      v661 += v1561;
                      ++v656;
                      v660 += v1543;
                    }
                    while (v656 != v1579);
                  }
                  uint64_t v39 = v1447 + v1482;
                  v1514 += v1472;
                  ++v1502;
                }
                while (v1502 != v1492);
              }
              break;
            default:
              uint64_t v540 = (char *)a4[1];
              LODWORD(v541) = 1;
              uint64_t v542 = -20;
              do
              {
                uint64_t v541 = *(int *)&v540[v542] * (uint64_t)(int)v541;
                v542 += 4;
              }
              while (v542);
              unint64_t v1434 = v40[6];
              if (v1434)
              {
                uint64_t v543 = 0;
                uint64_t v544 = (v41 << 30) - 0x500000000;
                uint64_t v545 = *a4;
                uint64_t v1411 = *v8;
                uint64_t v1421 = ((unint64_t)(v540 - (char *)*a4) >> 2) - 1;
                int v546 = *a5;
                uint64_t v547 = *a6;
                uint64_t v1471 = *(void *)(*a6 + (v544 >> 29));
                int v1481 = *(int *)((char *)*a4 + (v544 >> 30));
                uint64_t v1416 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1407 = ((v41 << 30) - 0x400000000) >> 32;
                uint64_t v1453 = ((v41 << 30) - 0x300000000) >> 32;
                uint64_t v1526 = ((v41 << 30) - 0x200000000) >> 32;
                uint64_t v548 = ((v41 << 30) - 0x100000000) >> 32;
                uint64_t v1461 = 4 * *(uint64_t *)((char *)*a5 + (v544 >> 29));
                uint64_t v1446 = *a8;
                uint64_t v1426 = v541;
                do
                {
                  uint64_t v549 = v1421;
                  if ((v1421 & 0x80000000) != 0)
                  {
                    uint64_t v550 = 0;
                    uint64_t v551 = v1416;
                  }
                  else
                  {
                    uint64_t v550 = 0;
                    LODWORD(result) = v543;
                    uint64_t v551 = v1416;
                    do
                    {
                      ldiv_t v552 = ldiv((int)result, v545[v549]);
                      uint64_t result = v552.quot;
                      v550 += v546[v549--] * v552.rem;
                    }
                    while (v549 != -1);
                  }
                  uint64_t v1442 = v543;
                  uint64_t v553 = 0;
                  if ((v551 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v543;
                    do
                    {
                      ldiv_t v554 = ldiv((int)result, *(int *)(v1411 + 4 * v551));
                      uint64_t result = v554.quot;
                      v553 += *(void *)(v547 + 8 * v551--) * v554.rem;
                    }
                    while (v551 != -1);
                  }
                  if (v1481 >= 1)
                  {
                    int v555 = 0;
                    uint64_t v1559 = *(void *)(v547 + 8 * v1407);
                    int v1577 = v545[v1407];
                    uint64_t v1501 = 4 * (v550 + v1436);
                    uint64_t v1513 = v553 + v1446;
                    uint64_t v1542 = 4 * v546[v1407];
                    do
                    {
                      int v1491 = v555;
                      if (v1577 >= 1)
                      {
                        int v556 = 0;
                        uint64_t v557 = *(void *)(v547 + 8 * v1453);
                        int v558 = v545[v1453];
                        uint64_t v559 = 4 * v546[v1453];
                        uint64_t v561 = v1501;
                        uint64_t v560 = v1513;
                        do
                        {
                          if (v558 >= 1)
                          {
                            int v562 = 0;
                            uint64_t v563 = *(void *)(v547 + 8 * v1526);
                            int v564 = v545[v1526];
                            uint64_t v565 = 4 * v546[v1526];
                            uint64_t result = v561;
                            uint64_t v566 = v560;
                            do
                            {
                              if (v564 >= 1)
                              {
                                int v567 = 0;
                                uint64_t v568 = *(void *)(v547 + 8 * v548);
                                int v569 = v545[v548];
                                uint64_t v570 = *v11;
                                uint64_t v571 = 4 * v546[v548];
                                uint64_t v572 = result;
                                uint64_t v573 = v566;
                                do
                                {
                                  if (v569 >= 1)
                                  {
                                    uint64_t v574 = *(void *)(v570 + 152);
                                    int v575 = (float *)(v40[19] + v572);
                                    int v576 = v569;
                                    do
                                    {
                                      *(unsigned char *)(v574 + v573) = *v575 != 0.0;
                                      v574 += v568;
                                      int v575 = (float *)((char *)v575 + v571);
                                      --v576;
                                    }
                                    while (v576);
                                  }
                                  v573 += v563;
                                  ++v567;
                                  v572 += v565;
                                }
                                while (v567 != v564);
                              }
                              v566 += v557;
                              ++v562;
                              result += v559;
                            }
                            while (v562 != v558);
                          }
                          v560 += v1559;
                          ++v556;
                          v561 += v1542;
                        }
                        while (v556 != v1577);
                      }
                      v1513 += v1471;
                      int v555 = v1491 + 1;
                      v1501 += v1461;
                    }
                    while (v1491 + 1 != v1481);
                  }
                  v543 += v1426;
                }
                while (v1434 > v1442 + v1426);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          goto LABEL_10;
        case 1:
          uint64_t v50 = *(void *)(*(void *)result + 160);
          if (v50)
          {
            uint64_t v51 = *(float **)(*(void *)result + 152);
            uint64_t v52 = (unsigned char *)v8[19];
            uint64_t v53 = 4 * v50;
            do
            {
              float v54 = *v51++;
              *v52++ = (int)v54;
              v53 -= 4;
            }
            while (v53);
          }
          break;
        case 2:
          uint64_t v55 = *a7;
          uint64_t v56 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v57 = 0;
                uint64_t v58 = *(void *)(v56 + 152);
                uint64_t v59 = v8[19];
                do
                {
                  *(unsigned char *)(v59 + v57) = (int)*(float *)(v58 + 4 * v55);
                  v55 += **a5;
                  ++v57;
                }
                while (**a4 > (int)v57);
              }
              break;
            case 2:
              ldiv_t v246 = *a4;
              int v247 = **a4;
              if (v247 >= 1)
              {
                int v248 = 0;
                uint64_t v249 = 0;
                uint64_t v250 = *(void *)(v56 + 152);
                uint64_t v251 = v8[19];
                do
                {
                  int v252 = v246[1];
                  if (v252 < 1)
                  {
                    int v253 = *a5;
                    uint64_t v254 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v251 + v249 + result) = (int)*(float *)(v250 + 4 * v55);
                      int v253 = *a5;
                      uint64_t v254 = (*a5)[1];
                      v55 += v254;
                      ldiv_t v246 = *a4;
                      int v252 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v252);
                    int v247 = *v246;
                    v249 += result;
                  }
                  uint64_t v55 = *v253 + v55 - v254 * v252;
                  ++v248;
                }
                while (v248 < v247);
              }
              break;
            case 3:
              uint64_t v255 = *a4;
              int v256 = **a4;
              if (v256 >= 1)
              {
                int v257 = 0;
                uint64_t v258 = 0;
                uint64_t v259 = *(void *)(v56 + 152);
                uint64_t v260 = v8[19];
                do
                {
                  int v261 = v255[1];
                  if (v261 < 1)
                  {
                    uint64_t v265 = *a5;
                    uint64_t v266 = (*a5)[1];
                  }
                  else
                  {
                    for (int i = 0; i < v261; ++i)
                    {
                      int v263 = v255[2];
                      if (v263 < 1)
                      {
                        uint64_t v265 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v264 = 0;
                        do
                        {
                          *(unsigned char *)(v260 + v258 + v264) = (int)*(float *)(v259 + 4 * v55);
                          uint64_t v265 = *a5;
                          uint64_t result = (*a5)[2];
                          v55 += result;
                          uint64_t v255 = *a4;
                          int v263 = (*a4)[2];
                          ++v264;
                        }
                        while ((int)v264 < v263);
                        v258 += v264;
                      }
                      uint64_t v266 = v265[1];
                      uint64_t v55 = v266 + v55 - result * v263;
                      int v261 = v255[1];
                    }
                    int v256 = *v255;
                  }
                  uint64_t v55 = *v265 + v55 - v266 * v261;
                  ++v257;
                }
                while (v257 < v256);
              }
              break;
            case 4:
              int v267 = *a4;
              int v268 = **a4;
              if (v268 >= 1)
              {
                int v269 = 0;
                uint64_t v270 = 0;
                uint64_t v271 = *(void *)(v56 + 152);
                uint64_t v272 = v8[19];
                do
                {
                  int v273 = v267[1];
                  if (v273 < 1)
                  {
                    int v279 = *a5;
                    uint64_t v281 = (*a5)[1];
                  }
                  else
                  {
                    for (int j = 0; j < v273; ++j)
                    {
                      int v275 = v267[2];
                      if (v275 < 1)
                      {
                        int v279 = *a5;
                        uint64_t v280 = (*a5)[2];
                      }
                      else
                      {
                        for (int k = 0; k < v275; ++k)
                        {
                          int v277 = v267[3];
                          if (v277 < 1)
                          {
                            int v279 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v278 = 0;
                            do
                            {
                              *(unsigned char *)(v272 + v270 + v278) = (int)*(float *)(v271 + 4 * v55);
                              int v279 = *a5;
                              uint64_t result = (*a5)[3];
                              v55 += result;
                              int v267 = *a4;
                              int v277 = (*a4)[3];
                              ++v278;
                            }
                            while ((int)v278 < v277);
                            v270 += v278;
                          }
                          uint64_t v280 = v279[2];
                          uint64_t v55 = v280 + v55 - result * v277;
                          int v275 = v267[2];
                        }
                      }
                      uint64_t v281 = v279[1];
                      uint64_t v55 = v281 + v55 - v280 * v275;
                      int v273 = v267[1];
                    }
                    int v268 = *v267;
                  }
                  uint64_t v55 = *v279 + v55 - v281 * v273;
                  ++v269;
                }
                while (v269 < v268);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v237 = 0;
                uint64_t v238 = *(void *)(v56 + 152) + 4 * v55;
                uint64_t v239 = v8[19];
                do
                {
                  uint64_t v240 = *a4;
                  unint64_t v241 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v242 = 0;
                  uint64_t v243 = (v241 - 1);
                  if ((int)v241 - 1 >= 0)
                  {
                    uint64_t v244 = *a5;
                    LODWORD(result) = v237;
                    do
                    {
                      ldiv_t v245 = ldiv((int)result, v240[v243]);
                      uint64_t result = v245.quot;
                      v242 += v244[v243--] * v245.rem;
                    }
                    while (v243 != -1);
                  }
                  *(unsigned char *)(v239 + v237++) = (int)*(float *)(v238 + 4 * v242);
                }
                while (v237 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1575 = *a7;
          uint64_t v60 = *a8;
          uint64_t v61 = *(void **)result;
          uint64_t v62 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v62 >> 2)
          {
            case 1:
              uint64_t v63 = (v62 << 30) - 0x100000000;
              int v64 = *(int *)((char *)*a4 + (v63 >> 30));
              if (v64 >= 1)
              {
                uint64_t v65 = v63 >> 29;
                uint64_t v66 = *(uint64_t *)((char *)*a5 + v65);
                uint64_t v67 = *(void *)(*a6 + v65);
                uint64_t v68 = (unsigned char *)(v8[19] + v60);
                uint64_t v69 = (float *)(v61[19] + 4 * v1575);
                uint64_t v70 = 4 * v66;
                do
                {
                  unsigned char *v68 = (int)*v69;
                  v68 += v67;
                  uint64_t v69 = (float *)((char *)v69 + v70);
                  --v64;
                }
                while (v64);
              }
              break;
            case 2:
              uint64_t v700 = (v62 << 30) - 0x200000000;
              int v701 = *(int *)((char *)*a4 + (v700 >> 30));
              if (v701 >= 1)
              {
                int v702 = 0;
                uint64_t v703 = v700 >> 29;
                uint64_t v704 = *(uint64_t *)((char *)*a5 + v703);
                uint64_t v705 = *(void *)(*a6 + v703);
                uint64_t v706 = 4 * v1575;
                uint64_t v707 = 4 * v704;
                do
                {
                  uint64_t v708 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v709 = *(int *)((char *)*a4 + (v708 >> 30));
                  if (v709 >= 1)
                  {
                    uint64_t v710 = v708 >> 29;
                    uint64_t v711 = *(uint64_t *)((char *)*a5 + v710);
                    uint64_t v712 = *(void *)(*a6 + v710);
                    uint64_t v713 = *(void *)(*(void *)a2 + 152);
                    uint64_t v714 = (float *)(*(void *)(*(void *)v12 + 152) + v706);
                    uint64_t result = 4 * v711;
                    do
                    {
                      *(unsigned char *)(v713 + v60) = (int)*v714;
                      v713 += v712;
                      uint64_t v714 = (float *)((char *)v714 + result);
                      --v709;
                    }
                    while (v709);
                  }
                  v60 += v705;
                  ++v702;
                  v706 += v707;
                }
                while (v702 != v701);
              }
              break;
            case 3:
              uint64_t v715 = (v62 << 30) - 0x300000000;
              int v716 = *(int *)((char *)*a4 + (v715 >> 30));
              if (v716 >= 1)
              {
                int v717 = 0;
                uint64_t v718 = v715 >> 29;
                uint64_t v719 = *(uint64_t *)((char *)*a5 + v718);
                uint64_t v720 = *(void *)(*a6 + v718);
                uint64_t v721 = 4 * v1575;
                uint64_t v722 = 4 * v719;
                do
                {
                  uint64_t v723 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v724 = *(int *)((char *)*a4 + (v723 >> 30));
                  if (v724 >= 1)
                  {
                    int v725 = 0;
                    uint64_t v726 = v723 >> 29;
                    uint64_t v727 = *(uint64_t *)((char *)*a5 + v726);
                    uint64_t v728 = *(void *)(*a6 + v726);
                    uint64_t result = 4 * v727;
                    uint64_t v729 = v721;
                    uint64_t v730 = v60;
                    do
                    {
                      uint64_t v731 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v732 = *(int *)((char *)*a4 + (v731 >> 30));
                      if (v732 >= 1)
                      {
                        uint64_t v733 = v731 >> 29;
                        uint64_t v734 = *(uint64_t *)((char *)*a5 + v733);
                        uint64_t v735 = *(void *)(*a6 + v733);
                        uint64_t v736 = *(void *)(*v11 + 152);
                        uint64_t v737 = (float *)(*(void *)(*(void *)v12 + 152) + v729);
                        uint64_t v738 = 4 * v734;
                        do
                        {
                          *(unsigned char *)(v736 + v730) = (int)*v737;
                          v736 += v735;
                          uint64_t v737 = (float *)((char *)v737 + v738);
                          --v732;
                        }
                        while (v732);
                      }
                      v730 += v728;
                      ++v725;
                      v729 += result;
                    }
                    while (v725 != v724);
                  }
                  v60 += v720;
                  ++v717;
                  v721 += v722;
                }
                while (v717 != v716);
              }
              break;
            case 4:
              uint64_t v739 = a4;
              uint64_t v740 = a5;
              uint64_t v741 = a6;
              uint64_t v742 = *a7;
              uint64_t v743 = *a8;
              goto LABEL_560;
            case 5:
              uint64_t v744 = (v62 << 30) - 0x500000000;
              int v745 = *(int *)((char *)*a4 + (v744 >> 30));
              if (v745 >= 1)
              {
                uint64_t v746 = v744 >> 29;
                uint64_t v747 = *(uint64_t *)((char *)*a5 + v746);
                uint64_t v748 = *(void *)(*a6 + v746);
                do
                {
                  v1575 += v747;
                  v60 += v748;
                  --v745;
                }
                while (v745);
              }
              break;
            default:
              LODWORD(v678) = 1;
              uint64_t v679 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v678 = a4[1][v679++] * (uint64_t)(int)v678;
              while (v679 * 4);
              if (v61[6])
              {
                uint64_t result = 0;
                uint64_t v1503 = *a8;
                uint64_t v1515 = v678;
                do
                {
                  uint64_t v680 = *a4;
                  unint64_t v681 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v682 = (v681 - 1);
                  uint64_t v1529 = v61;
                  uint64_t v1544 = result;
                  uint64_t v683 = 0;
                  if ((int)v681 - 1 >= 0)
                  {
                    uint64_t v684 = *a5;
                    do
                    {
                      ldiv_t v685 = ldiv((int)result, v680[v682]);
                      LODWORD(result) = v685.quot;
                      v683 += v684[v682--] * v685.rem;
                    }
                    while (v682 != -1);
                  }
                  uint64_t v686 = *(void *)*v11;
                  unint64_t v687 = (unint64_t)(*(void *)(*v11 + 8) - v686) >> 2;
                  uint64_t v688 = *a6;
                  uint64_t v689 = 0;
                  uint64_t v690 = (v687 - 1);
                  if ((int)v687 - 1 >= 0)
                  {
                    int quot = v1544;
                    do
                    {
                      ldiv_t v692 = ldiv(quot, *(int *)(v686 + 4 * v690));
                      int quot = v692.quot;
                      v689 += *(void *)(v688 + 8 * v690--) * v692.rem;
                    }
                    while (v690 != -1);
                  }
                  uint64_t v61 = v1529;
                  uint64_t v693 = ((v61[1] - *v61) << 30) - 0x500000000;
                  int v694 = *(int *)((char *)v680 + (v693 >> 30));
                  if (v694 >= 1)
                  {
                    uint64_t v695 = v683 + v1575;
                    uint64_t v696 = v693 >> 29;
                    uint64_t v697 = *(uint64_t *)((char *)*a5 + v696);
                    uint64_t v698 = *(void *)(v688 + v696);
                    uint64_t v699 = v689 + v1503;
                    do
                    {
                      v695 += v697;
                      v699 += v698;
                      --v694;
                    }
                    while (v694);
                    uint64_t v61 = *(void **)v12;
                  }
                  uint64_t result = v1544 + v1515;
                }
                while (v61[6] > (unint64_t)(v1544 + v1515));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          uint64_t v16 = v8[6];
          if (v16)
          {
            unsigned int v17 = **(float **)(*(void *)result + 152);
            uint64_t v18 = (unsigned int *)v8[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
          uint64_t v71 = *(void *)(*(void *)result + 160);
          if (v71)
          {
            uint64_t v72 = *(float **)(*(void *)result + 152);
            uint64_t v73 = (_DWORD *)v8[19];
            uint64_t v74 = 4 * v71;
            do
            {
              float v75 = *v72++;
              *v73++ = v75;
              v74 -= 4;
            }
            while (v74);
          }
          break;
        case 2:
          uint64_t v76 = *a7;
          uint64_t v77 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              int v78 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v79 = 0;
                uint64_t v80 = *(void *)(v77 + 152);
                uint64_t v81 = v8[19];
                uint64_t v82 = **a5;
                uint64_t v83 = (float *)(v80 + 4 * v76);
                do
                {
                  *(_DWORD *)(v81 + 4 * v79) = *v83;
                  v83 += v82;
                  ++v79;
                }
                while (*v78 > (int)v79);
              }
              break;
            case 2:
              ldiv_t v292 = *a4;
              int v293 = **a4;
              if (v293 >= 1)
              {
                int v294 = 0;
                uint64_t v295 = 0;
                uint64_t v296 = *(void *)(v77 + 152);
                uint64_t v297 = v8[19];
                uint64_t v298 = **a5;
                uint64_t v299 = (*a5)[1];
                int v300 = v292[1];
                do
                {
                  if (v300 >= 1)
                  {
                    uint64_t v301 = 0;
                    do
                    {
                      *(_DWORD *)(v297 + 4 * v295 + 4 * v301) = *(float *)(v296 + 4 * v76);
                      v76 += v299;
                      int v300 = v292[1];
                      ++v301;
                    }
                    while ((int)v301 < v300);
                    int v293 = *v292;
                    v295 += v301;
                  }
                  uint64_t result = v300;
                  uint64_t v76 = v76 + v298 - v299 * v300;
                  ++v294;
                }
                while (v294 < v293);
              }
              break;
            case 3:
              uint64_t v302 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v303 = 0;
                uint64_t v304 = 0;
                uint64_t v305 = *(void *)(v77 + 152);
                uint64_t v306 = v8[19];
                uint64_t v307 = *a5;
                uint64_t v308 = **a5;
                uint64_t v309 = (*a5)[1];
                int v310 = v302[1];
                do
                {
                  if (v310 >= 1)
                  {
                    int v311 = 0;
                    uint64_t v312 = *a5;
                    uint64_t v313 = v307[2];
                    int v314 = v302[2];
                    do
                    {
                      if (v314 >= 1)
                      {
                        uint64_t v315 = 0;
                        uint64_t v316 = v312[2];
                        do
                        {
                          *(_DWORD *)(v306 + 4 * v304 + 4 * v315) = *(float *)(v305 + 4 * v76);
                          v76 += v316;
                          int v314 = v302[2];
                          ++v315;
                        }
                        while ((int)v315 < v314);
                        int v310 = v302[1];
                        v304 += v315;
                      }
                      uint64_t v76 = v76 + v309 - v313 * v314;
                      ++v311;
                    }
                    while (v311 < v310);
                    uint64_t result = *v302;
                  }
                  uint64_t v76 = v76 + v308 - v309 * v310;
                  ++v303;
                }
                while (v303 < (int)result);
              }
              break;
            case 4:
              int v317 = *a4;
              int v318 = **a4;
              if (v318 >= 1)
              {
                int v319 = 0;
                uint64_t v320 = 0;
                uint64_t v321 = *(void *)(v77 + 152);
                uint64_t v322 = v8[19];
                uint64_t v323 = *a5;
                uint64_t v324 = **a5;
                uint64_t v325 = (*a5)[1];
                int v326 = v317[1];
                do
                {
                  if (v326 >= 1)
                  {
                    int v327 = 0;
                    uint64_t v328 = *a5;
                    uint64_t v329 = v323[2];
                    int v330 = v317[2];
                    do
                    {
                      if (v330 >= 1)
                      {
                        int v331 = 0;
                        int v332 = *a5;
                        uint64_t v333 = v328[2];
                        uint64_t v334 = v328[3];
                        int v335 = v317[3];
                        do
                        {
                          if (v335 >= 1)
                          {
                            uint64_t v336 = 0;
                            uint64_t v337 = v332[3];
                            do
                            {
                              *(_DWORD *)(v322 + 4 * v320 + 4 * v336) = *(float *)(v321 + 4 * v76);
                              v76 += v337;
                              int v335 = v317[3];
                              ++v336;
                            }
                            while ((int)v336 < v335);
                            int v330 = v317[2];
                            v320 += v336;
                          }
                          uint64_t v76 = v76 + v333 - v334 * v335;
                          ++v331;
                        }
                        while (v331 < v330);
                        int v326 = v317[1];
                      }
                      uint64_t v76 = v76 + v325 - v329 * v330;
                      ++v327;
                    }
                    while (v327 < v326);
                    int v318 = *v317;
                  }
                  uint64_t result = v326;
                  uint64_t v76 = v76 + v324 - v325 * v326;
                  ++v319;
                }
                while (v319 < v318);
              }
              break;
            default:
              uint64_t v282 = v8[6];
              if (v282)
              {
                uint64_t v283 = 0;
                uint64_t v284 = *(void *)(v77 + 152) + 4 * v76;
                uint64_t v285 = v8[19];
                uint64_t v286 = *a4;
                uint64_t v287 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v288 = *a5;
                do
                {
                  uint64_t v289 = 0;
                  if ((v287 & 0x80000000) == 0)
                  {
                    uint64_t v290 = v287;
                    LODWORD(result) = v283;
                    do
                    {
                      ldiv_t v291 = ldiv((int)result, v286[v290]);
                      uint64_t result = v291.quot;
                      v289 += v288[v290--] * v291.rem;
                    }
                    while (v290 != -1);
                  }
                  *(_DWORD *)(v285 + 4 * v283++) = *(float *)(v284 + 4 * v289);
                }
                while (v283 != v282);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1431 = *a8;
          uint64_t v1437 = *a7;
          uint64_t v84 = *(void **)result;
          uint64_t v85 = v84[1] - *v84;
          switch(v85 >> 2)
          {
            case 1:
              uint64_t v86 = (v85 << 30) - 0x100000000;
              int v87 = *(int *)((char *)*a4 + (v86 >> 30));
              if (v87 >= 1)
              {
                uint64_t v88 = v86 >> 29;
                uint64_t v89 = *(uint64_t *)((char *)*a5 + v88);
                uint64_t v90 = *(void *)(*a6 + v88);
                uint64_t v91 = (_DWORD *)(v8[19] + 4 * v1431);
                uint64_t v92 = (float *)(v84[19] + 4 * v1437);
                uint64_t v93 = 4 * v90;
                uint64_t v94 = 4 * v89;
                do
                {
                  *uint64_t v91 = *v92;
                  uint64_t v91 = (_DWORD *)((char *)v91 + v93);
                  uint64_t v92 = (float *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              uint64_t v787 = (v85 << 30) - 0x200000000;
              uint64_t v788 = *a4;
              int v789 = *(int *)((char *)*a4 + (v787 >> 30));
              if (v789 >= 1)
              {
                int v790 = 0;
                uint64_t v791 = v787 >> 29;
                uint64_t v792 = *(uint64_t *)((char *)*a5 + v791);
                uint64_t v793 = *(void *)(*a6 + v791);
                uint64_t v794 = (v85 << 30) - 0x100000000;
                uint64_t v795 = *(uint64_t *)((char *)*a5 + (v794 >> 29));
                uint64_t v796 = *(void *)(*a6 + (v794 >> 29));
                uint64_t v797 = v794 >> 32;
                uint64_t v798 = 4 * v1431;
                uint64_t v799 = 4 * v793;
                uint64_t v800 = 4 * v796;
                uint64_t v801 = 4 * v1437;
                uint64_t v802 = 4 * v792;
                uint64_t result = 4 * v795;
                do
                {
                  int v803 = v788[v797];
                  if (v803 >= 1)
                  {
                    uint64_t v804 = (_DWORD *)(v8[19] + v798);
                    uint64_t v805 = (float *)(v84[19] + v801);
                    do
                    {
                      *uint64_t v804 = *v805;
                      uint64_t v804 = (_DWORD *)((char *)v804 + v800);
                      uint64_t v805 = (float *)((char *)v805 + result);
                      --v803;
                    }
                    while (v803);
                  }
                  ++v790;
                  v798 += v799;
                  v801 += v802;
                }
                while (v790 != v789);
              }
              break;
            case 3:
              uint64_t v806 = (v85 << 30) - 0x300000000;
              uint64_t v807 = *a4;
              int v808 = *(int *)((char *)*a4 + (v806 >> 30));
              if (v808 >= 1)
              {
                int v809 = 0;
                int v810 = *a5;
                uint64_t v811 = v806 >> 29;
                uint64_t v812 = *(uint64_t *)((char *)*a5 + (v806 >> 29));
                uint64_t v813 = *a6;
                uint64_t v814 = *(void *)(*a6 + v811);
                uint64_t v815 = v85 << 30;
                uint64_t v816 = (v85 << 30) - 0x200000000;
                uint64_t v817 = v816 >> 32;
                v816 >>= 29;
                uint64_t v818 = *(uint64_t *)((char *)*a5 + v816);
                uint64_t v819 = *(void *)(*a6 + v816);
                uint64_t v820 = (v815 - 0x100000000) >> 32;
                uint64_t v821 = 4 * v1431;
                uint64_t v822 = 4 * v814;
                uint64_t v823 = 4 * v819;
                uint64_t result = 4 * v1437;
                uint64_t v824 = 4 * v812;
                uint64_t v825 = 4 * v818;
                do
                {
                  int v826 = v807[v817];
                  if (v826 >= 1)
                  {
                    int v827 = 0;
                    uint64_t v828 = (void *)*v11;
                    uint64_t v829 = 4 * *(void *)(v813 + 8 * v820);
                    uint64_t v830 = 4 * v810[v820];
                    uint64_t v831 = result;
                    uint64_t v832 = v821;
                    do
                    {
                      int v833 = v807[v820];
                      if (v833 >= 1)
                      {
                        int v834 = (_DWORD *)(v828[19] + v832);
                        uint64_t v835 = (float *)(v84[19] + v831);
                        do
                        {
                          _DWORD *v834 = *v835;
                          int v834 = (_DWORD *)((char *)v834 + v829);
                          uint64_t v835 = (float *)((char *)v835 + v830);
                          --v833;
                        }
                        while (v833);
                      }
                      ++v827;
                      v832 += v823;
                      v831 += v825;
                    }
                    while (v827 != v826);
                  }
                  ++v809;
                  v821 += v822;
                  result += v824;
                }
                while (v809 != v808);
              }
              break;
            case 4:
              uint64_t v836 = (v85 << 30) - 0x400000000;
              uint64_t v837 = *a4;
              int v1581 = *(int *)((char *)*a4 + (v836 >> 30));
              if (v1581 >= 1)
              {
                int v838 = 0;
                int v839 = *a5;
                uint64_t v840 = v836 >> 29;
                uint64_t v841 = v85 << 30;
                uint64_t v842 = *a6;
                uint64_t v1563 = (v841 - 0x300000000) >> 32;
                uint64_t v843 = (v841 - 0x300000000) >> 29;
                uint64_t v844 = *(uint64_t *)((char *)*a5 + v843);
                uint64_t v845 = *(void *)(*a6 + v843);
                uint64_t v846 = (v841 - 0x200000000) >> 32;
                uint64_t v847 = (v841 - 0x100000000) >> 32;
                uint64_t v848 = 4 * v1431;
                uint64_t v1546 = 4 * *(void *)(*a6 + v840);
                uint64_t result = 4 * v845;
                uint64_t v849 = 4 * v1437;
                uint64_t v1531 = 4 * *(uint64_t *)((char *)*a5 + v840);
                uint64_t v850 = 4 * v844;
                do
                {
                  int v851 = v837[v1563];
                  if (v851 >= 1)
                  {
                    int v852 = 0;
                    uint64_t v853 = 4 * *(void *)(v842 + 8 * v846);
                    uint64_t v854 = 4 * v839[v846];
                    uint64_t v855 = v849;
                    uint64_t v856 = v848;
                    do
                    {
                      int v857 = v837[v846];
                      if (v857 >= 1)
                      {
                        int v858 = 0;
                        uint64_t v859 = (void *)*v11;
                        uint64_t v860 = 4 * *(void *)(v842 + 8 * v847);
                        uint64_t v861 = 4 * v839[v847];
                        uint64_t v862 = v855;
                        uint64_t v863 = v856;
                        do
                        {
                          int v864 = v837[v847];
                          if (v864 >= 1)
                          {
                            int v865 = (_DWORD *)(v859[19] + v863);
                            uint64_t v866 = (float *)(v84[19] + v862);
                            do
                            {
                              *int v865 = *v866;
                              int v865 = (_DWORD *)((char *)v865 + v860);
                              uint64_t v866 = (float *)((char *)v866 + v861);
                              --v864;
                            }
                            while (v864);
                          }
                          ++v858;
                          v863 += v853;
                          v862 += v854;
                        }
                        while (v858 != v857);
                      }
                      ++v852;
                      v856 += result;
                      v855 += v850;
                    }
                    while (v852 != v851);
                  }
                  ++v838;
                  v848 += v1546;
                  v849 += v1531;
                }
                while (v838 != v1581);
              }
              break;
            case 5:
              uint64_t v867 = (v85 << 30) - 0x500000000;
              uint64_t v868 = *a4;
              int v1484 = *(int *)((char *)*a4 + (v867 >> 30));
              if (v1484 >= 1)
              {
                int v1494 = 0;
                uint64_t v869 = *a5;
                uint64_t v870 = v867 >> 29;
                uint64_t v871 = *a6;
                uint64_t v872 = v85 << 30;
                uint64_t v873 = (v872 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v873);
                uint64_t v1474 = (v872 - 0x400000000) >> 32;
                uint64_t v874 = *(void *)(*a6 + v873);
                uint64_t v1564 = (v872 - 0x300000000) >> 32;
                uint64_t v875 = (v872 - 0x200000000) >> 32;
                uint64_t v876 = (v872 - 0x100000000) >> 32;
                uint64_t v1517 = 4 * v1431;
                uint64_t v1464 = 4 * *(void *)(*a6 + v870);
                uint64_t v1547 = 4 * v874;
                uint64_t v1505 = 4 * v1437;
                uint64_t v1455 = 4 * *(uint64_t *)((char *)*a5 + v870);
                uint64_t v1532 = 4 * result;
                do
                {
                  int v1582 = v868[v1474];
                  if (v1582 >= 1)
                  {
                    int v877 = 0;
                    uint64_t v878 = 4 * *(void *)(v871 + 8 * v1564);
                    uint64_t v879 = 4 * v869[v1564];
                    uint64_t v880 = v1505;
                    uint64_t v881 = v1517;
                    do
                    {
                      int v882 = v868[v1564];
                      if (v882 >= 1)
                      {
                        int v883 = 0;
                        uint64_t v884 = 4 * *(void *)(v871 + 8 * v875);
                        uint64_t v885 = 4 * v869[v875];
                        uint64_t v886 = v880;
                        uint64_t v887 = v881;
                        do
                        {
                          int v888 = v868[v875];
                          if (v888 >= 1)
                          {
                            int v889 = 0;
                            uint64_t result = *v11;
                            uint64_t v890 = 4 * *(void *)(v871 + 8 * v876);
                            uint64_t v891 = 4 * v869[v876];
                            uint64_t v892 = v886;
                            uint64_t v893 = v887;
                            do
                            {
                              int v894 = v868[v876];
                              if (v894 >= 1)
                              {
                                int v895 = (_DWORD *)(*(void *)(result + 152) + v893);
                                uint64_t v896 = (float *)(v84[19] + v892);
                                do
                                {
                                  _DWORD *v895 = *v896;
                                  int v895 = (_DWORD *)((char *)v895 + v890);
                                  uint64_t v896 = (float *)((char *)v896 + v891);
                                  --v894;
                                }
                                while (v894);
                              }
                              ++v889;
                              v893 += v884;
                              v892 += v885;
                            }
                            while (v889 != v888);
                          }
                          ++v883;
                          v887 += v878;
                          v886 += v879;
                        }
                        while (v883 != v882);
                      }
                      ++v877;
                      v881 += v1547;
                      v880 += v1532;
                    }
                    while (v877 != v1582);
                  }
                  v1517 += v1464;
                  v1505 += v1455;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              uint64_t v749 = (char *)a4[1];
              LODWORD(v750) = 1;
              uint64_t v751 = -20;
              do
              {
                uint64_t v750 = *(int *)&v749[v751] * (uint64_t)(int)v750;
                v751 += 4;
              }
              while (v751);
              unint64_t v1427 = v84[6];
              if (v1427)
              {
                uint64_t result = 0;
                uint64_t v752 = (v85 << 30) - 0x500000000;
                uint64_t v753 = *a4;
                uint64_t v1463 = *v8;
                uint64_t v754 = *a5;
                uint64_t v1412 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1417 = ((unint64_t)(v749 - (char *)*a4) >> 2) - 1;
                uint64_t v1408 = v752 >> 32;
                uint64_t v755 = *a6;
                uint64_t v1473 = ((v85 << 30) - 0x400000000) >> 32;
                uint64_t v1562 = ((v85 << 30) - 0x300000000) >> 32;
                uint64_t v756 = ((v85 << 30) - 0x200000000) >> 32;
                uint64_t v757 = ((v85 << 30) - 0x100000000) >> 32;
                uint64_t v1448 = 4 * *(uint64_t *)((char *)*a5 + (v752 >> 29));
                uint64_t v1454 = 4 * *(void *)(*a6 + (v752 >> 29));
                uint64_t v1422 = v750;
                do
                {
                  uint64_t v758 = v1417;
                  uint64_t v1443 = result;
                  uint64_t v759 = 0;
                  if ((v1417 & 0x80000000) != 0)
                  {
                    uint64_t v760 = v1412;
                  }
                  else
                  {
                    uint64_t v760 = v1412;
                    do
                    {
                      ldiv_t v761 = ldiv((int)result, v753[v758]);
                      LODWORD(result) = v761.quot;
                      v759 += v754[v758--] * v761.rem;
                    }
                    while (v758 != -1);
                  }
                  uint64_t v762 = 0;
                  if ((v760 & 0x80000000) == 0)
                  {
                    int v763 = v1443;
                    do
                    {
                      ldiv_t v764 = ldiv(v763, *(int *)(v1463 + 4 * v760));
                      int v763 = v764.quot;
                      v762 += *(void *)(v755 + 8 * v760--) * v764.rem;
                    }
                    while (v760 != -1);
                  }
                  int v1483 = v753[v1408];
                  if (v1483 >= 1)
                  {
                    int v765 = 0;
                    uint64_t v1516 = 4 * (v762 + v1431);
                    uint64_t v1545 = 4 * *(void *)(v755 + 8 * v1473);
                    uint64_t v1504 = 4 * (v759 + v1437);
                    uint64_t v1530 = 4 * v754[v1473];
                    do
                    {
                      int v1493 = v765;
                      int v1580 = v753[v1473];
                      if (v1580 >= 1)
                      {
                        int v766 = 0;
                        uint64_t v767 = 4 * *(void *)(v755 + 8 * v1562);
                        uint64_t v768 = 4 * v754[v1562];
                        uint64_t v770 = v1504;
                        uint64_t v769 = v1516;
                        do
                        {
                          int v771 = v753[v1562];
                          if (v771 >= 1)
                          {
                            int v772 = 0;
                            uint64_t v773 = 4 * *(void *)(v755 + 8 * v756);
                            uint64_t v774 = 4 * v754[v756];
                            uint64_t v775 = v770;
                            uint64_t v776 = v769;
                            do
                            {
                              int v777 = v753[v756];
                              if (v777 >= 1)
                              {
                                int v778 = 0;
                                uint64_t v779 = (void *)*v11;
                                uint64_t v780 = 4 * *(void *)(v755 + 8 * v757);
                                uint64_t v781 = 4 * v754[v757];
                                uint64_t v782 = v775;
                                uint64_t v783 = v776;
                                do
                                {
                                  int v784 = v753[v757];
                                  if (v784 >= 1)
                                  {
                                    int v785 = (_DWORD *)(v779[19] + v783);
                                    uint64_t v786 = (float *)(v84[19] + v782);
                                    do
                                    {
                                      *int v785 = *v786;
                                      int v785 = (_DWORD *)((char *)v785 + v780);
                                      uint64_t v786 = (float *)((char *)v786 + v781);
                                      --v784;
                                    }
                                    while (v784);
                                  }
                                  ++v778;
                                  v783 += v773;
                                  v782 += v774;
                                }
                                while (v778 != v777);
                              }
                              ++v772;
                              v776 += v767;
                              v775 += v768;
                            }
                            while (v772 != v771);
                          }
                          ++v766;
                          v769 += v1545;
                          v770 += v1530;
                        }
                        while (v766 != v1580);
                      }
                      int v765 = v1493 + 1;
                      v1516 += v1454;
                      v1504 += v1448;
                    }
                    while (v1493 + 1 != v1483);
                  }
                  uint64_t result = v1443 + v1422;
                }
                while (v1427 > v1443 + v1422);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
LABEL_10:
          break;
        case 1:
          uint64_t v95 = *(void *)(*(void *)result + 160);
          if (v95)
          {
            uint64_t v96 = *(float **)(*(void *)result + 152);
            uint64_t v97 = (unsigned char *)v8[19];
            uint64_t v98 = 4 * v95;
            do
            {
              float v99 = *v96++;
              *v97++ = (int)v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          uint64_t v100 = *a7;
          uint64_t v101 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                uint64_t v102 = 0;
                uint64_t v103 = *(void *)(v101 + 152);
                uint64_t v104 = v8[19];
                do
                {
                  *(unsigned char *)(v104 + v102) = (int)*(float *)(v103 + 4 * v100);
                  v100 += **a5;
                  ++v102;
                }
                while (**a4 > (int)v102);
              }
              break;
            case 2:
              ldiv_t v347 = *a4;
              int v348 = **a4;
              if (v348 >= 1)
              {
                int v349 = 0;
                uint64_t v350 = 0;
                uint64_t v351 = *(void *)(v101 + 152);
                uint64_t v352 = v8[19];
                do
                {
                  int v353 = v347[1];
                  if (v353 < 1)
                  {
                    int v354 = *a5;
                    uint64_t v355 = (*a5)[1];
                  }
                  else
                  {
                    uint64_t result = 0;
                    do
                    {
                      *(unsigned char *)(v352 + v350 + result) = (int)*(float *)(v351 + 4 * v100);
                      int v354 = *a5;
                      uint64_t v355 = (*a5)[1];
                      v100 += v355;
                      ldiv_t v347 = *a4;
                      int v353 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v353);
                    int v348 = *v347;
                    v350 += result;
                  }
                  uint64_t v100 = *v354 + v100 - v355 * v353;
                  ++v349;
                }
                while (v349 < v348);
              }
              break;
            case 3:
              uint64_t v356 = *a4;
              int v357 = **a4;
              if (v357 >= 1)
              {
                int v358 = 0;
                uint64_t v359 = 0;
                uint64_t v360 = *(void *)(v101 + 152);
                uint64_t v361 = v8[19];
                do
                {
                  int v362 = v356[1];
                  if (v362 < 1)
                  {
                    uint64_t v366 = *a5;
                    uint64_t v367 = (*a5)[1];
                  }
                  else
                  {
                    for (int m = 0; m < v362; ++m)
                    {
                      int v364 = v356[2];
                      if (v364 < 1)
                      {
                        uint64_t v366 = *a5;
                        uint64_t result = (*a5)[2];
                      }
                      else
                      {
                        uint64_t v365 = 0;
                        do
                        {
                          *(unsigned char *)(v361 + v359 + v365) = (int)*(float *)(v360 + 4 * v100);
                          uint64_t v366 = *a5;
                          uint64_t result = (*a5)[2];
                          v100 += result;
                          uint64_t v356 = *a4;
                          int v364 = (*a4)[2];
                          ++v365;
                        }
                        while ((int)v365 < v364);
                        v359 += v365;
                      }
                      uint64_t v367 = v366[1];
                      uint64_t v100 = v367 + v100 - result * v364;
                      int v362 = v356[1];
                    }
                    int v357 = *v356;
                  }
                  uint64_t v100 = *v366 + v100 - v367 * v362;
                  ++v358;
                }
                while (v358 < v357);
              }
              break;
            case 4:
              int v368 = *a4;
              int v369 = **a4;
              if (v369 >= 1)
              {
                int v370 = 0;
                uint64_t v371 = 0;
                uint64_t v372 = *(void *)(v101 + 152);
                uint64_t v373 = v8[19];
                do
                {
                  int v374 = v368[1];
                  if (v374 < 1)
                  {
                    int v380 = *a5;
                    uint64_t v382 = (*a5)[1];
                  }
                  else
                  {
                    for (int n = 0; n < v374; ++n)
                    {
                      int v376 = v368[2];
                      if (v376 < 1)
                      {
                        int v380 = *a5;
                        uint64_t v381 = (*a5)[2];
                      }
                      else
                      {
                        for (iint i = 0; ii < v376; ++ii)
                        {
                          int v378 = v368[3];
                          if (v378 < 1)
                          {
                            int v380 = *a5;
                            uint64_t result = (*a5)[3];
                          }
                          else
                          {
                            uint64_t v379 = 0;
                            do
                            {
                              *(unsigned char *)(v373 + v371 + v379) = (int)*(float *)(v372 + 4 * v100);
                              int v380 = *a5;
                              uint64_t result = (*a5)[3];
                              v100 += result;
                              int v368 = *a4;
                              int v378 = (*a4)[3];
                              ++v379;
                            }
                            while ((int)v379 < v378);
                            v371 += v379;
                          }
                          uint64_t v381 = v380[2];
                          uint64_t v100 = v381 + v100 - result * v378;
                          int v376 = v368[2];
                        }
                      }
                      uint64_t v382 = v380[1];
                      uint64_t v100 = v382 + v100 - v381 * v376;
                      int v374 = v368[1];
                    }
                    int v369 = *v368;
                  }
                  uint64_t v100 = *v380 + v100 - v382 * v374;
                  ++v370;
                }
                while (v370 < v369);
              }
              break;
            default:
              if (v8[6])
              {
                unint64_t v338 = 0;
                uint64_t v339 = *(void *)(v101 + 152) + 4 * v100;
                uint64_t v340 = v8[19];
                do
                {
                  int v341 = *a4;
                  unint64_t v342 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v343 = 0;
                  uint64_t v344 = (v342 - 1);
                  if ((int)v342 - 1 >= 0)
                  {
                    uint64_t v345 = *a5;
                    LODWORD(result) = v338;
                    do
                    {
                      ldiv_t v346 = ldiv((int)result, v341[v344]);
                      uint64_t result = v346.quot;
                      v343 += v345[v344--] * v346.rem;
                    }
                    while (v344 != -1);
                  }
                  *(unsigned char *)(v340 + v338++) = (int)*(float *)(v339 + 4 * v343);
                }
                while (v338 < *(void *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          uint64_t v1576 = *a7;
          uint64_t v105 = *a8;
          uint64_t v106 = *(void **)result;
          uint64_t v107 = *(void *)(*(void *)result + 8) - **(void **)result;
          switch(v107 >> 2)
          {
            case 1:
              uint64_t v108 = (v107 << 30) - 0x100000000;
              int v109 = *(int *)((char *)*a4 + (v108 >> 30));
              if (v109 >= 1)
              {
                uint64_t v110 = v108 >> 29;
                uint64_t v111 = *(uint64_t *)((char *)*a5 + v110);
                uint64_t v112 = *(void *)(*a6 + v110);
                uint64_t v113 = (unsigned char *)(v8[19] + v105);
                uint64_t v114 = (float *)(v106[19] + 4 * v1576);
                uint64_t v115 = 4 * v111;
                do
                {
                  unsigned char *v113 = (int)*v114;
                  v113 += v112;
                  uint64_t v114 = (float *)((char *)v114 + v115);
                  --v109;
                }
                while (v109);
              }
              break;
            case 2:
              uint64_t v919 = (v107 << 30) - 0x200000000;
              int v920 = *(int *)((char *)*a4 + (v919 >> 30));
              if (v920 >= 1)
              {
                int v921 = 0;
                uint64_t v922 = v919 >> 29;
                uint64_t v923 = *(uint64_t *)((char *)*a5 + v922);
                uint64_t v924 = *(void *)(*a6 + v922);
                uint64_t v925 = 4 * v1576;
                uint64_t v926 = 4 * v923;
                do
                {
                  uint64_t v927 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                  int v928 = *(int *)((char *)*a4 + (v927 >> 30));
                  if (v928 >= 1)
                  {
                    uint64_t v929 = v927 >> 29;
                    uint64_t v930 = *(uint64_t *)((char *)*a5 + v929);
                    uint64_t v931 = *(void *)(*a6 + v929);
                    uint64_t v932 = *(void *)(*(void *)a2 + 152);
                    uint64_t v933 = (float *)(*(void *)(*(void *)v12 + 152) + v925);
                    uint64_t result = 4 * v930;
                    do
                    {
                      *(unsigned char *)(v932 + v105) = (int)*v933;
                      v932 += v931;
                      uint64_t v933 = (float *)((char *)v933 + result);
                      --v928;
                    }
                    while (v928);
                  }
                  v105 += v924;
                  ++v921;
                  v925 += v926;
                }
                while (v921 != v920);
              }
              break;
            case 3:
              uint64_t v934 = (v107 << 30) - 0x300000000;
              int v935 = *(int *)((char *)*a4 + (v934 >> 30));
              if (v935 >= 1)
              {
                int v936 = 0;
                uint64_t v937 = v934 >> 29;
                uint64_t v938 = *(uint64_t *)((char *)*a5 + v937);
                uint64_t v939 = *(void *)(*a6 + v937);
                uint64_t v940 = 4 * v1576;
                uint64_t v941 = 4 * v938;
                do
                {
                  uint64_t v942 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x200000000;
                  int v943 = *(int *)((char *)*a4 + (v942 >> 30));
                  if (v943 >= 1)
                  {
                    int v944 = 0;
                    uint64_t v945 = v942 >> 29;
                    uint64_t v946 = *(uint64_t *)((char *)*a5 + v945);
                    uint64_t v947 = *(void *)(*a6 + v945);
                    uint64_t result = 4 * v946;
                    uint64_t v948 = v940;
                    uint64_t v949 = v105;
                    do
                    {
                      uint64_t v950 = ((*(void *)(*(void *)v12 + 8) - **(void **)v12) << 30) - 0x100000000;
                      int v951 = *(int *)((char *)*a4 + (v950 >> 30));
                      if (v951 >= 1)
                      {
                        uint64_t v952 = v950 >> 29;
                        uint64_t v953 = *(uint64_t *)((char *)*a5 + v952);
                        uint64_t v954 = *(void *)(*a6 + v952);
                        uint64_t v955 = *(void *)(*v11 + 152);
                        uint64_t v956 = (float *)(*(void *)(*(void *)v12 + 152) + v948);
                        uint64_t v957 = 4 * v953;
                        do
                        {
                          *(unsigned char *)(v955 + v949) = (int)*v956;
                          v955 += v954;
                          uint64_t v956 = (float *)((char *)v956 + v957);
                          --v951;
                        }
                        while (v951);
                      }
                      v949 += v947;
                      ++v944;
                      v948 += result;
                    }
                    while (v944 != v943);
                  }
                  v105 += v939;
                  ++v936;
                  v940 += v941;
                }
                while (v936 != v935);
              }
              break;
            case 4:
              uint64_t v739 = a4;
              uint64_t v740 = a5;
              uint64_t v741 = a6;
              uint64_t v742 = *a7;
              uint64_t v743 = *a8;
LABEL_560:
              break;
            case 5:
              uint64_t v958 = (v107 << 30) - 0x500000000;
              int v959 = *(int *)((char *)*a4 + (v958 >> 30));
              if (v959 >= 1)
              {
                uint64_t v960 = v958 >> 29;
                uint64_t v961 = *(uint64_t *)((char *)*a5 + v960);
                uint64_t v962 = *(void *)(*a6 + v960);
                do
                {
                  v1576 += v961;
                  v105 += v962;
                  --v959;
                }
                while (v959);
              }
              break;
            default:
              LODWORD(v897) = 1;
              uint64_t v898 = 0x3FFFFFFFFFFFFFFBLL;
              do
                uint64_t v897 = a4[1][v898++] * (uint64_t)(int)v897;
              while (v898 * 4);
              if (v106[6])
              {
                uint64_t result = 0;
                uint64_t v1506 = *a8;
                uint64_t v1518 = v897;
                do
                {
                  uint64_t v899 = *a4;
                  unint64_t v900 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  uint64_t v901 = (v900 - 1);
                  uint64_t v1533 = v106;
                  uint64_t v1548 = result;
                  uint64_t v902 = 0;
                  if ((int)v900 - 1 >= 0)
                  {
                    uint64_t v903 = *a5;
                    do
                    {
                      ldiv_t v904 = ldiv((int)result, v899[v901]);
                      LODWORD(result) = v904.quot;
                      v902 += v903[v901--] * v904.rem;
                    }
                    while (v901 != -1);
                  }
                  uint64_t v905 = *(void *)*v11;
                  unint64_t v906 = (unint64_t)(*(void *)(*v11 + 8) - v905) >> 2;
                  uint64_t v907 = *a6;
                  uint64_t v908 = 0;
                  uint64_t v909 = (v906 - 1);
                  if ((int)v906 - 1 >= 0)
                  {
                    int v910 = v1548;
                    do
                    {
                      ldiv_t v911 = ldiv(v910, *(int *)(v905 + 4 * v909));
                      int v910 = v911.quot;
                      v908 += *(void *)(v907 + 8 * v909--) * v911.rem;
                    }
                    while (v909 != -1);
                  }
                  uint64_t v106 = v1533;
                  uint64_t v912 = ((v106[1] - *v106) << 30) - 0x500000000;
                  int v913 = *(int *)((char *)v899 + (v912 >> 30));
                  if (v913 >= 1)
                  {
                    uint64_t v914 = v902 + v1576;
                    uint64_t v915 = v912 >> 29;
                    uint64_t v916 = *(uint64_t *)((char *)*a5 + v915);
                    uint64_t v917 = *(void *)(v907 + v915);
                    uint64_t v918 = v908 + v1506;
                    do
                    {
                      v914 += v916;
                      v918 += v917;
                      --v913;
                    }
                    while (v913);
                    uint64_t v106 = *(void **)v12;
                  }
                  uint64_t result = v1548 + v1518;
                }
                while (v106[6] > (unint64_t)(v1548 + v1518));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          uint64_t v19 = v8[6];
          if (v19)
          {
            int v20 = (int)**(float **)(*(void *)result + 152);
            int v21 = (int *)v8[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          uint64_t v116 = *(void *)(*(void *)result + 160);
          if (v116)
          {
            uint64_t v117 = *(float **)(*(void *)result + 152);
            uint64_t v118 = (_DWORD *)v8[19];
            uint64_t v119 = 4 * v116;
            do
            {
              float v120 = *v117++;
              *v118++ = (int)v120;
              v119 -= 4;
            }
            while (v119);
          }
          break;
        case 2:
          uint64_t v121 = *a7;
          uint64_t v122 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v123 = *a4;
              if (**a4 >= 1)
              {
                uint64_t v124 = 0;
                uint64_t v125 = *(void *)(v122 + 152);
                uint64_t v126 = v8[19];
                uint64_t v127 = **a5;
                uint64_t v128 = (float *)(v125 + 4 * v121);
                do
                {
                  *(_DWORD *)(v126 + 4 * v124) = (int)*v128;
                  v128 += v127;
                  ++v124;
                }
                while (*v123 > (int)v124);
              }
              break;
            case 2:
              ldiv_t v393 = *a4;
              int v394 = **a4;
              if (v394 >= 1)
              {
                int v395 = 0;
                uint64_t v396 = 0;
                uint64_t v397 = *(void *)(v122 + 152);
                uint64_t v398 = v8[19];
                uint64_t v399 = **a5;
                uint64_t v400 = (*a5)[1];
                int v401 = v393[1];
                do
                {
                  if (v401 >= 1)
                  {
                    uint64_t v402 = 0;
                    do
                    {
                      *(_DWORD *)(v398 + 4 * v396 + 4 * v402) = (int)*(float *)(v397 + 4 * v121);
                      v121 += v400;
                      int v401 = v393[1];
                      ++v402;
                    }
                    while ((int)v402 < v401);
                    int v394 = *v393;
                    v396 += v402;
                  }
                  uint64_t result = v401;
                  uint64_t v121 = v121 + v399 - v400 * v401;
                  ++v395;
                }
                while (v395 < v394);
              }
              break;
            case 3:
              uint64_t v403 = *a4;
              uint64_t result = **a4;
              if ((int)result >= 1)
              {
                int v404 = 0;
                uint64_t v405 = 0;
                uint64_t v406 = *(void *)(v122 + 152);
                uint64_t v407 = v8[19];
                uint64_t v408 = *a5;
                uint64_t v409 = **a5;
                uint64_t v410 = (*a5)[1];
                int v411 = v403[1];
                do
                {
                  if (v411 >= 1)
                  {
                    int v412 = 0;
                    uint64_t v413 = *a5;
                    uint64_t v414 = v408[2];
                    int v415 = v403[2];
                    do
                    {
                      if (v415 >= 1)
                      {
                        uint64_t v416 = 0;
                        uint64_t v417 = v413[2];
                        do
                        {
                          *(_DWORD *)(v407 + 4 * v405 + 4 * v416) = (int)*(float *)(v406 + 4 * v121);
                          v121 += v417;
                          int v415 = v403[2];
                          ++v416;
                        }
                        while ((int)v416 < v415);
                        int v411 = v403[1];
                        v405 += v416;
                      }
                      uint64_t v121 = v121 + v410 - v414 * v415;
                      ++v412;
                    }
                    while (v412 < v411);
                    uint64_t result = *v403;
                  }
                  uint64_t v121 = v121 + v409 - v410 * v411;
                  ++v404;
                }
                while (v404 < (int)result);
              }
              break;
            case 4:
              int v418 = *a4;
              int v419 = **a4;
              if (v419 >= 1)
              {
                int v420 = 0;
                uint64_t v421 = 0;
                uint64_t v422 = *(void *)(v122 + 152);
                uint64_t v423 = v8[19];
                uint64_t v424 = *a5;
                uint64_t v425 = **a5;
                uint64_t v426 = (*a5)[1];
                int v427 = v418[1];
                do
                {
                  if (v427 >= 1)
                  {
                    int v428 = 0;
                    uint64_t v429 = *a5;
                    uint64_t v430 = v424[2];
                    int v431 = v418[2];
                    do
                    {
                      if (v431 >= 1)
                      {
                        int v432 = 0;
                        int v433 = *a5;
                        uint64_t v434 = v429[2];
                        uint64_t v435 = v429[3];
                        int v436 = v418[3];
                        do
                        {
                          if (v436 >= 1)
                          {
                            uint64_t v437 = 0;
                            uint64_t v438 = v433[3];
                            do
                            {
                              *(_DWORD *)(v423 + 4 * v421 + 4 * v437) = (int)*(float *)(v422 + 4 * v121);
                              v121 += v438;
                              int v436 = v418[3];
                              ++v437;
                            }
                            while ((int)v437 < v436);
                            int v431 = v418[2];
                            v421 += v437;
                          }
                          uint64_t v121 = v121 + v434 - v435 * v436;
                          ++v432;
                        }
                        while (v432 < v431);
                        int v427 = v418[1];
                      }
                      uint64_t v121 = v121 + v426 - v430 * v431;
                      ++v428;
                    }
                    while (v428 < v427);
                    int v419 = *v418;
                  }
                  uint64_t result = v427;
                  uint64_t v121 = v121 + v425 - v426 * v427;
                  ++v420;
                }
                while (v420 < v419);
              }
              break;
            default:
              uint64_t v383 = v8[6];
              if (v383)
              {
                uint64_t v384 = 0;
                uint64_t v385 = *(void *)(v122 + 152) + 4 * v121;
                uint64_t v386 = v8[19];
                uint64_t v387 = *a4;
                uint64_t v388 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v389 = *a5;
                do
                {
                  uint64_t v390 = 0;
                  if ((v388 & 0x80000000) == 0)
                  {
                    uint64_t v391 = v388;
                    LODWORD(result) = v384;
                    do
                    {
                      ldiv_t v392 = ldiv((int)result, v387[v391]);
                      uint64_t result = v392.quot;
                      v390 += v389[v391--] * v392.rem;
                    }
                    while (v391 != -1);
                  }
                  *(_DWORD *)(v386 + 4 * v384++) = (int)*(float *)(v385 + 4 * v390);
                }
                while (v384 != v383);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1432 = *a8;
          uint64_t v1438 = *a7;
          uint64_t v129 = *(void **)result;
          uint64_t v130 = v129[1] - *v129;
          switch(v130 >> 2)
          {
            case 1:
              uint64_t v131 = (v130 << 30) - 0x100000000;
              int v132 = *(int *)((char *)*a4 + (v131 >> 30));
              if (v132 >= 1)
              {
                uint64_t v133 = v131 >> 29;
                uint64_t v134 = *(uint64_t *)((char *)*a5 + v133);
                uint64_t v135 = *(void *)(*a6 + v133);
                uint64_t v136 = (_DWORD *)(v8[19] + 4 * v1432);
                uint64_t v137 = (float *)(v129[19] + 4 * v1438);
                uint64_t v138 = 4 * v135;
                uint64_t v139 = 4 * v134;
                do
                {
                  _DWORD *v136 = (int)*v137;
                  uint64_t v136 = (_DWORD *)((char *)v136 + v138);
                  uint64_t v137 = (float *)((char *)v137 + v139);
                  --v132;
                }
                while (v132);
              }
              break;
            case 2:
              uint64_t v1001 = (v130 << 30) - 0x200000000;
              uint64_t v1002 = *a4;
              int v1003 = *(int *)((char *)*a4 + (v1001 >> 30));
              if (v1003 >= 1)
              {
                int v1004 = 0;
                uint64_t v1005 = v1001 >> 29;
                uint64_t v1006 = *(uint64_t *)((char *)*a5 + v1005);
                uint64_t v1007 = *(void *)(*a6 + v1005);
                uint64_t v1008 = (v130 << 30) - 0x100000000;
                uint64_t v1009 = *(uint64_t *)((char *)*a5 + (v1008 >> 29));
                uint64_t v1010 = *(void *)(*a6 + (v1008 >> 29));
                uint64_t v1011 = v1008 >> 32;
                uint64_t v1012 = 4 * v1432;
                uint64_t v1013 = 4 * v1007;
                uint64_t v1014 = 4 * v1010;
                uint64_t v1015 = 4 * v1438;
                uint64_t v1016 = 4 * v1006;
                uint64_t result = 4 * v1009;
                do
                {
                  int v1017 = v1002[v1011];
                  if (v1017 >= 1)
                  {
                    uint64_t v1018 = (_DWORD *)(v8[19] + v1012);
                    uint64_t v1019 = (float *)(v129[19] + v1015);
                    do
                    {
                      *uint64_t v1018 = (int)*v1019;
                      uint64_t v1018 = (_DWORD *)((char *)v1018 + v1014);
                      uint64_t v1019 = (float *)((char *)v1019 + result);
                      --v1017;
                    }
                    while (v1017);
                  }
                  ++v1004;
                  v1012 += v1013;
                  v1015 += v1016;
                }
                while (v1004 != v1003);
              }
              break;
            case 3:
              uint64_t v1020 = (v130 << 30) - 0x300000000;
              uint64_t v1021 = *a4;
              int v1022 = *(int *)((char *)*a4 + (v1020 >> 30));
              if (v1022 >= 1)
              {
                int v1023 = 0;
                int v1024 = *a5;
                uint64_t v1025 = v1020 >> 29;
                uint64_t v1026 = *(uint64_t *)((char *)*a5 + (v1020 >> 29));
                uint64_t v1027 = *a6;
                uint64_t v1028 = *(void *)(*a6 + v1025);
                uint64_t v1029 = v130 << 30;
                uint64_t v1030 = (v130 << 30) - 0x200000000;
                uint64_t v1031 = v1030 >> 32;
                v1030 >>= 29;
                uint64_t v1032 = *(uint64_t *)((char *)*a5 + v1030);
                uint64_t v1033 = *(void *)(*a6 + v1030);
                uint64_t v1034 = (v1029 - 0x100000000) >> 32;
                uint64_t v1035 = 4 * v1432;
                uint64_t v1036 = 4 * v1028;
                uint64_t v1037 = 4 * v1033;
                uint64_t result = 4 * v1438;
                uint64_t v1038 = 4 * v1026;
                uint64_t v1039 = 4 * v1032;
                do
                {
                  int v1040 = v1021[v1031];
                  if (v1040 >= 1)
                  {
                    int v1041 = 0;
                    uint64_t v1042 = (void *)*v11;
                    uint64_t v1043 = 4 * *(void *)(v1027 + 8 * v1034);
                    uint64_t v1044 = 4 * v1024[v1034];
                    uint64_t v1045 = result;
                    uint64_t v1046 = v1035;
                    do
                    {
                      int v1047 = v1021[v1034];
                      if (v1047 >= 1)
                      {
                        int v1048 = (_DWORD *)(v1042[19] + v1046);
                        uint64_t v1049 = (float *)(v129[19] + v1045);
                        do
                        {
                          *int v1048 = (int)*v1049;
                          int v1048 = (_DWORD *)((char *)v1048 + v1043);
                          uint64_t v1049 = (float *)((char *)v1049 + v1044);
                          --v1047;
                        }
                        while (v1047);
                      }
                      ++v1041;
                      v1046 += v1037;
                      v1045 += v1039;
                    }
                    while (v1041 != v1040);
                  }
                  ++v1023;
                  v1035 += v1036;
                  result += v1038;
                }
                while (v1023 != v1022);
              }
              break;
            case 4:
              uint64_t v1050 = (v130 << 30) - 0x400000000;
              uint64_t v1051 = *a4;
              int v1584 = *(int *)((char *)*a4 + (v1050 >> 30));
              if (v1584 >= 1)
              {
                int v1052 = 0;
                int v1053 = *a5;
                uint64_t v1054 = v1050 >> 29;
                uint64_t v1055 = v130 << 30;
                uint64_t v1056 = *a6;
                uint64_t v1566 = (v1055 - 0x300000000) >> 32;
                uint64_t v1057 = (v1055 - 0x300000000) >> 29;
                uint64_t v1058 = *(uint64_t *)((char *)*a5 + v1057);
                uint64_t v1059 = *(void *)(*a6 + v1057);
                uint64_t v1060 = (v1055 - 0x200000000) >> 32;
                uint64_t v1061 = (v1055 - 0x100000000) >> 32;
                uint64_t v1062 = 4 * v1432;
                uint64_t v1550 = 4 * *(void *)(*a6 + v1054);
                uint64_t result = 4 * v1059;
                uint64_t v1063 = 4 * v1438;
                uint64_t v1535 = 4 * *(uint64_t *)((char *)*a5 + v1054);
                uint64_t v1064 = 4 * v1058;
                do
                {
                  int v1065 = v1051[v1566];
                  if (v1065 >= 1)
                  {
                    int v1066 = 0;
                    uint64_t v1067 = 4 * *(void *)(v1056 + 8 * v1060);
                    uint64_t v1068 = 4 * v1053[v1060];
                    uint64_t v1069 = v1063;
                    uint64_t v1070 = v1062;
                    do
                    {
                      int v1071 = v1051[v1060];
                      if (v1071 >= 1)
                      {
                        int v1072 = 0;
                        uint64_t v1073 = (void *)*v11;
                        uint64_t v1074 = 4 * *(void *)(v1056 + 8 * v1061);
                        uint64_t v1075 = 4 * v1053[v1061];
                        uint64_t v1076 = v1069;
                        uint64_t v1077 = v1070;
                        do
                        {
                          int v1078 = v1051[v1061];
                          if (v1078 >= 1)
                          {
                            int v1079 = (_DWORD *)(v1073[19] + v1077);
                            uint64_t v1080 = (float *)(v129[19] + v1076);
                            do
                            {
                              *int v1079 = (int)*v1080;
                              int v1079 = (_DWORD *)((char *)v1079 + v1074);
                              uint64_t v1080 = (float *)((char *)v1080 + v1075);
                              --v1078;
                            }
                            while (v1078);
                          }
                          ++v1072;
                          v1077 += v1067;
                          v1076 += v1068;
                        }
                        while (v1072 != v1071);
                      }
                      ++v1066;
                      v1070 += result;
                      v1069 += v1064;
                    }
                    while (v1066 != v1065);
                  }
                  ++v1052;
                  v1062 += v1550;
                  v1063 += v1535;
                }
                while (v1052 != v1584);
              }
              break;
            case 5:
              uint64_t v1081 = (v130 << 30) - 0x500000000;
              uint64_t v1082 = *a4;
              int v1486 = *(int *)((char *)*a4 + (v1081 >> 30));
              if (v1486 >= 1)
              {
                int v1496 = 0;
                uint64_t v1083 = *a5;
                uint64_t v1084 = v1081 >> 29;
                uint64_t v1085 = *a6;
                uint64_t v1086 = v130 << 30;
                uint64_t v1087 = (v1086 - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1087);
                uint64_t v1476 = (v1086 - 0x400000000) >> 32;
                uint64_t v1088 = *(void *)(*a6 + v1087);
                uint64_t v1567 = (v1086 - 0x300000000) >> 32;
                uint64_t v1089 = (v1086 - 0x200000000) >> 32;
                uint64_t v1090 = (v1086 - 0x100000000) >> 32;
                uint64_t v1520 = 4 * v1432;
                uint64_t v1466 = 4 * *(void *)(*a6 + v1084);
                uint64_t v1551 = 4 * v1088;
                uint64_t v1508 = 4 * v1438;
                uint64_t v1457 = 4 * *(uint64_t *)((char *)*a5 + v1084);
                uint64_t v1536 = 4 * result;
                do
                {
                  int v1585 = v1082[v1476];
                  if (v1585 >= 1)
                  {
                    int v1091 = 0;
                    uint64_t v1092 = 4 * *(void *)(v1085 + 8 * v1567);
                    uint64_t v1093 = 4 * v1083[v1567];
                    uint64_t v1094 = v1508;
                    uint64_t v1095 = v1520;
                    do
                    {
                      int v1096 = v1082[v1567];
                      if (v1096 >= 1)
                      {
                        int v1097 = 0;
                        uint64_t v1098 = 4 * *(void *)(v1085 + 8 * v1089);
                        uint64_t v1099 = 4 * v1083[v1089];
                        uint64_t v1100 = v1094;
                        uint64_t v1101 = v1095;
                        do
                        {
                          int v1102 = v1082[v1089];
                          if (v1102 >= 1)
                          {
                            int v1103 = 0;
                            uint64_t result = *v11;
                            uint64_t v1104 = 4 * *(void *)(v1085 + 8 * v1090);
                            uint64_t v1105 = 4 * v1083[v1090];
                            uint64_t v1106 = v1100;
                            uint64_t v1107 = v1101;
                            do
                            {
                              int v1108 = v1082[v1090];
                              if (v1108 >= 1)
                              {
                                int v1109 = (_DWORD *)(*(void *)(result + 152) + v1107);
                                uint64_t v1110 = (float *)(v129[19] + v1106);
                                do
                                {
                                  *int v1109 = (int)*v1110;
                                  int v1109 = (_DWORD *)((char *)v1109 + v1104);
                                  uint64_t v1110 = (float *)((char *)v1110 + v1105);
                                  --v1108;
                                }
                                while (v1108);
                              }
                              ++v1103;
                              v1107 += v1098;
                              v1106 += v1099;
                            }
                            while (v1103 != v1102);
                          }
                          ++v1097;
                          v1101 += v1092;
                          v1100 += v1093;
                        }
                        while (v1097 != v1096);
                      }
                      ++v1091;
                      v1095 += v1551;
                      v1094 += v1536;
                    }
                    while (v1091 != v1585);
                  }
                  v1520 += v1466;
                  v1508 += v1457;
                  ++v1496;
                }
                while (v1496 != v1486);
              }
              break;
            default:
              uint64_t v963 = (char *)a4[1];
              LODWORD(v964) = 1;
              uint64_t v965 = -20;
              do
              {
                uint64_t v964 = *(int *)&v963[v965] * (uint64_t)(int)v964;
                v965 += 4;
              }
              while (v965);
              unint64_t v1428 = v129[6];
              if (v1428)
              {
                uint64_t result = 0;
                uint64_t v966 = (v130 << 30) - 0x500000000;
                uint64_t v967 = *a4;
                uint64_t v1465 = *v8;
                uint64_t v968 = *a5;
                uint64_t v1413 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1418 = ((unint64_t)(v963 - (char *)*a4) >> 2) - 1;
                uint64_t v1409 = v966 >> 32;
                uint64_t v969 = *a6;
                uint64_t v1475 = ((v130 << 30) - 0x400000000) >> 32;
                uint64_t v1565 = ((v130 << 30) - 0x300000000) >> 32;
                uint64_t v970 = ((v130 << 30) - 0x200000000) >> 32;
                uint64_t v971 = ((v130 << 30) - 0x100000000) >> 32;
                uint64_t v1449 = 4 * *(uint64_t *)((char *)*a5 + (v966 >> 29));
                uint64_t v1456 = 4 * *(void *)(*a6 + (v966 >> 29));
                uint64_t v1423 = v964;
                do
                {
                  uint64_t v972 = v1418;
                  uint64_t v1444 = result;
                  uint64_t v973 = 0;
                  if ((v1418 & 0x80000000) != 0)
                  {
                    uint64_t v974 = v1413;
                  }
                  else
                  {
                    uint64_t v974 = v1413;
                    do
                    {
                      ldiv_t v975 = ldiv((int)result, v967[v972]);
                      LODWORD(result) = v975.quot;
                      v973 += v968[v972--] * v975.rem;
                    }
                    while (v972 != -1);
                  }
                  uint64_t v976 = 0;
                  if ((v974 & 0x80000000) == 0)
                  {
                    int v977 = v1444;
                    do
                    {
                      ldiv_t v978 = ldiv(v977, *(int *)(v1465 + 4 * v974));
                      int v977 = v978.quot;
                      v976 += *(void *)(v969 + 8 * v974--) * v978.rem;
                    }
                    while (v974 != -1);
                  }
                  int v1485 = v967[v1409];
                  if (v1485 >= 1)
                  {
                    int v979 = 0;
                    uint64_t v1519 = 4 * (v976 + v1432);
                    uint64_t v1549 = 4 * *(void *)(v969 + 8 * v1475);
                    uint64_t v1507 = 4 * (v973 + v1438);
                    uint64_t v1534 = 4 * v968[v1475];
                    do
                    {
                      int v1495 = v979;
                      int v1583 = v967[v1475];
                      if (v1583 >= 1)
                      {
                        int v980 = 0;
                        uint64_t v981 = 4 * *(void *)(v969 + 8 * v1565);
                        uint64_t v982 = 4 * v968[v1565];
                        uint64_t v984 = v1507;
                        uint64_t v983 = v1519;
                        do
                        {
                          int v985 = v967[v1565];
                          if (v985 >= 1)
                          {
                            int v986 = 0;
                            uint64_t v987 = 4 * *(void *)(v969 + 8 * v970);
                            uint64_t v988 = 4 * v968[v970];
                            uint64_t v989 = v984;
                            uint64_t v990 = v983;
                            do
                            {
                              int v991 = v967[v970];
                              if (v991 >= 1)
                              {
                                int v992 = 0;
                                uint64_t v993 = (void *)*v11;
                                uint64_t v994 = 4 * *(void *)(v969 + 8 * v971);
                                uint64_t v995 = 4 * v968[v971];
                                uint64_t v996 = v989;
                                uint64_t v997 = v990;
                                do
                                {
                                  int v998 = v967[v971];
                                  if (v998 >= 1)
                                  {
                                    int v999 = (_DWORD *)(v993[19] + v997);
                                    uint64_t v1000 = (float *)(v129[19] + v996);
                                    do
                                    {
                                      *int v999 = (int)*v1000;
                                      int v999 = (_DWORD *)((char *)v999 + v994);
                                      uint64_t v1000 = (float *)((char *)v1000 + v995);
                                      --v998;
                                    }
                                    while (v998);
                                  }
                                  ++v992;
                                  v997 += v987;
                                  v996 += v988;
                                }
                                while (v992 != v991);
                              }
                              ++v986;
                              v990 += v981;
                              v989 += v982;
                            }
                            while (v986 != v985);
                          }
                          ++v980;
                          v983 += v1549;
                          v984 += v1534;
                        }
                        while (v980 != v1583);
                      }
                      int v979 = v1495 + 1;
                      v1519 += v1456;
                      v1507 += v1449;
                    }
                    while (v1495 + 1 != v1485);
                  }
                  uint64_t result = v1444 + v1423;
                }
                while (v1428 > v1444 + v1423);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          uint64_t v22 = v8[6];
          if (v22)
          {
            float v23 = **(float **)(*(void *)result + 152);
            uint64_t v24 = (void *)v8[19];
            do
            {
              *v24++ = (uint64_t)v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          uint64_t v140 = *(void *)(*(void *)result + 160);
          if (v140)
          {
            uint64_t v141 = *(float **)(*(void *)result + 152);
            uint64_t v142 = (void *)v8[19];
            uint64_t v143 = 4 * v140;
            do
            {
              float v144 = *v141++;
              *v142++ = (uint64_t)v144;
              v143 -= 4;
            }
            while (v143);
          }
          break;
        case 2:
          uint64_t v145 = *a7;
          uint64_t v146 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v147 = **a4;
              if ((int)v147 >= 1)
              {
                uint64_t v148 = *(void *)(v146 + 152);
                uint64_t v149 = (void *)v8[19];
                uint64_t v150 = *a5;
                do
                {
                  *v149++ = (uint64_t)*(float *)(v148 + 4 * v145);
                  v145 += *v150;
                  --v147;
                }
                while (v147);
              }
              break;
            case 2:
              int v449 = **a4;
              if (v449 >= 1)
              {
                int v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = *(void *)(v146 + 152);
                uint64_t v453 = v8[19];
                int v454 = (*a4)[1];
                int v455 = *a5;
                do
                {
                  if (v454 <= 0)
                  {
                    uint64_t v457 = v455[1];
                  }
                  else
                  {
                    int v456 = v454;
                    do
                    {
                      *(void *)(v453 + 8 * v451++) = (uint64_t)*(float *)(v452 + 4 * v145);
                      uint64_t v457 = v455[1];
                      v145 += v457;
                      --v456;
                    }
                    while (v456);
                  }
                  uint64_t result = *v455;
                  uint64_t v145 = v145 - v457 * v454 + *v455;
                  ++v450;
                }
                while (v450 != v449);
              }
              break;
            case 3:
              uint64_t v458 = *a4;
              int v459 = **a4;
              if (v459 >= 1)
              {
                int v460 = 0;
                uint64_t v461 = 0;
                uint64_t v462 = *(void *)(v146 + 152);
                uint64_t v463 = v8[19];
                uint64_t v464 = v458[1];
                int v465 = *a5;
                do
                {
                  if ((int)v464 <= 0)
                  {
                    uint64_t v469 = v465[1];
                  }
                  else
                  {
                    int v466 = 0;
                    uint64_t result = v458[2];
                    uint64_t v467 = *a5;
                    do
                    {
                      int v468 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(void *)(v463 + 8 * v461++) = (uint64_t)*(float *)(v462 + 4 * v145);
                          v145 += v467[2];
                          --v468;
                        }
                        while (v468);
                      }
                      uint64_t v469 = v465[1];
                      uint64_t v145 = v469 + v145 - v465[2] * (int)result;
                      ++v466;
                    }
                    while (v466 != v464);
                  }
                  uint64_t v145 = v145 - v469 * v464 + *v465;
                  ++v460;
                }
                while (v460 != v459);
              }
              break;
            case 4:
              uint64_t v470 = *a4;
              int v471 = **a4;
              if (v471 >= 1)
              {
                int v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = *(void *)(v146 + 152);
                uint64_t v475 = v8[19];
                uint64_t v476 = v470[1];
                int v477 = *a5;
                do
                {
                  if ((int)v476 <= 0)
                  {
                    uint64_t v484 = v477[1];
                  }
                  else
                  {
                    int v478 = 0;
                    uint64_t result = v470[2];
                    uint64_t v479 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        int v480 = 0;
                        int v481 = v470[3];
                        uint64_t v482 = *a5;
                        do
                        {
                          int v483 = v481;
                          if (v481 >= 1)
                          {
                            do
                            {
                              *(void *)(v475 + 8 * v473++) = (uint64_t)*(float *)(v474 + 4 * v145);
                              v145 += v482[3];
                              --v483;
                            }
                            while (v483);
                          }
                          uint64_t v145 = v479[2] + v145 - v479[3] * v481;
                          ++v480;
                        }
                        while (v480 != result);
                      }
                      uint64_t v484 = v477[1];
                      uint64_t v145 = v484 + v145 - v477[2] * result;
                      ++v478;
                    }
                    while (v478 != v476);
                  }
                  uint64_t v145 = v145 - v484 * v476 + *v477;
                  ++v472;
                }
                while (v472 != v471);
              }
              break;
            default:
              uint64_t v439 = v8[6];
              if (v439)
              {
                uint64_t v440 = 0;
                uint64_t v441 = *(void *)(v146 + 152) + 4 * v145;
                uint64_t v442 = v8[19];
                uint64_t v443 = *a4;
                uint64_t v444 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v445 = *a5;
                do
                {
                  uint64_t v446 = 0;
                  if ((v444 & 0x80000000) == 0)
                  {
                    uint64_t v447 = v444;
                    LODWORD(result) = v440;
                    do
                    {
                      ldiv_t v448 = ldiv((int)result, v443[v447]);
                      uint64_t result = v448.quot;
                      v446 += v445[v447--] * v448.rem;
                    }
                    while (v447 != -1);
                  }
                  *(void *)(v442 + 8 * v440++) = (uint64_t)*(float *)(v441 + 4 * v446);
                }
                while (v440 != v439);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1433 = *a8;
          uint64_t v1439 = *a7;
          uint64_t v151 = *(void **)result;
          uint64_t v152 = v151[1] - *v151;
          switch(v152 >> 2)
          {
            case 1:
              uint64_t v153 = (v152 << 30) - 0x100000000;
              int v154 = *(int *)((char *)*a4 + (v153 >> 30));
              if (v154 >= 1)
              {
                uint64_t v155 = v153 >> 29;
                uint64_t v156 = *(uint64_t *)((char *)*a5 + v155);
                uint64_t v157 = *(void *)(*a6 + v155);
                int v158 = (void *)(v8[19] + 8 * v1433);
                uint64_t v159 = (float *)(v151[19] + 4 * v1439);
                uint64_t v160 = 8 * v157;
                uint64_t v161 = 4 * v156;
                do
                {
                  *int v158 = (uint64_t)*v159;
                  int v158 = (void *)((char *)v158 + v160);
                  uint64_t v159 = (float *)((char *)v159 + v161);
                  --v154;
                }
                while (v154);
              }
              break;
            case 2:
              uint64_t v1149 = (v152 << 30) - 0x200000000;
              int v1150 = *(int *)((char *)*a4 + (v1149 >> 30));
              if (v1150 >= 1)
              {
                int v1151 = 0;
                uint64_t v1152 = v152 << 30;
                uint64_t v1153 = *a5;
                v1152 -= 0x100000000;
                int v1154 = *(int *)((char *)*a4 + (v1152 >> 30));
                uint64_t v1155 = v1149 >> 29;
                uint64_t v1156 = *(uint64_t *)((char *)*a5 + (v1149 >> 29));
                uint64_t v1157 = *a6;
                uint64_t v1158 = *(void *)(*a6 + v1155);
                uint64_t v1159 = v1152 >> 32;
                uint64_t v1160 = 8 * v1433;
                uint64_t v1161 = 8 * v1158;
                uint64_t v1162 = 4 * v1439;
                uint64_t result = 4 * v1156;
                do
                {
                  if (v1154 >= 1)
                  {
                    uint64_t v1163 = (void *)(v8[19] + v1160);
                    uint64_t v1164 = 8 * *(void *)(v1157 + 8 * v1159);
                    uint64_t v1165 = (float *)(v151[19] + v1162);
                    uint64_t v1166 = 4 * v1153[v1159];
                    int v1167 = v1154;
                    do
                    {
                      *uint64_t v1163 = (uint64_t)*v1165;
                      uint64_t v1163 = (void *)((char *)v1163 + v1164);
                      uint64_t v1165 = (float *)((char *)v1165 + v1166);
                      --v1167;
                    }
                    while (v1167);
                  }
                  ++v1151;
                  v1160 += v1161;
                  v1162 += result;
                }
                while (v1151 != v1150);
              }
              break;
            case 3:
              uint64_t v1168 = (v152 << 30) - 0x300000000;
              uint64_t v1169 = *a4;
              int v1170 = *(int *)((char *)*a4 + (v1168 >> 30));
              if (v1170 >= 1)
              {
                int v1171 = 0;
                uint64_t v1172 = v152 << 30;
                int v1173 = *a5;
                uint64_t v1174 = v1168 >> 29;
                uint64_t v1175 = *(uint64_t *)((char *)*a5 + (v1168 >> 29));
                uint64_t v1176 = *a6;
                uint64_t v1177 = *(void *)(*a6 + v1174);
                uint64_t v1178 = v1172 - 0x200000000;
                uint64_t v1179 = v1172 - 0x100000000;
                int v1180 = *(int *)((char *)v1169 + ((v1172 - 0x200000000) >> 30));
                uint64_t v1181 = v1178 >> 32;
                uint64_t v1182 = v1179 >> 32;
                uint64_t v1183 = 8 * v1433;
                uint64_t v1184 = 8 * v1177;
                uint64_t result = 4 * v1439;
                uint64_t v1185 = 4 * v1175;
                do
                {
                  if (v1180 >= 1)
                  {
                    int v1186 = 0;
                    int v1187 = v1169[v1182];
                    uint64_t v1188 = (void *)*v11;
                    uint64_t v1189 = 8 * *(void *)(v1176 + 8 * v1181);
                    uint64_t v1190 = 4 * v1173[v1181];
                    uint64_t v1191 = result;
                    uint64_t v1192 = v1183;
                    do
                    {
                      if (v1187 >= 1)
                      {
                        int v1193 = (void *)(v1188[19] + v1192);
                        uint64_t v1194 = 8 * *(void *)(v1176 + 8 * v1182);
                        uint64_t v1195 = (float *)(v151[19] + v1191);
                        uint64_t v1196 = 4 * v1173[v1182];
                        int v1197 = v1187;
                        do
                        {
                          *int v1193 = (uint64_t)*v1195;
                          int v1193 = (void *)((char *)v1193 + v1194);
                          uint64_t v1195 = (float *)((char *)v1195 + v1196);
                          --v1197;
                        }
                        while (v1197);
                      }
                      ++v1186;
                      v1192 += v1189;
                      v1191 += v1190;
                    }
                    while (v1186 != v1180);
                  }
                  ++v1171;
                  v1183 += v1184;
                  result += v1185;
                }
                while (v1171 != v1170);
              }
              break;
            case 4:
              uint64_t v1198 = (v152 << 30) - 0x400000000;
              uint64_t v1199 = *a4;
              int v1553 = *(int *)((char *)*a4 + (v1198 >> 30));
              if (v1553 >= 1)
              {
                int v1586 = 0;
                uint64_t v1200 = v152 << 30;
                uint64_t v1201 = *a5;
                uint64_t v1202 = v1198 >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1202);
                uint64_t v1203 = *a6;
                uint64_t v1522 = (v1200 - 0x300000000) >> 32;
                int v1204 = *(int *)((char *)v1199 + ((v1200 - 0x300000000) >> 30));
                uint64_t v1205 = (v1200 - 0x200000000) >> 32;
                uint64_t v1206 = (v1200 - 0x100000000) >> 32;
                uint64_t v1207 = 8 * v1433;
                uint64_t v1569 = 8 * *(void *)(*a6 + v1202);
                uint64_t v1208 = 4 * v1439;
                uint64_t v1538 = 4 * result;
                do
                {
                  if (v1204 >= 1)
                  {
                    int v1209 = 0;
                    int v1210 = v1199[v1205];
                    uint64_t v1211 = 8 * *(void *)(v1203 + 8 * v1522);
                    uint64_t v1212 = 4 * v1201[v1522];
                    uint64_t v1213 = v1208;
                    uint64_t v1214 = v1207;
                    do
                    {
                      if (v1210 >= 1)
                      {
                        int v1215 = 0;
                        uint64_t result = *(void *)(v1203 + 8 * v1205);
                        int v1216 = v1199[v1206];
                        uint64_t v1217 = (void *)*v11;
                        uint64_t v1218 = 8 * result;
                        uint64_t v1219 = 4 * v1201[v1205];
                        uint64_t v1220 = v1213;
                        uint64_t v1221 = v1214;
                        do
                        {
                          if (v1216 >= 1)
                          {
                            int v1222 = (void *)(v1217[19] + v1221);
                            uint64_t v1223 = 8 * *(void *)(v1203 + 8 * v1206);
                            uint64_t result = v151[19] + v1220;
                            uint64_t v1224 = 4 * v1201[v1206];
                            int v1225 = v1216;
                            do
                            {
                              *int v1222 = (uint64_t)*(float *)result;
                              int v1222 = (void *)((char *)v1222 + v1223);
                              result += v1224;
                              --v1225;
                            }
                            while (v1225);
                          }
                          ++v1215;
                          v1221 += v1218;
                          v1220 += v1219;
                        }
                        while (v1215 != v1210);
                      }
                      ++v1209;
                      v1214 += v1211;
                      v1213 += v1212;
                    }
                    while (v1209 != v1204);
                  }
                  v1207 += v1569;
                  v1208 += v1538;
                  ++v1586;
                }
                while (v1586 != v1553);
              }
              break;
            case 5:
              uint64_t v1226 = (v152 << 30) - 0x500000000;
              uint64_t v1227 = *a4;
              int v1478 = *(int *)((char *)*a4 + (v1226 >> 30));
              if (v1478 >= 1)
              {
                int v1488 = 0;
                uint64_t v1228 = v152 << 30;
                uint64_t v1229 = *a5;
                uint64_t v1230 = v1226 >> 29;
                uint64_t v1231 = *a6;
                uint64_t v1451 = (v1228 - 0x400000000) >> 32;
                int v1570 = *(int *)((char *)v1227 + ((v1228 - 0x400000000) >> 30));
                uint64_t v1232 = (v1228 - 0x200000000) >> 32;
                uint64_t v1233 = (v1228 - 0x100000000) >> 32;
                uint64_t v1510 = 8 * v1433;
                uint64_t v1523 = (v1228 - 0x300000000) >> 32;
                uint64_t v1498 = 4 * v1439;
                uint64_t v1459 = 4 * *(uint64_t *)((char *)*a5 + v1230);
                uint64_t v1468 = 8 * *(void *)(*a6 + v1230);
                do
                {
                  if (v1570 >= 1)
                  {
                    int v1234 = 0;
                    int v1235 = v1227[v1523];
                    uint64_t v1539 = 4 * v1229[v1451];
                    uint64_t v1554 = 8 * *(void *)(v1231 + 8 * v1451);
                    uint64_t v1236 = v1498;
                    uint64_t result = v1510;
                    do
                    {
                      int v1587 = v1234;
                      if (v1235 >= 1)
                      {
                        int v1237 = 0;
                        int v1238 = v1227[v1232];
                        uint64_t v1239 = 8 * *(void *)(v1231 + 8 * v1523);
                        uint64_t v1240 = 4 * v1229[v1523];
                        uint64_t v1241 = v1236;
                        uint64_t v1242 = result;
                        do
                        {
                          if (v1238 >= 1)
                          {
                            int v1243 = 0;
                            int v1244 = v1227[v1233];
                            uint64_t v1245 = (void *)*v11;
                            uint64_t v1246 = 8 * *(void *)(v1231 + 8 * v1232);
                            uint64_t v1247 = 4 * v1229[v1232];
                            uint64_t v1248 = v1241;
                            uint64_t v1249 = v1242;
                            do
                            {
                              if (v1244 >= 1)
                              {
                                int v1250 = (void *)(v1245[19] + v1249);
                                uint64_t v1251 = 8 * *(void *)(v1231 + 8 * v1233);
                                uint64_t v1252 = (float *)(v151[19] + v1248);
                                uint64_t v1253 = 4 * v1229[v1233];
                                int v1254 = v1244;
                                do
                                {
                                  *int v1250 = (uint64_t)*v1252;
                                  int v1250 = (void *)((char *)v1250 + v1251);
                                  uint64_t v1252 = (float *)((char *)v1252 + v1253);
                                  --v1254;
                                }
                                while (v1254);
                              }
                              ++v1243;
                              v1249 += v1246;
                              v1248 += v1247;
                            }
                            while (v1243 != v1238);
                          }
                          ++v1237;
                          v1242 += v1239;
                          v1241 += v1240;
                        }
                        while (v1237 != v1235);
                      }
                      int v1234 = v1587 + 1;
                      result += v1554;
                      v1236 += v1539;
                    }
                    while (v1587 + 1 != v1570);
                  }
                  v1510 += v1468;
                  v1498 += v1459;
                  ++v1488;
                }
                while (v1488 != v1478);
              }
              break;
            default:
              uint64_t v1111 = (char *)a4[1];
              LODWORD(v1112) = 1;
              uint64_t v1113 = -20;
              do
              {
                uint64_t v1112 = *(int *)&v1111[v1113] * (uint64_t)(int)v1112;
                v1113 += 4;
              }
              while (v1113);
              unint64_t v1429 = v151[6];
              if (v1429)
              {
                uint64_t v1114 = 0;
                uint64_t v1115 = (v152 << 30) - 0x500000000;
                uint64_t v1116 = *a4;
                uint64_t v1410 = *v8;
                uint64_t v1117 = *a5;
                uint64_t v1414 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1419 = ((unint64_t)(v1111 - (char *)*a4) >> 2) - 1;
                uint64_t v1118 = *a6;
                uint64_t v1406 = v1115 >> 32;
                int v1477 = *(int *)((char *)*a4 + (v1115 >> 30));
                uint64_t v1450 = ((v152 << 30) - 0x400000000) >> 32;
                uint64_t v1521 = ((v152 << 30) - 0x300000000) >> 32;
                uint64_t v1119 = ((v152 << 30) - 0x200000000) >> 32;
                uint64_t v1120 = ((v152 << 30) - 0x100000000) >> 32;
                uint64_t v1424 = v1112;
                do
                {
                  uint64_t v1121 = v1419;
                  if ((v1419 & 0x80000000) != 0)
                  {
                    uint64_t v1122 = 0;
                    uint64_t v1123 = v1414;
                  }
                  else
                  {
                    uint64_t v1122 = 0;
                    LODWORD(result) = v1114;
                    uint64_t v1123 = v1414;
                    do
                    {
                      ldiv_t v1124 = ldiv((int)result, v1116[v1121]);
                      uint64_t result = v1124.quot;
                      v1122 += v1117[v1121--] * v1124.rem;
                    }
                    while (v1121 != -1);
                  }
                  uint64_t v1445 = v1114;
                  uint64_t v1125 = 0;
                  if ((v1123 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1114;
                    do
                    {
                      ldiv_t v1126 = ldiv((int)result, *(int *)(v1410 + 4 * v1123));
                      uint64_t result = v1126.quot;
                      v1125 += *(void *)(v1118 + 8 * v1123--) * v1126.rem;
                    }
                    while (v1123 != -1);
                  }
                  if (v1477 >= 1)
                  {
                    int v1127 = 0;
                    int v1568 = v1116[v1450];
                    uint64_t v1467 = 8 * *(void *)(v1118 + 8 * v1406);
                    uint64_t v1497 = 4 * (v1122 + v1439);
                    uint64_t v1509 = 8 * (v1125 + v1433);
                    uint64_t v1458 = 4 * v1117[v1406];
                    do
                    {
                      int v1487 = v1127;
                      if (v1568 >= 1)
                      {
                        int v1128 = 0;
                        int v1129 = v1116[v1521];
                        uint64_t v1537 = 4 * v1117[v1450];
                        uint64_t v1552 = 8 * *(void *)(v1118 + 8 * v1450);
                        uint64_t v1131 = v1497;
                        uint64_t v1130 = v1509;
                        do
                        {
                          if (v1129 >= 1)
                          {
                            int v1132 = 0;
                            int v1133 = v1116[v1119];
                            uint64_t v1134 = 8 * *(void *)(v1118 + 8 * v1521);
                            uint64_t v1135 = 4 * v1117[v1521];
                            uint64_t result = v1131;
                            uint64_t v1136 = v1130;
                            do
                            {
                              if (v1133 >= 1)
                              {
                                int v1137 = 0;
                                int v1138 = v1116[v1120];
                                int v1139 = *(uint64_t **)a2;
                                uint64_t v1140 = 8 * *(void *)(v1118 + 8 * v1119);
                                uint64_t v1141 = 4 * v1117[v1119];
                                uint64_t v1142 = result;
                                uint64_t v1143 = v1136;
                                do
                                {
                                  if (v1138 >= 1)
                                  {
                                    int v1144 = (void *)(v1139[19] + v1143);
                                    uint64_t v1145 = 8 * *(void *)(v1118 + 8 * v1120);
                                    uint64_t v1146 = (float *)(v151[19] + v1142);
                                    uint64_t v1147 = 4 * v1117[v1120];
                                    int v1148 = v1138;
                                    do
                                    {
                                      *int v1144 = (uint64_t)*v1146;
                                      int v1144 = (void *)((char *)v1144 + v1145);
                                      uint64_t v1146 = (float *)((char *)v1146 + v1147);
                                      --v1148;
                                    }
                                    while (v1148);
                                  }
                                  ++v1137;
                                  v1143 += v1140;
                                  v1142 += v1141;
                                }
                                while (v1137 != v1133);
                              }
                              ++v1132;
                              v1136 += v1134;
                              result += v1135;
                            }
                            while (v1132 != v1129);
                          }
                          ++v1128;
                          v1130 += v1552;
                          v1131 += v1537;
                        }
                        while (v1128 != v1568);
                      }
                      int v1127 = v1487 + 1;
                      v1509 += v1467;
                      v1497 += v1458;
                    }
                    while (v1487 + 1 != v1477);
                  }
                  v1114 += v1424;
                }
                while (v1429 > v1445 + v1424);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          uint64_t v25 = v8[6];
          if (v25)
          {
            int v26 = **(_DWORD **)(*(void *)result + 152);
            int v27 = (_DWORD *)v8[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
          uint64_t v162 = *(void *)(*(void *)result + 160);
          if (v162)
          {
            uint64_t v163 = *(const void **)(*(void *)result + 152);
            uint64_t v164 = (void *)v8[19];
            uint64_t result = (uint64_t)memmove(v164, v163, 4 * v162);
          }
          break;
        case 2:
          uint64_t v165 = *a7;
          uint64_t v166 = *(void *)result;
          switch((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 2)
          {
            case 1:
              uint64_t v167 = **a4;
              if ((int)v167 >= 1)
              {
                uint64_t v168 = (_DWORD *)v8[19];
                uint64_t v169 = **a5;
                uint64_t v170 = (_DWORD *)(*(void *)(v166 + 152) + 4 * v165);
                do
                {
                  *v168++ = *v170;
                  v170 += v169;
                  --v167;
                }
                while (v167);
              }
              break;
            case 2:
              int v495 = **a4;
              if (v495 >= 1)
              {
                int v496 = 0;
                uint64_t v497 = 0;
                uint64_t v498 = *(void *)(v166 + 152);
                uint64_t v499 = v8[19];
                uint64_t v500 = (*a4)[1];
                uint64_t v501 = (*a5)[1];
                uint64_t v502 = **a5 - v501 * v500;
                do
                {
                  int v503 = v500;
                  if ((int)v500 >= 1)
                  {
                    do
                    {
                      *(_DWORD *)(v499 + 4 * v497++) = *(_DWORD *)(v498 + 4 * v165);
                      v165 += v501;
                      --v503;
                    }
                    while (v503);
                  }
                  v165 += v502;
                  ++v496;
                }
                while (v496 != v495);
              }
              break;
            case 3:
              uint64_t v504 = *a4;
              int v505 = **a4;
              if (v505 >= 1)
              {
                int v506 = 0;
                uint64_t result = 0;
                uint64_t v507 = *(void *)(v166 + 152);
                uint64_t v508 = v8[19];
                uint64_t v509 = v504[1];
                uint64_t v510 = *a5;
                uint64_t v511 = (*a5)[1];
                uint64_t v512 = **a5 - v511 * v509;
                do
                {
                  if ((int)v509 < 1)
                  {
                    uint64_t v519 = result;
                  }
                  else
                  {
                    int v513 = 0;
                    uint64_t v514 = v504[2];
                    uint64_t v515 = *a5;
                    uint64_t v516 = v511 - v510[2] * v514;
                    do
                    {
                      if ((int)v514 < 1)
                      {
                        uint64_t v519 = result;
                      }
                      else
                      {
                        uint64_t v517 = v515[2];
                        int v518 = v514;
                        do
                        {
                          uint64_t v519 = result + 1;
                          *(_DWORD *)(v508 + 4 * result) = *(_DWORD *)(v507 + 4 * v165);
                          v165 += v517;
                          ++result;
                          --v518;
                        }
                        while (v518);
                      }
                      v165 += v516;
                      ++v513;
                      uint64_t result = v519;
                    }
                    while (v513 != v509);
                  }
                  v165 += v512;
                  ++v506;
                  uint64_t result = v519;
                }
                while (v506 != v505);
              }
              break;
            case 4:
              uint64_t v520 = *a4;
              int v521 = **a4;
              if (v521 >= 1)
              {
                int v522 = 0;
                uint64_t result = 0;
                uint64_t v523 = *(void *)(v166 + 152);
                uint64_t v524 = v8[19];
                uint64_t v525 = v520[1];
                uint64_t v526 = *a5;
                uint64_t v527 = (*a5)[1];
                uint64_t v528 = **a5 - v527 * v525;
                do
                {
                  if ((int)v525 < 1)
                  {
                    uint64_t v539 = result;
                  }
                  else
                  {
                    int v529 = 0;
                    uint64_t v530 = v520[2];
                    uint64_t v531 = *a5;
                    uint64_t v532 = v527 - v526[2] * v530;
                    do
                    {
                      if ((int)v530 < 1)
                      {
                        uint64_t v539 = result;
                      }
                      else
                      {
                        int v533 = 0;
                        uint64_t v534 = v520[3];
                        int v535 = *a5;
                        uint64_t v536 = v531[2] - v531[3] * v534;
                        do
                        {
                          if ((int)v534 < 1)
                          {
                            uint64_t v539 = result;
                          }
                          else
                          {
                            uint64_t v537 = v535[3];
                            int v538 = v534;
                            do
                            {
                              uint64_t v539 = result + 1;
                              *(_DWORD *)(v524 + 4 * result) = *(_DWORD *)(v523 + 4 * v165);
                              v165 += v537;
                              ++result;
                              --v538;
                            }
                            while (v538);
                          }
                          v165 += v536;
                          ++v533;
                          uint64_t result = v539;
                        }
                        while (v533 != v530);
                      }
                      v165 += v532;
                      ++v529;
                      uint64_t result = v539;
                    }
                    while (v529 != v525);
                  }
                  v165 += v528;
                  ++v522;
                  uint64_t result = v539;
                }
                while (v522 != v521);
              }
              break;
            default:
              uint64_t v485 = v8[6];
              if (v485)
              {
                uint64_t v486 = 0;
                uint64_t v487 = *(void *)(v166 + 152) + 4 * v165;
                uint64_t v488 = v8[19];
                int v489 = *a4;
                uint64_t v490 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                uint64_t v491 = *a5;
                do
                {
                  uint64_t v492 = 0;
                  if ((v490 & 0x80000000) == 0)
                  {
                    uint64_t v493 = v490;
                    LODWORD(result) = v486;
                    do
                    {
                      ldiv_t v494 = ldiv((int)result, v489[v493]);
                      uint64_t result = v494.quot;
                      v492 += v491[v493--] * v494.rem;
                    }
                    while (v493 != -1);
                  }
                  *(_DWORD *)(v488 + 4 * v486++) = *(_DWORD *)(v487 + 4 * v492);
                }
                while (v486 != v485);
              }
              break;
          }
          break;
        case 3:
          uint64_t v1440 = *a8;
          uint64_t v1441 = *a7;
          uint64_t v171 = *(void **)result;
          uint64_t v172 = v171[1] - *v171;
          switch(v172 >> 2)
          {
            case 1:
              uint64_t v173 = (v172 << 30) - 0x100000000;
              int v174 = *(int *)((char *)*a4 + (v173 >> 30));
              if (v174 >= 1)
              {
                uint64_t v175 = v173 >> 29;
                uint64_t v176 = *(uint64_t *)((char *)*a5 + v175);
                uint64_t v177 = *(void *)(*a6 + v175);
                uint64_t v178 = (_DWORD *)(v8[19] + 4 * v1440);
                uint64_t v179 = (_DWORD *)(v171[19] + 4 * v1441);
                uint64_t v180 = 4 * v177;
                uint64_t v181 = 4 * v176;
                do
                {
                  *uint64_t v178 = *v179;
                  uint64_t v178 = (_DWORD *)((char *)v178 + v180);
                  uint64_t v179 = (_DWORD *)((char *)v179 + v181);
                  --v174;
                }
                while (v174);
              }
              break;
            case 2:
              uint64_t v1294 = (v172 << 30) - 0x200000000;
              int v1295 = *(int *)((char *)*a4 + (v1294 >> 30));
              if (v1295 >= 1)
              {
                int v1296 = 0;
                uint64_t v1297 = v1294 >> 29;
                uint64_t v1298 = *(uint64_t *)((char *)*a5 + v1297);
                uint64_t v1299 = *(void *)(*a6 + v1297);
                uint64_t v1300 = (v172 << 30) - 0x100000000;
                uint64_t result = *(uint64_t *)((char *)*a5 + (v1300 >> 29));
                uint64_t v1301 = *(void *)(*a6 + (v1300 >> 29));
                int v1302 = *(int *)((char *)*a4 + (v1300 >> 30));
                uint64_t v1303 = 4 * v1440;
                uint64_t v1304 = 4 * v1299;
                uint64_t v1305 = 4 * v1301;
                uint64_t v1306 = 4 * v1441;
                uint64_t v1307 = 4 * v1298;
                uint64_t v1308 = 4 * result;
                do
                {
                  if (v1302 >= 1)
                  {
                    uint64_t result = v8[19] + v1303;
                    uint64_t v1309 = (_DWORD *)(v171[19] + v1306);
                    int v1310 = v1302;
                    do
                    {
                      *(_DWORD *)uint64_t result = *v1309;
                      result += v1305;
                      uint64_t v1309 = (_DWORD *)((char *)v1309 + v1308);
                      --v1310;
                    }
                    while (v1310);
                  }
                  ++v1296;
                  v1303 += v1304;
                  v1306 += v1307;
                }
                while (v1296 != v1295);
              }
              break;
            case 3:
              uint64_t v1311 = (v172 << 30) - 0x300000000;
              uint64_t v1312 = *a4;
              int v1313 = *(int *)((char *)*a4 + (v1311 >> 30));
              if (v1313 >= 1)
              {
                int v1314 = 0;
                uint64_t v1315 = v172 << 30;
                uint64_t v1316 = *a5;
                uint64_t v1317 = v1311 >> 29;
                uint64_t v1318 = *(uint64_t *)((char *)*a5 + (v1311 >> 29));
                uint64_t v1319 = *a6;
                uint64_t v1320 = *(void *)(*a6 + v1317);
                uint64_t v1321 = (v1315 - 0x200000000) >> 29;
                uint64_t v1322 = v1315 - 0x100000000;
                uint64_t v1323 = *(uint64_t *)((char *)*a5 + v1321);
                uint64_t v1324 = *(void *)(*a6 + v1321);
                int v1325 = *(int *)((char *)v1312 + ((v1315 - 0x200000000) >> 30));
                uint64_t v1326 = v1322 >> 32;
                uint64_t v1327 = 4 * v1440;
                uint64_t v1328 = 4 * v1320;
                uint64_t v1329 = 4 * v1324;
                uint64_t result = 4 * v1441;
                uint64_t v1330 = 4 * v1318;
                uint64_t v1331 = 4 * v1323;
                do
                {
                  if (v1325 >= 1)
                  {
                    int v1332 = 0;
                    int v1333 = v1312[v1326];
                    uint64_t v1334 = (void *)*v11;
                    uint64_t v1335 = 4 * *(void *)(v1319 + 8 * v1326);
                    uint64_t v1336 = 4 * v1316[v1326];
                    uint64_t v1337 = result;
                    uint64_t v1338 = v1327;
                    do
                    {
                      if (v1333 >= 1)
                      {
                        uint64_t v1339 = (_DWORD *)(v1334[19] + v1338);
                        uint64_t v11 = (uint64_t *)a2;
                        uint64_t v1340 = (_DWORD *)(v171[19] + v1337);
                        int v1341 = v1333;
                        do
                        {
                          _DWORD *v1339 = *v1340;
                          uint64_t v1339 = (_DWORD *)((char *)v1339 + v1335);
                          uint64_t v1340 = (_DWORD *)((char *)v1340 + v1336);
                          --v1341;
                        }
                        while (v1341);
                      }
                      ++v1332;
                      v1338 += v1329;
                      v1337 += v1331;
                    }
                    while (v1332 != v1325);
                  }
                  ++v1314;
                  v1327 += v1328;
                  result += v1330;
                }
                while (v1314 != v1313);
              }
              break;
            case 4:
              uint64_t v1342 = (v172 << 30) - 0x400000000;
              uint64_t v1343 = *a4;
              int v1589 = *(int *)((char *)*a4 + (v1342 >> 30));
              if (v1589 >= 1)
              {
                int v1344 = 0;
                int v1345 = *a5;
                uint64_t v1346 = v1342 >> 29;
                uint64_t v1347 = *a6;
                uint64_t v1348 = v172 << 30;
                uint64_t v1349 = (v1348 - 0x300000000) >> 29;
                uint64_t v1350 = *(uint64_t *)((char *)*a5 + v1349);
                uint64_t v1351 = *(void *)(*a6 + v1349);
                uint64_t v1352 = v1348 - 0x200000000;
                uint64_t v1353 = v1348 - 0x100000000;
                int v1354 = *(int *)((char *)v1343 + ((v1348 - 0x300000000) >> 30));
                uint64_t v1355 = v1352 >> 32;
                uint64_t v1356 = v1353 >> 32;
                uint64_t v1357 = 4 * v1440;
                uint64_t v1572 = 4 * *(void *)(*a6 + v1346);
                uint64_t result = 4 * v1351;
                uint64_t v1358 = 4 * v1441;
                uint64_t v1556 = 4 * *(uint64_t *)((char *)*a5 + v1346);
                uint64_t v1359 = 4 * v1350;
                do
                {
                  if (v1354 >= 1)
                  {
                    int v1360 = 0;
                    int v1361 = v1343[v1355];
                    uint64_t v1362 = 4 * *(void *)(v1347 + 8 * v1355);
                    uint64_t v1363 = 4 * v1345[v1355];
                    uint64_t v1364 = v1358;
                    uint64_t v1365 = v1357;
                    do
                    {
                      if (v1361 >= 1)
                      {
                        int v1366 = 0;
                        int v1367 = v1343[v1356];
                        uint64_t v1368 = (void *)*v11;
                        uint64_t v1369 = 4 * *(void *)(v1347 + 8 * v1356);
                        uint64_t v1370 = 4 * v1345[v1356];
                        uint64_t v1371 = v1364;
                        uint64_t v1372 = v1365;
                        do
                        {
                          if (v1367 >= 1)
                          {
                            uint64_t v1373 = (_DWORD *)(v1368[19] + v1372);
                            uint64_t v1374 = (_DWORD *)(v171[19] + v1371);
                            int v1375 = v1367;
                            do
                            {
                              *uint64_t v1373 = *v1374;
                              uint64_t v1373 = (_DWORD *)((char *)v1373 + v1369);
                              uint64_t v1374 = (_DWORD *)((char *)v1374 + v1370);
                              --v1375;
                            }
                            while (v1375);
                          }
                          ++v1366;
                          v1372 += v1362;
                          v1371 += v1363;
                        }
                        while (v1366 != v1361);
                      }
                      ++v1360;
                      v1365 += result;
                      v1364 += v1359;
                    }
                    while (v1360 != v1354);
                  }
                  ++v1344;
                  v1357 += v1572;
                  v1358 += v1556;
                }
                while (v1344 != v1589);
              }
              break;
            case 5:
              uint64_t v1376 = (v172 << 30) - 0x500000000;
              uint64_t v1377 = *a4;
              int v1500 = *(int *)((char *)*a4 + (v1376 >> 30));
              if (v1500 >= 1)
              {
                int v1512 = 0;
                uint64_t v1378 = *a5;
                uint64_t v1379 = v1376 >> 29;
                uint64_t v1380 = *a6;
                uint64_t v1381 = ((v172 << 30) - 0x400000000) >> 29;
                uint64_t result = *(uint64_t *)((char *)*a5 + v1381);
                uint64_t v1382 = *(void *)(*a6 + v1381);
                int v1590 = *(int *)((char *)v1377 + (((v172 << 30) - 0x400000000) >> 30));
                uint64_t v1470 = ((v172 << 30) - 0x300000000) >> 32;
                uint64_t v1383 = ((v172 << 30) - 0x200000000) >> 32;
                uint64_t v1384 = ((v172 << 30) - 0x100000000) >> 32;
                uint64_t v1541 = 4 * v1440;
                uint64_t v1490 = 4 * *(void *)(*a6 + v1379);
                uint64_t v1573 = 4 * v1382;
                uint64_t v1525 = 4 * v1441;
                uint64_t v1480 = 4 * *(uint64_t *)((char *)*a5 + v1379);
                uint64_t v1557 = 4 * result;
                do
                {
                  if (v1590 >= 1)
                  {
                    int v1385 = 0;
                    int v1386 = v1377[v1470];
                    uint64_t v1387 = 4 * *(void *)(v1380 + 8 * v1470);
                    uint64_t v1388 = 4 * v1378[v1470];
                    uint64_t v1389 = v1525;
                    uint64_t v1390 = v1541;
                    do
                    {
                      if (v1386 >= 1)
                      {
                        int v1391 = 0;
                        int v1392 = v1377[v1383];
                        uint64_t v1393 = 4 * *(void *)(v1380 + 8 * v1383);
                        uint64_t v1394 = 4 * v1378[v1383];
                        uint64_t v1395 = v1389;
                        uint64_t v1396 = v1390;
                        do
                        {
                          if (v1392 >= 1)
                          {
                            int v1397 = 0;
                            int v1398 = v1377[v1384];
                            uint64_t v1399 = (void *)*v11;
                            uint64_t v1400 = 4 * *(void *)(v1380 + 8 * v1384);
                            uint64_t v1401 = 4 * v1378[v1384];
                            uint64_t v1402 = v1395;
                            uint64_t v1403 = v1396;
                            do
                            {
                              if (v1398 >= 1)
                              {
                                uint64_t v1404 = (_DWORD *)(v1399[19] + v1403);
                                uint64_t v1405 = (_DWORD *)(v171[19] + v1402);
                                LODWORD(result) = v1398;
                                do
                                {
                                  *uint64_t v1404 = *v1405;
                                  uint64_t v1404 = (_DWORD *)((char *)v1404 + v1400);
                                  uint64_t v1405 = (_DWORD *)((char *)v1405 + v1401);
                                  uint64_t result = (result - 1);
                                }
                                while (result);
                              }
                              ++v1397;
                              v1403 += v1393;
                              v1402 += v1394;
                            }
                            while (v1397 != v1392);
                          }
                          ++v1391;
                          v1396 += v1387;
                          v1395 += v1388;
                        }
                        while (v1391 != v1386);
                      }
                      ++v1385;
                      v1390 += v1573;
                      v1389 += v1557;
                    }
                    while (v1385 != v1590);
                  }
                  v1541 += v1490;
                  v1525 += v1480;
                  ++v1512;
                }
                while (v1512 != v1500);
              }
              break;
            default:
              uint64_t v1255 = (char *)a4[1];
              LODWORD(v1256) = 1;
              uint64_t v1257 = -20;
              do
              {
                uint64_t v1256 = *(int *)&v1255[v1257] * (uint64_t)(int)v1256;
                v1257 += 4;
              }
              while (v1257);
              unint64_t v1435 = v171[6];
              if (v1435)
              {
                uint64_t result = 0;
                uint64_t v1258 = (v172 << 30) - 0x500000000;
                uint64_t v1259 = *a4;
                uint64_t v1489 = *v8;
                int v1260 = *a5;
                uint64_t v1420 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                uint64_t v1425 = ((unint64_t)(v1255 - (char *)*a4) >> 2) - 1;
                uint64_t v1261 = *a6;
                int v1499 = *(int *)((char *)*a4 + (v1258 >> 30));
                uint64_t v1415 = ((v172 << 30) - 0x400000000) >> 32;
                uint64_t v1262 = ((v172 << 30) - 0x200000000) >> 32;
                uint64_t v1263 = ((v172 << 30) - 0x100000000) >> 32;
                uint64_t v1479 = 4 * *(void *)(*a6 + (v1258 >> 29));
                uint64_t v1460 = ((v172 << 30) - 0x300000000) >> 32;
                uint64_t v1469 = 4 * *(uint64_t *)((char *)*a5 + (v1258 >> 29));
                uint64_t v1430 = v1256;
                do
                {
                  uint64_t v1264 = v1425;
                  uint64_t v1452 = result;
                  uint64_t v1265 = 0;
                  if ((v1425 & 0x80000000) != 0)
                  {
                    uint64_t v1266 = v1420;
                  }
                  else
                  {
                    uint64_t v1266 = v1420;
                    do
                    {
                      ldiv_t v1267 = ldiv((int)result, v1259[v1264]);
                      LODWORD(result) = v1267.quot;
                      v1265 += v1260[v1264--] * v1267.rem;
                    }
                    while (v1264 != -1);
                  }
                  uint64_t v1268 = 0;
                  if ((v1266 & 0x80000000) == 0)
                  {
                    int v1269 = v1452;
                    do
                    {
                      ldiv_t v1270 = ldiv(v1269, *(int *)(v1489 + 4 * v1266));
                      int v1269 = v1270.quot;
                      v1268 += *(void *)(v1261 + 8 * v1266--) * v1270.rem;
                    }
                    while (v1266 != -1);
                  }
                  if (v1499 >= 1)
                  {
                    int v1271 = 0;
                    int v1588 = v1259[v1415];
                    uint64_t v1540 = 4 * (v1268 + v1440);
                    uint64_t v1571 = 4 * *(void *)(v1261 + 8 * v1415);
                    uint64_t v1524 = 4 * (v1265 + v1441);
                    uint64_t v1555 = 4 * v1260[v1415];
                    do
                    {
                      int v1511 = v1271;
                      if (v1588 >= 1)
                      {
                        int v1272 = 0;
                        int v1273 = v1259[v1460];
                        uint64_t v1274 = 4 * *(void *)(v1261 + 8 * v1460);
                        uint64_t v1275 = 4 * v1260[v1460];
                        uint64_t v1276 = v1524;
                        uint64_t v1277 = v1540;
                        do
                        {
                          if (v1273 >= 1)
                          {
                            int v1278 = 0;
                            int v1279 = v1259[v1262];
                            uint64_t v1280 = 4 * *(void *)(v1261 + 8 * v1262);
                            uint64_t v1281 = 4 * v1260[v1262];
                            uint64_t v1282 = v1276;
                            uint64_t v1283 = v1277;
                            do
                            {
                              if (v1279 >= 1)
                              {
                                int v1284 = 0;
                                int v1285 = v1259[v1263];
                                uint64_t v1286 = (void *)*v11;
                                uint64_t v1287 = 4 * *(void *)(v1261 + 8 * v1263);
                                uint64_t v1288 = 4 * v1260[v1263];
                                uint64_t v1289 = v1282;
                                uint64_t v1290 = v1283;
                                do
                                {
                                  if (v1285 >= 1)
                                  {
                                    uint64_t v1291 = (_DWORD *)(v1286[19] + v1290);
                                    uint64_t v1292 = (_DWORD *)(v171[19] + v1289);
                                    int v1293 = v1285;
                                    do
                                    {
                                      *uint64_t v1291 = *v1292;
                                      uint64_t v1291 = (_DWORD *)((char *)v1291 + v1287);
                                      uint64_t v1292 = (_DWORD *)((char *)v1292 + v1288);
                                      --v1293;
                                    }
                                    while (v1293);
                                  }
                                  ++v1284;
                                  v1290 += v1280;
                                  v1289 += v1281;
                                }
                                while (v1284 != v1279);
                              }
                              ++v1278;
                              v1283 += v1274;
                              v1282 += v1275;
                            }
                            while (v1278 != v1273);
                          }
                          ++v1272;
                          v1277 += v1571;
                          v1276 += v1555;
                        }
                        while (v1272 != v1588);
                      }
                      int v1271 = v1511 + 1;
                      v1540 += v1479;
                      v1524 += v1469;
                    }
                    while (v1511 + 1 != v1499);
                  }
                  uint64_t result = v1452 + v1430;
                }
                while (v1435 > v1452 + v1430);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}