void mlx::core::Greater::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t *v3;
  uint64_t vars8;

  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Greater::eval();
  }
}

void mlx::core::anonymous namespace'::comparison_op<mlx::core::detail::Greater>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*a1 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 0;
          }
          BOOL v8 = v7;
          goto LABEL_26;
        case 1:
          int v29 = *(_DWORD *)(*a2 + 160);
          if (v29 >= 1)
          {
            int v30 = **(unsigned __int8 **)(*a1 + 152);
            v31 = *(char **)(*(void *)a3 + 152);
            v32 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v33 = v29 + 1;
            do
            {
              int v35 = *v32++;
              int v34 = v35;
              if (v30) {
                BOOL v36 = v34 == 0;
              }
              else {
                BOOL v36 = 0;
              }
              char v37 = v36;
              *v31++ = v37;
              --v33;
            }
            while (v33 > 1);
          }
          return;
        case 2:
          int v38 = *(_DWORD *)(*a1 + 160);
          if (v38 >= 1)
          {
            int v39 = **(unsigned __int8 **)(*a2 + 152);
            v40 = *(char **)(*(void *)a3 + 152);
            v41 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v42 = v38 + 1;
            do
            {
              int v44 = *v41++;
              int v43 = v44;
              if (v39) {
                BOOL v45 = 1;
              }
              else {
                BOOL v45 = v43 == 0;
              }
              char v46 = !v45;
              *v40++ = v46;
              --v42;
            }
            while (v42 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(char **)(*(void *)a3 + 152);
            v49 = *(unsigned __int8 **)(*a2 + 152);
            v50 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v52 = *v50++;
              BOOL v7 = v52 == 0;
              int v54 = *v49++;
              int v53 = v54;
              char v56 = !v7 && v53 == 0;
              *v48++ = v56;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v20 = *(void **)a3;
          uint64_t v21 = *a1;
          v22 = *(int **)*a1;
          uint64_t v23 = (*(void *)(*a1 + 8) - (void)v22) >> 2;
          uint64_t v24 = (v23 - 1);
          if ((int)v24 >= -1) {
            int v25 = -1;
          }
          else {
            int v25 = v23 - 1;
          }
          int v26 = v25 + 1;
          int v27 = v23 + 1;
          break;
      }
      while (1)
      {
        unsigned int v28 = v27 - 2;
        if (v27 - 2 < 0) {
          break;
        }
        --v27;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v28) != *(void *)(v20[3] + 8 * v28)) {
          goto LABEL_180;
        }
      }
      int v27 = v26;
LABEL_180:
      v231 = (void *)*a2;
      v232 = *(int **)*a2;
      uint64_t v233 = (v231[1] - (void)v232) >> 2;
      uint64_t v234 = (v233 - 1);
      if ((int)v234 >= -1) {
        int v235 = -1;
      }
      else {
        int v235 = v233 - 1;
      }
      int v236 = v235 + 1;
      int v237 = v233 + 1;
      while (1)
      {
        unsigned int v238 = v237 - 2;
        if (v237 - 2 < 0) {
          break;
        }
        --v237;
        if (*(void *)(v231[3] + 8 * v238) != *(void *)(v20[3] + 8 * v238)) {
          goto LABEL_236;
        }
      }
      int v237 = v236;
LABEL_236:
      int v287 = v23 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v288)) {
          goto LABEL_271;
        }
      }
      int v287 = v26;
LABEL_271:
      int v301 = v233 + 1;
      while (1)
      {
        unsigned int v302 = v301 - 2;
        if (v301 - 2 < 0) {
          break;
        }
        --v301;
        if (*(void *)(v231[3] + 8 * v302)) {
          goto LABEL_306;
        }
      }
      int v301 = v236;
LABEL_306:
      unint64_t v315 = (uint64_t)(v20[1] - *v20) >> 2;
      if (v27 <= v237) {
        int v316 = v237;
      }
      else {
        int v316 = v27;
      }
      if (v27 <= v301) {
        int v27 = v301;
      }
      if (v287 > v237) {
        int v237 = v287;
      }
      if (v315 > v237)
      {
        int v317 = 1;
      }
      else
      {
        int v237 = (uint64_t)(v20[1] - *v20) >> 2;
        int v317 = 4;
      }
      if (v315 > v27)
      {
        int v318 = 2;
      }
      else
      {
        int v27 = v237;
        int v318 = v317;
      }
      if (v315 > v316)
      {
        int v27 = v316;
        int v318 = 3;
      }
      uint64_t v2049 = v234;
      uint64_t v2063 = v24;
      if (!v27) {
        goto LABEL_341;
      }
      unint64_t v319 = *(void *)(v20[3] + 8 * (v27 - 1));
      if (v319 < 0x10) {
        goto LABEL_341;
      }
      switch(v318)
      {
        case 1:
          if (v27 == 2)
          {
            uint64_t v1420 = *v22;
            if (v1420)
            {
              uint64_t v1421 = 0;
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = *(void *)(v21 + 152);
              uint64_t v1425 = v231[19];
              uint64_t v1426 = v20[19];
              unint64_t v1427 = v22[1];
              v1428 = *(uint64_t **)(v21 + 24);
              uint64_t v1429 = *v1428;
              uint64_t v1430 = v1428[1];
              v1431 = (uint64_t *)v231[3];
              uint64_t v1433 = *v1431;
              uint64_t v1432 = v1431[1];
              if (v1427 <= 1) {
                uint64_t v1434 = 1;
              }
              else {
                uint64_t v1434 = v22[1];
              }
              uint64_t v1435 = v1429 - v1430 * v1427;
              uint64_t v1436 = v1433 - v1432 * v232[1];
              do
              {
                if (v1427)
                {
                  uint64_t v1437 = 0;
                  uint64_t v1438 = v1425 + v1422;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1439 = 0;
                      int v1440 = *(unsigned __int8 *)(v1424 + v1423);
                      unsigned int v1441 = v319 + 1;
                      do
                      {
                        if (v1440) {
                          BOOL v1442 = *(unsigned char *)(v1438 + v1439) == 0;
                        }
                        else {
                          BOOL v1442 = 0;
                        }
                        char v1443 = v1442;
                        *(unsigned char *)(v1426 + v1439) = v1443;
                        --v1441;
                        ++v1439;
                      }
                      while (v1441 > 1);
                    }
                    v1423 += v1430;
                    v1422 += v1432;
                    v1426 += (int)v319;
                    ++v1437;
                    v1438 += v1432;
                  }
                  while (v1437 != v1434);
                }
                v1423 += v1435;
                v1422 += v1436;
                ++v1421;
              }
              while (v1421 != v1420);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1020 = *v22;
            if (v1020)
            {
              uint64_t v1021 = 0;
              uint64_t v1022 = 0;
              uint64_t v1023 = *(void *)(v21 + 152);
              uint64_t v1024 = v231[19];
              uint64_t v1025 = v20[19];
              uint64_t v1026 = **(void **)(v21 + 24);
              uint64_t v1027 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1028 = 0;
                  int v1029 = *(unsigned __int8 *)(v1023 + v1022);
                  unsigned int v1030 = v319 + 1;
                  do
                  {
                    if (v1029) {
                      BOOL v1031 = *(unsigned char *)(v1024 + v1028) == 0;
                    }
                    else {
                      BOOL v1031 = 0;
                    }
                    char v1032 = v1031;
                    *(unsigned char *)(v1025 + v1028) = v1032;
                    --v1030;
                    ++v1028;
                  }
                  while (v1030 > 1);
                }
                v1022 += v1026;
                v1025 += (int)v319;
                ++v1021;
                v1024 += v1027;
              }
              while (v1021 != v1020);
            }
          }
          else
          {
            unint64_t v2000 = v20[6];
            if (v2000)
            {
              unint64_t v2035 = 0;
              uint64_t v1925 = v231[19];
              uint64_t v1951 = *(void *)(v21 + 152);
              uint64_t v1444 = v20[19];
              do
              {
                uint64_t v1445 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1446 = *(void *)(v21 + 24);
                  int quot = v2035;
                  do
                  {
                    ldiv_t v1448 = ldiv(quot, v22[v24]);
                    int quot = v1448.quot;
                    v1445 += *(void *)(v1446 + 8 * v24--) * v1448.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1449 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1450) = 0;
                }
                else
                {
                  uint64_t v1450 = 0;
                  uint64_t v1451 = v231[3];
                  int v1452 = v2035;
                  do
                  {
                    ldiv_t v1453 = ldiv(v1452, v232[v1449]);
                    int v1452 = v1453.quot;
                    v1450 += *(void *)(v1451 + 8 * v1449--) * v1453.rem;
                  }
                  while (v1449 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1454 = 0;
                  int v1455 = *(unsigned __int8 *)(v1951 + (int)v1445);
                  unsigned int v1456 = v319 + 1;
                  do
                  {
                    if (v1455) {
                      BOOL v1457 = *(unsigned char *)(v1925 + (int)v1450 + v1454) == 0;
                    }
                    else {
                      BOOL v1457 = 0;
                    }
                    char v1458 = v1457;
                    *(unsigned char *)(v1444 + v1454) = v1458;
                    --v1456;
                    ++v1454;
                  }
                  while (v1456 > 1);
                }
                v1444 += (int)v319;
                v2035 += (int)v319;
              }
              while (v2035 < v2000);
            }
          }
          break;
        case 2:
          if (v27 == 2)
          {
            uint64_t v1459 = *v22;
            if (v1459)
            {
              uint64_t v1460 = 0;
              uint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = *(void *)(v21 + 152);
              uint64_t v1464 = v231[19];
              uint64_t v1465 = v20[19];
              unint64_t v1466 = v22[1];
              v1467 = *(uint64_t **)(v21 + 24);
              uint64_t v1468 = *v1467;
              uint64_t v1469 = v1467[1];
              v1470 = (uint64_t *)v231[3];
              uint64_t v1472 = *v1470;
              uint64_t v1471 = v1470[1];
              if (v1466 <= 1) {
                uint64_t v1473 = 1;
              }
              else {
                uint64_t v1473 = v22[1];
              }
              uint64_t v1474 = v1468 - v1469 * v1466;
              uint64_t v1475 = v1472 - v1471 * v232[1];
              do
              {
                if (v1466)
                {
                  uint64_t v1476 = 0;
                  uint64_t v1477 = v1463 + v1462;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1478 = 0;
                      int v1479 = *(unsigned __int8 *)(v1464 + v1461);
                      unsigned int v1480 = v319 + 1;
                      do
                      {
                        if (v1479) {
                          BOOL v1481 = 1;
                        }
                        else {
                          BOOL v1481 = *(unsigned char *)(v1477 + v1478) == 0;
                        }
                        char v1482 = !v1481;
                        *(unsigned char *)(v1465 + v1478) = v1482;
                        --v1480;
                        ++v1478;
                      }
                      while (v1480 > 1);
                    }
                    v1462 += v1469;
                    v1461 += v1471;
                    v1465 += (int)v319;
                    ++v1476;
                    v1477 += v1469;
                  }
                  while (v1476 != v1473);
                }
                v1462 += v1474;
                v1461 += v1475;
                ++v1460;
              }
              while (v1460 != v1459);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1033 = *v22;
            if (v1033)
            {
              uint64_t v1034 = 0;
              uint64_t v1035 = 0;
              uint64_t v1036 = *(void *)(v21 + 152);
              uint64_t v1037 = v231[19];
              uint64_t v1038 = v20[19];
              uint64_t v1039 = **(void **)(v21 + 24);
              uint64_t v1040 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1041 = 0;
                  int v1042 = *(unsigned __int8 *)(v1037 + v1035);
                  unsigned int v1043 = v319 + 1;
                  do
                  {
                    if (v1042) {
                      BOOL v1044 = 1;
                    }
                    else {
                      BOOL v1044 = *(unsigned char *)(v1036 + v1041) == 0;
                    }
                    char v1045 = !v1044;
                    *(unsigned char *)(v1038 + v1041) = v1045;
                    --v1043;
                    ++v1041;
                  }
                  while (v1043 > 1);
                }
                v1035 += v1040;
                v1038 += (int)v319;
                ++v1034;
                v1036 += v1039;
              }
              while (v1034 != v1033);
            }
          }
          else
          {
            unint64_t v2001 = v20[6];
            if (v2001)
            {
              unint64_t v2036 = 0;
              uint64_t v1926 = v231[19];
              uint64_t v1952 = *(void *)(v21 + 152);
              uint64_t v1483 = v20[19];
              do
              {
                uint64_t v1484 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1485 = *(void *)(v21 + 24);
                  int v1486 = v2036;
                  do
                  {
                    ldiv_t v1487 = ldiv(v1486, v22[v24]);
                    int v1486 = v1487.quot;
                    v1484 += *(void *)(v1485 + 8 * v24--) * v1487.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1488 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1489) = 0;
                }
                else
                {
                  uint64_t v1489 = 0;
                  uint64_t v1490 = v231[3];
                  int v1491 = v2036;
                  do
                  {
                    ldiv_t v1492 = ldiv(v1491, v232[v1488]);
                    int v1491 = v1492.quot;
                    v1489 += *(void *)(v1490 + 8 * v1488--) * v1492.rem;
                  }
                  while (v1488 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1493 = 0;
                  int v1494 = *(unsigned __int8 *)(v1926 + (int)v1489);
                  unsigned int v1495 = v319 + 1;
                  do
                  {
                    if (v1494) {
                      BOOL v1496 = 1;
                    }
                    else {
                      BOOL v1496 = *(unsigned char *)(v1952 + (int)v1484 + v1493) == 0;
                    }
                    char v1497 = !v1496;
                    *(unsigned char *)(v1483 + v1493) = v1497;
                    --v1495;
                    ++v1493;
                  }
                  while (v1495 > 1);
                }
                v1483 += (int)v319;
                v2036 += (int)v319;
              }
              while (v2036 < v2001);
            }
          }
          break;
        case 3:
          if (v27 == 2)
          {
            uint64_t v1178 = *v22;
            if (v1178)
            {
              uint64_t v1179 = 0;
              uint64_t v1180 = 0;
              uint64_t v1181 = 0;
              uint64_t v1182 = *(void *)(v21 + 152);
              uint64_t v1183 = v231[19];
              uint64_t v1184 = v20[19];
              unint64_t v1185 = v22[1];
              v1186 = *(uint64_t **)(v21 + 24);
              uint64_t v1187 = *v1186;
              uint64_t v1188 = v1186[1];
              v1189 = (uint64_t *)v231[3];
              uint64_t v1191 = *v1189;
              uint64_t v1190 = v1189[1];
              if (v1185 <= 1) {
                uint64_t v1192 = 1;
              }
              else {
                uint64_t v1192 = v22[1];
              }
              uint64_t v1193 = v1187 - v1188 * v1185;
              uint64_t v1194 = v1191 - v1190 * v232[1];
              do
              {
                if (v1185)
                {
                  uint64_t v1195 = 0;
                  uint64_t v1196 = v1183 + v1180;
                  uint64_t v1197 = v1182 + v1181;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1198 = 0;
                      unsigned int v1199 = v319 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1197 + v1198)) {
                          BOOL v1200 = *(unsigned char *)(v1196 + v1198) == 0;
                        }
                        else {
                          BOOL v1200 = 0;
                        }
                        char v1201 = v1200;
                        *(unsigned char *)(v1184 + v1198) = v1201;
                        --v1199;
                        ++v1198;
                      }
                      while (v1199 > 1);
                    }
                    v1181 += v1188;
                    v1180 += v1190;
                    v1184 += (int)v319;
                    ++v1195;
                    v1196 += v1190;
                    v1197 += v1188;
                  }
                  while (v1195 != v1192);
                }
                v1181 += v1193;
                v1180 += v1194;
                ++v1179;
              }
              while (v1179 != v1178);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v320 = *v22;
            if (v320)
            {
              uint64_t v321 = 0;
              uint64_t v322 = *(void *)(v21 + 152);
              uint64_t v323 = v231[19];
              uint64_t v324 = v20[19];
              uint64_t v325 = **(void **)(v21 + 24);
              uint64_t v326 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v327 = 0;
                  unsigned int v328 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v322 + v327)) {
                      BOOL v329 = *(unsigned char *)(v323 + v327) == 0;
                    }
                    else {
                      BOOL v329 = 0;
                    }
                    char v330 = v329;
                    *(unsigned char *)(v324 + v327) = v330;
                    --v328;
                    ++v327;
                  }
                  while (v328 > 1);
                }
                v324 += (int)v319;
                ++v321;
                v323 += v326;
                v322 += v325;
              }
              while (v321 != v320);
            }
          }
          else
          {
            unint64_t v1993 = v20[6];
            if (v1993)
            {
              unint64_t v2028 = 0;
              uint64_t v1918 = v231[19];
              uint64_t v1944 = *(void *)(v21 + 152);
              uint64_t v1202 = v20[19];
              do
              {
                uint64_t v1203 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1204 = *(void *)(v21 + 24);
                  int v1205 = v2028;
                  do
                  {
                    ldiv_t v1206 = ldiv(v1205, v22[v24]);
                    int v1205 = v1206.quot;
                    v1203 += *(void *)(v1204 + 8 * v24--) * v1206.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1207 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1208) = 0;
                }
                else
                {
                  uint64_t v1208 = 0;
                  uint64_t v1209 = v231[3];
                  int v1210 = v2028;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v232[v1207]);
                    int v1210 = v1211.quot;
                    v1208 += *(void *)(v1209 + 8 * v1207--) * v1211.rem;
                  }
                  while (v1207 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1212 = 0;
                  unsigned int v1213 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1944 + (int)v1203 + v1212)) {
                      BOOL v1214 = *(unsigned char *)(v1918 + (int)v1208 + v1212) == 0;
                    }
                    else {
                      BOOL v1214 = 0;
                    }
                    char v1215 = v1214;
                    *(unsigned char *)(v1202 + v1212) = v1215;
                    --v1213;
                    ++v1212;
                  }
                  while (v1213 > 1);
                }
                v1202 += (int)v319;
                v2028 += (int)v319;
              }
              while (v2028 < v1993);
            }
          }
          break;
        default:
LABEL_341:
          switch(v315)
          {
            case 1uLL:
              uint64_t v331 = v20[6];
              if (v331)
              {
                v332 = *(unsigned char **)(v21 + 152);
                v333 = (unsigned char *)v231[19];
                v334 = (char *)v20[19];
                uint64_t v335 = **(void **)(v21 + 24);
                uint64_t v336 = *(void *)v231[3];
                do
                {
                  if (*v332) {
                    BOOL v337 = *v333 == 0;
                  }
                  else {
                    BOOL v337 = 0;
                  }
                  char v338 = v337;
                  *v334++ = v338;
                  v333 += v336;
                  v332 += v335;
                  --v331;
                }
                while (v331);
              }
              break;
            case 2uLL:
              uint64_t v472 = *v22;
              if (v472)
              {
                uint64_t v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                uint64_t v477 = *(void *)(v21 + 152);
                uint64_t v478 = v231[19];
                uint64_t v479 = v20[19];
                unint64_t v480 = v22[1];
                v481 = *(uint64_t **)(v21 + 24);
                uint64_t v482 = *v481;
                uint64_t v483 = v481[1];
                v484 = (uint64_t *)v231[3];
                uint64_t v485 = *v484;
                uint64_t v486 = v484[1];
                uint64_t v487 = v485 - v486 * v232[1];
                if (v480 <= 1) {
                  uint64_t v488 = 1;
                }
                else {
                  uint64_t v488 = v22[1];
                }
                uint64_t v489 = v482 - v483 * v480;
                do
                {
                  if (v480)
                  {
                    uint64_t v490 = v474 + v488;
                    v491 = (char *)(v479 + v474);
                    uint64_t v492 = v488;
                    do
                    {
                      if (*(unsigned char *)(v477 + v476)) {
                        BOOL v493 = *(unsigned char *)(v478 + v475) == 0;
                      }
                      else {
                        BOOL v493 = 0;
                      }
                      char v494 = v493;
                      *v491++ = v494;
                      v476 += v483;
                      v475 += v486;
                      --v492;
                    }
                    while (v492);
                    uint64_t v474 = v490;
                  }
                  v476 += v489;
                  v475 += v487;
                  ++v473;
                }
                while (v473 != v472);
              }
              break;
            case 3uLL:
              uint64_t v495 = *v22;
              if (v495)
              {
                uint64_t v496 = 0;
                uint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = *(void *)(v21 + 152);
                uint64_t v501 = v231[19];
                uint64_t v502 = v20[19];
                unint64_t v503 = v22[1];
                v504 = *(void **)(v21 + 24);
                uint64_t v505 = v504[1];
                v506 = (void *)v231[3];
                uint64_t v507 = v506[1];
                uint64_t v508 = *v506 - v507 * v232[1];
                if (v503 <= 1) {
                  uint64_t v509 = 1;
                }
                else {
                  uint64_t v509 = v22[1];
                }
                unint64_t v510 = *v504 - v505 * v503;
                do
                {
                  if (v503)
                  {
                    uint64_t v511 = 0;
                    unint64_t v512 = v22[2];
                    uint64_t v513 = v504[2];
                    uint64_t v514 = v506[2];
                    if (v512 <= 1) {
                      uint64_t v515 = 1;
                    }
                    else {
                      uint64_t v515 = v22[2];
                    }
                    uint64_t v516 = v507 - v514 * v232[2];
                    do
                    {
                      uint64_t v517 = v515;
                      if (v512)
                      {
                        do
                        {
                          if (*(unsigned char *)(v500 + v499)) {
                            BOOL v518 = *(unsigned char *)(v501 + v498) == 0;
                          }
                          else {
                            BOOL v518 = 0;
                          }
                          char v519 = v518;
                          *(unsigned char *)(v502 + v497++) = v519;
                          v499 += v513;
                          v498 += v514;
                          --v517;
                        }
                        while (v517);
                      }
                      v499 += v505 - v513 * v512;
                      v498 += v516;
                      ++v511;
                    }
                    while (v511 != v509);
                  }
                  v499 += v510;
                  v498 += v508;
                  ++v496;
                }
                while (v496 != v495);
              }
              break;
            case 4uLL:
              uint64_t v2070 = *v22;
              if (v2070)
              {
                uint64_t v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = 0;
                uint64_t v524 = *(void *)(v21 + 152);
                uint64_t v525 = v231[19];
                uint64_t v526 = v20[19];
                unint64_t v527 = v22[1];
                v528 = *(void **)(v21 + 24);
                v529 = (void *)v231[3];
                uint64_t v1966 = v529[1];
                uint64_t v1980 = v528[1];
                if (v527 <= 1) {
                  uint64_t v530 = 1;
                }
                else {
                  uint64_t v530 = v22[1];
                }
                unint64_t v2015 = *v528 - v528[1] * v527;
                uint64_t v2056 = *v529 - v1966 * v232[1];
                do
                {
                  if (v527)
                  {
                    uint64_t v531 = 0;
                    unint64_t v532 = v22[2];
                    uint64_t v533 = v528[2];
                    uint64_t v534 = v529[2];
                    if (v532 <= 1) {
                      uint64_t v535 = 1;
                    }
                    else {
                      uint64_t v535 = v22[2];
                    }
                    uint64_t v536 = v1966 - v534 * v232[2];
                    do
                    {
                      if (v532)
                      {
                        uint64_t v537 = 0;
                        unint64_t v538 = v22[3];
                        uint64_t v539 = v528[3];
                        uint64_t v540 = v529[3];
                        if (v538 <= 1) {
                          uint64_t v541 = 1;
                        }
                        else {
                          uint64_t v541 = v22[3];
                        }
                        uint64_t v542 = v534 - v540 * v232[3];
                        do
                        {
                          uint64_t v543 = v541;
                          if (v538)
                          {
                            do
                            {
                              if (*(unsigned char *)(v524 + v523)) {
                                BOOL v544 = *(unsigned char *)(v525 + v522) == 0;
                              }
                              else {
                                BOOL v544 = 0;
                              }
                              char v545 = v544;
                              *(unsigned char *)(v526 + v521++) = v545;
                              v523 += v539;
                              v522 += v540;
                              --v543;
                            }
                            while (v543);
                          }
                          v523 += v533 - v539 * v538;
                          v522 += v542;
                          ++v537;
                        }
                        while (v537 != v535);
                      }
                      v523 += v1980 - v533 * v532;
                      v522 += v536;
                      ++v531;
                    }
                    while (v531 != v530);
                  }
                  v523 += v2015;
                  v522 += v2056;
                  ++v520;
                }
                while (v520 != v2070);
              }
              break;
            default:
              uint64_t v459 = v20[6];
              if (v459)
              {
                uint64_t v460 = 0;
                uint64_t v1979 = v231[19];
                uint64_t v2014 = *(void *)(v21 + 152);
                uint64_t v1965 = v20[19];
                do
                {
                  uint64_t v461 = 0;
                  if ((v24 & 0x80000000) == 0)
                  {
                    uint64_t v462 = *(void *)(v21 + 24);
                    int v463 = v460;
                    do
                    {
                      ldiv_t v464 = ldiv(v463, v22[v24]);
                      int v463 = v464.quot;
                      v461 += *(void *)(v462 + 8 * v24--) * v464.rem;
                    }
                    while (v24 != -1);
                  }
                  uint64_t v465 = v2049;
                  if ((v2049 & 0x80000000) != 0)
                  {
                    LODWORD(v466) = 0;
                  }
                  else
                  {
                    uint64_t v466 = 0;
                    uint64_t v467 = v231[3];
                    int v468 = v460;
                    do
                    {
                      ldiv_t v469 = ldiv(v468, v232[v465]);
                      int v468 = v469.quot;
                      v466 += *(void *)(v467 + 8 * v465--) * v469.rem;
                    }
                    while (v465 != -1);
                  }
                  if (*(unsigned char *)(v2014 + (int)v461)) {
                    BOOL v470 = *(unsigned char *)(v1979 + (int)v466) == 0;
                  }
                  else {
                    BOOL v470 = 0;
                  }
                  char v471 = v470;
                  *(unsigned char *)(v1965 + v460++) = v471;
                  uint64_t v24 = v2063;
                }
                while (v460 != v459);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          unsigned int v10 = **(unsigned __int8 **)(*a1 + 152);
          unsigned int v11 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v66 = *(_DWORD *)(*a2 + 160);
          if (v66 >= 1)
          {
            unsigned int v67 = **(unsigned __int8 **)(*a1 + 152);
            v68 = *(BOOL **)(*(void *)a3 + 152);
            v69 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v70 = v66 + 1;
            do
            {
              unsigned int v71 = *v69++;
              *v68++ = v67 > v71;
              --v70;
            }
            while (v70 > 1);
          }
          return;
        case 2:
          int v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            unsigned int v73 = **(unsigned __int8 **)(*a2 + 152);
            v74 = *(BOOL **)(*(void *)a3 + 152);
            v75 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              unsigned int v77 = *v75++;
              *v74++ = v77 > v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            v79 = *(BOOL **)(*(void *)a3 + 152);
            v80 = *(unsigned __int8 **)(*a2 + 152);
            v81 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              unsigned int v84 = *v81++;
              unsigned int v83 = v84;
              unsigned int v85 = *v80++;
              *v79++ = v83 > v85;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          v57 = *(void **)a3;
          uint64_t v58 = *a1;
          v59 = *(int **)*a1;
          uint64_t v60 = (*(void *)(*a1 + 8) - (void)v59) >> 2;
          uint64_t v61 = (v60 - 1);
          if ((int)v61 >= -1) {
            int v62 = -1;
          }
          else {
            int v62 = v60 - 1;
          }
          int v63 = v62 + 1;
          int v64 = v60 + 1;
          break;
      }
      while (1)
      {
        unsigned int v65 = v64 - 2;
        if (v64 - 2 < 0) {
          break;
        }
        --v64;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v65) != *(void *)(v57[3] + 8 * v65)) {
          goto LABEL_188;
        }
      }
      int v64 = v63;
LABEL_188:
      v239 = (void *)*a2;
      v240 = *(int **)*a2;
      uint64_t v241 = (v239[1] - (void)v240) >> 2;
      uint64_t v242 = (v241 - 1);
      if ((int)v242 >= -1) {
        int v243 = -1;
      }
      else {
        int v243 = v241 - 1;
      }
      int v244 = v243 + 1;
      int v245 = v241 + 1;
      while (1)
      {
        unsigned int v246 = v245 - 2;
        if (v245 - 2 < 0) {
          break;
        }
        --v245;
        if (*(void *)(v239[3] + 8 * v246) != *(void *)(v57[3] + 8 * v246)) {
          goto LABEL_241;
        }
      }
      int v245 = v244;
LABEL_241:
      int v289 = v60 + 1;
      while (1)
      {
        unsigned int v290 = v289 - 2;
        if (v289 - 2 < 0) {
          break;
        }
        --v289;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v290)) {
          goto LABEL_276;
        }
      }
      int v289 = v63;
LABEL_276:
      int v303 = v241 + 1;
      while (1)
      {
        unsigned int v304 = v303 - 2;
        if (v303 - 2 < 0) {
          break;
        }
        --v303;
        if (*(void *)(v239[3] + 8 * v304)) {
          goto LABEL_353;
        }
      }
      int v303 = v244;
LABEL_353:
      unint64_t v339 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v245) {
        int v340 = v245;
      }
      else {
        int v340 = v64;
      }
      if (v64 <= v303) {
        int v64 = v303;
      }
      if (v289 > v245) {
        int v245 = v289;
      }
      if (v339 > v245)
      {
        int v341 = 1;
      }
      else
      {
        int v245 = (uint64_t)(v57[1] - *v57) >> 2;
        int v341 = 4;
      }
      if (v339 > v64)
      {
        int v342 = 2;
      }
      else
      {
        int v64 = v245;
        int v342 = v341;
      }
      if (v339 > v340)
      {
        int v64 = v340;
        int v342 = 3;
      }
      uint64_t v2050 = v242;
      uint64_t v2064 = v61;
      if (!v64) {
        goto LABEL_382;
      }
      unint64_t v343 = *(void *)(v57[3] + 8 * (v64 - 1));
      if (v343 < 0x10) {
        goto LABEL_382;
      }
      switch(v342)
      {
        case 1:
          if (v64 == 2)
          {
            uint64_t v1498 = *v59;
            if (v1498)
            {
              uint64_t v1499 = 0;
              uint64_t v1500 = 0;
              uint64_t v1501 = 0;
              uint64_t v1502 = *(void *)(v58 + 152);
              uint64_t v1503 = v239[19];
              uint64_t v1504 = v57[19];
              unint64_t v1505 = v59[1];
              v1506 = *(uint64_t **)(v58 + 24);
              uint64_t v1507 = *v1506;
              uint64_t v1508 = v1506[1];
              v1509 = (uint64_t *)v239[3];
              uint64_t v1511 = *v1509;
              uint64_t v1510 = v1509[1];
              if (v1505 <= 1) {
                uint64_t v1512 = 1;
              }
              else {
                uint64_t v1512 = v59[1];
              }
              uint64_t v1513 = v1507 - v1508 * v1505;
              uint64_t v1514 = v1511 - v1510 * v240[1];
              do
              {
                if (v1505)
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v1503 + v1500;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1517 = 0;
                      unsigned int v1518 = *(unsigned __int8 *)(v1502 + v1501);
                      unsigned int v1519 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1504 + v1517) = v1518 > *(unsigned __int8 *)(v1516 + v1517);
                        --v1519;
                        ++v1517;
                      }
                      while (v1519 > 1);
                    }
                    v1501 += v1508;
                    v1500 += v1510;
                    v1504 += (int)v343;
                    ++v1515;
                    v1516 += v1510;
                  }
                  while (v1515 != v1512);
                }
                v1501 += v1513;
                v1500 += v1514;
                ++v1499;
              }
              while (v1499 != v1498);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1046 = *v59;
            if (v1046)
            {
              uint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1049 = *(void *)(v58 + 152);
              uint64_t v1050 = v239[19];
              uint64_t v1051 = v57[19];
              uint64_t v1052 = **(void **)(v58 + 24);
              uint64_t v1053 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1054 = 0;
                  unsigned int v1055 = *(unsigned __int8 *)(v1049 + v1048);
                  unsigned int v1056 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1051 + v1054) = v1055 > *(unsigned __int8 *)(v1050 + v1054);
                    --v1056;
                    ++v1054;
                  }
                  while (v1056 > 1);
                }
                v1048 += v1052;
                v1051 += (int)v343;
                ++v1047;
                v1050 += v1053;
              }
              while (v1047 != v1046);
            }
          }
          else
          {
            unint64_t v2002 = v57[6];
            if (v2002)
            {
              unint64_t v2037 = 0;
              uint64_t v1927 = v239[19];
              uint64_t v1953 = *(void *)(v58 + 152);
              uint64_t v1520 = v57[19];
              do
              {
                uint64_t v1521 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1522 = *(void *)(v58 + 24);
                  int v1523 = v2037;
                  do
                  {
                    ldiv_t v1524 = ldiv(v1523, v59[v61]);
                    int v1523 = v1524.quot;
                    v1521 += *(void *)(v1522 + 8 * v61--) * v1524.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1525 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1526) = 0;
                }
                else
                {
                  uint64_t v1526 = 0;
                  uint64_t v1527 = v239[3];
                  int v1528 = v2037;
                  do
                  {
                    ldiv_t v1529 = ldiv(v1528, v240[v1525]);
                    int v1528 = v1529.quot;
                    v1526 += *(void *)(v1527 + 8 * v1525--) * v1529.rem;
                  }
                  while (v1525 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1530 = 0;
                  unsigned int v1531 = *(unsigned __int8 *)(v1953 + (int)v1521);
                  unsigned int v1532 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1520 + v1530) = v1531 > *(unsigned __int8 *)(v1927 + (int)v1526 + v1530);
                    --v1532;
                    ++v1530;
                  }
                  while (v1532 > 1);
                }
                v1520 += (int)v343;
                v2037 += (int)v343;
              }
              while (v2037 < v2002);
            }
          }
          break;
        case 2:
          if (v64 == 2)
          {
            uint64_t v1533 = *v59;
            if (v1533)
            {
              uint64_t v1534 = 0;
              uint64_t v1535 = 0;
              uint64_t v1536 = 0;
              uint64_t v1537 = *(void *)(v58 + 152);
              uint64_t v1538 = v239[19];
              uint64_t v1539 = v57[19];
              unint64_t v1540 = v59[1];
              v1541 = *(uint64_t **)(v58 + 24);
              uint64_t v1542 = *v1541;
              uint64_t v1543 = v1541[1];
              v1544 = (uint64_t *)v239[3];
              uint64_t v1546 = *v1544;
              uint64_t v1545 = v1544[1];
              if (v1540 <= 1) {
                uint64_t v1547 = 1;
              }
              else {
                uint64_t v1547 = v59[1];
              }
              uint64_t v1548 = v1542 - v1543 * v1540;
              uint64_t v1549 = v1546 - v1545 * v240[1];
              do
              {
                if (v1540)
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v1537 + v1536;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1552 = 0;
                      unsigned int v1553 = *(unsigned __int8 *)(v1538 + v1535);
                      unsigned int v1554 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1539 + v1552) = *(unsigned __int8 *)(v1551 + v1552) > v1553;
                        --v1554;
                        ++v1552;
                      }
                      while (v1554 > 1);
                    }
                    v1536 += v1543;
                    v1535 += v1545;
                    v1539 += (int)v343;
                    ++v1550;
                    v1551 += v1543;
                  }
                  while (v1550 != v1547);
                }
                v1536 += v1548;
                v1535 += v1549;
                ++v1534;
              }
              while (v1534 != v1533);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1057 = *v59;
            if (v1057)
            {
              uint64_t v1058 = 0;
              uint64_t v1059 = 0;
              uint64_t v1060 = *(void *)(v58 + 152);
              uint64_t v1061 = v239[19];
              uint64_t v1062 = v57[19];
              uint64_t v1063 = **(void **)(v58 + 24);
              uint64_t v1064 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1065 = 0;
                  unsigned int v1066 = *(unsigned __int8 *)(v1061 + v1059);
                  unsigned int v1067 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1062 + v1065) = *(unsigned __int8 *)(v1060 + v1065) > v1066;
                    --v1067;
                    ++v1065;
                  }
                  while (v1067 > 1);
                }
                v1059 += v1064;
                v1062 += (int)v343;
                ++v1058;
                v1060 += v1063;
              }
              while (v1058 != v1057);
            }
          }
          else
          {
            unint64_t v2003 = v57[6];
            if (v2003)
            {
              unint64_t v2038 = 0;
              uint64_t v1928 = v239[19];
              uint64_t v1954 = *(void *)(v58 + 152);
              uint64_t v1555 = v57[19];
              do
              {
                uint64_t v1556 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1557 = *(void *)(v58 + 24);
                  int v1558 = v2038;
                  do
                  {
                    ldiv_t v1559 = ldiv(v1558, v59[v61]);
                    int v1558 = v1559.quot;
                    v1556 += *(void *)(v1557 + 8 * v61--) * v1559.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1560 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1561) = 0;
                }
                else
                {
                  uint64_t v1561 = 0;
                  uint64_t v1562 = v239[3];
                  int v1563 = v2038;
                  do
                  {
                    ldiv_t v1564 = ldiv(v1563, v240[v1560]);
                    int v1563 = v1564.quot;
                    v1561 += *(void *)(v1562 + 8 * v1560--) * v1564.rem;
                  }
                  while (v1560 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1565 = 0;
                  unsigned int v1566 = *(unsigned __int8 *)(v1928 + (int)v1561);
                  unsigned int v1567 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1555 + v1565) = *(unsigned __int8 *)(v1954 + (int)v1556 + v1565) > v1566;
                    --v1567;
                    ++v1565;
                  }
                  while (v1567 > 1);
                }
                v1555 += (int)v343;
                v2038 += (int)v343;
              }
              while (v2038 < v2003);
            }
          }
          break;
        case 3:
          if (v64 == 2)
          {
            uint64_t v1216 = *v59;
            if (v1216)
            {
              uint64_t v1217 = 0;
              uint64_t v1218 = 0;
              uint64_t v1219 = 0;
              uint64_t v1220 = *(void *)(v58 + 152);
              uint64_t v1221 = v239[19];
              uint64_t v1222 = v57[19];
              unint64_t v1223 = v59[1];
              v1224 = *(uint64_t **)(v58 + 24);
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              v1227 = (uint64_t *)v239[3];
              uint64_t v1229 = *v1227;
              uint64_t v1228 = v1227[1];
              if (v1223 <= 1) {
                uint64_t v1230 = 1;
              }
              else {
                uint64_t v1230 = v59[1];
              }
              uint64_t v1231 = v1225 - v1226 * v1223;
              uint64_t v1232 = v1229 - v1228 * v240[1];
              do
              {
                if (v1223)
                {
                  uint64_t v1233 = 0;
                  uint64_t v1234 = v1221 + v1218;
                  uint64_t v1235 = v1220 + v1219;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1236 = 0;
                      unsigned int v1237 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1222 + v1236) = *(unsigned __int8 *)(v1235 + v1236) > *(unsigned __int8 *)(v1234 + v1236);
                        --v1237;
                        ++v1236;
                      }
                      while (v1237 > 1);
                    }
                    v1219 += v1226;
                    v1218 += v1228;
                    v1222 += (int)v343;
                    ++v1233;
                    v1234 += v1228;
                    v1235 += v1226;
                  }
                  while (v1233 != v1230);
                }
                v1219 += v1231;
                v1218 += v1232;
                ++v1217;
              }
              while (v1217 != v1216);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v344 = *v59;
            if (v344)
            {
              uint64_t v345 = 0;
              uint64_t v346 = *(void *)(v58 + 152);
              uint64_t v347 = v239[19];
              uint64_t v348 = v57[19];
              uint64_t v349 = **(void **)(v58 + 24);
              uint64_t v350 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v351 = 0;
                  unsigned int v352 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v348 + v351) = *(unsigned __int8 *)(v346 + v351) > *(unsigned __int8 *)(v347 + v351);
                    --v352;
                    ++v351;
                  }
                  while (v352 > 1);
                }
                v348 += (int)v343;
                ++v345;
                v347 += v350;
                v346 += v349;
              }
              while (v345 != v344);
            }
          }
          else
          {
            unint64_t v1994 = v57[6];
            if (v1994)
            {
              unint64_t v2029 = 0;
              uint64_t v1919 = v239[19];
              uint64_t v1945 = *(void *)(v58 + 152);
              uint64_t v1238 = v57[19];
              do
              {
                uint64_t v1239 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1240 = *(void *)(v58 + 24);
                  int v1241 = v2029;
                  do
                  {
                    ldiv_t v1242 = ldiv(v1241, v59[v61]);
                    int v1241 = v1242.quot;
                    v1239 += *(void *)(v1240 + 8 * v61--) * v1242.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1243 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1244) = 0;
                }
                else
                {
                  uint64_t v1244 = 0;
                  uint64_t v1245 = v239[3];
                  int v1246 = v2029;
                  do
                  {
                    ldiv_t v1247 = ldiv(v1246, v240[v1243]);
                    int v1246 = v1247.quot;
                    v1244 += *(void *)(v1245 + 8 * v1243--) * v1247.rem;
                  }
                  while (v1243 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1248 = 0;
                  unsigned int v1249 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1238 + v1248) = *(unsigned __int8 *)(v1945 + (int)v1239 + v1248) > *(unsigned __int8 *)(v1919 + (int)v1244 + v1248);
                    --v1249;
                    ++v1248;
                  }
                  while (v1249 > 1);
                }
                v1238 += (int)v343;
                v2029 += (int)v343;
              }
              while (v2029 < v1994);
            }
          }
          break;
        default:
LABEL_382:
          switch(v339)
          {
            case 1uLL:
              uint64_t v353 = v57[6];
              if (v353)
              {
                v354 = *(unsigned __int8 **)(v58 + 152);
                v355 = (unsigned __int8 *)v239[19];
                v356 = (BOOL *)v57[19];
                uint64_t v357 = **(void **)(v58 + 24);
                uint64_t v358 = *(void *)v239[3];
                do
                {
                  *v356++ = *v354 > *v355;
                  v355 += v358;
                  v354 += v357;
                  --v353;
                }
                while (v353);
              }
              break;
            case 2uLL:
              uint64_t v557 = *v59;
              if (v557)
              {
                uint64_t v558 = 0;
                uint64_t v559 = 0;
                uint64_t v560 = 0;
                uint64_t v561 = 0;
                uint64_t v562 = *(void *)(v58 + 152);
                uint64_t v563 = v239[19];
                uint64_t v564 = v57[19];
                unint64_t v565 = v59[1];
                v566 = *(uint64_t **)(v58 + 24);
                uint64_t v567 = *v566;
                uint64_t v568 = v566[1];
                v569 = (uint64_t *)v239[3];
                uint64_t v570 = *v569;
                uint64_t v571 = v569[1];
                uint64_t v572 = v570 - v571 * v240[1];
                if (v565 <= 1) {
                  uint64_t v573 = 1;
                }
                else {
                  uint64_t v573 = v59[1];
                }
                uint64_t v574 = v567 - v568 * v565;
                do
                {
                  if (v565)
                  {
                    uint64_t v575 = v559 + v573;
                    v576 = (BOOL *)(v564 + v559);
                    uint64_t v577 = v573;
                    do
                    {
                      *v576++ = *(unsigned __int8 *)(v562 + v561) > *(unsigned __int8 *)(v563 + v560);
                      v561 += v568;
                      v560 += v571;
                      --v577;
                    }
                    while (v577);
                    uint64_t v559 = v575;
                  }
                  v561 += v574;
                  v560 += v572;
                  ++v558;
                }
                while (v558 != v557);
              }
              break;
            case 3uLL:
              uint64_t v578 = *v59;
              if (v578)
              {
                uint64_t v579 = 0;
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = *(void *)(v58 + 152);
                uint64_t v584 = v239[19];
                uint64_t v585 = v57[19];
                unint64_t v586 = v59[1];
                v587 = *(void **)(v58 + 24);
                uint64_t v588 = v587[1];
                v589 = (void *)v239[3];
                uint64_t v590 = v589[1];
                uint64_t v591 = *v589 - v590 * v240[1];
                if (v586 <= 1) {
                  uint64_t v592 = 1;
                }
                else {
                  uint64_t v592 = v59[1];
                }
                unint64_t v593 = *v587 - v588 * v586;
                do
                {
                  if (v586)
                  {
                    uint64_t v594 = 0;
                    unint64_t v595 = v59[2];
                    uint64_t v596 = v587[2];
                    uint64_t v597 = v589[2];
                    if (v595 <= 1) {
                      uint64_t v598 = 1;
                    }
                    else {
                      uint64_t v598 = v59[2];
                    }
                    uint64_t v599 = v590 - v597 * v240[2];
                    do
                    {
                      uint64_t v600 = v598;
                      if (v595)
                      {
                        do
                        {
                          *(unsigned char *)(v585 + v580++) = *(unsigned __int8 *)(v583 + v582) > *(unsigned __int8 *)(v584 + v581);
                          v582 += v596;
                          v581 += v597;
                          --v600;
                        }
                        while (v600);
                      }
                      v582 += v588 - v596 * v595;
                      v581 += v599;
                      ++v594;
                    }
                    while (v594 != v592);
                  }
                  v582 += v593;
                  v581 += v591;
                  ++v579;
                }
                while (v579 != v578);
              }
              break;
            case 4uLL:
              uint64_t v2071 = *v59;
              if (v2071)
              {
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = *(void *)(v58 + 152);
                uint64_t v606 = v239[19];
                uint64_t v607 = v57[19];
                unint64_t v608 = v59[1];
                v609 = *(void **)(v58 + 24);
                v610 = (void *)v239[3];
                uint64_t v1939 = v610[1];
                uint64_t v1968 = v609[1];
                uint64_t v2017 = *v610 - v1939 * v240[1];
                int v2057 = v59[1];
                if (v608 <= 1) {
                  uint64_t v611 = 1;
                }
                else {
                  uint64_t v611 = v59[1];
                }
                unint64_t v1982 = *v609 - v609[1] * v608;
                do
                {
                  if (v2057)
                  {
                    uint64_t v612 = 0;
                    unint64_t v613 = v59[2];
                    uint64_t v614 = v609[2];
                    uint64_t v615 = v610[2];
                    if (v613 <= 1) {
                      uint64_t v616 = 1;
                    }
                    else {
                      uint64_t v616 = v59[2];
                    }
                    uint64_t v617 = v1939 - v615 * v240[2];
                    do
                    {
                      if (v613)
                      {
                        uint64_t v618 = 0;
                        unint64_t v619 = v59[3];
                        uint64_t v620 = v609[3];
                        uint64_t v621 = v610[3];
                        if (v619 <= 1) {
                          uint64_t v622 = 1;
                        }
                        else {
                          uint64_t v622 = v59[3];
                        }
                        uint64_t v623 = v615 - v621 * v240[3];
                        do
                        {
                          uint64_t v624 = v622;
                          if (v619)
                          {
                            do
                            {
                              *(unsigned char *)(v607 + v602++) = *(unsigned __int8 *)(v605 + v604) > *(unsigned __int8 *)(v606 + v603);
                              v604 += v620;
                              v603 += v621;
                              --v624;
                            }
                            while (v624);
                          }
                          v604 += v614 - v620 * v619;
                          v603 += v623;
                          ++v618;
                        }
                        while (v618 != v616);
                      }
                      v604 += v1968 - v614 * v613;
                      v603 += v617;
                      ++v612;
                    }
                    while (v612 != v611);
                  }
                  v604 += v1982;
                  v603 += v2017;
                  ++v601;
                }
                while (v601 != v2071);
              }
              break;
            default:
              uint64_t v546 = v57[6];
              if (v546)
              {
                uint64_t v547 = 0;
                uint64_t v1981 = v239[19];
                uint64_t v2016 = *(void *)(v58 + 152);
                uint64_t v1967 = v57[19];
                do
                {
                  uint64_t v548 = 0;
                  if ((v61 & 0x80000000) == 0)
                  {
                    uint64_t v549 = *(void *)(v58 + 24);
                    int v550 = v547;
                    do
                    {
                      ldiv_t v551 = ldiv(v550, v59[v61]);
                      int v550 = v551.quot;
                      v548 += *(void *)(v549 + 8 * v61--) * v551.rem;
                    }
                    while (v61 != -1);
                  }
                  uint64_t v552 = v2050;
                  if ((v2050 & 0x80000000) != 0)
                  {
                    LODWORD(v553) = 0;
                  }
                  else
                  {
                    uint64_t v553 = 0;
                    uint64_t v554 = v239[3];
                    int v555 = v547;
                    do
                    {
                      ldiv_t v556 = ldiv(v555, v240[v552]);
                      int v555 = v556.quot;
                      v553 += *(void *)(v554 + 8 * v552--) * v556.rem;
                    }
                    while (v552 != -1);
                  }
                  *(unsigned char *)(v1967 + v547++) = *(unsigned __int8 *)(v2016 + (int)v548) > *(unsigned __int8 *)(v1981 + (int)v553);
                  uint64_t v61 = v2064;
                }
                while (v547 != v546);
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v12)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          unsigned int v11 = **(_DWORD **)(*a2 + 152);
LABEL_13:
          BOOL v8 = v10 > v11;
          goto LABEL_26;
        case 1:
          int v95 = *(_DWORD *)(*a2 + 160);
          if (v95 >= 1)
          {
            unsigned int v96 = **(_DWORD **)(*a1 + 152);
            v97 = *(BOOL **)(*(void *)a3 + 152);
            v98 = *(unsigned int **)(*a2 + 152);
            unsigned int v99 = v95 + 1;
            do
            {
              unsigned int v100 = *v98++;
              *v97++ = v96 > v100;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 2:
          int v101 = *(_DWORD *)(*a1 + 160);
          if (v101 >= 1)
          {
            unsigned int v102 = **(_DWORD **)(*a2 + 152);
            v103 = *(BOOL **)(*(void *)a3 + 152);
            v104 = *(unsigned int **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              unsigned int v106 = *v104++;
              *v103++ = v106 > v102;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        case 3:
          int v107 = *(_DWORD *)(*(void *)a3 + 48);
          if (v107 >= 1)
          {
            v108 = *(BOOL **)(*(void *)a3 + 152);
            v109 = *(unsigned int **)(*a2 + 152);
            v110 = *(unsigned int **)(*a1 + 152);
            unsigned int v111 = v107 + 1;
            do
            {
              unsigned int v113 = *v110++;
              unsigned int v112 = v113;
              unsigned int v114 = *v109++;
              *v108++ = v112 > v114;
              --v111;
            }
            while (v111 > 1);
          }
          return;
        default:
          v86 = *(void **)a3;
          uint64_t v87 = *a1;
          v88 = *(int **)*a1;
          uint64_t v89 = (*(void *)(*a1 + 8) - (void)v88) >> 2;
          uint64_t v90 = (v89 - 1);
          if ((int)v90 >= -1) {
            int v91 = -1;
          }
          else {
            int v91 = v89 - 1;
          }
          int v92 = v91 + 1;
          int v93 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v94) != *(void *)(v86[3] + 8 * v94)) {
          goto LABEL_196;
        }
      }
      int v93 = v92;
LABEL_196:
      v247 = (void *)*a2;
      v248 = *(int **)*a2;
      uint64_t v249 = (v247[1] - (void)v248) >> 2;
      uint64_t v250 = (v249 - 1);
      if ((int)v250 >= -1) {
        int v251 = -1;
      }
      else {
        int v251 = v249 - 1;
      }
      int v252 = v251 + 1;
      int v253 = v249 + 1;
      while (1)
      {
        unsigned int v254 = v253 - 2;
        if (v253 - 2 < 0) {
          break;
        }
        --v253;
        if (*(void *)(v247[3] + 8 * v254) != *(void *)(v86[3] + 8 * v254)) {
          goto LABEL_246;
        }
      }
      int v253 = v252;
LABEL_246:
      int v291 = v89 + 1;
      while (1)
      {
        unsigned int v292 = v291 - 2;
        if (v291 - 2 < 0) {
          break;
        }
        --v291;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v292)) {
          goto LABEL_281;
        }
      }
      int v291 = v92;
LABEL_281:
      int v305 = v249 + 1;
      while (1)
      {
        unsigned int v306 = v305 - 2;
        if (v305 - 2 < 0) {
          break;
        }
        --v305;
        if (*(void *)(v247[3] + 8 * v306)) {
          goto LABEL_388;
        }
      }
      int v305 = v252;
LABEL_388:
      unint64_t v359 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v253) {
        int v360 = v253;
      }
      else {
        int v360 = v93;
      }
      if (v93 <= v305) {
        int v93 = v305;
      }
      if (v291 > v253) {
        int v253 = v291;
      }
      if (v359 > v253)
      {
        int v361 = 1;
      }
      else
      {
        int v253 = (uint64_t)(v86[1] - *v86) >> 2;
        int v361 = 4;
      }
      if (v359 > v93)
      {
        int v362 = 2;
      }
      else
      {
        int v93 = v253;
        int v362 = v361;
      }
      if (v359 > v360)
      {
        int v93 = v360;
        int v362 = 3;
      }
      uint64_t v2051 = v250;
      uint64_t v2065 = v90;
      if (!v93) {
        goto LABEL_417;
      }
      unint64_t v363 = *(void *)(v86[3] + 8 * (v93 - 1));
      if (v363 < 0x10) {
        goto LABEL_417;
      }
      switch(v362)
      {
        case 1:
          if (v93 == 2)
          {
            uint64_t v1568 = *v88;
            if (v1568)
            {
              uint64_t v1569 = 0;
              uint64_t v1570 = 0;
              uint64_t v1571 = 0;
              uint64_t v1572 = *(void *)(v87 + 152);
              uint64_t v1573 = v247[19];
              uint64_t v1574 = v86[19];
              unint64_t v1575 = v88[1];
              v1576 = *(uint64_t **)(v87 + 24);
              uint64_t v1577 = *v1576;
              uint64_t v1578 = v1576[1];
              v1579 = (uint64_t *)v247[3];
              uint64_t v1581 = *v1579;
              uint64_t v1580 = v1579[1];
              if (v1575 <= 1) {
                uint64_t v1582 = 1;
              }
              else {
                uint64_t v1582 = v88[1];
              }
              uint64_t v1583 = v1577 - v1578 * v1575;
              uint64_t v1584 = v1581 - v1580 * v248[1];
              do
              {
                if (v1575)
                {
                  uint64_t v1585 = 0;
                  uint64_t v1586 = v1573 + 4 * v1570;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1587 = 0;
                      unsigned int v1588 = *(_DWORD *)(v1572 + 4 * v1571);
                      unsigned int v1589 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1574 + v1587) = v1588 > *(_DWORD *)(v1586 + 4 * v1587);
                        --v1589;
                        ++v1587;
                      }
                      while (v1589 > 1);
                    }
                    v1571 += v1578;
                    v1570 += v1580;
                    v1574 += (int)v363;
                    ++v1585;
                    v1586 += 4 * v1580;
                  }
                  while (v1585 != v1582);
                }
                v1571 += v1583;
                v1570 += v1584;
                ++v1569;
              }
              while (v1569 != v1568);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1068 = *v88;
            if (v1068)
            {
              uint64_t v1069 = 0;
              uint64_t v1070 = 0;
              uint64_t v1071 = *(void *)(v87 + 152);
              uint64_t v1072 = v247[19];
              uint64_t v1073 = v86[19];
              uint64_t v1074 = **(void **)(v87 + 24);
              uint64_t v1075 = 4 * *(void *)v247[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1076 = 0;
                  unsigned int v1077 = *(_DWORD *)(v1071 + 4 * v1070);
                  unsigned int v1078 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1073 + v1076) = v1077 > *(_DWORD *)(v1072 + 4 * v1076);
                    --v1078;
                    ++v1076;
                  }
                  while (v1078 > 1);
                }
                v1070 += v1074;
                v1073 += (int)v363;
                ++v1069;
                v1072 += v1075;
              }
              while (v1069 != v1068);
            }
          }
          else
          {
            unint64_t v2004 = v86[6];
            if (v2004)
            {
              unint64_t v2039 = 0;
              uint64_t v1929 = v247[19];
              uint64_t v1955 = *(void *)(v87 + 152);
              uint64_t v1590 = v86[19];
              do
              {
                uint64_t v1591 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1592 = *(void *)(v87 + 24);
                  int v1593 = v2039;
                  do
                  {
                    ldiv_t v1594 = ldiv(v1593, v88[v90]);
                    int v1593 = v1594.quot;
                    v1591 += *(void *)(v1592 + 8 * v90--) * v1594.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1595 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1596) = 0;
                }
                else
                {
                  uint64_t v1596 = 0;
                  uint64_t v1597 = v247[3];
                  int v1598 = v2039;
                  do
                  {
                    ldiv_t v1599 = ldiv(v1598, v248[v1595]);
                    int v1598 = v1599.quot;
                    v1596 += *(void *)(v1597 + 8 * v1595--) * v1599.rem;
                  }
                  while (v1595 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1600 = 0;
                  unsigned int v1601 = *(_DWORD *)(v1955 + 4 * (int)v1591);
                  unsigned int v1602 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1590 + v1600) = v1601 > *(_DWORD *)(v1929 + 4 * (int)v1596 + 4 * v1600);
                    --v1602;
                    ++v1600;
                  }
                  while (v1602 > 1);
                }
                v1590 += (int)v363;
                v2039 += (int)v363;
              }
              while (v2039 < v2004);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            uint64_t v1603 = *v88;
            if (v1603)
            {
              uint64_t v1604 = 0;
              uint64_t v1605 = 0;
              uint64_t v1606 = 0;
              uint64_t v1607 = *(void *)(v87 + 152);
              uint64_t v1608 = v247[19];
              uint64_t v1609 = v86[19];
              unint64_t v1610 = v88[1];
              v1611 = *(uint64_t **)(v87 + 24);
              uint64_t v1612 = *v1611;
              uint64_t v1613 = v1611[1];
              v1614 = (uint64_t *)v247[3];
              uint64_t v1616 = *v1614;
              uint64_t v1615 = v1614[1];
              if (v1610 <= 1) {
                uint64_t v1617 = 1;
              }
              else {
                uint64_t v1617 = v88[1];
              }
              uint64_t v1618 = v1612 - v1613 * v1610;
              uint64_t v1619 = v1616 - v1615 * v248[1];
              do
              {
                if (v1610)
                {
                  uint64_t v1620 = 0;
                  uint64_t v1621 = v1607 + 4 * v1606;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1622 = 0;
                      unsigned int v1623 = *(_DWORD *)(v1608 + 4 * v1605);
                      unsigned int v1624 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1609 + v1622) = *(_DWORD *)(v1621 + 4 * v1622) > v1623;
                        --v1624;
                        ++v1622;
                      }
                      while (v1624 > 1);
                    }
                    v1606 += v1613;
                    v1605 += v1615;
                    v1609 += (int)v363;
                    ++v1620;
                    v1621 += 4 * v1613;
                  }
                  while (v1620 != v1617);
                }
                v1606 += v1618;
                v1605 += v1619;
                ++v1604;
              }
              while (v1604 != v1603);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1079 = *v88;
            if (v1079)
            {
              uint64_t v1080 = 0;
              uint64_t v1081 = 0;
              uint64_t v1082 = *(void *)(v87 + 152);
              uint64_t v1083 = v247[19];
              uint64_t v1084 = v86[19];
              uint64_t v1085 = *(void *)v247[3];
              uint64_t v1086 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1087 = 0;
                  unsigned int v1088 = *(_DWORD *)(v1083 + 4 * v1081);
                  unsigned int v1089 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1084 + v1087) = *(_DWORD *)(v1082 + 4 * v1087) > v1088;
                    --v1089;
                    ++v1087;
                  }
                  while (v1089 > 1);
                }
                v1081 += v1085;
                v1084 += (int)v363;
                ++v1080;
                v1082 += v1086;
              }
              while (v1080 != v1079);
            }
          }
          else
          {
            unint64_t v2005 = v86[6];
            if (v2005)
            {
              unint64_t v2040 = 0;
              uint64_t v1930 = v247[19];
              uint64_t v1956 = *(void *)(v87 + 152);
              uint64_t v1625 = v86[19];
              do
              {
                uint64_t v1626 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1627 = *(void *)(v87 + 24);
                  int v1628 = v2040;
                  do
                  {
                    ldiv_t v1629 = ldiv(v1628, v88[v90]);
                    int v1628 = v1629.quot;
                    v1626 += *(void *)(v1627 + 8 * v90--) * v1629.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1630 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1631) = 0;
                }
                else
                {
                  uint64_t v1631 = 0;
                  uint64_t v1632 = v247[3];
                  int v1633 = v2040;
                  do
                  {
                    ldiv_t v1634 = ldiv(v1633, v248[v1630]);
                    int v1633 = v1634.quot;
                    v1631 += *(void *)(v1632 + 8 * v1630--) * v1634.rem;
                  }
                  while (v1630 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1635 = 0;
                  unsigned int v1636 = *(_DWORD *)(v1930 + 4 * (int)v1631);
                  unsigned int v1637 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1625 + v1635) = *(_DWORD *)(v1956 + 4 * (int)v1626 + 4 * v1635) > v1636;
                    --v1637;
                    ++v1635;
                  }
                  while (v1637 > 1);
                }
                v1625 += (int)v363;
                v2040 += (int)v363;
              }
              while (v2040 < v2005);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            uint64_t v1250 = *v88;
            if (v1250)
            {
              uint64_t v1251 = 0;
              uint64_t v1252 = 0;
              uint64_t v1253 = 0;
              uint64_t v1254 = *(void *)(v87 + 152);
              uint64_t v1255 = v247[19];
              uint64_t v1256 = v86[19];
              unint64_t v1257 = v88[1];
              v1258 = *(uint64_t **)(v87 + 24);
              uint64_t v1259 = *v1258;
              uint64_t v1260 = v1258[1];
              v1261 = (uint64_t *)v247[3];
              uint64_t v1263 = *v1261;
              uint64_t v1262 = v1261[1];
              if (v1257 <= 1) {
                uint64_t v1264 = 1;
              }
              else {
                uint64_t v1264 = v88[1];
              }
              uint64_t v1265 = v1259 - v1260 * v1257;
              uint64_t v1266 = v1263 - v1262 * v248[1];
              do
              {
                if (v1257)
                {
                  uint64_t v1267 = 0;
                  uint64_t v1268 = v1255 + 4 * v1252;
                  uint64_t v1269 = v1254 + 4 * v1253;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1270 = 0;
                      unsigned int v1271 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1256 + v1270) = *(_DWORD *)(v1269 + 4 * v1270) > *(_DWORD *)(v1268 + 4 * v1270);
                        --v1271;
                        ++v1270;
                      }
                      while (v1271 > 1);
                    }
                    v1253 += v1260;
                    v1252 += v1262;
                    v1256 += (int)v363;
                    ++v1267;
                    v1268 += 4 * v1262;
                    v1269 += 4 * v1260;
                  }
                  while (v1267 != v1264);
                }
                v1253 += v1265;
                v1252 += v1266;
                ++v1251;
              }
              while (v1251 != v1250);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v364 = *v88;
            if (v364)
            {
              uint64_t v365 = 0;
              uint64_t v366 = *(void *)(v87 + 152);
              uint64_t v367 = v247[19];
              uint64_t v368 = v86[19];
              uint64_t v369 = 4 * *(void *)v247[3];
              uint64_t v370 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v371 = 0;
                  unsigned int v372 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v368 + v371) = *(_DWORD *)(v366 + 4 * v371) > *(_DWORD *)(v367 + 4 * v371);
                    --v372;
                    ++v371;
                  }
                  while (v372 > 1);
                }
                v368 += (int)v363;
                ++v365;
                v367 += v369;
                v366 += v370;
              }
              while (v365 != v364);
            }
          }
          else
          {
            unint64_t v1995 = v86[6];
            if (v1995)
            {
              unint64_t v2030 = 0;
              uint64_t v1920 = v247[19];
              uint64_t v1946 = *(void *)(v87 + 152);
              uint64_t v1272 = v86[19];
              do
              {
                uint64_t v1273 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1274 = *(void *)(v87 + 24);
                  int v1275 = v2030;
                  do
                  {
                    ldiv_t v1276 = ldiv(v1275, v88[v90]);
                    int v1275 = v1276.quot;
                    v1273 += *(void *)(v1274 + 8 * v90--) * v1276.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1277 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1278) = 0;
                }
                else
                {
                  uint64_t v1278 = 0;
                  uint64_t v1279 = v247[3];
                  int v1280 = v2030;
                  do
                  {
                    ldiv_t v1281 = ldiv(v1280, v248[v1277]);
                    int v1280 = v1281.quot;
                    v1278 += *(void *)(v1279 + 8 * v1277--) * v1281.rem;
                  }
                  while (v1277 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1282 = 0;
                  unsigned int v1283 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1272 + v1282) = *(_DWORD *)(v1946 + 4 * (int)v1273 + 4 * v1282) > *(_DWORD *)(v1920 + 4 * (int)v1278 + 4 * v1282);
                    --v1283;
                    ++v1282;
                  }
                  while (v1283 > 1);
                }
                v1272 += (int)v363;
                v2030 += (int)v363;
              }
              while (v2030 < v1995);
            }
          }
          break;
        default:
LABEL_417:
          switch(v359)
          {
            case 1uLL:
              uint64_t v373 = v86[6];
              if (v373)
              {
                v374 = *(_DWORD **)(v87 + 152);
                v375 = (_DWORD *)v247[19];
                v376 = (BOOL *)v86[19];
                uint64_t v377 = 4 * *(void *)v247[3];
                uint64_t v378 = 4 * **(void **)(v87 + 24);
                do
                {
                  *v376++ = *v374 > *v375;
                  v375 = (_DWORD *)((char *)v375 + v377);
                  v374 = (_DWORD *)((char *)v374 + v378);
                  --v373;
                }
                while (v373);
              }
              break;
            case 2uLL:
              uint64_t v636 = *v88;
              if (v636)
              {
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = *(void *)(v87 + 152);
                uint64_t v642 = v247[19];
                uint64_t v643 = v86[19];
                unint64_t v644 = v88[1];
                v645 = *(uint64_t **)(v87 + 24);
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                v648 = (uint64_t *)v247[3];
                uint64_t v649 = *v648;
                uint64_t v650 = v648[1];
                uint64_t v651 = v649 - v650 * v248[1];
                if (v644 <= 1) {
                  uint64_t v652 = 1;
                }
                else {
                  uint64_t v652 = v88[1];
                }
                uint64_t v653 = v646 - v647 * v644;
                do
                {
                  if (v644)
                  {
                    uint64_t v654 = v638 + v652;
                    v655 = (BOOL *)(v643 + v638);
                    uint64_t v656 = v652;
                    do
                    {
                      *v655++ = *(_DWORD *)(v641 + 4 * v640) > *(_DWORD *)(v642 + 4 * v639);
                      v640 += v647;
                      v639 += v650;
                      --v656;
                    }
                    while (v656);
                    uint64_t v638 = v654;
                  }
                  v640 += v653;
                  v639 += v651;
                  ++v637;
                }
                while (v637 != v636);
              }
              break;
            case 3uLL:
              uint64_t v657 = *v88;
              if (v657)
              {
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = 0;
                uint64_t v661 = 0;
                uint64_t v662 = *(void *)(v87 + 152);
                uint64_t v663 = v247[19];
                uint64_t v664 = v86[19];
                unint64_t v665 = v88[1];
                v666 = *(void **)(v87 + 24);
                uint64_t v667 = v666[1];
                v668 = (void *)v247[3];
                uint64_t v669 = v668[1];
                uint64_t v670 = *v668 - v669 * v248[1];
                if (v665 <= 1) {
                  uint64_t v671 = 1;
                }
                else {
                  uint64_t v671 = v88[1];
                }
                unint64_t v672 = *v666 - v667 * v665;
                do
                {
                  if (v665)
                  {
                    uint64_t v673 = 0;
                    unint64_t v674 = v88[2];
                    uint64_t v675 = v666[2];
                    uint64_t v676 = v668[2];
                    if (v674 <= 1) {
                      uint64_t v677 = 1;
                    }
                    else {
                      uint64_t v677 = v88[2];
                    }
                    uint64_t v678 = v669 - v676 * v248[2];
                    do
                    {
                      uint64_t v679 = v677;
                      if (v674)
                      {
                        do
                        {
                          *(unsigned char *)(v664 + v659++) = *(_DWORD *)(v662 + 4 * v661) > *(_DWORD *)(v663 + 4 * v660);
                          v661 += v675;
                          v660 += v676;
                          --v679;
                        }
                        while (v679);
                      }
                      v661 += v667 - v675 * v674;
                      v660 += v678;
                      ++v673;
                    }
                    while (v673 != v671);
                  }
                  v661 += v672;
                  v660 += v670;
                  ++v658;
                }
                while (v658 != v657);
              }
              break;
            case 4uLL:
              uint64_t v2072 = *v88;
              if (v2072)
              {
                uint64_t v680 = 0;
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = 0;
                uint64_t v684 = *(void *)(v87 + 152);
                uint64_t v685 = v247[19];
                uint64_t v686 = v86[19];
                unint64_t v687 = v88[1];
                v688 = *(void **)(v87 + 24);
                v689 = (void *)v247[3];
                uint64_t v1940 = v689[1];
                uint64_t v1970 = v688[1];
                uint64_t v2019 = *v689 - v1940 * v248[1];
                int v2058 = v88[1];
                if (v687 <= 1) {
                  uint64_t v690 = 1;
                }
                else {
                  uint64_t v690 = v88[1];
                }
                unint64_t v1984 = *v688 - v688[1] * v687;
                do
                {
                  if (v2058)
                  {
                    uint64_t v691 = 0;
                    unint64_t v692 = v88[2];
                    uint64_t v693 = v688[2];
                    uint64_t v694 = v689[2];
                    if (v692 <= 1) {
                      uint64_t v695 = 1;
                    }
                    else {
                      uint64_t v695 = v88[2];
                    }
                    uint64_t v696 = v1940 - v694 * v248[2];
                    do
                    {
                      if (v692)
                      {
                        uint64_t v697 = 0;
                        unint64_t v698 = v88[3];
                        uint64_t v699 = v688[3];
                        uint64_t v700 = v689[3];
                        if (v698 <= 1) {
                          uint64_t v701 = 1;
                        }
                        else {
                          uint64_t v701 = v88[3];
                        }
                        uint64_t v702 = v694 - v700 * v248[3];
                        do
                        {
                          uint64_t v703 = v701;
                          if (v698)
                          {
                            do
                            {
                              *(unsigned char *)(v686 + v681++) = *(_DWORD *)(v684 + 4 * v683) > *(_DWORD *)(v685 + 4 * v682);
                              v683 += v699;
                              v682 += v700;
                              --v703;
                            }
                            while (v703);
                          }
                          v683 += v693 - v699 * v698;
                          v682 += v702;
                          ++v697;
                        }
                        while (v697 != v695);
                      }
                      v683 += v1970 - v693 * v692;
                      v682 += v696;
                      ++v691;
                    }
                    while (v691 != v690);
                  }
                  v683 += v1984;
                  v682 += v2019;
                  ++v680;
                }
                while (v680 != v2072);
              }
              break;
            default:
              uint64_t v625 = v86[6];
              if (v625)
              {
                uint64_t v626 = 0;
                uint64_t v1983 = v247[19];
                uint64_t v2018 = *(void *)(v87 + 152);
                uint64_t v1969 = v86[19];
                do
                {
                  uint64_t v627 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    uint64_t v628 = *(void *)(v87 + 24);
                    int v629 = v626;
                    do
                    {
                      ldiv_t v630 = ldiv(v629, v88[v90]);
                      int v629 = v630.quot;
                      v627 += *(void *)(v628 + 8 * v90--) * v630.rem;
                    }
                    while (v90 != -1);
                  }
                  uint64_t v631 = v2051;
                  if ((v2051 & 0x80000000) != 0)
                  {
                    LODWORD(v632) = 0;
                  }
                  else
                  {
                    uint64_t v632 = 0;
                    uint64_t v633 = v247[3];
                    int v634 = v626;
                    do
                    {
                      ldiv_t v635 = ldiv(v634, v248[v631]);
                      int v634 = v635.quot;
                      v632 += *(void *)(v633 + 8 * v631--) * v635.rem;
                    }
                    while (v631 != -1);
                  }
                  *(unsigned char *)(v1969 + v626++) = *(_DWORD *)(v2018 + 4 * (int)v627) > *(_DWORD *)(v1983 + 4 * (int)v632);
                  uint64_t v90 = v2065;
                }
                while (v626 != v625);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v13)
      {
        case 0:
          int v14 = **(char **)(*a1 + 152);
          int v15 = **(char **)(*a2 + 152);
          goto LABEL_18;
        case 1:
          int v124 = *(_DWORD *)(*a2 + 160);
          if (v124 >= 1)
          {
            int v125 = **(char **)(*a1 + 152);
            v126 = *(BOOL **)(*(void *)a3 + 152);
            v127 = *(char **)(*a2 + 152);
            unsigned int v128 = v124 + 1;
            do
            {
              int v129 = *v127++;
              *v126++ = v125 > v129;
              --v128;
            }
            while (v128 > 1);
          }
          return;
        case 2:
          int v130 = *(_DWORD *)(*a1 + 160);
          if (v130 >= 1)
          {
            int v131 = **(char **)(*a2 + 152);
            v132 = *(BOOL **)(*(void *)a3 + 152);
            v133 = *(char **)(*a1 + 152);
            unsigned int v134 = v130 + 1;
            do
            {
              int v135 = *v133++;
              *v132++ = v135 > v131;
              --v134;
            }
            while (v134 > 1);
          }
          return;
        case 3:
          int v136 = *(_DWORD *)(*(void *)a3 + 48);
          if (v136 >= 1)
          {
            v137 = *(BOOL **)(*(void *)a3 + 152);
            v138 = *(char **)(*a2 + 152);
            v139 = *(char **)(*a1 + 152);
            unsigned int v140 = v136 + 1;
            do
            {
              int v142 = *v139++;
              int v141 = v142;
              int v143 = *v138++;
              *v137++ = v141 > v143;
              --v140;
            }
            while (v140 > 1);
          }
          return;
        default:
          v115 = *(void **)a3;
          uint64_t v116 = *a1;
          v117 = *(int **)*a1;
          uint64_t v118 = (*(void *)(*a1 + 8) - (void)v117) >> 2;
          uint64_t v119 = (v118 - 1);
          if ((int)v119 >= -1) {
            int v120 = -1;
          }
          else {
            int v120 = v118 - 1;
          }
          int v121 = v120 + 1;
          int v122 = v118 + 1;
          break;
      }
      while (1)
      {
        unsigned int v123 = v122 - 2;
        if (v122 - 2 < 0) {
          break;
        }
        --v122;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v123) != *(void *)(v115[3] + 8 * v123)) {
          goto LABEL_204;
        }
      }
      int v122 = v121;
LABEL_204:
      v255 = (void *)*a2;
      v256 = *(int **)*a2;
      uint64_t v257 = (v255[1] - (void)v256) >> 2;
      uint64_t v258 = (v257 - 1);
      if ((int)v258 >= -1) {
        int v259 = -1;
      }
      else {
        int v259 = v257 - 1;
      }
      int v260 = v259 + 1;
      int v261 = v257 + 1;
      while (1)
      {
        unsigned int v262 = v261 - 2;
        if (v261 - 2 < 0) {
          break;
        }
        --v261;
        if (*(void *)(v255[3] + 8 * v262) != *(void *)(v115[3] + 8 * v262)) {
          goto LABEL_251;
        }
      }
      int v261 = v260;
LABEL_251:
      int v293 = v118 + 1;
      while (1)
      {
        unsigned int v294 = v293 - 2;
        if (v293 - 2 < 0) {
          break;
        }
        --v293;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v294)) {
          goto LABEL_286;
        }
      }
      int v293 = v121;
LABEL_286:
      int v307 = v257 + 1;
      while (1)
      {
        unsigned int v308 = v307 - 2;
        if (v307 - 2 < 0) {
          break;
        }
        --v307;
        if (*(void *)(v255[3] + 8 * v308)) {
          goto LABEL_423;
        }
      }
      int v307 = v260;
LABEL_423:
      unint64_t v379 = (uint64_t)(v115[1] - *v115) >> 2;
      if (v122 <= v261) {
        int v380 = v261;
      }
      else {
        int v380 = v122;
      }
      if (v122 <= v307) {
        int v122 = v307;
      }
      if (v293 > v261) {
        int v261 = v293;
      }
      if (v379 > v261)
      {
        int v381 = 1;
      }
      else
      {
        int v261 = (uint64_t)(v115[1] - *v115) >> 2;
        int v381 = 4;
      }
      if (v379 > v122)
      {
        int v382 = 2;
      }
      else
      {
        int v122 = v261;
        int v382 = v381;
      }
      if (v379 > v380)
      {
        int v122 = v380;
        int v382 = 3;
      }
      uint64_t v2052 = v258;
      uint64_t v2066 = v119;
      if (!v122) {
        goto LABEL_452;
      }
      unint64_t v383 = *(void *)(v115[3] + 8 * (v122 - 1));
      if (v383 < 0x10) {
        goto LABEL_452;
      }
      switch(v382)
      {
        case 1:
          if (v122 == 2)
          {
            uint64_t v1638 = *v117;
            if (v1638)
            {
              uint64_t v1639 = 0;
              uint64_t v1640 = 0;
              uint64_t v1641 = 0;
              uint64_t v1642 = *(void *)(v116 + 152);
              uint64_t v1643 = v255[19];
              uint64_t v1644 = v115[19];
              unint64_t v1645 = v117[1];
              v1646 = *(uint64_t **)(v116 + 24);
              uint64_t v1647 = *v1646;
              uint64_t v1648 = v1646[1];
              v1649 = (uint64_t *)v255[3];
              uint64_t v1651 = *v1649;
              uint64_t v1650 = v1649[1];
              if (v1645 <= 1) {
                uint64_t v1652 = 1;
              }
              else {
                uint64_t v1652 = v117[1];
              }
              uint64_t v1653 = v1647 - v1648 * v1645;
              uint64_t v1654 = v1651 - v1650 * v256[1];
              do
              {
                if (v1645)
                {
                  uint64_t v1655 = 0;
                  uint64_t v1656 = v1643 + v1640;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1657 = 0;
                      int v1658 = *(char *)(v1642 + v1641);
                      unsigned int v1659 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1644 + v1657) = v1658 > *(char *)(v1656 + v1657);
                        --v1659;
                        ++v1657;
                      }
                      while (v1659 > 1);
                    }
                    v1641 += v1648;
                    v1640 += v1650;
                    v1644 += (int)v383;
                    ++v1655;
                    v1656 += v1650;
                  }
                  while (v1655 != v1652);
                }
                v1641 += v1653;
                v1640 += v1654;
                ++v1639;
              }
              while (v1639 != v1638);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1090 = *v117;
            if (v1090)
            {
              uint64_t v1091 = 0;
              uint64_t v1092 = 0;
              uint64_t v1093 = *(void *)(v116 + 152);
              uint64_t v1094 = v255[19];
              uint64_t v1095 = v115[19];
              uint64_t v1096 = **(void **)(v116 + 24);
              uint64_t v1097 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1098 = 0;
                  int v1099 = *(char *)(v1093 + v1092);
                  unsigned int v1100 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1095 + v1098) = v1099 > *(char *)(v1094 + v1098);
                    --v1100;
                    ++v1098;
                  }
                  while (v1100 > 1);
                }
                v1092 += v1096;
                v1095 += (int)v383;
                ++v1091;
                v1094 += v1097;
              }
              while (v1091 != v1090);
            }
          }
          else
          {
            unint64_t v2006 = v115[6];
            if (v2006)
            {
              unint64_t v2041 = 0;
              uint64_t v1931 = v255[19];
              uint64_t v1957 = *(void *)(v116 + 152);
              uint64_t v1660 = v115[19];
              do
              {
                uint64_t v1661 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1662 = *(void *)(v116 + 24);
                  int v1663 = v2041;
                  do
                  {
                    ldiv_t v1664 = ldiv(v1663, v117[v119]);
                    int v1663 = v1664.quot;
                    v1661 += *(void *)(v1662 + 8 * v119--) * v1664.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1665 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1666) = 0;
                }
                else
                {
                  uint64_t v1666 = 0;
                  uint64_t v1667 = v255[3];
                  int v1668 = v2041;
                  do
                  {
                    ldiv_t v1669 = ldiv(v1668, v256[v1665]);
                    int v1668 = v1669.quot;
                    v1666 += *(void *)(v1667 + 8 * v1665--) * v1669.rem;
                  }
                  while (v1665 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1670 = 0;
                  int v1671 = *(char *)(v1957 + (int)v1661);
                  unsigned int v1672 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1660 + v1670) = v1671 > *(char *)(v1931 + (int)v1666 + v1670);
                    --v1672;
                    ++v1670;
                  }
                  while (v1672 > 1);
                }
                v1660 += (int)v383;
                v2041 += (int)v383;
              }
              while (v2041 < v2006);
            }
          }
          break;
        case 2:
          if (v122 == 2)
          {
            uint64_t v1673 = *v117;
            if (v1673)
            {
              uint64_t v1674 = 0;
              uint64_t v1675 = 0;
              uint64_t v1676 = 0;
              uint64_t v1677 = *(void *)(v116 + 152);
              uint64_t v1678 = v255[19];
              uint64_t v1679 = v115[19];
              unint64_t v1680 = v117[1];
              v1681 = *(uint64_t **)(v116 + 24);
              uint64_t v1682 = *v1681;
              uint64_t v1683 = v1681[1];
              v1684 = (uint64_t *)v255[3];
              uint64_t v1686 = *v1684;
              uint64_t v1685 = v1684[1];
              if (v1680 <= 1) {
                uint64_t v1687 = 1;
              }
              else {
                uint64_t v1687 = v117[1];
              }
              uint64_t v1688 = v1682 - v1683 * v1680;
              uint64_t v1689 = v1686 - v1685 * v256[1];
              do
              {
                if (v1680)
                {
                  uint64_t v1690 = 0;
                  uint64_t v1691 = v1677 + v1676;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1692 = 0;
                      int v1693 = *(char *)(v1678 + v1675);
                      unsigned int v1694 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1679 + v1692) = *(char *)(v1691 + v1692) > v1693;
                        --v1694;
                        ++v1692;
                      }
                      while (v1694 > 1);
                    }
                    v1676 += v1683;
                    v1675 += v1685;
                    v1679 += (int)v383;
                    ++v1690;
                    v1691 += v1683;
                  }
                  while (v1690 != v1687);
                }
                v1676 += v1688;
                v1675 += v1689;
                ++v1674;
              }
              while (v1674 != v1673);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1101 = *v117;
            if (v1101)
            {
              uint64_t v1102 = 0;
              uint64_t v1103 = 0;
              uint64_t v1104 = *(void *)(v116 + 152);
              uint64_t v1105 = v255[19];
              uint64_t v1106 = v115[19];
              uint64_t v1107 = **(void **)(v116 + 24);
              uint64_t v1108 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1109 = 0;
                  int v1110 = *(char *)(v1105 + v1103);
                  unsigned int v1111 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1106 + v1109) = *(char *)(v1104 + v1109) > v1110;
                    --v1111;
                    ++v1109;
                  }
                  while (v1111 > 1);
                }
                v1103 += v1108;
                v1106 += (int)v383;
                ++v1102;
                v1104 += v1107;
              }
              while (v1102 != v1101);
            }
          }
          else
          {
            unint64_t v2007 = v115[6];
            if (v2007)
            {
              unint64_t v2042 = 0;
              uint64_t v1932 = v255[19];
              uint64_t v1958 = *(void *)(v116 + 152);
              uint64_t v1695 = v115[19];
              do
              {
                uint64_t v1696 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1697 = *(void *)(v116 + 24);
                  int v1698 = v2042;
                  do
                  {
                    ldiv_t v1699 = ldiv(v1698, v117[v119]);
                    int v1698 = v1699.quot;
                    v1696 += *(void *)(v1697 + 8 * v119--) * v1699.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1700 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1701) = 0;
                }
                else
                {
                  uint64_t v1701 = 0;
                  uint64_t v1702 = v255[3];
                  int v1703 = v2042;
                  do
                  {
                    ldiv_t v1704 = ldiv(v1703, v256[v1700]);
                    int v1703 = v1704.quot;
                    v1701 += *(void *)(v1702 + 8 * v1700--) * v1704.rem;
                  }
                  while (v1700 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1705 = 0;
                  int v1706 = *(char *)(v1932 + (int)v1701);
                  unsigned int v1707 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1695 + v1705) = *(char *)(v1958 + (int)v1696 + v1705) > v1706;
                    --v1707;
                    ++v1705;
                  }
                  while (v1707 > 1);
                }
                v1695 += (int)v383;
                v2042 += (int)v383;
              }
              while (v2042 < v2007);
            }
          }
          break;
        case 3:
          if (v122 == 2)
          {
            uint64_t v1284 = *v117;
            if (v1284)
            {
              uint64_t v1285 = 0;
              uint64_t v1286 = 0;
              uint64_t v1287 = 0;
              uint64_t v1288 = *(void *)(v116 + 152);
              uint64_t v1289 = v255[19];
              uint64_t v1290 = v115[19];
              unint64_t v1291 = v117[1];
              v1292 = *(uint64_t **)(v116 + 24);
              uint64_t v1293 = *v1292;
              uint64_t v1294 = v1292[1];
              v1295 = (uint64_t *)v255[3];
              uint64_t v1297 = *v1295;
              uint64_t v1296 = v1295[1];
              if (v1291 <= 1) {
                uint64_t v1298 = 1;
              }
              else {
                uint64_t v1298 = v117[1];
              }
              uint64_t v1299 = v1293 - v1294 * v1291;
              uint64_t v1300 = v1297 - v1296 * v256[1];
              do
              {
                if (v1291)
                {
                  uint64_t v1301 = 0;
                  uint64_t v1302 = v1289 + v1286;
                  uint64_t v1303 = v1288 + v1287;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1304 = 0;
                      unsigned int v1305 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1290 + v1304) = *(char *)(v1303 + v1304) > *(char *)(v1302 + v1304);
                        --v1305;
                        ++v1304;
                      }
                      while (v1305 > 1);
                    }
                    v1287 += v1294;
                    v1286 += v1296;
                    v1290 += (int)v383;
                    ++v1301;
                    v1302 += v1296;
                    v1303 += v1294;
                  }
                  while (v1301 != v1298);
                }
                v1287 += v1299;
                v1286 += v1300;
                ++v1285;
              }
              while (v1285 != v1284);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v384 = *v117;
            if (v384)
            {
              uint64_t v385 = 0;
              uint64_t v386 = *(void *)(v116 + 152);
              uint64_t v387 = v255[19];
              uint64_t v388 = v115[19];
              uint64_t v389 = **(void **)(v116 + 24);
              uint64_t v390 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v391 = 0;
                  unsigned int v392 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v388 + v391) = *(char *)(v386 + v391) > *(char *)(v387 + v391);
                    --v392;
                    ++v391;
                  }
                  while (v392 > 1);
                }
                v388 += (int)v383;
                ++v385;
                v387 += v390;
                v386 += v389;
              }
              while (v385 != v384);
            }
          }
          else
          {
            unint64_t v1996 = v115[6];
            if (v1996)
            {
              unint64_t v2031 = 0;
              uint64_t v1921 = v255[19];
              uint64_t v1947 = *(void *)(v116 + 152);
              uint64_t v1306 = v115[19];
              do
              {
                uint64_t v1307 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1308 = *(void *)(v116 + 24);
                  int v1309 = v2031;
                  do
                  {
                    ldiv_t v1310 = ldiv(v1309, v117[v119]);
                    int v1309 = v1310.quot;
                    v1307 += *(void *)(v1308 + 8 * v119--) * v1310.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1311 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1312) = 0;
                }
                else
                {
                  uint64_t v1312 = 0;
                  uint64_t v1313 = v255[3];
                  int v1314 = v2031;
                  do
                  {
                    ldiv_t v1315 = ldiv(v1314, v256[v1311]);
                    int v1314 = v1315.quot;
                    v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                  }
                  while (v1311 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1316 = 0;
                  unsigned int v1317 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1306 + v1316) = *(char *)(v1947 + (int)v1307 + v1316) > *(char *)(v1921
                                                                                                + (int)v1312
                                                                                                + v1316);
                    --v1317;
                    ++v1316;
                  }
                  while (v1317 > 1);
                }
                v1306 += (int)v383;
                v2031 += (int)v383;
              }
              while (v2031 < v1996);
            }
          }
          break;
        default:
LABEL_452:
          switch(v379)
          {
            case 1uLL:
              uint64_t v393 = v115[6];
              if (v393)
              {
                v394 = *(char **)(v116 + 152);
                v395 = (char *)v255[19];
                v396 = (BOOL *)v115[19];
                uint64_t v397 = **(void **)(v116 + 24);
                uint64_t v398 = *(void *)v255[3];
                do
                {
                  *v396++ = *v394 > *v395;
                  v395 += v398;
                  v394 += v397;
                  --v393;
                }
                while (v393);
              }
              break;
            case 2uLL:
              uint64_t v715 = *v117;
              if (v715)
              {
                uint64_t v716 = 0;
                uint64_t v717 = 0;
                uint64_t v718 = 0;
                uint64_t v719 = 0;
                uint64_t v720 = *(void *)(v116 + 152);
                uint64_t v721 = v255[19];
                uint64_t v722 = v115[19];
                unint64_t v723 = v117[1];
                v724 = *(uint64_t **)(v116 + 24);
                uint64_t v725 = *v724;
                uint64_t v726 = v724[1];
                v727 = (uint64_t *)v255[3];
                uint64_t v728 = *v727;
                uint64_t v729 = v727[1];
                uint64_t v730 = v728 - v729 * v256[1];
                if (v723 <= 1) {
                  uint64_t v731 = 1;
                }
                else {
                  uint64_t v731 = v117[1];
                }
                uint64_t v732 = v725 - v726 * v723;
                do
                {
                  if (v723)
                  {
                    uint64_t v733 = v717 + v731;
                    v734 = (BOOL *)(v722 + v717);
                    uint64_t v735 = v731;
                    do
                    {
                      *v734++ = *(char *)(v720 + v719) > *(char *)(v721 + v718);
                      v719 += v726;
                      v718 += v729;
                      --v735;
                    }
                    while (v735);
                    uint64_t v717 = v733;
                  }
                  v719 += v732;
                  v718 += v730;
                  ++v716;
                }
                while (v716 != v715);
              }
              break;
            case 3uLL:
              uint64_t v736 = *v117;
              if (v736)
              {
                uint64_t v737 = 0;
                uint64_t v738 = 0;
                uint64_t v739 = 0;
                uint64_t v740 = 0;
                uint64_t v741 = *(void *)(v116 + 152);
                uint64_t v742 = v255[19];
                uint64_t v743 = v115[19];
                unint64_t v744 = v117[1];
                v745 = *(void **)(v116 + 24);
                uint64_t v746 = v745[1];
                v747 = (void *)v255[3];
                uint64_t v748 = v747[1];
                uint64_t v749 = *v747 - v748 * v256[1];
                if (v744 <= 1) {
                  uint64_t v750 = 1;
                }
                else {
                  uint64_t v750 = v117[1];
                }
                unint64_t v751 = *v745 - v746 * v744;
                do
                {
                  if (v744)
                  {
                    uint64_t v752 = 0;
                    unint64_t v753 = v117[2];
                    uint64_t v754 = v745[2];
                    uint64_t v755 = v747[2];
                    if (v753 <= 1) {
                      uint64_t v756 = 1;
                    }
                    else {
                      uint64_t v756 = v117[2];
                    }
                    uint64_t v757 = v748 - v755 * v256[2];
                    do
                    {
                      uint64_t v758 = v756;
                      if (v753)
                      {
                        do
                        {
                          *(unsigned char *)(v743 + v738++) = *(char *)(v741 + v740) > *(char *)(v742 + v739);
                          v740 += v754;
                          v739 += v755;
                          --v758;
                        }
                        while (v758);
                      }
                      v740 += v746 - v754 * v753;
                      v739 += v757;
                      ++v752;
                    }
                    while (v752 != v750);
                  }
                  v740 += v751;
                  v739 += v749;
                  ++v737;
                }
                while (v737 != v736);
              }
              break;
            case 4uLL:
              uint64_t v2073 = *v117;
              if (v2073)
              {
                uint64_t v759 = 0;
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = 0;
                uint64_t v763 = *(void *)(v116 + 152);
                uint64_t v764 = v255[19];
                uint64_t v765 = v115[19];
                unint64_t v766 = v117[1];
                v767 = *(void **)(v116 + 24);
                v768 = (void *)v255[3];
                uint64_t v1941 = v768[1];
                uint64_t v1972 = v767[1];
                uint64_t v2021 = *v768 - v1941 * v256[1];
                int v2059 = v117[1];
                if (v766 <= 1) {
                  uint64_t v769 = 1;
                }
                else {
                  uint64_t v769 = v117[1];
                }
                unint64_t v1986 = *v767 - v767[1] * v766;
                do
                {
                  if (v2059)
                  {
                    uint64_t v770 = 0;
                    unint64_t v771 = v117[2];
                    uint64_t v772 = v767[2];
                    uint64_t v773 = v768[2];
                    if (v771 <= 1) {
                      uint64_t v774 = 1;
                    }
                    else {
                      uint64_t v774 = v117[2];
                    }
                    uint64_t v775 = v1941 - v773 * v256[2];
                    do
                    {
                      if (v771)
                      {
                        uint64_t v776 = 0;
                        unint64_t v777 = v117[3];
                        uint64_t v778 = v767[3];
                        uint64_t v779 = v768[3];
                        if (v777 <= 1) {
                          uint64_t v780 = 1;
                        }
                        else {
                          uint64_t v780 = v117[3];
                        }
                        uint64_t v781 = v773 - v779 * v256[3];
                        do
                        {
                          uint64_t v782 = v780;
                          if (v777)
                          {
                            do
                            {
                              *(unsigned char *)(v765 + v760++) = *(char *)(v763 + v762) > *(char *)(v764 + v761);
                              v762 += v778;
                              v761 += v779;
                              --v782;
                            }
                            while (v782);
                          }
                          v762 += v772 - v778 * v777;
                          v761 += v781;
                          ++v776;
                        }
                        while (v776 != v774);
                      }
                      v762 += v1972 - v772 * v771;
                      v761 += v775;
                      ++v770;
                    }
                    while (v770 != v769);
                  }
                  v762 += v1986;
                  v761 += v2021;
                  ++v759;
                }
                while (v759 != v2073);
              }
              break;
            default:
              uint64_t v704 = v115[6];
              if (v704)
              {
                uint64_t v705 = 0;
                uint64_t v1985 = v255[19];
                uint64_t v2020 = *(void *)(v116 + 152);
                uint64_t v1971 = v115[19];
                do
                {
                  uint64_t v706 = 0;
                  if ((v119 & 0x80000000) == 0)
                  {
                    uint64_t v707 = *(void *)(v116 + 24);
                    int v708 = v705;
                    do
                    {
                      ldiv_t v709 = ldiv(v708, v117[v119]);
                      int v708 = v709.quot;
                      v706 += *(void *)(v707 + 8 * v119--) * v709.rem;
                    }
                    while (v119 != -1);
                  }
                  uint64_t v710 = v2052;
                  if ((v2052 & 0x80000000) != 0)
                  {
                    LODWORD(v711) = 0;
                  }
                  else
                  {
                    uint64_t v711 = 0;
                    uint64_t v712 = v255[3];
                    int v713 = v705;
                    do
                    {
                      ldiv_t v714 = ldiv(v713, v256[v710]);
                      int v713 = v714.quot;
                      v711 += *(void *)(v712 + 8 * v710--) * v714.rem;
                    }
                    while (v710 != -1);
                  }
                  *(unsigned char *)(v1971 + v705++) = *(char *)(v2020 + (int)v706) > *(char *)(v1985 + (int)v711);
                  uint64_t v119 = v2066;
                }
                while (v705 != v704);
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v16)
      {
        case 0:
          int v14 = **(_DWORD **)(*a1 + 152);
          int v15 = **(_DWORD **)(*a2 + 152);
LABEL_18:
          BOOL v17 = v14 <= v15;
          goto LABEL_23;
        case 1:
          int v153 = *(_DWORD *)(*a2 + 160);
          if (v153 >= 1)
          {
            int v154 = **(_DWORD **)(*a1 + 152);
            v155 = *(BOOL **)(*(void *)a3 + 152);
            v156 = *(int **)(*a2 + 152);
            unsigned int v157 = v153 + 1;
            do
            {
              int v158 = *v156++;
              *v155++ = v154 > v158;
              --v157;
            }
            while (v157 > 1);
          }
          return;
        case 2:
          int v159 = *(_DWORD *)(*a1 + 160);
          if (v159 >= 1)
          {
            int v160 = **(_DWORD **)(*a2 + 152);
            v161 = *(BOOL **)(*(void *)a3 + 152);
            v162 = *(int **)(*a1 + 152);
            unsigned int v163 = v159 + 1;
            do
            {
              int v164 = *v162++;
              *v161++ = v164 > v160;
              --v163;
            }
            while (v163 > 1);
          }
          return;
        case 3:
          int v165 = *(_DWORD *)(*(void *)a3 + 48);
          if (v165 >= 1)
          {
            v166 = *(BOOL **)(*(void *)a3 + 152);
            v167 = *(int **)(*a2 + 152);
            v168 = *(int **)(*a1 + 152);
            unsigned int v169 = v165 + 1;
            do
            {
              int v171 = *v168++;
              int v170 = v171;
              int v172 = *v167++;
              *v166++ = v170 > v172;
              --v169;
            }
            while (v169 > 1);
          }
          return;
        default:
          v144 = *(void **)a3;
          uint64_t v145 = *a1;
          v146 = *(int **)*a1;
          uint64_t v147 = (*(void *)(*a1 + 8) - (void)v146) >> 2;
          uint64_t v148 = (v147 - 1);
          if ((int)v148 >= -1) {
            int v149 = -1;
          }
          else {
            int v149 = v147 - 1;
          }
          int v150 = v149 + 1;
          int v151 = v147 + 1;
          break;
      }
      while (1)
      {
        unsigned int v152 = v151 - 2;
        if (v151 - 2 < 0) {
          break;
        }
        --v151;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v152) != *(void *)(v144[3] + 8 * v152)) {
          goto LABEL_212;
        }
      }
      int v151 = v150;
LABEL_212:
      v263 = (void *)*a2;
      v264 = *(int **)*a2;
      uint64_t v265 = (v263[1] - (void)v264) >> 2;
      uint64_t v266 = (v265 - 1);
      if ((int)v266 >= -1) {
        int v267 = -1;
      }
      else {
        int v267 = v265 - 1;
      }
      int v268 = v267 + 1;
      int v269 = v265 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v263[3] + 8 * v270) != *(void *)(v144[3] + 8 * v270)) {
          goto LABEL_256;
        }
      }
      int v269 = v268;
LABEL_256:
      int v295 = v147 + 1;
      while (1)
      {
        unsigned int v296 = v295 - 2;
        if (v295 - 2 < 0) {
          break;
        }
        --v295;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v296)) {
          goto LABEL_291;
        }
      }
      int v295 = v150;
LABEL_291:
      int v309 = v265 + 1;
      while (1)
      {
        unsigned int v310 = v309 - 2;
        if (v309 - 2 < 0) {
          break;
        }
        --v309;
        if (*(void *)(v263[3] + 8 * v310)) {
          goto LABEL_458;
        }
      }
      int v309 = v268;
LABEL_458:
      unint64_t v399 = (uint64_t)(v144[1] - *v144) >> 2;
      if (v151 <= v269) {
        int v400 = v269;
      }
      else {
        int v400 = v151;
      }
      if (v151 <= v309) {
        int v151 = v309;
      }
      if (v295 > v269) {
        int v269 = v295;
      }
      if (v399 > v269)
      {
        int v401 = 1;
      }
      else
      {
        int v269 = (uint64_t)(v144[1] - *v144) >> 2;
        int v401 = 4;
      }
      if (v399 > v151)
      {
        int v402 = 2;
      }
      else
      {
        int v151 = v269;
        int v402 = v401;
      }
      if (v399 > v400)
      {
        int v151 = v400;
        int v402 = 3;
      }
      uint64_t v2053 = v266;
      uint64_t v2067 = v148;
      if (!v151) {
        goto LABEL_487;
      }
      unint64_t v403 = *(void *)(v144[3] + 8 * (v151 - 1));
      if (v403 < 0x10) {
        goto LABEL_487;
      }
      switch(v402)
      {
        case 1:
          if (v151 == 2)
          {
            uint64_t v1708 = *v146;
            if (v1708)
            {
              uint64_t v1709 = 0;
              uint64_t v1710 = 0;
              uint64_t v1711 = 0;
              uint64_t v1712 = *(void *)(v145 + 152);
              uint64_t v1713 = v263[19];
              uint64_t v1714 = v144[19];
              unint64_t v1715 = v146[1];
              v1716 = *(uint64_t **)(v145 + 24);
              uint64_t v1717 = *v1716;
              uint64_t v1718 = v1716[1];
              v1719 = (uint64_t *)v263[3];
              uint64_t v1721 = *v1719;
              uint64_t v1720 = v1719[1];
              if (v1715 <= 1) {
                uint64_t v1722 = 1;
              }
              else {
                uint64_t v1722 = v146[1];
              }
              uint64_t v1723 = v1717 - v1718 * v1715;
              uint64_t v1724 = v1721 - v1720 * v264[1];
              do
              {
                if (v1715)
                {
                  uint64_t v1725 = 0;
                  uint64_t v1726 = v1713 + 4 * v1710;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1727 = 0;
                      int v1728 = *(_DWORD *)(v1712 + 4 * v1711);
                      unsigned int v1729 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1714 + v1727) = v1728 > *(_DWORD *)(v1726 + 4 * v1727);
                        --v1729;
                        ++v1727;
                      }
                      while (v1729 > 1);
                    }
                    v1711 += v1718;
                    v1710 += v1720;
                    v1714 += (int)v403;
                    ++v1725;
                    v1726 += 4 * v1720;
                  }
                  while (v1725 != v1722);
                }
                v1711 += v1723;
                v1710 += v1724;
                ++v1709;
              }
              while (v1709 != v1708);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1112 = *v146;
            if (v1112)
            {
              uint64_t v1113 = 0;
              uint64_t v1114 = 0;
              uint64_t v1115 = *(void *)(v145 + 152);
              uint64_t v1116 = v263[19];
              uint64_t v1117 = v144[19];
              uint64_t v1118 = **(void **)(v145 + 24);
              uint64_t v1119 = 4 * *(void *)v263[3];
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1120 = 0;
                  int v1121 = *(_DWORD *)(v1115 + 4 * v1114);
                  unsigned int v1122 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1117 + v1120) = v1121 > *(_DWORD *)(v1116 + 4 * v1120);
                    --v1122;
                    ++v1120;
                  }
                  while (v1122 > 1);
                }
                v1114 += v1118;
                v1117 += (int)v403;
                ++v1113;
                v1116 += v1119;
              }
              while (v1113 != v1112);
            }
          }
          else
          {
            unint64_t v2008 = v144[6];
            if (v2008)
            {
              unint64_t v2043 = 0;
              uint64_t v1933 = v263[19];
              uint64_t v1959 = *(void *)(v145 + 152);
              uint64_t v1730 = v144[19];
              do
              {
                uint64_t v1731 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1732 = *(void *)(v145 + 24);
                  int v1733 = v2043;
                  do
                  {
                    ldiv_t v1734 = ldiv(v1733, v146[v148]);
                    int v1733 = v1734.quot;
                    v1731 += *(void *)(v1732 + 8 * v148--) * v1734.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1735 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1736) = 0;
                }
                else
                {
                  uint64_t v1736 = 0;
                  uint64_t v1737 = v263[3];
                  int v1738 = v2043;
                  do
                  {
                    ldiv_t v1739 = ldiv(v1738, v264[v1735]);
                    int v1738 = v1739.quot;
                    v1736 += *(void *)(v1737 + 8 * v1735--) * v1739.rem;
                  }
                  while (v1735 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1740 = 0;
                  int v1741 = *(_DWORD *)(v1959 + 4 * (int)v1731);
                  unsigned int v1742 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1730 + v1740) = v1741 > *(_DWORD *)(v1933 + 4 * (int)v1736 + 4 * v1740);
                    --v1742;
                    ++v1740;
                  }
                  while (v1742 > 1);
                }
                v1730 += (int)v403;
                v2043 += (int)v403;
              }
              while (v2043 < v2008);
            }
          }
          break;
        case 2:
          if (v151 == 2)
          {
            uint64_t v1743 = *v146;
            if (v1743)
            {
              uint64_t v1744 = 0;
              uint64_t v1745 = 0;
              uint64_t v1746 = 0;
              uint64_t v1747 = *(void *)(v145 + 152);
              uint64_t v1748 = v263[19];
              uint64_t v1749 = v144[19];
              unint64_t v1750 = v146[1];
              v1751 = *(uint64_t **)(v145 + 24);
              uint64_t v1752 = *v1751;
              uint64_t v1753 = v1751[1];
              v1754 = (uint64_t *)v263[3];
              uint64_t v1756 = *v1754;
              uint64_t v1755 = v1754[1];
              if (v1750 <= 1) {
                uint64_t v1757 = 1;
              }
              else {
                uint64_t v1757 = v146[1];
              }
              uint64_t v1758 = v1752 - v1753 * v1750;
              uint64_t v1759 = v1756 - v1755 * v264[1];
              do
              {
                if (v1750)
                {
                  uint64_t v1760 = 0;
                  uint64_t v1761 = v1747 + 4 * v1746;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1762 = 0;
                      int v1763 = *(_DWORD *)(v1748 + 4 * v1745);
                      unsigned int v1764 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1749 + v1762) = *(_DWORD *)(v1761 + 4 * v1762) > v1763;
                        --v1764;
                        ++v1762;
                      }
                      while (v1764 > 1);
                    }
                    v1746 += v1753;
                    v1745 += v1755;
                    v1749 += (int)v403;
                    ++v1760;
                    v1761 += 4 * v1753;
                  }
                  while (v1760 != v1757);
                }
                v1746 += v1758;
                v1745 += v1759;
                ++v1744;
              }
              while (v1744 != v1743);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1123 = *v146;
            if (v1123)
            {
              uint64_t v1124 = 0;
              uint64_t v1125 = 0;
              uint64_t v1126 = *(void *)(v145 + 152);
              uint64_t v1127 = v263[19];
              uint64_t v1128 = v144[19];
              uint64_t v1129 = *(void *)v263[3];
              uint64_t v1130 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1131 = 0;
                  int v1132 = *(_DWORD *)(v1127 + 4 * v1125);
                  unsigned int v1133 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1128 + v1131) = *(_DWORD *)(v1126 + 4 * v1131) > v1132;
                    --v1133;
                    ++v1131;
                  }
                  while (v1133 > 1);
                }
                v1125 += v1129;
                v1128 += (int)v403;
                ++v1124;
                v1126 += v1130;
              }
              while (v1124 != v1123);
            }
          }
          else
          {
            unint64_t v2009 = v144[6];
            if (v2009)
            {
              unint64_t v2044 = 0;
              uint64_t v1934 = v263[19];
              uint64_t v1960 = *(void *)(v145 + 152);
              uint64_t v1765 = v144[19];
              do
              {
                uint64_t v1766 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1767 = *(void *)(v145 + 24);
                  int v1768 = v2044;
                  do
                  {
                    ldiv_t v1769 = ldiv(v1768, v146[v148]);
                    int v1768 = v1769.quot;
                    v1766 += *(void *)(v1767 + 8 * v148--) * v1769.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1770 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1771) = 0;
                }
                else
                {
                  uint64_t v1771 = 0;
                  uint64_t v1772 = v263[3];
                  int v1773 = v2044;
                  do
                  {
                    ldiv_t v1774 = ldiv(v1773, v264[v1770]);
                    int v1773 = v1774.quot;
                    v1771 += *(void *)(v1772 + 8 * v1770--) * v1774.rem;
                  }
                  while (v1770 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1775 = 0;
                  int v1776 = *(_DWORD *)(v1934 + 4 * (int)v1771);
                  unsigned int v1777 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1765 + v1775) = *(_DWORD *)(v1960 + 4 * (int)v1766 + 4 * v1775) > v1776;
                    --v1777;
                    ++v1775;
                  }
                  while (v1777 > 1);
                }
                v1765 += (int)v403;
                v2044 += (int)v403;
              }
              while (v2044 < v2009);
            }
          }
          break;
        case 3:
          if (v151 == 2)
          {
            uint64_t v1318 = *v146;
            if (v1318)
            {
              uint64_t v1319 = 0;
              uint64_t v1320 = 0;
              uint64_t v1321 = 0;
              uint64_t v1322 = *(void *)(v145 + 152);
              uint64_t v1323 = v263[19];
              uint64_t v1324 = v144[19];
              unint64_t v1325 = v146[1];
              v1326 = *(uint64_t **)(v145 + 24);
              uint64_t v1327 = *v1326;
              uint64_t v1328 = v1326[1];
              v1329 = (uint64_t *)v263[3];
              uint64_t v1331 = *v1329;
              uint64_t v1330 = v1329[1];
              if (v1325 <= 1) {
                uint64_t v1332 = 1;
              }
              else {
                uint64_t v1332 = v146[1];
              }
              uint64_t v1333 = v1327 - v1328 * v1325;
              uint64_t v1334 = v1331 - v1330 * v264[1];
              do
              {
                if (v1325)
                {
                  uint64_t v1335 = 0;
                  uint64_t v1336 = v1323 + 4 * v1320;
                  uint64_t v1337 = v1322 + 4 * v1321;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1338 = 0;
                      unsigned int v1339 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1324 + v1338) = *(_DWORD *)(v1337 + 4 * v1338) > *(_DWORD *)(v1336 + 4 * v1338);
                        --v1339;
                        ++v1338;
                      }
                      while (v1339 > 1);
                    }
                    v1321 += v1328;
                    v1320 += v1330;
                    v1324 += (int)v403;
                    ++v1335;
                    v1336 += 4 * v1330;
                    v1337 += 4 * v1328;
                  }
                  while (v1335 != v1332);
                }
                v1321 += v1333;
                v1320 += v1334;
                ++v1319;
              }
              while (v1319 != v1318);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v404 = *v146;
            if (v404)
            {
              uint64_t v405 = 0;
              uint64_t v406 = *(void *)(v145 + 152);
              uint64_t v407 = v263[19];
              uint64_t v408 = v144[19];
              uint64_t v409 = 4 * *(void *)v263[3];
              uint64_t v410 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v411 = 0;
                  unsigned int v412 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v408 + v411) = *(_DWORD *)(v406 + 4 * v411) > *(_DWORD *)(v407 + 4 * v411);
                    --v412;
                    ++v411;
                  }
                  while (v412 > 1);
                }
                v408 += (int)v403;
                ++v405;
                v407 += v409;
                v406 += v410;
              }
              while (v405 != v404);
            }
          }
          else
          {
            unint64_t v1997 = v144[6];
            if (v1997)
            {
              unint64_t v2032 = 0;
              uint64_t v1922 = v263[19];
              uint64_t v1948 = *(void *)(v145 + 152);
              uint64_t v1340 = v144[19];
              do
              {
                uint64_t v1341 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1342 = *(void *)(v145 + 24);
                  int v1343 = v2032;
                  do
                  {
                    ldiv_t v1344 = ldiv(v1343, v146[v148]);
                    int v1343 = v1344.quot;
                    v1341 += *(void *)(v1342 + 8 * v148--) * v1344.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1345 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1346) = 0;
                }
                else
                {
                  uint64_t v1346 = 0;
                  uint64_t v1347 = v263[3];
                  int v1348 = v2032;
                  do
                  {
                    ldiv_t v1349 = ldiv(v1348, v264[v1345]);
                    int v1348 = v1349.quot;
                    v1346 += *(void *)(v1347 + 8 * v1345--) * v1349.rem;
                  }
                  while (v1345 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1350 = 0;
                  unsigned int v1351 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1340 + v1350) = *(_DWORD *)(v1948 + 4 * (int)v1341 + 4 * v1350) > *(_DWORD *)(v1922 + 4 * (int)v1346 + 4 * v1350);
                    --v1351;
                    ++v1350;
                  }
                  while (v1351 > 1);
                }
                v1340 += (int)v403;
                v2032 += (int)v403;
              }
              while (v2032 < v1997);
            }
          }
          break;
        default:
LABEL_487:
          switch(v399)
          {
            case 1uLL:
              uint64_t v413 = v144[6];
              if (v413)
              {
                v414 = *(_DWORD **)(v145 + 152);
                v415 = (_DWORD *)v263[19];
                v416 = (BOOL *)v144[19];
                uint64_t v417 = 4 * *(void *)v263[3];
                uint64_t v418 = 4 * **(void **)(v145 + 24);
                do
                {
                  *v416++ = *v414 > *v415;
                  v415 = (_DWORD *)((char *)v415 + v417);
                  v414 = (_DWORD *)((char *)v414 + v418);
                  --v413;
                }
                while (v413);
              }
              break;
            case 2uLL:
              uint64_t v794 = *v146;
              if (v794)
              {
                uint64_t v795 = 0;
                uint64_t v796 = 0;
                uint64_t v797 = 0;
                uint64_t v798 = 0;
                uint64_t v799 = *(void *)(v145 + 152);
                uint64_t v800 = v263[19];
                uint64_t v801 = v144[19];
                unint64_t v802 = v146[1];
                v803 = *(uint64_t **)(v145 + 24);
                uint64_t v804 = *v803;
                uint64_t v805 = v803[1];
                v806 = (uint64_t *)v263[3];
                uint64_t v807 = *v806;
                uint64_t v808 = v806[1];
                uint64_t v809 = v807 - v808 * v264[1];
                if (v802 <= 1) {
                  uint64_t v810 = 1;
                }
                else {
                  uint64_t v810 = v146[1];
                }
                uint64_t v811 = v804 - v805 * v802;
                do
                {
                  if (v802)
                  {
                    uint64_t v812 = v796 + v810;
                    v813 = (BOOL *)(v801 + v796);
                    uint64_t v814 = v810;
                    do
                    {
                      *v813++ = *(_DWORD *)(v799 + 4 * v798) > *(_DWORD *)(v800 + 4 * v797);
                      v798 += v805;
                      v797 += v808;
                      --v814;
                    }
                    while (v814);
                    uint64_t v796 = v812;
                  }
                  v798 += v811;
                  v797 += v809;
                  ++v795;
                }
                while (v795 != v794);
              }
              break;
            case 3uLL:
              uint64_t v815 = *v146;
              if (v815)
              {
                uint64_t v816 = 0;
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = 0;
                uint64_t v820 = *(void *)(v145 + 152);
                uint64_t v821 = v263[19];
                uint64_t v822 = v144[19];
                unint64_t v823 = v146[1];
                v824 = *(void **)(v145 + 24);
                uint64_t v825 = v824[1];
                v826 = (void *)v263[3];
                uint64_t v827 = v826[1];
                uint64_t v828 = *v826 - v827 * v264[1];
                if (v823 <= 1) {
                  uint64_t v829 = 1;
                }
                else {
                  uint64_t v829 = v146[1];
                }
                unint64_t v830 = *v824 - v825 * v823;
                do
                {
                  if (v823)
                  {
                    uint64_t v831 = 0;
                    unint64_t v832 = v146[2];
                    uint64_t v833 = v824[2];
                    uint64_t v834 = v826[2];
                    if (v832 <= 1) {
                      uint64_t v835 = 1;
                    }
                    else {
                      uint64_t v835 = v146[2];
                    }
                    uint64_t v836 = v827 - v834 * v264[2];
                    do
                    {
                      uint64_t v837 = v835;
                      if (v832)
                      {
                        do
                        {
                          *(unsigned char *)(v822 + v817++) = *(_DWORD *)(v820 + 4 * v819) > *(_DWORD *)(v821 + 4 * v818);
                          v819 += v833;
                          v818 += v834;
                          --v837;
                        }
                        while (v837);
                      }
                      v819 += v825 - v833 * v832;
                      v818 += v836;
                      ++v831;
                    }
                    while (v831 != v829);
                  }
                  v819 += v830;
                  v818 += v828;
                  ++v816;
                }
                while (v816 != v815);
              }
              break;
            case 4uLL:
              uint64_t v2074 = *v146;
              if (v2074)
              {
                uint64_t v838 = 0;
                uint64_t v839 = 0;
                uint64_t v840 = 0;
                uint64_t v841 = 0;
                uint64_t v842 = *(void *)(v145 + 152);
                uint64_t v843 = v263[19];
                uint64_t v844 = v144[19];
                unint64_t v845 = v146[1];
                v846 = *(void **)(v145 + 24);
                v847 = (void *)v263[3];
                uint64_t v1942 = v847[1];
                uint64_t v1974 = v846[1];
                uint64_t v2023 = *v847 - v1942 * v264[1];
                int v2060 = v146[1];
                if (v845 <= 1) {
                  uint64_t v848 = 1;
                }
                else {
                  uint64_t v848 = v146[1];
                }
                unint64_t v1988 = *v846 - v846[1] * v845;
                do
                {
                  if (v2060)
                  {
                    uint64_t v849 = 0;
                    unint64_t v850 = v146[2];
                    uint64_t v851 = v846[2];
                    uint64_t v852 = v847[2];
                    if (v850 <= 1) {
                      uint64_t v853 = 1;
                    }
                    else {
                      uint64_t v853 = v146[2];
                    }
                    uint64_t v854 = v1942 - v852 * v264[2];
                    do
                    {
                      if (v850)
                      {
                        uint64_t v855 = 0;
                        unint64_t v856 = v146[3];
                        uint64_t v857 = v846[3];
                        uint64_t v858 = v847[3];
                        if (v856 <= 1) {
                          uint64_t v859 = 1;
                        }
                        else {
                          uint64_t v859 = v146[3];
                        }
                        uint64_t v860 = v852 - v858 * v264[3];
                        do
                        {
                          uint64_t v861 = v859;
                          if (v856)
                          {
                            do
                            {
                              *(unsigned char *)(v844 + v839++) = *(_DWORD *)(v842 + 4 * v841) > *(_DWORD *)(v843 + 4 * v840);
                              v841 += v857;
                              v840 += v858;
                              --v861;
                            }
                            while (v861);
                          }
                          v841 += v851 - v857 * v856;
                          v840 += v860;
                          ++v855;
                        }
                        while (v855 != v853);
                      }
                      v841 += v1974 - v851 * v850;
                      v840 += v854;
                      ++v849;
                    }
                    while (v849 != v848);
                  }
                  v841 += v1988;
                  v840 += v2023;
                  ++v838;
                }
                while (v838 != v2074);
              }
              break;
            default:
              uint64_t v783 = v144[6];
              if (v783)
              {
                uint64_t v784 = 0;
                uint64_t v1987 = v263[19];
                uint64_t v2022 = *(void *)(v145 + 152);
                uint64_t v1973 = v144[19];
                do
                {
                  uint64_t v785 = 0;
                  if ((v148 & 0x80000000) == 0)
                  {
                    uint64_t v786 = *(void *)(v145 + 24);
                    int v787 = v784;
                    do
                    {
                      ldiv_t v788 = ldiv(v787, v146[v148]);
                      int v787 = v788.quot;
                      v785 += *(void *)(v786 + 8 * v148--) * v788.rem;
                    }
                    while (v148 != -1);
                  }
                  uint64_t v789 = v2053;
                  if ((v2053 & 0x80000000) != 0)
                  {
                    LODWORD(v790) = 0;
                  }
                  else
                  {
                    uint64_t v790 = 0;
                    uint64_t v791 = v263[3];
                    int v792 = v784;
                    do
                    {
                      ldiv_t v793 = ldiv(v792, v264[v789]);
                      int v792 = v793.quot;
                      v790 += *(void *)(v791 + 8 * v789--) * v793.rem;
                    }
                    while (v789 != -1);
                  }
                  *(unsigned char *)(v1973 + v784++) = *(_DWORD *)(v2022 + 4 * (int)v785) > *(_DWORD *)(v1987 + 4 * (int)v790);
                  uint64_t v148 = v2067;
                }
                while (v784 != v783);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v18)
      {
        case 0:
          BOOL v17 = **(void **)(*a1 + 152) <= **(void **)(*a2 + 152);
          goto LABEL_23;
        case 1:
          int v182 = *(_DWORD *)(*a2 + 160);
          if (v182 >= 1)
          {
            uint64_t v183 = **(void **)(*a1 + 152);
            v184 = *(BOOL **)(*(void *)a3 + 152);
            v185 = *(uint64_t **)(*a2 + 152);
            unsigned int v186 = v182 + 1;
            do
            {
              uint64_t v187 = *v185++;
              *v184++ = v183 > v187;
              --v186;
            }
            while (v186 > 1);
          }
          return;
        case 2:
          int v188 = *(_DWORD *)(*a1 + 160);
          if (v188 >= 1)
          {
            uint64_t v189 = **(void **)(*a2 + 152);
            v190 = *(BOOL **)(*(void *)a3 + 152);
            v191 = *(uint64_t **)(*a1 + 152);
            unsigned int v192 = v188 + 1;
            do
            {
              uint64_t v193 = *v191++;
              *v190++ = v193 > v189;
              --v192;
            }
            while (v192 > 1);
          }
          return;
        case 3:
          int v194 = *(_DWORD *)(*(void *)a3 + 48);
          if (v194 >= 1)
          {
            v195 = *(BOOL **)(*(void *)a3 + 152);
            v196 = *(uint64_t **)(*a2 + 152);
            v197 = *(uint64_t **)(*a1 + 152);
            unsigned int v198 = v194 + 1;
            do
            {
              uint64_t v200 = *v197++;
              uint64_t v199 = v200;
              uint64_t v201 = *v196++;
              *v195++ = v199 > v201;
              --v198;
            }
            while (v198 > 1);
          }
          return;
        default:
          v173 = *(void **)a3;
          uint64_t v174 = *a1;
          v175 = *(int **)*a1;
          uint64_t v176 = (*(void *)(*a1 + 8) - (void)v175) >> 2;
          uint64_t v177 = (v176 - 1);
          if ((int)v177 >= -1) {
            int v178 = -1;
          }
          else {
            int v178 = v176 - 1;
          }
          int v179 = v178 + 1;
          int v180 = v176 + 1;
          break;
      }
      while (1)
      {
        unsigned int v181 = v180 - 2;
        if (v180 - 2 < 0) {
          break;
        }
        --v180;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v181) != *(void *)(v173[3] + 8 * v181)) {
          goto LABEL_220;
        }
      }
      int v180 = v179;
LABEL_220:
      v271 = (void *)*a2;
      v272 = *(int **)*a2;
      uint64_t v273 = (v271[1] - (void)v272) >> 2;
      uint64_t v274 = (v273 - 1);
      if ((int)v274 >= -1) {
        int v275 = -1;
      }
      else {
        int v275 = v273 - 1;
      }
      int v276 = v275 + 1;
      int v277 = v273 + 1;
      while (1)
      {
        unsigned int v278 = v277 - 2;
        if (v277 - 2 < 0) {
          break;
        }
        --v277;
        if (*(void *)(v271[3] + 8 * v278) != *(void *)(v173[3] + 8 * v278)) {
          goto LABEL_261;
        }
      }
      int v277 = v276;
LABEL_261:
      int v297 = v176 + 1;
      while (1)
      {
        unsigned int v298 = v297 - 2;
        if (v297 - 2 < 0) {
          break;
        }
        --v297;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v298)) {
          goto LABEL_296;
        }
      }
      int v297 = v179;
LABEL_296:
      int v311 = v273 + 1;
      while (1)
      {
        unsigned int v312 = v311 - 2;
        if (v311 - 2 < 0) {
          break;
        }
        --v311;
        if (*(void *)(v271[3] + 8 * v312)) {
          goto LABEL_493;
        }
      }
      int v311 = v276;
LABEL_493:
      unint64_t v419 = (uint64_t)(v173[1] - *v173) >> 2;
      if (v180 <= v277) {
        int v420 = v277;
      }
      else {
        int v420 = v180;
      }
      if (v180 <= v311) {
        int v180 = v311;
      }
      if (v297 > v277) {
        int v277 = v297;
      }
      if (v419 > v277)
      {
        int v421 = 1;
      }
      else
      {
        int v277 = (uint64_t)(v173[1] - *v173) >> 2;
        int v421 = 4;
      }
      if (v419 > v180)
      {
        int v422 = 2;
      }
      else
      {
        int v180 = v277;
        int v422 = v421;
      }
      if (v419 > v420)
      {
        int v180 = v420;
        int v422 = 3;
      }
      uint64_t v2054 = v274;
      uint64_t v2068 = v177;
      if (!v180) {
        goto LABEL_522;
      }
      unint64_t v423 = *(void *)(v173[3] + 8 * (v180 - 1));
      if (v423 < 0x10) {
        goto LABEL_522;
      }
      switch(v422)
      {
        case 1:
          if (v180 == 2)
          {
            uint64_t v1778 = *v175;
            if (v1778)
            {
              uint64_t v1779 = 0;
              uint64_t v1780 = 0;
              uint64_t v1781 = 0;
              uint64_t v1782 = *(void *)(v174 + 152);
              uint64_t v1783 = v271[19];
              uint64_t v1784 = v173[19];
              unint64_t v1785 = v175[1];
              v1786 = *(uint64_t **)(v174 + 24);
              uint64_t v1787 = *v1786;
              uint64_t v1788 = v1786[1];
              v1789 = (uint64_t *)v271[3];
              uint64_t v1791 = *v1789;
              uint64_t v1790 = v1789[1];
              if (v1785 <= 1) {
                uint64_t v1792 = 1;
              }
              else {
                uint64_t v1792 = v175[1];
              }
              uint64_t v1793 = v1787 - v1788 * v1785;
              uint64_t v1794 = v1791 - v1790 * v272[1];
              do
              {
                if (v1785)
                {
                  uint64_t v1795 = 0;
                  uint64_t v1796 = v1783 + 8 * v1780;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1797 = 0;
                      uint64_t v1798 = *(void *)(v1782 + 8 * v1781);
                      unsigned int v1799 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1784 + v1797) = v1798 > *(void *)(v1796 + 8 * v1797);
                        --v1799;
                        ++v1797;
                      }
                      while (v1799 > 1);
                    }
                    v1781 += v1788;
                    v1780 += v1790;
                    v1784 += (int)v423;
                    ++v1795;
                    v1796 += 8 * v1790;
                  }
                  while (v1795 != v1792);
                }
                v1781 += v1793;
                v1780 += v1794;
                ++v1779;
              }
              while (v1779 != v1778);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1134 = *v175;
            if (v1134)
            {
              uint64_t v1135 = 0;
              uint64_t v1136 = 0;
              uint64_t v1137 = *(void *)(v174 + 152);
              uint64_t v1138 = v271[19];
              uint64_t v1139 = v173[19];
              uint64_t v1140 = **(void **)(v174 + 24);
              uint64_t v1141 = 8 * *(void *)v271[3];
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1142 = 0;
                  uint64_t v1143 = *(void *)(v1137 + 8 * v1136);
                  unsigned int v1144 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1139 + v1142) = v1143 > *(void *)(v1138 + 8 * v1142);
                    --v1144;
                    ++v1142;
                  }
                  while (v1144 > 1);
                }
                v1136 += v1140;
                v1139 += (int)v423;
                ++v1135;
                v1138 += v1141;
              }
              while (v1135 != v1134);
            }
          }
          else
          {
            unint64_t v2010 = v173[6];
            if (v2010)
            {
              unint64_t v2045 = 0;
              uint64_t v1935 = v271[19];
              uint64_t v1961 = *(void *)(v174 + 152);
              uint64_t v1800 = v173[19];
              do
              {
                uint64_t v1801 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1802 = *(void *)(v174 + 24);
                  int v1803 = v2045;
                  do
                  {
                    ldiv_t v1804 = ldiv(v1803, v175[v177]);
                    int v1803 = v1804.quot;
                    v1801 += *(void *)(v1802 + 8 * v177--) * v1804.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1805 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1806) = 0;
                }
                else
                {
                  uint64_t v1806 = 0;
                  uint64_t v1807 = v271[3];
                  int v1808 = v2045;
                  do
                  {
                    ldiv_t v1809 = ldiv(v1808, v272[v1805]);
                    int v1808 = v1809.quot;
                    v1806 += *(void *)(v1807 + 8 * v1805--) * v1809.rem;
                  }
                  while (v1805 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1810 = 0;
                  uint64_t v1811 = *(void *)(v1961 + 8 * (int)v1801);
                  unsigned int v1812 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1800 + v1810) = v1811 > *(void *)(v1935 + 8 * (int)v1806 + 8 * v1810);
                    --v1812;
                    ++v1810;
                  }
                  while (v1812 > 1);
                }
                v1800 += (int)v423;
                v2045 += (int)v423;
              }
              while (v2045 < v2010);
            }
          }
          break;
        case 2:
          if (v180 == 2)
          {
            uint64_t v1813 = *v175;
            if (v1813)
            {
              uint64_t v1814 = 0;
              uint64_t v1815 = 0;
              uint64_t v1816 = 0;
              uint64_t v1817 = *(void *)(v174 + 152);
              uint64_t v1818 = v271[19];
              uint64_t v1819 = v173[19];
              unint64_t v1820 = v175[1];
              v1821 = *(uint64_t **)(v174 + 24);
              uint64_t v1822 = *v1821;
              uint64_t v1823 = v1821[1];
              v1824 = (uint64_t *)v271[3];
              uint64_t v1826 = *v1824;
              uint64_t v1825 = v1824[1];
              if (v1820 <= 1) {
                uint64_t v1827 = 1;
              }
              else {
                uint64_t v1827 = v175[1];
              }
              uint64_t v1828 = v1822 - v1823 * v1820;
              uint64_t v1829 = v1826 - v1825 * v272[1];
              do
              {
                if (v1820)
                {
                  uint64_t v1830 = 0;
                  uint64_t v1831 = v1817 + 8 * v1816;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1832 = 0;
                      uint64_t v1833 = *(void *)(v1818 + 8 * v1815);
                      unsigned int v1834 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1819 + v1832) = *(void *)(v1831 + 8 * v1832) > v1833;
                        --v1834;
                        ++v1832;
                      }
                      while (v1834 > 1);
                    }
                    v1816 += v1823;
                    v1815 += v1825;
                    v1819 += (int)v423;
                    ++v1830;
                    v1831 += 8 * v1823;
                  }
                  while (v1830 != v1827);
                }
                v1816 += v1828;
                v1815 += v1829;
                ++v1814;
              }
              while (v1814 != v1813);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1145 = *v175;
            if (v1145)
            {
              uint64_t v1146 = 0;
              uint64_t v1147 = 0;
              uint64_t v1148 = *(void *)(v174 + 152);
              uint64_t v1149 = v271[19];
              uint64_t v1150 = v173[19];
              uint64_t v1151 = *(void *)v271[3];
              uint64_t v1152 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1153 = 0;
                  uint64_t v1154 = *(void *)(v1149 + 8 * v1147);
                  unsigned int v1155 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1150 + v1153) = *(void *)(v1148 + 8 * v1153) > v1154;
                    --v1155;
                    ++v1153;
                  }
                  while (v1155 > 1);
                }
                v1147 += v1151;
                v1150 += (int)v423;
                ++v1146;
                v1148 += v1152;
              }
              while (v1146 != v1145);
            }
          }
          else
          {
            unint64_t v2011 = v173[6];
            if (v2011)
            {
              unint64_t v2046 = 0;
              uint64_t v1936 = v271[19];
              uint64_t v1962 = *(void *)(v174 + 152);
              uint64_t v1835 = v173[19];
              do
              {
                uint64_t v1836 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1837 = *(void *)(v174 + 24);
                  int v1838 = v2046;
                  do
                  {
                    ldiv_t v1839 = ldiv(v1838, v175[v177]);
                    int v1838 = v1839.quot;
                    v1836 += *(void *)(v1837 + 8 * v177--) * v1839.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1840 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1841) = 0;
                }
                else
                {
                  uint64_t v1841 = 0;
                  uint64_t v1842 = v271[3];
                  int v1843 = v2046;
                  do
                  {
                    ldiv_t v1844 = ldiv(v1843, v272[v1840]);
                    int v1843 = v1844.quot;
                    v1841 += *(void *)(v1842 + 8 * v1840--) * v1844.rem;
                  }
                  while (v1840 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1845 = 0;
                  uint64_t v1846 = *(void *)(v1936 + 8 * (int)v1841);
                  unsigned int v1847 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1835 + v1845) = *(void *)(v1962 + 8 * (int)v1836 + 8 * v1845) > v1846;
                    --v1847;
                    ++v1845;
                  }
                  while (v1847 > 1);
                }
                v1835 += (int)v423;
                v2046 += (int)v423;
              }
              while (v2046 < v2011);
            }
          }
          break;
        case 3:
          if (v180 == 2)
          {
            uint64_t v1352 = *v175;
            if (v1352)
            {
              uint64_t v1353 = 0;
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = *(void *)(v174 + 152);
              uint64_t v1357 = v271[19];
              uint64_t v1358 = v173[19];
              unint64_t v1359 = v175[1];
              v1360 = *(uint64_t **)(v174 + 24);
              uint64_t v1361 = *v1360;
              uint64_t v1362 = v1360[1];
              v1363 = (uint64_t *)v271[3];
              uint64_t v1365 = *v1363;
              uint64_t v1364 = v1363[1];
              if (v1359 <= 1) {
                uint64_t v1366 = 1;
              }
              else {
                uint64_t v1366 = v175[1];
              }
              uint64_t v1367 = v1361 - v1362 * v1359;
              uint64_t v1368 = v1365 - v1364 * v272[1];
              do
              {
                if (v1359)
                {
                  uint64_t v1369 = 0;
                  uint64_t v1370 = v1357 + 8 * v1354;
                  uint64_t v1371 = v1356 + 8 * v1355;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1372 = 0;
                      unsigned int v1373 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1358 + v1372) = *(void *)(v1371 + 8 * v1372) > *(void *)(v1370 + 8 * v1372);
                        --v1373;
                        ++v1372;
                      }
                      while (v1373 > 1);
                    }
                    v1355 += v1362;
                    v1354 += v1364;
                    v1358 += (int)v423;
                    ++v1369;
                    v1370 += 8 * v1364;
                    v1371 += 8 * v1362;
                  }
                  while (v1369 != v1366);
                }
                v1355 += v1367;
                v1354 += v1368;
                ++v1353;
              }
              while (v1353 != v1352);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v424 = *v175;
            if (v424)
            {
              uint64_t v425 = 0;
              uint64_t v426 = *(void *)(v174 + 152);
              uint64_t v427 = v271[19];
              uint64_t v428 = v173[19];
              uint64_t v429 = 8 * *(void *)v271[3];
              uint64_t v430 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v431 = 0;
                  unsigned int v432 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v428 + v431) = *(void *)(v426 + 8 * v431) > *(void *)(v427 + 8 * v431);
                    --v432;
                    ++v431;
                  }
                  while (v432 > 1);
                }
                v428 += (int)v423;
                ++v425;
                v427 += v429;
                v426 += v430;
              }
              while (v425 != v424);
            }
          }
          else
          {
            unint64_t v1998 = v173[6];
            if (v1998)
            {
              unint64_t v2033 = 0;
              uint64_t v1923 = v271[19];
              uint64_t v1949 = *(void *)(v174 + 152);
              uint64_t v1374 = v173[19];
              do
              {
                uint64_t v1375 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1376 = *(void *)(v174 + 24);
                  int v1377 = v2033;
                  do
                  {
                    ldiv_t v1378 = ldiv(v1377, v175[v177]);
                    int v1377 = v1378.quot;
                    v1375 += *(void *)(v1376 + 8 * v177--) * v1378.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1379 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1380) = 0;
                }
                else
                {
                  uint64_t v1380 = 0;
                  uint64_t v1381 = v271[3];
                  int v1382 = v2033;
                  do
                  {
                    ldiv_t v1383 = ldiv(v1382, v272[v1379]);
                    int v1382 = v1383.quot;
                    v1380 += *(void *)(v1381 + 8 * v1379--) * v1383.rem;
                  }
                  while (v1379 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1384 = 0;
                  unsigned int v1385 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1374 + v1384) = *(void *)(v1949 + 8 * (int)v1375 + 8 * v1384) > *(void *)(v1923 + 8 * (int)v1380 + 8 * v1384);
                    --v1385;
                    ++v1384;
                  }
                  while (v1385 > 1);
                }
                v1374 += (int)v423;
                v2033 += (int)v423;
              }
              while (v2033 < v1998);
            }
          }
          break;
        default:
LABEL_522:
          switch(v419)
          {
            case 1uLL:
              uint64_t v433 = v173[6];
              if (v433)
              {
                v434 = *(void **)(v174 + 152);
                v435 = (void *)v271[19];
                v436 = (BOOL *)v173[19];
                uint64_t v437 = 8 * *(void *)v271[3];
                uint64_t v438 = 8 * **(void **)(v174 + 24);
                do
                {
                  *v436++ = *v434 > *v435;
                  v435 = (void *)((char *)v435 + v437);
                  v434 = (void *)((char *)v434 + v438);
                  --v433;
                }
                while (v433);
              }
              break;
            case 2uLL:
              uint64_t v873 = *v175;
              if (v873)
              {
                uint64_t v874 = 0;
                uint64_t v875 = 0;
                uint64_t v876 = 0;
                uint64_t v877 = 0;
                uint64_t v878 = *(void *)(v174 + 152);
                uint64_t v879 = v271[19];
                uint64_t v880 = v173[19];
                unint64_t v881 = v175[1];
                v882 = *(uint64_t **)(v174 + 24);
                uint64_t v883 = *v882;
                uint64_t v884 = v882[1];
                v885 = (uint64_t *)v271[3];
                uint64_t v886 = *v885;
                uint64_t v887 = v885[1];
                uint64_t v888 = v886 - v887 * v272[1];
                if (v881 <= 1) {
                  uint64_t v889 = 1;
                }
                else {
                  uint64_t v889 = v175[1];
                }
                uint64_t v890 = v883 - v884 * v881;
                do
                {
                  if (v881)
                  {
                    uint64_t v891 = v875 + v889;
                    v892 = (BOOL *)(v880 + v875);
                    uint64_t v893 = v889;
                    do
                    {
                      *v892++ = *(void *)(v878 + 8 * v877) > *(void *)(v879 + 8 * v876);
                      v877 += v884;
                      v876 += v887;
                      --v893;
                    }
                    while (v893);
                    uint64_t v875 = v891;
                  }
                  v877 += v890;
                  v876 += v888;
                  ++v874;
                }
                while (v874 != v873);
              }
              break;
            case 3uLL:
              uint64_t v894 = *v175;
              if (v894)
              {
                uint64_t v895 = 0;
                uint64_t v896 = 0;
                uint64_t v897 = 0;
                uint64_t v898 = 0;
                uint64_t v899 = *(void *)(v174 + 152);
                uint64_t v900 = v271[19];
                uint64_t v901 = v173[19];
                unint64_t v902 = v175[1];
                v903 = *(void **)(v174 + 24);
                uint64_t v904 = v903[1];
                v905 = (void *)v271[3];
                uint64_t v906 = v905[1];
                uint64_t v907 = *v905 - v906 * v272[1];
                if (v902 <= 1) {
                  uint64_t v908 = 1;
                }
                else {
                  uint64_t v908 = v175[1];
                }
                unint64_t v909 = *v903 - v904 * v902;
                do
                {
                  if (v902)
                  {
                    uint64_t v910 = 0;
                    unint64_t v911 = v175[2];
                    uint64_t v912 = v903[2];
                    uint64_t v913 = v905[2];
                    if (v911 <= 1) {
                      uint64_t v914 = 1;
                    }
                    else {
                      uint64_t v914 = v175[2];
                    }
                    uint64_t v915 = v906 - v913 * v272[2];
                    do
                    {
                      uint64_t v916 = v914;
                      if (v911)
                      {
                        do
                        {
                          *(unsigned char *)(v901 + v896++) = *(void *)(v899 + 8 * v898) > *(void *)(v900 + 8 * v897);
                          v898 += v912;
                          v897 += v913;
                          --v916;
                        }
                        while (v916);
                      }
                      v898 += v904 - v912 * v911;
                      v897 += v915;
                      ++v910;
                    }
                    while (v910 != v908);
                  }
                  v898 += v909;
                  v897 += v907;
                  ++v895;
                }
                while (v895 != v894);
              }
              break;
            case 4uLL:
              uint64_t v2075 = *v175;
              if (v2075)
              {
                uint64_t v917 = 0;
                uint64_t v918 = 0;
                uint64_t v919 = 0;
                uint64_t v920 = 0;
                uint64_t v921 = *(void *)(v174 + 152);
                uint64_t v922 = v271[19];
                uint64_t v923 = v173[19];
                unint64_t v924 = v175[1];
                v925 = *(void **)(v174 + 24);
                v926 = (void *)v271[3];
                uint64_t v1943 = v926[1];
                uint64_t v1976 = v925[1];
                uint64_t v2025 = *v926 - v1943 * v272[1];
                int v2061 = v175[1];
                if (v924 <= 1) {
                  uint64_t v927 = 1;
                }
                else {
                  uint64_t v927 = v175[1];
                }
                unint64_t v1990 = *v925 - v925[1] * v924;
                do
                {
                  if (v2061)
                  {
                    uint64_t v928 = 0;
                    unint64_t v929 = v175[2];
                    uint64_t v930 = v925[2];
                    uint64_t v931 = v926[2];
                    if (v929 <= 1) {
                      uint64_t v932 = 1;
                    }
                    else {
                      uint64_t v932 = v175[2];
                    }
                    uint64_t v933 = v1943 - v931 * v272[2];
                    do
                    {
                      if (v929)
                      {
                        uint64_t v934 = 0;
                        unint64_t v935 = v175[3];
                        uint64_t v936 = v925[3];
                        uint64_t v937 = v926[3];
                        if (v935 <= 1) {
                          uint64_t v938 = 1;
                        }
                        else {
                          uint64_t v938 = v175[3];
                        }
                        uint64_t v939 = v931 - v937 * v272[3];
                        do
                        {
                          uint64_t v940 = v938;
                          if (v935)
                          {
                            do
                            {
                              *(unsigned char *)(v923 + v918++) = *(void *)(v921 + 8 * v920) > *(void *)(v922 + 8 * v919);
                              v920 += v936;
                              v919 += v937;
                              --v940;
                            }
                            while (v940);
                          }
                          v920 += v930 - v936 * v935;
                          v919 += v939;
                          ++v934;
                        }
                        while (v934 != v932);
                      }
                      v920 += v1976 - v930 * v929;
                      v919 += v933;
                      ++v928;
                    }
                    while (v928 != v927);
                  }
                  v920 += v1990;
                  v919 += v2025;
                  ++v917;
                }
                while (v917 != v2075);
              }
              break;
            default:
              uint64_t v862 = v173[6];
              if (v862)
              {
                uint64_t v863 = 0;
                uint64_t v1989 = v271[19];
                uint64_t v2024 = *(void *)(v174 + 152);
                uint64_t v1975 = v173[19];
                do
                {
                  uint64_t v864 = 0;
                  if ((v177 & 0x80000000) == 0)
                  {
                    uint64_t v865 = *(void *)(v174 + 24);
                    int v866 = v863;
                    do
                    {
                      ldiv_t v867 = ldiv(v866, v175[v177]);
                      int v866 = v867.quot;
                      v864 += *(void *)(v865 + 8 * v177--) * v867.rem;
                    }
                    while (v177 != -1);
                  }
                  uint64_t v868 = v2054;
                  if ((v2054 & 0x80000000) != 0)
                  {
                    LODWORD(v869) = 0;
                  }
                  else
                  {
                    uint64_t v869 = 0;
                    uint64_t v870 = v271[3];
                    int v871 = v863;
                    do
                    {
                      ldiv_t v872 = ldiv(v871, v272[v868]);
                      int v871 = v872.quot;
                      v869 += *(void *)(v870 + 8 * v868--) * v872.rem;
                    }
                    while (v868 != -1);
                  }
                  *(unsigned char *)(v1975 + v863++) = *(void *)(v2024 + 8 * (int)v864) > *(void *)(v1989 + 8 * (int)v869);
                  uint64_t v177 = v2068;
                }
                while (v863 != v862);
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v19)
      {
        case 0:
          BOOL v17 = **(float **)(*a1 + 152) <= **(float **)(*a2 + 152);
LABEL_23:
          BOOL v8 = !v17;
LABEL_26:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v211 = *(_DWORD *)(*a2 + 160);
          if (v211 >= 1)
          {
            float v212 = **(float **)(*a1 + 152);
            v213 = *(BOOL **)(*(void *)a3 + 152);
            v214 = *(float **)(*a2 + 152);
            unsigned int v215 = v211 + 1;
            do
            {
              float v216 = *v214++;
              *v213++ = v212 > v216;
              --v215;
            }
            while (v215 > 1);
          }
          return;
        case 2:
          int v217 = *(_DWORD *)(*a1 + 160);
          if (v217 >= 1)
          {
            float v218 = **(float **)(*a2 + 152);
            v219 = *(BOOL **)(*(void *)a3 + 152);
            v220 = *(float **)(*a1 + 152);
            unsigned int v221 = v217 + 1;
            do
            {
              float v222 = *v220++;
              *v219++ = v222 > v218;
              --v221;
            }
            while (v221 > 1);
          }
          return;
        case 3:
          int v223 = *(_DWORD *)(*(void *)a3 + 48);
          if (v223 >= 1)
          {
            v224 = *(BOOL **)(*(void *)a3 + 152);
            v225 = *(float **)(*a2 + 152);
            v226 = *(float **)(*a1 + 152);
            unsigned int v227 = v223 + 1;
            do
            {
              float v228 = *v226++;
              float v229 = v228;
              float v230 = *v225++;
              *v224++ = v229 > v230;
              --v227;
            }
            while (v227 > 1);
          }
          return;
        default:
          v202 = *(void **)a3;
          uint64_t v203 = *a1;
          v204 = *(int **)*a1;
          uint64_t v205 = (*(void *)(*a1 + 8) - (void)v204) >> 2;
          uint64_t v206 = (v205 - 1);
          if ((int)v206 >= -1) {
            int v207 = -1;
          }
          else {
            int v207 = v205 - 1;
          }
          int v208 = v207 + 1;
          int v209 = v205 + 1;
          while (1)
          {
            unsigned int v210 = v209 - 2;
            if (v209 - 2 < 0) {
              break;
            }
            --v209;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v210) != *(void *)(v202[3] + 8 * v210)) {
              goto LABEL_228;
            }
          }
          int v209 = v208;
LABEL_228:
          v279 = (void *)*a2;
          v280 = *(int **)*a2;
          uint64_t v281 = (v279[1] - (void)v280) >> 2;
          uint64_t v282 = (v281 - 1);
          if ((int)v282 >= -1) {
            int v283 = -1;
          }
          else {
            int v283 = v281 - 1;
          }
          int v284 = v283 + 1;
          int v285 = v281 + 1;
          while (1)
          {
            unsigned int v286 = v285 - 2;
            if (v285 - 2 < 0) {
              break;
            }
            --v285;
            if (*(void *)(v279[3] + 8 * v286) != *(void *)(v202[3] + 8 * v286)) {
              goto LABEL_266;
            }
          }
          int v285 = v284;
LABEL_266:
          int v299 = v205 + 1;
          while (1)
          {
            unsigned int v300 = v299 - 2;
            if (v299 - 2 < 0) {
              break;
            }
            --v299;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v300)) {
              goto LABEL_301;
            }
          }
          int v299 = v208;
LABEL_301:
          int v313 = v281 + 1;
          while (1)
          {
            unsigned int v314 = v313 - 2;
            if (v313 - 2 < 0) {
              break;
            }
            --v313;
            if (*(void *)(v279[3] + 8 * v314)) {
              goto LABEL_528;
            }
          }
          int v313 = v284;
LABEL_528:
          unint64_t v439 = (uint64_t)(v202[1] - *v202) >> 2;
          if (v209 <= v285) {
            int v440 = v285;
          }
          else {
            int v440 = v209;
          }
          if (v209 <= v313) {
            int v209 = v313;
          }
          if (v299 > v285) {
            int v285 = v299;
          }
          if (v439 > v285)
          {
            int v441 = 1;
          }
          else
          {
            int v285 = (uint64_t)(v202[1] - *v202) >> 2;
            int v441 = 4;
          }
          if (v439 > v209)
          {
            int v442 = 2;
          }
          else
          {
            int v209 = v285;
            int v442 = v441;
          }
          if (v439 > v440)
          {
            int v209 = v440;
            int v442 = 3;
          }
          uint64_t v2055 = v282;
          uint64_t v2069 = v206;
          if (!v209) {
            goto LABEL_557;
          }
          unint64_t v443 = *(void *)(v202[3] + 8 * (v209 - 1));
          if (v443 < 0x10) {
            goto LABEL_557;
          }
          switch(v442)
          {
            case 1:
              if (v209 == 2)
              {
                uint64_t v1848 = *v204;
                if (v1848)
                {
                  uint64_t v1849 = 0;
                  uint64_t v1850 = 0;
                  uint64_t v1851 = 0;
                  uint64_t v1852 = *(void *)(v203 + 152);
                  uint64_t v1853 = v279[19];
                  uint64_t v1854 = v202[19];
                  unint64_t v1855 = v204[1];
                  v1856 = *(uint64_t **)(v203 + 24);
                  uint64_t v1857 = *v1856;
                  uint64_t v1858 = v1856[1];
                  v1859 = (uint64_t *)v279[3];
                  uint64_t v1861 = *v1859;
                  uint64_t v1860 = v1859[1];
                  if (v1855 <= 1) {
                    uint64_t v1862 = 1;
                  }
                  else {
                    uint64_t v1862 = v204[1];
                  }
                  uint64_t v1863 = v1857 - v1858 * v1855;
                  uint64_t v1864 = v1861 - v1860 * v280[1];
                  do
                  {
                    if (v1855)
                    {
                      uint64_t v1865 = 0;
                      uint64_t v1866 = v1853 + 4 * v1850;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1867 = 0;
                          float v1868 = *(float *)(v1852 + 4 * v1851);
                          unsigned int v1869 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1854 + v1867) = v1868 > *(float *)(v1866 + 4 * v1867);
                            --v1869;
                            ++v1867;
                          }
                          while (v1869 > 1);
                        }
                        v1851 += v1858;
                        v1850 += v1860;
                        v1854 += (int)v443;
                        ++v1865;
                        v1866 += 4 * v1860;
                      }
                      while (v1865 != v1862);
                    }
                    v1851 += v1863;
                    v1850 += v1864;
                    ++v1849;
                  }
                  while (v1849 != v1848);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1156 = *v204;
                if (v1156)
                {
                  uint64_t v1157 = 0;
                  uint64_t v1158 = 0;
                  uint64_t v1159 = *(void *)(v203 + 152);
                  uint64_t v1160 = v279[19];
                  uint64_t v1161 = v202[19];
                  uint64_t v1162 = **(void **)(v203 + 24);
                  uint64_t v1163 = 4 * *(void *)v279[3];
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1164 = 0;
                      float v1165 = *(float *)(v1159 + 4 * v1158);
                      unsigned int v1166 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1164) = v1165 > *(float *)(v1160 + 4 * v1164);
                        --v1166;
                        ++v1164;
                      }
                      while (v1166 > 1);
                    }
                    v1158 += v1162;
                    v1161 += (int)v443;
                    ++v1157;
                    v1160 += v1163;
                  }
                  while (v1157 != v1156);
                }
              }
              else
              {
                unint64_t v2012 = v202[6];
                if (v2012)
                {
                  unint64_t v2047 = 0;
                  uint64_t v1937 = v279[19];
                  uint64_t v1963 = *(void *)(v203 + 152);
                  uint64_t v1870 = v202[19];
                  do
                  {
                    uint64_t v1871 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1872 = *(void *)(v203 + 24);
                      int v1873 = v2047;
                      do
                      {
                        ldiv_t v1874 = ldiv(v1873, v204[v206]);
                        int v1873 = v1874.quot;
                        v1871 += *(void *)(v1872 + 8 * v206--) * v1874.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1875 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1876) = 0;
                    }
                    else
                    {
                      uint64_t v1876 = 0;
                      uint64_t v1877 = v279[3];
                      int v1878 = v2047;
                      do
                      {
                        ldiv_t v1879 = ldiv(v1878, v280[v1875]);
                        int v1878 = v1879.quot;
                        v1876 += *(void *)(v1877 + 8 * v1875--) * v1879.rem;
                      }
                      while (v1875 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1880 = 0;
                      float v1881 = *(float *)(v1963 + 4 * (int)v1871);
                      unsigned int v1882 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1870 + v1880) = v1881 > *(float *)(v1937 + 4 * (int)v1876 + 4 * v1880);
                        --v1882;
                        ++v1880;
                      }
                      while (v1882 > 1);
                    }
                    v1870 += (int)v443;
                    v2047 += (int)v443;
                  }
                  while (v2047 < v2012);
                }
              }
              break;
            case 2:
              if (v209 == 2)
              {
                uint64_t v1883 = *v204;
                if (v1883)
                {
                  uint64_t v1884 = 0;
                  uint64_t v1885 = 0;
                  uint64_t v1886 = 0;
                  uint64_t v1887 = *(void *)(v203 + 152);
                  uint64_t v1888 = v279[19];
                  uint64_t v1889 = v202[19];
                  unint64_t v1890 = v204[1];
                  v1891 = *(uint64_t **)(v203 + 24);
                  uint64_t v1892 = *v1891;
                  uint64_t v1893 = v1891[1];
                  v1894 = (uint64_t *)v279[3];
                  uint64_t v1896 = *v1894;
                  uint64_t v1895 = v1894[1];
                  if (v1890 <= 1) {
                    uint64_t v1897 = 1;
                  }
                  else {
                    uint64_t v1897 = v204[1];
                  }
                  uint64_t v1898 = v1892 - v1893 * v1890;
                  uint64_t v1899 = v1896 - v1895 * v280[1];
                  do
                  {
                    if (v1890)
                    {
                      uint64_t v1900 = 0;
                      uint64_t v1901 = v1887 + 4 * v1886;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1902 = 0;
                          float v1903 = *(float *)(v1888 + 4 * v1885);
                          unsigned int v1904 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1889 + v1902) = *(float *)(v1901 + 4 * v1902) > v1903;
                            --v1904;
                            ++v1902;
                          }
                          while (v1904 > 1);
                        }
                        v1886 += v1893;
                        v1885 += v1895;
                        v1889 += (int)v443;
                        ++v1900;
                        v1901 += 4 * v1893;
                      }
                      while (v1900 != v1897);
                    }
                    v1886 += v1898;
                    v1885 += v1899;
                    ++v1884;
                  }
                  while (v1884 != v1883);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1167 = *v204;
                if (v1167)
                {
                  uint64_t v1168 = 0;
                  uint64_t v1169 = 0;
                  uint64_t v1170 = *(void *)(v203 + 152);
                  uint64_t v1171 = v279[19];
                  uint64_t v1172 = v202[19];
                  uint64_t v1173 = *(void *)v279[3];
                  uint64_t v1174 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1175 = 0;
                      float v1176 = *(float *)(v1171 + 4 * v1169);
                      unsigned int v1177 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1172 + v1175) = *(float *)(v1170 + 4 * v1175) > v1176;
                        --v1177;
                        ++v1175;
                      }
                      while (v1177 > 1);
                    }
                    v1169 += v1173;
                    v1172 += (int)v443;
                    ++v1168;
                    v1170 += v1174;
                  }
                  while (v1168 != v1167);
                }
              }
              else
              {
                unint64_t v2013 = v202[6];
                if (v2013)
                {
                  unint64_t v2048 = 0;
                  uint64_t v1938 = v279[19];
                  uint64_t v1964 = *(void *)(v203 + 152);
                  uint64_t v1905 = v202[19];
                  do
                  {
                    uint64_t v1906 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1907 = *(void *)(v203 + 24);
                      int v1908 = v2048;
                      do
                      {
                        ldiv_t v1909 = ldiv(v1908, v204[v206]);
                        int v1908 = v1909.quot;
                        v1906 += *(void *)(v1907 + 8 * v206--) * v1909.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1910 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1911) = 0;
                    }
                    else
                    {
                      uint64_t v1911 = 0;
                      uint64_t v1912 = v279[3];
                      int v1913 = v2048;
                      do
                      {
                        ldiv_t v1914 = ldiv(v1913, v280[v1910]);
                        int v1913 = v1914.quot;
                        v1911 += *(void *)(v1912 + 8 * v1910--) * v1914.rem;
                      }
                      while (v1910 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1915 = 0;
                      float v1916 = *(float *)(v1938 + 4 * (int)v1911);
                      unsigned int v1917 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1905 + v1915) = *(float *)(v1964 + 4 * (int)v1906 + 4 * v1915) > v1916;
                        --v1917;
                        ++v1915;
                      }
                      while (v1917 > 1);
                    }
                    v1905 += (int)v443;
                    v2048 += (int)v443;
                  }
                  while (v2048 < v2013);
                }
              }
              break;
            case 3:
              if (v209 == 2)
              {
                uint64_t v1386 = *v204;
                if (v1386)
                {
                  uint64_t v1387 = 0;
                  uint64_t v1388 = 0;
                  uint64_t v1389 = 0;
                  uint64_t v1390 = *(void *)(v203 + 152);
                  uint64_t v1391 = v279[19];
                  uint64_t v1392 = v202[19];
                  unint64_t v1393 = v204[1];
                  v1394 = *(uint64_t **)(v203 + 24);
                  uint64_t v1395 = *v1394;
                  uint64_t v1396 = v1394[1];
                  v1397 = (uint64_t *)v279[3];
                  uint64_t v1399 = *v1397;
                  uint64_t v1398 = v1397[1];
                  if (v1393 <= 1) {
                    uint64_t v1400 = 1;
                  }
                  else {
                    uint64_t v1400 = v204[1];
                  }
                  uint64_t v1401 = v1395 - v1396 * v1393;
                  uint64_t v1402 = v1399 - v1398 * v280[1];
                  do
                  {
                    if (v1393)
                    {
                      uint64_t v1403 = 0;
                      uint64_t v1404 = v1391 + 4 * v1388;
                      uint64_t v1405 = v1390 + 4 * v1389;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1406 = 0;
                          unsigned int v1407 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1392 + v1406) = *(float *)(v1405 + 4 * v1406) > *(float *)(v1404 + 4 * v1406);
                            --v1407;
                            ++v1406;
                          }
                          while (v1407 > 1);
                        }
                        v1389 += v1396;
                        v1388 += v1398;
                        v1392 += (int)v443;
                        ++v1403;
                        v1404 += 4 * v1398;
                        v1405 += 4 * v1396;
                      }
                      while (v1403 != v1400);
                    }
                    v1389 += v1401;
                    v1388 += v1402;
                    ++v1387;
                  }
                  while (v1387 != v1386);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v444 = *v204;
                if (v444)
                {
                  uint64_t v445 = 0;
                  uint64_t v446 = *(void *)(v203 + 152);
                  uint64_t v447 = v279[19];
                  uint64_t v448 = v202[19];
                  uint64_t v449 = 4 * *(void *)v279[3];
                  uint64_t v450 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v451 = 0;
                      unsigned int v452 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v448 + v451) = *(float *)(v446 + 4 * v451) > *(float *)(v447 + 4 * v451);
                        --v452;
                        ++v451;
                      }
                      while (v452 > 1);
                    }
                    v448 += (int)v443;
                    ++v445;
                    v447 += v449;
                    v446 += v450;
                  }
                  while (v445 != v444);
                }
              }
              else
              {
                unint64_t v1999 = v202[6];
                if (v1999)
                {
                  unint64_t v2034 = 0;
                  uint64_t v1924 = v279[19];
                  uint64_t v1950 = *(void *)(v203 + 152);
                  uint64_t v1408 = v202[19];
                  do
                  {
                    uint64_t v1409 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1410 = *(void *)(v203 + 24);
                      int v1411 = v2034;
                      do
                      {
                        ldiv_t v1412 = ldiv(v1411, v204[v206]);
                        int v1411 = v1412.quot;
                        v1409 += *(void *)(v1410 + 8 * v206--) * v1412.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1413 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1414) = 0;
                    }
                    else
                    {
                      uint64_t v1414 = 0;
                      uint64_t v1415 = v279[3];
                      int v1416 = v2034;
                      do
                      {
                        ldiv_t v1417 = ldiv(v1416, v280[v1413]);
                        int v1416 = v1417.quot;
                        v1414 += *(void *)(v1415 + 8 * v1413--) * v1417.rem;
                      }
                      while (v1413 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1418 = 0;
                      unsigned int v1419 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1408 + v1418) = *(float *)(v1950 + 4 * (int)v1409 + 4 * v1418) > *(float *)(v1924 + 4 * (int)v1414 + 4 * v1418);
                        --v1419;
                        ++v1418;
                      }
                      while (v1419 > 1);
                    }
                    v1408 += (int)v443;
                    v2034 += (int)v443;
                  }
                  while (v2034 < v1999);
                }
              }
              break;
            default:
LABEL_557:
              switch(v439)
              {
                case 1uLL:
                  uint64_t v453 = v202[6];
                  if (v453)
                  {
                    v454 = *(float **)(v203 + 152);
                    v455 = (float *)v279[19];
                    v456 = (BOOL *)v202[19];
                    uint64_t v457 = 4 * *(void *)v279[3];
                    uint64_t v458 = 4 * **(void **)(v203 + 24);
                    do
                    {
                      *v456++ = *v454 > *v455;
                      v455 = (float *)((char *)v455 + v457);
                      v454 = (float *)((char *)v454 + v458);
                      --v453;
                    }
                    while (v453);
                  }
                  break;
                case 2uLL:
                  uint64_t v952 = *v204;
                  if (v952)
                  {
                    uint64_t v953 = 0;
                    uint64_t v954 = 0;
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = *(void *)(v203 + 152);
                    uint64_t v958 = v279[19];
                    uint64_t v959 = v202[19];
                    unint64_t v960 = v204[1];
                    v961 = *(uint64_t **)(v203 + 24);
                    uint64_t v962 = *v961;
                    uint64_t v963 = v961[1];
                    v964 = (uint64_t *)v279[3];
                    uint64_t v965 = *v964;
                    uint64_t v966 = v964[1];
                    uint64_t v967 = v965 - v966 * v280[1];
                    if (v960 <= 1) {
                      uint64_t v968 = 1;
                    }
                    else {
                      uint64_t v968 = v204[1];
                    }
                    uint64_t v969 = v962 - v963 * v960;
                    do
                    {
                      if (v960)
                      {
                        uint64_t v970 = v954 + v968;
                        v971 = (BOOL *)(v959 + v954);
                        uint64_t v972 = v968;
                        do
                        {
                          *v971++ = *(float *)(v957 + 4 * v956) > *(float *)(v958 + 4 * v955);
                          v956 += v963;
                          v955 += v966;
                          --v972;
                        }
                        while (v972);
                        uint64_t v954 = v970;
                      }
                      v956 += v969;
                      v955 += v967;
                      ++v953;
                    }
                    while (v953 != v952);
                  }
                  break;
                case 3uLL:
                  uint64_t v973 = *v204;
                  if (v973)
                  {
                    uint64_t v974 = 0;
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = *(void *)(v203 + 152);
                    uint64_t v979 = v279[19];
                    uint64_t v980 = v202[19];
                    unint64_t v981 = v204[1];
                    v982 = *(void **)(v203 + 24);
                    uint64_t v983 = v982[1];
                    v984 = (void *)v279[3];
                    uint64_t v985 = v984[1];
                    uint64_t v986 = *v984 - v985 * v280[1];
                    if (v981 <= 1) {
                      uint64_t v987 = 1;
                    }
                    else {
                      uint64_t v987 = v204[1];
                    }
                    unint64_t v988 = *v982 - v983 * v981;
                    do
                    {
                      if (v981)
                      {
                        uint64_t v989 = 0;
                        unint64_t v990 = v204[2];
                        uint64_t v991 = v982[2];
                        uint64_t v992 = v984[2];
                        if (v990 <= 1) {
                          uint64_t v993 = 1;
                        }
                        else {
                          uint64_t v993 = v204[2];
                        }
                        uint64_t v994 = v985 - v992 * v280[2];
                        do
                        {
                          uint64_t v995 = v993;
                          if (v990)
                          {
                            do
                            {
                              *(unsigned char *)(v980 + v975++) = *(float *)(v978 + 4 * v977) > *(float *)(v979 + 4 * v976);
                              v977 += v991;
                              v976 += v992;
                              --v995;
                            }
                            while (v995);
                          }
                          v977 += v983 - v991 * v990;
                          v976 += v994;
                          ++v989;
                        }
                        while (v989 != v987);
                      }
                      v977 += v988;
                      v976 += v986;
                      ++v974;
                    }
                    while (v974 != v973);
                  }
                  break;
                case 4uLL:
                  uint64_t v2076 = *v204;
                  if (v2076)
                  {
                    uint64_t v996 = 0;
                    uint64_t v997 = 0;
                    uint64_t v998 = 0;
                    uint64_t v999 = 0;
                    uint64_t v1000 = *(void *)(v203 + 152);
                    uint64_t v1001 = v279[19];
                    uint64_t v1002 = v202[19];
                    unint64_t v1003 = v204[1];
                    v1004 = *(void **)(v203 + 24);
                    v1005 = (void *)v279[3];
                    uint64_t v1978 = v1005[1];
                    uint64_t v1992 = v1004[1];
                    if (v1003 <= 1) {
                      uint64_t v1006 = 1;
                    }
                    else {
                      uint64_t v1006 = v204[1];
                    }
                    unint64_t v2027 = *v1004 - v1004[1] * v1003;
                    uint64_t v2062 = *v1005 - v1978 * v280[1];
                    do
                    {
                      if (v1003)
                      {
                        uint64_t v1007 = 0;
                        unint64_t v1008 = v204[2];
                        uint64_t v1009 = v1004[2];
                        uint64_t v1010 = v1005[2];
                        if (v1008 <= 1) {
                          uint64_t v1011 = 1;
                        }
                        else {
                          uint64_t v1011 = v204[2];
                        }
                        uint64_t v1012 = v1978 - v1010 * v280[2];
                        do
                        {
                          if (v1008)
                          {
                            uint64_t v1013 = 0;
                            unint64_t v1014 = v204[3];
                            uint64_t v1015 = v1004[3];
                            uint64_t v1016 = v1005[3];
                            if (v1014 <= 1) {
                              uint64_t v1017 = 1;
                            }
                            else {
                              uint64_t v1017 = v204[3];
                            }
                            uint64_t v1018 = v1010 - v1016 * v280[3];
                            do
                            {
                              uint64_t v1019 = v1017;
                              if (v1014)
                              {
                                do
                                {
                                  *(unsigned char *)(v1002 + v997++) = *(float *)(v1000 + 4 * v999) > *(float *)(v1001 + 4 * v998);
                                  v999 += v1015;
                                  v998 += v1016;
                                  --v1019;
                                }
                                while (v1019);
                              }
                              v999 += v1009 - v1015 * v1014;
                              v998 += v1018;
                              ++v1013;
                            }
                            while (v1013 != v1011);
                          }
                          v999 += v1992 - v1009 * v1008;
                          v998 += v1012;
                          ++v1007;
                        }
                        while (v1007 != v1006);
                      }
                      v999 += v2027;
                      v998 += v2062;
                      ++v996;
                    }
                    while (v996 != v2076);
                  }
                  break;
                default:
                  uint64_t v941 = v202[6];
                  if (v941)
                  {
                    uint64_t v942 = 0;
                    uint64_t v1991 = v279[19];
                    uint64_t v2026 = *(void *)(v203 + 152);
                    uint64_t v1977 = v202[19];
                    do
                    {
                      uint64_t v943 = 0;
                      if ((v206 & 0x80000000) == 0)
                      {
                        uint64_t v944 = *(void *)(v203 + 24);
                        int v945 = v942;
                        do
                        {
                          ldiv_t v946 = ldiv(v945, v204[v206]);
                          int v945 = v946.quot;
                          v943 += *(void *)(v944 + 8 * v206--) * v946.rem;
                        }
                        while (v206 != -1);
                      }
                      uint64_t v947 = v2055;
                      if ((v2055 & 0x80000000) != 0)
                      {
                        LODWORD(v948) = 0;
                      }
                      else
                      {
                        uint64_t v948 = 0;
                        uint64_t v949 = v279[3];
                        int v950 = v942;
                        do
                        {
                          ldiv_t v951 = ldiv(v950, v280[v947]);
                          int v950 = v951.quot;
                          v948 += *(void *)(v949 + 8 * v947--) * v951.rem;
                        }
                        while (v947 != -1);
                      }
                      *(unsigned char *)(v1977 + v942++) = *(float *)(v2026 + 4 * (int)v943) > *(float *)(v1991
                                                                                                  + 4 * (int)v948);
                      uint64_t v206 = v2069;
                    }
                    while (v942 != v941);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::GreaterEqual::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::GreaterEqual::eval();
  }
}

void mlx::core::anonymous namespace'::comparison_op<mlx::core::detail::GreaterEqual>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*a1 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          BOOL v8 = v7;
          goto LABEL_26;
        case 1:
          int v29 = *(_DWORD *)(*a2 + 160);
          if (v29 >= 1)
          {
            int v30 = **(unsigned __int8 **)(*a1 + 152);
            v31 = *(char **)(*(void *)a3 + 152);
            v32 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v33 = v29 + 1;
            do
            {
              int v35 = *v32++;
              int v34 = v35;
              if (v30) {
                BOOL v36 = 1;
              }
              else {
                BOOL v36 = v34 == 0;
              }
              char v37 = v36;
              *v31++ = v37;
              --v33;
            }
            while (v33 > 1);
          }
          return;
        case 2:
          int v38 = *(_DWORD *)(*a1 + 160);
          if (v38 >= 1)
          {
            int v39 = **(unsigned __int8 **)(*a2 + 152);
            v40 = *(char **)(*(void *)a3 + 152);
            v41 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v42 = v38 + 1;
            do
            {
              int v44 = *v41++;
              int v43 = v44;
              if (v39) {
                BOOL v45 = v43 == 0;
              }
              else {
                BOOL v45 = 0;
              }
              char v46 = !v45;
              *v40++ = v46;
              --v42;
            }
            while (v42 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(char **)(*(void *)a3 + 152);
            v49 = *(unsigned __int8 **)(*a2 + 152);
            v50 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v52 = *v50++;
              BOOL v7 = v52 == 0;
              int v54 = *v49++;
              int v53 = v54;
              char v56 = !v7 || v53 == 0;
              *v48++ = v56;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v20 = *(void **)a3;
          uint64_t v21 = *a1;
          v22 = *(int **)*a1;
          uint64_t v23 = (*(void *)(*a1 + 8) - (void)v22) >> 2;
          uint64_t v24 = (v23 - 1);
          if ((int)v24 >= -1) {
            int v25 = -1;
          }
          else {
            int v25 = v23 - 1;
          }
          int v26 = v25 + 1;
          int v27 = v23 + 1;
          break;
      }
      while (1)
      {
        unsigned int v28 = v27 - 2;
        if (v27 - 2 < 0) {
          break;
        }
        --v27;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v28) != *(void *)(v20[3] + 8 * v28)) {
          goto LABEL_180;
        }
      }
      int v27 = v26;
LABEL_180:
      v231 = (void *)*a2;
      v232 = *(int **)*a2;
      uint64_t v233 = (v231[1] - (void)v232) >> 2;
      uint64_t v234 = (v233 - 1);
      if ((int)v234 >= -1) {
        int v235 = -1;
      }
      else {
        int v235 = v233 - 1;
      }
      int v236 = v235 + 1;
      int v237 = v233 + 1;
      while (1)
      {
        unsigned int v238 = v237 - 2;
        if (v237 - 2 < 0) {
          break;
        }
        --v237;
        if (*(void *)(v231[3] + 8 * v238) != *(void *)(v20[3] + 8 * v238)) {
          goto LABEL_236;
        }
      }
      int v237 = v236;
LABEL_236:
      int v287 = v23 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v288)) {
          goto LABEL_271;
        }
      }
      int v287 = v26;
LABEL_271:
      int v301 = v233 + 1;
      while (1)
      {
        unsigned int v302 = v301 - 2;
        if (v301 - 2 < 0) {
          break;
        }
        --v301;
        if (*(void *)(v231[3] + 8 * v302)) {
          goto LABEL_306;
        }
      }
      int v301 = v236;
LABEL_306:
      unint64_t v315 = (uint64_t)(v20[1] - *v20) >> 2;
      if (v27 <= v237) {
        int v316 = v237;
      }
      else {
        int v316 = v27;
      }
      if (v27 <= v301) {
        int v27 = v301;
      }
      if (v287 > v237) {
        int v237 = v287;
      }
      if (v315 > v237)
      {
        int v317 = 1;
      }
      else
      {
        int v237 = (uint64_t)(v20[1] - *v20) >> 2;
        int v317 = 4;
      }
      if (v315 > v27)
      {
        int v318 = 2;
      }
      else
      {
        int v27 = v237;
        int v318 = v317;
      }
      if (v315 > v316)
      {
        int v27 = v316;
        int v318 = 3;
      }
      uint64_t v2049 = v234;
      uint64_t v2063 = v24;
      if (!v27) {
        goto LABEL_341;
      }
      unint64_t v319 = *(void *)(v20[3] + 8 * (v27 - 1));
      if (v319 < 0x10) {
        goto LABEL_341;
      }
      switch(v318)
      {
        case 1:
          if (v27 == 2)
          {
            uint64_t v1420 = *v22;
            if (v1420)
            {
              uint64_t v1421 = 0;
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = *(void *)(v21 + 152);
              uint64_t v1425 = v231[19];
              uint64_t v1426 = v20[19];
              unint64_t v1427 = v22[1];
              v1428 = *(uint64_t **)(v21 + 24);
              uint64_t v1429 = *v1428;
              uint64_t v1430 = v1428[1];
              v1431 = (uint64_t *)v231[3];
              uint64_t v1433 = *v1431;
              uint64_t v1432 = v1431[1];
              if (v1427 <= 1) {
                uint64_t v1434 = 1;
              }
              else {
                uint64_t v1434 = v22[1];
              }
              uint64_t v1435 = v1429 - v1430 * v1427;
              uint64_t v1436 = v1433 - v1432 * v232[1];
              do
              {
                if (v1427)
                {
                  uint64_t v1437 = 0;
                  uint64_t v1438 = v1425 + v1422;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1439 = 0;
                      int v1440 = *(unsigned __int8 *)(v1424 + v1423);
                      unsigned int v1441 = v319 + 1;
                      do
                      {
                        if (v1440) {
                          BOOL v1442 = 1;
                        }
                        else {
                          BOOL v1442 = *(unsigned char *)(v1438 + v1439) == 0;
                        }
                        char v1443 = v1442;
                        *(unsigned char *)(v1426 + v1439) = v1443;
                        --v1441;
                        ++v1439;
                      }
                      while (v1441 > 1);
                    }
                    v1423 += v1430;
                    v1422 += v1432;
                    v1426 += (int)v319;
                    ++v1437;
                    v1438 += v1432;
                  }
                  while (v1437 != v1434);
                }
                v1423 += v1435;
                v1422 += v1436;
                ++v1421;
              }
              while (v1421 != v1420);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1020 = *v22;
            if (v1020)
            {
              uint64_t v1021 = 0;
              uint64_t v1022 = 0;
              uint64_t v1023 = *(void *)(v21 + 152);
              uint64_t v1024 = v231[19];
              uint64_t v1025 = v20[19];
              uint64_t v1026 = **(void **)(v21 + 24);
              uint64_t v1027 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1028 = 0;
                  int v1029 = *(unsigned __int8 *)(v1023 + v1022);
                  unsigned int v1030 = v319 + 1;
                  do
                  {
                    if (v1029) {
                      BOOL v1031 = 1;
                    }
                    else {
                      BOOL v1031 = *(unsigned char *)(v1024 + v1028) == 0;
                    }
                    char v1032 = v1031;
                    *(unsigned char *)(v1025 + v1028) = v1032;
                    --v1030;
                    ++v1028;
                  }
                  while (v1030 > 1);
                }
                v1022 += v1026;
                v1025 += (int)v319;
                ++v1021;
                v1024 += v1027;
              }
              while (v1021 != v1020);
            }
          }
          else
          {
            unint64_t v2000 = v20[6];
            if (v2000)
            {
              unint64_t v2035 = 0;
              uint64_t v1925 = v231[19];
              uint64_t v1951 = *(void *)(v21 + 152);
              uint64_t v1444 = v20[19];
              do
              {
                uint64_t v1445 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1446 = *(void *)(v21 + 24);
                  int quot = v2035;
                  do
                  {
                    ldiv_t v1448 = ldiv(quot, v22[v24]);
                    int quot = v1448.quot;
                    v1445 += *(void *)(v1446 + 8 * v24--) * v1448.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1449 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1450) = 0;
                }
                else
                {
                  uint64_t v1450 = 0;
                  uint64_t v1451 = v231[3];
                  int v1452 = v2035;
                  do
                  {
                    ldiv_t v1453 = ldiv(v1452, v232[v1449]);
                    int v1452 = v1453.quot;
                    v1450 += *(void *)(v1451 + 8 * v1449--) * v1453.rem;
                  }
                  while (v1449 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1454 = 0;
                  int v1455 = *(unsigned __int8 *)(v1951 + (int)v1445);
                  unsigned int v1456 = v319 + 1;
                  do
                  {
                    if (v1455) {
                      BOOL v1457 = 1;
                    }
                    else {
                      BOOL v1457 = *(unsigned char *)(v1925 + (int)v1450 + v1454) == 0;
                    }
                    char v1458 = v1457;
                    *(unsigned char *)(v1444 + v1454) = v1458;
                    --v1456;
                    ++v1454;
                  }
                  while (v1456 > 1);
                }
                v1444 += (int)v319;
                v2035 += (int)v319;
              }
              while (v2035 < v2000);
            }
          }
          break;
        case 2:
          if (v27 == 2)
          {
            uint64_t v1459 = *v22;
            if (v1459)
            {
              uint64_t v1460 = 0;
              uint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = *(void *)(v21 + 152);
              uint64_t v1464 = v231[19];
              uint64_t v1465 = v20[19];
              unint64_t v1466 = v22[1];
              v1467 = *(uint64_t **)(v21 + 24);
              uint64_t v1468 = *v1467;
              uint64_t v1469 = v1467[1];
              v1470 = (uint64_t *)v231[3];
              uint64_t v1472 = *v1470;
              uint64_t v1471 = v1470[1];
              if (v1466 <= 1) {
                uint64_t v1473 = 1;
              }
              else {
                uint64_t v1473 = v22[1];
              }
              uint64_t v1474 = v1468 - v1469 * v1466;
              uint64_t v1475 = v1472 - v1471 * v232[1];
              do
              {
                if (v1466)
                {
                  uint64_t v1476 = 0;
                  uint64_t v1477 = v1463 + v1462;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1478 = 0;
                      int v1479 = *(unsigned __int8 *)(v1464 + v1461);
                      unsigned int v1480 = v319 + 1;
                      do
                      {
                        if (v1479) {
                          BOOL v1481 = *(unsigned char *)(v1477 + v1478) == 0;
                        }
                        else {
                          BOOL v1481 = 0;
                        }
                        char v1482 = !v1481;
                        *(unsigned char *)(v1465 + v1478) = v1482;
                        --v1480;
                        ++v1478;
                      }
                      while (v1480 > 1);
                    }
                    v1462 += v1469;
                    v1461 += v1471;
                    v1465 += (int)v319;
                    ++v1476;
                    v1477 += v1469;
                  }
                  while (v1476 != v1473);
                }
                v1462 += v1474;
                v1461 += v1475;
                ++v1460;
              }
              while (v1460 != v1459);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1033 = *v22;
            if (v1033)
            {
              uint64_t v1034 = 0;
              uint64_t v1035 = 0;
              uint64_t v1036 = *(void *)(v21 + 152);
              uint64_t v1037 = v231[19];
              uint64_t v1038 = v20[19];
              uint64_t v1039 = **(void **)(v21 + 24);
              uint64_t v1040 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1041 = 0;
                  int v1042 = *(unsigned __int8 *)(v1037 + v1035);
                  unsigned int v1043 = v319 + 1;
                  do
                  {
                    if (v1042) {
                      BOOL v1044 = *(unsigned char *)(v1036 + v1041) == 0;
                    }
                    else {
                      BOOL v1044 = 0;
                    }
                    char v1045 = !v1044;
                    *(unsigned char *)(v1038 + v1041) = v1045;
                    --v1043;
                    ++v1041;
                  }
                  while (v1043 > 1);
                }
                v1035 += v1040;
                v1038 += (int)v319;
                ++v1034;
                v1036 += v1039;
              }
              while (v1034 != v1033);
            }
          }
          else
          {
            unint64_t v2001 = v20[6];
            if (v2001)
            {
              unint64_t v2036 = 0;
              uint64_t v1926 = v231[19];
              uint64_t v1952 = *(void *)(v21 + 152);
              uint64_t v1483 = v20[19];
              do
              {
                uint64_t v1484 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1485 = *(void *)(v21 + 24);
                  int v1486 = v2036;
                  do
                  {
                    ldiv_t v1487 = ldiv(v1486, v22[v24]);
                    int v1486 = v1487.quot;
                    v1484 += *(void *)(v1485 + 8 * v24--) * v1487.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1488 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1489) = 0;
                }
                else
                {
                  uint64_t v1489 = 0;
                  uint64_t v1490 = v231[3];
                  int v1491 = v2036;
                  do
                  {
                    ldiv_t v1492 = ldiv(v1491, v232[v1488]);
                    int v1491 = v1492.quot;
                    v1489 += *(void *)(v1490 + 8 * v1488--) * v1492.rem;
                  }
                  while (v1488 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1493 = 0;
                  int v1494 = *(unsigned __int8 *)(v1926 + (int)v1489);
                  unsigned int v1495 = v319 + 1;
                  do
                  {
                    if (v1494) {
                      BOOL v1496 = *(unsigned char *)(v1952 + (int)v1484 + v1493) == 0;
                    }
                    else {
                      BOOL v1496 = 0;
                    }
                    char v1497 = !v1496;
                    *(unsigned char *)(v1483 + v1493) = v1497;
                    --v1495;
                    ++v1493;
                  }
                  while (v1495 > 1);
                }
                v1483 += (int)v319;
                v2036 += (int)v319;
              }
              while (v2036 < v2001);
            }
          }
          break;
        case 3:
          if (v27 == 2)
          {
            uint64_t v1178 = *v22;
            if (v1178)
            {
              uint64_t v1179 = 0;
              uint64_t v1180 = 0;
              uint64_t v1181 = 0;
              uint64_t v1182 = *(void *)(v21 + 152);
              uint64_t v1183 = v231[19];
              uint64_t v1184 = v20[19];
              unint64_t v1185 = v22[1];
              v1186 = *(uint64_t **)(v21 + 24);
              uint64_t v1187 = *v1186;
              uint64_t v1188 = v1186[1];
              v1189 = (uint64_t *)v231[3];
              uint64_t v1191 = *v1189;
              uint64_t v1190 = v1189[1];
              if (v1185 <= 1) {
                uint64_t v1192 = 1;
              }
              else {
                uint64_t v1192 = v22[1];
              }
              uint64_t v1193 = v1187 - v1188 * v1185;
              uint64_t v1194 = v1191 - v1190 * v232[1];
              do
              {
                if (v1185)
                {
                  uint64_t v1195 = 0;
                  uint64_t v1196 = v1183 + v1180;
                  uint64_t v1197 = v1182 + v1181;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1198 = 0;
                      unsigned int v1199 = v319 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1197 + v1198)) {
                          BOOL v1200 = 1;
                        }
                        else {
                          BOOL v1200 = *(unsigned char *)(v1196 + v1198) == 0;
                        }
                        char v1201 = v1200;
                        *(unsigned char *)(v1184 + v1198) = v1201;
                        --v1199;
                        ++v1198;
                      }
                      while (v1199 > 1);
                    }
                    v1181 += v1188;
                    v1180 += v1190;
                    v1184 += (int)v319;
                    ++v1195;
                    v1196 += v1190;
                    v1197 += v1188;
                  }
                  while (v1195 != v1192);
                }
                v1181 += v1193;
                v1180 += v1194;
                ++v1179;
              }
              while (v1179 != v1178);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v320 = *v22;
            if (v320)
            {
              uint64_t v321 = 0;
              uint64_t v322 = *(void *)(v21 + 152);
              uint64_t v323 = v231[19];
              uint64_t v324 = v20[19];
              uint64_t v325 = **(void **)(v21 + 24);
              uint64_t v326 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v327 = 0;
                  unsigned int v328 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v322 + v327)) {
                      BOOL v329 = 1;
                    }
                    else {
                      BOOL v329 = *(unsigned char *)(v323 + v327) == 0;
                    }
                    char v330 = v329;
                    *(unsigned char *)(v324 + v327) = v330;
                    --v328;
                    ++v327;
                  }
                  while (v328 > 1);
                }
                v324 += (int)v319;
                ++v321;
                v323 += v326;
                v322 += v325;
              }
              while (v321 != v320);
            }
          }
          else
          {
            unint64_t v1993 = v20[6];
            if (v1993)
            {
              unint64_t v2028 = 0;
              uint64_t v1918 = v231[19];
              uint64_t v1944 = *(void *)(v21 + 152);
              uint64_t v1202 = v20[19];
              do
              {
                uint64_t v1203 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1204 = *(void *)(v21 + 24);
                  int v1205 = v2028;
                  do
                  {
                    ldiv_t v1206 = ldiv(v1205, v22[v24]);
                    int v1205 = v1206.quot;
                    v1203 += *(void *)(v1204 + 8 * v24--) * v1206.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1207 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1208) = 0;
                }
                else
                {
                  uint64_t v1208 = 0;
                  uint64_t v1209 = v231[3];
                  int v1210 = v2028;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v232[v1207]);
                    int v1210 = v1211.quot;
                    v1208 += *(void *)(v1209 + 8 * v1207--) * v1211.rem;
                  }
                  while (v1207 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1212 = 0;
                  unsigned int v1213 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1944 + (int)v1203 + v1212)) {
                      BOOL v1214 = 1;
                    }
                    else {
                      BOOL v1214 = *(unsigned char *)(v1918 + (int)v1208 + v1212) == 0;
                    }
                    char v1215 = v1214;
                    *(unsigned char *)(v1202 + v1212) = v1215;
                    --v1213;
                    ++v1212;
                  }
                  while (v1213 > 1);
                }
                v1202 += (int)v319;
                v2028 += (int)v319;
              }
              while (v2028 < v1993);
            }
          }
          break;
        default:
LABEL_341:
          switch(v315)
          {
            case 1uLL:
              uint64_t v331 = v20[6];
              if (v331)
              {
                v332 = *(unsigned char **)(v21 + 152);
                v333 = (unsigned char *)v231[19];
                v334 = (char *)v20[19];
                uint64_t v335 = **(void **)(v21 + 24);
                uint64_t v336 = *(void *)v231[3];
                do
                {
                  if (*v332) {
                    BOOL v337 = 1;
                  }
                  else {
                    BOOL v337 = *v333 == 0;
                  }
                  char v338 = v337;
                  *v334++ = v338;
                  v333 += v336;
                  v332 += v335;
                  --v331;
                }
                while (v331);
              }
              break;
            case 2uLL:
              uint64_t v472 = *v22;
              if (v472)
              {
                uint64_t v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                uint64_t v477 = *(void *)(v21 + 152);
                uint64_t v478 = v231[19];
                uint64_t v479 = v20[19];
                unint64_t v480 = v22[1];
                v481 = *(uint64_t **)(v21 + 24);
                uint64_t v482 = *v481;
                uint64_t v483 = v481[1];
                v484 = (uint64_t *)v231[3];
                uint64_t v485 = *v484;
                uint64_t v486 = v484[1];
                uint64_t v487 = v485 - v486 * v232[1];
                if (v480 <= 1) {
                  uint64_t v488 = 1;
                }
                else {
                  uint64_t v488 = v22[1];
                }
                uint64_t v489 = v482 - v483 * v480;
                do
                {
                  if (v480)
                  {
                    uint64_t v490 = v474 + v488;
                    v491 = (char *)(v479 + v474);
                    uint64_t v492 = v488;
                    do
                    {
                      if (*(unsigned char *)(v477 + v476)) {
                        BOOL v493 = 1;
                      }
                      else {
                        BOOL v493 = *(unsigned char *)(v478 + v475) == 0;
                      }
                      char v494 = v493;
                      *v491++ = v494;
                      v476 += v483;
                      v475 += v486;
                      --v492;
                    }
                    while (v492);
                    uint64_t v474 = v490;
                  }
                  v476 += v489;
                  v475 += v487;
                  ++v473;
                }
                while (v473 != v472);
              }
              break;
            case 3uLL:
              uint64_t v495 = *v22;
              if (v495)
              {
                uint64_t v496 = 0;
                uint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = *(void *)(v21 + 152);
                uint64_t v501 = v231[19];
                uint64_t v502 = v20[19];
                unint64_t v503 = v22[1];
                v504 = *(void **)(v21 + 24);
                uint64_t v505 = v504[1];
                v506 = (void *)v231[3];
                uint64_t v507 = v506[1];
                uint64_t v508 = *v506 - v507 * v232[1];
                if (v503 <= 1) {
                  uint64_t v509 = 1;
                }
                else {
                  uint64_t v509 = v22[1];
                }
                unint64_t v510 = *v504 - v505 * v503;
                do
                {
                  if (v503)
                  {
                    uint64_t v511 = 0;
                    unint64_t v512 = v22[2];
                    uint64_t v513 = v504[2];
                    uint64_t v514 = v506[2];
                    if (v512 <= 1) {
                      uint64_t v515 = 1;
                    }
                    else {
                      uint64_t v515 = v22[2];
                    }
                    uint64_t v516 = v507 - v514 * v232[2];
                    do
                    {
                      uint64_t v517 = v515;
                      if (v512)
                      {
                        do
                        {
                          if (*(unsigned char *)(v500 + v499)) {
                            BOOL v518 = 1;
                          }
                          else {
                            BOOL v518 = *(unsigned char *)(v501 + v498) == 0;
                          }
                          char v519 = v518;
                          *(unsigned char *)(v502 + v497++) = v519;
                          v499 += v513;
                          v498 += v514;
                          --v517;
                        }
                        while (v517);
                      }
                      v499 += v505 - v513 * v512;
                      v498 += v516;
                      ++v511;
                    }
                    while (v511 != v509);
                  }
                  v499 += v510;
                  v498 += v508;
                  ++v496;
                }
                while (v496 != v495);
              }
              break;
            case 4uLL:
              uint64_t v2070 = *v22;
              if (v2070)
              {
                uint64_t v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = 0;
                uint64_t v524 = *(void *)(v21 + 152);
                uint64_t v525 = v231[19];
                uint64_t v526 = v20[19];
                unint64_t v527 = v22[1];
                v528 = *(void **)(v21 + 24);
                v529 = (void *)v231[3];
                uint64_t v1966 = v529[1];
                uint64_t v1980 = v528[1];
                if (v527 <= 1) {
                  uint64_t v530 = 1;
                }
                else {
                  uint64_t v530 = v22[1];
                }
                unint64_t v2015 = *v528 - v528[1] * v527;
                uint64_t v2056 = *v529 - v1966 * v232[1];
                do
                {
                  if (v527)
                  {
                    uint64_t v531 = 0;
                    unint64_t v532 = v22[2];
                    uint64_t v533 = v528[2];
                    uint64_t v534 = v529[2];
                    if (v532 <= 1) {
                      uint64_t v535 = 1;
                    }
                    else {
                      uint64_t v535 = v22[2];
                    }
                    uint64_t v536 = v1966 - v534 * v232[2];
                    do
                    {
                      if (v532)
                      {
                        uint64_t v537 = 0;
                        unint64_t v538 = v22[3];
                        uint64_t v539 = v528[3];
                        uint64_t v540 = v529[3];
                        if (v538 <= 1) {
                          uint64_t v541 = 1;
                        }
                        else {
                          uint64_t v541 = v22[3];
                        }
                        uint64_t v542 = v534 - v540 * v232[3];
                        do
                        {
                          uint64_t v543 = v541;
                          if (v538)
                          {
                            do
                            {
                              if (*(unsigned char *)(v524 + v523)) {
                                BOOL v544 = 1;
                              }
                              else {
                                BOOL v544 = *(unsigned char *)(v525 + v522) == 0;
                              }
                              char v545 = v544;
                              *(unsigned char *)(v526 + v521++) = v545;
                              v523 += v539;
                              v522 += v540;
                              --v543;
                            }
                            while (v543);
                          }
                          v523 += v533 - v539 * v538;
                          v522 += v542;
                          ++v537;
                        }
                        while (v537 != v535);
                      }
                      v523 += v1980 - v533 * v532;
                      v522 += v536;
                      ++v531;
                    }
                    while (v531 != v530);
                  }
                  v523 += v2015;
                  v522 += v2056;
                  ++v520;
                }
                while (v520 != v2070);
              }
              break;
            default:
              uint64_t v459 = v20[6];
              if (v459)
              {
                uint64_t v460 = 0;
                uint64_t v1979 = v231[19];
                uint64_t v2014 = *(void *)(v21 + 152);
                uint64_t v1965 = v20[19];
                do
                {
                  uint64_t v461 = 0;
                  if ((v24 & 0x80000000) == 0)
                  {
                    uint64_t v462 = *(void *)(v21 + 24);
                    int v463 = v460;
                    do
                    {
                      ldiv_t v464 = ldiv(v463, v22[v24]);
                      int v463 = v464.quot;
                      v461 += *(void *)(v462 + 8 * v24--) * v464.rem;
                    }
                    while (v24 != -1);
                  }
                  uint64_t v465 = v2049;
                  if ((v2049 & 0x80000000) != 0)
                  {
                    LODWORD(v466) = 0;
                  }
                  else
                  {
                    uint64_t v466 = 0;
                    uint64_t v467 = v231[3];
                    int v468 = v460;
                    do
                    {
                      ldiv_t v469 = ldiv(v468, v232[v465]);
                      int v468 = v469.quot;
                      v466 += *(void *)(v467 + 8 * v465--) * v469.rem;
                    }
                    while (v465 != -1);
                  }
                  if (*(unsigned char *)(v2014 + (int)v461)) {
                    BOOL v470 = 1;
                  }
                  else {
                    BOOL v470 = *(unsigned char *)(v1979 + (int)v466) == 0;
                  }
                  char v471 = v470;
                  *(unsigned char *)(v1965 + v460++) = v471;
                  uint64_t v24 = v2063;
                }
                while (v460 != v459);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          unsigned int v10 = **(unsigned __int8 **)(*a1 + 152);
          unsigned int v11 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v66 = *(_DWORD *)(*a2 + 160);
          if (v66 >= 1)
          {
            unsigned int v67 = **(unsigned __int8 **)(*a1 + 152);
            v68 = *(BOOL **)(*(void *)a3 + 152);
            v69 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v70 = v66 + 1;
            do
            {
              unsigned int v71 = *v69++;
              *v68++ = v67 >= v71;
              --v70;
            }
            while (v70 > 1);
          }
          return;
        case 2:
          int v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            unsigned int v73 = **(unsigned __int8 **)(*a2 + 152);
            v74 = *(BOOL **)(*(void *)a3 + 152);
            v75 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              unsigned int v77 = *v75++;
              *v74++ = v77 >= v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            v79 = *(BOOL **)(*(void *)a3 + 152);
            v80 = *(unsigned __int8 **)(*a2 + 152);
            v81 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              unsigned int v84 = *v81++;
              unsigned int v83 = v84;
              unsigned int v85 = *v80++;
              *v79++ = v83 >= v85;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          v57 = *(void **)a3;
          uint64_t v58 = *a1;
          v59 = *(int **)*a1;
          uint64_t v60 = (*(void *)(*a1 + 8) - (void)v59) >> 2;
          uint64_t v61 = (v60 - 1);
          if ((int)v61 >= -1) {
            int v62 = -1;
          }
          else {
            int v62 = v60 - 1;
          }
          int v63 = v62 + 1;
          int v64 = v60 + 1;
          break;
      }
      while (1)
      {
        unsigned int v65 = v64 - 2;
        if (v64 - 2 < 0) {
          break;
        }
        --v64;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v65) != *(void *)(v57[3] + 8 * v65)) {
          goto LABEL_188;
        }
      }
      int v64 = v63;
LABEL_188:
      v239 = (void *)*a2;
      v240 = *(int **)*a2;
      uint64_t v241 = (v239[1] - (void)v240) >> 2;
      uint64_t v242 = (v241 - 1);
      if ((int)v242 >= -1) {
        int v243 = -1;
      }
      else {
        int v243 = v241 - 1;
      }
      int v244 = v243 + 1;
      int v245 = v241 + 1;
      while (1)
      {
        unsigned int v246 = v245 - 2;
        if (v245 - 2 < 0) {
          break;
        }
        --v245;
        if (*(void *)(v239[3] + 8 * v246) != *(void *)(v57[3] + 8 * v246)) {
          goto LABEL_241;
        }
      }
      int v245 = v244;
LABEL_241:
      int v289 = v60 + 1;
      while (1)
      {
        unsigned int v290 = v289 - 2;
        if (v289 - 2 < 0) {
          break;
        }
        --v289;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v290)) {
          goto LABEL_276;
        }
      }
      int v289 = v63;
LABEL_276:
      int v303 = v241 + 1;
      while (1)
      {
        unsigned int v304 = v303 - 2;
        if (v303 - 2 < 0) {
          break;
        }
        --v303;
        if (*(void *)(v239[3] + 8 * v304)) {
          goto LABEL_353;
        }
      }
      int v303 = v244;
LABEL_353:
      unint64_t v339 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v245) {
        int v340 = v245;
      }
      else {
        int v340 = v64;
      }
      if (v64 <= v303) {
        int v64 = v303;
      }
      if (v289 > v245) {
        int v245 = v289;
      }
      if (v339 > v245)
      {
        int v341 = 1;
      }
      else
      {
        int v245 = (uint64_t)(v57[1] - *v57) >> 2;
        int v341 = 4;
      }
      if (v339 > v64)
      {
        int v342 = 2;
      }
      else
      {
        int v64 = v245;
        int v342 = v341;
      }
      if (v339 > v340)
      {
        int v64 = v340;
        int v342 = 3;
      }
      uint64_t v2050 = v242;
      uint64_t v2064 = v61;
      if (!v64) {
        goto LABEL_382;
      }
      unint64_t v343 = *(void *)(v57[3] + 8 * (v64 - 1));
      if (v343 < 0x10) {
        goto LABEL_382;
      }
      switch(v342)
      {
        case 1:
          if (v64 == 2)
          {
            uint64_t v1498 = *v59;
            if (v1498)
            {
              uint64_t v1499 = 0;
              uint64_t v1500 = 0;
              uint64_t v1501 = 0;
              uint64_t v1502 = *(void *)(v58 + 152);
              uint64_t v1503 = v239[19];
              uint64_t v1504 = v57[19];
              unint64_t v1505 = v59[1];
              v1506 = *(uint64_t **)(v58 + 24);
              uint64_t v1507 = *v1506;
              uint64_t v1508 = v1506[1];
              v1509 = (uint64_t *)v239[3];
              uint64_t v1511 = *v1509;
              uint64_t v1510 = v1509[1];
              if (v1505 <= 1) {
                uint64_t v1512 = 1;
              }
              else {
                uint64_t v1512 = v59[1];
              }
              uint64_t v1513 = v1507 - v1508 * v1505;
              uint64_t v1514 = v1511 - v1510 * v240[1];
              do
              {
                if (v1505)
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v1503 + v1500;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1517 = 0;
                      unsigned int v1518 = *(unsigned __int8 *)(v1502 + v1501);
                      unsigned int v1519 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1504 + v1517) = v1518 >= *(unsigned __int8 *)(v1516 + v1517);
                        --v1519;
                        ++v1517;
                      }
                      while (v1519 > 1);
                    }
                    v1501 += v1508;
                    v1500 += v1510;
                    v1504 += (int)v343;
                    ++v1515;
                    v1516 += v1510;
                  }
                  while (v1515 != v1512);
                }
                v1501 += v1513;
                v1500 += v1514;
                ++v1499;
              }
              while (v1499 != v1498);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1046 = *v59;
            if (v1046)
            {
              uint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1049 = *(void *)(v58 + 152);
              uint64_t v1050 = v239[19];
              uint64_t v1051 = v57[19];
              uint64_t v1052 = **(void **)(v58 + 24);
              uint64_t v1053 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1054 = 0;
                  unsigned int v1055 = *(unsigned __int8 *)(v1049 + v1048);
                  unsigned int v1056 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1051 + v1054) = v1055 >= *(unsigned __int8 *)(v1050 + v1054);
                    --v1056;
                    ++v1054;
                  }
                  while (v1056 > 1);
                }
                v1048 += v1052;
                v1051 += (int)v343;
                ++v1047;
                v1050 += v1053;
              }
              while (v1047 != v1046);
            }
          }
          else
          {
            unint64_t v2002 = v57[6];
            if (v2002)
            {
              unint64_t v2037 = 0;
              uint64_t v1927 = v239[19];
              uint64_t v1953 = *(void *)(v58 + 152);
              uint64_t v1520 = v57[19];
              do
              {
                uint64_t v1521 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1522 = *(void *)(v58 + 24);
                  int v1523 = v2037;
                  do
                  {
                    ldiv_t v1524 = ldiv(v1523, v59[v61]);
                    int v1523 = v1524.quot;
                    v1521 += *(void *)(v1522 + 8 * v61--) * v1524.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1525 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1526) = 0;
                }
                else
                {
                  uint64_t v1526 = 0;
                  uint64_t v1527 = v239[3];
                  int v1528 = v2037;
                  do
                  {
                    ldiv_t v1529 = ldiv(v1528, v240[v1525]);
                    int v1528 = v1529.quot;
                    v1526 += *(void *)(v1527 + 8 * v1525--) * v1529.rem;
                  }
                  while (v1525 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1530 = 0;
                  unsigned int v1531 = *(unsigned __int8 *)(v1953 + (int)v1521);
                  unsigned int v1532 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1520 + v1530) = v1531 >= *(unsigned __int8 *)(v1927 + (int)v1526 + v1530);
                    --v1532;
                    ++v1530;
                  }
                  while (v1532 > 1);
                }
                v1520 += (int)v343;
                v2037 += (int)v343;
              }
              while (v2037 < v2002);
            }
          }
          break;
        case 2:
          if (v64 == 2)
          {
            uint64_t v1533 = *v59;
            if (v1533)
            {
              uint64_t v1534 = 0;
              uint64_t v1535 = 0;
              uint64_t v1536 = 0;
              uint64_t v1537 = *(void *)(v58 + 152);
              uint64_t v1538 = v239[19];
              uint64_t v1539 = v57[19];
              unint64_t v1540 = v59[1];
              v1541 = *(uint64_t **)(v58 + 24);
              uint64_t v1542 = *v1541;
              uint64_t v1543 = v1541[1];
              v1544 = (uint64_t *)v239[3];
              uint64_t v1546 = *v1544;
              uint64_t v1545 = v1544[1];
              if (v1540 <= 1) {
                uint64_t v1547 = 1;
              }
              else {
                uint64_t v1547 = v59[1];
              }
              uint64_t v1548 = v1542 - v1543 * v1540;
              uint64_t v1549 = v1546 - v1545 * v240[1];
              do
              {
                if (v1540)
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v1537 + v1536;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1552 = 0;
                      unsigned int v1553 = *(unsigned __int8 *)(v1538 + v1535);
                      unsigned int v1554 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1539 + v1552) = *(unsigned __int8 *)(v1551 + v1552) >= v1553;
                        --v1554;
                        ++v1552;
                      }
                      while (v1554 > 1);
                    }
                    v1536 += v1543;
                    v1535 += v1545;
                    v1539 += (int)v343;
                    ++v1550;
                    v1551 += v1543;
                  }
                  while (v1550 != v1547);
                }
                v1536 += v1548;
                v1535 += v1549;
                ++v1534;
              }
              while (v1534 != v1533);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1057 = *v59;
            if (v1057)
            {
              uint64_t v1058 = 0;
              uint64_t v1059 = 0;
              uint64_t v1060 = *(void *)(v58 + 152);
              uint64_t v1061 = v239[19];
              uint64_t v1062 = v57[19];
              uint64_t v1063 = **(void **)(v58 + 24);
              uint64_t v1064 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1065 = 0;
                  unsigned int v1066 = *(unsigned __int8 *)(v1061 + v1059);
                  unsigned int v1067 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1062 + v1065) = *(unsigned __int8 *)(v1060 + v1065) >= v1066;
                    --v1067;
                    ++v1065;
                  }
                  while (v1067 > 1);
                }
                v1059 += v1064;
                v1062 += (int)v343;
                ++v1058;
                v1060 += v1063;
              }
              while (v1058 != v1057);
            }
          }
          else
          {
            unint64_t v2003 = v57[6];
            if (v2003)
            {
              unint64_t v2038 = 0;
              uint64_t v1928 = v239[19];
              uint64_t v1954 = *(void *)(v58 + 152);
              uint64_t v1555 = v57[19];
              do
              {
                uint64_t v1556 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1557 = *(void *)(v58 + 24);
                  int v1558 = v2038;
                  do
                  {
                    ldiv_t v1559 = ldiv(v1558, v59[v61]);
                    int v1558 = v1559.quot;
                    v1556 += *(void *)(v1557 + 8 * v61--) * v1559.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1560 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1561) = 0;
                }
                else
                {
                  uint64_t v1561 = 0;
                  uint64_t v1562 = v239[3];
                  int v1563 = v2038;
                  do
                  {
                    ldiv_t v1564 = ldiv(v1563, v240[v1560]);
                    int v1563 = v1564.quot;
                    v1561 += *(void *)(v1562 + 8 * v1560--) * v1564.rem;
                  }
                  while (v1560 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1565 = 0;
                  unsigned int v1566 = *(unsigned __int8 *)(v1928 + (int)v1561);
                  unsigned int v1567 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1555 + v1565) = *(unsigned __int8 *)(v1954 + (int)v1556 + v1565) >= v1566;
                    --v1567;
                    ++v1565;
                  }
                  while (v1567 > 1);
                }
                v1555 += (int)v343;
                v2038 += (int)v343;
              }
              while (v2038 < v2003);
            }
          }
          break;
        case 3:
          if (v64 == 2)
          {
            uint64_t v1216 = *v59;
            if (v1216)
            {
              uint64_t v1217 = 0;
              uint64_t v1218 = 0;
              uint64_t v1219 = 0;
              uint64_t v1220 = *(void *)(v58 + 152);
              uint64_t v1221 = v239[19];
              uint64_t v1222 = v57[19];
              unint64_t v1223 = v59[1];
              v1224 = *(uint64_t **)(v58 + 24);
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              v1227 = (uint64_t *)v239[3];
              uint64_t v1229 = *v1227;
              uint64_t v1228 = v1227[1];
              if (v1223 <= 1) {
                uint64_t v1230 = 1;
              }
              else {
                uint64_t v1230 = v59[1];
              }
              uint64_t v1231 = v1225 - v1226 * v1223;
              uint64_t v1232 = v1229 - v1228 * v240[1];
              do
              {
                if (v1223)
                {
                  uint64_t v1233 = 0;
                  uint64_t v1234 = v1221 + v1218;
                  uint64_t v1235 = v1220 + v1219;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1236 = 0;
                      unsigned int v1237 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1222 + v1236) = *(unsigned __int8 *)(v1235 + v1236) >= *(unsigned __int8 *)(v1234 + v1236);
                        --v1237;
                        ++v1236;
                      }
                      while (v1237 > 1);
                    }
                    v1219 += v1226;
                    v1218 += v1228;
                    v1222 += (int)v343;
                    ++v1233;
                    v1234 += v1228;
                    v1235 += v1226;
                  }
                  while (v1233 != v1230);
                }
                v1219 += v1231;
                v1218 += v1232;
                ++v1217;
              }
              while (v1217 != v1216);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v344 = *v59;
            if (v344)
            {
              uint64_t v345 = 0;
              uint64_t v346 = *(void *)(v58 + 152);
              uint64_t v347 = v239[19];
              uint64_t v348 = v57[19];
              uint64_t v349 = **(void **)(v58 + 24);
              uint64_t v350 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v351 = 0;
                  unsigned int v352 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v348 + v351) = *(unsigned __int8 *)(v346 + v351) >= *(unsigned __int8 *)(v347 + v351);
                    --v352;
                    ++v351;
                  }
                  while (v352 > 1);
                }
                v348 += (int)v343;
                ++v345;
                v347 += v350;
                v346 += v349;
              }
              while (v345 != v344);
            }
          }
          else
          {
            unint64_t v1994 = v57[6];
            if (v1994)
            {
              unint64_t v2029 = 0;
              uint64_t v1919 = v239[19];
              uint64_t v1945 = *(void *)(v58 + 152);
              uint64_t v1238 = v57[19];
              do
              {
                uint64_t v1239 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1240 = *(void *)(v58 + 24);
                  int v1241 = v2029;
                  do
                  {
                    ldiv_t v1242 = ldiv(v1241, v59[v61]);
                    int v1241 = v1242.quot;
                    v1239 += *(void *)(v1240 + 8 * v61--) * v1242.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1243 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1244) = 0;
                }
                else
                {
                  uint64_t v1244 = 0;
                  uint64_t v1245 = v239[3];
                  int v1246 = v2029;
                  do
                  {
                    ldiv_t v1247 = ldiv(v1246, v240[v1243]);
                    int v1246 = v1247.quot;
                    v1244 += *(void *)(v1245 + 8 * v1243--) * v1247.rem;
                  }
                  while (v1243 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1248 = 0;
                  unsigned int v1249 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1238 + v1248) = *(unsigned __int8 *)(v1945 + (int)v1239 + v1248) >= *(unsigned __int8 *)(v1919 + (int)v1244 + v1248);
                    --v1249;
                    ++v1248;
                  }
                  while (v1249 > 1);
                }
                v1238 += (int)v343;
                v2029 += (int)v343;
              }
              while (v2029 < v1994);
            }
          }
          break;
        default:
LABEL_382:
          switch(v339)
          {
            case 1uLL:
              uint64_t v353 = v57[6];
              if (v353)
              {
                v354 = *(unsigned __int8 **)(v58 + 152);
                v355 = (unsigned __int8 *)v239[19];
                v356 = (BOOL *)v57[19];
                uint64_t v357 = **(void **)(v58 + 24);
                uint64_t v358 = *(void *)v239[3];
                do
                {
                  *v356++ = *v354 >= *v355;
                  v355 += v358;
                  v354 += v357;
                  --v353;
                }
                while (v353);
              }
              break;
            case 2uLL:
              uint64_t v557 = *v59;
              if (v557)
              {
                uint64_t v558 = 0;
                uint64_t v559 = 0;
                uint64_t v560 = 0;
                uint64_t v561 = 0;
                uint64_t v562 = *(void *)(v58 + 152);
                uint64_t v563 = v239[19];
                uint64_t v564 = v57[19];
                unint64_t v565 = v59[1];
                v566 = *(uint64_t **)(v58 + 24);
                uint64_t v567 = *v566;
                uint64_t v568 = v566[1];
                v569 = (uint64_t *)v239[3];
                uint64_t v570 = *v569;
                uint64_t v571 = v569[1];
                uint64_t v572 = v570 - v571 * v240[1];
                if (v565 <= 1) {
                  uint64_t v573 = 1;
                }
                else {
                  uint64_t v573 = v59[1];
                }
                uint64_t v574 = v567 - v568 * v565;
                do
                {
                  if (v565)
                  {
                    uint64_t v575 = v559 + v573;
                    v576 = (BOOL *)(v564 + v559);
                    uint64_t v577 = v573;
                    do
                    {
                      *v576++ = *(unsigned __int8 *)(v562 + v561) >= *(unsigned __int8 *)(v563 + v560);
                      v561 += v568;
                      v560 += v571;
                      --v577;
                    }
                    while (v577);
                    uint64_t v559 = v575;
                  }
                  v561 += v574;
                  v560 += v572;
                  ++v558;
                }
                while (v558 != v557);
              }
              break;
            case 3uLL:
              uint64_t v578 = *v59;
              if (v578)
              {
                uint64_t v579 = 0;
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = *(void *)(v58 + 152);
                uint64_t v584 = v239[19];
                uint64_t v585 = v57[19];
                unint64_t v586 = v59[1];
                v587 = *(void **)(v58 + 24);
                uint64_t v588 = v587[1];
                v589 = (void *)v239[3];
                uint64_t v590 = v589[1];
                uint64_t v591 = *v589 - v590 * v240[1];
                if (v586 <= 1) {
                  uint64_t v592 = 1;
                }
                else {
                  uint64_t v592 = v59[1];
                }
                unint64_t v593 = *v587 - v588 * v586;
                do
                {
                  if (v586)
                  {
                    uint64_t v594 = 0;
                    unint64_t v595 = v59[2];
                    uint64_t v596 = v587[2];
                    uint64_t v597 = v589[2];
                    if (v595 <= 1) {
                      uint64_t v598 = 1;
                    }
                    else {
                      uint64_t v598 = v59[2];
                    }
                    uint64_t v599 = v590 - v597 * v240[2];
                    do
                    {
                      uint64_t v600 = v598;
                      if (v595)
                      {
                        do
                        {
                          *(unsigned char *)(v585 + v580++) = *(unsigned __int8 *)(v583 + v582) >= *(unsigned __int8 *)(v584 + v581);
                          v582 += v596;
                          v581 += v597;
                          --v600;
                        }
                        while (v600);
                      }
                      v582 += v588 - v596 * v595;
                      v581 += v599;
                      ++v594;
                    }
                    while (v594 != v592);
                  }
                  v582 += v593;
                  v581 += v591;
                  ++v579;
                }
                while (v579 != v578);
              }
              break;
            case 4uLL:
              uint64_t v2071 = *v59;
              if (v2071)
              {
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = *(void *)(v58 + 152);
                uint64_t v606 = v239[19];
                uint64_t v607 = v57[19];
                unint64_t v608 = v59[1];
                v609 = *(void **)(v58 + 24);
                v610 = (void *)v239[3];
                uint64_t v1939 = v610[1];
                uint64_t v1968 = v609[1];
                uint64_t v2017 = *v610 - v1939 * v240[1];
                int v2057 = v59[1];
                if (v608 <= 1) {
                  uint64_t v611 = 1;
                }
                else {
                  uint64_t v611 = v59[1];
                }
                unint64_t v1982 = *v609 - v609[1] * v608;
                do
                {
                  if (v2057)
                  {
                    uint64_t v612 = 0;
                    unint64_t v613 = v59[2];
                    uint64_t v614 = v609[2];
                    uint64_t v615 = v610[2];
                    if (v613 <= 1) {
                      uint64_t v616 = 1;
                    }
                    else {
                      uint64_t v616 = v59[2];
                    }
                    uint64_t v617 = v1939 - v615 * v240[2];
                    do
                    {
                      if (v613)
                      {
                        uint64_t v618 = 0;
                        unint64_t v619 = v59[3];
                        uint64_t v620 = v609[3];
                        uint64_t v621 = v610[3];
                        if (v619 <= 1) {
                          uint64_t v622 = 1;
                        }
                        else {
                          uint64_t v622 = v59[3];
                        }
                        uint64_t v623 = v615 - v621 * v240[3];
                        do
                        {
                          uint64_t v624 = v622;
                          if (v619)
                          {
                            do
                            {
                              *(unsigned char *)(v607 + v602++) = *(unsigned __int8 *)(v605 + v604) >= *(unsigned __int8 *)(v606 + v603);
                              v604 += v620;
                              v603 += v621;
                              --v624;
                            }
                            while (v624);
                          }
                          v604 += v614 - v620 * v619;
                          v603 += v623;
                          ++v618;
                        }
                        while (v618 != v616);
                      }
                      v604 += v1968 - v614 * v613;
                      v603 += v617;
                      ++v612;
                    }
                    while (v612 != v611);
                  }
                  v604 += v1982;
                  v603 += v2017;
                  ++v601;
                }
                while (v601 != v2071);
              }
              break;
            default:
              uint64_t v546 = v57[6];
              if (v546)
              {
                uint64_t v547 = 0;
                uint64_t v1981 = v239[19];
                uint64_t v2016 = *(void *)(v58 + 152);
                uint64_t v1967 = v57[19];
                do
                {
                  uint64_t v548 = 0;
                  if ((v61 & 0x80000000) == 0)
                  {
                    uint64_t v549 = *(void *)(v58 + 24);
                    int v550 = v547;
                    do
                    {
                      ldiv_t v551 = ldiv(v550, v59[v61]);
                      int v550 = v551.quot;
                      v548 += *(void *)(v549 + 8 * v61--) * v551.rem;
                    }
                    while (v61 != -1);
                  }
                  uint64_t v552 = v2050;
                  if ((v2050 & 0x80000000) != 0)
                  {
                    LODWORD(v553) = 0;
                  }
                  else
                  {
                    uint64_t v553 = 0;
                    uint64_t v554 = v239[3];
                    int v555 = v547;
                    do
                    {
                      ldiv_t v556 = ldiv(v555, v240[v552]);
                      int v555 = v556.quot;
                      v553 += *(void *)(v554 + 8 * v552--) * v556.rem;
                    }
                    while (v552 != -1);
                  }
                  *(unsigned char *)(v1967 + v547++) = *(unsigned __int8 *)(v2016 + (int)v548) >= *(unsigned __int8 *)(v1981 + (int)v553);
                  uint64_t v61 = v2064;
                }
                while (v547 != v546);
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v12)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          unsigned int v11 = **(_DWORD **)(*a2 + 152);
LABEL_13:
          BOOL v8 = v10 >= v11;
          goto LABEL_26;
        case 1:
          int v95 = *(_DWORD *)(*a2 + 160);
          if (v95 >= 1)
          {
            unsigned int v96 = **(_DWORD **)(*a1 + 152);
            v97 = *(BOOL **)(*(void *)a3 + 152);
            v98 = *(unsigned int **)(*a2 + 152);
            unsigned int v99 = v95 + 1;
            do
            {
              unsigned int v100 = *v98++;
              *v97++ = v96 >= v100;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 2:
          int v101 = *(_DWORD *)(*a1 + 160);
          if (v101 >= 1)
          {
            unsigned int v102 = **(_DWORD **)(*a2 + 152);
            v103 = *(BOOL **)(*(void *)a3 + 152);
            v104 = *(unsigned int **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              unsigned int v106 = *v104++;
              *v103++ = v106 >= v102;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        case 3:
          int v107 = *(_DWORD *)(*(void *)a3 + 48);
          if (v107 >= 1)
          {
            v108 = *(BOOL **)(*(void *)a3 + 152);
            v109 = *(unsigned int **)(*a2 + 152);
            v110 = *(unsigned int **)(*a1 + 152);
            unsigned int v111 = v107 + 1;
            do
            {
              unsigned int v113 = *v110++;
              unsigned int v112 = v113;
              unsigned int v114 = *v109++;
              *v108++ = v112 >= v114;
              --v111;
            }
            while (v111 > 1);
          }
          return;
        default:
          v86 = *(void **)a3;
          uint64_t v87 = *a1;
          v88 = *(int **)*a1;
          uint64_t v89 = (*(void *)(*a1 + 8) - (void)v88) >> 2;
          uint64_t v90 = (v89 - 1);
          if ((int)v90 >= -1) {
            int v91 = -1;
          }
          else {
            int v91 = v89 - 1;
          }
          int v92 = v91 + 1;
          int v93 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v94) != *(void *)(v86[3] + 8 * v94)) {
          goto LABEL_196;
        }
      }
      int v93 = v92;
LABEL_196:
      v247 = (void *)*a2;
      v248 = *(int **)*a2;
      uint64_t v249 = (v247[1] - (void)v248) >> 2;
      uint64_t v250 = (v249 - 1);
      if ((int)v250 >= -1) {
        int v251 = -1;
      }
      else {
        int v251 = v249 - 1;
      }
      int v252 = v251 + 1;
      int v253 = v249 + 1;
      while (1)
      {
        unsigned int v254 = v253 - 2;
        if (v253 - 2 < 0) {
          break;
        }
        --v253;
        if (*(void *)(v247[3] + 8 * v254) != *(void *)(v86[3] + 8 * v254)) {
          goto LABEL_246;
        }
      }
      int v253 = v252;
LABEL_246:
      int v291 = v89 + 1;
      while (1)
      {
        unsigned int v292 = v291 - 2;
        if (v291 - 2 < 0) {
          break;
        }
        --v291;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v292)) {
          goto LABEL_281;
        }
      }
      int v291 = v92;
LABEL_281:
      int v305 = v249 + 1;
      while (1)
      {
        unsigned int v306 = v305 - 2;
        if (v305 - 2 < 0) {
          break;
        }
        --v305;
        if (*(void *)(v247[3] + 8 * v306)) {
          goto LABEL_388;
        }
      }
      int v305 = v252;
LABEL_388:
      unint64_t v359 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v253) {
        int v360 = v253;
      }
      else {
        int v360 = v93;
      }
      if (v93 <= v305) {
        int v93 = v305;
      }
      if (v291 > v253) {
        int v253 = v291;
      }
      if (v359 > v253)
      {
        int v361 = 1;
      }
      else
      {
        int v253 = (uint64_t)(v86[1] - *v86) >> 2;
        int v361 = 4;
      }
      if (v359 > v93)
      {
        int v362 = 2;
      }
      else
      {
        int v93 = v253;
        int v362 = v361;
      }
      if (v359 > v360)
      {
        int v93 = v360;
        int v362 = 3;
      }
      uint64_t v2051 = v250;
      uint64_t v2065 = v90;
      if (!v93) {
        goto LABEL_417;
      }
      unint64_t v363 = *(void *)(v86[3] + 8 * (v93 - 1));
      if (v363 < 0x10) {
        goto LABEL_417;
      }
      switch(v362)
      {
        case 1:
          if (v93 == 2)
          {
            uint64_t v1568 = *v88;
            if (v1568)
            {
              uint64_t v1569 = 0;
              uint64_t v1570 = 0;
              uint64_t v1571 = 0;
              uint64_t v1572 = *(void *)(v87 + 152);
              uint64_t v1573 = v247[19];
              uint64_t v1574 = v86[19];
              unint64_t v1575 = v88[1];
              v1576 = *(uint64_t **)(v87 + 24);
              uint64_t v1577 = *v1576;
              uint64_t v1578 = v1576[1];
              v1579 = (uint64_t *)v247[3];
              uint64_t v1581 = *v1579;
              uint64_t v1580 = v1579[1];
              if (v1575 <= 1) {
                uint64_t v1582 = 1;
              }
              else {
                uint64_t v1582 = v88[1];
              }
              uint64_t v1583 = v1577 - v1578 * v1575;
              uint64_t v1584 = v1581 - v1580 * v248[1];
              do
              {
                if (v1575)
                {
                  uint64_t v1585 = 0;
                  uint64_t v1586 = v1573 + 4 * v1570;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1587 = 0;
                      unsigned int v1588 = *(_DWORD *)(v1572 + 4 * v1571);
                      unsigned int v1589 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1574 + v1587) = v1588 >= *(_DWORD *)(v1586 + 4 * v1587);
                        --v1589;
                        ++v1587;
                      }
                      while (v1589 > 1);
                    }
                    v1571 += v1578;
                    v1570 += v1580;
                    v1574 += (int)v363;
                    ++v1585;
                    v1586 += 4 * v1580;
                  }
                  while (v1585 != v1582);
                }
                v1571 += v1583;
                v1570 += v1584;
                ++v1569;
              }
              while (v1569 != v1568);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1068 = *v88;
            if (v1068)
            {
              uint64_t v1069 = 0;
              uint64_t v1070 = 0;
              uint64_t v1071 = *(void *)(v87 + 152);
              uint64_t v1072 = v247[19];
              uint64_t v1073 = v86[19];
              uint64_t v1074 = **(void **)(v87 + 24);
              uint64_t v1075 = 4 * *(void *)v247[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1076 = 0;
                  unsigned int v1077 = *(_DWORD *)(v1071 + 4 * v1070);
                  unsigned int v1078 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1073 + v1076) = v1077 >= *(_DWORD *)(v1072 + 4 * v1076);
                    --v1078;
                    ++v1076;
                  }
                  while (v1078 > 1);
                }
                v1070 += v1074;
                v1073 += (int)v363;
                ++v1069;
                v1072 += v1075;
              }
              while (v1069 != v1068);
            }
          }
          else
          {
            unint64_t v2004 = v86[6];
            if (v2004)
            {
              unint64_t v2039 = 0;
              uint64_t v1929 = v247[19];
              uint64_t v1955 = *(void *)(v87 + 152);
              uint64_t v1590 = v86[19];
              do
              {
                uint64_t v1591 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1592 = *(void *)(v87 + 24);
                  int v1593 = v2039;
                  do
                  {
                    ldiv_t v1594 = ldiv(v1593, v88[v90]);
                    int v1593 = v1594.quot;
                    v1591 += *(void *)(v1592 + 8 * v90--) * v1594.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1595 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1596) = 0;
                }
                else
                {
                  uint64_t v1596 = 0;
                  uint64_t v1597 = v247[3];
                  int v1598 = v2039;
                  do
                  {
                    ldiv_t v1599 = ldiv(v1598, v248[v1595]);
                    int v1598 = v1599.quot;
                    v1596 += *(void *)(v1597 + 8 * v1595--) * v1599.rem;
                  }
                  while (v1595 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1600 = 0;
                  unsigned int v1601 = *(_DWORD *)(v1955 + 4 * (int)v1591);
                  unsigned int v1602 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1590 + v1600) = v1601 >= *(_DWORD *)(v1929 + 4 * (int)v1596 + 4 * v1600);
                    --v1602;
                    ++v1600;
                  }
                  while (v1602 > 1);
                }
                v1590 += (int)v363;
                v2039 += (int)v363;
              }
              while (v2039 < v2004);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            uint64_t v1603 = *v88;
            if (v1603)
            {
              uint64_t v1604 = 0;
              uint64_t v1605 = 0;
              uint64_t v1606 = 0;
              uint64_t v1607 = *(void *)(v87 + 152);
              uint64_t v1608 = v247[19];
              uint64_t v1609 = v86[19];
              unint64_t v1610 = v88[1];
              v1611 = *(uint64_t **)(v87 + 24);
              uint64_t v1612 = *v1611;
              uint64_t v1613 = v1611[1];
              v1614 = (uint64_t *)v247[3];
              uint64_t v1616 = *v1614;
              uint64_t v1615 = v1614[1];
              if (v1610 <= 1) {
                uint64_t v1617 = 1;
              }
              else {
                uint64_t v1617 = v88[1];
              }
              uint64_t v1618 = v1612 - v1613 * v1610;
              uint64_t v1619 = v1616 - v1615 * v248[1];
              do
              {
                if (v1610)
                {
                  uint64_t v1620 = 0;
                  uint64_t v1621 = v1607 + 4 * v1606;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1622 = 0;
                      unsigned int v1623 = *(_DWORD *)(v1608 + 4 * v1605);
                      unsigned int v1624 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1609 + v1622) = *(_DWORD *)(v1621 + 4 * v1622) >= v1623;
                        --v1624;
                        ++v1622;
                      }
                      while (v1624 > 1);
                    }
                    v1606 += v1613;
                    v1605 += v1615;
                    v1609 += (int)v363;
                    ++v1620;
                    v1621 += 4 * v1613;
                  }
                  while (v1620 != v1617);
                }
                v1606 += v1618;
                v1605 += v1619;
                ++v1604;
              }
              while (v1604 != v1603);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1079 = *v88;
            if (v1079)
            {
              uint64_t v1080 = 0;
              uint64_t v1081 = 0;
              uint64_t v1082 = *(void *)(v87 + 152);
              uint64_t v1083 = v247[19];
              uint64_t v1084 = v86[19];
              uint64_t v1085 = *(void *)v247[3];
              uint64_t v1086 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1087 = 0;
                  unsigned int v1088 = *(_DWORD *)(v1083 + 4 * v1081);
                  unsigned int v1089 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1084 + v1087) = *(_DWORD *)(v1082 + 4 * v1087) >= v1088;
                    --v1089;
                    ++v1087;
                  }
                  while (v1089 > 1);
                }
                v1081 += v1085;
                v1084 += (int)v363;
                ++v1080;
                v1082 += v1086;
              }
              while (v1080 != v1079);
            }
          }
          else
          {
            unint64_t v2005 = v86[6];
            if (v2005)
            {
              unint64_t v2040 = 0;
              uint64_t v1930 = v247[19];
              uint64_t v1956 = *(void *)(v87 + 152);
              uint64_t v1625 = v86[19];
              do
              {
                uint64_t v1626 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1627 = *(void *)(v87 + 24);
                  int v1628 = v2040;
                  do
                  {
                    ldiv_t v1629 = ldiv(v1628, v88[v90]);
                    int v1628 = v1629.quot;
                    v1626 += *(void *)(v1627 + 8 * v90--) * v1629.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1630 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1631) = 0;
                }
                else
                {
                  uint64_t v1631 = 0;
                  uint64_t v1632 = v247[3];
                  int v1633 = v2040;
                  do
                  {
                    ldiv_t v1634 = ldiv(v1633, v248[v1630]);
                    int v1633 = v1634.quot;
                    v1631 += *(void *)(v1632 + 8 * v1630--) * v1634.rem;
                  }
                  while (v1630 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1635 = 0;
                  unsigned int v1636 = *(_DWORD *)(v1930 + 4 * (int)v1631);
                  unsigned int v1637 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1625 + v1635) = *(_DWORD *)(v1956 + 4 * (int)v1626 + 4 * v1635) >= v1636;
                    --v1637;
                    ++v1635;
                  }
                  while (v1637 > 1);
                }
                v1625 += (int)v363;
                v2040 += (int)v363;
              }
              while (v2040 < v2005);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            uint64_t v1250 = *v88;
            if (v1250)
            {
              uint64_t v1251 = 0;
              uint64_t v1252 = 0;
              uint64_t v1253 = 0;
              uint64_t v1254 = *(void *)(v87 + 152);
              uint64_t v1255 = v247[19];
              uint64_t v1256 = v86[19];
              unint64_t v1257 = v88[1];
              v1258 = *(uint64_t **)(v87 + 24);
              uint64_t v1259 = *v1258;
              uint64_t v1260 = v1258[1];
              v1261 = (uint64_t *)v247[3];
              uint64_t v1263 = *v1261;
              uint64_t v1262 = v1261[1];
              if (v1257 <= 1) {
                uint64_t v1264 = 1;
              }
              else {
                uint64_t v1264 = v88[1];
              }
              uint64_t v1265 = v1259 - v1260 * v1257;
              uint64_t v1266 = v1263 - v1262 * v248[1];
              do
              {
                if (v1257)
                {
                  uint64_t v1267 = 0;
                  uint64_t v1268 = v1255 + 4 * v1252;
                  uint64_t v1269 = v1254 + 4 * v1253;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1270 = 0;
                      unsigned int v1271 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1256 + v1270) = *(_DWORD *)(v1269 + 4 * v1270) >= *(_DWORD *)(v1268 + 4 * v1270);
                        --v1271;
                        ++v1270;
                      }
                      while (v1271 > 1);
                    }
                    v1253 += v1260;
                    v1252 += v1262;
                    v1256 += (int)v363;
                    ++v1267;
                    v1268 += 4 * v1262;
                    v1269 += 4 * v1260;
                  }
                  while (v1267 != v1264);
                }
                v1253 += v1265;
                v1252 += v1266;
                ++v1251;
              }
              while (v1251 != v1250);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v364 = *v88;
            if (v364)
            {
              uint64_t v365 = 0;
              uint64_t v366 = *(void *)(v87 + 152);
              uint64_t v367 = v247[19];
              uint64_t v368 = v86[19];
              uint64_t v369 = 4 * *(void *)v247[3];
              uint64_t v370 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v371 = 0;
                  unsigned int v372 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v368 + v371) = *(_DWORD *)(v366 + 4 * v371) >= *(_DWORD *)(v367 + 4 * v371);
                    --v372;
                    ++v371;
                  }
                  while (v372 > 1);
                }
                v368 += (int)v363;
                ++v365;
                v367 += v369;
                v366 += v370;
              }
              while (v365 != v364);
            }
          }
          else
          {
            unint64_t v1995 = v86[6];
            if (v1995)
            {
              unint64_t v2030 = 0;
              uint64_t v1920 = v247[19];
              uint64_t v1946 = *(void *)(v87 + 152);
              uint64_t v1272 = v86[19];
              do
              {
                uint64_t v1273 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1274 = *(void *)(v87 + 24);
                  int v1275 = v2030;
                  do
                  {
                    ldiv_t v1276 = ldiv(v1275, v88[v90]);
                    int v1275 = v1276.quot;
                    v1273 += *(void *)(v1274 + 8 * v90--) * v1276.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1277 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1278) = 0;
                }
                else
                {
                  uint64_t v1278 = 0;
                  uint64_t v1279 = v247[3];
                  int v1280 = v2030;
                  do
                  {
                    ldiv_t v1281 = ldiv(v1280, v248[v1277]);
                    int v1280 = v1281.quot;
                    v1278 += *(void *)(v1279 + 8 * v1277--) * v1281.rem;
                  }
                  while (v1277 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1282 = 0;
                  unsigned int v1283 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1272 + v1282) = *(_DWORD *)(v1946 + 4 * (int)v1273 + 4 * v1282) >= *(_DWORD *)(v1920 + 4 * (int)v1278 + 4 * v1282);
                    --v1283;
                    ++v1282;
                  }
                  while (v1283 > 1);
                }
                v1272 += (int)v363;
                v2030 += (int)v363;
              }
              while (v2030 < v1995);
            }
          }
          break;
        default:
LABEL_417:
          switch(v359)
          {
            case 1uLL:
              uint64_t v373 = v86[6];
              if (v373)
              {
                v374 = *(_DWORD **)(v87 + 152);
                v375 = (_DWORD *)v247[19];
                v376 = (BOOL *)v86[19];
                uint64_t v377 = 4 * *(void *)v247[3];
                uint64_t v378 = 4 * **(void **)(v87 + 24);
                do
                {
                  *v376++ = *v374 >= *v375;
                  v375 = (_DWORD *)((char *)v375 + v377);
                  v374 = (_DWORD *)((char *)v374 + v378);
                  --v373;
                }
                while (v373);
              }
              break;
            case 2uLL:
              uint64_t v636 = *v88;
              if (v636)
              {
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = *(void *)(v87 + 152);
                uint64_t v642 = v247[19];
                uint64_t v643 = v86[19];
                unint64_t v644 = v88[1];
                v645 = *(uint64_t **)(v87 + 24);
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                v648 = (uint64_t *)v247[3];
                uint64_t v649 = *v648;
                uint64_t v650 = v648[1];
                uint64_t v651 = v649 - v650 * v248[1];
                if (v644 <= 1) {
                  uint64_t v652 = 1;
                }
                else {
                  uint64_t v652 = v88[1];
                }
                uint64_t v653 = v646 - v647 * v644;
                do
                {
                  if (v644)
                  {
                    uint64_t v654 = v638 + v652;
                    v655 = (BOOL *)(v643 + v638);
                    uint64_t v656 = v652;
                    do
                    {
                      *v655++ = *(_DWORD *)(v641 + 4 * v640) >= *(_DWORD *)(v642 + 4 * v639);
                      v640 += v647;
                      v639 += v650;
                      --v656;
                    }
                    while (v656);
                    uint64_t v638 = v654;
                  }
                  v640 += v653;
                  v639 += v651;
                  ++v637;
                }
                while (v637 != v636);
              }
              break;
            case 3uLL:
              uint64_t v657 = *v88;
              if (v657)
              {
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = 0;
                uint64_t v661 = 0;
                uint64_t v662 = *(void *)(v87 + 152);
                uint64_t v663 = v247[19];
                uint64_t v664 = v86[19];
                unint64_t v665 = v88[1];
                v666 = *(void **)(v87 + 24);
                uint64_t v667 = v666[1];
                v668 = (void *)v247[3];
                uint64_t v669 = v668[1];
                uint64_t v670 = *v668 - v669 * v248[1];
                if (v665 <= 1) {
                  uint64_t v671 = 1;
                }
                else {
                  uint64_t v671 = v88[1];
                }
                unint64_t v672 = *v666 - v667 * v665;
                do
                {
                  if (v665)
                  {
                    uint64_t v673 = 0;
                    unint64_t v674 = v88[2];
                    uint64_t v675 = v666[2];
                    uint64_t v676 = v668[2];
                    if (v674 <= 1) {
                      uint64_t v677 = 1;
                    }
                    else {
                      uint64_t v677 = v88[2];
                    }
                    uint64_t v678 = v669 - v676 * v248[2];
                    do
                    {
                      uint64_t v679 = v677;
                      if (v674)
                      {
                        do
                        {
                          *(unsigned char *)(v664 + v659++) = *(_DWORD *)(v662 + 4 * v661) >= *(_DWORD *)(v663 + 4 * v660);
                          v661 += v675;
                          v660 += v676;
                          --v679;
                        }
                        while (v679);
                      }
                      v661 += v667 - v675 * v674;
                      v660 += v678;
                      ++v673;
                    }
                    while (v673 != v671);
                  }
                  v661 += v672;
                  v660 += v670;
                  ++v658;
                }
                while (v658 != v657);
              }
              break;
            case 4uLL:
              uint64_t v2072 = *v88;
              if (v2072)
              {
                uint64_t v680 = 0;
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = 0;
                uint64_t v684 = *(void *)(v87 + 152);
                uint64_t v685 = v247[19];
                uint64_t v686 = v86[19];
                unint64_t v687 = v88[1];
                v688 = *(void **)(v87 + 24);
                v689 = (void *)v247[3];
                uint64_t v1940 = v689[1];
                uint64_t v1970 = v688[1];
                uint64_t v2019 = *v689 - v1940 * v248[1];
                int v2058 = v88[1];
                if (v687 <= 1) {
                  uint64_t v690 = 1;
                }
                else {
                  uint64_t v690 = v88[1];
                }
                unint64_t v1984 = *v688 - v688[1] * v687;
                do
                {
                  if (v2058)
                  {
                    uint64_t v691 = 0;
                    unint64_t v692 = v88[2];
                    uint64_t v693 = v688[2];
                    uint64_t v694 = v689[2];
                    if (v692 <= 1) {
                      uint64_t v695 = 1;
                    }
                    else {
                      uint64_t v695 = v88[2];
                    }
                    uint64_t v696 = v1940 - v694 * v248[2];
                    do
                    {
                      if (v692)
                      {
                        uint64_t v697 = 0;
                        unint64_t v698 = v88[3];
                        uint64_t v699 = v688[3];
                        uint64_t v700 = v689[3];
                        if (v698 <= 1) {
                          uint64_t v701 = 1;
                        }
                        else {
                          uint64_t v701 = v88[3];
                        }
                        uint64_t v702 = v694 - v700 * v248[3];
                        do
                        {
                          uint64_t v703 = v701;
                          if (v698)
                          {
                            do
                            {
                              *(unsigned char *)(v686 + v681++) = *(_DWORD *)(v684 + 4 * v683) >= *(_DWORD *)(v685 + 4 * v682);
                              v683 += v699;
                              v682 += v700;
                              --v703;
                            }
                            while (v703);
                          }
                          v683 += v693 - v699 * v698;
                          v682 += v702;
                          ++v697;
                        }
                        while (v697 != v695);
                      }
                      v683 += v1970 - v693 * v692;
                      v682 += v696;
                      ++v691;
                    }
                    while (v691 != v690);
                  }
                  v683 += v1984;
                  v682 += v2019;
                  ++v680;
                }
                while (v680 != v2072);
              }
              break;
            default:
              uint64_t v625 = v86[6];
              if (v625)
              {
                uint64_t v626 = 0;
                uint64_t v1983 = v247[19];
                uint64_t v2018 = *(void *)(v87 + 152);
                uint64_t v1969 = v86[19];
                do
                {
                  uint64_t v627 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    uint64_t v628 = *(void *)(v87 + 24);
                    int v629 = v626;
                    do
                    {
                      ldiv_t v630 = ldiv(v629, v88[v90]);
                      int v629 = v630.quot;
                      v627 += *(void *)(v628 + 8 * v90--) * v630.rem;
                    }
                    while (v90 != -1);
                  }
                  uint64_t v631 = v2051;
                  if ((v2051 & 0x80000000) != 0)
                  {
                    LODWORD(v632) = 0;
                  }
                  else
                  {
                    uint64_t v632 = 0;
                    uint64_t v633 = v247[3];
                    int v634 = v626;
                    do
                    {
                      ldiv_t v635 = ldiv(v634, v248[v631]);
                      int v634 = v635.quot;
                      v632 += *(void *)(v633 + 8 * v631--) * v635.rem;
                    }
                    while (v631 != -1);
                  }
                  *(unsigned char *)(v1969 + v626++) = *(_DWORD *)(v2018 + 4 * (int)v627) >= *(_DWORD *)(v1983
                                                                                                 + 4 * (int)v632);
                  uint64_t v90 = v2065;
                }
                while (v626 != v625);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v13)
      {
        case 0:
          int v14 = **(char **)(*a1 + 152);
          int v15 = **(char **)(*a2 + 152);
          goto LABEL_18;
        case 1:
          int v124 = *(_DWORD *)(*a2 + 160);
          if (v124 >= 1)
          {
            int v125 = **(char **)(*a1 + 152);
            v126 = *(BOOL **)(*(void *)a3 + 152);
            v127 = *(char **)(*a2 + 152);
            unsigned int v128 = v124 + 1;
            do
            {
              int v129 = *v127++;
              *v126++ = v125 >= v129;
              --v128;
            }
            while (v128 > 1);
          }
          return;
        case 2:
          int v130 = *(_DWORD *)(*a1 + 160);
          if (v130 >= 1)
          {
            int v131 = **(char **)(*a2 + 152);
            v132 = *(BOOL **)(*(void *)a3 + 152);
            v133 = *(char **)(*a1 + 152);
            unsigned int v134 = v130 + 1;
            do
            {
              int v135 = *v133++;
              *v132++ = v135 >= v131;
              --v134;
            }
            while (v134 > 1);
          }
          return;
        case 3:
          int v136 = *(_DWORD *)(*(void *)a3 + 48);
          if (v136 >= 1)
          {
            v137 = *(BOOL **)(*(void *)a3 + 152);
            v138 = *(char **)(*a2 + 152);
            v139 = *(char **)(*a1 + 152);
            unsigned int v140 = v136 + 1;
            do
            {
              int v142 = *v139++;
              int v141 = v142;
              int v143 = *v138++;
              *v137++ = v141 >= v143;
              --v140;
            }
            while (v140 > 1);
          }
          return;
        default:
          v115 = *(void **)a3;
          uint64_t v116 = *a1;
          v117 = *(int **)*a1;
          uint64_t v118 = (*(void *)(*a1 + 8) - (void)v117) >> 2;
          uint64_t v119 = (v118 - 1);
          if ((int)v119 >= -1) {
            int v120 = -1;
          }
          else {
            int v120 = v118 - 1;
          }
          int v121 = v120 + 1;
          int v122 = v118 + 1;
          break;
      }
      while (1)
      {
        unsigned int v123 = v122 - 2;
        if (v122 - 2 < 0) {
          break;
        }
        --v122;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v123) != *(void *)(v115[3] + 8 * v123)) {
          goto LABEL_204;
        }
      }
      int v122 = v121;
LABEL_204:
      v255 = (void *)*a2;
      v256 = *(int **)*a2;
      uint64_t v257 = (v255[1] - (void)v256) >> 2;
      uint64_t v258 = (v257 - 1);
      if ((int)v258 >= -1) {
        int v259 = -1;
      }
      else {
        int v259 = v257 - 1;
      }
      int v260 = v259 + 1;
      int v261 = v257 + 1;
      while (1)
      {
        unsigned int v262 = v261 - 2;
        if (v261 - 2 < 0) {
          break;
        }
        --v261;
        if (*(void *)(v255[3] + 8 * v262) != *(void *)(v115[3] + 8 * v262)) {
          goto LABEL_251;
        }
      }
      int v261 = v260;
LABEL_251:
      int v293 = v118 + 1;
      while (1)
      {
        unsigned int v294 = v293 - 2;
        if (v293 - 2 < 0) {
          break;
        }
        --v293;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v294)) {
          goto LABEL_286;
        }
      }
      int v293 = v121;
LABEL_286:
      int v307 = v257 + 1;
      while (1)
      {
        unsigned int v308 = v307 - 2;
        if (v307 - 2 < 0) {
          break;
        }
        --v307;
        if (*(void *)(v255[3] + 8 * v308)) {
          goto LABEL_423;
        }
      }
      int v307 = v260;
LABEL_423:
      unint64_t v379 = (uint64_t)(v115[1] - *v115) >> 2;
      if (v122 <= v261) {
        int v380 = v261;
      }
      else {
        int v380 = v122;
      }
      if (v122 <= v307) {
        int v122 = v307;
      }
      if (v293 > v261) {
        int v261 = v293;
      }
      if (v379 > v261)
      {
        int v381 = 1;
      }
      else
      {
        int v261 = (uint64_t)(v115[1] - *v115) >> 2;
        int v381 = 4;
      }
      if (v379 > v122)
      {
        int v382 = 2;
      }
      else
      {
        int v122 = v261;
        int v382 = v381;
      }
      if (v379 > v380)
      {
        int v122 = v380;
        int v382 = 3;
      }
      uint64_t v2052 = v258;
      uint64_t v2066 = v119;
      if (!v122) {
        goto LABEL_452;
      }
      unint64_t v383 = *(void *)(v115[3] + 8 * (v122 - 1));
      if (v383 < 0x10) {
        goto LABEL_452;
      }
      switch(v382)
      {
        case 1:
          if (v122 == 2)
          {
            uint64_t v1638 = *v117;
            if (v1638)
            {
              uint64_t v1639 = 0;
              uint64_t v1640 = 0;
              uint64_t v1641 = 0;
              uint64_t v1642 = *(void *)(v116 + 152);
              uint64_t v1643 = v255[19];
              uint64_t v1644 = v115[19];
              unint64_t v1645 = v117[1];
              v1646 = *(uint64_t **)(v116 + 24);
              uint64_t v1647 = *v1646;
              uint64_t v1648 = v1646[1];
              v1649 = (uint64_t *)v255[3];
              uint64_t v1651 = *v1649;
              uint64_t v1650 = v1649[1];
              if (v1645 <= 1) {
                uint64_t v1652 = 1;
              }
              else {
                uint64_t v1652 = v117[1];
              }
              uint64_t v1653 = v1647 - v1648 * v1645;
              uint64_t v1654 = v1651 - v1650 * v256[1];
              do
              {
                if (v1645)
                {
                  uint64_t v1655 = 0;
                  uint64_t v1656 = v1643 + v1640;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1657 = 0;
                      int v1658 = *(char *)(v1642 + v1641);
                      unsigned int v1659 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1644 + v1657) = v1658 >= *(char *)(v1656 + v1657);
                        --v1659;
                        ++v1657;
                      }
                      while (v1659 > 1);
                    }
                    v1641 += v1648;
                    v1640 += v1650;
                    v1644 += (int)v383;
                    ++v1655;
                    v1656 += v1650;
                  }
                  while (v1655 != v1652);
                }
                v1641 += v1653;
                v1640 += v1654;
                ++v1639;
              }
              while (v1639 != v1638);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1090 = *v117;
            if (v1090)
            {
              uint64_t v1091 = 0;
              uint64_t v1092 = 0;
              uint64_t v1093 = *(void *)(v116 + 152);
              uint64_t v1094 = v255[19];
              uint64_t v1095 = v115[19];
              uint64_t v1096 = **(void **)(v116 + 24);
              uint64_t v1097 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1098 = 0;
                  int v1099 = *(char *)(v1093 + v1092);
                  unsigned int v1100 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1095 + v1098) = v1099 >= *(char *)(v1094 + v1098);
                    --v1100;
                    ++v1098;
                  }
                  while (v1100 > 1);
                }
                v1092 += v1096;
                v1095 += (int)v383;
                ++v1091;
                v1094 += v1097;
              }
              while (v1091 != v1090);
            }
          }
          else
          {
            unint64_t v2006 = v115[6];
            if (v2006)
            {
              unint64_t v2041 = 0;
              uint64_t v1931 = v255[19];
              uint64_t v1957 = *(void *)(v116 + 152);
              uint64_t v1660 = v115[19];
              do
              {
                uint64_t v1661 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1662 = *(void *)(v116 + 24);
                  int v1663 = v2041;
                  do
                  {
                    ldiv_t v1664 = ldiv(v1663, v117[v119]);
                    int v1663 = v1664.quot;
                    v1661 += *(void *)(v1662 + 8 * v119--) * v1664.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1665 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1666) = 0;
                }
                else
                {
                  uint64_t v1666 = 0;
                  uint64_t v1667 = v255[3];
                  int v1668 = v2041;
                  do
                  {
                    ldiv_t v1669 = ldiv(v1668, v256[v1665]);
                    int v1668 = v1669.quot;
                    v1666 += *(void *)(v1667 + 8 * v1665--) * v1669.rem;
                  }
                  while (v1665 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1670 = 0;
                  int v1671 = *(char *)(v1957 + (int)v1661);
                  unsigned int v1672 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1660 + v1670) = v1671 >= *(char *)(v1931 + (int)v1666 + v1670);
                    --v1672;
                    ++v1670;
                  }
                  while (v1672 > 1);
                }
                v1660 += (int)v383;
                v2041 += (int)v383;
              }
              while (v2041 < v2006);
            }
          }
          break;
        case 2:
          if (v122 == 2)
          {
            uint64_t v1673 = *v117;
            if (v1673)
            {
              uint64_t v1674 = 0;
              uint64_t v1675 = 0;
              uint64_t v1676 = 0;
              uint64_t v1677 = *(void *)(v116 + 152);
              uint64_t v1678 = v255[19];
              uint64_t v1679 = v115[19];
              unint64_t v1680 = v117[1];
              v1681 = *(uint64_t **)(v116 + 24);
              uint64_t v1682 = *v1681;
              uint64_t v1683 = v1681[1];
              v1684 = (uint64_t *)v255[3];
              uint64_t v1686 = *v1684;
              uint64_t v1685 = v1684[1];
              if (v1680 <= 1) {
                uint64_t v1687 = 1;
              }
              else {
                uint64_t v1687 = v117[1];
              }
              uint64_t v1688 = v1682 - v1683 * v1680;
              uint64_t v1689 = v1686 - v1685 * v256[1];
              do
              {
                if (v1680)
                {
                  uint64_t v1690 = 0;
                  uint64_t v1691 = v1677 + v1676;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1692 = 0;
                      int v1693 = *(char *)(v1678 + v1675);
                      unsigned int v1694 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1679 + v1692) = *(char *)(v1691 + v1692) >= v1693;
                        --v1694;
                        ++v1692;
                      }
                      while (v1694 > 1);
                    }
                    v1676 += v1683;
                    v1675 += v1685;
                    v1679 += (int)v383;
                    ++v1690;
                    v1691 += v1683;
                  }
                  while (v1690 != v1687);
                }
                v1676 += v1688;
                v1675 += v1689;
                ++v1674;
              }
              while (v1674 != v1673);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1101 = *v117;
            if (v1101)
            {
              uint64_t v1102 = 0;
              uint64_t v1103 = 0;
              uint64_t v1104 = *(void *)(v116 + 152);
              uint64_t v1105 = v255[19];
              uint64_t v1106 = v115[19];
              uint64_t v1107 = **(void **)(v116 + 24);
              uint64_t v1108 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1109 = 0;
                  int v1110 = *(char *)(v1105 + v1103);
                  unsigned int v1111 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1106 + v1109) = *(char *)(v1104 + v1109) >= v1110;
                    --v1111;
                    ++v1109;
                  }
                  while (v1111 > 1);
                }
                v1103 += v1108;
                v1106 += (int)v383;
                ++v1102;
                v1104 += v1107;
              }
              while (v1102 != v1101);
            }
          }
          else
          {
            unint64_t v2007 = v115[6];
            if (v2007)
            {
              unint64_t v2042 = 0;
              uint64_t v1932 = v255[19];
              uint64_t v1958 = *(void *)(v116 + 152);
              uint64_t v1695 = v115[19];
              do
              {
                uint64_t v1696 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1697 = *(void *)(v116 + 24);
                  int v1698 = v2042;
                  do
                  {
                    ldiv_t v1699 = ldiv(v1698, v117[v119]);
                    int v1698 = v1699.quot;
                    v1696 += *(void *)(v1697 + 8 * v119--) * v1699.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1700 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1701) = 0;
                }
                else
                {
                  uint64_t v1701 = 0;
                  uint64_t v1702 = v255[3];
                  int v1703 = v2042;
                  do
                  {
                    ldiv_t v1704 = ldiv(v1703, v256[v1700]);
                    int v1703 = v1704.quot;
                    v1701 += *(void *)(v1702 + 8 * v1700--) * v1704.rem;
                  }
                  while (v1700 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1705 = 0;
                  int v1706 = *(char *)(v1932 + (int)v1701);
                  unsigned int v1707 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1695 + v1705) = *(char *)(v1958 + (int)v1696 + v1705) >= v1706;
                    --v1707;
                    ++v1705;
                  }
                  while (v1707 > 1);
                }
                v1695 += (int)v383;
                v2042 += (int)v383;
              }
              while (v2042 < v2007);
            }
          }
          break;
        case 3:
          if (v122 == 2)
          {
            uint64_t v1284 = *v117;
            if (v1284)
            {
              uint64_t v1285 = 0;
              uint64_t v1286 = 0;
              uint64_t v1287 = 0;
              uint64_t v1288 = *(void *)(v116 + 152);
              uint64_t v1289 = v255[19];
              uint64_t v1290 = v115[19];
              unint64_t v1291 = v117[1];
              v1292 = *(uint64_t **)(v116 + 24);
              uint64_t v1293 = *v1292;
              uint64_t v1294 = v1292[1];
              v1295 = (uint64_t *)v255[3];
              uint64_t v1297 = *v1295;
              uint64_t v1296 = v1295[1];
              if (v1291 <= 1) {
                uint64_t v1298 = 1;
              }
              else {
                uint64_t v1298 = v117[1];
              }
              uint64_t v1299 = v1293 - v1294 * v1291;
              uint64_t v1300 = v1297 - v1296 * v256[1];
              do
              {
                if (v1291)
                {
                  uint64_t v1301 = 0;
                  uint64_t v1302 = v1289 + v1286;
                  uint64_t v1303 = v1288 + v1287;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1304 = 0;
                      unsigned int v1305 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1290 + v1304) = *(char *)(v1303 + v1304) >= *(char *)(v1302 + v1304);
                        --v1305;
                        ++v1304;
                      }
                      while (v1305 > 1);
                    }
                    v1287 += v1294;
                    v1286 += v1296;
                    v1290 += (int)v383;
                    ++v1301;
                    v1302 += v1296;
                    v1303 += v1294;
                  }
                  while (v1301 != v1298);
                }
                v1287 += v1299;
                v1286 += v1300;
                ++v1285;
              }
              while (v1285 != v1284);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v384 = *v117;
            if (v384)
            {
              uint64_t v385 = 0;
              uint64_t v386 = *(void *)(v116 + 152);
              uint64_t v387 = v255[19];
              uint64_t v388 = v115[19];
              uint64_t v389 = **(void **)(v116 + 24);
              uint64_t v390 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v391 = 0;
                  unsigned int v392 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v388 + v391) = *(char *)(v386 + v391) >= *(char *)(v387 + v391);
                    --v392;
                    ++v391;
                  }
                  while (v392 > 1);
                }
                v388 += (int)v383;
                ++v385;
                v387 += v390;
                v386 += v389;
              }
              while (v385 != v384);
            }
          }
          else
          {
            unint64_t v1996 = v115[6];
            if (v1996)
            {
              unint64_t v2031 = 0;
              uint64_t v1921 = v255[19];
              uint64_t v1947 = *(void *)(v116 + 152);
              uint64_t v1306 = v115[19];
              do
              {
                uint64_t v1307 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1308 = *(void *)(v116 + 24);
                  int v1309 = v2031;
                  do
                  {
                    ldiv_t v1310 = ldiv(v1309, v117[v119]);
                    int v1309 = v1310.quot;
                    v1307 += *(void *)(v1308 + 8 * v119--) * v1310.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1311 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1312) = 0;
                }
                else
                {
                  uint64_t v1312 = 0;
                  uint64_t v1313 = v255[3];
                  int v1314 = v2031;
                  do
                  {
                    ldiv_t v1315 = ldiv(v1314, v256[v1311]);
                    int v1314 = v1315.quot;
                    v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                  }
                  while (v1311 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1316 = 0;
                  unsigned int v1317 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1306 + v1316) = *(char *)(v1947 + (int)v1307 + v1316) >= *(char *)(v1921
                                                                                                 + (int)v1312
                                                                                                 + v1316);
                    --v1317;
                    ++v1316;
                  }
                  while (v1317 > 1);
                }
                v1306 += (int)v383;
                v2031 += (int)v383;
              }
              while (v2031 < v1996);
            }
          }
          break;
        default:
LABEL_452:
          switch(v379)
          {
            case 1uLL:
              uint64_t v393 = v115[6];
              if (v393)
              {
                v394 = *(char **)(v116 + 152);
                v395 = (char *)v255[19];
                v396 = (BOOL *)v115[19];
                uint64_t v397 = **(void **)(v116 + 24);
                uint64_t v398 = *(void *)v255[3];
                do
                {
                  *v396++ = *v394 >= *v395;
                  v395 += v398;
                  v394 += v397;
                  --v393;
                }
                while (v393);
              }
              break;
            case 2uLL:
              uint64_t v715 = *v117;
              if (v715)
              {
                uint64_t v716 = 0;
                uint64_t v717 = 0;
                uint64_t v718 = 0;
                uint64_t v719 = 0;
                uint64_t v720 = *(void *)(v116 + 152);
                uint64_t v721 = v255[19];
                uint64_t v722 = v115[19];
                unint64_t v723 = v117[1];
                v724 = *(uint64_t **)(v116 + 24);
                uint64_t v725 = *v724;
                uint64_t v726 = v724[1];
                v727 = (uint64_t *)v255[3];
                uint64_t v728 = *v727;
                uint64_t v729 = v727[1];
                uint64_t v730 = v728 - v729 * v256[1];
                if (v723 <= 1) {
                  uint64_t v731 = 1;
                }
                else {
                  uint64_t v731 = v117[1];
                }
                uint64_t v732 = v725 - v726 * v723;
                do
                {
                  if (v723)
                  {
                    uint64_t v733 = v717 + v731;
                    v734 = (BOOL *)(v722 + v717);
                    uint64_t v735 = v731;
                    do
                    {
                      *v734++ = *(char *)(v720 + v719) >= *(char *)(v721 + v718);
                      v719 += v726;
                      v718 += v729;
                      --v735;
                    }
                    while (v735);
                    uint64_t v717 = v733;
                  }
                  v719 += v732;
                  v718 += v730;
                  ++v716;
                }
                while (v716 != v715);
              }
              break;
            case 3uLL:
              uint64_t v736 = *v117;
              if (v736)
              {
                uint64_t v737 = 0;
                uint64_t v738 = 0;
                uint64_t v739 = 0;
                uint64_t v740 = 0;
                uint64_t v741 = *(void *)(v116 + 152);
                uint64_t v742 = v255[19];
                uint64_t v743 = v115[19];
                unint64_t v744 = v117[1];
                v745 = *(void **)(v116 + 24);
                uint64_t v746 = v745[1];
                v747 = (void *)v255[3];
                uint64_t v748 = v747[1];
                uint64_t v749 = *v747 - v748 * v256[1];
                if (v744 <= 1) {
                  uint64_t v750 = 1;
                }
                else {
                  uint64_t v750 = v117[1];
                }
                unint64_t v751 = *v745 - v746 * v744;
                do
                {
                  if (v744)
                  {
                    uint64_t v752 = 0;
                    unint64_t v753 = v117[2];
                    uint64_t v754 = v745[2];
                    uint64_t v755 = v747[2];
                    if (v753 <= 1) {
                      uint64_t v756 = 1;
                    }
                    else {
                      uint64_t v756 = v117[2];
                    }
                    uint64_t v757 = v748 - v755 * v256[2];
                    do
                    {
                      uint64_t v758 = v756;
                      if (v753)
                      {
                        do
                        {
                          *(unsigned char *)(v743 + v738++) = *(char *)(v741 + v740) >= *(char *)(v742 + v739);
                          v740 += v754;
                          v739 += v755;
                          --v758;
                        }
                        while (v758);
                      }
                      v740 += v746 - v754 * v753;
                      v739 += v757;
                      ++v752;
                    }
                    while (v752 != v750);
                  }
                  v740 += v751;
                  v739 += v749;
                  ++v737;
                }
                while (v737 != v736);
              }
              break;
            case 4uLL:
              uint64_t v2073 = *v117;
              if (v2073)
              {
                uint64_t v759 = 0;
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = 0;
                uint64_t v763 = *(void *)(v116 + 152);
                uint64_t v764 = v255[19];
                uint64_t v765 = v115[19];
                unint64_t v766 = v117[1];
                v767 = *(void **)(v116 + 24);
                v768 = (void *)v255[3];
                uint64_t v1941 = v768[1];
                uint64_t v1972 = v767[1];
                uint64_t v2021 = *v768 - v1941 * v256[1];
                int v2059 = v117[1];
                if (v766 <= 1) {
                  uint64_t v769 = 1;
                }
                else {
                  uint64_t v769 = v117[1];
                }
                unint64_t v1986 = *v767 - v767[1] * v766;
                do
                {
                  if (v2059)
                  {
                    uint64_t v770 = 0;
                    unint64_t v771 = v117[2];
                    uint64_t v772 = v767[2];
                    uint64_t v773 = v768[2];
                    if (v771 <= 1) {
                      uint64_t v774 = 1;
                    }
                    else {
                      uint64_t v774 = v117[2];
                    }
                    uint64_t v775 = v1941 - v773 * v256[2];
                    do
                    {
                      if (v771)
                      {
                        uint64_t v776 = 0;
                        unint64_t v777 = v117[3];
                        uint64_t v778 = v767[3];
                        uint64_t v779 = v768[3];
                        if (v777 <= 1) {
                          uint64_t v780 = 1;
                        }
                        else {
                          uint64_t v780 = v117[3];
                        }
                        uint64_t v781 = v773 - v779 * v256[3];
                        do
                        {
                          uint64_t v782 = v780;
                          if (v777)
                          {
                            do
                            {
                              *(unsigned char *)(v765 + v760++) = *(char *)(v763 + v762) >= *(char *)(v764 + v761);
                              v762 += v778;
                              v761 += v779;
                              --v782;
                            }
                            while (v782);
                          }
                          v762 += v772 - v778 * v777;
                          v761 += v781;
                          ++v776;
                        }
                        while (v776 != v774);
                      }
                      v762 += v1972 - v772 * v771;
                      v761 += v775;
                      ++v770;
                    }
                    while (v770 != v769);
                  }
                  v762 += v1986;
                  v761 += v2021;
                  ++v759;
                }
                while (v759 != v2073);
              }
              break;
            default:
              uint64_t v704 = v115[6];
              if (v704)
              {
                uint64_t v705 = 0;
                uint64_t v1985 = v255[19];
                uint64_t v2020 = *(void *)(v116 + 152);
                uint64_t v1971 = v115[19];
                do
                {
                  uint64_t v706 = 0;
                  if ((v119 & 0x80000000) == 0)
                  {
                    uint64_t v707 = *(void *)(v116 + 24);
                    int v708 = v705;
                    do
                    {
                      ldiv_t v709 = ldiv(v708, v117[v119]);
                      int v708 = v709.quot;
                      v706 += *(void *)(v707 + 8 * v119--) * v709.rem;
                    }
                    while (v119 != -1);
                  }
                  uint64_t v710 = v2052;
                  if ((v2052 & 0x80000000) != 0)
                  {
                    LODWORD(v711) = 0;
                  }
                  else
                  {
                    uint64_t v711 = 0;
                    uint64_t v712 = v255[3];
                    int v713 = v705;
                    do
                    {
                      ldiv_t v714 = ldiv(v713, v256[v710]);
                      int v713 = v714.quot;
                      v711 += *(void *)(v712 + 8 * v710--) * v714.rem;
                    }
                    while (v710 != -1);
                  }
                  *(unsigned char *)(v1971 + v705++) = *(char *)(v2020 + (int)v706) >= *(char *)(v1985 + (int)v711);
                  uint64_t v119 = v2066;
                }
                while (v705 != v704);
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v16)
      {
        case 0:
          int v14 = **(_DWORD **)(*a1 + 152);
          int v15 = **(_DWORD **)(*a2 + 152);
LABEL_18:
          BOOL v17 = v14 < v15;
          goto LABEL_23;
        case 1:
          int v153 = *(_DWORD *)(*a2 + 160);
          if (v153 >= 1)
          {
            int v154 = **(_DWORD **)(*a1 + 152);
            v155 = *(BOOL **)(*(void *)a3 + 152);
            v156 = *(int **)(*a2 + 152);
            unsigned int v157 = v153 + 1;
            do
            {
              int v158 = *v156++;
              *v155++ = v154 >= v158;
              --v157;
            }
            while (v157 > 1);
          }
          return;
        case 2:
          int v159 = *(_DWORD *)(*a1 + 160);
          if (v159 >= 1)
          {
            int v160 = **(_DWORD **)(*a2 + 152);
            v161 = *(BOOL **)(*(void *)a3 + 152);
            v162 = *(int **)(*a1 + 152);
            unsigned int v163 = v159 + 1;
            do
            {
              int v164 = *v162++;
              *v161++ = v164 >= v160;
              --v163;
            }
            while (v163 > 1);
          }
          return;
        case 3:
          int v165 = *(_DWORD *)(*(void *)a3 + 48);
          if (v165 >= 1)
          {
            v166 = *(BOOL **)(*(void *)a3 + 152);
            v167 = *(int **)(*a2 + 152);
            v168 = *(int **)(*a1 + 152);
            unsigned int v169 = v165 + 1;
            do
            {
              int v171 = *v168++;
              int v170 = v171;
              int v172 = *v167++;
              *v166++ = v170 >= v172;
              --v169;
            }
            while (v169 > 1);
          }
          return;
        default:
          v144 = *(void **)a3;
          uint64_t v145 = *a1;
          v146 = *(int **)*a1;
          uint64_t v147 = (*(void *)(*a1 + 8) - (void)v146) >> 2;
          uint64_t v148 = (v147 - 1);
          if ((int)v148 >= -1) {
            int v149 = -1;
          }
          else {
            int v149 = v147 - 1;
          }
          int v150 = v149 + 1;
          int v151 = v147 + 1;
          break;
      }
      while (1)
      {
        unsigned int v152 = v151 - 2;
        if (v151 - 2 < 0) {
          break;
        }
        --v151;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v152) != *(void *)(v144[3] + 8 * v152)) {
          goto LABEL_212;
        }
      }
      int v151 = v150;
LABEL_212:
      v263 = (void *)*a2;
      v264 = *(int **)*a2;
      uint64_t v265 = (v263[1] - (void)v264) >> 2;
      uint64_t v266 = (v265 - 1);
      if ((int)v266 >= -1) {
        int v267 = -1;
      }
      else {
        int v267 = v265 - 1;
      }
      int v268 = v267 + 1;
      int v269 = v265 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v263[3] + 8 * v270) != *(void *)(v144[3] + 8 * v270)) {
          goto LABEL_256;
        }
      }
      int v269 = v268;
LABEL_256:
      int v295 = v147 + 1;
      while (1)
      {
        unsigned int v296 = v295 - 2;
        if (v295 - 2 < 0) {
          break;
        }
        --v295;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v296)) {
          goto LABEL_291;
        }
      }
      int v295 = v150;
LABEL_291:
      int v309 = v265 + 1;
      while (1)
      {
        unsigned int v310 = v309 - 2;
        if (v309 - 2 < 0) {
          break;
        }
        --v309;
        if (*(void *)(v263[3] + 8 * v310)) {
          goto LABEL_458;
        }
      }
      int v309 = v268;
LABEL_458:
      unint64_t v399 = (uint64_t)(v144[1] - *v144) >> 2;
      if (v151 <= v269) {
        int v400 = v269;
      }
      else {
        int v400 = v151;
      }
      if (v151 <= v309) {
        int v151 = v309;
      }
      if (v295 > v269) {
        int v269 = v295;
      }
      if (v399 > v269)
      {
        int v401 = 1;
      }
      else
      {
        int v269 = (uint64_t)(v144[1] - *v144) >> 2;
        int v401 = 4;
      }
      if (v399 > v151)
      {
        int v402 = 2;
      }
      else
      {
        int v151 = v269;
        int v402 = v401;
      }
      if (v399 > v400)
      {
        int v151 = v400;
        int v402 = 3;
      }
      uint64_t v2053 = v266;
      uint64_t v2067 = v148;
      if (!v151) {
        goto LABEL_487;
      }
      unint64_t v403 = *(void *)(v144[3] + 8 * (v151 - 1));
      if (v403 < 0x10) {
        goto LABEL_487;
      }
      switch(v402)
      {
        case 1:
          if (v151 == 2)
          {
            uint64_t v1708 = *v146;
            if (v1708)
            {
              uint64_t v1709 = 0;
              uint64_t v1710 = 0;
              uint64_t v1711 = 0;
              uint64_t v1712 = *(void *)(v145 + 152);
              uint64_t v1713 = v263[19];
              uint64_t v1714 = v144[19];
              unint64_t v1715 = v146[1];
              v1716 = *(uint64_t **)(v145 + 24);
              uint64_t v1717 = *v1716;
              uint64_t v1718 = v1716[1];
              v1719 = (uint64_t *)v263[3];
              uint64_t v1721 = *v1719;
              uint64_t v1720 = v1719[1];
              if (v1715 <= 1) {
                uint64_t v1722 = 1;
              }
              else {
                uint64_t v1722 = v146[1];
              }
              uint64_t v1723 = v1717 - v1718 * v1715;
              uint64_t v1724 = v1721 - v1720 * v264[1];
              do
              {
                if (v1715)
                {
                  uint64_t v1725 = 0;
                  uint64_t v1726 = v1713 + 4 * v1710;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1727 = 0;
                      int v1728 = *(_DWORD *)(v1712 + 4 * v1711);
                      unsigned int v1729 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1714 + v1727) = v1728 >= *(_DWORD *)(v1726 + 4 * v1727);
                        --v1729;
                        ++v1727;
                      }
                      while (v1729 > 1);
                    }
                    v1711 += v1718;
                    v1710 += v1720;
                    v1714 += (int)v403;
                    ++v1725;
                    v1726 += 4 * v1720;
                  }
                  while (v1725 != v1722);
                }
                v1711 += v1723;
                v1710 += v1724;
                ++v1709;
              }
              while (v1709 != v1708);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1112 = *v146;
            if (v1112)
            {
              uint64_t v1113 = 0;
              uint64_t v1114 = 0;
              uint64_t v1115 = *(void *)(v145 + 152);
              uint64_t v1116 = v263[19];
              uint64_t v1117 = v144[19];
              uint64_t v1118 = **(void **)(v145 + 24);
              uint64_t v1119 = 4 * *(void *)v263[3];
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1120 = 0;
                  int v1121 = *(_DWORD *)(v1115 + 4 * v1114);
                  unsigned int v1122 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1117 + v1120) = v1121 >= *(_DWORD *)(v1116 + 4 * v1120);
                    --v1122;
                    ++v1120;
                  }
                  while (v1122 > 1);
                }
                v1114 += v1118;
                v1117 += (int)v403;
                ++v1113;
                v1116 += v1119;
              }
              while (v1113 != v1112);
            }
          }
          else
          {
            unint64_t v2008 = v144[6];
            if (v2008)
            {
              unint64_t v2043 = 0;
              uint64_t v1933 = v263[19];
              uint64_t v1959 = *(void *)(v145 + 152);
              uint64_t v1730 = v144[19];
              do
              {
                uint64_t v1731 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1732 = *(void *)(v145 + 24);
                  int v1733 = v2043;
                  do
                  {
                    ldiv_t v1734 = ldiv(v1733, v146[v148]);
                    int v1733 = v1734.quot;
                    v1731 += *(void *)(v1732 + 8 * v148--) * v1734.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1735 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1736) = 0;
                }
                else
                {
                  uint64_t v1736 = 0;
                  uint64_t v1737 = v263[3];
                  int v1738 = v2043;
                  do
                  {
                    ldiv_t v1739 = ldiv(v1738, v264[v1735]);
                    int v1738 = v1739.quot;
                    v1736 += *(void *)(v1737 + 8 * v1735--) * v1739.rem;
                  }
                  while (v1735 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1740 = 0;
                  int v1741 = *(_DWORD *)(v1959 + 4 * (int)v1731);
                  unsigned int v1742 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1730 + v1740) = v1741 >= *(_DWORD *)(v1933 + 4 * (int)v1736 + 4 * v1740);
                    --v1742;
                    ++v1740;
                  }
                  while (v1742 > 1);
                }
                v1730 += (int)v403;
                v2043 += (int)v403;
              }
              while (v2043 < v2008);
            }
          }
          break;
        case 2:
          if (v151 == 2)
          {
            uint64_t v1743 = *v146;
            if (v1743)
            {
              uint64_t v1744 = 0;
              uint64_t v1745 = 0;
              uint64_t v1746 = 0;
              uint64_t v1747 = *(void *)(v145 + 152);
              uint64_t v1748 = v263[19];
              uint64_t v1749 = v144[19];
              unint64_t v1750 = v146[1];
              v1751 = *(uint64_t **)(v145 + 24);
              uint64_t v1752 = *v1751;
              uint64_t v1753 = v1751[1];
              v1754 = (uint64_t *)v263[3];
              uint64_t v1756 = *v1754;
              uint64_t v1755 = v1754[1];
              if (v1750 <= 1) {
                uint64_t v1757 = 1;
              }
              else {
                uint64_t v1757 = v146[1];
              }
              uint64_t v1758 = v1752 - v1753 * v1750;
              uint64_t v1759 = v1756 - v1755 * v264[1];
              do
              {
                if (v1750)
                {
                  uint64_t v1760 = 0;
                  uint64_t v1761 = v1747 + 4 * v1746;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1762 = 0;
                      int v1763 = *(_DWORD *)(v1748 + 4 * v1745);
                      unsigned int v1764 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1749 + v1762) = *(_DWORD *)(v1761 + 4 * v1762) >= v1763;
                        --v1764;
                        ++v1762;
                      }
                      while (v1764 > 1);
                    }
                    v1746 += v1753;
                    v1745 += v1755;
                    v1749 += (int)v403;
                    ++v1760;
                    v1761 += 4 * v1753;
                  }
                  while (v1760 != v1757);
                }
                v1746 += v1758;
                v1745 += v1759;
                ++v1744;
              }
              while (v1744 != v1743);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1123 = *v146;
            if (v1123)
            {
              uint64_t v1124 = 0;
              uint64_t v1125 = 0;
              uint64_t v1126 = *(void *)(v145 + 152);
              uint64_t v1127 = v263[19];
              uint64_t v1128 = v144[19];
              uint64_t v1129 = *(void *)v263[3];
              uint64_t v1130 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1131 = 0;
                  int v1132 = *(_DWORD *)(v1127 + 4 * v1125);
                  unsigned int v1133 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1128 + v1131) = *(_DWORD *)(v1126 + 4 * v1131) >= v1132;
                    --v1133;
                    ++v1131;
                  }
                  while (v1133 > 1);
                }
                v1125 += v1129;
                v1128 += (int)v403;
                ++v1124;
                v1126 += v1130;
              }
              while (v1124 != v1123);
            }
          }
          else
          {
            unint64_t v2009 = v144[6];
            if (v2009)
            {
              unint64_t v2044 = 0;
              uint64_t v1934 = v263[19];
              uint64_t v1960 = *(void *)(v145 + 152);
              uint64_t v1765 = v144[19];
              do
              {
                uint64_t v1766 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1767 = *(void *)(v145 + 24);
                  int v1768 = v2044;
                  do
                  {
                    ldiv_t v1769 = ldiv(v1768, v146[v148]);
                    int v1768 = v1769.quot;
                    v1766 += *(void *)(v1767 + 8 * v148--) * v1769.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1770 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1771) = 0;
                }
                else
                {
                  uint64_t v1771 = 0;
                  uint64_t v1772 = v263[3];
                  int v1773 = v2044;
                  do
                  {
                    ldiv_t v1774 = ldiv(v1773, v264[v1770]);
                    int v1773 = v1774.quot;
                    v1771 += *(void *)(v1772 + 8 * v1770--) * v1774.rem;
                  }
                  while (v1770 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1775 = 0;
                  int v1776 = *(_DWORD *)(v1934 + 4 * (int)v1771);
                  unsigned int v1777 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1765 + v1775) = *(_DWORD *)(v1960 + 4 * (int)v1766 + 4 * v1775) >= v1776;
                    --v1777;
                    ++v1775;
                  }
                  while (v1777 > 1);
                }
                v1765 += (int)v403;
                v2044 += (int)v403;
              }
              while (v2044 < v2009);
            }
          }
          break;
        case 3:
          if (v151 == 2)
          {
            uint64_t v1318 = *v146;
            if (v1318)
            {
              uint64_t v1319 = 0;
              uint64_t v1320 = 0;
              uint64_t v1321 = 0;
              uint64_t v1322 = *(void *)(v145 + 152);
              uint64_t v1323 = v263[19];
              uint64_t v1324 = v144[19];
              unint64_t v1325 = v146[1];
              v1326 = *(uint64_t **)(v145 + 24);
              uint64_t v1327 = *v1326;
              uint64_t v1328 = v1326[1];
              v1329 = (uint64_t *)v263[3];
              uint64_t v1331 = *v1329;
              uint64_t v1330 = v1329[1];
              if (v1325 <= 1) {
                uint64_t v1332 = 1;
              }
              else {
                uint64_t v1332 = v146[1];
              }
              uint64_t v1333 = v1327 - v1328 * v1325;
              uint64_t v1334 = v1331 - v1330 * v264[1];
              do
              {
                if (v1325)
                {
                  uint64_t v1335 = 0;
                  uint64_t v1336 = v1323 + 4 * v1320;
                  uint64_t v1337 = v1322 + 4 * v1321;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1338 = 0;
                      unsigned int v1339 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1324 + v1338) = *(_DWORD *)(v1337 + 4 * v1338) >= *(_DWORD *)(v1336 + 4 * v1338);
                        --v1339;
                        ++v1338;
                      }
                      while (v1339 > 1);
                    }
                    v1321 += v1328;
                    v1320 += v1330;
                    v1324 += (int)v403;
                    ++v1335;
                    v1336 += 4 * v1330;
                    v1337 += 4 * v1328;
                  }
                  while (v1335 != v1332);
                }
                v1321 += v1333;
                v1320 += v1334;
                ++v1319;
              }
              while (v1319 != v1318);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v404 = *v146;
            if (v404)
            {
              uint64_t v405 = 0;
              uint64_t v406 = *(void *)(v145 + 152);
              uint64_t v407 = v263[19];
              uint64_t v408 = v144[19];
              uint64_t v409 = 4 * *(void *)v263[3];
              uint64_t v410 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v411 = 0;
                  unsigned int v412 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v408 + v411) = *(_DWORD *)(v406 + 4 * v411) >= *(_DWORD *)(v407 + 4 * v411);
                    --v412;
                    ++v411;
                  }
                  while (v412 > 1);
                }
                v408 += (int)v403;
                ++v405;
                v407 += v409;
                v406 += v410;
              }
              while (v405 != v404);
            }
          }
          else
          {
            unint64_t v1997 = v144[6];
            if (v1997)
            {
              unint64_t v2032 = 0;
              uint64_t v1922 = v263[19];
              uint64_t v1948 = *(void *)(v145 + 152);
              uint64_t v1340 = v144[19];
              do
              {
                uint64_t v1341 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1342 = *(void *)(v145 + 24);
                  int v1343 = v2032;
                  do
                  {
                    ldiv_t v1344 = ldiv(v1343, v146[v148]);
                    int v1343 = v1344.quot;
                    v1341 += *(void *)(v1342 + 8 * v148--) * v1344.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1345 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1346) = 0;
                }
                else
                {
                  uint64_t v1346 = 0;
                  uint64_t v1347 = v263[3];
                  int v1348 = v2032;
                  do
                  {
                    ldiv_t v1349 = ldiv(v1348, v264[v1345]);
                    int v1348 = v1349.quot;
                    v1346 += *(void *)(v1347 + 8 * v1345--) * v1349.rem;
                  }
                  while (v1345 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1350 = 0;
                  unsigned int v1351 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1340 + v1350) = *(_DWORD *)(v1948 + 4 * (int)v1341 + 4 * v1350) >= *(_DWORD *)(v1922 + 4 * (int)v1346 + 4 * v1350);
                    --v1351;
                    ++v1350;
                  }
                  while (v1351 > 1);
                }
                v1340 += (int)v403;
                v2032 += (int)v403;
              }
              while (v2032 < v1997);
            }
          }
          break;
        default:
LABEL_487:
          switch(v399)
          {
            case 1uLL:
              uint64_t v413 = v144[6];
              if (v413)
              {
                v414 = *(_DWORD **)(v145 + 152);
                v415 = (_DWORD *)v263[19];
                v416 = (BOOL *)v144[19];
                uint64_t v417 = 4 * *(void *)v263[3];
                uint64_t v418 = 4 * **(void **)(v145 + 24);
                do
                {
                  *v416++ = *v414 >= *v415;
                  v415 = (_DWORD *)((char *)v415 + v417);
                  v414 = (_DWORD *)((char *)v414 + v418);
                  --v413;
                }
                while (v413);
              }
              break;
            case 2uLL:
              uint64_t v794 = *v146;
              if (v794)
              {
                uint64_t v795 = 0;
                uint64_t v796 = 0;
                uint64_t v797 = 0;
                uint64_t v798 = 0;
                uint64_t v799 = *(void *)(v145 + 152);
                uint64_t v800 = v263[19];
                uint64_t v801 = v144[19];
                unint64_t v802 = v146[1];
                v803 = *(uint64_t **)(v145 + 24);
                uint64_t v804 = *v803;
                uint64_t v805 = v803[1];
                v806 = (uint64_t *)v263[3];
                uint64_t v807 = *v806;
                uint64_t v808 = v806[1];
                uint64_t v809 = v807 - v808 * v264[1];
                if (v802 <= 1) {
                  uint64_t v810 = 1;
                }
                else {
                  uint64_t v810 = v146[1];
                }
                uint64_t v811 = v804 - v805 * v802;
                do
                {
                  if (v802)
                  {
                    uint64_t v812 = v796 + v810;
                    v813 = (BOOL *)(v801 + v796);
                    uint64_t v814 = v810;
                    do
                    {
                      *v813++ = *(_DWORD *)(v799 + 4 * v798) >= *(_DWORD *)(v800 + 4 * v797);
                      v798 += v805;
                      v797 += v808;
                      --v814;
                    }
                    while (v814);
                    uint64_t v796 = v812;
                  }
                  v798 += v811;
                  v797 += v809;
                  ++v795;
                }
                while (v795 != v794);
              }
              break;
            case 3uLL:
              uint64_t v815 = *v146;
              if (v815)
              {
                uint64_t v816 = 0;
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = 0;
                uint64_t v820 = *(void *)(v145 + 152);
                uint64_t v821 = v263[19];
                uint64_t v822 = v144[19];
                unint64_t v823 = v146[1];
                v824 = *(void **)(v145 + 24);
                uint64_t v825 = v824[1];
                v826 = (void *)v263[3];
                uint64_t v827 = v826[1];
                uint64_t v828 = *v826 - v827 * v264[1];
                if (v823 <= 1) {
                  uint64_t v829 = 1;
                }
                else {
                  uint64_t v829 = v146[1];
                }
                unint64_t v830 = *v824 - v825 * v823;
                do
                {
                  if (v823)
                  {
                    uint64_t v831 = 0;
                    unint64_t v832 = v146[2];
                    uint64_t v833 = v824[2];
                    uint64_t v834 = v826[2];
                    if (v832 <= 1) {
                      uint64_t v835 = 1;
                    }
                    else {
                      uint64_t v835 = v146[2];
                    }
                    uint64_t v836 = v827 - v834 * v264[2];
                    do
                    {
                      uint64_t v837 = v835;
                      if (v832)
                      {
                        do
                        {
                          *(unsigned char *)(v822 + v817++) = *(_DWORD *)(v820 + 4 * v819) >= *(_DWORD *)(v821 + 4 * v818);
                          v819 += v833;
                          v818 += v834;
                          --v837;
                        }
                        while (v837);
                      }
                      v819 += v825 - v833 * v832;
                      v818 += v836;
                      ++v831;
                    }
                    while (v831 != v829);
                  }
                  v819 += v830;
                  v818 += v828;
                  ++v816;
                }
                while (v816 != v815);
              }
              break;
            case 4uLL:
              uint64_t v2074 = *v146;
              if (v2074)
              {
                uint64_t v838 = 0;
                uint64_t v839 = 0;
                uint64_t v840 = 0;
                uint64_t v841 = 0;
                uint64_t v842 = *(void *)(v145 + 152);
                uint64_t v843 = v263[19];
                uint64_t v844 = v144[19];
                unint64_t v845 = v146[1];
                v846 = *(void **)(v145 + 24);
                v847 = (void *)v263[3];
                uint64_t v1942 = v847[1];
                uint64_t v1974 = v846[1];
                uint64_t v2023 = *v847 - v1942 * v264[1];
                int v2060 = v146[1];
                if (v845 <= 1) {
                  uint64_t v848 = 1;
                }
                else {
                  uint64_t v848 = v146[1];
                }
                unint64_t v1988 = *v846 - v846[1] * v845;
                do
                {
                  if (v2060)
                  {
                    uint64_t v849 = 0;
                    unint64_t v850 = v146[2];
                    uint64_t v851 = v846[2];
                    uint64_t v852 = v847[2];
                    if (v850 <= 1) {
                      uint64_t v853 = 1;
                    }
                    else {
                      uint64_t v853 = v146[2];
                    }
                    uint64_t v854 = v1942 - v852 * v264[2];
                    do
                    {
                      if (v850)
                      {
                        uint64_t v855 = 0;
                        unint64_t v856 = v146[3];
                        uint64_t v857 = v846[3];
                        uint64_t v858 = v847[3];
                        if (v856 <= 1) {
                          uint64_t v859 = 1;
                        }
                        else {
                          uint64_t v859 = v146[3];
                        }
                        uint64_t v860 = v852 - v858 * v264[3];
                        do
                        {
                          uint64_t v861 = v859;
                          if (v856)
                          {
                            do
                            {
                              *(unsigned char *)(v844 + v839++) = *(_DWORD *)(v842 + 4 * v841) >= *(_DWORD *)(v843 + 4 * v840);
                              v841 += v857;
                              v840 += v858;
                              --v861;
                            }
                            while (v861);
                          }
                          v841 += v851 - v857 * v856;
                          v840 += v860;
                          ++v855;
                        }
                        while (v855 != v853);
                      }
                      v841 += v1974 - v851 * v850;
                      v840 += v854;
                      ++v849;
                    }
                    while (v849 != v848);
                  }
                  v841 += v1988;
                  v840 += v2023;
                  ++v838;
                }
                while (v838 != v2074);
              }
              break;
            default:
              uint64_t v783 = v144[6];
              if (v783)
              {
                uint64_t v784 = 0;
                uint64_t v1987 = v263[19];
                uint64_t v2022 = *(void *)(v145 + 152);
                uint64_t v1973 = v144[19];
                do
                {
                  uint64_t v785 = 0;
                  if ((v148 & 0x80000000) == 0)
                  {
                    uint64_t v786 = *(void *)(v145 + 24);
                    int v787 = v784;
                    do
                    {
                      ldiv_t v788 = ldiv(v787, v146[v148]);
                      int v787 = v788.quot;
                      v785 += *(void *)(v786 + 8 * v148--) * v788.rem;
                    }
                    while (v148 != -1);
                  }
                  uint64_t v789 = v2053;
                  if ((v2053 & 0x80000000) != 0)
                  {
                    LODWORD(v790) = 0;
                  }
                  else
                  {
                    uint64_t v790 = 0;
                    uint64_t v791 = v263[3];
                    int v792 = v784;
                    do
                    {
                      ldiv_t v793 = ldiv(v792, v264[v789]);
                      int v792 = v793.quot;
                      v790 += *(void *)(v791 + 8 * v789--) * v793.rem;
                    }
                    while (v789 != -1);
                  }
                  *(unsigned char *)(v1973 + v784++) = *(_DWORD *)(v2022 + 4 * (int)v785) >= *(_DWORD *)(v1987
                                                                                                 + 4 * (int)v790);
                  uint64_t v148 = v2067;
                }
                while (v784 != v783);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v18)
      {
        case 0:
          BOOL v17 = **(void **)(*a1 + 152) < **(void **)(*a2 + 152);
          goto LABEL_23;
        case 1:
          int v182 = *(_DWORD *)(*a2 + 160);
          if (v182 >= 1)
          {
            uint64_t v183 = **(void **)(*a1 + 152);
            v184 = *(BOOL **)(*(void *)a3 + 152);
            v185 = *(uint64_t **)(*a2 + 152);
            unsigned int v186 = v182 + 1;
            do
            {
              uint64_t v187 = *v185++;
              *v184++ = v183 >= v187;
              --v186;
            }
            while (v186 > 1);
          }
          return;
        case 2:
          int v188 = *(_DWORD *)(*a1 + 160);
          if (v188 >= 1)
          {
            uint64_t v189 = **(void **)(*a2 + 152);
            v190 = *(BOOL **)(*(void *)a3 + 152);
            v191 = *(uint64_t **)(*a1 + 152);
            unsigned int v192 = v188 + 1;
            do
            {
              uint64_t v193 = *v191++;
              *v190++ = v193 >= v189;
              --v192;
            }
            while (v192 > 1);
          }
          return;
        case 3:
          int v194 = *(_DWORD *)(*(void *)a3 + 48);
          if (v194 >= 1)
          {
            v195 = *(BOOL **)(*(void *)a3 + 152);
            v196 = *(uint64_t **)(*a2 + 152);
            v197 = *(uint64_t **)(*a1 + 152);
            unsigned int v198 = v194 + 1;
            do
            {
              uint64_t v200 = *v197++;
              uint64_t v199 = v200;
              uint64_t v201 = *v196++;
              *v195++ = v199 >= v201;
              --v198;
            }
            while (v198 > 1);
          }
          return;
        default:
          v173 = *(void **)a3;
          uint64_t v174 = *a1;
          v175 = *(int **)*a1;
          uint64_t v176 = (*(void *)(*a1 + 8) - (void)v175) >> 2;
          uint64_t v177 = (v176 - 1);
          if ((int)v177 >= -1) {
            int v178 = -1;
          }
          else {
            int v178 = v176 - 1;
          }
          int v179 = v178 + 1;
          int v180 = v176 + 1;
          break;
      }
      while (1)
      {
        unsigned int v181 = v180 - 2;
        if (v180 - 2 < 0) {
          break;
        }
        --v180;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v181) != *(void *)(v173[3] + 8 * v181)) {
          goto LABEL_220;
        }
      }
      int v180 = v179;
LABEL_220:
      v271 = (void *)*a2;
      v272 = *(int **)*a2;
      uint64_t v273 = (v271[1] - (void)v272) >> 2;
      uint64_t v274 = (v273 - 1);
      if ((int)v274 >= -1) {
        int v275 = -1;
      }
      else {
        int v275 = v273 - 1;
      }
      int v276 = v275 + 1;
      int v277 = v273 + 1;
      while (1)
      {
        unsigned int v278 = v277 - 2;
        if (v277 - 2 < 0) {
          break;
        }
        --v277;
        if (*(void *)(v271[3] + 8 * v278) != *(void *)(v173[3] + 8 * v278)) {
          goto LABEL_261;
        }
      }
      int v277 = v276;
LABEL_261:
      int v297 = v176 + 1;
      while (1)
      {
        unsigned int v298 = v297 - 2;
        if (v297 - 2 < 0) {
          break;
        }
        --v297;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v298)) {
          goto LABEL_296;
        }
      }
      int v297 = v179;
LABEL_296:
      int v311 = v273 + 1;
      while (1)
      {
        unsigned int v312 = v311 - 2;
        if (v311 - 2 < 0) {
          break;
        }
        --v311;
        if (*(void *)(v271[3] + 8 * v312)) {
          goto LABEL_493;
        }
      }
      int v311 = v276;
LABEL_493:
      unint64_t v419 = (uint64_t)(v173[1] - *v173) >> 2;
      if (v180 <= v277) {
        int v420 = v277;
      }
      else {
        int v420 = v180;
      }
      if (v180 <= v311) {
        int v180 = v311;
      }
      if (v297 > v277) {
        int v277 = v297;
      }
      if (v419 > v277)
      {
        int v421 = 1;
      }
      else
      {
        int v277 = (uint64_t)(v173[1] - *v173) >> 2;
        int v421 = 4;
      }
      if (v419 > v180)
      {
        int v422 = 2;
      }
      else
      {
        int v180 = v277;
        int v422 = v421;
      }
      if (v419 > v420)
      {
        int v180 = v420;
        int v422 = 3;
      }
      uint64_t v2054 = v274;
      uint64_t v2068 = v177;
      if (!v180) {
        goto LABEL_522;
      }
      unint64_t v423 = *(void *)(v173[3] + 8 * (v180 - 1));
      if (v423 < 0x10) {
        goto LABEL_522;
      }
      switch(v422)
      {
        case 1:
          if (v180 == 2)
          {
            uint64_t v1778 = *v175;
            if (v1778)
            {
              uint64_t v1779 = 0;
              uint64_t v1780 = 0;
              uint64_t v1781 = 0;
              uint64_t v1782 = *(void *)(v174 + 152);
              uint64_t v1783 = v271[19];
              uint64_t v1784 = v173[19];
              unint64_t v1785 = v175[1];
              v1786 = *(uint64_t **)(v174 + 24);
              uint64_t v1787 = *v1786;
              uint64_t v1788 = v1786[1];
              v1789 = (uint64_t *)v271[3];
              uint64_t v1791 = *v1789;
              uint64_t v1790 = v1789[1];
              if (v1785 <= 1) {
                uint64_t v1792 = 1;
              }
              else {
                uint64_t v1792 = v175[1];
              }
              uint64_t v1793 = v1787 - v1788 * v1785;
              uint64_t v1794 = v1791 - v1790 * v272[1];
              do
              {
                if (v1785)
                {
                  uint64_t v1795 = 0;
                  uint64_t v1796 = v1783 + 8 * v1780;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1797 = 0;
                      uint64_t v1798 = *(void *)(v1782 + 8 * v1781);
                      unsigned int v1799 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1784 + v1797) = v1798 >= *(void *)(v1796 + 8 * v1797);
                        --v1799;
                        ++v1797;
                      }
                      while (v1799 > 1);
                    }
                    v1781 += v1788;
                    v1780 += v1790;
                    v1784 += (int)v423;
                    ++v1795;
                    v1796 += 8 * v1790;
                  }
                  while (v1795 != v1792);
                }
                v1781 += v1793;
                v1780 += v1794;
                ++v1779;
              }
              while (v1779 != v1778);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1134 = *v175;
            if (v1134)
            {
              uint64_t v1135 = 0;
              uint64_t v1136 = 0;
              uint64_t v1137 = *(void *)(v174 + 152);
              uint64_t v1138 = v271[19];
              uint64_t v1139 = v173[19];
              uint64_t v1140 = **(void **)(v174 + 24);
              uint64_t v1141 = 8 * *(void *)v271[3];
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1142 = 0;
                  uint64_t v1143 = *(void *)(v1137 + 8 * v1136);
                  unsigned int v1144 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1139 + v1142) = v1143 >= *(void *)(v1138 + 8 * v1142);
                    --v1144;
                    ++v1142;
                  }
                  while (v1144 > 1);
                }
                v1136 += v1140;
                v1139 += (int)v423;
                ++v1135;
                v1138 += v1141;
              }
              while (v1135 != v1134);
            }
          }
          else
          {
            unint64_t v2010 = v173[6];
            if (v2010)
            {
              unint64_t v2045 = 0;
              uint64_t v1935 = v271[19];
              uint64_t v1961 = *(void *)(v174 + 152);
              uint64_t v1800 = v173[19];
              do
              {
                uint64_t v1801 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1802 = *(void *)(v174 + 24);
                  int v1803 = v2045;
                  do
                  {
                    ldiv_t v1804 = ldiv(v1803, v175[v177]);
                    int v1803 = v1804.quot;
                    v1801 += *(void *)(v1802 + 8 * v177--) * v1804.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1805 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1806) = 0;
                }
                else
                {
                  uint64_t v1806 = 0;
                  uint64_t v1807 = v271[3];
                  int v1808 = v2045;
                  do
                  {
                    ldiv_t v1809 = ldiv(v1808, v272[v1805]);
                    int v1808 = v1809.quot;
                    v1806 += *(void *)(v1807 + 8 * v1805--) * v1809.rem;
                  }
                  while (v1805 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1810 = 0;
                  uint64_t v1811 = *(void *)(v1961 + 8 * (int)v1801);
                  unsigned int v1812 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1800 + v1810) = v1811 >= *(void *)(v1935 + 8 * (int)v1806 + 8 * v1810);
                    --v1812;
                    ++v1810;
                  }
                  while (v1812 > 1);
                }
                v1800 += (int)v423;
                v2045 += (int)v423;
              }
              while (v2045 < v2010);
            }
          }
          break;
        case 2:
          if (v180 == 2)
          {
            uint64_t v1813 = *v175;
            if (v1813)
            {
              uint64_t v1814 = 0;
              uint64_t v1815 = 0;
              uint64_t v1816 = 0;
              uint64_t v1817 = *(void *)(v174 + 152);
              uint64_t v1818 = v271[19];
              uint64_t v1819 = v173[19];
              unint64_t v1820 = v175[1];
              v1821 = *(uint64_t **)(v174 + 24);
              uint64_t v1822 = *v1821;
              uint64_t v1823 = v1821[1];
              v1824 = (uint64_t *)v271[3];
              uint64_t v1826 = *v1824;
              uint64_t v1825 = v1824[1];
              if (v1820 <= 1) {
                uint64_t v1827 = 1;
              }
              else {
                uint64_t v1827 = v175[1];
              }
              uint64_t v1828 = v1822 - v1823 * v1820;
              uint64_t v1829 = v1826 - v1825 * v272[1];
              do
              {
                if (v1820)
                {
                  uint64_t v1830 = 0;
                  uint64_t v1831 = v1817 + 8 * v1816;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1832 = 0;
                      uint64_t v1833 = *(void *)(v1818 + 8 * v1815);
                      unsigned int v1834 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1819 + v1832) = *(void *)(v1831 + 8 * v1832) >= v1833;
                        --v1834;
                        ++v1832;
                      }
                      while (v1834 > 1);
                    }
                    v1816 += v1823;
                    v1815 += v1825;
                    v1819 += (int)v423;
                    ++v1830;
                    v1831 += 8 * v1823;
                  }
                  while (v1830 != v1827);
                }
                v1816 += v1828;
                v1815 += v1829;
                ++v1814;
              }
              while (v1814 != v1813);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1145 = *v175;
            if (v1145)
            {
              uint64_t v1146 = 0;
              uint64_t v1147 = 0;
              uint64_t v1148 = *(void *)(v174 + 152);
              uint64_t v1149 = v271[19];
              uint64_t v1150 = v173[19];
              uint64_t v1151 = *(void *)v271[3];
              uint64_t v1152 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1153 = 0;
                  uint64_t v1154 = *(void *)(v1149 + 8 * v1147);
                  unsigned int v1155 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1150 + v1153) = *(void *)(v1148 + 8 * v1153) >= v1154;
                    --v1155;
                    ++v1153;
                  }
                  while (v1155 > 1);
                }
                v1147 += v1151;
                v1150 += (int)v423;
                ++v1146;
                v1148 += v1152;
              }
              while (v1146 != v1145);
            }
          }
          else
          {
            unint64_t v2011 = v173[6];
            if (v2011)
            {
              unint64_t v2046 = 0;
              uint64_t v1936 = v271[19];
              uint64_t v1962 = *(void *)(v174 + 152);
              uint64_t v1835 = v173[19];
              do
              {
                uint64_t v1836 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1837 = *(void *)(v174 + 24);
                  int v1838 = v2046;
                  do
                  {
                    ldiv_t v1839 = ldiv(v1838, v175[v177]);
                    int v1838 = v1839.quot;
                    v1836 += *(void *)(v1837 + 8 * v177--) * v1839.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1840 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1841) = 0;
                }
                else
                {
                  uint64_t v1841 = 0;
                  uint64_t v1842 = v271[3];
                  int v1843 = v2046;
                  do
                  {
                    ldiv_t v1844 = ldiv(v1843, v272[v1840]);
                    int v1843 = v1844.quot;
                    v1841 += *(void *)(v1842 + 8 * v1840--) * v1844.rem;
                  }
                  while (v1840 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1845 = 0;
                  uint64_t v1846 = *(void *)(v1936 + 8 * (int)v1841);
                  unsigned int v1847 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1835 + v1845) = *(void *)(v1962 + 8 * (int)v1836 + 8 * v1845) >= v1846;
                    --v1847;
                    ++v1845;
                  }
                  while (v1847 > 1);
                }
                v1835 += (int)v423;
                v2046 += (int)v423;
              }
              while (v2046 < v2011);
            }
          }
          break;
        case 3:
          if (v180 == 2)
          {
            uint64_t v1352 = *v175;
            if (v1352)
            {
              uint64_t v1353 = 0;
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = *(void *)(v174 + 152);
              uint64_t v1357 = v271[19];
              uint64_t v1358 = v173[19];
              unint64_t v1359 = v175[1];
              v1360 = *(uint64_t **)(v174 + 24);
              uint64_t v1361 = *v1360;
              uint64_t v1362 = v1360[1];
              v1363 = (uint64_t *)v271[3];
              uint64_t v1365 = *v1363;
              uint64_t v1364 = v1363[1];
              if (v1359 <= 1) {
                uint64_t v1366 = 1;
              }
              else {
                uint64_t v1366 = v175[1];
              }
              uint64_t v1367 = v1361 - v1362 * v1359;
              uint64_t v1368 = v1365 - v1364 * v272[1];
              do
              {
                if (v1359)
                {
                  uint64_t v1369 = 0;
                  uint64_t v1370 = v1357 + 8 * v1354;
                  uint64_t v1371 = v1356 + 8 * v1355;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1372 = 0;
                      unsigned int v1373 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1358 + v1372) = *(void *)(v1371 + 8 * v1372) >= *(void *)(v1370 + 8 * v1372);
                        --v1373;
                        ++v1372;
                      }
                      while (v1373 > 1);
                    }
                    v1355 += v1362;
                    v1354 += v1364;
                    v1358 += (int)v423;
                    ++v1369;
                    v1370 += 8 * v1364;
                    v1371 += 8 * v1362;
                  }
                  while (v1369 != v1366);
                }
                v1355 += v1367;
                v1354 += v1368;
                ++v1353;
              }
              while (v1353 != v1352);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v424 = *v175;
            if (v424)
            {
              uint64_t v425 = 0;
              uint64_t v426 = *(void *)(v174 + 152);
              uint64_t v427 = v271[19];
              uint64_t v428 = v173[19];
              uint64_t v429 = 8 * *(void *)v271[3];
              uint64_t v430 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v431 = 0;
                  unsigned int v432 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v428 + v431) = *(void *)(v426 + 8 * v431) >= *(void *)(v427 + 8 * v431);
                    --v432;
                    ++v431;
                  }
                  while (v432 > 1);
                }
                v428 += (int)v423;
                ++v425;
                v427 += v429;
                v426 += v430;
              }
              while (v425 != v424);
            }
          }
          else
          {
            unint64_t v1998 = v173[6];
            if (v1998)
            {
              unint64_t v2033 = 0;
              uint64_t v1923 = v271[19];
              uint64_t v1949 = *(void *)(v174 + 152);
              uint64_t v1374 = v173[19];
              do
              {
                uint64_t v1375 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1376 = *(void *)(v174 + 24);
                  int v1377 = v2033;
                  do
                  {
                    ldiv_t v1378 = ldiv(v1377, v175[v177]);
                    int v1377 = v1378.quot;
                    v1375 += *(void *)(v1376 + 8 * v177--) * v1378.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1379 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1380) = 0;
                }
                else
                {
                  uint64_t v1380 = 0;
                  uint64_t v1381 = v271[3];
                  int v1382 = v2033;
                  do
                  {
                    ldiv_t v1383 = ldiv(v1382, v272[v1379]);
                    int v1382 = v1383.quot;
                    v1380 += *(void *)(v1381 + 8 * v1379--) * v1383.rem;
                  }
                  while (v1379 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1384 = 0;
                  unsigned int v1385 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1374 + v1384) = *(void *)(v1949 + 8 * (int)v1375 + 8 * v1384) >= *(void *)(v1923 + 8 * (int)v1380 + 8 * v1384);
                    --v1385;
                    ++v1384;
                  }
                  while (v1385 > 1);
                }
                v1374 += (int)v423;
                v2033 += (int)v423;
              }
              while (v2033 < v1998);
            }
          }
          break;
        default:
LABEL_522:
          switch(v419)
          {
            case 1uLL:
              uint64_t v433 = v173[6];
              if (v433)
              {
                v434 = *(void **)(v174 + 152);
                v435 = (void *)v271[19];
                v436 = (BOOL *)v173[19];
                uint64_t v437 = 8 * *(void *)v271[3];
                uint64_t v438 = 8 * **(void **)(v174 + 24);
                do
                {
                  *v436++ = *v434 >= *v435;
                  v435 = (void *)((char *)v435 + v437);
                  v434 = (void *)((char *)v434 + v438);
                  --v433;
                }
                while (v433);
              }
              break;
            case 2uLL:
              uint64_t v873 = *v175;
              if (v873)
              {
                uint64_t v874 = 0;
                uint64_t v875 = 0;
                uint64_t v876 = 0;
                uint64_t v877 = 0;
                uint64_t v878 = *(void *)(v174 + 152);
                uint64_t v879 = v271[19];
                uint64_t v880 = v173[19];
                unint64_t v881 = v175[1];
                v882 = *(uint64_t **)(v174 + 24);
                uint64_t v883 = *v882;
                uint64_t v884 = v882[1];
                v885 = (uint64_t *)v271[3];
                uint64_t v886 = *v885;
                uint64_t v887 = v885[1];
                uint64_t v888 = v886 - v887 * v272[1];
                if (v881 <= 1) {
                  uint64_t v889 = 1;
                }
                else {
                  uint64_t v889 = v175[1];
                }
                uint64_t v890 = v883 - v884 * v881;
                do
                {
                  if (v881)
                  {
                    uint64_t v891 = v875 + v889;
                    v892 = (BOOL *)(v880 + v875);
                    uint64_t v893 = v889;
                    do
                    {
                      *v892++ = *(void *)(v878 + 8 * v877) >= *(void *)(v879 + 8 * v876);
                      v877 += v884;
                      v876 += v887;
                      --v893;
                    }
                    while (v893);
                    uint64_t v875 = v891;
                  }
                  v877 += v890;
                  v876 += v888;
                  ++v874;
                }
                while (v874 != v873);
              }
              break;
            case 3uLL:
              uint64_t v894 = *v175;
              if (v894)
              {
                uint64_t v895 = 0;
                uint64_t v896 = 0;
                uint64_t v897 = 0;
                uint64_t v898 = 0;
                uint64_t v899 = *(void *)(v174 + 152);
                uint64_t v900 = v271[19];
                uint64_t v901 = v173[19];
                unint64_t v902 = v175[1];
                v903 = *(void **)(v174 + 24);
                uint64_t v904 = v903[1];
                v905 = (void *)v271[3];
                uint64_t v906 = v905[1];
                uint64_t v907 = *v905 - v906 * v272[1];
                if (v902 <= 1) {
                  uint64_t v908 = 1;
                }
                else {
                  uint64_t v908 = v175[1];
                }
                unint64_t v909 = *v903 - v904 * v902;
                do
                {
                  if (v902)
                  {
                    uint64_t v910 = 0;
                    unint64_t v911 = v175[2];
                    uint64_t v912 = v903[2];
                    uint64_t v913 = v905[2];
                    if (v911 <= 1) {
                      uint64_t v914 = 1;
                    }
                    else {
                      uint64_t v914 = v175[2];
                    }
                    uint64_t v915 = v906 - v913 * v272[2];
                    do
                    {
                      uint64_t v916 = v914;
                      if (v911)
                      {
                        do
                        {
                          *(unsigned char *)(v901 + v896++) = *(void *)(v899 + 8 * v898) >= *(void *)(v900 + 8 * v897);
                          v898 += v912;
                          v897 += v913;
                          --v916;
                        }
                        while (v916);
                      }
                      v898 += v904 - v912 * v911;
                      v897 += v915;
                      ++v910;
                    }
                    while (v910 != v908);
                  }
                  v898 += v909;
                  v897 += v907;
                  ++v895;
                }
                while (v895 != v894);
              }
              break;
            case 4uLL:
              uint64_t v2075 = *v175;
              if (v2075)
              {
                uint64_t v917 = 0;
                uint64_t v918 = 0;
                uint64_t v919 = 0;
                uint64_t v920 = 0;
                uint64_t v921 = *(void *)(v174 + 152);
                uint64_t v922 = v271[19];
                uint64_t v923 = v173[19];
                unint64_t v924 = v175[1];
                v925 = *(void **)(v174 + 24);
                v926 = (void *)v271[3];
                uint64_t v1943 = v926[1];
                uint64_t v1976 = v925[1];
                uint64_t v2025 = *v926 - v1943 * v272[1];
                int v2061 = v175[1];
                if (v924 <= 1) {
                  uint64_t v927 = 1;
                }
                else {
                  uint64_t v927 = v175[1];
                }
                unint64_t v1990 = *v925 - v925[1] * v924;
                do
                {
                  if (v2061)
                  {
                    uint64_t v928 = 0;
                    unint64_t v929 = v175[2];
                    uint64_t v930 = v925[2];
                    uint64_t v931 = v926[2];
                    if (v929 <= 1) {
                      uint64_t v932 = 1;
                    }
                    else {
                      uint64_t v932 = v175[2];
                    }
                    uint64_t v933 = v1943 - v931 * v272[2];
                    do
                    {
                      if (v929)
                      {
                        uint64_t v934 = 0;
                        unint64_t v935 = v175[3];
                        uint64_t v936 = v925[3];
                        uint64_t v937 = v926[3];
                        if (v935 <= 1) {
                          uint64_t v938 = 1;
                        }
                        else {
                          uint64_t v938 = v175[3];
                        }
                        uint64_t v939 = v931 - v937 * v272[3];
                        do
                        {
                          uint64_t v940 = v938;
                          if (v935)
                          {
                            do
                            {
                              *(unsigned char *)(v923 + v918++) = *(void *)(v921 + 8 * v920) >= *(void *)(v922 + 8 * v919);
                              v920 += v936;
                              v919 += v937;
                              --v940;
                            }
                            while (v940);
                          }
                          v920 += v930 - v936 * v935;
                          v919 += v939;
                          ++v934;
                        }
                        while (v934 != v932);
                      }
                      v920 += v1976 - v930 * v929;
                      v919 += v933;
                      ++v928;
                    }
                    while (v928 != v927);
                  }
                  v920 += v1990;
                  v919 += v2025;
                  ++v917;
                }
                while (v917 != v2075);
              }
              break;
            default:
              uint64_t v862 = v173[6];
              if (v862)
              {
                uint64_t v863 = 0;
                uint64_t v1989 = v271[19];
                uint64_t v2024 = *(void *)(v174 + 152);
                uint64_t v1975 = v173[19];
                do
                {
                  uint64_t v864 = 0;
                  if ((v177 & 0x80000000) == 0)
                  {
                    uint64_t v865 = *(void *)(v174 + 24);
                    int v866 = v863;
                    do
                    {
                      ldiv_t v867 = ldiv(v866, v175[v177]);
                      int v866 = v867.quot;
                      v864 += *(void *)(v865 + 8 * v177--) * v867.rem;
                    }
                    while (v177 != -1);
                  }
                  uint64_t v868 = v2054;
                  if ((v2054 & 0x80000000) != 0)
                  {
                    LODWORD(v869) = 0;
                  }
                  else
                  {
                    uint64_t v869 = 0;
                    uint64_t v870 = v271[3];
                    int v871 = v863;
                    do
                    {
                      ldiv_t v872 = ldiv(v871, v272[v868]);
                      int v871 = v872.quot;
                      v869 += *(void *)(v870 + 8 * v868--) * v872.rem;
                    }
                    while (v868 != -1);
                  }
                  *(unsigned char *)(v1975 + v863++) = *(void *)(v2024 + 8 * (int)v864) >= *(void *)(v1989
                                                                                                 + 8 * (int)v869);
                  uint64_t v177 = v2068;
                }
                while (v863 != v862);
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v19)
      {
        case 0:
          BOOL v17 = **(float **)(*a1 + 152) < **(float **)(*a2 + 152);
LABEL_23:
          BOOL v8 = !v17;
LABEL_26:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v211 = *(_DWORD *)(*a2 + 160);
          if (v211 >= 1)
          {
            float v212 = **(float **)(*a1 + 152);
            v213 = *(BOOL **)(*(void *)a3 + 152);
            v214 = *(float **)(*a2 + 152);
            unsigned int v215 = v211 + 1;
            do
            {
              float v216 = *v214++;
              *v213++ = v212 >= v216;
              --v215;
            }
            while (v215 > 1);
          }
          return;
        case 2:
          int v217 = *(_DWORD *)(*a1 + 160);
          if (v217 >= 1)
          {
            float v218 = **(float **)(*a2 + 152);
            v219 = *(BOOL **)(*(void *)a3 + 152);
            v220 = *(float **)(*a1 + 152);
            unsigned int v221 = v217 + 1;
            do
            {
              float v222 = *v220++;
              *v219++ = v222 >= v218;
              --v221;
            }
            while (v221 > 1);
          }
          return;
        case 3:
          int v223 = *(_DWORD *)(*(void *)a3 + 48);
          if (v223 >= 1)
          {
            v224 = *(BOOL **)(*(void *)a3 + 152);
            v225 = *(float **)(*a2 + 152);
            v226 = *(float **)(*a1 + 152);
            unsigned int v227 = v223 + 1;
            do
            {
              float v228 = *v226++;
              float v229 = v228;
              float v230 = *v225++;
              *v224++ = v229 >= v230;
              --v227;
            }
            while (v227 > 1);
          }
          return;
        default:
          v202 = *(void **)a3;
          uint64_t v203 = *a1;
          v204 = *(int **)*a1;
          uint64_t v205 = (*(void *)(*a1 + 8) - (void)v204) >> 2;
          uint64_t v206 = (v205 - 1);
          if ((int)v206 >= -1) {
            int v207 = -1;
          }
          else {
            int v207 = v205 - 1;
          }
          int v208 = v207 + 1;
          int v209 = v205 + 1;
          while (1)
          {
            unsigned int v210 = v209 - 2;
            if (v209 - 2 < 0) {
              break;
            }
            --v209;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v210) != *(void *)(v202[3] + 8 * v210)) {
              goto LABEL_228;
            }
          }
          int v209 = v208;
LABEL_228:
          v279 = (void *)*a2;
          v280 = *(int **)*a2;
          uint64_t v281 = (v279[1] - (void)v280) >> 2;
          uint64_t v282 = (v281 - 1);
          if ((int)v282 >= -1) {
            int v283 = -1;
          }
          else {
            int v283 = v281 - 1;
          }
          int v284 = v283 + 1;
          int v285 = v281 + 1;
          while (1)
          {
            unsigned int v286 = v285 - 2;
            if (v285 - 2 < 0) {
              break;
            }
            --v285;
            if (*(void *)(v279[3] + 8 * v286) != *(void *)(v202[3] + 8 * v286)) {
              goto LABEL_266;
            }
          }
          int v285 = v284;
LABEL_266:
          int v299 = v205 + 1;
          while (1)
          {
            unsigned int v300 = v299 - 2;
            if (v299 - 2 < 0) {
              break;
            }
            --v299;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v300)) {
              goto LABEL_301;
            }
          }
          int v299 = v208;
LABEL_301:
          int v313 = v281 + 1;
          while (1)
          {
            unsigned int v314 = v313 - 2;
            if (v313 - 2 < 0) {
              break;
            }
            --v313;
            if (*(void *)(v279[3] + 8 * v314)) {
              goto LABEL_528;
            }
          }
          int v313 = v284;
LABEL_528:
          unint64_t v439 = (uint64_t)(v202[1] - *v202) >> 2;
          if (v209 <= v285) {
            int v440 = v285;
          }
          else {
            int v440 = v209;
          }
          if (v209 <= v313) {
            int v209 = v313;
          }
          if (v299 > v285) {
            int v285 = v299;
          }
          if (v439 > v285)
          {
            int v441 = 1;
          }
          else
          {
            int v285 = (uint64_t)(v202[1] - *v202) >> 2;
            int v441 = 4;
          }
          if (v439 > v209)
          {
            int v442 = 2;
          }
          else
          {
            int v209 = v285;
            int v442 = v441;
          }
          if (v439 > v440)
          {
            int v209 = v440;
            int v442 = 3;
          }
          uint64_t v2055 = v282;
          uint64_t v2069 = v206;
          if (!v209) {
            goto LABEL_557;
          }
          unint64_t v443 = *(void *)(v202[3] + 8 * (v209 - 1));
          if (v443 < 0x10) {
            goto LABEL_557;
          }
          switch(v442)
          {
            case 1:
              if (v209 == 2)
              {
                uint64_t v1848 = *v204;
                if (v1848)
                {
                  uint64_t v1849 = 0;
                  uint64_t v1850 = 0;
                  uint64_t v1851 = 0;
                  uint64_t v1852 = *(void *)(v203 + 152);
                  uint64_t v1853 = v279[19];
                  uint64_t v1854 = v202[19];
                  unint64_t v1855 = v204[1];
                  v1856 = *(uint64_t **)(v203 + 24);
                  uint64_t v1857 = *v1856;
                  uint64_t v1858 = v1856[1];
                  v1859 = (uint64_t *)v279[3];
                  uint64_t v1861 = *v1859;
                  uint64_t v1860 = v1859[1];
                  if (v1855 <= 1) {
                    uint64_t v1862 = 1;
                  }
                  else {
                    uint64_t v1862 = v204[1];
                  }
                  uint64_t v1863 = v1857 - v1858 * v1855;
                  uint64_t v1864 = v1861 - v1860 * v280[1];
                  do
                  {
                    if (v1855)
                    {
                      uint64_t v1865 = 0;
                      uint64_t v1866 = v1853 + 4 * v1850;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1867 = 0;
                          float v1868 = *(float *)(v1852 + 4 * v1851);
                          unsigned int v1869 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1854 + v1867) = v1868 >= *(float *)(v1866 + 4 * v1867);
                            --v1869;
                            ++v1867;
                          }
                          while (v1869 > 1);
                        }
                        v1851 += v1858;
                        v1850 += v1860;
                        v1854 += (int)v443;
                        ++v1865;
                        v1866 += 4 * v1860;
                      }
                      while (v1865 != v1862);
                    }
                    v1851 += v1863;
                    v1850 += v1864;
                    ++v1849;
                  }
                  while (v1849 != v1848);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1156 = *v204;
                if (v1156)
                {
                  uint64_t v1157 = 0;
                  uint64_t v1158 = 0;
                  uint64_t v1159 = *(void *)(v203 + 152);
                  uint64_t v1160 = v279[19];
                  uint64_t v1161 = v202[19];
                  uint64_t v1162 = **(void **)(v203 + 24);
                  uint64_t v1163 = 4 * *(void *)v279[3];
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1164 = 0;
                      float v1165 = *(float *)(v1159 + 4 * v1158);
                      unsigned int v1166 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1164) = v1165 >= *(float *)(v1160 + 4 * v1164);
                        --v1166;
                        ++v1164;
                      }
                      while (v1166 > 1);
                    }
                    v1158 += v1162;
                    v1161 += (int)v443;
                    ++v1157;
                    v1160 += v1163;
                  }
                  while (v1157 != v1156);
                }
              }
              else
              {
                unint64_t v2012 = v202[6];
                if (v2012)
                {
                  unint64_t v2047 = 0;
                  uint64_t v1937 = v279[19];
                  uint64_t v1963 = *(void *)(v203 + 152);
                  uint64_t v1870 = v202[19];
                  do
                  {
                    uint64_t v1871 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1872 = *(void *)(v203 + 24);
                      int v1873 = v2047;
                      do
                      {
                        ldiv_t v1874 = ldiv(v1873, v204[v206]);
                        int v1873 = v1874.quot;
                        v1871 += *(void *)(v1872 + 8 * v206--) * v1874.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1875 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1876) = 0;
                    }
                    else
                    {
                      uint64_t v1876 = 0;
                      uint64_t v1877 = v279[3];
                      int v1878 = v2047;
                      do
                      {
                        ldiv_t v1879 = ldiv(v1878, v280[v1875]);
                        int v1878 = v1879.quot;
                        v1876 += *(void *)(v1877 + 8 * v1875--) * v1879.rem;
                      }
                      while (v1875 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1880 = 0;
                      float v1881 = *(float *)(v1963 + 4 * (int)v1871);
                      unsigned int v1882 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1870 + v1880) = v1881 >= *(float *)(v1937 + 4 * (int)v1876 + 4 * v1880);
                        --v1882;
                        ++v1880;
                      }
                      while (v1882 > 1);
                    }
                    v1870 += (int)v443;
                    v2047 += (int)v443;
                  }
                  while (v2047 < v2012);
                }
              }
              break;
            case 2:
              if (v209 == 2)
              {
                uint64_t v1883 = *v204;
                if (v1883)
                {
                  uint64_t v1884 = 0;
                  uint64_t v1885 = 0;
                  uint64_t v1886 = 0;
                  uint64_t v1887 = *(void *)(v203 + 152);
                  uint64_t v1888 = v279[19];
                  uint64_t v1889 = v202[19];
                  unint64_t v1890 = v204[1];
                  v1891 = *(uint64_t **)(v203 + 24);
                  uint64_t v1892 = *v1891;
                  uint64_t v1893 = v1891[1];
                  v1894 = (uint64_t *)v279[3];
                  uint64_t v1896 = *v1894;
                  uint64_t v1895 = v1894[1];
                  if (v1890 <= 1) {
                    uint64_t v1897 = 1;
                  }
                  else {
                    uint64_t v1897 = v204[1];
                  }
                  uint64_t v1898 = v1892 - v1893 * v1890;
                  uint64_t v1899 = v1896 - v1895 * v280[1];
                  do
                  {
                    if (v1890)
                    {
                      uint64_t v1900 = 0;
                      uint64_t v1901 = v1887 + 4 * v1886;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1902 = 0;
                          float v1903 = *(float *)(v1888 + 4 * v1885);
                          unsigned int v1904 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1889 + v1902) = *(float *)(v1901 + 4 * v1902) >= v1903;
                            --v1904;
                            ++v1902;
                          }
                          while (v1904 > 1);
                        }
                        v1886 += v1893;
                        v1885 += v1895;
                        v1889 += (int)v443;
                        ++v1900;
                        v1901 += 4 * v1893;
                      }
                      while (v1900 != v1897);
                    }
                    v1886 += v1898;
                    v1885 += v1899;
                    ++v1884;
                  }
                  while (v1884 != v1883);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1167 = *v204;
                if (v1167)
                {
                  uint64_t v1168 = 0;
                  uint64_t v1169 = 0;
                  uint64_t v1170 = *(void *)(v203 + 152);
                  uint64_t v1171 = v279[19];
                  uint64_t v1172 = v202[19];
                  uint64_t v1173 = *(void *)v279[3];
                  uint64_t v1174 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1175 = 0;
                      float v1176 = *(float *)(v1171 + 4 * v1169);
                      unsigned int v1177 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1172 + v1175) = *(float *)(v1170 + 4 * v1175) >= v1176;
                        --v1177;
                        ++v1175;
                      }
                      while (v1177 > 1);
                    }
                    v1169 += v1173;
                    v1172 += (int)v443;
                    ++v1168;
                    v1170 += v1174;
                  }
                  while (v1168 != v1167);
                }
              }
              else
              {
                unint64_t v2013 = v202[6];
                if (v2013)
                {
                  unint64_t v2048 = 0;
                  uint64_t v1938 = v279[19];
                  uint64_t v1964 = *(void *)(v203 + 152);
                  uint64_t v1905 = v202[19];
                  do
                  {
                    uint64_t v1906 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1907 = *(void *)(v203 + 24);
                      int v1908 = v2048;
                      do
                      {
                        ldiv_t v1909 = ldiv(v1908, v204[v206]);
                        int v1908 = v1909.quot;
                        v1906 += *(void *)(v1907 + 8 * v206--) * v1909.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1910 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1911) = 0;
                    }
                    else
                    {
                      uint64_t v1911 = 0;
                      uint64_t v1912 = v279[3];
                      int v1913 = v2048;
                      do
                      {
                        ldiv_t v1914 = ldiv(v1913, v280[v1910]);
                        int v1913 = v1914.quot;
                        v1911 += *(void *)(v1912 + 8 * v1910--) * v1914.rem;
                      }
                      while (v1910 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1915 = 0;
                      float v1916 = *(float *)(v1938 + 4 * (int)v1911);
                      unsigned int v1917 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1905 + v1915) = *(float *)(v1964 + 4 * (int)v1906 + 4 * v1915) >= v1916;
                        --v1917;
                        ++v1915;
                      }
                      while (v1917 > 1);
                    }
                    v1905 += (int)v443;
                    v2048 += (int)v443;
                  }
                  while (v2048 < v2013);
                }
              }
              break;
            case 3:
              if (v209 == 2)
              {
                uint64_t v1386 = *v204;
                if (v1386)
                {
                  uint64_t v1387 = 0;
                  uint64_t v1388 = 0;
                  uint64_t v1389 = 0;
                  uint64_t v1390 = *(void *)(v203 + 152);
                  uint64_t v1391 = v279[19];
                  uint64_t v1392 = v202[19];
                  unint64_t v1393 = v204[1];
                  v1394 = *(uint64_t **)(v203 + 24);
                  uint64_t v1395 = *v1394;
                  uint64_t v1396 = v1394[1];
                  v1397 = (uint64_t *)v279[3];
                  uint64_t v1399 = *v1397;
                  uint64_t v1398 = v1397[1];
                  if (v1393 <= 1) {
                    uint64_t v1400 = 1;
                  }
                  else {
                    uint64_t v1400 = v204[1];
                  }
                  uint64_t v1401 = v1395 - v1396 * v1393;
                  uint64_t v1402 = v1399 - v1398 * v280[1];
                  do
                  {
                    if (v1393)
                    {
                      uint64_t v1403 = 0;
                      uint64_t v1404 = v1391 + 4 * v1388;
                      uint64_t v1405 = v1390 + 4 * v1389;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1406 = 0;
                          unsigned int v1407 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1392 + v1406) = *(float *)(v1405 + 4 * v1406) >= *(float *)(v1404 + 4 * v1406);
                            --v1407;
                            ++v1406;
                          }
                          while (v1407 > 1);
                        }
                        v1389 += v1396;
                        v1388 += v1398;
                        v1392 += (int)v443;
                        ++v1403;
                        v1404 += 4 * v1398;
                        v1405 += 4 * v1396;
                      }
                      while (v1403 != v1400);
                    }
                    v1389 += v1401;
                    v1388 += v1402;
                    ++v1387;
                  }
                  while (v1387 != v1386);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v444 = *v204;
                if (v444)
                {
                  uint64_t v445 = 0;
                  uint64_t v446 = *(void *)(v203 + 152);
                  uint64_t v447 = v279[19];
                  uint64_t v448 = v202[19];
                  uint64_t v449 = 4 * *(void *)v279[3];
                  uint64_t v450 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v451 = 0;
                      unsigned int v452 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v448 + v451) = *(float *)(v446 + 4 * v451) >= *(float *)(v447 + 4 * v451);
                        --v452;
                        ++v451;
                      }
                      while (v452 > 1);
                    }
                    v448 += (int)v443;
                    ++v445;
                    v447 += v449;
                    v446 += v450;
                  }
                  while (v445 != v444);
                }
              }
              else
              {
                unint64_t v1999 = v202[6];
                if (v1999)
                {
                  unint64_t v2034 = 0;
                  uint64_t v1924 = v279[19];
                  uint64_t v1950 = *(void *)(v203 + 152);
                  uint64_t v1408 = v202[19];
                  do
                  {
                    uint64_t v1409 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1410 = *(void *)(v203 + 24);
                      int v1411 = v2034;
                      do
                      {
                        ldiv_t v1412 = ldiv(v1411, v204[v206]);
                        int v1411 = v1412.quot;
                        v1409 += *(void *)(v1410 + 8 * v206--) * v1412.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1413 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1414) = 0;
                    }
                    else
                    {
                      uint64_t v1414 = 0;
                      uint64_t v1415 = v279[3];
                      int v1416 = v2034;
                      do
                      {
                        ldiv_t v1417 = ldiv(v1416, v280[v1413]);
                        int v1416 = v1417.quot;
                        v1414 += *(void *)(v1415 + 8 * v1413--) * v1417.rem;
                      }
                      while (v1413 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1418 = 0;
                      unsigned int v1419 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1408 + v1418) = *(float *)(v1950 + 4 * (int)v1409 + 4 * v1418) >= *(float *)(v1924 + 4 * (int)v1414 + 4 * v1418);
                        --v1419;
                        ++v1418;
                      }
                      while (v1419 > 1);
                    }
                    v1408 += (int)v443;
                    v2034 += (int)v443;
                  }
                  while (v2034 < v1999);
                }
              }
              break;
            default:
LABEL_557:
              switch(v439)
              {
                case 1uLL:
                  uint64_t v453 = v202[6];
                  if (v453)
                  {
                    v454 = *(float **)(v203 + 152);
                    v455 = (float *)v279[19];
                    v456 = (BOOL *)v202[19];
                    uint64_t v457 = 4 * *(void *)v279[3];
                    uint64_t v458 = 4 * **(void **)(v203 + 24);
                    do
                    {
                      *v456++ = *v454 >= *v455;
                      v455 = (float *)((char *)v455 + v457);
                      v454 = (float *)((char *)v454 + v458);
                      --v453;
                    }
                    while (v453);
                  }
                  break;
                case 2uLL:
                  uint64_t v952 = *v204;
                  if (v952)
                  {
                    uint64_t v953 = 0;
                    uint64_t v954 = 0;
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = *(void *)(v203 + 152);
                    uint64_t v958 = v279[19];
                    uint64_t v959 = v202[19];
                    unint64_t v960 = v204[1];
                    v961 = *(uint64_t **)(v203 + 24);
                    uint64_t v962 = *v961;
                    uint64_t v963 = v961[1];
                    v964 = (uint64_t *)v279[3];
                    uint64_t v965 = *v964;
                    uint64_t v966 = v964[1];
                    uint64_t v967 = v965 - v966 * v280[1];
                    if (v960 <= 1) {
                      uint64_t v968 = 1;
                    }
                    else {
                      uint64_t v968 = v204[1];
                    }
                    uint64_t v969 = v962 - v963 * v960;
                    do
                    {
                      if (v960)
                      {
                        uint64_t v970 = v954 + v968;
                        v971 = (BOOL *)(v959 + v954);
                        uint64_t v972 = v968;
                        do
                        {
                          *v971++ = *(float *)(v957 + 4 * v956) >= *(float *)(v958 + 4 * v955);
                          v956 += v963;
                          v955 += v966;
                          --v972;
                        }
                        while (v972);
                        uint64_t v954 = v970;
                      }
                      v956 += v969;
                      v955 += v967;
                      ++v953;
                    }
                    while (v953 != v952);
                  }
                  break;
                case 3uLL:
                  uint64_t v973 = *v204;
                  if (v973)
                  {
                    uint64_t v974 = 0;
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = *(void *)(v203 + 152);
                    uint64_t v979 = v279[19];
                    uint64_t v980 = v202[19];
                    unint64_t v981 = v204[1];
                    v982 = *(void **)(v203 + 24);
                    uint64_t v983 = v982[1];
                    v984 = (void *)v279[3];
                    uint64_t v985 = v984[1];
                    uint64_t v986 = *v984 - v985 * v280[1];
                    if (v981 <= 1) {
                      uint64_t v987 = 1;
                    }
                    else {
                      uint64_t v987 = v204[1];
                    }
                    unint64_t v988 = *v982 - v983 * v981;
                    do
                    {
                      if (v981)
                      {
                        uint64_t v989 = 0;
                        unint64_t v990 = v204[2];
                        uint64_t v991 = v982[2];
                        uint64_t v992 = v984[2];
                        if (v990 <= 1) {
                          uint64_t v993 = 1;
                        }
                        else {
                          uint64_t v993 = v204[2];
                        }
                        uint64_t v994 = v985 - v992 * v280[2];
                        do
                        {
                          uint64_t v995 = v993;
                          if (v990)
                          {
                            do
                            {
                              *(unsigned char *)(v980 + v975++) = *(float *)(v978 + 4 * v977) >= *(float *)(v979 + 4 * v976);
                              v977 += v991;
                              v976 += v992;
                              --v995;
                            }
                            while (v995);
                          }
                          v977 += v983 - v991 * v990;
                          v976 += v994;
                          ++v989;
                        }
                        while (v989 != v987);
                      }
                      v977 += v988;
                      v976 += v986;
                      ++v974;
                    }
                    while (v974 != v973);
                  }
                  break;
                case 4uLL:
                  uint64_t v2076 = *v204;
                  if (v2076)
                  {
                    uint64_t v996 = 0;
                    uint64_t v997 = 0;
                    uint64_t v998 = 0;
                    uint64_t v999 = 0;
                    uint64_t v1000 = *(void *)(v203 + 152);
                    uint64_t v1001 = v279[19];
                    uint64_t v1002 = v202[19];
                    unint64_t v1003 = v204[1];
                    v1004 = *(void **)(v203 + 24);
                    v1005 = (void *)v279[3];
                    uint64_t v1978 = v1005[1];
                    uint64_t v1992 = v1004[1];
                    if (v1003 <= 1) {
                      uint64_t v1006 = 1;
                    }
                    else {
                      uint64_t v1006 = v204[1];
                    }
                    unint64_t v2027 = *v1004 - v1004[1] * v1003;
                    uint64_t v2062 = *v1005 - v1978 * v280[1];
                    do
                    {
                      if (v1003)
                      {
                        uint64_t v1007 = 0;
                        unint64_t v1008 = v204[2];
                        uint64_t v1009 = v1004[2];
                        uint64_t v1010 = v1005[2];
                        if (v1008 <= 1) {
                          uint64_t v1011 = 1;
                        }
                        else {
                          uint64_t v1011 = v204[2];
                        }
                        uint64_t v1012 = v1978 - v1010 * v280[2];
                        do
                        {
                          if (v1008)
                          {
                            uint64_t v1013 = 0;
                            unint64_t v1014 = v204[3];
                            uint64_t v1015 = v1004[3];
                            uint64_t v1016 = v1005[3];
                            if (v1014 <= 1) {
                              uint64_t v1017 = 1;
                            }
                            else {
                              uint64_t v1017 = v204[3];
                            }
                            uint64_t v1018 = v1010 - v1016 * v280[3];
                            do
                            {
                              uint64_t v1019 = v1017;
                              if (v1014)
                              {
                                do
                                {
                                  *(unsigned char *)(v1002 + v997++) = *(float *)(v1000 + 4 * v999) >= *(float *)(v1001 + 4 * v998);
                                  v999 += v1015;
                                  v998 += v1016;
                                  --v1019;
                                }
                                while (v1019);
                              }
                              v999 += v1009 - v1015 * v1014;
                              v998 += v1018;
                              ++v1013;
                            }
                            while (v1013 != v1011);
                          }
                          v999 += v1992 - v1009 * v1008;
                          v998 += v1012;
                          ++v1007;
                        }
                        while (v1007 != v1006);
                      }
                      v999 += v2027;
                      v998 += v2062;
                      ++v996;
                    }
                    while (v996 != v2076);
                  }
                  break;
                default:
                  uint64_t v941 = v202[6];
                  if (v941)
                  {
                    uint64_t v942 = 0;
                    uint64_t v1991 = v279[19];
                    uint64_t v2026 = *(void *)(v203 + 152);
                    uint64_t v1977 = v202[19];
                    do
                    {
                      uint64_t v943 = 0;
                      if ((v206 & 0x80000000) == 0)
                      {
                        uint64_t v944 = *(void *)(v203 + 24);
                        int v945 = v942;
                        do
                        {
                          ldiv_t v946 = ldiv(v945, v204[v206]);
                          int v945 = v946.quot;
                          v943 += *(void *)(v944 + 8 * v206--) * v946.rem;
                        }
                        while (v206 != -1);
                      }
                      uint64_t v947 = v2055;
                      if ((v2055 & 0x80000000) != 0)
                      {
                        LODWORD(v948) = 0;
                      }
                      else
                      {
                        uint64_t v948 = 0;
                        uint64_t v949 = v279[3];
                        int v950 = v942;
                        do
                        {
                          ldiv_t v951 = ldiv(v950, v280[v947]);
                          int v950 = v951.quot;
                          v948 += *(void *)(v949 + 8 * v947--) * v951.rem;
                        }
                        while (v947 != -1);
                      }
                      *(unsigned char *)(v1977 + v942++) = *(float *)(v2026 + 4 * (int)v943) >= *(float *)(v1991 + 4 * (int)v948);
                      uint64_t v206 = v2069;
                    }
                    while (v942 != v941);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::Less::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Less::eval();
  }
}

void mlx::core::anonymous namespace'::comparison_op<mlx::core::detail::Less>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*a1 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          BOOL v8 = !v7;
          goto LABEL_26;
        case 1:
          int v29 = *(_DWORD *)(*a2 + 160);
          if (v29 >= 1)
          {
            int v30 = **(unsigned __int8 **)(*a1 + 152);
            v31 = *(char **)(*(void *)a3 + 152);
            v32 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v33 = v29 + 1;
            do
            {
              int v35 = *v32++;
              int v34 = v35;
              if (v30) {
                BOOL v36 = 1;
              }
              else {
                BOOL v36 = v34 == 0;
              }
              char v37 = !v36;
              *v31++ = v37;
              --v33;
            }
            while (v33 > 1);
          }
          return;
        case 2:
          int v38 = *(_DWORD *)(*a1 + 160);
          if (v38 >= 1)
          {
            int v39 = **(unsigned __int8 **)(*a2 + 152);
            v40 = *(char **)(*(void *)a3 + 152);
            v41 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v42 = v38 + 1;
            do
            {
              int v44 = *v41++;
              int v43 = v44;
              if (v39) {
                BOOL v45 = v43 == 0;
              }
              else {
                BOOL v45 = 0;
              }
              char v46 = v45;
              *v40++ = v46;
              --v42;
            }
            while (v42 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            v48 = *(char **)(*(void *)a3 + 152);
            v49 = *(unsigned __int8 **)(*a2 + 152);
            v50 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v52 = *v50++;
              BOOL v7 = v52 == 0;
              int v54 = *v49++;
              int v53 = v54;
              char v56 = v7 && v53 != 0;
              *v48++ = v56;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          v20 = *(void **)a3;
          uint64_t v21 = *a1;
          v22 = *(int **)*a1;
          uint64_t v23 = (*(void *)(*a1 + 8) - (void)v22) >> 2;
          uint64_t v24 = (v23 - 1);
          if ((int)v24 >= -1) {
            int v25 = -1;
          }
          else {
            int v25 = v23 - 1;
          }
          int v26 = v25 + 1;
          int v27 = v23 + 1;
          break;
      }
      while (1)
      {
        unsigned int v28 = v27 - 2;
        if (v27 - 2 < 0) {
          break;
        }
        --v27;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v28) != *(void *)(v20[3] + 8 * v28)) {
          goto LABEL_180;
        }
      }
      int v27 = v26;
LABEL_180:
      v231 = (void *)*a2;
      v232 = *(int **)*a2;
      uint64_t v233 = (v231[1] - (void)v232) >> 2;
      uint64_t v234 = (v233 - 1);
      if ((int)v234 >= -1) {
        int v235 = -1;
      }
      else {
        int v235 = v233 - 1;
      }
      int v236 = v235 + 1;
      int v237 = v233 + 1;
      while (1)
      {
        unsigned int v238 = v237 - 2;
        if (v237 - 2 < 0) {
          break;
        }
        --v237;
        if (*(void *)(v231[3] + 8 * v238) != *(void *)(v20[3] + 8 * v238)) {
          goto LABEL_236;
        }
      }
      int v237 = v236;
LABEL_236:
      int v287 = v23 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(*(void *)(v21 + 24) + 8 * v288)) {
          goto LABEL_271;
        }
      }
      int v287 = v26;
LABEL_271:
      int v301 = v233 + 1;
      while (1)
      {
        unsigned int v302 = v301 - 2;
        if (v301 - 2 < 0) {
          break;
        }
        --v301;
        if (*(void *)(v231[3] + 8 * v302)) {
          goto LABEL_306;
        }
      }
      int v301 = v236;
LABEL_306:
      unint64_t v315 = (uint64_t)(v20[1] - *v20) >> 2;
      if (v27 <= v237) {
        int v316 = v237;
      }
      else {
        int v316 = v27;
      }
      if (v27 <= v301) {
        int v27 = v301;
      }
      if (v287 > v237) {
        int v237 = v287;
      }
      if (v315 > v237)
      {
        int v317 = 1;
      }
      else
      {
        int v237 = (uint64_t)(v20[1] - *v20) >> 2;
        int v317 = 4;
      }
      if (v315 > v27)
      {
        int v318 = 2;
      }
      else
      {
        int v27 = v237;
        int v318 = v317;
      }
      if (v315 > v316)
      {
        int v27 = v316;
        int v318 = 3;
      }
      uint64_t v2049 = v234;
      uint64_t v2063 = v24;
      if (!v27) {
        goto LABEL_341;
      }
      unint64_t v319 = *(void *)(v20[3] + 8 * (v27 - 1));
      if (v319 < 0x10) {
        goto LABEL_341;
      }
      switch(v318)
      {
        case 1:
          if (v27 == 2)
          {
            uint64_t v1420 = *v22;
            if (v1420)
            {
              uint64_t v1421 = 0;
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = *(void *)(v21 + 152);
              uint64_t v1425 = v231[19];
              uint64_t v1426 = v20[19];
              unint64_t v1427 = v22[1];
              v1428 = *(uint64_t **)(v21 + 24);
              uint64_t v1429 = *v1428;
              uint64_t v1430 = v1428[1];
              v1431 = (uint64_t *)v231[3];
              uint64_t v1433 = *v1431;
              uint64_t v1432 = v1431[1];
              if (v1427 <= 1) {
                uint64_t v1434 = 1;
              }
              else {
                uint64_t v1434 = v22[1];
              }
              uint64_t v1435 = v1429 - v1430 * v1427;
              uint64_t v1436 = v1433 - v1432 * v232[1];
              do
              {
                if (v1427)
                {
                  uint64_t v1437 = 0;
                  uint64_t v1438 = v1425 + v1422;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1439 = 0;
                      int v1440 = *(unsigned __int8 *)(v1424 + v1423);
                      unsigned int v1441 = v319 + 1;
                      do
                      {
                        if (v1440) {
                          BOOL v1442 = 1;
                        }
                        else {
                          BOOL v1442 = *(unsigned char *)(v1438 + v1439) == 0;
                        }
                        char v1443 = !v1442;
                        *(unsigned char *)(v1426 + v1439) = v1443;
                        --v1441;
                        ++v1439;
                      }
                      while (v1441 > 1);
                    }
                    v1423 += v1430;
                    v1422 += v1432;
                    v1426 += (int)v319;
                    ++v1437;
                    v1438 += v1432;
                  }
                  while (v1437 != v1434);
                }
                v1423 += v1435;
                v1422 += v1436;
                ++v1421;
              }
              while (v1421 != v1420);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1020 = *v22;
            if (v1020)
            {
              uint64_t v1021 = 0;
              uint64_t v1022 = 0;
              uint64_t v1023 = *(void *)(v21 + 152);
              uint64_t v1024 = v231[19];
              uint64_t v1025 = v20[19];
              uint64_t v1026 = **(void **)(v21 + 24);
              uint64_t v1027 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1028 = 0;
                  int v1029 = *(unsigned __int8 *)(v1023 + v1022);
                  unsigned int v1030 = v319 + 1;
                  do
                  {
                    if (v1029) {
                      BOOL v1031 = 1;
                    }
                    else {
                      BOOL v1031 = *(unsigned char *)(v1024 + v1028) == 0;
                    }
                    char v1032 = !v1031;
                    *(unsigned char *)(v1025 + v1028) = v1032;
                    --v1030;
                    ++v1028;
                  }
                  while (v1030 > 1);
                }
                v1022 += v1026;
                v1025 += (int)v319;
                ++v1021;
                v1024 += v1027;
              }
              while (v1021 != v1020);
            }
          }
          else
          {
            unint64_t v2000 = v20[6];
            if (v2000)
            {
              unint64_t v2035 = 0;
              uint64_t v1925 = v231[19];
              uint64_t v1951 = *(void *)(v21 + 152);
              uint64_t v1444 = v20[19];
              do
              {
                uint64_t v1445 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1446 = *(void *)(v21 + 24);
                  int quot = v2035;
                  do
                  {
                    ldiv_t v1448 = ldiv(quot, v22[v24]);
                    int quot = v1448.quot;
                    v1445 += *(void *)(v1446 + 8 * v24--) * v1448.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1449 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1450) = 0;
                }
                else
                {
                  uint64_t v1450 = 0;
                  uint64_t v1451 = v231[3];
                  int v1452 = v2035;
                  do
                  {
                    ldiv_t v1453 = ldiv(v1452, v232[v1449]);
                    int v1452 = v1453.quot;
                    v1450 += *(void *)(v1451 + 8 * v1449--) * v1453.rem;
                  }
                  while (v1449 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1454 = 0;
                  int v1455 = *(unsigned __int8 *)(v1951 + (int)v1445);
                  unsigned int v1456 = v319 + 1;
                  do
                  {
                    if (v1455) {
                      BOOL v1457 = 1;
                    }
                    else {
                      BOOL v1457 = *(unsigned char *)(v1925 + (int)v1450 + v1454) == 0;
                    }
                    char v1458 = !v1457;
                    *(unsigned char *)(v1444 + v1454) = v1458;
                    --v1456;
                    ++v1454;
                  }
                  while (v1456 > 1);
                }
                v1444 += (int)v319;
                v2035 += (int)v319;
              }
              while (v2035 < v2000);
            }
          }
          break;
        case 2:
          if (v27 == 2)
          {
            uint64_t v1459 = *v22;
            if (v1459)
            {
              uint64_t v1460 = 0;
              uint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = *(void *)(v21 + 152);
              uint64_t v1464 = v231[19];
              uint64_t v1465 = v20[19];
              unint64_t v1466 = v22[1];
              v1467 = *(uint64_t **)(v21 + 24);
              uint64_t v1468 = *v1467;
              uint64_t v1469 = v1467[1];
              v1470 = (uint64_t *)v231[3];
              uint64_t v1472 = *v1470;
              uint64_t v1471 = v1470[1];
              if (v1466 <= 1) {
                uint64_t v1473 = 1;
              }
              else {
                uint64_t v1473 = v22[1];
              }
              uint64_t v1474 = v1468 - v1469 * v1466;
              uint64_t v1475 = v1472 - v1471 * v232[1];
              do
              {
                if (v1466)
                {
                  uint64_t v1476 = 0;
                  uint64_t v1477 = v1463 + v1462;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1478 = 0;
                      int v1479 = *(unsigned __int8 *)(v1464 + v1461);
                      unsigned int v1480 = v319 + 1;
                      do
                      {
                        if (v1479) {
                          BOOL v1481 = *(unsigned char *)(v1477 + v1478) == 0;
                        }
                        else {
                          BOOL v1481 = 0;
                        }
                        char v1482 = v1481;
                        *(unsigned char *)(v1465 + v1478) = v1482;
                        --v1480;
                        ++v1478;
                      }
                      while (v1480 > 1);
                    }
                    v1462 += v1469;
                    v1461 += v1471;
                    v1465 += (int)v319;
                    ++v1476;
                    v1477 += v1469;
                  }
                  while (v1476 != v1473);
                }
                v1462 += v1474;
                v1461 += v1475;
                ++v1460;
              }
              while (v1460 != v1459);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v1033 = *v22;
            if (v1033)
            {
              uint64_t v1034 = 0;
              uint64_t v1035 = 0;
              uint64_t v1036 = *(void *)(v21 + 152);
              uint64_t v1037 = v231[19];
              uint64_t v1038 = v20[19];
              uint64_t v1039 = **(void **)(v21 + 24);
              uint64_t v1040 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v1041 = 0;
                  int v1042 = *(unsigned __int8 *)(v1037 + v1035);
                  unsigned int v1043 = v319 + 1;
                  do
                  {
                    if (v1042) {
                      BOOL v1044 = *(unsigned char *)(v1036 + v1041) == 0;
                    }
                    else {
                      BOOL v1044 = 0;
                    }
                    char v1045 = v1044;
                    *(unsigned char *)(v1038 + v1041) = v1045;
                    --v1043;
                    ++v1041;
                  }
                  while (v1043 > 1);
                }
                v1035 += v1040;
                v1038 += (int)v319;
                ++v1034;
                v1036 += v1039;
              }
              while (v1034 != v1033);
            }
          }
          else
          {
            unint64_t v2001 = v20[6];
            if (v2001)
            {
              unint64_t v2036 = 0;
              uint64_t v1926 = v231[19];
              uint64_t v1952 = *(void *)(v21 + 152);
              uint64_t v1483 = v20[19];
              do
              {
                uint64_t v1484 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1485 = *(void *)(v21 + 24);
                  int v1486 = v2036;
                  do
                  {
                    ldiv_t v1487 = ldiv(v1486, v22[v24]);
                    int v1486 = v1487.quot;
                    v1484 += *(void *)(v1485 + 8 * v24--) * v1487.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1488 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1489) = 0;
                }
                else
                {
                  uint64_t v1489 = 0;
                  uint64_t v1490 = v231[3];
                  int v1491 = v2036;
                  do
                  {
                    ldiv_t v1492 = ldiv(v1491, v232[v1488]);
                    int v1491 = v1492.quot;
                    v1489 += *(void *)(v1490 + 8 * v1488--) * v1492.rem;
                  }
                  while (v1488 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1493 = 0;
                  int v1494 = *(unsigned __int8 *)(v1926 + (int)v1489);
                  unsigned int v1495 = v319 + 1;
                  do
                  {
                    if (v1494) {
                      BOOL v1496 = *(unsigned char *)(v1952 + (int)v1484 + v1493) == 0;
                    }
                    else {
                      BOOL v1496 = 0;
                    }
                    char v1497 = v1496;
                    *(unsigned char *)(v1483 + v1493) = v1497;
                    --v1495;
                    ++v1493;
                  }
                  while (v1495 > 1);
                }
                v1483 += (int)v319;
                v2036 += (int)v319;
              }
              while (v2036 < v2001);
            }
          }
          break;
        case 3:
          if (v27 == 2)
          {
            uint64_t v1178 = *v22;
            if (v1178)
            {
              uint64_t v1179 = 0;
              uint64_t v1180 = 0;
              uint64_t v1181 = 0;
              uint64_t v1182 = *(void *)(v21 + 152);
              uint64_t v1183 = v231[19];
              uint64_t v1184 = v20[19];
              unint64_t v1185 = v22[1];
              v1186 = *(uint64_t **)(v21 + 24);
              uint64_t v1187 = *v1186;
              uint64_t v1188 = v1186[1];
              v1189 = (uint64_t *)v231[3];
              uint64_t v1191 = *v1189;
              uint64_t v1190 = v1189[1];
              if (v1185 <= 1) {
                uint64_t v1192 = 1;
              }
              else {
                uint64_t v1192 = v22[1];
              }
              uint64_t v1193 = v1187 - v1188 * v1185;
              uint64_t v1194 = v1191 - v1190 * v232[1];
              do
              {
                if (v1185)
                {
                  uint64_t v1195 = 0;
                  uint64_t v1196 = v1183 + v1180;
                  uint64_t v1197 = v1182 + v1181;
                  do
                  {
                    if ((int)v319 >= 1)
                    {
                      uint64_t v1198 = 0;
                      unsigned int v1199 = v319 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1197 + v1198)) {
                          BOOL v1200 = 1;
                        }
                        else {
                          BOOL v1200 = *(unsigned char *)(v1196 + v1198) == 0;
                        }
                        char v1201 = !v1200;
                        *(unsigned char *)(v1184 + v1198) = v1201;
                        --v1199;
                        ++v1198;
                      }
                      while (v1199 > 1);
                    }
                    v1181 += v1188;
                    v1180 += v1190;
                    v1184 += (int)v319;
                    ++v1195;
                    v1196 += v1190;
                    v1197 += v1188;
                  }
                  while (v1195 != v1192);
                }
                v1181 += v1193;
                v1180 += v1194;
                ++v1179;
              }
              while (v1179 != v1178);
            }
          }
          else if (v27 == 1)
          {
            uint64_t v320 = *v22;
            if (v320)
            {
              uint64_t v321 = 0;
              uint64_t v322 = *(void *)(v21 + 152);
              uint64_t v323 = v231[19];
              uint64_t v324 = v20[19];
              uint64_t v325 = **(void **)(v21 + 24);
              uint64_t v326 = *(void *)v231[3];
              do
              {
                if ((int)v319 >= 1)
                {
                  uint64_t v327 = 0;
                  unsigned int v328 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v322 + v327)) {
                      BOOL v329 = 1;
                    }
                    else {
                      BOOL v329 = *(unsigned char *)(v323 + v327) == 0;
                    }
                    char v330 = !v329;
                    *(unsigned char *)(v324 + v327) = v330;
                    --v328;
                    ++v327;
                  }
                  while (v328 > 1);
                }
                v324 += (int)v319;
                ++v321;
                v323 += v326;
                v322 += v325;
              }
              while (v321 != v320);
            }
          }
          else
          {
            unint64_t v1993 = v20[6];
            if (v1993)
            {
              unint64_t v2028 = 0;
              uint64_t v1918 = v231[19];
              uint64_t v1944 = *(void *)(v21 + 152);
              uint64_t v1202 = v20[19];
              do
              {
                uint64_t v1203 = 0;
                if ((v24 & 0x80000000) == 0)
                {
                  uint64_t v1204 = *(void *)(v21 + 24);
                  int v1205 = v2028;
                  do
                  {
                    ldiv_t v1206 = ldiv(v1205, v22[v24]);
                    int v1205 = v1206.quot;
                    v1203 += *(void *)(v1204 + 8 * v24--) * v1206.rem;
                  }
                  while (v24 != -1);
                }
                uint64_t v1207 = v2049;
                if ((v2049 & 0x80000000) != 0)
                {
                  LODWORD(v1208) = 0;
                }
                else
                {
                  uint64_t v1208 = 0;
                  uint64_t v1209 = v231[3];
                  int v1210 = v2028;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v232[v1207]);
                    int v1210 = v1211.quot;
                    v1208 += *(void *)(v1209 + 8 * v1207--) * v1211.rem;
                  }
                  while (v1207 != -1);
                }
                uint64_t v24 = v2063;
                if ((int)v319 >= 1)
                {
                  uint64_t v1212 = 0;
                  unsigned int v1213 = v319 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1944 + (int)v1203 + v1212)) {
                      BOOL v1214 = 1;
                    }
                    else {
                      BOOL v1214 = *(unsigned char *)(v1918 + (int)v1208 + v1212) == 0;
                    }
                    char v1215 = !v1214;
                    *(unsigned char *)(v1202 + v1212) = v1215;
                    --v1213;
                    ++v1212;
                  }
                  while (v1213 > 1);
                }
                v1202 += (int)v319;
                v2028 += (int)v319;
              }
              while (v2028 < v1993);
            }
          }
          break;
        default:
LABEL_341:
          switch(v315)
          {
            case 1uLL:
              uint64_t v331 = v20[6];
              if (v331)
              {
                v332 = *(unsigned char **)(v21 + 152);
                v333 = (unsigned char *)v231[19];
                v334 = (char *)v20[19];
                uint64_t v335 = **(void **)(v21 + 24);
                uint64_t v336 = *(void *)v231[3];
                do
                {
                  if (*v332) {
                    BOOL v337 = 1;
                  }
                  else {
                    BOOL v337 = *v333 == 0;
                  }
                  char v338 = !v337;
                  *v334++ = v338;
                  v333 += v336;
                  v332 += v335;
                  --v331;
                }
                while (v331);
              }
              break;
            case 2uLL:
              uint64_t v472 = *v22;
              if (v472)
              {
                uint64_t v473 = 0;
                uint64_t v474 = 0;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                uint64_t v477 = *(void *)(v21 + 152);
                uint64_t v478 = v231[19];
                uint64_t v479 = v20[19];
                unint64_t v480 = v22[1];
                v481 = *(uint64_t **)(v21 + 24);
                uint64_t v482 = *v481;
                uint64_t v483 = v481[1];
                v484 = (uint64_t *)v231[3];
                uint64_t v485 = *v484;
                uint64_t v486 = v484[1];
                uint64_t v487 = v485 - v486 * v232[1];
                if (v480 <= 1) {
                  uint64_t v488 = 1;
                }
                else {
                  uint64_t v488 = v22[1];
                }
                uint64_t v489 = v482 - v483 * v480;
                do
                {
                  if (v480)
                  {
                    uint64_t v490 = v474 + v488;
                    v491 = (char *)(v479 + v474);
                    uint64_t v492 = v488;
                    do
                    {
                      if (*(unsigned char *)(v477 + v476)) {
                        BOOL v493 = 1;
                      }
                      else {
                        BOOL v493 = *(unsigned char *)(v478 + v475) == 0;
                      }
                      char v494 = !v493;
                      *v491++ = v494;
                      v476 += v483;
                      v475 += v486;
                      --v492;
                    }
                    while (v492);
                    uint64_t v474 = v490;
                  }
                  v476 += v489;
                  v475 += v487;
                  ++v473;
                }
                while (v473 != v472);
              }
              break;
            case 3uLL:
              uint64_t v495 = *v22;
              if (v495)
              {
                uint64_t v496 = 0;
                uint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = *(void *)(v21 + 152);
                uint64_t v501 = v231[19];
                uint64_t v502 = v20[19];
                unint64_t v503 = v22[1];
                v504 = *(void **)(v21 + 24);
                uint64_t v505 = v504[1];
                v506 = (void *)v231[3];
                uint64_t v507 = v506[1];
                uint64_t v508 = *v506 - v507 * v232[1];
                if (v503 <= 1) {
                  uint64_t v509 = 1;
                }
                else {
                  uint64_t v509 = v22[1];
                }
                unint64_t v510 = *v504 - v505 * v503;
                do
                {
                  if (v503)
                  {
                    uint64_t v511 = 0;
                    unint64_t v512 = v22[2];
                    uint64_t v513 = v504[2];
                    uint64_t v514 = v506[2];
                    if (v512 <= 1) {
                      uint64_t v515 = 1;
                    }
                    else {
                      uint64_t v515 = v22[2];
                    }
                    uint64_t v516 = v507 - v514 * v232[2];
                    do
                    {
                      uint64_t v517 = v515;
                      if (v512)
                      {
                        do
                        {
                          if (*(unsigned char *)(v500 + v499)) {
                            BOOL v518 = 1;
                          }
                          else {
                            BOOL v518 = *(unsigned char *)(v501 + v498) == 0;
                          }
                          char v519 = !v518;
                          *(unsigned char *)(v502 + v497++) = v519;
                          v499 += v513;
                          v498 += v514;
                          --v517;
                        }
                        while (v517);
                      }
                      v499 += v505 - v513 * v512;
                      v498 += v516;
                      ++v511;
                    }
                    while (v511 != v509);
                  }
                  v499 += v510;
                  v498 += v508;
                  ++v496;
                }
                while (v496 != v495);
              }
              break;
            case 4uLL:
              uint64_t v2070 = *v22;
              if (v2070)
              {
                uint64_t v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = 0;
                uint64_t v524 = *(void *)(v21 + 152);
                uint64_t v525 = v231[19];
                uint64_t v526 = v20[19];
                unint64_t v527 = v22[1];
                v528 = *(void **)(v21 + 24);
                v529 = (void *)v231[3];
                uint64_t v1966 = v529[1];
                uint64_t v1980 = v528[1];
                if (v527 <= 1) {
                  uint64_t v530 = 1;
                }
                else {
                  uint64_t v530 = v22[1];
                }
                unint64_t v2015 = *v528 - v528[1] * v527;
                uint64_t v2056 = *v529 - v1966 * v232[1];
                do
                {
                  if (v527)
                  {
                    uint64_t v531 = 0;
                    unint64_t v532 = v22[2];
                    uint64_t v533 = v528[2];
                    uint64_t v534 = v529[2];
                    if (v532 <= 1) {
                      uint64_t v535 = 1;
                    }
                    else {
                      uint64_t v535 = v22[2];
                    }
                    uint64_t v536 = v1966 - v534 * v232[2];
                    do
                    {
                      if (v532)
                      {
                        uint64_t v537 = 0;
                        unint64_t v538 = v22[3];
                        uint64_t v539 = v528[3];
                        uint64_t v540 = v529[3];
                        if (v538 <= 1) {
                          uint64_t v541 = 1;
                        }
                        else {
                          uint64_t v541 = v22[3];
                        }
                        uint64_t v542 = v534 - v540 * v232[3];
                        do
                        {
                          uint64_t v543 = v541;
                          if (v538)
                          {
                            do
                            {
                              if (*(unsigned char *)(v524 + v523)) {
                                BOOL v544 = 1;
                              }
                              else {
                                BOOL v544 = *(unsigned char *)(v525 + v522) == 0;
                              }
                              char v545 = !v544;
                              *(unsigned char *)(v526 + v521++) = v545;
                              v523 += v539;
                              v522 += v540;
                              --v543;
                            }
                            while (v543);
                          }
                          v523 += v533 - v539 * v538;
                          v522 += v542;
                          ++v537;
                        }
                        while (v537 != v535);
                      }
                      v523 += v1980 - v533 * v532;
                      v522 += v536;
                      ++v531;
                    }
                    while (v531 != v530);
                  }
                  v523 += v2015;
                  v522 += v2056;
                  ++v520;
                }
                while (v520 != v2070);
              }
              break;
            default:
              uint64_t v459 = v20[6];
              if (v459)
              {
                uint64_t v460 = 0;
                uint64_t v1979 = v231[19];
                uint64_t v2014 = *(void *)(v21 + 152);
                uint64_t v1965 = v20[19];
                do
                {
                  uint64_t v461 = 0;
                  if ((v24 & 0x80000000) == 0)
                  {
                    uint64_t v462 = *(void *)(v21 + 24);
                    int v463 = v460;
                    do
                    {
                      ldiv_t v464 = ldiv(v463, v22[v24]);
                      int v463 = v464.quot;
                      v461 += *(void *)(v462 + 8 * v24--) * v464.rem;
                    }
                    while (v24 != -1);
                  }
                  uint64_t v465 = v2049;
                  if ((v2049 & 0x80000000) != 0)
                  {
                    LODWORD(v466) = 0;
                  }
                  else
                  {
                    uint64_t v466 = 0;
                    uint64_t v467 = v231[3];
                    int v468 = v460;
                    do
                    {
                      ldiv_t v469 = ldiv(v468, v232[v465]);
                      int v468 = v469.quot;
                      v466 += *(void *)(v467 + 8 * v465--) * v469.rem;
                    }
                    while (v465 != -1);
                  }
                  if (*(unsigned char *)(v2014 + (int)v461)) {
                    BOOL v470 = 1;
                  }
                  else {
                    BOOL v470 = *(unsigned char *)(v1979 + (int)v466) == 0;
                  }
                  char v471 = !v470;
                  *(unsigned char *)(v1965 + v460++) = v471;
                  uint64_t v24 = v2063;
                }
                while (v460 != v459);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          unsigned int v10 = **(unsigned __int8 **)(*a1 + 152);
          unsigned int v11 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v66 = *(_DWORD *)(*a2 + 160);
          if (v66 >= 1)
          {
            unsigned int v67 = **(unsigned __int8 **)(*a1 + 152);
            v68 = *(BOOL **)(*(void *)a3 + 152);
            v69 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v70 = v66 + 1;
            do
            {
              unsigned int v71 = *v69++;
              *v68++ = v67 < v71;
              --v70;
            }
            while (v70 > 1);
          }
          return;
        case 2:
          int v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            unsigned int v73 = **(unsigned __int8 **)(*a2 + 152);
            v74 = *(BOOL **)(*(void *)a3 + 152);
            v75 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              unsigned int v77 = *v75++;
              *v74++ = v77 < v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            v79 = *(BOOL **)(*(void *)a3 + 152);
            v80 = *(unsigned __int8 **)(*a2 + 152);
            v81 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              unsigned int v84 = *v81++;
              unsigned int v83 = v84;
              unsigned int v85 = *v80++;
              *v79++ = v83 < v85;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          v57 = *(void **)a3;
          uint64_t v58 = *a1;
          v59 = *(int **)*a1;
          uint64_t v60 = (*(void *)(*a1 + 8) - (void)v59) >> 2;
          uint64_t v61 = (v60 - 1);
          if ((int)v61 >= -1) {
            int v62 = -1;
          }
          else {
            int v62 = v60 - 1;
          }
          int v63 = v62 + 1;
          int v64 = v60 + 1;
          break;
      }
      while (1)
      {
        unsigned int v65 = v64 - 2;
        if (v64 - 2 < 0) {
          break;
        }
        --v64;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v65) != *(void *)(v57[3] + 8 * v65)) {
          goto LABEL_188;
        }
      }
      int v64 = v63;
LABEL_188:
      v239 = (void *)*a2;
      v240 = *(int **)*a2;
      uint64_t v241 = (v239[1] - (void)v240) >> 2;
      uint64_t v242 = (v241 - 1);
      if ((int)v242 >= -1) {
        int v243 = -1;
      }
      else {
        int v243 = v241 - 1;
      }
      int v244 = v243 + 1;
      int v245 = v241 + 1;
      while (1)
      {
        unsigned int v246 = v245 - 2;
        if (v245 - 2 < 0) {
          break;
        }
        --v245;
        if (*(void *)(v239[3] + 8 * v246) != *(void *)(v57[3] + 8 * v246)) {
          goto LABEL_241;
        }
      }
      int v245 = v244;
LABEL_241:
      int v289 = v60 + 1;
      while (1)
      {
        unsigned int v290 = v289 - 2;
        if (v289 - 2 < 0) {
          break;
        }
        --v289;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v290)) {
          goto LABEL_276;
        }
      }
      int v289 = v63;
LABEL_276:
      int v303 = v241 + 1;
      while (1)
      {
        unsigned int v304 = v303 - 2;
        if (v303 - 2 < 0) {
          break;
        }
        --v303;
        if (*(void *)(v239[3] + 8 * v304)) {
          goto LABEL_353;
        }
      }
      int v303 = v244;
LABEL_353:
      unint64_t v339 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v245) {
        int v340 = v245;
      }
      else {
        int v340 = v64;
      }
      if (v64 <= v303) {
        int v64 = v303;
      }
      if (v289 > v245) {
        int v245 = v289;
      }
      if (v339 > v245)
      {
        int v341 = 1;
      }
      else
      {
        int v245 = (uint64_t)(v57[1] - *v57) >> 2;
        int v341 = 4;
      }
      if (v339 > v64)
      {
        int v342 = 2;
      }
      else
      {
        int v64 = v245;
        int v342 = v341;
      }
      if (v339 > v340)
      {
        int v64 = v340;
        int v342 = 3;
      }
      uint64_t v2050 = v242;
      uint64_t v2064 = v61;
      if (!v64) {
        goto LABEL_382;
      }
      unint64_t v343 = *(void *)(v57[3] + 8 * (v64 - 1));
      if (v343 < 0x10) {
        goto LABEL_382;
      }
      switch(v342)
      {
        case 1:
          if (v64 == 2)
          {
            uint64_t v1498 = *v59;
            if (v1498)
            {
              uint64_t v1499 = 0;
              uint64_t v1500 = 0;
              uint64_t v1501 = 0;
              uint64_t v1502 = *(void *)(v58 + 152);
              uint64_t v1503 = v239[19];
              uint64_t v1504 = v57[19];
              unint64_t v1505 = v59[1];
              v1506 = *(uint64_t **)(v58 + 24);
              uint64_t v1507 = *v1506;
              uint64_t v1508 = v1506[1];
              v1509 = (uint64_t *)v239[3];
              uint64_t v1511 = *v1509;
              uint64_t v1510 = v1509[1];
              if (v1505 <= 1) {
                uint64_t v1512 = 1;
              }
              else {
                uint64_t v1512 = v59[1];
              }
              uint64_t v1513 = v1507 - v1508 * v1505;
              uint64_t v1514 = v1511 - v1510 * v240[1];
              do
              {
                if (v1505)
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v1503 + v1500;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1517 = 0;
                      unsigned int v1518 = *(unsigned __int8 *)(v1502 + v1501);
                      unsigned int v1519 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1504 + v1517) = v1518 < *(unsigned __int8 *)(v1516 + v1517);
                        --v1519;
                        ++v1517;
                      }
                      while (v1519 > 1);
                    }
                    v1501 += v1508;
                    v1500 += v1510;
                    v1504 += (int)v343;
                    ++v1515;
                    v1516 += v1510;
                  }
                  while (v1515 != v1512);
                }
                v1501 += v1513;
                v1500 += v1514;
                ++v1499;
              }
              while (v1499 != v1498);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1046 = *v59;
            if (v1046)
            {
              uint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1049 = *(void *)(v58 + 152);
              uint64_t v1050 = v239[19];
              uint64_t v1051 = v57[19];
              uint64_t v1052 = **(void **)(v58 + 24);
              uint64_t v1053 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1054 = 0;
                  unsigned int v1055 = *(unsigned __int8 *)(v1049 + v1048);
                  unsigned int v1056 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1051 + v1054) = v1055 < *(unsigned __int8 *)(v1050 + v1054);
                    --v1056;
                    ++v1054;
                  }
                  while (v1056 > 1);
                }
                v1048 += v1052;
                v1051 += (int)v343;
                ++v1047;
                v1050 += v1053;
              }
              while (v1047 != v1046);
            }
          }
          else
          {
            unint64_t v2002 = v57[6];
            if (v2002)
            {
              unint64_t v2037 = 0;
              uint64_t v1927 = v239[19];
              uint64_t v1953 = *(void *)(v58 + 152);
              uint64_t v1520 = v57[19];
              do
              {
                uint64_t v1521 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1522 = *(void *)(v58 + 24);
                  int v1523 = v2037;
                  do
                  {
                    ldiv_t v1524 = ldiv(v1523, v59[v61]);
                    int v1523 = v1524.quot;
                    v1521 += *(void *)(v1522 + 8 * v61--) * v1524.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1525 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1526) = 0;
                }
                else
                {
                  uint64_t v1526 = 0;
                  uint64_t v1527 = v239[3];
                  int v1528 = v2037;
                  do
                  {
                    ldiv_t v1529 = ldiv(v1528, v240[v1525]);
                    int v1528 = v1529.quot;
                    v1526 += *(void *)(v1527 + 8 * v1525--) * v1529.rem;
                  }
                  while (v1525 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1530 = 0;
                  unsigned int v1531 = *(unsigned __int8 *)(v1953 + (int)v1521);
                  unsigned int v1532 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1520 + v1530) = v1531 < *(unsigned __int8 *)(v1927 + (int)v1526 + v1530);
                    --v1532;
                    ++v1530;
                  }
                  while (v1532 > 1);
                }
                v1520 += (int)v343;
                v2037 += (int)v343;
              }
              while (v2037 < v2002);
            }
          }
          break;
        case 2:
          if (v64 == 2)
          {
            uint64_t v1533 = *v59;
            if (v1533)
            {
              uint64_t v1534 = 0;
              uint64_t v1535 = 0;
              uint64_t v1536 = 0;
              uint64_t v1537 = *(void *)(v58 + 152);
              uint64_t v1538 = v239[19];
              uint64_t v1539 = v57[19];
              unint64_t v1540 = v59[1];
              v1541 = *(uint64_t **)(v58 + 24);
              uint64_t v1542 = *v1541;
              uint64_t v1543 = v1541[1];
              v1544 = (uint64_t *)v239[3];
              uint64_t v1546 = *v1544;
              uint64_t v1545 = v1544[1];
              if (v1540 <= 1) {
                uint64_t v1547 = 1;
              }
              else {
                uint64_t v1547 = v59[1];
              }
              uint64_t v1548 = v1542 - v1543 * v1540;
              uint64_t v1549 = v1546 - v1545 * v240[1];
              do
              {
                if (v1540)
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v1537 + v1536;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1552 = 0;
                      unsigned int v1553 = *(unsigned __int8 *)(v1538 + v1535);
                      unsigned int v1554 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1539 + v1552) = *(unsigned __int8 *)(v1551 + v1552) < v1553;
                        --v1554;
                        ++v1552;
                      }
                      while (v1554 > 1);
                    }
                    v1536 += v1543;
                    v1535 += v1545;
                    v1539 += (int)v343;
                    ++v1550;
                    v1551 += v1543;
                  }
                  while (v1550 != v1547);
                }
                v1536 += v1548;
                v1535 += v1549;
                ++v1534;
              }
              while (v1534 != v1533);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v1057 = *v59;
            if (v1057)
            {
              uint64_t v1058 = 0;
              uint64_t v1059 = 0;
              uint64_t v1060 = *(void *)(v58 + 152);
              uint64_t v1061 = v239[19];
              uint64_t v1062 = v57[19];
              uint64_t v1063 = **(void **)(v58 + 24);
              uint64_t v1064 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v1065 = 0;
                  unsigned int v1066 = *(unsigned __int8 *)(v1061 + v1059);
                  unsigned int v1067 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1062 + v1065) = *(unsigned __int8 *)(v1060 + v1065) < v1066;
                    --v1067;
                    ++v1065;
                  }
                  while (v1067 > 1);
                }
                v1059 += v1064;
                v1062 += (int)v343;
                ++v1058;
                v1060 += v1063;
              }
              while (v1058 != v1057);
            }
          }
          else
          {
            unint64_t v2003 = v57[6];
            if (v2003)
            {
              unint64_t v2038 = 0;
              uint64_t v1928 = v239[19];
              uint64_t v1954 = *(void *)(v58 + 152);
              uint64_t v1555 = v57[19];
              do
              {
                uint64_t v1556 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1557 = *(void *)(v58 + 24);
                  int v1558 = v2038;
                  do
                  {
                    ldiv_t v1559 = ldiv(v1558, v59[v61]);
                    int v1558 = v1559.quot;
                    v1556 += *(void *)(v1557 + 8 * v61--) * v1559.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1560 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1561) = 0;
                }
                else
                {
                  uint64_t v1561 = 0;
                  uint64_t v1562 = v239[3];
                  int v1563 = v2038;
                  do
                  {
                    ldiv_t v1564 = ldiv(v1563, v240[v1560]);
                    int v1563 = v1564.quot;
                    v1561 += *(void *)(v1562 + 8 * v1560--) * v1564.rem;
                  }
                  while (v1560 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1565 = 0;
                  unsigned int v1566 = *(unsigned __int8 *)(v1928 + (int)v1561);
                  unsigned int v1567 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1555 + v1565) = *(unsigned __int8 *)(v1954 + (int)v1556 + v1565) < v1566;
                    --v1567;
                    ++v1565;
                  }
                  while (v1567 > 1);
                }
                v1555 += (int)v343;
                v2038 += (int)v343;
              }
              while (v2038 < v2003);
            }
          }
          break;
        case 3:
          if (v64 == 2)
          {
            uint64_t v1216 = *v59;
            if (v1216)
            {
              uint64_t v1217 = 0;
              uint64_t v1218 = 0;
              uint64_t v1219 = 0;
              uint64_t v1220 = *(void *)(v58 + 152);
              uint64_t v1221 = v239[19];
              uint64_t v1222 = v57[19];
              unint64_t v1223 = v59[1];
              v1224 = *(uint64_t **)(v58 + 24);
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              v1227 = (uint64_t *)v239[3];
              uint64_t v1229 = *v1227;
              uint64_t v1228 = v1227[1];
              if (v1223 <= 1) {
                uint64_t v1230 = 1;
              }
              else {
                uint64_t v1230 = v59[1];
              }
              uint64_t v1231 = v1225 - v1226 * v1223;
              uint64_t v1232 = v1229 - v1228 * v240[1];
              do
              {
                if (v1223)
                {
                  uint64_t v1233 = 0;
                  uint64_t v1234 = v1221 + v1218;
                  uint64_t v1235 = v1220 + v1219;
                  do
                  {
                    if ((int)v343 >= 1)
                    {
                      uint64_t v1236 = 0;
                      unsigned int v1237 = v343 + 1;
                      do
                      {
                        *(unsigned char *)(v1222 + v1236) = *(unsigned __int8 *)(v1235 + v1236) < *(unsigned __int8 *)(v1234 + v1236);
                        --v1237;
                        ++v1236;
                      }
                      while (v1237 > 1);
                    }
                    v1219 += v1226;
                    v1218 += v1228;
                    v1222 += (int)v343;
                    ++v1233;
                    v1234 += v1228;
                    v1235 += v1226;
                  }
                  while (v1233 != v1230);
                }
                v1219 += v1231;
                v1218 += v1232;
                ++v1217;
              }
              while (v1217 != v1216);
            }
          }
          else if (v64 == 1)
          {
            uint64_t v344 = *v59;
            if (v344)
            {
              uint64_t v345 = 0;
              uint64_t v346 = *(void *)(v58 + 152);
              uint64_t v347 = v239[19];
              uint64_t v348 = v57[19];
              uint64_t v349 = **(void **)(v58 + 24);
              uint64_t v350 = *(void *)v239[3];
              do
              {
                if ((int)v343 >= 1)
                {
                  uint64_t v351 = 0;
                  unsigned int v352 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v348 + v351) = *(unsigned __int8 *)(v346 + v351) < *(unsigned __int8 *)(v347 + v351);
                    --v352;
                    ++v351;
                  }
                  while (v352 > 1);
                }
                v348 += (int)v343;
                ++v345;
                v347 += v350;
                v346 += v349;
              }
              while (v345 != v344);
            }
          }
          else
          {
            unint64_t v1994 = v57[6];
            if (v1994)
            {
              unint64_t v2029 = 0;
              uint64_t v1919 = v239[19];
              uint64_t v1945 = *(void *)(v58 + 152);
              uint64_t v1238 = v57[19];
              do
              {
                uint64_t v1239 = 0;
                if ((v61 & 0x80000000) == 0)
                {
                  uint64_t v1240 = *(void *)(v58 + 24);
                  int v1241 = v2029;
                  do
                  {
                    ldiv_t v1242 = ldiv(v1241, v59[v61]);
                    int v1241 = v1242.quot;
                    v1239 += *(void *)(v1240 + 8 * v61--) * v1242.rem;
                  }
                  while (v61 != -1);
                }
                uint64_t v1243 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1244) = 0;
                }
                else
                {
                  uint64_t v1244 = 0;
                  uint64_t v1245 = v239[3];
                  int v1246 = v2029;
                  do
                  {
                    ldiv_t v1247 = ldiv(v1246, v240[v1243]);
                    int v1246 = v1247.quot;
                    v1244 += *(void *)(v1245 + 8 * v1243--) * v1247.rem;
                  }
                  while (v1243 != -1);
                }
                uint64_t v61 = v2064;
                if ((int)v343 >= 1)
                {
                  uint64_t v1248 = 0;
                  unsigned int v1249 = v343 + 1;
                  do
                  {
                    *(unsigned char *)(v1238 + v1248) = *(unsigned __int8 *)(v1945 + (int)v1239 + v1248) < *(unsigned __int8 *)(v1919 + (int)v1244 + v1248);
                    --v1249;
                    ++v1248;
                  }
                  while (v1249 > 1);
                }
                v1238 += (int)v343;
                v2029 += (int)v343;
              }
              while (v2029 < v1994);
            }
          }
          break;
        default:
LABEL_382:
          switch(v339)
          {
            case 1uLL:
              uint64_t v353 = v57[6];
              if (v353)
              {
                v354 = *(unsigned __int8 **)(v58 + 152);
                v355 = (unsigned __int8 *)v239[19];
                v356 = (BOOL *)v57[19];
                uint64_t v357 = **(void **)(v58 + 24);
                uint64_t v358 = *(void *)v239[3];
                do
                {
                  *v356++ = *v354 < *v355;
                  v355 += v358;
                  v354 += v357;
                  --v353;
                }
                while (v353);
              }
              break;
            case 2uLL:
              uint64_t v557 = *v59;
              if (v557)
              {
                uint64_t v558 = 0;
                uint64_t v559 = 0;
                uint64_t v560 = 0;
                uint64_t v561 = 0;
                uint64_t v562 = *(void *)(v58 + 152);
                uint64_t v563 = v239[19];
                uint64_t v564 = v57[19];
                unint64_t v565 = v59[1];
                v566 = *(uint64_t **)(v58 + 24);
                uint64_t v567 = *v566;
                uint64_t v568 = v566[1];
                v569 = (uint64_t *)v239[3];
                uint64_t v570 = *v569;
                uint64_t v571 = v569[1];
                uint64_t v572 = v570 - v571 * v240[1];
                if (v565 <= 1) {
                  uint64_t v573 = 1;
                }
                else {
                  uint64_t v573 = v59[1];
                }
                uint64_t v574 = v567 - v568 * v565;
                do
                {
                  if (v565)
                  {
                    uint64_t v575 = v559 + v573;
                    v576 = (BOOL *)(v564 + v559);
                    uint64_t v577 = v573;
                    do
                    {
                      *v576++ = *(unsigned __int8 *)(v562 + v561) < *(unsigned __int8 *)(v563 + v560);
                      v561 += v568;
                      v560 += v571;
                      --v577;
                    }
                    while (v577);
                    uint64_t v559 = v575;
                  }
                  v561 += v574;
                  v560 += v572;
                  ++v558;
                }
                while (v558 != v557);
              }
              break;
            case 3uLL:
              uint64_t v578 = *v59;
              if (v578)
              {
                uint64_t v579 = 0;
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = *(void *)(v58 + 152);
                uint64_t v584 = v239[19];
                uint64_t v585 = v57[19];
                unint64_t v586 = v59[1];
                v587 = *(void **)(v58 + 24);
                uint64_t v588 = v587[1];
                v589 = (void *)v239[3];
                uint64_t v590 = v589[1];
                uint64_t v591 = *v589 - v590 * v240[1];
                if (v586 <= 1) {
                  uint64_t v592 = 1;
                }
                else {
                  uint64_t v592 = v59[1];
                }
                unint64_t v593 = *v587 - v588 * v586;
                do
                {
                  if (v586)
                  {
                    uint64_t v594 = 0;
                    unint64_t v595 = v59[2];
                    uint64_t v596 = v587[2];
                    uint64_t v597 = v589[2];
                    if (v595 <= 1) {
                      uint64_t v598 = 1;
                    }
                    else {
                      uint64_t v598 = v59[2];
                    }
                    uint64_t v599 = v590 - v597 * v240[2];
                    do
                    {
                      uint64_t v600 = v598;
                      if (v595)
                      {
                        do
                        {
                          *(unsigned char *)(v585 + v580++) = *(unsigned __int8 *)(v583 + v582) < *(unsigned __int8 *)(v584 + v581);
                          v582 += v596;
                          v581 += v597;
                          --v600;
                        }
                        while (v600);
                      }
                      v582 += v588 - v596 * v595;
                      v581 += v599;
                      ++v594;
                    }
                    while (v594 != v592);
                  }
                  v582 += v593;
                  v581 += v591;
                  ++v579;
                }
                while (v579 != v578);
              }
              break;
            case 4uLL:
              uint64_t v2071 = *v59;
              if (v2071)
              {
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = *(void *)(v58 + 152);
                uint64_t v606 = v239[19];
                uint64_t v607 = v57[19];
                unint64_t v608 = v59[1];
                v609 = *(void **)(v58 + 24);
                v610 = (void *)v239[3];
                uint64_t v1939 = v610[1];
                uint64_t v1968 = v609[1];
                uint64_t v2017 = *v610 - v1939 * v240[1];
                int v2057 = v59[1];
                if (v608 <= 1) {
                  uint64_t v611 = 1;
                }
                else {
                  uint64_t v611 = v59[1];
                }
                unint64_t v1982 = *v609 - v609[1] * v608;
                do
                {
                  if (v2057)
                  {
                    uint64_t v612 = 0;
                    unint64_t v613 = v59[2];
                    uint64_t v614 = v609[2];
                    uint64_t v615 = v610[2];
                    if (v613 <= 1) {
                      uint64_t v616 = 1;
                    }
                    else {
                      uint64_t v616 = v59[2];
                    }
                    uint64_t v617 = v1939 - v615 * v240[2];
                    do
                    {
                      if (v613)
                      {
                        uint64_t v618 = 0;
                        unint64_t v619 = v59[3];
                        uint64_t v620 = v609[3];
                        uint64_t v621 = v610[3];
                        if (v619 <= 1) {
                          uint64_t v622 = 1;
                        }
                        else {
                          uint64_t v622 = v59[3];
                        }
                        uint64_t v623 = v615 - v621 * v240[3];
                        do
                        {
                          uint64_t v624 = v622;
                          if (v619)
                          {
                            do
                            {
                              *(unsigned char *)(v607 + v602++) = *(unsigned __int8 *)(v605 + v604) < *(unsigned __int8 *)(v606 + v603);
                              v604 += v620;
                              v603 += v621;
                              --v624;
                            }
                            while (v624);
                          }
                          v604 += v614 - v620 * v619;
                          v603 += v623;
                          ++v618;
                        }
                        while (v618 != v616);
                      }
                      v604 += v1968 - v614 * v613;
                      v603 += v617;
                      ++v612;
                    }
                    while (v612 != v611);
                  }
                  v604 += v1982;
                  v603 += v2017;
                  ++v601;
                }
                while (v601 != v2071);
              }
              break;
            default:
              uint64_t v546 = v57[6];
              if (v546)
              {
                uint64_t v547 = 0;
                uint64_t v1981 = v239[19];
                uint64_t v2016 = *(void *)(v58 + 152);
                uint64_t v1967 = v57[19];
                do
                {
                  uint64_t v548 = 0;
                  if ((v61 & 0x80000000) == 0)
                  {
                    uint64_t v549 = *(void *)(v58 + 24);
                    int v550 = v547;
                    do
                    {
                      ldiv_t v551 = ldiv(v550, v59[v61]);
                      int v550 = v551.quot;
                      v548 += *(void *)(v549 + 8 * v61--) * v551.rem;
                    }
                    while (v61 != -1);
                  }
                  uint64_t v552 = v2050;
                  if ((v2050 & 0x80000000) != 0)
                  {
                    LODWORD(v553) = 0;
                  }
                  else
                  {
                    uint64_t v553 = 0;
                    uint64_t v554 = v239[3];
                    int v555 = v547;
                    do
                    {
                      ldiv_t v556 = ldiv(v555, v240[v552]);
                      int v555 = v556.quot;
                      v553 += *(void *)(v554 + 8 * v552--) * v556.rem;
                    }
                    while (v552 != -1);
                  }
                  *(unsigned char *)(v1967 + v547++) = *(unsigned __int8 *)(v2016 + (int)v548) < *(unsigned __int8 *)(v1981 + (int)v553);
                  uint64_t v61 = v2064;
                }
                while (v547 != v546);
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v12)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          unsigned int v11 = **(_DWORD **)(*a2 + 152);
LABEL_13:
          BOOL v8 = v10 < v11;
          goto LABEL_26;
        case 1:
          int v95 = *(_DWORD *)(*a2 + 160);
          if (v95 >= 1)
          {
            unsigned int v96 = **(_DWORD **)(*a1 + 152);
            v97 = *(BOOL **)(*(void *)a3 + 152);
            v98 = *(unsigned int **)(*a2 + 152);
            unsigned int v99 = v95 + 1;
            do
            {
              unsigned int v100 = *v98++;
              *v97++ = v96 < v100;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 2:
          int v101 = *(_DWORD *)(*a1 + 160);
          if (v101 >= 1)
          {
            unsigned int v102 = **(_DWORD **)(*a2 + 152);
            v103 = *(BOOL **)(*(void *)a3 + 152);
            v104 = *(unsigned int **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              unsigned int v106 = *v104++;
              *v103++ = v106 < v102;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        case 3:
          int v107 = *(_DWORD *)(*(void *)a3 + 48);
          if (v107 >= 1)
          {
            v108 = *(BOOL **)(*(void *)a3 + 152);
            v109 = *(unsigned int **)(*a2 + 152);
            v110 = *(unsigned int **)(*a1 + 152);
            unsigned int v111 = v107 + 1;
            do
            {
              unsigned int v113 = *v110++;
              unsigned int v112 = v113;
              unsigned int v114 = *v109++;
              *v108++ = v112 < v114;
              --v111;
            }
            while (v111 > 1);
          }
          return;
        default:
          v86 = *(void **)a3;
          uint64_t v87 = *a1;
          v88 = *(int **)*a1;
          uint64_t v89 = (*(void *)(*a1 + 8) - (void)v88) >> 2;
          uint64_t v90 = (v89 - 1);
          if ((int)v90 >= -1) {
            int v91 = -1;
          }
          else {
            int v91 = v89 - 1;
          }
          int v92 = v91 + 1;
          int v93 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v94) != *(void *)(v86[3] + 8 * v94)) {
          goto LABEL_196;
        }
      }
      int v93 = v92;
LABEL_196:
      v247 = (void *)*a2;
      v248 = *(int **)*a2;
      uint64_t v249 = (v247[1] - (void)v248) >> 2;
      uint64_t v250 = (v249 - 1);
      if ((int)v250 >= -1) {
        int v251 = -1;
      }
      else {
        int v251 = v249 - 1;
      }
      int v252 = v251 + 1;
      int v253 = v249 + 1;
      while (1)
      {
        unsigned int v254 = v253 - 2;
        if (v253 - 2 < 0) {
          break;
        }
        --v253;
        if (*(void *)(v247[3] + 8 * v254) != *(void *)(v86[3] + 8 * v254)) {
          goto LABEL_246;
        }
      }
      int v253 = v252;
LABEL_246:
      int v291 = v89 + 1;
      while (1)
      {
        unsigned int v292 = v291 - 2;
        if (v291 - 2 < 0) {
          break;
        }
        --v291;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v292)) {
          goto LABEL_281;
        }
      }
      int v291 = v92;
LABEL_281:
      int v305 = v249 + 1;
      while (1)
      {
        unsigned int v306 = v305 - 2;
        if (v305 - 2 < 0) {
          break;
        }
        --v305;
        if (*(void *)(v247[3] + 8 * v306)) {
          goto LABEL_388;
        }
      }
      int v305 = v252;
LABEL_388:
      unint64_t v359 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v253) {
        int v360 = v253;
      }
      else {
        int v360 = v93;
      }
      if (v93 <= v305) {
        int v93 = v305;
      }
      if (v291 > v253) {
        int v253 = v291;
      }
      if (v359 > v253)
      {
        int v361 = 1;
      }
      else
      {
        int v253 = (uint64_t)(v86[1] - *v86) >> 2;
        int v361 = 4;
      }
      if (v359 > v93)
      {
        int v362 = 2;
      }
      else
      {
        int v93 = v253;
        int v362 = v361;
      }
      if (v359 > v360)
      {
        int v93 = v360;
        int v362 = 3;
      }
      uint64_t v2051 = v250;
      uint64_t v2065 = v90;
      if (!v93) {
        goto LABEL_417;
      }
      unint64_t v363 = *(void *)(v86[3] + 8 * (v93 - 1));
      if (v363 < 0x10) {
        goto LABEL_417;
      }
      switch(v362)
      {
        case 1:
          if (v93 == 2)
          {
            uint64_t v1568 = *v88;
            if (v1568)
            {
              uint64_t v1569 = 0;
              uint64_t v1570 = 0;
              uint64_t v1571 = 0;
              uint64_t v1572 = *(void *)(v87 + 152);
              uint64_t v1573 = v247[19];
              uint64_t v1574 = v86[19];
              unint64_t v1575 = v88[1];
              v1576 = *(uint64_t **)(v87 + 24);
              uint64_t v1577 = *v1576;
              uint64_t v1578 = v1576[1];
              v1579 = (uint64_t *)v247[3];
              uint64_t v1581 = *v1579;
              uint64_t v1580 = v1579[1];
              if (v1575 <= 1) {
                uint64_t v1582 = 1;
              }
              else {
                uint64_t v1582 = v88[1];
              }
              uint64_t v1583 = v1577 - v1578 * v1575;
              uint64_t v1584 = v1581 - v1580 * v248[1];
              do
              {
                if (v1575)
                {
                  uint64_t v1585 = 0;
                  uint64_t v1586 = v1573 + 4 * v1570;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1587 = 0;
                      unsigned int v1588 = *(_DWORD *)(v1572 + 4 * v1571);
                      unsigned int v1589 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1574 + v1587) = v1588 < *(_DWORD *)(v1586 + 4 * v1587);
                        --v1589;
                        ++v1587;
                      }
                      while (v1589 > 1);
                    }
                    v1571 += v1578;
                    v1570 += v1580;
                    v1574 += (int)v363;
                    ++v1585;
                    v1586 += 4 * v1580;
                  }
                  while (v1585 != v1582);
                }
                v1571 += v1583;
                v1570 += v1584;
                ++v1569;
              }
              while (v1569 != v1568);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1068 = *v88;
            if (v1068)
            {
              uint64_t v1069 = 0;
              uint64_t v1070 = 0;
              uint64_t v1071 = *(void *)(v87 + 152);
              uint64_t v1072 = v247[19];
              uint64_t v1073 = v86[19];
              uint64_t v1074 = **(void **)(v87 + 24);
              uint64_t v1075 = 4 * *(void *)v247[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1076 = 0;
                  unsigned int v1077 = *(_DWORD *)(v1071 + 4 * v1070);
                  unsigned int v1078 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1073 + v1076) = v1077 < *(_DWORD *)(v1072 + 4 * v1076);
                    --v1078;
                    ++v1076;
                  }
                  while (v1078 > 1);
                }
                v1070 += v1074;
                v1073 += (int)v363;
                ++v1069;
                v1072 += v1075;
              }
              while (v1069 != v1068);
            }
          }
          else
          {
            unint64_t v2004 = v86[6];
            if (v2004)
            {
              unint64_t v2039 = 0;
              uint64_t v1929 = v247[19];
              uint64_t v1955 = *(void *)(v87 + 152);
              uint64_t v1590 = v86[19];
              do
              {
                uint64_t v1591 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1592 = *(void *)(v87 + 24);
                  int v1593 = v2039;
                  do
                  {
                    ldiv_t v1594 = ldiv(v1593, v88[v90]);
                    int v1593 = v1594.quot;
                    v1591 += *(void *)(v1592 + 8 * v90--) * v1594.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1595 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1596) = 0;
                }
                else
                {
                  uint64_t v1596 = 0;
                  uint64_t v1597 = v247[3];
                  int v1598 = v2039;
                  do
                  {
                    ldiv_t v1599 = ldiv(v1598, v248[v1595]);
                    int v1598 = v1599.quot;
                    v1596 += *(void *)(v1597 + 8 * v1595--) * v1599.rem;
                  }
                  while (v1595 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1600 = 0;
                  unsigned int v1601 = *(_DWORD *)(v1955 + 4 * (int)v1591);
                  unsigned int v1602 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1590 + v1600) = v1601 < *(_DWORD *)(v1929 + 4 * (int)v1596 + 4 * v1600);
                    --v1602;
                    ++v1600;
                  }
                  while (v1602 > 1);
                }
                v1590 += (int)v363;
                v2039 += (int)v363;
              }
              while (v2039 < v2004);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            uint64_t v1603 = *v88;
            if (v1603)
            {
              uint64_t v1604 = 0;
              uint64_t v1605 = 0;
              uint64_t v1606 = 0;
              uint64_t v1607 = *(void *)(v87 + 152);
              uint64_t v1608 = v247[19];
              uint64_t v1609 = v86[19];
              unint64_t v1610 = v88[1];
              v1611 = *(uint64_t **)(v87 + 24);
              uint64_t v1612 = *v1611;
              uint64_t v1613 = v1611[1];
              v1614 = (uint64_t *)v247[3];
              uint64_t v1616 = *v1614;
              uint64_t v1615 = v1614[1];
              if (v1610 <= 1) {
                uint64_t v1617 = 1;
              }
              else {
                uint64_t v1617 = v88[1];
              }
              uint64_t v1618 = v1612 - v1613 * v1610;
              uint64_t v1619 = v1616 - v1615 * v248[1];
              do
              {
                if (v1610)
                {
                  uint64_t v1620 = 0;
                  uint64_t v1621 = v1607 + 4 * v1606;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1622 = 0;
                      unsigned int v1623 = *(_DWORD *)(v1608 + 4 * v1605);
                      unsigned int v1624 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1609 + v1622) = *(_DWORD *)(v1621 + 4 * v1622) < v1623;
                        --v1624;
                        ++v1622;
                      }
                      while (v1624 > 1);
                    }
                    v1606 += v1613;
                    v1605 += v1615;
                    v1609 += (int)v363;
                    ++v1620;
                    v1621 += 4 * v1613;
                  }
                  while (v1620 != v1617);
                }
                v1606 += v1618;
                v1605 += v1619;
                ++v1604;
              }
              while (v1604 != v1603);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v1079 = *v88;
            if (v1079)
            {
              uint64_t v1080 = 0;
              uint64_t v1081 = 0;
              uint64_t v1082 = *(void *)(v87 + 152);
              uint64_t v1083 = v247[19];
              uint64_t v1084 = v86[19];
              uint64_t v1085 = *(void *)v247[3];
              uint64_t v1086 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v1087 = 0;
                  unsigned int v1088 = *(_DWORD *)(v1083 + 4 * v1081);
                  unsigned int v1089 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1084 + v1087) = *(_DWORD *)(v1082 + 4 * v1087) < v1088;
                    --v1089;
                    ++v1087;
                  }
                  while (v1089 > 1);
                }
                v1081 += v1085;
                v1084 += (int)v363;
                ++v1080;
                v1082 += v1086;
              }
              while (v1080 != v1079);
            }
          }
          else
          {
            unint64_t v2005 = v86[6];
            if (v2005)
            {
              unint64_t v2040 = 0;
              uint64_t v1930 = v247[19];
              uint64_t v1956 = *(void *)(v87 + 152);
              uint64_t v1625 = v86[19];
              do
              {
                uint64_t v1626 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1627 = *(void *)(v87 + 24);
                  int v1628 = v2040;
                  do
                  {
                    ldiv_t v1629 = ldiv(v1628, v88[v90]);
                    int v1628 = v1629.quot;
                    v1626 += *(void *)(v1627 + 8 * v90--) * v1629.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1630 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1631) = 0;
                }
                else
                {
                  uint64_t v1631 = 0;
                  uint64_t v1632 = v247[3];
                  int v1633 = v2040;
                  do
                  {
                    ldiv_t v1634 = ldiv(v1633, v248[v1630]);
                    int v1633 = v1634.quot;
                    v1631 += *(void *)(v1632 + 8 * v1630--) * v1634.rem;
                  }
                  while (v1630 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1635 = 0;
                  unsigned int v1636 = *(_DWORD *)(v1930 + 4 * (int)v1631);
                  unsigned int v1637 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1625 + v1635) = *(_DWORD *)(v1956 + 4 * (int)v1626 + 4 * v1635) < v1636;
                    --v1637;
                    ++v1635;
                  }
                  while (v1637 > 1);
                }
                v1625 += (int)v363;
                v2040 += (int)v363;
              }
              while (v2040 < v2005);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            uint64_t v1250 = *v88;
            if (v1250)
            {
              uint64_t v1251 = 0;
              uint64_t v1252 = 0;
              uint64_t v1253 = 0;
              uint64_t v1254 = *(void *)(v87 + 152);
              uint64_t v1255 = v247[19];
              uint64_t v1256 = v86[19];
              unint64_t v1257 = v88[1];
              v1258 = *(uint64_t **)(v87 + 24);
              uint64_t v1259 = *v1258;
              uint64_t v1260 = v1258[1];
              v1261 = (uint64_t *)v247[3];
              uint64_t v1263 = *v1261;
              uint64_t v1262 = v1261[1];
              if (v1257 <= 1) {
                uint64_t v1264 = 1;
              }
              else {
                uint64_t v1264 = v88[1];
              }
              uint64_t v1265 = v1259 - v1260 * v1257;
              uint64_t v1266 = v1263 - v1262 * v248[1];
              do
              {
                if (v1257)
                {
                  uint64_t v1267 = 0;
                  uint64_t v1268 = v1255 + 4 * v1252;
                  uint64_t v1269 = v1254 + 4 * v1253;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      uint64_t v1270 = 0;
                      unsigned int v1271 = v363 + 1;
                      do
                      {
                        *(unsigned char *)(v1256 + v1270) = *(_DWORD *)(v1269 + 4 * v1270) < *(_DWORD *)(v1268 + 4 * v1270);
                        --v1271;
                        ++v1270;
                      }
                      while (v1271 > 1);
                    }
                    v1253 += v1260;
                    v1252 += v1262;
                    v1256 += (int)v363;
                    ++v1267;
                    v1268 += 4 * v1262;
                    v1269 += 4 * v1260;
                  }
                  while (v1267 != v1264);
                }
                v1253 += v1265;
                v1252 += v1266;
                ++v1251;
              }
              while (v1251 != v1250);
            }
          }
          else if (v93 == 1)
          {
            uint64_t v364 = *v88;
            if (v364)
            {
              uint64_t v365 = 0;
              uint64_t v366 = *(void *)(v87 + 152);
              uint64_t v367 = v247[19];
              uint64_t v368 = v86[19];
              uint64_t v369 = 4 * *(void *)v247[3];
              uint64_t v370 = 4 * **(void **)(v87 + 24);
              do
              {
                if ((int)v363 >= 1)
                {
                  uint64_t v371 = 0;
                  unsigned int v372 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v368 + v371) = *(_DWORD *)(v366 + 4 * v371) < *(_DWORD *)(v367 + 4 * v371);
                    --v372;
                    ++v371;
                  }
                  while (v372 > 1);
                }
                v368 += (int)v363;
                ++v365;
                v367 += v369;
                v366 += v370;
              }
              while (v365 != v364);
            }
          }
          else
          {
            unint64_t v1995 = v86[6];
            if (v1995)
            {
              unint64_t v2030 = 0;
              uint64_t v1920 = v247[19];
              uint64_t v1946 = *(void *)(v87 + 152);
              uint64_t v1272 = v86[19];
              do
              {
                uint64_t v1273 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1274 = *(void *)(v87 + 24);
                  int v1275 = v2030;
                  do
                  {
                    ldiv_t v1276 = ldiv(v1275, v88[v90]);
                    int v1275 = v1276.quot;
                    v1273 += *(void *)(v1274 + 8 * v90--) * v1276.rem;
                  }
                  while (v90 != -1);
                }
                uint64_t v1277 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1278) = 0;
                }
                else
                {
                  uint64_t v1278 = 0;
                  uint64_t v1279 = v247[3];
                  int v1280 = v2030;
                  do
                  {
                    ldiv_t v1281 = ldiv(v1280, v248[v1277]);
                    int v1280 = v1281.quot;
                    v1278 += *(void *)(v1279 + 8 * v1277--) * v1281.rem;
                  }
                  while (v1277 != -1);
                }
                uint64_t v90 = v2065;
                if ((int)v363 >= 1)
                {
                  uint64_t v1282 = 0;
                  unsigned int v1283 = v363 + 1;
                  do
                  {
                    *(unsigned char *)(v1272 + v1282) = *(_DWORD *)(v1946 + 4 * (int)v1273 + 4 * v1282) < *(_DWORD *)(v1920 + 4 * (int)v1278 + 4 * v1282);
                    --v1283;
                    ++v1282;
                  }
                  while (v1283 > 1);
                }
                v1272 += (int)v363;
                v2030 += (int)v363;
              }
              while (v2030 < v1995);
            }
          }
          break;
        default:
LABEL_417:
          switch(v359)
          {
            case 1uLL:
              uint64_t v373 = v86[6];
              if (v373)
              {
                v374 = *(_DWORD **)(v87 + 152);
                v375 = (_DWORD *)v247[19];
                v376 = (BOOL *)v86[19];
                uint64_t v377 = 4 * *(void *)v247[3];
                uint64_t v378 = 4 * **(void **)(v87 + 24);
                do
                {
                  *v376++ = *v374 < *v375;
                  v375 = (_DWORD *)((char *)v375 + v377);
                  v374 = (_DWORD *)((char *)v374 + v378);
                  --v373;
                }
                while (v373);
              }
              break;
            case 2uLL:
              uint64_t v636 = *v88;
              if (v636)
              {
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = *(void *)(v87 + 152);
                uint64_t v642 = v247[19];
                uint64_t v643 = v86[19];
                unint64_t v644 = v88[1];
                v645 = *(uint64_t **)(v87 + 24);
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                v648 = (uint64_t *)v247[3];
                uint64_t v649 = *v648;
                uint64_t v650 = v648[1];
                uint64_t v651 = v649 - v650 * v248[1];
                if (v644 <= 1) {
                  uint64_t v652 = 1;
                }
                else {
                  uint64_t v652 = v88[1];
                }
                uint64_t v653 = v646 - v647 * v644;
                do
                {
                  if (v644)
                  {
                    uint64_t v654 = v638 + v652;
                    v655 = (BOOL *)(v643 + v638);
                    uint64_t v656 = v652;
                    do
                    {
                      *v655++ = *(_DWORD *)(v641 + 4 * v640) < *(_DWORD *)(v642 + 4 * v639);
                      v640 += v647;
                      v639 += v650;
                      --v656;
                    }
                    while (v656);
                    uint64_t v638 = v654;
                  }
                  v640 += v653;
                  v639 += v651;
                  ++v637;
                }
                while (v637 != v636);
              }
              break;
            case 3uLL:
              uint64_t v657 = *v88;
              if (v657)
              {
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = 0;
                uint64_t v661 = 0;
                uint64_t v662 = *(void *)(v87 + 152);
                uint64_t v663 = v247[19];
                uint64_t v664 = v86[19];
                unint64_t v665 = v88[1];
                v666 = *(void **)(v87 + 24);
                uint64_t v667 = v666[1];
                v668 = (void *)v247[3];
                uint64_t v669 = v668[1];
                uint64_t v670 = *v668 - v669 * v248[1];
                if (v665 <= 1) {
                  uint64_t v671 = 1;
                }
                else {
                  uint64_t v671 = v88[1];
                }
                unint64_t v672 = *v666 - v667 * v665;
                do
                {
                  if (v665)
                  {
                    uint64_t v673 = 0;
                    unint64_t v674 = v88[2];
                    uint64_t v675 = v666[2];
                    uint64_t v676 = v668[2];
                    if (v674 <= 1) {
                      uint64_t v677 = 1;
                    }
                    else {
                      uint64_t v677 = v88[2];
                    }
                    uint64_t v678 = v669 - v676 * v248[2];
                    do
                    {
                      uint64_t v679 = v677;
                      if (v674)
                      {
                        do
                        {
                          *(unsigned char *)(v664 + v659++) = *(_DWORD *)(v662 + 4 * v661) < *(_DWORD *)(v663 + 4 * v660);
                          v661 += v675;
                          v660 += v676;
                          --v679;
                        }
                        while (v679);
                      }
                      v661 += v667 - v675 * v674;
                      v660 += v678;
                      ++v673;
                    }
                    while (v673 != v671);
                  }
                  v661 += v672;
                  v660 += v670;
                  ++v658;
                }
                while (v658 != v657);
              }
              break;
            case 4uLL:
              uint64_t v2072 = *v88;
              if (v2072)
              {
                uint64_t v680 = 0;
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = 0;
                uint64_t v684 = *(void *)(v87 + 152);
                uint64_t v685 = v247[19];
                uint64_t v686 = v86[19];
                unint64_t v687 = v88[1];
                v688 = *(void **)(v87 + 24);
                v689 = (void *)v247[3];
                uint64_t v1940 = v689[1];
                uint64_t v1970 = v688[1];
                uint64_t v2019 = *v689 - v1940 * v248[1];
                int v2058 = v88[1];
                if (v687 <= 1) {
                  uint64_t v690 = 1;
                }
                else {
                  uint64_t v690 = v88[1];
                }
                unint64_t v1984 = *v688 - v688[1] * v687;
                do
                {
                  if (v2058)
                  {
                    uint64_t v691 = 0;
                    unint64_t v692 = v88[2];
                    uint64_t v693 = v688[2];
                    uint64_t v694 = v689[2];
                    if (v692 <= 1) {
                      uint64_t v695 = 1;
                    }
                    else {
                      uint64_t v695 = v88[2];
                    }
                    uint64_t v696 = v1940 - v694 * v248[2];
                    do
                    {
                      if (v692)
                      {
                        uint64_t v697 = 0;
                        unint64_t v698 = v88[3];
                        uint64_t v699 = v688[3];
                        uint64_t v700 = v689[3];
                        if (v698 <= 1) {
                          uint64_t v701 = 1;
                        }
                        else {
                          uint64_t v701 = v88[3];
                        }
                        uint64_t v702 = v694 - v700 * v248[3];
                        do
                        {
                          uint64_t v703 = v701;
                          if (v698)
                          {
                            do
                            {
                              *(unsigned char *)(v686 + v681++) = *(_DWORD *)(v684 + 4 * v683) < *(_DWORD *)(v685 + 4 * v682);
                              v683 += v699;
                              v682 += v700;
                              --v703;
                            }
                            while (v703);
                          }
                          v683 += v693 - v699 * v698;
                          v682 += v702;
                          ++v697;
                        }
                        while (v697 != v695);
                      }
                      v683 += v1970 - v693 * v692;
                      v682 += v696;
                      ++v691;
                    }
                    while (v691 != v690);
                  }
                  v683 += v1984;
                  v682 += v2019;
                  ++v680;
                }
                while (v680 != v2072);
              }
              break;
            default:
              uint64_t v625 = v86[6];
              if (v625)
              {
                uint64_t v626 = 0;
                uint64_t v1983 = v247[19];
                uint64_t v2018 = *(void *)(v87 + 152);
                uint64_t v1969 = v86[19];
                do
                {
                  uint64_t v627 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    uint64_t v628 = *(void *)(v87 + 24);
                    int v629 = v626;
                    do
                    {
                      ldiv_t v630 = ldiv(v629, v88[v90]);
                      int v629 = v630.quot;
                      v627 += *(void *)(v628 + 8 * v90--) * v630.rem;
                    }
                    while (v90 != -1);
                  }
                  uint64_t v631 = v2051;
                  if ((v2051 & 0x80000000) != 0)
                  {
                    LODWORD(v632) = 0;
                  }
                  else
                  {
                    uint64_t v632 = 0;
                    uint64_t v633 = v247[3];
                    int v634 = v626;
                    do
                    {
                      ldiv_t v635 = ldiv(v634, v248[v631]);
                      int v634 = v635.quot;
                      v632 += *(void *)(v633 + 8 * v631--) * v635.rem;
                    }
                    while (v631 != -1);
                  }
                  *(unsigned char *)(v1969 + v626++) = *(_DWORD *)(v2018 + 4 * (int)v627) < *(_DWORD *)(v1983 + 4 * (int)v632);
                  uint64_t v90 = v2065;
                }
                while (v626 != v625);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v13)
      {
        case 0:
          int v14 = **(char **)(*a1 + 152);
          int v15 = **(char **)(*a2 + 152);
          goto LABEL_18;
        case 1:
          int v124 = *(_DWORD *)(*a2 + 160);
          if (v124 >= 1)
          {
            int v125 = **(char **)(*a1 + 152);
            v126 = *(BOOL **)(*(void *)a3 + 152);
            v127 = *(char **)(*a2 + 152);
            unsigned int v128 = v124 + 1;
            do
            {
              int v129 = *v127++;
              *v126++ = v125 < v129;
              --v128;
            }
            while (v128 > 1);
          }
          return;
        case 2:
          int v130 = *(_DWORD *)(*a1 + 160);
          if (v130 >= 1)
          {
            int v131 = **(char **)(*a2 + 152);
            v132 = *(BOOL **)(*(void *)a3 + 152);
            v133 = *(char **)(*a1 + 152);
            unsigned int v134 = v130 + 1;
            do
            {
              int v135 = *v133++;
              *v132++ = v135 < v131;
              --v134;
            }
            while (v134 > 1);
          }
          return;
        case 3:
          int v136 = *(_DWORD *)(*(void *)a3 + 48);
          if (v136 >= 1)
          {
            v137 = *(BOOL **)(*(void *)a3 + 152);
            v138 = *(char **)(*a2 + 152);
            v139 = *(char **)(*a1 + 152);
            unsigned int v140 = v136 + 1;
            do
            {
              int v142 = *v139++;
              int v141 = v142;
              int v143 = *v138++;
              *v137++ = v141 < v143;
              --v140;
            }
            while (v140 > 1);
          }
          return;
        default:
          v115 = *(void **)a3;
          uint64_t v116 = *a1;
          v117 = *(int **)*a1;
          uint64_t v118 = (*(void *)(*a1 + 8) - (void)v117) >> 2;
          uint64_t v119 = (v118 - 1);
          if ((int)v119 >= -1) {
            int v120 = -1;
          }
          else {
            int v120 = v118 - 1;
          }
          int v121 = v120 + 1;
          int v122 = v118 + 1;
          break;
      }
      while (1)
      {
        unsigned int v123 = v122 - 2;
        if (v122 - 2 < 0) {
          break;
        }
        --v122;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v123) != *(void *)(v115[3] + 8 * v123)) {
          goto LABEL_204;
        }
      }
      int v122 = v121;
LABEL_204:
      v255 = (void *)*a2;
      v256 = *(int **)*a2;
      uint64_t v257 = (v255[1] - (void)v256) >> 2;
      uint64_t v258 = (v257 - 1);
      if ((int)v258 >= -1) {
        int v259 = -1;
      }
      else {
        int v259 = v257 - 1;
      }
      int v260 = v259 + 1;
      int v261 = v257 + 1;
      while (1)
      {
        unsigned int v262 = v261 - 2;
        if (v261 - 2 < 0) {
          break;
        }
        --v261;
        if (*(void *)(v255[3] + 8 * v262) != *(void *)(v115[3] + 8 * v262)) {
          goto LABEL_251;
        }
      }
      int v261 = v260;
LABEL_251:
      int v293 = v118 + 1;
      while (1)
      {
        unsigned int v294 = v293 - 2;
        if (v293 - 2 < 0) {
          break;
        }
        --v293;
        if (*(void *)(*(void *)(v116 + 24) + 8 * v294)) {
          goto LABEL_286;
        }
      }
      int v293 = v121;
LABEL_286:
      int v307 = v257 + 1;
      while (1)
      {
        unsigned int v308 = v307 - 2;
        if (v307 - 2 < 0) {
          break;
        }
        --v307;
        if (*(void *)(v255[3] + 8 * v308)) {
          goto LABEL_423;
        }
      }
      int v307 = v260;
LABEL_423:
      unint64_t v379 = (uint64_t)(v115[1] - *v115) >> 2;
      if (v122 <= v261) {
        int v380 = v261;
      }
      else {
        int v380 = v122;
      }
      if (v122 <= v307) {
        int v122 = v307;
      }
      if (v293 > v261) {
        int v261 = v293;
      }
      if (v379 > v261)
      {
        int v381 = 1;
      }
      else
      {
        int v261 = (uint64_t)(v115[1] - *v115) >> 2;
        int v381 = 4;
      }
      if (v379 > v122)
      {
        int v382 = 2;
      }
      else
      {
        int v122 = v261;
        int v382 = v381;
      }
      if (v379 > v380)
      {
        int v122 = v380;
        int v382 = 3;
      }
      uint64_t v2052 = v258;
      uint64_t v2066 = v119;
      if (!v122) {
        goto LABEL_452;
      }
      unint64_t v383 = *(void *)(v115[3] + 8 * (v122 - 1));
      if (v383 < 0x10) {
        goto LABEL_452;
      }
      switch(v382)
      {
        case 1:
          if (v122 == 2)
          {
            uint64_t v1638 = *v117;
            if (v1638)
            {
              uint64_t v1639 = 0;
              uint64_t v1640 = 0;
              uint64_t v1641 = 0;
              uint64_t v1642 = *(void *)(v116 + 152);
              uint64_t v1643 = v255[19];
              uint64_t v1644 = v115[19];
              unint64_t v1645 = v117[1];
              v1646 = *(uint64_t **)(v116 + 24);
              uint64_t v1647 = *v1646;
              uint64_t v1648 = v1646[1];
              v1649 = (uint64_t *)v255[3];
              uint64_t v1651 = *v1649;
              uint64_t v1650 = v1649[1];
              if (v1645 <= 1) {
                uint64_t v1652 = 1;
              }
              else {
                uint64_t v1652 = v117[1];
              }
              uint64_t v1653 = v1647 - v1648 * v1645;
              uint64_t v1654 = v1651 - v1650 * v256[1];
              do
              {
                if (v1645)
                {
                  uint64_t v1655 = 0;
                  uint64_t v1656 = v1643 + v1640;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1657 = 0;
                      int v1658 = *(char *)(v1642 + v1641);
                      unsigned int v1659 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1644 + v1657) = v1658 < *(char *)(v1656 + v1657);
                        --v1659;
                        ++v1657;
                      }
                      while (v1659 > 1);
                    }
                    v1641 += v1648;
                    v1640 += v1650;
                    v1644 += (int)v383;
                    ++v1655;
                    v1656 += v1650;
                  }
                  while (v1655 != v1652);
                }
                v1641 += v1653;
                v1640 += v1654;
                ++v1639;
              }
              while (v1639 != v1638);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1090 = *v117;
            if (v1090)
            {
              uint64_t v1091 = 0;
              uint64_t v1092 = 0;
              uint64_t v1093 = *(void *)(v116 + 152);
              uint64_t v1094 = v255[19];
              uint64_t v1095 = v115[19];
              uint64_t v1096 = **(void **)(v116 + 24);
              uint64_t v1097 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1098 = 0;
                  int v1099 = *(char *)(v1093 + v1092);
                  unsigned int v1100 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1095 + v1098) = v1099 < *(char *)(v1094 + v1098);
                    --v1100;
                    ++v1098;
                  }
                  while (v1100 > 1);
                }
                v1092 += v1096;
                v1095 += (int)v383;
                ++v1091;
                v1094 += v1097;
              }
              while (v1091 != v1090);
            }
          }
          else
          {
            unint64_t v2006 = v115[6];
            if (v2006)
            {
              unint64_t v2041 = 0;
              uint64_t v1931 = v255[19];
              uint64_t v1957 = *(void *)(v116 + 152);
              uint64_t v1660 = v115[19];
              do
              {
                uint64_t v1661 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1662 = *(void *)(v116 + 24);
                  int v1663 = v2041;
                  do
                  {
                    ldiv_t v1664 = ldiv(v1663, v117[v119]);
                    int v1663 = v1664.quot;
                    v1661 += *(void *)(v1662 + 8 * v119--) * v1664.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1665 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1666) = 0;
                }
                else
                {
                  uint64_t v1666 = 0;
                  uint64_t v1667 = v255[3];
                  int v1668 = v2041;
                  do
                  {
                    ldiv_t v1669 = ldiv(v1668, v256[v1665]);
                    int v1668 = v1669.quot;
                    v1666 += *(void *)(v1667 + 8 * v1665--) * v1669.rem;
                  }
                  while (v1665 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1670 = 0;
                  int v1671 = *(char *)(v1957 + (int)v1661);
                  unsigned int v1672 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1660 + v1670) = v1671 < *(char *)(v1931 + (int)v1666 + v1670);
                    --v1672;
                    ++v1670;
                  }
                  while (v1672 > 1);
                }
                v1660 += (int)v383;
                v2041 += (int)v383;
              }
              while (v2041 < v2006);
            }
          }
          break;
        case 2:
          if (v122 == 2)
          {
            uint64_t v1673 = *v117;
            if (v1673)
            {
              uint64_t v1674 = 0;
              uint64_t v1675 = 0;
              uint64_t v1676 = 0;
              uint64_t v1677 = *(void *)(v116 + 152);
              uint64_t v1678 = v255[19];
              uint64_t v1679 = v115[19];
              unint64_t v1680 = v117[1];
              v1681 = *(uint64_t **)(v116 + 24);
              uint64_t v1682 = *v1681;
              uint64_t v1683 = v1681[1];
              v1684 = (uint64_t *)v255[3];
              uint64_t v1686 = *v1684;
              uint64_t v1685 = v1684[1];
              if (v1680 <= 1) {
                uint64_t v1687 = 1;
              }
              else {
                uint64_t v1687 = v117[1];
              }
              uint64_t v1688 = v1682 - v1683 * v1680;
              uint64_t v1689 = v1686 - v1685 * v256[1];
              do
              {
                if (v1680)
                {
                  uint64_t v1690 = 0;
                  uint64_t v1691 = v1677 + v1676;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1692 = 0;
                      int v1693 = *(char *)(v1678 + v1675);
                      unsigned int v1694 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1679 + v1692) = *(char *)(v1691 + v1692) < v1693;
                        --v1694;
                        ++v1692;
                      }
                      while (v1694 > 1);
                    }
                    v1676 += v1683;
                    v1675 += v1685;
                    v1679 += (int)v383;
                    ++v1690;
                    v1691 += v1683;
                  }
                  while (v1690 != v1687);
                }
                v1676 += v1688;
                v1675 += v1689;
                ++v1674;
              }
              while (v1674 != v1673);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v1101 = *v117;
            if (v1101)
            {
              uint64_t v1102 = 0;
              uint64_t v1103 = 0;
              uint64_t v1104 = *(void *)(v116 + 152);
              uint64_t v1105 = v255[19];
              uint64_t v1106 = v115[19];
              uint64_t v1107 = **(void **)(v116 + 24);
              uint64_t v1108 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v1109 = 0;
                  int v1110 = *(char *)(v1105 + v1103);
                  unsigned int v1111 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1106 + v1109) = *(char *)(v1104 + v1109) < v1110;
                    --v1111;
                    ++v1109;
                  }
                  while (v1111 > 1);
                }
                v1103 += v1108;
                v1106 += (int)v383;
                ++v1102;
                v1104 += v1107;
              }
              while (v1102 != v1101);
            }
          }
          else
          {
            unint64_t v2007 = v115[6];
            if (v2007)
            {
              unint64_t v2042 = 0;
              uint64_t v1932 = v255[19];
              uint64_t v1958 = *(void *)(v116 + 152);
              uint64_t v1695 = v115[19];
              do
              {
                uint64_t v1696 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1697 = *(void *)(v116 + 24);
                  int v1698 = v2042;
                  do
                  {
                    ldiv_t v1699 = ldiv(v1698, v117[v119]);
                    int v1698 = v1699.quot;
                    v1696 += *(void *)(v1697 + 8 * v119--) * v1699.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1700 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1701) = 0;
                }
                else
                {
                  uint64_t v1701 = 0;
                  uint64_t v1702 = v255[3];
                  int v1703 = v2042;
                  do
                  {
                    ldiv_t v1704 = ldiv(v1703, v256[v1700]);
                    int v1703 = v1704.quot;
                    v1701 += *(void *)(v1702 + 8 * v1700--) * v1704.rem;
                  }
                  while (v1700 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1705 = 0;
                  int v1706 = *(char *)(v1932 + (int)v1701);
                  unsigned int v1707 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1695 + v1705) = *(char *)(v1958 + (int)v1696 + v1705) < v1706;
                    --v1707;
                    ++v1705;
                  }
                  while (v1707 > 1);
                }
                v1695 += (int)v383;
                v2042 += (int)v383;
              }
              while (v2042 < v2007);
            }
          }
          break;
        case 3:
          if (v122 == 2)
          {
            uint64_t v1284 = *v117;
            if (v1284)
            {
              uint64_t v1285 = 0;
              uint64_t v1286 = 0;
              uint64_t v1287 = 0;
              uint64_t v1288 = *(void *)(v116 + 152);
              uint64_t v1289 = v255[19];
              uint64_t v1290 = v115[19];
              unint64_t v1291 = v117[1];
              v1292 = *(uint64_t **)(v116 + 24);
              uint64_t v1293 = *v1292;
              uint64_t v1294 = v1292[1];
              v1295 = (uint64_t *)v255[3];
              uint64_t v1297 = *v1295;
              uint64_t v1296 = v1295[1];
              if (v1291 <= 1) {
                uint64_t v1298 = 1;
              }
              else {
                uint64_t v1298 = v117[1];
              }
              uint64_t v1299 = v1293 - v1294 * v1291;
              uint64_t v1300 = v1297 - v1296 * v256[1];
              do
              {
                if (v1291)
                {
                  uint64_t v1301 = 0;
                  uint64_t v1302 = v1289 + v1286;
                  uint64_t v1303 = v1288 + v1287;
                  do
                  {
                    if ((int)v383 >= 1)
                    {
                      uint64_t v1304 = 0;
                      unsigned int v1305 = v383 + 1;
                      do
                      {
                        *(unsigned char *)(v1290 + v1304) = *(char *)(v1303 + v1304) < *(char *)(v1302 + v1304);
                        --v1305;
                        ++v1304;
                      }
                      while (v1305 > 1);
                    }
                    v1287 += v1294;
                    v1286 += v1296;
                    v1290 += (int)v383;
                    ++v1301;
                    v1302 += v1296;
                    v1303 += v1294;
                  }
                  while (v1301 != v1298);
                }
                v1287 += v1299;
                v1286 += v1300;
                ++v1285;
              }
              while (v1285 != v1284);
            }
          }
          else if (v122 == 1)
          {
            uint64_t v384 = *v117;
            if (v384)
            {
              uint64_t v385 = 0;
              uint64_t v386 = *(void *)(v116 + 152);
              uint64_t v387 = v255[19];
              uint64_t v388 = v115[19];
              uint64_t v389 = **(void **)(v116 + 24);
              uint64_t v390 = *(void *)v255[3];
              do
              {
                if ((int)v383 >= 1)
                {
                  uint64_t v391 = 0;
                  unsigned int v392 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v388 + v391) = *(char *)(v386 + v391) < *(char *)(v387 + v391);
                    --v392;
                    ++v391;
                  }
                  while (v392 > 1);
                }
                v388 += (int)v383;
                ++v385;
                v387 += v390;
                v386 += v389;
              }
              while (v385 != v384);
            }
          }
          else
          {
            unint64_t v1996 = v115[6];
            if (v1996)
            {
              unint64_t v2031 = 0;
              uint64_t v1921 = v255[19];
              uint64_t v1947 = *(void *)(v116 + 152);
              uint64_t v1306 = v115[19];
              do
              {
                uint64_t v1307 = 0;
                if ((v119 & 0x80000000) == 0)
                {
                  uint64_t v1308 = *(void *)(v116 + 24);
                  int v1309 = v2031;
                  do
                  {
                    ldiv_t v1310 = ldiv(v1309, v117[v119]);
                    int v1309 = v1310.quot;
                    v1307 += *(void *)(v1308 + 8 * v119--) * v1310.rem;
                  }
                  while (v119 != -1);
                }
                uint64_t v1311 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1312) = 0;
                }
                else
                {
                  uint64_t v1312 = 0;
                  uint64_t v1313 = v255[3];
                  int v1314 = v2031;
                  do
                  {
                    ldiv_t v1315 = ldiv(v1314, v256[v1311]);
                    int v1314 = v1315.quot;
                    v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                  }
                  while (v1311 != -1);
                }
                uint64_t v119 = v2066;
                if ((int)v383 >= 1)
                {
                  uint64_t v1316 = 0;
                  unsigned int v1317 = v383 + 1;
                  do
                  {
                    *(unsigned char *)(v1306 + v1316) = *(char *)(v1947 + (int)v1307 + v1316) < *(char *)(v1921
                                                                                                + (int)v1312
                                                                                                + v1316);
                    --v1317;
                    ++v1316;
                  }
                  while (v1317 > 1);
                }
                v1306 += (int)v383;
                v2031 += (int)v383;
              }
              while (v2031 < v1996);
            }
          }
          break;
        default:
LABEL_452:
          switch(v379)
          {
            case 1uLL:
              uint64_t v393 = v115[6];
              if (v393)
              {
                v394 = *(char **)(v116 + 152);
                v395 = (char *)v255[19];
                v396 = (BOOL *)v115[19];
                uint64_t v397 = **(void **)(v116 + 24);
                uint64_t v398 = *(void *)v255[3];
                do
                {
                  *v396++ = *v394 < *v395;
                  v395 += v398;
                  v394 += v397;
                  --v393;
                }
                while (v393);
              }
              break;
            case 2uLL:
              uint64_t v715 = *v117;
              if (v715)
              {
                uint64_t v716 = 0;
                uint64_t v717 = 0;
                uint64_t v718 = 0;
                uint64_t v719 = 0;
                uint64_t v720 = *(void *)(v116 + 152);
                uint64_t v721 = v255[19];
                uint64_t v722 = v115[19];
                unint64_t v723 = v117[1];
                v724 = *(uint64_t **)(v116 + 24);
                uint64_t v725 = *v724;
                uint64_t v726 = v724[1];
                v727 = (uint64_t *)v255[3];
                uint64_t v728 = *v727;
                uint64_t v729 = v727[1];
                uint64_t v730 = v728 - v729 * v256[1];
                if (v723 <= 1) {
                  uint64_t v731 = 1;
                }
                else {
                  uint64_t v731 = v117[1];
                }
                uint64_t v732 = v725 - v726 * v723;
                do
                {
                  if (v723)
                  {
                    uint64_t v733 = v717 + v731;
                    v734 = (BOOL *)(v722 + v717);
                    uint64_t v735 = v731;
                    do
                    {
                      *v734++ = *(char *)(v720 + v719) < *(char *)(v721 + v718);
                      v719 += v726;
                      v718 += v729;
                      --v735;
                    }
                    while (v735);
                    uint64_t v717 = v733;
                  }
                  v719 += v732;
                  v718 += v730;
                  ++v716;
                }
                while (v716 != v715);
              }
              break;
            case 3uLL:
              uint64_t v736 = *v117;
              if (v736)
              {
                uint64_t v737 = 0;
                uint64_t v738 = 0;
                uint64_t v739 = 0;
                uint64_t v740 = 0;
                uint64_t v741 = *(void *)(v116 + 152);
                uint64_t v742 = v255[19];
                uint64_t v743 = v115[19];
                unint64_t v744 = v117[1];
                v745 = *(void **)(v116 + 24);
                uint64_t v746 = v745[1];
                v747 = (void *)v255[3];
                uint64_t v748 = v747[1];
                uint64_t v749 = *v747 - v748 * v256[1];
                if (v744 <= 1) {
                  uint64_t v750 = 1;
                }
                else {
                  uint64_t v750 = v117[1];
                }
                unint64_t v751 = *v745 - v746 * v744;
                do
                {
                  if (v744)
                  {
                    uint64_t v752 = 0;
                    unint64_t v753 = v117[2];
                    uint64_t v754 = v745[2];
                    uint64_t v755 = v747[2];
                    if (v753 <= 1) {
                      uint64_t v756 = 1;
                    }
                    else {
                      uint64_t v756 = v117[2];
                    }
                    uint64_t v757 = v748 - v755 * v256[2];
                    do
                    {
                      uint64_t v758 = v756;
                      if (v753)
                      {
                        do
                        {
                          *(unsigned char *)(v743 + v738++) = *(char *)(v741 + v740) < *(char *)(v742 + v739);
                          v740 += v754;
                          v739 += v755;
                          --v758;
                        }
                        while (v758);
                      }
                      v740 += v746 - v754 * v753;
                      v739 += v757;
                      ++v752;
                    }
                    while (v752 != v750);
                  }
                  v740 += v751;
                  v739 += v749;
                  ++v737;
                }
                while (v737 != v736);
              }
              break;
            case 4uLL:
              uint64_t v2073 = *v117;
              if (v2073)
              {
                uint64_t v759 = 0;
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = 0;
                uint64_t v763 = *(void *)(v116 + 152);
                uint64_t v764 = v255[19];
                uint64_t v765 = v115[19];
                unint64_t v766 = v117[1];
                v767 = *(void **)(v116 + 24);
                v768 = (void *)v255[3];
                uint64_t v1941 = v768[1];
                uint64_t v1972 = v767[1];
                uint64_t v2021 = *v768 - v1941 * v256[1];
                int v2059 = v117[1];
                if (v766 <= 1) {
                  uint64_t v769 = 1;
                }
                else {
                  uint64_t v769 = v117[1];
                }
                unint64_t v1986 = *v767 - v767[1] * v766;
                do
                {
                  if (v2059)
                  {
                    uint64_t v770 = 0;
                    unint64_t v771 = v117[2];
                    uint64_t v772 = v767[2];
                    uint64_t v773 = v768[2];
                    if (v771 <= 1) {
                      uint64_t v774 = 1;
                    }
                    else {
                      uint64_t v774 = v117[2];
                    }
                    uint64_t v775 = v1941 - v773 * v256[2];
                    do
                    {
                      if (v771)
                      {
                        uint64_t v776 = 0;
                        unint64_t v777 = v117[3];
                        uint64_t v778 = v767[3];
                        uint64_t v779 = v768[3];
                        if (v777 <= 1) {
                          uint64_t v780 = 1;
                        }
                        else {
                          uint64_t v780 = v117[3];
                        }
                        uint64_t v781 = v773 - v779 * v256[3];
                        do
                        {
                          uint64_t v782 = v780;
                          if (v777)
                          {
                            do
                            {
                              *(unsigned char *)(v765 + v760++) = *(char *)(v763 + v762) < *(char *)(v764 + v761);
                              v762 += v778;
                              v761 += v779;
                              --v782;
                            }
                            while (v782);
                          }
                          v762 += v772 - v778 * v777;
                          v761 += v781;
                          ++v776;
                        }
                        while (v776 != v774);
                      }
                      v762 += v1972 - v772 * v771;
                      v761 += v775;
                      ++v770;
                    }
                    while (v770 != v769);
                  }
                  v762 += v1986;
                  v761 += v2021;
                  ++v759;
                }
                while (v759 != v2073);
              }
              break;
            default:
              uint64_t v704 = v115[6];
              if (v704)
              {
                uint64_t v705 = 0;
                uint64_t v1985 = v255[19];
                uint64_t v2020 = *(void *)(v116 + 152);
                uint64_t v1971 = v115[19];
                do
                {
                  uint64_t v706 = 0;
                  if ((v119 & 0x80000000) == 0)
                  {
                    uint64_t v707 = *(void *)(v116 + 24);
                    int v708 = v705;
                    do
                    {
                      ldiv_t v709 = ldiv(v708, v117[v119]);
                      int v708 = v709.quot;
                      v706 += *(void *)(v707 + 8 * v119--) * v709.rem;
                    }
                    while (v119 != -1);
                  }
                  uint64_t v710 = v2052;
                  if ((v2052 & 0x80000000) != 0)
                  {
                    LODWORD(v711) = 0;
                  }
                  else
                  {
                    uint64_t v711 = 0;
                    uint64_t v712 = v255[3];
                    int v713 = v705;
                    do
                    {
                      ldiv_t v714 = ldiv(v713, v256[v710]);
                      int v713 = v714.quot;
                      v711 += *(void *)(v712 + 8 * v710--) * v714.rem;
                    }
                    while (v710 != -1);
                  }
                  *(unsigned char *)(v1971 + v705++) = *(char *)(v2020 + (int)v706) < *(char *)(v1985 + (int)v711);
                  uint64_t v119 = v2066;
                }
                while (v705 != v704);
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v16)
      {
        case 0:
          int v14 = **(_DWORD **)(*a1 + 152);
          int v15 = **(_DWORD **)(*a2 + 152);
LABEL_18:
          BOOL v17 = v14 < v15;
          goto LABEL_21;
        case 1:
          int v153 = *(_DWORD *)(*a2 + 160);
          if (v153 >= 1)
          {
            int v154 = **(_DWORD **)(*a1 + 152);
            v155 = *(BOOL **)(*(void *)a3 + 152);
            v156 = *(int **)(*a2 + 152);
            unsigned int v157 = v153 + 1;
            do
            {
              int v158 = *v156++;
              *v155++ = v154 < v158;
              --v157;
            }
            while (v157 > 1);
          }
          return;
        case 2:
          int v159 = *(_DWORD *)(*a1 + 160);
          if (v159 >= 1)
          {
            int v160 = **(_DWORD **)(*a2 + 152);
            v161 = *(BOOL **)(*(void *)a3 + 152);
            v162 = *(int **)(*a1 + 152);
            unsigned int v163 = v159 + 1;
            do
            {
              int v164 = *v162++;
              *v161++ = v164 < v160;
              --v163;
            }
            while (v163 > 1);
          }
          return;
        case 3:
          int v165 = *(_DWORD *)(*(void *)a3 + 48);
          if (v165 >= 1)
          {
            v166 = *(BOOL **)(*(void *)a3 + 152);
            v167 = *(int **)(*a2 + 152);
            v168 = *(int **)(*a1 + 152);
            unsigned int v169 = v165 + 1;
            do
            {
              int v171 = *v168++;
              int v170 = v171;
              int v172 = *v167++;
              *v166++ = v170 < v172;
              --v169;
            }
            while (v169 > 1);
          }
          return;
        default:
          v144 = *(void **)a3;
          uint64_t v145 = *a1;
          v146 = *(int **)*a1;
          uint64_t v147 = (*(void *)(*a1 + 8) - (void)v146) >> 2;
          uint64_t v148 = (v147 - 1);
          if ((int)v148 >= -1) {
            int v149 = -1;
          }
          else {
            int v149 = v147 - 1;
          }
          int v150 = v149 + 1;
          int v151 = v147 + 1;
          break;
      }
      while (1)
      {
        unsigned int v152 = v151 - 2;
        if (v151 - 2 < 0) {
          break;
        }
        --v151;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v152) != *(void *)(v144[3] + 8 * v152)) {
          goto LABEL_212;
        }
      }
      int v151 = v150;
LABEL_212:
      v263 = (void *)*a2;
      v264 = *(int **)*a2;
      uint64_t v265 = (v263[1] - (void)v264) >> 2;
      uint64_t v266 = (v265 - 1);
      if ((int)v266 >= -1) {
        int v267 = -1;
      }
      else {
        int v267 = v265 - 1;
      }
      int v268 = v267 + 1;
      int v269 = v265 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v263[3] + 8 * v270) != *(void *)(v144[3] + 8 * v270)) {
          goto LABEL_256;
        }
      }
      int v269 = v268;
LABEL_256:
      int v295 = v147 + 1;
      while (1)
      {
        unsigned int v296 = v295 - 2;
        if (v295 - 2 < 0) {
          break;
        }
        --v295;
        if (*(void *)(*(void *)(v145 + 24) + 8 * v296)) {
          goto LABEL_291;
        }
      }
      int v295 = v150;
LABEL_291:
      int v309 = v265 + 1;
      while (1)
      {
        unsigned int v310 = v309 - 2;
        if (v309 - 2 < 0) {
          break;
        }
        --v309;
        if (*(void *)(v263[3] + 8 * v310)) {
          goto LABEL_458;
        }
      }
      int v309 = v268;
LABEL_458:
      unint64_t v399 = (uint64_t)(v144[1] - *v144) >> 2;
      if (v151 <= v269) {
        int v400 = v269;
      }
      else {
        int v400 = v151;
      }
      if (v151 <= v309) {
        int v151 = v309;
      }
      if (v295 > v269) {
        int v269 = v295;
      }
      if (v399 > v269)
      {
        int v401 = 1;
      }
      else
      {
        int v269 = (uint64_t)(v144[1] - *v144) >> 2;
        int v401 = 4;
      }
      if (v399 > v151)
      {
        int v402 = 2;
      }
      else
      {
        int v151 = v269;
        int v402 = v401;
      }
      if (v399 > v400)
      {
        int v151 = v400;
        int v402 = 3;
      }
      uint64_t v2053 = v266;
      uint64_t v2067 = v148;
      if (!v151) {
        goto LABEL_487;
      }
      unint64_t v403 = *(void *)(v144[3] + 8 * (v151 - 1));
      if (v403 < 0x10) {
        goto LABEL_487;
      }
      switch(v402)
      {
        case 1:
          if (v151 == 2)
          {
            uint64_t v1708 = *v146;
            if (v1708)
            {
              uint64_t v1709 = 0;
              uint64_t v1710 = 0;
              uint64_t v1711 = 0;
              uint64_t v1712 = *(void *)(v145 + 152);
              uint64_t v1713 = v263[19];
              uint64_t v1714 = v144[19];
              unint64_t v1715 = v146[1];
              v1716 = *(uint64_t **)(v145 + 24);
              uint64_t v1717 = *v1716;
              uint64_t v1718 = v1716[1];
              v1719 = (uint64_t *)v263[3];
              uint64_t v1721 = *v1719;
              uint64_t v1720 = v1719[1];
              if (v1715 <= 1) {
                uint64_t v1722 = 1;
              }
              else {
                uint64_t v1722 = v146[1];
              }
              uint64_t v1723 = v1717 - v1718 * v1715;
              uint64_t v1724 = v1721 - v1720 * v264[1];
              do
              {
                if (v1715)
                {
                  uint64_t v1725 = 0;
                  uint64_t v1726 = v1713 + 4 * v1710;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1727 = 0;
                      int v1728 = *(_DWORD *)(v1712 + 4 * v1711);
                      unsigned int v1729 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1714 + v1727) = v1728 < *(_DWORD *)(v1726 + 4 * v1727);
                        --v1729;
                        ++v1727;
                      }
                      while (v1729 > 1);
                    }
                    v1711 += v1718;
                    v1710 += v1720;
                    v1714 += (int)v403;
                    ++v1725;
                    v1726 += 4 * v1720;
                  }
                  while (v1725 != v1722);
                }
                v1711 += v1723;
                v1710 += v1724;
                ++v1709;
              }
              while (v1709 != v1708);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1112 = *v146;
            if (v1112)
            {
              uint64_t v1113 = 0;
              uint64_t v1114 = 0;
              uint64_t v1115 = *(void *)(v145 + 152);
              uint64_t v1116 = v263[19];
              uint64_t v1117 = v144[19];
              uint64_t v1118 = **(void **)(v145 + 24);
              uint64_t v1119 = 4 * *(void *)v263[3];
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1120 = 0;
                  int v1121 = *(_DWORD *)(v1115 + 4 * v1114);
                  unsigned int v1122 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1117 + v1120) = v1121 < *(_DWORD *)(v1116 + 4 * v1120);
                    --v1122;
                    ++v1120;
                  }
                  while (v1122 > 1);
                }
                v1114 += v1118;
                v1117 += (int)v403;
                ++v1113;
                v1116 += v1119;
              }
              while (v1113 != v1112);
            }
          }
          else
          {
            unint64_t v2008 = v144[6];
            if (v2008)
            {
              unint64_t v2043 = 0;
              uint64_t v1933 = v263[19];
              uint64_t v1959 = *(void *)(v145 + 152);
              uint64_t v1730 = v144[19];
              do
              {
                uint64_t v1731 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1732 = *(void *)(v145 + 24);
                  int v1733 = v2043;
                  do
                  {
                    ldiv_t v1734 = ldiv(v1733, v146[v148]);
                    int v1733 = v1734.quot;
                    v1731 += *(void *)(v1732 + 8 * v148--) * v1734.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1735 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1736) = 0;
                }
                else
                {
                  uint64_t v1736 = 0;
                  uint64_t v1737 = v263[3];
                  int v1738 = v2043;
                  do
                  {
                    ldiv_t v1739 = ldiv(v1738, v264[v1735]);
                    int v1738 = v1739.quot;
                    v1736 += *(void *)(v1737 + 8 * v1735--) * v1739.rem;
                  }
                  while (v1735 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1740 = 0;
                  int v1741 = *(_DWORD *)(v1959 + 4 * (int)v1731);
                  unsigned int v1742 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1730 + v1740) = v1741 < *(_DWORD *)(v1933 + 4 * (int)v1736 + 4 * v1740);
                    --v1742;
                    ++v1740;
                  }
                  while (v1742 > 1);
                }
                v1730 += (int)v403;
                v2043 += (int)v403;
              }
              while (v2043 < v2008);
            }
          }
          break;
        case 2:
          if (v151 == 2)
          {
            uint64_t v1743 = *v146;
            if (v1743)
            {
              uint64_t v1744 = 0;
              uint64_t v1745 = 0;
              uint64_t v1746 = 0;
              uint64_t v1747 = *(void *)(v145 + 152);
              uint64_t v1748 = v263[19];
              uint64_t v1749 = v144[19];
              unint64_t v1750 = v146[1];
              v1751 = *(uint64_t **)(v145 + 24);
              uint64_t v1752 = *v1751;
              uint64_t v1753 = v1751[1];
              v1754 = (uint64_t *)v263[3];
              uint64_t v1756 = *v1754;
              uint64_t v1755 = v1754[1];
              if (v1750 <= 1) {
                uint64_t v1757 = 1;
              }
              else {
                uint64_t v1757 = v146[1];
              }
              uint64_t v1758 = v1752 - v1753 * v1750;
              uint64_t v1759 = v1756 - v1755 * v264[1];
              do
              {
                if (v1750)
                {
                  uint64_t v1760 = 0;
                  uint64_t v1761 = v1747 + 4 * v1746;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1762 = 0;
                      int v1763 = *(_DWORD *)(v1748 + 4 * v1745);
                      unsigned int v1764 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1749 + v1762) = *(_DWORD *)(v1761 + 4 * v1762) < v1763;
                        --v1764;
                        ++v1762;
                      }
                      while (v1764 > 1);
                    }
                    v1746 += v1753;
                    v1745 += v1755;
                    v1749 += (int)v403;
                    ++v1760;
                    v1761 += 4 * v1753;
                  }
                  while (v1760 != v1757);
                }
                v1746 += v1758;
                v1745 += v1759;
                ++v1744;
              }
              while (v1744 != v1743);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v1123 = *v146;
            if (v1123)
            {
              uint64_t v1124 = 0;
              uint64_t v1125 = 0;
              uint64_t v1126 = *(void *)(v145 + 152);
              uint64_t v1127 = v263[19];
              uint64_t v1128 = v144[19];
              uint64_t v1129 = *(void *)v263[3];
              uint64_t v1130 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v1131 = 0;
                  int v1132 = *(_DWORD *)(v1127 + 4 * v1125);
                  unsigned int v1133 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1128 + v1131) = *(_DWORD *)(v1126 + 4 * v1131) < v1132;
                    --v1133;
                    ++v1131;
                  }
                  while (v1133 > 1);
                }
                v1125 += v1129;
                v1128 += (int)v403;
                ++v1124;
                v1126 += v1130;
              }
              while (v1124 != v1123);
            }
          }
          else
          {
            unint64_t v2009 = v144[6];
            if (v2009)
            {
              unint64_t v2044 = 0;
              uint64_t v1934 = v263[19];
              uint64_t v1960 = *(void *)(v145 + 152);
              uint64_t v1765 = v144[19];
              do
              {
                uint64_t v1766 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1767 = *(void *)(v145 + 24);
                  int v1768 = v2044;
                  do
                  {
                    ldiv_t v1769 = ldiv(v1768, v146[v148]);
                    int v1768 = v1769.quot;
                    v1766 += *(void *)(v1767 + 8 * v148--) * v1769.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1770 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1771) = 0;
                }
                else
                {
                  uint64_t v1771 = 0;
                  uint64_t v1772 = v263[3];
                  int v1773 = v2044;
                  do
                  {
                    ldiv_t v1774 = ldiv(v1773, v264[v1770]);
                    int v1773 = v1774.quot;
                    v1771 += *(void *)(v1772 + 8 * v1770--) * v1774.rem;
                  }
                  while (v1770 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1775 = 0;
                  int v1776 = *(_DWORD *)(v1934 + 4 * (int)v1771);
                  unsigned int v1777 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1765 + v1775) = *(_DWORD *)(v1960 + 4 * (int)v1766 + 4 * v1775) < v1776;
                    --v1777;
                    ++v1775;
                  }
                  while (v1777 > 1);
                }
                v1765 += (int)v403;
                v2044 += (int)v403;
              }
              while (v2044 < v2009);
            }
          }
          break;
        case 3:
          if (v151 == 2)
          {
            uint64_t v1318 = *v146;
            if (v1318)
            {
              uint64_t v1319 = 0;
              uint64_t v1320 = 0;
              uint64_t v1321 = 0;
              uint64_t v1322 = *(void *)(v145 + 152);
              uint64_t v1323 = v263[19];
              uint64_t v1324 = v144[19];
              unint64_t v1325 = v146[1];
              v1326 = *(uint64_t **)(v145 + 24);
              uint64_t v1327 = *v1326;
              uint64_t v1328 = v1326[1];
              v1329 = (uint64_t *)v263[3];
              uint64_t v1331 = *v1329;
              uint64_t v1330 = v1329[1];
              if (v1325 <= 1) {
                uint64_t v1332 = 1;
              }
              else {
                uint64_t v1332 = v146[1];
              }
              uint64_t v1333 = v1327 - v1328 * v1325;
              uint64_t v1334 = v1331 - v1330 * v264[1];
              do
              {
                if (v1325)
                {
                  uint64_t v1335 = 0;
                  uint64_t v1336 = v1323 + 4 * v1320;
                  uint64_t v1337 = v1322 + 4 * v1321;
                  do
                  {
                    if ((int)v403 >= 1)
                    {
                      uint64_t v1338 = 0;
                      unsigned int v1339 = v403 + 1;
                      do
                      {
                        *(unsigned char *)(v1324 + v1338) = *(_DWORD *)(v1337 + 4 * v1338) < *(_DWORD *)(v1336 + 4 * v1338);
                        --v1339;
                        ++v1338;
                      }
                      while (v1339 > 1);
                    }
                    v1321 += v1328;
                    v1320 += v1330;
                    v1324 += (int)v403;
                    ++v1335;
                    v1336 += 4 * v1330;
                    v1337 += 4 * v1328;
                  }
                  while (v1335 != v1332);
                }
                v1321 += v1333;
                v1320 += v1334;
                ++v1319;
              }
              while (v1319 != v1318);
            }
          }
          else if (v151 == 1)
          {
            uint64_t v404 = *v146;
            if (v404)
            {
              uint64_t v405 = 0;
              uint64_t v406 = *(void *)(v145 + 152);
              uint64_t v407 = v263[19];
              uint64_t v408 = v144[19];
              uint64_t v409 = 4 * *(void *)v263[3];
              uint64_t v410 = 4 * **(void **)(v145 + 24);
              do
              {
                if ((int)v403 >= 1)
                {
                  uint64_t v411 = 0;
                  unsigned int v412 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v408 + v411) = *(_DWORD *)(v406 + 4 * v411) < *(_DWORD *)(v407 + 4 * v411);
                    --v412;
                    ++v411;
                  }
                  while (v412 > 1);
                }
                v408 += (int)v403;
                ++v405;
                v407 += v409;
                v406 += v410;
              }
              while (v405 != v404);
            }
          }
          else
          {
            unint64_t v1997 = v144[6];
            if (v1997)
            {
              unint64_t v2032 = 0;
              uint64_t v1922 = v263[19];
              uint64_t v1948 = *(void *)(v145 + 152);
              uint64_t v1340 = v144[19];
              do
              {
                uint64_t v1341 = 0;
                if ((v148 & 0x80000000) == 0)
                {
                  uint64_t v1342 = *(void *)(v145 + 24);
                  int v1343 = v2032;
                  do
                  {
                    ldiv_t v1344 = ldiv(v1343, v146[v148]);
                    int v1343 = v1344.quot;
                    v1341 += *(void *)(v1342 + 8 * v148--) * v1344.rem;
                  }
                  while (v148 != -1);
                }
                uint64_t v1345 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1346) = 0;
                }
                else
                {
                  uint64_t v1346 = 0;
                  uint64_t v1347 = v263[3];
                  int v1348 = v2032;
                  do
                  {
                    ldiv_t v1349 = ldiv(v1348, v264[v1345]);
                    int v1348 = v1349.quot;
                    v1346 += *(void *)(v1347 + 8 * v1345--) * v1349.rem;
                  }
                  while (v1345 != -1);
                }
                uint64_t v148 = v2067;
                if ((int)v403 >= 1)
                {
                  uint64_t v1350 = 0;
                  unsigned int v1351 = v403 + 1;
                  do
                  {
                    *(unsigned char *)(v1340 + v1350) = *(_DWORD *)(v1948 + 4 * (int)v1341 + 4 * v1350) < *(_DWORD *)(v1922 + 4 * (int)v1346 + 4 * v1350);
                    --v1351;
                    ++v1350;
                  }
                  while (v1351 > 1);
                }
                v1340 += (int)v403;
                v2032 += (int)v403;
              }
              while (v2032 < v1997);
            }
          }
          break;
        default:
LABEL_487:
          switch(v399)
          {
            case 1uLL:
              uint64_t v413 = v144[6];
              if (v413)
              {
                v414 = *(_DWORD **)(v145 + 152);
                v415 = (_DWORD *)v263[19];
                v416 = (BOOL *)v144[19];
                uint64_t v417 = 4 * *(void *)v263[3];
                uint64_t v418 = 4 * **(void **)(v145 + 24);
                do
                {
                  *v416++ = *v414 < *v415;
                  v415 = (_DWORD *)((char *)v415 + v417);
                  v414 = (_DWORD *)((char *)v414 + v418);
                  --v413;
                }
                while (v413);
              }
              break;
            case 2uLL:
              uint64_t v794 = *v146;
              if (v794)
              {
                uint64_t v795 = 0;
                uint64_t v796 = 0;
                uint64_t v797 = 0;
                uint64_t v798 = 0;
                uint64_t v799 = *(void *)(v145 + 152);
                uint64_t v800 = v263[19];
                uint64_t v801 = v144[19];
                unint64_t v802 = v146[1];
                v803 = *(uint64_t **)(v145 + 24);
                uint64_t v804 = *v803;
                uint64_t v805 = v803[1];
                v806 = (uint64_t *)v263[3];
                uint64_t v807 = *v806;
                uint64_t v808 = v806[1];
                uint64_t v809 = v807 - v808 * v264[1];
                if (v802 <= 1) {
                  uint64_t v810 = 1;
                }
                else {
                  uint64_t v810 = v146[1];
                }
                uint64_t v811 = v804 - v805 * v802;
                do
                {
                  if (v802)
                  {
                    uint64_t v812 = v796 + v810;
                    v813 = (BOOL *)(v801 + v796);
                    uint64_t v814 = v810;
                    do
                    {
                      *v813++ = *(_DWORD *)(v799 + 4 * v798) < *(_DWORD *)(v800 + 4 * v797);
                      v798 += v805;
                      v797 += v808;
                      --v814;
                    }
                    while (v814);
                    uint64_t v796 = v812;
                  }
                  v798 += v811;
                  v797 += v809;
                  ++v795;
                }
                while (v795 != v794);
              }
              break;
            case 3uLL:
              uint64_t v815 = *v146;
              if (v815)
              {
                uint64_t v816 = 0;
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = 0;
                uint64_t v820 = *(void *)(v145 + 152);
                uint64_t v821 = v263[19];
                uint64_t v822 = v144[19];
                unint64_t v823 = v146[1];
                v824 = *(void **)(v145 + 24);
                uint64_t v825 = v824[1];
                v826 = (void *)v263[3];
                uint64_t v827 = v826[1];
                uint64_t v828 = *v826 - v827 * v264[1];
                if (v823 <= 1) {
                  uint64_t v829 = 1;
                }
                else {
                  uint64_t v829 = v146[1];
                }
                unint64_t v830 = *v824 - v825 * v823;
                do
                {
                  if (v823)
                  {
                    uint64_t v831 = 0;
                    unint64_t v832 = v146[2];
                    uint64_t v833 = v824[2];
                    uint64_t v834 = v826[2];
                    if (v832 <= 1) {
                      uint64_t v835 = 1;
                    }
                    else {
                      uint64_t v835 = v146[2];
                    }
                    uint64_t v836 = v827 - v834 * v264[2];
                    do
                    {
                      uint64_t v837 = v835;
                      if (v832)
                      {
                        do
                        {
                          *(unsigned char *)(v822 + v817++) = *(_DWORD *)(v820 + 4 * v819) < *(_DWORD *)(v821 + 4 * v818);
                          v819 += v833;
                          v818 += v834;
                          --v837;
                        }
                        while (v837);
                      }
                      v819 += v825 - v833 * v832;
                      v818 += v836;
                      ++v831;
                    }
                    while (v831 != v829);
                  }
                  v819 += v830;
                  v818 += v828;
                  ++v816;
                }
                while (v816 != v815);
              }
              break;
            case 4uLL:
              uint64_t v2074 = *v146;
              if (v2074)
              {
                uint64_t v838 = 0;
                uint64_t v839 = 0;
                uint64_t v840 = 0;
                uint64_t v841 = 0;
                uint64_t v842 = *(void *)(v145 + 152);
                uint64_t v843 = v263[19];
                uint64_t v844 = v144[19];
                unint64_t v845 = v146[1];
                v846 = *(void **)(v145 + 24);
                v847 = (void *)v263[3];
                uint64_t v1942 = v847[1];
                uint64_t v1974 = v846[1];
                uint64_t v2023 = *v847 - v1942 * v264[1];
                int v2060 = v146[1];
                if (v845 <= 1) {
                  uint64_t v848 = 1;
                }
                else {
                  uint64_t v848 = v146[1];
                }
                unint64_t v1988 = *v846 - v846[1] * v845;
                do
                {
                  if (v2060)
                  {
                    uint64_t v849 = 0;
                    unint64_t v850 = v146[2];
                    uint64_t v851 = v846[2];
                    uint64_t v852 = v847[2];
                    if (v850 <= 1) {
                      uint64_t v853 = 1;
                    }
                    else {
                      uint64_t v853 = v146[2];
                    }
                    uint64_t v854 = v1942 - v852 * v264[2];
                    do
                    {
                      if (v850)
                      {
                        uint64_t v855 = 0;
                        unint64_t v856 = v146[3];
                        uint64_t v857 = v846[3];
                        uint64_t v858 = v847[3];
                        if (v856 <= 1) {
                          uint64_t v859 = 1;
                        }
                        else {
                          uint64_t v859 = v146[3];
                        }
                        uint64_t v860 = v852 - v858 * v264[3];
                        do
                        {
                          uint64_t v861 = v859;
                          if (v856)
                          {
                            do
                            {
                              *(unsigned char *)(v844 + v839++) = *(_DWORD *)(v842 + 4 * v841) < *(_DWORD *)(v843 + 4 * v840);
                              v841 += v857;
                              v840 += v858;
                              --v861;
                            }
                            while (v861);
                          }
                          v841 += v851 - v857 * v856;
                          v840 += v860;
                          ++v855;
                        }
                        while (v855 != v853);
                      }
                      v841 += v1974 - v851 * v850;
                      v840 += v854;
                      ++v849;
                    }
                    while (v849 != v848);
                  }
                  v841 += v1988;
                  v840 += v2023;
                  ++v838;
                }
                while (v838 != v2074);
              }
              break;
            default:
              uint64_t v783 = v144[6];
              if (v783)
              {
                uint64_t v784 = 0;
                uint64_t v1987 = v263[19];
                uint64_t v2022 = *(void *)(v145 + 152);
                uint64_t v1973 = v144[19];
                do
                {
                  uint64_t v785 = 0;
                  if ((v148 & 0x80000000) == 0)
                  {
                    uint64_t v786 = *(void *)(v145 + 24);
                    int v787 = v784;
                    do
                    {
                      ldiv_t v788 = ldiv(v787, v146[v148]);
                      int v787 = v788.quot;
                      v785 += *(void *)(v786 + 8 * v148--) * v788.rem;
                    }
                    while (v148 != -1);
                  }
                  uint64_t v789 = v2053;
                  if ((v2053 & 0x80000000) != 0)
                  {
                    LODWORD(v790) = 0;
                  }
                  else
                  {
                    uint64_t v790 = 0;
                    uint64_t v791 = v263[3];
                    int v792 = v784;
                    do
                    {
                      ldiv_t v793 = ldiv(v792, v264[v789]);
                      int v792 = v793.quot;
                      v790 += *(void *)(v791 + 8 * v789--) * v793.rem;
                    }
                    while (v789 != -1);
                  }
                  *(unsigned char *)(v1973 + v784++) = *(_DWORD *)(v2022 + 4 * (int)v785) < *(_DWORD *)(v1987 + 4 * (int)v790);
                  uint64_t v148 = v2067;
                }
                while (v784 != v783);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v18)
      {
        case 0:
          BOOL v17 = **(void **)(*a1 + 152) < **(void **)(*a2 + 152);
LABEL_21:
          BOOL v8 = v17;
          goto LABEL_26;
        case 1:
          int v182 = *(_DWORD *)(*a2 + 160);
          if (v182 >= 1)
          {
            uint64_t v183 = **(void **)(*a1 + 152);
            v184 = *(BOOL **)(*(void *)a3 + 152);
            v185 = *(uint64_t **)(*a2 + 152);
            unsigned int v186 = v182 + 1;
            do
            {
              uint64_t v187 = *v185++;
              *v184++ = v183 < v187;
              --v186;
            }
            while (v186 > 1);
          }
          return;
        case 2:
          int v188 = *(_DWORD *)(*a1 + 160);
          if (v188 >= 1)
          {
            uint64_t v189 = **(void **)(*a2 + 152);
            v190 = *(BOOL **)(*(void *)a3 + 152);
            v191 = *(uint64_t **)(*a1 + 152);
            unsigned int v192 = v188 + 1;
            do
            {
              uint64_t v193 = *v191++;
              *v190++ = v193 < v189;
              --v192;
            }
            while (v192 > 1);
          }
          return;
        case 3:
          int v194 = *(_DWORD *)(*(void *)a3 + 48);
          if (v194 >= 1)
          {
            v195 = *(BOOL **)(*(void *)a3 + 152);
            v196 = *(uint64_t **)(*a2 + 152);
            v197 = *(uint64_t **)(*a1 + 152);
            unsigned int v198 = v194 + 1;
            do
            {
              uint64_t v200 = *v197++;
              uint64_t v199 = v200;
              uint64_t v201 = *v196++;
              *v195++ = v199 < v201;
              --v198;
            }
            while (v198 > 1);
          }
          return;
        default:
          v173 = *(void **)a3;
          uint64_t v174 = *a1;
          v175 = *(int **)*a1;
          uint64_t v176 = (*(void *)(*a1 + 8) - (void)v175) >> 2;
          uint64_t v177 = (v176 - 1);
          if ((int)v177 >= -1) {
            int v178 = -1;
          }
          else {
            int v178 = v176 - 1;
          }
          int v179 = v178 + 1;
          int v180 = v176 + 1;
          break;
      }
      while (1)
      {
        unsigned int v181 = v180 - 2;
        if (v180 - 2 < 0) {
          break;
        }
        --v180;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v181) != *(void *)(v173[3] + 8 * v181)) {
          goto LABEL_220;
        }
      }
      int v180 = v179;
LABEL_220:
      v271 = (void *)*a2;
      v272 = *(int **)*a2;
      uint64_t v273 = (v271[1] - (void)v272) >> 2;
      uint64_t v274 = (v273 - 1);
      if ((int)v274 >= -1) {
        int v275 = -1;
      }
      else {
        int v275 = v273 - 1;
      }
      int v276 = v275 + 1;
      int v277 = v273 + 1;
      while (1)
      {
        unsigned int v278 = v277 - 2;
        if (v277 - 2 < 0) {
          break;
        }
        --v277;
        if (*(void *)(v271[3] + 8 * v278) != *(void *)(v173[3] + 8 * v278)) {
          goto LABEL_261;
        }
      }
      int v277 = v276;
LABEL_261:
      int v297 = v176 + 1;
      while (1)
      {
        unsigned int v298 = v297 - 2;
        if (v297 - 2 < 0) {
          break;
        }
        --v297;
        if (*(void *)(*(void *)(v174 + 24) + 8 * v298)) {
          goto LABEL_296;
        }
      }
      int v297 = v179;
LABEL_296:
      int v311 = v273 + 1;
      while (1)
      {
        unsigned int v312 = v311 - 2;
        if (v311 - 2 < 0) {
          break;
        }
        --v311;
        if (*(void *)(v271[3] + 8 * v312)) {
          goto LABEL_493;
        }
      }
      int v311 = v276;
LABEL_493:
      unint64_t v419 = (uint64_t)(v173[1] - *v173) >> 2;
      if (v180 <= v277) {
        int v420 = v277;
      }
      else {
        int v420 = v180;
      }
      if (v180 <= v311) {
        int v180 = v311;
      }
      if (v297 > v277) {
        int v277 = v297;
      }
      if (v419 > v277)
      {
        int v421 = 1;
      }
      else
      {
        int v277 = (uint64_t)(v173[1] - *v173) >> 2;
        int v421 = 4;
      }
      if (v419 > v180)
      {
        int v422 = 2;
      }
      else
      {
        int v180 = v277;
        int v422 = v421;
      }
      if (v419 > v420)
      {
        int v180 = v420;
        int v422 = 3;
      }
      uint64_t v2054 = v274;
      uint64_t v2068 = v177;
      if (!v180) {
        goto LABEL_522;
      }
      unint64_t v423 = *(void *)(v173[3] + 8 * (v180 - 1));
      if (v423 < 0x10) {
        goto LABEL_522;
      }
      switch(v422)
      {
        case 1:
          if (v180 == 2)
          {
            uint64_t v1778 = *v175;
            if (v1778)
            {
              uint64_t v1779 = 0;
              uint64_t v1780 = 0;
              uint64_t v1781 = 0;
              uint64_t v1782 = *(void *)(v174 + 152);
              uint64_t v1783 = v271[19];
              uint64_t v1784 = v173[19];
              unint64_t v1785 = v175[1];
              v1786 = *(uint64_t **)(v174 + 24);
              uint64_t v1787 = *v1786;
              uint64_t v1788 = v1786[1];
              v1789 = (uint64_t *)v271[3];
              uint64_t v1791 = *v1789;
              uint64_t v1790 = v1789[1];
              if (v1785 <= 1) {
                uint64_t v1792 = 1;
              }
              else {
                uint64_t v1792 = v175[1];
              }
              uint64_t v1793 = v1787 - v1788 * v1785;
              uint64_t v1794 = v1791 - v1790 * v272[1];
              do
              {
                if (v1785)
                {
                  uint64_t v1795 = 0;
                  uint64_t v1796 = v1783 + 8 * v1780;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1797 = 0;
                      uint64_t v1798 = *(void *)(v1782 + 8 * v1781);
                      unsigned int v1799 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1784 + v1797) = v1798 < *(void *)(v1796 + 8 * v1797);
                        --v1799;
                        ++v1797;
                      }
                      while (v1799 > 1);
                    }
                    v1781 += v1788;
                    v1780 += v1790;
                    v1784 += (int)v423;
                    ++v1795;
                    v1796 += 8 * v1790;
                  }
                  while (v1795 != v1792);
                }
                v1781 += v1793;
                v1780 += v1794;
                ++v1779;
              }
              while (v1779 != v1778);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1134 = *v175;
            if (v1134)
            {
              uint64_t v1135 = 0;
              uint64_t v1136 = 0;
              uint64_t v1137 = *(void *)(v174 + 152);
              uint64_t v1138 = v271[19];
              uint64_t v1139 = v173[19];
              uint64_t v1140 = **(void **)(v174 + 24);
              uint64_t v1141 = 8 * *(void *)v271[3];
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1142 = 0;
                  uint64_t v1143 = *(void *)(v1137 + 8 * v1136);
                  unsigned int v1144 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1139 + v1142) = v1143 < *(void *)(v1138 + 8 * v1142);
                    --v1144;
                    ++v1142;
                  }
                  while (v1144 > 1);
                }
                v1136 += v1140;
                v1139 += (int)v423;
                ++v1135;
                v1138 += v1141;
              }
              while (v1135 != v1134);
            }
          }
          else
          {
            unint64_t v2010 = v173[6];
            if (v2010)
            {
              unint64_t v2045 = 0;
              uint64_t v1935 = v271[19];
              uint64_t v1961 = *(void *)(v174 + 152);
              uint64_t v1800 = v173[19];
              do
              {
                uint64_t v1801 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1802 = *(void *)(v174 + 24);
                  int v1803 = v2045;
                  do
                  {
                    ldiv_t v1804 = ldiv(v1803, v175[v177]);
                    int v1803 = v1804.quot;
                    v1801 += *(void *)(v1802 + 8 * v177--) * v1804.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1805 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1806) = 0;
                }
                else
                {
                  uint64_t v1806 = 0;
                  uint64_t v1807 = v271[3];
                  int v1808 = v2045;
                  do
                  {
                    ldiv_t v1809 = ldiv(v1808, v272[v1805]);
                    int v1808 = v1809.quot;
                    v1806 += *(void *)(v1807 + 8 * v1805--) * v1809.rem;
                  }
                  while (v1805 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1810 = 0;
                  uint64_t v1811 = *(void *)(v1961 + 8 * (int)v1801);
                  unsigned int v1812 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1800 + v1810) = v1811 < *(void *)(v1935 + 8 * (int)v1806 + 8 * v1810);
                    --v1812;
                    ++v1810;
                  }
                  while (v1812 > 1);
                }
                v1800 += (int)v423;
                v2045 += (int)v423;
              }
              while (v2045 < v2010);
            }
          }
          break;
        case 2:
          if (v180 == 2)
          {
            uint64_t v1813 = *v175;
            if (v1813)
            {
              uint64_t v1814 = 0;
              uint64_t v1815 = 0;
              uint64_t v1816 = 0;
              uint64_t v1817 = *(void *)(v174 + 152);
              uint64_t v1818 = v271[19];
              uint64_t v1819 = v173[19];
              unint64_t v1820 = v175[1];
              v1821 = *(uint64_t **)(v174 + 24);
              uint64_t v1822 = *v1821;
              uint64_t v1823 = v1821[1];
              v1824 = (uint64_t *)v271[3];
              uint64_t v1826 = *v1824;
              uint64_t v1825 = v1824[1];
              if (v1820 <= 1) {
                uint64_t v1827 = 1;
              }
              else {
                uint64_t v1827 = v175[1];
              }
              uint64_t v1828 = v1822 - v1823 * v1820;
              uint64_t v1829 = v1826 - v1825 * v272[1];
              do
              {
                if (v1820)
                {
                  uint64_t v1830 = 0;
                  uint64_t v1831 = v1817 + 8 * v1816;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1832 = 0;
                      uint64_t v1833 = *(void *)(v1818 + 8 * v1815);
                      unsigned int v1834 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1819 + v1832) = *(void *)(v1831 + 8 * v1832) < v1833;
                        --v1834;
                        ++v1832;
                      }
                      while (v1834 > 1);
                    }
                    v1816 += v1823;
                    v1815 += v1825;
                    v1819 += (int)v423;
                    ++v1830;
                    v1831 += 8 * v1823;
                  }
                  while (v1830 != v1827);
                }
                v1816 += v1828;
                v1815 += v1829;
                ++v1814;
              }
              while (v1814 != v1813);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v1145 = *v175;
            if (v1145)
            {
              uint64_t v1146 = 0;
              uint64_t v1147 = 0;
              uint64_t v1148 = *(void *)(v174 + 152);
              uint64_t v1149 = v271[19];
              uint64_t v1150 = v173[19];
              uint64_t v1151 = *(void *)v271[3];
              uint64_t v1152 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v1153 = 0;
                  uint64_t v1154 = *(void *)(v1149 + 8 * v1147);
                  unsigned int v1155 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1150 + v1153) = *(void *)(v1148 + 8 * v1153) < v1154;
                    --v1155;
                    ++v1153;
                  }
                  while (v1155 > 1);
                }
                v1147 += v1151;
                v1150 += (int)v423;
                ++v1146;
                v1148 += v1152;
              }
              while (v1146 != v1145);
            }
          }
          else
          {
            unint64_t v2011 = v173[6];
            if (v2011)
            {
              unint64_t v2046 = 0;
              uint64_t v1936 = v271[19];
              uint64_t v1962 = *(void *)(v174 + 152);
              uint64_t v1835 = v173[19];
              do
              {
                uint64_t v1836 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1837 = *(void *)(v174 + 24);
                  int v1838 = v2046;
                  do
                  {
                    ldiv_t v1839 = ldiv(v1838, v175[v177]);
                    int v1838 = v1839.quot;
                    v1836 += *(void *)(v1837 + 8 * v177--) * v1839.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1840 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1841) = 0;
                }
                else
                {
                  uint64_t v1841 = 0;
                  uint64_t v1842 = v271[3];
                  int v1843 = v2046;
                  do
                  {
                    ldiv_t v1844 = ldiv(v1843, v272[v1840]);
                    int v1843 = v1844.quot;
                    v1841 += *(void *)(v1842 + 8 * v1840--) * v1844.rem;
                  }
                  while (v1840 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1845 = 0;
                  uint64_t v1846 = *(void *)(v1936 + 8 * (int)v1841);
                  unsigned int v1847 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1835 + v1845) = *(void *)(v1962 + 8 * (int)v1836 + 8 * v1845) < v1846;
                    --v1847;
                    ++v1845;
                  }
                  while (v1847 > 1);
                }
                v1835 += (int)v423;
                v2046 += (int)v423;
              }
              while (v2046 < v2011);
            }
          }
          break;
        case 3:
          if (v180 == 2)
          {
            uint64_t v1352 = *v175;
            if (v1352)
            {
              uint64_t v1353 = 0;
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = *(void *)(v174 + 152);
              uint64_t v1357 = v271[19];
              uint64_t v1358 = v173[19];
              unint64_t v1359 = v175[1];
              v1360 = *(uint64_t **)(v174 + 24);
              uint64_t v1361 = *v1360;
              uint64_t v1362 = v1360[1];
              v1363 = (uint64_t *)v271[3];
              uint64_t v1365 = *v1363;
              uint64_t v1364 = v1363[1];
              if (v1359 <= 1) {
                uint64_t v1366 = 1;
              }
              else {
                uint64_t v1366 = v175[1];
              }
              uint64_t v1367 = v1361 - v1362 * v1359;
              uint64_t v1368 = v1365 - v1364 * v272[1];
              do
              {
                if (v1359)
                {
                  uint64_t v1369 = 0;
                  uint64_t v1370 = v1357 + 8 * v1354;
                  uint64_t v1371 = v1356 + 8 * v1355;
                  do
                  {
                    if ((int)v423 >= 1)
                    {
                      uint64_t v1372 = 0;
                      unsigned int v1373 = v423 + 1;
                      do
                      {
                        *(unsigned char *)(v1358 + v1372) = *(void *)(v1371 + 8 * v1372) < *(void *)(v1370 + 8 * v1372);
                        --v1373;
                        ++v1372;
                      }
                      while (v1373 > 1);
                    }
                    v1355 += v1362;
                    v1354 += v1364;
                    v1358 += (int)v423;
                    ++v1369;
                    v1370 += 8 * v1364;
                    v1371 += 8 * v1362;
                  }
                  while (v1369 != v1366);
                }
                v1355 += v1367;
                v1354 += v1368;
                ++v1353;
              }
              while (v1353 != v1352);
            }
          }
          else if (v180 == 1)
          {
            uint64_t v424 = *v175;
            if (v424)
            {
              uint64_t v425 = 0;
              uint64_t v426 = *(void *)(v174 + 152);
              uint64_t v427 = v271[19];
              uint64_t v428 = v173[19];
              uint64_t v429 = 8 * *(void *)v271[3];
              uint64_t v430 = 8 * **(void **)(v174 + 24);
              do
              {
                if ((int)v423 >= 1)
                {
                  uint64_t v431 = 0;
                  unsigned int v432 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v428 + v431) = *(void *)(v426 + 8 * v431) < *(void *)(v427 + 8 * v431);
                    --v432;
                    ++v431;
                  }
                  while (v432 > 1);
                }
                v428 += (int)v423;
                ++v425;
                v427 += v429;
                v426 += v430;
              }
              while (v425 != v424);
            }
          }
          else
          {
            unint64_t v1998 = v173[6];
            if (v1998)
            {
              unint64_t v2033 = 0;
              uint64_t v1923 = v271[19];
              uint64_t v1949 = *(void *)(v174 + 152);
              uint64_t v1374 = v173[19];
              do
              {
                uint64_t v1375 = 0;
                if ((v177 & 0x80000000) == 0)
                {
                  uint64_t v1376 = *(void *)(v174 + 24);
                  int v1377 = v2033;
                  do
                  {
                    ldiv_t v1378 = ldiv(v1377, v175[v177]);
                    int v1377 = v1378.quot;
                    v1375 += *(void *)(v1376 + 8 * v177--) * v1378.rem;
                  }
                  while (v177 != -1);
                }
                uint64_t v1379 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1380) = 0;
                }
                else
                {
                  uint64_t v1380 = 0;
                  uint64_t v1381 = v271[3];
                  int v1382 = v2033;
                  do
                  {
                    ldiv_t v1383 = ldiv(v1382, v272[v1379]);
                    int v1382 = v1383.quot;
                    v1380 += *(void *)(v1381 + 8 * v1379--) * v1383.rem;
                  }
                  while (v1379 != -1);
                }
                uint64_t v177 = v2068;
                if ((int)v423 >= 1)
                {
                  uint64_t v1384 = 0;
                  unsigned int v1385 = v423 + 1;
                  do
                  {
                    *(unsigned char *)(v1374 + v1384) = *(void *)(v1949 + 8 * (int)v1375 + 8 * v1384) < *(void *)(v1923 + 8 * (int)v1380 + 8 * v1384);
                    --v1385;
                    ++v1384;
                  }
                  while (v1385 > 1);
                }
                v1374 += (int)v423;
                v2033 += (int)v423;
              }
              while (v2033 < v1998);
            }
          }
          break;
        default:
LABEL_522:
          switch(v419)
          {
            case 1uLL:
              uint64_t v433 = v173[6];
              if (v433)
              {
                v434 = *(void **)(v174 + 152);
                v435 = (void *)v271[19];
                v436 = (BOOL *)v173[19];
                uint64_t v437 = 8 * *(void *)v271[3];
                uint64_t v438 = 8 * **(void **)(v174 + 24);
                do
                {
                  *v436++ = *v434 < *v435;
                  v435 = (void *)((char *)v435 + v437);
                  v434 = (void *)((char *)v434 + v438);
                  --v433;
                }
                while (v433);
              }
              break;
            case 2uLL:
              uint64_t v873 = *v175;
              if (v873)
              {
                uint64_t v874 = 0;
                uint64_t v875 = 0;
                uint64_t v876 = 0;
                uint64_t v877 = 0;
                uint64_t v878 = *(void *)(v174 + 152);
                uint64_t v879 = v271[19];
                uint64_t v880 = v173[19];
                unint64_t v881 = v175[1];
                v882 = *(uint64_t **)(v174 + 24);
                uint64_t v883 = *v882;
                uint64_t v884 = v882[1];
                v885 = (uint64_t *)v271[3];
                uint64_t v886 = *v885;
                uint64_t v887 = v885[1];
                uint64_t v888 = v886 - v887 * v272[1];
                if (v881 <= 1) {
                  uint64_t v889 = 1;
                }
                else {
                  uint64_t v889 = v175[1];
                }
                uint64_t v890 = v883 - v884 * v881;
                do
                {
                  if (v881)
                  {
                    uint64_t v891 = v875 + v889;
                    v892 = (BOOL *)(v880 + v875);
                    uint64_t v893 = v889;
                    do
                    {
                      *v892++ = *(void *)(v878 + 8 * v877) < *(void *)(v879 + 8 * v876);
                      v877 += v884;
                      v876 += v887;
                      --v893;
                    }
                    while (v893);
                    uint64_t v875 = v891;
                  }
                  v877 += v890;
                  v876 += v888;
                  ++v874;
                }
                while (v874 != v873);
              }
              break;
            case 3uLL:
              uint64_t v894 = *v175;
              if (v894)
              {
                uint64_t v895 = 0;
                uint64_t v896 = 0;
                uint64_t v897 = 0;
                uint64_t v898 = 0;
                uint64_t v899 = *(void *)(v174 + 152);
                uint64_t v900 = v271[19];
                uint64_t v901 = v173[19];
                unint64_t v902 = v175[1];
                v903 = *(void **)(v174 + 24);
                uint64_t v904 = v903[1];
                v905 = (void *)v271[3];
                uint64_t v906 = v905[1];
                uint64_t v907 = *v905 - v906 * v272[1];
                if (v902 <= 1) {
                  uint64_t v908 = 1;
                }
                else {
                  uint64_t v908 = v175[1];
                }
                unint64_t v909 = *v903 - v904 * v902;
                do
                {
                  if (v902)
                  {
                    uint64_t v910 = 0;
                    unint64_t v911 = v175[2];
                    uint64_t v912 = v903[2];
                    uint64_t v913 = v905[2];
                    if (v911 <= 1) {
                      uint64_t v914 = 1;
                    }
                    else {
                      uint64_t v914 = v175[2];
                    }
                    uint64_t v915 = v906 - v913 * v272[2];
                    do
                    {
                      uint64_t v916 = v914;
                      if (v911)
                      {
                        do
                        {
                          *(unsigned char *)(v901 + v896++) = *(void *)(v899 + 8 * v898) < *(void *)(v900 + 8 * v897);
                          v898 += v912;
                          v897 += v913;
                          --v916;
                        }
                        while (v916);
                      }
                      v898 += v904 - v912 * v911;
                      v897 += v915;
                      ++v910;
                    }
                    while (v910 != v908);
                  }
                  v898 += v909;
                  v897 += v907;
                  ++v895;
                }
                while (v895 != v894);
              }
              break;
            case 4uLL:
              uint64_t v2075 = *v175;
              if (v2075)
              {
                uint64_t v917 = 0;
                uint64_t v918 = 0;
                uint64_t v919 = 0;
                uint64_t v920 = 0;
                uint64_t v921 = *(void *)(v174 + 152);
                uint64_t v922 = v271[19];
                uint64_t v923 = v173[19];
                unint64_t v924 = v175[1];
                v925 = *(void **)(v174 + 24);
                v926 = (void *)v271[3];
                uint64_t v1943 = v926[1];
                uint64_t v1976 = v925[1];
                uint64_t v2025 = *v926 - v1943 * v272[1];
                int v2061 = v175[1];
                if (v924 <= 1) {
                  uint64_t v927 = 1;
                }
                else {
                  uint64_t v927 = v175[1];
                }
                unint64_t v1990 = *v925 - v925[1] * v924;
                do
                {
                  if (v2061)
                  {
                    uint64_t v928 = 0;
                    unint64_t v929 = v175[2];
                    uint64_t v930 = v925[2];
                    uint64_t v931 = v926[2];
                    if (v929 <= 1) {
                      uint64_t v932 = 1;
                    }
                    else {
                      uint64_t v932 = v175[2];
                    }
                    uint64_t v933 = v1943 - v931 * v272[2];
                    do
                    {
                      if (v929)
                      {
                        uint64_t v934 = 0;
                        unint64_t v935 = v175[3];
                        uint64_t v936 = v925[3];
                        uint64_t v937 = v926[3];
                        if (v935 <= 1) {
                          uint64_t v938 = 1;
                        }
                        else {
                          uint64_t v938 = v175[3];
                        }
                        uint64_t v939 = v931 - v937 * v272[3];
                        do
                        {
                          uint64_t v940 = v938;
                          if (v935)
                          {
                            do
                            {
                              *(unsigned char *)(v923 + v918++) = *(void *)(v921 + 8 * v920) < *(void *)(v922 + 8 * v919);
                              v920 += v936;
                              v919 += v937;
                              --v940;
                            }
                            while (v940);
                          }
                          v920 += v930 - v936 * v935;
                          v919 += v939;
                          ++v934;
                        }
                        while (v934 != v932);
                      }
                      v920 += v1976 - v930 * v929;
                      v919 += v933;
                      ++v928;
                    }
                    while (v928 != v927);
                  }
                  v920 += v1990;
                  v919 += v2025;
                  ++v917;
                }
                while (v917 != v2075);
              }
              break;
            default:
              uint64_t v862 = v173[6];
              if (v862)
              {
                uint64_t v863 = 0;
                uint64_t v1989 = v271[19];
                uint64_t v2024 = *(void *)(v174 + 152);
                uint64_t v1975 = v173[19];
                do
                {
                  uint64_t v864 = 0;
                  if ((v177 & 0x80000000) == 0)
                  {
                    uint64_t v865 = *(void *)(v174 + 24);
                    int v866 = v863;
                    do
                    {
                      ldiv_t v867 = ldiv(v866, v175[v177]);
                      int v866 = v867.quot;
                      v864 += *(void *)(v865 + 8 * v177--) * v867.rem;
                    }
                    while (v177 != -1);
                  }
                  uint64_t v868 = v2054;
                  if ((v2054 & 0x80000000) != 0)
                  {
                    LODWORD(v869) = 0;
                  }
                  else
                  {
                    uint64_t v869 = 0;
                    uint64_t v870 = v271[3];
                    int v871 = v863;
                    do
                    {
                      ldiv_t v872 = ldiv(v871, v272[v868]);
                      int v871 = v872.quot;
                      v869 += *(void *)(v870 + 8 * v868--) * v872.rem;
                    }
                    while (v868 != -1);
                  }
                  *(unsigned char *)(v1975 + v863++) = *(void *)(v2024 + 8 * (int)v864) < *(void *)(v1989 + 8 * (int)v869);
                  uint64_t v177 = v2068;
                }
                while (v863 != v862);
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v19)
      {
        case 0:
          BOOL v8 = **(float **)(*a1 + 152) < **(float **)(*a2 + 152);
LABEL_26:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v211 = *(_DWORD *)(*a2 + 160);
          if (v211 >= 1)
          {
            float v212 = **(float **)(*a1 + 152);
            v213 = *(BOOL **)(*(void *)a3 + 152);
            v214 = *(float **)(*a2 + 152);
            unsigned int v215 = v211 + 1;
            do
            {
              float v216 = *v214++;
              *v213++ = v212 < v216;
              --v215;
            }
            while (v215 > 1);
          }
          return;
        case 2:
          int v217 = *(_DWORD *)(*a1 + 160);
          if (v217 >= 1)
          {
            float v218 = **(float **)(*a2 + 152);
            v219 = *(BOOL **)(*(void *)a3 + 152);
            v220 = *(float **)(*a1 + 152);
            unsigned int v221 = v217 + 1;
            do
            {
              float v222 = *v220++;
              *v219++ = v222 < v218;
              --v221;
            }
            while (v221 > 1);
          }
          return;
        case 3:
          int v223 = *(_DWORD *)(*(void *)a3 + 48);
          if (v223 >= 1)
          {
            v224 = *(BOOL **)(*(void *)a3 + 152);
            v225 = *(float **)(*a2 + 152);
            v226 = *(float **)(*a1 + 152);
            unsigned int v227 = v223 + 1;
            do
            {
              float v228 = *v226++;
              float v229 = v228;
              float v230 = *v225++;
              *v224++ = v229 < v230;
              --v227;
            }
            while (v227 > 1);
          }
          return;
        default:
          v202 = *(void **)a3;
          uint64_t v203 = *a1;
          v204 = *(int **)*a1;
          uint64_t v205 = (*(void *)(*a1 + 8) - (void)v204) >> 2;
          uint64_t v206 = (v205 - 1);
          if ((int)v206 >= -1) {
            int v207 = -1;
          }
          else {
            int v207 = v205 - 1;
          }
          int v208 = v207 + 1;
          int v209 = v205 + 1;
          while (1)
          {
            unsigned int v210 = v209 - 2;
            if (v209 - 2 < 0) {
              break;
            }
            --v209;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v210) != *(void *)(v202[3] + 8 * v210)) {
              goto LABEL_228;
            }
          }
          int v209 = v208;
LABEL_228:
          v279 = (void *)*a2;
          v280 = *(int **)*a2;
          uint64_t v281 = (v279[1] - (void)v280) >> 2;
          uint64_t v282 = (v281 - 1);
          if ((int)v282 >= -1) {
            int v283 = -1;
          }
          else {
            int v283 = v281 - 1;
          }
          int v284 = v283 + 1;
          int v285 = v281 + 1;
          while (1)
          {
            unsigned int v286 = v285 - 2;
            if (v285 - 2 < 0) {
              break;
            }
            --v285;
            if (*(void *)(v279[3] + 8 * v286) != *(void *)(v202[3] + 8 * v286)) {
              goto LABEL_266;
            }
          }
          int v285 = v284;
LABEL_266:
          int v299 = v205 + 1;
          while (1)
          {
            unsigned int v300 = v299 - 2;
            if (v299 - 2 < 0) {
              break;
            }
            --v299;
            if (*(void *)(*(void *)(v203 + 24) + 8 * v300)) {
              goto LABEL_301;
            }
          }
          int v299 = v208;
LABEL_301:
          int v313 = v281 + 1;
          while (1)
          {
            unsigned int v314 = v313 - 2;
            if (v313 - 2 < 0) {
              break;
            }
            --v313;
            if (*(void *)(v279[3] + 8 * v314)) {
              goto LABEL_528;
            }
          }
          int v313 = v284;
LABEL_528:
          unint64_t v439 = (uint64_t)(v202[1] - *v202) >> 2;
          if (v209 <= v285) {
            int v440 = v285;
          }
          else {
            int v440 = v209;
          }
          if (v209 <= v313) {
            int v209 = v313;
          }
          if (v299 > v285) {
            int v285 = v299;
          }
          if (v439 > v285)
          {
            int v441 = 1;
          }
          else
          {
            int v285 = (uint64_t)(v202[1] - *v202) >> 2;
            int v441 = 4;
          }
          if (v439 > v209)
          {
            int v442 = 2;
          }
          else
          {
            int v209 = v285;
            int v442 = v441;
          }
          if (v439 > v440)
          {
            int v209 = v440;
            int v442 = 3;
          }
          uint64_t v2055 = v282;
          uint64_t v2069 = v206;
          if (!v209) {
            goto LABEL_557;
          }
          unint64_t v443 = *(void *)(v202[3] + 8 * (v209 - 1));
          if (v443 < 0x10) {
            goto LABEL_557;
          }
          switch(v442)
          {
            case 1:
              if (v209 == 2)
              {
                uint64_t v1848 = *v204;
                if (v1848)
                {
                  uint64_t v1849 = 0;
                  uint64_t v1850 = 0;
                  uint64_t v1851 = 0;
                  uint64_t v1852 = *(void *)(v203 + 152);
                  uint64_t v1853 = v279[19];
                  uint64_t v1854 = v202[19];
                  unint64_t v1855 = v204[1];
                  v1856 = *(uint64_t **)(v203 + 24);
                  uint64_t v1857 = *v1856;
                  uint64_t v1858 = v1856[1];
                  v1859 = (uint64_t *)v279[3];
                  uint64_t v1861 = *v1859;
                  uint64_t v1860 = v1859[1];
                  if (v1855 <= 1) {
                    uint64_t v1862 = 1;
                  }
                  else {
                    uint64_t v1862 = v204[1];
                  }
                  uint64_t v1863 = v1857 - v1858 * v1855;
                  uint64_t v1864 = v1861 - v1860 * v280[1];
                  do
                  {
                    if (v1855)
                    {
                      uint64_t v1865 = 0;
                      uint64_t v1866 = v1853 + 4 * v1850;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1867 = 0;
                          float v1868 = *(float *)(v1852 + 4 * v1851);
                          unsigned int v1869 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1854 + v1867) = v1868 < *(float *)(v1866 + 4 * v1867);
                            --v1869;
                            ++v1867;
                          }
                          while (v1869 > 1);
                        }
                        v1851 += v1858;
                        v1850 += v1860;
                        v1854 += (int)v443;
                        ++v1865;
                        v1866 += 4 * v1860;
                      }
                      while (v1865 != v1862);
                    }
                    v1851 += v1863;
                    v1850 += v1864;
                    ++v1849;
                  }
                  while (v1849 != v1848);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1156 = *v204;
                if (v1156)
                {
                  uint64_t v1157 = 0;
                  uint64_t v1158 = 0;
                  uint64_t v1159 = *(void *)(v203 + 152);
                  uint64_t v1160 = v279[19];
                  uint64_t v1161 = v202[19];
                  uint64_t v1162 = **(void **)(v203 + 24);
                  uint64_t v1163 = 4 * *(void *)v279[3];
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1164 = 0;
                      float v1165 = *(float *)(v1159 + 4 * v1158);
                      unsigned int v1166 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1164) = v1165 < *(float *)(v1160 + 4 * v1164);
                        --v1166;
                        ++v1164;
                      }
                      while (v1166 > 1);
                    }
                    v1158 += v1162;
                    v1161 += (int)v443;
                    ++v1157;
                    v1160 += v1163;
                  }
                  while (v1157 != v1156);
                }
              }
              else
              {
                unint64_t v2012 = v202[6];
                if (v2012)
                {
                  unint64_t v2047 = 0;
                  uint64_t v1937 = v279[19];
                  uint64_t v1963 = *(void *)(v203 + 152);
                  uint64_t v1870 = v202[19];
                  do
                  {
                    uint64_t v1871 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1872 = *(void *)(v203 + 24);
                      int v1873 = v2047;
                      do
                      {
                        ldiv_t v1874 = ldiv(v1873, v204[v206]);
                        int v1873 = v1874.quot;
                        v1871 += *(void *)(v1872 + 8 * v206--) * v1874.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1875 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1876) = 0;
                    }
                    else
                    {
                      uint64_t v1876 = 0;
                      uint64_t v1877 = v279[3];
                      int v1878 = v2047;
                      do
                      {
                        ldiv_t v1879 = ldiv(v1878, v280[v1875]);
                        int v1878 = v1879.quot;
                        v1876 += *(void *)(v1877 + 8 * v1875--) * v1879.rem;
                      }
                      while (v1875 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1880 = 0;
                      float v1881 = *(float *)(v1963 + 4 * (int)v1871);
                      unsigned int v1882 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1870 + v1880) = v1881 < *(float *)(v1937 + 4 * (int)v1876 + 4 * v1880);
                        --v1882;
                        ++v1880;
                      }
                      while (v1882 > 1);
                    }
                    v1870 += (int)v443;
                    v2047 += (int)v443;
                  }
                  while (v2047 < v2012);
                }
              }
              break;
            case 2:
              if (v209 == 2)
              {
                uint64_t v1883 = *v204;
                if (v1883)
                {
                  uint64_t v1884 = 0;
                  uint64_t v1885 = 0;
                  uint64_t v1886 = 0;
                  uint64_t v1887 = *(void *)(v203 + 152);
                  uint64_t v1888 = v279[19];
                  uint64_t v1889 = v202[19];
                  unint64_t v1890 = v204[1];
                  v1891 = *(uint64_t **)(v203 + 24);
                  uint64_t v1892 = *v1891;
                  uint64_t v1893 = v1891[1];
                  v1894 = (uint64_t *)v279[3];
                  uint64_t v1896 = *v1894;
                  uint64_t v1895 = v1894[1];
                  if (v1890 <= 1) {
                    uint64_t v1897 = 1;
                  }
                  else {
                    uint64_t v1897 = v204[1];
                  }
                  uint64_t v1898 = v1892 - v1893 * v1890;
                  uint64_t v1899 = v1896 - v1895 * v280[1];
                  do
                  {
                    if (v1890)
                    {
                      uint64_t v1900 = 0;
                      uint64_t v1901 = v1887 + 4 * v1886;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1902 = 0;
                          float v1903 = *(float *)(v1888 + 4 * v1885);
                          unsigned int v1904 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1889 + v1902) = *(float *)(v1901 + 4 * v1902) < v1903;
                            --v1904;
                            ++v1902;
                          }
                          while (v1904 > 1);
                        }
                        v1886 += v1893;
                        v1885 += v1895;
                        v1889 += (int)v443;
                        ++v1900;
                        v1901 += 4 * v1893;
                      }
                      while (v1900 != v1897);
                    }
                    v1886 += v1898;
                    v1885 += v1899;
                    ++v1884;
                  }
                  while (v1884 != v1883);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v1167 = *v204;
                if (v1167)
                {
                  uint64_t v1168 = 0;
                  uint64_t v1169 = 0;
                  uint64_t v1170 = *(void *)(v203 + 152);
                  uint64_t v1171 = v279[19];
                  uint64_t v1172 = v202[19];
                  uint64_t v1173 = *(void *)v279[3];
                  uint64_t v1174 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1175 = 0;
                      float v1176 = *(float *)(v1171 + 4 * v1169);
                      unsigned int v1177 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1172 + v1175) = *(float *)(v1170 + 4 * v1175) < v1176;
                        --v1177;
                        ++v1175;
                      }
                      while (v1177 > 1);
                    }
                    v1169 += v1173;
                    v1172 += (int)v443;
                    ++v1168;
                    v1170 += v1174;
                  }
                  while (v1168 != v1167);
                }
              }
              else
              {
                unint64_t v2013 = v202[6];
                if (v2013)
                {
                  unint64_t v2048 = 0;
                  uint64_t v1938 = v279[19];
                  uint64_t v1964 = *(void *)(v203 + 152);
                  uint64_t v1905 = v202[19];
                  do
                  {
                    uint64_t v1906 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1907 = *(void *)(v203 + 24);
                      int v1908 = v2048;
                      do
                      {
                        ldiv_t v1909 = ldiv(v1908, v204[v206]);
                        int v1908 = v1909.quot;
                        v1906 += *(void *)(v1907 + 8 * v206--) * v1909.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1910 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1911) = 0;
                    }
                    else
                    {
                      uint64_t v1911 = 0;
                      uint64_t v1912 = v279[3];
                      int v1913 = v2048;
                      do
                      {
                        ldiv_t v1914 = ldiv(v1913, v280[v1910]);
                        int v1913 = v1914.quot;
                        v1911 += *(void *)(v1912 + 8 * v1910--) * v1914.rem;
                      }
                      while (v1910 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1915 = 0;
                      float v1916 = *(float *)(v1938 + 4 * (int)v1911);
                      unsigned int v1917 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1905 + v1915) = *(float *)(v1964 + 4 * (int)v1906 + 4 * v1915) < v1916;
                        --v1917;
                        ++v1915;
                      }
                      while (v1917 > 1);
                    }
                    v1905 += (int)v443;
                    v2048 += (int)v443;
                  }
                  while (v2048 < v2013);
                }
              }
              break;
            case 3:
              if (v209 == 2)
              {
                uint64_t v1386 = *v204;
                if (v1386)
                {
                  uint64_t v1387 = 0;
                  uint64_t v1388 = 0;
                  uint64_t v1389 = 0;
                  uint64_t v1390 = *(void *)(v203 + 152);
                  uint64_t v1391 = v279[19];
                  uint64_t v1392 = v202[19];
                  unint64_t v1393 = v204[1];
                  v1394 = *(uint64_t **)(v203 + 24);
                  uint64_t v1395 = *v1394;
                  uint64_t v1396 = v1394[1];
                  v1397 = (uint64_t *)v279[3];
                  uint64_t v1399 = *v1397;
                  uint64_t v1398 = v1397[1];
                  if (v1393 <= 1) {
                    uint64_t v1400 = 1;
                  }
                  else {
                    uint64_t v1400 = v204[1];
                  }
                  uint64_t v1401 = v1395 - v1396 * v1393;
                  uint64_t v1402 = v1399 - v1398 * v280[1];
                  do
                  {
                    if (v1393)
                    {
                      uint64_t v1403 = 0;
                      uint64_t v1404 = v1391 + 4 * v1388;
                      uint64_t v1405 = v1390 + 4 * v1389;
                      do
                      {
                        if ((int)v443 >= 1)
                        {
                          uint64_t v1406 = 0;
                          unsigned int v1407 = v443 + 1;
                          do
                          {
                            *(unsigned char *)(v1392 + v1406) = *(float *)(v1405 + 4 * v1406) < *(float *)(v1404 + 4 * v1406);
                            --v1407;
                            ++v1406;
                          }
                          while (v1407 > 1);
                        }
                        v1389 += v1396;
                        v1388 += v1398;
                        v1392 += (int)v443;
                        ++v1403;
                        v1404 += 4 * v1398;
                        v1405 += 4 * v1396;
                      }
                      while (v1403 != v1400);
                    }
                    v1389 += v1401;
                    v1388 += v1402;
                    ++v1387;
                  }
                  while (v1387 != v1386);
                }
              }
              else if (v209 == 1)
              {
                uint64_t v444 = *v204;
                if (v444)
                {
                  uint64_t v445 = 0;
                  uint64_t v446 = *(void *)(v203 + 152);
                  uint64_t v447 = v279[19];
                  uint64_t v448 = v202[19];
                  uint64_t v449 = 4 * *(void *)v279[3];
                  uint64_t v450 = 4 * **(void **)(v203 + 24);
                  do
                  {
                    if ((int)v443 >= 1)
                    {
                      uint64_t v451 = 0;
                      unsigned int v452 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v448 + v451) = *(float *)(v446 + 4 * v451) < *(float *)(v447 + 4 * v451);
                        --v452;
                        ++v451;
                      }
                      while (v452 > 1);
                    }
                    v448 += (int)v443;
                    ++v445;
                    v447 += v449;
                    v446 += v450;
                  }
                  while (v445 != v444);
                }
              }
              else
              {
                unint64_t v1999 = v202[6];
                if (v1999)
                {
                  unint64_t v2034 = 0;
                  uint64_t v1924 = v279[19];
                  uint64_t v1950 = *(void *)(v203 + 152);
                  uint64_t v1408 = v202[19];
                  do
                  {
                    uint64_t v1409 = 0;
                    if ((v206 & 0x80000000) == 0)
                    {
                      uint64_t v1410 = *(void *)(v203 + 24);
                      int v1411 = v2034;
                      do
                      {
                        ldiv_t v1412 = ldiv(v1411, v204[v206]);
                        int v1411 = v1412.quot;
                        v1409 += *(void *)(v1410 + 8 * v206--) * v1412.rem;
                      }
                      while (v206 != -1);
                    }
                    uint64_t v1413 = v2055;
                    if ((v2055 & 0x80000000) != 0)
                    {
                      LODWORD(v1414) = 0;
                    }
                    else
                    {
                      uint64_t v1414 = 0;
                      uint64_t v1415 = v279[3];
                      int v1416 = v2034;
                      do
                      {
                        ldiv_t v1417 = ldiv(v1416, v280[v1413]);
                        int v1416 = v1417.quot;
                        v1414 += *(void *)(v1415 + 8 * v1413--) * v1417.rem;
                      }
                      while (v1413 != -1);
                    }
                    uint64_t v206 = v2069;
                    if ((int)v443 >= 1)
                    {
                      uint64_t v1418 = 0;
                      unsigned int v1419 = v443 + 1;
                      do
                      {
                        *(unsigned char *)(v1408 + v1418) = *(float *)(v1950 + 4 * (int)v1409 + 4 * v1418) < *(float *)(v1924 + 4 * (int)v1414 + 4 * v1418);
                        --v1419;
                        ++v1418;
                      }
                      while (v1419 > 1);
                    }
                    v1408 += (int)v443;
                    v2034 += (int)v443;
                  }
                  while (v2034 < v1999);
                }
              }
              break;
            default:
LABEL_557:
              switch(v439)
              {
                case 1uLL:
                  uint64_t v453 = v202[6];
                  if (v453)
                  {
                    v454 = *(float **)(v203 + 152);
                    v455 = (float *)v279[19];
                    v456 = (BOOL *)v202[19];
                    uint64_t v457 = 4 * *(void *)v279[3];
                    uint64_t v458 = 4 * **(void **)(v203 + 24);
                    do
                    {
                      *v456++ = *v454 < *v455;
                      v455 = (float *)((char *)v455 + v457);
                      v454 = (float *)((char *)v454 + v458);
                      --v453;
                    }
                    while (v453);
                  }
                  break;
                case 2uLL:
                  uint64_t v952 = *v204;
                  if (v952)
                  {
                    uint64_t v953 = 0;
                    uint64_t v954 = 0;
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = *(void *)(v203 + 152);
                    uint64_t v958 = v279[19];
                    uint64_t v959 = v202[19];
                    unint64_t v960 = v204[1];
                    v961 = *(uint64_t **)(v203 + 24);
                    uint64_t v962 = *v961;
                    uint64_t v963 = v961[1];
                    v964 = (uint64_t *)v279[3];
                    uint64_t v965 = *v964;
                    uint64_t v966 = v964[1];
                    uint64_t v967 = v965 - v966 * v280[1];
                    if (v960 <= 1) {
                      uint64_t v968 = 1;
                    }
                    else {
                      uint64_t v968 = v204[1];
                    }
                    uint64_t v969 = v962 - v963 * v960;
                    do
                    {
                      if (v960)
                      {
                        uint64_t v970 = v954 + v968;
                        v971 = (BOOL *)(v959 + v954);
                        uint64_t v972 = v968;
                        do
                        {
                          *v971++ = *(float *)(v957 + 4 * v956) < *(float *)(v958 + 4 * v955);
                          v956 += v963;
                          v955 += v966;
                          --v972;
                        }
                        while (v972);
                        uint64_t v954 = v970;
                      }
                      v956 += v969;
                      v955 += v967;
                      ++v953;
                    }
                    while (v953 != v952);
                  }
                  break;
                case 3uLL:
                  uint64_t v973 = *v204;
                  if (v973)
                  {
                    uint64_t v974 = 0;
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = *(void *)(v203 + 152);
                    uint64_t v979 = v279[19];
                    uint64_t v980 = v202[19];
                    unint64_t v981 = v204[1];
                    v982 = *(void **)(v203 + 24);
                    uint64_t v983 = v982[1];
                    v984 = (void *)v279[3];
                    uint64_t v985 = v984[1];
                    uint64_t v986 = *v984 - v985 * v280[1];
                    if (v981 <= 1) {
                      uint64_t v987 = 1;
                    }
                    else {
                      uint64_t v987 = v204[1];
                    }
                    unint64_t v988 = *v982 - v983 * v981;
                    do
                    {
                      if (v981)
                      {
                        uint64_t v989 = 0;
                        unint64_t v990 = v204[2];
                        uint64_t v991 = v982[2];
                        uint64_t v992 = v984[2];
                        if (v990 <= 1) {
                          uint64_t v993 = 1;
                        }
                        else {
                          uint64_t v993 = v204[2];
                        }
                        uint64_t v994 = v985 - v992 * v280[2];
                        do
                        {
                          uint64_t v995 = v993;
                          if (v990)
                          {
                            do
                            {
                              *(unsigned char *)(v980 + v975++) = *(float *)(v978 + 4 * v977) < *(float *)(v979 + 4 * v976);
                              v977 += v991;
                              v976 += v992;
                              --v995;
                            }
                            while (v995);
                          }
                          v977 += v983 - v991 * v990;
                          v976 += v994;
                          ++v989;
                        }
                        while (v989 != v987);
                      }
                      v977 += v988;
                      v976 += v986;
                      ++v974;
                    }
                    while (v974 != v973);
                  }
                  break;
                case 4uLL:
                  uint64_t v2076 = *v204;
                  if (v2076)
                  {
                    uint64_t v996 = 0;
                    uint64_t v997 = 0;
                    uint64_t v998 = 0;
                    uint64_t v999 = 0;
                    uint64_t v1000 = *(void *)(v203 + 152);
                    uint64_t v1001 = v279[19];
                    uint64_t v1002 = v202[19];
                    unint64_t v1003 = v204[1];
                    v1004 = *(void **)(v203 + 24);
                    v1005 = (void *)v279[3];
                    uint64_t v1978 = v1005[1];
                    uint64_t v1992 = v1004[1];
                    if (v1003 <= 1) {
                      uint64_t v1006 = 1;
                    }
                    else {
                      uint64_t v1006 = v204[1];
                    }
                    unint64_t v2027 = *v1004 - v1004[1] * v1003;
                    uint64_t v2062 = *v1005 - v1978 * v280[1];
                    do
                    {
                      if (v1003)
                      {
                        uint64_t v1007 = 0;
                        unint64_t v1008 = v204[2];
                        uint64_t v1009 = v1004[2];
                        uint64_t v1010 = v1005[2];
                        if (v1008 <= 1) {
                          uint64_t v1011 = 1;
                        }
                        else {
                          uint64_t v1011 = v204[2];
                        }
                        uint64_t v1012 = v1978 - v1010 * v280[2];
                        do
                        {
                          if (v1008)
                          {
                            uint64_t v1013 = 0;
                            unint64_t v1014 = v204[3];
                            uint64_t v1015 = v1004[3];
                            uint64_t v1016 = v1005[3];
                            if (v1014 <= 1) {
                              uint64_t v1017 = 1;
                            }
                            else {
                              uint64_t v1017 = v204[3];
                            }
                            uint64_t v1018 = v1010 - v1016 * v280[3];
                            do
                            {
                              uint64_t v1019 = v1017;
                              if (v1014)
                              {
                                do
                                {
                                  *(unsigned char *)(v1002 + v997++) = *(float *)(v1000 + 4 * v999) < *(float *)(v1001 + 4 * v998);
                                  v999 += v1015;
                                  v998 += v1016;
                                  --v1019;
                                }
                                while (v1019);
                              }
                              v999 += v1009 - v1015 * v1014;
                              v998 += v1018;
                              ++v1013;
                            }
                            while (v1013 != v1011);
                          }
                          v999 += v1992 - v1009 * v1008;
                          v998 += v1012;
                          ++v1007;
                        }
                        while (v1007 != v1006);
                      }
                      v999 += v2027;
                      v998 += v2062;
                      ++v996;
                    }
                    while (v996 != v2076);
                  }
                  break;
                default:
                  uint64_t v941 = v202[6];
                  if (v941)
                  {
                    uint64_t v942 = 0;
                    uint64_t v1991 = v279[19];
                    uint64_t v2026 = *(void *)(v203 + 152);
                    uint64_t v1977 = v202[19];
                    do
                    {
                      uint64_t v943 = 0;
                      if ((v206 & 0x80000000) == 0)
                      {
                        uint64_t v944 = *(void *)(v203 + 24);
                        int v945 = v942;
                        do
                        {
                          ldiv_t v946 = ldiv(v945, v204[v206]);
                          int v945 = v946.quot;
                          v943 += *(void *)(v944 + 8 * v206--) * v946.rem;
                        }
                        while (v206 != -1);
                      }
                      uint64_t v947 = v2055;
                      if ((v2055 & 0x80000000) != 0)
                      {
                        LODWORD(v948) = 0;
                      }
                      else
                      {
                        uint64_t v948 = 0;
                        uint64_t v949 = v279[3];
                        int v950 = v942;
                        do
                        {
                          ldiv_t v951 = ldiv(v950, v280[v947]);
                          int v950 = v951.quot;
                          v948 += *(void *)(v949 + 8 * v947--) * v951.rem;
                        }
                        while (v947 != -1);
                      }
                      *(unsigned char *)(v1977 + v942++) = *(float *)(v2026 + 4 * (int)v943) < *(float *)(v1991
                                                                                                  + 4 * (int)v948);
                      uint64_t v206 = v2069;
                    }
                    while (v942 != v941);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::LessEqual::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LessEqual::eval();
  }
}

void mlx::core::anonymous namespace'::comparison_op<mlx::core::detail::LessEqual>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*a1 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 0;
          }
          char v8 = !v7;
          goto LABEL_29;
        case 1:
          int v30 = *(_DWORD *)(*a2 + 160);
          if (v30 >= 1)
          {
            int v31 = **(unsigned __int8 **)(*a1 + 152);
            v32 = *(char **)(*(void *)a3 + 152);
            unsigned int v33 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v34 = v30 + 1;
            do
            {
              int v36 = *v33++;
              int v35 = v36;
              if (v31) {
                BOOL v37 = v35 == 0;
              }
              else {
                BOOL v37 = 0;
              }
              char v38 = !v37;
              *v32++ = v38;
              --v34;
            }
            while (v34 > 1);
          }
          return;
        case 2:
          int v39 = *(_DWORD *)(*a1 + 160);
          if (v39 >= 1)
          {
            int v40 = **(unsigned __int8 **)(*a2 + 152);
            v41 = *(char **)(*(void *)a3 + 152);
            unsigned int v42 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v43 = v39 + 1;
            do
            {
              int v45 = *v42++;
              int v44 = v45;
              if (v40) {
                BOOL v46 = 1;
              }
              else {
                BOOL v46 = v44 == 0;
              }
              char v47 = v46;
              *v41++ = v47;
              --v43;
            }
            while (v43 > 1);
          }
          return;
        case 3:
          int v48 = *(_DWORD *)(*(void *)a3 + 48);
          if (v48 >= 1)
          {
            v49 = *(char **)(*(void *)a3 + 152);
            v50 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v51 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v52 = v48 + 1;
            do
            {
              int v53 = *v51++;
              BOOL v7 = v53 == 0;
              int v55 = *v50++;
              int v54 = v55;
              char v57 = v7 || v54 != 0;
              *v49++ = v57;
              --v52;
            }
            while (v52 > 1);
          }
          return;
        default:
          uint64_t v21 = *(void **)a3;
          uint64_t v22 = *a1;
          uint64_t v23 = *(int **)*a1;
          uint64_t v24 = (*(void *)(*a1 + 8) - (void)v23) >> 2;
          uint64_t v25 = (v24 - 1);
          if ((int)v25 >= -1) {
            int v26 = -1;
          }
          else {
            int v26 = v24 - 1;
          }
          int v27 = v26 + 1;
          int v28 = v24 + 1;
          break;
      }
      while (1)
      {
        unsigned int v29 = v28 - 2;
        if (v28 - 2 < 0) {
          break;
        }
        --v28;
        if (*(void *)(*(void *)(v22 + 24) + 8 * v29) != *(void *)(v21[3] + 8 * v29)) {
          goto LABEL_183;
        }
      }
      int v28 = v27;
LABEL_183:
      v232 = (void *)*a2;
      uint64_t v233 = *(int **)*a2;
      uint64_t v234 = (v232[1] - (void)v233) >> 2;
      uint64_t v235 = (v234 - 1);
      if ((int)v235 >= -1) {
        int v236 = -1;
      }
      else {
        int v236 = v234 - 1;
      }
      int v237 = v236 + 1;
      int v238 = v234 + 1;
      while (1)
      {
        unsigned int v239 = v238 - 2;
        if (v238 - 2 < 0) {
          break;
        }
        --v238;
        if (*(void *)(v232[3] + 8 * v239) != *(void *)(v21[3] + 8 * v239)) {
          goto LABEL_239;
        }
      }
      int v238 = v237;
LABEL_239:
      int v288 = v24 + 1;
      while (1)
      {
        unsigned int v289 = v288 - 2;
        if (v288 - 2 < 0) {
          break;
        }
        --v288;
        if (*(void *)(*(void *)(v22 + 24) + 8 * v289)) {
          goto LABEL_274;
        }
      }
      int v288 = v27;
LABEL_274:
      int v302 = v234 + 1;
      while (1)
      {
        unsigned int v303 = v302 - 2;
        if (v302 - 2 < 0) {
          break;
        }
        --v302;
        if (*(void *)(v232[3] + 8 * v303)) {
          goto LABEL_309;
        }
      }
      int v302 = v237;
LABEL_309:
      unint64_t v316 = (uint64_t)(v21[1] - *v21) >> 2;
      if (v28 <= v238) {
        int v317 = v238;
      }
      else {
        int v317 = v28;
      }
      if (v28 <= v302) {
        int v28 = v302;
      }
      if (v288 > v238) {
        int v238 = v288;
      }
      if (v316 > v238)
      {
        int v318 = 1;
      }
      else
      {
        int v238 = (uint64_t)(v21[1] - *v21) >> 2;
        int v318 = 4;
      }
      if (v316 > v28)
      {
        int v319 = 2;
      }
      else
      {
        int v28 = v238;
        int v319 = v318;
      }
      if (v316 > v317)
      {
        int v28 = v317;
        int v319 = 3;
      }
      uint64_t v2050 = v235;
      uint64_t v2064 = v25;
      if (!v28) {
        goto LABEL_344;
      }
      unint64_t v320 = *(void *)(v21[3] + 8 * (v28 - 1));
      if (v320 < 0x10) {
        goto LABEL_344;
      }
      switch(v319)
      {
        case 1:
          if (v28 == 2)
          {
            uint64_t v1421 = *v23;
            if (v1421)
            {
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = 0;
              uint64_t v1425 = *(void *)(v22 + 152);
              uint64_t v1426 = v232[19];
              uint64_t v1427 = v21[19];
              unint64_t v1428 = v23[1];
              uint64_t v1429 = *(uint64_t **)(v22 + 24);
              uint64_t v1430 = *v1429;
              uint64_t v1431 = v1429[1];
              uint64_t v1432 = (uint64_t *)v232[3];
              uint64_t v1434 = *v1432;
              uint64_t v1433 = v1432[1];
              if (v1428 <= 1) {
                uint64_t v1435 = 1;
              }
              else {
                uint64_t v1435 = v23[1];
              }
              uint64_t v1436 = v1430 - v1431 * v1428;
              uint64_t v1437 = v1434 - v1433 * v233[1];
              do
              {
                if (v1428)
                {
                  uint64_t v1438 = 0;
                  uint64_t v1439 = v1426 + v1423;
                  do
                  {
                    if ((int)v320 >= 1)
                    {
                      uint64_t v1440 = 0;
                      int v1441 = *(unsigned __int8 *)(v1425 + v1424);
                      unsigned int v1442 = v320 + 1;
                      do
                      {
                        if (v1441) {
                          BOOL v1443 = *(unsigned char *)(v1439 + v1440) == 0;
                        }
                        else {
                          BOOL v1443 = 0;
                        }
                        char v1444 = !v1443;
                        *(unsigned char *)(v1427 + v1440) = v1444;
                        --v1442;
                        ++v1440;
                      }
                      while (v1442 > 1);
                    }
                    v1424 += v1431;
                    v1423 += v1433;
                    v1427 += (int)v320;
                    ++v1438;
                    v1439 += v1433;
                  }
                  while (v1438 != v1435);
                }
                v1424 += v1436;
                v1423 += v1437;
                ++v1422;
              }
              while (v1422 != v1421);
            }
          }
          else if (v28 == 1)
          {
            uint64_t v1021 = *v23;
            if (v1021)
            {
              uint64_t v1022 = 0;
              uint64_t v1023 = 0;
              uint64_t v1024 = *(void *)(v22 + 152);
              uint64_t v1025 = v232[19];
              uint64_t v1026 = v21[19];
              uint64_t v1027 = **(void **)(v22 + 24);
              uint64_t v1028 = *(void *)v232[3];
              do
              {
                if ((int)v320 >= 1)
                {
                  uint64_t v1029 = 0;
                  int v1030 = *(unsigned __int8 *)(v1024 + v1023);
                  unsigned int v1031 = v320 + 1;
                  do
                  {
                    if (v1030) {
                      BOOL v1032 = *(unsigned char *)(v1025 + v1029) == 0;
                    }
                    else {
                      BOOL v1032 = 0;
                    }
                    char v1033 = !v1032;
                    *(unsigned char *)(v1026 + v1029) = v1033;
                    --v1031;
                    ++v1029;
                  }
                  while (v1031 > 1);
                }
                v1023 += v1027;
                v1026 += (int)v320;
                ++v1022;
                v1025 += v1028;
              }
              while (v1022 != v1021);
            }
          }
          else
          {
            unint64_t v2001 = v21[6];
            if (v2001)
            {
              unint64_t v2036 = 0;
              uint64_t v1926 = v232[19];
              uint64_t v1952 = *(void *)(v22 + 152);
              uint64_t v1445 = v21[19];
              do
              {
                uint64_t v1446 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  uint64_t v1447 = *(void *)(v22 + 24);
                  int quot = v2036;
                  do
                  {
                    ldiv_t v1449 = ldiv(quot, v23[v25]);
                    int quot = v1449.quot;
                    v1446 += *(void *)(v1447 + 8 * v25--) * v1449.rem;
                  }
                  while (v25 != -1);
                }
                uint64_t v1450 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1451) = 0;
                }
                else
                {
                  uint64_t v1451 = 0;
                  uint64_t v1452 = v232[3];
                  int v1453 = v2036;
                  do
                  {
                    ldiv_t v1454 = ldiv(v1453, v233[v1450]);
                    int v1453 = v1454.quot;
                    v1451 += *(void *)(v1452 + 8 * v1450--) * v1454.rem;
                  }
                  while (v1450 != -1);
                }
                uint64_t v25 = v2064;
                if ((int)v320 >= 1)
                {
                  uint64_t v1455 = 0;
                  int v1456 = *(unsigned __int8 *)(v1952 + (int)v1446);
                  unsigned int v1457 = v320 + 1;
                  do
                  {
                    if (v1456) {
                      BOOL v1458 = *(unsigned char *)(v1926 + (int)v1451 + v1455) == 0;
                    }
                    else {
                      BOOL v1458 = 0;
                    }
                    char v1459 = !v1458;
                    *(unsigned char *)(v1445 + v1455) = v1459;
                    --v1457;
                    ++v1455;
                  }
                  while (v1457 > 1);
                }
                v1445 += (int)v320;
                v2036 += (int)v320;
              }
              while (v2036 < v2001);
            }
          }
          break;
        case 2:
          if (v28 == 2)
          {
            uint64_t v1460 = *v23;
            if (v1460)
            {
              uint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = 0;
              uint64_t v1464 = *(void *)(v22 + 152);
              uint64_t v1465 = v232[19];
              uint64_t v1466 = v21[19];
              unint64_t v1467 = v23[1];
              uint64_t v1468 = *(uint64_t **)(v22 + 24);
              uint64_t v1469 = *v1468;
              uint64_t v1470 = v1468[1];
              uint64_t v1471 = (uint64_t *)v232[3];
              uint64_t v1473 = *v1471;
              uint64_t v1472 = v1471[1];
              if (v1467 <= 1) {
                uint64_t v1474 = 1;
              }
              else {
                uint64_t v1474 = v23[1];
              }
              uint64_t v1475 = v1469 - v1470 * v1467;
              uint64_t v1476 = v1473 - v1472 * v233[1];
              do
              {
                if (v1467)
                {
                  uint64_t v1477 = 0;
                  uint64_t v1478 = v1464 + v1463;
                  do
                  {
                    if ((int)v320 >= 1)
                    {
                      uint64_t v1479 = 0;
                      int v1480 = *(unsigned __int8 *)(v1465 + v1462);
                      unsigned int v1481 = v320 + 1;
                      do
                      {
                        if (v1480) {
                          BOOL v1482 = 1;
                        }
                        else {
                          BOOL v1482 = *(unsigned char *)(v1478 + v1479) == 0;
                        }
                        char v1483 = v1482;
                        *(unsigned char *)(v1466 + v1479) = v1483;
                        --v1481;
                        ++v1479;
                      }
                      while (v1481 > 1);
                    }
                    v1463 += v1470;
                    v1462 += v1472;
                    v1466 += (int)v320;
                    ++v1477;
                    v1478 += v1470;
                  }
                  while (v1477 != v1474);
                }
                v1463 += v1475;
                v1462 += v1476;
                ++v1461;
              }
              while (v1461 != v1460);
            }
          }
          else if (v28 == 1)
          {
            uint64_t v1034 = *v23;
            if (v1034)
            {
              uint64_t v1035 = 0;
              uint64_t v1036 = 0;
              uint64_t v1037 = *(void *)(v22 + 152);
              uint64_t v1038 = v232[19];
              uint64_t v1039 = v21[19];
              uint64_t v1040 = **(void **)(v22 + 24);
              uint64_t v1041 = *(void *)v232[3];
              do
              {
                if ((int)v320 >= 1)
                {
                  uint64_t v1042 = 0;
                  int v1043 = *(unsigned __int8 *)(v1038 + v1036);
                  unsigned int v1044 = v320 + 1;
                  do
                  {
                    if (v1043) {
                      BOOL v1045 = 1;
                    }
                    else {
                      BOOL v1045 = *(unsigned char *)(v1037 + v1042) == 0;
                    }
                    char v1046 = v1045;
                    *(unsigned char *)(v1039 + v1042) = v1046;
                    --v1044;
                    ++v1042;
                  }
                  while (v1044 > 1);
                }
                v1036 += v1041;
                v1039 += (int)v320;
                ++v1035;
                v1037 += v1040;
              }
              while (v1035 != v1034);
            }
          }
          else
          {
            unint64_t v2002 = v21[6];
            if (v2002)
            {
              unint64_t v2037 = 0;
              uint64_t v1927 = v232[19];
              uint64_t v1953 = *(void *)(v22 + 152);
              uint64_t v1484 = v21[19];
              do
              {
                uint64_t v1485 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  uint64_t v1486 = *(void *)(v22 + 24);
                  int v1487 = v2037;
                  do
                  {
                    ldiv_t v1488 = ldiv(v1487, v23[v25]);
                    int v1487 = v1488.quot;
                    v1485 += *(void *)(v1486 + 8 * v25--) * v1488.rem;
                  }
                  while (v25 != -1);
                }
                uint64_t v1489 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1490) = 0;
                }
                else
                {
                  uint64_t v1490 = 0;
                  uint64_t v1491 = v232[3];
                  int v1492 = v2037;
                  do
                  {
                    ldiv_t v1493 = ldiv(v1492, v233[v1489]);
                    int v1492 = v1493.quot;
                    v1490 += *(void *)(v1491 + 8 * v1489--) * v1493.rem;
                  }
                  while (v1489 != -1);
                }
                uint64_t v25 = v2064;
                if ((int)v320 >= 1)
                {
                  uint64_t v1494 = 0;
                  int v1495 = *(unsigned __int8 *)(v1927 + (int)v1490);
                  unsigned int v1496 = v320 + 1;
                  do
                  {
                    if (v1495) {
                      BOOL v1497 = 1;
                    }
                    else {
                      BOOL v1497 = *(unsigned char *)(v1953 + (int)v1485 + v1494) == 0;
                    }
                    char v1498 = v1497;
                    *(unsigned char *)(v1484 + v1494) = v1498;
                    --v1496;
                    ++v1494;
                  }
                  while (v1496 > 1);
                }
                v1484 += (int)v320;
                v2037 += (int)v320;
              }
              while (v2037 < v2002);
            }
          }
          break;
        case 3:
          if (v28 == 2)
          {
            uint64_t v1179 = *v23;
            if (v1179)
            {
              uint64_t v1180 = 0;
              uint64_t v1181 = 0;
              uint64_t v1182 = 0;
              uint64_t v1183 = *(void *)(v22 + 152);
              uint64_t v1184 = v232[19];
              uint64_t v1185 = v21[19];
              unint64_t v1186 = v23[1];
              uint64_t v1187 = *(uint64_t **)(v22 + 24);
              uint64_t v1188 = *v1187;
              uint64_t v1189 = v1187[1];
              uint64_t v1190 = (uint64_t *)v232[3];
              uint64_t v1192 = *v1190;
              uint64_t v1191 = v1190[1];
              if (v1186 <= 1) {
                uint64_t v1193 = 1;
              }
              else {
                uint64_t v1193 = v23[1];
              }
              uint64_t v1194 = v1188 - v1189 * v1186;
              uint64_t v1195 = v1192 - v1191 * v233[1];
              do
              {
                if (v1186)
                {
                  uint64_t v1196 = 0;
                  uint64_t v1197 = v1184 + v1181;
                  uint64_t v1198 = v1183 + v1182;
                  do
                  {
                    if ((int)v320 >= 1)
                    {
                      uint64_t v1199 = 0;
                      unsigned int v1200 = v320 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1198 + v1199)) {
                          BOOL v1201 = *(unsigned char *)(v1197 + v1199) == 0;
                        }
                        else {
                          BOOL v1201 = 0;
                        }
                        char v1202 = !v1201;
                        *(unsigned char *)(v1185 + v1199) = v1202;
                        --v1200;
                        ++v1199;
                      }
                      while (v1200 > 1);
                    }
                    v1182 += v1189;
                    v1181 += v1191;
                    v1185 += (int)v320;
                    ++v1196;
                    v1197 += v1191;
                    v1198 += v1189;
                  }
                  while (v1196 != v1193);
                }
                v1182 += v1194;
                v1181 += v1195;
                ++v1180;
              }
              while (v1180 != v1179);
            }
          }
          else if (v28 == 1)
          {
            uint64_t v321 = *v23;
            if (v321)
            {
              uint64_t v322 = 0;
              uint64_t v323 = *(void *)(v22 + 152);
              uint64_t v324 = v232[19];
              uint64_t v325 = v21[19];
              uint64_t v326 = **(void **)(v22 + 24);
              uint64_t v327 = *(void *)v232[3];
              do
              {
                if ((int)v320 >= 1)
                {
                  uint64_t v328 = 0;
                  unsigned int v329 = v320 + 1;
                  do
                  {
                    if (*(unsigned char *)(v323 + v328)) {
                      BOOL v330 = *(unsigned char *)(v324 + v328) == 0;
                    }
                    else {
                      BOOL v330 = 0;
                    }
                    char v331 = !v330;
                    *(unsigned char *)(v325 + v328) = v331;
                    --v329;
                    ++v328;
                  }
                  while (v329 > 1);
                }
                v325 += (int)v320;
                ++v322;
                v324 += v327;
                v323 += v326;
              }
              while (v322 != v321);
            }
          }
          else
          {
            unint64_t v1994 = v21[6];
            if (v1994)
            {
              unint64_t v2029 = 0;
              uint64_t v1919 = v232[19];
              uint64_t v1945 = *(void *)(v22 + 152);
              uint64_t v1203 = v21[19];
              do
              {
                uint64_t v1204 = 0;
                if ((v25 & 0x80000000) == 0)
                {
                  uint64_t v1205 = *(void *)(v22 + 24);
                  int v1206 = v2029;
                  do
                  {
                    ldiv_t v1207 = ldiv(v1206, v23[v25]);
                    int v1206 = v1207.quot;
                    v1204 += *(void *)(v1205 + 8 * v25--) * v1207.rem;
                  }
                  while (v25 != -1);
                }
                uint64_t v1208 = v2050;
                if ((v2050 & 0x80000000) != 0)
                {
                  LODWORD(v1209) = 0;
                }
                else
                {
                  uint64_t v1209 = 0;
                  uint64_t v1210 = v232[3];
                  int v1211 = v2029;
                  do
                  {
                    ldiv_t v1212 = ldiv(v1211, v233[v1208]);
                    int v1211 = v1212.quot;
                    v1209 += *(void *)(v1210 + 8 * v1208--) * v1212.rem;
                  }
                  while (v1208 != -1);
                }
                uint64_t v25 = v2064;
                if ((int)v320 >= 1)
                {
                  uint64_t v1213 = 0;
                  unsigned int v1214 = v320 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1945 + (int)v1204 + v1213)) {
                      BOOL v1215 = *(unsigned char *)(v1919 + (int)v1209 + v1213) == 0;
                    }
                    else {
                      BOOL v1215 = 0;
                    }
                    char v1216 = !v1215;
                    *(unsigned char *)(v1203 + v1213) = v1216;
                    --v1214;
                    ++v1213;
                  }
                  while (v1214 > 1);
                }
                v1203 += (int)v320;
                v2029 += (int)v320;
              }
              while (v2029 < v1994);
            }
          }
          break;
        default:
LABEL_344:
          switch(v316)
          {
            case 1uLL:
              uint64_t v332 = v21[6];
              if (v332)
              {
                v333 = *(unsigned char **)(v22 + 152);
                v334 = (unsigned char *)v232[19];
                uint64_t v335 = (char *)v21[19];
                uint64_t v336 = **(void **)(v22 + 24);
                uint64_t v337 = *(void *)v232[3];
                do
                {
                  if (*v333) {
                    BOOL v338 = *v334 == 0;
                  }
                  else {
                    BOOL v338 = 0;
                  }
                  char v339 = !v338;
                  *v335++ = v339;
                  v334 += v337;
                  v333 += v336;
                  --v332;
                }
                while (v332);
              }
              break;
            case 2uLL:
              uint64_t v473 = *v23;
              if (v473)
              {
                uint64_t v474 = 0;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                uint64_t v477 = 0;
                uint64_t v478 = *(void *)(v22 + 152);
                uint64_t v479 = v232[19];
                uint64_t v480 = v21[19];
                unint64_t v481 = v23[1];
                uint64_t v482 = *(uint64_t **)(v22 + 24);
                uint64_t v483 = *v482;
                uint64_t v484 = v482[1];
                uint64_t v485 = (uint64_t *)v232[3];
                uint64_t v486 = *v485;
                uint64_t v487 = v485[1];
                uint64_t v488 = v486 - v487 * v233[1];
                if (v481 <= 1) {
                  uint64_t v489 = 1;
                }
                else {
                  uint64_t v489 = v23[1];
                }
                uint64_t v490 = v483 - v484 * v481;
                do
                {
                  if (v481)
                  {
                    uint64_t v491 = v475 + v489;
                    uint64_t v492 = (char *)(v480 + v475);
                    uint64_t v493 = v489;
                    do
                    {
                      if (*(unsigned char *)(v478 + v477)) {
                        BOOL v494 = *(unsigned char *)(v479 + v476) == 0;
                      }
                      else {
                        BOOL v494 = 0;
                      }
                      char v495 = !v494;
                      *v492++ = v495;
                      v477 += v484;
                      v476 += v487;
                      --v493;
                    }
                    while (v493);
                    uint64_t v475 = v491;
                  }
                  v477 += v490;
                  v476 += v488;
                  ++v474;
                }
                while (v474 != v473);
              }
              break;
            case 3uLL:
              uint64_t v496 = *v23;
              if (v496)
              {
                uint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = *(void *)(v22 + 152);
                uint64_t v502 = v232[19];
                uint64_t v503 = v21[19];
                unint64_t v504 = v23[1];
                uint64_t v505 = *(void **)(v22 + 24);
                uint64_t v506 = v505[1];
                uint64_t v507 = (void *)v232[3];
                uint64_t v508 = v507[1];
                uint64_t v509 = *v507 - v508 * v233[1];
                if (v504 <= 1) {
                  uint64_t v510 = 1;
                }
                else {
                  uint64_t v510 = v23[1];
                }
                unint64_t v511 = *v505 - v506 * v504;
                do
                {
                  if (v504)
                  {
                    uint64_t v512 = 0;
                    unint64_t v513 = v23[2];
                    uint64_t v514 = v505[2];
                    uint64_t v515 = v507[2];
                    if (v513 <= 1) {
                      uint64_t v516 = 1;
                    }
                    else {
                      uint64_t v516 = v23[2];
                    }
                    uint64_t v517 = v508 - v515 * v233[2];
                    do
                    {
                      uint64_t v518 = v516;
                      if (v513)
                      {
                        do
                        {
                          if (*(unsigned char *)(v501 + v500)) {
                            BOOL v519 = *(unsigned char *)(v502 + v499) == 0;
                          }
                          else {
                            BOOL v519 = 0;
                          }
                          char v520 = !v519;
                          *(unsigned char *)(v503 + v498++) = v520;
                          v500 += v514;
                          v499 += v515;
                          --v518;
                        }
                        while (v518);
                      }
                      v500 += v506 - v514 * v513;
                      v499 += v517;
                      ++v512;
                    }
                    while (v512 != v510);
                  }
                  v500 += v511;
                  v499 += v509;
                  ++v497;
                }
                while (v497 != v496);
              }
              break;
            case 4uLL:
              uint64_t v2071 = *v23;
              if (v2071)
              {
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = 0;
                uint64_t v524 = 0;
                uint64_t v525 = *(void *)(v22 + 152);
                uint64_t v526 = v232[19];
                uint64_t v527 = v21[19];
                unint64_t v528 = v23[1];
                v529 = *(void **)(v22 + 24);
                uint64_t v530 = (void *)v232[3];
                uint64_t v1967 = v530[1];
                uint64_t v1981 = v529[1];
                if (v528 <= 1) {
                  uint64_t v531 = 1;
                }
                else {
                  uint64_t v531 = v23[1];
                }
                unint64_t v2016 = *v529 - v529[1] * v528;
                uint64_t v2057 = *v530 - v1967 * v233[1];
                do
                {
                  if (v528)
                  {
                    uint64_t v532 = 0;
                    unint64_t v533 = v23[2];
                    uint64_t v534 = v529[2];
                    uint64_t v535 = v530[2];
                    if (v533 <= 1) {
                      uint64_t v536 = 1;
                    }
                    else {
                      uint64_t v536 = v23[2];
                    }
                    uint64_t v537 = v1967 - v535 * v233[2];
                    do
                    {
                      if (v533)
                      {
                        uint64_t v538 = 0;
                        unint64_t v539 = v23[3];
                        uint64_t v540 = v529[3];
                        uint64_t v541 = v530[3];
                        if (v539 <= 1) {
                          uint64_t v542 = 1;
                        }
                        else {
                          uint64_t v542 = v23[3];
                        }
                        uint64_t v543 = v535 - v541 * v233[3];
                        do
                        {
                          uint64_t v544 = v542;
                          if (v539)
                          {
                            do
                            {
                              if (*(unsigned char *)(v525 + v524)) {
                                BOOL v545 = *(unsigned char *)(v526 + v523) == 0;
                              }
                              else {
                                BOOL v545 = 0;
                              }
                              char v546 = !v545;
                              *(unsigned char *)(v527 + v522++) = v546;
                              v524 += v540;
                              v523 += v541;
                              --v544;
                            }
                            while (v544);
                          }
                          v524 += v534 - v540 * v539;
                          v523 += v543;
                          ++v538;
                        }
                        while (v538 != v536);
                      }
                      v524 += v1981 - v534 * v533;
                      v523 += v537;
                      ++v532;
                    }
                    while (v532 != v531);
                  }
                  v524 += v2016;
                  v523 += v2057;
                  ++v521;
                }
                while (v521 != v2071);
              }
              break;
            default:
              uint64_t v460 = v21[6];
              if (v460)
              {
                uint64_t v461 = 0;
                uint64_t v1980 = v232[19];
                uint64_t v2015 = *(void *)(v22 + 152);
                uint64_t v1966 = v21[19];
                do
                {
                  uint64_t v462 = 0;
                  if ((v25 & 0x80000000) == 0)
                  {
                    uint64_t v463 = *(void *)(v22 + 24);
                    int v464 = v461;
                    do
                    {
                      ldiv_t v465 = ldiv(v464, v23[v25]);
                      int v464 = v465.quot;
                      v462 += *(void *)(v463 + 8 * v25--) * v465.rem;
                    }
                    while (v25 != -1);
                  }
                  uint64_t v466 = v2050;
                  if ((v2050 & 0x80000000) != 0)
                  {
                    LODWORD(v467) = 0;
                  }
                  else
                  {
                    uint64_t v467 = 0;
                    uint64_t v468 = v232[3];
                    int v469 = v461;
                    do
                    {
                      ldiv_t v470 = ldiv(v469, v233[v466]);
                      int v469 = v470.quot;
                      v467 += *(void *)(v468 + 8 * v466--) * v470.rem;
                    }
                    while (v466 != -1);
                  }
                  if (*(unsigned char *)(v2015 + (int)v462)) {
                    BOOL v471 = *(unsigned char *)(v1980 + (int)v467) == 0;
                  }
                  else {
                    BOOL v471 = 0;
                  }
                  char v472 = !v471;
                  *(unsigned char *)(v1966 + v461++) = v472;
                  uint64_t v25 = v2064;
                }
                while (v461 != v460);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          unsigned int v10 = **(unsigned __int8 **)(*a1 + 152);
          unsigned int v11 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v67 = *(_DWORD *)(*a2 + 160);
          if (v67 >= 1)
          {
            unsigned int v68 = **(unsigned __int8 **)(*a1 + 152);
            v69 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v70 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v71 = v67 + 1;
            do
            {
              unsigned int v72 = *v70++;
              *v69++ = v68 <= v72;
              --v71;
            }
            while (v71 > 1);
          }
          return;
        case 2:
          int v73 = *(_DWORD *)(*a1 + 160);
          if (v73 >= 1)
          {
            unsigned int v74 = **(unsigned __int8 **)(*a2 + 152);
            v75 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v76 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v77 = v73 + 1;
            do
            {
              unsigned int v78 = *v76++;
              *v75++ = v78 <= v74;
              --v77;
            }
            while (v77 > 1);
          }
          return;
        case 3:
          int v79 = *(_DWORD *)(*(void *)a3 + 48);
          if (v79 >= 1)
          {
            v80 = *(BOOL **)(*(void *)a3 + 152);
            v81 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v82 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v83 = v79 + 1;
            do
            {
              unsigned int v85 = *v82++;
              unsigned int v84 = v85;
              unsigned int v86 = *v81++;
              *v80++ = v84 <= v86;
              --v83;
            }
            while (v83 > 1);
          }
          return;
        default:
          uint64_t v58 = *(void **)a3;
          uint64_t v59 = *a1;
          uint64_t v60 = *(int **)*a1;
          uint64_t v61 = (*(void *)(*a1 + 8) - (void)v60) >> 2;
          uint64_t v62 = (v61 - 1);
          if ((int)v62 >= -1) {
            int v63 = -1;
          }
          else {
            int v63 = v61 - 1;
          }
          int v64 = v63 + 1;
          int v65 = v61 + 1;
          break;
      }
      while (1)
      {
        unsigned int v66 = v65 - 2;
        if (v65 - 2 < 0) {
          break;
        }
        --v65;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v66) != *(void *)(v58[3] + 8 * v66)) {
          goto LABEL_191;
        }
      }
      int v65 = v64;
LABEL_191:
      v240 = (void *)*a2;
      uint64_t v241 = *(int **)*a2;
      uint64_t v242 = (v240[1] - (void)v241) >> 2;
      uint64_t v243 = (v242 - 1);
      if ((int)v243 >= -1) {
        int v244 = -1;
      }
      else {
        int v244 = v242 - 1;
      }
      int v245 = v244 + 1;
      int v246 = v242 + 1;
      while (1)
      {
        unsigned int v247 = v246 - 2;
        if (v246 - 2 < 0) {
          break;
        }
        --v246;
        if (*(void *)(v240[3] + 8 * v247) != *(void *)(v58[3] + 8 * v247)) {
          goto LABEL_244;
        }
      }
      int v246 = v245;
LABEL_244:
      int v290 = v61 + 1;
      while (1)
      {
        unsigned int v291 = v290 - 2;
        if (v290 - 2 < 0) {
          break;
        }
        --v290;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v291)) {
          goto LABEL_279;
        }
      }
      int v290 = v64;
LABEL_279:
      int v304 = v242 + 1;
      while (1)
      {
        unsigned int v305 = v304 - 2;
        if (v304 - 2 < 0) {
          break;
        }
        --v304;
        if (*(void *)(v240[3] + 8 * v305)) {
          goto LABEL_356;
        }
      }
      int v304 = v245;
LABEL_356:
      unint64_t v340 = (uint64_t)(v58[1] - *v58) >> 2;
      if (v65 <= v246) {
        int v341 = v246;
      }
      else {
        int v341 = v65;
      }
      if (v65 <= v304) {
        int v65 = v304;
      }
      if (v290 > v246) {
        int v246 = v290;
      }
      if (v340 > v246)
      {
        int v342 = 1;
      }
      else
      {
        int v246 = (uint64_t)(v58[1] - *v58) >> 2;
        int v342 = 4;
      }
      if (v340 > v65)
      {
        int v343 = 2;
      }
      else
      {
        int v65 = v246;
        int v343 = v342;
      }
      if (v340 > v341)
      {
        int v65 = v341;
        int v343 = 3;
      }
      uint64_t v2051 = v243;
      uint64_t v2065 = v62;
      if (!v65) {
        goto LABEL_385;
      }
      unint64_t v344 = *(void *)(v58[3] + 8 * (v65 - 1));
      if (v344 < 0x10) {
        goto LABEL_385;
      }
      switch(v343)
      {
        case 1:
          if (v65 == 2)
          {
            uint64_t v1499 = *v60;
            if (v1499)
            {
              uint64_t v1500 = 0;
              uint64_t v1501 = 0;
              uint64_t v1502 = 0;
              uint64_t v1503 = *(void *)(v59 + 152);
              uint64_t v1504 = v240[19];
              uint64_t v1505 = v58[19];
              unint64_t v1506 = v60[1];
              uint64_t v1507 = *(uint64_t **)(v59 + 24);
              uint64_t v1508 = *v1507;
              uint64_t v1509 = v1507[1];
              uint64_t v1510 = (uint64_t *)v240[3];
              uint64_t v1512 = *v1510;
              uint64_t v1511 = v1510[1];
              if (v1506 <= 1) {
                uint64_t v1513 = 1;
              }
              else {
                uint64_t v1513 = v60[1];
              }
              uint64_t v1514 = v1508 - v1509 * v1506;
              uint64_t v1515 = v1512 - v1511 * v241[1];
              do
              {
                if (v1506)
                {
                  uint64_t v1516 = 0;
                  uint64_t v1517 = v1504 + v1501;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      uint64_t v1518 = 0;
                      unsigned int v1519 = *(unsigned __int8 *)(v1503 + v1502);
                      unsigned int v1520 = v344 + 1;
                      do
                      {
                        *(unsigned char *)(v1505 + v1518) = v1519 <= *(unsigned __int8 *)(v1517 + v1518);
                        --v1520;
                        ++v1518;
                      }
                      while (v1520 > 1);
                    }
                    v1502 += v1509;
                    v1501 += v1511;
                    v1505 += (int)v344;
                    ++v1516;
                    v1517 += v1511;
                  }
                  while (v1516 != v1513);
                }
                v1502 += v1514;
                v1501 += v1515;
                ++v1500;
              }
              while (v1500 != v1499);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v1047 = *v60;
            if (v1047)
            {
              uint64_t v1048 = 0;
              uint64_t v1049 = 0;
              uint64_t v1050 = *(void *)(v59 + 152);
              uint64_t v1051 = v240[19];
              uint64_t v1052 = v58[19];
              uint64_t v1053 = **(void **)(v59 + 24);
              uint64_t v1054 = *(void *)v240[3];
              do
              {
                if ((int)v344 >= 1)
                {
                  uint64_t v1055 = 0;
                  unsigned int v1056 = *(unsigned __int8 *)(v1050 + v1049);
                  unsigned int v1057 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v1052 + v1055) = v1056 <= *(unsigned __int8 *)(v1051 + v1055);
                    --v1057;
                    ++v1055;
                  }
                  while (v1057 > 1);
                }
                v1049 += v1053;
                v1052 += (int)v344;
                ++v1048;
                v1051 += v1054;
              }
              while (v1048 != v1047);
            }
          }
          else
          {
            unint64_t v2003 = v58[6];
            if (v2003)
            {
              unint64_t v2038 = 0;
              uint64_t v1928 = v240[19];
              uint64_t v1954 = *(void *)(v59 + 152);
              uint64_t v1521 = v58[19];
              do
              {
                uint64_t v1522 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1523 = *(void *)(v59 + 24);
                  int v1524 = v2038;
                  do
                  {
                    ldiv_t v1525 = ldiv(v1524, v60[v62]);
                    int v1524 = v1525.quot;
                    v1522 += *(void *)(v1523 + 8 * v62--) * v1525.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1526 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1527) = 0;
                }
                else
                {
                  uint64_t v1527 = 0;
                  uint64_t v1528 = v240[3];
                  int v1529 = v2038;
                  do
                  {
                    ldiv_t v1530 = ldiv(v1529, v241[v1526]);
                    int v1529 = v1530.quot;
                    v1527 += *(void *)(v1528 + 8 * v1526--) * v1530.rem;
                  }
                  while (v1526 != -1);
                }
                uint64_t v62 = v2065;
                if ((int)v344 >= 1)
                {
                  uint64_t v1531 = 0;
                  unsigned int v1532 = *(unsigned __int8 *)(v1954 + (int)v1522);
                  unsigned int v1533 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v1521 + v1531) = v1532 <= *(unsigned __int8 *)(v1928 + (int)v1527 + v1531);
                    --v1533;
                    ++v1531;
                  }
                  while (v1533 > 1);
                }
                v1521 += (int)v344;
                v2038 += (int)v344;
              }
              while (v2038 < v2003);
            }
          }
          break;
        case 2:
          if (v65 == 2)
          {
            uint64_t v1534 = *v60;
            if (v1534)
            {
              uint64_t v1535 = 0;
              uint64_t v1536 = 0;
              uint64_t v1537 = 0;
              uint64_t v1538 = *(void *)(v59 + 152);
              uint64_t v1539 = v240[19];
              uint64_t v1540 = v58[19];
              unint64_t v1541 = v60[1];
              uint64_t v1542 = *(uint64_t **)(v59 + 24);
              uint64_t v1543 = *v1542;
              uint64_t v1544 = v1542[1];
              uint64_t v1545 = (uint64_t *)v240[3];
              uint64_t v1547 = *v1545;
              uint64_t v1546 = v1545[1];
              if (v1541 <= 1) {
                uint64_t v1548 = 1;
              }
              else {
                uint64_t v1548 = v60[1];
              }
              uint64_t v1549 = v1543 - v1544 * v1541;
              uint64_t v1550 = v1547 - v1546 * v241[1];
              do
              {
                if (v1541)
                {
                  uint64_t v1551 = 0;
                  uint64_t v1552 = v1538 + v1537;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      uint64_t v1553 = 0;
                      unsigned int v1554 = *(unsigned __int8 *)(v1539 + v1536);
                      unsigned int v1555 = v344 + 1;
                      do
                      {
                        *(unsigned char *)(v1540 + v1553) = *(unsigned __int8 *)(v1552 + v1553) <= v1554;
                        --v1555;
                        ++v1553;
                      }
                      while (v1555 > 1);
                    }
                    v1537 += v1544;
                    v1536 += v1546;
                    v1540 += (int)v344;
                    ++v1551;
                    v1552 += v1544;
                  }
                  while (v1551 != v1548);
                }
                v1537 += v1549;
                v1536 += v1550;
                ++v1535;
              }
              while (v1535 != v1534);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v1058 = *v60;
            if (v1058)
            {
              uint64_t v1059 = 0;
              uint64_t v1060 = 0;
              uint64_t v1061 = *(void *)(v59 + 152);
              uint64_t v1062 = v240[19];
              uint64_t v1063 = v58[19];
              uint64_t v1064 = **(void **)(v59 + 24);
              uint64_t v1065 = *(void *)v240[3];
              do
              {
                if ((int)v344 >= 1)
                {
                  uint64_t v1066 = 0;
                  unsigned int v1067 = *(unsigned __int8 *)(v1062 + v1060);
                  unsigned int v1068 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v1063 + v1066) = *(unsigned __int8 *)(v1061 + v1066) <= v1067;
                    --v1068;
                    ++v1066;
                  }
                  while (v1068 > 1);
                }
                v1060 += v1065;
                v1063 += (int)v344;
                ++v1059;
                v1061 += v1064;
              }
              while (v1059 != v1058);
            }
          }
          else
          {
            unint64_t v2004 = v58[6];
            if (v2004)
            {
              unint64_t v2039 = 0;
              uint64_t v1929 = v240[19];
              uint64_t v1955 = *(void *)(v59 + 152);
              uint64_t v1556 = v58[19];
              do
              {
                uint64_t v1557 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1558 = *(void *)(v59 + 24);
                  int v1559 = v2039;
                  do
                  {
                    ldiv_t v1560 = ldiv(v1559, v60[v62]);
                    int v1559 = v1560.quot;
                    v1557 += *(void *)(v1558 + 8 * v62--) * v1560.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1561 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1562) = 0;
                }
                else
                {
                  uint64_t v1562 = 0;
                  uint64_t v1563 = v240[3];
                  int v1564 = v2039;
                  do
                  {
                    ldiv_t v1565 = ldiv(v1564, v241[v1561]);
                    int v1564 = v1565.quot;
                    v1562 += *(void *)(v1563 + 8 * v1561--) * v1565.rem;
                  }
                  while (v1561 != -1);
                }
                uint64_t v62 = v2065;
                if ((int)v344 >= 1)
                {
                  uint64_t v1566 = 0;
                  unsigned int v1567 = *(unsigned __int8 *)(v1929 + (int)v1562);
                  unsigned int v1568 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v1556 + v1566) = *(unsigned __int8 *)(v1955 + (int)v1557 + v1566) <= v1567;
                    --v1568;
                    ++v1566;
                  }
                  while (v1568 > 1);
                }
                v1556 += (int)v344;
                v2039 += (int)v344;
              }
              while (v2039 < v2004);
            }
          }
          break;
        case 3:
          if (v65 == 2)
          {
            uint64_t v1217 = *v60;
            if (v1217)
            {
              uint64_t v1218 = 0;
              uint64_t v1219 = 0;
              uint64_t v1220 = 0;
              uint64_t v1221 = *(void *)(v59 + 152);
              uint64_t v1222 = v240[19];
              uint64_t v1223 = v58[19];
              unint64_t v1224 = v60[1];
              uint64_t v1225 = *(uint64_t **)(v59 + 24);
              uint64_t v1226 = *v1225;
              uint64_t v1227 = v1225[1];
              uint64_t v1228 = (uint64_t *)v240[3];
              uint64_t v1230 = *v1228;
              uint64_t v1229 = v1228[1];
              if (v1224 <= 1) {
                uint64_t v1231 = 1;
              }
              else {
                uint64_t v1231 = v60[1];
              }
              uint64_t v1232 = v1226 - v1227 * v1224;
              uint64_t v1233 = v1230 - v1229 * v241[1];
              do
              {
                if (v1224)
                {
                  uint64_t v1234 = 0;
                  uint64_t v1235 = v1222 + v1219;
                  uint64_t v1236 = v1221 + v1220;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      uint64_t v1237 = 0;
                      unsigned int v1238 = v344 + 1;
                      do
                      {
                        *(unsigned char *)(v1223 + v1237) = *(unsigned __int8 *)(v1236 + v1237) <= *(unsigned __int8 *)(v1235 + v1237);
                        --v1238;
                        ++v1237;
                      }
                      while (v1238 > 1);
                    }
                    v1220 += v1227;
                    v1219 += v1229;
                    v1223 += (int)v344;
                    ++v1234;
                    v1235 += v1229;
                    v1236 += v1227;
                  }
                  while (v1234 != v1231);
                }
                v1220 += v1232;
                v1219 += v1233;
                ++v1218;
              }
              while (v1218 != v1217);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v345 = *v60;
            if (v345)
            {
              uint64_t v346 = 0;
              uint64_t v347 = *(void *)(v59 + 152);
              uint64_t v348 = v240[19];
              uint64_t v349 = v58[19];
              uint64_t v350 = **(void **)(v59 + 24);
              uint64_t v351 = *(void *)v240[3];
              do
              {
                if ((int)v344 >= 1)
                {
                  uint64_t v352 = 0;
                  unsigned int v353 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v349 + v352) = *(unsigned __int8 *)(v347 + v352) <= *(unsigned __int8 *)(v348 + v352);
                    --v353;
                    ++v352;
                  }
                  while (v353 > 1);
                }
                v349 += (int)v344;
                ++v346;
                v348 += v351;
                v347 += v350;
              }
              while (v346 != v345);
            }
          }
          else
          {
            unint64_t v1995 = v58[6];
            if (v1995)
            {
              unint64_t v2030 = 0;
              uint64_t v1920 = v240[19];
              uint64_t v1946 = *(void *)(v59 + 152);
              uint64_t v1239 = v58[19];
              do
              {
                uint64_t v1240 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1241 = *(void *)(v59 + 24);
                  int v1242 = v2030;
                  do
                  {
                    ldiv_t v1243 = ldiv(v1242, v60[v62]);
                    int v1242 = v1243.quot;
                    v1240 += *(void *)(v1241 + 8 * v62--) * v1243.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1244 = v2051;
                if ((v2051 & 0x80000000) != 0)
                {
                  LODWORD(v1245) = 0;
                }
                else
                {
                  uint64_t v1245 = 0;
                  uint64_t v1246 = v240[3];
                  int v1247 = v2030;
                  do
                  {
                    ldiv_t v1248 = ldiv(v1247, v241[v1244]);
                    int v1247 = v1248.quot;
                    v1245 += *(void *)(v1246 + 8 * v1244--) * v1248.rem;
                  }
                  while (v1244 != -1);
                }
                uint64_t v62 = v2065;
                if ((int)v344 >= 1)
                {
                  uint64_t v1249 = 0;
                  unsigned int v1250 = v344 + 1;
                  do
                  {
                    *(unsigned char *)(v1239 + v1249) = *(unsigned __int8 *)(v1946 + (int)v1240 + v1249) <= *(unsigned __int8 *)(v1920 + (int)v1245 + v1249);
                    --v1250;
                    ++v1249;
                  }
                  while (v1250 > 1);
                }
                v1239 += (int)v344;
                v2030 += (int)v344;
              }
              while (v2030 < v1995);
            }
          }
          break;
        default:
LABEL_385:
          switch(v340)
          {
            case 1uLL:
              uint64_t v354 = v58[6];
              if (v354)
              {
                v355 = *(unsigned __int8 **)(v59 + 152);
                v356 = (unsigned __int8 *)v240[19];
                uint64_t v357 = (BOOL *)v58[19];
                uint64_t v358 = **(void **)(v59 + 24);
                uint64_t v359 = *(void *)v240[3];
                do
                {
                  *v357++ = *v355 <= *v356;
                  v356 += v359;
                  v355 += v358;
                  --v354;
                }
                while (v354);
              }
              break;
            case 2uLL:
              uint64_t v558 = *v60;
              if (v558)
              {
                uint64_t v559 = 0;
                uint64_t v560 = 0;
                uint64_t v561 = 0;
                uint64_t v562 = 0;
                uint64_t v563 = *(void *)(v59 + 152);
                uint64_t v564 = v240[19];
                uint64_t v565 = v58[19];
                unint64_t v566 = v60[1];
                uint64_t v567 = *(uint64_t **)(v59 + 24);
                uint64_t v568 = *v567;
                uint64_t v569 = v567[1];
                uint64_t v570 = (uint64_t *)v240[3];
                uint64_t v571 = *v570;
                uint64_t v572 = v570[1];
                uint64_t v573 = v571 - v572 * v241[1];
                if (v566 <= 1) {
                  uint64_t v574 = 1;
                }
                else {
                  uint64_t v574 = v60[1];
                }
                uint64_t v575 = v568 - v569 * v566;
                do
                {
                  if (v566)
                  {
                    uint64_t v576 = v560 + v574;
                    uint64_t v577 = (BOOL *)(v565 + v560);
                    uint64_t v578 = v574;
                    do
                    {
                      *v577++ = *(unsigned __int8 *)(v563 + v562) <= *(unsigned __int8 *)(v564 + v561);
                      v562 += v569;
                      v561 += v572;
                      --v578;
                    }
                    while (v578);
                    uint64_t v560 = v576;
                  }
                  v562 += v575;
                  v561 += v573;
                  ++v559;
                }
                while (v559 != v558);
              }
              break;
            case 3uLL:
              uint64_t v579 = *v60;
              if (v579)
              {
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = 0;
                uint64_t v584 = *(void *)(v59 + 152);
                uint64_t v585 = v240[19];
                uint64_t v586 = v58[19];
                unint64_t v587 = v60[1];
                uint64_t v588 = *(void **)(v59 + 24);
                uint64_t v589 = v588[1];
                uint64_t v590 = (void *)v240[3];
                uint64_t v591 = v590[1];
                uint64_t v592 = *v590 - v591 * v241[1];
                if (v587 <= 1) {
                  uint64_t v593 = 1;
                }
                else {
                  uint64_t v593 = v60[1];
                }
                unint64_t v594 = *v588 - v589 * v587;
                do
                {
                  if (v587)
                  {
                    uint64_t v595 = 0;
                    unint64_t v596 = v60[2];
                    uint64_t v597 = v588[2];
                    uint64_t v598 = v590[2];
                    if (v596 <= 1) {
                      uint64_t v599 = 1;
                    }
                    else {
                      uint64_t v599 = v60[2];
                    }
                    uint64_t v600 = v591 - v598 * v241[2];
                    do
                    {
                      uint64_t v601 = v599;
                      if (v596)
                      {
                        do
                        {
                          *(unsigned char *)(v586 + v581++) = *(unsigned __int8 *)(v584 + v583) <= *(unsigned __int8 *)(v585 + v582);
                          v583 += v597;
                          v582 += v598;
                          --v601;
                        }
                        while (v601);
                      }
                      v583 += v589 - v597 * v596;
                      v582 += v600;
                      ++v595;
                    }
                    while (v595 != v593);
                  }
                  v583 += v594;
                  v582 += v592;
                  ++v580;
                }
                while (v580 != v579);
              }
              break;
            case 4uLL:
              uint64_t v2072 = *v60;
              if (v2072)
              {
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = 0;
                uint64_t v606 = *(void *)(v59 + 152);
                uint64_t v607 = v240[19];
                uint64_t v608 = v58[19];
                unint64_t v609 = v60[1];
                v610 = *(void **)(v59 + 24);
                uint64_t v611 = (void *)v240[3];
                uint64_t v1940 = v611[1];
                uint64_t v1969 = v610[1];
                uint64_t v2018 = *v611 - v1940 * v241[1];
                int v2058 = v60[1];
                if (v609 <= 1) {
                  uint64_t v612 = 1;
                }
                else {
                  uint64_t v612 = v60[1];
                }
                unint64_t v1983 = *v610 - v610[1] * v609;
                do
                {
                  if (v2058)
                  {
                    uint64_t v613 = 0;
                    unint64_t v614 = v60[2];
                    uint64_t v615 = v610[2];
                    uint64_t v616 = v611[2];
                    if (v614 <= 1) {
                      uint64_t v617 = 1;
                    }
                    else {
                      uint64_t v617 = v60[2];
                    }
                    uint64_t v618 = v1940 - v616 * v241[2];
                    do
                    {
                      if (v614)
                      {
                        uint64_t v619 = 0;
                        unint64_t v620 = v60[3];
                        uint64_t v621 = v610[3];
                        uint64_t v622 = v611[3];
                        if (v620 <= 1) {
                          uint64_t v623 = 1;
                        }
                        else {
                          uint64_t v623 = v60[3];
                        }
                        uint64_t v624 = v616 - v622 * v241[3];
                        do
                        {
                          uint64_t v625 = v623;
                          if (v620)
                          {
                            do
                            {
                              *(unsigned char *)(v608 + v603++) = *(unsigned __int8 *)(v606 + v605) <= *(unsigned __int8 *)(v607 + v604);
                              v605 += v621;
                              v604 += v622;
                              --v625;
                            }
                            while (v625);
                          }
                          v605 += v615 - v621 * v620;
                          v604 += v624;
                          ++v619;
                        }
                        while (v619 != v617);
                      }
                      v605 += v1969 - v615 * v614;
                      v604 += v618;
                      ++v613;
                    }
                    while (v613 != v612);
                  }
                  v605 += v1983;
                  v604 += v2018;
                  ++v602;
                }
                while (v602 != v2072);
              }
              break;
            default:
              uint64_t v547 = v58[6];
              if (v547)
              {
                uint64_t v548 = 0;
                uint64_t v1982 = v240[19];
                uint64_t v2017 = *(void *)(v59 + 152);
                uint64_t v1968 = v58[19];
                do
                {
                  uint64_t v549 = 0;
                  if ((v62 & 0x80000000) == 0)
                  {
                    uint64_t v550 = *(void *)(v59 + 24);
                    int v551 = v548;
                    do
                    {
                      ldiv_t v552 = ldiv(v551, v60[v62]);
                      int v551 = v552.quot;
                      v549 += *(void *)(v550 + 8 * v62--) * v552.rem;
                    }
                    while (v62 != -1);
                  }
                  uint64_t v553 = v2051;
                  if ((v2051 & 0x80000000) != 0)
                  {
                    LODWORD(v554) = 0;
                  }
                  else
                  {
                    uint64_t v554 = 0;
                    uint64_t v555 = v240[3];
                    int v556 = v548;
                    do
                    {
                      ldiv_t v557 = ldiv(v556, v241[v553]);
                      int v556 = v557.quot;
                      v554 += *(void *)(v555 + 8 * v553--) * v557.rem;
                    }
                    while (v553 != -1);
                  }
                  *(unsigned char *)(v1968 + v548++) = *(unsigned __int8 *)(v2017 + (int)v549) <= *(unsigned __int8 *)(v1982 + (int)v554);
                  uint64_t v62 = v2065;
                }
                while (v548 != v547);
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v12)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          unsigned int v11 = **(_DWORD **)(*a2 + 152);
LABEL_13:
          BOOL v13 = v10 > v11;
          goto LABEL_26;
        case 1:
          int v96 = *(_DWORD *)(*a2 + 160);
          if (v96 >= 1)
          {
            unsigned int v97 = **(_DWORD **)(*a1 + 152);
            v98 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v99 = *(unsigned int **)(*a2 + 152);
            unsigned int v100 = v96 + 1;
            do
            {
              unsigned int v101 = *v99++;
              *v98++ = v97 <= v101;
              --v100;
            }
            while (v100 > 1);
          }
          return;
        case 2:
          int v102 = *(_DWORD *)(*a1 + 160);
          if (v102 >= 1)
          {
            unsigned int v103 = **(_DWORD **)(*a2 + 152);
            v104 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v105 = *(unsigned int **)(*a1 + 152);
            unsigned int v106 = v102 + 1;
            do
            {
              unsigned int v107 = *v105++;
              *v104++ = v107 <= v103;
              --v106;
            }
            while (v106 > 1);
          }
          return;
        case 3:
          int v108 = *(_DWORD *)(*(void *)a3 + 48);
          if (v108 >= 1)
          {
            v109 = *(BOOL **)(*(void *)a3 + 152);
            v110 = *(unsigned int **)(*a2 + 152);
            unsigned int v111 = *(unsigned int **)(*a1 + 152);
            unsigned int v112 = v108 + 1;
            do
            {
              unsigned int v114 = *v111++;
              unsigned int v113 = v114;
              unsigned int v115 = *v110++;
              *v109++ = v113 <= v115;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        default:
          uint64_t v87 = *(void **)a3;
          uint64_t v88 = *a1;
          uint64_t v89 = *(int **)*a1;
          uint64_t v90 = (*(void *)(*a1 + 8) - (void)v89) >> 2;
          uint64_t v91 = (v90 - 1);
          if ((int)v91 >= -1) {
            int v92 = -1;
          }
          else {
            int v92 = v90 - 1;
          }
          int v93 = v92 + 1;
          int v94 = v90 + 1;
          break;
      }
      while (1)
      {
        unsigned int v95 = v94 - 2;
        if (v94 - 2 < 0) {
          break;
        }
        --v94;
        if (*(void *)(*(void *)(v88 + 24) + 8 * v95) != *(void *)(v87[3] + 8 * v95)) {
          goto LABEL_199;
        }
      }
      int v94 = v93;
LABEL_199:
      v248 = (void *)*a2;
      uint64_t v249 = *(int **)*a2;
      uint64_t v250 = (v248[1] - (void)v249) >> 2;
      uint64_t v251 = (v250 - 1);
      if ((int)v251 >= -1) {
        int v252 = -1;
      }
      else {
        int v252 = v250 - 1;
      }
      int v253 = v252 + 1;
      int v254 = v250 + 1;
      while (1)
      {
        unsigned int v255 = v254 - 2;
        if (v254 - 2 < 0) {
          break;
        }
        --v254;
        if (*(void *)(v248[3] + 8 * v255) != *(void *)(v87[3] + 8 * v255)) {
          goto LABEL_249;
        }
      }
      int v254 = v253;
LABEL_249:
      int v292 = v90 + 1;
      while (1)
      {
        unsigned int v293 = v292 - 2;
        if (v292 - 2 < 0) {
          break;
        }
        --v292;
        if (*(void *)(*(void *)(v88 + 24) + 8 * v293)) {
          goto LABEL_284;
        }
      }
      int v292 = v93;
LABEL_284:
      int v306 = v250 + 1;
      while (1)
      {
        unsigned int v307 = v306 - 2;
        if (v306 - 2 < 0) {
          break;
        }
        --v306;
        if (*(void *)(v248[3] + 8 * v307)) {
          goto LABEL_391;
        }
      }
      int v306 = v253;
LABEL_391:
      unint64_t v360 = (uint64_t)(v87[1] - *v87) >> 2;
      if (v94 <= v254) {
        int v361 = v254;
      }
      else {
        int v361 = v94;
      }
      if (v94 <= v306) {
        int v94 = v306;
      }
      if (v292 > v254) {
        int v254 = v292;
      }
      if (v360 > v254)
      {
        int v362 = 1;
      }
      else
      {
        int v254 = (uint64_t)(v87[1] - *v87) >> 2;
        int v362 = 4;
      }
      if (v360 > v94)
      {
        int v363 = 2;
      }
      else
      {
        int v94 = v254;
        int v363 = v362;
      }
      if (v360 > v361)
      {
        int v94 = v361;
        int v363 = 3;
      }
      uint64_t v2052 = v251;
      uint64_t v2066 = v91;
      if (!v94) {
        goto LABEL_420;
      }
      unint64_t v364 = *(void *)(v87[3] + 8 * (v94 - 1));
      if (v364 < 0x10) {
        goto LABEL_420;
      }
      switch(v363)
      {
        case 1:
          if (v94 == 2)
          {
            uint64_t v1569 = *v89;
            if (v1569)
            {
              uint64_t v1570 = 0;
              uint64_t v1571 = 0;
              uint64_t v1572 = 0;
              uint64_t v1573 = *(void *)(v88 + 152);
              uint64_t v1574 = v248[19];
              uint64_t v1575 = v87[19];
              unint64_t v1576 = v89[1];
              uint64_t v1577 = *(uint64_t **)(v88 + 24);
              uint64_t v1578 = *v1577;
              uint64_t v1579 = v1577[1];
              uint64_t v1580 = (uint64_t *)v248[3];
              uint64_t v1582 = *v1580;
              uint64_t v1581 = v1580[1];
              if (v1576 <= 1) {
                uint64_t v1583 = 1;
              }
              else {
                uint64_t v1583 = v89[1];
              }
              uint64_t v1584 = v1578 - v1579 * v1576;
              uint64_t v1585 = v1582 - v1581 * v249[1];
              do
              {
                if (v1576)
                {
                  uint64_t v1586 = 0;
                  uint64_t v1587 = v1574 + 4 * v1571;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      uint64_t v1588 = 0;
                      unsigned int v1589 = *(_DWORD *)(v1573 + 4 * v1572);
                      unsigned int v1590 = v364 + 1;
                      do
                      {
                        *(unsigned char *)(v1575 + v1588) = v1589 <= *(_DWORD *)(v1587 + 4 * v1588);
                        --v1590;
                        ++v1588;
                      }
                      while (v1590 > 1);
                    }
                    v1572 += v1579;
                    v1571 += v1581;
                    v1575 += (int)v364;
                    ++v1586;
                    v1587 += 4 * v1581;
                  }
                  while (v1586 != v1583);
                }
                v1572 += v1584;
                v1571 += v1585;
                ++v1570;
              }
              while (v1570 != v1569);
            }
          }
          else if (v94 == 1)
          {
            uint64_t v1069 = *v89;
            if (v1069)
            {
              uint64_t v1070 = 0;
              uint64_t v1071 = 0;
              uint64_t v1072 = *(void *)(v88 + 152);
              uint64_t v1073 = v248[19];
              uint64_t v1074 = v87[19];
              uint64_t v1075 = **(void **)(v88 + 24);
              uint64_t v1076 = 4 * *(void *)v248[3];
              do
              {
                if ((int)v364 >= 1)
                {
                  uint64_t v1077 = 0;
                  unsigned int v1078 = *(_DWORD *)(v1072 + 4 * v1071);
                  unsigned int v1079 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v1074 + v1077) = v1078 <= *(_DWORD *)(v1073 + 4 * v1077);
                    --v1079;
                    ++v1077;
                  }
                  while (v1079 > 1);
                }
                v1071 += v1075;
                v1074 += (int)v364;
                ++v1070;
                v1073 += v1076;
              }
              while (v1070 != v1069);
            }
          }
          else
          {
            unint64_t v2005 = v87[6];
            if (v2005)
            {
              unint64_t v2040 = 0;
              uint64_t v1930 = v248[19];
              uint64_t v1956 = *(void *)(v88 + 152);
              uint64_t v1591 = v87[19];
              do
              {
                uint64_t v1592 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1593 = *(void *)(v88 + 24);
                  int v1594 = v2040;
                  do
                  {
                    ldiv_t v1595 = ldiv(v1594, v89[v91]);
                    int v1594 = v1595.quot;
                    v1592 += *(void *)(v1593 + 8 * v91--) * v1595.rem;
                  }
                  while (v91 != -1);
                }
                uint64_t v1596 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1597) = 0;
                }
                else
                {
                  uint64_t v1597 = 0;
                  uint64_t v1598 = v248[3];
                  int v1599 = v2040;
                  do
                  {
                    ldiv_t v1600 = ldiv(v1599, v249[v1596]);
                    int v1599 = v1600.quot;
                    v1597 += *(void *)(v1598 + 8 * v1596--) * v1600.rem;
                  }
                  while (v1596 != -1);
                }
                uint64_t v91 = v2066;
                if ((int)v364 >= 1)
                {
                  uint64_t v1601 = 0;
                  unsigned int v1602 = *(_DWORD *)(v1956 + 4 * (int)v1592);
                  unsigned int v1603 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v1591 + v1601) = v1602 <= *(_DWORD *)(v1930 + 4 * (int)v1597 + 4 * v1601);
                    --v1603;
                    ++v1601;
                  }
                  while (v1603 > 1);
                }
                v1591 += (int)v364;
                v2040 += (int)v364;
              }
              while (v2040 < v2005);
            }
          }
          break;
        case 2:
          if (v94 == 2)
          {
            uint64_t v1604 = *v89;
            if (v1604)
            {
              uint64_t v1605 = 0;
              uint64_t v1606 = 0;
              uint64_t v1607 = 0;
              uint64_t v1608 = *(void *)(v88 + 152);
              uint64_t v1609 = v248[19];
              uint64_t v1610 = v87[19];
              unint64_t v1611 = v89[1];
              uint64_t v1612 = *(uint64_t **)(v88 + 24);
              uint64_t v1613 = *v1612;
              uint64_t v1614 = v1612[1];
              uint64_t v1615 = (uint64_t *)v248[3];
              uint64_t v1617 = *v1615;
              uint64_t v1616 = v1615[1];
              if (v1611 <= 1) {
                uint64_t v1618 = 1;
              }
              else {
                uint64_t v1618 = v89[1];
              }
              uint64_t v1619 = v1613 - v1614 * v1611;
              uint64_t v1620 = v1617 - v1616 * v249[1];
              do
              {
                if (v1611)
                {
                  uint64_t v1621 = 0;
                  uint64_t v1622 = v1608 + 4 * v1607;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      uint64_t v1623 = 0;
                      unsigned int v1624 = *(_DWORD *)(v1609 + 4 * v1606);
                      unsigned int v1625 = v364 + 1;
                      do
                      {
                        *(unsigned char *)(v1610 + v1623) = *(_DWORD *)(v1622 + 4 * v1623) <= v1624;
                        --v1625;
                        ++v1623;
                      }
                      while (v1625 > 1);
                    }
                    v1607 += v1614;
                    v1606 += v1616;
                    v1610 += (int)v364;
                    ++v1621;
                    v1622 += 4 * v1614;
                  }
                  while (v1621 != v1618);
                }
                v1607 += v1619;
                v1606 += v1620;
                ++v1605;
              }
              while (v1605 != v1604);
            }
          }
          else if (v94 == 1)
          {
            uint64_t v1080 = *v89;
            if (v1080)
            {
              uint64_t v1081 = 0;
              uint64_t v1082 = 0;
              uint64_t v1083 = *(void *)(v88 + 152);
              uint64_t v1084 = v248[19];
              uint64_t v1085 = v87[19];
              uint64_t v1086 = *(void *)v248[3];
              uint64_t v1087 = 4 * **(void **)(v88 + 24);
              do
              {
                if ((int)v364 >= 1)
                {
                  uint64_t v1088 = 0;
                  unsigned int v1089 = *(_DWORD *)(v1084 + 4 * v1082);
                  unsigned int v1090 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v1085 + v1088) = *(_DWORD *)(v1083 + 4 * v1088) <= v1089;
                    --v1090;
                    ++v1088;
                  }
                  while (v1090 > 1);
                }
                v1082 += v1086;
                v1085 += (int)v364;
                ++v1081;
                v1083 += v1087;
              }
              while (v1081 != v1080);
            }
          }
          else
          {
            unint64_t v2006 = v87[6];
            if (v2006)
            {
              unint64_t v2041 = 0;
              uint64_t v1931 = v248[19];
              uint64_t v1957 = *(void *)(v88 + 152);
              uint64_t v1626 = v87[19];
              do
              {
                uint64_t v1627 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1628 = *(void *)(v88 + 24);
                  int v1629 = v2041;
                  do
                  {
                    ldiv_t v1630 = ldiv(v1629, v89[v91]);
                    int v1629 = v1630.quot;
                    v1627 += *(void *)(v1628 + 8 * v91--) * v1630.rem;
                  }
                  while (v91 != -1);
                }
                uint64_t v1631 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1632) = 0;
                }
                else
                {
                  uint64_t v1632 = 0;
                  uint64_t v1633 = v248[3];
                  int v1634 = v2041;
                  do
                  {
                    ldiv_t v1635 = ldiv(v1634, v249[v1631]);
                    int v1634 = v1635.quot;
                    v1632 += *(void *)(v1633 + 8 * v1631--) * v1635.rem;
                  }
                  while (v1631 != -1);
                }
                uint64_t v91 = v2066;
                if ((int)v364 >= 1)
                {
                  uint64_t v1636 = 0;
                  unsigned int v1637 = *(_DWORD *)(v1931 + 4 * (int)v1632);
                  unsigned int v1638 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v1626 + v1636) = *(_DWORD *)(v1957 + 4 * (int)v1627 + 4 * v1636) <= v1637;
                    --v1638;
                    ++v1636;
                  }
                  while (v1638 > 1);
                }
                v1626 += (int)v364;
                v2041 += (int)v364;
              }
              while (v2041 < v2006);
            }
          }
          break;
        case 3:
          if (v94 == 2)
          {
            uint64_t v1251 = *v89;
            if (v1251)
            {
              uint64_t v1252 = 0;
              uint64_t v1253 = 0;
              uint64_t v1254 = 0;
              uint64_t v1255 = *(void *)(v88 + 152);
              uint64_t v1256 = v248[19];
              uint64_t v1257 = v87[19];
              unint64_t v1258 = v89[1];
              uint64_t v1259 = *(uint64_t **)(v88 + 24);
              uint64_t v1260 = *v1259;
              uint64_t v1261 = v1259[1];
              uint64_t v1262 = (uint64_t *)v248[3];
              uint64_t v1264 = *v1262;
              uint64_t v1263 = v1262[1];
              if (v1258 <= 1) {
                uint64_t v1265 = 1;
              }
              else {
                uint64_t v1265 = v89[1];
              }
              uint64_t v1266 = v1260 - v1261 * v1258;
              uint64_t v1267 = v1264 - v1263 * v249[1];
              do
              {
                if (v1258)
                {
                  uint64_t v1268 = 0;
                  uint64_t v1269 = v1256 + 4 * v1253;
                  uint64_t v1270 = v1255 + 4 * v1254;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      uint64_t v1271 = 0;
                      unsigned int v1272 = v364 + 1;
                      do
                      {
                        *(unsigned char *)(v1257 + v1271) = *(_DWORD *)(v1270 + 4 * v1271) <= *(_DWORD *)(v1269 + 4 * v1271);
                        --v1272;
                        ++v1271;
                      }
                      while (v1272 > 1);
                    }
                    v1254 += v1261;
                    v1253 += v1263;
                    v1257 += (int)v364;
                    ++v1268;
                    v1269 += 4 * v1263;
                    v1270 += 4 * v1261;
                  }
                  while (v1268 != v1265);
                }
                v1254 += v1266;
                v1253 += v1267;
                ++v1252;
              }
              while (v1252 != v1251);
            }
          }
          else if (v94 == 1)
          {
            uint64_t v365 = *v89;
            if (v365)
            {
              uint64_t v366 = 0;
              uint64_t v367 = *(void *)(v88 + 152);
              uint64_t v368 = v248[19];
              uint64_t v369 = v87[19];
              uint64_t v370 = 4 * *(void *)v248[3];
              uint64_t v371 = 4 * **(void **)(v88 + 24);
              do
              {
                if ((int)v364 >= 1)
                {
                  uint64_t v372 = 0;
                  unsigned int v373 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v369 + v372) = *(_DWORD *)(v367 + 4 * v372) <= *(_DWORD *)(v368 + 4 * v372);
                    --v373;
                    ++v372;
                  }
                  while (v373 > 1);
                }
                v369 += (int)v364;
                ++v366;
                v368 += v370;
                v367 += v371;
              }
              while (v366 != v365);
            }
          }
          else
          {
            unint64_t v1996 = v87[6];
            if (v1996)
            {
              unint64_t v2031 = 0;
              uint64_t v1921 = v248[19];
              uint64_t v1947 = *(void *)(v88 + 152);
              uint64_t v1273 = v87[19];
              do
              {
                uint64_t v1274 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1275 = *(void *)(v88 + 24);
                  int v1276 = v2031;
                  do
                  {
                    ldiv_t v1277 = ldiv(v1276, v89[v91]);
                    int v1276 = v1277.quot;
                    v1274 += *(void *)(v1275 + 8 * v91--) * v1277.rem;
                  }
                  while (v91 != -1);
                }
                uint64_t v1278 = v2052;
                if ((v2052 & 0x80000000) != 0)
                {
                  LODWORD(v1279) = 0;
                }
                else
                {
                  uint64_t v1279 = 0;
                  uint64_t v1280 = v248[3];
                  int v1281 = v2031;
                  do
                  {
                    ldiv_t v1282 = ldiv(v1281, v249[v1278]);
                    int v1281 = v1282.quot;
                    v1279 += *(void *)(v1280 + 8 * v1278--) * v1282.rem;
                  }
                  while (v1278 != -1);
                }
                uint64_t v91 = v2066;
                if ((int)v364 >= 1)
                {
                  uint64_t v1283 = 0;
                  unsigned int v1284 = v364 + 1;
                  do
                  {
                    *(unsigned char *)(v1273 + v1283) = *(_DWORD *)(v1947 + 4 * (int)v1274 + 4 * v1283) <= *(_DWORD *)(v1921 + 4 * (int)v1279 + 4 * v1283);
                    --v1284;
                    ++v1283;
                  }
                  while (v1284 > 1);
                }
                v1273 += (int)v364;
                v2031 += (int)v364;
              }
              while (v2031 < v1996);
            }
          }
          break;
        default:
LABEL_420:
          switch(v360)
          {
            case 1uLL:
              uint64_t v374 = v87[6];
              if (v374)
              {
                v375 = *(_DWORD **)(v88 + 152);
                v376 = (_DWORD *)v248[19];
                uint64_t v377 = (BOOL *)v87[19];
                uint64_t v378 = 4 * *(void *)v248[3];
                uint64_t v379 = 4 * **(void **)(v88 + 24);
                do
                {
                  *v377++ = *v375 <= *v376;
                  v376 = (_DWORD *)((char *)v376 + v378);
                  v375 = (_DWORD *)((char *)v375 + v379);
                  --v374;
                }
                while (v374);
              }
              break;
            case 2uLL:
              uint64_t v637 = *v89;
              if (v637)
              {
                uint64_t v638 = 0;
                uint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = 0;
                uint64_t v642 = *(void *)(v88 + 152);
                uint64_t v643 = v248[19];
                uint64_t v644 = v87[19];
                unint64_t v645 = v89[1];
                uint64_t v646 = *(uint64_t **)(v88 + 24);
                uint64_t v647 = *v646;
                uint64_t v648 = v646[1];
                uint64_t v649 = (uint64_t *)v248[3];
                uint64_t v650 = *v649;
                uint64_t v651 = v649[1];
                uint64_t v652 = v650 - v651 * v249[1];
                if (v645 <= 1) {
                  uint64_t v653 = 1;
                }
                else {
                  uint64_t v653 = v89[1];
                }
                uint64_t v654 = v647 - v648 * v645;
                do
                {
                  if (v645)
                  {
                    uint64_t v655 = v639 + v653;
                    uint64_t v656 = (BOOL *)(v644 + v639);
                    uint64_t v657 = v653;
                    do
                    {
                      *v656++ = *(_DWORD *)(v642 + 4 * v641) <= *(_DWORD *)(v643 + 4 * v640);
                      v641 += v648;
                      v640 += v651;
                      --v657;
                    }
                    while (v657);
                    uint64_t v639 = v655;
                  }
                  v641 += v654;
                  v640 += v652;
                  ++v638;
                }
                while (v638 != v637);
              }
              break;
            case 3uLL:
              uint64_t v658 = *v89;
              if (v658)
              {
                uint64_t v659 = 0;
                uint64_t v660 = 0;
                uint64_t v661 = 0;
                uint64_t v662 = 0;
                uint64_t v663 = *(void *)(v88 + 152);
                uint64_t v664 = v248[19];
                uint64_t v665 = v87[19];
                unint64_t v666 = v89[1];
                uint64_t v667 = *(void **)(v88 + 24);
                uint64_t v668 = v667[1];
                uint64_t v669 = (void *)v248[3];
                uint64_t v670 = v669[1];
                uint64_t v671 = *v669 - v670 * v249[1];
                if (v666 <= 1) {
                  uint64_t v672 = 1;
                }
                else {
                  uint64_t v672 = v89[1];
                }
                unint64_t v673 = *v667 - v668 * v666;
                do
                {
                  if (v666)
                  {
                    uint64_t v674 = 0;
                    unint64_t v675 = v89[2];
                    uint64_t v676 = v667[2];
                    uint64_t v677 = v669[2];
                    if (v675 <= 1) {
                      uint64_t v678 = 1;
                    }
                    else {
                      uint64_t v678 = v89[2];
                    }
                    uint64_t v679 = v670 - v677 * v249[2];
                    do
                    {
                      uint64_t v680 = v678;
                      if (v675)
                      {
                        do
                        {
                          *(unsigned char *)(v665 + v660++) = *(_DWORD *)(v663 + 4 * v662) <= *(_DWORD *)(v664 + 4 * v661);
                          v662 += v676;
                          v661 += v677;
                          --v680;
                        }
                        while (v680);
                      }
                      v662 += v668 - v676 * v675;
                      v661 += v679;
                      ++v674;
                    }
                    while (v674 != v672);
                  }
                  v662 += v673;
                  v661 += v671;
                  ++v659;
                }
                while (v659 != v658);
              }
              break;
            case 4uLL:
              uint64_t v2073 = *v89;
              if (v2073)
              {
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = 0;
                uint64_t v684 = 0;
                uint64_t v685 = *(void *)(v88 + 152);
                uint64_t v686 = v248[19];
                uint64_t v687 = v87[19];
                unint64_t v688 = v89[1];
                v689 = *(void **)(v88 + 24);
                uint64_t v690 = (void *)v248[3];
                uint64_t v1941 = v690[1];
                uint64_t v1971 = v689[1];
                uint64_t v2020 = *v690 - v1941 * v249[1];
                int v2059 = v89[1];
                if (v688 <= 1) {
                  uint64_t v691 = 1;
                }
                else {
                  uint64_t v691 = v89[1];
                }
                unint64_t v1985 = *v689 - v689[1] * v688;
                do
                {
                  if (v2059)
                  {
                    uint64_t v692 = 0;
                    unint64_t v693 = v89[2];
                    uint64_t v694 = v689[2];
                    uint64_t v695 = v690[2];
                    if (v693 <= 1) {
                      uint64_t v696 = 1;
                    }
                    else {
                      uint64_t v696 = v89[2];
                    }
                    uint64_t v697 = v1941 - v695 * v249[2];
                    do
                    {
                      if (v693)
                      {
                        uint64_t v698 = 0;
                        unint64_t v699 = v89[3];
                        uint64_t v700 = v689[3];
                        uint64_t v701 = v690[3];
                        if (v699 <= 1) {
                          uint64_t v702 = 1;
                        }
                        else {
                          uint64_t v702 = v89[3];
                        }
                        uint64_t v703 = v695 - v701 * v249[3];
                        do
                        {
                          uint64_t v704 = v702;
                          if (v699)
                          {
                            do
                            {
                              *(unsigned char *)(v687 + v682++) = *(_DWORD *)(v685 + 4 * v684) <= *(_DWORD *)(v686 + 4 * v683);
                              v684 += v700;
                              v683 += v701;
                              --v704;
                            }
                            while (v704);
                          }
                          v684 += v694 - v700 * v699;
                          v683 += v703;
                          ++v698;
                        }
                        while (v698 != v696);
                      }
                      v684 += v1971 - v694 * v693;
                      v683 += v697;
                      ++v692;
                    }
                    while (v692 != v691);
                  }
                  v684 += v1985;
                  v683 += v2020;
                  ++v681;
                }
                while (v681 != v2073);
              }
              break;
            default:
              uint64_t v626 = v87[6];
              if (v626)
              {
                uint64_t v627 = 0;
                uint64_t v1984 = v248[19];
                uint64_t v2019 = *(void *)(v88 + 152);
                uint64_t v1970 = v87[19];
                do
                {
                  uint64_t v628 = 0;
                  if ((v91 & 0x80000000) == 0)
                  {
                    uint64_t v629 = *(void *)(v88 + 24);
                    int v630 = v627;
                    do
                    {
                      ldiv_t v631 = ldiv(v630, v89[v91]);
                      int v630 = v631.quot;
                      v628 += *(void *)(v629 + 8 * v91--) * v631.rem;
                    }
                    while (v91 != -1);
                  }
                  uint64_t v632 = v2052;
                  if ((v2052 & 0x80000000) != 0)
                  {
                    LODWORD(v633) = 0;
                  }
                  else
                  {
                    uint64_t v633 = 0;
                    uint64_t v634 = v248[3];
                    int v635 = v627;
                    do
                    {
                      ldiv_t v636 = ldiv(v635, v249[v632]);
                      int v635 = v636.quot;
                      v633 += *(void *)(v634 + 8 * v632--) * v636.rem;
                    }
                    while (v632 != -1);
                  }
                  *(unsigned char *)(v1970 + v627++) = *(_DWORD *)(v2019 + 4 * (int)v628) <= *(_DWORD *)(v1984
                                                                                                 + 4 * (int)v633);
                  uint64_t v91 = v2066;
                }
                while (v627 != v626);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v14)
      {
        case 0:
          int v15 = **(char **)(*a1 + 152);
          int v16 = **(char **)(*a2 + 152);
          goto LABEL_18;
        case 1:
          int v125 = *(_DWORD *)(*a2 + 160);
          if (v125 >= 1)
          {
            int v126 = **(char **)(*a1 + 152);
            v127 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v128 = *(char **)(*a2 + 152);
            unsigned int v129 = v125 + 1;
            do
            {
              int v130 = *v128++;
              *v127++ = v126 <= v130;
              --v129;
            }
            while (v129 > 1);
          }
          return;
        case 2:
          int v131 = *(_DWORD *)(*a1 + 160);
          if (v131 >= 1)
          {
            int v132 = **(char **)(*a2 + 152);
            v133 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v134 = *(char **)(*a1 + 152);
            unsigned int v135 = v131 + 1;
            do
            {
              int v136 = *v134++;
              *v133++ = v136 <= v132;
              --v135;
            }
            while (v135 > 1);
          }
          return;
        case 3:
          int v137 = *(_DWORD *)(*(void *)a3 + 48);
          if (v137 >= 1)
          {
            v138 = *(BOOL **)(*(void *)a3 + 152);
            v139 = *(char **)(*a2 + 152);
            unsigned int v140 = *(char **)(*a1 + 152);
            unsigned int v141 = v137 + 1;
            do
            {
              int v143 = *v140++;
              int v142 = v143;
              int v144 = *v139++;
              *v138++ = v142 <= v144;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        default:
          uint64_t v116 = *(void **)a3;
          uint64_t v117 = *a1;
          uint64_t v118 = *(int **)*a1;
          uint64_t v119 = (*(void *)(*a1 + 8) - (void)v118) >> 2;
          uint64_t v120 = (v119 - 1);
          if ((int)v120 >= -1) {
            int v121 = -1;
          }
          else {
            int v121 = v119 - 1;
          }
          int v122 = v121 + 1;
          int v123 = v119 + 1;
          break;
      }
      while (1)
      {
        unsigned int v124 = v123 - 2;
        if (v123 - 2 < 0) {
          break;
        }
        --v123;
        if (*(void *)(*(void *)(v117 + 24) + 8 * v124) != *(void *)(v116[3] + 8 * v124)) {
          goto LABEL_207;
        }
      }
      int v123 = v122;
LABEL_207:
      v256 = (void *)*a2;
      uint64_t v257 = *(int **)*a2;
      uint64_t v258 = (v256[1] - (void)v257) >> 2;
      uint64_t v259 = (v258 - 1);
      if ((int)v259 >= -1) {
        int v260 = -1;
      }
      else {
        int v260 = v258 - 1;
      }
      int v261 = v260 + 1;
      int v262 = v258 + 1;
      while (1)
      {
        unsigned int v263 = v262 - 2;
        if (v262 - 2 < 0) {
          break;
        }
        --v262;
        if (*(void *)(v256[3] + 8 * v263) != *(void *)(v116[3] + 8 * v263)) {
          goto LABEL_254;
        }
      }
      int v262 = v261;
LABEL_254:
      int v294 = v119 + 1;
      while (1)
      {
        unsigned int v295 = v294 - 2;
        if (v294 - 2 < 0) {
          break;
        }
        --v294;
        if (*(void *)(*(void *)(v117 + 24) + 8 * v295)) {
          goto LABEL_289;
        }
      }
      int v294 = v122;
LABEL_289:
      int v308 = v258 + 1;
      while (1)
      {
        unsigned int v309 = v308 - 2;
        if (v308 - 2 < 0) {
          break;
        }
        --v308;
        if (*(void *)(v256[3] + 8 * v309)) {
          goto LABEL_426;
        }
      }
      int v308 = v261;
LABEL_426:
      unint64_t v380 = (uint64_t)(v116[1] - *v116) >> 2;
      if (v123 <= v262) {
        int v381 = v262;
      }
      else {
        int v381 = v123;
      }
      if (v123 <= v308) {
        int v123 = v308;
      }
      if (v294 > v262) {
        int v262 = v294;
      }
      if (v380 > v262)
      {
        int v382 = 1;
      }
      else
      {
        int v262 = (uint64_t)(v116[1] - *v116) >> 2;
        int v382 = 4;
      }
      if (v380 > v123)
      {
        int v383 = 2;
      }
      else
      {
        int v123 = v262;
        int v383 = v382;
      }
      if (v380 > v381)
      {
        int v123 = v381;
        int v383 = 3;
      }
      uint64_t v2053 = v259;
      uint64_t v2067 = v120;
      if (!v123) {
        goto LABEL_455;
      }
      unint64_t v384 = *(void *)(v116[3] + 8 * (v123 - 1));
      if (v384 < 0x10) {
        goto LABEL_455;
      }
      switch(v383)
      {
        case 1:
          if (v123 == 2)
          {
            uint64_t v1639 = *v118;
            if (v1639)
            {
              uint64_t v1640 = 0;
              uint64_t v1641 = 0;
              uint64_t v1642 = 0;
              uint64_t v1643 = *(void *)(v117 + 152);
              uint64_t v1644 = v256[19];
              uint64_t v1645 = v116[19];
              unint64_t v1646 = v118[1];
              uint64_t v1647 = *(uint64_t **)(v117 + 24);
              uint64_t v1648 = *v1647;
              uint64_t v1649 = v1647[1];
              uint64_t v1650 = (uint64_t *)v256[3];
              uint64_t v1652 = *v1650;
              uint64_t v1651 = v1650[1];
              if (v1646 <= 1) {
                uint64_t v1653 = 1;
              }
              else {
                uint64_t v1653 = v118[1];
              }
              uint64_t v1654 = v1648 - v1649 * v1646;
              uint64_t v1655 = v1652 - v1651 * v257[1];
              do
              {
                if (v1646)
                {
                  uint64_t v1656 = 0;
                  uint64_t v1657 = v1644 + v1641;
                  do
                  {
                    if ((int)v384 >= 1)
                    {
                      uint64_t v1658 = 0;
                      int v1659 = *(char *)(v1643 + v1642);
                      unsigned int v1660 = v384 + 1;
                      do
                      {
                        *(unsigned char *)(v1645 + v1658) = v1659 <= *(char *)(v1657 + v1658);
                        --v1660;
                        ++v1658;
                      }
                      while (v1660 > 1);
                    }
                    v1642 += v1649;
                    v1641 += v1651;
                    v1645 += (int)v384;
                    ++v1656;
                    v1657 += v1651;
                  }
                  while (v1656 != v1653);
                }
                v1642 += v1654;
                v1641 += v1655;
                ++v1640;
              }
              while (v1640 != v1639);
            }
          }
          else if (v123 == 1)
          {
            uint64_t v1091 = *v118;
            if (v1091)
            {
              uint64_t v1092 = 0;
              uint64_t v1093 = 0;
              uint64_t v1094 = *(void *)(v117 + 152);
              uint64_t v1095 = v256[19];
              uint64_t v1096 = v116[19];
              uint64_t v1097 = **(void **)(v117 + 24);
              uint64_t v1098 = *(void *)v256[3];
              do
              {
                if ((int)v384 >= 1)
                {
                  uint64_t v1099 = 0;
                  int v1100 = *(char *)(v1094 + v1093);
                  unsigned int v1101 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v1096 + v1099) = v1100 <= *(char *)(v1095 + v1099);
                    --v1101;
                    ++v1099;
                  }
                  while (v1101 > 1);
                }
                v1093 += v1097;
                v1096 += (int)v384;
                ++v1092;
                v1095 += v1098;
              }
              while (v1092 != v1091);
            }
          }
          else
          {
            unint64_t v2007 = v116[6];
            if (v2007)
            {
              unint64_t v2042 = 0;
              uint64_t v1932 = v256[19];
              uint64_t v1958 = *(void *)(v117 + 152);
              uint64_t v1661 = v116[19];
              do
              {
                uint64_t v1662 = 0;
                if ((v120 & 0x80000000) == 0)
                {
                  uint64_t v1663 = *(void *)(v117 + 24);
                  int v1664 = v2042;
                  do
                  {
                    ldiv_t v1665 = ldiv(v1664, v118[v120]);
                    int v1664 = v1665.quot;
                    v1662 += *(void *)(v1663 + 8 * v120--) * v1665.rem;
                  }
                  while (v120 != -1);
                }
                uint64_t v1666 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1667) = 0;
                }
                else
                {
                  uint64_t v1667 = 0;
                  uint64_t v1668 = v256[3];
                  int v1669 = v2042;
                  do
                  {
                    ldiv_t v1670 = ldiv(v1669, v257[v1666]);
                    int v1669 = v1670.quot;
                    v1667 += *(void *)(v1668 + 8 * v1666--) * v1670.rem;
                  }
                  while (v1666 != -1);
                }
                uint64_t v120 = v2067;
                if ((int)v384 >= 1)
                {
                  uint64_t v1671 = 0;
                  int v1672 = *(char *)(v1958 + (int)v1662);
                  unsigned int v1673 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v1661 + v1671) = v1672 <= *(char *)(v1932 + (int)v1667 + v1671);
                    --v1673;
                    ++v1671;
                  }
                  while (v1673 > 1);
                }
                v1661 += (int)v384;
                v2042 += (int)v384;
              }
              while (v2042 < v2007);
            }
          }
          break;
        case 2:
          if (v123 == 2)
          {
            uint64_t v1674 = *v118;
            if (v1674)
            {
              uint64_t v1675 = 0;
              uint64_t v1676 = 0;
              uint64_t v1677 = 0;
              uint64_t v1678 = *(void *)(v117 + 152);
              uint64_t v1679 = v256[19];
              uint64_t v1680 = v116[19];
              unint64_t v1681 = v118[1];
              uint64_t v1682 = *(uint64_t **)(v117 + 24);
              uint64_t v1683 = *v1682;
              uint64_t v1684 = v1682[1];
              uint64_t v1685 = (uint64_t *)v256[3];
              uint64_t v1687 = *v1685;
              uint64_t v1686 = v1685[1];
              if (v1681 <= 1) {
                uint64_t v1688 = 1;
              }
              else {
                uint64_t v1688 = v118[1];
              }
              uint64_t v1689 = v1683 - v1684 * v1681;
              uint64_t v1690 = v1687 - v1686 * v257[1];
              do
              {
                if (v1681)
                {
                  uint64_t v1691 = 0;
                  uint64_t v1692 = v1678 + v1677;
                  do
                  {
                    if ((int)v384 >= 1)
                    {
                      uint64_t v1693 = 0;
                      int v1694 = *(char *)(v1679 + v1676);
                      unsigned int v1695 = v384 + 1;
                      do
                      {
                        *(unsigned char *)(v1680 + v1693) = *(char *)(v1692 + v1693) <= v1694;
                        --v1695;
                        ++v1693;
                      }
                      while (v1695 > 1);
                    }
                    v1677 += v1684;
                    v1676 += v1686;
                    v1680 += (int)v384;
                    ++v1691;
                    v1692 += v1684;
                  }
                  while (v1691 != v1688);
                }
                v1677 += v1689;
                v1676 += v1690;
                ++v1675;
              }
              while (v1675 != v1674);
            }
          }
          else if (v123 == 1)
          {
            uint64_t v1102 = *v118;
            if (v1102)
            {
              uint64_t v1103 = 0;
              uint64_t v1104 = 0;
              uint64_t v1105 = *(void *)(v117 + 152);
              uint64_t v1106 = v256[19];
              uint64_t v1107 = v116[19];
              uint64_t v1108 = **(void **)(v117 + 24);
              uint64_t v1109 = *(void *)v256[3];
              do
              {
                if ((int)v384 >= 1)
                {
                  uint64_t v1110 = 0;
                  int v1111 = *(char *)(v1106 + v1104);
                  unsigned int v1112 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v1107 + v1110) = *(char *)(v1105 + v1110) <= v1111;
                    --v1112;
                    ++v1110;
                  }
                  while (v1112 > 1);
                }
                v1104 += v1109;
                v1107 += (int)v384;
                ++v1103;
                v1105 += v1108;
              }
              while (v1103 != v1102);
            }
          }
          else
          {
            unint64_t v2008 = v116[6];
            if (v2008)
            {
              unint64_t v2043 = 0;
              uint64_t v1933 = v256[19];
              uint64_t v1959 = *(void *)(v117 + 152);
              uint64_t v1696 = v116[19];
              do
              {
                uint64_t v1697 = 0;
                if ((v120 & 0x80000000) == 0)
                {
                  uint64_t v1698 = *(void *)(v117 + 24);
                  int v1699 = v2043;
                  do
                  {
                    ldiv_t v1700 = ldiv(v1699, v118[v120]);
                    int v1699 = v1700.quot;
                    v1697 += *(void *)(v1698 + 8 * v120--) * v1700.rem;
                  }
                  while (v120 != -1);
                }
                uint64_t v1701 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1702) = 0;
                }
                else
                {
                  uint64_t v1702 = 0;
                  uint64_t v1703 = v256[3];
                  int v1704 = v2043;
                  do
                  {
                    ldiv_t v1705 = ldiv(v1704, v257[v1701]);
                    int v1704 = v1705.quot;
                    v1702 += *(void *)(v1703 + 8 * v1701--) * v1705.rem;
                  }
                  while (v1701 != -1);
                }
                uint64_t v120 = v2067;
                if ((int)v384 >= 1)
                {
                  uint64_t v1706 = 0;
                  int v1707 = *(char *)(v1933 + (int)v1702);
                  unsigned int v1708 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v1696 + v1706) = *(char *)(v1959 + (int)v1697 + v1706) <= v1707;
                    --v1708;
                    ++v1706;
                  }
                  while (v1708 > 1);
                }
                v1696 += (int)v384;
                v2043 += (int)v384;
              }
              while (v2043 < v2008);
            }
          }
          break;
        case 3:
          if (v123 == 2)
          {
            uint64_t v1285 = *v118;
            if (v1285)
            {
              uint64_t v1286 = 0;
              uint64_t v1287 = 0;
              uint64_t v1288 = 0;
              uint64_t v1289 = *(void *)(v117 + 152);
              uint64_t v1290 = v256[19];
              uint64_t v1291 = v116[19];
              unint64_t v1292 = v118[1];
              uint64_t v1293 = *(uint64_t **)(v117 + 24);
              uint64_t v1294 = *v1293;
              uint64_t v1295 = v1293[1];
              uint64_t v1296 = (uint64_t *)v256[3];
              uint64_t v1298 = *v1296;
              uint64_t v1297 = v1296[1];
              if (v1292 <= 1) {
                uint64_t v1299 = 1;
              }
              else {
                uint64_t v1299 = v118[1];
              }
              uint64_t v1300 = v1294 - v1295 * v1292;
              uint64_t v1301 = v1298 - v1297 * v257[1];
              do
              {
                if (v1292)
                {
                  uint64_t v1302 = 0;
                  uint64_t v1303 = v1290 + v1287;
                  uint64_t v1304 = v1289 + v1288;
                  do
                  {
                    if ((int)v384 >= 1)
                    {
                      uint64_t v1305 = 0;
                      unsigned int v1306 = v384 + 1;
                      do
                      {
                        *(unsigned char *)(v1291 + v1305) = *(char *)(v1304 + v1305) <= *(char *)(v1303 + v1305);
                        --v1306;
                        ++v1305;
                      }
                      while (v1306 > 1);
                    }
                    v1288 += v1295;
                    v1287 += v1297;
                    v1291 += (int)v384;
                    ++v1302;
                    v1303 += v1297;
                    v1304 += v1295;
                  }
                  while (v1302 != v1299);
                }
                v1288 += v1300;
                v1287 += v1301;
                ++v1286;
              }
              while (v1286 != v1285);
            }
          }
          else if (v123 == 1)
          {
            uint64_t v385 = *v118;
            if (v385)
            {
              uint64_t v386 = 0;
              uint64_t v387 = *(void *)(v117 + 152);
              uint64_t v388 = v256[19];
              uint64_t v389 = v116[19];
              uint64_t v390 = **(void **)(v117 + 24);
              uint64_t v391 = *(void *)v256[3];
              do
              {
                if ((int)v384 >= 1)
                {
                  uint64_t v392 = 0;
                  unsigned int v393 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v389 + v392) = *(char *)(v387 + v392) <= *(char *)(v388 + v392);
                    --v393;
                    ++v392;
                  }
                  while (v393 > 1);
                }
                v389 += (int)v384;
                ++v386;
                v388 += v391;
                v387 += v390;
              }
              while (v386 != v385);
            }
          }
          else
          {
            unint64_t v1997 = v116[6];
            if (v1997)
            {
              unint64_t v2032 = 0;
              uint64_t v1922 = v256[19];
              uint64_t v1948 = *(void *)(v117 + 152);
              uint64_t v1307 = v116[19];
              do
              {
                uint64_t v1308 = 0;
                if ((v120 & 0x80000000) == 0)
                {
                  uint64_t v1309 = *(void *)(v117 + 24);
                  int v1310 = v2032;
                  do
                  {
                    ldiv_t v1311 = ldiv(v1310, v118[v120]);
                    int v1310 = v1311.quot;
                    v1308 += *(void *)(v1309 + 8 * v120--) * v1311.rem;
                  }
                  while (v120 != -1);
                }
                uint64_t v1312 = v2053;
                if ((v2053 & 0x80000000) != 0)
                {
                  LODWORD(v1313) = 0;
                }
                else
                {
                  uint64_t v1313 = 0;
                  uint64_t v1314 = v256[3];
                  int v1315 = v2032;
                  do
                  {
                    ldiv_t v1316 = ldiv(v1315, v257[v1312]);
                    int v1315 = v1316.quot;
                    v1313 += *(void *)(v1314 + 8 * v1312--) * v1316.rem;
                  }
                  while (v1312 != -1);
                }
                uint64_t v120 = v2067;
                if ((int)v384 >= 1)
                {
                  uint64_t v1317 = 0;
                  unsigned int v1318 = v384 + 1;
                  do
                  {
                    *(unsigned char *)(v1307 + v1317) = *(char *)(v1948 + (int)v1308 + v1317) <= *(char *)(v1922
                                                                                                 + (int)v1313
                                                                                                 + v1317);
                    --v1318;
                    ++v1317;
                  }
                  while (v1318 > 1);
                }
                v1307 += (int)v384;
                v2032 += (int)v384;
              }
              while (v2032 < v1997);
            }
          }
          break;
        default:
LABEL_455:
          switch(v380)
          {
            case 1uLL:
              uint64_t v394 = v116[6];
              if (v394)
              {
                v395 = *(char **)(v117 + 152);
                v396 = (char *)v256[19];
                uint64_t v397 = (BOOL *)v116[19];
                uint64_t v398 = **(void **)(v117 + 24);
                uint64_t v399 = *(void *)v256[3];
                do
                {
                  *v397++ = *v395 <= *v396;
                  v396 += v399;
                  v395 += v398;
                  --v394;
                }
                while (v394);
              }
              break;
            case 2uLL:
              uint64_t v716 = *v118;
              if (v716)
              {
                uint64_t v717 = 0;
                uint64_t v718 = 0;
                uint64_t v719 = 0;
                uint64_t v720 = 0;
                uint64_t v721 = *(void *)(v117 + 152);
                uint64_t v722 = v256[19];
                uint64_t v723 = v116[19];
                unint64_t v724 = v118[1];
                uint64_t v725 = *(uint64_t **)(v117 + 24);
                uint64_t v726 = *v725;
                uint64_t v727 = v725[1];
                uint64_t v728 = (uint64_t *)v256[3];
                uint64_t v729 = *v728;
                uint64_t v730 = v728[1];
                uint64_t v731 = v729 - v730 * v257[1];
                if (v724 <= 1) {
                  uint64_t v732 = 1;
                }
                else {
                  uint64_t v732 = v118[1];
                }
                uint64_t v733 = v726 - v727 * v724;
                do
                {
                  if (v724)
                  {
                    uint64_t v734 = v718 + v732;
                    uint64_t v735 = (BOOL *)(v723 + v718);
                    uint64_t v736 = v732;
                    do
                    {
                      *v735++ = *(char *)(v721 + v720) <= *(char *)(v722 + v719);
                      v720 += v727;
                      v719 += v730;
                      --v736;
                    }
                    while (v736);
                    uint64_t v718 = v734;
                  }
                  v720 += v733;
                  v719 += v731;
                  ++v717;
                }
                while (v717 != v716);
              }
              break;
            case 3uLL:
              uint64_t v737 = *v118;
              if (v737)
              {
                uint64_t v738 = 0;
                uint64_t v739 = 0;
                uint64_t v740 = 0;
                uint64_t v741 = 0;
                uint64_t v742 = *(void *)(v117 + 152);
                uint64_t v743 = v256[19];
                uint64_t v744 = v116[19];
                unint64_t v745 = v118[1];
                uint64_t v746 = *(void **)(v117 + 24);
                uint64_t v747 = v746[1];
                uint64_t v748 = (void *)v256[3];
                uint64_t v749 = v748[1];
                uint64_t v750 = *v748 - v749 * v257[1];
                if (v745 <= 1) {
                  uint64_t v751 = 1;
                }
                else {
                  uint64_t v751 = v118[1];
                }
                unint64_t v752 = *v746 - v747 * v745;
                do
                {
                  if (v745)
                  {
                    uint64_t v753 = 0;
                    unint64_t v754 = v118[2];
                    uint64_t v755 = v746[2];
                    uint64_t v756 = v748[2];
                    if (v754 <= 1) {
                      uint64_t v757 = 1;
                    }
                    else {
                      uint64_t v757 = v118[2];
                    }
                    uint64_t v758 = v749 - v756 * v257[2];
                    do
                    {
                      uint64_t v759 = v757;
                      if (v754)
                      {
                        do
                        {
                          *(unsigned char *)(v744 + v739++) = *(char *)(v742 + v741) <= *(char *)(v743 + v740);
                          v741 += v755;
                          v740 += v756;
                          --v759;
                        }
                        while (v759);
                      }
                      v741 += v747 - v755 * v754;
                      v740 += v758;
                      ++v753;
                    }
                    while (v753 != v751);
                  }
                  v741 += v752;
                  v740 += v750;
                  ++v738;
                }
                while (v738 != v737);
              }
              break;
            case 4uLL:
              uint64_t v2074 = *v118;
              if (v2074)
              {
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = 0;
                uint64_t v763 = 0;
                uint64_t v764 = *(void *)(v117 + 152);
                uint64_t v765 = v256[19];
                uint64_t v766 = v116[19];
                unint64_t v767 = v118[1];
                v768 = *(void **)(v117 + 24);
                uint64_t v769 = (void *)v256[3];
                uint64_t v1942 = v769[1];
                uint64_t v1973 = v768[1];
                uint64_t v2022 = *v769 - v1942 * v257[1];
                int v2060 = v118[1];
                if (v767 <= 1) {
                  uint64_t v770 = 1;
                }
                else {
                  uint64_t v770 = v118[1];
                }
                unint64_t v1987 = *v768 - v768[1] * v767;
                do
                {
                  if (v2060)
                  {
                    uint64_t v771 = 0;
                    unint64_t v772 = v118[2];
                    uint64_t v773 = v768[2];
                    uint64_t v774 = v769[2];
                    if (v772 <= 1) {
                      uint64_t v775 = 1;
                    }
                    else {
                      uint64_t v775 = v118[2];
                    }
                    uint64_t v776 = v1942 - v774 * v257[2];
                    do
                    {
                      if (v772)
                      {
                        uint64_t v777 = 0;
                        unint64_t v778 = v118[3];
                        uint64_t v779 = v768[3];
                        uint64_t v780 = v769[3];
                        if (v778 <= 1) {
                          uint64_t v781 = 1;
                        }
                        else {
                          uint64_t v781 = v118[3];
                        }
                        uint64_t v782 = v774 - v780 * v257[3];
                        do
                        {
                          uint64_t v783 = v781;
                          if (v778)
                          {
                            do
                            {
                              *(unsigned char *)(v766 + v761++) = *(char *)(v764 + v763) <= *(char *)(v765 + v762);
                              v763 += v779;
                              v762 += v780;
                              --v783;
                            }
                            while (v783);
                          }
                          v763 += v773 - v779 * v778;
                          v762 += v782;
                          ++v777;
                        }
                        while (v777 != v775);
                      }
                      v763 += v1973 - v773 * v772;
                      v762 += v776;
                      ++v771;
                    }
                    while (v771 != v770);
                  }
                  v763 += v1987;
                  v762 += v2022;
                  ++v760;
                }
                while (v760 != v2074);
              }
              break;
            default:
              uint64_t v705 = v116[6];
              if (v705)
              {
                uint64_t v706 = 0;
                uint64_t v1986 = v256[19];
                uint64_t v2021 = *(void *)(v117 + 152);
                uint64_t v1972 = v116[19];
                do
                {
                  uint64_t v707 = 0;
                  if ((v120 & 0x80000000) == 0)
                  {
                    uint64_t v708 = *(void *)(v117 + 24);
                    int v709 = v706;
                    do
                    {
                      ldiv_t v710 = ldiv(v709, v118[v120]);
                      int v709 = v710.quot;
                      v707 += *(void *)(v708 + 8 * v120--) * v710.rem;
                    }
                    while (v120 != -1);
                  }
                  uint64_t v711 = v2053;
                  if ((v2053 & 0x80000000) != 0)
                  {
                    LODWORD(v712) = 0;
                  }
                  else
                  {
                    uint64_t v712 = 0;
                    uint64_t v713 = v256[3];
                    int v714 = v706;
                    do
                    {
                      ldiv_t v715 = ldiv(v714, v257[v711]);
                      int v714 = v715.quot;
                      v712 += *(void *)(v713 + 8 * v711--) * v715.rem;
                    }
                    while (v711 != -1);
                  }
                  *(unsigned char *)(v1972 + v706++) = *(char *)(v2021 + (int)v707) <= *(char *)(v1986 + (int)v712);
                  uint64_t v120 = v2067;
                }
                while (v706 != v705);
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v17)
      {
        case 0:
          int v15 = **(_DWORD **)(*a1 + 152);
          int v16 = **(_DWORD **)(*a2 + 152);
LABEL_18:
          BOOL v18 = v15 <= v16;
          goto LABEL_21;
        case 1:
          int v154 = *(_DWORD *)(*a2 + 160);
          if (v154 >= 1)
          {
            int v155 = **(_DWORD **)(*a1 + 152);
            v156 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v157 = *(int **)(*a2 + 152);
            unsigned int v158 = v154 + 1;
            do
            {
              int v159 = *v157++;
              *v156++ = v155 <= v159;
              --v158;
            }
            while (v158 > 1);
          }
          return;
        case 2:
          int v160 = *(_DWORD *)(*a1 + 160);
          if (v160 >= 1)
          {
            int v161 = **(_DWORD **)(*a2 + 152);
            v162 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v163 = *(int **)(*a1 + 152);
            unsigned int v164 = v160 + 1;
            do
            {
              int v165 = *v163++;
              *v162++ = v165 <= v161;
              --v164;
            }
            while (v164 > 1);
          }
          return;
        case 3:
          int v166 = *(_DWORD *)(*(void *)a3 + 48);
          if (v166 >= 1)
          {
            v167 = *(BOOL **)(*(void *)a3 + 152);
            v168 = *(int **)(*a2 + 152);
            unsigned int v169 = *(int **)(*a1 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              int v172 = *v169++;
              int v171 = v172;
              int v173 = *v168++;
              *v167++ = v171 <= v173;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        default:
          uint64_t v145 = *(void **)a3;
          uint64_t v146 = *a1;
          uint64_t v147 = *(int **)*a1;
          uint64_t v148 = (*(void *)(*a1 + 8) - (void)v147) >> 2;
          uint64_t v149 = (v148 - 1);
          if ((int)v149 >= -1) {
            int v150 = -1;
          }
          else {
            int v150 = v148 - 1;
          }
          int v151 = v150 + 1;
          int v152 = v148 + 1;
          break;
      }
      while (1)
      {
        unsigned int v153 = v152 - 2;
        if (v152 - 2 < 0) {
          break;
        }
        --v152;
        if (*(void *)(*(void *)(v146 + 24) + 8 * v153) != *(void *)(v145[3] + 8 * v153)) {
          goto LABEL_215;
        }
      }
      int v152 = v151;
LABEL_215:
      v264 = (void *)*a2;
      uint64_t v265 = *(int **)*a2;
      uint64_t v266 = (v264[1] - (void)v265) >> 2;
      uint64_t v267 = (v266 - 1);
      if ((int)v267 >= -1) {
        int v268 = -1;
      }
      else {
        int v268 = v266 - 1;
      }
      int v269 = v268 + 1;
      int v270 = v266 + 1;
      while (1)
      {
        unsigned int v271 = v270 - 2;
        if (v270 - 2 < 0) {
          break;
        }
        --v270;
        if (*(void *)(v264[3] + 8 * v271) != *(void *)(v145[3] + 8 * v271)) {
          goto LABEL_259;
        }
      }
      int v270 = v269;
LABEL_259:
      int v296 = v148 + 1;
      while (1)
      {
        unsigned int v297 = v296 - 2;
        if (v296 - 2 < 0) {
          break;
        }
        --v296;
        if (*(void *)(*(void *)(v146 + 24) + 8 * v297)) {
          goto LABEL_294;
        }
      }
      int v296 = v151;
LABEL_294:
      int v310 = v266 + 1;
      while (1)
      {
        unsigned int v311 = v310 - 2;
        if (v310 - 2 < 0) {
          break;
        }
        --v310;
        if (*(void *)(v264[3] + 8 * v311)) {
          goto LABEL_461;
        }
      }
      int v310 = v269;
LABEL_461:
      unint64_t v400 = (uint64_t)(v145[1] - *v145) >> 2;
      if (v152 <= v270) {
        int v401 = v270;
      }
      else {
        int v401 = v152;
      }
      if (v152 <= v310) {
        int v152 = v310;
      }
      if (v296 > v270) {
        int v270 = v296;
      }
      if (v400 > v270)
      {
        int v402 = 1;
      }
      else
      {
        int v270 = (uint64_t)(v145[1] - *v145) >> 2;
        int v402 = 4;
      }
      if (v400 > v152)
      {
        int v403 = 2;
      }
      else
      {
        int v152 = v270;
        int v403 = v402;
      }
      if (v400 > v401)
      {
        int v152 = v401;
        int v403 = 3;
      }
      uint64_t v2054 = v267;
      uint64_t v2068 = v149;
      if (!v152) {
        goto LABEL_490;
      }
      unint64_t v404 = *(void *)(v145[3] + 8 * (v152 - 1));
      if (v404 < 0x10) {
        goto LABEL_490;
      }
      switch(v403)
      {
        case 1:
          if (v152 == 2)
          {
            uint64_t v1709 = *v147;
            if (v1709)
            {
              uint64_t v1710 = 0;
              uint64_t v1711 = 0;
              uint64_t v1712 = 0;
              uint64_t v1713 = *(void *)(v146 + 152);
              uint64_t v1714 = v264[19];
              uint64_t v1715 = v145[19];
              unint64_t v1716 = v147[1];
              uint64_t v1717 = *(uint64_t **)(v146 + 24);
              uint64_t v1718 = *v1717;
              uint64_t v1719 = v1717[1];
              uint64_t v1720 = (uint64_t *)v264[3];
              uint64_t v1722 = *v1720;
              uint64_t v1721 = v1720[1];
              if (v1716 <= 1) {
                uint64_t v1723 = 1;
              }
              else {
                uint64_t v1723 = v147[1];
              }
              uint64_t v1724 = v1718 - v1719 * v1716;
              uint64_t v1725 = v1722 - v1721 * v265[1];
              do
              {
                if (v1716)
                {
                  uint64_t v1726 = 0;
                  uint64_t v1727 = v1714 + 4 * v1711;
                  do
                  {
                    if ((int)v404 >= 1)
                    {
                      uint64_t v1728 = 0;
                      int v1729 = *(_DWORD *)(v1713 + 4 * v1712);
                      unsigned int v1730 = v404 + 1;
                      do
                      {
                        *(unsigned char *)(v1715 + v1728) = v1729 <= *(_DWORD *)(v1727 + 4 * v1728);
                        --v1730;
                        ++v1728;
                      }
                      while (v1730 > 1);
                    }
                    v1712 += v1719;
                    v1711 += v1721;
                    v1715 += (int)v404;
                    ++v1726;
                    v1727 += 4 * v1721;
                  }
                  while (v1726 != v1723);
                }
                v1712 += v1724;
                v1711 += v1725;
                ++v1710;
              }
              while (v1710 != v1709);
            }
          }
          else if (v152 == 1)
          {
            uint64_t v1113 = *v147;
            if (v1113)
            {
              uint64_t v1114 = 0;
              uint64_t v1115 = 0;
              uint64_t v1116 = *(void *)(v146 + 152);
              uint64_t v1117 = v264[19];
              uint64_t v1118 = v145[19];
              uint64_t v1119 = **(void **)(v146 + 24);
              uint64_t v1120 = 4 * *(void *)v264[3];
              do
              {
                if ((int)v404 >= 1)
                {
                  uint64_t v1121 = 0;
                  int v1122 = *(_DWORD *)(v1116 + 4 * v1115);
                  unsigned int v1123 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v1118 + v1121) = v1122 <= *(_DWORD *)(v1117 + 4 * v1121);
                    --v1123;
                    ++v1121;
                  }
                  while (v1123 > 1);
                }
                v1115 += v1119;
                v1118 += (int)v404;
                ++v1114;
                v1117 += v1120;
              }
              while (v1114 != v1113);
            }
          }
          else
          {
            unint64_t v2009 = v145[6];
            if (v2009)
            {
              unint64_t v2044 = 0;
              uint64_t v1934 = v264[19];
              uint64_t v1960 = *(void *)(v146 + 152);
              uint64_t v1731 = v145[19];
              do
              {
                uint64_t v1732 = 0;
                if ((v149 & 0x80000000) == 0)
                {
                  uint64_t v1733 = *(void *)(v146 + 24);
                  int v1734 = v2044;
                  do
                  {
                    ldiv_t v1735 = ldiv(v1734, v147[v149]);
                    int v1734 = v1735.quot;
                    v1732 += *(void *)(v1733 + 8 * v149--) * v1735.rem;
                  }
                  while (v149 != -1);
                }
                uint64_t v1736 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1737) = 0;
                }
                else
                {
                  uint64_t v1737 = 0;
                  uint64_t v1738 = v264[3];
                  int v1739 = v2044;
                  do
                  {
                    ldiv_t v1740 = ldiv(v1739, v265[v1736]);
                    int v1739 = v1740.quot;
                    v1737 += *(void *)(v1738 + 8 * v1736--) * v1740.rem;
                  }
                  while (v1736 != -1);
                }
                uint64_t v149 = v2068;
                if ((int)v404 >= 1)
                {
                  uint64_t v1741 = 0;
                  int v1742 = *(_DWORD *)(v1960 + 4 * (int)v1732);
                  unsigned int v1743 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v1731 + v1741) = v1742 <= *(_DWORD *)(v1934 + 4 * (int)v1737 + 4 * v1741);
                    --v1743;
                    ++v1741;
                  }
                  while (v1743 > 1);
                }
                v1731 += (int)v404;
                v2044 += (int)v404;
              }
              while (v2044 < v2009);
            }
          }
          break;
        case 2:
          if (v152 == 2)
          {
            uint64_t v1744 = *v147;
            if (v1744)
            {
              uint64_t v1745 = 0;
              uint64_t v1746 = 0;
              uint64_t v1747 = 0;
              uint64_t v1748 = *(void *)(v146 + 152);
              uint64_t v1749 = v264[19];
              uint64_t v1750 = v145[19];
              unint64_t v1751 = v147[1];
              uint64_t v1752 = *(uint64_t **)(v146 + 24);
              uint64_t v1753 = *v1752;
              uint64_t v1754 = v1752[1];
              uint64_t v1755 = (uint64_t *)v264[3];
              uint64_t v1757 = *v1755;
              uint64_t v1756 = v1755[1];
              if (v1751 <= 1) {
                uint64_t v1758 = 1;
              }
              else {
                uint64_t v1758 = v147[1];
              }
              uint64_t v1759 = v1753 - v1754 * v1751;
              uint64_t v1760 = v1757 - v1756 * v265[1];
              do
              {
                if (v1751)
                {
                  uint64_t v1761 = 0;
                  uint64_t v1762 = v1748 + 4 * v1747;
                  do
                  {
                    if ((int)v404 >= 1)
                    {
                      uint64_t v1763 = 0;
                      int v1764 = *(_DWORD *)(v1749 + 4 * v1746);
                      unsigned int v1765 = v404 + 1;
                      do
                      {
                        *(unsigned char *)(v1750 + v1763) = *(_DWORD *)(v1762 + 4 * v1763) <= v1764;
                        --v1765;
                        ++v1763;
                      }
                      while (v1765 > 1);
                    }
                    v1747 += v1754;
                    v1746 += v1756;
                    v1750 += (int)v404;
                    ++v1761;
                    v1762 += 4 * v1754;
                  }
                  while (v1761 != v1758);
                }
                v1747 += v1759;
                v1746 += v1760;
                ++v1745;
              }
              while (v1745 != v1744);
            }
          }
          else if (v152 == 1)
          {
            uint64_t v1124 = *v147;
            if (v1124)
            {
              uint64_t v1125 = 0;
              uint64_t v1126 = 0;
              uint64_t v1127 = *(void *)(v146 + 152);
              uint64_t v1128 = v264[19];
              uint64_t v1129 = v145[19];
              uint64_t v1130 = *(void *)v264[3];
              uint64_t v1131 = 4 * **(void **)(v146 + 24);
              do
              {
                if ((int)v404 >= 1)
                {
                  uint64_t v1132 = 0;
                  int v1133 = *(_DWORD *)(v1128 + 4 * v1126);
                  unsigned int v1134 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v1129 + v1132) = *(_DWORD *)(v1127 + 4 * v1132) <= v1133;
                    --v1134;
                    ++v1132;
                  }
                  while (v1134 > 1);
                }
                v1126 += v1130;
                v1129 += (int)v404;
                ++v1125;
                v1127 += v1131;
              }
              while (v1125 != v1124);
            }
          }
          else
          {
            unint64_t v2010 = v145[6];
            if (v2010)
            {
              unint64_t v2045 = 0;
              uint64_t v1935 = v264[19];
              uint64_t v1961 = *(void *)(v146 + 152);
              uint64_t v1766 = v145[19];
              do
              {
                uint64_t v1767 = 0;
                if ((v149 & 0x80000000) == 0)
                {
                  uint64_t v1768 = *(void *)(v146 + 24);
                  int v1769 = v2045;
                  do
                  {
                    ldiv_t v1770 = ldiv(v1769, v147[v149]);
                    int v1769 = v1770.quot;
                    v1767 += *(void *)(v1768 + 8 * v149--) * v1770.rem;
                  }
                  while (v149 != -1);
                }
                uint64_t v1771 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1772) = 0;
                }
                else
                {
                  uint64_t v1772 = 0;
                  uint64_t v1773 = v264[3];
                  int v1774 = v2045;
                  do
                  {
                    ldiv_t v1775 = ldiv(v1774, v265[v1771]);
                    int v1774 = v1775.quot;
                    v1772 += *(void *)(v1773 + 8 * v1771--) * v1775.rem;
                  }
                  while (v1771 != -1);
                }
                uint64_t v149 = v2068;
                if ((int)v404 >= 1)
                {
                  uint64_t v1776 = 0;
                  int v1777 = *(_DWORD *)(v1935 + 4 * (int)v1772);
                  unsigned int v1778 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v1766 + v1776) = *(_DWORD *)(v1961 + 4 * (int)v1767 + 4 * v1776) <= v1777;
                    --v1778;
                    ++v1776;
                  }
                  while (v1778 > 1);
                }
                v1766 += (int)v404;
                v2045 += (int)v404;
              }
              while (v2045 < v2010);
            }
          }
          break;
        case 3:
          if (v152 == 2)
          {
            uint64_t v1319 = *v147;
            if (v1319)
            {
              uint64_t v1320 = 0;
              uint64_t v1321 = 0;
              uint64_t v1322 = 0;
              uint64_t v1323 = *(void *)(v146 + 152);
              uint64_t v1324 = v264[19];
              uint64_t v1325 = v145[19];
              unint64_t v1326 = v147[1];
              uint64_t v1327 = *(uint64_t **)(v146 + 24);
              uint64_t v1328 = *v1327;
              uint64_t v1329 = v1327[1];
              uint64_t v1330 = (uint64_t *)v264[3];
              uint64_t v1332 = *v1330;
              uint64_t v1331 = v1330[1];
              if (v1326 <= 1) {
                uint64_t v1333 = 1;
              }
              else {
                uint64_t v1333 = v147[1];
              }
              uint64_t v1334 = v1328 - v1329 * v1326;
              uint64_t v1335 = v1332 - v1331 * v265[1];
              do
              {
                if (v1326)
                {
                  uint64_t v1336 = 0;
                  uint64_t v1337 = v1324 + 4 * v1321;
                  uint64_t v1338 = v1323 + 4 * v1322;
                  do
                  {
                    if ((int)v404 >= 1)
                    {
                      uint64_t v1339 = 0;
                      unsigned int v1340 = v404 + 1;
                      do
                      {
                        *(unsigned char *)(v1325 + v1339) = *(_DWORD *)(v1338 + 4 * v1339) <= *(_DWORD *)(v1337 + 4 * v1339);
                        --v1340;
                        ++v1339;
                      }
                      while (v1340 > 1);
                    }
                    v1322 += v1329;
                    v1321 += v1331;
                    v1325 += (int)v404;
                    ++v1336;
                    v1337 += 4 * v1331;
                    v1338 += 4 * v1329;
                  }
                  while (v1336 != v1333);
                }
                v1322 += v1334;
                v1321 += v1335;
                ++v1320;
              }
              while (v1320 != v1319);
            }
          }
          else if (v152 == 1)
          {
            uint64_t v405 = *v147;
            if (v405)
            {
              uint64_t v406 = 0;
              uint64_t v407 = *(void *)(v146 + 152);
              uint64_t v408 = v264[19];
              uint64_t v409 = v145[19];
              uint64_t v410 = 4 * *(void *)v264[3];
              uint64_t v411 = 4 * **(void **)(v146 + 24);
              do
              {
                if ((int)v404 >= 1)
                {
                  uint64_t v412 = 0;
                  unsigned int v413 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v409 + v412) = *(_DWORD *)(v407 + 4 * v412) <= *(_DWORD *)(v408 + 4 * v412);
                    --v413;
                    ++v412;
                  }
                  while (v413 > 1);
                }
                v409 += (int)v404;
                ++v406;
                v408 += v410;
                v407 += v411;
              }
              while (v406 != v405);
            }
          }
          else
          {
            unint64_t v1998 = v145[6];
            if (v1998)
            {
              unint64_t v2033 = 0;
              uint64_t v1923 = v264[19];
              uint64_t v1949 = *(void *)(v146 + 152);
              uint64_t v1341 = v145[19];
              do
              {
                uint64_t v1342 = 0;
                if ((v149 & 0x80000000) == 0)
                {
                  uint64_t v1343 = *(void *)(v146 + 24);
                  int v1344 = v2033;
                  do
                  {
                    ldiv_t v1345 = ldiv(v1344, v147[v149]);
                    int v1344 = v1345.quot;
                    v1342 += *(void *)(v1343 + 8 * v149--) * v1345.rem;
                  }
                  while (v149 != -1);
                }
                uint64_t v1346 = v2054;
                if ((v2054 & 0x80000000) != 0)
                {
                  LODWORD(v1347) = 0;
                }
                else
                {
                  uint64_t v1347 = 0;
                  uint64_t v1348 = v264[3];
                  int v1349 = v2033;
                  do
                  {
                    ldiv_t v1350 = ldiv(v1349, v265[v1346]);
                    int v1349 = v1350.quot;
                    v1347 += *(void *)(v1348 + 8 * v1346--) * v1350.rem;
                  }
                  while (v1346 != -1);
                }
                uint64_t v149 = v2068;
                if ((int)v404 >= 1)
                {
                  uint64_t v1351 = 0;
                  unsigned int v1352 = v404 + 1;
                  do
                  {
                    *(unsigned char *)(v1341 + v1351) = *(_DWORD *)(v1949 + 4 * (int)v1342 + 4 * v1351) <= *(_DWORD *)(v1923 + 4 * (int)v1347 + 4 * v1351);
                    --v1352;
                    ++v1351;
                  }
                  while (v1352 > 1);
                }
                v1341 += (int)v404;
                v2033 += (int)v404;
              }
              while (v2033 < v1998);
            }
          }
          break;
        default:
LABEL_490:
          switch(v400)
          {
            case 1uLL:
              uint64_t v414 = v145[6];
              if (v414)
              {
                v415 = *(_DWORD **)(v146 + 152);
                v416 = (_DWORD *)v264[19];
                uint64_t v417 = (BOOL *)v145[19];
                uint64_t v418 = 4 * *(void *)v264[3];
                uint64_t v419 = 4 * **(void **)(v146 + 24);
                do
                {
                  *v417++ = *v415 <= *v416;
                  v416 = (_DWORD *)((char *)v416 + v418);
                  v415 = (_DWORD *)((char *)v415 + v419);
                  --v414;
                }
                while (v414);
              }
              break;
            case 2uLL:
              uint64_t v795 = *v147;
              if (v795)
              {
                uint64_t v796 = 0;
                uint64_t v797 = 0;
                uint64_t v798 = 0;
                uint64_t v799 = 0;
                uint64_t v800 = *(void *)(v146 + 152);
                uint64_t v801 = v264[19];
                uint64_t v802 = v145[19];
                unint64_t v803 = v147[1];
                uint64_t v804 = *(uint64_t **)(v146 + 24);
                uint64_t v805 = *v804;
                uint64_t v806 = v804[1];
                uint64_t v807 = (uint64_t *)v264[3];
                uint64_t v808 = *v807;
                uint64_t v809 = v807[1];
                uint64_t v810 = v808 - v809 * v265[1];
                if (v803 <= 1) {
                  uint64_t v811 = 1;
                }
                else {
                  uint64_t v811 = v147[1];
                }
                uint64_t v812 = v805 - v806 * v803;
                do
                {
                  if (v803)
                  {
                    uint64_t v813 = v797 + v811;
                    uint64_t v814 = (BOOL *)(v802 + v797);
                    uint64_t v815 = v811;
                    do
                    {
                      *v814++ = *(_DWORD *)(v800 + 4 * v799) <= *(_DWORD *)(v801 + 4 * v798);
                      v799 += v806;
                      v798 += v809;
                      --v815;
                    }
                    while (v815);
                    uint64_t v797 = v813;
                  }
                  v799 += v812;
                  v798 += v810;
                  ++v796;
                }
                while (v796 != v795);
              }
              break;
            case 3uLL:
              uint64_t v816 = *v147;
              if (v816)
              {
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = 0;
                uint64_t v820 = 0;
                uint64_t v821 = *(void *)(v146 + 152);
                uint64_t v822 = v264[19];
                uint64_t v823 = v145[19];
                unint64_t v824 = v147[1];
                uint64_t v825 = *(void **)(v146 + 24);
                uint64_t v826 = v825[1];
                uint64_t v827 = (void *)v264[3];
                uint64_t v828 = v827[1];
                uint64_t v829 = *v827 - v828 * v265[1];
                if (v824 <= 1) {
                  uint64_t v830 = 1;
                }
                else {
                  uint64_t v830 = v147[1];
                }
                unint64_t v831 = *v825 - v826 * v824;
                do
                {
                  if (v824)
                  {
                    uint64_t v832 = 0;
                    unint64_t v833 = v147[2];
                    uint64_t v834 = v825[2];
                    uint64_t v835 = v827[2];
                    if (v833 <= 1) {
                      uint64_t v836 = 1;
                    }
                    else {
                      uint64_t v836 = v147[2];
                    }
                    uint64_t v837 = v828 - v835 * v265[2];
                    do
                    {
                      uint64_t v838 = v836;
                      if (v833)
                      {
                        do
                        {
                          *(unsigned char *)(v823 + v818++) = *(_DWORD *)(v821 + 4 * v820) <= *(_DWORD *)(v822 + 4 * v819);
                          v820 += v834;
                          v819 += v835;
                          --v838;
                        }
                        while (v838);
                      }
                      v820 += v826 - v834 * v833;
                      v819 += v837;
                      ++v832;
                    }
                    while (v832 != v830);
                  }
                  v820 += v831;
                  v819 += v829;
                  ++v817;
                }
                while (v817 != v816);
              }
              break;
            case 4uLL:
              uint64_t v2075 = *v147;
              if (v2075)
              {
                uint64_t v839 = 0;
                uint64_t v840 = 0;
                uint64_t v841 = 0;
                uint64_t v842 = 0;
                uint64_t v843 = *(void *)(v146 + 152);
                uint64_t v844 = v264[19];
                uint64_t v845 = v145[19];
                unint64_t v846 = v147[1];
                v847 = *(void **)(v146 + 24);
                uint64_t v848 = (void *)v264[3];
                uint64_t v1943 = v848[1];
                uint64_t v1975 = v847[1];
                uint64_t v2024 = *v848 - v1943 * v265[1];
                int v2061 = v147[1];
                if (v846 <= 1) {
                  uint64_t v849 = 1;
                }
                else {
                  uint64_t v849 = v147[1];
                }
                unint64_t v1989 = *v847 - v847[1] * v846;
                do
                {
                  if (v2061)
                  {
                    uint64_t v850 = 0;
                    unint64_t v851 = v147[2];
                    uint64_t v852 = v847[2];
                    uint64_t v853 = v848[2];
                    if (v851 <= 1) {
                      uint64_t v854 = 1;
                    }
                    else {
                      uint64_t v854 = v147[2];
                    }
                    uint64_t v855 = v1943 - v853 * v265[2];
                    do
                    {
                      if (v851)
                      {
                        uint64_t v856 = 0;
                        unint64_t v857 = v147[3];
                        uint64_t v858 = v847[3];
                        uint64_t v859 = v848[3];
                        if (v857 <= 1) {
                          uint64_t v860 = 1;
                        }
                        else {
                          uint64_t v860 = v147[3];
                        }
                        uint64_t v861 = v853 - v859 * v265[3];
                        do
                        {
                          uint64_t v862 = v860;
                          if (v857)
                          {
                            do
                            {
                              *(unsigned char *)(v845 + v840++) = *(_DWORD *)(v843 + 4 * v842) <= *(_DWORD *)(v844 + 4 * v841);
                              v842 += v858;
                              v841 += v859;
                              --v862;
                            }
                            while (v862);
                          }
                          v842 += v852 - v858 * v857;
                          v841 += v861;
                          ++v856;
                        }
                        while (v856 != v854);
                      }
                      v842 += v1975 - v852 * v851;
                      v841 += v855;
                      ++v850;
                    }
                    while (v850 != v849);
                  }
                  v842 += v1989;
                  v841 += v2024;
                  ++v839;
                }
                while (v839 != v2075);
              }
              break;
            default:
              uint64_t v784 = v145[6];
              if (v784)
              {
                uint64_t v785 = 0;
                uint64_t v1988 = v264[19];
                uint64_t v2023 = *(void *)(v146 + 152);
                uint64_t v1974 = v145[19];
                do
                {
                  uint64_t v786 = 0;
                  if ((v149 & 0x80000000) == 0)
                  {
                    uint64_t v787 = *(void *)(v146 + 24);
                    int v788 = v785;
                    do
                    {
                      ldiv_t v789 = ldiv(v788, v147[v149]);
                      int v788 = v789.quot;
                      v786 += *(void *)(v787 + 8 * v149--) * v789.rem;
                    }
                    while (v149 != -1);
                  }
                  uint64_t v790 = v2054;
                  if ((v2054 & 0x80000000) != 0)
                  {
                    LODWORD(v791) = 0;
                  }
                  else
                  {
                    uint64_t v791 = 0;
                    uint64_t v792 = v264[3];
                    int v793 = v785;
                    do
                    {
                      ldiv_t v794 = ldiv(v793, v265[v790]);
                      int v793 = v794.quot;
                      v791 += *(void *)(v792 + 8 * v790--) * v794.rem;
                    }
                    while (v790 != -1);
                  }
                  *(unsigned char *)(v1974 + v785++) = *(_DWORD *)(v2023 + 4 * (int)v786) <= *(_DWORD *)(v1988
                                                                                                 + 4 * (int)v791);
                  uint64_t v149 = v2068;
                }
                while (v785 != v784);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v19)
      {
        case 0:
          BOOL v18 = **(void **)(*a1 + 152) <= **(void **)(*a2 + 152);
LABEL_21:
          char v8 = v18;
          goto LABEL_29;
        case 1:
          int v183 = *(_DWORD *)(*a2 + 160);
          if (v183 >= 1)
          {
            uint64_t v184 = **(void **)(*a1 + 152);
            v185 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v186 = *(uint64_t **)(*a2 + 152);
            unsigned int v187 = v183 + 1;
            do
            {
              uint64_t v188 = *v186++;
              *v185++ = v184 <= v188;
              --v187;
            }
            while (v187 > 1);
          }
          return;
        case 2:
          int v189 = *(_DWORD *)(*a1 + 160);
          if (v189 >= 1)
          {
            uint64_t v190 = **(void **)(*a2 + 152);
            v191 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v192 = *(uint64_t **)(*a1 + 152);
            unsigned int v193 = v189 + 1;
            do
            {
              uint64_t v194 = *v192++;
              *v191++ = v194 <= v190;
              --v193;
            }
            while (v193 > 1);
          }
          return;
        case 3:
          int v195 = *(_DWORD *)(*(void *)a3 + 48);
          if (v195 >= 1)
          {
            v196 = *(BOOL **)(*(void *)a3 + 152);
            v197 = *(uint64_t **)(*a2 + 152);
            unsigned int v198 = *(uint64_t **)(*a1 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              uint64_t v201 = *v198++;
              uint64_t v200 = v201;
              uint64_t v202 = *v197++;
              *v196++ = v200 <= v202;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        default:
          uint64_t v174 = *(void **)a3;
          uint64_t v175 = *a1;
          uint64_t v176 = *(int **)*a1;
          uint64_t v177 = (*(void *)(*a1 + 8) - (void)v176) >> 2;
          uint64_t v178 = (v177 - 1);
          if ((int)v178 >= -1) {
            int v179 = -1;
          }
          else {
            int v179 = v177 - 1;
          }
          int v180 = v179 + 1;
          int v181 = v177 + 1;
          break;
      }
      while (1)
      {
        unsigned int v182 = v181 - 2;
        if (v181 - 2 < 0) {
          break;
        }
        --v181;
        if (*(void *)(*(void *)(v175 + 24) + 8 * v182) != *(void *)(v174[3] + 8 * v182)) {
          goto LABEL_223;
        }
      }
      int v181 = v180;
LABEL_223:
      v272 = (void *)*a2;
      uint64_t v273 = *(int **)*a2;
      uint64_t v274 = (v272[1] - (void)v273) >> 2;
      uint64_t v275 = (v274 - 1);
      if ((int)v275 >= -1) {
        int v276 = -1;
      }
      else {
        int v276 = v274 - 1;
      }
      int v277 = v276 + 1;
      int v278 = v274 + 1;
      while (1)
      {
        unsigned int v279 = v278 - 2;
        if (v278 - 2 < 0) {
          break;
        }
        --v278;
        if (*(void *)(v272[3] + 8 * v279) != *(void *)(v174[3] + 8 * v279)) {
          goto LABEL_264;
        }
      }
      int v278 = v277;
LABEL_264:
      int v298 = v177 + 1;
      while (1)
      {
        unsigned int v299 = v298 - 2;
        if (v298 - 2 < 0) {
          break;
        }
        --v298;
        if (*(void *)(*(void *)(v175 + 24) + 8 * v299)) {
          goto LABEL_299;
        }
      }
      int v298 = v180;
LABEL_299:
      int v312 = v274 + 1;
      while (1)
      {
        unsigned int v313 = v312 - 2;
        if (v312 - 2 < 0) {
          break;
        }
        --v312;
        if (*(void *)(v272[3] + 8 * v313)) {
          goto LABEL_496;
        }
      }
      int v312 = v277;
LABEL_496:
      unint64_t v420 = (uint64_t)(v174[1] - *v174) >> 2;
      if (v181 <= v278) {
        int v421 = v278;
      }
      else {
        int v421 = v181;
      }
      if (v181 <= v312) {
        int v181 = v312;
      }
      if (v298 > v278) {
        int v278 = v298;
      }
      if (v420 > v278)
      {
        int v422 = 1;
      }
      else
      {
        int v278 = (uint64_t)(v174[1] - *v174) >> 2;
        int v422 = 4;
      }
      if (v420 > v181)
      {
        int v423 = 2;
      }
      else
      {
        int v181 = v278;
        int v423 = v422;
      }
      if (v420 > v421)
      {
        int v181 = v421;
        int v423 = 3;
      }
      uint64_t v2055 = v275;
      uint64_t v2069 = v178;
      if (!v181) {
        goto LABEL_525;
      }
      unint64_t v424 = *(void *)(v174[3] + 8 * (v181 - 1));
      if (v424 < 0x10) {
        goto LABEL_525;
      }
      switch(v423)
      {
        case 1:
          if (v181 == 2)
          {
            uint64_t v1779 = *v176;
            if (v1779)
            {
              uint64_t v1780 = 0;
              uint64_t v1781 = 0;
              uint64_t v1782 = 0;
              uint64_t v1783 = *(void *)(v175 + 152);
              uint64_t v1784 = v272[19];
              uint64_t v1785 = v174[19];
              unint64_t v1786 = v176[1];
              uint64_t v1787 = *(uint64_t **)(v175 + 24);
              uint64_t v1788 = *v1787;
              uint64_t v1789 = v1787[1];
              uint64_t v1790 = (uint64_t *)v272[3];
              uint64_t v1792 = *v1790;
              uint64_t v1791 = v1790[1];
              if (v1786 <= 1) {
                uint64_t v1793 = 1;
              }
              else {
                uint64_t v1793 = v176[1];
              }
              uint64_t v1794 = v1788 - v1789 * v1786;
              uint64_t v1795 = v1792 - v1791 * v273[1];
              do
              {
                if (v1786)
                {
                  uint64_t v1796 = 0;
                  uint64_t v1797 = v1784 + 8 * v1781;
                  do
                  {
                    if ((int)v424 >= 1)
                    {
                      uint64_t v1798 = 0;
                      uint64_t v1799 = *(void *)(v1783 + 8 * v1782);
                      unsigned int v1800 = v424 + 1;
                      do
                      {
                        *(unsigned char *)(v1785 + v1798) = v1799 <= *(void *)(v1797 + 8 * v1798);
                        --v1800;
                        ++v1798;
                      }
                      while (v1800 > 1);
                    }
                    v1782 += v1789;
                    v1781 += v1791;
                    v1785 += (int)v424;
                    ++v1796;
                    v1797 += 8 * v1791;
                  }
                  while (v1796 != v1793);
                }
                v1782 += v1794;
                v1781 += v1795;
                ++v1780;
              }
              while (v1780 != v1779);
            }
          }
          else if (v181 == 1)
          {
            uint64_t v1135 = *v176;
            if (v1135)
            {
              uint64_t v1136 = 0;
              uint64_t v1137 = 0;
              uint64_t v1138 = *(void *)(v175 + 152);
              uint64_t v1139 = v272[19];
              uint64_t v1140 = v174[19];
              uint64_t v1141 = **(void **)(v175 + 24);
              uint64_t v1142 = 8 * *(void *)v272[3];
              do
              {
                if ((int)v424 >= 1)
                {
                  uint64_t v1143 = 0;
                  uint64_t v1144 = *(void *)(v1138 + 8 * v1137);
                  unsigned int v1145 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v1140 + v1143) = v1144 <= *(void *)(v1139 + 8 * v1143);
                    --v1145;
                    ++v1143;
                  }
                  while (v1145 > 1);
                }
                v1137 += v1141;
                v1140 += (int)v424;
                ++v1136;
                v1139 += v1142;
              }
              while (v1136 != v1135);
            }
          }
          else
          {
            unint64_t v2011 = v174[6];
            if (v2011)
            {
              unint64_t v2046 = 0;
              uint64_t v1936 = v272[19];
              uint64_t v1962 = *(void *)(v175 + 152);
              uint64_t v1801 = v174[19];
              do
              {
                uint64_t v1802 = 0;
                if ((v178 & 0x80000000) == 0)
                {
                  uint64_t v1803 = *(void *)(v175 + 24);
                  int v1804 = v2046;
                  do
                  {
                    ldiv_t v1805 = ldiv(v1804, v176[v178]);
                    int v1804 = v1805.quot;
                    v1802 += *(void *)(v1803 + 8 * v178--) * v1805.rem;
                  }
                  while (v178 != -1);
                }
                uint64_t v1806 = v2055;
                if ((v2055 & 0x80000000) != 0)
                {
                  LODWORD(v1807) = 0;
                }
                else
                {
                  uint64_t v1807 = 0;
                  uint64_t v1808 = v272[3];
                  int v1809 = v2046;
                  do
                  {
                    ldiv_t v1810 = ldiv(v1809, v273[v1806]);
                    int v1809 = v1810.quot;
                    v1807 += *(void *)(v1808 + 8 * v1806--) * v1810.rem;
                  }
                  while (v1806 != -1);
                }
                uint64_t v178 = v2069;
                if ((int)v424 >= 1)
                {
                  uint64_t v1811 = 0;
                  uint64_t v1812 = *(void *)(v1962 + 8 * (int)v1802);
                  unsigned int v1813 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v1801 + v1811) = v1812 <= *(void *)(v1936 + 8 * (int)v1807 + 8 * v1811);
                    --v1813;
                    ++v1811;
                  }
                  while (v1813 > 1);
                }
                v1801 += (int)v424;
                v2046 += (int)v424;
              }
              while (v2046 < v2011);
            }
          }
          break;
        case 2:
          if (v181 == 2)
          {
            uint64_t v1814 = *v176;
            if (v1814)
            {
              uint64_t v1815 = 0;
              uint64_t v1816 = 0;
              uint64_t v1817 = 0;
              uint64_t v1818 = *(void *)(v175 + 152);
              uint64_t v1819 = v272[19];
              uint64_t v1820 = v174[19];
              unint64_t v1821 = v176[1];
              uint64_t v1822 = *(uint64_t **)(v175 + 24);
              uint64_t v1823 = *v1822;
              uint64_t v1824 = v1822[1];
              uint64_t v1825 = (uint64_t *)v272[3];
              uint64_t v1827 = *v1825;
              uint64_t v1826 = v1825[1];
              if (v1821 <= 1) {
                uint64_t v1828 = 1;
              }
              else {
                uint64_t v1828 = v176[1];
              }
              uint64_t v1829 = v1823 - v1824 * v1821;
              uint64_t v1830 = v1827 - v1826 * v273[1];
              do
              {
                if (v1821)
                {
                  uint64_t v1831 = 0;
                  uint64_t v1832 = v1818 + 8 * v1817;
                  do
                  {
                    if ((int)v424 >= 1)
                    {
                      uint64_t v1833 = 0;
                      uint64_t v1834 = *(void *)(v1819 + 8 * v1816);
                      unsigned int v1835 = v424 + 1;
                      do
                      {
                        *(unsigned char *)(v1820 + v1833) = *(void *)(v1832 + 8 * v1833) <= v1834;
                        --v1835;
                        ++v1833;
                      }
                      while (v1835 > 1);
                    }
                    v1817 += v1824;
                    v1816 += v1826;
                    v1820 += (int)v424;
                    ++v1831;
                    v1832 += 8 * v1824;
                  }
                  while (v1831 != v1828);
                }
                v1817 += v1829;
                v1816 += v1830;
                ++v1815;
              }
              while (v1815 != v1814);
            }
          }
          else if (v181 == 1)
          {
            uint64_t v1146 = *v176;
            if (v1146)
            {
              uint64_t v1147 = 0;
              uint64_t v1148 = 0;
              uint64_t v1149 = *(void *)(v175 + 152);
              uint64_t v1150 = v272[19];
              uint64_t v1151 = v174[19];
              uint64_t v1152 = *(void *)v272[3];
              uint64_t v1153 = 8 * **(void **)(v175 + 24);
              do
              {
                if ((int)v424 >= 1)
                {
                  uint64_t v1154 = 0;
                  uint64_t v1155 = *(void *)(v1150 + 8 * v1148);
                  unsigned int v1156 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v1151 + v1154) = *(void *)(v1149 + 8 * v1154) <= v1155;
                    --v1156;
                    ++v1154;
                  }
                  while (v1156 > 1);
                }
                v1148 += v1152;
                v1151 += (int)v424;
                ++v1147;
                v1149 += v1153;
              }
              while (v1147 != v1146);
            }
          }
          else
          {
            unint64_t v2012 = v174[6];
            if (v2012)
            {
              unint64_t v2047 = 0;
              uint64_t v1937 = v272[19];
              uint64_t v1963 = *(void *)(v175 + 152);
              uint64_t v1836 = v174[19];
              do
              {
                uint64_t v1837 = 0;
                if ((v178 & 0x80000000) == 0)
                {
                  uint64_t v1838 = *(void *)(v175 + 24);
                  int v1839 = v2047;
                  do
                  {
                    ldiv_t v1840 = ldiv(v1839, v176[v178]);
                    int v1839 = v1840.quot;
                    v1837 += *(void *)(v1838 + 8 * v178--) * v1840.rem;
                  }
                  while (v178 != -1);
                }
                uint64_t v1841 = v2055;
                if ((v2055 & 0x80000000) != 0)
                {
                  LODWORD(v1842) = 0;
                }
                else
                {
                  uint64_t v1842 = 0;
                  uint64_t v1843 = v272[3];
                  int v1844 = v2047;
                  do
                  {
                    ldiv_t v1845 = ldiv(v1844, v273[v1841]);
                    int v1844 = v1845.quot;
                    v1842 += *(void *)(v1843 + 8 * v1841--) * v1845.rem;
                  }
                  while (v1841 != -1);
                }
                uint64_t v178 = v2069;
                if ((int)v424 >= 1)
                {
                  uint64_t v1846 = 0;
                  uint64_t v1847 = *(void *)(v1937 + 8 * (int)v1842);
                  unsigned int v1848 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v1836 + v1846) = *(void *)(v1963 + 8 * (int)v1837 + 8 * v1846) <= v1847;
                    --v1848;
                    ++v1846;
                  }
                  while (v1848 > 1);
                }
                v1836 += (int)v424;
                v2047 += (int)v424;
              }
              while (v2047 < v2012);
            }
          }
          break;
        case 3:
          if (v181 == 2)
          {
            uint64_t v1353 = *v176;
            if (v1353)
            {
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = 0;
              uint64_t v1357 = *(void *)(v175 + 152);
              uint64_t v1358 = v272[19];
              uint64_t v1359 = v174[19];
              unint64_t v1360 = v176[1];
              uint64_t v1361 = *(uint64_t **)(v175 + 24);
              uint64_t v1362 = *v1361;
              uint64_t v1363 = v1361[1];
              uint64_t v1364 = (uint64_t *)v272[3];
              uint64_t v1366 = *v1364;
              uint64_t v1365 = v1364[1];
              if (v1360 <= 1) {
                uint64_t v1367 = 1;
              }
              else {
                uint64_t v1367 = v176[1];
              }
              uint64_t v1368 = v1362 - v1363 * v1360;
              uint64_t v1369 = v1366 - v1365 * v273[1];
              do
              {
                if (v1360)
                {
                  uint64_t v1370 = 0;
                  uint64_t v1371 = v1358 + 8 * v1355;
                  uint64_t v1372 = v1357 + 8 * v1356;
                  do
                  {
                    if ((int)v424 >= 1)
                    {
                      uint64_t v1373 = 0;
                      unsigned int v1374 = v424 + 1;
                      do
                      {
                        *(unsigned char *)(v1359 + v1373) = *(void *)(v1372 + 8 * v1373) <= *(void *)(v1371 + 8 * v1373);
                        --v1374;
                        ++v1373;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v424;
                    ++v1370;
                    v1371 += 8 * v1365;
                    v1372 += 8 * v1363;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v181 == 1)
          {
            uint64_t v425 = *v176;
            if (v425)
            {
              uint64_t v426 = 0;
              uint64_t v427 = *(void *)(v175 + 152);
              uint64_t v428 = v272[19];
              uint64_t v429 = v174[19];
              uint64_t v430 = 8 * *(void *)v272[3];
              uint64_t v431 = 8 * **(void **)(v175 + 24);
              do
              {
                if ((int)v424 >= 1)
                {
                  uint64_t v432 = 0;
                  unsigned int v433 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v429 + v432) = *(void *)(v427 + 8 * v432) <= *(void *)(v428 + 8 * v432);
                    --v433;
                    ++v432;
                  }
                  while (v433 > 1);
                }
                v429 += (int)v424;
                ++v426;
                v428 += v430;
                v427 += v431;
              }
              while (v426 != v425);
            }
          }
          else
          {
            unint64_t v1999 = v174[6];
            if (v1999)
            {
              unint64_t v2034 = 0;
              uint64_t v1924 = v272[19];
              uint64_t v1950 = *(void *)(v175 + 152);
              uint64_t v1375 = v174[19];
              do
              {
                uint64_t v1376 = 0;
                if ((v178 & 0x80000000) == 0)
                {
                  uint64_t v1377 = *(void *)(v175 + 24);
                  int v1378 = v2034;
                  do
                  {
                    ldiv_t v1379 = ldiv(v1378, v176[v178]);
                    int v1378 = v1379.quot;
                    v1376 += *(void *)(v1377 + 8 * v178--) * v1379.rem;
                  }
                  while (v178 != -1);
                }
                uint64_t v1380 = v2055;
                if ((v2055 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  uint64_t v1381 = 0;
                  uint64_t v1382 = v272[3];
                  int v1383 = v2034;
                  do
                  {
                    ldiv_t v1384 = ldiv(v1383, v273[v1380]);
                    int v1383 = v1384.quot;
                    v1381 += *(void *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                uint64_t v178 = v2069;
                if ((int)v424 >= 1)
                {
                  uint64_t v1385 = 0;
                  unsigned int v1386 = v424 + 1;
                  do
                  {
                    *(unsigned char *)(v1375 + v1385) = *(void *)(v1950 + 8 * (int)v1376 + 8 * v1385) <= *(void *)(v1924 + 8 * (int)v1381 + 8 * v1385);
                    --v1386;
                    ++v1385;
                  }
                  while (v1386 > 1);
                }
                v1375 += (int)v424;
                v2034 += (int)v424;
              }
              while (v2034 < v1999);
            }
          }
          break;
        default:
LABEL_525:
          switch(v420)
          {
            case 1uLL:
              uint64_t v434 = v174[6];
              if (v434)
              {
                v435 = *(void **)(v175 + 152);
                v436 = (void *)v272[19];
                uint64_t v437 = (BOOL *)v174[19];
                uint64_t v438 = 8 * *(void *)v272[3];
                uint64_t v439 = 8 * **(void **)(v175 + 24);
                do
                {
                  *v437++ = *v435 <= *v436;
                  v436 = (void *)((char *)v436 + v438);
                  v435 = (void *)((char *)v435 + v439);
                  --v434;
                }
                while (v434);
              }
              break;
            case 2uLL:
              uint64_t v874 = *v176;
              if (v874)
              {
                uint64_t v875 = 0;
                uint64_t v876 = 0;
                uint64_t v877 = 0;
                uint64_t v878 = 0;
                uint64_t v879 = *(void *)(v175 + 152);
                uint64_t v880 = v272[19];
                uint64_t v881 = v174[19];
                unint64_t v882 = v176[1];
                uint64_t v883 = *(uint64_t **)(v175 + 24);
                uint64_t v884 = *v883;
                uint64_t v885 = v883[1];
                uint64_t v886 = (uint64_t *)v272[3];
                uint64_t v887 = *v886;
                uint64_t v888 = v886[1];
                uint64_t v889 = v887 - v888 * v273[1];
                if (v882 <= 1) {
                  uint64_t v890 = 1;
                }
                else {
                  uint64_t v890 = v176[1];
                }
                uint64_t v891 = v884 - v885 * v882;
                do
                {
                  if (v882)
                  {
                    uint64_t v892 = v876 + v890;
                    uint64_t v893 = (BOOL *)(v881 + v876);
                    uint64_t v894 = v890;
                    do
                    {
                      *v893++ = *(void *)(v879 + 8 * v878) <= *(void *)(v880 + 8 * v877);
                      v878 += v885;
                      v877 += v888;
                      --v894;
                    }
                    while (v894);
                    uint64_t v876 = v892;
                  }
                  v878 += v891;
                  v877 += v889;
                  ++v875;
                }
                while (v875 != v874);
              }
              break;
            case 3uLL:
              uint64_t v895 = *v176;
              if (v895)
              {
                uint64_t v896 = 0;
                uint64_t v897 = 0;
                uint64_t v898 = 0;
                uint64_t v899 = 0;
                uint64_t v900 = *(void *)(v175 + 152);
                uint64_t v901 = v272[19];
                uint64_t v902 = v174[19];
                unint64_t v903 = v176[1];
                uint64_t v904 = *(void **)(v175 + 24);
                uint64_t v905 = v904[1];
                uint64_t v906 = (void *)v272[3];
                uint64_t v907 = v906[1];
                uint64_t v908 = *v906 - v907 * v273[1];
                if (v903 <= 1) {
                  uint64_t v909 = 1;
                }
                else {
                  uint64_t v909 = v176[1];
                }
                unint64_t v910 = *v904 - v905 * v903;
                do
                {
                  if (v903)
                  {
                    uint64_t v911 = 0;
                    unint64_t v912 = v176[2];
                    uint64_t v913 = v904[2];
                    uint64_t v914 = v906[2];
                    if (v912 <= 1) {
                      uint64_t v915 = 1;
                    }
                    else {
                      uint64_t v915 = v176[2];
                    }
                    uint64_t v916 = v907 - v914 * v273[2];
                    do
                    {
                      uint64_t v917 = v915;
                      if (v912)
                      {
                        do
                        {
                          *(unsigned char *)(v902 + v897++) = *(void *)(v900 + 8 * v899) <= *(void *)(v901 + 8 * v898);
                          v899 += v913;
                          v898 += v914;
                          --v917;
                        }
                        while (v917);
                      }
                      v899 += v905 - v913 * v912;
                      v898 += v916;
                      ++v911;
                    }
                    while (v911 != v909);
                  }
                  v899 += v910;
                  v898 += v908;
                  ++v896;
                }
                while (v896 != v895);
              }
              break;
            case 4uLL:
              uint64_t v2076 = *v176;
              if (v2076)
              {
                uint64_t v918 = 0;
                uint64_t v919 = 0;
                uint64_t v920 = 0;
                uint64_t v921 = 0;
                uint64_t v922 = *(void *)(v175 + 152);
                uint64_t v923 = v272[19];
                uint64_t v924 = v174[19];
                unint64_t v925 = v176[1];
                v926 = *(void **)(v175 + 24);
                uint64_t v927 = (void *)v272[3];
                uint64_t v1944 = v927[1];
                uint64_t v1977 = v926[1];
                uint64_t v2026 = *v927 - v1944 * v273[1];
                int v2062 = v176[1];
                if (v925 <= 1) {
                  uint64_t v928 = 1;
                }
                else {
                  uint64_t v928 = v176[1];
                }
                unint64_t v1991 = *v926 - v926[1] * v925;
                do
                {
                  if (v2062)
                  {
                    uint64_t v929 = 0;
                    unint64_t v930 = v176[2];
                    uint64_t v931 = v926[2];
                    uint64_t v932 = v927[2];
                    if (v930 <= 1) {
                      uint64_t v933 = 1;
                    }
                    else {
                      uint64_t v933 = v176[2];
                    }
                    uint64_t v934 = v1944 - v932 * v273[2];
                    do
                    {
                      if (v930)
                      {
                        uint64_t v935 = 0;
                        unint64_t v936 = v176[3];
                        uint64_t v937 = v926[3];
                        uint64_t v938 = v927[3];
                        if (v936 <= 1) {
                          uint64_t v939 = 1;
                        }
                        else {
                          uint64_t v939 = v176[3];
                        }
                        uint64_t v940 = v932 - v938 * v273[3];
                        do
                        {
                          uint64_t v941 = v939;
                          if (v936)
                          {
                            do
                            {
                              *(unsigned char *)(v924 + v919++) = *(void *)(v922 + 8 * v921) <= *(void *)(v923 + 8 * v920);
                              v921 += v937;
                              v920 += v938;
                              --v941;
                            }
                            while (v941);
                          }
                          v921 += v931 - v937 * v936;
                          v920 += v940;
                          ++v935;
                        }
                        while (v935 != v933);
                      }
                      v921 += v1977 - v931 * v930;
                      v920 += v934;
                      ++v929;
                    }
                    while (v929 != v928);
                  }
                  v921 += v1991;
                  v920 += v2026;
                  ++v918;
                }
                while (v918 != v2076);
              }
              break;
            default:
              uint64_t v863 = v174[6];
              if (v863)
              {
                uint64_t v864 = 0;
                uint64_t v1990 = v272[19];
                uint64_t v2025 = *(void *)(v175 + 152);
                uint64_t v1976 = v174[19];
                do
                {
                  uint64_t v865 = 0;
                  if ((v178 & 0x80000000) == 0)
                  {
                    uint64_t v866 = *(void *)(v175 + 24);
                    int v867 = v864;
                    do
                    {
                      ldiv_t v868 = ldiv(v867, v176[v178]);
                      int v867 = v868.quot;
                      v865 += *(void *)(v866 + 8 * v178--) * v868.rem;
                    }
                    while (v178 != -1);
                  }
                  uint64_t v869 = v2055;
                  if ((v2055 & 0x80000000) != 0)
                  {
                    LODWORD(v870) = 0;
                  }
                  else
                  {
                    uint64_t v870 = 0;
                    uint64_t v871 = v272[3];
                    int v872 = v864;
                    do
                    {
                      ldiv_t v873 = ldiv(v872, v273[v869]);
                      int v872 = v873.quot;
                      v870 += *(void *)(v871 + 8 * v869--) * v873.rem;
                    }
                    while (v869 != -1);
                  }
                  *(unsigned char *)(v1976 + v864++) = *(void *)(v2025 + 8 * (int)v865) <= *(void *)(v1990
                                                                                                 + 8 * (int)v870);
                  uint64_t v178 = v2069;
                }
                while (v864 != v863);
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v20)
      {
        case 0:
          BOOL v13 = **(float **)(*a1 + 152) > **(float **)(*a2 + 152);
LABEL_26:
          char v8 = !v13;
LABEL_29:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v212 = *(_DWORD *)(*a2 + 160);
          if (v212 >= 1)
          {
            float v213 = **(float **)(*a1 + 152);
            v214 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v215 = *(float **)(*a2 + 152);
            unsigned int v216 = v212 + 1;
            do
            {
              float v217 = *v215++;
              *v214++ = v213 <= v217;
              --v216;
            }
            while (v216 > 1);
          }
          return;
        case 2:
          int v218 = *(_DWORD *)(*a1 + 160);
          if (v218 >= 1)
          {
            float v219 = **(float **)(*a2 + 152);
            v220 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v221 = *(float **)(*a1 + 152);
            unsigned int v222 = v218 + 1;
            do
            {
              float v223 = *v221++;
              *v220++ = v223 <= v219;
              --v222;
            }
            while (v222 > 1);
          }
          return;
        case 3:
          int v224 = *(_DWORD *)(*(void *)a3 + 48);
          if (v224 >= 1)
          {
            v225 = *(BOOL **)(*(void *)a3 + 152);
            v226 = *(float **)(*a2 + 152);
            unsigned int v227 = *(float **)(*a1 + 152);
            unsigned int v228 = v224 + 1;
            do
            {
              float v229 = *v227++;
              float v230 = v229;
              float v231 = *v226++;
              *v225++ = v230 <= v231;
              --v228;
            }
            while (v228 > 1);
          }
          return;
        default:
          uint64_t v203 = *(void **)a3;
          uint64_t v204 = *a1;
          uint64_t v205 = *(int **)*a1;
          uint64_t v206 = (*(void *)(*a1 + 8) - (void)v205) >> 2;
          uint64_t v207 = (v206 - 1);
          if ((int)v207 >= -1) {
            int v208 = -1;
          }
          else {
            int v208 = v206 - 1;
          }
          int v209 = v208 + 1;
          int v210 = v206 + 1;
          while (1)
          {
            unsigned int v211 = v210 - 2;
            if (v210 - 2 < 0) {
              break;
            }
            --v210;
            if (*(void *)(*(void *)(v204 + 24) + 8 * v211) != *(void *)(v203[3] + 8 * v211)) {
              goto LABEL_231;
            }
          }
          int v210 = v209;
LABEL_231:
          v280 = (void *)*a2;
          uint64_t v281 = *(int **)*a2;
          uint64_t v282 = (v280[1] - (void)v281) >> 2;
          uint64_t v283 = (v282 - 1);
          if ((int)v283 >= -1) {
            int v284 = -1;
          }
          else {
            int v284 = v282 - 1;
          }
          int v285 = v284 + 1;
          int v286 = v282 + 1;
          while (1)
          {
            unsigned int v287 = v286 - 2;
            if (v286 - 2 < 0) {
              break;
            }
            --v286;
            if (*(void *)(v280[3] + 8 * v287) != *(void *)(v203[3] + 8 * v287)) {
              goto LABEL_269;
            }
          }
          int v286 = v285;
LABEL_269:
          int v300 = v206 + 1;
          while (1)
          {
            unsigned int v301 = v300 - 2;
            if (v300 - 2 < 0) {
              break;
            }
            --v300;
            if (*(void *)(*(void *)(v204 + 24) + 8 * v301)) {
              goto LABEL_304;
            }
          }
          int v300 = v209;
LABEL_304:
          int v314 = v282 + 1;
          while (1)
          {
            unsigned int v315 = v314 - 2;
            if (v314 - 2 < 0) {
              break;
            }
            --v314;
            if (*(void *)(v280[3] + 8 * v315)) {
              goto LABEL_531;
            }
          }
          int v314 = v285;
LABEL_531:
          unint64_t v440 = (uint64_t)(v203[1] - *v203) >> 2;
          if (v210 <= v286) {
            int v441 = v286;
          }
          else {
            int v441 = v210;
          }
          if (v210 <= v314) {
            int v210 = v314;
          }
          if (v300 > v286) {
            int v286 = v300;
          }
          if (v440 > v286)
          {
            int v442 = 1;
          }
          else
          {
            int v286 = (uint64_t)(v203[1] - *v203) >> 2;
            int v442 = 4;
          }
          if (v440 > v210)
          {
            int v443 = 2;
          }
          else
          {
            int v210 = v286;
            int v443 = v442;
          }
          if (v440 > v441)
          {
            int v210 = v441;
            int v443 = 3;
          }
          uint64_t v2056 = v283;
          uint64_t v2070 = v207;
          if (!v210) {
            goto LABEL_560;
          }
          unint64_t v444 = *(void *)(v203[3] + 8 * (v210 - 1));
          if (v444 < 0x10) {
            goto LABEL_560;
          }
          switch(v443)
          {
            case 1:
              if (v210 == 2)
              {
                uint64_t v1849 = *v205;
                if (v1849)
                {
                  uint64_t v1850 = 0;
                  uint64_t v1851 = 0;
                  uint64_t v1852 = 0;
                  uint64_t v1853 = *(void *)(v204 + 152);
                  uint64_t v1854 = v280[19];
                  uint64_t v1855 = v203[19];
                  unint64_t v1856 = v205[1];
                  uint64_t v1857 = *(uint64_t **)(v204 + 24);
                  uint64_t v1858 = *v1857;
                  uint64_t v1859 = v1857[1];
                  uint64_t v1860 = (uint64_t *)v280[3];
                  uint64_t v1862 = *v1860;
                  uint64_t v1861 = v1860[1];
                  if (v1856 <= 1) {
                    uint64_t v1863 = 1;
                  }
                  else {
                    uint64_t v1863 = v205[1];
                  }
                  uint64_t v1864 = v1858 - v1859 * v1856;
                  uint64_t v1865 = v1862 - v1861 * v281[1];
                  do
                  {
                    if (v1856)
                    {
                      uint64_t v1866 = 0;
                      uint64_t v1867 = v1854 + 4 * v1851;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1868 = 0;
                          float v1869 = *(float *)(v1853 + 4 * v1852);
                          unsigned int v1870 = v444 + 1;
                          do
                          {
                            *(unsigned char *)(v1855 + v1868) = v1869 <= *(float *)(v1867 + 4 * v1868);
                            --v1870;
                            ++v1868;
                          }
                          while (v1870 > 1);
                        }
                        v1852 += v1859;
                        v1851 += v1861;
                        v1855 += (int)v444;
                        ++v1866;
                        v1867 += 4 * v1861;
                      }
                      while (v1866 != v1863);
                    }
                    v1852 += v1864;
                    v1851 += v1865;
                    ++v1850;
                  }
                  while (v1850 != v1849);
                }
              }
              else if (v210 == 1)
              {
                uint64_t v1157 = *v205;
                if (v1157)
                {
                  uint64_t v1158 = 0;
                  uint64_t v1159 = 0;
                  uint64_t v1160 = *(void *)(v204 + 152);
                  uint64_t v1161 = v280[19];
                  uint64_t v1162 = v203[19];
                  uint64_t v1163 = **(void **)(v204 + 24);
                  uint64_t v1164 = 4 * *(void *)v280[3];
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1165 = 0;
                      float v1166 = *(float *)(v1160 + 4 * v1159);
                      unsigned int v1167 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v1162 + v1165) = v1166 <= *(float *)(v1161 + 4 * v1165);
                        --v1167;
                        ++v1165;
                      }
                      while (v1167 > 1);
                    }
                    v1159 += v1163;
                    v1162 += (int)v444;
                    ++v1158;
                    v1161 += v1164;
                  }
                  while (v1158 != v1157);
                }
              }
              else
              {
                unint64_t v2013 = v203[6];
                if (v2013)
                {
                  unint64_t v2048 = 0;
                  uint64_t v1938 = v280[19];
                  uint64_t v1964 = *(void *)(v204 + 152);
                  uint64_t v1871 = v203[19];
                  do
                  {
                    uint64_t v1872 = 0;
                    if ((v207 & 0x80000000) == 0)
                    {
                      uint64_t v1873 = *(void *)(v204 + 24);
                      int v1874 = v2048;
                      do
                      {
                        ldiv_t v1875 = ldiv(v1874, v205[v207]);
                        int v1874 = v1875.quot;
                        v1872 += *(void *)(v1873 + 8 * v207--) * v1875.rem;
                      }
                      while (v207 != -1);
                    }
                    uint64_t v1876 = v2056;
                    if ((v2056 & 0x80000000) != 0)
                    {
                      LODWORD(v1877) = 0;
                    }
                    else
                    {
                      uint64_t v1877 = 0;
                      uint64_t v1878 = v280[3];
                      int v1879 = v2048;
                      do
                      {
                        ldiv_t v1880 = ldiv(v1879, v281[v1876]);
                        int v1879 = v1880.quot;
                        v1877 += *(void *)(v1878 + 8 * v1876--) * v1880.rem;
                      }
                      while (v1876 != -1);
                    }
                    uint64_t v207 = v2070;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1881 = 0;
                      float v1882 = *(float *)(v1964 + 4 * (int)v1872);
                      unsigned int v1883 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v1871 + v1881) = v1882 <= *(float *)(v1938 + 4 * (int)v1877 + 4 * v1881);
                        --v1883;
                        ++v1881;
                      }
                      while (v1883 > 1);
                    }
                    v1871 += (int)v444;
                    v2048 += (int)v444;
                  }
                  while (v2048 < v2013);
                }
              }
              break;
            case 2:
              if (v210 == 2)
              {
                uint64_t v1884 = *v205;
                if (v1884)
                {
                  uint64_t v1885 = 0;
                  uint64_t v1886 = 0;
                  uint64_t v1887 = 0;
                  uint64_t v1888 = *(void *)(v204 + 152);
                  uint64_t v1889 = v280[19];
                  uint64_t v1890 = v203[19];
                  unint64_t v1891 = v205[1];
                  uint64_t v1892 = *(uint64_t **)(v204 + 24);
                  uint64_t v1893 = *v1892;
                  uint64_t v1894 = v1892[1];
                  uint64_t v1895 = (uint64_t *)v280[3];
                  uint64_t v1897 = *v1895;
                  uint64_t v1896 = v1895[1];
                  if (v1891 <= 1) {
                    uint64_t v1898 = 1;
                  }
                  else {
                    uint64_t v1898 = v205[1];
                  }
                  uint64_t v1899 = v1893 - v1894 * v1891;
                  uint64_t v1900 = v1897 - v1896 * v281[1];
                  do
                  {
                    if (v1891)
                    {
                      uint64_t v1901 = 0;
                      uint64_t v1902 = v1888 + 4 * v1887;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1903 = 0;
                          float v1904 = *(float *)(v1889 + 4 * v1886);
                          unsigned int v1905 = v444 + 1;
                          do
                          {
                            *(unsigned char *)(v1890 + v1903) = *(float *)(v1902 + 4 * v1903) <= v1904;
                            --v1905;
                            ++v1903;
                          }
                          while (v1905 > 1);
                        }
                        v1887 += v1894;
                        v1886 += v1896;
                        v1890 += (int)v444;
                        ++v1901;
                        v1902 += 4 * v1894;
                      }
                      while (v1901 != v1898);
                    }
                    v1887 += v1899;
                    v1886 += v1900;
                    ++v1885;
                  }
                  while (v1885 != v1884);
                }
              }
              else if (v210 == 1)
              {
                uint64_t v1168 = *v205;
                if (v1168)
                {
                  uint64_t v1169 = 0;
                  uint64_t v1170 = 0;
                  uint64_t v1171 = *(void *)(v204 + 152);
                  uint64_t v1172 = v280[19];
                  uint64_t v1173 = v203[19];
                  uint64_t v1174 = *(void *)v280[3];
                  uint64_t v1175 = 4 * **(void **)(v204 + 24);
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1176 = 0;
                      float v1177 = *(float *)(v1172 + 4 * v1170);
                      unsigned int v1178 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v1173 + v1176) = *(float *)(v1171 + 4 * v1176) <= v1177;
                        --v1178;
                        ++v1176;
                      }
                      while (v1178 > 1);
                    }
                    v1170 += v1174;
                    v1173 += (int)v444;
                    ++v1169;
                    v1171 += v1175;
                  }
                  while (v1169 != v1168);
                }
              }
              else
              {
                unint64_t v2014 = v203[6];
                if (v2014)
                {
                  unint64_t v2049 = 0;
                  uint64_t v1939 = v280[19];
                  uint64_t v1965 = *(void *)(v204 + 152);
                  uint64_t v1906 = v203[19];
                  do
                  {
                    uint64_t v1907 = 0;
                    if ((v207 & 0x80000000) == 0)
                    {
                      uint64_t v1908 = *(void *)(v204 + 24);
                      int v1909 = v2049;
                      do
                      {
                        ldiv_t v1910 = ldiv(v1909, v205[v207]);
                        int v1909 = v1910.quot;
                        v1907 += *(void *)(v1908 + 8 * v207--) * v1910.rem;
                      }
                      while (v207 != -1);
                    }
                    uint64_t v1911 = v2056;
                    if ((v2056 & 0x80000000) != 0)
                    {
                      LODWORD(v1912) = 0;
                    }
                    else
                    {
                      uint64_t v1912 = 0;
                      uint64_t v1913 = v280[3];
                      int v1914 = v2049;
                      do
                      {
                        ldiv_t v1915 = ldiv(v1914, v281[v1911]);
                        int v1914 = v1915.quot;
                        v1912 += *(void *)(v1913 + 8 * v1911--) * v1915.rem;
                      }
                      while (v1911 != -1);
                    }
                    uint64_t v207 = v2070;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1916 = 0;
                      float v1917 = *(float *)(v1939 + 4 * (int)v1912);
                      unsigned int v1918 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v1906 + v1916) = *(float *)(v1965 + 4 * (int)v1907 + 4 * v1916) <= v1917;
                        --v1918;
                        ++v1916;
                      }
                      while (v1918 > 1);
                    }
                    v1906 += (int)v444;
                    v2049 += (int)v444;
                  }
                  while (v2049 < v2014);
                }
              }
              break;
            case 3:
              if (v210 == 2)
              {
                uint64_t v1387 = *v205;
                if (v1387)
                {
                  uint64_t v1388 = 0;
                  uint64_t v1389 = 0;
                  uint64_t v1390 = 0;
                  uint64_t v1391 = *(void *)(v204 + 152);
                  uint64_t v1392 = v280[19];
                  uint64_t v1393 = v203[19];
                  unint64_t v1394 = v205[1];
                  uint64_t v1395 = *(uint64_t **)(v204 + 24);
                  uint64_t v1396 = *v1395;
                  uint64_t v1397 = v1395[1];
                  uint64_t v1398 = (uint64_t *)v280[3];
                  uint64_t v1400 = *v1398;
                  uint64_t v1399 = v1398[1];
                  if (v1394 <= 1) {
                    uint64_t v1401 = 1;
                  }
                  else {
                    uint64_t v1401 = v205[1];
                  }
                  uint64_t v1402 = v1396 - v1397 * v1394;
                  uint64_t v1403 = v1400 - v1399 * v281[1];
                  do
                  {
                    if (v1394)
                    {
                      uint64_t v1404 = 0;
                      uint64_t v1405 = v1392 + 4 * v1389;
                      uint64_t v1406 = v1391 + 4 * v1390;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1407 = 0;
                          unsigned int v1408 = v444 + 1;
                          do
                          {
                            *(unsigned char *)(v1393 + v1407) = *(float *)(v1406 + 4 * v1407) <= *(float *)(v1405 + 4 * v1407);
                            --v1408;
                            ++v1407;
                          }
                          while (v1408 > 1);
                        }
                        v1390 += v1397;
                        v1389 += v1399;
                        v1393 += (int)v444;
                        ++v1404;
                        v1405 += 4 * v1399;
                        v1406 += 4 * v1397;
                      }
                      while (v1404 != v1401);
                    }
                    v1390 += v1402;
                    v1389 += v1403;
                    ++v1388;
                  }
                  while (v1388 != v1387);
                }
              }
              else if (v210 == 1)
              {
                uint64_t v445 = *v205;
                if (v445)
                {
                  uint64_t v446 = 0;
                  uint64_t v447 = *(void *)(v204 + 152);
                  uint64_t v448 = v280[19];
                  uint64_t v449 = v203[19];
                  uint64_t v450 = 4 * *(void *)v280[3];
                  uint64_t v451 = 4 * **(void **)(v204 + 24);
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v452 = 0;
                      unsigned int v453 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v449 + v452) = *(float *)(v447 + 4 * v452) <= *(float *)(v448 + 4 * v452);
                        --v453;
                        ++v452;
                      }
                      while (v453 > 1);
                    }
                    v449 += (int)v444;
                    ++v446;
                    v448 += v450;
                    v447 += v451;
                  }
                  while (v446 != v445);
                }
              }
              else
              {
                unint64_t v2000 = v203[6];
                if (v2000)
                {
                  unint64_t v2035 = 0;
                  uint64_t v1925 = v280[19];
                  uint64_t v1951 = *(void *)(v204 + 152);
                  uint64_t v1409 = v203[19];
                  do
                  {
                    uint64_t v1410 = 0;
                    if ((v207 & 0x80000000) == 0)
                    {
                      uint64_t v1411 = *(void *)(v204 + 24);
                      int v1412 = v2035;
                      do
                      {
                        ldiv_t v1413 = ldiv(v1412, v205[v207]);
                        int v1412 = v1413.quot;
                        v1410 += *(void *)(v1411 + 8 * v207--) * v1413.rem;
                      }
                      while (v207 != -1);
                    }
                    uint64_t v1414 = v2056;
                    if ((v2056 & 0x80000000) != 0)
                    {
                      LODWORD(v1415) = 0;
                    }
                    else
                    {
                      uint64_t v1415 = 0;
                      uint64_t v1416 = v280[3];
                      int v1417 = v2035;
                      do
                      {
                        ldiv_t v1418 = ldiv(v1417, v281[v1414]);
                        int v1417 = v1418.quot;
                        v1415 += *(void *)(v1416 + 8 * v1414--) * v1418.rem;
                      }
                      while (v1414 != -1);
                    }
                    uint64_t v207 = v2070;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1419 = 0;
                      unsigned int v1420 = v444 + 1;
                      do
                      {
                        *(unsigned char *)(v1409 + v1419) = *(float *)(v1951 + 4 * (int)v1410 + 4 * v1419) <= *(float *)(v1925 + 4 * (int)v1415 + 4 * v1419);
                        --v1420;
                        ++v1419;
                      }
                      while (v1420 > 1);
                    }
                    v1409 += (int)v444;
                    v2035 += (int)v444;
                  }
                  while (v2035 < v2000);
                }
              }
              break;
            default:
LABEL_560:
              switch(v440)
              {
                case 1uLL:
                  uint64_t v454 = v203[6];
                  if (v454)
                  {
                    v455 = *(float **)(v204 + 152);
                    v456 = (float *)v280[19];
                    uint64_t v457 = (BOOL *)v203[19];
                    uint64_t v458 = 4 * *(void *)v280[3];
                    uint64_t v459 = 4 * **(void **)(v204 + 24);
                    do
                    {
                      *v457++ = *v455 <= *v456;
                      v456 = (float *)((char *)v456 + v458);
                      v455 = (float *)((char *)v455 + v459);
                      --v454;
                    }
                    while (v454);
                  }
                  break;
                case 2uLL:
                  uint64_t v953 = *v205;
                  if (v953)
                  {
                    uint64_t v954 = 0;
                    uint64_t v955 = 0;
                    uint64_t v956 = 0;
                    uint64_t v957 = 0;
                    uint64_t v958 = *(void *)(v204 + 152);
                    uint64_t v959 = v280[19];
                    uint64_t v960 = v203[19];
                    unint64_t v961 = v205[1];
                    uint64_t v962 = *(uint64_t **)(v204 + 24);
                    uint64_t v963 = *v962;
                    uint64_t v964 = v962[1];
                    uint64_t v965 = (uint64_t *)v280[3];
                    uint64_t v966 = *v965;
                    uint64_t v967 = v965[1];
                    uint64_t v968 = v966 - v967 * v281[1];
                    if (v961 <= 1) {
                      uint64_t v969 = 1;
                    }
                    else {
                      uint64_t v969 = v205[1];
                    }
                    uint64_t v970 = v963 - v964 * v961;
                    do
                    {
                      if (v961)
                      {
                        uint64_t v971 = v955 + v969;
                        uint64_t v972 = (BOOL *)(v960 + v955);
                        uint64_t v973 = v969;
                        do
                        {
                          *v972++ = *(float *)(v958 + 4 * v957) <= *(float *)(v959 + 4 * v956);
                          v957 += v964;
                          v956 += v967;
                          --v973;
                        }
                        while (v973);
                        uint64_t v955 = v971;
                      }
                      v957 += v970;
                      v956 += v968;
                      ++v954;
                    }
                    while (v954 != v953);
                  }
                  break;
                case 3uLL:
                  uint64_t v974 = *v205;
                  if (v974)
                  {
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = 0;
                    uint64_t v979 = *(void *)(v204 + 152);
                    uint64_t v980 = v280[19];
                    uint64_t v981 = v203[19];
                    unint64_t v982 = v205[1];
                    uint64_t v983 = *(void **)(v204 + 24);
                    uint64_t v984 = v983[1];
                    uint64_t v985 = (void *)v280[3];
                    uint64_t v986 = v985[1];
                    uint64_t v987 = *v985 - v986 * v281[1];
                    if (v982 <= 1) {
                      uint64_t v988 = 1;
                    }
                    else {
                      uint64_t v988 = v205[1];
                    }
                    unint64_t v989 = *v983 - v984 * v982;
                    do
                    {
                      if (v982)
                      {
                        uint64_t v990 = 0;
                        unint64_t v991 = v205[2];
                        uint64_t v992 = v983[2];
                        uint64_t v993 = v985[2];
                        if (v991 <= 1) {
                          uint64_t v994 = 1;
                        }
                        else {
                          uint64_t v994 = v205[2];
                        }
                        uint64_t v995 = v986 - v993 * v281[2];
                        do
                        {
                          uint64_t v996 = v994;
                          if (v991)
                          {
                            do
                            {
                              *(unsigned char *)(v981 + v976++) = *(float *)(v979 + 4 * v978) <= *(float *)(v980 + 4 * v977);
                              v978 += v992;
                              v977 += v993;
                              --v996;
                            }
                            while (v996);
                          }
                          v978 += v984 - v992 * v991;
                          v977 += v995;
                          ++v990;
                        }
                        while (v990 != v988);
                      }
                      v978 += v989;
                      v977 += v987;
                      ++v975;
                    }
                    while (v975 != v974);
                  }
                  break;
                case 4uLL:
                  uint64_t v2077 = *v205;
                  if (v2077)
                  {
                    uint64_t v997 = 0;
                    uint64_t v998 = 0;
                    uint64_t v999 = 0;
                    uint64_t v1000 = 0;
                    uint64_t v1001 = *(void *)(v204 + 152);
                    uint64_t v1002 = v280[19];
                    uint64_t v1003 = v203[19];
                    unint64_t v1004 = v205[1];
                    v1005 = *(void **)(v204 + 24);
                    uint64_t v1006 = (void *)v280[3];
                    uint64_t v1979 = v1006[1];
                    uint64_t v1993 = v1005[1];
                    if (v1004 <= 1) {
                      uint64_t v1007 = 1;
                    }
                    else {
                      uint64_t v1007 = v205[1];
                    }
                    unint64_t v2028 = *v1005 - v1005[1] * v1004;
                    uint64_t v2063 = *v1006 - v1979 * v281[1];
                    do
                    {
                      if (v1004)
                      {
                        uint64_t v1008 = 0;
                        unint64_t v1009 = v205[2];
                        uint64_t v1010 = v1005[2];
                        uint64_t v1011 = v1006[2];
                        if (v1009 <= 1) {
                          uint64_t v1012 = 1;
                        }
                        else {
                          uint64_t v1012 = v205[2];
                        }
                        uint64_t v1013 = v1979 - v1011 * v281[2];
                        do
                        {
                          if (v1009)
                          {
                            uint64_t v1014 = 0;
                            unint64_t v1015 = v205[3];
                            uint64_t v1016 = v1005[3];
                            uint64_t v1017 = v1006[3];
                            if (v1015 <= 1) {
                              uint64_t v1018 = 1;
                            }
                            else {
                              uint64_t v1018 = v205[3];
                            }
                            uint64_t v1019 = v1011 - v1017 * v281[3];
                            do
                            {
                              uint64_t v1020 = v1018;
                              if (v1015)
                              {
                                do
                                {
                                  *(unsigned char *)(v1003 + v998++) = *(float *)(v1001 + 4 * v1000) <= *(float *)(v1002 + 4 * v999);
                                  v1000 += v1016;
                                  v999 += v1017;
                                  --v1020;
                                }
                                while (v1020);
                              }
                              v1000 += v1010 - v1016 * v1015;
                              v999 += v1019;
                              ++v1014;
                            }
                            while (v1014 != v1012);
                          }
                          v1000 += v1993 - v1010 * v1009;
                          v999 += v1013;
                          ++v1008;
                        }
                        while (v1008 != v1007);
                      }
                      v1000 += v2028;
                      v999 += v2063;
                      ++v997;
                    }
                    while (v997 != v2077);
                  }
                  break;
                default:
                  uint64_t v942 = v203[6];
                  if (v942)
                  {
                    uint64_t v943 = 0;
                    uint64_t v1992 = v280[19];
                    uint64_t v2027 = *(void *)(v204 + 152);
                    uint64_t v1978 = v203[19];
                    do
                    {
                      uint64_t v944 = 0;
                      if ((v207 & 0x80000000) == 0)
                      {
                        uint64_t v945 = *(void *)(v204 + 24);
                        int v946 = v943;
                        do
                        {
                          ldiv_t v947 = ldiv(v946, v205[v207]);
                          int v946 = v947.quot;
                          v944 += *(void *)(v945 + 8 * v207--) * v947.rem;
                        }
                        while (v207 != -1);
                      }
                      uint64_t v948 = v2056;
                      if ((v2056 & 0x80000000) != 0)
                      {
                        LODWORD(v949) = 0;
                      }
                      else
                      {
                        uint64_t v949 = 0;
                        uint64_t v950 = v280[3];
                        int v951 = v943;
                        do
                        {
                          ldiv_t v952 = ldiv(v951, v281[v948]);
                          int v951 = v952.quot;
                          v949 += *(void *)(v950 + 8 * v948--) * v952.rem;
                        }
                        while (v948 != -1);
                      }
                      *(unsigned char *)(v1978 + v943++) = *(float *)(v2027 + 4 * (int)v944) <= *(float *)(v1992 + 4 * (int)v949);
                      uint64_t v207 = v2070;
                    }
                    while (v943 != v942);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::LogAddExp::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LogAddExp::eval();
  }
  if (*(void *)(*(void *)a3 + 56) != 6)
  {
    uint64_t v270 = *(void *)(*(void *)a3 + 56);
    if (mlx::core::issubdtype((unsigned int *)&v270, &mlx::core::inexact))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v270);
      int v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v270, (uint64_t)"[logaddexp] Does not support ", 29);
      v269.__r_.__value_.__r.__words[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v236, &v269);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v271, &v269);
      std::logic_error::logic_error(exception, &v269);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    int v238 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v238, "[logaddexp] Cannot compute logaddexp for arrays with non floating point type.");
    __cxa_throw(v238, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  v5 = (int ***)(v3 + 2);
  switch(binary_op_type)
  {
    case 0:
      **(float **)(*(void *)a3 + 152) = mlx::core::detail::LogAddExp::operator()<float>(**(float **)(*v3 + 152), **(float **)(v3[2] + 152));
      return;
    case 1:
      uint64_t v22 = v3[2];
      int v23 = *(_DWORD *)(v22 + 160);
      if (v23 >= 1)
      {
        float v24 = **(float **)(*v3 + 152);
        uint64_t v25 = *(float **)(*(void *)a3 + 152);
        int v26 = *(float **)(v22 + 152);
        unsigned int v27 = v23 + 1;
        do
        {
          float v28 = *v26++;
          *v25++ = mlx::core::detail::LogAddExp::operator()<float>(v24, v28);
          --v27;
        }
        while (v27 > 1);
      }
      return;
    case 2:
      uint64_t v7 = *v3;
      int v8 = *(_DWORD *)(*v3 + 160);
      if (v8 >= 1)
      {
        float v9 = **(float **)(v3[2] + 152);
        unsigned int v10 = *(float **)(*(void *)a3 + 152);
        unsigned int v11 = *(float **)(v7 + 152);
        unsigned int v12 = v8 + 1;
        do
        {
          float v13 = *v11++;
          *v10++ = mlx::core::detail::LogAddExp::operator()<float>(v13, v9);
          --v12;
        }
        while (v12 > 1);
      }
      return;
    case 3:
      int v14 = *(_DWORD *)(*(void *)a3 + 48);
      if (v14 >= 1)
      {
        int v15 = *(float **)(*(void *)a3 + 152);
        int v16 = *(float **)(v3[2] + 152);
        int v17 = *(float **)(*v3 + 152);
        unsigned int v18 = v14 + 1;
        do
        {
          float v19 = *v17++;
          float v20 = v19;
          float v21 = *v16++;
          *v15++ = mlx::core::detail::LogAddExp::operator()<float>(v20, v21);
          --v18;
        }
        while (v18 > 1);
      }
      return;
    default:
      unsigned int v29 = *(void **)a3;
      uint64_t v30 = *v3;
      int v31 = *(int **)*v3;
      uint64_t v32 = (*(void *)(*v3 + 8) - (void)v31) >> 2;
      int v33 = v32 - 1;
      if ((int)v32 - 1 >= -1) {
        int v33 = -1;
      }
      int v34 = v33 + 1;
      int v35 = v32 + 1;
      while (1)
      {
        unsigned int v36 = v35 - 2;
        if (v35 - 2 < 0) {
          break;
        }
        --v35;
        if (*(void *)(*(void *)(v30 + 24) + 8 * v36) != *(void *)(v29[3] + 8 * v36)) {
          goto LABEL_24;
        }
      }
      int v35 = v34;
LABEL_24:
      BOOL v37 = *v5;
      char v38 = **v5;
      unint64_t v39 = (unint64_t)((char *)(*v5)[1] - (char *)v38) >> 2;
      int v40 = v39 - 1;
      if ((int)v39 - 1 >= -1) {
        int v40 = -1;
      }
      int v41 = v40 + 1;
      int v42 = v39 + 1;
      while (1)
      {
        unsigned int v43 = v42 - 2;
        if (v42 - 2 < 0) {
          break;
        }
        --v42;
        if (*(void *)&v37[3][2 * v43] != *(void *)(v29[3] + 8 * v43)) {
          goto LABEL_31;
        }
      }
      int v42 = v41;
LABEL_31:
      int v44 = v32 + 1;
      while (1)
      {
        unsigned int v45 = v44 - 2;
        if (v44 - 2 < 0) {
          break;
        }
        --v44;
        if (*(void *)(*(void *)(v30 + 24) + 8 * v45)) {
          goto LABEL_36;
        }
      }
      int v44 = v34;
LABEL_36:
      int v46 = v39 + 1;
      while (1)
      {
        int v47 = v46 - 2;
        if (v46 - 2 < 0) {
          break;
        }
        --v46;
        if (*(void *)&v37[3][2 * v47]) {
          goto LABEL_41;
        }
      }
      int v46 = v41;
LABEL_41:
      unint64_t v48 = (uint64_t)(v29[1] - *v29) >> 2;
      if (v35 <= v42) {
        int v49 = v42;
      }
      else {
        int v49 = v35;
      }
      if (v35 <= v46) {
        int v35 = v46;
      }
      if (v44 > v42) {
        int v42 = v44;
      }
      if (v48 > v42)
      {
        int v50 = 1;
      }
      else
      {
        int v42 = (uint64_t)(v29[1] - *v29) >> 2;
        int v50 = 4;
      }
      if (v48 > v35)
      {
        int v51 = 2;
      }
      else
      {
        int v35 = v42;
        int v51 = v50;
      }
      if (v48 > v49)
      {
        int v35 = v49;
        int v51 = 3;
      }
      if (!v35) {
        goto LABEL_58;
      }
      unint64_t v265 = *(void *)(v29[3] + 8 * (v35 - 1));
      if (v265 < 0x10) {
        goto LABEL_58;
      }
      switch(v51)
      {
        case 1:
          if (v35 == 2)
          {
            int v159 = *v31;
            if (*v31)
            {
              unint64_t v160 = 0;
              uint64_t v161 = 0;
              uint64_t v162 = 0;
              int v252 = v37[19];
              uint64_t v260 = *(void *)(v30 + 152);
              uint64_t v163 = v29[19];
              do
              {
                if (v31[1])
                {
                  unint64_t v247 = v160;
                  unint64_t v164 = 0;
                  do
                  {
                    if ((int)v265 >= 1)
                    {
                      uint64_t v165 = 0;
                      float v166 = *(float *)(v260 + 4 * v162);
                      unsigned int v167 = v265 + 1;
                      do
                      {
                        *(float *)(v163 + v165 * 4) = mlx::core::detail::LogAddExp::operator()<float>(v166, *(float *)&v252[v161 + v165]);
                        --v167;
                        ++v165;
                      }
                      while (v167 > 1);
                      uint64_t v30 = *v3;
                      BOOL v37 = (int **)v3[2];
                      int v31 = *(int **)*v3;
                    }
                    v168 = *(void **)(v30 + 24);
                    uint64_t v169 = v168[1];
                    v162 += v169;
                    v161 += *((void *)v37[3] + 1);
                    v163 += 4 * (int)v265;
                    ++v164;
                    unint64_t v170 = v31[1];
                  }
                  while (v164 < v170);
                  int v159 = *v31;
                  char v38 = *v37;
                  unint64_t v160 = v247;
                }
                else
                {
                  unint64_t v170 = 0;
                  v168 = *(void **)(v30 + 24);
                  uint64_t v169 = v168[1];
                }
                uint64_t v162 = *v168 + v162 - v170 * v169;
                uint64_t v161 = *(void *)v37[3] + v161 - *((void *)v37[3] + 1) * v38[1];
                ++v160;
              }
              while (v160 < v159);
            }
          }
          else if (v35 == 1)
          {
            int v139 = *v31;
            if (v139)
            {
              unint64_t v140 = 0;
              uint64_t v141 = 0;
              uint64_t v142 = 0;
              uint64_t v258 = *(void *)(v30 + 152);
              uint64_t v250 = v37[19];
              uint64_t v143 = v29[19];
              do
              {
                if ((int)v265 >= 1)
                {
                  uint64_t v144 = 0;
                  float v145 = *(float *)(v258 + 4 * v142);
                  unsigned int v146 = v265 + 1;
                  do
                  {
                    *(float *)(v143 + v144 * 4) = mlx::core::detail::LogAddExp::operator()<float>(v145, *(float *)&v250[v141 + v144]);
                    --v146;
                    ++v144;
                  }
                  while (v146 > 1);
                  uint64_t v30 = *v3;
                  BOOL v37 = (int **)v3[2];
                  int v139 = **(_DWORD **)*v3;
                }
                v142 += **(void **)(v30 + 24);
                v141 += *(void *)v37[3];
                ++v140;
                v143 += 4 * (int)v265;
              }
              while (v140 < v139);
            }
          }
          else if (v29[6])
          {
            unint64_t v200 = 0;
            v240 = v37[19];
            uint64_t v244 = *(void *)(v30 + 152);
            uint64_t v201 = v29[19];
            do
            {
              uint64_t v202 = *(void *)*v3;
              unint64_t v203 = (unint64_t)(*(void *)(*v3 + 8) - v202) >> 2;
              uint64_t v204 = (v203 - 1);
              unint64_t v263 = v200;
              uint64_t v205 = 0;
              if ((int)v203 - 1 >= 0)
              {
                uint64_t v206 = *(void *)(*v3 + 24);
                do
                {
                  ldiv_t v207 = ldiv((int)v200, *(int *)(v202 + 4 * v204));
                  LODWORD(v200) = v207.quot;
                  v205 += *(void *)(v206 + 8 * v204--) * v207.rem;
                }
                while (v204 != -1);
              }
              int v208 = **v5;
              unint64_t v209 = (unint64_t)((char *)(*v5)[1] - (char *)v208) >> 2;
              uint64_t v210 = 0;
              uint64_t v211 = (v209 - 1);
              if ((int)v209 - 1 >= 0)
              {
                int v212 = (*v5)[3];
                int quot = v263;
                do
                {
                  ldiv_t v214 = ldiv(quot, v208[v211]);
                  int quot = v214.quot;
                  v210 += *(void *)&v212[2 * v211--] * v214.rem;
                }
                while (v211 != -1);
              }
              if ((int)v265 >= 1)
              {
                uint64_t v215 = 0;
                float v216 = *(float *)(v244 + 4 * (int)v205);
                unsigned int v217 = v265 + 1;
                do
                {
                  *(float *)(v201 + v215 * 4) = mlx::core::detail::LogAddExp::operator()<float>(v216, *(float *)&v240[(int)v210 + v215]);
                  --v217;
                  ++v215;
                }
                while (v217 > 1);
                unsigned int v29 = *(void **)a3;
              }
              unint64_t v200 = v263 + (int)v265;
              v201 += 4 * (int)v265;
            }
            while (v200 < v29[6]);
          }
          break;
        case 2:
          if (v35 == 2)
          {
            int v147 = *v31;
            if (*v31)
            {
              unint64_t v148 = 0;
              uint64_t v149 = 0;
              uint64_t v150 = 0;
              uint64_t v251 = v37[19];
              uint64_t v259 = *(void *)(v30 + 152);
              uint64_t v151 = v29[19];
              do
              {
                if (v31[1])
                {
                  unint64_t v246 = v148;
                  unint64_t v152 = 0;
                  do
                  {
                    if ((int)v265 >= 1)
                    {
                      uint64_t v153 = 0;
                      float v154 = *(float *)&v251[v149];
                      unsigned int v155 = v265 + 1;
                      do
                      {
                        *(float *)(v151 + v153) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v259 + 4 * v150 + v153), v154);
                        --v155;
                        v153 += 4;
                      }
                      while (v155 > 1);
                      uint64_t v30 = *v3;
                      BOOL v37 = (int **)v3[2];
                      int v31 = *(int **)*v3;
                    }
                    v156 = *(void **)(v30 + 24);
                    uint64_t v157 = v156[1];
                    v150 += v157;
                    v149 += *((void *)v37[3] + 1);
                    v151 += 4 * (int)v265;
                    ++v152;
                    unint64_t v158 = v31[1];
                  }
                  while (v152 < v158);
                  int v147 = *v31;
                  char v38 = *v37;
                  unint64_t v148 = v246;
                }
                else
                {
                  unint64_t v158 = 0;
                  v156 = *(void **)(v30 + 24);
                  uint64_t v157 = v156[1];
                }
                uint64_t v150 = *v156 + v150 - v158 * v157;
                uint64_t v149 = *(void *)v37[3] + v149 - *((void *)v37[3] + 1) * v38[1];
                ++v148;
              }
              while (v148 < v147);
            }
          }
          else if (v35 == 1)
          {
            int v131 = *v31;
            if (v131)
            {
              unint64_t v132 = 0;
              uint64_t v133 = 0;
              uint64_t v134 = 0;
              uint64_t v257 = *(void *)(v30 + 152);
              uint64_t v249 = v37[19];
              uint64_t v135 = v29[19];
              do
              {
                if ((int)v265 >= 1)
                {
                  uint64_t v136 = 0;
                  float v137 = *(float *)&v249[v133];
                  unsigned int v138 = v265 + 1;
                  do
                  {
                    *(float *)(v135 + v136) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v257 + 4 * v134 + v136), v137);
                    --v138;
                    v136 += 4;
                  }
                  while (v138 > 1);
                  uint64_t v30 = *v3;
                  BOOL v37 = (int **)v3[2];
                  int v131 = **(_DWORD **)*v3;
                }
                v134 += **(void **)(v30 + 24);
                v133 += *(void *)v37[3];
                ++v132;
                v135 += 4 * (int)v265;
              }
              while (v132 < v131);
            }
          }
          else if (v29[6])
          {
            unint64_t v182 = 0;
            unsigned int v239 = v37[19];
            uint64_t v243 = *(void *)(v30 + 152);
            uint64_t v183 = v29[19];
            do
            {
              uint64_t v184 = *(void *)*v3;
              unint64_t v185 = (unint64_t)(*(void *)(*v3 + 8) - v184) >> 2;
              uint64_t v186 = (v185 - 1);
              unint64_t v262 = v182;
              uint64_t v187 = 0;
              if ((int)v185 - 1 >= 0)
              {
                uint64_t v188 = *(void *)(*v3 + 24);
                do
                {
                  ldiv_t v189 = ldiv((int)v182, *(int *)(v184 + 4 * v186));
                  LODWORD(v182) = v189.quot;
                  v187 += *(void *)(v188 + 8 * v186--) * v189.rem;
                }
                while (v186 != -1);
              }
              uint64_t v190 = **v5;
              unint64_t v191 = (unint64_t)((char *)(*v5)[1] - (char *)v190) >> 2;
              uint64_t v192 = 0;
              uint64_t v193 = (v191 - 1);
              if ((int)v191 - 1 >= 0)
              {
                uint64_t v194 = (*v5)[3];
                int v195 = v262;
                do
                {
                  ldiv_t v196 = ldiv(v195, v190[v193]);
                  int v195 = v196.quot;
                  v192 += *(void *)&v194[2 * v193--] * v196.rem;
                }
                while (v193 != -1);
              }
              if ((int)v265 >= 1)
              {
                uint64_t v197 = 0;
                float v198 = *(float *)&v239[(int)v192];
                unsigned int v199 = v265 + 1;
                do
                {
                  *(float *)(v183 + v197) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v243 + 4 * (int)v187 + v197), v198);
                  --v199;
                  v197 += 4;
                }
                while (v199 > 1);
                unsigned int v29 = *(void **)a3;
              }
              unint64_t v182 = v262 + (int)v265;
              v183 += 4 * (int)v265;
            }
            while (v182 < v29[6]);
          }
          break;
        case 3:
          if (v35 == 2)
          {
            int v171 = *v31;
            if (*v31)
            {
              unint64_t v172 = 0;
              uint64_t v173 = 0;
              uint64_t v174 = 0;
              int v253 = v37[19];
              uint64_t v261 = *(void *)(v30 + 152);
              uint64_t v175 = v29[19];
              do
              {
                if (v31[1])
                {
                  unint64_t v242 = v172;
                  unint64_t v176 = 0;
                  do
                  {
                    if ((int)v265 >= 1)
                    {
                      uint64_t v177 = 0;
                      unsigned int v178 = v265 + 1;
                      do
                      {
                        *(float *)(v175 + v177 * 4) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v261 + 4 * v174 + v177 * 4), *(float *)&v253[v173 + v177]);
                        --v178;
                        ++v177;
                      }
                      while (v178 > 1);
                      uint64_t v30 = *v3;
                      BOOL v37 = (int **)v3[2];
                      int v31 = *(int **)*v3;
                    }
                    int v179 = *(void **)(v30 + 24);
                    uint64_t v180 = v179[1];
                    v174 += v180;
                    v173 += *((void *)v37[3] + 1);
                    v175 += 4 * (int)v265;
                    ++v176;
                    unint64_t v181 = v31[1];
                  }
                  while (v176 < v181);
                  int v171 = *v31;
                  char v38 = *v37;
                  unint64_t v172 = v242;
                }
                else
                {
                  unint64_t v181 = 0;
                  int v179 = *(void **)(v30 + 24);
                  uint64_t v180 = v179[1];
                }
                uint64_t v174 = *v179 + v174 - v181 * v180;
                uint64_t v173 = *(void *)v37[3] + v173 - *((void *)v37[3] + 1) * v38[1];
                ++v172;
              }
              while (v172 < v171);
            }
          }
          else if (v35 == 1)
          {
            int v58 = *v31;
            if (v58)
            {
              unint64_t v59 = 0;
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              uint64_t v254 = *(void *)(v30 + 152);
              v248 = v37[19];
              uint64_t v62 = v29[19];
              do
              {
                if ((int)v265 >= 1)
                {
                  uint64_t v63 = 0;
                  unsigned int v64 = v265 + 1;
                  do
                  {
                    *(float *)(v62 + v63 * 4) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v254 + 4 * v61 + v63 * 4), *(float *)&v248[v60 + v63]);
                    --v64;
                    ++v63;
                  }
                  while (v64 > 1);
                  uint64_t v30 = *v3;
                  BOOL v37 = (int **)v3[2];
                  int v58 = **(_DWORD **)*v3;
                }
                v61 += **(void **)(v30 + 24);
                v60 += *(void *)v37[3];
                ++v59;
                v62 += 4 * (int)v265;
              }
              while (v59 < v58);
            }
          }
          else if (v29[6])
          {
            unint64_t v218 = 0;
            uint64_t v241 = v37[19];
            uint64_t v245 = *(void *)(v30 + 152);
            uint64_t v219 = v29[19];
            do
            {
              uint64_t v220 = *(void *)*v3;
              unint64_t v221 = (unint64_t)(*(void *)(*v3 + 8) - v220) >> 2;
              uint64_t v222 = (v221 - 1);
              unint64_t v264 = v218;
              uint64_t v223 = 0;
              if ((int)v221 - 1 >= 0)
              {
                uint64_t v224 = *(void *)(*v3 + 24);
                do
                {
                  ldiv_t v225 = ldiv((int)v218, *(int *)(v220 + 4 * v222));
                  LODWORD(v218) = v225.quot;
                  v223 += *(void *)(v224 + 8 * v222--) * v225.rem;
                }
                while (v222 != -1);
              }
              v226 = **v5;
              unint64_t v227 = (unint64_t)((char *)(*v5)[1] - (char *)v226) >> 2;
              uint64_t v228 = 0;
              uint64_t v229 = (v227 - 1);
              if ((int)v227 - 1 >= 0)
              {
                float v230 = (*v5)[3];
                int v231 = v264;
                do
                {
                  ldiv_t v232 = ldiv(v231, v226[v229]);
                  int v231 = v232.quot;
                  v228 += *(void *)&v230[2 * v229--] * v232.rem;
                }
                while (v229 != -1);
              }
              if ((int)v265 >= 1)
              {
                uint64_t v233 = 0;
                unsigned int v234 = v265 + 1;
                uint64_t v235 = v245 + 4 * (int)v223;
                do
                {
                  *(float *)(v219 + v233 * 4) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v235 + v233 * 4), *(float *)&v241[(int)v228 + v233]);
                  --v234;
                  ++v233;
                }
                while (v234 > 1);
                unsigned int v29 = *(void **)a3;
              }
              unint64_t v218 = v264 + (int)v265;
              v219 += 4 * (int)v265;
            }
            while (v218 < v29[6]);
          }
          break;
        default:
LABEL_58:
          switch(v48)
          {
            case 1uLL:
              if (v29[6])
              {
                unint64_t v52 = 0;
                uint64_t v53 = 0;
                uint64_t v54 = 0;
                uint64_t v55 = *(void *)(v30 + 152);
                char v56 = v37[19];
                uint64_t v57 = v29[19];
                do
                {
                  *(float *)(v57 + 4 * v52) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v55 + 4 * v54), *(float *)&v56[v53]);
                  v54 += **(void **)(*v3 + 24);
                  v53 += **(void **)(v3[2] + 24);
                  ++v52;
                }
                while (v52 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v101 = *v31;
              if (*v31)
              {
                unint64_t v102 = 0;
                uint64_t v103 = 0;
                uint64_t v104 = 0;
                uint64_t v105 = 0;
                uint64_t v106 = *(void *)(v30 + 152);
                unsigned int v107 = v37[19];
                uint64_t v108 = v29[19];
                do
                {
                  if (v31[1])
                  {
                    unint64_t v109 = 0;
                    do
                    {
                      *(float *)(v108 + 4 * v103 + 4 * v109) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v106 + 4 * v105), *(float *)&v107[v104]);
                      uint64_t v30 = *v3;
                      v110 = *(void **)(*v3 + 24);
                      uint64_t v111 = v110[1];
                      v105 += v111;
                      BOOL v37 = (int **)v3[2];
                      unsigned int v112 = v37[3];
                      uint64_t v113 = *((void *)v112 + 1);
                      v104 += v113;
                      ++v109;
                      int v31 = *(int **)*v3;
                      unint64_t v114 = v31[1];
                    }
                    while (v109 < v114);
                    int v101 = *v31;
                    char v38 = *v37;
                    v103 += v109;
                  }
                  else
                  {
                    unint64_t v114 = 0;
                    v110 = *(void **)(v30 + 24);
                    uint64_t v111 = v110[1];
                    unsigned int v112 = v37[3];
                    uint64_t v113 = *((void *)v112 + 1);
                  }
                  uint64_t v105 = *v110 + v105 - v114 * v111;
                  uint64_t v104 = *(void *)v112 + v104 - v113 * v38[1];
                  ++v102;
                }
                while (v102 < v101);
              }
              break;
            case 3uLL:
              int v65 = *v31;
              if (*v31)
              {
                unint64_t v66 = 0;
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v69 = 0;
                uint64_t v70 = *(void *)(v30 + 152);
                unsigned int v71 = v37[19];
                uint64_t v72 = v29[19];
                do
                {
                  if (v31[1])
                  {
                    unint64_t v266 = v66;
                    unint64_t v73 = 0;
                    do
                    {
                      if (v31[2])
                      {
                        unint64_t v74 = 0;
                        do
                        {
                          *(float *)(v72 + 4 * v67 + 4 * v74) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v70 + 4 * v69), *(float *)&v71[v68]);
                          uint64_t v30 = *v3;
                          v75 = *(void **)(*v3 + 24);
                          uint64_t v76 = v75[2];
                          v69 += v76;
                          BOOL v37 = (int **)v3[2];
                          unsigned int v77 = v37[3];
                          uint64_t v78 = *((void *)v77 + 2);
                          v68 += v78;
                          ++v74;
                          int v31 = *(int **)*v3;
                          unint64_t v79 = v31[2];
                        }
                        while (v74 < v79);
                        char v38 = *v37;
                        v67 += v74;
                      }
                      else
                      {
                        unint64_t v79 = 0;
                        v75 = *(void **)(v30 + 24);
                        uint64_t v76 = v75[2];
                        unsigned int v77 = v37[3];
                        uint64_t v78 = *((void *)v77 + 2);
                      }
                      uint64_t v80 = v75[1];
                      uint64_t v69 = v80 + v69 - v79 * v76;
                      uint64_t v68 = *((void *)v77 + 1) + v68 - v78 * v38[2];
                      ++v73;
                      unint64_t v81 = v31[1];
                    }
                    while (v73 < v81);
                    int v65 = *v31;
                    unint64_t v66 = v266;
                  }
                  else
                  {
                    unint64_t v81 = 0;
                    v75 = *(void **)(v30 + 24);
                    uint64_t v80 = v75[1];
                  }
                  uint64_t v69 = *v75 + v69 - v81 * v80;
                  uint64_t v68 = *(void *)v37[3] + v68 - *((void *)v37[3] + 1) * v38[1];
                  ++v66;
                }
                while (v66 < v65);
              }
              break;
            case 4uLL:
              int v82 = *v31;
              if (*v31)
              {
                unint64_t v83 = 0;
                uint64_t v84 = 0;
                uint64_t v85 = 0;
                uint64_t v86 = 0;
                uint64_t v87 = *(void *)(v30 + 152);
                uint64_t v88 = v37[19];
                uint64_t v89 = v29[19];
                do
                {
                  if (v31[1])
                  {
                    unint64_t v255 = v83;
                    unint64_t v90 = 0;
                    do
                    {
                      if (v31[2])
                      {
                        unint64_t v267 = v90;
                        unint64_t v91 = 0;
                        do
                        {
                          if (v31[3])
                          {
                            unint64_t v92 = 0;
                            do
                            {
                              *(float *)(v89 + 4 * v84 + 4 * v92) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v87 + 4 * v86), *(float *)&v88[v85]);
                              uint64_t v30 = *v3;
                              int v93 = *(void **)(*v3 + 24);
                              uint64_t v94 = v93[3];
                              v86 += v94;
                              BOOL v37 = (int **)v3[2];
                              unsigned int v95 = v37[3];
                              uint64_t v96 = *((void *)v95 + 3);
                              v85 += v96;
                              ++v92;
                              int v31 = *(int **)*v3;
                              unint64_t v97 = v31[3];
                            }
                            while (v92 < v97);
                            char v38 = *v37;
                            v84 += v92;
                          }
                          else
                          {
                            unint64_t v97 = 0;
                            int v93 = *(void **)(v30 + 24);
                            uint64_t v94 = v93[3];
                            unsigned int v95 = v37[3];
                            uint64_t v96 = *((void *)v95 + 3);
                          }
                          uint64_t v98 = v93[2];
                          uint64_t v86 = v98 + v86 - v97 * v94;
                          uint64_t v85 = *((void *)v95 + 2) + v85 - v96 * v38[3];
                          ++v91;
                          unint64_t v99 = v31[2];
                        }
                        while (v91 < v99);
                        unint64_t v90 = v267;
                      }
                      else
                      {
                        unint64_t v99 = 0;
                        int v93 = *(void **)(v30 + 24);
                        uint64_t v98 = v93[2];
                      }
                      uint64_t v86 = v93[1] + v86 - v99 * v98;
                      uint64_t v85 = *((void *)v37[3] + 1) + v85 - *((void *)v37[3] + 2) * v38[2];
                      ++v90;
                      unint64_t v100 = v31[1];
                    }
                    while (v90 < v100);
                    int v82 = *v31;
                    unint64_t v83 = v255;
                  }
                  else
                  {
                    unint64_t v100 = 0;
                  }
                  uint64_t v86 = **(void **)(v30 + 24) + v86 - *(void *)(*(void *)(v30 + 24) + 8) * v100;
                  uint64_t v85 = *(void *)v37[3] + v85 - *((void *)v37[3] + 1) * v38[1];
                  ++v83;
                }
                while (v83 < v82);
              }
              break;
            default:
              if (v29[6])
              {
                unint64_t v115 = 0;
                v256 = v37[19];
                uint64_t v268 = *(void *)(v30 + 152);
                uint64_t v116 = v29[19];
                do
                {
                  uint64_t v117 = *(void *)*v3;
                  unint64_t v118 = (unint64_t)(*(void *)(*v3 + 8) - v117) >> 2;
                  uint64_t v119 = 0;
                  uint64_t v120 = (v118 - 1);
                  if ((int)v118 - 1 >= 0)
                  {
                    uint64_t v121 = *(void *)(*v3 + 24);
                    int v122 = v115;
                    do
                    {
                      ldiv_t v123 = ldiv(v122, *(int *)(v117 + 4 * v120));
                      int v122 = v123.quot;
                      v119 += *(void *)(v121 + 8 * v120--) * v123.rem;
                    }
                    while (v120 != -1);
                  }
                  unsigned int v124 = **v5;
                  unint64_t v125 = (unint64_t)((char *)(*v5)[1] - (char *)v124) >> 2;
                  uint64_t v126 = 0;
                  uint64_t v127 = (v125 - 1);
                  if ((int)v125 - 1 >= 0)
                  {
                    unsigned int v128 = (*v5)[3];
                    int v129 = v115;
                    do
                    {
                      ldiv_t v130 = ldiv(v129, v124[v127]);
                      int v129 = v130.quot;
                      v126 += *(void *)&v128[2 * v127--] * v130.rem;
                    }
                    while (v127 != -1);
                  }
                  *(float *)(v116 + 4 * v115++) = mlx::core::detail::LogAddExp::operator()<float>(*(float *)(v268 + 4 * (int)v119), *(float *)&v256[(int)v126]);
                }
                while (v115 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
  }
}

void sub_256E27070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void mlx::core::Maximum::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Maximum::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::Maximum>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          LOBYTE(v7) = **(unsigned char **)(*a1 + 152) != 0;
          if ((v7 & (**(unsigned char **)(*a2 + 152) == 0)) == 0) {
            LOBYTE(v7) = **(unsigned char **)(*a2 + 152) != 0;
          }
          goto LABEL_14;
        case 1:
          int v27 = *(_DWORD *)(*a2 + 160);
          if (v27 >= 1)
          {
            int v28 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v29 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v30 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v31 = v27 + 1;
            do
            {
              BOOL v32 = v28 != 0;
              int v33 = *v30++;
              BOOL v34 = v33 != 0;
              if (v28 == 0 || v33 != 0) {
                BOOL v32 = v34;
              }
              *v29++ = v32;
              --v31;
            }
            while (v31 > 1);
          }
          return;
        case 2:
          int v35 = *(_DWORD *)(*a1 + 160);
          if (v35 >= 1)
          {
            int v36 = **(unsigned __int8 **)(*a2 + 152);
            BOOL v37 = **(unsigned char **)(*a2 + 152) == 0;
            char v38 = *(BOOL **)(*(void *)a3 + 152);
            unint64_t v39 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v40 = v35 + 1;
            do
            {
              BOOL v41 = v36 != 0;
              int v42 = *v39++;
              BOOL v43 = v42 != 0;
              if (v43 && v37) {
                BOOL v41 = v43;
              }
              *v38++ = v41;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 3:
          int v44 = *(_DWORD *)(*(void *)a3 + 48);
          if (v44 >= 1)
          {
            unsigned int v45 = *(BOOL **)(*(void *)a3 + 152);
            int v46 = *(unsigned __int8 **)(*a2 + 152);
            int v47 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v48 = v44 + 1;
            do
            {
              int v49 = *v47++;
              BOOL v50 = v49 != 0;
              int v51 = *v46++;
              BOOL v52 = v51 != 0;
              if (!v50 || v51 != 0) {
                BOOL v50 = v52;
              }
              *v45++ = v50;
              --v48;
            }
            while (v48 > 1);
          }
          return;
        default:
          unsigned int v18 = *(void **)a3;
          float v19 = (void *)*a1;
          float v20 = *(int **)*a1;
          uint64_t v21 = (v19[1] - (void)v20) >> 2;
          uint64_t v22 = (v21 - 1);
          if ((int)v22 >= -1) {
            int v23 = -1;
          }
          else {
            int v23 = v21 - 1;
          }
          int v24 = v23 + 1;
          int v25 = v21 + 1;
          break;
      }
      while (1)
      {
        unsigned int v26 = v25 - 2;
        if (v25 - 2 < 0) {
          break;
        }
        --v25;
        if (*(void *)(v19[3] + 8 * v26) != *(void *)(v18[3] + 8 * v26)) {
          goto LABEL_201;
        }
      }
      int v25 = v24;
LABEL_201:
      uint64_t v243 = (void *)*a2;
      uint64_t v244 = *(int **)*a2;
      uint64_t v245 = (v243[1] - (void)v244) >> 2;
      uint64_t v246 = (v245 - 1);
      if ((int)v246 >= -1) {
        int v247 = -1;
      }
      else {
        int v247 = v245 - 1;
      }
      int v248 = v247 + 1;
      int v249 = v245 + 1;
      while (1)
      {
        unsigned int v250 = v249 - 2;
        if (v249 - 2 < 0) {
          break;
        }
        --v249;
        if (*(void *)(v243[3] + 8 * v250) != *(void *)(v18[3] + 8 * v250)) {
          goto LABEL_255;
        }
      }
      int v249 = v248;
LABEL_255:
      int v297 = v21 + 1;
      while (1)
      {
        unsigned int v298 = v297 - 2;
        if (v297 - 2 < 0) {
          break;
        }
        --v297;
        if (*(void *)(v19[3] + 8 * v298)) {
          goto LABEL_290;
        }
      }
      int v297 = v24;
LABEL_290:
      int v311 = v245 + 1;
      while (1)
      {
        unsigned int v312 = v311 - 2;
        if (v311 - 2 < 0) {
          break;
        }
        --v311;
        if (*(void *)(v243[3] + 8 * v312)) {
          goto LABEL_325;
        }
      }
      int v311 = v248;
LABEL_325:
      unint64_t v325 = (uint64_t)(v18[1] - *v18) >> 2;
      if (v25 <= v249) {
        int v326 = v249;
      }
      else {
        int v326 = v25;
      }
      if (v25 <= v311) {
        int v25 = v311;
      }
      if (v297 > v249) {
        int v249 = v297;
      }
      if (v325 > v249)
      {
        int v327 = 1;
      }
      else
      {
        int v249 = (uint64_t)(v18[1] - *v18) >> 2;
        int v327 = 4;
      }
      if (v325 > v25)
      {
        int v328 = 2;
      }
      else
      {
        int v25 = v249;
        int v328 = v327;
      }
      if (v325 > v326)
      {
        int v25 = v326;
        int v328 = 3;
      }
      uint64_t v2084 = v246;
      uint64_t v2100 = v22;
      if (!v25) {
        goto LABEL_356;
      }
      unint64_t v329 = *(void *)(v18[3] + 8 * (v25 - 1));
      if (v329 < 0x10) {
        goto LABEL_356;
      }
      switch(v328)
      {
        case 1:
          if (v25 == 2)
          {
            uint64_t v1461 = *v20;
            if (v1461)
            {
              uint64_t v1462 = 0;
              uint64_t v1463 = 0;
              uint64_t v1464 = 0;
              uint64_t v1465 = v19[19];
              uint64_t v1466 = v243[19];
              uint64_t v1467 = v18[19];
              unint64_t v1468 = v20[1];
              uint64_t v1469 = (uint64_t *)v19[3];
              uint64_t v1470 = *v1469;
              uint64_t v1471 = v1469[1];
              uint64_t v1472 = (uint64_t *)v243[3];
              uint64_t v1474 = *v1472;
              uint64_t v1473 = v1472[1];
              if (v1468 <= 1) {
                uint64_t v1475 = 1;
              }
              else {
                uint64_t v1475 = v20[1];
              }
              uint64_t v1476 = v1470 - v1471 * v1468;
              uint64_t v1477 = v1474 - v1473 * v244[1];
              do
              {
                if (v1468)
                {
                  uint64_t v1478 = 0;
                  uint64_t v1479 = v1466 + v1463;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1480 = 0;
                      int v1481 = *(unsigned __int8 *)(v1465 + v1464);
                      unsigned int v1482 = v329 + 1;
                      do
                      {
                        BOOL v1483 = v1481 != 0;
                        if (v1481 == 0 || *(unsigned char *)(v1479 + v1480) != 0) {
                          BOOL v1483 = *(unsigned char *)(v1479 + v1480) != 0;
                        }
                        *(unsigned char *)(v1467 + v1480) = v1483;
                        --v1482;
                        ++v1480;
                      }
                      while (v1482 > 1);
                    }
                    v1464 += v1471;
                    v1463 += v1473;
                    v1467 += (int)v329;
                    ++v1478;
                    v1479 += v1473;
                  }
                  while (v1478 != v1475);
                }
                v1464 += v1476;
                v1463 += v1477;
                ++v1462;
              }
              while (v1462 != v1461);
            }
          }
          else if (v25 == 1)
          {
            uint64_t v1045 = *v20;
            if (v1045)
            {
              uint64_t v1046 = 0;
              uint64_t v1047 = 0;
              uint64_t v1048 = v19[19];
              uint64_t v1049 = v243[19];
              uint64_t v1050 = v18[19];
              uint64_t v1051 = *(void *)v19[3];
              uint64_t v1052 = *(void *)v243[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v1053 = 0;
                  int v1054 = *(unsigned __int8 *)(v1048 + v1047);
                  unsigned int v1055 = v329 + 1;
                  do
                  {
                    BOOL v1056 = v1054 != 0;
                    if (v1054 == 0 || *(unsigned char *)(v1049 + v1053) != 0) {
                      BOOL v1056 = *(unsigned char *)(v1049 + v1053) != 0;
                    }
                    *(unsigned char *)(v1050 + v1053) = v1056;
                    --v1055;
                    ++v1053;
                  }
                  while (v1055 > 1);
                }
                v1047 += v1051;
                v1050 += (int)v329;
                ++v1046;
                v1049 += v1052;
              }
              while (v1046 != v1045);
            }
          }
          else
          {
            unint64_t v2041 = v18[6];
            if (v2041)
            {
              unint64_t v2070 = 0;
              uint64_t v1992 = v243[19];
              uint64_t v2007 = v19[19];
              uint64_t v1484 = v18[19];
              do
              {
                uint64_t v1485 = 0;
                if ((v22 & 0x80000000) == 0)
                {
                  uint64_t v1486 = v19[3];
                  int quot = v2070;
                  do
                  {
                    ldiv_t v1488 = ldiv(quot, v20[v22]);
                    int quot = v1488.quot;
                    v1485 += *(void *)(v1486 + 8 * v22--) * v1488.rem;
                  }
                  while (v22 != -1);
                }
                uint64_t v1489 = v2084;
                if ((v2084 & 0x80000000) != 0)
                {
                  LODWORD(v1490) = 0;
                }
                else
                {
                  uint64_t v1490 = 0;
                  uint64_t v1491 = v243[3];
                  int v1492 = v2070;
                  do
                  {
                    ldiv_t v1493 = ldiv(v1492, v244[v1489]);
                    int v1492 = v1493.quot;
                    v1490 += *(void *)(v1491 + 8 * v1489--) * v1493.rem;
                  }
                  while (v1489 != -1);
                }
                uint64_t v22 = v2100;
                if ((int)v329 >= 1)
                {
                  uint64_t v1494 = 0;
                  int v1495 = *(unsigned __int8 *)(v2007 + (int)v1485);
                  unsigned int v1496 = v329 + 1;
                  uint64_t v1497 = v1992 + (int)v1490;
                  do
                  {
                    BOOL v1498 = v1495 != 0;
                    if (v1495 == 0 || *(unsigned char *)(v1497 + v1494) != 0) {
                      BOOL v1498 = *(unsigned char *)(v1497 + v1494) != 0;
                    }
                    *(unsigned char *)(v1484 + v1494) = v1498;
                    --v1496;
                    ++v1494;
                  }
                  while (v1496 > 1);
                }
                v1484 += (int)v329;
                v2070 += (int)v329;
              }
              while (v2070 < v2041);
            }
          }
          break;
        case 2:
          if (v25 == 2)
          {
            uint64_t v1499 = *v20;
            if (v1499)
            {
              uint64_t v1500 = 0;
              uint64_t v1501 = 0;
              uint64_t v1502 = 0;
              uint64_t v1503 = v19[19];
              uint64_t v1504 = v243[19];
              uint64_t v1505 = v18[19];
              unint64_t v1506 = v20[1];
              uint64_t v1507 = (uint64_t *)v19[3];
              uint64_t v1508 = *v1507;
              uint64_t v1509 = v1507[1];
              uint64_t v1510 = (uint64_t *)v243[3];
              uint64_t v1512 = *v1510;
              uint64_t v1511 = v1510[1];
              if (v1506 <= 1) {
                uint64_t v1513 = 1;
              }
              else {
                uint64_t v1513 = v20[1];
              }
              uint64_t v1514 = v1508 - v1509 * v1506;
              uint64_t v1515 = v1512 - v1511 * v244[1];
              do
              {
                if (v1506)
                {
                  uint64_t v1516 = 0;
                  uint64_t v1517 = v1503 + v1502;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1518 = 0;
                      int v1519 = *(unsigned __int8 *)(v1504 + v1501);
                      BOOL v1520 = *(unsigned char *)(v1504 + v1501) == 0;
                      unsigned int v1521 = v329 + 1;
                      do
                      {
                        BOOL v1522 = v1519 != 0;
                        if (*(unsigned char *)(v1517 + v1518) != 0 && v1520) {
                          BOOL v1522 = *(unsigned char *)(v1517 + v1518) != 0;
                        }
                        *(unsigned char *)(v1505 + v1518) = v1522;
                        --v1521;
                        ++v1518;
                      }
                      while (v1521 > 1);
                    }
                    v1502 += v1509;
                    v1501 += v1511;
                    v1505 += (int)v329;
                    ++v1516;
                    v1517 += v1509;
                  }
                  while (v1516 != v1513);
                }
                v1502 += v1514;
                v1501 += v1515;
                ++v1500;
              }
              while (v1500 != v1499);
            }
          }
          else if (v25 == 1)
          {
            uint64_t v1057 = *v20;
            if (v1057)
            {
              uint64_t v1058 = 0;
              uint64_t v1059 = 0;
              uint64_t v1060 = v19[19];
              uint64_t v1061 = v243[19];
              uint64_t v1062 = v18[19];
              uint64_t v1063 = *(void *)v19[3];
              uint64_t v1064 = *(void *)v243[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v1065 = 0;
                  int v1066 = *(unsigned __int8 *)(v1061 + v1059);
                  BOOL v1067 = *(unsigned char *)(v1061 + v1059) == 0;
                  unsigned int v1068 = v329 + 1;
                  do
                  {
                    BOOL v1069 = v1066 != 0;
                    if (*(unsigned char *)(v1060 + v1065) != 0 && v1067) {
                      BOOL v1069 = *(unsigned char *)(v1060 + v1065) != 0;
                    }
                    *(unsigned char *)(v1062 + v1065) = v1069;
                    --v1068;
                    ++v1065;
                  }
                  while (v1068 > 1);
                }
                v1059 += v1064;
                v1062 += (int)v329;
                ++v1058;
                v1060 += v1063;
              }
              while (v1058 != v1057);
            }
          }
          else
          {
            unint64_t v2042 = v18[6];
            if (v2042)
            {
              unint64_t v2071 = 0;
              uint64_t v1993 = v243[19];
              uint64_t v2008 = v19[19];
              uint64_t v1523 = v18[19];
              do
              {
                uint64_t v1524 = 0;
                if ((v22 & 0x80000000) == 0)
                {
                  uint64_t v1525 = v19[3];
                  int v1526 = v2071;
                  do
                  {
                    ldiv_t v1527 = ldiv(v1526, v20[v22]);
                    int v1526 = v1527.quot;
                    v1524 += *(void *)(v1525 + 8 * v22--) * v1527.rem;
                  }
                  while (v22 != -1);
                }
                uint64_t v1528 = v2084;
                if ((v2084 & 0x80000000) != 0)
                {
                  LODWORD(v1529) = 0;
                }
                else
                {
                  uint64_t v1529 = 0;
                  uint64_t v1530 = v243[3];
                  int v1531 = v2071;
                  do
                  {
                    ldiv_t v1532 = ldiv(v1531, v244[v1528]);
                    int v1531 = v1532.quot;
                    v1529 += *(void *)(v1530 + 8 * v1528--) * v1532.rem;
                  }
                  while (v1528 != -1);
                }
                uint64_t v22 = v2100;
                if ((int)v329 >= 1)
                {
                  uint64_t v1533 = 0;
                  int v1534 = *(unsigned __int8 *)(v1993 + (int)v1529);
                  BOOL v1535 = *(unsigned char *)(v1993 + (int)v1529) == 0;
                  unsigned int v1536 = v329 + 1;
                  do
                  {
                    BOOL v1537 = v1534 != 0;
                    if (*(unsigned char *)(v2008 + (int)v1524 + v1533) != 0 && v1535) {
                      BOOL v1537 = *(unsigned char *)(v2008 + (int)v1524 + v1533) != 0;
                    }
                    *(unsigned char *)(v1523 + v1533) = v1537;
                    --v1536;
                    ++v1533;
                  }
                  while (v1536 > 1);
                }
                v1523 += (int)v329;
                v2071 += (int)v329;
              }
              while (v2071 < v2042);
            }
          }
          break;
        case 3:
          if (v25 == 2)
          {
            uint64_t v1210 = *v20;
            if (v1210)
            {
              uint64_t v1211 = 0;
              uint64_t v1212 = 0;
              uint64_t v1213 = 0;
              uint64_t v1214 = v19[19];
              uint64_t v1215 = v243[19];
              uint64_t v1216 = v18[19];
              unint64_t v1217 = v20[1];
              uint64_t v1218 = (uint64_t *)v19[3];
              uint64_t v1219 = *v1218;
              uint64_t v1220 = v1218[1];
              uint64_t v1221 = (uint64_t *)v243[3];
              uint64_t v1223 = *v1221;
              uint64_t v1222 = v1221[1];
              if (v1217 <= 1) {
                uint64_t v1224 = 1;
              }
              else {
                uint64_t v1224 = v20[1];
              }
              uint64_t v1225 = v1219 - v1220 * v1217;
              uint64_t v1226 = v1223 - v1222 * v244[1];
              do
              {
                if (v1217)
                {
                  uint64_t v1227 = 0;
                  uint64_t v1228 = v1215 + v1212;
                  uint64_t v1229 = v1214 + v1213;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1230 = 0;
                      unsigned int v1231 = v329 + 1;
                      do
                      {
                        BOOL v1232 = *(unsigned char *)(v1229 + v1230) != 0;
                        if (!v1232 || *(unsigned char *)(v1228 + v1230) != 0) {
                          BOOL v1232 = *(unsigned char *)(v1228 + v1230) != 0;
                        }
                        *(unsigned char *)(v1216 + v1230) = v1232;
                        --v1231;
                        ++v1230;
                      }
                      while (v1231 > 1);
                    }
                    v1213 += v1220;
                    v1212 += v1222;
                    v1216 += (int)v329;
                    ++v1227;
                    v1228 += v1222;
                    v1229 += v1220;
                  }
                  while (v1227 != v1224);
                }
                v1213 += v1225;
                v1212 += v1226;
                ++v1211;
              }
              while (v1211 != v1210);
            }
          }
          else if (v25 == 1)
          {
            uint64_t v330 = *v20;
            if (v330)
            {
              uint64_t v331 = 0;
              uint64_t v332 = v19[19];
              uint64_t v333 = v243[19];
              uint64_t v334 = v18[19];
              uint64_t v335 = *(void *)v19[3];
              uint64_t v336 = *(void *)v243[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v337 = 0;
                  unsigned int v338 = v329 + 1;
                  do
                  {
                    BOOL v339 = *(unsigned char *)(v332 + v337) != 0;
                    if (!v339 || *(unsigned char *)(v333 + v337) != 0) {
                      BOOL v339 = *(unsigned char *)(v333 + v337) != 0;
                    }
                    *(unsigned char *)(v334 + v337) = v339;
                    --v338;
                    ++v337;
                  }
                  while (v338 > 1);
                }
                v334 += (int)v329;
                ++v331;
                v333 += v336;
                v332 += v335;
              }
              while (v331 != v330);
            }
          }
          else
          {
            unint64_t v2034 = v18[6];
            if (v2034)
            {
              unint64_t v2063 = 0;
              uint64_t v1987 = v243[19];
              uint64_t v2004 = v19[19];
              uint64_t v1233 = v18[19];
              do
              {
                uint64_t v1234 = 0;
                if ((v22 & 0x80000000) == 0)
                {
                  uint64_t v1235 = v19[3];
                  int v1236 = v2063;
                  do
                  {
                    ldiv_t v1237 = ldiv(v1236, v20[v22]);
                    int v1236 = v1237.quot;
                    v1234 += *(void *)(v1235 + 8 * v22--) * v1237.rem;
                  }
                  while (v22 != -1);
                }
                uint64_t v1238 = v2084;
                if ((v2084 & 0x80000000) != 0)
                {
                  LODWORD(v1239) = 0;
                }
                else
                {
                  uint64_t v1239 = 0;
                  uint64_t v1240 = v243[3];
                  int v1241 = v2063;
                  do
                  {
                    ldiv_t v1242 = ldiv(v1241, v244[v1238]);
                    int v1241 = v1242.quot;
                    v1239 += *(void *)(v1240 + 8 * v1238--) * v1242.rem;
                  }
                  while (v1238 != -1);
                }
                uint64_t v22 = v2100;
                if ((int)v329 >= 1)
                {
                  uint64_t v1243 = 0;
                  uint64_t v1244 = v1987 + (int)v1239;
                  unsigned int v1245 = v329 + 1;
                  do
                  {
                    BOOL v1246 = *(unsigned char *)(v2004 + (int)v1234 + v1243) != 0;
                    if (!v1246 || *(unsigned char *)(v1244 + v1243) != 0) {
                      BOOL v1246 = *(unsigned char *)(v1244 + v1243) != 0;
                    }
                    *(unsigned char *)(v1233 + v1243) = v1246;
                    --v1245;
                    ++v1243;
                  }
                  while (v1245 > 1);
                }
                v1233 += (int)v329;
                v2063 += (int)v329;
              }
              while (v2063 < v2034);
            }
          }
          break;
        default:
LABEL_356:
          switch(v325)
          {
            case 1uLL:
              uint64_t v340 = v18[6];
              if (v340)
              {
                int v341 = (unsigned char *)v19[19];
                int v342 = (unsigned char *)v243[19];
                int v343 = (BOOL *)v18[19];
                uint64_t v344 = *(void *)v19[3];
                uint64_t v345 = *(void *)v243[3];
                do
                {
                  BOOL v346 = *v341 != 0;
                  if (!v346 || *v342 != 0) {
                    BOOL v346 = *v342 != 0;
                  }
                  *v343++ = v346;
                  v342 += v345;
                  v341 += v344;
                  --v340;
                }
                while (v340);
              }
              break;
            case 2uLL:
              uint64_t v495 = *v20;
              if (v495)
              {
                uint64_t v496 = 0;
                uint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = v19[19];
                uint64_t v501 = v243[19];
                uint64_t v502 = v18[19];
                unint64_t v503 = v20[1];
                unint64_t v504 = (uint64_t *)v19[3];
                uint64_t v505 = *v504;
                uint64_t v506 = v504[1];
                uint64_t v507 = (uint64_t *)v243[3];
                uint64_t v508 = *v507;
                uint64_t v509 = v507[1];
                uint64_t v510 = v508 - v509 * v244[1];
                if (v503 <= 1) {
                  uint64_t v511 = 1;
                }
                else {
                  uint64_t v511 = v20[1];
                }
                uint64_t v512 = v505 - v506 * v503;
                do
                {
                  if (v503)
                  {
                    uint64_t v513 = v497 + v511;
                    uint64_t v514 = (BOOL *)(v502 + v497);
                    uint64_t v515 = v511;
                    do
                    {
                      BOOL v516 = *(unsigned char *)(v500 + v499) != 0;
                      if (!v516 || *(unsigned char *)(v501 + v498) != 0) {
                        BOOL v516 = *(unsigned char *)(v501 + v498) != 0;
                      }
                      *v514++ = v516;
                      v499 += v506;
                      v498 += v509;
                      --v515;
                    }
                    while (v515);
                    uint64_t v497 = v513;
                  }
                  v499 += v512;
                  v498 += v510;
                  ++v496;
                }
                while (v496 != v495);
              }
              break;
            case 3uLL:
              uint64_t v517 = *v20;
              if (v517)
              {
                uint64_t v518 = 0;
                uint64_t v519 = 0;
                uint64_t v520 = 0;
                uint64_t v521 = 0;
                uint64_t v522 = v19[19];
                uint64_t v523 = v243[19];
                uint64_t v524 = v18[19];
                unint64_t v525 = v20[1];
                uint64_t v526 = (void *)v19[3];
                uint64_t v527 = v526[1];
                unint64_t v528 = (void *)v243[3];
                uint64_t v529 = v528[1];
                uint64_t v530 = *v528 - v529 * v244[1];
                if (v525 <= 1) {
                  uint64_t v531 = 1;
                }
                else {
                  uint64_t v531 = v20[1];
                }
                unint64_t v532 = *v526 - v527 * v525;
                do
                {
                  if (v525)
                  {
                    uint64_t v533 = 0;
                    unint64_t v534 = v20[2];
                    uint64_t v535 = v526[2];
                    uint64_t v536 = v528[2];
                    if (v534 <= 1) {
                      uint64_t v537 = 1;
                    }
                    else {
                      uint64_t v537 = v20[2];
                    }
                    uint64_t v538 = v529 - v536 * v244[2];
                    do
                    {
                      uint64_t v539 = v537;
                      if (v534)
                      {
                        do
                        {
                          BOOL v540 = *(unsigned char *)(v522 + v521) != 0;
                          if (!v540 || *(unsigned char *)(v523 + v520) != 0) {
                            BOOL v540 = *(unsigned char *)(v523 + v520) != 0;
                          }
                          *(unsigned char *)(v524 + v519++) = v540;
                          v521 += v535;
                          v520 += v536;
                          --v539;
                        }
                        while (v539);
                      }
                      v521 += v527 - v535 * v534;
                      v520 += v538;
                      ++v533;
                    }
                    while (v533 != v531);
                  }
                  v521 += v532;
                  v520 += v530;
                  ++v518;
                }
                while (v518 != v517);
              }
              break;
            case 4uLL:
              uint64_t v2089 = *v20;
              if (v2089)
              {
                uint64_t v541 = 0;
                uint64_t v542 = 0;
                uint64_t v543 = 0;
                uint64_t v544 = 0;
                uint64_t v545 = v19[19];
                uint64_t v546 = v243[19];
                uint64_t v547 = v18[19];
                unint64_t v548 = v20[1];
                uint64_t v549 = (void *)v19[3];
                uint64_t v550 = (void *)v243[3];
                uint64_t v1986 = v550[1];
                uint64_t v2002 = v549[1];
                uint64_t v2027 = *v550 - v1986 * v244[1];
                int v2056 = v20[1];
                if (v548 <= 1) {
                  uint64_t v551 = 1;
                }
                else {
                  uint64_t v551 = v20[1];
                }
                unint64_t v2014 = *v549 - v549[1] * v548;
                do
                {
                  uint64_t v2107 = v541;
                  if (v2056)
                  {
                    uint64_t v552 = 0;
                    unint64_t v553 = v20[2];
                    uint64_t v554 = v549[2];
                    uint64_t v555 = v550[2];
                    if (v553 <= 1) {
                      uint64_t v556 = 1;
                    }
                    else {
                      uint64_t v556 = v20[2];
                    }
                    uint64_t v557 = v1986 - v555 * v244[2];
                    do
                    {
                      if (v553)
                      {
                        uint64_t v558 = 0;
                        unint64_t v559 = v20[3];
                        uint64_t v560 = v549[3];
                        uint64_t v561 = v550[3];
                        if (v559 <= 1) {
                          uint64_t v562 = 1;
                        }
                        else {
                          uint64_t v562 = v20[3];
                        }
                        uint64_t v563 = v555 - v561 * v244[3];
                        do
                        {
                          uint64_t v564 = v562;
                          if (v559)
                          {
                            do
                            {
                              if (*(unsigned char *)(v545 + v544) != 0 && *(unsigned char *)(v546 + v543) == 0) {
                                BOOL v565 = *(unsigned char *)(v545 + v544) != 0;
                              }
                              else {
                                BOOL v565 = *(unsigned char *)(v546 + v543) != 0;
                              }
                              *(unsigned char *)(v547 + v542++) = v565;
                              v544 += v560;
                              v543 += v561;
                              --v564;
                            }
                            while (v564);
                          }
                          v544 += v554 - v560 * v559;
                          v543 += v563;
                          ++v558;
                        }
                        while (v558 != v556);
                      }
                      v544 += v2002 - v554 * v553;
                      v543 += v557;
                      ++v552;
                    }
                    while (v552 != v551);
                  }
                  v544 += v2014;
                  v543 += v2027;
                  uint64_t v541 = v2107 + 1;
                }
                while (v2107 + 1 != v2089);
              }
              break;
            default:
              uint64_t v479 = v18[6];
              if (v479)
              {
                uint64_t v480 = 0;
                uint64_t v2026 = v243[19];
                uint64_t v2055 = v19[19];
                uint64_t v2013 = v18[19];
                do
                {
                  uint64_t v481 = 0;
                  if ((v22 & 0x80000000) == 0)
                  {
                    uint64_t v482 = v19[3];
                    int v483 = v480;
                    do
                    {
                      ldiv_t v484 = ldiv(v483, v20[v22]);
                      int v483 = v484.quot;
                      v481 += *(void *)(v482 + 8 * v22--) * v484.rem;
                    }
                    while (v22 != -1);
                  }
                  uint64_t v485 = v2084;
                  if ((v2084 & 0x80000000) != 0)
                  {
                    LODWORD(v486) = 0;
                  }
                  else
                  {
                    uint64_t v486 = 0;
                    uint64_t v487 = v243[3];
                    int v488 = v480;
                    do
                    {
                      ldiv_t v489 = ldiv(v488, v244[v485]);
                      int v488 = v489.quot;
                      v486 += *(void *)(v487 + 8 * v485--) * v489.rem;
                    }
                    while (v485 != -1);
                  }
                  BOOL v490 = *(unsigned char *)(v2055 + (int)v481) != 0;
                  int v491 = *(unsigned __int8 *)(v2026 + (int)v486);
                  BOOL v492 = v491 == 0;
                  BOOL v493 = v491 != 0;
                  int v494 = v492;
                  if ((v490 & v494) == 0) {
                    LOBYTE(v490) = v493;
                  }
                  *(unsigned char *)(v2013 + v480++) = v490;
                  uint64_t v22 = v2100;
                }
                while (v480 != v479);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          unsigned int v7 = **(unsigned __int8 **)(*a1 + 152);
          if (v7 <= **(unsigned __int8 **)(*a2 + 152)) {
            LOBYTE(v7) = **(unsigned char **)(*a2 + 152);
          }
          goto LABEL_14;
        case 1:
          int v61 = *(_DWORD *)(*a2 + 160);
          if (v61 >= 1)
          {
            unsigned int v62 = **(unsigned __int8 **)(*a1 + 152);
            uint64_t v63 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v64 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v65 = v61 + 1;
            do
            {
              unsigned int v67 = *v64++;
              char v66 = v67;
              if (v62 > v67) {
                char v66 = v62;
              }
              *v63++ = v66;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        case 2:
          int v68 = *(_DWORD *)(*a1 + 160);
          if (v68 >= 1)
          {
            unsigned int v69 = **(unsigned __int8 **)(*a2 + 152);
            uint64_t v70 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v71 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v72 = v68 + 1;
            do
            {
              unsigned int v74 = *v71++;
              char v73 = v74;
              if (v74 <= v69) {
                char v73 = v69;
              }
              *v70++ = v73;
              --v72;
            }
            while (v72 > 1);
          }
          return;
        case 3:
          int v75 = *(_DWORD *)(*(void *)a3 + 48);
          if (v75 >= 1)
          {
            uint64_t v76 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v77 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v78 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v79 = v75 + 1;
            do
            {
              unsigned int v81 = *v78++;
              unsigned int v80 = v81;
              unsigned int v83 = *v77++;
              char v82 = v83;
              if (v80 <= v83) {
                LOBYTE(v80) = v82;
              }
              *v76++ = v80;
              --v79;
            }
            while (v79 > 1);
          }
          return;
        default:
          uint64_t v53 = *(void **)a3;
          uint64_t v54 = *a1;
          uint64_t v55 = *(int **)*a1;
          uint64_t v56 = (*(void *)(*a1 + 8) - (void)v55) >> 2;
          int v57 = v56 - 1;
          if ((int)v56 - 1 >= -1) {
            int v57 = -1;
          }
          int v58 = v57 + 1;
          int v59 = v56 + 1;
          break;
      }
      while (1)
      {
        unsigned int v60 = v59 - 2;
        if (v59 - 2 < 0) {
          break;
        }
        --v59;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v60) != *(void *)(v53[3] + 8 * v60)) {
          goto LABEL_209;
        }
      }
      int v59 = v58;
LABEL_209:
      uint64_t v251 = (int **)*a2;
      int v252 = *(int **)*a2;
      uint64_t v253 = (*(void *)(*a2 + 8) - (void)v252) >> 2;
      int v254 = v253 - 1;
      if ((int)v253 - 1 >= -1) {
        int v254 = -1;
      }
      int v255 = v254 + 1;
      int v256 = v253 + 1;
      while (1)
      {
        unsigned int v257 = v256 - 2;
        if (v256 - 2 < 0) {
          break;
        }
        --v256;
        if (*(void *)&v251[3][2 * v257] != *(void *)(v53[3] + 8 * v257)) {
          goto LABEL_260;
        }
      }
      int v256 = v255;
LABEL_260:
      int v299 = v56 + 1;
      while (1)
      {
        unsigned int v300 = v299 - 2;
        if (v299 - 2 < 0) {
          break;
        }
        --v299;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v300)) {
          goto LABEL_295;
        }
      }
      int v299 = v58;
LABEL_295:
      int v313 = v253 + 1;
      while (1)
      {
        int v314 = v313 - 2;
        if (v313 - 2 < 0) {
          break;
        }
        --v313;
        if (*(void *)&v251[3][2 * v314]) {
          goto LABEL_364;
        }
      }
      int v313 = v255;
LABEL_364:
      unint64_t v347 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v256) {
        int v348 = v256;
      }
      else {
        int v348 = v59;
      }
      if (v59 <= v313) {
        int v59 = v313;
      }
      if (v299 > v256) {
        int v256 = v299;
      }
      if (v347 > v256)
      {
        int v349 = 1;
      }
      else
      {
        int v256 = (uint64_t)(v53[1] - *v53) >> 2;
        int v349 = 4;
      }
      if (v347 > v59)
      {
        int v350 = 2;
      }
      else
      {
        int v59 = v256;
        int v350 = v349;
      }
      if (v347 > v348)
      {
        int v59 = v348;
        int v350 = 3;
      }
      if (!v59) {
        goto LABEL_396;
      }
      unint64_t v351 = *(void *)(v53[3] + 8 * (v59 - 1));
      if (v351 < 0x10) {
        goto LABEL_396;
      }
      uint64_t v2101 = *(void *)(v53[3] + 8 * (v59 - 1));
      switch(v350)
      {
        case 1:
          if (v59 == 2)
          {
            int v1538 = *v55;
            if (*v55)
            {
              unint64_t v1539 = 0;
              uint64_t v1540 = 0;
              uint64_t v1541 = 0;
              uint64_t v1542 = *(void *)(v54 + 152);
              uint64_t v1543 = v251[19];
              uint64_t v1544 = v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1545 = 0;
                  do
                  {
                    if ((int)v351 >= 1)
                    {
                      uint64_t v1546 = 0;
                      unsigned int v1547 = *(unsigned __int8 *)(v1542 + v1541);
                      unsigned int v1548 = v351 + 1;
                      do
                      {
                        unsigned int v1549 = *((unsigned __int8 *)v1543 + v1540 + v1546);
                        if (v1547 > v1549) {
                          LOBYTE(v1549) = v1547;
                        }
                        *(unsigned char *)(v1544 + v1546) = v1549;
                        --v1548;
                        ++v1546;
                      }
                      while (v1548 > 1);
                      uint64_t v54 = *a1;
                      uint64_t v251 = (int **)*a2;
                      uint64_t v55 = *(int **)*a1;
                    }
                    uint64_t v1550 = *(void **)(v54 + 24);
                    uint64_t v1551 = v1550[1];
                    v1541 += v1551;
                    v1540 += *((void *)v251[3] + 1);
                    v1544 += (int)v351;
                    ++v1545;
                    unint64_t v1552 = v55[1];
                  }
                  while (v1545 < v1552);
                  int v1538 = *v55;
                  int v252 = *v251;
                }
                else
                {
                  unint64_t v1552 = 0;
                  uint64_t v1550 = *(void **)(v54 + 24);
                  uint64_t v1551 = v1550[1];
                }
                uint64_t v1541 = *v1550 + v1541 - v1552 * v1551;
                uint64_t v1540 = *(void *)v251[3] + v1540 - *((void *)v251[3] + 1) * v252[1];
                ++v1539;
              }
              while (v1539 < v1538);
            }
          }
          else if (v59 == 1)
          {
            int v1070 = *v55;
            if (*v55)
            {
              unint64_t v1071 = 0;
              uint64_t v1072 = 0;
              uint64_t v1073 = 0;
              uint64_t v1074 = *(void *)(v54 + 152);
              uint64_t v1075 = v251[19];
              uint64_t v1076 = v53[19];
              do
              {
                if ((int)v351 >= 1)
                {
                  uint64_t v1077 = 0;
                  unsigned int v1078 = *(unsigned __int8 *)(v1074 + v1073);
                  unsigned int v1079 = v351 + 1;
                  do
                  {
                    unsigned int v1080 = *((unsigned __int8 *)v1075 + v1072 + v1077);
                    if (v1078 > v1080) {
                      LOBYTE(v1080) = v1078;
                    }
                    *(unsigned char *)(v1076 + v1077) = v1080;
                    --v1079;
                    ++v1077;
                  }
                  while (v1079 > 1);
                  uint64_t v54 = *a1;
                  uint64_t v251 = (int **)*a2;
                  int v1070 = **(_DWORD **)*a1;
                }
                v1073 += **(void **)(v54 + 24);
                v1072 += *(void *)v251[3];
                v1076 += (int)v351;
                ++v1071;
              }
              while (v1071 < v1070);
            }
          }
          else if (v53[6])
          {
            uint64_t v2022 = v251[19];
            uint64_t v2043 = *(void *)(v54 + 152);
            uint64_t v2072 = (int)v351;
            unint64_t v2096 = 0;
            unsigned int v2009 = v351 + 1;
            uint64_t v1553 = v53[19];
            do
            {
              uint64_t v1554 = *(void *)*a1;
              unint64_t v1555 = (unint64_t)(*(void *)(*a1 + 8) - v1554) >> 2;
              uint64_t v1556 = 0;
              uint64_t v1557 = (v1555 - 1);
              if ((int)v1555 - 1 >= 0)
              {
                uint64_t v1558 = *(void *)(*a1 + 24);
                int v1559 = v2096;
                do
                {
                  ldiv_t v1560 = ldiv(v1559, *(int *)(v1554 + 4 * v1557));
                  int v1559 = v1560.quot;
                  v1556 += *(void *)(v1558 + 8 * v1557--) * v1560.rem;
                }
                while (v1557 != -1);
              }
              uint64_t v1561 = *(void *)*a2;
              unint64_t v1562 = (unint64_t)(*(void *)(*a2 + 8) - v1561) >> 2;
              uint64_t v1563 = 0;
              uint64_t v1564 = (v1562 - 1);
              if ((int)v1562 - 1 >= 0)
              {
                uint64_t v1565 = *(void *)(*a2 + 24);
                int v1566 = v2096;
                do
                {
                  ldiv_t v1567 = ldiv(v1566, *(int *)(v1561 + 4 * v1564));
                  int v1566 = v1567.quot;
                  v1563 += *(void *)(v1565 + 8 * v1564--) * v1567.rem;
                }
                while (v1564 != -1);
              }
              if ((int)v2101 >= 1)
              {
                uint64_t v1568 = 0;
                unsigned int v1569 = *(unsigned __int8 *)(v2043 + (int)v1556);
                unsigned int v1570 = v2009;
                do
                {
                  unsigned int v1571 = *((unsigned __int8 *)v2022 + (int)v1563 + v1568);
                  if (v1569 > v1571) {
                    LOBYTE(v1571) = v1569;
                  }
                  *(unsigned char *)(v1553 + v1568) = v1571;
                  --v1570;
                  ++v1568;
                }
                while (v1570 > 1);
                uint64_t v53 = *(void **)a3;
              }
              v1553 += v2072;
              v2096 += v2072;
            }
            while (v2096 < v53[6]);
          }
          break;
        case 2:
          if (v59 == 2)
          {
            int v1572 = *v55;
            if (*v55)
            {
              unint64_t v1573 = 0;
              uint64_t v1574 = 0;
              uint64_t v1575 = 0;
              uint64_t v1576 = *(void *)(v54 + 152);
              uint64_t v1577 = v251[19];
              uint64_t v1578 = v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1579 = 0;
                  do
                  {
                    if ((int)v351 >= 1)
                    {
                      uint64_t v1580 = 0;
                      unsigned int v1581 = *((unsigned __int8 *)v1577 + v1574);
                      unsigned int v1582 = v351 + 1;
                      do
                      {
                        unsigned int v1583 = *(unsigned __int8 *)(v1576 + v1575 + v1580);
                        if (v1583 <= v1581) {
                          LOBYTE(v1583) = v1581;
                        }
                        *(unsigned char *)(v1578 + v1580) = v1583;
                        --v1582;
                        ++v1580;
                      }
                      while (v1582 > 1);
                      uint64_t v54 = *a1;
                      uint64_t v251 = (int **)*a2;
                      uint64_t v55 = *(int **)*a1;
                    }
                    uint64_t v1584 = *(void **)(v54 + 24);
                    uint64_t v1585 = v1584[1];
                    v1575 += v1585;
                    v1574 += *((void *)v251[3] + 1);
                    v1578 += (int)v351;
                    ++v1579;
                    unint64_t v1586 = v55[1];
                  }
                  while (v1579 < v1586);
                  int v1572 = *v55;
                  int v252 = *v251;
                }
                else
                {
                  unint64_t v1586 = 0;
                  uint64_t v1584 = *(void **)(v54 + 24);
                  uint64_t v1585 = v1584[1];
                }
                uint64_t v1575 = *v1584 + v1575 - v1586 * v1585;
                uint64_t v1574 = *(void *)v251[3] + v1574 - *((void *)v251[3] + 1) * v252[1];
                ++v1573;
              }
              while (v1573 < v1572);
            }
          }
          else if (v59 == 1)
          {
            int v1081 = *v55;
            if (*v55)
            {
              unint64_t v1082 = 0;
              uint64_t v1083 = 0;
              uint64_t v1084 = 0;
              uint64_t v1085 = *(void *)(v54 + 152);
              uint64_t v1086 = v251[19];
              uint64_t v1087 = v53[19];
              do
              {
                if ((int)v351 >= 1)
                {
                  uint64_t v1088 = 0;
                  unsigned int v1089 = *((unsigned __int8 *)v1086 + v1083);
                  unsigned int v1090 = v351 + 1;
                  do
                  {
                    unsigned int v1091 = *(unsigned __int8 *)(v1085 + v1084 + v1088);
                    if (v1091 <= v1089) {
                      LOBYTE(v1091) = v1089;
                    }
                    *(unsigned char *)(v1087 + v1088) = v1091;
                    --v1090;
                    ++v1088;
                  }
                  while (v1090 > 1);
                  uint64_t v54 = *a1;
                  uint64_t v251 = (int **)*a2;
                  int v1081 = **(_DWORD **)*a1;
                }
                v1084 += **(void **)(v54 + 24);
                v1083 += *(void *)v251[3];
                v1087 += (int)v351;
                ++v1082;
              }
              while (v1082 < v1081);
            }
          }
          else if (v53[6])
          {
            uint64_t v2023 = v251[19];
            uint64_t v2044 = *(void *)(v54 + 152);
            uint64_t v2073 = (int)v351;
            unint64_t v2097 = 0;
            unsigned int v2010 = v351 + 1;
            uint64_t v1587 = v53[19];
            do
            {
              uint64_t v1588 = *(void *)*a1;
              unint64_t v1589 = (unint64_t)(*(void *)(*a1 + 8) - v1588) >> 2;
              uint64_t v1590 = 0;
              uint64_t v1591 = (v1589 - 1);
              if ((int)v1589 - 1 >= 0)
              {
                uint64_t v1592 = *(void *)(*a1 + 24);
                int v1593 = v2097;
                do
                {
                  ldiv_t v1594 = ldiv(v1593, *(int *)(v1588 + 4 * v1591));
                  int v1593 = v1594.quot;
                  v1590 += *(void *)(v1592 + 8 * v1591--) * v1594.rem;
                }
                while (v1591 != -1);
              }
              uint64_t v1595 = *(void *)*a2;
              unint64_t v1596 = (unint64_t)(*(void *)(*a2 + 8) - v1595) >> 2;
              uint64_t v1597 = 0;
              uint64_t v1598 = (v1596 - 1);
              if ((int)v1596 - 1 >= 0)
              {
                uint64_t v1599 = *(void *)(*a2 + 24);
                int v1600 = v2097;
                do
                {
                  ldiv_t v1601 = ldiv(v1600, *(int *)(v1595 + 4 * v1598));
                  int v1600 = v1601.quot;
                  v1597 += *(void *)(v1599 + 8 * v1598--) * v1601.rem;
                }
                while (v1598 != -1);
              }
              if ((int)v2101 >= 1)
              {
                uint64_t v1602 = 0;
                unsigned int v1603 = *((unsigned __int8 *)v2023 + (int)v1597);
                unsigned int v1604 = v2010;
                do
                {
                  unsigned int v1605 = *(unsigned __int8 *)(v2044 + (int)v1590 + v1602);
                  if (v1605 <= v1603) {
                    LOBYTE(v1605) = v1603;
                  }
                  *(unsigned char *)(v1587 + v1602) = v1605;
                  --v1604;
                  ++v1602;
                }
                while (v1604 > 1);
                uint64_t v53 = *(void **)a3;
              }
              v1587 += v2073;
              v2097 += v2073;
            }
            while (v2097 < v53[6]);
          }
          break;
        case 3:
          if (v59 == 2)
          {
            int v1247 = *v55;
            if (*v55)
            {
              unint64_t v1248 = 0;
              uint64_t v1249 = 0;
              uint64_t v1250 = 0;
              uint64_t v1251 = *(void *)(v54 + 152);
              uint64_t v1252 = v251[19];
              uint64_t v1253 = v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1254 = 0;
                  do
                  {
                    if ((int)v351 >= 1)
                    {
                      uint64_t v1255 = 0;
                      unsigned int v1256 = v351 + 1;
                      do
                      {
                        unsigned int v1257 = *(unsigned __int8 *)(v1251 + v1250 + v1255);
                        if (v1257 <= *((unsigned __int8 *)v1252 + v1249 + v1255)) {
                          LOBYTE(v1257) = *((unsigned char *)v1252 + v1249 + v1255);
                        }
                        *(unsigned char *)(v1253 + v1255) = v1257;
                        --v1256;
                        ++v1255;
                      }
                      while (v1256 > 1);
                      uint64_t v54 = *a1;
                      uint64_t v251 = (int **)*a2;
                      uint64_t v55 = *(int **)*a1;
                    }
                    unint64_t v1258 = *(void **)(v54 + 24);
                    uint64_t v1259 = v1258[1];
                    v1250 += v1259;
                    v1249 += *((void *)v251[3] + 1);
                    v1253 += (int)v351;
                    ++v1254;
                    unint64_t v1260 = v55[1];
                  }
                  while (v1254 < v1260);
                  int v1247 = *v55;
                  int v252 = *v251;
                }
                else
                {
                  unint64_t v1260 = 0;
                  unint64_t v1258 = *(void **)(v54 + 24);
                  uint64_t v1259 = v1258[1];
                }
                uint64_t v1250 = *v1258 + v1250 - v1260 * v1259;
                uint64_t v1249 = *(void *)v251[3] + v1249 - *((void *)v251[3] + 1) * v252[1];
                ++v1248;
              }
              while (v1248 < v1247);
            }
          }
          else if (v59 == 1)
          {
            int v352 = *v55;
            if (*v55)
            {
              unint64_t v353 = 0;
              uint64_t v354 = 0;
              uint64_t v355 = 0;
              uint64_t v356 = *(void *)(v54 + 152);
              uint64_t v357 = v251[19];
              uint64_t v358 = v53[19];
              do
              {
                if ((int)v351 >= 1)
                {
                  uint64_t v359 = 0;
                  unsigned int v360 = v351 + 1;
                  do
                  {
                    unsigned int v361 = *(unsigned __int8 *)(v356 + v355 + v359);
                    if (v361 <= *((unsigned __int8 *)v357 + v354 + v359)) {
                      LOBYTE(v361) = *((unsigned char *)v357 + v354 + v359);
                    }
                    *(unsigned char *)(v358 + v359) = v361;
                    --v360;
                    ++v359;
                  }
                  while (v360 > 1);
                  uint64_t v54 = *a1;
                  uint64_t v251 = (int **)*a2;
                  int v352 = **(_DWORD **)*a1;
                }
                v355 += **(void **)(v54 + 24);
                v354 += *(void *)v251[3];
                v358 += (int)v351;
                ++v353;
              }
              while (v353 < v352);
            }
          }
          else if (v53[6])
          {
            uint64_t v2020 = v251[19];
            uint64_t v2035 = *(void *)(v54 + 152);
            uint64_t v2064 = (int)v351;
            unint64_t v2094 = 0;
            unsigned int v2005 = v351 + 1;
            uint64_t v1261 = v53[19];
            do
            {
              uint64_t v1262 = *(void *)*a1;
              unint64_t v1263 = (unint64_t)(*(void *)(*a1 + 8) - v1262) >> 2;
              uint64_t v1264 = 0;
              uint64_t v1265 = (v1263 - 1);
              if ((int)v1263 - 1 >= 0)
              {
                uint64_t v1266 = *(void *)(*a1 + 24);
                int v1267 = v2094;
                do
                {
                  ldiv_t v1268 = ldiv(v1267, *(int *)(v1262 + 4 * v1265));
                  int v1267 = v1268.quot;
                  v1264 += *(void *)(v1266 + 8 * v1265--) * v1268.rem;
                }
                while (v1265 != -1);
              }
              uint64_t v1269 = *(void *)*a2;
              unint64_t v1270 = (unint64_t)(*(void *)(*a2 + 8) - v1269) >> 2;
              uint64_t v1271 = 0;
              uint64_t v1272 = (v1270 - 1);
              if ((int)v1270 - 1 >= 0)
              {
                uint64_t v1273 = *(void *)(*a2 + 24);
                int v1274 = v2094;
                do
                {
                  ldiv_t v1275 = ldiv(v1274, *(int *)(v1269 + 4 * v1272));
                  int v1274 = v1275.quot;
                  v1271 += *(void *)(v1273 + 8 * v1272--) * v1275.rem;
                }
                while (v1272 != -1);
              }
              if ((int)v2101 >= 1)
              {
                uint64_t v1276 = 0;
                unsigned int v1277 = v2005;
                do
                {
                  unsigned int v1278 = *(unsigned __int8 *)(v2035 + (int)v1264 + v1276);
                  if (v1278 <= *((unsigned __int8 *)v2020 + (int)v1271 + v1276)) {
                    LOBYTE(v1278) = *((unsigned char *)v2020 + (int)v1271 + v1276);
                  }
                  *(unsigned char *)(v1261 + v1276) = v1278;
                  --v1277;
                  ++v1276;
                }
                while (v1277 > 1);
                uint64_t v53 = *(void **)a3;
              }
              v1261 += v2064;
              v2094 += v2064;
            }
            while (v2094 < v53[6]);
          }
          break;
        default:
LABEL_396:
          switch(v347)
          {
            case 1uLL:
              if (v53[6])
              {
                unint64_t v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = 0;
                uint64_t v365 = *(void *)(v54 + 152);
                uint64_t v366 = v251[19];
                uint64_t v367 = v53[19];
                do
                {
                  unsigned int v368 = *(unsigned __int8 *)(v365 + v364);
                  if (v368 <= *((unsigned __int8 *)v366 + v363)) {
                    LOBYTE(v368) = *((unsigned char *)v366 + v363);
                  }
                  *(unsigned char *)(v367 + v362) = v368;
                  v364 += **(void **)(*a1 + 24);
                  v363 += **(void **)(*a2 + 24);
                  ++v362;
                }
                while (v362 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v583 = *v55;
              if (*v55)
              {
                unint64_t v584 = 0;
                uint64_t v585 = 0;
                uint64_t v586 = 0;
                uint64_t v587 = 0;
                uint64_t v588 = *(void *)(v54 + 152);
                uint64_t v589 = v251[19];
                uint64_t v590 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v591 = 0;
                    do
                    {
                      unsigned int v592 = *(unsigned __int8 *)(v588 + v587);
                      if (v592 <= *((unsigned __int8 *)v589 + v586)) {
                        LOBYTE(v592) = *((unsigned char *)v589 + v586);
                      }
                      *(unsigned char *)(v590 + v585 + v591) = v592;
                      uint64_t v54 = *a1;
                      uint64_t v593 = *(void **)(*a1 + 24);
                      uint64_t v594 = v593[1];
                      v587 += v594;
                      uint64_t v251 = (int **)*a2;
                      uint64_t v595 = *(int **)(*a2 + 24);
                      uint64_t v596 = *((void *)v595 + 1);
                      v586 += v596;
                      ++v591;
                      uint64_t v55 = *(int **)*a1;
                      unint64_t v597 = v55[1];
                    }
                    while (v591 < v597);
                    int v583 = *v55;
                    int v252 = *v251;
                    v585 += v591;
                  }
                  else
                  {
                    unint64_t v597 = 0;
                    uint64_t v593 = *(void **)(v54 + 24);
                    uint64_t v594 = v593[1];
                    uint64_t v595 = v251[3];
                    uint64_t v596 = *((void *)v595 + 1);
                  }
                  uint64_t v587 = *v593 + v587 - v597 * v594;
                  uint64_t v586 = *(void *)v595 + v586 - v596 * v252[1];
                  ++v584;
                }
                while (v584 < v583);
              }
              break;
            case 3uLL:
              int v598 = *v55;
              if (*v55)
              {
                unint64_t v599 = 0;
                uint64_t v600 = 0;
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = *(void *)(v54 + 152);
                uint64_t v604 = v251[19];
                uint64_t v605 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v606 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v607 = 0;
                        do
                        {
                          unsigned int v608 = *(unsigned __int8 *)(v603 + v602);
                          if (v608 <= *((unsigned __int8 *)v604 + v601)) {
                            LOBYTE(v608) = *((unsigned char *)v604 + v601);
                          }
                          *(unsigned char *)(v605 + v600 + v607) = v608;
                          uint64_t v54 = *a1;
                          unint64_t v609 = *(void **)(*a1 + 24);
                          uint64_t v610 = v609[2];
                          v602 += v610;
                          uint64_t v251 = (int **)*a2;
                          uint64_t v611 = *(int **)(*a2 + 24);
                          uint64_t v612 = *((void *)v611 + 2);
                          v601 += v612;
                          ++v607;
                          uint64_t v55 = *(int **)*a1;
                          unint64_t v613 = v55[2];
                        }
                        while (v607 < v613);
                        int v252 = *v251;
                        v600 += v607;
                      }
                      else
                      {
                        unint64_t v613 = 0;
                        unint64_t v609 = *(void **)(v54 + 24);
                        uint64_t v610 = v609[2];
                        uint64_t v611 = v251[3];
                        uint64_t v612 = *((void *)v611 + 2);
                      }
                      uint64_t v614 = v609[1];
                      uint64_t v602 = v614 + v602 - v613 * v610;
                      uint64_t v601 = *((void *)v611 + 1) + v601 - v612 * v252[2];
                      ++v606;
                      unint64_t v615 = v55[1];
                    }
                    while (v606 < v615);
                    int v598 = *v55;
                  }
                  else
                  {
                    unint64_t v615 = 0;
                    unint64_t v609 = *(void **)(v54 + 24);
                    uint64_t v614 = v609[1];
                  }
                  uint64_t v602 = *v609 + v602 - v615 * v614;
                  uint64_t v601 = *(void *)v251[3] + v601 - *((void *)v251[3] + 1) * v252[1];
                  ++v599;
                }
                while (v599 < v598);
              }
              break;
            case 4uLL:
              int v616 = *v55;
              if (*v55)
              {
                unint64_t v617 = 0;
                uint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = 0;
                uint64_t v621 = *(void *)(v54 + 152);
                uint64_t v622 = v251[19];
                uint64_t v623 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v624 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v625 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            unint64_t v626 = 0;
                            do
                            {
                              unsigned int v627 = *(unsigned __int8 *)(v621 + v620);
                              if (v627 <= *((unsigned __int8 *)v622 + v619)) {
                                LOBYTE(v627) = *((unsigned char *)v622 + v619);
                              }
                              *(unsigned char *)(v623 + v618 + v626) = v627;
                              uint64_t v54 = *a1;
                              uint64_t v628 = *(void **)(*a1 + 24);
                              uint64_t v629 = v628[3];
                              v620 += v629;
                              uint64_t v251 = (int **)*a2;
                              int v630 = *(int **)(*a2 + 24);
                              uint64_t v631 = *((void *)v630 + 3);
                              v619 += v631;
                              ++v626;
                              uint64_t v55 = *(int **)*a1;
                              unint64_t v632 = v55[3];
                            }
                            while (v626 < v632);
                            int v252 = *v251;
                            v618 += v626;
                          }
                          else
                          {
                            unint64_t v632 = 0;
                            uint64_t v628 = *(void **)(v54 + 24);
                            uint64_t v629 = v628[3];
                            int v630 = v251[3];
                            uint64_t v631 = *((void *)v630 + 3);
                          }
                          uint64_t v633 = v628[2];
                          uint64_t v620 = v633 + v620 - v632 * v629;
                          uint64_t v619 = *((void *)v630 + 2) + v619 - v631 * v252[3];
                          ++v625;
                          unint64_t v634 = v55[2];
                        }
                        while (v625 < v634);
                      }
                      else
                      {
                        unint64_t v634 = 0;
                        uint64_t v628 = *(void **)(v54 + 24);
                        uint64_t v633 = v628[2];
                      }
                      uint64_t v620 = v628[1] + v620 - v634 * v633;
                      uint64_t v619 = *((void *)v251[3] + 1) + v619 - *((void *)v251[3] + 2) * v252[2];
                      ++v624;
                      unint64_t v635 = v55[1];
                    }
                    while (v624 < v635);
                    int v616 = *v55;
                  }
                  else
                  {
                    unint64_t v635 = 0;
                  }
                  uint64_t v620 = **(void **)(v54 + 24) + v620 - *(void *)(*(void *)(v54 + 24) + 8) * v635;
                  uint64_t v619 = *(void *)v251[3] + v619 - *((void *)v251[3] + 1) * v252[1];
                  ++v617;
                }
                while (v617 < v616);
              }
              break;
            default:
              if (v53[6])
              {
                unint64_t v566 = 0;
                v2090 = v251[19];
                uint64_t v2108 = *(void *)(v54 + 152);
                uint64_t v567 = v53[19];
                do
                {
                  uint64_t v568 = *(void *)*a1;
                  unint64_t v569 = (unint64_t)(*(void *)(*a1 + 8) - v568) >> 2;
                  uint64_t v570 = 0;
                  uint64_t v571 = (v569 - 1);
                  if ((int)v569 - 1 >= 0)
                  {
                    uint64_t v572 = *(void *)(*a1 + 24);
                    int v573 = v566;
                    do
                    {
                      ldiv_t v574 = ldiv(v573, *(int *)(v568 + 4 * v571));
                      int v573 = v574.quot;
                      v570 += *(void *)(v572 + 8 * v571--) * v574.rem;
                    }
                    while (v571 != -1);
                  }
                  uint64_t v575 = *(void *)*a2;
                  unint64_t v576 = (unint64_t)(*(void *)(*a2 + 8) - v575) >> 2;
                  uint64_t v577 = 0;
                  uint64_t v578 = (v576 - 1);
                  if ((int)v576 - 1 >= 0)
                  {
                    uint64_t v579 = *(void *)(*a2 + 24);
                    int v580 = v566;
                    do
                    {
                      ldiv_t v581 = ldiv(v580, *(int *)(v575 + 4 * v578));
                      int v580 = v581.quot;
                      v577 += *(void *)(v579 + 8 * v578--) * v581.rem;
                    }
                    while (v578 != -1);
                  }
                  unsigned int v582 = *(unsigned __int8 *)(v2108 + (int)v570);
                  if (v582 <= *((unsigned __int8 *)v2090 + (int)v577)) {
                    LOBYTE(v582) = *((unsigned char *)v2090 + (int)v577);
                  }
                  *(unsigned char *)(v567 + v566++) = v582;
                }
                while (v566 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v9)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          if (v10 <= **(_DWORD **)(*a2 + 152)) {
            unsigned int v10 = **(_DWORD **)(*a2 + 152);
          }
          goto LABEL_18;
        case 1:
          int v93 = *(_DWORD *)(*a2 + 160);
          if (v93 >= 1)
          {
            unsigned int v94 = **(_DWORD **)(*a1 + 152);
            unsigned int v95 = *(unsigned int **)(*(void *)a3 + 152);
            uint64_t v96 = *(unsigned int **)(*a2 + 152);
            unsigned int v97 = v93 + 1;
            do
            {
              unsigned int v99 = *v96++;
              unsigned int v98 = v99;
              if (v94 > v99) {
                unsigned int v98 = v94;
              }
              *v95++ = v98;
              --v97;
            }
            while (v97 > 1);
          }
          return;
        case 2:
          int v100 = *(_DWORD *)(*a1 + 160);
          if (v100 >= 1)
          {
            unsigned int v101 = **(_DWORD **)(*a2 + 152);
            unint64_t v102 = *(unsigned int **)(*(void *)a3 + 152);
            uint64_t v103 = *(unsigned int **)(*a1 + 152);
            unsigned int v104 = v100 + 1;
            do
            {
              unsigned int v106 = *v103++;
              unsigned int v105 = v106;
              if (v106 <= v101) {
                unsigned int v105 = v101;
              }
              *v102++ = v105;
              --v104;
            }
            while (v104 > 1);
          }
          return;
        case 3:
          int v107 = *(_DWORD *)(*(void *)a3 + 48);
          if (v107 >= 1)
          {
            uint64_t v108 = *(unsigned int **)(*(void *)a3 + 152);
            unint64_t v109 = *(unsigned int **)(*a2 + 152);
            v110 = *(unsigned int **)(*a1 + 152);
            unsigned int v111 = v107 + 1;
            do
            {
              unsigned int v113 = *v110++;
              unsigned int v112 = v113;
              unsigned int v115 = *v109++;
              unsigned int v114 = v115;
              if (v112 <= v115) {
                unsigned int v112 = v114;
              }
              *v108++ = v112;
              --v111;
            }
            while (v111 > 1);
          }
          return;
        default:
          uint64_t v84 = *(void **)a3;
          uint64_t v85 = (void *)*a1;
          uint64_t v86 = *(int **)*a1;
          uint64_t v87 = (v85[1] - (void)v86) >> 2;
          uint64_t v88 = (v87 - 1);
          if ((int)v88 >= -1) {
            int v89 = -1;
          }
          else {
            int v89 = v87 - 1;
          }
          int v90 = v89 + 1;
          int v91 = v87 + 1;
          break;
      }
      while (1)
      {
        unsigned int v92 = v91 - 2;
        if (v91 - 2 < 0) {
          break;
        }
        --v91;
        if (*(void *)(v85[3] + 8 * v92) != *(void *)(v84[3] + 8 * v92)) {
          goto LABEL_216;
        }
      }
      int v91 = v90;
LABEL_216:
      uint64_t v258 = (void *)*a2;
      uint64_t v259 = *(int **)*a2;
      uint64_t v260 = (v258[1] - (void)v259) >> 2;
      uint64_t v261 = (v260 - 1);
      if ((int)v261 >= -1) {
        int v262 = -1;
      }
      else {
        int v262 = v260 - 1;
      }
      int v263 = v262 + 1;
      int v264 = v260 + 1;
      while (1)
      {
        unsigned int v265 = v264 - 2;
        if (v264 - 2 < 0) {
          break;
        }
        --v264;
        if (*(void *)(v258[3] + 8 * v265) != *(void *)(v84[3] + 8 * v265)) {
          goto LABEL_265;
        }
      }
      int v264 = v263;
LABEL_265:
      int v301 = v87 + 1;
      while (1)
      {
        unsigned int v302 = v301 - 2;
        if (v301 - 2 < 0) {
          break;
        }
        --v301;
        if (*(void *)(v85[3] + 8 * v302)) {
          goto LABEL_300;
        }
      }
      int v301 = v90;
LABEL_300:
      int v315 = v260 + 1;
      while (1)
      {
        unsigned int v316 = v315 - 2;
        if (v315 - 2 < 0) {
          break;
        }
        --v315;
        if (*(void *)(v258[3] + 8 * v316)) {
          goto LABEL_404;
        }
      }
      int v315 = v263;
LABEL_404:
      unint64_t v369 = (uint64_t)(v84[1] - *v84) >> 2;
      if (v91 <= v264) {
        int v370 = v264;
      }
      else {
        int v370 = v91;
      }
      if (v91 <= v315) {
        int v91 = v315;
      }
      if (v301 > v264) {
        int v264 = v301;
      }
      if (v369 > v264)
      {
        int v371 = 1;
      }
      else
      {
        int v264 = (uint64_t)(v84[1] - *v84) >> 2;
        int v371 = 4;
      }
      if (v369 > v91)
      {
        int v372 = 2;
      }
      else
      {
        int v91 = v264;
        int v372 = v371;
      }
      if (v369 > v370)
      {
        int v91 = v370;
        int v372 = 3;
      }
      uint64_t v2085 = v261;
      uint64_t v2102 = v88;
      if (!v91) {
        goto LABEL_436;
      }
      unint64_t v373 = *(void *)(v84[3] + 8 * (v91 - 1));
      if (v373 < 0x10) {
        goto LABEL_436;
      }
      switch(v372)
      {
        case 1:
          if (v91 == 2)
          {
            int v1606 = *v86;
            if (*v86)
            {
              unint64_t v1607 = 0;
              uint64_t v1608 = 0;
              uint64_t v1609 = 0;
              uint64_t v1610 = v85[19];
              uint64_t v1611 = v258[19];
              uint64_t v1612 = v84[19];
              uint64_t v1613 = (uint64_t *)v85[3];
              uint64_t v1614 = *v1613;
              uint64_t v1615 = v1613[1];
              uint64_t v1616 = (uint64_t *)v258[3];
              uint64_t v1617 = *v1616;
              uint64_t v1618 = v1616[1];
              int v1619 = v86[1];
              int v1620 = v1619;
              do
              {
                if (v1620)
                {
                  unint64_t v1621 = 0;
                  uint64_t v1622 = v1611 + 4 * v1608;
                  do
                  {
                    if ((int)v373 >= 1)
                    {
                      uint64_t v1623 = 0;
                      unsigned int v1624 = *(_DWORD *)(v1610 + 4 * v1609);
                      unsigned int v1625 = v373 + 1;
                      do
                      {
                        unsigned int v1626 = *(_DWORD *)(v1622 + v1623);
                        if (v1624 > v1626) {
                          unsigned int v1626 = v1624;
                        }
                        *(_DWORD *)(v1612 + v1623) = v1626;
                        --v1625;
                        v1623 += 4;
                      }
                      while (v1625 > 1);
                      int v1619 = v86[1];
                    }
                    v1609 += v1615;
                    v1608 += v1618;
                    v1612 += 4 * (int)v373;
                    ++v1621;
                    v1622 += 4 * v1618;
                  }
                  while (v1621 < v1619);
                  uint64_t v1627 = v1619;
                  int v1606 = *v86;
                  int v1620 = v1619;
                }
                else
                {
                  uint64_t v1627 = 0;
                }
                uint64_t v1609 = v1609 + v1614 - v1627 * v1615;
                uint64_t v1608 = v1608 + v1617 - v1618 * v259[1];
                ++v1607;
              }
              while (v1607 < v1606);
            }
          }
          else if (v91 == 1)
          {
            int v1092 = *v86;
            if (*v86)
            {
              unint64_t v1093 = 0;
              uint64_t v1094 = 0;
              uint64_t v1095 = v85[19];
              uint64_t v1096 = v258[19];
              uint64_t v1097 = v84[19];
              uint64_t v1098 = *(void *)v85[3];
              uint64_t v1099 = 4 * *(void *)v258[3];
              do
              {
                if ((int)v373 >= 1)
                {
                  uint64_t v1100 = 0;
                  unsigned int v1101 = *(_DWORD *)(v1095 + 4 * v1094);
                  unsigned int v1102 = v373 + 1;
                  do
                  {
                    unsigned int v1103 = *(_DWORD *)(v1096 + v1100);
                    if (v1101 > v1103) {
                      unsigned int v1103 = v1101;
                    }
                    *(_DWORD *)(v1097 + v1100) = v1103;
                    --v1102;
                    v1100 += 4;
                  }
                  while (v1102 > 1);
                  int v1092 = *v86;
                }
                v1094 += v1098;
                ++v1093;
                v1097 += 4 * (int)v373;
                v1096 += v1099;
              }
              while (v1093 < v1092);
            }
          }
          else
          {
            unint64_t v2045 = v84[6];
            if (v2045)
            {
              unint64_t v2074 = 0;
              uint64_t v1978 = v258[19];
              uint64_t v1994 = v85[19];
              uint64_t v1628 = v84[19];
              do
              {
                uint64_t v1629 = 0;
                if ((v88 & 0x80000000) == 0)
                {
                  uint64_t v1630 = v85[3];
                  uint64_t v1631 = v88;
                  int v1632 = v2074;
                  do
                  {
                    ldiv_t v1633 = ldiv(v1632, v86[v1631]);
                    int v1632 = v1633.quot;
                    v1629 += *(void *)(v1630 + 8 * v1631--) * v1633.rem;
                  }
                  while (v1631 != -1);
                }
                uint64_t v1634 = v2085;
                if ((v2085 & 0x80000000) != 0)
                {
                  LODWORD(v1635) = 0;
                }
                else
                {
                  uint64_t v1635 = 0;
                  uint64_t v1636 = v258[3];
                  int v1637 = v2074;
                  do
                  {
                    ldiv_t v1638 = ldiv(v1637, v259[v1634]);
                    int v1637 = v1638.quot;
                    v1635 += *(void *)(v1636 + 8 * v1634--) * v1638.rem;
                  }
                  while (v1634 != -1);
                }
                uint64_t v88 = v2102;
                if ((int)v373 >= 1)
                {
                  uint64_t v1639 = 0;
                  unsigned int v1640 = *(_DWORD *)(v1994 + 4 * (int)v1629);
                  unsigned int v1641 = v373 + 1;
                  do
                  {
                    unsigned int v1642 = *(_DWORD *)(v1978 + 4 * (int)v1635 + v1639);
                    if (v1640 > v1642) {
                      unsigned int v1642 = v1640;
                    }
                    *(_DWORD *)(v1628 + v1639) = v1642;
                    --v1641;
                    v1639 += 4;
                  }
                  while (v1641 > 1);
                }
                v1628 += 4 * (int)v373;
                v2074 += (int)v373;
              }
              while (v2074 < v2045);
            }
          }
          break;
        case 2:
          if (v91 == 2)
          {
            int v1643 = *v86;
            if (*v86)
            {
              unint64_t v1644 = 0;
              uint64_t v1645 = 0;
              uint64_t v1646 = 0;
              uint64_t v1647 = v85[19];
              uint64_t v1648 = v258[19];
              uint64_t v1649 = v84[19];
              uint64_t v1650 = (uint64_t *)v85[3];
              uint64_t v1651 = *v1650;
              uint64_t v1652 = v1650[1];
              uint64_t v1653 = (uint64_t *)v258[3];
              uint64_t v1654 = *v1653;
              uint64_t v1655 = v1653[1];
              int v1656 = v86[1];
              int v1657 = v1656;
              do
              {
                if (v1657)
                {
                  unint64_t v1658 = 0;
                  uint64_t v1659 = v1647 + 4 * v1646;
                  do
                  {
                    if ((int)v373 >= 1)
                    {
                      uint64_t v1660 = 0;
                      unsigned int v1661 = *(_DWORD *)(v1648 + 4 * v1645);
                      unsigned int v1662 = v373 + 1;
                      do
                      {
                        unsigned int v1663 = *(_DWORD *)(v1659 + v1660);
                        if (v1663 <= v1661) {
                          unsigned int v1663 = v1661;
                        }
                        *(_DWORD *)(v1649 + v1660) = v1663;
                        --v1662;
                        v1660 += 4;
                      }
                      while (v1662 > 1);
                      int v1656 = v86[1];
                    }
                    v1646 += v1652;
                    v1645 += v1655;
                    v1649 += 4 * (int)v373;
                    ++v1658;
                    v1659 += 4 * v1652;
                  }
                  while (v1658 < v1656);
                  uint64_t v1664 = v1656;
                  int v1643 = *v86;
                  int v1657 = v1656;
                }
                else
                {
                  uint64_t v1664 = 0;
                }
                uint64_t v1646 = v1646 + v1651 - v1664 * v1652;
                uint64_t v1645 = v1645 + v1654 - v1655 * v259[1];
                ++v1644;
              }
              while (v1644 < v1643);
            }
          }
          else if (v91 == 1)
          {
            int v1104 = *v86;
            if (*v86)
            {
              unint64_t v1105 = 0;
              uint64_t v1106 = 0;
              uint64_t v1107 = v85[19];
              uint64_t v1108 = v258[19];
              uint64_t v1109 = v84[19];
              uint64_t v1110 = *(void *)v258[3];
              uint64_t v1111 = 4 * *(void *)v85[3];
              do
              {
                if ((int)v373 >= 1)
                {
                  uint64_t v1112 = 0;
                  unsigned int v1113 = *(_DWORD *)(v1108 + 4 * v1106);
                  unsigned int v1114 = v373 + 1;
                  do
                  {
                    unsigned int v1115 = *(_DWORD *)(v1107 + v1112);
                    if (v1115 <= v1113) {
                      unsigned int v1115 = v1113;
                    }
                    *(_DWORD *)(v1109 + v1112) = v1115;
                    --v1114;
                    v1112 += 4;
                  }
                  while (v1114 > 1);
                  int v1104 = *v86;
                }
                v1106 += v1110;
                ++v1105;
                v1109 += 4 * (int)v373;
                v1107 += v1111;
              }
              while (v1105 < v1104);
            }
          }
          else
          {
            unint64_t v2046 = v84[6];
            if (v2046)
            {
              unint64_t v2075 = 0;
              uint64_t v1979 = v258[19];
              uint64_t v1995 = v85[19];
              uint64_t v1665 = v84[19];
              do
              {
                uint64_t v1666 = 0;
                if ((v88 & 0x80000000) == 0)
                {
                  uint64_t v1667 = v85[3];
                  uint64_t v1668 = v88;
                  int v1669 = v2075;
                  do
                  {
                    ldiv_t v1670 = ldiv(v1669, v86[v1668]);
                    int v1669 = v1670.quot;
                    v1666 += *(void *)(v1667 + 8 * v1668--) * v1670.rem;
                  }
                  while (v1668 != -1);
                }
                uint64_t v1671 = v2085;
                if ((v2085 & 0x80000000) != 0)
                {
                  LODWORD(v1672) = 0;
                }
                else
                {
                  uint64_t v1672 = 0;
                  uint64_t v1673 = v258[3];
                  int v1674 = v2075;
                  do
                  {
                    ldiv_t v1675 = ldiv(v1674, v259[v1671]);
                    int v1674 = v1675.quot;
                    v1672 += *(void *)(v1673 + 8 * v1671--) * v1675.rem;
                  }
                  while (v1671 != -1);
                }
                uint64_t v88 = v2102;
                if ((int)v373 >= 1)
                {
                  uint64_t v1676 = 0;
                  unsigned int v1677 = *(_DWORD *)(v1979 + 4 * (int)v1672);
                  unsigned int v1678 = v373 + 1;
                  do
                  {
                    unsigned int v1679 = *(_DWORD *)(v1995 + 4 * (int)v1666 + v1676);
                    if (v1679 <= v1677) {
                      unsigned int v1679 = v1677;
                    }
                    *(_DWORD *)(v1665 + v1676) = v1679;
                    --v1678;
                    v1676 += 4;
                  }
                  while (v1678 > 1);
                }
                v1665 += 4 * (int)v373;
                v2075 += (int)v373;
              }
              while (v2075 < v2046);
            }
          }
          break;
        case 3:
          if (v91 == 2)
          {
            int v1279 = *v86;
            if (*v86)
            {
              unint64_t v1280 = 0;
              uint64_t v1281 = 0;
              uint64_t v1282 = 0;
              uint64_t v1283 = v85[19];
              uint64_t v1284 = v258[19];
              uint64_t v1285 = v84[19];
              uint64_t v1286 = (uint64_t *)v85[3];
              uint64_t v1287 = *v1286;
              uint64_t v1288 = v1286[1];
              uint64_t v1289 = (uint64_t *)v258[3];
              uint64_t v1290 = *v1289;
              uint64_t v1291 = v1289[1];
              int v1292 = v86[1];
              int v1293 = v1292;
              do
              {
                if (v1293)
                {
                  unint64_t v1294 = 0;
                  uint64_t v1295 = v1284 + 4 * v1281;
                  uint64_t v1296 = v1283 + 4 * v1282;
                  do
                  {
                    if ((int)v373 >= 1)
                    {
                      uint64_t v1297 = 0;
                      unsigned int v1298 = v373 + 1;
                      do
                      {
                        unsigned int v1299 = *(_DWORD *)(v1296 + v1297);
                        if (v1299 <= *(_DWORD *)(v1295 + v1297)) {
                          unsigned int v1299 = *(_DWORD *)(v1295 + v1297);
                        }
                        *(_DWORD *)(v1285 + v1297) = v1299;
                        --v1298;
                        v1297 += 4;
                      }
                      while (v1298 > 1);
                      int v1292 = v86[1];
                    }
                    v1282 += v1288;
                    v1281 += v1291;
                    v1285 += 4 * (int)v373;
                    ++v1294;
                    v1295 += 4 * v1291;
                    v1296 += 4 * v1288;
                  }
                  while (v1294 < v1292);
                  uint64_t v1300 = v1292;
                  int v1279 = *v86;
                  int v1293 = v1292;
                }
                else
                {
                  uint64_t v1300 = 0;
                }
                uint64_t v1282 = v1282 + v1287 - v1300 * v1288;
                uint64_t v1281 = v1281 + v1290 - v1291 * v259[1];
                ++v1280;
              }
              while (v1280 < v1279);
            }
          }
          else if (v91 == 1)
          {
            int v374 = *v86;
            if (*v86)
            {
              unint64_t v375 = 0;
              uint64_t v376 = v85[19];
              uint64_t v377 = v258[19];
              uint64_t v378 = v84[19];
              uint64_t v379 = 4 * *(void *)v258[3];
              uint64_t v380 = 4 * *(void *)v85[3];
              do
              {
                if ((int)v373 >= 1)
                {
                  uint64_t v381 = 0;
                  unsigned int v382 = v373 + 1;
                  do
                  {
                    unsigned int v383 = *(_DWORD *)(v376 + v381);
                    if (v383 <= *(_DWORD *)(v377 + v381)) {
                      unsigned int v383 = *(_DWORD *)(v377 + v381);
                    }
                    *(_DWORD *)(v378 + v381) = v383;
                    --v382;
                    v381 += 4;
                  }
                  while (v382 > 1);
                  int v374 = *v86;
                }
                ++v375;
                v378 += 4 * (int)v373;
                v377 += v379;
                v376 += v380;
              }
              while (v375 < v374);
            }
          }
          else
          {
            unint64_t v2036 = v84[6];
            if (v2036)
            {
              unint64_t v2065 = 0;
              uint64_t v1974 = v258[19];
              uint64_t v1988 = v85[19];
              uint64_t v1301 = v84[19];
              do
              {
                uint64_t v1302 = 0;
                if ((v88 & 0x80000000) == 0)
                {
                  uint64_t v1303 = v85[3];
                  uint64_t v1304 = v88;
                  int v1305 = v2065;
                  do
                  {
                    ldiv_t v1306 = ldiv(v1305, v86[v1304]);
                    int v1305 = v1306.quot;
                    v1302 += *(void *)(v1303 + 8 * v1304--) * v1306.rem;
                  }
                  while (v1304 != -1);
                }
                uint64_t v1307 = v2085;
                if ((v2085 & 0x80000000) != 0)
                {
                  LODWORD(v1308) = 0;
                }
                else
                {
                  uint64_t v1308 = 0;
                  uint64_t v1309 = v258[3];
                  int v1310 = v2065;
                  do
                  {
                    ldiv_t v1311 = ldiv(v1310, v259[v1307]);
                    int v1310 = v1311.quot;
                    v1308 += *(void *)(v1309 + 8 * v1307--) * v1311.rem;
                  }
                  while (v1307 != -1);
                }
                uint64_t v88 = v2102;
                if ((int)v373 >= 1)
                {
                  uint64_t v1312 = 0;
                  uint64_t v1313 = v1974 + 4 * (int)v1308;
                  unsigned int v1314 = v373 + 1;
                  do
                  {
                    unsigned int v1315 = *(_DWORD *)(v1988 + 4 * (int)v1302 + v1312);
                    if (v1315 <= *(_DWORD *)(v1313 + v1312)) {
                      unsigned int v1315 = *(_DWORD *)(v1313 + v1312);
                    }
                    *(_DWORD *)(v1301 + v1312) = v1315;
                    --v1314;
                    v1312 += 4;
                  }
                  while (v1314 > 1);
                }
                v1301 += 4 * (int)v373;
                v2065 += (int)v373;
              }
              while (v2065 < v2036);
            }
          }
          break;
        default:
LABEL_436:
          switch(v369)
          {
            case 1uLL:
              uint64_t v384 = v84[6];
              if (v384)
              {
                uint64_t v385 = (int *)v85[19];
                uint64_t v386 = (int *)v258[19];
                uint64_t v387 = (_DWORD *)v84[19];
                uint64_t v388 = 4 * *(void *)v258[3];
                uint64_t v389 = 4 * *(void *)v85[3];
                do
                {
                  int v390 = *v385;
                  if (*v385 <= *v386) {
                    int v390 = *v386;
                  }
                  *v387++ = v390;
                  uint64_t v386 = (int *)((char *)v386 + v388);
                  uint64_t v385 = (int *)((char *)v385 + v389);
                  --v384;
                }
                while (v384);
              }
              break;
            case 2uLL:
              int v649 = *v86;
              if (*v86)
              {
                unint64_t v650 = 0;
                uint64_t v651 = 0;
                uint64_t v652 = 0;
                uint64_t v653 = 0;
                uint64_t v654 = v85[19];
                uint64_t v655 = v258[19];
                uint64_t v656 = v84[19];
                uint64_t v657 = (uint64_t *)v85[3];
                uint64_t v658 = *v657;
                uint64_t v659 = v657[1];
                uint64_t v660 = (uint64_t *)v258[3];
                uint64_t v662 = *v660;
                uint64_t v661 = v660[1];
                int v663 = v86[1];
                do
                {
                  if (v663)
                  {
                    for (unint64_t i = 0; i < v663; ++i)
                    {
                      unsigned int v665 = *(_DWORD *)(v654 + 4 * v653);
                      if (v665 <= *(_DWORD *)(v655 + 4 * v652)) {
                        unsigned int v665 = *(_DWORD *)(v655 + 4 * v652);
                      }
                      *(_DWORD *)(v656 + 4 * v651 + 4 * i) = v665;
                      v653 += v659;
                      v652 += v661;
                      int v663 = v86[1];
                    }
                    uint64_t v666 = v663;
                    int v649 = *v86;
                    v651 += i;
                  }
                  else
                  {
                    uint64_t v666 = 0;
                  }
                  uint64_t v653 = v653 + v658 - v666 * v659;
                  uint64_t v652 = v652 + v662 - v661 * v259[1];
                  ++v650;
                }
                while (v650 < v649);
              }
              break;
            case 3uLL:
              int v667 = *v86;
              if (*v86)
              {
                unint64_t v668 = 0;
                uint64_t v669 = 0;
                uint64_t v670 = 0;
                uint64_t v671 = 0;
                uint64_t v672 = v85[19];
                uint64_t v673 = v258[19];
                uint64_t v674 = v84[19];
                unint64_t v675 = (uint64_t *)v85[3];
                uint64_t v676 = *v675;
                uint64_t v677 = v675[1];
                uint64_t v678 = (uint64_t *)v258[3];
                uint64_t v679 = *v678;
                uint64_t v680 = v678[1];
                int v681 = v86[1];
                int v682 = v681;
                do
                {
                  if (v682)
                  {
                    unint64_t v683 = 0;
                    uint64_t v684 = v675[2];
                    uint64_t v685 = v678[2];
                    int v686 = v86[2];
                    do
                    {
                      if (v686)
                      {
                        for (unint64_t j = 0; j < v686; ++j)
                        {
                          unsigned int v688 = *(_DWORD *)(v672 + 4 * v671);
                          if (v688 <= *(_DWORD *)(v673 + 4 * v670)) {
                            unsigned int v688 = *(_DWORD *)(v673 + 4 * v670);
                          }
                          *(_DWORD *)(v674 + 4 * v669 + 4 * j) = v688;
                          v671 += v684;
                          v670 += v685;
                          int v686 = v86[2];
                        }
                        uint64_t v689 = v686;
                        int v681 = v86[1];
                        v669 += j;
                      }
                      else
                      {
                        uint64_t v689 = 0;
                      }
                      uint64_t v671 = v671 + v677 - v689 * v684;
                      uint64_t v670 = v670 + v680 - v685 * v259[2];
                      ++v683;
                    }
                    while (v683 < v681);
                    uint64_t v690 = v681;
                    int v667 = *v86;
                    int v682 = v681;
                  }
                  else
                  {
                    uint64_t v690 = 0;
                  }
                  uint64_t v671 = v671 + v676 - v690 * v677;
                  uint64_t v670 = v670 + v679 - v680 * v259[1];
                  ++v668;
                }
                while (v668 < v667);
              }
              break;
            case 4uLL:
              int v691 = *v86;
              if (*v86)
              {
                unint64_t v692 = 0;
                uint64_t v693 = 0;
                uint64_t v694 = 0;
                uint64_t v695 = 0;
                uint64_t v696 = v85[19];
                uint64_t v697 = v258[19];
                uint64_t v698 = v84[19];
                unint64_t v699 = (uint64_t *)v85[3];
                uint64_t v700 = *v699;
                uint64_t v701 = v699[1];
                uint64_t v702 = (uint64_t *)v258[3];
                uint64_t v703 = *v702;
                uint64_t v704 = v702[1];
                int v705 = v86[1];
                int v706 = v705;
                do
                {
                  if (v706)
                  {
                    unint64_t v707 = 0;
                    uint64_t v708 = v699[2];
                    uint64_t v709 = v702[2];
                    int v710 = v86[2];
                    int v711 = v710;
                    do
                    {
                      if (v711)
                      {
                        unint64_t v712 = 0;
                        uint64_t v713 = v699[3];
                        uint64_t v714 = v702[3];
                        int v715 = v86[3];
                        do
                        {
                          if (v715)
                          {
                            for (unint64_t k = 0; k < v715; ++k)
                            {
                              unsigned int v717 = *(_DWORD *)(v696 + 4 * v695);
                              if (v717 <= *(_DWORD *)(v697 + 4 * v694)) {
                                unsigned int v717 = *(_DWORD *)(v697 + 4 * v694);
                              }
                              *(_DWORD *)(v698 + 4 * v693 + 4 * k) = v717;
                              v695 += v713;
                              v694 += v714;
                              int v715 = v86[3];
                            }
                            uint64_t v718 = v715;
                            int v710 = v86[2];
                            v693 += k;
                          }
                          else
                          {
                            uint64_t v718 = 0;
                          }
                          uint64_t v695 = v695 + v708 - v718 * v713;
                          uint64_t v694 = v694 + v709 - v714 * v259[3];
                          ++v712;
                        }
                        while (v712 < v710);
                        uint64_t v719 = v710;
                        int v705 = v86[1];
                        int v711 = v710;
                      }
                      else
                      {
                        uint64_t v719 = 0;
                      }
                      uint64_t v695 = v695 + v701 - v719 * v708;
                      uint64_t v694 = v694 + v704 - v709 * v259[2];
                      ++v707;
                    }
                    while (v707 < v705);
                    uint64_t v720 = v705;
                    int v691 = *v86;
                    int v706 = v705;
                  }
                  else
                  {
                    uint64_t v720 = 0;
                  }
                  uint64_t v695 = v695 + v700 - v720 * v701;
                  uint64_t v694 = v694 + v703 - v704 * v259[1];
                  ++v692;
                }
                while (v692 < v691);
              }
              break;
            default:
              uint64_t v636 = v84[6];
              if (v636)
              {
                uint64_t v637 = 0;
                uint64_t v2028 = v258[19];
                uint64_t v2057 = v85[19];
                uint64_t v2015 = v84[19];
                do
                {
                  uint64_t v638 = 0;
                  if ((v88 & 0x80000000) == 0)
                  {
                    uint64_t v639 = v85[3];
                    uint64_t v640 = v88;
                    int v641 = v637;
                    do
                    {
                      ldiv_t v642 = ldiv(v641, v86[v640]);
                      int v641 = v642.quot;
                      v638 += *(void *)(v639 + 8 * v640--) * v642.rem;
                    }
                    while (v640 != -1);
                  }
                  uint64_t v643 = v2085;
                  if ((v2085 & 0x80000000) != 0)
                  {
                    LODWORD(v644) = 0;
                  }
                  else
                  {
                    uint64_t v644 = 0;
                    uint64_t v645 = v258[3];
                    int v646 = v637;
                    do
                    {
                      ldiv_t v647 = ldiv(v646, v259[v643]);
                      int v646 = v647.quot;
                      v644 += *(void *)(v645 + 8 * v643--) * v647.rem;
                    }
                    while (v643 != -1);
                  }
                  unsigned int v648 = *(_DWORD *)(v2057 + 4 * (int)v638);
                  if (v648 <= *(_DWORD *)(v2028 + 4 * (int)v644)) {
                    unsigned int v648 = *(_DWORD *)(v2028 + 4 * (int)v644);
                  }
                  *(_DWORD *)(v2015 + 4 * v637++) = v648;
                  uint64_t v88 = v2102;
                }
                while (v637 != v636);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v11)
      {
        case 0:
          unsigned int v7 = **(char **)(*a1 + 152);
          if ((int)v7 <= **(char **)(*a2 + 152)) {
            LOBYTE(v7) = **(unsigned char **)(*a2 + 152);
          }
LABEL_14:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v124 = *(_DWORD *)(*a2 + 160);
          if (v124 >= 1)
          {
            unint64_t v125 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v126 = *(char **)(*a2 + 152);
            unsigned int v127 = v124 + 1;
            int v128 = **(char **)(*a1 + 152);
            do
            {
              int v130 = *v126++;
              char v129 = v130;
              if (v128 > v130) {
                char v129 = v128;
              }
              *v125++ = v129;
              --v127;
            }
            while (v127 > 1);
          }
          return;
        case 2:
          int v131 = *(_DWORD *)(*a1 + 160);
          if (v131 >= 1)
          {
            char v132 = **(unsigned char **)(*a2 + 152);
            uint64_t v133 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v134 = *(char **)(*a1 + 152);
            unsigned int v135 = v131 + 1;
            do
            {
              int v137 = *v134++;
              char v136 = v137;
              if (v137 <= v132) {
                char v136 = v132;
              }
              *v133++ = v136;
              --v135;
            }
            while (v135 > 1);
          }
          return;
        case 3:
          int v138 = *(_DWORD *)(*(void *)a3 + 48);
          if (v138 >= 1)
          {
            int v139 = *(unsigned char **)(*(void *)a3 + 152);
            unint64_t v140 = *(char **)(*a2 + 152);
            uint64_t v141 = *(char **)(*a1 + 152);
            unsigned int v142 = v138 + 1;
            do
            {
              int v144 = *v141++;
              int v143 = v144;
              int v146 = *v140++;
              char v145 = v146;
              if (v143 <= v146) {
                LOBYTE(v143) = v145;
              }
              *v139++ = v143;
              --v142;
            }
            while (v142 > 1);
          }
          return;
        default:
          uint64_t v116 = *(void **)a3;
          uint64_t v117 = *a1;
          unint64_t v118 = *(int **)*a1;
          uint64_t v119 = (*(void *)(*a1 + 8) - (void)v118) >> 2;
          int v120 = v119 - 1;
          if ((int)v119 - 1 >= -1) {
            int v120 = -1;
          }
          int v121 = v120 + 1;
          int v122 = v119 + 1;
          while (1)
          {
            unsigned int v123 = v122 - 2;
            if (v122 - 2 < 0) {
              break;
            }
            --v122;
            if (*(void *)(*(void *)(v117 + 24) + 8 * v123) != *(void *)(v116[3] + 8 * v123)) {
              goto LABEL_224;
            }
          }
          int v122 = v121;
LABEL_224:
          unint64_t v266 = (int **)*a2;
          unint64_t v267 = *(int **)*a2;
          uint64_t v268 = (*(void *)(*a2 + 8) - (void)v267) >> 2;
          int v269 = v268 - 1;
          if ((int)v268 - 1 >= -1) {
            int v269 = -1;
          }
          int v270 = v269 + 1;
          int v271 = v268 + 1;
          while (1)
          {
            unsigned int v272 = v271 - 2;
            if (v271 - 2 < 0) {
              break;
            }
            --v271;
            if (*(void *)&v266[3][2 * v272] != *(void *)(v116[3] + 8 * v272)) {
              goto LABEL_270;
            }
          }
          int v271 = v270;
LABEL_270:
          int v303 = v119 + 1;
          while (1)
          {
            unsigned int v304 = v303 - 2;
            if (v303 - 2 < 0) {
              break;
            }
            --v303;
            if (*(void *)(*(void *)(v117 + 24) + 8 * v304)) {
              goto LABEL_305;
            }
          }
          int v303 = v121;
LABEL_305:
          int v317 = v268 + 1;
          while (1)
          {
            int v318 = v317 - 2;
            if (v317 - 2 < 0) {
              break;
            }
            --v317;
            if (*(void *)&v266[3][2 * v318]) {
              goto LABEL_444;
            }
          }
          int v317 = v270;
LABEL_444:
          unint64_t v391 = (uint64_t)(v116[1] - *v116) >> 2;
          if (v122 <= v271) {
            int v392 = v271;
          }
          else {
            int v392 = v122;
          }
          if (v122 <= v317) {
            int v122 = v317;
          }
          if (v303 > v271) {
            int v271 = v303;
          }
          if (v391 > v271)
          {
            int v393 = 1;
          }
          else
          {
            int v271 = (uint64_t)(v116[1] - *v116) >> 2;
            int v393 = 4;
          }
          if (v391 > v122)
          {
            int v394 = 2;
          }
          else
          {
            int v122 = v271;
            int v394 = v393;
          }
          if (v391 > v392)
          {
            int v122 = v392;
            int v394 = 3;
          }
          if (!v122) {
            goto LABEL_476;
          }
          unint64_t v395 = *(void *)(v116[3] + 8 * (v122 - 1));
          if (v395 < 0x10) {
            goto LABEL_476;
          }
          uint64_t v2103 = *(void *)(v116[3] + 8 * (v122 - 1));
          switch(v394)
          {
            case 1:
              if (v122 == 2)
              {
                int v1680 = *v118;
                if (*v118)
                {
                  unint64_t v1681 = 0;
                  uint64_t v1682 = 0;
                  uint64_t v1683 = 0;
                  uint64_t v1684 = *(void *)(v117 + 152);
                  uint64_t v1685 = v266[19];
                  uint64_t v1686 = v116[19];
                  do
                  {
                    if (v118[1])
                    {
                      unint64_t v1687 = 0;
                      do
                      {
                        if ((int)v395 >= 1)
                        {
                          uint64_t v1688 = 0;
                          char v1689 = *(unsigned char *)(v1684 + v1683);
                          unsigned int v1690 = v395 + 1;
                          do
                          {
                            int v1691 = *((char *)v1685 + v1682 + v1688);
                            if (v1689 > v1691) {
                              LOBYTE(v1691) = v1689;
                            }
                            *(unsigned char *)(v1686 + v1688) = v1691;
                            --v1690;
                            ++v1688;
                          }
                          while (v1690 > 1);
                          uint64_t v117 = *a1;
                          unint64_t v266 = (int **)*a2;
                          unint64_t v118 = *(int **)*a1;
                        }
                        uint64_t v1692 = *(void **)(v117 + 24);
                        uint64_t v1693 = v1692[1];
                        v1683 += v1693;
                        v1682 += *((void *)v266[3] + 1);
                        v1686 += (int)v395;
                        ++v1687;
                        unint64_t v1694 = v118[1];
                      }
                      while (v1687 < v1694);
                      int v1680 = *v118;
                      unint64_t v267 = *v266;
                    }
                    else
                    {
                      unint64_t v1694 = 0;
                      uint64_t v1692 = *(void **)(v117 + 24);
                      uint64_t v1693 = v1692[1];
                    }
                    uint64_t v1683 = *v1692 + v1683 - v1694 * v1693;
                    uint64_t v1682 = *(void *)v266[3] + v1682 - *((void *)v266[3] + 1) * v267[1];
                    ++v1681;
                  }
                  while (v1681 < v1680);
                }
              }
              else if (v122 == 1)
              {
                int v1116 = *v118;
                if (*v118)
                {
                  unint64_t v1117 = 0;
                  uint64_t v1118 = 0;
                  uint64_t v1119 = 0;
                  uint64_t v1120 = *(void *)(v117 + 152);
                  uint64_t v1121 = v266[19];
                  uint64_t v1122 = v116[19];
                  do
                  {
                    if ((int)v395 >= 1)
                    {
                      uint64_t v1123 = 0;
                      char v1124 = *(unsigned char *)(v1120 + v1119);
                      unsigned int v1125 = v395 + 1;
                      do
                      {
                        int v1126 = *((char *)v1121 + v1118 + v1123);
                        if (v1124 > v1126) {
                          LOBYTE(v1126) = v1124;
                        }
                        *(unsigned char *)(v1122 + v1123) = v1126;
                        --v1125;
                        ++v1123;
                      }
                      while (v1125 > 1);
                      uint64_t v117 = *a1;
                      unint64_t v266 = (int **)*a2;
                      int v1116 = **(_DWORD **)*a1;
                    }
                    v1119 += **(void **)(v117 + 24);
                    v1118 += *(void *)v266[3];
                    v1122 += (int)v395;
                    ++v1117;
                  }
                  while (v1117 < v1116);
                }
              }
              else if (v116[6])
              {
                uint64_t v2024 = v266[19];
                uint64_t v2047 = *(void *)(v117 + 152);
                uint64_t v2076 = (int)v395;
                unint64_t v2098 = 0;
                unsigned int v2011 = v395 + 1;
                uint64_t v1695 = v116[19];
                do
                {
                  uint64_t v1696 = *(void *)*a1;
                  unint64_t v1697 = (unint64_t)(*(void *)(*a1 + 8) - v1696) >> 2;
                  uint64_t v1698 = 0;
                  uint64_t v1699 = (v1697 - 1);
                  if ((int)v1697 - 1 >= 0)
                  {
                    uint64_t v1700 = *(void *)(*a1 + 24);
                    int v1701 = v2098;
                    do
                    {
                      ldiv_t v1702 = ldiv(v1701, *(int *)(v1696 + 4 * v1699));
                      int v1701 = v1702.quot;
                      v1698 += *(void *)(v1700 + 8 * v1699--) * v1702.rem;
                    }
                    while (v1699 != -1);
                  }
                  uint64_t v1703 = *(void *)*a2;
                  unint64_t v1704 = (unint64_t)(*(void *)(*a2 + 8) - v1703) >> 2;
                  uint64_t v1705 = 0;
                  uint64_t v1706 = (v1704 - 1);
                  if ((int)v1704 - 1 >= 0)
                  {
                    uint64_t v1707 = *(void *)(*a2 + 24);
                    int v1708 = v2098;
                    do
                    {
                      ldiv_t v1709 = ldiv(v1708, *(int *)(v1703 + 4 * v1706));
                      int v1708 = v1709.quot;
                      v1705 += *(void *)(v1707 + 8 * v1706--) * v1709.rem;
                    }
                    while (v1706 != -1);
                  }
                  if ((int)v2103 >= 1)
                  {
                    uint64_t v1710 = 0;
                    char v1711 = *(unsigned char *)(v2047 + (int)v1698);
                    unsigned int v1712 = v2011;
                    do
                    {
                      int v1713 = *((char *)v2024 + (int)v1705 + v1710);
                      if (v1711 > v1713) {
                        LOBYTE(v1713) = v1711;
                      }
                      *(unsigned char *)(v1695 + v1710) = v1713;
                      --v1712;
                      ++v1710;
                    }
                    while (v1712 > 1);
                    uint64_t v116 = *(void **)a3;
                  }
                  v1695 += v2076;
                  v2098 += v2076;
                }
                while (v2098 < v116[6]);
              }
              break;
            case 2:
              if (v122 == 2)
              {
                int v1714 = *v118;
                if (*v118)
                {
                  unint64_t v1715 = 0;
                  uint64_t v1716 = 0;
                  uint64_t v1717 = 0;
                  uint64_t v1718 = *(void *)(v117 + 152);
                  uint64_t v1719 = v266[19];
                  uint64_t v1720 = v116[19];
                  do
                  {
                    if (v118[1])
                    {
                      unint64_t v1721 = 0;
                      do
                      {
                        if ((int)v395 >= 1)
                        {
                          uint64_t v1722 = 0;
                          char v1723 = *((unsigned char *)v1719 + v1716);
                          unsigned int v1724 = v395 + 1;
                          do
                          {
                            int v1725 = *(char *)(v1718 + v1717 + v1722);
                            if (v1725 <= v1723) {
                              LOBYTE(v1725) = v1723;
                            }
                            *(unsigned char *)(v1720 + v1722) = v1725;
                            --v1724;
                            ++v1722;
                          }
                          while (v1724 > 1);
                          uint64_t v117 = *a1;
                          unint64_t v266 = (int **)*a2;
                          unint64_t v118 = *(int **)*a1;
                        }
                        uint64_t v1726 = *(void **)(v117 + 24);
                        uint64_t v1727 = v1726[1];
                        v1717 += v1727;
                        v1716 += *((void *)v266[3] + 1);
                        v1720 += (int)v395;
                        ++v1721;
                        unint64_t v1728 = v118[1];
                      }
                      while (v1721 < v1728);
                      int v1714 = *v118;
                      unint64_t v267 = *v266;
                    }
                    else
                    {
                      unint64_t v1728 = 0;
                      uint64_t v1726 = *(void **)(v117 + 24);
                      uint64_t v1727 = v1726[1];
                    }
                    uint64_t v1717 = *v1726 + v1717 - v1728 * v1727;
                    uint64_t v1716 = *(void *)v266[3] + v1716 - *((void *)v266[3] + 1) * v267[1];
                    ++v1715;
                  }
                  while (v1715 < v1714);
                }
              }
              else if (v122 == 1)
              {
                int v1127 = *v118;
                if (*v118)
                {
                  unint64_t v1128 = 0;
                  uint64_t v1129 = 0;
                  uint64_t v1130 = 0;
                  uint64_t v1131 = *(void *)(v117 + 152);
                  uint64_t v1132 = v266[19];
                  uint64_t v1133 = v116[19];
                  do
                  {
                    if ((int)v395 >= 1)
                    {
                      uint64_t v1134 = 0;
                      char v1135 = *((unsigned char *)v1132 + v1129);
                      unsigned int v1136 = v395 + 1;
                      do
                      {
                        int v1137 = *(char *)(v1131 + v1130 + v1134);
                        if (v1137 <= v1135) {
                          LOBYTE(v1137) = v1135;
                        }
                        *(unsigned char *)(v1133 + v1134) = v1137;
                        --v1136;
                        ++v1134;
                      }
                      while (v1136 > 1);
                      uint64_t v117 = *a1;
                      unint64_t v266 = (int **)*a2;
                      int v1127 = **(_DWORD **)*a1;
                    }
                    v1130 += **(void **)(v117 + 24);
                    v1129 += *(void *)v266[3];
                    v1133 += (int)v395;
                    ++v1128;
                  }
                  while (v1128 < v1127);
                }
              }
              else if (v116[6])
              {
                uint64_t v2025 = v266[19];
                uint64_t v2048 = *(void *)(v117 + 152);
                uint64_t v2077 = (int)v395;
                unint64_t v2099 = 0;
                unsigned int v2012 = v395 + 1;
                uint64_t v1729 = v116[19];
                do
                {
                  uint64_t v1730 = *(void *)*a1;
                  unint64_t v1731 = (unint64_t)(*(void *)(*a1 + 8) - v1730) >> 2;
                  uint64_t v1732 = 0;
                  uint64_t v1733 = (v1731 - 1);
                  if ((int)v1731 - 1 >= 0)
                  {
                    uint64_t v1734 = *(void *)(*a1 + 24);
                    int v1735 = v2099;
                    do
                    {
                      ldiv_t v1736 = ldiv(v1735, *(int *)(v1730 + 4 * v1733));
                      int v1735 = v1736.quot;
                      v1732 += *(void *)(v1734 + 8 * v1733--) * v1736.rem;
                    }
                    while (v1733 != -1);
                  }
                  uint64_t v1737 = *(void *)*a2;
                  unint64_t v1738 = (unint64_t)(*(void *)(*a2 + 8) - v1737) >> 2;
                  uint64_t v1739 = 0;
                  uint64_t v1740 = (v1738 - 1);
                  if ((int)v1738 - 1 >= 0)
                  {
                    uint64_t v1741 = *(void *)(*a2 + 24);
                    int v1742 = v2099;
                    do
                    {
                      ldiv_t v1743 = ldiv(v1742, *(int *)(v1737 + 4 * v1740));
                      int v1742 = v1743.quot;
                      v1739 += *(void *)(v1741 + 8 * v1740--) * v1743.rem;
                    }
                    while (v1740 != -1);
                  }
                  if ((int)v2103 >= 1)
                  {
                    uint64_t v1744 = 0;
                    char v1745 = *((unsigned char *)v2025 + (int)v1739);
                    unsigned int v1746 = v2012;
                    do
                    {
                      int v1747 = *(char *)(v2048 + (int)v1732 + v1744);
                      if (v1747 <= v1745) {
                        LOBYTE(v1747) = v1745;
                      }
                      *(unsigned char *)(v1729 + v1744) = v1747;
                      --v1746;
                      ++v1744;
                    }
                    while (v1746 > 1);
                    uint64_t v116 = *(void **)a3;
                  }
                  v1729 += v2077;
                  v2099 += v2077;
                }
                while (v2099 < v116[6]);
              }
              break;
            case 3:
              if (v122 == 2)
              {
                int v1316 = *v118;
                if (*v118)
                {
                  unint64_t v1317 = 0;
                  uint64_t v1318 = 0;
                  uint64_t v1319 = 0;
                  uint64_t v1320 = *(void *)(v117 + 152);
                  uint64_t v1321 = v266[19];
                  uint64_t v1322 = v116[19];
                  do
                  {
                    if (v118[1])
                    {
                      unint64_t v1323 = 0;
                      do
                      {
                        if ((int)v395 >= 1)
                        {
                          uint64_t v1324 = 0;
                          unsigned int v1325 = v395 + 1;
                          do
                          {
                            int v1326 = *(char *)(v1320 + v1319 + v1324);
                            if (v1326 <= *((char *)v1321 + v1318 + v1324)) {
                              LOBYTE(v1326) = *((unsigned char *)v1321 + v1318 + v1324);
                            }
                            *(unsigned char *)(v1322 + v1324) = v1326;
                            --v1325;
                            ++v1324;
                          }
                          while (v1325 > 1);
                          uint64_t v117 = *a1;
                          unint64_t v266 = (int **)*a2;
                          unint64_t v118 = *(int **)*a1;
                        }
                        uint64_t v1327 = *(void **)(v117 + 24);
                        uint64_t v1328 = v1327[1];
                        v1319 += v1328;
                        v1318 += *((void *)v266[3] + 1);
                        v1322 += (int)v395;
                        ++v1323;
                        unint64_t v1329 = v118[1];
                      }
                      while (v1323 < v1329);
                      int v1316 = *v118;
                      unint64_t v267 = *v266;
                    }
                    else
                    {
                      unint64_t v1329 = 0;
                      uint64_t v1327 = *(void **)(v117 + 24);
                      uint64_t v1328 = v1327[1];
                    }
                    uint64_t v1319 = *v1327 + v1319 - v1329 * v1328;
                    uint64_t v1318 = *(void *)v266[3] + v1318 - *((void *)v266[3] + 1) * v267[1];
                    ++v1317;
                  }
                  while (v1317 < v1316);
                }
              }
              else if (v122 == 1)
              {
                int v396 = *v118;
                if (*v118)
                {
                  unint64_t v397 = 0;
                  uint64_t v398 = 0;
                  uint64_t v399 = 0;
                  uint64_t v400 = *(void *)(v117 + 152);
                  int v401 = v266[19];
                  uint64_t v402 = v116[19];
                  do
                  {
                    if ((int)v395 >= 1)
                    {
                      uint64_t v403 = 0;
                      unsigned int v404 = v395 + 1;
                      do
                      {
                        int v405 = *(char *)(v400 + v399 + v403);
                        if (v405 <= *((char *)v401 + v398 + v403)) {
                          LOBYTE(v405) = *((unsigned char *)v401 + v398 + v403);
                        }
                        *(unsigned char *)(v402 + v403) = v405;
                        --v404;
                        ++v403;
                      }
                      while (v404 > 1);
                      uint64_t v117 = *a1;
                      unint64_t v266 = (int **)*a2;
                      int v396 = **(_DWORD **)*a1;
                    }
                    v399 += **(void **)(v117 + 24);
                    v398 += *(void *)v266[3];
                    v402 += (int)v395;
                    ++v397;
                  }
                  while (v397 < v396);
                }
              }
              else if (v116[6])
              {
                uint64_t v2021 = v266[19];
                uint64_t v2037 = *(void *)(v117 + 152);
                uint64_t v2066 = (int)v395;
                unint64_t v2095 = 0;
                unsigned int v2006 = v395 + 1;
                uint64_t v1330 = v116[19];
                do
                {
                  uint64_t v1331 = *(void *)*a1;
                  unint64_t v1332 = (unint64_t)(*(void *)(*a1 + 8) - v1331) >> 2;
                  uint64_t v1333 = 0;
                  uint64_t v1334 = (v1332 - 1);
                  if ((int)v1332 - 1 >= 0)
                  {
                    uint64_t v1335 = *(void *)(*a1 + 24);
                    int v1336 = v2095;
                    do
                    {
                      ldiv_t v1337 = ldiv(v1336, *(int *)(v1331 + 4 * v1334));
                      int v1336 = v1337.quot;
                      v1333 += *(void *)(v1335 + 8 * v1334--) * v1337.rem;
                    }
                    while (v1334 != -1);
                  }
                  uint64_t v1338 = *(void *)*a2;
                  unint64_t v1339 = (unint64_t)(*(void *)(*a2 + 8) - v1338) >> 2;
                  uint64_t v1340 = 0;
                  uint64_t v1341 = (v1339 - 1);
                  if ((int)v1339 - 1 >= 0)
                  {
                    uint64_t v1342 = *(void *)(*a2 + 24);
                    int v1343 = v2095;
                    do
                    {
                      ldiv_t v1344 = ldiv(v1343, *(int *)(v1338 + 4 * v1341));
                      int v1343 = v1344.quot;
                      v1340 += *(void *)(v1342 + 8 * v1341--) * v1344.rem;
                    }
                    while (v1341 != -1);
                  }
                  if ((int)v2103 >= 1)
                  {
                    uint64_t v1345 = 0;
                    unsigned int v1346 = v2006;
                    do
                    {
                      int v1347 = *(char *)(v2037 + (int)v1333 + v1345);
                      if (v1347 <= *((char *)v2021 + (int)v1340 + v1345)) {
                        LOBYTE(v1347) = *((unsigned char *)v2021 + (int)v1340 + v1345);
                      }
                      *(unsigned char *)(v1330 + v1345) = v1347;
                      --v1346;
                      ++v1345;
                    }
                    while (v1346 > 1);
                    uint64_t v116 = *(void **)a3;
                  }
                  v1330 += v2066;
                  v2095 += v2066;
                }
                while (v2095 < v116[6]);
              }
              break;
            default:
LABEL_476:
              switch(v391)
              {
                case 1uLL:
                  if (v116[6])
                  {
                    unint64_t v406 = 0;
                    uint64_t v407 = 0;
                    uint64_t v408 = 0;
                    uint64_t v409 = *(void *)(v117 + 152);
                    uint64_t v410 = v266[19];
                    uint64_t v411 = v116[19];
                    do
                    {
                      int v412 = *(char *)(v409 + v408);
                      if (v412 <= *((char *)v410 + v407)) {
                        LOBYTE(v412) = *((unsigned char *)v410 + v407);
                      }
                      *(unsigned char *)(v411 + v406) = v412;
                      v408 += **(void **)(*a1 + 24);
                      v407 += **(void **)(*a2 + 24);
                      ++v406;
                    }
                    while (v406 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v738 = *v118;
                  if (*v118)
                  {
                    unint64_t v739 = 0;
                    uint64_t v740 = 0;
                    uint64_t v741 = 0;
                    uint64_t v742 = 0;
                    uint64_t v743 = *(void *)(v117 + 152);
                    uint64_t v744 = v266[19];
                    uint64_t v745 = v116[19];
                    do
                    {
                      if (v118[1])
                      {
                        unint64_t v746 = 0;
                        do
                        {
                          int v747 = *(char *)(v743 + v742);
                          if (v747 <= *((char *)v744 + v741)) {
                            LOBYTE(v747) = *((unsigned char *)v744 + v741);
                          }
                          *(unsigned char *)(v745 + v740 + v746) = v747;
                          uint64_t v117 = *a1;
                          uint64_t v748 = *(void **)(*a1 + 24);
                          uint64_t v749 = v748[1];
                          v742 += v749;
                          unint64_t v266 = (int **)*a2;
                          uint64_t v750 = *(int **)(*a2 + 24);
                          uint64_t v751 = *((void *)v750 + 1);
                          v741 += v751;
                          ++v746;
                          unint64_t v118 = *(int **)*a1;
                          unint64_t v752 = v118[1];
                        }
                        while (v746 < v752);
                        int v738 = *v118;
                        unint64_t v267 = *v266;
                        v740 += v746;
                      }
                      else
                      {
                        unint64_t v752 = 0;
                        uint64_t v748 = *(void **)(v117 + 24);
                        uint64_t v749 = v748[1];
                        uint64_t v750 = v266[3];
                        uint64_t v751 = *((void *)v750 + 1);
                      }
                      uint64_t v742 = *v748 + v742 - v752 * v749;
                      uint64_t v741 = *(void *)v750 + v741 - v751 * v267[1];
                      ++v739;
                    }
                    while (v739 < v738);
                  }
                  break;
                case 3uLL:
                  int v753 = *v118;
                  if (*v118)
                  {
                    unint64_t v754 = 0;
                    uint64_t v755 = 0;
                    uint64_t v756 = 0;
                    uint64_t v757 = 0;
                    uint64_t v758 = *(void *)(v117 + 152);
                    uint64_t v759 = v266[19];
                    uint64_t v760 = v116[19];
                    do
                    {
                      if (v118[1])
                      {
                        unint64_t v761 = 0;
                        do
                        {
                          if (v118[2])
                          {
                            unint64_t v762 = 0;
                            do
                            {
                              int v763 = *(char *)(v758 + v757);
                              if (v763 <= *((char *)v759 + v756)) {
                                LOBYTE(v763) = *((unsigned char *)v759 + v756);
                              }
                              *(unsigned char *)(v760 + v755 + v762) = v763;
                              uint64_t v117 = *a1;
                              uint64_t v764 = *(void **)(*a1 + 24);
                              uint64_t v765 = v764[2];
                              v757 += v765;
                              unint64_t v266 = (int **)*a2;
                              uint64_t v766 = *(int **)(*a2 + 24);
                              uint64_t v767 = *((void *)v766 + 2);
                              v756 += v767;
                              ++v762;
                              unint64_t v118 = *(int **)*a1;
                              unint64_t v768 = v118[2];
                            }
                            while (v762 < v768);
                            unint64_t v267 = *v266;
                            v755 += v762;
                          }
                          else
                          {
                            unint64_t v768 = 0;
                            uint64_t v764 = *(void **)(v117 + 24);
                            uint64_t v765 = v764[2];
                            uint64_t v766 = v266[3];
                            uint64_t v767 = *((void *)v766 + 2);
                          }
                          uint64_t v769 = v764[1];
                          uint64_t v757 = v769 + v757 - v768 * v765;
                          uint64_t v756 = *((void *)v766 + 1) + v756 - v767 * v267[2];
                          ++v761;
                          unint64_t v770 = v118[1];
                        }
                        while (v761 < v770);
                        int v753 = *v118;
                      }
                      else
                      {
                        unint64_t v770 = 0;
                        uint64_t v764 = *(void **)(v117 + 24);
                        uint64_t v769 = v764[1];
                      }
                      uint64_t v757 = *v764 + v757 - v770 * v769;
                      uint64_t v756 = *(void *)v266[3] + v756 - *((void *)v266[3] + 1) * v267[1];
                      ++v754;
                    }
                    while (v754 < v753);
                  }
                  break;
                case 4uLL:
                  int v771 = *v118;
                  if (*v118)
                  {
                    unint64_t v772 = 0;
                    uint64_t v773 = 0;
                    uint64_t v774 = 0;
                    uint64_t v775 = 0;
                    uint64_t v776 = *(void *)(v117 + 152);
                    uint64_t v777 = v266[19];
                    uint64_t v778 = v116[19];
                    do
                    {
                      if (v118[1])
                      {
                        unint64_t v779 = 0;
                        do
                        {
                          if (v118[2])
                          {
                            unint64_t v780 = 0;
                            do
                            {
                              if (v118[3])
                              {
                                unint64_t v781 = 0;
                                do
                                {
                                  int v782 = *(char *)(v776 + v775);
                                  if (v782 <= *((char *)v777 + v774)) {
                                    LOBYTE(v782) = *((unsigned char *)v777 + v774);
                                  }
                                  *(unsigned char *)(v778 + v773 + v781) = v782;
                                  uint64_t v117 = *a1;
                                  uint64_t v783 = *(void **)(*a1 + 24);
                                  uint64_t v784 = v783[3];
                                  v775 += v784;
                                  unint64_t v266 = (int **)*a2;
                                  uint64_t v785 = *(int **)(*a2 + 24);
                                  uint64_t v786 = *((void *)v785 + 3);
                                  v774 += v786;
                                  ++v781;
                                  unint64_t v118 = *(int **)*a1;
                                  unint64_t v787 = v118[3];
                                }
                                while (v781 < v787);
                                unint64_t v267 = *v266;
                                v773 += v781;
                              }
                              else
                              {
                                unint64_t v787 = 0;
                                uint64_t v783 = *(void **)(v117 + 24);
                                uint64_t v784 = v783[3];
                                uint64_t v785 = v266[3];
                                uint64_t v786 = *((void *)v785 + 3);
                              }
                              uint64_t v788 = v783[2];
                              uint64_t v775 = v788 + v775 - v787 * v784;
                              uint64_t v774 = *((void *)v785 + 2) + v774 - v786 * v267[3];
                              ++v780;
                              unint64_t v789 = v118[2];
                            }
                            while (v780 < v789);
                          }
                          else
                          {
                            unint64_t v789 = 0;
                            uint64_t v783 = *(void **)(v117 + 24);
                            uint64_t v788 = v783[2];
                          }
                          uint64_t v775 = v783[1] + v775 - v789 * v788;
                          uint64_t v774 = *((void *)v266[3] + 1) + v774 - *((void *)v266[3] + 2) * v267[2];
                          ++v779;
                          unint64_t v790 = v118[1];
                        }
                        while (v779 < v790);
                        int v771 = *v118;
                      }
                      else
                      {
                        unint64_t v790 = 0;
                      }
                      uint64_t v775 = **(void **)(v117 + 24) + v775 - *(void *)(*(void *)(v117 + 24) + 8) * v790;
                      uint64_t v774 = *(void *)v266[3] + v774 - *((void *)v266[3] + 1) * v267[1];
                      ++v772;
                    }
                    while (v772 < v771);
                  }
                  break;
                default:
                  if (v116[6])
                  {
                    unint64_t v721 = 0;
                    v2091 = v266[19];
                    uint64_t v2109 = *(void *)(v117 + 152);
                    uint64_t v722 = v116[19];
                    do
                    {
                      uint64_t v723 = *(void *)*a1;
                      unint64_t v724 = (unint64_t)(*(void *)(*a1 + 8) - v723) >> 2;
                      uint64_t v725 = 0;
                      uint64_t v726 = (v724 - 1);
                      if ((int)v724 - 1 >= 0)
                      {
                        uint64_t v727 = *(void *)(*a1 + 24);
                        int v728 = v721;
                        do
                        {
                          ldiv_t v729 = ldiv(v728, *(int *)(v723 + 4 * v726));
                          int v728 = v729.quot;
                          v725 += *(void *)(v727 + 8 * v726--) * v729.rem;
                        }
                        while (v726 != -1);
                      }
                      uint64_t v730 = *(void *)*a2;
                      unint64_t v731 = (unint64_t)(*(void *)(*a2 + 8) - v730) >> 2;
                      uint64_t v732 = 0;
                      uint64_t v733 = (v731 - 1);
                      if ((int)v731 - 1 >= 0)
                      {
                        uint64_t v734 = *(void *)(*a2 + 24);
                        int v735 = v721;
                        do
                        {
                          ldiv_t v736 = ldiv(v735, *(int *)(v730 + 4 * v733));
                          int v735 = v736.quot;
                          v732 += *(void *)(v734 + 8 * v733--) * v736.rem;
                        }
                        while (v733 != -1);
                      }
                      int v737 = *(char *)(v2109 + (int)v725);
                      if (v737 <= *((char *)v2091 + (int)v732)) {
                        LOBYTE(v737) = *((unsigned char *)v2091 + (int)v732);
                      }
                      *(unsigned char *)(v722 + v721++) = v737;
                    }
                    while (v721 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v12)
      {
        case 0:
          unsigned int v10 = **(_DWORD **)(*a1 + 152);
          if ((signed int)v10 <= **(_DWORD **)(*a2 + 152)) {
            unsigned int v10 = **(_DWORD **)(*a2 + 152);
          }
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = v10;
          return;
        case 1:
          int v156 = *(_DWORD *)(*a2 + 160);
          if (v156 >= 1)
          {
            int v157 = **(_DWORD **)(*a1 + 152);
            unint64_t v158 = *(_DWORD **)(*(void *)a3 + 152);
            int v159 = *(int **)(*a2 + 152);
            unsigned int v160 = v156 + 1;
            do
            {
              int v162 = *v159++;
              int v161 = v162;
              if (v157 > v162) {
                int v161 = v157;
              }
              *v158++ = v161;
              --v160;
            }
            while (v160 > 1);
          }
          return;
        case 2:
          int v163 = *(_DWORD *)(*a1 + 160);
          if (v163 >= 1)
          {
            int v164 = **(_DWORD **)(*a2 + 152);
            uint64_t v165 = *(_DWORD **)(*(void *)a3 + 152);
            float v166 = *(int **)(*a1 + 152);
            unsigned int v167 = v163 + 1;
            do
            {
              int v169 = *v166++;
              int v168 = v169;
              if (v169 <= v164) {
                int v168 = v164;
              }
              *v165++ = v168;
              --v167;
            }
            while (v167 > 1);
          }
          return;
        case 3:
          int v170 = *(_DWORD *)(*(void *)a3 + 48);
          if (v170 >= 1)
          {
            int v171 = *(_DWORD **)(*(void *)a3 + 152);
            unint64_t v172 = *(int **)(*a2 + 152);
            uint64_t v173 = *(int **)(*a1 + 152);
            unsigned int v174 = v170 + 1;
            do
            {
              int v176 = *v173++;
              int v175 = v176;
              int v178 = *v172++;
              int v177 = v178;
              if (v175 <= v178) {
                int v175 = v177;
              }
              *v171++ = v175;
              --v174;
            }
            while (v174 > 1);
          }
          return;
        default:
          int v147 = *(void **)a3;
          unint64_t v148 = (void *)*a1;
          uint64_t v149 = *(int **)*a1;
          uint64_t v150 = (v148[1] - (void)v149) >> 2;
          uint64_t v151 = (v150 - 1);
          if ((int)v151 >= -1) {
            int v152 = -1;
          }
          else {
            int v152 = v150 - 1;
          }
          int v153 = v152 + 1;
          int v154 = v150 + 1;
          while (1)
          {
            unsigned int v155 = v154 - 2;
            if (v154 - 2 < 0) {
              break;
            }
            --v154;
            if (*(void *)(v148[3] + 8 * v155) != *(void *)(v147[3] + 8 * v155)) {
              goto LABEL_231;
            }
          }
          int v154 = v153;
LABEL_231:
          uint64_t v273 = (void *)*a2;
          uint64_t v274 = *(int **)*a2;
          uint64_t v275 = (v273[1] - (void)v274) >> 2;
          uint64_t v276 = (v275 - 1);
          if ((int)v276 >= -1) {
            int v277 = -1;
          }
          else {
            int v277 = v275 - 1;
          }
          int v278 = v277 + 1;
          int v279 = v275 + 1;
          while (1)
          {
            unsigned int v280 = v279 - 2;
            if (v279 - 2 < 0) {
              break;
            }
            --v279;
            if (*(void *)(v273[3] + 8 * v280) != *(void *)(v147[3] + 8 * v280)) {
              goto LABEL_275;
            }
          }
          int v279 = v278;
LABEL_275:
          int v305 = v150 + 1;
          while (1)
          {
            unsigned int v306 = v305 - 2;
            if (v305 - 2 < 0) {
              break;
            }
            --v305;
            if (*(void *)(v148[3] + 8 * v306)) {
              goto LABEL_310;
            }
          }
          int v305 = v153;
LABEL_310:
          int v319 = v275 + 1;
          while (1)
          {
            unsigned int v320 = v319 - 2;
            if (v319 - 2 < 0) {
              break;
            }
            --v319;
            if (*(void *)(v273[3] + 8 * v320)) {
              goto LABEL_484;
            }
          }
          int v319 = v278;
LABEL_484:
          unint64_t v413 = (uint64_t)(v147[1] - *v147) >> 2;
          if (v154 <= v279) {
            int v414 = v279;
          }
          else {
            int v414 = v154;
          }
          if (v154 <= v319) {
            int v154 = v319;
          }
          if (v305 > v279) {
            int v279 = v305;
          }
          if (v413 > v279)
          {
            int v415 = 1;
          }
          else
          {
            int v279 = (uint64_t)(v147[1] - *v147) >> 2;
            int v415 = 4;
          }
          if (v413 > v154)
          {
            int v416 = 2;
          }
          else
          {
            int v154 = v279;
            int v416 = v415;
          }
          if (v413 > v414)
          {
            int v154 = v414;
            int v416 = 3;
          }
          uint64_t v2086 = v276;
          uint64_t v2104 = v151;
          if (!v154) {
            goto LABEL_516;
          }
          unint64_t v417 = *(void *)(v147[3] + 8 * (v154 - 1));
          if (v417 < 0x10) {
            goto LABEL_516;
          }
          switch(v416)
          {
            case 1:
              if (v154 == 2)
              {
                int v1748 = *v149;
                if (*v149)
                {
                  unint64_t v1749 = 0;
                  uint64_t v1750 = 0;
                  uint64_t v1751 = 0;
                  uint64_t v1752 = v148[19];
                  uint64_t v1753 = v273[19];
                  uint64_t v1754 = v147[19];
                  uint64_t v1755 = (uint64_t *)v148[3];
                  uint64_t v1756 = *v1755;
                  uint64_t v1757 = v1755[1];
                  uint64_t v1758 = (uint64_t *)v273[3];
                  uint64_t v1759 = *v1758;
                  uint64_t v1760 = v1758[1];
                  int v1761 = v149[1];
                  int v1762 = v1761;
                  do
                  {
                    if (v1762)
                    {
                      unint64_t v1763 = 0;
                      uint64_t v1764 = v1753 + 4 * v1750;
                      do
                      {
                        if ((int)v417 >= 1)
                        {
                          uint64_t v1765 = 0;
                          int v1766 = *(_DWORD *)(v1752 + 4 * v1751);
                          unsigned int v1767 = v417 + 1;
                          do
                          {
                            int v1768 = *(_DWORD *)(v1764 + v1765);
                            if (v1766 > v1768) {
                              int v1768 = v1766;
                            }
                            *(_DWORD *)(v1754 + v1765) = v1768;
                            --v1767;
                            v1765 += 4;
                          }
                          while (v1767 > 1);
                          int v1761 = v149[1];
                        }
                        v1751 += v1757;
                        v1750 += v1760;
                        v1754 += 4 * (int)v417;
                        ++v1763;
                        v1764 += 4 * v1760;
                      }
                      while (v1763 < v1761);
                      uint64_t v1769 = v1761;
                      int v1748 = *v149;
                      int v1762 = v1761;
                    }
                    else
                    {
                      uint64_t v1769 = 0;
                    }
                    uint64_t v1751 = v1751 + v1756 - v1769 * v1757;
                    uint64_t v1750 = v1750 + v1759 - v1760 * v274[1];
                    ++v1749;
                  }
                  while (v1749 < v1748);
                }
              }
              else if (v154 == 1)
              {
                int v1138 = *v149;
                if (*v149)
                {
                  unint64_t v1139 = 0;
                  uint64_t v1140 = 0;
                  uint64_t v1141 = v148[19];
                  uint64_t v1142 = v273[19];
                  uint64_t v1143 = v147[19];
                  uint64_t v1144 = *(void *)v148[3];
                  uint64_t v1145 = 4 * *(void *)v273[3];
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1146 = 0;
                      int v1147 = *(_DWORD *)(v1141 + 4 * v1140);
                      unsigned int v1148 = v417 + 1;
                      do
                      {
                        int v1149 = *(_DWORD *)(v1142 + v1146);
                        if (v1147 > v1149) {
                          int v1149 = v1147;
                        }
                        *(_DWORD *)(v1143 + v1146) = v1149;
                        --v1148;
                        v1146 += 4;
                      }
                      while (v1148 > 1);
                      int v1138 = *v149;
                    }
                    v1140 += v1144;
                    ++v1139;
                    v1143 += 4 * (int)v417;
                    v1142 += v1145;
                  }
                  while (v1139 < v1138);
                }
              }
              else
              {
                unint64_t v2049 = v147[6];
                if (v2049)
                {
                  unint64_t v2078 = 0;
                  uint64_t v1980 = v273[19];
                  uint64_t v1996 = v148[19];
                  uint64_t v1770 = v147[19];
                  do
                  {
                    uint64_t v1771 = 0;
                    if ((v151 & 0x80000000) == 0)
                    {
                      uint64_t v1772 = v148[3];
                      uint64_t v1773 = v151;
                      int v1774 = v2078;
                      do
                      {
                        ldiv_t v1775 = ldiv(v1774, v149[v1773]);
                        int v1774 = v1775.quot;
                        v1771 += *(void *)(v1772 + 8 * v1773--) * v1775.rem;
                      }
                      while (v1773 != -1);
                    }
                    uint64_t v1776 = v2086;
                    if ((v2086 & 0x80000000) != 0)
                    {
                      LODWORD(v1777) = 0;
                    }
                    else
                    {
                      uint64_t v1777 = 0;
                      uint64_t v1778 = v273[3];
                      int v1779 = v2078;
                      do
                      {
                        ldiv_t v1780 = ldiv(v1779, v274[v1776]);
                        int v1779 = v1780.quot;
                        v1777 += *(void *)(v1778 + 8 * v1776--) * v1780.rem;
                      }
                      while (v1776 != -1);
                    }
                    uint64_t v151 = v2104;
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1781 = 0;
                      int v1782 = *(_DWORD *)(v1996 + 4 * (int)v1771);
                      unsigned int v1783 = v417 + 1;
                      do
                      {
                        int v1784 = *(_DWORD *)(v1980 + 4 * (int)v1777 + v1781);
                        if (v1782 > v1784) {
                          int v1784 = v1782;
                        }
                        *(_DWORD *)(v1770 + v1781) = v1784;
                        --v1783;
                        v1781 += 4;
                      }
                      while (v1783 > 1);
                    }
                    v1770 += 4 * (int)v417;
                    v2078 += (int)v417;
                  }
                  while (v2078 < v2049);
                }
              }
              break;
            case 2:
              if (v154 == 2)
              {
                int v1785 = *v149;
                if (*v149)
                {
                  unint64_t v1786 = 0;
                  uint64_t v1787 = 0;
                  uint64_t v1788 = 0;
                  uint64_t v1789 = v148[19];
                  uint64_t v1790 = v273[19];
                  uint64_t v1791 = v147[19];
                  uint64_t v1792 = (uint64_t *)v148[3];
                  uint64_t v1793 = *v1792;
                  uint64_t v1794 = v1792[1];
                  uint64_t v1795 = (uint64_t *)v273[3];
                  uint64_t v1796 = *v1795;
                  uint64_t v1797 = v1795[1];
                  int v1798 = v149[1];
                  int v1799 = v1798;
                  do
                  {
                    if (v1799)
                    {
                      unint64_t v1800 = 0;
                      uint64_t v1801 = v1789 + 4 * v1788;
                      do
                      {
                        if ((int)v417 >= 1)
                        {
                          uint64_t v1802 = 0;
                          int v1803 = *(_DWORD *)(v1790 + 4 * v1787);
                          unsigned int v1804 = v417 + 1;
                          do
                          {
                            int v1805 = *(_DWORD *)(v1801 + v1802);
                            if (v1805 <= v1803) {
                              int v1805 = v1803;
                            }
                            *(_DWORD *)(v1791 + v1802) = v1805;
                            --v1804;
                            v1802 += 4;
                          }
                          while (v1804 > 1);
                          int v1798 = v149[1];
                        }
                        v1788 += v1794;
                        v1787 += v1797;
                        v1791 += 4 * (int)v417;
                        ++v1800;
                        v1801 += 4 * v1794;
                      }
                      while (v1800 < v1798);
                      uint64_t v1806 = v1798;
                      int v1785 = *v149;
                      int v1799 = v1798;
                    }
                    else
                    {
                      uint64_t v1806 = 0;
                    }
                    uint64_t v1788 = v1788 + v1793 - v1806 * v1794;
                    uint64_t v1787 = v1787 + v1796 - v1797 * v274[1];
                    ++v1786;
                  }
                  while (v1786 < v1785);
                }
              }
              else if (v154 == 1)
              {
                int v1150 = *v149;
                if (*v149)
                {
                  unint64_t v1151 = 0;
                  uint64_t v1152 = 0;
                  uint64_t v1153 = v148[19];
                  uint64_t v1154 = v273[19];
                  uint64_t v1155 = v147[19];
                  uint64_t v1156 = *(void *)v273[3];
                  uint64_t v1157 = 4 * *(void *)v148[3];
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1158 = 0;
                      int v1159 = *(_DWORD *)(v1154 + 4 * v1152);
                      unsigned int v1160 = v417 + 1;
                      do
                      {
                        int v1161 = *(_DWORD *)(v1153 + v1158);
                        if (v1161 <= v1159) {
                          int v1161 = v1159;
                        }
                        *(_DWORD *)(v1155 + v1158) = v1161;
                        --v1160;
                        v1158 += 4;
                      }
                      while (v1160 > 1);
                      int v1150 = *v149;
                    }
                    v1152 += v1156;
                    ++v1151;
                    v1155 += 4 * (int)v417;
                    v1153 += v1157;
                  }
                  while (v1151 < v1150);
                }
              }
              else
              {
                unint64_t v2050 = v147[6];
                if (v2050)
                {
                  unint64_t v2079 = 0;
                  uint64_t v1981 = v273[19];
                  uint64_t v1997 = v148[19];
                  uint64_t v1807 = v147[19];
                  do
                  {
                    uint64_t v1808 = 0;
                    if ((v151 & 0x80000000) == 0)
                    {
                      uint64_t v1809 = v148[3];
                      uint64_t v1810 = v151;
                      int v1811 = v2079;
                      do
                      {
                        ldiv_t v1812 = ldiv(v1811, v149[v1810]);
                        int v1811 = v1812.quot;
                        v1808 += *(void *)(v1809 + 8 * v1810--) * v1812.rem;
                      }
                      while (v1810 != -1);
                    }
                    uint64_t v1813 = v2086;
                    if ((v2086 & 0x80000000) != 0)
                    {
                      LODWORD(v1814) = 0;
                    }
                    else
                    {
                      uint64_t v1814 = 0;
                      uint64_t v1815 = v273[3];
                      int v1816 = v2079;
                      do
                      {
                        ldiv_t v1817 = ldiv(v1816, v274[v1813]);
                        int v1816 = v1817.quot;
                        v1814 += *(void *)(v1815 + 8 * v1813--) * v1817.rem;
                      }
                      while (v1813 != -1);
                    }
                    uint64_t v151 = v2104;
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1818 = 0;
                      int v1819 = *(_DWORD *)(v1981 + 4 * (int)v1814);
                      unsigned int v1820 = v417 + 1;
                      do
                      {
                        int v1821 = *(_DWORD *)(v1997 + 4 * (int)v1808 + v1818);
                        if (v1821 <= v1819) {
                          int v1821 = v1819;
                        }
                        *(_DWORD *)(v1807 + v1818) = v1821;
                        --v1820;
                        v1818 += 4;
                      }
                      while (v1820 > 1);
                    }
                    v1807 += 4 * (int)v417;
                    v2079 += (int)v417;
                  }
                  while (v2079 < v2050);
                }
              }
              break;
            case 3:
              if (v154 == 2)
              {
                int v1348 = *v149;
                if (*v149)
                {
                  unint64_t v1349 = 0;
                  uint64_t v1350 = 0;
                  uint64_t v1351 = 0;
                  uint64_t v1352 = v148[19];
                  uint64_t v1353 = v273[19];
                  uint64_t v1354 = v147[19];
                  uint64_t v1355 = (uint64_t *)v148[3];
                  uint64_t v1356 = *v1355;
                  uint64_t v1357 = v1355[1];
                  uint64_t v1358 = (uint64_t *)v273[3];
                  uint64_t v1359 = *v1358;
                  uint64_t v1360 = v1358[1];
                  int v1361 = v149[1];
                  int v1362 = v1361;
                  do
                  {
                    if (v1362)
                    {
                      unint64_t v1363 = 0;
                      uint64_t v1364 = v1353 + 4 * v1350;
                      uint64_t v1365 = v1352 + 4 * v1351;
                      do
                      {
                        if ((int)v417 >= 1)
                        {
                          uint64_t v1366 = 0;
                          unsigned int v1367 = v417 + 1;
                          do
                          {
                            int v1368 = *(_DWORD *)(v1365 + v1366);
                            if (v1368 <= *(_DWORD *)(v1364 + v1366)) {
                              int v1368 = *(_DWORD *)(v1364 + v1366);
                            }
                            *(_DWORD *)(v1354 + v1366) = v1368;
                            --v1367;
                            v1366 += 4;
                          }
                          while (v1367 > 1);
                          int v1361 = v149[1];
                        }
                        v1351 += v1357;
                        v1350 += v1360;
                        v1354 += 4 * (int)v417;
                        ++v1363;
                        v1364 += 4 * v1360;
                        v1365 += 4 * v1357;
                      }
                      while (v1363 < v1361);
                      uint64_t v1369 = v1361;
                      int v1348 = *v149;
                      int v1362 = v1361;
                    }
                    else
                    {
                      uint64_t v1369 = 0;
                    }
                    uint64_t v1351 = v1351 + v1356 - v1369 * v1357;
                    uint64_t v1350 = v1350 + v1359 - v1360 * v274[1];
                    ++v1349;
                  }
                  while (v1349 < v1348);
                }
              }
              else if (v154 == 1)
              {
                int v418 = *v149;
                if (*v149)
                {
                  unint64_t v419 = 0;
                  uint64_t v420 = v148[19];
                  uint64_t v421 = v273[19];
                  uint64_t v422 = v147[19];
                  uint64_t v423 = 4 * *(void *)v273[3];
                  uint64_t v424 = 4 * *(void *)v148[3];
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      uint64_t v425 = 0;
                      unsigned int v426 = v417 + 1;
                      do
                      {
                        int v427 = *(_DWORD *)(v420 + v425);
                        if (v427 <= *(_DWORD *)(v421 + v425)) {
                          int v427 = *(_DWORD *)(v421 + v425);
                        }
                        *(_DWORD *)(v422 + v425) = v427;
                        --v426;
                        v425 += 4;
                      }
                      while (v426 > 1);
                      int v418 = *v149;
                    }
                    ++v419;
                    v422 += 4 * (int)v417;
                    v421 += v423;
                    v420 += v424;
                  }
                  while (v419 < v418);
                }
              }
              else
              {
                unint64_t v2038 = v147[6];
                if (v2038)
                {
                  unint64_t v2067 = 0;
                  uint64_t v1975 = v273[19];
                  uint64_t v1989 = v148[19];
                  uint64_t v1370 = v147[19];
                  do
                  {
                    uint64_t v1371 = 0;
                    if ((v151 & 0x80000000) == 0)
                    {
                      uint64_t v1372 = v148[3];
                      uint64_t v1373 = v151;
                      int v1374 = v2067;
                      do
                      {
                        ldiv_t v1375 = ldiv(v1374, v149[v1373]);
                        int v1374 = v1375.quot;
                        v1371 += *(void *)(v1372 + 8 * v1373--) * v1375.rem;
                      }
                      while (v1373 != -1);
                    }
                    uint64_t v1376 = v2086;
                    if ((v2086 & 0x80000000) != 0)
                    {
                      LODWORD(v1377) = 0;
                    }
                    else
                    {
                      uint64_t v1377 = 0;
                      uint64_t v1378 = v273[3];
                      int v1379 = v2067;
                      do
                      {
                        ldiv_t v1380 = ldiv(v1379, v274[v1376]);
                        int v1379 = v1380.quot;
                        v1377 += *(void *)(v1378 + 8 * v1376--) * v1380.rem;
                      }
                      while (v1376 != -1);
                    }
                    uint64_t v151 = v2104;
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1381 = 0;
                      uint64_t v1382 = v1975 + 4 * (int)v1377;
                      unsigned int v1383 = v417 + 1;
                      do
                      {
                        int v1384 = *(_DWORD *)(v1989 + 4 * (int)v1371 + v1381);
                        if (v1384 <= *(_DWORD *)(v1382 + v1381)) {
                          int v1384 = *(_DWORD *)(v1382 + v1381);
                        }
                        *(_DWORD *)(v1370 + v1381) = v1384;
                        --v1383;
                        v1381 += 4;
                      }
                      while (v1383 > 1);
                    }
                    v1370 += 4 * (int)v417;
                    v2067 += (int)v417;
                  }
                  while (v2067 < v2038);
                }
              }
              break;
            default:
LABEL_516:
              switch(v413)
              {
                case 1uLL:
                  uint64_t v428 = v147[6];
                  if (v428)
                  {
                    uint64_t v429 = (int *)v148[19];
                    uint64_t v430 = (int *)v273[19];
                    uint64_t v431 = (_DWORD *)v147[19];
                    uint64_t v432 = 4 * *(void *)v273[3];
                    uint64_t v433 = 4 * *(void *)v148[3];
                    do
                    {
                      int v434 = *v429;
                      if (*v429 <= *v430) {
                        int v434 = *v430;
                      }
                      *v431++ = v434;
                      uint64_t v430 = (int *)((char *)v430 + v432);
                      uint64_t v429 = (int *)((char *)v429 + v433);
                      --v428;
                    }
                    while (v428);
                  }
                  break;
                case 2uLL:
                  int v804 = *v149;
                  if (*v149)
                  {
                    unint64_t v805 = 0;
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    uint64_t v808 = 0;
                    uint64_t v809 = v148[19];
                    uint64_t v810 = v273[19];
                    uint64_t v811 = v147[19];
                    uint64_t v812 = (uint64_t *)v148[3];
                    uint64_t v813 = *v812;
                    uint64_t v814 = v812[1];
                    uint64_t v815 = (uint64_t *)v273[3];
                    uint64_t v817 = *v815;
                    uint64_t v816 = v815[1];
                    int v818 = v149[1];
                    do
                    {
                      if (v818)
                      {
                        for (unint64_t m = 0; m < v818; ++m)
                        {
                          int v820 = *(_DWORD *)(v809 + 4 * v808);
                          if (v820 <= *(_DWORD *)(v810 + 4 * v807)) {
                            int v820 = *(_DWORD *)(v810 + 4 * v807);
                          }
                          *(_DWORD *)(v811 + 4 * v806 + 4 * m) = v820;
                          v808 += v814;
                          v807 += v816;
                          int v818 = v149[1];
                        }
                        uint64_t v821 = v818;
                        int v804 = *v149;
                        v806 += m;
                      }
                      else
                      {
                        uint64_t v821 = 0;
                      }
                      uint64_t v808 = v808 + v813 - v821 * v814;
                      uint64_t v807 = v807 + v817 - v816 * v274[1];
                      ++v805;
                    }
                    while (v805 < v804);
                  }
                  break;
                case 3uLL:
                  int v822 = *v149;
                  if (*v149)
                  {
                    unint64_t v823 = 0;
                    uint64_t v824 = 0;
                    uint64_t v825 = 0;
                    uint64_t v826 = 0;
                    uint64_t v827 = v148[19];
                    uint64_t v828 = v273[19];
                    uint64_t v829 = v147[19];
                    uint64_t v830 = (uint64_t *)v148[3];
                    uint64_t v831 = *v830;
                    uint64_t v832 = v830[1];
                    unint64_t v833 = (uint64_t *)v273[3];
                    uint64_t v834 = *v833;
                    uint64_t v835 = v833[1];
                    int v836 = v149[1];
                    int v837 = v836;
                    do
                    {
                      if (v837)
                      {
                        unint64_t v838 = 0;
                        uint64_t v839 = v830[2];
                        uint64_t v840 = v833[2];
                        int v841 = v149[2];
                        do
                        {
                          if (v841)
                          {
                            for (unint64_t n = 0; n < v841; ++n)
                            {
                              int v843 = *(_DWORD *)(v827 + 4 * v826);
                              if (v843 <= *(_DWORD *)(v828 + 4 * v825)) {
                                int v843 = *(_DWORD *)(v828 + 4 * v825);
                              }
                              *(_DWORD *)(v829 + 4 * v824 + 4 * n) = v843;
                              v826 += v839;
                              v825 += v840;
                              int v841 = v149[2];
                            }
                            uint64_t v844 = v841;
                            int v836 = v149[1];
                            v824 += n;
                          }
                          else
                          {
                            uint64_t v844 = 0;
                          }
                          uint64_t v826 = v826 + v832 - v844 * v839;
                          uint64_t v825 = v825 + v835 - v840 * v274[2];
                          ++v838;
                        }
                        while (v838 < v836);
                        uint64_t v845 = v836;
                        int v822 = *v149;
                        int v837 = v836;
                      }
                      else
                      {
                        uint64_t v845 = 0;
                      }
                      uint64_t v826 = v826 + v831 - v845 * v832;
                      uint64_t v825 = v825 + v834 - v835 * v274[1];
                      ++v823;
                    }
                    while (v823 < v822);
                  }
                  break;
                case 4uLL:
                  int v846 = *v149;
                  if (*v149)
                  {
                    unint64_t v847 = 0;
                    uint64_t v848 = 0;
                    uint64_t v849 = 0;
                    uint64_t v850 = 0;
                    uint64_t v851 = v148[19];
                    uint64_t v852 = v273[19];
                    uint64_t v853 = v147[19];
                    uint64_t v854 = (uint64_t *)v148[3];
                    uint64_t v855 = *v854;
                    uint64_t v856 = v854[1];
                    unint64_t v857 = (uint64_t *)v273[3];
                    uint64_t v858 = *v857;
                    uint64_t v859 = v857[1];
                    int v860 = v149[1];
                    int v861 = v860;
                    do
                    {
                      if (v861)
                      {
                        unint64_t v862 = 0;
                        uint64_t v863 = v854[2];
                        uint64_t v864 = v857[2];
                        int v865 = v149[2];
                        int v866 = v865;
                        do
                        {
                          if (v866)
                          {
                            unint64_t v867 = 0;
                            uint64_t v868 = v854[3];
                            uint64_t v869 = v857[3];
                            int v870 = v149[3];
                            do
                            {
                              if (v870)
                              {
                                for (iunint64_t i = 0; ii < v870; ++ii)
                                {
                                  int v872 = *(_DWORD *)(v851 + 4 * v850);
                                  if (v872 <= *(_DWORD *)(v852 + 4 * v849)) {
                                    int v872 = *(_DWORD *)(v852 + 4 * v849);
                                  }
                                  *(_DWORD *)(v853 + 4 * v848 + 4 * ii) = v872;
                                  v850 += v868;
                                  v849 += v869;
                                  int v870 = v149[3];
                                }
                                uint64_t v873 = v870;
                                int v865 = v149[2];
                                v848 += ii;
                              }
                              else
                              {
                                uint64_t v873 = 0;
                              }
                              uint64_t v850 = v850 + v863 - v873 * v868;
                              uint64_t v849 = v849 + v864 - v869 * v274[3];
                              ++v867;
                            }
                            while (v867 < v865);
                            uint64_t v874 = v865;
                            int v860 = v149[1];
                            int v866 = v865;
                          }
                          else
                          {
                            uint64_t v874 = 0;
                          }
                          uint64_t v850 = v850 + v856 - v874 * v863;
                          uint64_t v849 = v849 + v859 - v864 * v274[2];
                          ++v862;
                        }
                        while (v862 < v860);
                        uint64_t v875 = v860;
                        int v846 = *v149;
                        int v861 = v860;
                      }
                      else
                      {
                        uint64_t v875 = 0;
                      }
                      uint64_t v850 = v850 + v855 - v875 * v856;
                      uint64_t v849 = v849 + v858 - v859 * v274[1];
                      ++v847;
                    }
                    while (v847 < v846);
                  }
                  break;
                default:
                  uint64_t v791 = v147[6];
                  if (v791)
                  {
                    uint64_t v792 = 0;
                    uint64_t v2029 = v273[19];
                    uint64_t v2058 = v148[19];
                    uint64_t v2016 = v147[19];
                    do
                    {
                      uint64_t v793 = 0;
                      if ((v151 & 0x80000000) == 0)
                      {
                        uint64_t v794 = v148[3];
                        uint64_t v795 = v151;
                        int v796 = v792;
                        do
                        {
                          ldiv_t v797 = ldiv(v796, v149[v795]);
                          int v796 = v797.quot;
                          v793 += *(void *)(v794 + 8 * v795--) * v797.rem;
                        }
                        while (v795 != -1);
                      }
                      uint64_t v798 = v2086;
                      if ((v2086 & 0x80000000) != 0)
                      {
                        LODWORD(v799) = 0;
                      }
                      else
                      {
                        uint64_t v799 = 0;
                        uint64_t v800 = v273[3];
                        int v801 = v792;
                        do
                        {
                          ldiv_t v802 = ldiv(v801, v274[v798]);
                          int v801 = v802.quot;
                          v799 += *(void *)(v800 + 8 * v798--) * v802.rem;
                        }
                        while (v798 != -1);
                      }
                      int v803 = *(_DWORD *)(v2058 + 4 * (int)v793);
                      if (v803 <= *(_DWORD *)(v2029 + 4 * (int)v799)) {
                        int v803 = *(_DWORD *)(v2029 + 4 * (int)v799);
                      }
                      *(_DWORD *)(v2016 + 4 * v792++) = v803;
                      uint64_t v151 = v2104;
                    }
                    while (v792 != v791);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v13)
      {
        case 0:
          uint64_t v14 = **(void **)(*a1 + 152);
          if (v14 <= **(void **)(*a2 + 152)) {
            uint64_t v14 = **(void **)(*a2 + 152);
          }
          **(void **)(*(void *)a3 + 152) = v14;
          return;
        case 1:
          int v188 = *(_DWORD *)(*a2 + 160);
          if (v188 >= 1)
          {
            uint64_t v189 = **(void **)(*a1 + 152);
            uint64_t v190 = *(void **)(*(void *)a3 + 152);
            unint64_t v191 = *(uint64_t **)(*a2 + 152);
            unsigned int v192 = v188 + 1;
            do
            {
              uint64_t v194 = *v191++;
              uint64_t v193 = v194;
              if (v189 > v194) {
                uint64_t v193 = v189;
              }
              *v190++ = v193;
              --v192;
            }
            while (v192 > 1);
          }
          return;
        case 2:
          int v195 = *(_DWORD *)(*a1 + 160);
          if (v195 >= 1)
          {
            uint64_t v196 = **(void **)(*a2 + 152);
            uint64_t v197 = *(void **)(*(void *)a3 + 152);
            float v198 = *(uint64_t **)(*a1 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              uint64_t v201 = *v198++;
              uint64_t v200 = v201;
              if (v201 <= v196) {
                uint64_t v200 = v196;
              }
              *v197++ = v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 3:
          int v202 = *(_DWORD *)(*(void *)a3 + 48);
          if (v202 >= 1)
          {
            unint64_t v203 = *(void **)(*(void *)a3 + 152);
            uint64_t v204 = *(uint64_t **)(*a2 + 152);
            uint64_t v205 = *(uint64_t **)(*a1 + 152);
            unsigned int v206 = v202 + 1;
            do
            {
              uint64_t v208 = *v205++;
              uint64_t v207 = v208;
              uint64_t v210 = *v204++;
              uint64_t v209 = v210;
              if (v207 <= v210) {
                uint64_t v207 = v209;
              }
              *v203++ = v207;
              --v206;
            }
            while (v206 > 1);
          }
          return;
        default:
          int v179 = *(void **)a3;
          uint64_t v180 = (void *)*a1;
          unint64_t v181 = *(int **)*a1;
          uint64_t v182 = (v180[1] - (void)v181) >> 2;
          uint64_t v183 = (v182 - 1);
          if ((int)v183 >= -1) {
            int v184 = -1;
          }
          else {
            int v184 = v182 - 1;
          }
          int v185 = v184 + 1;
          int v186 = v182 + 1;
          while (1)
          {
            unsigned int v187 = v186 - 2;
            if (v186 - 2 < 0) {
              break;
            }
            --v186;
            if (*(void *)(v180[3] + 8 * v187) != *(void *)(v179[3] + 8 * v187)) {
              goto LABEL_239;
            }
          }
          int v186 = v185;
LABEL_239:
          uint64_t v281 = (void *)*a2;
          uint64_t v282 = *(int **)*a2;
          uint64_t v283 = (v281[1] - (void)v282) >> 2;
          uint64_t v284 = (v283 - 1);
          if ((int)v284 >= -1) {
            int v285 = -1;
          }
          else {
            int v285 = v283 - 1;
          }
          int v286 = v285 + 1;
          int v287 = v283 + 1;
          while (1)
          {
            unsigned int v288 = v287 - 2;
            if (v287 - 2 < 0) {
              break;
            }
            --v287;
            if (*(void *)(v281[3] + 8 * v288) != *(void *)(v179[3] + 8 * v288)) {
              goto LABEL_280;
            }
          }
          int v287 = v286;
LABEL_280:
          int v307 = v182 + 1;
          while (1)
          {
            unsigned int v308 = v307 - 2;
            if (v307 - 2 < 0) {
              break;
            }
            --v307;
            if (*(void *)(v180[3] + 8 * v308)) {
              goto LABEL_315;
            }
          }
          int v307 = v185;
LABEL_315:
          int v321 = v283 + 1;
          while (1)
          {
            unsigned int v322 = v321 - 2;
            if (v321 - 2 < 0) {
              break;
            }
            --v321;
            if (*(void *)(v281[3] + 8 * v322)) {
              goto LABEL_524;
            }
          }
          int v321 = v286;
LABEL_524:
          unint64_t v435 = (uint64_t)(v179[1] - *v179) >> 2;
          if (v186 <= v287) {
            int v436 = v287;
          }
          else {
            int v436 = v186;
          }
          if (v186 <= v321) {
            int v186 = v321;
          }
          if (v307 > v287) {
            int v287 = v307;
          }
          if (v435 > v287)
          {
            int v437 = 1;
          }
          else
          {
            int v287 = (uint64_t)(v179[1] - *v179) >> 2;
            int v437 = 4;
          }
          if (v435 > v186)
          {
            int v438 = 2;
          }
          else
          {
            int v186 = v287;
            int v438 = v437;
          }
          if (v435 > v436)
          {
            int v186 = v436;
            int v438 = 3;
          }
          uint64_t v2087 = v284;
          uint64_t v2105 = v183;
          if (!v186) {
            goto LABEL_555;
          }
          unint64_t v439 = *(void *)(v179[3] + 8 * (v186 - 1));
          if (v439 < 0x10) {
            goto LABEL_555;
          }
          switch(v438)
          {
            case 1:
              if (v186 == 2)
              {
                uint64_t v1822 = *v181;
                if (v1822)
                {
                  uint64_t v1823 = 0;
                  uint64_t v1824 = 0;
                  uint64_t v1825 = 0;
                  uint64_t v1826 = v180[19];
                  uint64_t v1827 = v281[19];
                  uint64_t v1828 = v179[19];
                  unint64_t v1829 = v181[1];
                  uint64_t v1830 = (uint64_t *)v180[3];
                  uint64_t v1831 = *v1830;
                  uint64_t v1832 = v1830[1];
                  uint64_t v1833 = (uint64_t *)v281[3];
                  uint64_t v1834 = *v1833;
                  uint64_t v1835 = v1833[1];
                  if (v1829 <= 1) {
                    uint64_t v1836 = 1;
                  }
                  else {
                    uint64_t v1836 = v181[1];
                  }
                  uint64_t v1837 = v1831 - v1832 * v1829;
                  uint64_t v1838 = v1834 - v1835 * v282[1];
                  do
                  {
                    if (v1829)
                    {
                      uint64_t v1839 = 0;
                      uint64_t v1840 = v1827 + 8 * v1824;
                      do
                      {
                        if ((int)v439 >= 1)
                        {
                          uint64_t v1841 = 0;
                          uint64_t v1842 = *(void *)(v1826 + 8 * v1825);
                          unsigned int v1843 = v439 + 1;
                          do
                          {
                            uint64_t v1844 = *(void *)(v1840 + v1841);
                            if (v1842 > v1844) {
                              uint64_t v1844 = v1842;
                            }
                            *(void *)(v1828 + v1841) = v1844;
                            --v1843;
                            v1841 += 8;
                          }
                          while (v1843 > 1);
                        }
                        v1825 += v1832;
                        v1824 += v1835;
                        v1828 += 8 * (int)v439;
                        ++v1839;
                        v1840 += 8 * v1835;
                      }
                      while (v1839 != v1836);
                    }
                    v1825 += v1837;
                    v1824 += v1838;
                    ++v1823;
                  }
                  while (v1823 != v1822);
                }
              }
              else if (v186 == 1)
              {
                uint64_t v1162 = *v181;
                if (v1162)
                {
                  uint64_t v1163 = 0;
                  uint64_t v1164 = 0;
                  uint64_t v1165 = v180[19];
                  uint64_t v1166 = v281[19];
                  uint64_t v1167 = v179[19];
                  uint64_t v1168 = *(void *)v180[3];
                  uint64_t v1169 = 8 * *(void *)v281[3];
                  do
                  {
                    if ((int)v439 >= 1)
                    {
                      uint64_t v1170 = 0;
                      uint64_t v1171 = *(void *)(v1165 + 8 * v1164);
                      unsigned int v1172 = v439 + 1;
                      do
                      {
                        uint64_t v1173 = *(void *)(v1166 + v1170);
                        if (v1171 > v1173) {
                          uint64_t v1173 = v1171;
                        }
                        *(void *)(v1167 + v1170) = v1173;
                        --v1172;
                        v1170 += 8;
                      }
                      while (v1172 > 1);
                    }
                    v1164 += v1168;
                    ++v1163;
                    v1167 += 8 * (int)v439;
                    v1166 += v1169;
                  }
                  while (v1163 != v1162);
                }
              }
              else
              {
                unint64_t v2051 = v179[6];
                if (v2051)
                {
                  unint64_t v2080 = 0;
                  uint64_t v1982 = v281[19];
                  uint64_t v1998 = v180[19];
                  uint64_t v1845 = v179[19];
                  do
                  {
                    uint64_t v1846 = 0;
                    if ((v183 & 0x80000000) == 0)
                    {
                      uint64_t v1847 = v180[3];
                      uint64_t v1848 = v183;
                      int v1849 = v2080;
                      do
                      {
                        ldiv_t v1850 = ldiv(v1849, v181[v1848]);
                        int v1849 = v1850.quot;
                        v1846 += *(void *)(v1847 + 8 * v1848--) * v1850.rem;
                      }
                      while (v1848 != -1);
                    }
                    uint64_t v1851 = v2087;
                    if ((v2087 & 0x80000000) != 0)
                    {
                      LODWORD(v1852) = 0;
                    }
                    else
                    {
                      uint64_t v1852 = 0;
                      uint64_t v1853 = v281[3];
                      int v1854 = v2080;
                      do
                      {
                        ldiv_t v1855 = ldiv(v1854, v282[v1851]);
                        int v1854 = v1855.quot;
                        v1852 += *(void *)(v1853 + 8 * v1851--) * v1855.rem;
                      }
                      while (v1851 != -1);
                    }
                    uint64_t v183 = v2105;
                    if ((int)v439 >= 1)
                    {
                      uint64_t v1856 = 0;
                      uint64_t v1857 = *(void *)(v1998 + 8 * (int)v1846);
                      unsigned int v1858 = v439 + 1;
                      do
                      {
                        uint64_t v1859 = *(void *)(v1982 + 8 * (int)v1852 + v1856);
                        if (v1857 > v1859) {
                          uint64_t v1859 = v1857;
                        }
                        *(void *)(v1845 + v1856) = v1859;
                        --v1858;
                        v1856 += 8;
                      }
                      while (v1858 > 1);
                    }
                    v1845 += 8 * (int)v439;
                    v2080 += (int)v439;
                  }
                  while (v2080 < v2051);
                }
              }
              break;
            case 2:
              if (v186 == 2)
              {
                uint64_t v1860 = *v181;
                if (v1860)
                {
                  uint64_t v1861 = 0;
                  uint64_t v1862 = 0;
                  uint64_t v1863 = 0;
                  uint64_t v1864 = v180[19];
                  uint64_t v1865 = v281[19];
                  uint64_t v1866 = v179[19];
                  unint64_t v1867 = v181[1];
                  uint64_t v1868 = (uint64_t *)v180[3];
                  uint64_t v1869 = *v1868;
                  uint64_t v1870 = v1868[1];
                  uint64_t v1871 = (uint64_t *)v281[3];
                  uint64_t v1872 = *v1871;
                  uint64_t v1873 = v1871[1];
                  if (v1867 <= 1) {
                    uint64_t v1874 = 1;
                  }
                  else {
                    uint64_t v1874 = v181[1];
                  }
                  uint64_t v1875 = v1869 - v1870 * v1867;
                  uint64_t v1876 = v1872 - v1873 * v282[1];
                  do
                  {
                    if (v1867)
                    {
                      uint64_t v1877 = 0;
                      uint64_t v1878 = v1864 + 8 * v1863;
                      do
                      {
                        if ((int)v439 >= 1)
                        {
                          uint64_t v1879 = 0;
                          uint64_t v1880 = *(void *)(v1865 + 8 * v1862);
                          unsigned int v1881 = v439 + 1;
                          do
                          {
                            uint64_t v1882 = *(void *)(v1878 + v1879);
                            if (v1882 <= v1880) {
                              uint64_t v1882 = v1880;
                            }
                            *(void *)(v1866 + v1879) = v1882;
                            --v1881;
                            v1879 += 8;
                          }
                          while (v1881 > 1);
                        }
                        v1863 += v1870;
                        v1862 += v1873;
                        v1866 += 8 * (int)v439;
                        ++v1877;
                        v1878 += 8 * v1870;
                      }
                      while (v1877 != v1874);
                    }
                    v1863 += v1875;
                    v1862 += v1876;
                    ++v1861;
                  }
                  while (v1861 != v1860);
                }
              }
              else if (v186 == 1)
              {
                uint64_t v1174 = *v181;
                if (v1174)
                {
                  uint64_t v1175 = 0;
                  uint64_t v1176 = 0;
                  uint64_t v1177 = v180[19];
                  uint64_t v1178 = v281[19];
                  uint64_t v1179 = v179[19];
                  uint64_t v1180 = *(void *)v281[3];
                  uint64_t v1181 = 8 * *(void *)v180[3];
                  do
                  {
                    if ((int)v439 >= 1)
                    {
                      uint64_t v1182 = 0;
                      uint64_t v1183 = *(void *)(v1178 + 8 * v1176);
                      unsigned int v1184 = v439 + 1;
                      do
                      {
                        uint64_t v1185 = *(void *)(v1177 + v1182);
                        if (v1185 <= v1183) {
                          uint64_t v1185 = v1183;
                        }
                        *(void *)(v1179 + v1182) = v1185;
                        --v1184;
                        v1182 += 8;
                      }
                      while (v1184 > 1);
                    }
                    v1176 += v1180;
                    ++v1175;
                    v1179 += 8 * (int)v439;
                    v1177 += v1181;
                  }
                  while (v1175 != v1174);
                }
              }
              else
              {
                unint64_t v2052 = v179[6];
                if (v2052)
                {
                  unint64_t v2081 = 0;
                  uint64_t v1983 = v281[19];
                  uint64_t v1999 = v180[19];
                  uint64_t v1883 = v179[19];
                  do
                  {
                    uint64_t v1884 = 0;
                    if ((v183 & 0x80000000) == 0)
                    {
                      uint64_t v1885 = v180[3];
                      uint64_t v1886 = v183;
                      int v1887 = v2081;
                      do
                      {
                        ldiv_t v1888 = ldiv(v1887, v181[v1886]);
                        int v1887 = v1888.quot;
                        v1884 += *(void *)(v1885 + 8 * v1886--) * v1888.rem;
                      }
                      while (v1886 != -1);
                    }
                    uint64_t v1889 = v2087;
                    if ((v2087 & 0x80000000) != 0)
                    {
                      LODWORD(v1890) = 0;
                    }
                    else
                    {
                      uint64_t v1890 = 0;
                      uint64_t v1891 = v281[3];
                      int v1892 = v2081;
                      do
                      {
                        ldiv_t v1893 = ldiv(v1892, v282[v1889]);
                        int v1892 = v1893.quot;
                        v1890 += *(void *)(v1891 + 8 * v1889--) * v1893.rem;
                      }
                      while (v1889 != -1);
                    }
                    uint64_t v183 = v2105;
                    if ((int)v439 >= 1)
                    {
                      uint64_t v1894 = 0;
                      uint64_t v1895 = *(void *)(v1983 + 8 * (int)v1890);
                      unsigned int v1896 = v439 + 1;
                      do
                      {
                        uint64_t v1897 = *(void *)(v1999 + 8 * (int)v1884 + v1894);
                        if (v1897 <= v1895) {
                          uint64_t v1897 = v1895;
                        }
                        *(void *)(v1883 + v1894) = v1897;
                        --v1896;
                        v1894 += 8;
                      }
                      while (v1896 > 1);
                    }
                    v1883 += 8 * (int)v439;
                    v2081 += (int)v439;
                  }
                  while (v2081 < v2052);
                }
              }
              break;
            case 3:
              if (v186 == 2)
              {
                uint64_t v1385 = *v181;
                if (v1385)
                {
                  uint64_t v1386 = 0;
                  uint64_t v1387 = 0;
                  uint64_t v1388 = 0;
                  uint64_t v1389 = v180[19];
                  uint64_t v1390 = v281[19];
                  uint64_t v1391 = v179[19];
                  unint64_t v1392 = v181[1];
                  uint64_t v1393 = (uint64_t *)v180[3];
                  uint64_t v1394 = *v1393;
                  uint64_t v1395 = v1393[1];
                  uint64_t v1396 = (uint64_t *)v281[3];
                  uint64_t v1397 = *v1396;
                  uint64_t v1398 = v1396[1];
                  if (v1392 <= 1) {
                    uint64_t v1399 = 1;
                  }
                  else {
                    uint64_t v1399 = v181[1];
                  }
                  uint64_t v1400 = v1394 - v1395 * v1392;
                  uint64_t v1401 = v1397 - v1398 * v282[1];
                  do
                  {
                    if (v1392)
                    {
                      uint64_t v1402 = 0;
                      uint64_t v1403 = v1390 + 8 * v1387;
                      uint64_t v1404 = v1389 + 8 * v1388;
                      do
                      {
                        if ((int)v439 >= 1)
                        {
                          uint64_t v1405 = 0;
                          unsigned int v1406 = v439 + 1;
                          do
                          {
                            uint64_t v1407 = *(void *)(v1404 + v1405);
                            if (v1407 <= *(void *)(v1403 + v1405)) {
                              uint64_t v1407 = *(void *)(v1403 + v1405);
                            }
                            *(void *)(v1391 + v1405) = v1407;
                            --v1406;
                            v1405 += 8;
                          }
                          while (v1406 > 1);
                        }
                        v1388 += v1395;
                        v1387 += v1398;
                        v1391 += 8 * (int)v439;
                        ++v1402;
                        v1403 += 8 * v1398;
                        v1404 += 8 * v1395;
                      }
                      while (v1402 != v1399);
                    }
                    v1388 += v1400;
                    v1387 += v1401;
                    ++v1386;
                  }
                  while (v1386 != v1385);
                }
              }
              else if (v186 == 1)
              {
                uint64_t v440 = *v181;
                if (v440)
                {
                  uint64_t v441 = 0;
                  uint64_t v442 = v180[19];
                  uint64_t v443 = v281[19];
                  uint64_t v444 = v179[19];
                  uint64_t v445 = 8 * *(void *)v281[3];
                  uint64_t v446 = 8 * *(void *)v180[3];
                  do
                  {
                    if ((int)v439 >= 1)
                    {
                      uint64_t v447 = 0;
                      unsigned int v448 = v439 + 1;
                      do
                      {
                        uint64_t v449 = *(void *)(v442 + v447);
                        if (v449 <= *(void *)(v443 + v447)) {
                          uint64_t v449 = *(void *)(v443 + v447);
                        }
                        *(void *)(v444 + v447) = v449;
                        --v448;
                        v447 += 8;
                      }
                      while (v448 > 1);
                    }
                    ++v441;
                    v444 += 8 * (int)v439;
                    v443 += v445;
                    v442 += v446;
                  }
                  while (v441 != v440);
                }
              }
              else
              {
                unint64_t v2039 = v179[6];
                if (v2039)
                {
                  unint64_t v2068 = 0;
                  uint64_t v1976 = v281[19];
                  uint64_t v1990 = v180[19];
                  uint64_t v1408 = v179[19];
                  do
                  {
                    uint64_t v1409 = 0;
                    if ((v183 & 0x80000000) == 0)
                    {
                      uint64_t v1410 = v180[3];
                      uint64_t v1411 = v183;
                      int v1412 = v2068;
                      do
                      {
                        ldiv_t v1413 = ldiv(v1412, v181[v1411]);
                        int v1412 = v1413.quot;
                        v1409 += *(void *)(v1410 + 8 * v1411--) * v1413.rem;
                      }
                      while (v1411 != -1);
                    }
                    uint64_t v1414 = v2087;
                    if ((v2087 & 0x80000000) != 0)
                    {
                      LODWORD(v1415) = 0;
                    }
                    else
                    {
                      uint64_t v1415 = 0;
                      uint64_t v1416 = v281[3];
                      int v1417 = v2068;
                      do
                      {
                        ldiv_t v1418 = ldiv(v1417, v282[v1414]);
                        int v1417 = v1418.quot;
                        v1415 += *(void *)(v1416 + 8 * v1414--) * v1418.rem;
                      }
                      while (v1414 != -1);
                    }
                    uint64_t v183 = v2105;
                    if ((int)v439 >= 1)
                    {
                      uint64_t v1419 = 0;
                      uint64_t v1420 = v1976 + 8 * (int)v1415;
                      unsigned int v1421 = v439 + 1;
                      do
                      {
                        uint64_t v1422 = *(void *)(v1990 + 8 * (int)v1409 + v1419);
                        if (v1422 <= *(void *)(v1420 + v1419)) {
                          uint64_t v1422 = *(void *)(v1420 + v1419);
                        }
                        *(void *)(v1408 + v1419) = v1422;
                        --v1421;
                        v1419 += 8;
                      }
                      while (v1421 > 1);
                    }
                    v1408 += 8 * (int)v439;
                    v2068 += (int)v439;
                  }
                  while (v2068 < v2039);
                }
              }
              break;
            default:
LABEL_555:
              switch(v435)
              {
                case 1uLL:
                  uint64_t v450 = v179[6];
                  if (v450)
                  {
                    uint64_t v451 = (uint64_t *)v180[19];
                    uint64_t v452 = (uint64_t *)v281[19];
                    unsigned int v453 = (void *)v179[19];
                    uint64_t v454 = 8 * *(void *)v281[3];
                    uint64_t v455 = 8 * *(void *)v180[3];
                    do
                    {
                      uint64_t v456 = *v451;
                      if (*v451 <= *v452) {
                        uint64_t v456 = *v452;
                      }
                      *v453++ = v456;
                      uint64_t v452 = (uint64_t *)((char *)v452 + v454);
                      uint64_t v451 = (uint64_t *)((char *)v451 + v455);
                      --v450;
                    }
                    while (v450);
                  }
                  break;
                case 2uLL:
                  uint64_t v889 = *v181;
                  if (v889)
                  {
                    uint64_t v890 = 0;
                    uint64_t v891 = 0;
                    uint64_t v892 = 0;
                    uint64_t v893 = 0;
                    uint64_t v894 = v180[19];
                    uint64_t v895 = v281[19];
                    uint64_t v896 = v179[19];
                    unint64_t v897 = v181[1];
                    uint64_t v898 = (uint64_t *)v180[3];
                    uint64_t v899 = *v898;
                    uint64_t v900 = v898[1];
                    uint64_t v901 = (uint64_t *)v281[3];
                    uint64_t v902 = *v901;
                    uint64_t v903 = v901[1];
                    uint64_t v904 = v902 - v903 * v282[1];
                    if (v897 <= 1) {
                      uint64_t v905 = 1;
                    }
                    else {
                      uint64_t v905 = v181[1];
                    }
                    uint64_t v906 = v899 - v900 * v897;
                    do
                    {
                      if (v897)
                      {
                        uint64_t v907 = v891 + v905;
                        uint64_t v908 = (void *)(v896 + 8 * v891);
                        uint64_t v909 = v905;
                        do
                        {
                          uint64_t v910 = *(void *)(v894 + 8 * v893);
                          if (v910 <= *(void *)(v895 + 8 * v892)) {
                            uint64_t v910 = *(void *)(v895 + 8 * v892);
                          }
                          *v908++ = v910;
                          v893 += v900;
                          v892 += v903;
                          --v909;
                        }
                        while (v909);
                        uint64_t v891 = v907;
                      }
                      v893 += v906;
                      v892 += v904;
                      ++v890;
                    }
                    while (v890 != v889);
                  }
                  break;
                case 3uLL:
                  uint64_t v911 = *v181;
                  if (v911)
                  {
                    uint64_t v912 = 0;
                    uint64_t v913 = 0;
                    uint64_t v914 = 0;
                    uint64_t v915 = 0;
                    uint64_t v916 = v180[19];
                    uint64_t v917 = v281[19];
                    uint64_t v918 = v179[19];
                    unint64_t v919 = v181[1];
                    uint64_t v920 = (void *)v180[3];
                    uint64_t v921 = v920[1];
                    uint64_t v922 = (void *)v281[3];
                    uint64_t v923 = v922[1];
                    uint64_t v924 = *v922 - v923 * v282[1];
                    if (v919 <= 1) {
                      uint64_t v925 = 1;
                    }
                    else {
                      uint64_t v925 = v181[1];
                    }
                    unint64_t v926 = *v920 - v921 * v919;
                    do
                    {
                      if (v919)
                      {
                        uint64_t v927 = 0;
                        unint64_t v928 = v181[2];
                        uint64_t v929 = v920[2];
                        uint64_t v930 = v922[2];
                        if (v928 <= 1) {
                          uint64_t v931 = 1;
                        }
                        else {
                          uint64_t v931 = v181[2];
                        }
                        uint64_t v932 = v923 - v930 * v282[2];
                        do
                        {
                          uint64_t v933 = v931;
                          if (v928)
                          {
                            do
                            {
                              uint64_t v934 = *(void *)(v916 + 8 * v915);
                              if (v934 <= *(void *)(v917 + 8 * v914)) {
                                uint64_t v934 = *(void *)(v917 + 8 * v914);
                              }
                              *(void *)(v918 + 8 * v913++) = v934;
                              v915 += v929;
                              v914 += v930;
                              --v933;
                            }
                            while (v933);
                          }
                          v915 += v921 - v929 * v928;
                          v914 += v932;
                          ++v927;
                        }
                        while (v927 != v925);
                      }
                      v915 += v926;
                      v914 += v924;
                      ++v912;
                    }
                    while (v912 != v911);
                  }
                  break;
                case 4uLL:
                  uint64_t v2110 = *v181;
                  if (v2110)
                  {
                    uint64_t v935 = 0;
                    uint64_t v936 = 0;
                    uint64_t v937 = 0;
                    uint64_t v938 = 0;
                    uint64_t v939 = v180[19];
                    uint64_t v940 = v281[19];
                    uint64_t v941 = v179[19];
                    unint64_t v942 = v181[1];
                    uint64_t v943 = (void *)v180[3];
                    uint64_t v944 = (void *)v281[3];
                    uint64_t v2003 = v944[1];
                    uint64_t v2018 = v943[1];
                    uint64_t v2060 = *v944 - v2003 * v282[1];
                    int v2092 = v181[1];
                    if (v942 <= 1) {
                      uint64_t v945 = 1;
                    }
                    else {
                      uint64_t v945 = v181[1];
                    }
                    unint64_t v2031 = *v943 - v943[1] * v942;
                    do
                    {
                      if (v2092)
                      {
                        uint64_t v946 = 0;
                        unint64_t v947 = v181[2];
                        uint64_t v948 = v943[2];
                        uint64_t v949 = v944[2];
                        if (v947 <= 1) {
                          uint64_t v950 = 1;
                        }
                        else {
                          uint64_t v950 = v181[2];
                        }
                        uint64_t v951 = v2003 - v949 * v282[2];
                        do
                        {
                          if (v947)
                          {
                            uint64_t v952 = 0;
                            unint64_t v953 = v181[3];
                            uint64_t v954 = v943[3];
                            uint64_t v955 = v944[3];
                            if (v953 <= 1) {
                              uint64_t v956 = 1;
                            }
                            else {
                              uint64_t v956 = v181[3];
                            }
                            uint64_t v957 = v949 - v955 * v282[3];
                            do
                            {
                              uint64_t v958 = v956;
                              if (v953)
                              {
                                do
                                {
                                  uint64_t v959 = *(void *)(v940 + 8 * v937);
                                  if (*(void *)(v939 + 8 * v938) > v959) {
                                    uint64_t v959 = *(void *)(v939 + 8 * v938);
                                  }
                                  *(void *)(v941 + 8 * v936++) = v959;
                                  v938 += v954;
                                  v937 += v955;
                                  --v958;
                                }
                                while (v958);
                              }
                              v938 += v948 - v954 * v953;
                              v937 += v957;
                              ++v952;
                            }
                            while (v952 != v950);
                          }
                          v938 += v2018 - v948 * v947;
                          v937 += v951;
                          ++v946;
                        }
                        while (v946 != v945);
                      }
                      v938 += v2031;
                      v937 += v2060;
                      ++v935;
                    }
                    while (v935 != v2110);
                  }
                  break;
                default:
                  uint64_t v876 = v179[6];
                  if (v876)
                  {
                    uint64_t v877 = 0;
                    uint64_t v2030 = v281[19];
                    uint64_t v2059 = v180[19];
                    uint64_t v2017 = v179[19];
                    do
                    {
                      uint64_t v878 = 0;
                      if ((v183 & 0x80000000) == 0)
                      {
                        uint64_t v879 = v180[3];
                        uint64_t v880 = v183;
                        int v881 = v877;
                        do
                        {
                          ldiv_t v882 = ldiv(v881, v181[v880]);
                          int v881 = v882.quot;
                          v878 += *(void *)(v879 + 8 * v880--) * v882.rem;
                        }
                        while (v880 != -1);
                      }
                      uint64_t v883 = v2087;
                      if ((v2087 & 0x80000000) != 0)
                      {
                        LODWORD(v884) = 0;
                      }
                      else
                      {
                        uint64_t v884 = 0;
                        uint64_t v885 = v281[3];
                        int v886 = v877;
                        do
                        {
                          ldiv_t v887 = ldiv(v886, v282[v883]);
                          int v886 = v887.quot;
                          v884 += *(void *)(v885 + 8 * v883--) * v887.rem;
                        }
                        while (v883 != -1);
                      }
                      uint64_t v888 = *(void *)(v2059 + 8 * (int)v878);
                      if (v888 <= *(void *)(v2030 + 8 * (int)v884)) {
                        uint64_t v888 = *(void *)(v2030 + 8 * (int)v884);
                      }
                      *(void *)(v2017 + 8 * v877++) = v888;
                      uint64_t v183 = v2105;
                    }
                    while (v877 != v876);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v15)
      {
        case 0:
          float v16 = **(float **)(*a1 + 152);
          int v17 = *(float **)(*a2 + 152);
          if (v16 <= *v17) {
            float v16 = *v17;
          }
          **(float **)(*(void *)a3 + 152) = v16;
          return;
        case 1:
          int v220 = *(_DWORD *)(*a2 + 160);
          if (v220 >= 1)
          {
            float v221 = **(float **)(*a1 + 152);
            uint64_t v222 = *(float **)(*(void *)a3 + 152);
            uint64_t v223 = *(float **)(*a2 + 152);
            unsigned int v224 = v220 + 1;
            do
            {
              float v225 = *v223++;
              float v226 = v225;
              if (v221 > v225) {
                float v226 = v221;
              }
              *v222++ = v226;
              --v224;
            }
            while (v224 > 1);
          }
          return;
        case 2:
          int v227 = *(_DWORD *)(*a1 + 160);
          if (v227 >= 1)
          {
            float v228 = **(float **)(*a2 + 152);
            uint64_t v229 = *(float **)(*(void *)a3 + 152);
            float v230 = *(float **)(*a1 + 152);
            unsigned int v231 = v227 + 1;
            do
            {
              float v232 = *v230++;
              float v233 = v232;
              if (v232 <= v228) {
                float v233 = v228;
              }
              *v229++ = v233;
              --v231;
            }
            while (v231 > 1);
          }
          return;
        case 3:
          int v234 = *(_DWORD *)(*(void *)a3 + 48);
          if (v234 >= 1)
          {
            uint64_t v235 = *(float **)(*(void *)a3 + 152);
            int v236 = *(float **)(*a2 + 152);
            int v237 = *(float **)(*a1 + 152);
            unsigned int v238 = v234 + 1;
            do
            {
              float v239 = *v237++;
              float v240 = v239;
              float v241 = *v236++;
              float v242 = v241;
              if (v240 <= v241) {
                float v240 = v242;
              }
              *v235++ = v240;
              --v238;
            }
            while (v238 > 1);
          }
          return;
        default:
          uint64_t v211 = *(void **)a3;
          int v212 = (void *)*a1;
          float v213 = *(int **)*a1;
          uint64_t v214 = (v212[1] - (void)v213) >> 2;
          uint64_t v215 = (v214 - 1);
          if ((int)v215 >= -1) {
            int v216 = -1;
          }
          else {
            int v216 = v214 - 1;
          }
          int v217 = v216 + 1;
          int v218 = v214 + 1;
          while (1)
          {
            unsigned int v219 = v218 - 2;
            if (v218 - 2 < 0) {
              break;
            }
            --v218;
            if (*(void *)(v212[3] + 8 * v219) != *(void *)(v211[3] + 8 * v219)) {
              goto LABEL_247;
            }
          }
          int v218 = v217;
LABEL_247:
          unsigned int v289 = (void *)*a2;
          int v290 = *(int **)*a2;
          uint64_t v291 = (v289[1] - (void)v290) >> 2;
          uint64_t v292 = (v291 - 1);
          if ((int)v292 >= -1) {
            int v293 = -1;
          }
          else {
            int v293 = v291 - 1;
          }
          int v294 = v293 + 1;
          int v295 = v291 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)(v289[3] + 8 * v296) != *(void *)(v211[3] + 8 * v296)) {
              goto LABEL_285;
            }
          }
          int v295 = v294;
LABEL_285:
          int v309 = v214 + 1;
          while (1)
          {
            unsigned int v310 = v309 - 2;
            if (v309 - 2 < 0) {
              break;
            }
            --v309;
            if (*(void *)(v212[3] + 8 * v310)) {
              goto LABEL_320;
            }
          }
          int v309 = v217;
LABEL_320:
          int v323 = v291 + 1;
          while (1)
          {
            unsigned int v324 = v323 - 2;
            if (v323 - 2 < 0) {
              break;
            }
            --v323;
            if (*(void *)(v289[3] + 8 * v324)) {
              goto LABEL_563;
            }
          }
          int v323 = v294;
LABEL_563:
          unint64_t v457 = (uint64_t)(v211[1] - *v211) >> 2;
          if (v218 <= v295) {
            int v458 = v295;
          }
          else {
            int v458 = v218;
          }
          if (v218 <= v323) {
            int v218 = v323;
          }
          if (v309 > v295) {
            int v295 = v309;
          }
          if (v457 > v295)
          {
            int v459 = 1;
          }
          else
          {
            int v295 = (uint64_t)(v211[1] - *v211) >> 2;
            int v459 = 4;
          }
          if (v457 > v218)
          {
            int v460 = 2;
          }
          else
          {
            int v218 = v295;
            int v460 = v459;
          }
          if (v457 > v458)
          {
            int v218 = v458;
            int v460 = 3;
          }
          uint64_t v2088 = v292;
          uint64_t v2106 = v215;
          if (!v218) {
            goto LABEL_594;
          }
          unint64_t v461 = *(void *)(v211[3] + 8 * (v218 - 1));
          if (v461 < 0x10) {
            goto LABEL_594;
          }
          switch(v460)
          {
            case 1:
              if (v218 == 2)
              {
                uint64_t v1898 = *v213;
                if (v1898)
                {
                  uint64_t v1899 = 0;
                  uint64_t v1900 = 0;
                  uint64_t v1901 = 0;
                  uint64_t v1902 = v212[19];
                  uint64_t v1903 = v289[19];
                  uint64_t v1904 = v211[19];
                  unint64_t v1905 = v213[1];
                  uint64_t v1906 = (uint64_t *)v212[3];
                  uint64_t v1907 = *v1906;
                  uint64_t v1908 = v1906[1];
                  int v1909 = (uint64_t *)v289[3];
                  uint64_t v1910 = *v1909;
                  uint64_t v1911 = v1909[1];
                  if (v1905 <= 1) {
                    uint64_t v1912 = 1;
                  }
                  else {
                    uint64_t v1912 = v213[1];
                  }
                  uint64_t v1913 = v1907 - v1908 * v1905;
                  uint64_t v1914 = v1910 - v1911 * v290[1];
                  do
                  {
                    if (v1905)
                    {
                      uint64_t v1915 = 0;
                      uint64_t v1916 = v1903 + 4 * v1900;
                      do
                      {
                        if ((int)v461 >= 1)
                        {
                          uint64_t v1917 = 0;
                          float v1918 = *(float *)(v1902 + 4 * v1901);
                          unsigned int v1919 = v461 + 1;
                          do
                          {
                            float v1920 = *(float *)(v1916 + v1917);
                            if (v1918 > v1920) {
                              float v1920 = v1918;
                            }
                            *(float *)(v1904 + v1917) = v1920;
                            --v1919;
                            v1917 += 4;
                          }
                          while (v1919 > 1);
                        }
                        v1901 += v1908;
                        v1900 += v1911;
                        v1904 += 4 * (int)v461;
                        ++v1915;
                        v1916 += 4 * v1911;
                      }
                      while (v1915 != v1912);
                    }
                    v1901 += v1913;
                    v1900 += v1914;
                    ++v1899;
                  }
                  while (v1899 != v1898);
                }
              }
              else if (v218 == 1)
              {
                uint64_t v1186 = *v213;
                if (v1186)
                {
                  uint64_t v1187 = 0;
                  uint64_t v1188 = 0;
                  uint64_t v1189 = v212[19];
                  uint64_t v1190 = v289[19];
                  uint64_t v1191 = v211[19];
                  uint64_t v1192 = *(void *)v212[3];
                  uint64_t v1193 = 4 * *(void *)v289[3];
                  do
                  {
                    if ((int)v461 >= 1)
                    {
                      uint64_t v1194 = 0;
                      float v1195 = *(float *)(v1189 + 4 * v1188);
                      unsigned int v1196 = v461 + 1;
                      do
                      {
                        float v1197 = *(float *)(v1190 + v1194);
                        if (v1195 > v1197) {
                          float v1197 = v1195;
                        }
                        *(float *)(v1191 + v1194) = v1197;
                        --v1196;
                        v1194 += 4;
                      }
                      while (v1196 > 1);
                    }
                    v1188 += v1192;
                    ++v1187;
                    v1191 += 4 * (int)v461;
                    v1190 += v1193;
                  }
                  while (v1187 != v1186);
                }
              }
              else
              {
                unint64_t v2053 = v211[6];
                if (v2053)
                {
                  unint64_t v2082 = 0;
                  uint64_t v1984 = v289[19];
                  uint64_t v2000 = v212[19];
                  uint64_t v1921 = v211[19];
                  do
                  {
                    uint64_t v1922 = 0;
                    if ((v215 & 0x80000000) == 0)
                    {
                      uint64_t v1923 = v212[3];
                      uint64_t v1924 = v215;
                      int v1925 = v2082;
                      do
                      {
                        ldiv_t v1926 = ldiv(v1925, v213[v1924]);
                        int v1925 = v1926.quot;
                        v1922 += *(void *)(v1923 + 8 * v1924--) * v1926.rem;
                      }
                      while (v1924 != -1);
                    }
                    uint64_t v1927 = v2088;
                    if ((v2088 & 0x80000000) != 0)
                    {
                      LODWORD(v1928) = 0;
                    }
                    else
                    {
                      uint64_t v1928 = 0;
                      uint64_t v1929 = v289[3];
                      int v1930 = v2082;
                      do
                      {
                        ldiv_t v1931 = ldiv(v1930, v290[v1927]);
                        int v1930 = v1931.quot;
                        v1928 += *(void *)(v1929 + 8 * v1927--) * v1931.rem;
                      }
                      while (v1927 != -1);
                    }
                    uint64_t v215 = v2106;
                    if ((int)v461 >= 1)
                    {
                      uint64_t v1932 = 0;
                      float v1933 = *(float *)(v2000 + 4 * (int)v1922);
                      unsigned int v1934 = v461 + 1;
                      do
                      {
                        float v1935 = *(float *)(v1984 + 4 * (int)v1928 + v1932);
                        if (v1933 > v1935) {
                          float v1935 = v1933;
                        }
                        *(float *)(v1921 + v1932) = v1935;
                        --v1934;
                        v1932 += 4;
                      }
                      while (v1934 > 1);
                    }
                    v1921 += 4 * (int)v461;
                    v2082 += (int)v461;
                  }
                  while (v2082 < v2053);
                }
              }
              break;
            case 2:
              if (v218 == 2)
              {
                uint64_t v1936 = *v213;
                if (v1936)
                {
                  uint64_t v1937 = 0;
                  uint64_t v1938 = 0;
                  uint64_t v1939 = 0;
                  uint64_t v1940 = v212[19];
                  uint64_t v1941 = v289[19];
                  uint64_t v1942 = v211[19];
                  unint64_t v1943 = v213[1];
                  uint64_t v1944 = (uint64_t *)v212[3];
                  uint64_t v1945 = *v1944;
                  uint64_t v1946 = v1944[1];
                  uint64_t v1947 = (uint64_t *)v289[3];
                  uint64_t v1948 = *v1947;
                  uint64_t v1949 = v1947[1];
                  if (v1943 <= 1) {
                    uint64_t v1950 = 1;
                  }
                  else {
                    uint64_t v1950 = v213[1];
                  }
                  uint64_t v1951 = v1945 - v1946 * v1943;
                  uint64_t v1952 = v1948 - v1949 * v290[1];
                  do
                  {
                    if (v1943)
                    {
                      uint64_t v1953 = 0;
                      uint64_t v1954 = v1940 + 4 * v1939;
                      do
                      {
                        if ((int)v461 >= 1)
                        {
                          uint64_t v1955 = 0;
                          float v1956 = *(float *)(v1941 + 4 * v1938);
                          unsigned int v1957 = v461 + 1;
                          do
                          {
                            float v1958 = *(float *)(v1954 + v1955);
                            if (v1958 <= v1956) {
                              float v1958 = v1956;
                            }
                            *(float *)(v1942 + v1955) = v1958;
                            --v1957;
                            v1955 += 4;
                          }
                          while (v1957 > 1);
                        }
                        v1939 += v1946;
                        v1938 += v1949;
                        v1942 += 4 * (int)v461;
                        ++v1953;
                        v1954 += 4 * v1946;
                      }
                      while (v1953 != v1950);
                    }
                    v1939 += v1951;
                    v1938 += v1952;
                    ++v1937;
                  }
                  while (v1937 != v1936);
                }
              }
              else if (v218 == 1)
              {
                uint64_t v1198 = *v213;
                if (v1198)
                {
                  uint64_t v1199 = 0;
                  uint64_t v1200 = 0;
                  uint64_t v1201 = v212[19];
                  uint64_t v1202 = v289[19];
                  uint64_t v1203 = v211[19];
                  uint64_t v1204 = *(void *)v289[3];
                  uint64_t v1205 = 4 * *(void *)v212[3];
                  do
                  {
                    if ((int)v461 >= 1)
                    {
                      uint64_t v1206 = 0;
                      float v1207 = *(float *)(v1202 + 4 * v1200);
                      unsigned int v1208 = v461 + 1;
                      do
                      {
                        float v1209 = *(float *)(v1201 + v1206);
                        if (v1209 <= v1207) {
                          float v1209 = v1207;
                        }
                        *(float *)(v1203 + v1206) = v1209;
                        --v1208;
                        v1206 += 4;
                      }
                      while (v1208 > 1);
                    }
                    v1200 += v1204;
                    ++v1199;
                    v1203 += 4 * (int)v461;
                    v1201 += v1205;
                  }
                  while (v1199 != v1198);
                }
              }
              else
              {
                unint64_t v2054 = v211[6];
                if (v2054)
                {
                  unint64_t v2083 = 0;
                  uint64_t v1985 = v289[19];
                  uint64_t v2001 = v212[19];
                  uint64_t v1959 = v211[19];
                  do
                  {
                    uint64_t v1960 = 0;
                    if ((v215 & 0x80000000) == 0)
                    {
                      uint64_t v1961 = v212[3];
                      uint64_t v1962 = v215;
                      int v1963 = v2083;
                      do
                      {
                        ldiv_t v1964 = ldiv(v1963, v213[v1962]);
                        int v1963 = v1964.quot;
                        v1960 += *(void *)(v1961 + 8 * v1962--) * v1964.rem;
                      }
                      while (v1962 != -1);
                    }
                    uint64_t v1965 = v2088;
                    if ((v2088 & 0x80000000) != 0)
                    {
                      LODWORD(v1966) = 0;
                    }
                    else
                    {
                      uint64_t v1966 = 0;
                      uint64_t v1967 = v289[3];
                      int v1968 = v2083;
                      do
                      {
                        ldiv_t v1969 = ldiv(v1968, v290[v1965]);
                        int v1968 = v1969.quot;
                        v1966 += *(void *)(v1967 + 8 * v1965--) * v1969.rem;
                      }
                      while (v1965 != -1);
                    }
                    uint64_t v215 = v2106;
                    if ((int)v461 >= 1)
                    {
                      uint64_t v1970 = 0;
                      float v1971 = *(float *)(v1985 + 4 * (int)v1966);
                      unsigned int v1972 = v461 + 1;
                      do
                      {
                        float v1973 = *(float *)(v2001 + 4 * (int)v1960 + v1970);
                        if (v1973 <= v1971) {
                          float v1973 = v1971;
                        }
                        *(float *)(v1959 + v1970) = v1973;
                        --v1972;
                        v1970 += 4;
                      }
                      while (v1972 > 1);
                    }
                    v1959 += 4 * (int)v461;
                    v2083 += (int)v461;
                  }
                  while (v2083 < v2054);
                }
              }
              break;
            case 3:
              if (v218 == 2)
              {
                uint64_t v1423 = *v213;
                if (v1423)
                {
                  uint64_t v1424 = 0;
                  uint64_t v1425 = 0;
                  uint64_t v1426 = 0;
                  uint64_t v1427 = v212[19];
                  uint64_t v1428 = v289[19];
                  uint64_t v1429 = v211[19];
                  unint64_t v1430 = v213[1];
                  uint64_t v1431 = (uint64_t *)v212[3];
                  uint64_t v1432 = *v1431;
                  uint64_t v1433 = v1431[1];
                  uint64_t v1434 = (uint64_t *)v289[3];
                  uint64_t v1435 = *v1434;
                  uint64_t v1436 = v1434[1];
                  if (v1430 <= 1) {
                    uint64_t v1437 = 1;
                  }
                  else {
                    uint64_t v1437 = v213[1];
                  }
                  uint64_t v1438 = v1432 - v1433 * v1430;
                  uint64_t v1439 = v1435 - v1436 * v290[1];
                  do
                  {
                    if (v1430)
                    {
                      uint64_t v1440 = 0;
                      uint64_t v1441 = v1428 + 4 * v1425;
                      uint64_t v1442 = v1427 + 4 * v1426;
                      do
                      {
                        if ((int)v461 >= 1)
                        {
                          uint64_t v1443 = 0;
                          unsigned int v1444 = v461 + 1;
                          do
                          {
                            float v1445 = *(float *)(v1442 + v1443);
                            if (v1445 <= *(float *)(v1441 + v1443)) {
                              float v1445 = *(float *)(v1441 + v1443);
                            }
                            *(float *)(v1429 + v1443) = v1445;
                            --v1444;
                            v1443 += 4;
                          }
                          while (v1444 > 1);
                        }
                        v1426 += v1433;
                        v1425 += v1436;
                        v1429 += 4 * (int)v461;
                        ++v1440;
                        v1441 += 4 * v1436;
                        v1442 += 4 * v1433;
                      }
                      while (v1440 != v1437);
                    }
                    v1426 += v1438;
                    v1425 += v1439;
                    ++v1424;
                  }
                  while (v1424 != v1423);
                }
              }
              else if (v218 == 1)
              {
                uint64_t v462 = *v213;
                if (v462)
                {
                  uint64_t v463 = 0;
                  uint64_t v464 = v212[19];
                  uint64_t v465 = v289[19];
                  uint64_t v466 = v211[19];
                  uint64_t v467 = 4 * *(void *)v289[3];
                  uint64_t v468 = 4 * *(void *)v212[3];
                  do
                  {
                    if ((int)v461 >= 1)
                    {
                      uint64_t v469 = 0;
                      unsigned int v470 = v461 + 1;
                      do
                      {
                        float v471 = *(float *)(v464 + v469);
                        if (v471 <= *(float *)(v465 + v469)) {
                          float v471 = *(float *)(v465 + v469);
                        }
                        *(float *)(v466 + v469) = v471;
                        --v470;
                        v469 += 4;
                      }
                      while (v470 > 1);
                    }
                    ++v463;
                    v466 += 4 * (int)v461;
                    v465 += v467;
                    v464 += v468;
                  }
                  while (v463 != v462);
                }
              }
              else
              {
                unint64_t v2040 = v211[6];
                if (v2040)
                {
                  unint64_t v2069 = 0;
                  uint64_t v1977 = v289[19];
                  uint64_t v1991 = v212[19];
                  uint64_t v1446 = v211[19];
                  do
                  {
                    uint64_t v1447 = 0;
                    if ((v215 & 0x80000000) == 0)
                    {
                      uint64_t v1448 = v212[3];
                      uint64_t v1449 = v215;
                      int v1450 = v2069;
                      do
                      {
                        ldiv_t v1451 = ldiv(v1450, v213[v1449]);
                        int v1450 = v1451.quot;
                        v1447 += *(void *)(v1448 + 8 * v1449--) * v1451.rem;
                      }
                      while (v1449 != -1);
                    }
                    uint64_t v1452 = v2088;
                    if ((v2088 & 0x80000000) != 0)
                    {
                      LODWORD(v1453) = 0;
                    }
                    else
                    {
                      uint64_t v1453 = 0;
                      uint64_t v1454 = v289[3];
                      int v1455 = v2069;
                      do
                      {
                        ldiv_t v1456 = ldiv(v1455, v290[v1452]);
                        int v1455 = v1456.quot;
                        v1453 += *(void *)(v1454 + 8 * v1452--) * v1456.rem;
                      }
                      while (v1452 != -1);
                    }
                    uint64_t v215 = v2106;
                    if ((int)v461 >= 1)
                    {
                      uint64_t v1457 = 0;
                      uint64_t v1458 = v1977 + 4 * (int)v1453;
                      unsigned int v1459 = v461 + 1;
                      do
                      {
                        float v1460 = *(float *)(v1991 + 4 * (int)v1447 + v1457);
                        if (v1460 <= *(float *)(v1458 + v1457)) {
                          float v1460 = *(float *)(v1458 + v1457);
                        }
                        *(float *)(v1446 + v1457) = v1460;
                        --v1459;
                        v1457 += 4;
                      }
                      while (v1459 > 1);
                    }
                    v1446 += 4 * (int)v461;
                    v2069 += (int)v461;
                  }
                  while (v2069 < v2040);
                }
              }
              break;
            default:
LABEL_594:
              switch(v457)
              {
                case 1uLL:
                  uint64_t v472 = v211[6];
                  if (v472)
                  {
                    uint64_t v473 = (float *)v212[19];
                    uint64_t v474 = (float *)v289[19];
                    uint64_t v475 = (float *)v211[19];
                    uint64_t v476 = 4 * *(void *)v289[3];
                    uint64_t v477 = 4 * *(void *)v212[3];
                    do
                    {
                      float v478 = *v473;
                      if (*v473 <= *v474) {
                        float v478 = *v474;
                      }
                      *v475++ = v478;
                      uint64_t v474 = (float *)((char *)v474 + v476);
                      uint64_t v473 = (float *)((char *)v473 + v477);
                      --v472;
                    }
                    while (v472);
                  }
                  break;
                case 2uLL:
                  uint64_t v973 = *v213;
                  if (v973)
                  {
                    uint64_t v974 = 0;
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = 0;
                    uint64_t v978 = v212[19];
                    uint64_t v979 = v289[19];
                    uint64_t v980 = v211[19];
                    unint64_t v981 = v213[1];
                    unint64_t v982 = (uint64_t *)v212[3];
                    uint64_t v983 = *v982;
                    uint64_t v984 = v982[1];
                    uint64_t v985 = (uint64_t *)v289[3];
                    uint64_t v986 = *v985;
                    uint64_t v987 = v985[1];
                    uint64_t v988 = v986 - v987 * v290[1];
                    if (v981 <= 1) {
                      uint64_t v989 = 1;
                    }
                    else {
                      uint64_t v989 = v213[1];
                    }
                    uint64_t v990 = v983 - v984 * v981;
                    do
                    {
                      if (v981)
                      {
                        uint64_t v991 = v975 + v989;
                        uint64_t v992 = (float *)(v980 + 4 * v975);
                        uint64_t v993 = v989;
                        do
                        {
                          float v994 = *(float *)(v978 + 4 * v977);
                          if (v994 <= *(float *)(v979 + 4 * v976)) {
                            float v994 = *(float *)(v979 + 4 * v976);
                          }
                          *v992++ = v994;
                          v977 += v984;
                          v976 += v987;
                          --v993;
                        }
                        while (v993);
                        uint64_t v975 = v991;
                      }
                      v977 += v990;
                      v976 += v988;
                      ++v974;
                    }
                    while (v974 != v973);
                  }
                  break;
                case 3uLL:
                  uint64_t v995 = *v213;
                  if (v995)
                  {
                    uint64_t v996 = 0;
                    uint64_t v997 = 0;
                    uint64_t v998 = 0;
                    uint64_t v999 = 0;
                    uint64_t v1000 = v212[19];
                    uint64_t v1001 = v289[19];
                    uint64_t v1002 = v211[19];
                    unint64_t v1003 = v213[1];
                    unint64_t v1004 = (void *)v212[3];
                    uint64_t v1005 = v1004[1];
                    uint64_t v1006 = (void *)v289[3];
                    uint64_t v1007 = v1006[1];
                    uint64_t v1008 = *v1006 - v1007 * v290[1];
                    if (v1003 <= 1) {
                      uint64_t v1009 = 1;
                    }
                    else {
                      uint64_t v1009 = v213[1];
                    }
                    unint64_t v1010 = *v1004 - v1005 * v1003;
                    do
                    {
                      if (v1003)
                      {
                        uint64_t v1011 = 0;
                        unint64_t v1012 = v213[2];
                        uint64_t v1013 = v1004[2];
                        uint64_t v1014 = v1006[2];
                        if (v1012 <= 1) {
                          uint64_t v1015 = 1;
                        }
                        else {
                          uint64_t v1015 = v213[2];
                        }
                        uint64_t v1016 = v1007 - v1014 * v290[2];
                        do
                        {
                          uint64_t v1017 = v1015;
                          if (v1012)
                          {
                            do
                            {
                              float v1018 = *(float *)(v1000 + 4 * v999);
                              if (v1018 <= *(float *)(v1001 + 4 * v998)) {
                                float v1018 = *(float *)(v1001 + 4 * v998);
                              }
                              *(float *)(v1002 + 4 * v997++) = v1018;
                              v999 += v1013;
                              v998 += v1014;
                              --v1017;
                            }
                            while (v1017);
                          }
                          v999 += v1005 - v1013 * v1012;
                          v998 += v1016;
                          ++v1011;
                        }
                        while (v1011 != v1009);
                      }
                      v999 += v1010;
                      v998 += v1008;
                      ++v996;
                    }
                    while (v996 != v995);
                  }
                  break;
                case 4uLL:
                  uint64_t v2111 = *v213;
                  if (v2111)
                  {
                    uint64_t v1019 = 0;
                    uint64_t v1020 = 0;
                    uint64_t v1021 = 0;
                    uint64_t v1022 = 0;
                    uint64_t v1023 = v212[19];
                    uint64_t v1024 = v289[19];
                    uint64_t v1025 = v211[19];
                    unint64_t v1026 = v213[1];
                    uint64_t v1027 = (void *)v212[3];
                    uint64_t v1028 = (void *)v289[3];
                    uint64_t v2033 = v1028[1];
                    uint64_t v2062 = v1027[1];
                    uint64_t v2093 = *v1028 - v2033 * v290[1];
                    if (v1026 <= 1) {
                      uint64_t v1029 = 1;
                    }
                    else {
                      uint64_t v1029 = v213[1];
                    }
                    unint64_t v1030 = *v1027 - v1027[1] * v1026;
                    do
                    {
                      if (v1026)
                      {
                        uint64_t v1031 = 0;
                        unint64_t v1032 = v213[2];
                        uint64_t v1033 = v1027[2];
                        uint64_t v1034 = v1028[2];
                        if (v1032 <= 1) {
                          uint64_t v1035 = 1;
                        }
                        else {
                          uint64_t v1035 = v213[2];
                        }
                        uint64_t v1036 = v2033 - v1034 * v290[2];
                        do
                        {
                          if (v1032)
                          {
                            uint64_t v1037 = 0;
                            unint64_t v1038 = v213[3];
                            uint64_t v1039 = v1027[3];
                            uint64_t v1040 = v1028[3];
                            if (v1038 <= 1) {
                              uint64_t v1041 = 1;
                            }
                            else {
                              uint64_t v1041 = v213[3];
                            }
                            uint64_t v1042 = v1034 - v1040 * v290[3];
                            do
                            {
                              uint64_t v1043 = v1041;
                              if (v1038)
                              {
                                do
                                {
                                  float v1044 = *(float *)(v1023 + 4 * v1022);
                                  if (v1044 <= *(float *)(v1024 + 4 * v1021)) {
                                    float v1044 = *(float *)(v1024 + 4 * v1021);
                                  }
                                  *(float *)(v1025 + 4 * v1020++) = v1044;
                                  v1022 += v1039;
                                  v1021 += v1040;
                                  --v1043;
                                }
                                while (v1043);
                              }
                              v1022 += v1033 - v1039 * v1038;
                              v1021 += v1042;
                              ++v1037;
                            }
                            while (v1037 != v1035);
                          }
                          v1022 += v2062 - v1033 * v1032;
                          v1021 += v1036;
                          ++v1031;
                        }
                        while (v1031 != v1029);
                      }
                      v1022 += v1030;
                      v1021 += v2093;
                      ++v1019;
                    }
                    while (v1019 != v2111);
                  }
                  break;
                default:
                  uint64_t v960 = v211[6];
                  if (v960)
                  {
                    uint64_t v961 = 0;
                    uint64_t v2032 = v289[19];
                    uint64_t v2061 = v212[19];
                    uint64_t v2019 = v211[19];
                    do
                    {
                      uint64_t v962 = 0;
                      if ((v215 & 0x80000000) == 0)
                      {
                        uint64_t v963 = v212[3];
                        uint64_t v964 = v215;
                        int v965 = v961;
                        do
                        {
                          ldiv_t v966 = ldiv(v965, v213[v964]);
                          int v965 = v966.quot;
                          v962 += *(void *)(v963 + 8 * v964--) * v966.rem;
                        }
                        while (v964 != -1);
                      }
                      uint64_t v967 = v2088;
                      if ((v2088 & 0x80000000) != 0)
                      {
                        LODWORD(v968) = 0;
                      }
                      else
                      {
                        uint64_t v968 = 0;
                        uint64_t v969 = v289[3];
                        int v970 = v961;
                        do
                        {
                          ldiv_t v971 = ldiv(v970, v290[v967]);
                          int v970 = v971.quot;
                          v968 += *(void *)(v969 + 8 * v967--) * v971.rem;
                        }
                        while (v967 != -1);
                      }
                      float v972 = *(float *)(v2061 + 4 * (int)v962);
                      if (v972 <= *(float *)(v2032 + 4 * (int)v968)) {
                        float v972 = *(float *)(v2032 + 4 * (int)v968);
                      }
                      *(float *)(v2019 + 4 * v961++) = v972;
                      uint64_t v215 = v2106;
                    }
                    while (v961 != v960);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::Minimum::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Minimum::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::Minimum>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          LOBYTE(v8) = !v7;
          goto LABEL_18;
        case 1:
          int v28 = *(_DWORD *)(*a2 + 160);
          if (v28 >= 1)
          {
            int v29 = **(unsigned __int8 **)(*a1 + 152);
            uint64_t v30 = *(char **)(*(void *)a3 + 152);
            unsigned int v31 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v32 = v28 + 1;
            do
            {
              int v34 = *v31++;
              int v33 = v34;
              if (v29) {
                BOOL v35 = v33 == 0;
              }
              else {
                BOOL v35 = 1;
              }
              char v36 = !v35;
              *v30++ = v36;
              --v32;
            }
            while (v32 > 1);
          }
          return;
        case 2:
          int v37 = *(_DWORD *)(*a1 + 160);
          if (v37 >= 1)
          {
            int v38 = **(unsigned __int8 **)(*a2 + 152);
            unint64_t v39 = *(char **)(*(void *)a3 + 152);
            unsigned int v40 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v41 = v37 + 1;
            do
            {
              int v43 = *v40++;
              int v42 = v43;
              if (v38) {
                BOOL v44 = v42 == 0;
              }
              else {
                BOOL v44 = 1;
              }
              char v45 = !v44;
              *v39++ = v45;
              --v41;
            }
            while (v41 > 1);
          }
          return;
        case 3:
          int v46 = *(_DWORD *)(*(void *)a3 + 48);
          if (v46 >= 1)
          {
            int v47 = *(char **)(*(void *)a3 + 152);
            unsigned int v48 = *(unsigned __int8 **)(*a2 + 152);
            int v49 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v50 = v46 + 1;
            do
            {
              int v51 = *v49++;
              BOOL v7 = v51 == 0;
              int v53 = *v48++;
              int v52 = v53;
              char v55 = !v7 && v52 != 0;
              *v47++ = v55;
              --v50;
            }
            while (v50 > 1);
          }
          return;
        default:
          float v19 = *(void **)a3;
          float v20 = (void *)*a1;
          uint64_t v21 = *(int **)*a1;
          uint64_t v22 = (v20[1] - (void)v21) >> 2;
          uint64_t v23 = (v22 - 1);
          if ((int)v23 >= -1) {
            int v24 = -1;
          }
          else {
            int v24 = v22 - 1;
          }
          int v25 = v24 + 1;
          int v26 = v22 + 1;
          break;
      }
      while (1)
      {
        unsigned int v27 = v26 - 2;
        if (v26 - 2 < 0) {
          break;
        }
        --v26;
        if (*(void *)(v20[3] + 8 * v27) != *(void *)(v19[3] + 8 * v27)) {
          goto LABEL_217;
        }
      }
      int v26 = v25;
LABEL_217:
      uint64_t v246 = (void *)*a2;
      int v247 = *(int **)*a2;
      uint64_t v248 = (v246[1] - (void)v247) >> 2;
      uint64_t v249 = (v248 - 1);
      if ((int)v249 >= -1) {
        int v250 = -1;
      }
      else {
        int v250 = v248 - 1;
      }
      int v251 = v250 + 1;
      int v252 = v248 + 1;
      while (1)
      {
        unsigned int v253 = v252 - 2;
        if (v252 - 2 < 0) {
          break;
        }
        --v252;
        if (*(void *)(v246[3] + 8 * v253) != *(void *)(v19[3] + 8 * v253)) {
          goto LABEL_271;
        }
      }
      int v252 = v251;
LABEL_271:
      int v300 = v22 + 1;
      while (1)
      {
        unsigned int v301 = v300 - 2;
        if (v300 - 2 < 0) {
          break;
        }
        --v300;
        if (*(void *)(v20[3] + 8 * v301)) {
          goto LABEL_306;
        }
      }
      int v300 = v25;
LABEL_306:
      int v314 = v248 + 1;
      while (1)
      {
        unsigned int v315 = v314 - 2;
        if (v314 - 2 < 0) {
          break;
        }
        --v314;
        if (*(void *)(v246[3] + 8 * v315)) {
          goto LABEL_341;
        }
      }
      int v314 = v251;
LABEL_341:
      unint64_t v328 = (uint64_t)(v19[1] - *v19) >> 2;
      if (v26 <= v252) {
        int v329 = v252;
      }
      else {
        int v329 = v26;
      }
      if (v26 <= v314) {
        int v26 = v314;
      }
      if (v300 > v252) {
        int v252 = v300;
      }
      if (v328 > v252)
      {
        int v330 = 1;
      }
      else
      {
        int v252 = (uint64_t)(v19[1] - *v19) >> 2;
        int v330 = 4;
      }
      if (v328 > v26)
      {
        int v331 = 2;
      }
      else
      {
        int v26 = v252;
        int v331 = v330;
      }
      if (v328 > v329)
      {
        int v26 = v329;
        int v331 = 3;
      }
      uint64_t v2090 = v249;
      uint64_t v2106 = v23;
      if (!v26) {
        goto LABEL_376;
      }
      unint64_t v332 = *(void *)(v19[3] + 8 * (v26 - 1));
      if (v332 < 0x10) {
        goto LABEL_376;
      }
      switch(v331)
      {
        case 1:
          if (v26 == 2)
          {
            uint64_t v1468 = *v21;
            if (v1468)
            {
              uint64_t v1469 = 0;
              uint64_t v1470 = 0;
              uint64_t v1471 = 0;
              uint64_t v1472 = v20[19];
              uint64_t v1473 = v246[19];
              uint64_t v1474 = v19[19];
              unint64_t v1475 = v21[1];
              uint64_t v1476 = (uint64_t *)v20[3];
              uint64_t v1477 = *v1476;
              uint64_t v1478 = v1476[1];
              uint64_t v1479 = (uint64_t *)v246[3];
              uint64_t v1481 = *v1479;
              uint64_t v1480 = v1479[1];
              if (v1475 <= 1) {
                uint64_t v1482 = 1;
              }
              else {
                uint64_t v1482 = v21[1];
              }
              uint64_t v1483 = v1477 - v1478 * v1475;
              uint64_t v1484 = v1481 - v1480 * v247[1];
              do
              {
                if (v1475)
                {
                  uint64_t v1485 = 0;
                  uint64_t v1486 = v1473 + v1470;
                  do
                  {
                    if ((int)v332 >= 1)
                    {
                      uint64_t v1487 = 0;
                      int v1488 = *(unsigned __int8 *)(v1472 + v1471);
                      unsigned int v1489 = v332 + 1;
                      do
                      {
                        if (v1488) {
                          BOOL v1490 = *(unsigned char *)(v1486 + v1487) == 0;
                        }
                        else {
                          BOOL v1490 = 1;
                        }
                        char v1491 = !v1490;
                        *(unsigned char *)(v1474 + v1487) = v1491;
                        --v1489;
                        ++v1487;
                      }
                      while (v1489 > 1);
                    }
                    v1471 += v1478;
                    v1470 += v1480;
                    v1474 += (int)v332;
                    ++v1485;
                    v1486 += v1480;
                  }
                  while (v1485 != v1482);
                }
                v1471 += v1483;
                v1470 += v1484;
                ++v1469;
              }
              while (v1469 != v1468);
            }
          }
          else if (v26 == 1)
          {
            uint64_t v1050 = *v21;
            if (v1050)
            {
              uint64_t v1051 = 0;
              uint64_t v1052 = 0;
              uint64_t v1053 = v20[19];
              uint64_t v1054 = v246[19];
              uint64_t v1055 = v19[19];
              uint64_t v1056 = *(void *)v20[3];
              uint64_t v1057 = *(void *)v246[3];
              do
              {
                if ((int)v332 >= 1)
                {
                  uint64_t v1058 = 0;
                  int v1059 = *(unsigned __int8 *)(v1053 + v1052);
                  unsigned int v1060 = v332 + 1;
                  do
                  {
                    if (v1059) {
                      BOOL v1061 = *(unsigned char *)(v1054 + v1058) == 0;
                    }
                    else {
                      BOOL v1061 = 1;
                    }
                    char v1062 = !v1061;
                    *(unsigned char *)(v1055 + v1058) = v1062;
                    --v1060;
                    ++v1058;
                  }
                  while (v1060 > 1);
                }
                v1052 += v1056;
                v1055 += (int)v332;
                ++v1051;
                v1054 += v1057;
              }
              while (v1051 != v1050);
            }
          }
          else
          {
            unint64_t v2047 = v19[6];
            if (v2047)
            {
              unint64_t v2076 = 0;
              uint64_t v1999 = v246[19];
              uint64_t v2013 = v20[19];
              uint64_t v1492 = v19[19];
              do
              {
                uint64_t v1493 = 0;
                if ((v23 & 0x80000000) == 0)
                {
                  uint64_t v1494 = v20[3];
                  int quot = v2076;
                  do
                  {
                    ldiv_t v1496 = ldiv(quot, v21[v23]);
                    int quot = v1496.quot;
                    v1493 += *(void *)(v1494 + 8 * v23--) * v1496.rem;
                  }
                  while (v23 != -1);
                }
                uint64_t v1497 = v2090;
                if ((v2090 & 0x80000000) != 0)
                {
                  LODWORD(v1498) = 0;
                }
                else
                {
                  uint64_t v1498 = 0;
                  uint64_t v1499 = v246[3];
                  int v1500 = v2076;
                  do
                  {
                    ldiv_t v1501 = ldiv(v1500, v247[v1497]);
                    int v1500 = v1501.quot;
                    v1498 += *(void *)(v1499 + 8 * v1497--) * v1501.rem;
                  }
                  while (v1497 != -1);
                }
                uint64_t v23 = v2106;
                if ((int)v332 >= 1)
                {
                  uint64_t v1502 = 0;
                  int v1503 = *(unsigned __int8 *)(v2013 + (int)v1493);
                  unsigned int v1504 = v332 + 1;
                  do
                  {
                    if (v1503) {
                      BOOL v1505 = *(unsigned char *)(v1999 + (int)v1498 + v1502) == 0;
                    }
                    else {
                      BOOL v1505 = 1;
                    }
                    char v1506 = !v1505;
                    *(unsigned char *)(v1492 + v1502) = v1506;
                    --v1504;
                    ++v1502;
                  }
                  while (v1504 > 1);
                }
                v1492 += (int)v332;
                v2076 += (int)v332;
              }
              while (v2076 < v2047);
            }
          }
          break;
        case 2:
          if (v26 == 2)
          {
            uint64_t v1507 = *v21;
            if (v1507)
            {
              uint64_t v1508 = 0;
              uint64_t v1509 = 0;
              uint64_t v1510 = 0;
              uint64_t v1511 = v20[19];
              uint64_t v1512 = v246[19];
              uint64_t v1513 = v19[19];
              unint64_t v1514 = v21[1];
              uint64_t v1515 = (uint64_t *)v20[3];
              uint64_t v1516 = *v1515;
              uint64_t v1517 = v1515[1];
              uint64_t v1518 = (uint64_t *)v246[3];
              uint64_t v1520 = *v1518;
              uint64_t v1519 = v1518[1];
              if (v1514 <= 1) {
                uint64_t v1521 = 1;
              }
              else {
                uint64_t v1521 = v21[1];
              }
              uint64_t v1522 = v1516 - v1517 * v1514;
              uint64_t v1523 = v1520 - v1519 * v247[1];
              do
              {
                if (v1514)
                {
                  uint64_t v1524 = 0;
                  uint64_t v1525 = v1511 + v1510;
                  do
                  {
                    if ((int)v332 >= 1)
                    {
                      uint64_t v1526 = 0;
                      int v1527 = *(unsigned __int8 *)(v1512 + v1509);
                      unsigned int v1528 = v332 + 1;
                      do
                      {
                        if (v1527) {
                          BOOL v1529 = *(unsigned char *)(v1525 + v1526) == 0;
                        }
                        else {
                          BOOL v1529 = 1;
                        }
                        char v1530 = !v1529;
                        *(unsigned char *)(v1513 + v1526) = v1530;
                        --v1528;
                        ++v1526;
                      }
                      while (v1528 > 1);
                    }
                    v1510 += v1517;
                    v1509 += v1519;
                    v1513 += (int)v332;
                    ++v1524;
                    v1525 += v1517;
                  }
                  while (v1524 != v1521);
                }
                v1510 += v1522;
                v1509 += v1523;
                ++v1508;
              }
              while (v1508 != v1507);
            }
          }
          else if (v26 == 1)
          {
            uint64_t v1063 = *v21;
            if (v1063)
            {
              uint64_t v1064 = 0;
              uint64_t v1065 = 0;
              uint64_t v1066 = v20[19];
              uint64_t v1067 = v246[19];
              uint64_t v1068 = v19[19];
              uint64_t v1069 = *(void *)v20[3];
              uint64_t v1070 = *(void *)v246[3];
              do
              {
                if ((int)v332 >= 1)
                {
                  uint64_t v1071 = 0;
                  int v1072 = *(unsigned __int8 *)(v1067 + v1065);
                  unsigned int v1073 = v332 + 1;
                  do
                  {
                    if (v1072) {
                      BOOL v1074 = *(unsigned char *)(v1066 + v1071) == 0;
                    }
                    else {
                      BOOL v1074 = 1;
                    }
                    char v1075 = !v1074;
                    *(unsigned char *)(v1068 + v1071) = v1075;
                    --v1073;
                    ++v1071;
                  }
                  while (v1073 > 1);
                }
                v1065 += v1070;
                v1068 += (int)v332;
                ++v1064;
                v1066 += v1069;
              }
              while (v1064 != v1063);
            }
          }
          else
          {
            unint64_t v2048 = v19[6];
            if (v2048)
            {
              unint64_t v2077 = 0;
              uint64_t v2000 = v246[19];
              uint64_t v2014 = v20[19];
              uint64_t v1531 = v19[19];
              do
              {
                uint64_t v1532 = 0;
                if ((v23 & 0x80000000) == 0)
                {
                  uint64_t v1533 = v20[3];
                  int v1534 = v2077;
                  do
                  {
                    ldiv_t v1535 = ldiv(v1534, v21[v23]);
                    int v1534 = v1535.quot;
                    v1532 += *(void *)(v1533 + 8 * v23--) * v1535.rem;
                  }
                  while (v23 != -1);
                }
                uint64_t v1536 = v2090;
                if ((v2090 & 0x80000000) != 0)
                {
                  LODWORD(v1537) = 0;
                }
                else
                {
                  uint64_t v1537 = 0;
                  uint64_t v1538 = v246[3];
                  int v1539 = v2077;
                  do
                  {
                    ldiv_t v1540 = ldiv(v1539, v247[v1536]);
                    int v1539 = v1540.quot;
                    v1537 += *(void *)(v1538 + 8 * v1536--) * v1540.rem;
                  }
                  while (v1536 != -1);
                }
                uint64_t v23 = v2106;
                if ((int)v332 >= 1)
                {
                  uint64_t v1541 = 0;
                  int v1542 = *(unsigned __int8 *)(v2000 + (int)v1537);
                  unsigned int v1543 = v332 + 1;
                  do
                  {
                    if (v1542) {
                      BOOL v1544 = *(unsigned char *)(v2014 + (int)v1532 + v1541) == 0;
                    }
                    else {
                      BOOL v1544 = 1;
                    }
                    char v1545 = !v1544;
                    *(unsigned char *)(v1531 + v1541) = v1545;
                    --v1543;
                    ++v1541;
                  }
                  while (v1543 > 1);
                }
                v1531 += (int)v332;
                v2077 += (int)v332;
              }
              while (v2077 < v2048);
            }
          }
          break;
        case 3:
          if (v26 == 2)
          {
            uint64_t v1216 = *v21;
            if (v1216)
            {
              uint64_t v1217 = 0;
              uint64_t v1218 = 0;
              uint64_t v1219 = 0;
              uint64_t v1220 = v20[19];
              uint64_t v1221 = v246[19];
              uint64_t v1222 = v19[19];
              unint64_t v1223 = v21[1];
              uint64_t v1224 = (uint64_t *)v20[3];
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              uint64_t v1227 = (uint64_t *)v246[3];
              uint64_t v1229 = *v1227;
              uint64_t v1228 = v1227[1];
              if (v1223 <= 1) {
                uint64_t v1230 = 1;
              }
              else {
                uint64_t v1230 = v21[1];
              }
              uint64_t v1231 = v1225 - v1226 * v1223;
              uint64_t v1232 = v1229 - v1228 * v247[1];
              do
              {
                if (v1223)
                {
                  uint64_t v1233 = 0;
                  uint64_t v1234 = v1221 + v1218;
                  uint64_t v1235 = v1220 + v1219;
                  do
                  {
                    if ((int)v332 >= 1)
                    {
                      uint64_t v1236 = 0;
                      unsigned int v1237 = v332 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1235 + v1236)) {
                          BOOL v1238 = *(unsigned char *)(v1234 + v1236) == 0;
                        }
                        else {
                          BOOL v1238 = 1;
                        }
                        char v1239 = !v1238;
                        *(unsigned char *)(v1222 + v1236) = v1239;
                        --v1237;
                        ++v1236;
                      }
                      while (v1237 > 1);
                    }
                    v1219 += v1226;
                    v1218 += v1228;
                    v1222 += (int)v332;
                    ++v1233;
                    v1234 += v1228;
                    v1235 += v1226;
                  }
                  while (v1233 != v1230);
                }
                v1219 += v1231;
                v1218 += v1232;
                ++v1217;
              }
              while (v1217 != v1216);
            }
          }
          else if (v26 == 1)
          {
            uint64_t v333 = *v21;
            if (v333)
            {
              uint64_t v334 = 0;
              uint64_t v335 = v20[19];
              uint64_t v336 = v246[19];
              uint64_t v337 = v19[19];
              uint64_t v338 = *(void *)v20[3];
              uint64_t v339 = *(void *)v246[3];
              do
              {
                if ((int)v332 >= 1)
                {
                  uint64_t v340 = 0;
                  unsigned int v341 = v332 + 1;
                  do
                  {
                    if (*(unsigned char *)(v335 + v340)) {
                      BOOL v342 = *(unsigned char *)(v336 + v340) == 0;
                    }
                    else {
                      BOOL v342 = 1;
                    }
                    char v343 = !v342;
                    *(unsigned char *)(v337 + v340) = v343;
                    --v341;
                    ++v340;
                  }
                  while (v341 > 1);
                }
                v337 += (int)v332;
                ++v334;
                v336 += v339;
                v335 += v338;
              }
              while (v334 != v333);
            }
          }
          else
          {
            unint64_t v2040 = v19[6];
            if (v2040)
            {
              unint64_t v2069 = 0;
              uint64_t v1994 = v246[19];
              uint64_t v2010 = v20[19];
              uint64_t v1240 = v19[19];
              do
              {
                uint64_t v1241 = 0;
                if ((v23 & 0x80000000) == 0)
                {
                  uint64_t v1242 = v20[3];
                  int v1243 = v2069;
                  do
                  {
                    ldiv_t v1244 = ldiv(v1243, v21[v23]);
                    int v1243 = v1244.quot;
                    v1241 += *(void *)(v1242 + 8 * v23--) * v1244.rem;
                  }
                  while (v23 != -1);
                }
                uint64_t v1245 = v2090;
                if ((v2090 & 0x80000000) != 0)
                {
                  LODWORD(v1246) = 0;
                }
                else
                {
                  uint64_t v1246 = 0;
                  uint64_t v1247 = v246[3];
                  int v1248 = v2069;
                  do
                  {
                    ldiv_t v1249 = ldiv(v1248, v247[v1245]);
                    int v1248 = v1249.quot;
                    v1246 += *(void *)(v1247 + 8 * v1245--) * v1249.rem;
                  }
                  while (v1245 != -1);
                }
                uint64_t v23 = v2106;
                if ((int)v332 >= 1)
                {
                  uint64_t v1250 = 0;
                  unsigned int v1251 = v332 + 1;
                  do
                  {
                    if (*(unsigned char *)(v2010 + (int)v1241 + v1250)) {
                      BOOL v1252 = *(unsigned char *)(v1994 + (int)v1246 + v1250) == 0;
                    }
                    else {
                      BOOL v1252 = 1;
                    }
                    char v1253 = !v1252;
                    *(unsigned char *)(v1240 + v1250) = v1253;
                    --v1251;
                    ++v1250;
                  }
                  while (v1251 > 1);
                }
                v1240 += (int)v332;
                v2069 += (int)v332;
              }
              while (v2069 < v2040);
            }
          }
          break;
        default:
LABEL_376:
          switch(v328)
          {
            case 1uLL:
              uint64_t v344 = v19[6];
              if (v344)
              {
                uint64_t v345 = (unsigned char *)v20[19];
                BOOL v346 = (unsigned char *)v246[19];
                unint64_t v347 = (char *)v19[19];
                uint64_t v348 = *(void *)v20[3];
                uint64_t v349 = *(void *)v246[3];
                do
                {
                  if (*v345) {
                    BOOL v350 = *v346 == 0;
                  }
                  else {
                    BOOL v350 = 1;
                  }
                  char v351 = !v350;
                  *v347++ = v351;
                  v346 += v349;
                  v345 += v348;
                  --v344;
                }
                while (v344);
              }
              break;
            case 2uLL:
              uint64_t v497 = *v21;
              if (v497)
              {
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = 0;
                uint64_t v502 = v20[19];
                uint64_t v503 = v246[19];
                uint64_t v504 = v19[19];
                unint64_t v505 = v21[1];
                uint64_t v506 = (uint64_t *)v20[3];
                uint64_t v507 = *v506;
                uint64_t v508 = v506[1];
                uint64_t v509 = (uint64_t *)v246[3];
                uint64_t v510 = *v509;
                uint64_t v511 = v509[1];
                uint64_t v512 = v510 - v511 * v247[1];
                if (v505 <= 1) {
                  uint64_t v513 = 1;
                }
                else {
                  uint64_t v513 = v21[1];
                }
                uint64_t v514 = v507 - v508 * v505;
                do
                {
                  if (v505)
                  {
                    uint64_t v515 = v499 + v513;
                    BOOL v516 = (char *)(v504 + v499);
                    uint64_t v517 = v513;
                    do
                    {
                      if (*(unsigned char *)(v502 + v501)) {
                        BOOL v518 = *(unsigned char *)(v503 + v500) == 0;
                      }
                      else {
                        BOOL v518 = 1;
                      }
                      char v519 = !v518;
                      *v516++ = v519;
                      v501 += v508;
                      v500 += v511;
                      --v517;
                    }
                    while (v517);
                    uint64_t v499 = v515;
                  }
                  v501 += v514;
                  v500 += v512;
                  ++v498;
                }
                while (v498 != v497);
              }
              break;
            case 3uLL:
              uint64_t v520 = *v21;
              if (v520)
              {
                uint64_t v521 = 0;
                uint64_t v522 = 0;
                uint64_t v523 = 0;
                uint64_t v524 = 0;
                uint64_t v525 = v20[19];
                uint64_t v526 = v246[19];
                uint64_t v527 = v19[19];
                unint64_t v528 = v21[1];
                uint64_t v529 = (void *)v20[3];
                uint64_t v530 = v529[1];
                uint64_t v531 = (void *)v246[3];
                uint64_t v532 = v531[1];
                uint64_t v533 = *v531 - v532 * v247[1];
                if (v528 <= 1) {
                  uint64_t v534 = 1;
                }
                else {
                  uint64_t v534 = v21[1];
                }
                unint64_t v535 = *v529 - v530 * v528;
                do
                {
                  if (v528)
                  {
                    uint64_t v536 = 0;
                    unint64_t v537 = v21[2];
                    uint64_t v538 = v529[2];
                    uint64_t v539 = v531[2];
                    if (v537 <= 1) {
                      uint64_t v540 = 1;
                    }
                    else {
                      uint64_t v540 = v21[2];
                    }
                    uint64_t v541 = v532 - v539 * v247[2];
                    do
                    {
                      uint64_t v542 = v540;
                      if (v537)
                      {
                        do
                        {
                          if (*(unsigned char *)(v525 + v524)) {
                            BOOL v543 = *(unsigned char *)(v526 + v523) == 0;
                          }
                          else {
                            BOOL v543 = 1;
                          }
                          char v544 = !v543;
                          *(unsigned char *)(v527 + v522++) = v544;
                          v524 += v538;
                          v523 += v539;
                          --v542;
                        }
                        while (v542);
                      }
                      v524 += v530 - v538 * v537;
                      v523 += v541;
                      ++v536;
                    }
                    while (v536 != v534);
                  }
                  v524 += v535;
                  v523 += v533;
                  ++v521;
                }
                while (v521 != v520);
              }
              break;
            case 4uLL:
              uint64_t v2113 = *v21;
              if (v2113)
              {
                uint64_t v545 = 0;
                uint64_t v546 = 0;
                uint64_t v547 = 0;
                uint64_t v548 = 0;
                uint64_t v549 = v20[19];
                uint64_t v550 = v246[19];
                uint64_t v551 = v19[19];
                unint64_t v552 = v21[1];
                unint64_t v553 = (void *)v20[3];
                uint64_t v554 = (void *)v246[3];
                uint64_t v2020 = v554[1];
                uint64_t v2033 = v553[1];
                if (v552 <= 1) {
                  uint64_t v555 = 1;
                }
                else {
                  uint64_t v555 = v21[1];
                }
                unint64_t v2062 = *v553 - v553[1] * v552;
                uint64_t v2095 = *v554 - v2020 * v247[1];
                do
                {
                  if (v552)
                  {
                    uint64_t v556 = 0;
                    unint64_t v557 = v21[2];
                    uint64_t v558 = v553[2];
                    uint64_t v559 = v554[2];
                    if (v557 <= 1) {
                      uint64_t v560 = 1;
                    }
                    else {
                      uint64_t v560 = v21[2];
                    }
                    uint64_t v561 = v2020 - v559 * v247[2];
                    do
                    {
                      if (v557)
                      {
                        uint64_t v562 = 0;
                        unint64_t v563 = v21[3];
                        uint64_t v564 = v553[3];
                        uint64_t v565 = v554[3];
                        if (v563 <= 1) {
                          uint64_t v566 = 1;
                        }
                        else {
                          uint64_t v566 = v21[3];
                        }
                        uint64_t v567 = v559 - v565 * v247[3];
                        do
                        {
                          uint64_t v568 = v566;
                          if (v563)
                          {
                            do
                            {
                              if (*(unsigned char *)(v549 + v548)) {
                                BOOL v569 = *(unsigned char *)(v550 + v547) == 0;
                              }
                              else {
                                BOOL v569 = 1;
                              }
                              char v570 = !v569;
                              *(unsigned char *)(v551 + v546++) = v570;
                              v548 += v564;
                              v547 += v565;
                              --v568;
                            }
                            while (v568);
                          }
                          v548 += v558 - v564 * v563;
                          v547 += v567;
                          ++v562;
                        }
                        while (v562 != v560);
                      }
                      v548 += v2033 - v558 * v557;
                      v547 += v561;
                      ++v556;
                    }
                    while (v556 != v555);
                  }
                  v548 += v2062;
                  v547 += v2095;
                  ++v545;
                }
                while (v545 != v2113);
              }
              break;
            default:
              uint64_t v484 = v19[6];
              if (v484)
              {
                uint64_t v485 = 0;
                uint64_t v2032 = v246[19];
                uint64_t v2061 = v20[19];
                uint64_t v2019 = v19[19];
                do
                {
                  uint64_t v486 = 0;
                  if ((v23 & 0x80000000) == 0)
                  {
                    uint64_t v487 = v20[3];
                    int v488 = v485;
                    do
                    {
                      ldiv_t v489 = ldiv(v488, v21[v23]);
                      int v488 = v489.quot;
                      v486 += *(void *)(v487 + 8 * v23--) * v489.rem;
                    }
                    while (v23 != -1);
                  }
                  uint64_t v490 = v2090;
                  if ((v2090 & 0x80000000) != 0)
                  {
                    LODWORD(v491) = 0;
                  }
                  else
                  {
                    uint64_t v491 = 0;
                    uint64_t v492 = v246[3];
                    int v493 = v485;
                    do
                    {
                      ldiv_t v494 = ldiv(v493, v247[v490]);
                      int v493 = v494.quot;
                      v491 += *(void *)(v492 + 8 * v490--) * v494.rem;
                    }
                    while (v490 != -1);
                  }
                  if (*(unsigned char *)(v2061 + (int)v486)) {
                    BOOL v495 = *(unsigned char *)(v2032 + (int)v491) == 0;
                  }
                  else {
                    BOOL v495 = 1;
                  }
                  char v496 = !v495;
                  *(unsigned char *)(v2019 + v485++) = v496;
                  uint64_t v23 = v2106;
                }
                while (v485 != v484);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          unsigned int v8 = **(unsigned __int8 **)(*a1 + 152);
          if (v8 >= **(unsigned __int8 **)(*a2 + 152)) {
            LOBYTE(v8) = **(unsigned char **)(*a2 + 152);
          }
          goto LABEL_18;
        case 1:
          int v64 = *(_DWORD *)(*a2 + 160);
          if (v64 >= 1)
          {
            unsigned int v65 = **(unsigned __int8 **)(*a1 + 152);
            char v66 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v67 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v68 = v64 + 1;
            do
            {
              unsigned int v70 = *v67++;
              char v69 = v70;
              if (v65 < v70) {
                char v69 = v65;
              }
              *v66++ = v69;
              --v68;
            }
            while (v68 > 1);
          }
          return;
        case 2:
          int v71 = *(_DWORD *)(*a1 + 160);
          if (v71 >= 1)
          {
            unsigned int v72 = **(unsigned __int8 **)(*a2 + 152);
            char v73 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v74 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v75 = v71 + 1;
            do
            {
              unsigned int v77 = *v74++;
              char v76 = v77;
              if (v77 >= v72) {
                char v76 = v72;
              }
              *v73++ = v76;
              --v75;
            }
            while (v75 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            unsigned int v79 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v80 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v81 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              unsigned int v84 = *v81++;
              unsigned int v83 = v84;
              unsigned int v86 = *v80++;
              char v85 = v86;
              if (v83 >= v86) {
                LOBYTE(v83) = v85;
              }
              *v79++ = v83;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          uint64_t v56 = *(void **)a3;
          uint64_t v57 = *a1;
          int v58 = *(int **)*a1;
          uint64_t v59 = (*(void *)(*a1 + 8) - (void)v58) >> 2;
          int v60 = v59 - 1;
          if ((int)v59 - 1 >= -1) {
            int v60 = -1;
          }
          int v61 = v60 + 1;
          int v62 = v59 + 1;
          break;
      }
      while (1)
      {
        unsigned int v63 = v62 - 2;
        if (v62 - 2 < 0) {
          break;
        }
        --v62;
        if (*(void *)(*(void *)(v57 + 24) + 8 * v63) != *(void *)(v56[3] + 8 * v63)) {
          goto LABEL_225;
        }
      }
      int v62 = v61;
LABEL_225:
      int v254 = (int **)*a2;
      int v255 = *(int **)*a2;
      uint64_t v256 = (*(void *)(*a2 + 8) - (void)v255) >> 2;
      int v257 = v256 - 1;
      if ((int)v256 - 1 >= -1) {
        int v257 = -1;
      }
      int v258 = v257 + 1;
      int v259 = v256 + 1;
      while (1)
      {
        unsigned int v260 = v259 - 2;
        if (v259 - 2 < 0) {
          break;
        }
        --v259;
        if (*(void *)&v254[3][2 * v260] != *(void *)(v56[3] + 8 * v260)) {
          goto LABEL_276;
        }
      }
      int v259 = v258;
LABEL_276:
      int v302 = v59 + 1;
      while (1)
      {
        unsigned int v303 = v302 - 2;
        if (v302 - 2 < 0) {
          break;
        }
        --v302;
        if (*(void *)(*(void *)(v57 + 24) + 8 * v303)) {
          goto LABEL_311;
        }
      }
      int v302 = v61;
LABEL_311:
      int v316 = v256 + 1;
      while (1)
      {
        int v317 = v316 - 2;
        if (v316 - 2 < 0) {
          break;
        }
        --v316;
        if (*(void *)&v254[3][2 * v317]) {
          goto LABEL_388;
        }
      }
      int v316 = v258;
LABEL_388:
      unint64_t v352 = (uint64_t)(v56[1] - *v56) >> 2;
      if (v62 <= v259) {
        int v353 = v259;
      }
      else {
        int v353 = v62;
      }
      if (v62 <= v316) {
        int v62 = v316;
      }
      if (v302 > v259) {
        int v259 = v302;
      }
      if (v352 > v259)
      {
        int v354 = 1;
      }
      else
      {
        int v259 = (uint64_t)(v56[1] - *v56) >> 2;
        int v354 = 4;
      }
      if (v352 > v62)
      {
        int v355 = 2;
      }
      else
      {
        int v62 = v259;
        int v355 = v354;
      }
      if (v352 > v353)
      {
        int v62 = v353;
        int v355 = 3;
      }
      if (!v62) {
        goto LABEL_420;
      }
      unint64_t v356 = *(void *)(v56[3] + 8 * (v62 - 1));
      if (v356 < 0x10) {
        goto LABEL_420;
      }
      uint64_t v2107 = *(void *)(v56[3] + 8 * (v62 - 1));
      switch(v355)
      {
        case 1:
          if (v62 == 2)
          {
            int v1546 = *v58;
            if (*v58)
            {
              unint64_t v1547 = 0;
              uint64_t v1548 = 0;
              uint64_t v1549 = 0;
              uint64_t v1550 = *(void *)(v57 + 152);
              uint64_t v1551 = v254[19];
              uint64_t v1552 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1553 = 0;
                  do
                  {
                    if ((int)v356 >= 1)
                    {
                      uint64_t v1554 = 0;
                      unsigned int v1555 = *(unsigned __int8 *)(v1550 + v1549);
                      unsigned int v1556 = v356 + 1;
                      do
                      {
                        unsigned int v1557 = *((unsigned __int8 *)v1551 + v1548 + v1554);
                        if (v1555 < v1557) {
                          LOBYTE(v1557) = v1555;
                        }
                        *(unsigned char *)(v1552 + v1554) = v1557;
                        --v1556;
                        ++v1554;
                      }
                      while (v1556 > 1);
                      uint64_t v57 = *a1;
                      int v254 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    uint64_t v1558 = *(void **)(v57 + 24);
                    uint64_t v1559 = v1558[1];
                    v1549 += v1559;
                    v1548 += *((void *)v254[3] + 1);
                    v1552 += (int)v356;
                    ++v1553;
                    unint64_t v1560 = v58[1];
                  }
                  while (v1553 < v1560);
                  int v1546 = *v58;
                  int v255 = *v254;
                }
                else
                {
                  unint64_t v1560 = 0;
                  uint64_t v1558 = *(void **)(v57 + 24);
                  uint64_t v1559 = v1558[1];
                }
                uint64_t v1549 = *v1558 + v1549 - v1560 * v1559;
                uint64_t v1548 = *(void *)v254[3] + v1548 - *((void *)v254[3] + 1) * v255[1];
                ++v1547;
              }
              while (v1547 < v1546);
            }
          }
          else if (v62 == 1)
          {
            int v1076 = *v58;
            if (*v58)
            {
              unint64_t v1077 = 0;
              uint64_t v1078 = 0;
              uint64_t v1079 = 0;
              uint64_t v1080 = *(void *)(v57 + 152);
              int v1081 = v254[19];
              uint64_t v1082 = v56[19];
              do
              {
                if ((int)v356 >= 1)
                {
                  uint64_t v1083 = 0;
                  unsigned int v1084 = *(unsigned __int8 *)(v1080 + v1079);
                  unsigned int v1085 = v356 + 1;
                  do
                  {
                    unsigned int v1086 = *((unsigned __int8 *)v1081 + v1078 + v1083);
                    if (v1084 < v1086) {
                      LOBYTE(v1086) = v1084;
                    }
                    *(unsigned char *)(v1082 + v1083) = v1086;
                    --v1085;
                    ++v1083;
                  }
                  while (v1085 > 1);
                  uint64_t v57 = *a1;
                  int v254 = (int **)*a2;
                  int v1076 = **(_DWORD **)*a1;
                }
                v1079 += **(void **)(v57 + 24);
                v1078 += *(void *)v254[3];
                v1082 += (int)v356;
                ++v1077;
              }
              while (v1077 < v1076);
            }
          }
          else if (v56[6])
          {
            uint64_t v2028 = v254[19];
            uint64_t v2049 = *(void *)(v57 + 152);
            uint64_t v2078 = (int)v356;
            unint64_t v2102 = 0;
            unsigned int v2015 = v356 + 1;
            uint64_t v1561 = v56[19];
            do
            {
              uint64_t v1562 = *(void *)*a1;
              unint64_t v1563 = (unint64_t)(*(void *)(*a1 + 8) - v1562) >> 2;
              uint64_t v1564 = 0;
              uint64_t v1565 = (v1563 - 1);
              if ((int)v1563 - 1 >= 0)
              {
                uint64_t v1566 = *(void *)(*a1 + 24);
                int v1567 = v2102;
                do
                {
                  ldiv_t v1568 = ldiv(v1567, *(int *)(v1562 + 4 * v1565));
                  int v1567 = v1568.quot;
                  v1564 += *(void *)(v1566 + 8 * v1565--) * v1568.rem;
                }
                while (v1565 != -1);
              }
              uint64_t v1569 = *(void *)*a2;
              unint64_t v1570 = (unint64_t)(*(void *)(*a2 + 8) - v1569) >> 2;
              uint64_t v1571 = 0;
              uint64_t v1572 = (v1570 - 1);
              if ((int)v1570 - 1 >= 0)
              {
                uint64_t v1573 = *(void *)(*a2 + 24);
                int v1574 = v2102;
                do
                {
                  ldiv_t v1575 = ldiv(v1574, *(int *)(v1569 + 4 * v1572));
                  int v1574 = v1575.quot;
                  v1571 += *(void *)(v1573 + 8 * v1572--) * v1575.rem;
                }
                while (v1572 != -1);
              }
              if ((int)v2107 >= 1)
              {
                uint64_t v1576 = 0;
                unsigned int v1577 = *(unsigned __int8 *)(v2049 + (int)v1564);
                unsigned int v1578 = v2015;
                do
                {
                  unsigned int v1579 = *((unsigned __int8 *)v2028 + (int)v1571 + v1576);
                  if (v1577 < v1579) {
                    LOBYTE(v1579) = v1577;
                  }
                  *(unsigned char *)(v1561 + v1576) = v1579;
                  --v1578;
                  ++v1576;
                }
                while (v1578 > 1);
                uint64_t v56 = *(void **)a3;
              }
              v1561 += v2078;
              v2102 += v2078;
            }
            while (v2102 < v56[6]);
          }
          break;
        case 2:
          if (v62 == 2)
          {
            int v1580 = *v58;
            if (*v58)
            {
              unint64_t v1581 = 0;
              uint64_t v1582 = 0;
              uint64_t v1583 = 0;
              uint64_t v1584 = *(void *)(v57 + 152);
              uint64_t v1585 = v254[19];
              uint64_t v1586 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1587 = 0;
                  do
                  {
                    if ((int)v356 >= 1)
                    {
                      uint64_t v1588 = 0;
                      unsigned int v1589 = *((unsigned __int8 *)v1585 + v1582);
                      unsigned int v1590 = v356 + 1;
                      do
                      {
                        unsigned int v1591 = *(unsigned __int8 *)(v1584 + v1583 + v1588);
                        if (v1591 >= v1589) {
                          LOBYTE(v1591) = v1589;
                        }
                        *(unsigned char *)(v1586 + v1588) = v1591;
                        --v1590;
                        ++v1588;
                      }
                      while (v1590 > 1);
                      uint64_t v57 = *a1;
                      int v254 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    uint64_t v1592 = *(void **)(v57 + 24);
                    uint64_t v1593 = v1592[1];
                    v1583 += v1593;
                    v1582 += *((void *)v254[3] + 1);
                    v1586 += (int)v356;
                    ++v1587;
                    unint64_t v1594 = v58[1];
                  }
                  while (v1587 < v1594);
                  int v1580 = *v58;
                  int v255 = *v254;
                }
                else
                {
                  unint64_t v1594 = 0;
                  uint64_t v1592 = *(void **)(v57 + 24);
                  uint64_t v1593 = v1592[1];
                }
                uint64_t v1583 = *v1592 + v1583 - v1594 * v1593;
                uint64_t v1582 = *(void *)v254[3] + v1582 - *((void *)v254[3] + 1) * v255[1];
                ++v1581;
              }
              while (v1581 < v1580);
            }
          }
          else if (v62 == 1)
          {
            int v1087 = *v58;
            if (*v58)
            {
              unint64_t v1088 = 0;
              uint64_t v1089 = 0;
              uint64_t v1090 = 0;
              uint64_t v1091 = *(void *)(v57 + 152);
              int v1092 = v254[19];
              uint64_t v1093 = v56[19];
              do
              {
                if ((int)v356 >= 1)
                {
                  uint64_t v1094 = 0;
                  unsigned int v1095 = *((unsigned __int8 *)v1092 + v1089);
                  unsigned int v1096 = v356 + 1;
                  do
                  {
                    unsigned int v1097 = *(unsigned __int8 *)(v1091 + v1090 + v1094);
                    if (v1097 >= v1095) {
                      LOBYTE(v1097) = v1095;
                    }
                    *(unsigned char *)(v1093 + v1094) = v1097;
                    --v1096;
                    ++v1094;
                  }
                  while (v1096 > 1);
                  uint64_t v57 = *a1;
                  int v254 = (int **)*a2;
                  int v1087 = **(_DWORD **)*a1;
                }
                v1090 += **(void **)(v57 + 24);
                v1089 += *(void *)v254[3];
                v1093 += (int)v356;
                ++v1088;
              }
              while (v1088 < v1087);
            }
          }
          else if (v56[6])
          {
            uint64_t v2029 = v254[19];
            uint64_t v2050 = *(void *)(v57 + 152);
            uint64_t v2079 = (int)v356;
            unint64_t v2103 = 0;
            unsigned int v2016 = v356 + 1;
            uint64_t v1595 = v56[19];
            do
            {
              uint64_t v1596 = *(void *)*a1;
              unint64_t v1597 = (unint64_t)(*(void *)(*a1 + 8) - v1596) >> 2;
              uint64_t v1598 = 0;
              uint64_t v1599 = (v1597 - 1);
              if ((int)v1597 - 1 >= 0)
              {
                uint64_t v1600 = *(void *)(*a1 + 24);
                int v1601 = v2103;
                do
                {
                  ldiv_t v1602 = ldiv(v1601, *(int *)(v1596 + 4 * v1599));
                  int v1601 = v1602.quot;
                  v1598 += *(void *)(v1600 + 8 * v1599--) * v1602.rem;
                }
                while (v1599 != -1);
              }
              uint64_t v1603 = *(void *)*a2;
              unint64_t v1604 = (unint64_t)(*(void *)(*a2 + 8) - v1603) >> 2;
              uint64_t v1605 = 0;
              uint64_t v1606 = (v1604 - 1);
              if ((int)v1604 - 1 >= 0)
              {
                uint64_t v1607 = *(void *)(*a2 + 24);
                int v1608 = v2103;
                do
                {
                  ldiv_t v1609 = ldiv(v1608, *(int *)(v1603 + 4 * v1606));
                  int v1608 = v1609.quot;
                  v1605 += *(void *)(v1607 + 8 * v1606--) * v1609.rem;
                }
                while (v1606 != -1);
              }
              if ((int)v2107 >= 1)
              {
                uint64_t v1610 = 0;
                unsigned int v1611 = *((unsigned __int8 *)v2029 + (int)v1605);
                unsigned int v1612 = v2016;
                do
                {
                  unsigned int v1613 = *(unsigned __int8 *)(v2050 + (int)v1598 + v1610);
                  if (v1613 >= v1611) {
                    LOBYTE(v1613) = v1611;
                  }
                  *(unsigned char *)(v1595 + v1610) = v1613;
                  --v1612;
                  ++v1610;
                }
                while (v1612 > 1);
                uint64_t v56 = *(void **)a3;
              }
              v1595 += v2079;
              v2103 += v2079;
            }
            while (v2103 < v56[6]);
          }
          break;
        case 3:
          if (v62 == 2)
          {
            int v1254 = *v58;
            if (*v58)
            {
              unint64_t v1255 = 0;
              uint64_t v1256 = 0;
              uint64_t v1257 = 0;
              uint64_t v1258 = *(void *)(v57 + 152);
              uint64_t v1259 = v254[19];
              uint64_t v1260 = v56[19];
              do
              {
                if (v58[1])
                {
                  unint64_t v1261 = 0;
                  do
                  {
                    if ((int)v356 >= 1)
                    {
                      uint64_t v1262 = 0;
                      unsigned int v1263 = v356 + 1;
                      do
                      {
                        unsigned int v1264 = *(unsigned __int8 *)(v1258 + v1257 + v1262);
                        if (v1264 >= *((unsigned __int8 *)v1259 + v1256 + v1262)) {
                          LOBYTE(v1264) = *((unsigned char *)v1259 + v1256 + v1262);
                        }
                        *(unsigned char *)(v1260 + v1262) = v1264;
                        --v1263;
                        ++v1262;
                      }
                      while (v1263 > 1);
                      uint64_t v57 = *a1;
                      int v254 = (int **)*a2;
                      int v58 = *(int **)*a1;
                    }
                    uint64_t v1265 = *(void **)(v57 + 24);
                    uint64_t v1266 = v1265[1];
                    v1257 += v1266;
                    v1256 += *((void *)v254[3] + 1);
                    v1260 += (int)v356;
                    ++v1261;
                    unint64_t v1267 = v58[1];
                  }
                  while (v1261 < v1267);
                  int v1254 = *v58;
                  int v255 = *v254;
                }
                else
                {
                  unint64_t v1267 = 0;
                  uint64_t v1265 = *(void **)(v57 + 24);
                  uint64_t v1266 = v1265[1];
                }
                uint64_t v1257 = *v1265 + v1257 - v1267 * v1266;
                uint64_t v1256 = *(void *)v254[3] + v1256 - *((void *)v254[3] + 1) * v255[1];
                ++v1255;
              }
              while (v1255 < v1254);
            }
          }
          else if (v62 == 1)
          {
            int v357 = *v58;
            if (*v58)
            {
              unint64_t v358 = 0;
              uint64_t v359 = 0;
              uint64_t v360 = 0;
              uint64_t v361 = *(void *)(v57 + 152);
              unint64_t v362 = v254[19];
              uint64_t v363 = v56[19];
              do
              {
                if ((int)v356 >= 1)
                {
                  uint64_t v364 = 0;
                  unsigned int v365 = v356 + 1;
                  do
                  {
                    unsigned int v366 = *(unsigned __int8 *)(v361 + v360 + v364);
                    if (v366 >= *((unsigned __int8 *)v362 + v359 + v364)) {
                      LOBYTE(v366) = *((unsigned char *)v362 + v359 + v364);
                    }
                    *(unsigned char *)(v363 + v364) = v366;
                    --v365;
                    ++v364;
                  }
                  while (v365 > 1);
                  uint64_t v57 = *a1;
                  int v254 = (int **)*a2;
                  int v357 = **(_DWORD **)*a1;
                }
                v360 += **(void **)(v57 + 24);
                v359 += *(void *)v254[3];
                v363 += (int)v356;
                ++v358;
              }
              while (v358 < v357);
            }
          }
          else if (v56[6])
          {
            uint64_t v2026 = v254[19];
            uint64_t v2041 = *(void *)(v57 + 152);
            uint64_t v2070 = (int)v356;
            unint64_t v2100 = 0;
            unsigned int v2011 = v356 + 1;
            uint64_t v1268 = v56[19];
            do
            {
              uint64_t v1269 = *(void *)*a1;
              unint64_t v1270 = (unint64_t)(*(void *)(*a1 + 8) - v1269) >> 2;
              uint64_t v1271 = 0;
              uint64_t v1272 = (v1270 - 1);
              if ((int)v1270 - 1 >= 0)
              {
                uint64_t v1273 = *(void *)(*a1 + 24);
                int v1274 = v2100;
                do
                {
                  ldiv_t v1275 = ldiv(v1274, *(int *)(v1269 + 4 * v1272));
                  int v1274 = v1275.quot;
                  v1271 += *(void *)(v1273 + 8 * v1272--) * v1275.rem;
                }
                while (v1272 != -1);
              }
              uint64_t v1276 = *(void *)*a2;
              unint64_t v1277 = (unint64_t)(*(void *)(*a2 + 8) - v1276) >> 2;
              uint64_t v1278 = 0;
              uint64_t v1279 = (v1277 - 1);
              if ((int)v1277 - 1 >= 0)
              {
                uint64_t v1280 = *(void *)(*a2 + 24);
                int v1281 = v2100;
                do
                {
                  ldiv_t v1282 = ldiv(v1281, *(int *)(v1276 + 4 * v1279));
                  int v1281 = v1282.quot;
                  v1278 += *(void *)(v1280 + 8 * v1279--) * v1282.rem;
                }
                while (v1279 != -1);
              }
              if ((int)v2107 >= 1)
              {
                uint64_t v1283 = 0;
                unsigned int v1284 = v2011;
                do
                {
                  unsigned int v1285 = *(unsigned __int8 *)(v2041 + (int)v1271 + v1283);
                  if (v1285 >= *((unsigned __int8 *)v2026 + (int)v1278 + v1283)) {
                    LOBYTE(v1285) = *((unsigned char *)v2026 + (int)v1278 + v1283);
                  }
                  *(unsigned char *)(v1268 + v1283) = v1285;
                  --v1284;
                  ++v1283;
                }
                while (v1284 > 1);
                uint64_t v56 = *(void **)a3;
              }
              v1268 += v2070;
              v2100 += v2070;
            }
            while (v2100 < v56[6]);
          }
          break;
        default:
LABEL_420:
          switch(v352)
          {
            case 1uLL:
              if (v56[6])
              {
                unint64_t v367 = 0;
                uint64_t v368 = 0;
                uint64_t v369 = 0;
                uint64_t v370 = *(void *)(v57 + 152);
                int v371 = v254[19];
                uint64_t v372 = v56[19];
                do
                {
                  unsigned int v373 = *(unsigned __int8 *)(v370 + v369);
                  if (v373 >= *((unsigned __int8 *)v371 + v368)) {
                    LOBYTE(v373) = *((unsigned char *)v371 + v368);
                  }
                  *(unsigned char *)(v372 + v367) = v373;
                  v369 += **(void **)(*a1 + 24);
                  v368 += **(void **)(*a2 + 24);
                  ++v367;
                }
                while (v367 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v588 = *v58;
              if (*v58)
              {
                unint64_t v589 = 0;
                uint64_t v590 = 0;
                uint64_t v591 = 0;
                uint64_t v592 = 0;
                uint64_t v593 = *(void *)(v57 + 152);
                uint64_t v594 = v254[19];
                uint64_t v595 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v596 = 0;
                    do
                    {
                      unsigned int v597 = *(unsigned __int8 *)(v593 + v592);
                      if (v597 >= *((unsigned __int8 *)v594 + v591)) {
                        LOBYTE(v597) = *((unsigned char *)v594 + v591);
                      }
                      *(unsigned char *)(v595 + v590 + v596) = v597;
                      uint64_t v57 = *a1;
                      int v598 = *(void **)(*a1 + 24);
                      uint64_t v599 = v598[1];
                      v592 += v599;
                      int v254 = (int **)*a2;
                      uint64_t v600 = *(int **)(*a2 + 24);
                      uint64_t v601 = *((void *)v600 + 1);
                      v591 += v601;
                      ++v596;
                      int v58 = *(int **)*a1;
                      unint64_t v602 = v58[1];
                    }
                    while (v596 < v602);
                    int v588 = *v58;
                    int v255 = *v254;
                    v590 += v596;
                  }
                  else
                  {
                    unint64_t v602 = 0;
                    int v598 = *(void **)(v57 + 24);
                    uint64_t v599 = v598[1];
                    uint64_t v600 = v254[3];
                    uint64_t v601 = *((void *)v600 + 1);
                  }
                  uint64_t v592 = *v598 + v592 - v602 * v599;
                  uint64_t v591 = *(void *)v600 + v591 - v601 * v255[1];
                  ++v589;
                }
                while (v589 < v588);
              }
              break;
            case 3uLL:
              int v603 = *v58;
              if (*v58)
              {
                unint64_t v604 = 0;
                uint64_t v605 = 0;
                uint64_t v606 = 0;
                uint64_t v607 = 0;
                uint64_t v608 = *(void *)(v57 + 152);
                unint64_t v609 = v254[19];
                uint64_t v610 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v611 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        unint64_t v612 = 0;
                        do
                        {
                          unsigned int v613 = *(unsigned __int8 *)(v608 + v607);
                          if (v613 >= *((unsigned __int8 *)v609 + v606)) {
                            LOBYTE(v613) = *((unsigned char *)v609 + v606);
                          }
                          *(unsigned char *)(v610 + v605 + v612) = v613;
                          uint64_t v57 = *a1;
                          uint64_t v614 = *(void **)(*a1 + 24);
                          uint64_t v615 = v614[2];
                          v607 += v615;
                          int v254 = (int **)*a2;
                          int v616 = *(int **)(*a2 + 24);
                          uint64_t v617 = *((void *)v616 + 2);
                          v606 += v617;
                          ++v612;
                          int v58 = *(int **)*a1;
                          unint64_t v618 = v58[2];
                        }
                        while (v612 < v618);
                        int v255 = *v254;
                        v605 += v612;
                      }
                      else
                      {
                        unint64_t v618 = 0;
                        uint64_t v614 = *(void **)(v57 + 24);
                        uint64_t v615 = v614[2];
                        int v616 = v254[3];
                        uint64_t v617 = *((void *)v616 + 2);
                      }
                      uint64_t v619 = v614[1];
                      uint64_t v607 = v619 + v607 - v618 * v615;
                      uint64_t v606 = *((void *)v616 + 1) + v606 - v617 * v255[2];
                      ++v611;
                      unint64_t v620 = v58[1];
                    }
                    while (v611 < v620);
                    int v603 = *v58;
                  }
                  else
                  {
                    unint64_t v620 = 0;
                    uint64_t v614 = *(void **)(v57 + 24);
                    uint64_t v619 = v614[1];
                  }
                  uint64_t v607 = *v614 + v607 - v620 * v619;
                  uint64_t v606 = *(void *)v254[3] + v606 - *((void *)v254[3] + 1) * v255[1];
                  ++v604;
                }
                while (v604 < v603);
              }
              break;
            case 4uLL:
              int v621 = *v58;
              if (*v58)
              {
                unint64_t v622 = 0;
                uint64_t v623 = 0;
                uint64_t v624 = 0;
                uint64_t v625 = 0;
                uint64_t v626 = *(void *)(v57 + 152);
                unsigned int v627 = v254[19];
                uint64_t v628 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    unint64_t v629 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        unint64_t v630 = 0;
                        do
                        {
                          if (v58[3])
                          {
                            unint64_t v631 = 0;
                            do
                            {
                              unsigned int v632 = *(unsigned __int8 *)(v626 + v625);
                              if (v632 >= *((unsigned __int8 *)v627 + v624)) {
                                LOBYTE(v632) = *((unsigned char *)v627 + v624);
                              }
                              *(unsigned char *)(v628 + v623 + v631) = v632;
                              uint64_t v57 = *a1;
                              uint64_t v633 = *(void **)(*a1 + 24);
                              uint64_t v634 = v633[3];
                              v625 += v634;
                              int v254 = (int **)*a2;
                              unint64_t v635 = *(int **)(*a2 + 24);
                              uint64_t v636 = *((void *)v635 + 3);
                              v624 += v636;
                              ++v631;
                              int v58 = *(int **)*a1;
                              unint64_t v637 = v58[3];
                            }
                            while (v631 < v637);
                            int v255 = *v254;
                            v623 += v631;
                          }
                          else
                          {
                            unint64_t v637 = 0;
                            uint64_t v633 = *(void **)(v57 + 24);
                            uint64_t v634 = v633[3];
                            unint64_t v635 = v254[3];
                            uint64_t v636 = *((void *)v635 + 3);
                          }
                          uint64_t v638 = v633[2];
                          uint64_t v625 = v638 + v625 - v637 * v634;
                          uint64_t v624 = *((void *)v635 + 2) + v624 - v636 * v255[3];
                          ++v630;
                          unint64_t v639 = v58[2];
                        }
                        while (v630 < v639);
                      }
                      else
                      {
                        unint64_t v639 = 0;
                        uint64_t v633 = *(void **)(v57 + 24);
                        uint64_t v638 = v633[2];
                      }
                      uint64_t v625 = v633[1] + v625 - v639 * v638;
                      uint64_t v624 = *((void *)v254[3] + 1) + v624 - *((void *)v254[3] + 2) * v255[2];
                      ++v629;
                      unint64_t v640 = v58[1];
                    }
                    while (v629 < v640);
                    int v621 = *v58;
                  }
                  else
                  {
                    unint64_t v640 = 0;
                  }
                  uint64_t v625 = **(void **)(v57 + 24) + v625 - *(void *)(*(void *)(v57 + 24) + 8) * v640;
                  uint64_t v624 = *(void *)v254[3] + v624 - *((void *)v254[3] + 1) * v255[1];
                  ++v622;
                }
                while (v622 < v621);
              }
              break;
            default:
              if (v56[6])
              {
                unint64_t v571 = 0;
                unint64_t v2096 = v254[19];
                uint64_t v2114 = *(void *)(v57 + 152);
                uint64_t v572 = v56[19];
                do
                {
                  uint64_t v573 = *(void *)*a1;
                  unint64_t v574 = (unint64_t)(*(void *)(*a1 + 8) - v573) >> 2;
                  uint64_t v575 = 0;
                  uint64_t v576 = (v574 - 1);
                  if ((int)v574 - 1 >= 0)
                  {
                    uint64_t v577 = *(void *)(*a1 + 24);
                    int v578 = v571;
                    do
                    {
                      ldiv_t v579 = ldiv(v578, *(int *)(v573 + 4 * v576));
                      int v578 = v579.quot;
                      v575 += *(void *)(v577 + 8 * v576--) * v579.rem;
                    }
                    while (v576 != -1);
                  }
                  uint64_t v580 = *(void *)*a2;
                  unint64_t v581 = (unint64_t)(*(void *)(*a2 + 8) - v580) >> 2;
                  uint64_t v582 = 0;
                  uint64_t v583 = (v581 - 1);
                  if ((int)v581 - 1 >= 0)
                  {
                    uint64_t v584 = *(void *)(*a2 + 24);
                    int v585 = v571;
                    do
                    {
                      ldiv_t v586 = ldiv(v585, *(int *)(v580 + 4 * v583));
                      int v585 = v586.quot;
                      v582 += *(void *)(v584 + 8 * v583--) * v586.rem;
                    }
                    while (v583 != -1);
                  }
                  unsigned int v587 = *(unsigned __int8 *)(v2114 + (int)v575);
                  if (v587 >= *((unsigned __int8 *)v2096 + (int)v582)) {
                    LOBYTE(v587) = *((unsigned char *)v2096 + (int)v582);
                  }
                  *(unsigned char *)(v572 + v571++) = v587;
                }
                while (v571 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v10)
      {
        case 0:
          unsigned int v11 = **(_DWORD **)(*a1 + 152);
          if (v11 >= **(_DWORD **)(*a2 + 152)) {
            unsigned int v11 = **(_DWORD **)(*a2 + 152);
          }
          goto LABEL_22;
        case 1:
          int v96 = *(_DWORD *)(*a2 + 160);
          if (v96 >= 1)
          {
            unsigned int v97 = **(_DWORD **)(*a1 + 152);
            unsigned int v98 = *(unsigned int **)(*(void *)a3 + 152);
            unsigned int v99 = *(unsigned int **)(*a2 + 152);
            unsigned int v100 = v96 + 1;
            do
            {
              unsigned int v102 = *v99++;
              unsigned int v101 = v102;
              if (v97 < v102) {
                unsigned int v101 = v97;
              }
              *v98++ = v101;
              --v100;
            }
            while (v100 > 1);
          }
          return;
        case 2:
          int v103 = *(_DWORD *)(*a1 + 160);
          if (v103 >= 1)
          {
            unsigned int v104 = **(_DWORD **)(*a2 + 152);
            unsigned int v105 = *(unsigned int **)(*(void *)a3 + 152);
            unsigned int v106 = *(unsigned int **)(*a1 + 152);
            unsigned int v107 = v103 + 1;
            do
            {
              unsigned int v109 = *v106++;
              unsigned int v108 = v109;
              if (v109 >= v104) {
                unsigned int v108 = v104;
              }
              *v105++ = v108;
              --v107;
            }
            while (v107 > 1);
          }
          return;
        case 3:
          int v110 = *(_DWORD *)(*(void *)a3 + 48);
          if (v110 >= 1)
          {
            unsigned int v111 = *(unsigned int **)(*(void *)a3 + 152);
            unsigned int v112 = *(unsigned int **)(*a2 + 152);
            unsigned int v113 = *(unsigned int **)(*a1 + 152);
            unsigned int v114 = v110 + 1;
            do
            {
              unsigned int v116 = *v113++;
              unsigned int v115 = v116;
              unsigned int v118 = *v112++;
              unsigned int v117 = v118;
              if (v115 >= v118) {
                unsigned int v115 = v117;
              }
              *v111++ = v115;
              --v114;
            }
            while (v114 > 1);
          }
          return;
        default:
          uint64_t v87 = *(void **)a3;
          uint64_t v88 = (void *)*a1;
          int v89 = *(int **)*a1;
          uint64_t v90 = (v88[1] - (void)v89) >> 2;
          uint64_t v91 = (v90 - 1);
          if ((int)v91 >= -1) {
            int v92 = -1;
          }
          else {
            int v92 = v90 - 1;
          }
          int v93 = v92 + 1;
          int v94 = v90 + 1;
          break;
      }
      while (1)
      {
        unsigned int v95 = v94 - 2;
        if (v94 - 2 < 0) {
          break;
        }
        --v94;
        if (*(void *)(v88[3] + 8 * v95) != *(void *)(v87[3] + 8 * v95)) {
          goto LABEL_232;
        }
      }
      int v94 = v93;
LABEL_232:
      uint64_t v261 = (void *)*a2;
      int v262 = *(int **)*a2;
      uint64_t v263 = (v261[1] - (void)v262) >> 2;
      uint64_t v264 = (v263 - 1);
      if ((int)v264 >= -1) {
        int v265 = -1;
      }
      else {
        int v265 = v263 - 1;
      }
      int v266 = v265 + 1;
      int v267 = v263 + 1;
      while (1)
      {
        unsigned int v268 = v267 - 2;
        if (v267 - 2 < 0) {
          break;
        }
        --v267;
        if (*(void *)(v261[3] + 8 * v268) != *(void *)(v87[3] + 8 * v268)) {
          goto LABEL_281;
        }
      }
      int v267 = v266;
LABEL_281:
      int v304 = v90 + 1;
      while (1)
      {
        unsigned int v305 = v304 - 2;
        if (v304 - 2 < 0) {
          break;
        }
        --v304;
        if (*(void *)(v88[3] + 8 * v305)) {
          goto LABEL_316;
        }
      }
      int v304 = v93;
LABEL_316:
      int v318 = v263 + 1;
      while (1)
      {
        unsigned int v319 = v318 - 2;
        if (v318 - 2 < 0) {
          break;
        }
        --v318;
        if (*(void *)(v261[3] + 8 * v319)) {
          goto LABEL_428;
        }
      }
      int v318 = v266;
LABEL_428:
      unint64_t v374 = (uint64_t)(v87[1] - *v87) >> 2;
      if (v94 <= v267) {
        int v375 = v267;
      }
      else {
        int v375 = v94;
      }
      if (v94 <= v318) {
        int v94 = v318;
      }
      if (v304 > v267) {
        int v267 = v304;
      }
      if (v374 > v267)
      {
        int v376 = 1;
      }
      else
      {
        int v267 = (uint64_t)(v87[1] - *v87) >> 2;
        int v376 = 4;
      }
      if (v374 > v94)
      {
        int v377 = 2;
      }
      else
      {
        int v94 = v267;
        int v377 = v376;
      }
      if (v374 > v375)
      {
        int v94 = v375;
        int v377 = 3;
      }
      uint64_t v2091 = v264;
      uint64_t v2108 = v91;
      if (!v94) {
        goto LABEL_460;
      }
      unint64_t v378 = *(void *)(v87[3] + 8 * (v94 - 1));
      if (v378 < 0x10) {
        goto LABEL_460;
      }
      switch(v377)
      {
        case 1:
          if (v94 == 2)
          {
            int v1614 = *v89;
            if (*v89)
            {
              unint64_t v1615 = 0;
              uint64_t v1616 = 0;
              uint64_t v1617 = 0;
              uint64_t v1618 = v88[19];
              uint64_t v1619 = v261[19];
              uint64_t v1620 = v87[19];
              unint64_t v1621 = (uint64_t *)v88[3];
              uint64_t v1622 = *v1621;
              uint64_t v1623 = v1621[1];
              unsigned int v1624 = (uint64_t *)v261[3];
              uint64_t v1625 = *v1624;
              uint64_t v1626 = v1624[1];
              int v1627 = v89[1];
              int v1628 = v1627;
              do
              {
                if (v1628)
                {
                  unint64_t v1629 = 0;
                  uint64_t v1630 = v1619 + 4 * v1616;
                  do
                  {
                    if ((int)v378 >= 1)
                    {
                      uint64_t v1631 = 0;
                      unsigned int v1632 = *(_DWORD *)(v1618 + 4 * v1617);
                      unsigned int v1633 = v378 + 1;
                      do
                      {
                        unsigned int v1634 = *(_DWORD *)(v1630 + v1631);
                        if (v1632 < v1634) {
                          unsigned int v1634 = v1632;
                        }
                        *(_DWORD *)(v1620 + v1631) = v1634;
                        --v1633;
                        v1631 += 4;
                      }
                      while (v1633 > 1);
                      int v1627 = v89[1];
                    }
                    v1617 += v1623;
                    v1616 += v1626;
                    v1620 += 4 * (int)v378;
                    ++v1629;
                    v1630 += 4 * v1626;
                  }
                  while (v1629 < v1627);
                  uint64_t v1635 = v1627;
                  int v1614 = *v89;
                  int v1628 = v1627;
                }
                else
                {
                  uint64_t v1635 = 0;
                }
                uint64_t v1617 = v1617 + v1622 - v1635 * v1623;
                uint64_t v1616 = v1616 + v1625 - v1626 * v262[1];
                ++v1615;
              }
              while (v1615 < v1614);
            }
          }
          else if (v94 == 1)
          {
            int v1098 = *v89;
            if (*v89)
            {
              unint64_t v1099 = 0;
              uint64_t v1100 = 0;
              uint64_t v1101 = v88[19];
              uint64_t v1102 = v261[19];
              uint64_t v1103 = v87[19];
              uint64_t v1104 = *(void *)v88[3];
              uint64_t v1105 = 4 * *(void *)v261[3];
              do
              {
                if ((int)v378 >= 1)
                {
                  uint64_t v1106 = 0;
                  unsigned int v1107 = *(_DWORD *)(v1101 + 4 * v1100);
                  unsigned int v1108 = v378 + 1;
                  do
                  {
                    unsigned int v1109 = *(_DWORD *)(v1102 + v1106);
                    if (v1107 < v1109) {
                      unsigned int v1109 = v1107;
                    }
                    *(_DWORD *)(v1103 + v1106) = v1109;
                    --v1108;
                    v1106 += 4;
                  }
                  while (v1108 > 1);
                  int v1098 = *v89;
                }
                v1100 += v1104;
                ++v1099;
                v1103 += 4 * (int)v378;
                v1102 += v1105;
              }
              while (v1099 < v1098);
            }
          }
          else
          {
            unint64_t v2051 = v87[6];
            if (v2051)
            {
              unint64_t v2080 = 0;
              uint64_t v1986 = v261[19];
              uint64_t v2001 = v88[19];
              uint64_t v1636 = v87[19];
              do
              {
                uint64_t v1637 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1638 = v88[3];
                  uint64_t v1639 = v91;
                  int v1640 = v2080;
                  do
                  {
                    ldiv_t v1641 = ldiv(v1640, v89[v1639]);
                    int v1640 = v1641.quot;
                    v1637 += *(void *)(v1638 + 8 * v1639--) * v1641.rem;
                  }
                  while (v1639 != -1);
                }
                uint64_t v1642 = v2091;
                if ((v2091 & 0x80000000) != 0)
                {
                  LODWORD(v1643) = 0;
                }
                else
                {
                  uint64_t v1643 = 0;
                  uint64_t v1644 = v261[3];
                  int v1645 = v2080;
                  do
                  {
                    ldiv_t v1646 = ldiv(v1645, v262[v1642]);
                    int v1645 = v1646.quot;
                    v1643 += *(void *)(v1644 + 8 * v1642--) * v1646.rem;
                  }
                  while (v1642 != -1);
                }
                uint64_t v91 = v2108;
                if ((int)v378 >= 1)
                {
                  uint64_t v1647 = 0;
                  unsigned int v1648 = *(_DWORD *)(v2001 + 4 * (int)v1637);
                  unsigned int v1649 = v378 + 1;
                  do
                  {
                    unsigned int v1650 = *(_DWORD *)(v1986 + 4 * (int)v1643 + v1647);
                    if (v1648 < v1650) {
                      unsigned int v1650 = v1648;
                    }
                    *(_DWORD *)(v1636 + v1647) = v1650;
                    --v1649;
                    v1647 += 4;
                  }
                  while (v1649 > 1);
                }
                v1636 += 4 * (int)v378;
                v2080 += (int)v378;
              }
              while (v2080 < v2051);
            }
          }
          break;
        case 2:
          if (v94 == 2)
          {
            int v1651 = *v89;
            if (*v89)
            {
              unint64_t v1652 = 0;
              uint64_t v1653 = 0;
              uint64_t v1654 = 0;
              uint64_t v1655 = v88[19];
              uint64_t v1656 = v261[19];
              uint64_t v1657 = v87[19];
              unint64_t v1658 = (uint64_t *)v88[3];
              uint64_t v1659 = *v1658;
              uint64_t v1660 = v1658[1];
              unsigned int v1661 = (uint64_t *)v261[3];
              uint64_t v1662 = *v1661;
              uint64_t v1663 = v1661[1];
              int v1664 = v89[1];
              int v1665 = v1664;
              do
              {
                if (v1665)
                {
                  unint64_t v1666 = 0;
                  uint64_t v1667 = v1655 + 4 * v1654;
                  do
                  {
                    if ((int)v378 >= 1)
                    {
                      uint64_t v1668 = 0;
                      unsigned int v1669 = *(_DWORD *)(v1656 + 4 * v1653);
                      unsigned int v1670 = v378 + 1;
                      do
                      {
                        unsigned int v1671 = *(_DWORD *)(v1667 + v1668);
                        if (v1671 >= v1669) {
                          unsigned int v1671 = v1669;
                        }
                        *(_DWORD *)(v1657 + v1668) = v1671;
                        --v1670;
                        v1668 += 4;
                      }
                      while (v1670 > 1);
                      int v1664 = v89[1];
                    }
                    v1654 += v1660;
                    v1653 += v1663;
                    v1657 += 4 * (int)v378;
                    ++v1666;
                    v1667 += 4 * v1660;
                  }
                  while (v1666 < v1664);
                  uint64_t v1672 = v1664;
                  int v1651 = *v89;
                  int v1665 = v1664;
                }
                else
                {
                  uint64_t v1672 = 0;
                }
                uint64_t v1654 = v1654 + v1659 - v1672 * v1660;
                uint64_t v1653 = v1653 + v1662 - v1663 * v262[1];
                ++v1652;
              }
              while (v1652 < v1651);
            }
          }
          else if (v94 == 1)
          {
            int v1110 = *v89;
            if (*v89)
            {
              unint64_t v1111 = 0;
              uint64_t v1112 = 0;
              uint64_t v1113 = v88[19];
              uint64_t v1114 = v261[19];
              uint64_t v1115 = v87[19];
              uint64_t v1116 = *(void *)v261[3];
              uint64_t v1117 = 4 * *(void *)v88[3];
              do
              {
                if ((int)v378 >= 1)
                {
                  uint64_t v1118 = 0;
                  unsigned int v1119 = *(_DWORD *)(v1114 + 4 * v1112);
                  unsigned int v1120 = v378 + 1;
                  do
                  {
                    unsigned int v1121 = *(_DWORD *)(v1113 + v1118);
                    if (v1121 >= v1119) {
                      unsigned int v1121 = v1119;
                    }
                    *(_DWORD *)(v1115 + v1118) = v1121;
                    --v1120;
                    v1118 += 4;
                  }
                  while (v1120 > 1);
                  int v1110 = *v89;
                }
                v1112 += v1116;
                ++v1111;
                v1115 += 4 * (int)v378;
                v1113 += v1117;
              }
              while (v1111 < v1110);
            }
          }
          else
          {
            unint64_t v2052 = v87[6];
            if (v2052)
            {
              unint64_t v2081 = 0;
              uint64_t v1987 = v261[19];
              uint64_t v2002 = v88[19];
              uint64_t v1673 = v87[19];
              do
              {
                uint64_t v1674 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1675 = v88[3];
                  uint64_t v1676 = v91;
                  int v1677 = v2081;
                  do
                  {
                    ldiv_t v1678 = ldiv(v1677, v89[v1676]);
                    int v1677 = v1678.quot;
                    v1674 += *(void *)(v1675 + 8 * v1676--) * v1678.rem;
                  }
                  while (v1676 != -1);
                }
                uint64_t v1679 = v2091;
                if ((v2091 & 0x80000000) != 0)
                {
                  LODWORD(v1680) = 0;
                }
                else
                {
                  uint64_t v1680 = 0;
                  uint64_t v1681 = v261[3];
                  int v1682 = v2081;
                  do
                  {
                    ldiv_t v1683 = ldiv(v1682, v262[v1679]);
                    int v1682 = v1683.quot;
                    v1680 += *(void *)(v1681 + 8 * v1679--) * v1683.rem;
                  }
                  while (v1679 != -1);
                }
                uint64_t v91 = v2108;
                if ((int)v378 >= 1)
                {
                  uint64_t v1684 = 0;
                  unsigned int v1685 = *(_DWORD *)(v1987 + 4 * (int)v1680);
                  unsigned int v1686 = v378 + 1;
                  do
                  {
                    unsigned int v1687 = *(_DWORD *)(v2002 + 4 * (int)v1674 + v1684);
                    if (v1687 >= v1685) {
                      unsigned int v1687 = v1685;
                    }
                    *(_DWORD *)(v1673 + v1684) = v1687;
                    --v1686;
                    v1684 += 4;
                  }
                  while (v1686 > 1);
                }
                v1673 += 4 * (int)v378;
                v2081 += (int)v378;
              }
              while (v2081 < v2052);
            }
          }
          break;
        case 3:
          if (v94 == 2)
          {
            int v1286 = *v89;
            if (*v89)
            {
              unint64_t v1287 = 0;
              uint64_t v1288 = 0;
              uint64_t v1289 = 0;
              uint64_t v1290 = v88[19];
              uint64_t v1291 = v261[19];
              uint64_t v1292 = v87[19];
              int v1293 = (uint64_t *)v88[3];
              uint64_t v1294 = *v1293;
              uint64_t v1295 = v1293[1];
              uint64_t v1296 = (uint64_t *)v261[3];
              uint64_t v1297 = *v1296;
              uint64_t v1298 = v1296[1];
              int v1299 = v89[1];
              int v1300 = v1299;
              do
              {
                if (v1300)
                {
                  unint64_t v1301 = 0;
                  uint64_t v1302 = v1291 + 4 * v1288;
                  uint64_t v1303 = v1290 + 4 * v1289;
                  do
                  {
                    if ((int)v378 >= 1)
                    {
                      uint64_t v1304 = 0;
                      unsigned int v1305 = v378 + 1;
                      do
                      {
                        unsigned int v1306 = *(_DWORD *)(v1303 + v1304);
                        if (v1306 >= *(_DWORD *)(v1302 + v1304)) {
                          unsigned int v1306 = *(_DWORD *)(v1302 + v1304);
                        }
                        *(_DWORD *)(v1292 + v1304) = v1306;
                        --v1305;
                        v1304 += 4;
                      }
                      while (v1305 > 1);
                      int v1299 = v89[1];
                    }
                    v1289 += v1295;
                    v1288 += v1298;
                    v1292 += 4 * (int)v378;
                    ++v1301;
                    v1302 += 4 * v1298;
                    v1303 += 4 * v1295;
                  }
                  while (v1301 < v1299);
                  uint64_t v1307 = v1299;
                  int v1286 = *v89;
                  int v1300 = v1299;
                }
                else
                {
                  uint64_t v1307 = 0;
                }
                uint64_t v1289 = v1289 + v1294 - v1307 * v1295;
                uint64_t v1288 = v1288 + v1297 - v1298 * v262[1];
                ++v1287;
              }
              while (v1287 < v1286);
            }
          }
          else if (v94 == 1)
          {
            int v379 = *v89;
            if (*v89)
            {
              unint64_t v380 = 0;
              uint64_t v381 = v88[19];
              uint64_t v382 = v261[19];
              uint64_t v383 = v87[19];
              uint64_t v384 = 4 * *(void *)v261[3];
              uint64_t v385 = 4 * *(void *)v88[3];
              do
              {
                if ((int)v378 >= 1)
                {
                  uint64_t v386 = 0;
                  unsigned int v387 = v378 + 1;
                  do
                  {
                    unsigned int v388 = *(_DWORD *)(v381 + v386);
                    if (v388 >= *(_DWORD *)(v382 + v386)) {
                      unsigned int v388 = *(_DWORD *)(v382 + v386);
                    }
                    *(_DWORD *)(v383 + v386) = v388;
                    --v387;
                    v386 += 4;
                  }
                  while (v387 > 1);
                  int v379 = *v89;
                }
                ++v380;
                v383 += 4 * (int)v378;
                v382 += v384;
                v381 += v385;
              }
              while (v380 < v379);
            }
          }
          else
          {
            unint64_t v2042 = v87[6];
            if (v2042)
            {
              unint64_t v2071 = 0;
              uint64_t v1982 = v261[19];
              uint64_t v1995 = v88[19];
              uint64_t v1308 = v87[19];
              do
              {
                uint64_t v1309 = 0;
                if ((v91 & 0x80000000) == 0)
                {
                  uint64_t v1310 = v88[3];
                  uint64_t v1311 = v91;
                  int v1312 = v2071;
                  do
                  {
                    ldiv_t v1313 = ldiv(v1312, v89[v1311]);
                    int v1312 = v1313.quot;
                    v1309 += *(void *)(v1310 + 8 * v1311--) * v1313.rem;
                  }
                  while (v1311 != -1);
                }
                uint64_t v1314 = v2091;
                if ((v2091 & 0x80000000) != 0)
                {
                  LODWORD(v1315) = 0;
                }
                else
                {
                  uint64_t v1315 = 0;
                  uint64_t v1316 = v261[3];
                  int v1317 = v2071;
                  do
                  {
                    ldiv_t v1318 = ldiv(v1317, v262[v1314]);
                    int v1317 = v1318.quot;
                    v1315 += *(void *)(v1316 + 8 * v1314--) * v1318.rem;
                  }
                  while (v1314 != -1);
                }
                uint64_t v91 = v2108;
                if ((int)v378 >= 1)
                {
                  uint64_t v1319 = 0;
                  uint64_t v1320 = v1982 + 4 * (int)v1315;
                  unsigned int v1321 = v378 + 1;
                  do
                  {
                    unsigned int v1322 = *(_DWORD *)(v1995 + 4 * (int)v1309 + v1319);
                    if (v1322 >= *(_DWORD *)(v1320 + v1319)) {
                      unsigned int v1322 = *(_DWORD *)(v1320 + v1319);
                    }
                    *(_DWORD *)(v1308 + v1319) = v1322;
                    --v1321;
                    v1319 += 4;
                  }
                  while (v1321 > 1);
                }
                v1308 += 4 * (int)v378;
                v2071 += (int)v378;
              }
              while (v2071 < v2042);
            }
          }
          break;
        default:
LABEL_460:
          switch(v374)
          {
            case 1uLL:
              uint64_t v389 = v87[6];
              if (v389)
              {
                int v390 = (int *)v88[19];
                unint64_t v391 = (int *)v261[19];
                int v392 = (_DWORD *)v87[19];
                uint64_t v393 = 4 * *(void *)v261[3];
                uint64_t v394 = 4 * *(void *)v88[3];
                do
                {
                  int v395 = *v390;
                  if (*v390 >= *v391) {
                    int v395 = *v391;
                  }
                  *v392++ = v395;
                  unint64_t v391 = (int *)((char *)v391 + v393);
                  int v390 = (int *)((char *)v390 + v394);
                  --v389;
                }
                while (v389);
              }
              break;
            case 2uLL:
              int v654 = *v89;
              if (*v89)
              {
                unint64_t v655 = 0;
                uint64_t v656 = 0;
                uint64_t v657 = 0;
                uint64_t v658 = 0;
                uint64_t v659 = v88[19];
                uint64_t v660 = v261[19];
                uint64_t v661 = v87[19];
                uint64_t v662 = (uint64_t *)v88[3];
                uint64_t v663 = *v662;
                uint64_t v664 = v662[1];
                unsigned int v665 = (uint64_t *)v261[3];
                uint64_t v667 = *v665;
                uint64_t v666 = v665[1];
                int v668 = v89[1];
                do
                {
                  if (v668)
                  {
                    for (unint64_t i = 0; i < v668; ++i)
                    {
                      unsigned int v670 = *(_DWORD *)(v659 + 4 * v658);
                      if (v670 >= *(_DWORD *)(v660 + 4 * v657)) {
                        unsigned int v670 = *(_DWORD *)(v660 + 4 * v657);
                      }
                      *(_DWORD *)(v661 + 4 * v656 + 4 * i) = v670;
                      v658 += v664;
                      v657 += v666;
                      int v668 = v89[1];
                    }
                    uint64_t v671 = v668;
                    int v654 = *v89;
                    v656 += i;
                  }
                  else
                  {
                    uint64_t v671 = 0;
                  }
                  uint64_t v658 = v658 + v663 - v671 * v664;
                  uint64_t v657 = v657 + v667 - v666 * v262[1];
                  ++v655;
                }
                while (v655 < v654);
              }
              break;
            case 3uLL:
              int v672 = *v89;
              if (*v89)
              {
                unint64_t v673 = 0;
                uint64_t v674 = 0;
                uint64_t v675 = 0;
                uint64_t v676 = 0;
                uint64_t v677 = v88[19];
                uint64_t v678 = v261[19];
                uint64_t v679 = v87[19];
                uint64_t v680 = (uint64_t *)v88[3];
                uint64_t v681 = *v680;
                uint64_t v682 = v680[1];
                unint64_t v683 = (uint64_t *)v261[3];
                uint64_t v684 = *v683;
                uint64_t v685 = v683[1];
                int v686 = v89[1];
                int v687 = v686;
                do
                {
                  if (v687)
                  {
                    unint64_t v688 = 0;
                    uint64_t v689 = v680[2];
                    uint64_t v690 = v683[2];
                    int v691 = v89[2];
                    do
                    {
                      if (v691)
                      {
                        for (unint64_t j = 0; j < v691; ++j)
                        {
                          unsigned int v693 = *(_DWORD *)(v677 + 4 * v676);
                          if (v693 >= *(_DWORD *)(v678 + 4 * v675)) {
                            unsigned int v693 = *(_DWORD *)(v678 + 4 * v675);
                          }
                          *(_DWORD *)(v679 + 4 * v674 + 4 * j) = v693;
                          v676 += v689;
                          v675 += v690;
                          int v691 = v89[2];
                        }
                        uint64_t v694 = v691;
                        int v686 = v89[1];
                        v674 += j;
                      }
                      else
                      {
                        uint64_t v694 = 0;
                      }
                      uint64_t v676 = v676 + v682 - v694 * v689;
                      uint64_t v675 = v675 + v685 - v690 * v262[2];
                      ++v688;
                    }
                    while (v688 < v686);
                    uint64_t v695 = v686;
                    int v672 = *v89;
                    int v687 = v686;
                  }
                  else
                  {
                    uint64_t v695 = 0;
                  }
                  uint64_t v676 = v676 + v681 - v695 * v682;
                  uint64_t v675 = v675 + v684 - v685 * v262[1];
                  ++v673;
                }
                while (v673 < v672);
              }
              break;
            case 4uLL:
              int v696 = *v89;
              if (*v89)
              {
                unint64_t v697 = 0;
                uint64_t v698 = 0;
                uint64_t v699 = 0;
                uint64_t v700 = 0;
                uint64_t v701 = v88[19];
                uint64_t v702 = v261[19];
                uint64_t v703 = v87[19];
                uint64_t v704 = (uint64_t *)v88[3];
                uint64_t v705 = *v704;
                uint64_t v706 = v704[1];
                unint64_t v707 = (uint64_t *)v261[3];
                uint64_t v708 = *v707;
                uint64_t v709 = v707[1];
                int v710 = v89[1];
                int v711 = v710;
                do
                {
                  if (v711)
                  {
                    unint64_t v712 = 0;
                    uint64_t v713 = v704[2];
                    uint64_t v714 = v707[2];
                    int v715 = v89[2];
                    int v716 = v715;
                    do
                    {
                      if (v716)
                      {
                        unint64_t v717 = 0;
                        uint64_t v718 = v704[3];
                        uint64_t v719 = v707[3];
                        int v720 = v89[3];
                        do
                        {
                          if (v720)
                          {
                            for (unint64_t k = 0; k < v720; ++k)
                            {
                              unsigned int v722 = *(_DWORD *)(v701 + 4 * v700);
                              if (v722 >= *(_DWORD *)(v702 + 4 * v699)) {
                                unsigned int v722 = *(_DWORD *)(v702 + 4 * v699);
                              }
                              *(_DWORD *)(v703 + 4 * v698 + 4 * k) = v722;
                              v700 += v718;
                              v699 += v719;
                              int v720 = v89[3];
                            }
                            uint64_t v723 = v720;
                            int v715 = v89[2];
                            v698 += k;
                          }
                          else
                          {
                            uint64_t v723 = 0;
                          }
                          uint64_t v700 = v700 + v713 - v723 * v718;
                          uint64_t v699 = v699 + v714 - v719 * v262[3];
                          ++v717;
                        }
                        while (v717 < v715);
                        uint64_t v724 = v715;
                        int v710 = v89[1];
                        int v716 = v715;
                      }
                      else
                      {
                        uint64_t v724 = 0;
                      }
                      uint64_t v700 = v700 + v706 - v724 * v713;
                      uint64_t v699 = v699 + v709 - v714 * v262[2];
                      ++v712;
                    }
                    while (v712 < v710);
                    uint64_t v725 = v710;
                    int v696 = *v89;
                    int v711 = v710;
                  }
                  else
                  {
                    uint64_t v725 = 0;
                  }
                  uint64_t v700 = v700 + v705 - v725 * v706;
                  uint64_t v699 = v699 + v708 - v709 * v262[1];
                  ++v697;
                }
                while (v697 < v696);
              }
              break;
            default:
              uint64_t v641 = v87[6];
              if (v641)
              {
                uint64_t v642 = 0;
                uint64_t v2034 = v261[19];
                uint64_t v2063 = v88[19];
                uint64_t v2021 = v87[19];
                do
                {
                  uint64_t v643 = 0;
                  if ((v91 & 0x80000000) == 0)
                  {
                    uint64_t v644 = v88[3];
                    uint64_t v645 = v91;
                    int v646 = v642;
                    do
                    {
                      ldiv_t v647 = ldiv(v646, v89[v645]);
                      int v646 = v647.quot;
                      v643 += *(void *)(v644 + 8 * v645--) * v647.rem;
                    }
                    while (v645 != -1);
                  }
                  uint64_t v648 = v2091;
                  if ((v2091 & 0x80000000) != 0)
                  {
                    LODWORD(v649) = 0;
                  }
                  else
                  {
                    uint64_t v649 = 0;
                    uint64_t v650 = v261[3];
                    int v651 = v642;
                    do
                    {
                      ldiv_t v652 = ldiv(v651, v262[v648]);
                      int v651 = v652.quot;
                      v649 += *(void *)(v650 + 8 * v648--) * v652.rem;
                    }
                    while (v648 != -1);
                  }
                  unsigned int v653 = *(_DWORD *)(v2063 + 4 * (int)v643);
                  if (v653 >= *(_DWORD *)(v2034 + 4 * (int)v649)) {
                    unsigned int v653 = *(_DWORD *)(v2034 + 4 * (int)v649);
                  }
                  *(_DWORD *)(v2021 + 4 * v642++) = v653;
                  uint64_t v91 = v2108;
                }
                while (v642 != v641);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v12)
      {
        case 0:
          unsigned int v8 = **(char **)(*a1 + 152);
          if ((int)v8 >= **(char **)(*a2 + 152)) {
            LOBYTE(v8) = **(unsigned char **)(*a2 + 152);
          }
LABEL_18:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v127 = *(_DWORD *)(*a2 + 160);
          if (v127 >= 1)
          {
            int v128 = *(unsigned char **)(*(void *)a3 + 152);
            char v129 = *(char **)(*a2 + 152);
            unsigned int v130 = v127 + 1;
            int v131 = **(char **)(*a1 + 152);
            do
            {
              int v133 = *v129++;
              char v132 = v133;
              if (v131 < v133) {
                char v132 = v131;
              }
              *v128++ = v132;
              --v130;
            }
            while (v130 > 1);
          }
          return;
        case 2:
          int v134 = *(_DWORD *)(*a1 + 160);
          if (v134 >= 1)
          {
            char v135 = **(unsigned char **)(*a2 + 152);
            char v136 = *(unsigned char **)(*(void *)a3 + 152);
            int v137 = *(char **)(*a1 + 152);
            unsigned int v138 = v134 + 1;
            do
            {
              int v140 = *v137++;
              char v139 = v140;
              if (v140 >= v135) {
                char v139 = v135;
              }
              *v136++ = v139;
              --v138;
            }
            while (v138 > 1);
          }
          return;
        case 3:
          int v141 = *(_DWORD *)(*(void *)a3 + 48);
          if (v141 >= 1)
          {
            unsigned int v142 = *(unsigned char **)(*(void *)a3 + 152);
            int v143 = *(char **)(*a2 + 152);
            int v144 = *(char **)(*a1 + 152);
            unsigned int v145 = v141 + 1;
            do
            {
              int v147 = *v144++;
              int v146 = v147;
              int v149 = *v143++;
              char v148 = v149;
              if (v146 >= v149) {
                LOBYTE(v146) = v148;
              }
              *v142++ = v146;
              --v145;
            }
            while (v145 > 1);
          }
          return;
        default:
          uint64_t v119 = *(void **)a3;
          uint64_t v120 = *a1;
          int v121 = *(int **)*a1;
          uint64_t v122 = (*(void *)(*a1 + 8) - (void)v121) >> 2;
          int v123 = v122 - 1;
          if ((int)v122 - 1 >= -1) {
            int v123 = -1;
          }
          int v124 = v123 + 1;
          int v125 = v122 + 1;
          while (1)
          {
            unsigned int v126 = v125 - 2;
            if (v125 - 2 < 0) {
              break;
            }
            --v125;
            if (*(void *)(*(void *)(v120 + 24) + 8 * v126) != *(void *)(v119[3] + 8 * v126)) {
              goto LABEL_240;
            }
          }
          int v125 = v124;
LABEL_240:
          int v269 = (int **)*a2;
          int v270 = *(int **)*a2;
          uint64_t v271 = (*(void *)(*a2 + 8) - (void)v270) >> 2;
          int v272 = v271 - 1;
          if ((int)v271 - 1 >= -1) {
            int v272 = -1;
          }
          int v273 = v272 + 1;
          int v274 = v271 + 1;
          while (1)
          {
            unsigned int v275 = v274 - 2;
            if (v274 - 2 < 0) {
              break;
            }
            --v274;
            if (*(void *)&v269[3][2 * v275] != *(void *)(v119[3] + 8 * v275)) {
              goto LABEL_286;
            }
          }
          int v274 = v273;
LABEL_286:
          int v306 = v122 + 1;
          while (1)
          {
            unsigned int v307 = v306 - 2;
            if (v306 - 2 < 0) {
              break;
            }
            --v306;
            if (*(void *)(*(void *)(v120 + 24) + 8 * v307)) {
              goto LABEL_321;
            }
          }
          int v306 = v124;
LABEL_321:
          int v320 = v271 + 1;
          while (1)
          {
            int v321 = v320 - 2;
            if (v320 - 2 < 0) {
              break;
            }
            --v320;
            if (*(void *)&v269[3][2 * v321]) {
              goto LABEL_468;
            }
          }
          int v320 = v273;
LABEL_468:
          unint64_t v396 = (uint64_t)(v119[1] - *v119) >> 2;
          if (v125 <= v274) {
            int v397 = v274;
          }
          else {
            int v397 = v125;
          }
          if (v125 <= v320) {
            int v125 = v320;
          }
          if (v306 > v274) {
            int v274 = v306;
          }
          if (v396 > v274)
          {
            int v398 = 1;
          }
          else
          {
            int v274 = (uint64_t)(v119[1] - *v119) >> 2;
            int v398 = 4;
          }
          if (v396 > v125)
          {
            int v399 = 2;
          }
          else
          {
            int v125 = v274;
            int v399 = v398;
          }
          if (v396 > v397)
          {
            int v125 = v397;
            int v399 = 3;
          }
          if (!v125) {
            goto LABEL_500;
          }
          unint64_t v400 = *(void *)(v119[3] + 8 * (v125 - 1));
          if (v400 < 0x10) {
            goto LABEL_500;
          }
          uint64_t v2109 = *(void *)(v119[3] + 8 * (v125 - 1));
          switch(v399)
          {
            case 1:
              if (v125 == 2)
              {
                int v1688 = *v121;
                if (*v121)
                {
                  unint64_t v1689 = 0;
                  uint64_t v1690 = 0;
                  uint64_t v1691 = 0;
                  uint64_t v1692 = *(void *)(v120 + 152);
                  uint64_t v1693 = v269[19];
                  uint64_t v1694 = v119[19];
                  do
                  {
                    if (v121[1])
                    {
                      unint64_t v1695 = 0;
                      do
                      {
                        if ((int)v400 >= 1)
                        {
                          uint64_t v1696 = 0;
                          char v1697 = *(unsigned char *)(v1692 + v1691);
                          unsigned int v1698 = v400 + 1;
                          do
                          {
                            int v1699 = *((char *)v1693 + v1690 + v1696);
                            if (v1697 < v1699) {
                              LOBYTE(v1699) = v1697;
                            }
                            *(unsigned char *)(v1694 + v1696) = v1699;
                            --v1698;
                            ++v1696;
                          }
                          while (v1698 > 1);
                          uint64_t v120 = *a1;
                          int v269 = (int **)*a2;
                          int v121 = *(int **)*a1;
                        }
                        uint64_t v1700 = *(void **)(v120 + 24);
                        uint64_t v1701 = v1700[1];
                        v1691 += v1701;
                        v1690 += *((void *)v269[3] + 1);
                        v1694 += (int)v400;
                        ++v1695;
                        unint64_t v1702 = v121[1];
                      }
                      while (v1695 < v1702);
                      int v1688 = *v121;
                      int v270 = *v269;
                    }
                    else
                    {
                      unint64_t v1702 = 0;
                      uint64_t v1700 = *(void **)(v120 + 24);
                      uint64_t v1701 = v1700[1];
                    }
                    uint64_t v1691 = *v1700 + v1691 - v1702 * v1701;
                    uint64_t v1690 = *(void *)v269[3] + v1690 - *((void *)v269[3] + 1) * v270[1];
                    ++v1689;
                  }
                  while (v1689 < v1688);
                }
              }
              else if (v125 == 1)
              {
                int v1122 = *v121;
                if (*v121)
                {
                  unint64_t v1123 = 0;
                  uint64_t v1124 = 0;
                  uint64_t v1125 = 0;
                  uint64_t v1126 = *(void *)(v120 + 152);
                  int v1127 = v269[19];
                  uint64_t v1128 = v119[19];
                  do
                  {
                    if ((int)v400 >= 1)
                    {
                      uint64_t v1129 = 0;
                      char v1130 = *(unsigned char *)(v1126 + v1125);
                      unsigned int v1131 = v400 + 1;
                      do
                      {
                        int v1132 = *((char *)v1127 + v1124 + v1129);
                        if (v1130 < v1132) {
                          LOBYTE(v1132) = v1130;
                        }
                        *(unsigned char *)(v1128 + v1129) = v1132;
                        --v1131;
                        ++v1129;
                      }
                      while (v1131 > 1);
                      uint64_t v120 = *a1;
                      int v269 = (int **)*a2;
                      int v1122 = **(_DWORD **)*a1;
                    }
                    v1125 += **(void **)(v120 + 24);
                    v1124 += *(void *)v269[3];
                    v1128 += (int)v400;
                    ++v1123;
                  }
                  while (v1123 < v1122);
                }
              }
              else if (v119[6])
              {
                uint64_t v2030 = v269[19];
                uint64_t v2053 = *(void *)(v120 + 152);
                uint64_t v2082 = (int)v400;
                unint64_t v2104 = 0;
                unsigned int v2017 = v400 + 1;
                uint64_t v1703 = v119[19];
                do
                {
                  uint64_t v1704 = *(void *)*a1;
                  unint64_t v1705 = (unint64_t)(*(void *)(*a1 + 8) - v1704) >> 2;
                  uint64_t v1706 = 0;
                  uint64_t v1707 = (v1705 - 1);
                  if ((int)v1705 - 1 >= 0)
                  {
                    uint64_t v1708 = *(void *)(*a1 + 24);
                    int v1709 = v2104;
                    do
                    {
                      ldiv_t v1710 = ldiv(v1709, *(int *)(v1704 + 4 * v1707));
                      int v1709 = v1710.quot;
                      v1706 += *(void *)(v1708 + 8 * v1707--) * v1710.rem;
                    }
                    while (v1707 != -1);
                  }
                  uint64_t v1711 = *(void *)*a2;
                  unint64_t v1712 = (unint64_t)(*(void *)(*a2 + 8) - v1711) >> 2;
                  uint64_t v1713 = 0;
                  uint64_t v1714 = (v1712 - 1);
                  if ((int)v1712 - 1 >= 0)
                  {
                    uint64_t v1715 = *(void *)(*a2 + 24);
                    int v1716 = v2104;
                    do
                    {
                      ldiv_t v1717 = ldiv(v1716, *(int *)(v1711 + 4 * v1714));
                      int v1716 = v1717.quot;
                      v1713 += *(void *)(v1715 + 8 * v1714--) * v1717.rem;
                    }
                    while (v1714 != -1);
                  }
                  if ((int)v2109 >= 1)
                  {
                    uint64_t v1718 = 0;
                    char v1719 = *(unsigned char *)(v2053 + (int)v1706);
                    unsigned int v1720 = v2017;
                    do
                    {
                      int v1721 = *((char *)v2030 + (int)v1713 + v1718);
                      if (v1719 < v1721) {
                        LOBYTE(v1721) = v1719;
                      }
                      *(unsigned char *)(v1703 + v1718) = v1721;
                      --v1720;
                      ++v1718;
                    }
                    while (v1720 > 1);
                    uint64_t v119 = *(void **)a3;
                  }
                  v1703 += v2082;
                  v2104 += v2082;
                }
                while (v2104 < v119[6]);
              }
              break;
            case 2:
              if (v125 == 2)
              {
                int v1722 = *v121;
                if (*v121)
                {
                  unint64_t v1723 = 0;
                  uint64_t v1724 = 0;
                  uint64_t v1725 = 0;
                  uint64_t v1726 = *(void *)(v120 + 152);
                  uint64_t v1727 = v269[19];
                  uint64_t v1728 = v119[19];
                  do
                  {
                    if (v121[1])
                    {
                      unint64_t v1729 = 0;
                      do
                      {
                        if ((int)v400 >= 1)
                        {
                          uint64_t v1730 = 0;
                          char v1731 = *((unsigned char *)v1727 + v1724);
                          unsigned int v1732 = v400 + 1;
                          do
                          {
                            int v1733 = *(char *)(v1726 + v1725 + v1730);
                            if (v1733 >= v1731) {
                              LOBYTE(v1733) = v1731;
                            }
                            *(unsigned char *)(v1728 + v1730) = v1733;
                            --v1732;
                            ++v1730;
                          }
                          while (v1732 > 1);
                          uint64_t v120 = *a1;
                          int v269 = (int **)*a2;
                          int v121 = *(int **)*a1;
                        }
                        uint64_t v1734 = *(void **)(v120 + 24);
                        uint64_t v1735 = v1734[1];
                        v1725 += v1735;
                        v1724 += *((void *)v269[3] + 1);
                        v1728 += (int)v400;
                        ++v1729;
                        unint64_t v1736 = v121[1];
                      }
                      while (v1729 < v1736);
                      int v1722 = *v121;
                      int v270 = *v269;
                    }
                    else
                    {
                      unint64_t v1736 = 0;
                      uint64_t v1734 = *(void **)(v120 + 24);
                      uint64_t v1735 = v1734[1];
                    }
                    uint64_t v1725 = *v1734 + v1725 - v1736 * v1735;
                    uint64_t v1724 = *(void *)v269[3] + v1724 - *((void *)v269[3] + 1) * v270[1];
                    ++v1723;
                  }
                  while (v1723 < v1722);
                }
              }
              else if (v125 == 1)
              {
                int v1133 = *v121;
                if (*v121)
                {
                  unint64_t v1134 = 0;
                  uint64_t v1135 = 0;
                  uint64_t v1136 = 0;
                  uint64_t v1137 = *(void *)(v120 + 152);
                  int v1138 = v269[19];
                  uint64_t v1139 = v119[19];
                  do
                  {
                    if ((int)v400 >= 1)
                    {
                      uint64_t v1140 = 0;
                      char v1141 = *((unsigned char *)v1138 + v1135);
                      unsigned int v1142 = v400 + 1;
                      do
                      {
                        int v1143 = *(char *)(v1137 + v1136 + v1140);
                        if (v1143 >= v1141) {
                          LOBYTE(v1143) = v1141;
                        }
                        *(unsigned char *)(v1139 + v1140) = v1143;
                        --v1142;
                        ++v1140;
                      }
                      while (v1142 > 1);
                      uint64_t v120 = *a1;
                      int v269 = (int **)*a2;
                      int v1133 = **(_DWORD **)*a1;
                    }
                    v1136 += **(void **)(v120 + 24);
                    v1135 += *(void *)v269[3];
                    v1139 += (int)v400;
                    ++v1134;
                  }
                  while (v1134 < v1133);
                }
              }
              else if (v119[6])
              {
                unint64_t v2031 = v269[19];
                uint64_t v2054 = *(void *)(v120 + 152);
                uint64_t v2083 = (int)v400;
                unint64_t v2105 = 0;
                unsigned int v2018 = v400 + 1;
                uint64_t v1737 = v119[19];
                do
                {
                  uint64_t v1738 = *(void *)*a1;
                  unint64_t v1739 = (unint64_t)(*(void *)(*a1 + 8) - v1738) >> 2;
                  uint64_t v1740 = 0;
                  uint64_t v1741 = (v1739 - 1);
                  if ((int)v1739 - 1 >= 0)
                  {
                    uint64_t v1742 = *(void *)(*a1 + 24);
                    int v1743 = v2105;
                    do
                    {
                      ldiv_t v1744 = ldiv(v1743, *(int *)(v1738 + 4 * v1741));
                      int v1743 = v1744.quot;
                      v1740 += *(void *)(v1742 + 8 * v1741--) * v1744.rem;
                    }
                    while (v1741 != -1);
                  }
                  uint64_t v1745 = *(void *)*a2;
                  unint64_t v1746 = (unint64_t)(*(void *)(*a2 + 8) - v1745) >> 2;
                  uint64_t v1747 = 0;
                  uint64_t v1748 = (v1746 - 1);
                  if ((int)v1746 - 1 >= 0)
                  {
                    uint64_t v1749 = *(void *)(*a2 + 24);
                    int v1750 = v2105;
                    do
                    {
                      ldiv_t v1751 = ldiv(v1750, *(int *)(v1745 + 4 * v1748));
                      int v1750 = v1751.quot;
                      v1747 += *(void *)(v1749 + 8 * v1748--) * v1751.rem;
                    }
                    while (v1748 != -1);
                  }
                  if ((int)v2109 >= 1)
                  {
                    uint64_t v1752 = 0;
                    char v1753 = *((unsigned char *)v2031 + (int)v1747);
                    unsigned int v1754 = v2018;
                    do
                    {
                      int v1755 = *(char *)(v2054 + (int)v1740 + v1752);
                      if (v1755 >= v1753) {
                        LOBYTE(v1755) = v1753;
                      }
                      *(unsigned char *)(v1737 + v1752) = v1755;
                      --v1754;
                      ++v1752;
                    }
                    while (v1754 > 1);
                    uint64_t v119 = *(void **)a3;
                  }
                  v1737 += v2083;
                  v2105 += v2083;
                }
                while (v2105 < v119[6]);
              }
              break;
            case 3:
              if (v125 == 2)
              {
                int v1323 = *v121;
                if (*v121)
                {
                  unint64_t v1324 = 0;
                  uint64_t v1325 = 0;
                  uint64_t v1326 = 0;
                  uint64_t v1327 = *(void *)(v120 + 152);
                  uint64_t v1328 = v269[19];
                  uint64_t v1329 = v119[19];
                  do
                  {
                    if (v121[1])
                    {
                      unint64_t v1330 = 0;
                      do
                      {
                        if ((int)v400 >= 1)
                        {
                          uint64_t v1331 = 0;
                          unsigned int v1332 = v400 + 1;
                          do
                          {
                            int v1333 = *(char *)(v1327 + v1326 + v1331);
                            if (v1333 >= *((char *)v1328 + v1325 + v1331)) {
                              LOBYTE(v1333) = *((unsigned char *)v1328 + v1325 + v1331);
                            }
                            *(unsigned char *)(v1329 + v1331) = v1333;
                            --v1332;
                            ++v1331;
                          }
                          while (v1332 > 1);
                          uint64_t v120 = *a1;
                          int v269 = (int **)*a2;
                          int v121 = *(int **)*a1;
                        }
                        uint64_t v1334 = *(void **)(v120 + 24);
                        uint64_t v1335 = v1334[1];
                        v1326 += v1335;
                        v1325 += *((void *)v269[3] + 1);
                        v1329 += (int)v400;
                        ++v1330;
                        unint64_t v1336 = v121[1];
                      }
                      while (v1330 < v1336);
                      int v1323 = *v121;
                      int v270 = *v269;
                    }
                    else
                    {
                      unint64_t v1336 = 0;
                      uint64_t v1334 = *(void **)(v120 + 24);
                      uint64_t v1335 = v1334[1];
                    }
                    uint64_t v1326 = *v1334 + v1326 - v1336 * v1335;
                    uint64_t v1325 = *(void *)v269[3] + v1325 - *((void *)v269[3] + 1) * v270[1];
                    ++v1324;
                  }
                  while (v1324 < v1323);
                }
              }
              else if (v125 == 1)
              {
                int v401 = *v121;
                if (*v121)
                {
                  unint64_t v402 = 0;
                  uint64_t v403 = 0;
                  uint64_t v404 = 0;
                  uint64_t v405 = *(void *)(v120 + 152);
                  unint64_t v406 = v269[19];
                  uint64_t v407 = v119[19];
                  do
                  {
                    if ((int)v400 >= 1)
                    {
                      uint64_t v408 = 0;
                      unsigned int v409 = v400 + 1;
                      do
                      {
                        int v410 = *(char *)(v405 + v404 + v408);
                        if (v410 >= *((char *)v406 + v403 + v408)) {
                          LOBYTE(v410) = *((unsigned char *)v406 + v403 + v408);
                        }
                        *(unsigned char *)(v407 + v408) = v410;
                        --v409;
                        ++v408;
                      }
                      while (v409 > 1);
                      uint64_t v120 = *a1;
                      int v269 = (int **)*a2;
                      int v401 = **(_DWORD **)*a1;
                    }
                    v404 += **(void **)(v120 + 24);
                    v403 += *(void *)v269[3];
                    v407 += (int)v400;
                    ++v402;
                  }
                  while (v402 < v401);
                }
              }
              else if (v119[6])
              {
                uint64_t v2027 = v269[19];
                uint64_t v2043 = *(void *)(v120 + 152);
                uint64_t v2072 = (int)v400;
                unint64_t v2101 = 0;
                unsigned int v2012 = v400 + 1;
                uint64_t v1337 = v119[19];
                do
                {
                  uint64_t v1338 = *(void *)*a1;
                  unint64_t v1339 = (unint64_t)(*(void *)(*a1 + 8) - v1338) >> 2;
                  uint64_t v1340 = 0;
                  uint64_t v1341 = (v1339 - 1);
                  if ((int)v1339 - 1 >= 0)
                  {
                    uint64_t v1342 = *(void *)(*a1 + 24);
                    int v1343 = v2101;
                    do
                    {
                      ldiv_t v1344 = ldiv(v1343, *(int *)(v1338 + 4 * v1341));
                      int v1343 = v1344.quot;
                      v1340 += *(void *)(v1342 + 8 * v1341--) * v1344.rem;
                    }
                    while (v1341 != -1);
                  }
                  uint64_t v1345 = *(void *)*a2;
                  unint64_t v1346 = (unint64_t)(*(void *)(*a2 + 8) - v1345) >> 2;
                  uint64_t v1347 = 0;
                  uint64_t v1348 = (v1346 - 1);
                  if ((int)v1346 - 1 >= 0)
                  {
                    uint64_t v1349 = *(void *)(*a2 + 24);
                    int v1350 = v2101;
                    do
                    {
                      ldiv_t v1351 = ldiv(v1350, *(int *)(v1345 + 4 * v1348));
                      int v1350 = v1351.quot;
                      v1347 += *(void *)(v1349 + 8 * v1348--) * v1351.rem;
                    }
                    while (v1348 != -1);
                  }
                  if ((int)v2109 >= 1)
                  {
                    uint64_t v1352 = 0;
                    unsigned int v1353 = v2012;
                    do
                    {
                      int v1354 = *(char *)(v2043 + (int)v1340 + v1352);
                      if (v1354 >= *((char *)v2027 + (int)v1347 + v1352)) {
                        LOBYTE(v1354) = *((unsigned char *)v2027 + (int)v1347 + v1352);
                      }
                      *(unsigned char *)(v1337 + v1352) = v1354;
                      --v1353;
                      ++v1352;
                    }
                    while (v1353 > 1);
                    uint64_t v119 = *(void **)a3;
                  }
                  v1337 += v2072;
                  v2101 += v2072;
                }
                while (v2101 < v119[6]);
              }
              break;
            default:
LABEL_500:
              switch(v396)
              {
                case 1uLL:
                  if (v119[6])
                  {
                    unint64_t v411 = 0;
                    uint64_t v412 = 0;
                    uint64_t v413 = 0;
                    uint64_t v414 = *(void *)(v120 + 152);
                    int v415 = v269[19];
                    uint64_t v416 = v119[19];
                    do
                    {
                      int v417 = *(char *)(v414 + v413);
                      if (v417 >= *((char *)v415 + v412)) {
                        LOBYTE(v417) = *((unsigned char *)v415 + v412);
                      }
                      *(unsigned char *)(v416 + v411) = v417;
                      v413 += **(void **)(*a1 + 24);
                      v412 += **(void **)(*a2 + 24);
                      ++v411;
                    }
                    while (v411 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v743 = *v121;
                  if (*v121)
                  {
                    unint64_t v744 = 0;
                    uint64_t v745 = 0;
                    uint64_t v746 = 0;
                    uint64_t v747 = 0;
                    uint64_t v748 = *(void *)(v120 + 152);
                    uint64_t v749 = v269[19];
                    uint64_t v750 = v119[19];
                    do
                    {
                      if (v121[1])
                      {
                        unint64_t v751 = 0;
                        do
                        {
                          int v752 = *(char *)(v748 + v747);
                          if (v752 >= *((char *)v749 + v746)) {
                            LOBYTE(v752) = *((unsigned char *)v749 + v746);
                          }
                          *(unsigned char *)(v750 + v745 + v751) = v752;
                          uint64_t v120 = *a1;
                          int v753 = *(void **)(*a1 + 24);
                          uint64_t v754 = v753[1];
                          v747 += v754;
                          int v269 = (int **)*a2;
                          uint64_t v755 = *(int **)(*a2 + 24);
                          uint64_t v756 = *((void *)v755 + 1);
                          v746 += v756;
                          ++v751;
                          int v121 = *(int **)*a1;
                          unint64_t v757 = v121[1];
                        }
                        while (v751 < v757);
                        int v743 = *v121;
                        int v270 = *v269;
                        v745 += v751;
                      }
                      else
                      {
                        unint64_t v757 = 0;
                        int v753 = *(void **)(v120 + 24);
                        uint64_t v754 = v753[1];
                        uint64_t v755 = v269[3];
                        uint64_t v756 = *((void *)v755 + 1);
                      }
                      uint64_t v747 = *v753 + v747 - v757 * v754;
                      uint64_t v746 = *(void *)v755 + v746 - v756 * v270[1];
                      ++v744;
                    }
                    while (v744 < v743);
                  }
                  break;
                case 3uLL:
                  int v758 = *v121;
                  if (*v121)
                  {
                    unint64_t v759 = 0;
                    uint64_t v760 = 0;
                    uint64_t v761 = 0;
                    uint64_t v762 = 0;
                    uint64_t v763 = *(void *)(v120 + 152);
                    uint64_t v764 = v269[19];
                    uint64_t v765 = v119[19];
                    do
                    {
                      if (v121[1])
                      {
                        unint64_t v766 = 0;
                        do
                        {
                          if (v121[2])
                          {
                            unint64_t v767 = 0;
                            do
                            {
                              int v768 = *(char *)(v763 + v762);
                              if (v768 >= *((char *)v764 + v761)) {
                                LOBYTE(v768) = *((unsigned char *)v764 + v761);
                              }
                              *(unsigned char *)(v765 + v760 + v767) = v768;
                              uint64_t v120 = *a1;
                              uint64_t v769 = *(void **)(*a1 + 24);
                              uint64_t v770 = v769[2];
                              v762 += v770;
                              int v269 = (int **)*a2;
                              int v771 = *(int **)(*a2 + 24);
                              uint64_t v772 = *((void *)v771 + 2);
                              v761 += v772;
                              ++v767;
                              int v121 = *(int **)*a1;
                              unint64_t v773 = v121[2];
                            }
                            while (v767 < v773);
                            int v270 = *v269;
                            v760 += v767;
                          }
                          else
                          {
                            unint64_t v773 = 0;
                            uint64_t v769 = *(void **)(v120 + 24);
                            uint64_t v770 = v769[2];
                            int v771 = v269[3];
                            uint64_t v772 = *((void *)v771 + 2);
                          }
                          uint64_t v774 = v769[1];
                          uint64_t v762 = v774 + v762 - v773 * v770;
                          uint64_t v761 = *((void *)v771 + 1) + v761 - v772 * v270[2];
                          ++v766;
                          unint64_t v775 = v121[1];
                        }
                        while (v766 < v775);
                        int v758 = *v121;
                      }
                      else
                      {
                        unint64_t v775 = 0;
                        uint64_t v769 = *(void **)(v120 + 24);
                        uint64_t v774 = v769[1];
                      }
                      uint64_t v762 = *v769 + v762 - v775 * v774;
                      uint64_t v761 = *(void *)v269[3] + v761 - *((void *)v269[3] + 1) * v270[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  int v776 = *v121;
                  if (*v121)
                  {
                    unint64_t v777 = 0;
                    uint64_t v778 = 0;
                    uint64_t v779 = 0;
                    uint64_t v780 = 0;
                    uint64_t v781 = *(void *)(v120 + 152);
                    int v782 = v269[19];
                    uint64_t v783 = v119[19];
                    do
                    {
                      if (v121[1])
                      {
                        unint64_t v784 = 0;
                        do
                        {
                          if (v121[2])
                          {
                            unint64_t v785 = 0;
                            do
                            {
                              if (v121[3])
                              {
                                unint64_t v786 = 0;
                                do
                                {
                                  int v787 = *(char *)(v781 + v780);
                                  if (v787 >= *((char *)v782 + v779)) {
                                    LOBYTE(v787) = *((unsigned char *)v782 + v779);
                                  }
                                  *(unsigned char *)(v783 + v778 + v786) = v787;
                                  uint64_t v120 = *a1;
                                  uint64_t v788 = *(void **)(*a1 + 24);
                                  uint64_t v789 = v788[3];
                                  v780 += v789;
                                  int v269 = (int **)*a2;
                                  unint64_t v790 = *(int **)(*a2 + 24);
                                  uint64_t v791 = *((void *)v790 + 3);
                                  v779 += v791;
                                  ++v786;
                                  int v121 = *(int **)*a1;
                                  unint64_t v792 = v121[3];
                                }
                                while (v786 < v792);
                                int v270 = *v269;
                                v778 += v786;
                              }
                              else
                              {
                                unint64_t v792 = 0;
                                uint64_t v788 = *(void **)(v120 + 24);
                                uint64_t v789 = v788[3];
                                unint64_t v790 = v269[3];
                                uint64_t v791 = *((void *)v790 + 3);
                              }
                              uint64_t v793 = v788[2];
                              uint64_t v780 = v793 + v780 - v792 * v789;
                              uint64_t v779 = *((void *)v790 + 2) + v779 - v791 * v270[3];
                              ++v785;
                              unint64_t v794 = v121[2];
                            }
                            while (v785 < v794);
                          }
                          else
                          {
                            unint64_t v794 = 0;
                            uint64_t v788 = *(void **)(v120 + 24);
                            uint64_t v793 = v788[2];
                          }
                          uint64_t v780 = v788[1] + v780 - v794 * v793;
                          uint64_t v779 = *((void *)v269[3] + 1) + v779 - *((void *)v269[3] + 2) * v270[2];
                          ++v784;
                          unint64_t v795 = v121[1];
                        }
                        while (v784 < v795);
                        int v776 = *v121;
                      }
                      else
                      {
                        unint64_t v795 = 0;
                      }
                      uint64_t v780 = **(void **)(v120 + 24) + v780 - *(void *)(*(void *)(v120 + 24) + 8) * v795;
                      uint64_t v779 = *(void *)v269[3] + v779 - *((void *)v269[3] + 1) * v270[1];
                      ++v777;
                    }
                    while (v777 < v776);
                  }
                  break;
                default:
                  if (v119[6])
                  {
                    unint64_t v726 = 0;
                    unint64_t v2097 = v269[19];
                    uint64_t v2115 = *(void *)(v120 + 152);
                    uint64_t v727 = v119[19];
                    do
                    {
                      uint64_t v728 = *(void *)*a1;
                      unint64_t v729 = (unint64_t)(*(void *)(*a1 + 8) - v728) >> 2;
                      uint64_t v730 = 0;
                      uint64_t v731 = (v729 - 1);
                      if ((int)v729 - 1 >= 0)
                      {
                        uint64_t v732 = *(void *)(*a1 + 24);
                        int v733 = v726;
                        do
                        {
                          ldiv_t v734 = ldiv(v733, *(int *)(v728 + 4 * v731));
                          int v733 = v734.quot;
                          v730 += *(void *)(v732 + 8 * v731--) * v734.rem;
                        }
                        while (v731 != -1);
                      }
                      uint64_t v735 = *(void *)*a2;
                      unint64_t v736 = (unint64_t)(*(void *)(*a2 + 8) - v735) >> 2;
                      uint64_t v737 = 0;
                      uint64_t v738 = (v736 - 1);
                      if ((int)v736 - 1 >= 0)
                      {
                        uint64_t v739 = *(void *)(*a2 + 24);
                        int v740 = v726;
                        do
                        {
                          ldiv_t v741 = ldiv(v740, *(int *)(v735 + 4 * v738));
                          int v740 = v741.quot;
                          v737 += *(void *)(v739 + 8 * v738--) * v741.rem;
                        }
                        while (v738 != -1);
                      }
                      int v742 = *(char *)(v2115 + (int)v730);
                      if (v742 >= *((char *)v2097 + (int)v737)) {
                        LOBYTE(v742) = *((unsigned char *)v2097 + (int)v737);
                      }
                      *(unsigned char *)(v727 + v726++) = v742;
                    }
                    while (v726 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v13)
      {
        case 0:
          unsigned int v11 = **(_DWORD **)(*a1 + 152);
          if ((signed int)v11 >= **(_DWORD **)(*a2 + 152)) {
            unsigned int v11 = **(_DWORD **)(*a2 + 152);
          }
LABEL_22:
          **(_DWORD **)(*(void *)a3 + 152) = v11;
          return;
        case 1:
          int v159 = *(_DWORD *)(*a2 + 160);
          if (v159 >= 1)
          {
            int v160 = **(_DWORD **)(*a1 + 152);
            int v161 = *(_DWORD **)(*(void *)a3 + 152);
            int v162 = *(int **)(*a2 + 152);
            unsigned int v163 = v159 + 1;
            do
            {
              int v165 = *v162++;
              int v164 = v165;
              if (v160 < v165) {
                int v164 = v160;
              }
              *v161++ = v164;
              --v163;
            }
            while (v163 > 1);
          }
          return;
        case 2:
          int v166 = *(_DWORD *)(*a1 + 160);
          if (v166 >= 1)
          {
            int v167 = **(_DWORD **)(*a2 + 152);
            int v168 = *(_DWORD **)(*(void *)a3 + 152);
            int v169 = *(int **)(*a1 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              int v172 = *v169++;
              int v171 = v172;
              if (v172 >= v167) {
                int v171 = v167;
              }
              *v168++ = v171;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 3:
          int v173 = *(_DWORD *)(*(void *)a3 + 48);
          if (v173 >= 1)
          {
            unsigned int v174 = *(_DWORD **)(*(void *)a3 + 152);
            int v175 = *(int **)(*a2 + 152);
            int v176 = *(int **)(*a1 + 152);
            unsigned int v177 = v173 + 1;
            do
            {
              int v179 = *v176++;
              int v178 = v179;
              int v181 = *v175++;
              int v180 = v181;
              if (v178 >= v181) {
                int v178 = v180;
              }
              *v174++ = v178;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        default:
          uint64_t v150 = *(void **)a3;
          uint64_t v151 = (void *)*a1;
          int v152 = *(int **)*a1;
          uint64_t v153 = (v151[1] - (void)v152) >> 2;
          uint64_t v154 = (v153 - 1);
          if ((int)v154 >= -1) {
            int v155 = -1;
          }
          else {
            int v155 = v153 - 1;
          }
          int v156 = v155 + 1;
          int v157 = v153 + 1;
          while (1)
          {
            unsigned int v158 = v157 - 2;
            if (v157 - 2 < 0) {
              break;
            }
            --v157;
            if (*(void *)(v151[3] + 8 * v158) != *(void *)(v150[3] + 8 * v158)) {
              goto LABEL_247;
            }
          }
          int v157 = v156;
LABEL_247:
          uint64_t v276 = (void *)*a2;
          int v277 = *(int **)*a2;
          uint64_t v278 = (v276[1] - (void)v277) >> 2;
          uint64_t v279 = (v278 - 1);
          if ((int)v279 >= -1) {
            int v280 = -1;
          }
          else {
            int v280 = v278 - 1;
          }
          int v281 = v280 + 1;
          int v282 = v278 + 1;
          while (1)
          {
            unsigned int v283 = v282 - 2;
            if (v282 - 2 < 0) {
              break;
            }
            --v282;
            if (*(void *)(v276[3] + 8 * v283) != *(void *)(v150[3] + 8 * v283)) {
              goto LABEL_291;
            }
          }
          int v282 = v281;
LABEL_291:
          int v308 = v153 + 1;
          while (1)
          {
            unsigned int v309 = v308 - 2;
            if (v308 - 2 < 0) {
              break;
            }
            --v308;
            if (*(void *)(v151[3] + 8 * v309)) {
              goto LABEL_326;
            }
          }
          int v308 = v156;
LABEL_326:
          int v322 = v278 + 1;
          while (1)
          {
            unsigned int v323 = v322 - 2;
            if (v322 - 2 < 0) {
              break;
            }
            --v322;
            if (*(void *)(v276[3] + 8 * v323)) {
              goto LABEL_508;
            }
          }
          int v322 = v281;
LABEL_508:
          unint64_t v418 = (uint64_t)(v150[1] - *v150) >> 2;
          if (v157 <= v282) {
            int v419 = v282;
          }
          else {
            int v419 = v157;
          }
          if (v157 <= v322) {
            int v157 = v322;
          }
          if (v308 > v282) {
            int v282 = v308;
          }
          if (v418 > v282)
          {
            int v420 = 1;
          }
          else
          {
            int v282 = (uint64_t)(v150[1] - *v150) >> 2;
            int v420 = 4;
          }
          if (v418 > v157)
          {
            int v421 = 2;
          }
          else
          {
            int v157 = v282;
            int v421 = v420;
          }
          if (v418 > v419)
          {
            int v157 = v419;
            int v421 = 3;
          }
          uint64_t v2092 = v279;
          uint64_t v2110 = v154;
          if (!v157) {
            goto LABEL_540;
          }
          unint64_t v422 = *(void *)(v150[3] + 8 * (v157 - 1));
          if (v422 < 0x10) {
            goto LABEL_540;
          }
          switch(v421)
          {
            case 1:
              if (v157 == 2)
              {
                int v1756 = *v152;
                if (*v152)
                {
                  unint64_t v1757 = 0;
                  uint64_t v1758 = 0;
                  uint64_t v1759 = 0;
                  uint64_t v1760 = v151[19];
                  uint64_t v1761 = v276[19];
                  uint64_t v1762 = v150[19];
                  unint64_t v1763 = (uint64_t *)v151[3];
                  uint64_t v1764 = *v1763;
                  uint64_t v1765 = v1763[1];
                  int v1766 = (uint64_t *)v276[3];
                  uint64_t v1767 = *v1766;
                  uint64_t v1768 = v1766[1];
                  int v1769 = v152[1];
                  int v1770 = v1769;
                  do
                  {
                    if (v1770)
                    {
                      unint64_t v1771 = 0;
                      uint64_t v1772 = v1761 + 4 * v1758;
                      do
                      {
                        if ((int)v422 >= 1)
                        {
                          uint64_t v1773 = 0;
                          int v1774 = *(_DWORD *)(v1760 + 4 * v1759);
                          unsigned int v1775 = v422 + 1;
                          do
                          {
                            int v1776 = *(_DWORD *)(v1772 + v1773);
                            if (v1774 < v1776) {
                              int v1776 = v1774;
                            }
                            *(_DWORD *)(v1762 + v1773) = v1776;
                            --v1775;
                            v1773 += 4;
                          }
                          while (v1775 > 1);
                          int v1769 = v152[1];
                        }
                        v1759 += v1765;
                        v1758 += v1768;
                        v1762 += 4 * (int)v422;
                        ++v1771;
                        v1772 += 4 * v1768;
                      }
                      while (v1771 < v1769);
                      uint64_t v1777 = v1769;
                      int v1756 = *v152;
                      int v1770 = v1769;
                    }
                    else
                    {
                      uint64_t v1777 = 0;
                    }
                    uint64_t v1759 = v1759 + v1764 - v1777 * v1765;
                    uint64_t v1758 = v1758 + v1767 - v1768 * v277[1];
                    ++v1757;
                  }
                  while (v1757 < v1756);
                }
              }
              else if (v157 == 1)
              {
                int v1144 = *v152;
                if (*v152)
                {
                  unint64_t v1145 = 0;
                  uint64_t v1146 = 0;
                  uint64_t v1147 = v151[19];
                  uint64_t v1148 = v276[19];
                  uint64_t v1149 = v150[19];
                  uint64_t v1150 = *(void *)v151[3];
                  uint64_t v1151 = 4 * *(void *)v276[3];
                  do
                  {
                    if ((int)v422 >= 1)
                    {
                      uint64_t v1152 = 0;
                      int v1153 = *(_DWORD *)(v1147 + 4 * v1146);
                      unsigned int v1154 = v422 + 1;
                      do
                      {
                        int v1155 = *(_DWORD *)(v1148 + v1152);
                        if (v1153 < v1155) {
                          int v1155 = v1153;
                        }
                        *(_DWORD *)(v1149 + v1152) = v1155;
                        --v1154;
                        v1152 += 4;
                      }
                      while (v1154 > 1);
                      int v1144 = *v152;
                    }
                    v1146 += v1150;
                    ++v1145;
                    v1149 += 4 * (int)v422;
                    v1148 += v1151;
                  }
                  while (v1145 < v1144);
                }
              }
              else
              {
                unint64_t v2055 = v150[6];
                if (v2055)
                {
                  unint64_t v2084 = 0;
                  uint64_t v1988 = v276[19];
                  uint64_t v2003 = v151[19];
                  uint64_t v1778 = v150[19];
                  do
                  {
                    uint64_t v1779 = 0;
                    if ((v154 & 0x80000000) == 0)
                    {
                      uint64_t v1780 = v151[3];
                      uint64_t v1781 = v154;
                      int v1782 = v2084;
                      do
                      {
                        ldiv_t v1783 = ldiv(v1782, v152[v1781]);
                        int v1782 = v1783.quot;
                        v1779 += *(void *)(v1780 + 8 * v1781--) * v1783.rem;
                      }
                      while (v1781 != -1);
                    }
                    uint64_t v1784 = v2092;
                    if ((v2092 & 0x80000000) != 0)
                    {
                      LODWORD(v1785) = 0;
                    }
                    else
                    {
                      uint64_t v1785 = 0;
                      uint64_t v1786 = v276[3];
                      int v1787 = v2084;
                      do
                      {
                        ldiv_t v1788 = ldiv(v1787, v277[v1784]);
                        int v1787 = v1788.quot;
                        v1785 += *(void *)(v1786 + 8 * v1784--) * v1788.rem;
                      }
                      while (v1784 != -1);
                    }
                    uint64_t v154 = v2110;
                    if ((int)v422 >= 1)
                    {
                      uint64_t v1789 = 0;
                      int v1790 = *(_DWORD *)(v2003 + 4 * (int)v1779);
                      unsigned int v1791 = v422 + 1;
                      do
                      {
                        int v1792 = *(_DWORD *)(v1988 + 4 * (int)v1785 + v1789);
                        if (v1790 < v1792) {
                          int v1792 = v1790;
                        }
                        *(_DWORD *)(v1778 + v1789) = v1792;
                        --v1791;
                        v1789 += 4;
                      }
                      while (v1791 > 1);
                    }
                    v1778 += 4 * (int)v422;
                    v2084 += (int)v422;
                  }
                  while (v2084 < v2055);
                }
              }
              break;
            case 2:
              if (v157 == 2)
              {
                int v1793 = *v152;
                if (*v152)
                {
                  unint64_t v1794 = 0;
                  uint64_t v1795 = 0;
                  uint64_t v1796 = 0;
                  uint64_t v1797 = v151[19];
                  uint64_t v1798 = v276[19];
                  uint64_t v1799 = v150[19];
                  unint64_t v1800 = (uint64_t *)v151[3];
                  uint64_t v1801 = *v1800;
                  uint64_t v1802 = v1800[1];
                  int v1803 = (uint64_t *)v276[3];
                  uint64_t v1804 = *v1803;
                  uint64_t v1805 = v1803[1];
                  int v1806 = v152[1];
                  int v1807 = v1806;
                  do
                  {
                    if (v1807)
                    {
                      unint64_t v1808 = 0;
                      uint64_t v1809 = v1797 + 4 * v1796;
                      do
                      {
                        if ((int)v422 >= 1)
                        {
                          uint64_t v1810 = 0;
                          int v1811 = *(_DWORD *)(v1798 + 4 * v1795);
                          unsigned int v1812 = v422 + 1;
                          do
                          {
                            int v1813 = *(_DWORD *)(v1809 + v1810);
                            if (v1813 >= v1811) {
                              int v1813 = v1811;
                            }
                            *(_DWORD *)(v1799 + v1810) = v1813;
                            --v1812;
                            v1810 += 4;
                          }
                          while (v1812 > 1);
                          int v1806 = v152[1];
                        }
                        v1796 += v1802;
                        v1795 += v1805;
                        v1799 += 4 * (int)v422;
                        ++v1808;
                        v1809 += 4 * v1802;
                      }
                      while (v1808 < v1806);
                      uint64_t v1814 = v1806;
                      int v1793 = *v152;
                      int v1807 = v1806;
                    }
                    else
                    {
                      uint64_t v1814 = 0;
                    }
                    uint64_t v1796 = v1796 + v1801 - v1814 * v1802;
                    uint64_t v1795 = v1795 + v1804 - v1805 * v277[1];
                    ++v1794;
                  }
                  while (v1794 < v1793);
                }
              }
              else if (v157 == 1)
              {
                int v1156 = *v152;
                if (*v152)
                {
                  unint64_t v1157 = 0;
                  uint64_t v1158 = 0;
                  uint64_t v1159 = v151[19];
                  uint64_t v1160 = v276[19];
                  uint64_t v1161 = v150[19];
                  uint64_t v1162 = *(void *)v276[3];
                  uint64_t v1163 = 4 * *(void *)v151[3];
                  do
                  {
                    if ((int)v422 >= 1)
                    {
                      uint64_t v1164 = 0;
                      int v1165 = *(_DWORD *)(v1160 + 4 * v1158);
                      unsigned int v1166 = v422 + 1;
                      do
                      {
                        int v1167 = *(_DWORD *)(v1159 + v1164);
                        if (v1167 >= v1165) {
                          int v1167 = v1165;
                        }
                        *(_DWORD *)(v1161 + v1164) = v1167;
                        --v1166;
                        v1164 += 4;
                      }
                      while (v1166 > 1);
                      int v1156 = *v152;
                    }
                    v1158 += v1162;
                    ++v1157;
                    v1161 += 4 * (int)v422;
                    v1159 += v1163;
                  }
                  while (v1157 < v1156);
                }
              }
              else
              {
                unint64_t v2056 = v150[6];
                if (v2056)
                {
                  unint64_t v2085 = 0;
                  uint64_t v1989 = v276[19];
                  uint64_t v2004 = v151[19];
                  uint64_t v1815 = v150[19];
                  do
                  {
                    uint64_t v1816 = 0;
                    if ((v154 & 0x80000000) == 0)
                    {
                      uint64_t v1817 = v151[3];
                      uint64_t v1818 = v154;
                      int v1819 = v2085;
                      do
                      {
                        ldiv_t v1820 = ldiv(v1819, v152[v1818]);
                        int v1819 = v1820.quot;
                        v1816 += *(void *)(v1817 + 8 * v1818--) * v1820.rem;
                      }
                      while (v1818 != -1);
                    }
                    uint64_t v1821 = v2092;
                    if ((v2092 & 0x80000000) != 0)
                    {
                      LODWORD(v1822) = 0;
                    }
                    else
                    {
                      uint64_t v1822 = 0;
                      uint64_t v1823 = v276[3];
                      int v1824 = v2085;
                      do
                      {
                        ldiv_t v1825 = ldiv(v1824, v277[v1821]);
                        int v1824 = v1825.quot;
                        v1822 += *(void *)(v1823 + 8 * v1821--) * v1825.rem;
                      }
                      while (v1821 != -1);
                    }
                    uint64_t v154 = v2110;
                    if ((int)v422 >= 1)
                    {
                      uint64_t v1826 = 0;
                      int v1827 = *(_DWORD *)(v1989 + 4 * (int)v1822);
                      unsigned int v1828 = v422 + 1;
                      do
                      {
                        int v1829 = *(_DWORD *)(v2004 + 4 * (int)v1816 + v1826);
                        if (v1829 >= v1827) {
                          int v1829 = v1827;
                        }
                        *(_DWORD *)(v1815 + v1826) = v1829;
                        --v1828;
                        v1826 += 4;
                      }
                      while (v1828 > 1);
                    }
                    v1815 += 4 * (int)v422;
                    v2085 += (int)v422;
                  }
                  while (v2085 < v2056);
                }
              }
              break;
            case 3:
              if (v157 == 2)
              {
                int v1355 = *v152;
                if (*v152)
                {
                  unint64_t v1356 = 0;
                  uint64_t v1357 = 0;
                  uint64_t v1358 = 0;
                  uint64_t v1359 = v151[19];
                  uint64_t v1360 = v276[19];
                  uint64_t v1361 = v150[19];
                  int v1362 = (uint64_t *)v151[3];
                  uint64_t v1363 = *v1362;
                  uint64_t v1364 = v1362[1];
                  uint64_t v1365 = (uint64_t *)v276[3];
                  uint64_t v1366 = *v1365;
                  uint64_t v1367 = v1365[1];
                  int v1368 = v152[1];
                  int v1369 = v1368;
                  do
                  {
                    if (v1369)
                    {
                      unint64_t v1370 = 0;
                      uint64_t v1371 = v1360 + 4 * v1357;
                      uint64_t v1372 = v1359 + 4 * v1358;
                      do
                      {
                        if ((int)v422 >= 1)
                        {
                          uint64_t v1373 = 0;
                          unsigned int v1374 = v422 + 1;
                          do
                          {
                            int v1375 = *(_DWORD *)(v1372 + v1373);
                            if (v1375 >= *(_DWORD *)(v1371 + v1373)) {
                              int v1375 = *(_DWORD *)(v1371 + v1373);
                            }
                            *(_DWORD *)(v1361 + v1373) = v1375;
                            --v1374;
                            v1373 += 4;
                          }
                          while (v1374 > 1);
                          int v1368 = v152[1];
                        }
                        v1358 += v1364;
                        v1357 += v1367;
                        v1361 += 4 * (int)v422;
                        ++v1370;
                        v1371 += 4 * v1367;
                        v1372 += 4 * v1364;
                      }
                      while (v1370 < v1368);
                      uint64_t v1376 = v1368;
                      int v1355 = *v152;
                      int v1369 = v1368;
                    }
                    else
                    {
                      uint64_t v1376 = 0;
                    }
                    uint64_t v1358 = v1358 + v1363 - v1376 * v1364;
                    uint64_t v1357 = v1357 + v1366 - v1367 * v277[1];
                    ++v1356;
                  }
                  while (v1356 < v1355);
                }
              }
              else if (v157 == 1)
              {
                int v423 = *v152;
                if (*v152)
                {
                  unint64_t v424 = 0;
                  uint64_t v425 = v151[19];
                  uint64_t v426 = v276[19];
                  uint64_t v427 = v150[19];
                  uint64_t v428 = 4 * *(void *)v276[3];
                  uint64_t v429 = 4 * *(void *)v151[3];
                  do
                  {
                    if ((int)v422 >= 1)
                    {
                      uint64_t v430 = 0;
                      unsigned int v431 = v422 + 1;
                      do
                      {
                        int v432 = *(_DWORD *)(v425 + v430);
                        if (v432 >= *(_DWORD *)(v426 + v430)) {
                          int v432 = *(_DWORD *)(v426 + v430);
                        }
                        *(_DWORD *)(v427 + v430) = v432;
                        --v431;
                        v430 += 4;
                      }
                      while (v431 > 1);
                      int v423 = *v152;
                    }
                    ++v424;
                    v427 += 4 * (int)v422;
                    v426 += v428;
                    v425 += v429;
                  }
                  while (v424 < v423);
                }
              }
              else
              {
                unint64_t v2044 = v150[6];
                if (v2044)
                {
                  unint64_t v2073 = 0;
                  uint64_t v1983 = v276[19];
                  uint64_t v1996 = v151[19];
                  uint64_t v1377 = v150[19];
                  do
                  {
                    uint64_t v1378 = 0;
                    if ((v154 & 0x80000000) == 0)
                    {
                      uint64_t v1379 = v151[3];
                      uint64_t v1380 = v154;
                      int v1381 = v2073;
                      do
                      {
                        ldiv_t v1382 = ldiv(v1381, v152[v1380]);
                        int v1381 = v1382.quot;
                        v1378 += *(void *)(v1379 + 8 * v1380--) * v1382.rem;
                      }
                      while (v1380 != -1);
                    }
                    uint64_t v1383 = v2092;
                    if ((v2092 & 0x80000000) != 0)
                    {
                      LODWORD(v1384) = 0;
                    }
                    else
                    {
                      uint64_t v1384 = 0;
                      uint64_t v1385 = v276[3];
                      int v1386 = v2073;
                      do
                      {
                        ldiv_t v1387 = ldiv(v1386, v277[v1383]);
                        int v1386 = v1387.quot;
                        v1384 += *(void *)(v1385 + 8 * v1383--) * v1387.rem;
                      }
                      while (v1383 != -1);
                    }
                    uint64_t v154 = v2110;
                    if ((int)v422 >= 1)
                    {
                      uint64_t v1388 = 0;
                      uint64_t v1389 = v1983 + 4 * (int)v1384;
                      unsigned int v1390 = v422 + 1;
                      do
                      {
                        int v1391 = *(_DWORD *)(v1996 + 4 * (int)v1378 + v1388);
                        if (v1391 >= *(_DWORD *)(v1389 + v1388)) {
                          int v1391 = *(_DWORD *)(v1389 + v1388);
                        }
                        *(_DWORD *)(v1377 + v1388) = v1391;
                        --v1390;
                        v1388 += 4;
                      }
                      while (v1390 > 1);
                    }
                    v1377 += 4 * (int)v422;
                    v2073 += (int)v422;
                  }
                  while (v2073 < v2044);
                }
              }
              break;
            default:
LABEL_540:
              switch(v418)
              {
                case 1uLL:
                  uint64_t v433 = v150[6];
                  if (v433)
                  {
                    int v434 = (int *)v151[19];
                    unint64_t v435 = (int *)v276[19];
                    int v436 = (_DWORD *)v150[19];
                    uint64_t v437 = 4 * *(void *)v276[3];
                    uint64_t v438 = 4 * *(void *)v151[3];
                    do
                    {
                      int v439 = *v434;
                      if (*v434 >= *v435) {
                        int v439 = *v435;
                      }
                      *v436++ = v439;
                      unint64_t v435 = (int *)((char *)v435 + v437);
                      int v434 = (int *)((char *)v434 + v438);
                      --v433;
                    }
                    while (v433);
                  }
                  break;
                case 2uLL:
                  int v809 = *v152;
                  if (*v152)
                  {
                    unint64_t v810 = 0;
                    uint64_t v811 = 0;
                    uint64_t v812 = 0;
                    uint64_t v813 = 0;
                    uint64_t v814 = v151[19];
                    uint64_t v815 = v276[19];
                    uint64_t v816 = v150[19];
                    uint64_t v817 = (uint64_t *)v151[3];
                    uint64_t v818 = *v817;
                    uint64_t v819 = v817[1];
                    int v820 = (uint64_t *)v276[3];
                    uint64_t v822 = *v820;
                    uint64_t v821 = v820[1];
                    int v823 = v152[1];
                    do
                    {
                      if (v823)
                      {
                        for (unint64_t m = 0; m < v823; ++m)
                        {
                          int v825 = *(_DWORD *)(v814 + 4 * v813);
                          if (v825 >= *(_DWORD *)(v815 + 4 * v812)) {
                            int v825 = *(_DWORD *)(v815 + 4 * v812);
                          }
                          *(_DWORD *)(v816 + 4 * v811 + 4 * m) = v825;
                          v813 += v819;
                          v812 += v821;
                          int v823 = v152[1];
                        }
                        uint64_t v826 = v823;
                        int v809 = *v152;
                        v811 += m;
                      }
                      else
                      {
                        uint64_t v826 = 0;
                      }
                      uint64_t v813 = v813 + v818 - v826 * v819;
                      uint64_t v812 = v812 + v822 - v821 * v277[1];
                      ++v810;
                    }
                    while (v810 < v809);
                  }
                  break;
                case 3uLL:
                  int v827 = *v152;
                  if (*v152)
                  {
                    unint64_t v828 = 0;
                    uint64_t v829 = 0;
                    uint64_t v830 = 0;
                    uint64_t v831 = 0;
                    uint64_t v832 = v151[19];
                    uint64_t v833 = v276[19];
                    uint64_t v834 = v150[19];
                    uint64_t v835 = (uint64_t *)v151[3];
                    uint64_t v836 = *v835;
                    uint64_t v837 = v835[1];
                    unint64_t v838 = (uint64_t *)v276[3];
                    uint64_t v839 = *v838;
                    uint64_t v840 = v838[1];
                    int v841 = v152[1];
                    int v842 = v841;
                    do
                    {
                      if (v842)
                      {
                        unint64_t v843 = 0;
                        uint64_t v844 = v835[2];
                        uint64_t v845 = v838[2];
                        int v846 = v152[2];
                        do
                        {
                          if (v846)
                          {
                            for (unint64_t n = 0; n < v846; ++n)
                            {
                              int v848 = *(_DWORD *)(v832 + 4 * v831);
                              if (v848 >= *(_DWORD *)(v833 + 4 * v830)) {
                                int v848 = *(_DWORD *)(v833 + 4 * v830);
                              }
                              *(_DWORD *)(v834 + 4 * v829 + 4 * n) = v848;
                              v831 += v844;
                              v830 += v845;
                              int v846 = v152[2];
                            }
                            uint64_t v849 = v846;
                            int v841 = v152[1];
                            v829 += n;
                          }
                          else
                          {
                            uint64_t v849 = 0;
                          }
                          uint64_t v831 = v831 + v837 - v849 * v844;
                          uint64_t v830 = v830 + v840 - v845 * v277[2];
                          ++v843;
                        }
                        while (v843 < v841);
                        uint64_t v850 = v841;
                        int v827 = *v152;
                        int v842 = v841;
                      }
                      else
                      {
                        uint64_t v850 = 0;
                      }
                      uint64_t v831 = v831 + v836 - v850 * v837;
                      uint64_t v830 = v830 + v839 - v840 * v277[1];
                      ++v828;
                    }
                    while (v828 < v827);
                  }
                  break;
                case 4uLL:
                  int v851 = *v152;
                  if (*v152)
                  {
                    unint64_t v852 = 0;
                    uint64_t v853 = 0;
                    uint64_t v854 = 0;
                    uint64_t v855 = 0;
                    uint64_t v856 = v151[19];
                    uint64_t v857 = v276[19];
                    uint64_t v858 = v150[19];
                    uint64_t v859 = (uint64_t *)v151[3];
                    uint64_t v860 = *v859;
                    uint64_t v861 = v859[1];
                    unint64_t v862 = (uint64_t *)v276[3];
                    uint64_t v863 = *v862;
                    uint64_t v864 = v862[1];
                    int v865 = v152[1];
                    int v866 = v865;
                    do
                    {
                      if (v866)
                      {
                        unint64_t v867 = 0;
                        uint64_t v868 = v859[2];
                        uint64_t v869 = v862[2];
                        int v870 = v152[2];
                        int v871 = v870;
                        do
                        {
                          if (v871)
                          {
                            unint64_t v872 = 0;
                            uint64_t v873 = v859[3];
                            uint64_t v874 = v862[3];
                            int v875 = v152[3];
                            do
                            {
                              if (v875)
                              {
                                for (iunint64_t i = 0; ii < v875; ++ii)
                                {
                                  int v877 = *(_DWORD *)(v856 + 4 * v855);
                                  if (v877 >= *(_DWORD *)(v857 + 4 * v854)) {
                                    int v877 = *(_DWORD *)(v857 + 4 * v854);
                                  }
                                  *(_DWORD *)(v858 + 4 * v853 + 4 * ii) = v877;
                                  v855 += v873;
                                  v854 += v874;
                                  int v875 = v152[3];
                                }
                                uint64_t v878 = v875;
                                int v870 = v152[2];
                                v853 += ii;
                              }
                              else
                              {
                                uint64_t v878 = 0;
                              }
                              uint64_t v855 = v855 + v868 - v878 * v873;
                              uint64_t v854 = v854 + v869 - v874 * v277[3];
                              ++v872;
                            }
                            while (v872 < v870);
                            uint64_t v879 = v870;
                            int v865 = v152[1];
                            int v871 = v870;
                          }
                          else
                          {
                            uint64_t v879 = 0;
                          }
                          uint64_t v855 = v855 + v861 - v879 * v868;
                          uint64_t v854 = v854 + v864 - v869 * v277[2];
                          ++v867;
                        }
                        while (v867 < v865);
                        uint64_t v880 = v865;
                        int v851 = *v152;
                        int v866 = v865;
                      }
                      else
                      {
                        uint64_t v880 = 0;
                      }
                      uint64_t v855 = v855 + v860 - v880 * v861;
                      uint64_t v854 = v854 + v863 - v864 * v277[1];
                      ++v852;
                    }
                    while (v852 < v851);
                  }
                  break;
                default:
                  uint64_t v796 = v150[6];
                  if (v796)
                  {
                    uint64_t v797 = 0;
                    uint64_t v2035 = v276[19];
                    uint64_t v2064 = v151[19];
                    uint64_t v2022 = v150[19];
                    do
                    {
                      uint64_t v798 = 0;
                      if ((v154 & 0x80000000) == 0)
                      {
                        uint64_t v799 = v151[3];
                        uint64_t v800 = v154;
                        int v801 = v797;
                        do
                        {
                          ldiv_t v802 = ldiv(v801, v152[v800]);
                          int v801 = v802.quot;
                          v798 += *(void *)(v799 + 8 * v800--) * v802.rem;
                        }
                        while (v800 != -1);
                      }
                      uint64_t v803 = v2092;
                      if ((v2092 & 0x80000000) != 0)
                      {
                        LODWORD(v804) = 0;
                      }
                      else
                      {
                        uint64_t v804 = 0;
                        uint64_t v805 = v276[3];
                        int v806 = v797;
                        do
                        {
                          ldiv_t v807 = ldiv(v806, v277[v803]);
                          int v806 = v807.quot;
                          v804 += *(void *)(v805 + 8 * v803--) * v807.rem;
                        }
                        while (v803 != -1);
                      }
                      int v808 = *(_DWORD *)(v2064 + 4 * (int)v798);
                      if (v808 >= *(_DWORD *)(v2035 + 4 * (int)v804)) {
                        int v808 = *(_DWORD *)(v2035 + 4 * (int)v804);
                      }
                      *(_DWORD *)(v2022 + 4 * v797++) = v808;
                      uint64_t v154 = v2110;
                    }
                    while (v797 != v796);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v14)
      {
        case 0:
          uint64_t v15 = **(void **)(*a1 + 152);
          if (v15 >= **(void **)(*a2 + 152)) {
            uint64_t v15 = **(void **)(*a2 + 152);
          }
          **(void **)(*(void *)a3 + 152) = v15;
          return;
        case 1:
          int v191 = *(_DWORD *)(*a2 + 160);
          if (v191 >= 1)
          {
            uint64_t v192 = **(void **)(*a1 + 152);
            uint64_t v193 = *(void **)(*(void *)a3 + 152);
            uint64_t v194 = *(uint64_t **)(*a2 + 152);
            unsigned int v195 = v191 + 1;
            do
            {
              uint64_t v197 = *v194++;
              uint64_t v196 = v197;
              if (v192 < v197) {
                uint64_t v196 = v192;
              }
              *v193++ = v196;
              --v195;
            }
            while (v195 > 1);
          }
          return;
        case 2:
          int v198 = *(_DWORD *)(*a1 + 160);
          if (v198 >= 1)
          {
            uint64_t v199 = **(void **)(*a2 + 152);
            uint64_t v200 = *(void **)(*(void *)a3 + 152);
            uint64_t v201 = *(uint64_t **)(*a1 + 152);
            unsigned int v202 = v198 + 1;
            do
            {
              uint64_t v204 = *v201++;
              uint64_t v203 = v204;
              if (v204 >= v199) {
                uint64_t v203 = v199;
              }
              *v200++ = v203;
              --v202;
            }
            while (v202 > 1);
          }
          return;
        case 3:
          int v205 = *(_DWORD *)(*(void *)a3 + 48);
          if (v205 >= 1)
          {
            unsigned int v206 = *(void **)(*(void *)a3 + 152);
            uint64_t v207 = *(uint64_t **)(*a2 + 152);
            uint64_t v208 = *(uint64_t **)(*a1 + 152);
            unsigned int v209 = v205 + 1;
            do
            {
              uint64_t v211 = *v208++;
              uint64_t v210 = v211;
              uint64_t v213 = *v207++;
              uint64_t v212 = v213;
              if (v210 >= v213) {
                uint64_t v210 = v212;
              }
              *v206++ = v210;
              --v209;
            }
            while (v209 > 1);
          }
          return;
        default:
          uint64_t v182 = *(void **)a3;
          uint64_t v183 = (void *)*a1;
          int v184 = *(int **)*a1;
          uint64_t v185 = (v183[1] - (void)v184) >> 2;
          uint64_t v186 = (v185 - 1);
          if ((int)v186 >= -1) {
            int v187 = -1;
          }
          else {
            int v187 = v185 - 1;
          }
          int v188 = v187 + 1;
          int v189 = v185 + 1;
          while (1)
          {
            unsigned int v190 = v189 - 2;
            if (v189 - 2 < 0) {
              break;
            }
            --v189;
            if (*(void *)(v183[3] + 8 * v190) != *(void *)(v182[3] + 8 * v190)) {
              goto LABEL_255;
            }
          }
          int v189 = v188;
LABEL_255:
          uint64_t v284 = (void *)*a2;
          int v285 = *(int **)*a2;
          uint64_t v286 = (v284[1] - (void)v285) >> 2;
          uint64_t v287 = (v286 - 1);
          if ((int)v287 >= -1) {
            int v288 = -1;
          }
          else {
            int v288 = v286 - 1;
          }
          int v289 = v288 + 1;
          int v290 = v286 + 1;
          while (1)
          {
            unsigned int v291 = v290 - 2;
            if (v290 - 2 < 0) {
              break;
            }
            --v290;
            if (*(void *)(v284[3] + 8 * v291) != *(void *)(v182[3] + 8 * v291)) {
              goto LABEL_296;
            }
          }
          int v290 = v289;
LABEL_296:
          int v310 = v185 + 1;
          while (1)
          {
            unsigned int v311 = v310 - 2;
            if (v310 - 2 < 0) {
              break;
            }
            --v310;
            if (*(void *)(v183[3] + 8 * v311)) {
              goto LABEL_331;
            }
          }
          int v310 = v188;
LABEL_331:
          int v324 = v286 + 1;
          while (1)
          {
            unsigned int v325 = v324 - 2;
            if (v324 - 2 < 0) {
              break;
            }
            --v324;
            if (*(void *)(v284[3] + 8 * v325)) {
              goto LABEL_548;
            }
          }
          int v324 = v289;
LABEL_548:
          unint64_t v440 = (uint64_t)(v182[1] - *v182) >> 2;
          if (v189 <= v290) {
            int v441 = v290;
          }
          else {
            int v441 = v189;
          }
          if (v189 <= v324) {
            int v189 = v324;
          }
          if (v310 > v290) {
            int v290 = v310;
          }
          if (v440 > v290)
          {
            int v442 = 1;
          }
          else
          {
            int v290 = (uint64_t)(v182[1] - *v182) >> 2;
            int v442 = 4;
          }
          if (v440 > v189)
          {
            int v443 = 2;
          }
          else
          {
            int v189 = v290;
            int v443 = v442;
          }
          if (v440 > v441)
          {
            int v189 = v441;
            int v443 = 3;
          }
          uint64_t v2093 = v287;
          uint64_t v2111 = v186;
          if (!v189) {
            goto LABEL_579;
          }
          unint64_t v444 = *(void *)(v182[3] + 8 * (v189 - 1));
          if (v444 < 0x10) {
            goto LABEL_579;
          }
          switch(v443)
          {
            case 1:
              if (v189 == 2)
              {
                uint64_t v1830 = *v184;
                if (v1830)
                {
                  uint64_t v1831 = 0;
                  uint64_t v1832 = 0;
                  uint64_t v1833 = 0;
                  uint64_t v1834 = v183[19];
                  uint64_t v1835 = v284[19];
                  uint64_t v1836 = v182[19];
                  unint64_t v1837 = v184[1];
                  uint64_t v1838 = (uint64_t *)v183[3];
                  uint64_t v1839 = *v1838;
                  uint64_t v1840 = v1838[1];
                  uint64_t v1841 = (uint64_t *)v284[3];
                  uint64_t v1842 = *v1841;
                  uint64_t v1843 = v1841[1];
                  if (v1837 <= 1) {
                    uint64_t v1844 = 1;
                  }
                  else {
                    uint64_t v1844 = v184[1];
                  }
                  uint64_t v1845 = v1839 - v1840 * v1837;
                  uint64_t v1846 = v1842 - v1843 * v285[1];
                  do
                  {
                    if (v1837)
                    {
                      uint64_t v1847 = 0;
                      uint64_t v1848 = v1835 + 8 * v1832;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1849 = 0;
                          uint64_t v1850 = *(void *)(v1834 + 8 * v1833);
                          unsigned int v1851 = v444 + 1;
                          do
                          {
                            uint64_t v1852 = *(void *)(v1848 + v1849);
                            if (v1850 < v1852) {
                              uint64_t v1852 = v1850;
                            }
                            *(void *)(v1836 + v1849) = v1852;
                            --v1851;
                            v1849 += 8;
                          }
                          while (v1851 > 1);
                        }
                        v1833 += v1840;
                        v1832 += v1843;
                        v1836 += 8 * (int)v444;
                        ++v1847;
                        v1848 += 8 * v1843;
                      }
                      while (v1847 != v1844);
                    }
                    v1833 += v1845;
                    v1832 += v1846;
                    ++v1831;
                  }
                  while (v1831 != v1830);
                }
              }
              else if (v189 == 1)
              {
                uint64_t v1168 = *v184;
                if (v1168)
                {
                  uint64_t v1169 = 0;
                  uint64_t v1170 = 0;
                  uint64_t v1171 = v183[19];
                  uint64_t v1172 = v284[19];
                  uint64_t v1173 = v182[19];
                  uint64_t v1174 = *(void *)v183[3];
                  uint64_t v1175 = 8 * *(void *)v284[3];
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1176 = 0;
                      uint64_t v1177 = *(void *)(v1171 + 8 * v1170);
                      unsigned int v1178 = v444 + 1;
                      do
                      {
                        uint64_t v1179 = *(void *)(v1172 + v1176);
                        if (v1177 < v1179) {
                          uint64_t v1179 = v1177;
                        }
                        *(void *)(v1173 + v1176) = v1179;
                        --v1178;
                        v1176 += 8;
                      }
                      while (v1178 > 1);
                    }
                    v1170 += v1174;
                    ++v1169;
                    v1173 += 8 * (int)v444;
                    v1172 += v1175;
                  }
                  while (v1169 != v1168);
                }
              }
              else
              {
                unint64_t v2057 = v182[6];
                if (v2057)
                {
                  unint64_t v2086 = 0;
                  uint64_t v1990 = v284[19];
                  uint64_t v2005 = v183[19];
                  uint64_t v1853 = v182[19];
                  do
                  {
                    uint64_t v1854 = 0;
                    if ((v186 & 0x80000000) == 0)
                    {
                      uint64_t v1855 = v183[3];
                      uint64_t v1856 = v186;
                      int v1857 = v2086;
                      do
                      {
                        ldiv_t v1858 = ldiv(v1857, v184[v1856]);
                        int v1857 = v1858.quot;
                        v1854 += *(void *)(v1855 + 8 * v1856--) * v1858.rem;
                      }
                      while (v1856 != -1);
                    }
                    uint64_t v1859 = v2093;
                    if ((v2093 & 0x80000000) != 0)
                    {
                      LODWORD(v1860) = 0;
                    }
                    else
                    {
                      uint64_t v1860 = 0;
                      uint64_t v1861 = v284[3];
                      int v1862 = v2086;
                      do
                      {
                        ldiv_t v1863 = ldiv(v1862, v285[v1859]);
                        int v1862 = v1863.quot;
                        v1860 += *(void *)(v1861 + 8 * v1859--) * v1863.rem;
                      }
                      while (v1859 != -1);
                    }
                    uint64_t v186 = v2111;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1864 = 0;
                      uint64_t v1865 = *(void *)(v2005 + 8 * (int)v1854);
                      unsigned int v1866 = v444 + 1;
                      do
                      {
                        uint64_t v1867 = *(void *)(v1990 + 8 * (int)v1860 + v1864);
                        if (v1865 < v1867) {
                          uint64_t v1867 = v1865;
                        }
                        *(void *)(v1853 + v1864) = v1867;
                        --v1866;
                        v1864 += 8;
                      }
                      while (v1866 > 1);
                    }
                    v1853 += 8 * (int)v444;
                    v2086 += (int)v444;
                  }
                  while (v2086 < v2057);
                }
              }
              break;
            case 2:
              if (v189 == 2)
              {
                uint64_t v1868 = *v184;
                if (v1868)
                {
                  uint64_t v1869 = 0;
                  uint64_t v1870 = 0;
                  uint64_t v1871 = 0;
                  uint64_t v1872 = v183[19];
                  uint64_t v1873 = v284[19];
                  uint64_t v1874 = v182[19];
                  unint64_t v1875 = v184[1];
                  uint64_t v1876 = (uint64_t *)v183[3];
                  uint64_t v1877 = *v1876;
                  uint64_t v1878 = v1876[1];
                  uint64_t v1879 = (uint64_t *)v284[3];
                  uint64_t v1880 = *v1879;
                  uint64_t v1881 = v1879[1];
                  if (v1875 <= 1) {
                    uint64_t v1882 = 1;
                  }
                  else {
                    uint64_t v1882 = v184[1];
                  }
                  uint64_t v1883 = v1877 - v1878 * v1875;
                  uint64_t v1884 = v1880 - v1881 * v285[1];
                  do
                  {
                    if (v1875)
                    {
                      uint64_t v1885 = 0;
                      uint64_t v1886 = v1872 + 8 * v1871;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1887 = 0;
                          uint64_t v1888 = *(void *)(v1873 + 8 * v1870);
                          unsigned int v1889 = v444 + 1;
                          do
                          {
                            uint64_t v1890 = *(void *)(v1886 + v1887);
                            if (v1890 >= v1888) {
                              uint64_t v1890 = v1888;
                            }
                            *(void *)(v1874 + v1887) = v1890;
                            --v1889;
                            v1887 += 8;
                          }
                          while (v1889 > 1);
                        }
                        v1871 += v1878;
                        v1870 += v1881;
                        v1874 += 8 * (int)v444;
                        ++v1885;
                        v1886 += 8 * v1878;
                      }
                      while (v1885 != v1882);
                    }
                    v1871 += v1883;
                    v1870 += v1884;
                    ++v1869;
                  }
                  while (v1869 != v1868);
                }
              }
              else if (v189 == 1)
              {
                uint64_t v1180 = *v184;
                if (v1180)
                {
                  uint64_t v1181 = 0;
                  uint64_t v1182 = 0;
                  uint64_t v1183 = v183[19];
                  uint64_t v1184 = v284[19];
                  uint64_t v1185 = v182[19];
                  uint64_t v1186 = *(void *)v284[3];
                  uint64_t v1187 = 8 * *(void *)v183[3];
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1188 = 0;
                      uint64_t v1189 = *(void *)(v1184 + 8 * v1182);
                      unsigned int v1190 = v444 + 1;
                      do
                      {
                        uint64_t v1191 = *(void *)(v1183 + v1188);
                        if (v1191 >= v1189) {
                          uint64_t v1191 = v1189;
                        }
                        *(void *)(v1185 + v1188) = v1191;
                        --v1190;
                        v1188 += 8;
                      }
                      while (v1190 > 1);
                    }
                    v1182 += v1186;
                    ++v1181;
                    v1185 += 8 * (int)v444;
                    v1183 += v1187;
                  }
                  while (v1181 != v1180);
                }
              }
              else
              {
                unint64_t v2058 = v182[6];
                if (v2058)
                {
                  unint64_t v2087 = 0;
                  uint64_t v1991 = v284[19];
                  uint64_t v2006 = v183[19];
                  uint64_t v1891 = v182[19];
                  do
                  {
                    uint64_t v1892 = 0;
                    if ((v186 & 0x80000000) == 0)
                    {
                      uint64_t v1893 = v183[3];
                      uint64_t v1894 = v186;
                      int v1895 = v2087;
                      do
                      {
                        ldiv_t v1896 = ldiv(v1895, v184[v1894]);
                        int v1895 = v1896.quot;
                        v1892 += *(void *)(v1893 + 8 * v1894--) * v1896.rem;
                      }
                      while (v1894 != -1);
                    }
                    uint64_t v1897 = v2093;
                    if ((v2093 & 0x80000000) != 0)
                    {
                      LODWORD(v1898) = 0;
                    }
                    else
                    {
                      uint64_t v1898 = 0;
                      uint64_t v1899 = v284[3];
                      int v1900 = v2087;
                      do
                      {
                        ldiv_t v1901 = ldiv(v1900, v285[v1897]);
                        int v1900 = v1901.quot;
                        v1898 += *(void *)(v1899 + 8 * v1897--) * v1901.rem;
                      }
                      while (v1897 != -1);
                    }
                    uint64_t v186 = v2111;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1902 = 0;
                      uint64_t v1903 = *(void *)(v1991 + 8 * (int)v1898);
                      unsigned int v1904 = v444 + 1;
                      do
                      {
                        uint64_t v1905 = *(void *)(v2006 + 8 * (int)v1892 + v1902);
                        if (v1905 >= v1903) {
                          uint64_t v1905 = v1903;
                        }
                        *(void *)(v1891 + v1902) = v1905;
                        --v1904;
                        v1902 += 8;
                      }
                      while (v1904 > 1);
                    }
                    v1891 += 8 * (int)v444;
                    v2087 += (int)v444;
                  }
                  while (v2087 < v2058);
                }
              }
              break;
            case 3:
              if (v189 == 2)
              {
                uint64_t v1392 = *v184;
                if (v1392)
                {
                  uint64_t v1393 = 0;
                  uint64_t v1394 = 0;
                  uint64_t v1395 = 0;
                  uint64_t v1396 = v183[19];
                  uint64_t v1397 = v284[19];
                  uint64_t v1398 = v182[19];
                  unint64_t v1399 = v184[1];
                  uint64_t v1400 = (uint64_t *)v183[3];
                  uint64_t v1401 = *v1400;
                  uint64_t v1402 = v1400[1];
                  uint64_t v1403 = (uint64_t *)v284[3];
                  uint64_t v1404 = *v1403;
                  uint64_t v1405 = v1403[1];
                  if (v1399 <= 1) {
                    uint64_t v1406 = 1;
                  }
                  else {
                    uint64_t v1406 = v184[1];
                  }
                  uint64_t v1407 = v1401 - v1402 * v1399;
                  uint64_t v1408 = v1404 - v1405 * v285[1];
                  do
                  {
                    if (v1399)
                    {
                      uint64_t v1409 = 0;
                      uint64_t v1410 = v1397 + 8 * v1394;
                      uint64_t v1411 = v1396 + 8 * v1395;
                      do
                      {
                        if ((int)v444 >= 1)
                        {
                          uint64_t v1412 = 0;
                          unsigned int v1413 = v444 + 1;
                          do
                          {
                            uint64_t v1414 = *(void *)(v1411 + v1412);
                            if (v1414 >= *(void *)(v1410 + v1412)) {
                              uint64_t v1414 = *(void *)(v1410 + v1412);
                            }
                            *(void *)(v1398 + v1412) = v1414;
                            --v1413;
                            v1412 += 8;
                          }
                          while (v1413 > 1);
                        }
                        v1395 += v1402;
                        v1394 += v1405;
                        v1398 += 8 * (int)v444;
                        ++v1409;
                        v1410 += 8 * v1405;
                        v1411 += 8 * v1402;
                      }
                      while (v1409 != v1406);
                    }
                    v1395 += v1407;
                    v1394 += v1408;
                    ++v1393;
                  }
                  while (v1393 != v1392);
                }
              }
              else if (v189 == 1)
              {
                uint64_t v445 = *v184;
                if (v445)
                {
                  uint64_t v446 = 0;
                  uint64_t v447 = v183[19];
                  uint64_t v448 = v284[19];
                  uint64_t v449 = v182[19];
                  uint64_t v450 = 8 * *(void *)v284[3];
                  uint64_t v451 = 8 * *(void *)v183[3];
                  do
                  {
                    if ((int)v444 >= 1)
                    {
                      uint64_t v452 = 0;
                      unsigned int v453 = v444 + 1;
                      do
                      {
                        uint64_t v454 = *(void *)(v447 + v452);
                        if (v454 >= *(void *)(v448 + v452)) {
                          uint64_t v454 = *(void *)(v448 + v452);
                        }
                        *(void *)(v449 + v452) = v454;
                        --v453;
                        v452 += 8;
                      }
                      while (v453 > 1);
                    }
                    ++v446;
                    v449 += 8 * (int)v444;
                    v448 += v450;
                    v447 += v451;
                  }
                  while (v446 != v445);
                }
              }
              else
              {
                unint64_t v2045 = v182[6];
                if (v2045)
                {
                  unint64_t v2074 = 0;
                  uint64_t v1984 = v284[19];
                  uint64_t v1997 = v183[19];
                  uint64_t v1415 = v182[19];
                  do
                  {
                    uint64_t v1416 = 0;
                    if ((v186 & 0x80000000) == 0)
                    {
                      uint64_t v1417 = v183[3];
                      uint64_t v1418 = v186;
                      int v1419 = v2074;
                      do
                      {
                        ldiv_t v1420 = ldiv(v1419, v184[v1418]);
                        int v1419 = v1420.quot;
                        v1416 += *(void *)(v1417 + 8 * v1418--) * v1420.rem;
                      }
                      while (v1418 != -1);
                    }
                    uint64_t v1421 = v2093;
                    if ((v2093 & 0x80000000) != 0)
                    {
                      LODWORD(v1422) = 0;
                    }
                    else
                    {
                      uint64_t v1422 = 0;
                      uint64_t v1423 = v284[3];
                      int v1424 = v2074;
                      do
                      {
                        ldiv_t v1425 = ldiv(v1424, v285[v1421]);
                        int v1424 = v1425.quot;
                        v1422 += *(void *)(v1423 + 8 * v1421--) * v1425.rem;
                      }
                      while (v1421 != -1);
                    }
                    uint64_t v186 = v2111;
                    if ((int)v444 >= 1)
                    {
                      uint64_t v1426 = 0;
                      uint64_t v1427 = v1984 + 8 * (int)v1422;
                      unsigned int v1428 = v444 + 1;
                      do
                      {
                        uint64_t v1429 = *(void *)(v1997 + 8 * (int)v1416 + v1426);
                        if (v1429 >= *(void *)(v1427 + v1426)) {
                          uint64_t v1429 = *(void *)(v1427 + v1426);
                        }
                        *(void *)(v1415 + v1426) = v1429;
                        --v1428;
                        v1426 += 8;
                      }
                      while (v1428 > 1);
                    }
                    v1415 += 8 * (int)v444;
                    v2074 += (int)v444;
                  }
                  while (v2074 < v2045);
                }
              }
              break;
            default:
LABEL_579:
              switch(v440)
              {
                case 1uLL:
                  uint64_t v455 = v182[6];
                  if (v455)
                  {
                    uint64_t v456 = (uint64_t *)v183[19];
                    unint64_t v457 = (uint64_t *)v284[19];
                    int v458 = (void *)v182[19];
                    uint64_t v459 = 8 * *(void *)v284[3];
                    uint64_t v460 = 8 * *(void *)v183[3];
                    do
                    {
                      uint64_t v461 = *v456;
                      if (*v456 >= *v457) {
                        uint64_t v461 = *v457;
                      }
                      *v458++ = v461;
                      unint64_t v457 = (uint64_t *)((char *)v457 + v459);
                      uint64_t v456 = (uint64_t *)((char *)v456 + v460);
                      --v455;
                    }
                    while (v455);
                  }
                  break;
                case 2uLL:
                  uint64_t v894 = *v184;
                  if (v894)
                  {
                    uint64_t v895 = 0;
                    uint64_t v896 = 0;
                    uint64_t v897 = 0;
                    uint64_t v898 = 0;
                    uint64_t v899 = v183[19];
                    uint64_t v900 = v284[19];
                    uint64_t v901 = v182[19];
                    unint64_t v902 = v184[1];
                    uint64_t v903 = (uint64_t *)v183[3];
                    uint64_t v904 = *v903;
                    uint64_t v905 = v903[1];
                    uint64_t v906 = (uint64_t *)v284[3];
                    uint64_t v907 = *v906;
                    uint64_t v908 = v906[1];
                    uint64_t v909 = v907 - v908 * v285[1];
                    if (v902 <= 1) {
                      uint64_t v910 = 1;
                    }
                    else {
                      uint64_t v910 = v184[1];
                    }
                    uint64_t v911 = v904 - v905 * v902;
                    do
                    {
                      if (v902)
                      {
                        uint64_t v912 = v896 + v910;
                        uint64_t v913 = (void *)(v901 + 8 * v896);
                        uint64_t v914 = v910;
                        do
                        {
                          uint64_t v915 = *(void *)(v899 + 8 * v898);
                          if (v915 >= *(void *)(v900 + 8 * v897)) {
                            uint64_t v915 = *(void *)(v900 + 8 * v897);
                          }
                          *v913++ = v915;
                          v898 += v905;
                          v897 += v908;
                          --v914;
                        }
                        while (v914);
                        uint64_t v896 = v912;
                      }
                      v898 += v911;
                      v897 += v909;
                      ++v895;
                    }
                    while (v895 != v894);
                  }
                  break;
                case 3uLL:
                  uint64_t v916 = *v184;
                  if (v916)
                  {
                    uint64_t v917 = 0;
                    uint64_t v918 = 0;
                    uint64_t v919 = 0;
                    uint64_t v920 = 0;
                    uint64_t v921 = v183[19];
                    uint64_t v922 = v284[19];
                    uint64_t v923 = v182[19];
                    unint64_t v924 = v184[1];
                    uint64_t v925 = (void *)v183[3];
                    uint64_t v926 = v925[1];
                    uint64_t v927 = (void *)v284[3];
                    uint64_t v928 = v927[1];
                    uint64_t v929 = *v927 - v928 * v285[1];
                    if (v924 <= 1) {
                      uint64_t v930 = 1;
                    }
                    else {
                      uint64_t v930 = v184[1];
                    }
                    unint64_t v931 = *v925 - v926 * v924;
                    do
                    {
                      if (v924)
                      {
                        uint64_t v932 = 0;
                        unint64_t v933 = v184[2];
                        uint64_t v934 = v925[2];
                        uint64_t v935 = v927[2];
                        if (v933 <= 1) {
                          uint64_t v936 = 1;
                        }
                        else {
                          uint64_t v936 = v184[2];
                        }
                        uint64_t v937 = v928 - v935 * v285[2];
                        do
                        {
                          uint64_t v938 = v936;
                          if (v933)
                          {
                            do
                            {
                              uint64_t v939 = *(void *)(v921 + 8 * v920);
                              if (v939 >= *(void *)(v922 + 8 * v919)) {
                                uint64_t v939 = *(void *)(v922 + 8 * v919);
                              }
                              *(void *)(v923 + 8 * v918++) = v939;
                              v920 += v934;
                              v919 += v935;
                              --v938;
                            }
                            while (v938);
                          }
                          v920 += v926 - v934 * v933;
                          v919 += v937;
                          ++v932;
                        }
                        while (v932 != v930);
                      }
                      v920 += v931;
                      v919 += v929;
                      ++v917;
                    }
                    while (v917 != v916);
                  }
                  break;
                case 4uLL:
                  uint64_t v2116 = *v184;
                  if (v2116)
                  {
                    uint64_t v940 = 0;
                    uint64_t v941 = 0;
                    uint64_t v942 = 0;
                    uint64_t v943 = 0;
                    uint64_t v944 = v183[19];
                    uint64_t v945 = v284[19];
                    uint64_t v946 = v182[19];
                    unint64_t v947 = v184[1];
                    uint64_t v948 = (void *)v183[3];
                    uint64_t v949 = (void *)v284[3];
                    uint64_t v2009 = v949[1];
                    uint64_t v2024 = v948[1];
                    uint64_t v2066 = *v949 - v2009 * v285[1];
                    int v2098 = v184[1];
                    if (v947 <= 1) {
                      uint64_t v950 = 1;
                    }
                    else {
                      uint64_t v950 = v184[1];
                    }
                    unint64_t v2037 = *v948 - v948[1] * v947;
                    do
                    {
                      if (v2098)
                      {
                        uint64_t v951 = 0;
                        unint64_t v952 = v184[2];
                        uint64_t v953 = v948[2];
                        uint64_t v954 = v949[2];
                        if (v952 <= 1) {
                          uint64_t v955 = 1;
                        }
                        else {
                          uint64_t v955 = v184[2];
                        }
                        uint64_t v956 = v2009 - v954 * v285[2];
                        do
                        {
                          if (v952)
                          {
                            uint64_t v957 = 0;
                            unint64_t v958 = v184[3];
                            uint64_t v959 = v948[3];
                            uint64_t v960 = v949[3];
                            if (v958 <= 1) {
                              uint64_t v961 = 1;
                            }
                            else {
                              uint64_t v961 = v184[3];
                            }
                            uint64_t v962 = v954 - v960 * v285[3];
                            do
                            {
                              uint64_t v963 = v961;
                              if (v958)
                              {
                                do
                                {
                                  uint64_t v964 = *(void *)(v945 + 8 * v942);
                                  if (*(void *)(v944 + 8 * v943) < v964) {
                                    uint64_t v964 = *(void *)(v944 + 8 * v943);
                                  }
                                  *(void *)(v946 + 8 * v941++) = v964;
                                  v943 += v959;
                                  v942 += v960;
                                  --v963;
                                }
                                while (v963);
                              }
                              v943 += v953 - v959 * v958;
                              v942 += v962;
                              ++v957;
                            }
                            while (v957 != v955);
                          }
                          v943 += v2024 - v953 * v952;
                          v942 += v956;
                          ++v951;
                        }
                        while (v951 != v950);
                      }
                      v943 += v2037;
                      v942 += v2066;
                      ++v940;
                    }
                    while (v940 != v2116);
                  }
                  break;
                default:
                  uint64_t v881 = v182[6];
                  if (v881)
                  {
                    uint64_t v882 = 0;
                    uint64_t v2036 = v284[19];
                    uint64_t v2065 = v183[19];
                    uint64_t v2023 = v182[19];
                    do
                    {
                      uint64_t v883 = 0;
                      if ((v186 & 0x80000000) == 0)
                      {
                        uint64_t v884 = v183[3];
                        uint64_t v885 = v186;
                        int v886 = v882;
                        do
                        {
                          ldiv_t v887 = ldiv(v886, v184[v885]);
                          int v886 = v887.quot;
                          v883 += *(void *)(v884 + 8 * v885--) * v887.rem;
                        }
                        while (v885 != -1);
                      }
                      uint64_t v888 = v2093;
                      if ((v2093 & 0x80000000) != 0)
                      {
                        LODWORD(v889) = 0;
                      }
                      else
                      {
                        uint64_t v889 = 0;
                        uint64_t v890 = v284[3];
                        int v891 = v882;
                        do
                        {
                          ldiv_t v892 = ldiv(v891, v285[v888]);
                          int v891 = v892.quot;
                          v889 += *(void *)(v890 + 8 * v888--) * v892.rem;
                        }
                        while (v888 != -1);
                      }
                      uint64_t v893 = *(void *)(v2065 + 8 * (int)v883);
                      if (v893 >= *(void *)(v2036 + 8 * (int)v889)) {
                        uint64_t v893 = *(void *)(v2036 + 8 * (int)v889);
                      }
                      *(void *)(v2023 + 8 * v882++) = v893;
                      uint64_t v186 = v2111;
                    }
                    while (v882 != v881);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v16)
      {
        case 0:
          float v17 = **(float **)(*a1 + 152);
          unsigned int v18 = *(float **)(*a2 + 152);
          if (v17 >= *v18) {
            float v17 = *v18;
          }
          **(float **)(*(void *)a3 + 152) = v17;
          return;
        case 1:
          int v223 = *(_DWORD *)(*a2 + 160);
          if (v223 >= 1)
          {
            float v224 = **(float **)(*a1 + 152);
            float v225 = *(float **)(*(void *)a3 + 152);
            float v226 = *(float **)(*a2 + 152);
            unsigned int v227 = v223 + 1;
            do
            {
              float v228 = *v226++;
              float v229 = v228;
              if (v224 < v228) {
                float v229 = v224;
              }
              *v225++ = v229;
              --v227;
            }
            while (v227 > 1);
          }
          return;
        case 2:
          int v230 = *(_DWORD *)(*a1 + 160);
          if (v230 >= 1)
          {
            float v231 = **(float **)(*a2 + 152);
            float v232 = *(float **)(*(void *)a3 + 152);
            float v233 = *(float **)(*a1 + 152);
            unsigned int v234 = v230 + 1;
            do
            {
              float v235 = *v233++;
              float v236 = v235;
              if (v235 >= v231) {
                float v236 = v231;
              }
              *v232++ = v236;
              --v234;
            }
            while (v234 > 1);
          }
          return;
        case 3:
          int v237 = *(_DWORD *)(*(void *)a3 + 48);
          if (v237 >= 1)
          {
            unsigned int v238 = *(float **)(*(void *)a3 + 152);
            float v239 = *(float **)(*a2 + 152);
            float v240 = *(float **)(*a1 + 152);
            unsigned int v241 = v237 + 1;
            do
            {
              float v242 = *v240++;
              float v243 = v242;
              float v244 = *v239++;
              float v245 = v244;
              if (v243 >= v244) {
                float v243 = v245;
              }
              *v238++ = v243;
              --v241;
            }
            while (v241 > 1);
          }
          return;
        default:
          uint64_t v214 = *(void **)a3;
          uint64_t v215 = (void *)*a1;
          int v216 = *(int **)*a1;
          uint64_t v217 = (v215[1] - (void)v216) >> 2;
          uint64_t v218 = (v217 - 1);
          if ((int)v218 >= -1) {
            int v219 = -1;
          }
          else {
            int v219 = v217 - 1;
          }
          int v220 = v219 + 1;
          int v221 = v217 + 1;
          while (1)
          {
            unsigned int v222 = v221 - 2;
            if (v221 - 2 < 0) {
              break;
            }
            --v221;
            if (*(void *)(v215[3] + 8 * v222) != *(void *)(v214[3] + 8 * v222)) {
              goto LABEL_263;
            }
          }
          int v221 = v220;
LABEL_263:
          uint64_t v292 = (void *)*a2;
          int v293 = *(int **)*a2;
          uint64_t v294 = (v292[1] - (void)v293) >> 2;
          uint64_t v295 = (v294 - 1);
          if ((int)v295 >= -1) {
            int v296 = -1;
          }
          else {
            int v296 = v294 - 1;
          }
          int v297 = v296 + 1;
          int v298 = v294 + 1;
          while (1)
          {
            unsigned int v299 = v298 - 2;
            if (v298 - 2 < 0) {
              break;
            }
            --v298;
            if (*(void *)(v292[3] + 8 * v299) != *(void *)(v214[3] + 8 * v299)) {
              goto LABEL_301;
            }
          }
          int v298 = v297;
LABEL_301:
          int v312 = v217 + 1;
          while (1)
          {
            unsigned int v313 = v312 - 2;
            if (v312 - 2 < 0) {
              break;
            }
            --v312;
            if (*(void *)(v215[3] + 8 * v313)) {
              goto LABEL_336;
            }
          }
          int v312 = v220;
LABEL_336:
          int v326 = v294 + 1;
          while (1)
          {
            unsigned int v327 = v326 - 2;
            if (v326 - 2 < 0) {
              break;
            }
            --v326;
            if (*(void *)(v292[3] + 8 * v327)) {
              goto LABEL_587;
            }
          }
          int v326 = v297;
LABEL_587:
          unint64_t v462 = (uint64_t)(v214[1] - *v214) >> 2;
          if (v221 <= v298) {
            int v463 = v298;
          }
          else {
            int v463 = v221;
          }
          if (v221 <= v326) {
            int v221 = v326;
          }
          if (v312 > v298) {
            int v298 = v312;
          }
          if (v462 > v298)
          {
            int v464 = 1;
          }
          else
          {
            int v298 = (uint64_t)(v214[1] - *v214) >> 2;
            int v464 = 4;
          }
          if (v462 > v221)
          {
            int v465 = 2;
          }
          else
          {
            int v221 = v298;
            int v465 = v464;
          }
          if (v462 > v463)
          {
            int v221 = v463;
            int v465 = 3;
          }
          uint64_t v2094 = v295;
          uint64_t v2112 = v218;
          if (!v221) {
            goto LABEL_618;
          }
          unint64_t v466 = *(void *)(v214[3] + 8 * (v221 - 1));
          if (v466 < 0x10) {
            goto LABEL_618;
          }
          switch(v465)
          {
            case 1:
              if (v221 == 2)
              {
                uint64_t v1906 = *v216;
                if (v1906)
                {
                  uint64_t v1907 = 0;
                  uint64_t v1908 = 0;
                  uint64_t v1909 = 0;
                  uint64_t v1910 = v215[19];
                  uint64_t v1911 = v292[19];
                  uint64_t v1912 = v214[19];
                  unint64_t v1913 = v216[1];
                  uint64_t v1914 = (uint64_t *)v215[3];
                  uint64_t v1915 = *v1914;
                  uint64_t v1916 = v1914[1];
                  uint64_t v1917 = (uint64_t *)v292[3];
                  uint64_t v1918 = *v1917;
                  uint64_t v1919 = v1917[1];
                  if (v1913 <= 1) {
                    uint64_t v1920 = 1;
                  }
                  else {
                    uint64_t v1920 = v216[1];
                  }
                  uint64_t v1921 = v1915 - v1916 * v1913;
                  uint64_t v1922 = v1918 - v1919 * v293[1];
                  do
                  {
                    if (v1913)
                    {
                      uint64_t v1923 = 0;
                      uint64_t v1924 = v1911 + 4 * v1908;
                      do
                      {
                        if ((int)v466 >= 1)
                        {
                          uint64_t v1925 = 0;
                          float v1926 = *(float *)(v1910 + 4 * v1909);
                          unsigned int v1927 = v466 + 1;
                          do
                          {
                            float v1928 = *(float *)(v1924 + v1925);
                            if (v1926 < v1928) {
                              float v1928 = v1926;
                            }
                            *(float *)(v1912 + v1925) = v1928;
                            --v1927;
                            v1925 += 4;
                          }
                          while (v1927 > 1);
                        }
                        v1909 += v1916;
                        v1908 += v1919;
                        v1912 += 4 * (int)v466;
                        ++v1923;
                        v1924 += 4 * v1919;
                      }
                      while (v1923 != v1920);
                    }
                    v1909 += v1921;
                    v1908 += v1922;
                    ++v1907;
                  }
                  while (v1907 != v1906);
                }
              }
              else if (v221 == 1)
              {
                uint64_t v1192 = *v216;
                if (v1192)
                {
                  uint64_t v1193 = 0;
                  uint64_t v1194 = 0;
                  uint64_t v1195 = v215[19];
                  uint64_t v1196 = v292[19];
                  uint64_t v1197 = v214[19];
                  uint64_t v1198 = *(void *)v215[3];
                  uint64_t v1199 = 4 * *(void *)v292[3];
                  do
                  {
                    if ((int)v466 >= 1)
                    {
                      uint64_t v1200 = 0;
                      float v1201 = *(float *)(v1195 + 4 * v1194);
                      unsigned int v1202 = v466 + 1;
                      do
                      {
                        float v1203 = *(float *)(v1196 + v1200);
                        if (v1201 < v1203) {
                          float v1203 = v1201;
                        }
                        *(float *)(v1197 + v1200) = v1203;
                        --v1202;
                        v1200 += 4;
                      }
                      while (v1202 > 1);
                    }
                    v1194 += v1198;
                    ++v1193;
                    v1197 += 4 * (int)v466;
                    v1196 += v1199;
                  }
                  while (v1193 != v1192);
                }
              }
              else
              {
                unint64_t v2059 = v214[6];
                if (v2059)
                {
                  unint64_t v2088 = 0;
                  uint64_t v1992 = v292[19];
                  uint64_t v2007 = v215[19];
                  uint64_t v1929 = v214[19];
                  do
                  {
                    uint64_t v1930 = 0;
                    if ((v218 & 0x80000000) == 0)
                    {
                      uint64_t v1931 = v215[3];
                      uint64_t v1932 = v218;
                      int v1933 = v2088;
                      do
                      {
                        ldiv_t v1934 = ldiv(v1933, v216[v1932]);
                        int v1933 = v1934.quot;
                        v1930 += *(void *)(v1931 + 8 * v1932--) * v1934.rem;
                      }
                      while (v1932 != -1);
                    }
                    uint64_t v1935 = v2094;
                    if ((v2094 & 0x80000000) != 0)
                    {
                      LODWORD(v1936) = 0;
                    }
                    else
                    {
                      uint64_t v1936 = 0;
                      uint64_t v1937 = v292[3];
                      int v1938 = v2088;
                      do
                      {
                        ldiv_t v1939 = ldiv(v1938, v293[v1935]);
                        int v1938 = v1939.quot;
                        v1936 += *(void *)(v1937 + 8 * v1935--) * v1939.rem;
                      }
                      while (v1935 != -1);
                    }
                    uint64_t v218 = v2112;
                    if ((int)v466 >= 1)
                    {
                      uint64_t v1940 = 0;
                      float v1941 = *(float *)(v2007 + 4 * (int)v1930);
                      unsigned int v1942 = v466 + 1;
                      do
                      {
                        float v1943 = *(float *)(v1992 + 4 * (int)v1936 + v1940);
                        if (v1941 < v1943) {
                          float v1943 = v1941;
                        }
                        *(float *)(v1929 + v1940) = v1943;
                        --v1942;
                        v1940 += 4;
                      }
                      while (v1942 > 1);
                    }
                    v1929 += 4 * (int)v466;
                    v2088 += (int)v466;
                  }
                  while (v2088 < v2059);
                }
              }
              break;
            case 2:
              if (v221 == 2)
              {
                uint64_t v1944 = *v216;
                if (v1944)
                {
                  uint64_t v1945 = 0;
                  uint64_t v1946 = 0;
                  uint64_t v1947 = 0;
                  uint64_t v1948 = v215[19];
                  uint64_t v1949 = v292[19];
                  uint64_t v1950 = v214[19];
                  unint64_t v1951 = v216[1];
                  uint64_t v1952 = (uint64_t *)v215[3];
                  uint64_t v1953 = *v1952;
                  uint64_t v1954 = v1952[1];
                  uint64_t v1955 = (uint64_t *)v292[3];
                  uint64_t v1956 = *v1955;
                  uint64_t v1957 = v1955[1];
                  if (v1951 <= 1) {
                    uint64_t v1958 = 1;
                  }
                  else {
                    uint64_t v1958 = v216[1];
                  }
                  uint64_t v1959 = v1953 - v1954 * v1951;
                  uint64_t v1960 = v1956 - v1957 * v293[1];
                  do
                  {
                    if (v1951)
                    {
                      uint64_t v1961 = 0;
                      uint64_t v1962 = v1948 + 4 * v1947;
                      do
                      {
                        if ((int)v466 >= 1)
                        {
                          uint64_t v1963 = 0;
                          float v1964 = *(float *)(v1949 + 4 * v1946);
                          unsigned int v1965 = v466 + 1;
                          do
                          {
                            float v1966 = *(float *)(v1962 + v1963);
                            if (v1966 >= v1964) {
                              float v1966 = v1964;
                            }
                            *(float *)(v1950 + v1963) = v1966;
                            --v1965;
                            v1963 += 4;
                          }
                          while (v1965 > 1);
                        }
                        v1947 += v1954;
                        v1946 += v1957;
                        v1950 += 4 * (int)v466;
                        ++v1961;
                        v1962 += 4 * v1954;
                      }
                      while (v1961 != v1958);
                    }
                    v1947 += v1959;
                    v1946 += v1960;
                    ++v1945;
                  }
                  while (v1945 != v1944);
                }
              }
              else if (v221 == 1)
              {
                uint64_t v1204 = *v216;
                if (v1204)
                {
                  uint64_t v1205 = 0;
                  uint64_t v1206 = 0;
                  uint64_t v1207 = v215[19];
                  uint64_t v1208 = v292[19];
                  uint64_t v1209 = v214[19];
                  uint64_t v1210 = *(void *)v292[3];
                  uint64_t v1211 = 4 * *(void *)v215[3];
                  do
                  {
                    if ((int)v466 >= 1)
                    {
                      uint64_t v1212 = 0;
                      float v1213 = *(float *)(v1208 + 4 * v1206);
                      unsigned int v1214 = v466 + 1;
                      do
                      {
                        float v1215 = *(float *)(v1207 + v1212);
                        if (v1215 >= v1213) {
                          float v1215 = v1213;
                        }
                        *(float *)(v1209 + v1212) = v1215;
                        --v1214;
                        v1212 += 4;
                      }
                      while (v1214 > 1);
                    }
                    v1206 += v1210;
                    ++v1205;
                    v1209 += 4 * (int)v466;
                    v1207 += v1211;
                  }
                  while (v1205 != v1204);
                }
              }
              else
              {
                unint64_t v2060 = v214[6];
                if (v2060)
                {
                  unint64_t v2089 = 0;
                  uint64_t v1993 = v292[19];
                  uint64_t v2008 = v215[19];
                  uint64_t v1967 = v214[19];
                  do
                  {
                    uint64_t v1968 = 0;
                    if ((v218 & 0x80000000) == 0)
                    {
                      uint64_t v1969 = v215[3];
                      uint64_t v1970 = v218;
                      int v1971 = v2089;
                      do
                      {
                        ldiv_t v1972 = ldiv(v1971, v216[v1970]);
                        int v1971 = v1972.quot;
                        v1968 += *(void *)(v1969 + 8 * v1970--) * v1972.rem;
                      }
                      while (v1970 != -1);
                    }
                    uint64_t v1973 = v2094;
                    if ((v2094 & 0x80000000) != 0)
                    {
                      LODWORD(v1974) = 0;
                    }
                    else
                    {
                      uint64_t v1974 = 0;
                      uint64_t v1975 = v292[3];
                      int v1976 = v2089;
                      do
                      {
                        ldiv_t v1977 = ldiv(v1976, v293[v1973]);
                        int v1976 = v1977.quot;
                        v1974 += *(void *)(v1975 + 8 * v1973--) * v1977.rem;
                      }
                      while (v1973 != -1);
                    }
                    uint64_t v218 = v2112;
                    if ((int)v466 >= 1)
                    {
                      uint64_t v1978 = 0;
                      float v1979 = *(float *)(v1993 + 4 * (int)v1974);
                      unsigned int v1980 = v466 + 1;
                      do
                      {
                        float v1981 = *(float *)(v2008 + 4 * (int)v1968 + v1978);
                        if (v1981 >= v1979) {
                          float v1981 = v1979;
                        }
                        *(float *)(v1967 + v1978) = v1981;
                        --v1980;
                        v1978 += 4;
                      }
                      while (v1980 > 1);
                    }
                    v1967 += 4 * (int)v466;
                    v2089 += (int)v466;
                  }
                  while (v2089 < v2060);
                }
              }
              break;
            case 3:
              if (v221 == 2)
              {
                uint64_t v1430 = *v216;
                if (v1430)
                {
                  uint64_t v1431 = 0;
                  uint64_t v1432 = 0;
                  uint64_t v1433 = 0;
                  uint64_t v1434 = v215[19];
                  uint64_t v1435 = v292[19];
                  uint64_t v1436 = v214[19];
                  unint64_t v1437 = v216[1];
                  uint64_t v1438 = (uint64_t *)v215[3];
                  uint64_t v1439 = *v1438;
                  uint64_t v1440 = v1438[1];
                  uint64_t v1441 = (uint64_t *)v292[3];
                  uint64_t v1442 = *v1441;
                  uint64_t v1443 = v1441[1];
                  if (v1437 <= 1) {
                    uint64_t v1444 = 1;
                  }
                  else {
                    uint64_t v1444 = v216[1];
                  }
                  uint64_t v1445 = v1439 - v1440 * v1437;
                  uint64_t v1446 = v1442 - v1443 * v293[1];
                  do
                  {
                    if (v1437)
                    {
                      uint64_t v1447 = 0;
                      uint64_t v1448 = v1435 + 4 * v1432;
                      uint64_t v1449 = v1434 + 4 * v1433;
                      do
                      {
                        if ((int)v466 >= 1)
                        {
                          uint64_t v1450 = 0;
                          unsigned int v1451 = v466 + 1;
                          do
                          {
                            float v1452 = *(float *)(v1449 + v1450);
                            if (v1452 >= *(float *)(v1448 + v1450)) {
                              float v1452 = *(float *)(v1448 + v1450);
                            }
                            *(float *)(v1436 + v1450) = v1452;
                            --v1451;
                            v1450 += 4;
                          }
                          while (v1451 > 1);
                        }
                        v1433 += v1440;
                        v1432 += v1443;
                        v1436 += 4 * (int)v466;
                        ++v1447;
                        v1448 += 4 * v1443;
                        v1449 += 4 * v1440;
                      }
                      while (v1447 != v1444);
                    }
                    v1433 += v1445;
                    v1432 += v1446;
                    ++v1431;
                  }
                  while (v1431 != v1430);
                }
              }
              else if (v221 == 1)
              {
                uint64_t v467 = *v216;
                if (v467)
                {
                  uint64_t v468 = 0;
                  uint64_t v469 = v215[19];
                  uint64_t v470 = v292[19];
                  uint64_t v471 = v214[19];
                  uint64_t v472 = 4 * *(void *)v292[3];
                  uint64_t v473 = 4 * *(void *)v215[3];
                  do
                  {
                    if ((int)v466 >= 1)
                    {
                      uint64_t v474 = 0;
                      unsigned int v475 = v466 + 1;
                      do
                      {
                        float v476 = *(float *)(v469 + v474);
                        if (v476 >= *(float *)(v470 + v474)) {
                          float v476 = *(float *)(v470 + v474);
                        }
                        *(float *)(v471 + v474) = v476;
                        --v475;
                        v474 += 4;
                      }
                      while (v475 > 1);
                    }
                    ++v468;
                    v471 += 4 * (int)v466;
                    v470 += v472;
                    v469 += v473;
                  }
                  while (v468 != v467);
                }
              }
              else
              {
                unint64_t v2046 = v214[6];
                if (v2046)
                {
                  unint64_t v2075 = 0;
                  uint64_t v1985 = v292[19];
                  uint64_t v1998 = v215[19];
                  uint64_t v1453 = v214[19];
                  do
                  {
                    uint64_t v1454 = 0;
                    if ((v218 & 0x80000000) == 0)
                    {
                      uint64_t v1455 = v215[3];
                      uint64_t v1456 = v218;
                      int v1457 = v2075;
                      do
                      {
                        ldiv_t v1458 = ldiv(v1457, v216[v1456]);
                        int v1457 = v1458.quot;
                        v1454 += *(void *)(v1455 + 8 * v1456--) * v1458.rem;
                      }
                      while (v1456 != -1);
                    }
                    uint64_t v1459 = v2094;
                    if ((v2094 & 0x80000000) != 0)
                    {
                      LODWORD(v1460) = 0;
                    }
                    else
                    {
                      uint64_t v1460 = 0;
                      uint64_t v1461 = v292[3];
                      int v1462 = v2075;
                      do
                      {
                        ldiv_t v1463 = ldiv(v1462, v293[v1459]);
                        int v1462 = v1463.quot;
                        v1460 += *(void *)(v1461 + 8 * v1459--) * v1463.rem;
                      }
                      while (v1459 != -1);
                    }
                    uint64_t v218 = v2112;
                    if ((int)v466 >= 1)
                    {
                      uint64_t v1464 = 0;
                      uint64_t v1465 = v1985 + 4 * (int)v1460;
                      unsigned int v1466 = v466 + 1;
                      do
                      {
                        float v1467 = *(float *)(v1998 + 4 * (int)v1454 + v1464);
                        if (v1467 >= *(float *)(v1465 + v1464)) {
                          float v1467 = *(float *)(v1465 + v1464);
                        }
                        *(float *)(v1453 + v1464) = v1467;
                        --v1466;
                        v1464 += 4;
                      }
                      while (v1466 > 1);
                    }
                    v1453 += 4 * (int)v466;
                    v2075 += (int)v466;
                  }
                  while (v2075 < v2046);
                }
              }
              break;
            default:
LABEL_618:
              switch(v462)
              {
                case 1uLL:
                  uint64_t v477 = v214[6];
                  if (v477)
                  {
                    float v478 = (float *)v215[19];
                    uint64_t v479 = (float *)v292[19];
                    uint64_t v480 = (float *)v214[19];
                    uint64_t v481 = 4 * *(void *)v292[3];
                    uint64_t v482 = 4 * *(void *)v215[3];
                    do
                    {
                      float v483 = *v478;
                      if (*v478 >= *v479) {
                        float v483 = *v479;
                      }
                      *v480++ = v483;
                      uint64_t v479 = (float *)((char *)v479 + v481);
                      float v478 = (float *)((char *)v478 + v482);
                      --v477;
                    }
                    while (v477);
                  }
                  break;
                case 2uLL:
                  uint64_t v978 = *v216;
                  if (v978)
                  {
                    uint64_t v979 = 0;
                    uint64_t v980 = 0;
                    uint64_t v981 = 0;
                    uint64_t v982 = 0;
                    uint64_t v983 = v215[19];
                    uint64_t v984 = v292[19];
                    uint64_t v985 = v214[19];
                    unint64_t v986 = v216[1];
                    uint64_t v987 = (uint64_t *)v215[3];
                    uint64_t v988 = *v987;
                    uint64_t v989 = v987[1];
                    uint64_t v990 = (uint64_t *)v292[3];
                    uint64_t v991 = *v990;
                    uint64_t v992 = v990[1];
                    uint64_t v993 = v991 - v992 * v293[1];
                    if (v986 <= 1) {
                      uint64_t v994 = 1;
                    }
                    else {
                      uint64_t v994 = v216[1];
                    }
                    uint64_t v995 = v988 - v989 * v986;
                    do
                    {
                      if (v986)
                      {
                        uint64_t v996 = v980 + v994;
                        uint64_t v997 = (float *)(v985 + 4 * v980);
                        uint64_t v998 = v994;
                        do
                        {
                          float v999 = *(float *)(v983 + 4 * v982);
                          if (v999 >= *(float *)(v984 + 4 * v981)) {
                            float v999 = *(float *)(v984 + 4 * v981);
                          }
                          *v997++ = v999;
                          v982 += v989;
                          v981 += v992;
                          --v998;
                        }
                        while (v998);
                        uint64_t v980 = v996;
                      }
                      v982 += v995;
                      v981 += v993;
                      ++v979;
                    }
                    while (v979 != v978);
                  }
                  break;
                case 3uLL:
                  uint64_t v1000 = *v216;
                  if (v1000)
                  {
                    uint64_t v1001 = 0;
                    uint64_t v1002 = 0;
                    uint64_t v1003 = 0;
                    uint64_t v1004 = 0;
                    uint64_t v1005 = v215[19];
                    uint64_t v1006 = v292[19];
                    uint64_t v1007 = v214[19];
                    unint64_t v1008 = v216[1];
                    uint64_t v1009 = (void *)v215[3];
                    uint64_t v1010 = v1009[1];
                    uint64_t v1011 = (void *)v292[3];
                    uint64_t v1012 = v1011[1];
                    uint64_t v1013 = *v1011 - v1012 * v293[1];
                    if (v1008 <= 1) {
                      uint64_t v1014 = 1;
                    }
                    else {
                      uint64_t v1014 = v216[1];
                    }
                    unint64_t v1015 = *v1009 - v1010 * v1008;
                    do
                    {
                      if (v1008)
                      {
                        uint64_t v1016 = 0;
                        unint64_t v1017 = v216[2];
                        uint64_t v1018 = v1009[2];
                        uint64_t v1019 = v1011[2];
                        if (v1017 <= 1) {
                          uint64_t v1020 = 1;
                        }
                        else {
                          uint64_t v1020 = v216[2];
                        }
                        uint64_t v1021 = v1012 - v1019 * v293[2];
                        do
                        {
                          uint64_t v1022 = v1020;
                          if (v1017)
                          {
                            do
                            {
                              float v1023 = *(float *)(v1005 + 4 * v1004);
                              if (v1023 >= *(float *)(v1006 + 4 * v1003)) {
                                float v1023 = *(float *)(v1006 + 4 * v1003);
                              }
                              *(float *)(v1007 + 4 * v1002++) = v1023;
                              v1004 += v1018;
                              v1003 += v1019;
                              --v1022;
                            }
                            while (v1022);
                          }
                          v1004 += v1010 - v1018 * v1017;
                          v1003 += v1021;
                          ++v1016;
                        }
                        while (v1016 != v1014);
                      }
                      v1004 += v1015;
                      v1003 += v1013;
                      ++v1001;
                    }
                    while (v1001 != v1000);
                  }
                  break;
                case 4uLL:
                  uint64_t v2117 = *v216;
                  if (v2117)
                  {
                    uint64_t v1024 = 0;
                    uint64_t v1025 = 0;
                    uint64_t v1026 = 0;
                    uint64_t v1027 = 0;
                    uint64_t v1028 = v215[19];
                    uint64_t v1029 = v292[19];
                    uint64_t v1030 = v214[19];
                    unint64_t v1031 = v216[1];
                    unint64_t v1032 = (void *)v215[3];
                    uint64_t v1033 = (void *)v292[3];
                    uint64_t v2039 = v1033[1];
                    uint64_t v2068 = v1032[1];
                    uint64_t v2099 = *v1033 - v2039 * v293[1];
                    if (v1031 <= 1) {
                      uint64_t v1034 = 1;
                    }
                    else {
                      uint64_t v1034 = v216[1];
                    }
                    unint64_t v1035 = *v1032 - v1032[1] * v1031;
                    do
                    {
                      if (v1031)
                      {
                        uint64_t v1036 = 0;
                        unint64_t v1037 = v216[2];
                        uint64_t v1038 = v1032[2];
                        uint64_t v1039 = v1033[2];
                        if (v1037 <= 1) {
                          uint64_t v1040 = 1;
                        }
                        else {
                          uint64_t v1040 = v216[2];
                        }
                        uint64_t v1041 = v2039 - v1039 * v293[2];
                        do
                        {
                          if (v1037)
                          {
                            uint64_t v1042 = 0;
                            unint64_t v1043 = v216[3];
                            uint64_t v1044 = v1032[3];
                            uint64_t v1045 = v1033[3];
                            if (v1043 <= 1) {
                              uint64_t v1046 = 1;
                            }
                            else {
                              uint64_t v1046 = v216[3];
                            }
                            uint64_t v1047 = v1039 - v1045 * v293[3];
                            do
                            {
                              uint64_t v1048 = v1046;
                              if (v1043)
                              {
                                do
                                {
                                  float v1049 = *(float *)(v1028 + 4 * v1027);
                                  if (v1049 >= *(float *)(v1029 + 4 * v1026)) {
                                    float v1049 = *(float *)(v1029 + 4 * v1026);
                                  }
                                  *(float *)(v1030 + 4 * v1025++) = v1049;
                                  v1027 += v1044;
                                  v1026 += v1045;
                                  --v1048;
                                }
                                while (v1048);
                              }
                              v1027 += v1038 - v1044 * v1043;
                              v1026 += v1047;
                              ++v1042;
                            }
                            while (v1042 != v1040);
                          }
                          v1027 += v2068 - v1038 * v1037;
                          v1026 += v1041;
                          ++v1036;
                        }
                        while (v1036 != v1034);
                      }
                      v1027 += v1035;
                      v1026 += v2099;
                      ++v1024;
                    }
                    while (v1024 != v2117);
                  }
                  break;
                default:
                  uint64_t v965 = v214[6];
                  if (v965)
                  {
                    uint64_t v966 = 0;
                    uint64_t v2038 = v292[19];
                    uint64_t v2067 = v215[19];
                    uint64_t v2025 = v214[19];
                    do
                    {
                      uint64_t v967 = 0;
                      if ((v218 & 0x80000000) == 0)
                      {
                        uint64_t v968 = v215[3];
                        uint64_t v969 = v218;
                        int v970 = v966;
                        do
                        {
                          ldiv_t v971 = ldiv(v970, v216[v969]);
                          int v970 = v971.quot;
                          v967 += *(void *)(v968 + 8 * v969--) * v971.rem;
                        }
                        while (v969 != -1);
                      }
                      uint64_t v972 = v2094;
                      if ((v2094 & 0x80000000) != 0)
                      {
                        LODWORD(v973) = 0;
                      }
                      else
                      {
                        uint64_t v973 = 0;
                        uint64_t v974 = v292[3];
                        int v975 = v966;
                        do
                        {
                          ldiv_t v976 = ldiv(v975, v293[v972]);
                          int v975 = v976.quot;
                          v973 += *(void *)(v974 + 8 * v972--) * v976.rem;
                        }
                        while (v972 != -1);
                      }
                      float v977 = *(float *)(v2067 + 4 * (int)v967);
                      if (v977 >= *(float *)(v2038 + 4 * (int)v973)) {
                        float v977 = *(float *)(v2038 + 4 * (int)v973);
                      }
                      *(float *)(v2025 + 4 * v966++) = v977;
                      uint64_t v218 = v2112;
                    }
                    while (v966 != v965);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::Multiply::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Multiply::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::Multiply>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          char v8 = !v7;
          goto LABEL_21;
        case 1:
          int v36 = *(_DWORD *)(*a2 + 160);
          if (v36 >= 1)
          {
            int v37 = **(unsigned __int8 **)(*a1 + 152);
            int v38 = *(char **)(*(void *)a3 + 152);
            unint64_t v39 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v40 = v36 + 1;
            do
            {
              int v42 = *v39++;
              int v41 = v42;
              if (v37) {
                BOOL v43 = v41 == 0;
              }
              else {
                BOOL v43 = 1;
              }
              char v44 = !v43;
              *v38++ = v44;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 2:
          int v45 = *(_DWORD *)(*a1 + 160);
          if (v45 >= 1)
          {
            int v46 = **(unsigned __int8 **)(*a2 + 152);
            int v47 = *(char **)(*(void *)a3 + 152);
            unsigned int v48 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v49 = v45 + 1;
            do
            {
              int v51 = *v48++;
              int v50 = v51;
              if (v46) {
                BOOL v52 = v50 == 0;
              }
              else {
                BOOL v52 = 1;
              }
              char v53 = !v52;
              *v47++ = v53;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        case 3:
          int v54 = *(_DWORD *)(*(void *)a3 + 48);
          if (v54 >= 1)
          {
            char v55 = *(char **)(*(void *)a3 + 152);
            uint64_t v56 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v57 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v58 = v54 + 1;
            do
            {
              int v59 = *v57++;
              BOOL v7 = v59 == 0;
              int v61 = *v56++;
              int v60 = v61;
              char v63 = !v7 && v60 != 0;
              *v55++ = v63;
              --v58;
            }
            while (v58 > 1);
          }
          return;
        default:
          unsigned int v27 = *(void **)a3;
          int v28 = (void *)*a1;
          int v29 = *(int **)*a1;
          uint64_t v30 = (v28[1] - (void)v29) >> 2;
          uint64_t v31 = (v30 - 1);
          if ((int)v31 >= -1) {
            int v32 = -1;
          }
          else {
            int v32 = v30 - 1;
          }
          int v33 = v32 + 1;
          int v34 = v30 + 1;
          break;
      }
      while (1)
      {
        unsigned int v35 = v34 - 2;
        if (v34 - 2 < 0) {
          break;
        }
        --v34;
        if (*(void *)(v28[3] + 8 * v35) != *(void *)(v27[3] + 8 * v35)) {
          goto LABEL_170;
        }
      }
      int v34 = v33;
LABEL_170:
      float v224 = (void *)*a2;
      float v225 = *(int **)*a2;
      uint64_t v226 = (v224[1] - (void)v225) >> 2;
      uint64_t v227 = (v226 - 1);
      if ((int)v227 >= -1) {
        int v228 = -1;
      }
      else {
        int v228 = v226 - 1;
      }
      int v229 = v228 + 1;
      int v230 = v226 + 1;
      while (1)
      {
        unsigned int v231 = v230 - 2;
        if (v230 - 2 < 0) {
          break;
        }
        --v230;
        if (*(void *)(v224[3] + 8 * v231) != *(void *)(v27[3] + 8 * v231)) {
          goto LABEL_224;
        }
      }
      int v230 = v229;
LABEL_224:
      int v278 = v30 + 1;
      while (1)
      {
        unsigned int v279 = v278 - 2;
        if (v278 - 2 < 0) {
          break;
        }
        --v278;
        if (*(void *)(v28[3] + 8 * v279)) {
          goto LABEL_259;
        }
      }
      int v278 = v33;
LABEL_259:
      int v292 = v226 + 1;
      while (1)
      {
        unsigned int v293 = v292 - 2;
        if (v292 - 2 < 0) {
          break;
        }
        --v292;
        if (*(void *)(v224[3] + 8 * v293)) {
          goto LABEL_294;
        }
      }
      int v292 = v229;
LABEL_294:
      unint64_t v306 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v230) {
        int v307 = v230;
      }
      else {
        int v307 = v34;
      }
      if (v34 <= v292) {
        int v34 = v292;
      }
      if (v278 > v230) {
        int v230 = v278;
      }
      if (v306 > v230)
      {
        int v308 = 1;
      }
      else
      {
        int v230 = (uint64_t)(v27[1] - *v27) >> 2;
        int v308 = 4;
      }
      if (v306 > v34)
      {
        int v309 = 2;
      }
      else
      {
        int v34 = v230;
        int v309 = v308;
      }
      if (v306 > v307)
      {
        int v34 = v307;
        int v309 = 3;
      }
      uint64_t v1980 = v227;
      uint64_t v1996 = v31;
      if (!v34) {
        goto LABEL_329;
      }
      unint64_t v310 = *(void *)(v27[3] + 8 * (v34 - 1));
      if (v310 < 0x10) {
        goto LABEL_329;
      }
      switch(v309)
      {
        case 1:
          if (v34 == 2)
          {
            uint64_t v1382 = *v29;
            if (v1382)
            {
              uint64_t v1383 = 0;
              uint64_t v1384 = 0;
              uint64_t v1385 = 0;
              uint64_t v1386 = v28[19];
              uint64_t v1387 = v224[19];
              uint64_t v1388 = v27[19];
              unint64_t v1389 = v29[1];
              unsigned int v1390 = (uint64_t *)v28[3];
              uint64_t v1391 = *v1390;
              uint64_t v1392 = v1390[1];
              uint64_t v1393 = (uint64_t *)v224[3];
              uint64_t v1395 = *v1393;
              uint64_t v1394 = v1393[1];
              if (v1389 <= 1) {
                uint64_t v1396 = 1;
              }
              else {
                uint64_t v1396 = v29[1];
              }
              uint64_t v1397 = v1391 - v1392 * v1389;
              uint64_t v1398 = v1395 - v1394 * v225[1];
              do
              {
                if (v1389)
                {
                  uint64_t v1399 = 0;
                  uint64_t v1400 = v1387 + v1384;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1401 = 0;
                      int v1402 = *(unsigned __int8 *)(v1386 + v1385);
                      unsigned int v1403 = v310 + 1;
                      do
                      {
                        if (v1402) {
                          BOOL v1404 = *(unsigned char *)(v1400 + v1401) == 0;
                        }
                        else {
                          BOOL v1404 = 1;
                        }
                        char v1405 = !v1404;
                        *(unsigned char *)(v1388 + v1401) = v1405;
                        --v1403;
                        ++v1401;
                      }
                      while (v1403 > 1);
                    }
                    v1385 += v1392;
                    v1384 += v1394;
                    v1388 += (int)v310;
                    ++v1399;
                    v1400 += v1394;
                  }
                  while (v1399 != v1396);
                }
                v1385 += v1397;
                v1384 += v1398;
                ++v1383;
              }
              while (v1383 != v1382);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v992 = *v29;
            if (v992)
            {
              uint64_t v993 = 0;
              uint64_t v994 = 0;
              uint64_t v995 = v28[19];
              uint64_t v996 = v224[19];
              uint64_t v997 = v27[19];
              uint64_t v998 = *(void *)v28[3];
              uint64_t v999 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v1000 = 0;
                  int v1001 = *(unsigned __int8 *)(v995 + v994);
                  unsigned int v1002 = v310 + 1;
                  do
                  {
                    if (v1001) {
                      BOOL v1003 = *(unsigned char *)(v996 + v1000) == 0;
                    }
                    else {
                      BOOL v1003 = 1;
                    }
                    char v1004 = !v1003;
                    *(unsigned char *)(v997 + v1000) = v1004;
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                }
                v994 += v998;
                v997 += (int)v310;
                ++v993;
                v996 += v999;
              }
              while (v993 != v992);
            }
          }
          else
          {
            unint64_t v1937 = v27[6];
            if (v1937)
            {
              unint64_t v1966 = 0;
              uint64_t v1889 = v224[19];
              uint64_t v1903 = v28[19];
              uint64_t v1406 = v27[19];
              do
              {
                uint64_t v1407 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1408 = v28[3];
                  int quot = v1966;
                  do
                  {
                    ldiv_t v1410 = ldiv(quot, v29[v31]);
                    int quot = v1410.quot;
                    v1407 += *(void *)(v1408 + 8 * v31--) * v1410.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1411 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1412) = 0;
                }
                else
                {
                  uint64_t v1412 = 0;
                  uint64_t v1413 = v224[3];
                  int v1414 = v1966;
                  do
                  {
                    ldiv_t v1415 = ldiv(v1414, v225[v1411]);
                    int v1414 = v1415.quot;
                    v1412 += *(void *)(v1413 + 8 * v1411--) * v1415.rem;
                  }
                  while (v1411 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1416 = 0;
                  int v1417 = *(unsigned __int8 *)(v1903 + (int)v1407);
                  unsigned int v1418 = v310 + 1;
                  do
                  {
                    if (v1417) {
                      BOOL v1419 = *(unsigned char *)(v1889 + (int)v1412 + v1416) == 0;
                    }
                    else {
                      BOOL v1419 = 1;
                    }
                    char v1420 = !v1419;
                    *(unsigned char *)(v1406 + v1416) = v1420;
                    --v1418;
                    ++v1416;
                  }
                  while (v1418 > 1);
                }
                v1406 += (int)v310;
                v1966 += (int)v310;
              }
              while (v1966 < v1937);
            }
          }
          break;
        case 2:
          if (v34 == 2)
          {
            uint64_t v1421 = *v29;
            if (v1421)
            {
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = 0;
              uint64_t v1425 = v28[19];
              uint64_t v1426 = v224[19];
              uint64_t v1427 = v27[19];
              unint64_t v1428 = v29[1];
              uint64_t v1429 = (uint64_t *)v28[3];
              uint64_t v1430 = *v1429;
              uint64_t v1431 = v1429[1];
              uint64_t v1432 = (uint64_t *)v224[3];
              uint64_t v1434 = *v1432;
              uint64_t v1433 = v1432[1];
              if (v1428 <= 1) {
                uint64_t v1435 = 1;
              }
              else {
                uint64_t v1435 = v29[1];
              }
              uint64_t v1436 = v1430 - v1431 * v1428;
              uint64_t v1437 = v1434 - v1433 * v225[1];
              do
              {
                if (v1428)
                {
                  uint64_t v1438 = 0;
                  uint64_t v1439 = v1425 + v1424;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1440 = 0;
                      int v1441 = *(unsigned __int8 *)(v1426 + v1423);
                      unsigned int v1442 = v310 + 1;
                      do
                      {
                        if (v1441) {
                          BOOL v1443 = *(unsigned char *)(v1439 + v1440) == 0;
                        }
                        else {
                          BOOL v1443 = 1;
                        }
                        char v1444 = !v1443;
                        *(unsigned char *)(v1427 + v1440) = v1444;
                        --v1442;
                        ++v1440;
                      }
                      while (v1442 > 1);
                    }
                    v1424 += v1431;
                    v1423 += v1433;
                    v1427 += (int)v310;
                    ++v1438;
                    v1439 += v1431;
                  }
                  while (v1438 != v1435);
                }
                v1424 += v1436;
                v1423 += v1437;
                ++v1422;
              }
              while (v1422 != v1421);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v1005 = *v29;
            if (v1005)
            {
              uint64_t v1006 = 0;
              uint64_t v1007 = 0;
              uint64_t v1008 = v28[19];
              uint64_t v1009 = v224[19];
              uint64_t v1010 = v27[19];
              uint64_t v1011 = *(void *)v28[3];
              uint64_t v1012 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v1013 = 0;
                  int v1014 = *(unsigned __int8 *)(v1009 + v1007);
                  unsigned int v1015 = v310 + 1;
                  do
                  {
                    if (v1014) {
                      BOOL v1016 = *(unsigned char *)(v1008 + v1013) == 0;
                    }
                    else {
                      BOOL v1016 = 1;
                    }
                    char v1017 = !v1016;
                    *(unsigned char *)(v1010 + v1013) = v1017;
                    --v1015;
                    ++v1013;
                  }
                  while (v1015 > 1);
                }
                v1007 += v1012;
                v1010 += (int)v310;
                ++v1006;
                v1008 += v1011;
              }
              while (v1006 != v1005);
            }
          }
          else
          {
            unint64_t v1938 = v27[6];
            if (v1938)
            {
              unint64_t v1967 = 0;
              uint64_t v1890 = v224[19];
              uint64_t v1904 = v28[19];
              uint64_t v1445 = v27[19];
              do
              {
                uint64_t v1446 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1447 = v28[3];
                  int v1448 = v1967;
                  do
                  {
                    ldiv_t v1449 = ldiv(v1448, v29[v31]);
                    int v1448 = v1449.quot;
                    v1446 += *(void *)(v1447 + 8 * v31--) * v1449.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1450 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1451) = 0;
                }
                else
                {
                  uint64_t v1451 = 0;
                  uint64_t v1452 = v224[3];
                  int v1453 = v1967;
                  do
                  {
                    ldiv_t v1454 = ldiv(v1453, v225[v1450]);
                    int v1453 = v1454.quot;
                    v1451 += *(void *)(v1452 + 8 * v1450--) * v1454.rem;
                  }
                  while (v1450 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1455 = 0;
                  int v1456 = *(unsigned __int8 *)(v1890 + (int)v1451);
                  unsigned int v1457 = v310 + 1;
                  do
                  {
                    if (v1456) {
                      BOOL v1458 = *(unsigned char *)(v1904 + (int)v1446 + v1455) == 0;
                    }
                    else {
                      BOOL v1458 = 1;
                    }
                    char v1459 = !v1458;
                    *(unsigned char *)(v1445 + v1455) = v1459;
                    --v1457;
                    ++v1455;
                  }
                  while (v1457 > 1);
                }
                v1445 += (int)v310;
                v1967 += (int)v310;
              }
              while (v1967 < v1938);
            }
          }
          break;
        case 3:
          if (v34 == 2)
          {
            uint64_t v1146 = *v29;
            if (v1146)
            {
              uint64_t v1147 = 0;
              uint64_t v1148 = 0;
              uint64_t v1149 = 0;
              uint64_t v1150 = v28[19];
              uint64_t v1151 = v224[19];
              uint64_t v1152 = v27[19];
              unint64_t v1153 = v29[1];
              unsigned int v1154 = (uint64_t *)v28[3];
              uint64_t v1155 = *v1154;
              uint64_t v1156 = v1154[1];
              unint64_t v1157 = (uint64_t *)v224[3];
              uint64_t v1159 = *v1157;
              uint64_t v1158 = v1157[1];
              if (v1153 <= 1) {
                uint64_t v1160 = 1;
              }
              else {
                uint64_t v1160 = v29[1];
              }
              uint64_t v1161 = v1155 - v1156 * v1153;
              uint64_t v1162 = v1159 - v1158 * v225[1];
              do
              {
                if (v1153)
                {
                  uint64_t v1163 = 0;
                  uint64_t v1164 = v1151 + v1148;
                  uint64_t v1165 = v1150 + v1149;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1166 = 0;
                      unsigned int v1167 = v310 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1165 + v1166)) {
                          BOOL v1168 = *(unsigned char *)(v1164 + v1166) == 0;
                        }
                        else {
                          BOOL v1168 = 1;
                        }
                        char v1169 = !v1168;
                        *(unsigned char *)(v1152 + v1166) = v1169;
                        --v1167;
                        ++v1166;
                      }
                      while (v1167 > 1);
                    }
                    v1149 += v1156;
                    v1148 += v1158;
                    v1152 += (int)v310;
                    ++v1163;
                    v1164 += v1158;
                    v1165 += v1156;
                  }
                  while (v1163 != v1160);
                }
                v1149 += v1161;
                v1148 += v1162;
                ++v1147;
              }
              while (v1147 != v1146);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v311 = *v29;
            if (v311)
            {
              uint64_t v312 = 0;
              uint64_t v313 = v28[19];
              uint64_t v314 = v224[19];
              uint64_t v315 = v27[19];
              uint64_t v316 = *(void *)v28[3];
              uint64_t v317 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v318 = 0;
                  unsigned int v319 = v310 + 1;
                  do
                  {
                    if (*(unsigned char *)(v313 + v318)) {
                      BOOL v320 = *(unsigned char *)(v314 + v318) == 0;
                    }
                    else {
                      BOOL v320 = 1;
                    }
                    char v321 = !v320;
                    *(unsigned char *)(v315 + v318) = v321;
                    --v319;
                    ++v318;
                  }
                  while (v319 > 1);
                }
                v315 += (int)v310;
                ++v312;
                v314 += v317;
                v313 += v316;
              }
              while (v312 != v311);
            }
          }
          else
          {
            unint64_t v1930 = v27[6];
            if (v1930)
            {
              unint64_t v1959 = 0;
              uint64_t v1884 = v224[19];
              uint64_t v1900 = v28[19];
              uint64_t v1170 = v27[19];
              do
              {
                uint64_t v1171 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1172 = v28[3];
                  int v1173 = v1959;
                  do
                  {
                    ldiv_t v1174 = ldiv(v1173, v29[v31]);
                    int v1173 = v1174.quot;
                    v1171 += *(void *)(v1172 + 8 * v31--) * v1174.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1175 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1176) = 0;
                }
                else
                {
                  uint64_t v1176 = 0;
                  uint64_t v1177 = v224[3];
                  int v1178 = v1959;
                  do
                  {
                    ldiv_t v1179 = ldiv(v1178, v225[v1175]);
                    int v1178 = v1179.quot;
                    v1176 += *(void *)(v1177 + 8 * v1175--) * v1179.rem;
                  }
                  while (v1175 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1180 = 0;
                  unsigned int v1181 = v310 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1900 + (int)v1171 + v1180)) {
                      BOOL v1182 = *(unsigned char *)(v1884 + (int)v1176 + v1180) == 0;
                    }
                    else {
                      BOOL v1182 = 1;
                    }
                    char v1183 = !v1182;
                    *(unsigned char *)(v1170 + v1180) = v1183;
                    --v1181;
                    ++v1180;
                  }
                  while (v1181 > 1);
                }
                v1170 += (int)v310;
                v1959 += (int)v310;
              }
              while (v1959 < v1930);
            }
          }
          break;
        default:
LABEL_329:
          switch(v306)
          {
            case 1uLL:
              uint64_t v322 = v27[6];
              if (v322)
              {
                unsigned int v323 = (unsigned char *)v28[19];
                int v324 = (unsigned char *)v224[19];
                unsigned int v325 = (char *)v27[19];
                uint64_t v326 = *(void *)v28[3];
                uint64_t v327 = *(void *)v224[3];
                do
                {
                  if (*v323) {
                    BOOL v328 = *v324 == 0;
                  }
                  else {
                    BOOL v328 = 1;
                  }
                  char v329 = !v328;
                  *v325++ = v329;
                  v324 += v327;
                  v323 += v326;
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              uint64_t v463 = *v29;
              if (v463)
              {
                uint64_t v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = v28[19];
                uint64_t v469 = v224[19];
                uint64_t v470 = v27[19];
                unint64_t v471 = v29[1];
                uint64_t v472 = (uint64_t *)v28[3];
                uint64_t v473 = *v472;
                uint64_t v474 = v472[1];
                unsigned int v475 = (uint64_t *)v224[3];
                uint64_t v476 = *v475;
                uint64_t v477 = v475[1];
                uint64_t v478 = v476 - v477 * v225[1];
                if (v471 <= 1) {
                  uint64_t v479 = 1;
                }
                else {
                  uint64_t v479 = v29[1];
                }
                uint64_t v480 = v473 - v474 * v471;
                do
                {
                  if (v471)
                  {
                    uint64_t v481 = v465 + v479;
                    uint64_t v482 = (char *)(v470 + v465);
                    uint64_t v483 = v479;
                    do
                    {
                      if (*(unsigned char *)(v468 + v467)) {
                        BOOL v484 = *(unsigned char *)(v469 + v466) == 0;
                      }
                      else {
                        BOOL v484 = 1;
                      }
                      char v485 = !v484;
                      *v482++ = v485;
                      v467 += v474;
                      v466 += v477;
                      --v483;
                    }
                    while (v483);
                    uint64_t v465 = v481;
                  }
                  v467 += v480;
                  v466 += v478;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            case 3uLL:
              uint64_t v486 = *v29;
              if (v486)
              {
                uint64_t v487 = 0;
                uint64_t v488 = 0;
                uint64_t v489 = 0;
                uint64_t v490 = 0;
                uint64_t v491 = v28[19];
                uint64_t v492 = v224[19];
                uint64_t v493 = v27[19];
                unint64_t v494 = v29[1];
                BOOL v495 = (void *)v28[3];
                uint64_t v496 = v495[1];
                uint64_t v497 = (void *)v224[3];
                uint64_t v498 = v497[1];
                uint64_t v499 = *v497 - v498 * v225[1];
                if (v494 <= 1) {
                  uint64_t v500 = 1;
                }
                else {
                  uint64_t v500 = v29[1];
                }
                unint64_t v501 = *v495 - v496 * v494;
                do
                {
                  if (v494)
                  {
                    uint64_t v502 = 0;
                    unint64_t v503 = v29[2];
                    uint64_t v504 = v495[2];
                    uint64_t v505 = v497[2];
                    if (v503 <= 1) {
                      uint64_t v506 = 1;
                    }
                    else {
                      uint64_t v506 = v29[2];
                    }
                    uint64_t v507 = v498 - v505 * v225[2];
                    do
                    {
                      uint64_t v508 = v506;
                      if (v503)
                      {
                        do
                        {
                          if (*(unsigned char *)(v491 + v490)) {
                            BOOL v509 = *(unsigned char *)(v492 + v489) == 0;
                          }
                          else {
                            BOOL v509 = 1;
                          }
                          char v510 = !v509;
                          *(unsigned char *)(v493 + v488++) = v510;
                          v490 += v504;
                          v489 += v505;
                          --v508;
                        }
                        while (v508);
                      }
                      v490 += v496 - v504 * v503;
                      v489 += v507;
                      ++v502;
                    }
                    while (v502 != v500);
                  }
                  v490 += v501;
                  v489 += v499;
                  ++v487;
                }
                while (v487 != v486);
              }
              break;
            case 4uLL:
              uint64_t v2003 = *v29;
              if (v2003)
              {
                uint64_t v511 = 0;
                uint64_t v512 = 0;
                uint64_t v513 = 0;
                uint64_t v514 = 0;
                uint64_t v515 = v28[19];
                uint64_t v516 = v224[19];
                uint64_t v517 = v27[19];
                unint64_t v518 = v29[1];
                char v519 = (void *)v28[3];
                uint64_t v520 = (void *)v224[3];
                uint64_t v1910 = v520[1];
                uint64_t v1923 = v519[1];
                if (v518 <= 1) {
                  uint64_t v521 = 1;
                }
                else {
                  uint64_t v521 = v29[1];
                }
                unint64_t v1952 = *v519 - v519[1] * v518;
                uint64_t v1985 = *v520 - v1910 * v225[1];
                do
                {
                  if (v518)
                  {
                    uint64_t v522 = 0;
                    unint64_t v523 = v29[2];
                    uint64_t v524 = v519[2];
                    uint64_t v525 = v520[2];
                    if (v523 <= 1) {
                      uint64_t v526 = 1;
                    }
                    else {
                      uint64_t v526 = v29[2];
                    }
                    uint64_t v527 = v1910 - v525 * v225[2];
                    do
                    {
                      if (v523)
                      {
                        uint64_t v528 = 0;
                        unint64_t v529 = v29[3];
                        uint64_t v530 = v519[3];
                        uint64_t v531 = v520[3];
                        if (v529 <= 1) {
                          uint64_t v532 = 1;
                        }
                        else {
                          uint64_t v532 = v29[3];
                        }
                        uint64_t v533 = v525 - v531 * v225[3];
                        do
                        {
                          uint64_t v534 = v532;
                          if (v529)
                          {
                            do
                            {
                              if (*(unsigned char *)(v515 + v514)) {
                                BOOL v535 = *(unsigned char *)(v516 + v513) == 0;
                              }
                              else {
                                BOOL v535 = 1;
                              }
                              char v536 = !v535;
                              *(unsigned char *)(v517 + v512++) = v536;
                              v514 += v530;
                              v513 += v531;
                              --v534;
                            }
                            while (v534);
                          }
                          v514 += v524 - v530 * v529;
                          v513 += v533;
                          ++v528;
                        }
                        while (v528 != v526);
                      }
                      v514 += v1923 - v524 * v523;
                      v513 += v527;
                      ++v522;
                    }
                    while (v522 != v521);
                  }
                  v514 += v1952;
                  v513 += v1985;
                  ++v511;
                }
                while (v511 != v2003);
              }
              break;
            default:
              uint64_t v450 = v27[6];
              if (v450)
              {
                uint64_t v451 = 0;
                uint64_t v1922 = v224[19];
                uint64_t v1951 = v28[19];
                uint64_t v1909 = v27[19];
                do
                {
                  uint64_t v452 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    uint64_t v453 = v28[3];
                    int v454 = v451;
                    do
                    {
                      ldiv_t v455 = ldiv(v454, v29[v31]);
                      int v454 = v455.quot;
                      v452 += *(void *)(v453 + 8 * v31--) * v455.rem;
                    }
                    while (v31 != -1);
                  }
                  uint64_t v456 = v1980;
                  if ((v1980 & 0x80000000) != 0)
                  {
                    LODWORD(v457) = 0;
                  }
                  else
                  {
                    uint64_t v457 = 0;
                    uint64_t v458 = v224[3];
                    int v459 = v451;
                    do
                    {
                      ldiv_t v460 = ldiv(v459, v225[v456]);
                      int v459 = v460.quot;
                      v457 += *(void *)(v458 + 8 * v456--) * v460.rem;
                    }
                    while (v456 != -1);
                  }
                  if (*(unsigned char *)(v1951 + (int)v452)) {
                    BOOL v461 = *(unsigned char *)(v1922 + (int)v457) == 0;
                  }
                  else {
                    BOOL v461 = 1;
                  }
                  char v462 = !v461;
                  *(unsigned char *)(v1909 + v451++) = v462;
                  uint64_t v31 = v1996;
                }
                while (v451 != v450);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          goto LABEL_20;
        case 1:
          int v10 = *(_DWORD *)(*a2 + 160);
          if (v10 >= 1)
          {
            char v11 = **(unsigned char **)(*a1 + 152);
            int v12 = *(unsigned char **)(*(void *)a3 + 152);
            int v13 = *(char **)(*a2 + 152);
            unsigned int v14 = v10 + 1;
            do
            {
              char v15 = *v13++;
              *v12++ = v15 * v11;
              --v14;
            }
            while (v14 > 1);
          }
          return;
        case 2:
          int v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            char v73 = **(unsigned char **)(*a2 + 152);
            unsigned int v74 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v75 = *(char **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              char v77 = *v75++;
              *v74++ = v77 * v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            unsigned int v79 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v80 = *(char **)(*a2 + 152);
            unsigned int v81 = *(char **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              char v84 = *v81++;
              char v83 = v84;
              char v85 = *v80++;
              *v79++ = v85 * v83;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          int v64 = *(void **)a3;
          uint64_t v65 = *a1;
          char v66 = *(int **)*a1;
          uint64_t v67 = (*(void *)(*a1 + 8) - (void)v66) >> 2;
          int v68 = v67 - 1;
          if ((int)v67 - 1 >= -1) {
            int v68 = -1;
          }
          int v69 = v68 + 1;
          int v70 = v67 + 1;
          break;
      }
      while (1)
      {
        unsigned int v71 = v70 - 2;
        if (v70 - 2 < 0) {
          break;
        }
        --v70;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v71) != *(void *)(v64[3] + 8 * v71)) {
          goto LABEL_178;
        }
      }
      int v70 = v69;
LABEL_178:
      float v232 = (int **)*a2;
      float v233 = *(int **)*a2;
      uint64_t v234 = (*(void *)(*a2 + 8) - (void)v233) >> 2;
      int v235 = v234 - 1;
      if ((int)v234 - 1 >= -1) {
        int v235 = -1;
      }
      int v236 = v235 + 1;
      int v237 = v234 + 1;
      while (1)
      {
        unsigned int v238 = v237 - 2;
        if (v237 - 2 < 0) {
          break;
        }
        --v237;
        if (*(void *)&v232[3][2 * v238] != *(void *)(v64[3] + 8 * v238)) {
          goto LABEL_229;
        }
      }
      int v237 = v236;
LABEL_229:
      int v280 = v67 + 1;
      while (1)
      {
        unsigned int v281 = v280 - 2;
        if (v280 - 2 < 0) {
          break;
        }
        --v280;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v281)) {
          goto LABEL_264;
        }
      }
      int v280 = v69;
LABEL_264:
      int v294 = v234 + 1;
      while (1)
      {
        int v295 = v294 - 2;
        if (v294 - 2 < 0) {
          break;
        }
        --v294;
        if (*(void *)&v232[3][2 * v295]) {
          goto LABEL_341;
        }
      }
      int v294 = v236;
LABEL_341:
      unint64_t v330 = (uint64_t)(v64[1] - *v64) >> 2;
      if (v70 <= v237) {
        int v331 = v237;
      }
      else {
        int v331 = v70;
      }
      if (v70 <= v294) {
        int v70 = v294;
      }
      if (v280 > v237) {
        int v237 = v280;
      }
      if (v330 > v237)
      {
        int v332 = 1;
      }
      else
      {
        int v237 = (uint64_t)(v64[1] - *v64) >> 2;
        int v332 = 4;
      }
      if (v330 > v70)
      {
        int v333 = 2;
      }
      else
      {
        int v70 = v237;
        int v333 = v332;
      }
      if (v330 > v331)
      {
        int v70 = v331;
        int v333 = 3;
      }
      if (!v70) {
        goto LABEL_371;
      }
      unint64_t v334 = *(void *)(v64[3] + 8 * (v70 - 1));
      if (v334 < 0x10) {
        goto LABEL_371;
      }
      uint64_t v1997 = *(void *)(v64[3] + 8 * (v70 - 1));
      switch(v333)
      {
        case 1:
          if (v70 == 2)
          {
            int v1460 = *v66;
            if (*v66)
            {
              unint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = 0;
              uint64_t v1464 = *(void *)(v65 + 152);
              uint64_t v1465 = v232[19];
              uint64_t v1466 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1467 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1468 = 0;
                      char v1469 = *(unsigned char *)(v1464 + v1463);
                      unsigned int v1470 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1466 + v1468) = *((unsigned char *)v1465 + v1462 + v1468) * v1469;
                        --v1470;
                        ++v1468;
                      }
                      while (v1470 > 1);
                      uint64_t v65 = *a1;
                      float v232 = (int **)*a2;
                      char v66 = *(int **)*a1;
                    }
                    uint64_t v1471 = *(void **)(v65 + 24);
                    uint64_t v1472 = v1471[1];
                    v1463 += v1472;
                    v1462 += *((void *)v232[3] + 1);
                    v1466 += (int)v334;
                    ++v1467;
                    unint64_t v1473 = v66[1];
                  }
                  while (v1467 < v1473);
                  int v1460 = *v66;
                  float v233 = *v232;
                }
                else
                {
                  unint64_t v1473 = 0;
                  uint64_t v1471 = *(void **)(v65 + 24);
                  uint64_t v1472 = v1471[1];
                }
                uint64_t v1463 = *v1471 + v1463 - v1473 * v1472;
                uint64_t v1462 = *(void *)v232[3] + v1462 - *((void *)v232[3] + 1) * v233[1];
                ++v1461;
              }
              while (v1461 < v1460);
            }
          }
          else if (v70 == 1)
          {
            int v1018 = *v66;
            if (*v66)
            {
              unint64_t v1019 = 0;
              uint64_t v1020 = 0;
              uint64_t v1021 = 0;
              uint64_t v1022 = *(void *)(v65 + 152);
              float v1023 = v232[19];
              uint64_t v1024 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v1025 = 0;
                  char v1026 = *(unsigned char *)(v1022 + v1021);
                  unsigned int v1027 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v1024 + v1025) = *((unsigned char *)v1023 + v1020 + v1025) * v1026;
                    --v1027;
                    ++v1025;
                  }
                  while (v1027 > 1);
                  uint64_t v65 = *a1;
                  float v232 = (int **)*a2;
                  int v1018 = **(_DWORD **)*a1;
                }
                v1021 += **(void **)(v65 + 24);
                v1020 += *(void *)v232[3];
                v1024 += (int)v334;
                ++v1019;
              }
              while (v1019 < v1018);
            }
          }
          else if (v64[6])
          {
            uint64_t v1918 = v232[19];
            uint64_t v1939 = *(void *)(v65 + 152);
            uint64_t v1968 = (int)v334;
            unint64_t v1992 = 0;
            unsigned int v1905 = v334 + 1;
            uint64_t v1474 = v64[19];
            do
            {
              uint64_t v1475 = *(void *)*a1;
              unint64_t v1476 = (unint64_t)(*(void *)(*a1 + 8) - v1475) >> 2;
              uint64_t v1477 = 0;
              uint64_t v1478 = (v1476 - 1);
              if ((int)v1476 - 1 >= 0)
              {
                uint64_t v1479 = *(void *)(*a1 + 24);
                int v1480 = v1992;
                do
                {
                  ldiv_t v1481 = ldiv(v1480, *(int *)(v1475 + 4 * v1478));
                  int v1480 = v1481.quot;
                  v1477 += *(void *)(v1479 + 8 * v1478--) * v1481.rem;
                }
                while (v1478 != -1);
              }
              uint64_t v1482 = *(void *)*a2;
              unint64_t v1483 = (unint64_t)(*(void *)(*a2 + 8) - v1482) >> 2;
              uint64_t v1484 = 0;
              uint64_t v1485 = (v1483 - 1);
              if ((int)v1483 - 1 >= 0)
              {
                uint64_t v1486 = *(void *)(*a2 + 24);
                int v1487 = v1992;
                do
                {
                  ldiv_t v1488 = ldiv(v1487, *(int *)(v1482 + 4 * v1485));
                  int v1487 = v1488.quot;
                  v1484 += *(void *)(v1486 + 8 * v1485--) * v1488.rem;
                }
                while (v1485 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1489 = 0;
                char v1490 = *(unsigned char *)(v1939 + (int)v1477);
                unsigned int v1491 = v1905;
                do
                {
                  *(unsigned char *)(v1474 + v1489) = *((unsigned char *)v1918 + (int)v1484 + v1489) * v1490;
                  --v1491;
                  ++v1489;
                }
                while (v1491 > 1);
                int v64 = *(void **)a3;
              }
              v1474 += v1968;
              v1992 += v1968;
            }
            while (v1992 < v64[6]);
          }
          break;
        case 2:
          if (v70 == 2)
          {
            int v1492 = *v66;
            if (*v66)
            {
              unint64_t v1493 = 0;
              uint64_t v1494 = 0;
              uint64_t v1495 = 0;
              uint64_t v1496 = *(void *)(v65 + 152);
              uint64_t v1497 = v232[19];
              uint64_t v1498 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1499 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1500 = 0;
                      char v1501 = *((unsigned char *)v1497 + v1494);
                      unsigned int v1502 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1498 + v1500) = *(unsigned char *)(v1496 + v1495 + v1500) * v1501;
                        --v1502;
                        ++v1500;
                      }
                      while (v1502 > 1);
                      uint64_t v65 = *a1;
                      float v232 = (int **)*a2;
                      char v66 = *(int **)*a1;
                    }
                    int v1503 = *(void **)(v65 + 24);
                    uint64_t v1504 = v1503[1];
                    v1495 += v1504;
                    v1494 += *((void *)v232[3] + 1);
                    v1498 += (int)v334;
                    ++v1499;
                    unint64_t v1505 = v66[1];
                  }
                  while (v1499 < v1505);
                  int v1492 = *v66;
                  float v233 = *v232;
                }
                else
                {
                  unint64_t v1505 = 0;
                  int v1503 = *(void **)(v65 + 24);
                  uint64_t v1504 = v1503[1];
                }
                uint64_t v1495 = *v1503 + v1495 - v1505 * v1504;
                uint64_t v1494 = *(void *)v232[3] + v1494 - *((void *)v232[3] + 1) * v233[1];
                ++v1493;
              }
              while (v1493 < v1492);
            }
          }
          else if (v70 == 1)
          {
            int v1028 = *v66;
            if (*v66)
            {
              unint64_t v1029 = 0;
              uint64_t v1030 = 0;
              uint64_t v1031 = 0;
              uint64_t v1032 = *(void *)(v65 + 152);
              uint64_t v1033 = v232[19];
              uint64_t v1034 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v1035 = 0;
                  char v1036 = *((unsigned char *)v1033 + v1030);
                  unsigned int v1037 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v1034 + v1035) = *(unsigned char *)(v1032 + v1031 + v1035) * v1036;
                    --v1037;
                    ++v1035;
                  }
                  while (v1037 > 1);
                  uint64_t v65 = *a1;
                  float v232 = (int **)*a2;
                  int v1028 = **(_DWORD **)*a1;
                }
                v1031 += **(void **)(v65 + 24);
                v1030 += *(void *)v232[3];
                v1034 += (int)v334;
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v64[6])
          {
            uint64_t v1919 = v232[19];
            uint64_t v1940 = *(void *)(v65 + 152);
            uint64_t v1969 = (int)v334;
            unint64_t v1993 = 0;
            unsigned int v1906 = v334 + 1;
            uint64_t v1506 = v64[19];
            do
            {
              uint64_t v1507 = *(void *)*a1;
              unint64_t v1508 = (unint64_t)(*(void *)(*a1 + 8) - v1507) >> 2;
              uint64_t v1509 = 0;
              uint64_t v1510 = (v1508 - 1);
              if ((int)v1508 - 1 >= 0)
              {
                uint64_t v1511 = *(void *)(*a1 + 24);
                int v1512 = v1993;
                do
                {
                  ldiv_t v1513 = ldiv(v1512, *(int *)(v1507 + 4 * v1510));
                  int v1512 = v1513.quot;
                  v1509 += *(void *)(v1511 + 8 * v1510--) * v1513.rem;
                }
                while (v1510 != -1);
              }
              uint64_t v1514 = *(void *)*a2;
              unint64_t v1515 = (unint64_t)(*(void *)(*a2 + 8) - v1514) >> 2;
              uint64_t v1516 = 0;
              uint64_t v1517 = (v1515 - 1);
              if ((int)v1515 - 1 >= 0)
              {
                uint64_t v1518 = *(void *)(*a2 + 24);
                int v1519 = v1993;
                do
                {
                  ldiv_t v1520 = ldiv(v1519, *(int *)(v1514 + 4 * v1517));
                  int v1519 = v1520.quot;
                  v1516 += *(void *)(v1518 + 8 * v1517--) * v1520.rem;
                }
                while (v1517 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1521 = 0;
                char v1522 = *((unsigned char *)v1919 + (int)v1516);
                unsigned int v1523 = v1906;
                do
                {
                  *(unsigned char *)(v1506 + v1521) = *(unsigned char *)(v1940 + (int)v1509 + v1521) * v1522;
                  --v1523;
                  ++v1521;
                }
                while (v1523 > 1);
                int v64 = *(void **)a3;
              }
              v1506 += v1969;
              v1993 += v1969;
            }
            while (v1993 < v64[6]);
          }
          break;
        case 3:
          if (v70 == 2)
          {
            int v1184 = *v66;
            if (*v66)
            {
              unint64_t v1185 = 0;
              uint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = *(void *)(v65 + 152);
              uint64_t v1189 = v232[19];
              uint64_t v1190 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1191 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1192 = 0;
                      unsigned int v1193 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1190 + v1192) = *((unsigned char *)v1189 + v1186 + v1192)
                                                  * *(unsigned char *)(v1188 + v1187 + v1192);
                        --v1193;
                        ++v1192;
                      }
                      while (v1193 > 1);
                      uint64_t v65 = *a1;
                      float v232 = (int **)*a2;
                      char v66 = *(int **)*a1;
                    }
                    uint64_t v1194 = *(void **)(v65 + 24);
                    uint64_t v1195 = v1194[1];
                    v1187 += v1195;
                    v1186 += *((void *)v232[3] + 1);
                    v1190 += (int)v334;
                    ++v1191;
                    unint64_t v1196 = v66[1];
                  }
                  while (v1191 < v1196);
                  int v1184 = *v66;
                  float v233 = *v232;
                }
                else
                {
                  unint64_t v1196 = 0;
                  uint64_t v1194 = *(void **)(v65 + 24);
                  uint64_t v1195 = v1194[1];
                }
                uint64_t v1187 = *v1194 + v1187 - v1196 * v1195;
                uint64_t v1186 = *(void *)v232[3] + v1186 - *((void *)v232[3] + 1) * v233[1];
                ++v1185;
              }
              while (v1185 < v1184);
            }
          }
          else if (v70 == 1)
          {
            int v335 = *v66;
            if (*v66)
            {
              unint64_t v336 = 0;
              uint64_t v337 = 0;
              uint64_t v338 = 0;
              uint64_t v339 = *(void *)(v65 + 152);
              uint64_t v340 = v232[19];
              uint64_t v341 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v342 = 0;
                  unsigned int v343 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v341 + v342) = *((unsigned char *)v340 + v337 + v342) * *(unsigned char *)(v339 + v338 + v342);
                    --v343;
                    ++v342;
                  }
                  while (v343 > 1);
                  uint64_t v65 = *a1;
                  float v232 = (int **)*a2;
                  int v335 = **(_DWORD **)*a1;
                }
                v338 += **(void **)(v65 + 24);
                v337 += *(void *)v232[3];
                v341 += (int)v334;
                ++v336;
              }
              while (v336 < v335);
            }
          }
          else if (v64[6])
          {
            uint64_t v1916 = v232[19];
            uint64_t v1931 = *(void *)(v65 + 152);
            uint64_t v1960 = (int)v334;
            unint64_t v1990 = 0;
            unsigned int v1901 = v334 + 1;
            uint64_t v1197 = v64[19];
            do
            {
              uint64_t v1198 = *(void *)*a1;
              unint64_t v1199 = (unint64_t)(*(void *)(*a1 + 8) - v1198) >> 2;
              uint64_t v1200 = 0;
              uint64_t v1201 = (v1199 - 1);
              if ((int)v1199 - 1 >= 0)
              {
                uint64_t v1202 = *(void *)(*a1 + 24);
                int v1203 = v1990;
                do
                {
                  ldiv_t v1204 = ldiv(v1203, *(int *)(v1198 + 4 * v1201));
                  int v1203 = v1204.quot;
                  v1200 += *(void *)(v1202 + 8 * v1201--) * v1204.rem;
                }
                while (v1201 != -1);
              }
              uint64_t v1205 = *(void *)*a2;
              unint64_t v1206 = (unint64_t)(*(void *)(*a2 + 8) - v1205) >> 2;
              uint64_t v1207 = 0;
              uint64_t v1208 = (v1206 - 1);
              if ((int)v1206 - 1 >= 0)
              {
                uint64_t v1209 = *(void *)(*a2 + 24);
                int v1210 = v1990;
                do
                {
                  ldiv_t v1211 = ldiv(v1210, *(int *)(v1205 + 4 * v1208));
                  int v1210 = v1211.quot;
                  v1207 += *(void *)(v1209 + 8 * v1208--) * v1211.rem;
                }
                while (v1208 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1212 = 0;
                unsigned int v1213 = v1901;
                do
                {
                  *(unsigned char *)(v1197 + v1212) = *((unsigned char *)v1916 + (int)v1207 + v1212)
                                            * *(unsigned char *)(v1931 + (int)v1200 + v1212);
                  --v1213;
                  ++v1212;
                }
                while (v1213 > 1);
                int v64 = *(void **)a3;
              }
              v1197 += v1960;
              v1990 += v1960;
            }
            while (v1990 < v64[6]);
          }
          break;
        default:
LABEL_371:
          switch(v330)
          {
            case 1uLL:
              if (v64[6])
              {
                unint64_t v344 = 0;
                uint64_t v345 = 0;
                uint64_t v346 = 0;
                uint64_t v347 = *(void *)(v65 + 152);
                uint64_t v348 = v232[19];
                uint64_t v349 = v64[19];
                do
                {
                  *(unsigned char *)(v349 + v344) = *((unsigned char *)v348 + v345) * *(unsigned char *)(v347 + v346);
                  v346 += **(void **)(*a1 + 24);
                  v345 += **(void **)(*a2 + 24);
                  ++v344;
                }
                while (v344 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v553 = *v66;
              if (*v66)
              {
                unint64_t v554 = 0;
                uint64_t v555 = 0;
                uint64_t v556 = 0;
                uint64_t v557 = 0;
                uint64_t v558 = *(void *)(v65 + 152);
                uint64_t v559 = v232[19];
                uint64_t v560 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v561 = 0;
                    do
                    {
                      *(unsigned char *)(v560 + v555 + v561) = *((unsigned char *)v559 + v556) * *(unsigned char *)(v558 + v557);
                      uint64_t v65 = *a1;
                      uint64_t v562 = *(void **)(*a1 + 24);
                      uint64_t v563 = v562[1];
                      v557 += v563;
                      float v232 = (int **)*a2;
                      uint64_t v564 = *(int **)(*a2 + 24);
                      uint64_t v565 = *((void *)v564 + 1);
                      v556 += v565;
                      ++v561;
                      char v66 = *(int **)*a1;
                      unint64_t v566 = v66[1];
                    }
                    while (v561 < v566);
                    int v553 = *v66;
                    float v233 = *v232;
                    v555 += v561;
                  }
                  else
                  {
                    unint64_t v566 = 0;
                    uint64_t v562 = *(void **)(v65 + 24);
                    uint64_t v563 = v562[1];
                    uint64_t v564 = v232[3];
                    uint64_t v565 = *((void *)v564 + 1);
                  }
                  uint64_t v557 = *v562 + v557 - v566 * v563;
                  uint64_t v556 = *(void *)v564 + v556 - v565 * v233[1];
                  ++v554;
                }
                while (v554 < v553);
              }
              break;
            case 3uLL:
              int v567 = *v66;
              if (*v66)
              {
                unint64_t v568 = 0;
                uint64_t v569 = 0;
                uint64_t v570 = 0;
                uint64_t v571 = 0;
                uint64_t v572 = *(void *)(v65 + 152);
                uint64_t v573 = v232[19];
                uint64_t v574 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v575 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v576 = 0;
                        do
                        {
                          *(unsigned char *)(v574 + v569 + v576) = *((unsigned char *)v573 + v570) * *(unsigned char *)(v572 + v571);
                          uint64_t v65 = *a1;
                          uint64_t v577 = *(void **)(*a1 + 24);
                          uint64_t v578 = v577[2];
                          v571 += v578;
                          float v232 = (int **)*a2;
                          ldiv_t v579 = *(int **)(*a2 + 24);
                          uint64_t v580 = *((void *)v579 + 2);
                          v570 += v580;
                          ++v576;
                          char v66 = *(int **)*a1;
                          unint64_t v581 = v66[2];
                        }
                        while (v576 < v581);
                        float v233 = *v232;
                        v569 += v576;
                      }
                      else
                      {
                        unint64_t v581 = 0;
                        uint64_t v577 = *(void **)(v65 + 24);
                        uint64_t v578 = v577[2];
                        ldiv_t v579 = v232[3];
                        uint64_t v580 = *((void *)v579 + 2);
                      }
                      uint64_t v582 = v577[1];
                      uint64_t v571 = v582 + v571 - v581 * v578;
                      uint64_t v570 = *((void *)v579 + 1) + v570 - v580 * v233[2];
                      ++v575;
                      unint64_t v583 = v66[1];
                    }
                    while (v575 < v583);
                    int v567 = *v66;
                  }
                  else
                  {
                    unint64_t v583 = 0;
                    uint64_t v577 = *(void **)(v65 + 24);
                    uint64_t v582 = v577[1];
                  }
                  uint64_t v571 = *v577 + v571 - v583 * v582;
                  uint64_t v570 = *(void *)v232[3] + v570 - *((void *)v232[3] + 1) * v233[1];
                  ++v568;
                }
                while (v568 < v567);
              }
              break;
            case 4uLL:
              int v584 = *v66;
              if (*v66)
              {
                unint64_t v585 = 0;
                uint64_t v586 = 0;
                uint64_t v587 = 0;
                uint64_t v588 = 0;
                uint64_t v589 = *(void *)(v65 + 152);
                uint64_t v590 = v232[19];
                uint64_t v591 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v592 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v593 = 0;
                        do
                        {
                          if (v66[3])
                          {
                            unint64_t v594 = 0;
                            do
                            {
                              *(unsigned char *)(v591 + v586 + v594) = *((unsigned char *)v590 + v587) * *(unsigned char *)(v589 + v588);
                              uint64_t v65 = *a1;
                              uint64_t v595 = *(void **)(*a1 + 24);
                              uint64_t v596 = v595[3];
                              v588 += v596;
                              float v232 = (int **)*a2;
                              unsigned int v597 = *(int **)(*a2 + 24);
                              uint64_t v598 = *((void *)v597 + 3);
                              v587 += v598;
                              ++v594;
                              char v66 = *(int **)*a1;
                              unint64_t v599 = v66[3];
                            }
                            while (v594 < v599);
                            float v233 = *v232;
                            v586 += v594;
                          }
                          else
                          {
                            unint64_t v599 = 0;
                            uint64_t v595 = *(void **)(v65 + 24);
                            uint64_t v596 = v595[3];
                            unsigned int v597 = v232[3];
                            uint64_t v598 = *((void *)v597 + 3);
                          }
                          uint64_t v600 = v595[2];
                          uint64_t v588 = v600 + v588 - v599 * v596;
                          uint64_t v587 = *((void *)v597 + 2) + v587 - v598 * v233[3];
                          ++v593;
                          unint64_t v601 = v66[2];
                        }
                        while (v593 < v601);
                      }
                      else
                      {
                        unint64_t v601 = 0;
                        uint64_t v595 = *(void **)(v65 + 24);
                        uint64_t v600 = v595[2];
                      }
                      uint64_t v588 = v595[1] + v588 - v601 * v600;
                      uint64_t v587 = *((void *)v232[3] + 1) + v587 - *((void *)v232[3] + 2) * v233[2];
                      ++v592;
                      unint64_t v602 = v66[1];
                    }
                    while (v592 < v602);
                    int v584 = *v66;
                  }
                  else
                  {
                    unint64_t v602 = 0;
                  }
                  uint64_t v588 = **(void **)(v65 + 24) + v588 - *(void *)(*(void *)(v65 + 24) + 8) * v602;
                  uint64_t v587 = *(void *)v232[3] + v587 - *((void *)v232[3] + 1) * v233[1];
                  ++v585;
                }
                while (v585 < v584);
              }
              break;
            default:
              if (v64[6])
              {
                unint64_t v537 = 0;
                uint64_t v1986 = v232[19];
                uint64_t v2004 = *(void *)(v65 + 152);
                uint64_t v538 = v64[19];
                do
                {
                  uint64_t v539 = *(void *)*a1;
                  unint64_t v540 = (unint64_t)(*(void *)(*a1 + 8) - v539) >> 2;
                  uint64_t v541 = 0;
                  uint64_t v542 = (v540 - 1);
                  if ((int)v540 - 1 >= 0)
                  {
                    uint64_t v543 = *(void *)(*a1 + 24);
                    int v544 = v537;
                    do
                    {
                      ldiv_t v545 = ldiv(v544, *(int *)(v539 + 4 * v542));
                      int v544 = v545.quot;
                      v541 += *(void *)(v543 + 8 * v542--) * v545.rem;
                    }
                    while (v542 != -1);
                  }
                  uint64_t v546 = *(void *)*a2;
                  unint64_t v547 = (unint64_t)(*(void *)(*a2 + 8) - v546) >> 2;
                  uint64_t v548 = 0;
                  uint64_t v549 = (v547 - 1);
                  if ((int)v547 - 1 >= 0)
                  {
                    uint64_t v550 = *(void *)(*a2 + 24);
                    int v551 = v537;
                    do
                    {
                      ldiv_t v552 = ldiv(v551, *(int *)(v546 + 4 * v549));
                      int v551 = v552.quot;
                      v548 += *(void *)(v550 + 8 * v549--) * v552.rem;
                    }
                    while (v549 != -1);
                  }
                  *(unsigned char *)(v538 + v537++) = *((unsigned char *)v1986 + (int)v548) * *(unsigned char *)(v2004 + (int)v541);
                }
                while (v537 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v16)
      {
        case 0:
          goto LABEL_23;
        case 1:
          int v17 = *(_DWORD *)(*a2 + 160);
          if (v17 >= 1)
          {
            int v18 = **(_DWORD **)(*a1 + 152);
            float v19 = *(_DWORD **)(*(void *)a3 + 152);
            float v20 = *(int **)(*a2 + 152);
            unsigned int v21 = v17 + 1;
            do
            {
              int v22 = *v20++;
              *v19++ = v22 * v18;
              --v21;
            }
            while (v21 > 1);
          }
          return;
        case 2:
          int v95 = *(_DWORD *)(*a1 + 160);
          if (v95 >= 1)
          {
            int v96 = **(_DWORD **)(*a2 + 152);
            unsigned int v97 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v98 = *(int **)(*a1 + 152);
            unsigned int v99 = v95 + 1;
            do
            {
              int v100 = *v98++;
              *v97++ = v100 * v96;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 3:
          int v101 = *(_DWORD *)(*(void *)a3 + 48);
          if (v101 >= 1)
          {
            unsigned int v102 = *(_DWORD **)(*(void *)a3 + 152);
            int v103 = *(int **)(*a2 + 152);
            unsigned int v104 = *(int **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              int v107 = *v104++;
              int v106 = v107;
              int v108 = *v103++;
              *v102++ = v108 * v106;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        default:
          unsigned int v86 = *(void **)a3;
          uint64_t v87 = (void *)*a1;
          uint64_t v88 = *(int **)*a1;
          uint64_t v89 = (v87[1] - (void)v88) >> 2;
          uint64_t v90 = (v89 - 1);
          if ((int)v90 >= -1) {
            int v91 = -1;
          }
          else {
            int v91 = v89 - 1;
          }
          int v92 = v91 + 1;
          int v93 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(v87[3] + 8 * v94) != *(void *)(v86[3] + 8 * v94)) {
          goto LABEL_185;
        }
      }
      int v93 = v92;
LABEL_185:
      float v239 = (void *)*a2;
      float v240 = *(int **)*a2;
      uint64_t v241 = (v239[1] - (void)v240) >> 2;
      uint64_t v242 = (v241 - 1);
      if ((int)v242 >= -1) {
        int v243 = -1;
      }
      else {
        int v243 = v241 - 1;
      }
      int v244 = v243 + 1;
      int v245 = v241 + 1;
      while (1)
      {
        unsigned int v246 = v245 - 2;
        if (v245 - 2 < 0) {
          break;
        }
        --v245;
        if (*(void *)(v239[3] + 8 * v246) != *(void *)(v86[3] + 8 * v246)) {
          goto LABEL_234;
        }
      }
      int v245 = v244;
LABEL_234:
      int v282 = v89 + 1;
      while (1)
      {
        unsigned int v283 = v282 - 2;
        if (v282 - 2 < 0) {
          break;
        }
        --v282;
        if (*(void *)(v87[3] + 8 * v283)) {
          goto LABEL_269;
        }
      }
      int v282 = v92;
LABEL_269:
      int v296 = v241 + 1;
      while (1)
      {
        unsigned int v297 = v296 - 2;
        if (v296 - 2 < 0) {
          break;
        }
        --v296;
        if (*(void *)(v239[3] + 8 * v297)) {
          goto LABEL_377;
        }
      }
      int v296 = v244;
LABEL_377:
      unint64_t v350 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v245) {
        int v351 = v245;
      }
      else {
        int v351 = v93;
      }
      if (v93 <= v296) {
        int v93 = v296;
      }
      if (v282 > v245) {
        int v245 = v282;
      }
      if (v350 > v245)
      {
        int v352 = 1;
      }
      else
      {
        int v245 = (uint64_t)(v86[1] - *v86) >> 2;
        int v352 = 4;
      }
      if (v350 > v93)
      {
        int v353 = 2;
      }
      else
      {
        int v93 = v245;
        int v353 = v352;
      }
      if (v350 > v351)
      {
        int v93 = v351;
        int v353 = 3;
      }
      uint64_t v1981 = v242;
      uint64_t v1998 = v90;
      if (!v93) {
        goto LABEL_407;
      }
      unint64_t v354 = *(void *)(v86[3] + 8 * (v93 - 1));
      if (v354 < 0x10) {
        goto LABEL_407;
      }
      switch(v353)
      {
        case 1:
          if (v93 == 2)
          {
            int v1524 = *v88;
            if (*v88)
            {
              unint64_t v1525 = 0;
              uint64_t v1526 = 0;
              uint64_t v1527 = 0;
              uint64_t v1528 = v87[19];
              uint64_t v1529 = v239[19];
              uint64_t v1530 = v86[19];
              uint64_t v1531 = (uint64_t *)v87[3];
              uint64_t v1532 = *v1531;
              uint64_t v1533 = v1531[1];
              int v1534 = (uint64_t *)v239[3];
              uint64_t v1535 = *v1534;
              uint64_t v1536 = v1534[1];
              int v1537 = v88[1];
              int v1538 = v1537;
              do
              {
                if (v1538)
                {
                  unint64_t v1539 = 0;
                  uint64_t v1540 = v1529 + 4 * v1526;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1541 = 0;
                      int v1542 = *(_DWORD *)(v1528 + 4 * v1527);
                      unsigned int v1543 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1530 + v1541) = *(_DWORD *)(v1540 + v1541) * v1542;
                        --v1543;
                        v1541 += 4;
                      }
                      while (v1543 > 1);
                      int v1537 = v88[1];
                    }
                    v1527 += v1533;
                    v1526 += v1536;
                    v1530 += 4 * (int)v354;
                    ++v1539;
                    v1540 += 4 * v1536;
                  }
                  while (v1539 < v1537);
                  uint64_t v1544 = v1537;
                  int v1524 = *v88;
                  int v1538 = v1537;
                }
                else
                {
                  uint64_t v1544 = 0;
                }
                uint64_t v1527 = v1527 + v1532 - v1544 * v1533;
                uint64_t v1526 = v1526 + v1535 - v1536 * v240[1];
                ++v1525;
              }
              while (v1525 < v1524);
            }
          }
          else if (v93 == 1)
          {
            int v1038 = *v88;
            if (*v88)
            {
              unint64_t v1039 = 0;
              uint64_t v1040 = 0;
              uint64_t v1041 = v87[19];
              uint64_t v1042 = v239[19];
              uint64_t v1043 = v86[19];
              uint64_t v1044 = *(void *)v87[3];
              uint64_t v1045 = 4 * *(void *)v239[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v1046 = 0;
                  int v1047 = *(_DWORD *)(v1041 + 4 * v1040);
                  unsigned int v1048 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1043 + v1046) = *(_DWORD *)(v1042 + v1046) * v1047;
                    --v1048;
                    v1046 += 4;
                  }
                  while (v1048 > 1);
                  int v1038 = *v88;
                }
                v1040 += v1044;
                ++v1039;
                v1043 += 4 * (int)v354;
                v1042 += v1045;
              }
              while (v1039 < v1038);
            }
          }
          else
          {
            unint64_t v1941 = v86[6];
            if (v1941)
            {
              unint64_t v1970 = 0;
              uint64_t v1876 = v239[19];
              uint64_t v1891 = v87[19];
              uint64_t v1545 = v86[19];
              do
              {
                uint64_t v1546 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1547 = v87[3];
                  uint64_t v1548 = v90;
                  int v1549 = v1970;
                  do
                  {
                    ldiv_t v1550 = ldiv(v1549, v88[v1548]);
                    int v1549 = v1550.quot;
                    v1546 += *(void *)(v1547 + 8 * v1548--) * v1550.rem;
                  }
                  while (v1548 != -1);
                }
                uint64_t v1551 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1552) = 0;
                }
                else
                {
                  uint64_t v1552 = 0;
                  uint64_t v1553 = v239[3];
                  int v1554 = v1970;
                  do
                  {
                    ldiv_t v1555 = ldiv(v1554, v240[v1551]);
                    int v1554 = v1555.quot;
                    v1552 += *(void *)(v1553 + 8 * v1551--) * v1555.rem;
                  }
                  while (v1551 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1556 = 0;
                  int v1557 = *(_DWORD *)(v1891 + 4 * (int)v1546);
                  unsigned int v1558 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1545 + v1556) = *(_DWORD *)(v1876 + 4 * (int)v1552 + v1556) * v1557;
                    --v1558;
                    v1556 += 4;
                  }
                  while (v1558 > 1);
                }
                v1545 += 4 * (int)v354;
                v1970 += (int)v354;
              }
              while (v1970 < v1941);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            int v1559 = *v88;
            if (*v88)
            {
              unint64_t v1560 = 0;
              uint64_t v1561 = 0;
              uint64_t v1562 = 0;
              uint64_t v1563 = v87[19];
              uint64_t v1564 = v239[19];
              uint64_t v1565 = v86[19];
              uint64_t v1566 = (uint64_t *)v87[3];
              uint64_t v1567 = *v1566;
              uint64_t v1568 = v1566[1];
              uint64_t v1569 = (uint64_t *)v239[3];
              uint64_t v1570 = *v1569;
              uint64_t v1571 = v1569[1];
              int v1572 = v88[1];
              int v1573 = v1572;
              do
              {
                if (v1573)
                {
                  unint64_t v1574 = 0;
                  uint64_t v1575 = v1563 + 4 * v1562;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1576 = 0;
                      int v1577 = *(_DWORD *)(v1564 + 4 * v1561);
                      unsigned int v1578 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = *(_DWORD *)(v1575 + v1576) * v1577;
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                      int v1572 = v88[1];
                    }
                    v1562 += v1568;
                    v1561 += v1571;
                    v1565 += 4 * (int)v354;
                    ++v1574;
                    v1575 += 4 * v1568;
                  }
                  while (v1574 < v1572);
                  uint64_t v1579 = v1572;
                  int v1559 = *v88;
                  int v1573 = v1572;
                }
                else
                {
                  uint64_t v1579 = 0;
                }
                uint64_t v1562 = v1562 + v1567 - v1579 * v1568;
                uint64_t v1561 = v1561 + v1570 - v1571 * v240[1];
                ++v1560;
              }
              while (v1560 < v1559);
            }
          }
          else if (v93 == 1)
          {
            int v1049 = *v88;
            if (*v88)
            {
              unint64_t v1050 = 0;
              uint64_t v1051 = 0;
              uint64_t v1052 = v87[19];
              uint64_t v1053 = v239[19];
              uint64_t v1054 = v86[19];
              uint64_t v1055 = *(void *)v239[3];
              uint64_t v1056 = 4 * *(void *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v1057 = 0;
                  int v1058 = *(_DWORD *)(v1053 + 4 * v1051);
                  unsigned int v1059 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1054 + v1057) = *(_DWORD *)(v1052 + v1057) * v1058;
                    --v1059;
                    v1057 += 4;
                  }
                  while (v1059 > 1);
                  int v1049 = *v88;
                }
                v1051 += v1055;
                ++v1050;
                v1054 += 4 * (int)v354;
                v1052 += v1056;
              }
              while (v1050 < v1049);
            }
          }
          else
          {
            unint64_t v1942 = v86[6];
            if (v1942)
            {
              unint64_t v1971 = 0;
              uint64_t v1877 = v239[19];
              uint64_t v1892 = v87[19];
              uint64_t v1580 = v86[19];
              do
              {
                uint64_t v1581 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1582 = v87[3];
                  uint64_t v1583 = v90;
                  int v1584 = v1971;
                  do
                  {
                    ldiv_t v1585 = ldiv(v1584, v88[v1583]);
                    int v1584 = v1585.quot;
                    v1581 += *(void *)(v1582 + 8 * v1583--) * v1585.rem;
                  }
                  while (v1583 != -1);
                }
                uint64_t v1586 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1587) = 0;
                }
                else
                {
                  uint64_t v1587 = 0;
                  uint64_t v1588 = v239[3];
                  int v1589 = v1971;
                  do
                  {
                    ldiv_t v1590 = ldiv(v1589, v240[v1586]);
                    int v1589 = v1590.quot;
                    v1587 += *(void *)(v1588 + 8 * v1586--) * v1590.rem;
                  }
                  while (v1586 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1591 = 0;
                  int v1592 = *(_DWORD *)(v1877 + 4 * (int)v1587);
                  unsigned int v1593 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1580 + v1591) = *(_DWORD *)(v1892 + 4 * (int)v1581 + v1591) * v1592;
                    --v1593;
                    v1591 += 4;
                  }
                  while (v1593 > 1);
                }
                v1580 += 4 * (int)v354;
                v1971 += (int)v354;
              }
              while (v1971 < v1942);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            int v1214 = *v88;
            if (*v88)
            {
              unint64_t v1215 = 0;
              uint64_t v1216 = 0;
              uint64_t v1217 = 0;
              uint64_t v1218 = v87[19];
              uint64_t v1219 = v239[19];
              uint64_t v1220 = v86[19];
              uint64_t v1221 = (uint64_t *)v87[3];
              uint64_t v1222 = *v1221;
              uint64_t v1223 = v1221[1];
              uint64_t v1224 = (uint64_t *)v239[3];
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              int v1227 = v88[1];
              int v1228 = v1227;
              do
              {
                if (v1228)
                {
                  unint64_t v1229 = 0;
                  uint64_t v1230 = v1219 + 4 * v1216;
                  uint64_t v1231 = v1218 + 4 * v1217;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1232 = 0;
                      unsigned int v1233 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1220 + v1232) = *(_DWORD *)(v1230 + v1232) * *(_DWORD *)(v1231 + v1232);
                        --v1233;
                        v1232 += 4;
                      }
                      while (v1233 > 1);
                      int v1227 = v88[1];
                    }
                    v1217 += v1223;
                    v1216 += v1226;
                    v1220 += 4 * (int)v354;
                    ++v1229;
                    v1230 += 4 * v1226;
                    v1231 += 4 * v1223;
                  }
                  while (v1229 < v1227);
                  uint64_t v1234 = v1227;
                  int v1214 = *v88;
                  int v1228 = v1227;
                }
                else
                {
                  uint64_t v1234 = 0;
                }
                uint64_t v1217 = v1217 + v1222 - v1234 * v1223;
                uint64_t v1216 = v1216 + v1225 - v1226 * v240[1];
                ++v1215;
              }
              while (v1215 < v1214);
            }
          }
          else if (v93 == 1)
          {
            int v355 = *v88;
            if (*v88)
            {
              unint64_t v356 = 0;
              uint64_t v357 = v87[19];
              uint64_t v358 = v239[19];
              uint64_t v359 = v86[19];
              uint64_t v360 = 4 * *(void *)v239[3];
              uint64_t v361 = 4 * *(void *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v362 = 0;
                  unsigned int v363 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v359 + v362) = *(_DWORD *)(v358 + v362) * *(_DWORD *)(v357 + v362);
                    --v363;
                    v362 += 4;
                  }
                  while (v363 > 1);
                  int v355 = *v88;
                }
                ++v356;
                v359 += 4 * (int)v354;
                v358 += v360;
                v357 += v361;
              }
              while (v356 < v355);
            }
          }
          else
          {
            unint64_t v1932 = v86[6];
            if (v1932)
            {
              unint64_t v1961 = 0;
              uint64_t v1872 = v239[19];
              uint64_t v1885 = v87[19];
              uint64_t v1235 = v86[19];
              do
              {
                uint64_t v1236 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1237 = v87[3];
                  uint64_t v1238 = v90;
                  int v1239 = v1961;
                  do
                  {
                    ldiv_t v1240 = ldiv(v1239, v88[v1238]);
                    int v1239 = v1240.quot;
                    v1236 += *(void *)(v1237 + 8 * v1238--) * v1240.rem;
                  }
                  while (v1238 != -1);
                }
                uint64_t v1241 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1242) = 0;
                }
                else
                {
                  uint64_t v1242 = 0;
                  uint64_t v1243 = v239[3];
                  int v1244 = v1961;
                  do
                  {
                    ldiv_t v1245 = ldiv(v1244, v240[v1241]);
                    int v1244 = v1245.quot;
                    v1242 += *(void *)(v1243 + 8 * v1241--) * v1245.rem;
                  }
                  while (v1241 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1246 = 0;
                  unsigned int v1247 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1235 + v1246) = *(_DWORD *)(v1872 + 4 * (int)v1242 + v1246)
                                               * *(_DWORD *)(v1885 + 4 * (int)v1236 + v1246);
                    --v1247;
                    v1246 += 4;
                  }
                  while (v1247 > 1);
                }
                v1235 += 4 * (int)v354;
                v1961 += (int)v354;
              }
              while (v1961 < v1932);
            }
          }
          break;
        default:
LABEL_407:
          switch(v350)
          {
            case 1uLL:
              uint64_t v364 = v86[6];
              if (v364)
              {
                unsigned int v365 = (_DWORD *)v87[19];
                unsigned int v366 = (_DWORD *)v239[19];
                unint64_t v367 = (_DWORD *)v86[19];
                uint64_t v368 = 4 * *(void *)v239[3];
                uint64_t v369 = 4 * *(void *)v87[3];
                do
                {
                  *v367++ = *v366 * *v365;
                  unsigned int v366 = (_DWORD *)((char *)v366 + v368);
                  unsigned int v365 = (_DWORD *)((char *)v365 + v369);
                  --v364;
                }
                while (v364);
              }
              break;
            case 2uLL:
              int v615 = *v88;
              if (*v88)
              {
                unint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = v87[19];
                uint64_t v621 = v239[19];
                uint64_t v622 = v86[19];
                uint64_t v623 = (uint64_t *)v87[3];
                uint64_t v624 = *v623;
                uint64_t v625 = v623[1];
                uint64_t v626 = (uint64_t *)v239[3];
                uint64_t v628 = *v626;
                uint64_t v627 = v626[1];
                int v629 = v88[1];
                do
                {
                  if (v629)
                  {
                    for (unint64_t i = 0; i < v629; ++i)
                    {
                      *(_DWORD *)(v622 + 4 * v617 + 4 * i) = *(_DWORD *)(v621 + 4 * v618) * *(_DWORD *)(v620 + 4 * v619);
                      v619 += v625;
                      v618 += v627;
                      int v629 = v88[1];
                    }
                    uint64_t v631 = v629;
                    int v615 = *v88;
                    v617 += i;
                  }
                  else
                  {
                    uint64_t v631 = 0;
                  }
                  uint64_t v619 = v619 + v624 - v631 * v625;
                  uint64_t v618 = v618 + v628 - v627 * v240[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 3uLL:
              int v632 = *v88;
              if (*v88)
              {
                unint64_t v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = v87[19];
                uint64_t v638 = v239[19];
                uint64_t v639 = v86[19];
                unint64_t v640 = (uint64_t *)v87[3];
                uint64_t v641 = *v640;
                uint64_t v642 = v640[1];
                uint64_t v643 = (uint64_t *)v239[3];
                uint64_t v644 = *v643;
                uint64_t v645 = v643[1];
                int v646 = v88[1];
                int v647 = v646;
                do
                {
                  if (v647)
                  {
                    unint64_t v648 = 0;
                    uint64_t v649 = v640[2];
                    uint64_t v650 = v643[2];
                    int v651 = v88[2];
                    do
                    {
                      if (v651)
                      {
                        for (unint64_t j = 0; j < v651; ++j)
                        {
                          *(_DWORD *)(v639 + 4 * v634 + 4 * j) = *(_DWORD *)(v638 + 4 * v635)
                                                               * *(_DWORD *)(v637 + 4 * v636);
                          v636 += v649;
                          v635 += v650;
                          int v651 = v88[2];
                        }
                        uint64_t v653 = v651;
                        int v646 = v88[1];
                        v634 += j;
                      }
                      else
                      {
                        uint64_t v653 = 0;
                      }
                      uint64_t v636 = v636 + v642 - v653 * v649;
                      uint64_t v635 = v635 + v645 - v650 * v240[2];
                      ++v648;
                    }
                    while (v648 < v646);
                    uint64_t v654 = v646;
                    int v632 = *v88;
                    int v647 = v646;
                  }
                  else
                  {
                    uint64_t v654 = 0;
                  }
                  uint64_t v636 = v636 + v641 - v654 * v642;
                  uint64_t v635 = v635 + v644 - v645 * v240[1];
                  ++v633;
                }
                while (v633 < v632);
              }
              break;
            case 4uLL:
              int v655 = *v88;
              if (*v88)
              {
                unint64_t v656 = 0;
                uint64_t v657 = 0;
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = v87[19];
                uint64_t v661 = v239[19];
                uint64_t v662 = v86[19];
                uint64_t v663 = (uint64_t *)v87[3];
                uint64_t v664 = *v663;
                uint64_t v665 = v663[1];
                uint64_t v666 = (uint64_t *)v239[3];
                uint64_t v667 = *v666;
                uint64_t v668 = v666[1];
                int v669 = v88[1];
                int v670 = v669;
                do
                {
                  if (v670)
                  {
                    unint64_t v671 = 0;
                    uint64_t v672 = v663[2];
                    uint64_t v673 = v666[2];
                    int v674 = v88[2];
                    int v675 = v674;
                    do
                    {
                      if (v675)
                      {
                        unint64_t v676 = 0;
                        uint64_t v677 = v663[3];
                        uint64_t v678 = v666[3];
                        int v679 = v88[3];
                        do
                        {
                          if (v679)
                          {
                            for (unint64_t k = 0; k < v679; ++k)
                            {
                              *(_DWORD *)(v662 + 4 * v657 + 4 * k) = *(_DWORD *)(v661 + 4 * v658)
                                                                   * *(_DWORD *)(v660 + 4 * v659);
                              v659 += v677;
                              v658 += v678;
                              int v679 = v88[3];
                            }
                            uint64_t v681 = v679;
                            int v674 = v88[2];
                            v657 += k;
                          }
                          else
                          {
                            uint64_t v681 = 0;
                          }
                          uint64_t v659 = v659 + v672 - v681 * v677;
                          uint64_t v658 = v658 + v673 - v678 * v240[3];
                          ++v676;
                        }
                        while (v676 < v674);
                        uint64_t v682 = v674;
                        int v669 = v88[1];
                        int v675 = v674;
                      }
                      else
                      {
                        uint64_t v682 = 0;
                      }
                      uint64_t v659 = v659 + v665 - v682 * v672;
                      uint64_t v658 = v658 + v668 - v673 * v240[2];
                      ++v671;
                    }
                    while (v671 < v669);
                    uint64_t v683 = v669;
                    int v655 = *v88;
                    int v670 = v669;
                  }
                  else
                  {
                    uint64_t v683 = 0;
                  }
                  uint64_t v659 = v659 + v664 - v683 * v665;
                  uint64_t v658 = v658 + v667 - v668 * v240[1];
                  ++v656;
                }
                while (v656 < v655);
              }
              break;
            default:
              uint64_t v603 = v86[6];
              if (v603)
              {
                uint64_t v604 = 0;
                uint64_t v1924 = v239[19];
                uint64_t v1953 = v87[19];
                uint64_t v1911 = v86[19];
                do
                {
                  uint64_t v605 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    uint64_t v606 = v87[3];
                    uint64_t v607 = v90;
                    int v608 = v604;
                    do
                    {
                      ldiv_t v609 = ldiv(v608, v88[v607]);
                      int v608 = v609.quot;
                      v605 += *(void *)(v606 + 8 * v607--) * v609.rem;
                    }
                    while (v607 != -1);
                  }
                  uint64_t v610 = v1981;
                  if ((v1981 & 0x80000000) != 0)
                  {
                    LODWORD(v611) = 0;
                  }
                  else
                  {
                    uint64_t v611 = 0;
                    uint64_t v612 = v239[3];
                    int v613 = v604;
                    do
                    {
                      ldiv_t v614 = ldiv(v613, v240[v610]);
                      int v613 = v614.quot;
                      v611 += *(void *)(v612 + 8 * v610--) * v614.rem;
                    }
                    while (v610 != -1);
                  }
                  *(_DWORD *)(v1911 + 4 * v604++) = *(_DWORD *)(v1924 + 4 * (int)v611)
                                                  * *(_DWORD *)(v1953 + 4 * (int)v605);
                  uint64_t v90 = v1998;
                }
                while (v604 != v603);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v23)
      {
        case 0:
LABEL_20:
          char v8 = **(unsigned char **)(*a2 + 152) * **(unsigned char **)(*a1 + 152);
LABEL_21:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v117 = *(_DWORD *)(*a2 + 160);
          if (v117 >= 1)
          {
            char v118 = **(unsigned char **)(*a1 + 152);
            uint64_t v119 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v120 = *(char **)(*a2 + 152);
            unsigned int v121 = v117 + 1;
            do
            {
              char v122 = *v120++;
              *v119++ = v122 * v118;
              --v121;
            }
            while (v121 > 1);
          }
          return;
        case 2:
          int v123 = *(_DWORD *)(*a1 + 160);
          if (v123 >= 1)
          {
            char v124 = **(unsigned char **)(*a2 + 152);
            int v125 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v126 = *(char **)(*a1 + 152);
            unsigned int v127 = v123 + 1;
            do
            {
              char v128 = *v126++;
              *v125++ = v128 * v124;
              --v127;
            }
            while (v127 > 1);
          }
          return;
        case 3:
          int v129 = *(_DWORD *)(*(void *)a3 + 48);
          if (v129 >= 1)
          {
            unsigned int v130 = *(unsigned char **)(*(void *)a3 + 152);
            int v131 = *(char **)(*a2 + 152);
            char v132 = *(char **)(*a1 + 152);
            unsigned int v133 = v129 + 1;
            do
            {
              char v135 = *v132++;
              char v134 = v135;
              char v136 = *v131++;
              *v130++ = v136 * v134;
              --v133;
            }
            while (v133 > 1);
          }
          return;
        default:
          unsigned int v109 = *(void **)a3;
          uint64_t v110 = *a1;
          unsigned int v111 = *(int **)*a1;
          uint64_t v112 = (*(void *)(*a1 + 8) - (void)v111) >> 2;
          int v113 = v112 - 1;
          if ((int)v112 - 1 >= -1) {
            int v113 = -1;
          }
          int v114 = v113 + 1;
          int v115 = v112 + 1;
          while (1)
          {
            unsigned int v116 = v115 - 2;
            if (v115 - 2 < 0) {
              break;
            }
            --v115;
            if (*(void *)(*(void *)(v110 + 24) + 8 * v116) != *(void *)(v109[3] + 8 * v116)) {
              goto LABEL_193;
            }
          }
          int v115 = v114;
LABEL_193:
          int v247 = (int **)*a2;
          uint64_t v248 = *(int **)*a2;
          uint64_t v249 = (*(void *)(*a2 + 8) - (void)v248) >> 2;
          int v250 = v249 - 1;
          if ((int)v249 - 1 >= -1) {
            int v250 = -1;
          }
          int v251 = v250 + 1;
          int v252 = v249 + 1;
          while (1)
          {
            unsigned int v253 = v252 - 2;
            if (v252 - 2 < 0) {
              break;
            }
            --v252;
            if (*(void *)&v247[3][2 * v253] != *(void *)(v109[3] + 8 * v253)) {
              goto LABEL_239;
            }
          }
          int v252 = v251;
LABEL_239:
          int v284 = v112 + 1;
          while (1)
          {
            unsigned int v285 = v284 - 2;
            if (v284 - 2 < 0) {
              break;
            }
            --v284;
            if (*(void *)(*(void *)(v110 + 24) + 8 * v285)) {
              goto LABEL_274;
            }
          }
          int v284 = v114;
LABEL_274:
          int v298 = v249 + 1;
          while (1)
          {
            int v299 = v298 - 2;
            if (v298 - 2 < 0) {
              break;
            }
            --v298;
            if (*(void *)&v247[3][2 * v299]) {
              goto LABEL_413;
            }
          }
          int v298 = v251;
LABEL_413:
          unint64_t v370 = (uint64_t)(v109[1] - *v109) >> 2;
          if (v115 <= v252) {
            int v371 = v252;
          }
          else {
            int v371 = v115;
          }
          if (v115 <= v298) {
            int v115 = v298;
          }
          if (v284 > v252) {
            int v252 = v284;
          }
          if (v370 > v252)
          {
            int v372 = 1;
          }
          else
          {
            int v252 = (uint64_t)(v109[1] - *v109) >> 2;
            int v372 = 4;
          }
          if (v370 > v115)
          {
            int v373 = 2;
          }
          else
          {
            int v115 = v252;
            int v373 = v372;
          }
          if (v370 > v371)
          {
            int v115 = v371;
            int v373 = 3;
          }
          if (!v115) {
            goto LABEL_443;
          }
          unint64_t v374 = *(void *)(v109[3] + 8 * (v115 - 1));
          if (v374 < 0x10) {
            goto LABEL_443;
          }
          uint64_t v1999 = *(void *)(v109[3] + 8 * (v115 - 1));
          switch(v373)
          {
            case 1:
              if (v115 == 2)
              {
                int v1594 = *v111;
                if (*v111)
                {
                  unint64_t v1595 = 0;
                  uint64_t v1596 = 0;
                  uint64_t v1597 = 0;
                  uint64_t v1598 = *(void *)(v110 + 152);
                  uint64_t v1599 = v247[19];
                  uint64_t v1600 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1601 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1602 = 0;
                          char v1603 = *(unsigned char *)(v1598 + v1597);
                          unsigned int v1604 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1600 + v1602) = *((unsigned char *)v1599 + v1596 + v1602) * v1603;
                            --v1604;
                            ++v1602;
                          }
                          while (v1604 > 1);
                          uint64_t v110 = *a1;
                          int v247 = (int **)*a2;
                          unsigned int v111 = *(int **)*a1;
                        }
                        uint64_t v1605 = *(void **)(v110 + 24);
                        uint64_t v1606 = v1605[1];
                        v1597 += v1606;
                        v1596 += *((void *)v247[3] + 1);
                        v1600 += (int)v374;
                        ++v1601;
                        unint64_t v1607 = v111[1];
                      }
                      while (v1601 < v1607);
                      int v1594 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1607 = 0;
                      uint64_t v1605 = *(void **)(v110 + 24);
                      uint64_t v1606 = v1605[1];
                    }
                    uint64_t v1597 = *v1605 + v1597 - v1607 * v1606;
                    uint64_t v1596 = *(void *)v247[3] + v1596 - *((void *)v247[3] + 1) * v248[1];
                    ++v1595;
                  }
                  while (v1595 < v1594);
                }
              }
              else if (v115 == 1)
              {
                int v1060 = *v111;
                if (*v111)
                {
                  unint64_t v1061 = 0;
                  uint64_t v1062 = 0;
                  uint64_t v1063 = 0;
                  uint64_t v1064 = *(void *)(v110 + 152);
                  uint64_t v1065 = v247[19];
                  uint64_t v1066 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v1067 = 0;
                      char v1068 = *(unsigned char *)(v1064 + v1063);
                      unsigned int v1069 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v1066 + v1067) = *((unsigned char *)v1065 + v1062 + v1067) * v1068;
                        --v1069;
                        ++v1067;
                      }
                      while (v1069 > 1);
                      uint64_t v110 = *a1;
                      int v247 = (int **)*a2;
                      int v1060 = **(_DWORD **)*a1;
                    }
                    v1063 += **(void **)(v110 + 24);
                    v1062 += *(void *)v247[3];
                    v1066 += (int)v374;
                    ++v1061;
                  }
                  while (v1061 < v1060);
                }
              }
              else if (v109[6])
              {
                uint64_t v1920 = v247[19];
                uint64_t v1943 = *(void *)(v110 + 152);
                uint64_t v1972 = (int)v374;
                unint64_t v1994 = 0;
                unsigned int v1907 = v374 + 1;
                uint64_t v1608 = v109[19];
                do
                {
                  uint64_t v1609 = *(void *)*a1;
                  unint64_t v1610 = (unint64_t)(*(void *)(*a1 + 8) - v1609) >> 2;
                  uint64_t v1611 = 0;
                  uint64_t v1612 = (v1610 - 1);
                  if ((int)v1610 - 1 >= 0)
                  {
                    uint64_t v1613 = *(void *)(*a1 + 24);
                    int v1614 = v1994;
                    do
                    {
                      ldiv_t v1615 = ldiv(v1614, *(int *)(v1609 + 4 * v1612));
                      int v1614 = v1615.quot;
                      v1611 += *(void *)(v1613 + 8 * v1612--) * v1615.rem;
                    }
                    while (v1612 != -1);
                  }
                  uint64_t v1616 = *(void *)*a2;
                  unint64_t v1617 = (unint64_t)(*(void *)(*a2 + 8) - v1616) >> 2;
                  uint64_t v1618 = 0;
                  uint64_t v1619 = (v1617 - 1);
                  if ((int)v1617 - 1 >= 0)
                  {
                    uint64_t v1620 = *(void *)(*a2 + 24);
                    int v1621 = v1994;
                    do
                    {
                      ldiv_t v1622 = ldiv(v1621, *(int *)(v1616 + 4 * v1619));
                      int v1621 = v1622.quot;
                      v1618 += *(void *)(v1620 + 8 * v1619--) * v1622.rem;
                    }
                    while (v1619 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1623 = 0;
                    char v1624 = *(unsigned char *)(v1943 + (int)v1611);
                    unsigned int v1625 = v1907;
                    do
                    {
                      *(unsigned char *)(v1608 + v1623) = *((unsigned char *)v1920 + (int)v1618 + v1623) * v1624;
                      --v1625;
                      ++v1623;
                    }
                    while (v1625 > 1);
                    unsigned int v109 = *(void **)a3;
                  }
                  v1608 += v1972;
                  v1994 += v1972;
                }
                while (v1994 < v109[6]);
              }
              break;
            case 2:
              if (v115 == 2)
              {
                int v1626 = *v111;
                if (*v111)
                {
                  unint64_t v1627 = 0;
                  uint64_t v1628 = 0;
                  uint64_t v1629 = 0;
                  uint64_t v1630 = *(void *)(v110 + 152);
                  uint64_t v1631 = v247[19];
                  uint64_t v1632 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1633 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1634 = 0;
                          char v1635 = *((unsigned char *)v1631 + v1628);
                          unsigned int v1636 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1632 + v1634) = *(unsigned char *)(v1630 + v1629 + v1634) * v1635;
                            --v1636;
                            ++v1634;
                          }
                          while (v1636 > 1);
                          uint64_t v110 = *a1;
                          int v247 = (int **)*a2;
                          unsigned int v111 = *(int **)*a1;
                        }
                        uint64_t v1637 = *(void **)(v110 + 24);
                        uint64_t v1638 = v1637[1];
                        v1629 += v1638;
                        v1628 += *((void *)v247[3] + 1);
                        v1632 += (int)v374;
                        ++v1633;
                        unint64_t v1639 = v111[1];
                      }
                      while (v1633 < v1639);
                      int v1626 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1639 = 0;
                      uint64_t v1637 = *(void **)(v110 + 24);
                      uint64_t v1638 = v1637[1];
                    }
                    uint64_t v1629 = *v1637 + v1629 - v1639 * v1638;
                    uint64_t v1628 = *(void *)v247[3] + v1628 - *((void *)v247[3] + 1) * v248[1];
                    ++v1627;
                  }
                  while (v1627 < v1626);
                }
              }
              else if (v115 == 1)
              {
                int v1070 = *v111;
                if (*v111)
                {
                  unint64_t v1071 = 0;
                  uint64_t v1072 = 0;
                  uint64_t v1073 = 0;
                  uint64_t v1074 = *(void *)(v110 + 152);
                  char v1075 = v247[19];
                  uint64_t v1076 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v1077 = 0;
                      char v1078 = *((unsigned char *)v1075 + v1072);
                      unsigned int v1079 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v1076 + v1077) = *(unsigned char *)(v1074 + v1073 + v1077) * v1078;
                        --v1079;
                        ++v1077;
                      }
                      while (v1079 > 1);
                      uint64_t v110 = *a1;
                      int v247 = (int **)*a2;
                      int v1070 = **(_DWORD **)*a1;
                    }
                    v1073 += **(void **)(v110 + 24);
                    v1072 += *(void *)v247[3];
                    v1076 += (int)v374;
                    ++v1071;
                  }
                  while (v1071 < v1070);
                }
              }
              else if (v109[6])
              {
                uint64_t v1921 = v247[19];
                uint64_t v1944 = *(void *)(v110 + 152);
                uint64_t v1973 = (int)v374;
                unint64_t v1995 = 0;
                unsigned int v1908 = v374 + 1;
                uint64_t v1640 = v109[19];
                do
                {
                  uint64_t v1641 = *(void *)*a1;
                  unint64_t v1642 = (unint64_t)(*(void *)(*a1 + 8) - v1641) >> 2;
                  uint64_t v1643 = 0;
                  uint64_t v1644 = (v1642 - 1);
                  if ((int)v1642 - 1 >= 0)
                  {
                    uint64_t v1645 = *(void *)(*a1 + 24);
                    int v1646 = v1995;
                    do
                    {
                      ldiv_t v1647 = ldiv(v1646, *(int *)(v1641 + 4 * v1644));
                      int v1646 = v1647.quot;
                      v1643 += *(void *)(v1645 + 8 * v1644--) * v1647.rem;
                    }
                    while (v1644 != -1);
                  }
                  uint64_t v1648 = *(void *)*a2;
                  unint64_t v1649 = (unint64_t)(*(void *)(*a2 + 8) - v1648) >> 2;
                  uint64_t v1650 = 0;
                  uint64_t v1651 = (v1649 - 1);
                  if ((int)v1649 - 1 >= 0)
                  {
                    uint64_t v1652 = *(void *)(*a2 + 24);
                    int v1653 = v1995;
                    do
                    {
                      ldiv_t v1654 = ldiv(v1653, *(int *)(v1648 + 4 * v1651));
                      int v1653 = v1654.quot;
                      v1650 += *(void *)(v1652 + 8 * v1651--) * v1654.rem;
                    }
                    while (v1651 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1655 = 0;
                    char v1656 = *((unsigned char *)v1921 + (int)v1650);
                    unsigned int v1657 = v1908;
                    do
                    {
                      *(unsigned char *)(v1640 + v1655) = *(unsigned char *)(v1944 + (int)v1643 + v1655) * v1656;
                      --v1657;
                      ++v1655;
                    }
                    while (v1657 > 1);
                    unsigned int v109 = *(void **)a3;
                  }
                  v1640 += v1973;
                  v1995 += v1973;
                }
                while (v1995 < v109[6]);
              }
              break;
            case 3:
              if (v115 == 2)
              {
                int v1248 = *v111;
                if (*v111)
                {
                  unint64_t v1249 = 0;
                  uint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = *(void *)(v110 + 152);
                  char v1253 = v247[19];
                  uint64_t v1254 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1255 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1256 = 0;
                          unsigned int v1257 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1254 + v1256) = *((unsigned char *)v1253 + v1250 + v1256)
                                                      * *(unsigned char *)(v1252 + v1251 + v1256);
                            --v1257;
                            ++v1256;
                          }
                          while (v1257 > 1);
                          uint64_t v110 = *a1;
                          int v247 = (int **)*a2;
                          unsigned int v111 = *(int **)*a1;
                        }
                        uint64_t v1258 = *(void **)(v110 + 24);
                        uint64_t v1259 = v1258[1];
                        v1251 += v1259;
                        v1250 += *((void *)v247[3] + 1);
                        v1254 += (int)v374;
                        ++v1255;
                        unint64_t v1260 = v111[1];
                      }
                      while (v1255 < v1260);
                      int v1248 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1260 = 0;
                      uint64_t v1258 = *(void **)(v110 + 24);
                      uint64_t v1259 = v1258[1];
                    }
                    uint64_t v1251 = *v1258 + v1251 - v1260 * v1259;
                    uint64_t v1250 = *(void *)v247[3] + v1250 - *((void *)v247[3] + 1) * v248[1];
                    ++v1249;
                  }
                  while (v1249 < v1248);
                }
              }
              else if (v115 == 1)
              {
                int v375 = *v111;
                if (*v111)
                {
                  unint64_t v376 = 0;
                  uint64_t v377 = 0;
                  uint64_t v378 = 0;
                  uint64_t v379 = *(void *)(v110 + 152);
                  unint64_t v380 = v247[19];
                  uint64_t v381 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v382 = 0;
                      unsigned int v383 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v381 + v382) = *((unsigned char *)v380 + v377 + v382) * *(unsigned char *)(v379 + v378 + v382);
                        --v383;
                        ++v382;
                      }
                      while (v383 > 1);
                      uint64_t v110 = *a1;
                      int v247 = (int **)*a2;
                      int v375 = **(_DWORD **)*a1;
                    }
                    v378 += **(void **)(v110 + 24);
                    v377 += *(void *)v247[3];
                    v381 += (int)v374;
                    ++v376;
                  }
                  while (v376 < v375);
                }
              }
              else if (v109[6])
              {
                uint64_t v1917 = v247[19];
                uint64_t v1933 = *(void *)(v110 + 152);
                uint64_t v1962 = (int)v374;
                unint64_t v1991 = 0;
                unsigned int v1902 = v374 + 1;
                uint64_t v1261 = v109[19];
                do
                {
                  uint64_t v1262 = *(void *)*a1;
                  unint64_t v1263 = (unint64_t)(*(void *)(*a1 + 8) - v1262) >> 2;
                  uint64_t v1264 = 0;
                  uint64_t v1265 = (v1263 - 1);
                  if ((int)v1263 - 1 >= 0)
                  {
                    uint64_t v1266 = *(void *)(*a1 + 24);
                    int v1267 = v1991;
                    do
                    {
                      ldiv_t v1268 = ldiv(v1267, *(int *)(v1262 + 4 * v1265));
                      int v1267 = v1268.quot;
                      v1264 += *(void *)(v1266 + 8 * v1265--) * v1268.rem;
                    }
                    while (v1265 != -1);
                  }
                  uint64_t v1269 = *(void *)*a2;
                  unint64_t v1270 = (unint64_t)(*(void *)(*a2 + 8) - v1269) >> 2;
                  uint64_t v1271 = 0;
                  uint64_t v1272 = (v1270 - 1);
                  if ((int)v1270 - 1 >= 0)
                  {
                    uint64_t v1273 = *(void *)(*a2 + 24);
                    int v1274 = v1991;
                    do
                    {
                      ldiv_t v1275 = ldiv(v1274, *(int *)(v1269 + 4 * v1272));
                      int v1274 = v1275.quot;
                      v1271 += *(void *)(v1273 + 8 * v1272--) * v1275.rem;
                    }
                    while (v1272 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1276 = 0;
                    unsigned int v1277 = v1902;
                    do
                    {
                      *(unsigned char *)(v1261 + v1276) = *((unsigned char *)v1917 + (int)v1271 + v1276)
                                                * *(unsigned char *)(v1933 + (int)v1264 + v1276);
                      --v1277;
                      ++v1276;
                    }
                    while (v1277 > 1);
                    unsigned int v109 = *(void **)a3;
                  }
                  v1261 += v1962;
                  v1991 += v1962;
                }
                while (v1991 < v109[6]);
              }
              break;
            default:
LABEL_443:
              switch(v370)
              {
                case 1uLL:
                  if (v109[6])
                  {
                    unint64_t v384 = 0;
                    uint64_t v385 = 0;
                    uint64_t v386 = 0;
                    uint64_t v387 = *(void *)(v110 + 152);
                    unsigned int v388 = v247[19];
                    uint64_t v389 = v109[19];
                    do
                    {
                      *(unsigned char *)(v389 + v384) = *((unsigned char *)v388 + v385) * *(unsigned char *)(v387 + v386);
                      v386 += **(void **)(*a1 + 24);
                      v385 += **(void **)(*a2 + 24);
                      ++v384;
                    }
                    while (v384 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v700 = *v111;
                  if (*v111)
                  {
                    unint64_t v701 = 0;
                    uint64_t v702 = 0;
                    uint64_t v703 = 0;
                    uint64_t v704 = 0;
                    uint64_t v705 = *(void *)(v110 + 152);
                    uint64_t v706 = v247[19];
                    uint64_t v707 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v708 = 0;
                        do
                        {
                          *(unsigned char *)(v707 + v702 + v708) = *((unsigned char *)v706 + v703) * *(unsigned char *)(v705 + v704);
                          uint64_t v110 = *a1;
                          uint64_t v709 = *(void **)(*a1 + 24);
                          uint64_t v710 = v709[1];
                          v704 += v710;
                          int v247 = (int **)*a2;
                          int v711 = *(int **)(*a2 + 24);
                          uint64_t v712 = *((void *)v711 + 1);
                          v703 += v712;
                          ++v708;
                          unsigned int v111 = *(int **)*a1;
                          unint64_t v713 = v111[1];
                        }
                        while (v708 < v713);
                        int v700 = *v111;
                        uint64_t v248 = *v247;
                        v702 += v708;
                      }
                      else
                      {
                        unint64_t v713 = 0;
                        uint64_t v709 = *(void **)(v110 + 24);
                        uint64_t v710 = v709[1];
                        int v711 = v247[3];
                        uint64_t v712 = *((void *)v711 + 1);
                      }
                      uint64_t v704 = *v709 + v704 - v713 * v710;
                      uint64_t v703 = *(void *)v711 + v703 - v712 * v248[1];
                      ++v701;
                    }
                    while (v701 < v700);
                  }
                  break;
                case 3uLL:
                  int v714 = *v111;
                  if (*v111)
                  {
                    unint64_t v715 = 0;
                    uint64_t v716 = 0;
                    uint64_t v717 = 0;
                    uint64_t v718 = 0;
                    uint64_t v719 = *(void *)(v110 + 152);
                    int v720 = v247[19];
                    uint64_t v721 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v722 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            unint64_t v723 = 0;
                            do
                            {
                              *(unsigned char *)(v721 + v716 + v723) = *((unsigned char *)v720 + v717) * *(unsigned char *)(v719 + v718);
                              uint64_t v110 = *a1;
                              uint64_t v724 = *(void **)(*a1 + 24);
                              uint64_t v725 = v724[2];
                              v718 += v725;
                              int v247 = (int **)*a2;
                              unint64_t v726 = *(int **)(*a2 + 24);
                              uint64_t v727 = *((void *)v726 + 2);
                              v717 += v727;
                              ++v723;
                              unsigned int v111 = *(int **)*a1;
                              unint64_t v728 = v111[2];
                            }
                            while (v723 < v728);
                            uint64_t v248 = *v247;
                            v716 += v723;
                          }
                          else
                          {
                            unint64_t v728 = 0;
                            uint64_t v724 = *(void **)(v110 + 24);
                            uint64_t v725 = v724[2];
                            unint64_t v726 = v247[3];
                            uint64_t v727 = *((void *)v726 + 2);
                          }
                          uint64_t v729 = v724[1];
                          uint64_t v718 = v729 + v718 - v728 * v725;
                          uint64_t v717 = *((void *)v726 + 1) + v717 - v727 * v248[2];
                          ++v722;
                          unint64_t v730 = v111[1];
                        }
                        while (v722 < v730);
                        int v714 = *v111;
                      }
                      else
                      {
                        unint64_t v730 = 0;
                        uint64_t v724 = *(void **)(v110 + 24);
                        uint64_t v729 = v724[1];
                      }
                      uint64_t v718 = *v724 + v718 - v730 * v729;
                      uint64_t v717 = *(void *)v247[3] + v717 - *((void *)v247[3] + 1) * v248[1];
                      ++v715;
                    }
                    while (v715 < v714);
                  }
                  break;
                case 4uLL:
                  int v731 = *v111;
                  if (*v111)
                  {
                    unint64_t v732 = 0;
                    uint64_t v733 = 0;
                    uint64_t v734 = 0;
                    uint64_t v735 = 0;
                    uint64_t v736 = *(void *)(v110 + 152);
                    uint64_t v737 = v247[19];
                    uint64_t v738 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v739 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            unint64_t v740 = 0;
                            do
                            {
                              if (v111[3])
                              {
                                unint64_t v741 = 0;
                                do
                                {
                                  *(unsigned char *)(v738 + v733 + v741) = *((unsigned char *)v737 + v734) * *(unsigned char *)(v736 + v735);
                                  uint64_t v110 = *a1;
                                  int v742 = *(void **)(*a1 + 24);
                                  uint64_t v743 = v742[3];
                                  v735 += v743;
                                  int v247 = (int **)*a2;
                                  unint64_t v744 = *(int **)(*a2 + 24);
                                  uint64_t v745 = *((void *)v744 + 3);
                                  v734 += v745;
                                  ++v741;
                                  unsigned int v111 = *(int **)*a1;
                                  unint64_t v746 = v111[3];
                                }
                                while (v741 < v746);
                                uint64_t v248 = *v247;
                                v733 += v741;
                              }
                              else
                              {
                                unint64_t v746 = 0;
                                int v742 = *(void **)(v110 + 24);
                                uint64_t v743 = v742[3];
                                unint64_t v744 = v247[3];
                                uint64_t v745 = *((void *)v744 + 3);
                              }
                              uint64_t v747 = v742[2];
                              uint64_t v735 = v747 + v735 - v746 * v743;
                              uint64_t v734 = *((void *)v744 + 2) + v734 - v745 * v248[3];
                              ++v740;
                              unint64_t v748 = v111[2];
                            }
                            while (v740 < v748);
                          }
                          else
                          {
                            unint64_t v748 = 0;
                            int v742 = *(void **)(v110 + 24);
                            uint64_t v747 = v742[2];
                          }
                          uint64_t v735 = v742[1] + v735 - v748 * v747;
                          uint64_t v734 = *((void *)v247[3] + 1) + v734 - *((void *)v247[3] + 2) * v248[2];
                          ++v739;
                          unint64_t v749 = v111[1];
                        }
                        while (v739 < v749);
                        int v731 = *v111;
                      }
                      else
                      {
                        unint64_t v749 = 0;
                      }
                      uint64_t v735 = **(void **)(v110 + 24) + v735 - *(void *)(*(void *)(v110 + 24) + 8) * v749;
                      uint64_t v734 = *(void *)v247[3] + v734 - *((void *)v247[3] + 1) * v248[1];
                      ++v732;
                    }
                    while (v732 < v731);
                  }
                  break;
                default:
                  if (v109[6])
                  {
                    unint64_t v684 = 0;
                    uint64_t v1987 = v247[19];
                    uint64_t v2005 = *(void *)(v110 + 152);
                    uint64_t v685 = v109[19];
                    do
                    {
                      uint64_t v686 = *(void *)*a1;
                      unint64_t v687 = (unint64_t)(*(void *)(*a1 + 8) - v686) >> 2;
                      uint64_t v688 = 0;
                      uint64_t v689 = (v687 - 1);
                      if ((int)v687 - 1 >= 0)
                      {
                        uint64_t v690 = *(void *)(*a1 + 24);
                        int v691 = v684;
                        do
                        {
                          ldiv_t v692 = ldiv(v691, *(int *)(v686 + 4 * v689));
                          int v691 = v692.quot;
                          v688 += *(void *)(v690 + 8 * v689--) * v692.rem;
                        }
                        while (v689 != -1);
                      }
                      uint64_t v693 = *(void *)*a2;
                      unint64_t v694 = (unint64_t)(*(void *)(*a2 + 8) - v693) >> 2;
                      uint64_t v695 = 0;
                      uint64_t v696 = (v694 - 1);
                      if ((int)v694 - 1 >= 0)
                      {
                        uint64_t v697 = *(void *)(*a2 + 24);
                        int v698 = v684;
                        do
                        {
                          ldiv_t v699 = ldiv(v698, *(int *)(v693 + 4 * v696));
                          int v698 = v699.quot;
                          v695 += *(void *)(v697 + 8 * v696--) * v699.rem;
                        }
                        while (v696 != -1);
                      }
                      *(unsigned char *)(v685 + v684++) = *((unsigned char *)v1987 + (int)v695) * *(unsigned char *)(v2005 + (int)v688);
                    }
                    while (v684 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v24)
      {
        case 0:
LABEL_23:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) * **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          int v146 = *(_DWORD *)(*a2 + 160);
          if (v146 >= 1)
          {
            int v147 = **(_DWORD **)(*a1 + 152);
            char v148 = *(_DWORD **)(*(void *)a3 + 152);
            int v149 = *(int **)(*a2 + 152);
            unsigned int v150 = v146 + 1;
            do
            {
              int v151 = *v149++;
              *v148++ = v151 * v147;
              --v150;
            }
            while (v150 > 1);
          }
          return;
        case 2:
          int v152 = *(_DWORD *)(*a1 + 160);
          if (v152 >= 1)
          {
            int v153 = **(_DWORD **)(*a2 + 152);
            uint64_t v154 = *(_DWORD **)(*(void *)a3 + 152);
            int v155 = *(int **)(*a1 + 152);
            unsigned int v156 = v152 + 1;
            do
            {
              int v157 = *v155++;
              *v154++ = v157 * v153;
              --v156;
            }
            while (v156 > 1);
          }
          return;
        case 3:
          int v158 = *(_DWORD *)(*(void *)a3 + 48);
          if (v158 >= 1)
          {
            int v159 = *(_DWORD **)(*(void *)a3 + 152);
            int v160 = *(int **)(*a2 + 152);
            int v161 = *(int **)(*a1 + 152);
            unsigned int v162 = v158 + 1;
            do
            {
              int v164 = *v161++;
              int v163 = v164;
              int v165 = *v160++;
              *v159++ = v165 * v163;
              --v162;
            }
            while (v162 > 1);
          }
          return;
        default:
          int v137 = *(void **)a3;
          unsigned int v138 = (void *)*a1;
          char v139 = *(int **)*a1;
          uint64_t v140 = (v138[1] - (void)v139) >> 2;
          uint64_t v141 = (v140 - 1);
          if ((int)v141 >= -1) {
            int v142 = -1;
          }
          else {
            int v142 = v140 - 1;
          }
          int v143 = v142 + 1;
          int v144 = v140 + 1;
          while (1)
          {
            unsigned int v145 = v144 - 2;
            if (v144 - 2 < 0) {
              break;
            }
            --v144;
            if (*(void *)(v138[3] + 8 * v145) != *(void *)(v137[3] + 8 * v145)) {
              goto LABEL_200;
            }
          }
          int v144 = v143;
LABEL_200:
          int v254 = (void *)*a2;
          int v255 = *(int **)*a2;
          uint64_t v256 = (v254[1] - (void)v255) >> 2;
          uint64_t v257 = (v256 - 1);
          if ((int)v257 >= -1) {
            int v258 = -1;
          }
          else {
            int v258 = v256 - 1;
          }
          int v259 = v258 + 1;
          int v260 = v256 + 1;
          while (1)
          {
            unsigned int v261 = v260 - 2;
            if (v260 - 2 < 0) {
              break;
            }
            --v260;
            if (*(void *)(v254[3] + 8 * v261) != *(void *)(v137[3] + 8 * v261)) {
              goto LABEL_244;
            }
          }
          int v260 = v259;
LABEL_244:
          int v286 = v140 + 1;
          while (1)
          {
            unsigned int v287 = v286 - 2;
            if (v286 - 2 < 0) {
              break;
            }
            --v286;
            if (*(void *)(v138[3] + 8 * v287)) {
              goto LABEL_279;
            }
          }
          int v286 = v143;
LABEL_279:
          int v300 = v256 + 1;
          while (1)
          {
            unsigned int v301 = v300 - 2;
            if (v300 - 2 < 0) {
              break;
            }
            --v300;
            if (*(void *)(v254[3] + 8 * v301)) {
              goto LABEL_449;
            }
          }
          int v300 = v259;
LABEL_449:
          unint64_t v390 = (uint64_t)(v137[1] - *v137) >> 2;
          if (v144 <= v260) {
            int v391 = v260;
          }
          else {
            int v391 = v144;
          }
          if (v144 <= v300) {
            int v144 = v300;
          }
          if (v286 > v260) {
            int v260 = v286;
          }
          if (v390 > v260)
          {
            int v392 = 1;
          }
          else
          {
            int v260 = (uint64_t)(v137[1] - *v137) >> 2;
            int v392 = 4;
          }
          if (v390 > v144)
          {
            int v393 = 2;
          }
          else
          {
            int v144 = v260;
            int v393 = v392;
          }
          if (v390 > v391)
          {
            int v144 = v391;
            int v393 = 3;
          }
          uint64_t v1982 = v257;
          uint64_t v2000 = v141;
          if (!v144) {
            goto LABEL_479;
          }
          unint64_t v394 = *(void *)(v137[3] + 8 * (v144 - 1));
          if (v394 < 0x10) {
            goto LABEL_479;
          }
          switch(v393)
          {
            case 1:
              if (v144 == 2)
              {
                int v1658 = *v139;
                if (*v139)
                {
                  unint64_t v1659 = 0;
                  uint64_t v1660 = 0;
                  uint64_t v1661 = 0;
                  uint64_t v1662 = v138[19];
                  uint64_t v1663 = v254[19];
                  uint64_t v1664 = v137[19];
                  int v1665 = (uint64_t *)v138[3];
                  uint64_t v1666 = *v1665;
                  uint64_t v1667 = v1665[1];
                  uint64_t v1668 = (uint64_t *)v254[3];
                  uint64_t v1669 = *v1668;
                  uint64_t v1670 = v1668[1];
                  int v1671 = v139[1];
                  int v1672 = v1671;
                  do
                  {
                    if (v1672)
                    {
                      unint64_t v1673 = 0;
                      uint64_t v1674 = v1663 + 4 * v1660;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1675 = 0;
                          int v1676 = *(_DWORD *)(v1662 + 4 * v1661);
                          unsigned int v1677 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1664 + v1675) = *(_DWORD *)(v1674 + v1675) * v1676;
                            --v1677;
                            v1675 += 4;
                          }
                          while (v1677 > 1);
                          int v1671 = v139[1];
                        }
                        v1661 += v1667;
                        v1660 += v1670;
                        v1664 += 4 * (int)v394;
                        ++v1673;
                        v1674 += 4 * v1670;
                      }
                      while (v1673 < v1671);
                      uint64_t v1678 = v1671;
                      int v1658 = *v139;
                      int v1672 = v1671;
                    }
                    else
                    {
                      uint64_t v1678 = 0;
                    }
                    uint64_t v1661 = v1661 + v1666 - v1678 * v1667;
                    uint64_t v1660 = v1660 + v1669 - v1670 * v255[1];
                    ++v1659;
                  }
                  while (v1659 < v1658);
                }
              }
              else if (v144 == 1)
              {
                int v1080 = *v139;
                if (*v139)
                {
                  unint64_t v1081 = 0;
                  uint64_t v1082 = 0;
                  uint64_t v1083 = v138[19];
                  uint64_t v1084 = v254[19];
                  uint64_t v1085 = v137[19];
                  uint64_t v1086 = *(void *)v138[3];
                  uint64_t v1087 = 4 * *(void *)v254[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1088 = 0;
                      int v1089 = *(_DWORD *)(v1083 + 4 * v1082);
                      unsigned int v1090 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1085 + v1088) = *(_DWORD *)(v1084 + v1088) * v1089;
                        --v1090;
                        v1088 += 4;
                      }
                      while (v1090 > 1);
                      int v1080 = *v139;
                    }
                    v1082 += v1086;
                    ++v1081;
                    v1085 += 4 * (int)v394;
                    v1084 += v1087;
                  }
                  while (v1081 < v1080);
                }
              }
              else
              {
                unint64_t v1945 = v137[6];
                if (v1945)
                {
                  unint64_t v1974 = 0;
                  uint64_t v1878 = v254[19];
                  uint64_t v1893 = v138[19];
                  uint64_t v1679 = v137[19];
                  do
                  {
                    uint64_t v1680 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1681 = v138[3];
                      uint64_t v1682 = v141;
                      int v1683 = v1974;
                      do
                      {
                        ldiv_t v1684 = ldiv(v1683, v139[v1682]);
                        int v1683 = v1684.quot;
                        v1680 += *(void *)(v1681 + 8 * v1682--) * v1684.rem;
                      }
                      while (v1682 != -1);
                    }
                    uint64_t v1685 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1686) = 0;
                    }
                    else
                    {
                      uint64_t v1686 = 0;
                      uint64_t v1687 = v254[3];
                      int v1688 = v1974;
                      do
                      {
                        ldiv_t v1689 = ldiv(v1688, v255[v1685]);
                        int v1688 = v1689.quot;
                        v1686 += *(void *)(v1687 + 8 * v1685--) * v1689.rem;
                      }
                      while (v1685 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1690 = 0;
                      int v1691 = *(_DWORD *)(v1893 + 4 * (int)v1680);
                      unsigned int v1692 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1679 + v1690) = *(_DWORD *)(v1878 + 4 * (int)v1686 + v1690) * v1691;
                        --v1692;
                        v1690 += 4;
                      }
                      while (v1692 > 1);
                    }
                    v1679 += 4 * (int)v394;
                    v1974 += (int)v394;
                  }
                  while (v1974 < v1945);
                }
              }
              break;
            case 2:
              if (v144 == 2)
              {
                int v1693 = *v139;
                if (*v139)
                {
                  unint64_t v1694 = 0;
                  uint64_t v1695 = 0;
                  uint64_t v1696 = 0;
                  uint64_t v1697 = v138[19];
                  uint64_t v1698 = v254[19];
                  uint64_t v1699 = v137[19];
                  uint64_t v1700 = (uint64_t *)v138[3];
                  uint64_t v1701 = *v1700;
                  uint64_t v1702 = v1700[1];
                  uint64_t v1703 = (uint64_t *)v254[3];
                  uint64_t v1704 = *v1703;
                  uint64_t v1705 = v1703[1];
                  int v1706 = v139[1];
                  int v1707 = v1706;
                  do
                  {
                    if (v1707)
                    {
                      unint64_t v1708 = 0;
                      uint64_t v1709 = v1697 + 4 * v1696;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1710 = 0;
                          int v1711 = *(_DWORD *)(v1698 + 4 * v1695);
                          unsigned int v1712 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1699 + v1710) = *(_DWORD *)(v1709 + v1710) * v1711;
                            --v1712;
                            v1710 += 4;
                          }
                          while (v1712 > 1);
                          int v1706 = v139[1];
                        }
                        v1696 += v1702;
                        v1695 += v1705;
                        v1699 += 4 * (int)v394;
                        ++v1708;
                        v1709 += 4 * v1702;
                      }
                      while (v1708 < v1706);
                      uint64_t v1713 = v1706;
                      int v1693 = *v139;
                      int v1707 = v1706;
                    }
                    else
                    {
                      uint64_t v1713 = 0;
                    }
                    uint64_t v1696 = v1696 + v1701 - v1713 * v1702;
                    uint64_t v1695 = v1695 + v1704 - v1705 * v255[1];
                    ++v1694;
                  }
                  while (v1694 < v1693);
                }
              }
              else if (v144 == 1)
              {
                int v1091 = *v139;
                if (*v139)
                {
                  unint64_t v1092 = 0;
                  uint64_t v1093 = 0;
                  uint64_t v1094 = v138[19];
                  uint64_t v1095 = v254[19];
                  uint64_t v1096 = v137[19];
                  uint64_t v1097 = *(void *)v254[3];
                  uint64_t v1098 = 4 * *(void *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1099 = 0;
                      int v1100 = *(_DWORD *)(v1095 + 4 * v1093);
                      unsigned int v1101 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1096 + v1099) = *(_DWORD *)(v1094 + v1099) * v1100;
                        --v1101;
                        v1099 += 4;
                      }
                      while (v1101 > 1);
                      int v1091 = *v139;
                    }
                    v1093 += v1097;
                    ++v1092;
                    v1096 += 4 * (int)v394;
                    v1094 += v1098;
                  }
                  while (v1092 < v1091);
                }
              }
              else
              {
                unint64_t v1946 = v137[6];
                if (v1946)
                {
                  unint64_t v1975 = 0;
                  uint64_t v1879 = v254[19];
                  uint64_t v1894 = v138[19];
                  uint64_t v1714 = v137[19];
                  do
                  {
                    uint64_t v1715 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1716 = v138[3];
                      uint64_t v1717 = v141;
                      int v1718 = v1975;
                      do
                      {
                        ldiv_t v1719 = ldiv(v1718, v139[v1717]);
                        int v1718 = v1719.quot;
                        v1715 += *(void *)(v1716 + 8 * v1717--) * v1719.rem;
                      }
                      while (v1717 != -1);
                    }
                    uint64_t v1720 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1721) = 0;
                    }
                    else
                    {
                      uint64_t v1721 = 0;
                      uint64_t v1722 = v254[3];
                      int v1723 = v1975;
                      do
                      {
                        ldiv_t v1724 = ldiv(v1723, v255[v1720]);
                        int v1723 = v1724.quot;
                        v1721 += *(void *)(v1722 + 8 * v1720--) * v1724.rem;
                      }
                      while (v1720 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1725 = 0;
                      int v1726 = *(_DWORD *)(v1879 + 4 * (int)v1721);
                      unsigned int v1727 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1714 + v1725) = *(_DWORD *)(v1894 + 4 * (int)v1715 + v1725) * v1726;
                        --v1727;
                        v1725 += 4;
                      }
                      while (v1727 > 1);
                    }
                    v1714 += 4 * (int)v394;
                    v1975 += (int)v394;
                  }
                  while (v1975 < v1946);
                }
              }
              break;
            case 3:
              if (v144 == 2)
              {
                int v1278 = *v139;
                if (*v139)
                {
                  unint64_t v1279 = 0;
                  uint64_t v1280 = 0;
                  uint64_t v1281 = 0;
                  uint64_t v1282 = v138[19];
                  uint64_t v1283 = v254[19];
                  uint64_t v1284 = v137[19];
                  unsigned int v1285 = (uint64_t *)v138[3];
                  uint64_t v1286 = *v1285;
                  uint64_t v1287 = v1285[1];
                  uint64_t v1288 = (uint64_t *)v254[3];
                  uint64_t v1289 = *v1288;
                  uint64_t v1290 = v1288[1];
                  int v1291 = v139[1];
                  int v1292 = v1291;
                  do
                  {
                    if (v1292)
                    {
                      unint64_t v1293 = 0;
                      uint64_t v1294 = v1283 + 4 * v1280;
                      uint64_t v1295 = v1282 + 4 * v1281;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1296 = 0;
                          unsigned int v1297 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1284 + v1296) = *(_DWORD *)(v1294 + v1296) * *(_DWORD *)(v1295 + v1296);
                            --v1297;
                            v1296 += 4;
                          }
                          while (v1297 > 1);
                          int v1291 = v139[1];
                        }
                        v1281 += v1287;
                        v1280 += v1290;
                        v1284 += 4 * (int)v394;
                        ++v1293;
                        v1294 += 4 * v1290;
                        v1295 += 4 * v1287;
                      }
                      while (v1293 < v1291);
                      uint64_t v1298 = v1291;
                      int v1278 = *v139;
                      int v1292 = v1291;
                    }
                    else
                    {
                      uint64_t v1298 = 0;
                    }
                    uint64_t v1281 = v1281 + v1286 - v1298 * v1287;
                    uint64_t v1280 = v1280 + v1289 - v1290 * v255[1];
                    ++v1279;
                  }
                  while (v1279 < v1278);
                }
              }
              else if (v144 == 1)
              {
                int v395 = *v139;
                if (*v139)
                {
                  unint64_t v396 = 0;
                  uint64_t v397 = v138[19];
                  uint64_t v398 = v254[19];
                  uint64_t v399 = v137[19];
                  uint64_t v400 = 4 * *(void *)v254[3];
                  uint64_t v401 = 4 * *(void *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v402 = 0;
                      unsigned int v403 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v399 + v402) = *(_DWORD *)(v398 + v402) * *(_DWORD *)(v397 + v402);
                        --v403;
                        v402 += 4;
                      }
                      while (v403 > 1);
                      int v395 = *v139;
                    }
                    ++v396;
                    v399 += 4 * (int)v394;
                    v398 += v400;
                    v397 += v401;
                  }
                  while (v396 < v395);
                }
              }
              else
              {
                unint64_t v1934 = v137[6];
                if (v1934)
                {
                  unint64_t v1963 = 0;
                  uint64_t v1873 = v254[19];
                  uint64_t v1886 = v138[19];
                  uint64_t v1299 = v137[19];
                  do
                  {
                    uint64_t v1300 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1301 = v138[3];
                      uint64_t v1302 = v141;
                      int v1303 = v1963;
                      do
                      {
                        ldiv_t v1304 = ldiv(v1303, v139[v1302]);
                        int v1303 = v1304.quot;
                        v1300 += *(void *)(v1301 + 8 * v1302--) * v1304.rem;
                      }
                      while (v1302 != -1);
                    }
                    uint64_t v1305 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1306) = 0;
                    }
                    else
                    {
                      uint64_t v1306 = 0;
                      uint64_t v1307 = v254[3];
                      int v1308 = v1963;
                      do
                      {
                        ldiv_t v1309 = ldiv(v1308, v255[v1305]);
                        int v1308 = v1309.quot;
                        v1306 += *(void *)(v1307 + 8 * v1305--) * v1309.rem;
                      }
                      while (v1305 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1310 = 0;
                      unsigned int v1311 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1299 + v1310) = *(_DWORD *)(v1873 + 4 * (int)v1306 + v1310)
                                                   * *(_DWORD *)(v1886 + 4 * (int)v1300 + v1310);
                        --v1311;
                        v1310 += 4;
                      }
                      while (v1311 > 1);
                    }
                    v1299 += 4 * (int)v394;
                    v1963 += (int)v394;
                  }
                  while (v1963 < v1934);
                }
              }
              break;
            default:
LABEL_479:
              switch(v390)
              {
                case 1uLL:
                  uint64_t v404 = v137[6];
                  if (v404)
                  {
                    uint64_t v405 = (_DWORD *)v138[19];
                    unint64_t v406 = (_DWORD *)v254[19];
                    uint64_t v407 = (_DWORD *)v137[19];
                    uint64_t v408 = 4 * *(void *)v254[3];
                    uint64_t v409 = 4 * *(void *)v138[3];
                    do
                    {
                      *v407++ = *v406 * *v405;
                      unint64_t v406 = (_DWORD *)((char *)v406 + v408);
                      uint64_t v405 = (_DWORD *)((char *)v405 + v409);
                      --v404;
                    }
                    while (v404);
                  }
                  break;
                case 2uLL:
                  int v762 = *v139;
                  if (*v139)
                  {
                    unint64_t v763 = 0;
                    uint64_t v764 = 0;
                    uint64_t v765 = 0;
                    uint64_t v766 = 0;
                    uint64_t v767 = v138[19];
                    uint64_t v768 = v254[19];
                    uint64_t v769 = v137[19];
                    uint64_t v770 = (uint64_t *)v138[3];
                    uint64_t v771 = *v770;
                    uint64_t v772 = v770[1];
                    unint64_t v773 = (uint64_t *)v254[3];
                    uint64_t v775 = *v773;
                    uint64_t v774 = v773[1];
                    int v776 = v139[1];
                    do
                    {
                      if (v776)
                      {
                        for (unint64_t m = 0; m < v776; ++m)
                        {
                          *(_DWORD *)(v769 + 4 * v764 + 4 * m) = *(_DWORD *)(v768 + 4 * v765)
                                                               * *(_DWORD *)(v767 + 4 * v766);
                          v766 += v772;
                          v765 += v774;
                          int v776 = v139[1];
                        }
                        uint64_t v778 = v776;
                        int v762 = *v139;
                        v764 += m;
                      }
                      else
                      {
                        uint64_t v778 = 0;
                      }
                      uint64_t v766 = v766 + v771 - v778 * v772;
                      uint64_t v765 = v765 + v775 - v774 * v255[1];
                      ++v763;
                    }
                    while (v763 < v762);
                  }
                  break;
                case 3uLL:
                  int v779 = *v139;
                  if (*v139)
                  {
                    unint64_t v780 = 0;
                    uint64_t v781 = 0;
                    uint64_t v782 = 0;
                    uint64_t v783 = 0;
                    uint64_t v784 = v138[19];
                    uint64_t v785 = v254[19];
                    uint64_t v786 = v137[19];
                    int v787 = (uint64_t *)v138[3];
                    uint64_t v788 = *v787;
                    uint64_t v789 = v787[1];
                    unint64_t v790 = (uint64_t *)v254[3];
                    uint64_t v791 = *v790;
                    uint64_t v792 = v790[1];
                    int v793 = v139[1];
                    int v794 = v793;
                    do
                    {
                      if (v794)
                      {
                        unint64_t v795 = 0;
                        uint64_t v796 = v787[2];
                        uint64_t v797 = v790[2];
                        int v798 = v139[2];
                        do
                        {
                          if (v798)
                          {
                            for (unint64_t n = 0; n < v798; ++n)
                            {
                              *(_DWORD *)(v786 + 4 * v781 + 4 * n) = *(_DWORD *)(v785 + 4 * v782)
                                                                   * *(_DWORD *)(v784 + 4 * v783);
                              v783 += v796;
                              v782 += v797;
                              int v798 = v139[2];
                            }
                            uint64_t v800 = v798;
                            int v793 = v139[1];
                            v781 += n;
                          }
                          else
                          {
                            uint64_t v800 = 0;
                          }
                          uint64_t v783 = v783 + v789 - v800 * v796;
                          uint64_t v782 = v782 + v792 - v797 * v255[2];
                          ++v795;
                        }
                        while (v795 < v793);
                        uint64_t v801 = v793;
                        int v779 = *v139;
                        int v794 = v793;
                      }
                      else
                      {
                        uint64_t v801 = 0;
                      }
                      uint64_t v783 = v783 + v788 - v801 * v789;
                      uint64_t v782 = v782 + v791 - v792 * v255[1];
                      ++v780;
                    }
                    while (v780 < v779);
                  }
                  break;
                case 4uLL:
                  int v802 = *v139;
                  if (*v139)
                  {
                    unint64_t v803 = 0;
                    uint64_t v804 = 0;
                    uint64_t v805 = 0;
                    uint64_t v806 = 0;
                    uint64_t v807 = v138[19];
                    uint64_t v808 = v254[19];
                    uint64_t v809 = v137[19];
                    unint64_t v810 = (uint64_t *)v138[3];
                    uint64_t v811 = *v810;
                    uint64_t v812 = v810[1];
                    uint64_t v813 = (uint64_t *)v254[3];
                    uint64_t v814 = *v813;
                    uint64_t v815 = v813[1];
                    int v816 = v139[1];
                    int v817 = v816;
                    do
                    {
                      if (v817)
                      {
                        unint64_t v818 = 0;
                        uint64_t v819 = v810[2];
                        uint64_t v820 = v813[2];
                        int v821 = v139[2];
                        int v822 = v821;
                        do
                        {
                          if (v822)
                          {
                            unint64_t v823 = 0;
                            uint64_t v824 = v810[3];
                            uint64_t v825 = v813[3];
                            int v826 = v139[3];
                            do
                            {
                              if (v826)
                              {
                                for (iunint64_t i = 0; ii < v826; ++ii)
                                {
                                  *(_DWORD *)(v809 + 4 * v804 + 4 * ii) = *(_DWORD *)(v808 + 4 * v805)
                                                                        * *(_DWORD *)(v807 + 4 * v806);
                                  v806 += v824;
                                  v805 += v825;
                                  int v826 = v139[3];
                                }
                                uint64_t v828 = v826;
                                int v821 = v139[2];
                                v804 += ii;
                              }
                              else
                              {
                                uint64_t v828 = 0;
                              }
                              uint64_t v806 = v806 + v819 - v828 * v824;
                              uint64_t v805 = v805 + v820 - v825 * v255[3];
                              ++v823;
                            }
                            while (v823 < v821);
                            uint64_t v829 = v821;
                            int v816 = v139[1];
                            int v822 = v821;
                          }
                          else
                          {
                            uint64_t v829 = 0;
                          }
                          uint64_t v806 = v806 + v812 - v829 * v819;
                          uint64_t v805 = v805 + v815 - v820 * v255[2];
                          ++v818;
                        }
                        while (v818 < v816);
                        uint64_t v830 = v816;
                        int v802 = *v139;
                        int v817 = v816;
                      }
                      else
                      {
                        uint64_t v830 = 0;
                      }
                      uint64_t v806 = v806 + v811 - v830 * v812;
                      uint64_t v805 = v805 + v814 - v815 * v255[1];
                      ++v803;
                    }
                    while (v803 < v802);
                  }
                  break;
                default:
                  uint64_t v750 = v137[6];
                  if (v750)
                  {
                    uint64_t v751 = 0;
                    uint64_t v1925 = v254[19];
                    uint64_t v1954 = v138[19];
                    uint64_t v1912 = v137[19];
                    do
                    {
                      uint64_t v752 = 0;
                      if ((v141 & 0x80000000) == 0)
                      {
                        uint64_t v753 = v138[3];
                        uint64_t v754 = v141;
                        int v755 = v751;
                        do
                        {
                          ldiv_t v756 = ldiv(v755, v139[v754]);
                          int v755 = v756.quot;
                          v752 += *(void *)(v753 + 8 * v754--) * v756.rem;
                        }
                        while (v754 != -1);
                      }
                      uint64_t v757 = v1982;
                      if ((v1982 & 0x80000000) != 0)
                      {
                        LODWORD(v758) = 0;
                      }
                      else
                      {
                        uint64_t v758 = 0;
                        uint64_t v759 = v254[3];
                        int v760 = v751;
                        do
                        {
                          ldiv_t v761 = ldiv(v760, v255[v757]);
                          int v760 = v761.quot;
                          v758 += *(void *)(v759 + 8 * v757--) * v761.rem;
                        }
                        while (v757 != -1);
                      }
                      *(_DWORD *)(v1912 + 4 * v751++) = *(_DWORD *)(v1925 + 4 * (int)v758)
                                                      * *(_DWORD *)(v1954 + 4 * (int)v752);
                      uint64_t v141 = v2000;
                    }
                    while (v751 != v750);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v25)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) * **(void **)(*a1 + 152);
          return;
        case 1:
          int v175 = *(_DWORD *)(*a2 + 160);
          if (v175 >= 1)
          {
            uint64_t v176 = **(void **)(*a1 + 152);
            unsigned int v177 = *(void **)(*(void *)a3 + 152);
            int v178 = *(uint64_t **)(*a2 + 152);
            unsigned int v179 = v175 + 1;
            do
            {
              uint64_t v180 = *v178++;
              *v177++ = v180 * v176;
              --v179;
            }
            while (v179 > 1);
          }
          return;
        case 2:
          int v181 = *(_DWORD *)(*a1 + 160);
          if (v181 >= 1)
          {
            uint64_t v182 = **(void **)(*a2 + 152);
            uint64_t v183 = *(void **)(*(void *)a3 + 152);
            int v184 = *(uint64_t **)(*a1 + 152);
            unsigned int v185 = v181 + 1;
            do
            {
              uint64_t v186 = *v184++;
              *v183++ = v186 * v182;
              --v185;
            }
            while (v185 > 1);
          }
          return;
        case 3:
          int v187 = *(_DWORD *)(*(void *)a3 + 48);
          if (v187 >= 1)
          {
            int v188 = *(void **)(*(void *)a3 + 152);
            int v189 = *(uint64_t **)(*a2 + 152);
            unsigned int v190 = *(uint64_t **)(*a1 + 152);
            unsigned int v191 = v187 + 1;
            do
            {
              uint64_t v193 = *v190++;
              uint64_t v192 = v193;
              uint64_t v194 = *v189++;
              *v188++ = v194 * v192;
              --v191;
            }
            while (v191 > 1);
          }
          return;
        default:
          int v166 = *(void **)a3;
          int v167 = (void *)*a1;
          int v168 = *(int **)*a1;
          uint64_t v169 = (v167[1] - (void)v168) >> 2;
          uint64_t v170 = (v169 - 1);
          if ((int)v170 >= -1) {
            int v171 = -1;
          }
          else {
            int v171 = v169 - 1;
          }
          int v172 = v171 + 1;
          int v173 = v169 + 1;
          while (1)
          {
            unsigned int v174 = v173 - 2;
            if (v173 - 2 < 0) {
              break;
            }
            --v173;
            if (*(void *)(v167[3] + 8 * v174) != *(void *)(v166[3] + 8 * v174)) {
              goto LABEL_208;
            }
          }
          int v173 = v172;
LABEL_208:
          int v262 = (void *)*a2;
          uint64_t v263 = *(int **)*a2;
          uint64_t v264 = (v262[1] - (void)v263) >> 2;
          uint64_t v265 = (v264 - 1);
          if ((int)v265 >= -1) {
            int v266 = -1;
          }
          else {
            int v266 = v264 - 1;
          }
          int v267 = v266 + 1;
          int v268 = v264 + 1;
          while (1)
          {
            unsigned int v269 = v268 - 2;
            if (v268 - 2 < 0) {
              break;
            }
            --v268;
            if (*(void *)(v262[3] + 8 * v269) != *(void *)(v166[3] + 8 * v269)) {
              goto LABEL_249;
            }
          }
          int v268 = v267;
LABEL_249:
          int v288 = v169 + 1;
          while (1)
          {
            unsigned int v289 = v288 - 2;
            if (v288 - 2 < 0) {
              break;
            }
            --v288;
            if (*(void *)(v167[3] + 8 * v289)) {
              goto LABEL_284;
            }
          }
          int v288 = v172;
LABEL_284:
          int v302 = v264 + 1;
          while (1)
          {
            unsigned int v303 = v302 - 2;
            if (v302 - 2 < 0) {
              break;
            }
            --v302;
            if (*(void *)(v262[3] + 8 * v303)) {
              goto LABEL_485;
            }
          }
          int v302 = v267;
LABEL_485:
          unint64_t v410 = (uint64_t)(v166[1] - *v166) >> 2;
          if (v173 <= v268) {
            int v411 = v268;
          }
          else {
            int v411 = v173;
          }
          if (v173 <= v302) {
            int v173 = v302;
          }
          if (v288 > v268) {
            int v268 = v288;
          }
          if (v410 > v268)
          {
            int v412 = 1;
          }
          else
          {
            int v268 = (uint64_t)(v166[1] - *v166) >> 2;
            int v412 = 4;
          }
          if (v410 > v173)
          {
            int v413 = 2;
          }
          else
          {
            int v173 = v268;
            int v413 = v412;
          }
          if (v410 > v411)
          {
            int v173 = v411;
            int v413 = 3;
          }
          uint64_t v1983 = v265;
          uint64_t v2001 = v170;
          if (!v173) {
            goto LABEL_514;
          }
          unint64_t v414 = *(void *)(v166[3] + 8 * (v173 - 1));
          if (v414 < 0x10) {
            goto LABEL_514;
          }
          switch(v413)
          {
            case 1:
              if (v173 == 2)
              {
                uint64_t v1728 = *v168;
                if (v1728)
                {
                  uint64_t v1729 = 0;
                  uint64_t v1730 = 0;
                  uint64_t v1731 = 0;
                  uint64_t v1732 = v167[19];
                  uint64_t v1733 = v262[19];
                  uint64_t v1734 = v166[19];
                  unint64_t v1735 = v168[1];
                  unint64_t v1736 = (uint64_t *)v167[3];
                  uint64_t v1737 = *v1736;
                  uint64_t v1738 = v1736[1];
                  unint64_t v1739 = (uint64_t *)v262[3];
                  uint64_t v1740 = *v1739;
                  uint64_t v1741 = v1739[1];
                  if (v1735 <= 1) {
                    uint64_t v1742 = 1;
                  }
                  else {
                    uint64_t v1742 = v168[1];
                  }
                  uint64_t v1743 = v1737 - v1738 * v1735;
                  uint64_t v1744 = v1740 - v1741 * v263[1];
                  do
                  {
                    if (v1735)
                    {
                      uint64_t v1745 = 0;
                      uint64_t v1746 = v1733 + 8 * v1730;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1747 = 0;
                          uint64_t v1748 = *(void *)(v1732 + 8 * v1731);
                          unsigned int v1749 = v414 + 1;
                          do
                          {
                            *(void *)(v1734 + v1747) = *(void *)(v1746 + v1747) * v1748;
                            --v1749;
                            v1747 += 8;
                          }
                          while (v1749 > 1);
                        }
                        v1731 += v1738;
                        v1730 += v1741;
                        v1734 += 8 * (int)v414;
                        ++v1745;
                        v1746 += 8 * v1741;
                      }
                      while (v1745 != v1742);
                    }
                    v1731 += v1743;
                    v1730 += v1744;
                    ++v1729;
                  }
                  while (v1729 != v1728);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v1102 = *v168;
                if (v1102)
                {
                  uint64_t v1103 = 0;
                  uint64_t v1104 = 0;
                  uint64_t v1105 = v167[19];
                  uint64_t v1106 = v262[19];
                  uint64_t v1107 = v166[19];
                  uint64_t v1108 = *(void *)v167[3];
                  uint64_t v1109 = 8 * *(void *)v262[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1110 = 0;
                      uint64_t v1111 = *(void *)(v1105 + 8 * v1104);
                      unsigned int v1112 = v414 + 1;
                      do
                      {
                        *(void *)(v1107 + v1110) = *(void *)(v1106 + v1110) * v1111;
                        --v1112;
                        v1110 += 8;
                      }
                      while (v1112 > 1);
                    }
                    v1104 += v1108;
                    ++v1103;
                    v1107 += 8 * (int)v414;
                    v1106 += v1109;
                  }
                  while (v1103 != v1102);
                }
              }
              else
              {
                unint64_t v1947 = v166[6];
                if (v1947)
                {
                  unint64_t v1976 = 0;
                  uint64_t v1880 = v262[19];
                  uint64_t v1895 = v167[19];
                  uint64_t v1750 = v166[19];
                  do
                  {
                    uint64_t v1751 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1752 = v167[3];
                      uint64_t v1753 = v170;
                      int v1754 = v1976;
                      do
                      {
                        ldiv_t v1755 = ldiv(v1754, v168[v1753]);
                        int v1754 = v1755.quot;
                        v1751 += *(void *)(v1752 + 8 * v1753--) * v1755.rem;
                      }
                      while (v1753 != -1);
                    }
                    uint64_t v1756 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1757) = 0;
                    }
                    else
                    {
                      uint64_t v1757 = 0;
                      uint64_t v1758 = v262[3];
                      int v1759 = v1976;
                      do
                      {
                        ldiv_t v1760 = ldiv(v1759, v263[v1756]);
                        int v1759 = v1760.quot;
                        v1757 += *(void *)(v1758 + 8 * v1756--) * v1760.rem;
                      }
                      while (v1756 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1761 = 0;
                      uint64_t v1762 = *(void *)(v1895 + 8 * (int)v1751);
                      unsigned int v1763 = v414 + 1;
                      do
                      {
                        *(void *)(v1750 + v1761) = *(void *)(v1880 + 8 * (int)v1757 + v1761) * v1762;
                        --v1763;
                        v1761 += 8;
                      }
                      while (v1763 > 1);
                    }
                    v1750 += 8 * (int)v414;
                    v1976 += (int)v414;
                  }
                  while (v1976 < v1947);
                }
              }
              break;
            case 2:
              if (v173 == 2)
              {
                uint64_t v1764 = *v168;
                if (v1764)
                {
                  uint64_t v1765 = 0;
                  uint64_t v1766 = 0;
                  uint64_t v1767 = 0;
                  uint64_t v1768 = v167[19];
                  uint64_t v1769 = v262[19];
                  uint64_t v1770 = v166[19];
                  unint64_t v1771 = v168[1];
                  uint64_t v1772 = (uint64_t *)v167[3];
                  uint64_t v1773 = *v1772;
                  uint64_t v1774 = v1772[1];
                  unsigned int v1775 = (uint64_t *)v262[3];
                  uint64_t v1776 = *v1775;
                  uint64_t v1777 = v1775[1];
                  if (v1771 <= 1) {
                    uint64_t v1778 = 1;
                  }
                  else {
                    uint64_t v1778 = v168[1];
                  }
                  uint64_t v1779 = v1773 - v1774 * v1771;
                  uint64_t v1780 = v1776 - v1777 * v263[1];
                  do
                  {
                    if (v1771)
                    {
                      uint64_t v1781 = 0;
                      uint64_t v1782 = v1768 + 8 * v1767;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1783 = 0;
                          uint64_t v1784 = *(void *)(v1769 + 8 * v1766);
                          unsigned int v1785 = v414 + 1;
                          do
                          {
                            *(void *)(v1770 + v1783) = *(void *)(v1782 + v1783) * v1784;
                            --v1785;
                            v1783 += 8;
                          }
                          while (v1785 > 1);
                        }
                        v1767 += v1774;
                        v1766 += v1777;
                        v1770 += 8 * (int)v414;
                        ++v1781;
                        v1782 += 8 * v1774;
                      }
                      while (v1781 != v1778);
                    }
                    v1767 += v1779;
                    v1766 += v1780;
                    ++v1765;
                  }
                  while (v1765 != v1764);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v1113 = *v168;
                if (v1113)
                {
                  uint64_t v1114 = 0;
                  uint64_t v1115 = 0;
                  uint64_t v1116 = v167[19];
                  uint64_t v1117 = v262[19];
                  uint64_t v1118 = v166[19];
                  uint64_t v1119 = *(void *)v262[3];
                  uint64_t v1120 = 8 * *(void *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1121 = 0;
                      uint64_t v1122 = *(void *)(v1117 + 8 * v1115);
                      unsigned int v1123 = v414 + 1;
                      do
                      {
                        *(void *)(v1118 + v1121) = *(void *)(v1116 + v1121) * v1122;
                        --v1123;
                        v1121 += 8;
                      }
                      while (v1123 > 1);
                    }
                    v1115 += v1119;
                    ++v1114;
                    v1118 += 8 * (int)v414;
                    v1116 += v1120;
                  }
                  while (v1114 != v1113);
                }
              }
              else
              {
                unint64_t v1948 = v166[6];
                if (v1948)
                {
                  unint64_t v1977 = 0;
                  uint64_t v1881 = v262[19];
                  uint64_t v1896 = v167[19];
                  uint64_t v1786 = v166[19];
                  do
                  {
                    uint64_t v1787 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1788 = v167[3];
                      uint64_t v1789 = v170;
                      int v1790 = v1977;
                      do
                      {
                        ldiv_t v1791 = ldiv(v1790, v168[v1789]);
                        int v1790 = v1791.quot;
                        v1787 += *(void *)(v1788 + 8 * v1789--) * v1791.rem;
                      }
                      while (v1789 != -1);
                    }
                    uint64_t v1792 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1793) = 0;
                    }
                    else
                    {
                      uint64_t v1793 = 0;
                      uint64_t v1794 = v262[3];
                      int v1795 = v1977;
                      do
                      {
                        ldiv_t v1796 = ldiv(v1795, v263[v1792]);
                        int v1795 = v1796.quot;
                        v1793 += *(void *)(v1794 + 8 * v1792--) * v1796.rem;
                      }
                      while (v1792 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1797 = 0;
                      uint64_t v1798 = *(void *)(v1881 + 8 * (int)v1793);
                      unsigned int v1799 = v414 + 1;
                      do
                      {
                        *(void *)(v1786 + v1797) = *(void *)(v1896 + 8 * (int)v1787 + v1797) * v1798;
                        --v1799;
                        v1797 += 8;
                      }
                      while (v1799 > 1);
                    }
                    v1786 += 8 * (int)v414;
                    v1977 += (int)v414;
                  }
                  while (v1977 < v1948);
                }
              }
              break;
            case 3:
              if (v173 == 2)
              {
                uint64_t v1312 = *v168;
                if (v1312)
                {
                  uint64_t v1313 = 0;
                  uint64_t v1314 = 0;
                  uint64_t v1315 = 0;
                  uint64_t v1316 = v167[19];
                  uint64_t v1317 = v262[19];
                  uint64_t v1318 = v166[19];
                  unint64_t v1319 = v168[1];
                  uint64_t v1320 = (uint64_t *)v167[3];
                  uint64_t v1321 = *v1320;
                  uint64_t v1322 = v1320[1];
                  int v1323 = (uint64_t *)v262[3];
                  uint64_t v1324 = *v1323;
                  uint64_t v1325 = v1323[1];
                  if (v1319 <= 1) {
                    uint64_t v1326 = 1;
                  }
                  else {
                    uint64_t v1326 = v168[1];
                  }
                  uint64_t v1327 = v1321 - v1322 * v1319;
                  uint64_t v1328 = v1324 - v1325 * v263[1];
                  do
                  {
                    if (v1319)
                    {
                      uint64_t v1329 = 0;
                      uint64_t v1330 = v1317 + 8 * v1314;
                      uint64_t v1331 = v1316 + 8 * v1315;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1332 = 0;
                          unsigned int v1333 = v414 + 1;
                          do
                          {
                            *(void *)(v1318 + v1332) = *(void *)(v1330 + v1332) * *(void *)(v1331 + v1332);
                            --v1333;
                            v1332 += 8;
                          }
                          while (v1333 > 1);
                        }
                        v1315 += v1322;
                        v1314 += v1325;
                        v1318 += 8 * (int)v414;
                        ++v1329;
                        v1330 += 8 * v1325;
                        v1331 += 8 * v1322;
                      }
                      while (v1329 != v1326);
                    }
                    v1315 += v1327;
                    v1314 += v1328;
                    ++v1313;
                  }
                  while (v1313 != v1312);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v415 = *v168;
                if (v415)
                {
                  uint64_t v416 = 0;
                  uint64_t v417 = v167[19];
                  uint64_t v418 = v262[19];
                  uint64_t v419 = v166[19];
                  uint64_t v420 = 8 * *(void *)v262[3];
                  uint64_t v421 = 8 * *(void *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v422 = 0;
                      unsigned int v423 = v414 + 1;
                      do
                      {
                        *(void *)(v419 + v422) = *(void *)(v418 + v422) * *(void *)(v417 + v422);
                        --v423;
                        v422 += 8;
                      }
                      while (v423 > 1);
                    }
                    ++v416;
                    v419 += 8 * (int)v414;
                    v418 += v420;
                    v417 += v421;
                  }
                  while (v416 != v415);
                }
              }
              else
              {
                unint64_t v1935 = v166[6];
                if (v1935)
                {
                  unint64_t v1964 = 0;
                  uint64_t v1874 = v262[19];
                  uint64_t v1887 = v167[19];
                  uint64_t v1334 = v166[19];
                  do
                  {
                    uint64_t v1335 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1336 = v167[3];
                      uint64_t v1337 = v170;
                      int v1338 = v1964;
                      do
                      {
                        ldiv_t v1339 = ldiv(v1338, v168[v1337]);
                        int v1338 = v1339.quot;
                        v1335 += *(void *)(v1336 + 8 * v1337--) * v1339.rem;
                      }
                      while (v1337 != -1);
                    }
                    uint64_t v1340 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1341) = 0;
                    }
                    else
                    {
                      uint64_t v1341 = 0;
                      uint64_t v1342 = v262[3];
                      int v1343 = v1964;
                      do
                      {
                        ldiv_t v1344 = ldiv(v1343, v263[v1340]);
                        int v1343 = v1344.quot;
                        v1341 += *(void *)(v1342 + 8 * v1340--) * v1344.rem;
                      }
                      while (v1340 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1345 = 0;
                      unsigned int v1346 = v414 + 1;
                      do
                      {
                        *(void *)(v1334 + v1345) = *(void *)(v1874 + 8 * (int)v1341 + v1345)
                                                   * *(void *)(v1887 + 8 * (int)v1335 + v1345);
                        --v1346;
                        v1345 += 8;
                      }
                      while (v1346 > 1);
                    }
                    v1334 += 8 * (int)v414;
                    v1964 += (int)v414;
                  }
                  while (v1964 < v1935);
                }
              }
              break;
            default:
LABEL_514:
              switch(v410)
              {
                case 1uLL:
                  uint64_t v424 = v166[6];
                  if (v424)
                  {
                    uint64_t v425 = (void *)v167[19];
                    uint64_t v426 = (void *)v262[19];
                    uint64_t v427 = (void *)v166[19];
                    uint64_t v428 = 8 * *(void *)v262[3];
                    uint64_t v429 = 8 * *(void *)v167[3];
                    do
                    {
                      *v427++ = *v426 * *v425;
                      uint64_t v426 = (void *)((char *)v426 + v428);
                      uint64_t v425 = (void *)((char *)v425 + v429);
                      --v424;
                    }
                    while (v424);
                  }
                  break;
                case 2uLL:
                  uint64_t v843 = *v168;
                  if (v843)
                  {
                    uint64_t v844 = 0;
                    uint64_t v845 = 0;
                    uint64_t v846 = 0;
                    uint64_t v847 = 0;
                    uint64_t v848 = v167[19];
                    uint64_t v849 = v262[19];
                    uint64_t v850 = v166[19];
                    unint64_t v851 = v168[1];
                    unint64_t v852 = (uint64_t *)v167[3];
                    uint64_t v853 = *v852;
                    uint64_t v854 = v852[1];
                    uint64_t v855 = (uint64_t *)v262[3];
                    uint64_t v856 = *v855;
                    uint64_t v857 = v855[1];
                    uint64_t v858 = v856 - v857 * v263[1];
                    if (v851 <= 1) {
                      uint64_t v859 = 1;
                    }
                    else {
                      uint64_t v859 = v168[1];
                    }
                    uint64_t v860 = v853 - v854 * v851;
                    do
                    {
                      if (v851)
                      {
                        uint64_t v861 = v845 + v859;
                        unint64_t v862 = (void *)(v850 + 8 * v845);
                        uint64_t v863 = v859;
                        do
                        {
                          *v862++ = *(void *)(v849 + 8 * v846) * *(void *)(v848 + 8 * v847);
                          v847 += v854;
                          v846 += v857;
                          --v863;
                        }
                        while (v863);
                        uint64_t v845 = v861;
                      }
                      v847 += v860;
                      v846 += v858;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 3uLL:
                  uint64_t v864 = *v168;
                  if (v864)
                  {
                    uint64_t v865 = 0;
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = 0;
                    uint64_t v869 = v167[19];
                    uint64_t v870 = v262[19];
                    uint64_t v871 = v166[19];
                    unint64_t v872 = v168[1];
                    uint64_t v873 = (void *)v167[3];
                    uint64_t v874 = v873[1];
                    int v875 = (void *)v262[3];
                    uint64_t v876 = v875[1];
                    uint64_t v877 = *v875 - v876 * v263[1];
                    if (v872 <= 1) {
                      uint64_t v878 = 1;
                    }
                    else {
                      uint64_t v878 = v168[1];
                    }
                    unint64_t v879 = *v873 - v874 * v872;
                    do
                    {
                      if (v872)
                      {
                        uint64_t v880 = 0;
                        unint64_t v881 = v168[2];
                        uint64_t v882 = v873[2];
                        uint64_t v883 = v875[2];
                        if (v881 <= 1) {
                          uint64_t v884 = 1;
                        }
                        else {
                          uint64_t v884 = v168[2];
                        }
                        uint64_t v885 = v876 - v883 * v263[2];
                        do
                        {
                          uint64_t v886 = v884;
                          if (v881)
                          {
                            do
                            {
                              *(void *)(v871 + 8 * v866++) = *(void *)(v870 + 8 * v867)
                                                             * *(void *)(v869 + 8 * v868);
                              v868 += v882;
                              v867 += v883;
                              --v886;
                            }
                            while (v886);
                          }
                          v868 += v874 - v882 * v881;
                          v867 += v885;
                          ++v880;
                        }
                        while (v880 != v878);
                      }
                      v868 += v879;
                      v867 += v877;
                      ++v865;
                    }
                    while (v865 != v864);
                  }
                  break;
                case 4uLL:
                  uint64_t v2006 = *v168;
                  if (v2006)
                  {
                    uint64_t v887 = 0;
                    uint64_t v888 = 0;
                    uint64_t v889 = 0;
                    uint64_t v890 = 0;
                    uint64_t v891 = v167[19];
                    uint64_t v892 = v262[19];
                    uint64_t v893 = v166[19];
                    unint64_t v894 = v168[1];
                    uint64_t v895 = (void *)v167[3];
                    uint64_t v896 = (void *)v262[3];
                    uint64_t v1899 = v896[1];
                    uint64_t v1914 = v895[1];
                    uint64_t v1956 = *v896 - v1899 * v263[1];
                    int v1988 = v168[1];
                    if (v894 <= 1) {
                      uint64_t v897 = 1;
                    }
                    else {
                      uint64_t v897 = v168[1];
                    }
                    unint64_t v1927 = *v895 - v895[1] * v894;
                    do
                    {
                      if (v1988)
                      {
                        uint64_t v898 = 0;
                        unint64_t v899 = v168[2];
                        uint64_t v900 = v895[2];
                        uint64_t v901 = v896[2];
                        if (v899 <= 1) {
                          uint64_t v902 = 1;
                        }
                        else {
                          uint64_t v902 = v168[2];
                        }
                        uint64_t v903 = v1899 - v901 * v263[2];
                        do
                        {
                          if (v899)
                          {
                            uint64_t v904 = 0;
                            unint64_t v905 = v168[3];
                            uint64_t v906 = v895[3];
                            uint64_t v907 = v896[3];
                            if (v905 <= 1) {
                              uint64_t v908 = 1;
                            }
                            else {
                              uint64_t v908 = v168[3];
                            }
                            uint64_t v909 = v901 - v907 * v263[3];
                            do
                            {
                              uint64_t v910 = v908;
                              if (v905)
                              {
                                do
                                {
                                  *(void *)(v893 + 8 * v888++) = *(void *)(v892 + 8 * v889)
                                                                 * *(void *)(v891 + 8 * v890);
                                  v890 += v906;
                                  v889 += v907;
                                  --v910;
                                }
                                while (v910);
                              }
                              v890 += v900 - v906 * v905;
                              v889 += v909;
                              ++v904;
                            }
                            while (v904 != v902);
                          }
                          v890 += v1914 - v900 * v899;
                          v889 += v903;
                          ++v898;
                        }
                        while (v898 != v897);
                      }
                      v890 += v1927;
                      v889 += v1956;
                      ++v887;
                    }
                    while (v887 != v2006);
                  }
                  break;
                default:
                  uint64_t v831 = v166[6];
                  if (v831)
                  {
                    uint64_t v832 = 0;
                    uint64_t v1926 = v262[19];
                    uint64_t v1955 = v167[19];
                    uint64_t v1913 = v166[19];
                    do
                    {
                      uint64_t v833 = 0;
                      if ((v170 & 0x80000000) == 0)
                      {
                        uint64_t v834 = v167[3];
                        uint64_t v835 = v170;
                        int v836 = v832;
                        do
                        {
                          ldiv_t v837 = ldiv(v836, v168[v835]);
                          int v836 = v837.quot;
                          v833 += *(void *)(v834 + 8 * v835--) * v837.rem;
                        }
                        while (v835 != -1);
                      }
                      uint64_t v838 = v1983;
                      if ((v1983 & 0x80000000) != 0)
                      {
                        LODWORD(v839) = 0;
                      }
                      else
                      {
                        uint64_t v839 = 0;
                        uint64_t v840 = v262[3];
                        int v841 = v832;
                        do
                        {
                          ldiv_t v842 = ldiv(v841, v263[v838]);
                          int v841 = v842.quot;
                          v839 += *(void *)(v840 + 8 * v838--) * v842.rem;
                        }
                        while (v838 != -1);
                      }
                      *(void *)(v1913 + 8 * v832++) = *(void *)(v1926 + 8 * (int)v839)
                                                      * *(void *)(v1955 + 8 * (int)v833);
                      uint64_t v170 = v2001;
                    }
                    while (v832 != v831);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v26)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) * **(float **)(*a2 + 152);
          return;
        case 1:
          int v204 = *(_DWORD *)(*a2 + 160);
          if (v204 >= 1)
          {
            float v205 = **(float **)(*a1 + 152);
            unsigned int v206 = *(float **)(*(void *)a3 + 152);
            uint64_t v207 = *(float **)(*a2 + 152);
            unsigned int v208 = v204 + 1;
            do
            {
              float v209 = *v207++;
              *v206++ = v205 * v209;
              --v208;
            }
            while (v208 > 1);
          }
          return;
        case 2:
          int v210 = *(_DWORD *)(*a1 + 160);
          if (v210 >= 1)
          {
            float v211 = **(float **)(*a2 + 152);
            uint64_t v212 = *(float **)(*(void *)a3 + 152);
            uint64_t v213 = *(float **)(*a1 + 152);
            unsigned int v214 = v210 + 1;
            do
            {
              float v215 = *v213++;
              *v212++ = v211 * v215;
              --v214;
            }
            while (v214 > 1);
          }
          return;
        case 3:
          int v216 = *(_DWORD *)(*(void *)a3 + 48);
          if (v216 >= 1)
          {
            uint64_t v217 = *(float **)(*(void *)a3 + 152);
            uint64_t v218 = *(float **)(*a2 + 152);
            int v219 = *(float **)(*a1 + 152);
            unsigned int v220 = v216 + 1;
            do
            {
              float v221 = *v219++;
              float v222 = v221;
              float v223 = *v218++;
              *v217++ = v222 * v223;
              --v220;
            }
            while (v220 > 1);
          }
          return;
        default:
          unsigned int v195 = *(void **)a3;
          uint64_t v196 = (void *)*a1;
          uint64_t v197 = *(int **)*a1;
          uint64_t v198 = (v196[1] - (void)v197) >> 2;
          uint64_t v199 = (v198 - 1);
          if ((int)v199 >= -1) {
            int v200 = -1;
          }
          else {
            int v200 = v198 - 1;
          }
          int v201 = v200 + 1;
          int v202 = v198 + 1;
          while (1)
          {
            unsigned int v203 = v202 - 2;
            if (v202 - 2 < 0) {
              break;
            }
            --v202;
            if (*(void *)(v196[3] + 8 * v203) != *(void *)(v195[3] + 8 * v203)) {
              goto LABEL_216;
            }
          }
          int v202 = v201;
LABEL_216:
          int v270 = (void *)*a2;
          uint64_t v271 = *(int **)*a2;
          uint64_t v272 = (v270[1] - (void)v271) >> 2;
          uint64_t v273 = (v272 - 1);
          if ((int)v273 >= -1) {
            int v274 = -1;
          }
          else {
            int v274 = v272 - 1;
          }
          int v275 = v274 + 1;
          int v276 = v272 + 1;
          while (1)
          {
            unsigned int v277 = v276 - 2;
            if (v276 - 2 < 0) {
              break;
            }
            --v276;
            if (*(void *)(v270[3] + 8 * v277) != *(void *)(v195[3] + 8 * v277)) {
              goto LABEL_254;
            }
          }
          int v276 = v275;
LABEL_254:
          int v290 = v198 + 1;
          while (1)
          {
            unsigned int v291 = v290 - 2;
            if (v290 - 2 < 0) {
              break;
            }
            --v290;
            if (*(void *)(v196[3] + 8 * v291)) {
              goto LABEL_289;
            }
          }
          int v290 = v201;
LABEL_289:
          int v304 = v272 + 1;
          while (1)
          {
            unsigned int v305 = v304 - 2;
            if (v304 - 2 < 0) {
              break;
            }
            --v304;
            if (*(void *)(v270[3] + 8 * v305)) {
              goto LABEL_520;
            }
          }
          int v304 = v275;
LABEL_520:
          unint64_t v430 = (uint64_t)(v195[1] - *v195) >> 2;
          if (v202 <= v276) {
            int v431 = v276;
          }
          else {
            int v431 = v202;
          }
          if (v202 <= v304) {
            int v202 = v304;
          }
          if (v290 > v276) {
            int v276 = v290;
          }
          if (v430 > v276)
          {
            int v432 = 1;
          }
          else
          {
            int v276 = (uint64_t)(v195[1] - *v195) >> 2;
            int v432 = 4;
          }
          if (v430 > v202)
          {
            int v433 = 2;
          }
          else
          {
            int v202 = v276;
            int v433 = v432;
          }
          if (v430 > v431)
          {
            int v202 = v431;
            int v433 = 3;
          }
          uint64_t v1984 = v273;
          uint64_t v2002 = v199;
          if (!v202) {
            goto LABEL_549;
          }
          unint64_t v434 = *(void *)(v195[3] + 8 * (v202 - 1));
          if (v434 < 0x10) {
            goto LABEL_549;
          }
          switch(v433)
          {
            case 1:
              if (v202 == 2)
              {
                uint64_t v1800 = *v197;
                if (v1800)
                {
                  uint64_t v1801 = 0;
                  uint64_t v1802 = 0;
                  uint64_t v1803 = 0;
                  uint64_t v1804 = v196[19];
                  uint64_t v1805 = v270[19];
                  uint64_t v1806 = v195[19];
                  unint64_t v1807 = v197[1];
                  unint64_t v1808 = (uint64_t *)v196[3];
                  uint64_t v1809 = *v1808;
                  uint64_t v1810 = v1808[1];
                  int v1811 = (uint64_t *)v270[3];
                  uint64_t v1812 = *v1811;
                  uint64_t v1813 = v1811[1];
                  if (v1807 <= 1) {
                    uint64_t v1814 = 1;
                  }
                  else {
                    uint64_t v1814 = v197[1];
                  }
                  uint64_t v1815 = v1809 - v1810 * v1807;
                  uint64_t v1816 = v1812 - v1813 * v271[1];
                  do
                  {
                    if (v1807)
                    {
                      uint64_t v1817 = 0;
                      uint64_t v1818 = v1805 + 4 * v1802;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1819 = 0;
                          float v1820 = *(float *)(v1804 + 4 * v1803);
                          unsigned int v1821 = v434 + 1;
                          do
                          {
                            *(float *)(v1806 + v1819) = v1820 * *(float *)(v1818 + v1819);
                            --v1821;
                            v1819 += 4;
                          }
                          while (v1821 > 1);
                        }
                        v1803 += v1810;
                        v1802 += v1813;
                        v1806 += 4 * (int)v434;
                        ++v1817;
                        v1818 += 4 * v1813;
                      }
                      while (v1817 != v1814);
                    }
                    v1803 += v1815;
                    v1802 += v1816;
                    ++v1801;
                  }
                  while (v1801 != v1800);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v1124 = *v197;
                if (v1124)
                {
                  uint64_t v1125 = 0;
                  uint64_t v1126 = 0;
                  uint64_t v1127 = v196[19];
                  uint64_t v1128 = v270[19];
                  uint64_t v1129 = v195[19];
                  uint64_t v1130 = *(void *)v196[3];
                  uint64_t v1131 = 4 * *(void *)v270[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1132 = 0;
                      float v1133 = *(float *)(v1127 + 4 * v1126);
                      unsigned int v1134 = v434 + 1;
                      do
                      {
                        *(float *)(v1129 + v1132) = v1133 * *(float *)(v1128 + v1132);
                        --v1134;
                        v1132 += 4;
                      }
                      while (v1134 > 1);
                    }
                    v1126 += v1130;
                    ++v1125;
                    v1129 += 4 * (int)v434;
                    v1128 += v1131;
                  }
                  while (v1125 != v1124);
                }
              }
              else
              {
                unint64_t v1949 = v195[6];
                if (v1949)
                {
                  unint64_t v1978 = 0;
                  uint64_t v1882 = v270[19];
                  uint64_t v1897 = v196[19];
                  uint64_t v1822 = v195[19];
                  do
                  {
                    uint64_t v1823 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1824 = v196[3];
                      uint64_t v1825 = v199;
                      int v1826 = v1978;
                      do
                      {
                        ldiv_t v1827 = ldiv(v1826, v197[v1825]);
                        int v1826 = v1827.quot;
                        v1823 += *(void *)(v1824 + 8 * v1825--) * v1827.rem;
                      }
                      while (v1825 != -1);
                    }
                    uint64_t v1828 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1829) = 0;
                    }
                    else
                    {
                      uint64_t v1829 = 0;
                      uint64_t v1830 = v270[3];
                      int v1831 = v1978;
                      do
                      {
                        ldiv_t v1832 = ldiv(v1831, v271[v1828]);
                        int v1831 = v1832.quot;
                        v1829 += *(void *)(v1830 + 8 * v1828--) * v1832.rem;
                      }
                      while (v1828 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1833 = 0;
                      float v1834 = *(float *)(v1897 + 4 * (int)v1823);
                      unsigned int v1835 = v434 + 1;
                      do
                      {
                        *(float *)(v1822 + v1833) = v1834 * *(float *)(v1882 + 4 * (int)v1829 + v1833);
                        --v1835;
                        v1833 += 4;
                      }
                      while (v1835 > 1);
                    }
                    v1822 += 4 * (int)v434;
                    v1978 += (int)v434;
                  }
                  while (v1978 < v1949);
                }
              }
              break;
            case 2:
              if (v202 == 2)
              {
                uint64_t v1836 = *v197;
                if (v1836)
                {
                  uint64_t v1837 = 0;
                  uint64_t v1838 = 0;
                  uint64_t v1839 = 0;
                  uint64_t v1840 = v196[19];
                  uint64_t v1841 = v270[19];
                  uint64_t v1842 = v195[19];
                  unint64_t v1843 = v197[1];
                  uint64_t v1844 = (uint64_t *)v196[3];
                  uint64_t v1845 = *v1844;
                  uint64_t v1846 = v1844[1];
                  uint64_t v1847 = (uint64_t *)v270[3];
                  uint64_t v1848 = *v1847;
                  uint64_t v1849 = v1847[1];
                  if (v1843 <= 1) {
                    uint64_t v1850 = 1;
                  }
                  else {
                    uint64_t v1850 = v197[1];
                  }
                  uint64_t v1851 = v1845 - v1846 * v1843;
                  uint64_t v1852 = v1848 - v1849 * v271[1];
                  do
                  {
                    if (v1843)
                    {
                      uint64_t v1853 = 0;
                      uint64_t v1854 = v1840 + 4 * v1839;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1855 = 0;
                          float v1856 = *(float *)(v1841 + 4 * v1838);
                          unsigned int v1857 = v434 + 1;
                          do
                          {
                            *(float *)(v1842 + v1855) = v1856 * *(float *)(v1854 + v1855);
                            --v1857;
                            v1855 += 4;
                          }
                          while (v1857 > 1);
                        }
                        v1839 += v1846;
                        v1838 += v1849;
                        v1842 += 4 * (int)v434;
                        ++v1853;
                        v1854 += 4 * v1846;
                      }
                      while (v1853 != v1850);
                    }
                    v1839 += v1851;
                    v1838 += v1852;
                    ++v1837;
                  }
                  while (v1837 != v1836);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v1135 = *v197;
                if (v1135)
                {
                  uint64_t v1136 = 0;
                  uint64_t v1137 = 0;
                  uint64_t v1138 = v196[19];
                  uint64_t v1139 = v270[19];
                  uint64_t v1140 = v195[19];
                  uint64_t v1141 = *(void *)v270[3];
                  uint64_t v1142 = 4 * *(void *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1143 = 0;
                      float v1144 = *(float *)(v1139 + 4 * v1137);
                      unsigned int v1145 = v434 + 1;
                      do
                      {
                        *(float *)(v1140 + v1143) = v1144 * *(float *)(v1138 + v1143);
                        --v1145;
                        v1143 += 4;
                      }
                      while (v1145 > 1);
                    }
                    v1137 += v1141;
                    ++v1136;
                    v1140 += 4 * (int)v434;
                    v1138 += v1142;
                  }
                  while (v1136 != v1135);
                }
              }
              else
              {
                unint64_t v1950 = v195[6];
                if (v1950)
                {
                  unint64_t v1979 = 0;
                  uint64_t v1883 = v270[19];
                  uint64_t v1898 = v196[19];
                  uint64_t v1858 = v195[19];
                  do
                  {
                    uint64_t v1859 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1860 = v196[3];
                      uint64_t v1861 = v199;
                      int v1862 = v1979;
                      do
                      {
                        ldiv_t v1863 = ldiv(v1862, v197[v1861]);
                        int v1862 = v1863.quot;
                        v1859 += *(void *)(v1860 + 8 * v1861--) * v1863.rem;
                      }
                      while (v1861 != -1);
                    }
                    uint64_t v1864 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1865) = 0;
                    }
                    else
                    {
                      uint64_t v1865 = 0;
                      uint64_t v1866 = v270[3];
                      int v1867 = v1979;
                      do
                      {
                        ldiv_t v1868 = ldiv(v1867, v271[v1864]);
                        int v1867 = v1868.quot;
                        v1865 += *(void *)(v1866 + 8 * v1864--) * v1868.rem;
                      }
                      while (v1864 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1869 = 0;
                      float v1870 = *(float *)(v1883 + 4 * (int)v1865);
                      unsigned int v1871 = v434 + 1;
                      do
                      {
                        *(float *)(v1858 + v1869) = v1870 * *(float *)(v1898 + 4 * (int)v1859 + v1869);
                        --v1871;
                        v1869 += 4;
                      }
                      while (v1871 > 1);
                    }
                    v1858 += 4 * (int)v434;
                    v1979 += (int)v434;
                  }
                  while (v1979 < v1950);
                }
              }
              break;
            case 3:
              if (v202 == 2)
              {
                uint64_t v1347 = *v197;
                if (v1347)
                {
                  uint64_t v1348 = 0;
                  uint64_t v1349 = 0;
                  uint64_t v1350 = 0;
                  uint64_t v1351 = v196[19];
                  uint64_t v1352 = v270[19];
                  uint64_t v1353 = v195[19];
                  unint64_t v1354 = v197[1];
                  int v1355 = (uint64_t *)v196[3];
                  uint64_t v1356 = *v1355;
                  uint64_t v1357 = v1355[1];
                  uint64_t v1358 = (uint64_t *)v270[3];
                  uint64_t v1359 = *v1358;
                  uint64_t v1360 = v1358[1];
                  if (v1354 <= 1) {
                    uint64_t v1361 = 1;
                  }
                  else {
                    uint64_t v1361 = v197[1];
                  }
                  uint64_t v1362 = v1356 - v1357 * v1354;
                  uint64_t v1363 = v1359 - v1360 * v271[1];
                  do
                  {
                    if (v1354)
                    {
                      uint64_t v1364 = 0;
                      uint64_t v1365 = v1352 + 4 * v1349;
                      uint64_t v1366 = v1351 + 4 * v1350;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1367 = 0;
                          unsigned int v1368 = v434 + 1;
                          do
                          {
                            *(float *)(v1353 + v1367) = *(float *)(v1366 + v1367) * *(float *)(v1365 + v1367);
                            --v1368;
                            v1367 += 4;
                          }
                          while (v1368 > 1);
                        }
                        v1350 += v1357;
                        v1349 += v1360;
                        v1353 += 4 * (int)v434;
                        ++v1364;
                        v1365 += 4 * v1360;
                        v1366 += 4 * v1357;
                      }
                      while (v1364 != v1361);
                    }
                    v1350 += v1362;
                    v1349 += v1363;
                    ++v1348;
                  }
                  while (v1348 != v1347);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v435 = *v197;
                if (v435)
                {
                  uint64_t v436 = 0;
                  uint64_t v437 = v196[19];
                  uint64_t v438 = v270[19];
                  uint64_t v439 = v195[19];
                  uint64_t v440 = 4 * *(void *)v270[3];
                  uint64_t v441 = 4 * *(void *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v442 = 0;
                      unsigned int v443 = v434 + 1;
                      do
                      {
                        *(float *)(v439 + v442) = *(float *)(v437 + v442) * *(float *)(v438 + v442);
                        --v443;
                        v442 += 4;
                      }
                      while (v443 > 1);
                    }
                    ++v436;
                    v439 += 4 * (int)v434;
                    v438 += v440;
                    v437 += v441;
                  }
                  while (v436 != v435);
                }
              }
              else
              {
                unint64_t v1936 = v195[6];
                if (v1936)
                {
                  unint64_t v1965 = 0;
                  uint64_t v1875 = v270[19];
                  uint64_t v1888 = v196[19];
                  uint64_t v1369 = v195[19];
                  do
                  {
                    uint64_t v1370 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1371 = v196[3];
                      uint64_t v1372 = v199;
                      int v1373 = v1965;
                      do
                      {
                        ldiv_t v1374 = ldiv(v1373, v197[v1372]);
                        int v1373 = v1374.quot;
                        v1370 += *(void *)(v1371 + 8 * v1372--) * v1374.rem;
                      }
                      while (v1372 != -1);
                    }
                    uint64_t v1375 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1376) = 0;
                    }
                    else
                    {
                      uint64_t v1376 = 0;
                      uint64_t v1377 = v270[3];
                      int v1378 = v1965;
                      do
                      {
                        ldiv_t v1379 = ldiv(v1378, v271[v1375]);
                        int v1378 = v1379.quot;
                        v1376 += *(void *)(v1377 + 8 * v1375--) * v1379.rem;
                      }
                      while (v1375 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1380 = 0;
                      unsigned int v1381 = v434 + 1;
                      do
                      {
                        *(float *)(v1369 + v1380) = *(float *)(v1888 + 4 * (int)v1370 + v1380)
                                                  * *(float *)(v1875 + 4 * (int)v1376 + v1380);
                        --v1381;
                        v1380 += 4;
                      }
                      while (v1381 > 1);
                    }
                    v1369 += 4 * (int)v434;
                    v1965 += (int)v434;
                  }
                  while (v1965 < v1936);
                }
              }
              break;
            default:
LABEL_549:
              switch(v430)
              {
                case 1uLL:
                  uint64_t v444 = v195[6];
                  if (v444)
                  {
                    uint64_t v445 = (float *)v196[19];
                    uint64_t v446 = (float *)v270[19];
                    uint64_t v447 = (float *)v195[19];
                    uint64_t v448 = 4 * *(void *)v270[3];
                    uint64_t v449 = 4 * *(void *)v196[3];
                    do
                    {
                      *v447++ = *v445 * *v446;
                      uint64_t v446 = (float *)((char *)v446 + v448);
                      uint64_t v445 = (float *)((char *)v445 + v449);
                      --v444;
                    }
                    while (v444);
                  }
                  break;
                case 2uLL:
                  uint64_t v923 = *v197;
                  if (v923)
                  {
                    uint64_t v924 = 0;
                    uint64_t v925 = 0;
                    uint64_t v926 = 0;
                    uint64_t v927 = 0;
                    uint64_t v928 = v196[19];
                    uint64_t v929 = v270[19];
                    uint64_t v930 = v195[19];
                    unint64_t v931 = v197[1];
                    uint64_t v932 = (uint64_t *)v196[3];
                    uint64_t v933 = *v932;
                    uint64_t v934 = v932[1];
                    uint64_t v935 = (uint64_t *)v270[3];
                    uint64_t v936 = *v935;
                    uint64_t v937 = v935[1];
                    uint64_t v938 = v936 - v937 * v271[1];
                    if (v931 <= 1) {
                      uint64_t v939 = 1;
                    }
                    else {
                      uint64_t v939 = v197[1];
                    }
                    uint64_t v940 = v933 - v934 * v931;
                    do
                    {
                      if (v931)
                      {
                        uint64_t v941 = v925 + v939;
                        uint64_t v942 = (float *)(v930 + 4 * v925);
                        uint64_t v943 = v939;
                        do
                        {
                          *v942++ = *(float *)(v928 + 4 * v927) * *(float *)(v929 + 4 * v926);
                          v927 += v934;
                          v926 += v937;
                          --v943;
                        }
                        while (v943);
                        uint64_t v925 = v941;
                      }
                      v927 += v940;
                      v926 += v938;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 3uLL:
                  uint64_t v944 = *v197;
                  if (v944)
                  {
                    uint64_t v945 = 0;
                    uint64_t v946 = 0;
                    uint64_t v947 = 0;
                    uint64_t v948 = 0;
                    uint64_t v949 = v196[19];
                    uint64_t v950 = v270[19];
                    uint64_t v951 = v195[19];
                    unint64_t v952 = v197[1];
                    uint64_t v953 = (void *)v196[3];
                    uint64_t v954 = v953[1];
                    uint64_t v955 = (void *)v270[3];
                    uint64_t v956 = v955[1];
                    uint64_t v957 = *v955 - v956 * v271[1];
                    if (v952 <= 1) {
                      uint64_t v958 = 1;
                    }
                    else {
                      uint64_t v958 = v197[1];
                    }
                    unint64_t v959 = *v953 - v954 * v952;
                    do
                    {
                      if (v952)
                      {
                        uint64_t v960 = 0;
                        unint64_t v961 = v197[2];
                        uint64_t v962 = v953[2];
                        uint64_t v963 = v955[2];
                        if (v961 <= 1) {
                          uint64_t v964 = 1;
                        }
                        else {
                          uint64_t v964 = v197[2];
                        }
                        uint64_t v965 = v956 - v963 * v271[2];
                        do
                        {
                          uint64_t v966 = v964;
                          if (v961)
                          {
                            do
                            {
                              *(float *)(v951 + 4 * v946++) = *(float *)(v949 + 4 * v948) * *(float *)(v950 + 4 * v947);
                              v948 += v962;
                              v947 += v963;
                              --v966;
                            }
                            while (v966);
                          }
                          v948 += v954 - v962 * v961;
                          v947 += v965;
                          ++v960;
                        }
                        while (v960 != v958);
                      }
                      v948 += v959;
                      v947 += v957;
                      ++v945;
                    }
                    while (v945 != v944);
                  }
                  break;
                case 4uLL:
                  uint64_t v2007 = *v197;
                  if (v2007)
                  {
                    uint64_t v967 = 0;
                    uint64_t v968 = 0;
                    uint64_t v969 = 0;
                    uint64_t v970 = 0;
                    uint64_t v971 = v196[19];
                    uint64_t v972 = v270[19];
                    uint64_t v973 = v195[19];
                    unint64_t v974 = v197[1];
                    int v975 = (void *)v196[3];
                    ldiv_t v976 = (void *)v270[3];
                    uint64_t v1929 = v976[1];
                    uint64_t v1958 = v975[1];
                    uint64_t v1989 = *v976 - v1929 * v271[1];
                    if (v974 <= 1) {
                      uint64_t v977 = 1;
                    }
                    else {
                      uint64_t v977 = v197[1];
                    }
                    unint64_t v978 = *v975 - v975[1] * v974;
                    do
                    {
                      if (v974)
                      {
                        uint64_t v979 = 0;
                        unint64_t v980 = v197[2];
                        uint64_t v981 = v975[2];
                        uint64_t v982 = v976[2];
                        if (v980 <= 1) {
                          uint64_t v983 = 1;
                        }
                        else {
                          uint64_t v983 = v197[2];
                        }
                        uint64_t v984 = v1929 - v982 * v271[2];
                        do
                        {
                          if (v980)
                          {
                            uint64_t v985 = 0;
                            unint64_t v986 = v197[3];
                            uint64_t v987 = v975[3];
                            uint64_t v988 = v976[3];
                            if (v986 <= 1) {
                              uint64_t v989 = 1;
                            }
                            else {
                              uint64_t v989 = v197[3];
                            }
                            uint64_t v990 = v982 - v988 * v271[3];
                            do
                            {
                              uint64_t v991 = v989;
                              if (v986)
                              {
                                do
                                {
                                  *(float *)(v973 + 4 * v968++) = *(float *)(v971 + 4 * v970)
                                                                * *(float *)(v972 + 4 * v969);
                                  v970 += v987;
                                  v969 += v988;
                                  --v991;
                                }
                                while (v991);
                              }
                              v970 += v981 - v987 * v986;
                              v969 += v990;
                              ++v985;
                            }
                            while (v985 != v983);
                          }
                          v970 += v1958 - v981 * v980;
                          v969 += v984;
                          ++v979;
                        }
                        while (v979 != v977);
                      }
                      v970 += v978;
                      v969 += v1989;
                      ++v967;
                    }
                    while (v967 != v2007);
                  }
                  break;
                default:
                  uint64_t v911 = v195[6];
                  if (v911)
                  {
                    uint64_t v912 = 0;
                    uint64_t v1928 = v270[19];
                    uint64_t v1957 = v196[19];
                    uint64_t v1915 = v195[19];
                    do
                    {
                      uint64_t v913 = 0;
                      if ((v199 & 0x80000000) == 0)
                      {
                        uint64_t v914 = v196[3];
                        uint64_t v915 = v199;
                        int v916 = v912;
                        do
                        {
                          ldiv_t v917 = ldiv(v916, v197[v915]);
                          int v916 = v917.quot;
                          v913 += *(void *)(v914 + 8 * v915--) * v917.rem;
                        }
                        while (v915 != -1);
                      }
                      uint64_t v918 = v1984;
                      if ((v1984 & 0x80000000) != 0)
                      {
                        LODWORD(v919) = 0;
                      }
                      else
                      {
                        uint64_t v919 = 0;
                        uint64_t v920 = v270[3];
                        int v921 = v912;
                        do
                        {
                          ldiv_t v922 = ldiv(v921, v271[v918]);
                          int v921 = v922.quot;
                          v919 += *(void *)(v920 + 8 * v918--) * v922.rem;
                        }
                        while (v918 != -1);
                      }
                      *(float *)(v1915 + 4 * v912++) = *(float *)(v1957 + 4 * (int)v913)
                                                     * *(float *)(v1928 + 4 * (int)v919);
                      uint64_t v199 = v2002;
                    }
                    while (v912 != v911);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::NotEqual::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::NotEqual::eval();
  }
}

void mlx::core::anonymous namespace'::comparison_op<mlx::core::detail::NotEqual>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*a1 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = (**(unsigned char **)(*a1 + 152) != 0) ^ (**(unsigned char **)(*a2 + 152) != 0);
          goto LABEL_22;
        case 1:
          int v38 = *(_DWORD *)(*a2 + 160);
          if (v38 >= 1)
          {
            int v39 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v40 = *(unsigned char **)(*(void *)a3 + 152);
            int v41 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v42 = v38 + 1;
            do
            {
              int v43 = *v41++;
              *v40++ = (v39 != 0) ^ (v43 != 0);
              --v42;
            }
            while (v42 > 1);
          }
          return;
        case 2:
          int v44 = *(_DWORD *)(*a1 + 160);
          if (v44 >= 1)
          {
            int v45 = **(unsigned __int8 **)(*a2 + 152);
            int v46 = *(unsigned char **)(*(void *)a3 + 152);
            int v47 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v48 = v44 + 1;
            do
            {
              int v49 = *v47++;
              *v46++ = (v45 != 0) ^ (v49 != 0);
              --v48;
            }
            while (v48 > 1);
          }
          return;
        case 3:
          int v50 = *(_DWORD *)(*(void *)a3 + 48);
          if (v50 >= 1)
          {
            int v51 = *(unsigned char **)(*(void *)a3 + 152);
            BOOL v52 = *(unsigned __int8 **)(*a2 + 152);
            char v53 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v54 = v50 + 1;
            do
            {
              int v55 = *v53++;
              BOOL v56 = v55 != 0;
              int v57 = *v52++;
              *v51++ = v56 ^ (v57 != 0);
              --v54;
            }
            while (v54 > 1);
          }
          return;
        default:
          int v29 = *(void **)a3;
          uint64_t v30 = *a1;
          uint64_t v31 = *(int **)*a1;
          uint64_t v32 = (*(void *)(*a1 + 8) - (void)v31) >> 2;
          uint64_t v33 = (v32 - 1);
          if ((int)v33 >= -1) {
            int v34 = -1;
          }
          else {
            int v34 = v32 - 1;
          }
          int v35 = v34 + 1;
          int v36 = v32 + 1;
          break;
      }
      while (1)
      {
        unsigned int v37 = v36 - 2;
        if (v36 - 2 < 0) {
          break;
        }
        --v36;
        if (*(void *)(*(void *)(v30 + 24) + 8 * v37) != *(void *)(v29[3] + 8 * v37)) {
          goto LABEL_154;
        }
      }
      int v36 = v35;
LABEL_154:
      unsigned int v220 = (void *)*a2;
      float v221 = *(int **)*a2;
      uint64_t v222 = (v220[1] - (void)v221) >> 2;
      uint64_t v223 = (v222 - 1);
      if ((int)v223 >= -1) {
        int v224 = -1;
      }
      else {
        int v224 = v222 - 1;
      }
      int v225 = v224 + 1;
      int v226 = v222 + 1;
      while (1)
      {
        unsigned int v227 = v226 - 2;
        if (v226 - 2 < 0) {
          break;
        }
        --v226;
        if (*(void *)(v220[3] + 8 * v227) != *(void *)(v29[3] + 8 * v227)) {
          goto LABEL_210;
        }
      }
      int v226 = v225;
LABEL_210:
      int v276 = v32 + 1;
      while (1)
      {
        unsigned int v277 = v276 - 2;
        if (v276 - 2 < 0) {
          break;
        }
        --v276;
        if (*(void *)(*(void *)(v30 + 24) + 8 * v277)) {
          goto LABEL_245;
        }
      }
      int v276 = v35;
LABEL_245:
      int v290 = v222 + 1;
      while (1)
      {
        unsigned int v291 = v290 - 2;
        if (v290 - 2 < 0) {
          break;
        }
        --v290;
        if (*(void *)(v220[3] + 8 * v291)) {
          goto LABEL_280;
        }
      }
      int v290 = v225;
LABEL_280:
      unint64_t v304 = (uint64_t)(v29[1] - *v29) >> 2;
      if (v36 <= v226) {
        int v305 = v226;
      }
      else {
        int v305 = v36;
      }
      if (v36 <= v290) {
        int v36 = v290;
      }
      if (v276 > v226) {
        int v226 = v276;
      }
      if (v304 > v226)
      {
        int v306 = 1;
      }
      else
      {
        int v226 = (uint64_t)(v29[1] - *v29) >> 2;
        int v306 = 4;
      }
      if (v304 > v36)
      {
        int v307 = 2;
      }
      else
      {
        int v36 = v226;
        int v307 = v306;
      }
      if (v304 > v305)
      {
        int v36 = v305;
        int v307 = 3;
      }
      uint64_t v2011 = v223;
      uint64_t v2025 = v33;
      if (!v36) {
        goto LABEL_309;
      }
      unint64_t v308 = *(void *)(v29[3] + 8 * (v36 - 1));
      if (v308 < 0x10) {
        goto LABEL_309;
      }
      switch(v307)
      {
        case 1:
          if (v36 == 2)
          {
            uint64_t v1389 = *v31;
            if (v1389)
            {
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              uint64_t v1392 = 0;
              uint64_t v1393 = *(void *)(v30 + 152);
              uint64_t v1394 = v220[19];
              uint64_t v1395 = v29[19];
              unint64_t v1396 = v31[1];
              uint64_t v1397 = *(uint64_t **)(v30 + 24);
              uint64_t v1398 = *v1397;
              uint64_t v1399 = v1397[1];
              uint64_t v1400 = (uint64_t *)v220[3];
              uint64_t v1402 = *v1400;
              uint64_t v1401 = v1400[1];
              if (v1396 <= 1) {
                uint64_t v1403 = 1;
              }
              else {
                uint64_t v1403 = v31[1];
              }
              uint64_t v1404 = v1398 - v1399 * v1396;
              uint64_t v1405 = v1402 - v1401 * v221[1];
              do
              {
                if (v1396)
                {
                  uint64_t v1406 = 0;
                  uint64_t v1407 = v1394 + v1391;
                  do
                  {
                    if ((int)v308 >= 1)
                    {
                      uint64_t v1408 = 0;
                      int v1409 = *(unsigned __int8 *)(v1393 + v1392);
                      unsigned int v1410 = v308 + 1;
                      do
                      {
                        *(unsigned char *)(v1395 + v1408) = (v1409 != 0) ^ (*(unsigned char *)(v1407 + v1408) != 0);
                        --v1410;
                        ++v1408;
                      }
                      while (v1410 > 1);
                    }
                    v1392 += v1399;
                    v1391 += v1401;
                    v1395 += (int)v308;
                    ++v1406;
                    v1407 += v1401;
                  }
                  while (v1406 != v1403);
                }
                v1392 += v1404;
                v1391 += v1405;
                ++v1390;
              }
              while (v1390 != v1389);
            }
          }
          else if (v36 == 1)
          {
            uint64_t v997 = *v31;
            if (v997)
            {
              uint64_t v998 = 0;
              uint64_t v999 = 0;
              uint64_t v1000 = *(void *)(v30 + 152);
              uint64_t v1001 = v220[19];
              uint64_t v1002 = v29[19];
              uint64_t v1003 = **(void **)(v30 + 24);
              uint64_t v1004 = *(void *)v220[3];
              do
              {
                if ((int)v308 >= 1)
                {
                  uint64_t v1005 = 0;
                  int v1006 = *(unsigned __int8 *)(v1000 + v999);
                  unsigned int v1007 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v1002 + v1005) = (v1006 != 0) ^ (*(unsigned char *)(v1001 + v1005) != 0);
                    --v1007;
                    ++v1005;
                  }
                  while (v1007 > 1);
                }
                v999 += v1003;
                v1002 += (int)v308;
                ++v998;
                v1001 += v1004;
              }
              while (v998 != v997);
            }
          }
          else
          {
            unint64_t v1962 = v29[6];
            if (v1962)
            {
              unint64_t v1997 = 0;
              uint64_t v1886 = v220[19];
              uint64_t v1913 = *(void *)(v30 + 152);
              uint64_t v1411 = v29[19];
              do
              {
                uint64_t v1412 = 0;
                if ((v33 & 0x80000000) == 0)
                {
                  uint64_t v1413 = *(void *)(v30 + 24);
                  int quot = v1997;
                  do
                  {
                    ldiv_t v1415 = ldiv(quot, v31[v33]);
                    int quot = v1415.quot;
                    v1412 += *(void *)(v1413 + 8 * v33--) * v1415.rem;
                  }
                  while (v33 != -1);
                }
                uint64_t v1416 = v2011;
                if ((v2011 & 0x80000000) != 0)
                {
                  LODWORD(v1417) = 0;
                }
                else
                {
                  uint64_t v1417 = 0;
                  uint64_t v1418 = v220[3];
                  int v1419 = v1997;
                  do
                  {
                    ldiv_t v1420 = ldiv(v1419, v221[v1416]);
                    int v1419 = v1420.quot;
                    v1417 += *(void *)(v1418 + 8 * v1416--) * v1420.rem;
                  }
                  while (v1416 != -1);
                }
                uint64_t v33 = v2025;
                if ((int)v308 >= 1)
                {
                  uint64_t v1421 = 0;
                  int v1422 = *(unsigned __int8 *)(v1913 + (int)v1412);
                  unsigned int v1423 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v1411 + v1421) = (v1422 != 0) ^ (*(unsigned char *)(v1886 + (int)v1417 + v1421) != 0);
                    --v1423;
                    ++v1421;
                  }
                  while (v1423 > 1);
                }
                v1411 += (int)v308;
                v1997 += (int)v308;
              }
              while (v1997 < v1962);
            }
          }
          break;
        case 2:
          if (v36 == 2)
          {
            uint64_t v1424 = *v31;
            if (v1424)
            {
              uint64_t v1425 = 0;
              uint64_t v1426 = 0;
              uint64_t v1427 = 0;
              uint64_t v1428 = *(void *)(v30 + 152);
              uint64_t v1429 = v220[19];
              uint64_t v1430 = v29[19];
              unint64_t v1431 = v31[1];
              uint64_t v1432 = *(uint64_t **)(v30 + 24);
              uint64_t v1433 = *v1432;
              uint64_t v1434 = v1432[1];
              uint64_t v1435 = (uint64_t *)v220[3];
              uint64_t v1437 = *v1435;
              uint64_t v1436 = v1435[1];
              if (v1431 <= 1) {
                uint64_t v1438 = 1;
              }
              else {
                uint64_t v1438 = v31[1];
              }
              uint64_t v1439 = v1433 - v1434 * v1431;
              uint64_t v1440 = v1437 - v1436 * v221[1];
              do
              {
                if (v1431)
                {
                  uint64_t v1441 = 0;
                  uint64_t v1442 = v1428 + v1427;
                  do
                  {
                    if ((int)v308 >= 1)
                    {
                      uint64_t v1443 = 0;
                      int v1444 = *(unsigned __int8 *)(v1429 + v1426);
                      unsigned int v1445 = v308 + 1;
                      do
                      {
                        *(unsigned char *)(v1430 + v1443) = (v1444 != 0) ^ (*(unsigned char *)(v1442 + v1443) != 0);
                        --v1445;
                        ++v1443;
                      }
                      while (v1445 > 1);
                    }
                    v1427 += v1434;
                    v1426 += v1436;
                    v1430 += (int)v308;
                    ++v1441;
                    v1442 += v1434;
                  }
                  while (v1441 != v1438);
                }
                v1427 += v1439;
                v1426 += v1440;
                ++v1425;
              }
              while (v1425 != v1424);
            }
          }
          else if (v36 == 1)
          {
            uint64_t v1008 = *v31;
            if (v1008)
            {
              uint64_t v1009 = 0;
              uint64_t v1010 = 0;
              uint64_t v1011 = *(void *)(v30 + 152);
              uint64_t v1012 = v220[19];
              uint64_t v1013 = v29[19];
              uint64_t v1014 = **(void **)(v30 + 24);
              uint64_t v1015 = *(void *)v220[3];
              do
              {
                if ((int)v308 >= 1)
                {
                  uint64_t v1016 = 0;
                  int v1017 = *(unsigned __int8 *)(v1012 + v1010);
                  unsigned int v1018 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v1013 + v1016) = (v1017 != 0) ^ (*(unsigned char *)(v1011 + v1016) != 0);
                    --v1018;
                    ++v1016;
                  }
                  while (v1018 > 1);
                }
                v1010 += v1015;
                v1013 += (int)v308;
                ++v1009;
                v1011 += v1014;
              }
              while (v1009 != v1008);
            }
          }
          else
          {
            unint64_t v1963 = v29[6];
            if (v1963)
            {
              unint64_t v1998 = 0;
              uint64_t v1887 = v220[19];
              uint64_t v1914 = *(void *)(v30 + 152);
              uint64_t v1446 = v29[19];
              do
              {
                uint64_t v1447 = 0;
                if ((v33 & 0x80000000) == 0)
                {
                  uint64_t v1448 = *(void *)(v30 + 24);
                  int v1449 = v1998;
                  do
                  {
                    ldiv_t v1450 = ldiv(v1449, v31[v33]);
                    int v1449 = v1450.quot;
                    v1447 += *(void *)(v1448 + 8 * v33--) * v1450.rem;
                  }
                  while (v33 != -1);
                }
                uint64_t v1451 = v2011;
                if ((v2011 & 0x80000000) != 0)
                {
                  LODWORD(v1452) = 0;
                }
                else
                {
                  uint64_t v1452 = 0;
                  uint64_t v1453 = v220[3];
                  int v1454 = v1998;
                  do
                  {
                    ldiv_t v1455 = ldiv(v1454, v221[v1451]);
                    int v1454 = v1455.quot;
                    v1452 += *(void *)(v1453 + 8 * v1451--) * v1455.rem;
                  }
                  while (v1451 != -1);
                }
                uint64_t v33 = v2025;
                if ((int)v308 >= 1)
                {
                  uint64_t v1456 = 0;
                  int v1457 = *(unsigned __int8 *)(v1887 + (int)v1452);
                  unsigned int v1458 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v1446 + v1456) = (v1457 != 0) ^ (*(unsigned char *)(v1914 + (int)v1447 + v1456) != 0);
                    --v1458;
                    ++v1456;
                  }
                  while (v1458 > 1);
                }
                v1446 += (int)v308;
                v1998 += (int)v308;
              }
              while (v1998 < v1963);
            }
          }
          break;
        case 3:
          if (v36 == 2)
          {
            uint64_t v1151 = *v31;
            if (v1151)
            {
              uint64_t v1152 = 0;
              uint64_t v1153 = 0;
              uint64_t v1154 = 0;
              uint64_t v1155 = *(void *)(v30 + 152);
              uint64_t v1156 = v220[19];
              uint64_t v1157 = v29[19];
              unint64_t v1158 = v31[1];
              uint64_t v1159 = *(uint64_t **)(v30 + 24);
              uint64_t v1160 = *v1159;
              uint64_t v1161 = v1159[1];
              uint64_t v1162 = (uint64_t *)v220[3];
              uint64_t v1164 = *v1162;
              uint64_t v1163 = v1162[1];
              if (v1158 <= 1) {
                uint64_t v1165 = 1;
              }
              else {
                uint64_t v1165 = v31[1];
              }
              uint64_t v1166 = v1160 - v1161 * v1158;
              uint64_t v1167 = v1164 - v1163 * v221[1];
              do
              {
                if (v1158)
                {
                  uint64_t v1168 = 0;
                  uint64_t v1169 = v1156 + v1153;
                  uint64_t v1170 = v1155 + v1154;
                  do
                  {
                    if ((int)v308 >= 1)
                    {
                      uint64_t v1171 = 0;
                      unsigned int v1172 = v308 + 1;
                      do
                      {
                        *(unsigned char *)(v1157 + v1171) = (*(unsigned char *)(v1170 + v1171) != 0) ^ (*(unsigned char *)(v1169 + v1171) != 0);
                        --v1172;
                        ++v1171;
                      }
                      while (v1172 > 1);
                    }
                    v1154 += v1161;
                    v1153 += v1163;
                    v1157 += (int)v308;
                    ++v1168;
                    v1169 += v1163;
                    v1170 += v1161;
                  }
                  while (v1168 != v1165);
                }
                v1154 += v1166;
                v1153 += v1167;
                ++v1152;
              }
              while (v1152 != v1151);
            }
          }
          else if (v36 == 1)
          {
            uint64_t v309 = *v31;
            if (v309)
            {
              uint64_t v310 = 0;
              uint64_t v311 = *(void *)(v30 + 152);
              uint64_t v312 = v220[19];
              uint64_t v313 = v29[19];
              uint64_t v314 = **(void **)(v30 + 24);
              uint64_t v315 = *(void *)v220[3];
              do
              {
                if ((int)v308 >= 1)
                {
                  uint64_t v316 = 0;
                  unsigned int v317 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v313 + v316) = (*(unsigned char *)(v311 + v316) != 0) ^ (*(unsigned char *)(v312 + v316) != 0);
                    --v317;
                    ++v316;
                  }
                  while (v317 > 1);
                }
                v313 += (int)v308;
                ++v310;
                v312 += v315;
                v311 += v314;
              }
              while (v310 != v309);
            }
          }
          else
          {
            unint64_t v1955 = v29[6];
            if (v1955)
            {
              unint64_t v1990 = 0;
              uint64_t v1879 = v220[19];
              uint64_t v1906 = *(void *)(v30 + 152);
              uint64_t v1173 = v29[19];
              do
              {
                uint64_t v1174 = 0;
                if ((v33 & 0x80000000) == 0)
                {
                  uint64_t v1175 = *(void *)(v30 + 24);
                  int v1176 = v1990;
                  do
                  {
                    ldiv_t v1177 = ldiv(v1176, v31[v33]);
                    int v1176 = v1177.quot;
                    v1174 += *(void *)(v1175 + 8 * v33--) * v1177.rem;
                  }
                  while (v33 != -1);
                }
                uint64_t v1178 = v2011;
                if ((v2011 & 0x80000000) != 0)
                {
                  LODWORD(v1179) = 0;
                }
                else
                {
                  uint64_t v1179 = 0;
                  uint64_t v1180 = v220[3];
                  int v1181 = v1990;
                  do
                  {
                    ldiv_t v1182 = ldiv(v1181, v221[v1178]);
                    int v1181 = v1182.quot;
                    v1179 += *(void *)(v1180 + 8 * v1178--) * v1182.rem;
                  }
                  while (v1178 != -1);
                }
                uint64_t v33 = v2025;
                if ((int)v308 >= 1)
                {
                  uint64_t v1183 = 0;
                  unsigned int v1184 = v308 + 1;
                  do
                  {
                    *(unsigned char *)(v1173 + v1183) = (*(unsigned char *)(v1906 + (int)v1174 + v1183) != 0) ^ (*(unsigned char *)(v1879 + (int)v1179 + v1183) != 0);
                    --v1184;
                    ++v1183;
                  }
                  while (v1184 > 1);
                }
                v1173 += (int)v308;
                v1990 += (int)v308;
              }
              while (v1990 < v1955);
            }
          }
          break;
        default:
LABEL_309:
          switch(v304)
          {
            case 1uLL:
              uint64_t v318 = v29[6];
              if (v318)
              {
                unsigned int v319 = *(unsigned char **)(v30 + 152);
                BOOL v320 = (unsigned char *)v220[19];
                char v321 = (unsigned char *)v29[19];
                uint64_t v322 = **(void **)(v30 + 24);
                uint64_t v323 = *(void *)v220[3];
                do
                {
                  *v321++ = (*v319 != 0) ^ (*v320 != 0);
                  v320 += v323;
                  v319 += v322;
                  --v318;
                }
                while (v318);
              }
              break;
            case 2uLL:
              uint64_t v455 = *v31;
              if (v455)
              {
                uint64_t v456 = 0;
                uint64_t v457 = 0;
                uint64_t v458 = 0;
                uint64_t v459 = 0;
                uint64_t v460 = *(void *)(v30 + 152);
                uint64_t v461 = v220[19];
                uint64_t v462 = v29[19];
                unint64_t v463 = v31[1];
                uint64_t v464 = *(uint64_t **)(v30 + 24);
                uint64_t v465 = *v464;
                uint64_t v466 = v464[1];
                uint64_t v467 = (uint64_t *)v220[3];
                uint64_t v468 = *v467;
                uint64_t v469 = v467[1];
                uint64_t v470 = v468 - v469 * v221[1];
                if (v463 <= 1) {
                  uint64_t v471 = 1;
                }
                else {
                  uint64_t v471 = v31[1];
                }
                uint64_t v472 = v465 - v466 * v463;
                do
                {
                  if (v463)
                  {
                    uint64_t v473 = v457 + v471;
                    uint64_t v474 = (unsigned char *)(v462 + v457);
                    uint64_t v475 = v471;
                    do
                    {
                      *v474++ = (*(unsigned char *)(v460 + v459) != 0) ^ (*(unsigned char *)(v461 + v458) != 0);
                      v459 += v466;
                      v458 += v469;
                      --v475;
                    }
                    while (v475);
                    uint64_t v457 = v473;
                  }
                  v459 += v472;
                  v458 += v470;
                  ++v456;
                }
                while (v456 != v455);
              }
              break;
            case 3uLL:
              uint64_t v476 = *v31;
              if (v476)
              {
                uint64_t v477 = 0;
                uint64_t v478 = 0;
                uint64_t v479 = 0;
                uint64_t v480 = 0;
                uint64_t v481 = *(void *)(v30 + 152);
                uint64_t v482 = v220[19];
                uint64_t v483 = v29[19];
                unint64_t v484 = v31[1];
                char v485 = *(void **)(v30 + 24);
                uint64_t v486 = v485[1];
                uint64_t v487 = (void *)v220[3];
                uint64_t v488 = v487[1];
                uint64_t v489 = *v487 - v488 * v221[1];
                if (v484 <= 1) {
                  uint64_t v490 = 1;
                }
                else {
                  uint64_t v490 = v31[1];
                }
                unint64_t v491 = *v485 - v486 * v484;
                do
                {
                  if (v484)
                  {
                    uint64_t v492 = 0;
                    unint64_t v493 = v31[2];
                    uint64_t v494 = v485[2];
                    uint64_t v495 = v487[2];
                    if (v493 <= 1) {
                      uint64_t v496 = 1;
                    }
                    else {
                      uint64_t v496 = v31[2];
                    }
                    uint64_t v497 = v488 - v495 * v221[2];
                    do
                    {
                      uint64_t v498 = v496;
                      if (v493)
                      {
                        do
                        {
                          *(unsigned char *)(v483 + v478++) = (*(unsigned char *)(v481 + v480) != 0) ^ (*(unsigned char *)(v482 + v479) != 0);
                          v480 += v494;
                          v479 += v495;
                          --v498;
                        }
                        while (v498);
                      }
                      v480 += v486 - v494 * v493;
                      v479 += v497;
                      ++v492;
                    }
                    while (v492 != v490);
                  }
                  v480 += v491;
                  v479 += v489;
                  ++v477;
                }
                while (v477 != v476);
              }
              break;
            case 4uLL:
              uint64_t v2032 = *v31;
              if (v2032)
              {
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = 0;
                uint64_t v502 = 0;
                uint64_t v503 = *(void *)(v30 + 152);
                uint64_t v504 = v220[19];
                uint64_t v505 = v29[19];
                unint64_t v506 = v31[1];
                uint64_t v507 = *(void **)(v30 + 24);
                uint64_t v508 = (void *)v220[3];
                uint64_t v1900 = v508[1];
                uint64_t v1928 = v507[1];
                uint64_t v1977 = *v508 - v1900 * v221[1];
                int v2018 = v31[1];
                if (v506 <= 1) {
                  uint64_t v509 = 1;
                }
                else {
                  uint64_t v509 = v31[1];
                }
                unint64_t v1942 = *v507 - v507[1] * v506;
                do
                {
                  if (v2018)
                  {
                    uint64_t v510 = 0;
                    unint64_t v511 = v31[2];
                    uint64_t v512 = v507[2];
                    uint64_t v513 = v508[2];
                    if (v511 <= 1) {
                      uint64_t v514 = 1;
                    }
                    else {
                      uint64_t v514 = v31[2];
                    }
                    uint64_t v515 = v1900 - v513 * v221[2];
                    do
                    {
                      if (v511)
                      {
                        uint64_t v516 = 0;
                        unint64_t v517 = v31[3];
                        uint64_t v518 = v507[3];
                        uint64_t v519 = v508[3];
                        if (v517 <= 1) {
                          uint64_t v520 = 1;
                        }
                        else {
                          uint64_t v520 = v31[3];
                        }
                        uint64_t v521 = v513 - v519 * v221[3];
                        do
                        {
                          uint64_t v522 = v520;
                          if (v517)
                          {
                            do
                            {
                              *(unsigned char *)(v505 + v500++) = (*(unsigned char *)(v503 + v502) != 0) ^ (*(unsigned char *)(v504 + v501) != 0);
                              v502 += v518;
                              v501 += v519;
                              --v522;
                            }
                            while (v522);
                          }
                          v502 += v512 - v518 * v517;
                          v501 += v521;
                          ++v516;
                        }
                        while (v516 != v514);
                      }
                      v502 += v1928 - v512 * v511;
                      v501 += v515;
                      ++v510;
                    }
                    while (v510 != v509);
                  }
                  v502 += v1942;
                  v501 += v1977;
                  ++v499;
                }
                while (v499 != v2032);
              }
              break;
            default:
              uint64_t v444 = v29[6];
              if (v444)
              {
                uint64_t v445 = 0;
                uint64_t v1941 = v220[19];
                uint64_t v1976 = *(void *)(v30 + 152);
                uint64_t v1927 = v29[19];
                do
                {
                  uint64_t v446 = 0;
                  if ((v33 & 0x80000000) == 0)
                  {
                    uint64_t v447 = *(void *)(v30 + 24);
                    int v448 = v445;
                    do
                    {
                      ldiv_t v449 = ldiv(v448, v31[v33]);
                      int v448 = v449.quot;
                      v446 += *(void *)(v447 + 8 * v33--) * v449.rem;
                    }
                    while (v33 != -1);
                  }
                  uint64_t v450 = v2011;
                  if ((v2011 & 0x80000000) != 0)
                  {
                    LODWORD(v451) = 0;
                  }
                  else
                  {
                    uint64_t v451 = 0;
                    uint64_t v452 = v220[3];
                    int v453 = v445;
                    do
                    {
                      ldiv_t v454 = ldiv(v453, v221[v450]);
                      int v453 = v454.quot;
                      v451 += *(void *)(v452 + 8 * v450--) * v454.rem;
                    }
                    while (v450 != -1);
                  }
                  *(unsigned char *)(v1927 + v445++) = (*(unsigned char *)(v1976 + (int)v446) != 0) ^ (*(unsigned char *)(v1941 + (int)v451) != 0);
                  uint64_t v33 = v2025;
                }
                while (v445 != v444);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            int v10 = **(unsigned __int8 **)(*a1 + 152);
            char v11 = *(BOOL **)(*(void *)a3 + 152);
            int v12 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              int v14 = *v12++;
              *v11++ = v10 != v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v67 = *(_DWORD *)(*a1 + 160);
          if (v67 >= 1)
          {
            int v68 = **(unsigned __int8 **)(*a2 + 152);
            int v69 = *(BOOL **)(*(void *)a3 + 152);
            int v70 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v71 = v67 + 1;
            do
            {
              int v72 = *v70++;
              *v69++ = v72 != v68;
              --v71;
            }
            while (v71 > 1);
          }
          return;
        case 3:
          int v73 = *(_DWORD *)(*(void *)a3 + 48);
          if (v73 >= 1)
          {
            unsigned int v74 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v75 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v76 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v77 = v73 + 1;
            do
            {
              int v79 = *v76++;
              int v78 = v79;
              int v80 = *v75++;
              *v74++ = v78 != v80;
              --v77;
            }
            while (v77 > 1);
          }
          return;
        default:
          unsigned int v58 = *(void **)a3;
          uint64_t v59 = *a1;
          int v60 = *(int **)*a1;
          uint64_t v61 = (*(void *)(*a1 + 8) - (void)v60) >> 2;
          uint64_t v62 = (v61 - 1);
          if ((int)v62 >= -1) {
            int v63 = -1;
          }
          else {
            int v63 = v61 - 1;
          }
          int v64 = v63 + 1;
          int v65 = v61 + 1;
          break;
      }
      while (1)
      {
        unsigned int v66 = v65 - 2;
        if (v65 - 2 < 0) {
          break;
        }
        --v65;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v66) != *(void *)(v58[3] + 8 * v66)) {
          goto LABEL_162;
        }
      }
      int v65 = v64;
LABEL_162:
      int v228 = (void *)*a2;
      int v229 = *(int **)*a2;
      uint64_t v230 = (v228[1] - (void)v229) >> 2;
      uint64_t v231 = (v230 - 1);
      if ((int)v231 >= -1) {
        int v232 = -1;
      }
      else {
        int v232 = v230 - 1;
      }
      int v233 = v232 + 1;
      int v234 = v230 + 1;
      while (1)
      {
        unsigned int v235 = v234 - 2;
        if (v234 - 2 < 0) {
          break;
        }
        --v234;
        if (*(void *)(v228[3] + 8 * v235) != *(void *)(v58[3] + 8 * v235)) {
          goto LABEL_215;
        }
      }
      int v234 = v233;
LABEL_215:
      int v278 = v61 + 1;
      while (1)
      {
        unsigned int v279 = v278 - 2;
        if (v278 - 2 < 0) {
          break;
        }
        --v278;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v279)) {
          goto LABEL_250;
        }
      }
      int v278 = v64;
LABEL_250:
      int v292 = v230 + 1;
      while (1)
      {
        unsigned int v293 = v292 - 2;
        if (v292 - 2 < 0) {
          break;
        }
        --v292;
        if (*(void *)(v228[3] + 8 * v293)) {
          goto LABEL_315;
        }
      }
      int v292 = v233;
LABEL_315:
      unint64_t v324 = (uint64_t)(v58[1] - *v58) >> 2;
      if (v65 <= v234) {
        int v325 = v234;
      }
      else {
        int v325 = v65;
      }
      if (v65 <= v292) {
        int v65 = v292;
      }
      if (v278 > v234) {
        int v234 = v278;
      }
      if (v324 > v234)
      {
        int v326 = 1;
      }
      else
      {
        int v234 = (uint64_t)(v58[1] - *v58) >> 2;
        int v326 = 4;
      }
      if (v324 > v65)
      {
        int v327 = 2;
      }
      else
      {
        int v65 = v234;
        int v327 = v326;
      }
      if (v324 > v325)
      {
        int v65 = v325;
        int v327 = 3;
      }
      uint64_t v2012 = v231;
      uint64_t v2026 = v62;
      if (!v65) {
        goto LABEL_344;
      }
      unint64_t v328 = *(void *)(v58[3] + 8 * (v65 - 1));
      if (v328 < 0x10) {
        goto LABEL_344;
      }
      switch(v327)
      {
        case 1:
          if (v65 == 2)
          {
            uint64_t v1459 = *v60;
            if (v1459)
            {
              uint64_t v1460 = 0;
              uint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = *(void *)(v59 + 152);
              uint64_t v1464 = v228[19];
              uint64_t v1465 = v58[19];
              unint64_t v1466 = v60[1];
              unint64_t v1467 = *(uint64_t **)(v59 + 24);
              uint64_t v1468 = *v1467;
              uint64_t v1469 = v1467[1];
              unsigned int v1470 = (uint64_t *)v228[3];
              uint64_t v1472 = *v1470;
              uint64_t v1471 = v1470[1];
              if (v1466 <= 1) {
                uint64_t v1473 = 1;
              }
              else {
                uint64_t v1473 = v60[1];
              }
              uint64_t v1474 = v1468 - v1469 * v1466;
              uint64_t v1475 = v1472 - v1471 * v229[1];
              do
              {
                if (v1466)
                {
                  uint64_t v1476 = 0;
                  uint64_t v1477 = v1464 + v1461;
                  do
                  {
                    if ((int)v328 >= 1)
                    {
                      uint64_t v1478 = 0;
                      int v1479 = *(unsigned __int8 *)(v1463 + v1462);
                      unsigned int v1480 = v328 + 1;
                      do
                      {
                        *(unsigned char *)(v1465 + v1478) = v1479 != *(unsigned __int8 *)(v1477 + v1478);
                        --v1480;
                        ++v1478;
                      }
                      while (v1480 > 1);
                    }
                    v1462 += v1469;
                    v1461 += v1471;
                    v1465 += (int)v328;
                    ++v1476;
                    v1477 += v1471;
                  }
                  while (v1476 != v1473);
                }
                v1462 += v1474;
                v1461 += v1475;
                ++v1460;
              }
              while (v1460 != v1459);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v1019 = *v60;
            if (v1019)
            {
              uint64_t v1020 = 0;
              uint64_t v1021 = 0;
              uint64_t v1022 = *(void *)(v59 + 152);
              uint64_t v1023 = v228[19];
              uint64_t v1024 = v58[19];
              uint64_t v1025 = **(void **)(v59 + 24);
              uint64_t v1026 = *(void *)v228[3];
              do
              {
                if ((int)v328 >= 1)
                {
                  uint64_t v1027 = 0;
                  int v1028 = *(unsigned __int8 *)(v1022 + v1021);
                  unsigned int v1029 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v1024 + v1027) = v1028 != *(unsigned __int8 *)(v1023 + v1027);
                    --v1029;
                    ++v1027;
                  }
                  while (v1029 > 1);
                }
                v1021 += v1025;
                v1024 += (int)v328;
                ++v1020;
                v1023 += v1026;
              }
              while (v1020 != v1019);
            }
          }
          else
          {
            unint64_t v1964 = v58[6];
            if (v1964)
            {
              unint64_t v1999 = 0;
              uint64_t v1888 = v228[19];
              uint64_t v1915 = *(void *)(v59 + 152);
              uint64_t v1481 = v58[19];
              do
              {
                uint64_t v1482 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1483 = *(void *)(v59 + 24);
                  int v1484 = v1999;
                  do
                  {
                    ldiv_t v1485 = ldiv(v1484, v60[v62]);
                    int v1484 = v1485.quot;
                    v1482 += *(void *)(v1483 + 8 * v62--) * v1485.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1486 = v2012;
                if ((v2012 & 0x80000000) != 0)
                {
                  LODWORD(v1487) = 0;
                }
                else
                {
                  uint64_t v1487 = 0;
                  uint64_t v1488 = v228[3];
                  int v1489 = v1999;
                  do
                  {
                    ldiv_t v1490 = ldiv(v1489, v229[v1486]);
                    int v1489 = v1490.quot;
                    v1487 += *(void *)(v1488 + 8 * v1486--) * v1490.rem;
                  }
                  while (v1486 != -1);
                }
                uint64_t v62 = v2026;
                if ((int)v328 >= 1)
                {
                  uint64_t v1491 = 0;
                  int v1492 = *(unsigned __int8 *)(v1915 + (int)v1482);
                  unsigned int v1493 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v1481 + v1491) = v1492 != *(unsigned __int8 *)(v1888 + (int)v1487 + v1491);
                    --v1493;
                    ++v1491;
                  }
                  while (v1493 > 1);
                }
                v1481 += (int)v328;
                v1999 += (int)v328;
              }
              while (v1999 < v1964);
            }
          }
          break;
        case 2:
          if (v65 == 2)
          {
            uint64_t v1494 = *v60;
            if (v1494)
            {
              uint64_t v1495 = 0;
              uint64_t v1496 = 0;
              uint64_t v1497 = 0;
              uint64_t v1498 = *(void *)(v59 + 152);
              uint64_t v1499 = v228[19];
              uint64_t v1500 = v58[19];
              unint64_t v1501 = v60[1];
              unsigned int v1502 = *(uint64_t **)(v59 + 24);
              uint64_t v1503 = *v1502;
              uint64_t v1504 = v1502[1];
              unint64_t v1505 = (uint64_t *)v228[3];
              uint64_t v1507 = *v1505;
              uint64_t v1506 = v1505[1];
              if (v1501 <= 1) {
                uint64_t v1508 = 1;
              }
              else {
                uint64_t v1508 = v60[1];
              }
              uint64_t v1509 = v1503 - v1504 * v1501;
              uint64_t v1510 = v1507 - v1506 * v229[1];
              do
              {
                if (v1501)
                {
                  uint64_t v1511 = 0;
                  uint64_t v1512 = v1498 + v1497;
                  do
                  {
                    if ((int)v328 >= 1)
                    {
                      uint64_t v1513 = 0;
                      int v1514 = *(unsigned __int8 *)(v1499 + v1496);
                      unsigned int v1515 = v328 + 1;
                      do
                      {
                        *(unsigned char *)(v1500 + v1513) = *(unsigned __int8 *)(v1512 + v1513) != v1514;
                        --v1515;
                        ++v1513;
                      }
                      while (v1515 > 1);
                    }
                    v1497 += v1504;
                    v1496 += v1506;
                    v1500 += (int)v328;
                    ++v1511;
                    v1512 += v1504;
                  }
                  while (v1511 != v1508);
                }
                v1497 += v1509;
                v1496 += v1510;
                ++v1495;
              }
              while (v1495 != v1494);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v1030 = *v60;
            if (v1030)
            {
              uint64_t v1031 = 0;
              uint64_t v1032 = 0;
              uint64_t v1033 = *(void *)(v59 + 152);
              uint64_t v1034 = v228[19];
              uint64_t v1035 = v58[19];
              uint64_t v1036 = **(void **)(v59 + 24);
              uint64_t v1037 = *(void *)v228[3];
              do
              {
                if ((int)v328 >= 1)
                {
                  uint64_t v1038 = 0;
                  int v1039 = *(unsigned __int8 *)(v1034 + v1032);
                  unsigned int v1040 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v1035 + v1038) = *(unsigned __int8 *)(v1033 + v1038) != v1039;
                    --v1040;
                    ++v1038;
                  }
                  while (v1040 > 1);
                }
                v1032 += v1037;
                v1035 += (int)v328;
                ++v1031;
                v1033 += v1036;
              }
              while (v1031 != v1030);
            }
          }
          else
          {
            unint64_t v1965 = v58[6];
            if (v1965)
            {
              unint64_t v2000 = 0;
              uint64_t v1889 = v228[19];
              uint64_t v1916 = *(void *)(v59 + 152);
              uint64_t v1516 = v58[19];
              do
              {
                uint64_t v1517 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1518 = *(void *)(v59 + 24);
                  int v1519 = v2000;
                  do
                  {
                    ldiv_t v1520 = ldiv(v1519, v60[v62]);
                    int v1519 = v1520.quot;
                    v1517 += *(void *)(v1518 + 8 * v62--) * v1520.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1521 = v2012;
                if ((v2012 & 0x80000000) != 0)
                {
                  LODWORD(v1522) = 0;
                }
                else
                {
                  uint64_t v1522 = 0;
                  uint64_t v1523 = v228[3];
                  int v1524 = v2000;
                  do
                  {
                    ldiv_t v1525 = ldiv(v1524, v229[v1521]);
                    int v1524 = v1525.quot;
                    v1522 += *(void *)(v1523 + 8 * v1521--) * v1525.rem;
                  }
                  while (v1521 != -1);
                }
                uint64_t v62 = v2026;
                if ((int)v328 >= 1)
                {
                  uint64_t v1526 = 0;
                  int v1527 = *(unsigned __int8 *)(v1889 + (int)v1522);
                  unsigned int v1528 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v1516 + v1526) = *(unsigned __int8 *)(v1916 + (int)v1517 + v1526) != v1527;
                    --v1528;
                    ++v1526;
                  }
                  while (v1528 > 1);
                }
                v1516 += (int)v328;
                v2000 += (int)v328;
              }
              while (v2000 < v1965);
            }
          }
          break;
        case 3:
          if (v65 == 2)
          {
            uint64_t v1185 = *v60;
            if (v1185)
            {
              uint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = 0;
              uint64_t v1189 = *(void *)(v59 + 152);
              uint64_t v1190 = v228[19];
              uint64_t v1191 = v58[19];
              unint64_t v1192 = v60[1];
              unsigned int v1193 = *(uint64_t **)(v59 + 24);
              uint64_t v1194 = *v1193;
              uint64_t v1195 = v1193[1];
              unint64_t v1196 = (uint64_t *)v228[3];
              uint64_t v1198 = *v1196;
              uint64_t v1197 = v1196[1];
              if (v1192 <= 1) {
                uint64_t v1199 = 1;
              }
              else {
                uint64_t v1199 = v60[1];
              }
              uint64_t v1200 = v1194 - v1195 * v1192;
              uint64_t v1201 = v1198 - v1197 * v229[1];
              do
              {
                if (v1192)
                {
                  uint64_t v1202 = 0;
                  uint64_t v1203 = v1190 + v1187;
                  uint64_t v1204 = v1189 + v1188;
                  do
                  {
                    if ((int)v328 >= 1)
                    {
                      uint64_t v1205 = 0;
                      unsigned int v1206 = v328 + 1;
                      do
                      {
                        *(unsigned char *)(v1191 + v1205) = *(unsigned __int8 *)(v1204 + v1205) != *(unsigned __int8 *)(v1203 + v1205);
                        --v1206;
                        ++v1205;
                      }
                      while (v1206 > 1);
                    }
                    v1188 += v1195;
                    v1187 += v1197;
                    v1191 += (int)v328;
                    ++v1202;
                    v1203 += v1197;
                    v1204 += v1195;
                  }
                  while (v1202 != v1199);
                }
                v1188 += v1200;
                v1187 += v1201;
                ++v1186;
              }
              while (v1186 != v1185);
            }
          }
          else if (v65 == 1)
          {
            uint64_t v329 = *v60;
            if (v329)
            {
              uint64_t v330 = 0;
              uint64_t v331 = *(void *)(v59 + 152);
              uint64_t v332 = v228[19];
              uint64_t v333 = v58[19];
              uint64_t v334 = **(void **)(v59 + 24);
              uint64_t v335 = *(void *)v228[3];
              do
              {
                if ((int)v328 >= 1)
                {
                  uint64_t v336 = 0;
                  unsigned int v337 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v333 + v336) = *(unsigned __int8 *)(v331 + v336) != *(unsigned __int8 *)(v332 + v336);
                    --v337;
                    ++v336;
                  }
                  while (v337 > 1);
                }
                v333 += (int)v328;
                ++v330;
                v332 += v335;
                v331 += v334;
              }
              while (v330 != v329);
            }
          }
          else
          {
            unint64_t v1956 = v58[6];
            if (v1956)
            {
              unint64_t v1991 = 0;
              uint64_t v1880 = v228[19];
              uint64_t v1907 = *(void *)(v59 + 152);
              uint64_t v1207 = v58[19];
              do
              {
                uint64_t v1208 = 0;
                if ((v62 & 0x80000000) == 0)
                {
                  uint64_t v1209 = *(void *)(v59 + 24);
                  int v1210 = v1991;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v60[v62]);
                    int v1210 = v1211.quot;
                    v1208 += *(void *)(v1209 + 8 * v62--) * v1211.rem;
                  }
                  while (v62 != -1);
                }
                uint64_t v1212 = v2012;
                if ((v2012 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  uint64_t v1213 = 0;
                  uint64_t v1214 = v228[3];
                  int v1215 = v1991;
                  do
                  {
                    ldiv_t v1216 = ldiv(v1215, v229[v1212]);
                    int v1215 = v1216.quot;
                    v1213 += *(void *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                uint64_t v62 = v2026;
                if ((int)v328 >= 1)
                {
                  uint64_t v1217 = 0;
                  unsigned int v1218 = v328 + 1;
                  do
                  {
                    *(unsigned char *)(v1207 + v1217) = *(unsigned __int8 *)(v1907 + (int)v1208 + v1217) != *(unsigned __int8 *)(v1880 + (int)v1213 + v1217);
                    --v1218;
                    ++v1217;
                  }
                  while (v1218 > 1);
                }
                v1207 += (int)v328;
                v1991 += (int)v328;
              }
              while (v1991 < v1956);
            }
          }
          break;
        default:
LABEL_344:
          switch(v324)
          {
            case 1uLL:
              uint64_t v338 = v58[6];
              if (v338)
              {
                uint64_t v339 = *(unsigned __int8 **)(v59 + 152);
                uint64_t v340 = (unsigned __int8 *)v228[19];
                uint64_t v341 = (BOOL *)v58[19];
                uint64_t v342 = **(void **)(v59 + 24);
                uint64_t v343 = *(void *)v228[3];
                do
                {
                  *v341++ = *v339 != *v340;
                  v340 += v343;
                  v339 += v342;
                  --v338;
                }
                while (v338);
              }
              break;
            case 2uLL:
              uint64_t v534 = *v60;
              if (v534)
              {
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = 0;
                uint64_t v538 = 0;
                uint64_t v539 = *(void *)(v59 + 152);
                uint64_t v540 = v228[19];
                uint64_t v541 = v58[19];
                unint64_t v542 = v60[1];
                uint64_t v543 = *(uint64_t **)(v59 + 24);
                uint64_t v544 = *v543;
                uint64_t v545 = v543[1];
                uint64_t v546 = (uint64_t *)v228[3];
                uint64_t v547 = *v546;
                uint64_t v548 = v546[1];
                uint64_t v549 = v547 - v548 * v229[1];
                if (v542 <= 1) {
                  uint64_t v550 = 1;
                }
                else {
                  uint64_t v550 = v60[1];
                }
                uint64_t v551 = v544 - v545 * v542;
                do
                {
                  if (v542)
                  {
                    uint64_t v552 = v536 + v550;
                    int v553 = (BOOL *)(v541 + v536);
                    uint64_t v554 = v550;
                    do
                    {
                      *v553++ = *(unsigned __int8 *)(v539 + v538) != *(unsigned __int8 *)(v540 + v537);
                      v538 += v545;
                      v537 += v548;
                      --v554;
                    }
                    while (v554);
                    uint64_t v536 = v552;
                  }
                  v538 += v551;
                  v537 += v549;
                  ++v535;
                }
                while (v535 != v534);
              }
              break;
            case 3uLL:
              uint64_t v555 = *v60;
              if (v555)
              {
                uint64_t v556 = 0;
                uint64_t v557 = 0;
                uint64_t v558 = 0;
                uint64_t v559 = 0;
                uint64_t v560 = *(void *)(v59 + 152);
                uint64_t v561 = v228[19];
                uint64_t v562 = v58[19];
                unint64_t v563 = v60[1];
                uint64_t v564 = *(void **)(v59 + 24);
                uint64_t v565 = v564[1];
                unint64_t v566 = (void *)v228[3];
                uint64_t v567 = v566[1];
                uint64_t v568 = *v566 - v567 * v229[1];
                if (v563 <= 1) {
                  uint64_t v569 = 1;
                }
                else {
                  uint64_t v569 = v60[1];
                }
                unint64_t v570 = *v564 - v565 * v563;
                do
                {
                  if (v563)
                  {
                    uint64_t v571 = 0;
                    unint64_t v572 = v60[2];
                    uint64_t v573 = v564[2];
                    uint64_t v574 = v566[2];
                    if (v572 <= 1) {
                      uint64_t v575 = 1;
                    }
                    else {
                      uint64_t v575 = v60[2];
                    }
                    uint64_t v576 = v567 - v574 * v229[2];
                    do
                    {
                      uint64_t v577 = v575;
                      if (v572)
                      {
                        do
                        {
                          *(unsigned char *)(v562 + v557++) = *(unsigned __int8 *)(v560 + v559) != *(unsigned __int8 *)(v561 + v558);
                          v559 += v573;
                          v558 += v574;
                          --v577;
                        }
                        while (v577);
                      }
                      v559 += v565 - v573 * v572;
                      v558 += v576;
                      ++v571;
                    }
                    while (v571 != v569);
                  }
                  v559 += v570;
                  v558 += v568;
                  ++v556;
                }
                while (v556 != v555);
              }
              break;
            case 4uLL:
              uint64_t v2033 = *v60;
              if (v2033)
              {
                uint64_t v578 = 0;
                uint64_t v579 = 0;
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = *(void *)(v59 + 152);
                uint64_t v583 = v228[19];
                uint64_t v584 = v58[19];
                unint64_t v585 = v60[1];
                uint64_t v586 = *(void **)(v59 + 24);
                uint64_t v587 = (void *)v228[3];
                uint64_t v1901 = v587[1];
                uint64_t v1930 = v586[1];
                uint64_t v1979 = *v587 - v1901 * v229[1];
                int v2019 = v60[1];
                if (v585 <= 1) {
                  uint64_t v588 = 1;
                }
                else {
                  uint64_t v588 = v60[1];
                }
                unint64_t v1944 = *v586 - v586[1] * v585;
                do
                {
                  if (v2019)
                  {
                    uint64_t v589 = 0;
                    unint64_t v590 = v60[2];
                    uint64_t v591 = v586[2];
                    uint64_t v592 = v587[2];
                    if (v590 <= 1) {
                      uint64_t v593 = 1;
                    }
                    else {
                      uint64_t v593 = v60[2];
                    }
                    uint64_t v594 = v1901 - v592 * v229[2];
                    do
                    {
                      if (v590)
                      {
                        uint64_t v595 = 0;
                        unint64_t v596 = v60[3];
                        uint64_t v597 = v586[3];
                        uint64_t v598 = v587[3];
                        if (v596 <= 1) {
                          uint64_t v599 = 1;
                        }
                        else {
                          uint64_t v599 = v60[3];
                        }
                        uint64_t v600 = v592 - v598 * v229[3];
                        do
                        {
                          uint64_t v601 = v599;
                          if (v596)
                          {
                            do
                            {
                              *(unsigned char *)(v584 + v579++) = *(unsigned __int8 *)(v582 + v581) != *(unsigned __int8 *)(v583 + v580);
                              v581 += v597;
                              v580 += v598;
                              --v601;
                            }
                            while (v601);
                          }
                          v581 += v591 - v597 * v596;
                          v580 += v600;
                          ++v595;
                        }
                        while (v595 != v593);
                      }
                      v581 += v1930 - v591 * v590;
                      v580 += v594;
                      ++v589;
                    }
                    while (v589 != v588);
                  }
                  v581 += v1944;
                  v580 += v1979;
                  ++v578;
                }
                while (v578 != v2033);
              }
              break;
            default:
              uint64_t v523 = v58[6];
              if (v523)
              {
                uint64_t v524 = 0;
                uint64_t v1943 = v228[19];
                uint64_t v1978 = *(void *)(v59 + 152);
                uint64_t v1929 = v58[19];
                do
                {
                  uint64_t v525 = 0;
                  if ((v62 & 0x80000000) == 0)
                  {
                    uint64_t v526 = *(void *)(v59 + 24);
                    int v527 = v524;
                    do
                    {
                      ldiv_t v528 = ldiv(v527, v60[v62]);
                      int v527 = v528.quot;
                      v525 += *(void *)(v526 + 8 * v62--) * v528.rem;
                    }
                    while (v62 != -1);
                  }
                  uint64_t v529 = v2012;
                  if ((v2012 & 0x80000000) != 0)
                  {
                    LODWORD(v530) = 0;
                  }
                  else
                  {
                    uint64_t v530 = 0;
                    uint64_t v531 = v228[3];
                    int v532 = v524;
                    do
                    {
                      ldiv_t v533 = ldiv(v532, v229[v529]);
                      int v532 = v533.quot;
                      v530 += *(void *)(v531 + 8 * v529--) * v533.rem;
                    }
                    while (v529 != -1);
                  }
                  *(unsigned char *)(v1929 + v524++) = *(unsigned __int8 *)(v1978 + (int)v525) != *(unsigned __int8 *)(v1943 + (int)v530);
                  uint64_t v62 = v2026;
                }
                while (v524 != v523);
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_17;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            int v18 = *(BOOL **)(*(void *)a3 + 152);
            float v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = v17 != v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          int v90 = *(_DWORD *)(*a1 + 160);
          if (v90 >= 1)
          {
            int v91 = **(_DWORD **)(*a2 + 152);
            int v92 = *(BOOL **)(*(void *)a3 + 152);
            int v93 = *(int **)(*a1 + 152);
            unsigned int v94 = v90 + 1;
            do
            {
              int v95 = *v93++;
              *v92++ = v95 != v91;
              --v94;
            }
            while (v94 > 1);
          }
          return;
        case 3:
          int v96 = *(_DWORD *)(*(void *)a3 + 48);
          if (v96 >= 1)
          {
            unsigned int v97 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v98 = *(int **)(*a2 + 152);
            unsigned int v99 = *(int **)(*a1 + 152);
            unsigned int v100 = v96 + 1;
            do
            {
              int v102 = *v99++;
              int v101 = v102;
              int v103 = *v98++;
              *v97++ = v101 != v103;
              --v100;
            }
            while (v100 > 1);
          }
          return;
        default:
          unsigned int v81 = *(void **)a3;
          uint64_t v82 = *a1;
          char v83 = *(int **)*a1;
          uint64_t v84 = (*(void *)(*a1 + 8) - (void)v83) >> 2;
          uint64_t v85 = (v84 - 1);
          if ((int)v85 >= -1) {
            int v86 = -1;
          }
          else {
            int v86 = v84 - 1;
          }
          int v87 = v86 + 1;
          int v88 = v84 + 1;
          break;
      }
      while (1)
      {
        unsigned int v89 = v88 - 2;
        if (v88 - 2 < 0) {
          break;
        }
        --v88;
        if (*(void *)(*(void *)(v82 + 24) + 8 * v89) != *(void *)(v81[3] + 8 * v89)) {
          goto LABEL_170;
        }
      }
      int v88 = v87;
LABEL_170:
      int v236 = (void *)*a2;
      int v237 = *(int **)*a2;
      uint64_t v238 = (v236[1] - (void)v237) >> 2;
      uint64_t v239 = (v238 - 1);
      if ((int)v239 >= -1) {
        int v240 = -1;
      }
      else {
        int v240 = v238 - 1;
      }
      int v241 = v240 + 1;
      int v242 = v238 + 1;
      while (1)
      {
        unsigned int v243 = v242 - 2;
        if (v242 - 2 < 0) {
          break;
        }
        --v242;
        if (*(void *)(v236[3] + 8 * v243) != *(void *)(v81[3] + 8 * v243)) {
          goto LABEL_220;
        }
      }
      int v242 = v241;
LABEL_220:
      int v280 = v84 + 1;
      while (1)
      {
        unsigned int v281 = v280 - 2;
        if (v280 - 2 < 0) {
          break;
        }
        --v280;
        if (*(void *)(*(void *)(v82 + 24) + 8 * v281)) {
          goto LABEL_255;
        }
      }
      int v280 = v87;
LABEL_255:
      int v294 = v238 + 1;
      while (1)
      {
        unsigned int v295 = v294 - 2;
        if (v294 - 2 < 0) {
          break;
        }
        --v294;
        if (*(void *)(v236[3] + 8 * v295)) {
          goto LABEL_350;
        }
      }
      int v294 = v241;
LABEL_350:
      unint64_t v344 = (uint64_t)(v81[1] - *v81) >> 2;
      if (v88 <= v242) {
        int v345 = v242;
      }
      else {
        int v345 = v88;
      }
      if (v88 <= v294) {
        int v88 = v294;
      }
      if (v280 > v242) {
        int v242 = v280;
      }
      if (v344 > v242)
      {
        int v346 = 1;
      }
      else
      {
        int v242 = (uint64_t)(v81[1] - *v81) >> 2;
        int v346 = 4;
      }
      if (v344 > v88)
      {
        int v347 = 2;
      }
      else
      {
        int v88 = v242;
        int v347 = v346;
      }
      if (v344 > v345)
      {
        int v88 = v345;
        int v347 = 3;
      }
      uint64_t v2013 = v239;
      uint64_t v2027 = v85;
      if (!v88) {
        goto LABEL_379;
      }
      unint64_t v348 = *(void *)(v81[3] + 8 * (v88 - 1));
      if (v348 < 0x10) {
        goto LABEL_379;
      }
      switch(v347)
      {
        case 1:
          if (v88 == 2)
          {
            uint64_t v1529 = *v83;
            if (v1529)
            {
              uint64_t v1530 = 0;
              uint64_t v1531 = 0;
              uint64_t v1532 = 0;
              uint64_t v1533 = *(void *)(v82 + 152);
              uint64_t v1534 = v236[19];
              uint64_t v1535 = v81[19];
              unint64_t v1536 = v83[1];
              int v1537 = *(uint64_t **)(v82 + 24);
              uint64_t v1538 = *v1537;
              uint64_t v1539 = v1537[1];
              uint64_t v1540 = (uint64_t *)v236[3];
              uint64_t v1542 = *v1540;
              uint64_t v1541 = v1540[1];
              if (v1536 <= 1) {
                uint64_t v1543 = 1;
              }
              else {
                uint64_t v1543 = v83[1];
              }
              uint64_t v1544 = v1538 - v1539 * v1536;
              uint64_t v1545 = v1542 - v1541 * v237[1];
              do
              {
                if (v1536)
                {
                  uint64_t v1546 = 0;
                  uint64_t v1547 = v1534 + 4 * v1531;
                  do
                  {
                    if ((int)v348 >= 1)
                    {
                      uint64_t v1548 = 0;
                      int v1549 = *(_DWORD *)(v1533 + 4 * v1532);
                      unsigned int v1550 = v348 + 1;
                      do
                      {
                        *(unsigned char *)(v1535 + v1548) = v1549 != *(_DWORD *)(v1547 + 4 * v1548);
                        --v1550;
                        ++v1548;
                      }
                      while (v1550 > 1);
                    }
                    v1532 += v1539;
                    v1531 += v1541;
                    v1535 += (int)v348;
                    ++v1546;
                    v1547 += 4 * v1541;
                  }
                  while (v1546 != v1543);
                }
                v1532 += v1544;
                v1531 += v1545;
                ++v1530;
              }
              while (v1530 != v1529);
            }
          }
          else if (v88 == 1)
          {
            uint64_t v1041 = *v83;
            if (v1041)
            {
              uint64_t v1042 = 0;
              uint64_t v1043 = 0;
              uint64_t v1044 = *(void *)(v82 + 152);
              uint64_t v1045 = v236[19];
              uint64_t v1046 = v81[19];
              uint64_t v1047 = **(void **)(v82 + 24);
              uint64_t v1048 = 4 * *(void *)v236[3];
              do
              {
                if ((int)v348 >= 1)
                {
                  uint64_t v1049 = 0;
                  int v1050 = *(_DWORD *)(v1044 + 4 * v1043);
                  unsigned int v1051 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v1046 + v1049) = v1050 != *(_DWORD *)(v1045 + 4 * v1049);
                    --v1051;
                    ++v1049;
                  }
                  while (v1051 > 1);
                }
                v1043 += v1047;
                v1046 += (int)v348;
                ++v1042;
                v1045 += v1048;
              }
              while (v1042 != v1041);
            }
          }
          else
          {
            unint64_t v1966 = v81[6];
            if (v1966)
            {
              unint64_t v2001 = 0;
              uint64_t v1890 = v236[19];
              uint64_t v1917 = *(void *)(v82 + 152);
              uint64_t v1551 = v81[19];
              do
              {
                uint64_t v1552 = 0;
                if ((v85 & 0x80000000) == 0)
                {
                  uint64_t v1553 = *(void *)(v82 + 24);
                  int v1554 = v2001;
                  do
                  {
                    ldiv_t v1555 = ldiv(v1554, v83[v85]);
                    int v1554 = v1555.quot;
                    v1552 += *(void *)(v1553 + 8 * v85--) * v1555.rem;
                  }
                  while (v85 != -1);
                }
                uint64_t v1556 = v2013;
                if ((v2013 & 0x80000000) != 0)
                {
                  LODWORD(v1557) = 0;
                }
                else
                {
                  uint64_t v1557 = 0;
                  uint64_t v1558 = v236[3];
                  int v1559 = v2001;
                  do
                  {
                    ldiv_t v1560 = ldiv(v1559, v237[v1556]);
                    int v1559 = v1560.quot;
                    v1557 += *(void *)(v1558 + 8 * v1556--) * v1560.rem;
                  }
                  while (v1556 != -1);
                }
                uint64_t v85 = v2027;
                if ((int)v348 >= 1)
                {
                  uint64_t v1561 = 0;
                  int v1562 = *(_DWORD *)(v1917 + 4 * (int)v1552);
                  unsigned int v1563 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v1551 + v1561) = v1562 != *(_DWORD *)(v1890 + 4 * (int)v1557 + 4 * v1561);
                    --v1563;
                    ++v1561;
                  }
                  while (v1563 > 1);
                }
                v1551 += (int)v348;
                v2001 += (int)v348;
              }
              while (v2001 < v1966);
            }
          }
          break;
        case 2:
          if (v88 == 2)
          {
            uint64_t v1564 = *v83;
            if (v1564)
            {
              uint64_t v1565 = 0;
              uint64_t v1566 = 0;
              uint64_t v1567 = 0;
              uint64_t v1568 = *(void *)(v82 + 152);
              uint64_t v1569 = v236[19];
              uint64_t v1570 = v81[19];
              unint64_t v1571 = v83[1];
              int v1572 = *(uint64_t **)(v82 + 24);
              uint64_t v1573 = *v1572;
              uint64_t v1574 = v1572[1];
              uint64_t v1575 = (uint64_t *)v236[3];
              uint64_t v1577 = *v1575;
              uint64_t v1576 = v1575[1];
              if (v1571 <= 1) {
                uint64_t v1578 = 1;
              }
              else {
                uint64_t v1578 = v83[1];
              }
              uint64_t v1579 = v1573 - v1574 * v1571;
              uint64_t v1580 = v1577 - v1576 * v237[1];
              do
              {
                if (v1571)
                {
                  uint64_t v1581 = 0;
                  uint64_t v1582 = v1568 + 4 * v1567;
                  do
                  {
                    if ((int)v348 >= 1)
                    {
                      uint64_t v1583 = 0;
                      int v1584 = *(_DWORD *)(v1569 + 4 * v1566);
                      unsigned int v1585 = v348 + 1;
                      do
                      {
                        *(unsigned char *)(v1570 + v1583) = *(_DWORD *)(v1582 + 4 * v1583) != v1584;
                        --v1585;
                        ++v1583;
                      }
                      while (v1585 > 1);
                    }
                    v1567 += v1574;
                    v1566 += v1576;
                    v1570 += (int)v348;
                    ++v1581;
                    v1582 += 4 * v1574;
                  }
                  while (v1581 != v1578);
                }
                v1567 += v1579;
                v1566 += v1580;
                ++v1565;
              }
              while (v1565 != v1564);
            }
          }
          else if (v88 == 1)
          {
            uint64_t v1052 = *v83;
            if (v1052)
            {
              uint64_t v1053 = 0;
              uint64_t v1054 = 0;
              uint64_t v1055 = *(void *)(v82 + 152);
              uint64_t v1056 = v236[19];
              uint64_t v1057 = v81[19];
              uint64_t v1058 = *(void *)v236[3];
              uint64_t v1059 = 4 * **(void **)(v82 + 24);
              do
              {
                if ((int)v348 >= 1)
                {
                  uint64_t v1060 = 0;
                  int v1061 = *(_DWORD *)(v1056 + 4 * v1054);
                  unsigned int v1062 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v1057 + v1060) = *(_DWORD *)(v1055 + 4 * v1060) != v1061;
                    --v1062;
                    ++v1060;
                  }
                  while (v1062 > 1);
                }
                v1054 += v1058;
                v1057 += (int)v348;
                ++v1053;
                v1055 += v1059;
              }
              while (v1053 != v1052);
            }
          }
          else
          {
            unint64_t v1967 = v81[6];
            if (v1967)
            {
              unint64_t v2002 = 0;
              uint64_t v1891 = v236[19];
              uint64_t v1918 = *(void *)(v82 + 152);
              uint64_t v1586 = v81[19];
              do
              {
                uint64_t v1587 = 0;
                if ((v85 & 0x80000000) == 0)
                {
                  uint64_t v1588 = *(void *)(v82 + 24);
                  int v1589 = v2002;
                  do
                  {
                    ldiv_t v1590 = ldiv(v1589, v83[v85]);
                    int v1589 = v1590.quot;
                    v1587 += *(void *)(v1588 + 8 * v85--) * v1590.rem;
                  }
                  while (v85 != -1);
                }
                uint64_t v1591 = v2013;
                if ((v2013 & 0x80000000) != 0)
                {
                  LODWORD(v1592) = 0;
                }
                else
                {
                  uint64_t v1592 = 0;
                  uint64_t v1593 = v236[3];
                  int v1594 = v2002;
                  do
                  {
                    ldiv_t v1595 = ldiv(v1594, v237[v1591]);
                    int v1594 = v1595.quot;
                    v1592 += *(void *)(v1593 + 8 * v1591--) * v1595.rem;
                  }
                  while (v1591 != -1);
                }
                uint64_t v85 = v2027;
                if ((int)v348 >= 1)
                {
                  uint64_t v1596 = 0;
                  int v1597 = *(_DWORD *)(v1891 + 4 * (int)v1592);
                  unsigned int v1598 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v1586 + v1596) = *(_DWORD *)(v1918 + 4 * (int)v1587 + 4 * v1596) != v1597;
                    --v1598;
                    ++v1596;
                  }
                  while (v1598 > 1);
                }
                v1586 += (int)v348;
                v2002 += (int)v348;
              }
              while (v2002 < v1967);
            }
          }
          break;
        case 3:
          if (v88 == 2)
          {
            uint64_t v1219 = *v83;
            if (v1219)
            {
              uint64_t v1220 = 0;
              uint64_t v1221 = 0;
              uint64_t v1222 = 0;
              uint64_t v1223 = *(void *)(v82 + 152);
              uint64_t v1224 = v236[19];
              uint64_t v1225 = v81[19];
              unint64_t v1226 = v83[1];
              int v1227 = *(uint64_t **)(v82 + 24);
              uint64_t v1228 = *v1227;
              uint64_t v1229 = v1227[1];
              uint64_t v1230 = (uint64_t *)v236[3];
              uint64_t v1232 = *v1230;
              uint64_t v1231 = v1230[1];
              if (v1226 <= 1) {
                uint64_t v1233 = 1;
              }
              else {
                uint64_t v1233 = v83[1];
              }
              uint64_t v1234 = v1228 - v1229 * v1226;
              uint64_t v1235 = v1232 - v1231 * v237[1];
              do
              {
                if (v1226)
                {
                  uint64_t v1236 = 0;
                  uint64_t v1237 = v1224 + 4 * v1221;
                  uint64_t v1238 = v1223 + 4 * v1222;
                  do
                  {
                    if ((int)v348 >= 1)
                    {
                      uint64_t v1239 = 0;
                      unsigned int v1240 = v348 + 1;
                      do
                      {
                        *(unsigned char *)(v1225 + v1239) = *(_DWORD *)(v1238 + 4 * v1239) != *(_DWORD *)(v1237 + 4 * v1239);
                        --v1240;
                        ++v1239;
                      }
                      while (v1240 > 1);
                    }
                    v1222 += v1229;
                    v1221 += v1231;
                    v1225 += (int)v348;
                    ++v1236;
                    v1237 += 4 * v1231;
                    v1238 += 4 * v1229;
                  }
                  while (v1236 != v1233);
                }
                v1222 += v1234;
                v1221 += v1235;
                ++v1220;
              }
              while (v1220 != v1219);
            }
          }
          else if (v88 == 1)
          {
            uint64_t v349 = *v83;
            if (v349)
            {
              uint64_t v350 = 0;
              uint64_t v351 = *(void *)(v82 + 152);
              uint64_t v352 = v236[19];
              uint64_t v353 = v81[19];
              uint64_t v354 = 4 * *(void *)v236[3];
              uint64_t v355 = 4 * **(void **)(v82 + 24);
              do
              {
                if ((int)v348 >= 1)
                {
                  uint64_t v356 = 0;
                  unsigned int v357 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v353 + v356) = *(_DWORD *)(v351 + 4 * v356) != *(_DWORD *)(v352 + 4 * v356);
                    --v357;
                    ++v356;
                  }
                  while (v357 > 1);
                }
                v353 += (int)v348;
                ++v350;
                v352 += v354;
                v351 += v355;
              }
              while (v350 != v349);
            }
          }
          else
          {
            unint64_t v1957 = v81[6];
            if (v1957)
            {
              unint64_t v1992 = 0;
              uint64_t v1881 = v236[19];
              uint64_t v1908 = *(void *)(v82 + 152);
              uint64_t v1241 = v81[19];
              do
              {
                uint64_t v1242 = 0;
                if ((v85 & 0x80000000) == 0)
                {
                  uint64_t v1243 = *(void *)(v82 + 24);
                  int v1244 = v1992;
                  do
                  {
                    ldiv_t v1245 = ldiv(v1244, v83[v85]);
                    int v1244 = v1245.quot;
                    v1242 += *(void *)(v1243 + 8 * v85--) * v1245.rem;
                  }
                  while (v85 != -1);
                }
                uint64_t v1246 = v2013;
                if ((v2013 & 0x80000000) != 0)
                {
                  LODWORD(v1247) = 0;
                }
                else
                {
                  uint64_t v1247 = 0;
                  uint64_t v1248 = v236[3];
                  int v1249 = v1992;
                  do
                  {
                    ldiv_t v1250 = ldiv(v1249, v237[v1246]);
                    int v1249 = v1250.quot;
                    v1247 += *(void *)(v1248 + 8 * v1246--) * v1250.rem;
                  }
                  while (v1246 != -1);
                }
                uint64_t v85 = v2027;
                if ((int)v348 >= 1)
                {
                  uint64_t v1251 = 0;
                  unsigned int v1252 = v348 + 1;
                  do
                  {
                    *(unsigned char *)(v1241 + v1251) = *(_DWORD *)(v1908 + 4 * (int)v1242 + 4 * v1251) != *(_DWORD *)(v1881 + 4 * (int)v1247 + 4 * v1251);
                    --v1252;
                    ++v1251;
                  }
                  while (v1252 > 1);
                }
                v1241 += (int)v348;
                v1992 += (int)v348;
              }
              while (v1992 < v1957);
            }
          }
          break;
        default:
LABEL_379:
          switch(v344)
          {
            case 1uLL:
              uint64_t v358 = v81[6];
              if (v358)
              {
                uint64_t v359 = *(_DWORD **)(v82 + 152);
                uint64_t v360 = (_DWORD *)v236[19];
                uint64_t v361 = (BOOL *)v81[19];
                uint64_t v362 = 4 * *(void *)v236[3];
                uint64_t v363 = 4 * **(void **)(v82 + 24);
                do
                {
                  *v361++ = *v359 != *v360;
                  uint64_t v360 = (_DWORD *)((char *)v360 + v362);
                  uint64_t v359 = (_DWORD *)((char *)v359 + v363);
                  --v358;
                }
                while (v358);
              }
              break;
            case 2uLL:
              uint64_t v613 = *v83;
              if (v613)
              {
                uint64_t v614 = 0;
                uint64_t v615 = 0;
                uint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = *(void *)(v82 + 152);
                uint64_t v619 = v236[19];
                uint64_t v620 = v81[19];
                unint64_t v621 = v83[1];
                uint64_t v622 = *(uint64_t **)(v82 + 24);
                uint64_t v623 = *v622;
                uint64_t v624 = v622[1];
                uint64_t v625 = (uint64_t *)v236[3];
                uint64_t v626 = *v625;
                uint64_t v627 = v625[1];
                uint64_t v628 = v626 - v627 * v237[1];
                if (v621 <= 1) {
                  uint64_t v629 = 1;
                }
                else {
                  uint64_t v629 = v83[1];
                }
                uint64_t v630 = v623 - v624 * v621;
                do
                {
                  if (v621)
                  {
                    uint64_t v631 = v615 + v629;
                    int v632 = (BOOL *)(v620 + v615);
                    uint64_t v633 = v629;
                    do
                    {
                      *v632++ = *(_DWORD *)(v618 + 4 * v617) != *(_DWORD *)(v619 + 4 * v616);
                      v617 += v624;
                      v616 += v627;
                      --v633;
                    }
                    while (v633);
                    uint64_t v615 = v631;
                  }
                  v617 += v630;
                  v616 += v628;
                  ++v614;
                }
                while (v614 != v613);
              }
              break;
            case 3uLL:
              uint64_t v634 = *v83;
              if (v634)
              {
                uint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = *(void *)(v82 + 152);
                uint64_t v640 = v236[19];
                uint64_t v641 = v81[19];
                unint64_t v642 = v83[1];
                uint64_t v643 = *(void **)(v82 + 24);
                uint64_t v644 = v643[1];
                uint64_t v645 = (void *)v236[3];
                uint64_t v646 = v645[1];
                uint64_t v647 = *v645 - v646 * v237[1];
                if (v642 <= 1) {
                  uint64_t v648 = 1;
                }
                else {
                  uint64_t v648 = v83[1];
                }
                unint64_t v649 = *v643 - v644 * v642;
                do
                {
                  if (v642)
                  {
                    uint64_t v650 = 0;
                    unint64_t v651 = v83[2];
                    uint64_t v652 = v643[2];
                    uint64_t v653 = v645[2];
                    if (v651 <= 1) {
                      uint64_t v654 = 1;
                    }
                    else {
                      uint64_t v654 = v83[2];
                    }
                    uint64_t v655 = v646 - v653 * v237[2];
                    do
                    {
                      uint64_t v656 = v654;
                      if (v651)
                      {
                        do
                        {
                          *(unsigned char *)(v641 + v636++) = *(_DWORD *)(v639 + 4 * v638) != *(_DWORD *)(v640 + 4 * v637);
                          v638 += v652;
                          v637 += v653;
                          --v656;
                        }
                        while (v656);
                      }
                      v638 += v644 - v652 * v651;
                      v637 += v655;
                      ++v650;
                    }
                    while (v650 != v648);
                  }
                  v638 += v649;
                  v637 += v647;
                  ++v635;
                }
                while (v635 != v634);
              }
              break;
            case 4uLL:
              uint64_t v2034 = *v83;
              if (v2034)
              {
                uint64_t v657 = 0;
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = 0;
                uint64_t v661 = *(void *)(v82 + 152);
                uint64_t v662 = v236[19];
                uint64_t v663 = v81[19];
                unint64_t v664 = v83[1];
                uint64_t v665 = *(void **)(v82 + 24);
                uint64_t v666 = (void *)v236[3];
                uint64_t v1902 = v666[1];
                uint64_t v1932 = v665[1];
                uint64_t v1981 = *v666 - v1902 * v237[1];
                int v2020 = v83[1];
                if (v664 <= 1) {
                  uint64_t v667 = 1;
                }
                else {
                  uint64_t v667 = v83[1];
                }
                unint64_t v1946 = *v665 - v665[1] * v664;
                do
                {
                  if (v2020)
                  {
                    uint64_t v668 = 0;
                    unint64_t v669 = v83[2];
                    uint64_t v670 = v665[2];
                    uint64_t v671 = v666[2];
                    if (v669 <= 1) {
                      uint64_t v672 = 1;
                    }
                    else {
                      uint64_t v672 = v83[2];
                    }
                    uint64_t v673 = v1902 - v671 * v237[2];
                    do
                    {
                      if (v669)
                      {
                        uint64_t v674 = 0;
                        unint64_t v675 = v83[3];
                        uint64_t v676 = v665[3];
                        uint64_t v677 = v666[3];
                        if (v675 <= 1) {
                          uint64_t v678 = 1;
                        }
                        else {
                          uint64_t v678 = v83[3];
                        }
                        uint64_t v679 = v671 - v677 * v237[3];
                        do
                        {
                          uint64_t v680 = v678;
                          if (v675)
                          {
                            do
                            {
                              *(unsigned char *)(v663 + v658++) = *(_DWORD *)(v661 + 4 * v660) != *(_DWORD *)(v662 + 4 * v659);
                              v660 += v676;
                              v659 += v677;
                              --v680;
                            }
                            while (v680);
                          }
                          v660 += v670 - v676 * v675;
                          v659 += v679;
                          ++v674;
                        }
                        while (v674 != v672);
                      }
                      v660 += v1932 - v670 * v669;
                      v659 += v673;
                      ++v668;
                    }
                    while (v668 != v667);
                  }
                  v660 += v1946;
                  v659 += v1981;
                  ++v657;
                }
                while (v657 != v2034);
              }
              break;
            default:
              uint64_t v602 = v81[6];
              if (v602)
              {
                uint64_t v603 = 0;
                uint64_t v1945 = v236[19];
                uint64_t v1980 = *(void *)(v82 + 152);
                uint64_t v1931 = v81[19];
                do
                {
                  uint64_t v604 = 0;
                  if ((v85 & 0x80000000) == 0)
                  {
                    uint64_t v605 = *(void *)(v82 + 24);
                    int v606 = v603;
                    do
                    {
                      ldiv_t v607 = ldiv(v606, v83[v85]);
                      int v606 = v607.quot;
                      v604 += *(void *)(v605 + 8 * v85--) * v607.rem;
                    }
                    while (v85 != -1);
                  }
                  uint64_t v608 = v2013;
                  if ((v2013 & 0x80000000) != 0)
                  {
                    LODWORD(v609) = 0;
                  }
                  else
                  {
                    uint64_t v609 = 0;
                    uint64_t v610 = v236[3];
                    int v611 = v603;
                    do
                    {
                      ldiv_t v612 = ldiv(v611, v237[v608]);
                      int v611 = v612.quot;
                      v609 += *(void *)(v610 + 8 * v608--) * v612.rem;
                    }
                    while (v608 != -1);
                  }
                  *(unsigned char *)(v1931 + v603++) = *(_DWORD *)(v1980 + 4 * (int)v604) != *(_DWORD *)(v1945
                                                                                                 + 4 * (int)v609);
                  uint64_t v85 = v2027;
                }
                while (v603 != v602);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          int v23 = **(unsigned __int8 **)(*a1 + 152);
          int v24 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_18;
        case 1:
          int v113 = *(_DWORD *)(*a2 + 160);
          if (v113 >= 1)
          {
            int v114 = **(unsigned __int8 **)(*a1 + 152);
            int v115 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v116 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v117 = v113 + 1;
            do
            {
              int v118 = *v116++;
              *v115++ = v114 != v118;
              --v117;
            }
            while (v117 > 1);
          }
          return;
        case 2:
          int v119 = *(_DWORD *)(*a1 + 160);
          if (v119 >= 1)
          {
            int v120 = **(unsigned __int8 **)(*a2 + 152);
            unsigned int v121 = *(BOOL **)(*(void *)a3 + 152);
            char v122 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v123 = v119 + 1;
            do
            {
              int v124 = *v122++;
              *v121++ = v124 != v120;
              --v123;
            }
            while (v123 > 1);
          }
          return;
        case 3:
          int v125 = *(_DWORD *)(*(void *)a3 + 48);
          if (v125 >= 1)
          {
            unsigned int v126 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v127 = *(unsigned __int8 **)(*a2 + 152);
            char v128 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v129 = v125 + 1;
            do
            {
              int v131 = *v128++;
              int v130 = v131;
              int v132 = *v127++;
              *v126++ = v130 != v132;
              --v129;
            }
            while (v129 > 1);
          }
          return;
        default:
          unsigned int v104 = *(void **)a3;
          uint64_t v105 = *a1;
          int v106 = *(int **)*a1;
          uint64_t v107 = (*(void *)(*a1 + 8) - (void)v106) >> 2;
          uint64_t v108 = (v107 - 1);
          if ((int)v108 >= -1) {
            int v109 = -1;
          }
          else {
            int v109 = v107 - 1;
          }
          int v110 = v109 + 1;
          int v111 = v107 + 1;
          break;
      }
      while (1)
      {
        unsigned int v112 = v111 - 2;
        if (v111 - 2 < 0) {
          break;
        }
        --v111;
        if (*(void *)(*(void *)(v105 + 24) + 8 * v112) != *(void *)(v104[3] + 8 * v112)) {
          goto LABEL_178;
        }
      }
      int v111 = v110;
LABEL_178:
      int v244 = (void *)*a2;
      int v245 = *(int **)*a2;
      uint64_t v246 = (v244[1] - (void)v245) >> 2;
      uint64_t v247 = (v246 - 1);
      if ((int)v247 >= -1) {
        int v248 = -1;
      }
      else {
        int v248 = v246 - 1;
      }
      int v249 = v248 + 1;
      int v250 = v246 + 1;
      while (1)
      {
        unsigned int v251 = v250 - 2;
        if (v250 - 2 < 0) {
          break;
        }
        --v250;
        if (*(void *)(v244[3] + 8 * v251) != *(void *)(v104[3] + 8 * v251)) {
          goto LABEL_225;
        }
      }
      int v250 = v249;
LABEL_225:
      int v282 = v107 + 1;
      while (1)
      {
        unsigned int v283 = v282 - 2;
        if (v282 - 2 < 0) {
          break;
        }
        --v282;
        if (*(void *)(*(void *)(v105 + 24) + 8 * v283)) {
          goto LABEL_260;
        }
      }
      int v282 = v110;
LABEL_260:
      int v296 = v246 + 1;
      while (1)
      {
        unsigned int v297 = v296 - 2;
        if (v296 - 2 < 0) {
          break;
        }
        --v296;
        if (*(void *)(v244[3] + 8 * v297)) {
          goto LABEL_385;
        }
      }
      int v296 = v249;
LABEL_385:
      unint64_t v364 = (uint64_t)(v104[1] - *v104) >> 2;
      if (v111 <= v250) {
        int v365 = v250;
      }
      else {
        int v365 = v111;
      }
      if (v111 <= v296) {
        int v111 = v296;
      }
      if (v282 > v250) {
        int v250 = v282;
      }
      if (v364 > v250)
      {
        int v366 = 1;
      }
      else
      {
        int v250 = (uint64_t)(v104[1] - *v104) >> 2;
        int v366 = 4;
      }
      if (v364 > v111)
      {
        int v367 = 2;
      }
      else
      {
        int v111 = v250;
        int v367 = v366;
      }
      if (v364 > v365)
      {
        int v111 = v365;
        int v367 = 3;
      }
      uint64_t v2014 = v247;
      uint64_t v2028 = v108;
      if (!v111) {
        goto LABEL_414;
      }
      unint64_t v368 = *(void *)(v104[3] + 8 * (v111 - 1));
      if (v368 < 0x10) {
        goto LABEL_414;
      }
      switch(v367)
      {
        case 1:
          if (v111 == 2)
          {
            uint64_t v1599 = *v106;
            if (v1599)
            {
              uint64_t v1600 = 0;
              uint64_t v1601 = 0;
              uint64_t v1602 = 0;
              uint64_t v1603 = *(void *)(v105 + 152);
              uint64_t v1604 = v244[19];
              uint64_t v1605 = v104[19];
              unint64_t v1606 = v106[1];
              unint64_t v1607 = *(uint64_t **)(v105 + 24);
              uint64_t v1608 = *v1607;
              uint64_t v1609 = v1607[1];
              unint64_t v1610 = (uint64_t *)v244[3];
              uint64_t v1612 = *v1610;
              uint64_t v1611 = v1610[1];
              if (v1606 <= 1) {
                uint64_t v1613 = 1;
              }
              else {
                uint64_t v1613 = v106[1];
              }
              uint64_t v1614 = v1608 - v1609 * v1606;
              uint64_t v1615 = v1612 - v1611 * v245[1];
              do
              {
                if (v1606)
                {
                  uint64_t v1616 = 0;
                  uint64_t v1617 = v1604 + v1601;
                  do
                  {
                    if ((int)v368 >= 1)
                    {
                      uint64_t v1618 = 0;
                      int v1619 = *(unsigned __int8 *)(v1603 + v1602);
                      unsigned int v1620 = v368 + 1;
                      do
                      {
                        *(unsigned char *)(v1605 + v1618) = v1619 != *(unsigned __int8 *)(v1617 + v1618);
                        --v1620;
                        ++v1618;
                      }
                      while (v1620 > 1);
                    }
                    v1602 += v1609;
                    v1601 += v1611;
                    v1605 += (int)v368;
                    ++v1616;
                    v1617 += v1611;
                  }
                  while (v1616 != v1613);
                }
                v1602 += v1614;
                v1601 += v1615;
                ++v1600;
              }
              while (v1600 != v1599);
            }
          }
          else if (v111 == 1)
          {
            uint64_t v1063 = *v106;
            if (v1063)
            {
              uint64_t v1064 = 0;
              uint64_t v1065 = 0;
              uint64_t v1066 = *(void *)(v105 + 152);
              uint64_t v1067 = v244[19];
              uint64_t v1068 = v104[19];
              uint64_t v1069 = **(void **)(v105 + 24);
              uint64_t v1070 = *(void *)v244[3];
              do
              {
                if ((int)v368 >= 1)
                {
                  uint64_t v1071 = 0;
                  int v1072 = *(unsigned __int8 *)(v1066 + v1065);
                  unsigned int v1073 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v1068 + v1071) = v1072 != *(unsigned __int8 *)(v1067 + v1071);
                    --v1073;
                    ++v1071;
                  }
                  while (v1073 > 1);
                }
                v1065 += v1069;
                v1068 += (int)v368;
                ++v1064;
                v1067 += v1070;
              }
              while (v1064 != v1063);
            }
          }
          else
          {
            unint64_t v1968 = v104[6];
            if (v1968)
            {
              unint64_t v2003 = 0;
              uint64_t v1892 = v244[19];
              uint64_t v1919 = *(void *)(v105 + 152);
              uint64_t v1621 = v104[19];
              do
              {
                uint64_t v1622 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1623 = *(void *)(v105 + 24);
                  int v1624 = v2003;
                  do
                  {
                    ldiv_t v1625 = ldiv(v1624, v106[v108]);
                    int v1624 = v1625.quot;
                    v1622 += *(void *)(v1623 + 8 * v108--) * v1625.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1626 = v2014;
                if ((v2014 & 0x80000000) != 0)
                {
                  LODWORD(v1627) = 0;
                }
                else
                {
                  uint64_t v1627 = 0;
                  uint64_t v1628 = v244[3];
                  int v1629 = v2003;
                  do
                  {
                    ldiv_t v1630 = ldiv(v1629, v245[v1626]);
                    int v1629 = v1630.quot;
                    v1627 += *(void *)(v1628 + 8 * v1626--) * v1630.rem;
                  }
                  while (v1626 != -1);
                }
                uint64_t v108 = v2028;
                if ((int)v368 >= 1)
                {
                  uint64_t v1631 = 0;
                  int v1632 = *(unsigned __int8 *)(v1919 + (int)v1622);
                  unsigned int v1633 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v1621 + v1631) = v1632 != *(unsigned __int8 *)(v1892 + (int)v1627 + v1631);
                    --v1633;
                    ++v1631;
                  }
                  while (v1633 > 1);
                }
                v1621 += (int)v368;
                v2003 += (int)v368;
              }
              while (v2003 < v1968);
            }
          }
          break;
        case 2:
          if (v111 == 2)
          {
            uint64_t v1634 = *v106;
            if (v1634)
            {
              uint64_t v1635 = 0;
              uint64_t v1636 = 0;
              uint64_t v1637 = 0;
              uint64_t v1638 = *(void *)(v105 + 152);
              uint64_t v1639 = v244[19];
              uint64_t v1640 = v104[19];
              unint64_t v1641 = v106[1];
              unint64_t v1642 = *(uint64_t **)(v105 + 24);
              uint64_t v1643 = *v1642;
              uint64_t v1644 = v1642[1];
              uint64_t v1645 = (uint64_t *)v244[3];
              uint64_t v1647 = *v1645;
              uint64_t v1646 = v1645[1];
              if (v1641 <= 1) {
                uint64_t v1648 = 1;
              }
              else {
                uint64_t v1648 = v106[1];
              }
              uint64_t v1649 = v1643 - v1644 * v1641;
              uint64_t v1650 = v1647 - v1646 * v245[1];
              do
              {
                if (v1641)
                {
                  uint64_t v1651 = 0;
                  uint64_t v1652 = v1638 + v1637;
                  do
                  {
                    if ((int)v368 >= 1)
                    {
                      uint64_t v1653 = 0;
                      int v1654 = *(unsigned __int8 *)(v1639 + v1636);
                      unsigned int v1655 = v368 + 1;
                      do
                      {
                        *(unsigned char *)(v1640 + v1653) = *(unsigned __int8 *)(v1652 + v1653) != v1654;
                        --v1655;
                        ++v1653;
                      }
                      while (v1655 > 1);
                    }
                    v1637 += v1644;
                    v1636 += v1646;
                    v1640 += (int)v368;
                    ++v1651;
                    v1652 += v1644;
                  }
                  while (v1651 != v1648);
                }
                v1637 += v1649;
                v1636 += v1650;
                ++v1635;
              }
              while (v1635 != v1634);
            }
          }
          else if (v111 == 1)
          {
            uint64_t v1074 = *v106;
            if (v1074)
            {
              uint64_t v1075 = 0;
              uint64_t v1076 = 0;
              uint64_t v1077 = *(void *)(v105 + 152);
              uint64_t v1078 = v244[19];
              uint64_t v1079 = v104[19];
              uint64_t v1080 = **(void **)(v105 + 24);
              uint64_t v1081 = *(void *)v244[3];
              do
              {
                if ((int)v368 >= 1)
                {
                  uint64_t v1082 = 0;
                  int v1083 = *(unsigned __int8 *)(v1078 + v1076);
                  unsigned int v1084 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v1079 + v1082) = *(unsigned __int8 *)(v1077 + v1082) != v1083;
                    --v1084;
                    ++v1082;
                  }
                  while (v1084 > 1);
                }
                v1076 += v1081;
                v1079 += (int)v368;
                ++v1075;
                v1077 += v1080;
              }
              while (v1075 != v1074);
            }
          }
          else
          {
            unint64_t v1969 = v104[6];
            if (v1969)
            {
              unint64_t v2004 = 0;
              uint64_t v1893 = v244[19];
              uint64_t v1920 = *(void *)(v105 + 152);
              uint64_t v1656 = v104[19];
              do
              {
                uint64_t v1657 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1658 = *(void *)(v105 + 24);
                  int v1659 = v2004;
                  do
                  {
                    ldiv_t v1660 = ldiv(v1659, v106[v108]);
                    int v1659 = v1660.quot;
                    v1657 += *(void *)(v1658 + 8 * v108--) * v1660.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1661 = v2014;
                if ((v2014 & 0x80000000) != 0)
                {
                  LODWORD(v1662) = 0;
                }
                else
                {
                  uint64_t v1662 = 0;
                  uint64_t v1663 = v244[3];
                  int v1664 = v2004;
                  do
                  {
                    ldiv_t v1665 = ldiv(v1664, v245[v1661]);
                    int v1664 = v1665.quot;
                    v1662 += *(void *)(v1663 + 8 * v1661--) * v1665.rem;
                  }
                  while (v1661 != -1);
                }
                uint64_t v108 = v2028;
                if ((int)v368 >= 1)
                {
                  uint64_t v1666 = 0;
                  int v1667 = *(unsigned __int8 *)(v1893 + (int)v1662);
                  unsigned int v1668 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v1656 + v1666) = *(unsigned __int8 *)(v1920 + (int)v1657 + v1666) != v1667;
                    --v1668;
                    ++v1666;
                  }
                  while (v1668 > 1);
                }
                v1656 += (int)v368;
                v2004 += (int)v368;
              }
              while (v2004 < v1969);
            }
          }
          break;
        case 3:
          if (v111 == 2)
          {
            uint64_t v1253 = *v106;
            if (v1253)
            {
              uint64_t v1254 = 0;
              uint64_t v1255 = 0;
              uint64_t v1256 = 0;
              uint64_t v1257 = *(void *)(v105 + 152);
              uint64_t v1258 = v244[19];
              uint64_t v1259 = v104[19];
              unint64_t v1260 = v106[1];
              uint64_t v1261 = *(uint64_t **)(v105 + 24);
              uint64_t v1262 = *v1261;
              uint64_t v1263 = v1261[1];
              uint64_t v1264 = (uint64_t *)v244[3];
              uint64_t v1266 = *v1264;
              uint64_t v1265 = v1264[1];
              if (v1260 <= 1) {
                uint64_t v1267 = 1;
              }
              else {
                uint64_t v1267 = v106[1];
              }
              uint64_t v1268 = v1262 - v1263 * v1260;
              uint64_t v1269 = v1266 - v1265 * v245[1];
              do
              {
                if (v1260)
                {
                  uint64_t v1270 = 0;
                  uint64_t v1271 = v1258 + v1255;
                  uint64_t v1272 = v1257 + v1256;
                  do
                  {
                    if ((int)v368 >= 1)
                    {
                      uint64_t v1273 = 0;
                      unsigned int v1274 = v368 + 1;
                      do
                      {
                        *(unsigned char *)(v1259 + v1273) = *(unsigned __int8 *)(v1272 + v1273) != *(unsigned __int8 *)(v1271 + v1273);
                        --v1274;
                        ++v1273;
                      }
                      while (v1274 > 1);
                    }
                    v1256 += v1263;
                    v1255 += v1265;
                    v1259 += (int)v368;
                    ++v1270;
                    v1271 += v1265;
                    v1272 += v1263;
                  }
                  while (v1270 != v1267);
                }
                v1256 += v1268;
                v1255 += v1269;
                ++v1254;
              }
              while (v1254 != v1253);
            }
          }
          else if (v111 == 1)
          {
            uint64_t v369 = *v106;
            if (v369)
            {
              uint64_t v370 = 0;
              uint64_t v371 = *(void *)(v105 + 152);
              uint64_t v372 = v244[19];
              uint64_t v373 = v104[19];
              uint64_t v374 = **(void **)(v105 + 24);
              uint64_t v375 = *(void *)v244[3];
              do
              {
                if ((int)v368 >= 1)
                {
                  uint64_t v376 = 0;
                  unsigned int v377 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v373 + v376) = *(unsigned __int8 *)(v371 + v376) != *(unsigned __int8 *)(v372 + v376);
                    --v377;
                    ++v376;
                  }
                  while (v377 > 1);
                }
                v373 += (int)v368;
                ++v370;
                v372 += v375;
                v371 += v374;
              }
              while (v370 != v369);
            }
          }
          else
          {
            unint64_t v1958 = v104[6];
            if (v1958)
            {
              unint64_t v1993 = 0;
              uint64_t v1882 = v244[19];
              uint64_t v1909 = *(void *)(v105 + 152);
              uint64_t v1275 = v104[19];
              do
              {
                uint64_t v1276 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1277 = *(void *)(v105 + 24);
                  int v1278 = v1993;
                  do
                  {
                    ldiv_t v1279 = ldiv(v1278, v106[v108]);
                    int v1278 = v1279.quot;
                    v1276 += *(void *)(v1277 + 8 * v108--) * v1279.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1280 = v2014;
                if ((v2014 & 0x80000000) != 0)
                {
                  LODWORD(v1281) = 0;
                }
                else
                {
                  uint64_t v1281 = 0;
                  uint64_t v1282 = v244[3];
                  int v1283 = v1993;
                  do
                  {
                    ldiv_t v1284 = ldiv(v1283, v245[v1280]);
                    int v1283 = v1284.quot;
                    v1281 += *(void *)(v1282 + 8 * v1280--) * v1284.rem;
                  }
                  while (v1280 != -1);
                }
                uint64_t v108 = v2028;
                if ((int)v368 >= 1)
                {
                  uint64_t v1285 = 0;
                  unsigned int v1286 = v368 + 1;
                  do
                  {
                    *(unsigned char *)(v1275 + v1285) = *(unsigned __int8 *)(v1909 + (int)v1276 + v1285) != *(unsigned __int8 *)(v1882 + (int)v1281 + v1285);
                    --v1286;
                    ++v1285;
                  }
                  while (v1286 > 1);
                }
                v1275 += (int)v368;
                v1993 += (int)v368;
              }
              while (v1993 < v1958);
            }
          }
          break;
        default:
LABEL_414:
          switch(v364)
          {
            case 1uLL:
              uint64_t v378 = v104[6];
              if (v378)
              {
                uint64_t v379 = *(unsigned __int8 **)(v105 + 152);
                unint64_t v380 = (unsigned __int8 *)v244[19];
                uint64_t v381 = (BOOL *)v104[19];
                uint64_t v382 = **(void **)(v105 + 24);
                uint64_t v383 = *(void *)v244[3];
                do
                {
                  *v381++ = *v379 != *v380;
                  v380 += v383;
                  v379 += v382;
                  --v378;
                }
                while (v378);
              }
              break;
            case 2uLL:
              uint64_t v692 = *v106;
              if (v692)
              {
                uint64_t v693 = 0;
                uint64_t v694 = 0;
                uint64_t v695 = 0;
                uint64_t v696 = 0;
                uint64_t v697 = *(void *)(v105 + 152);
                uint64_t v698 = v244[19];
                uint64_t v699 = v104[19];
                unint64_t v700 = v106[1];
                unint64_t v701 = *(uint64_t **)(v105 + 24);
                uint64_t v702 = *v701;
                uint64_t v703 = v701[1];
                uint64_t v704 = (uint64_t *)v244[3];
                uint64_t v705 = *v704;
                uint64_t v706 = v704[1];
                uint64_t v707 = v705 - v706 * v245[1];
                if (v700 <= 1) {
                  uint64_t v708 = 1;
                }
                else {
                  uint64_t v708 = v106[1];
                }
                uint64_t v709 = v702 - v703 * v700;
                do
                {
                  if (v700)
                  {
                    uint64_t v710 = v694 + v708;
                    int v711 = (BOOL *)(v699 + v694);
                    uint64_t v712 = v708;
                    do
                    {
                      *v711++ = *(unsigned __int8 *)(v697 + v696) != *(unsigned __int8 *)(v698 + v695);
                      v696 += v703;
                      v695 += v706;
                      --v712;
                    }
                    while (v712);
                    uint64_t v694 = v710;
                  }
                  v696 += v709;
                  v695 += v707;
                  ++v693;
                }
                while (v693 != v692);
              }
              break;
            case 3uLL:
              uint64_t v713 = *v106;
              if (v713)
              {
                uint64_t v714 = 0;
                uint64_t v715 = 0;
                uint64_t v716 = 0;
                uint64_t v717 = 0;
                uint64_t v718 = *(void *)(v105 + 152);
                uint64_t v719 = v244[19];
                uint64_t v720 = v104[19];
                unint64_t v721 = v106[1];
                unint64_t v722 = *(void **)(v105 + 24);
                uint64_t v723 = v722[1];
                uint64_t v724 = (void *)v244[3];
                uint64_t v725 = v724[1];
                uint64_t v726 = *v724 - v725 * v245[1];
                if (v721 <= 1) {
                  uint64_t v727 = 1;
                }
                else {
                  uint64_t v727 = v106[1];
                }
                unint64_t v728 = *v722 - v723 * v721;
                do
                {
                  if (v721)
                  {
                    uint64_t v729 = 0;
                    unint64_t v730 = v106[2];
                    uint64_t v731 = v722[2];
                    uint64_t v732 = v724[2];
                    if (v730 <= 1) {
                      uint64_t v733 = 1;
                    }
                    else {
                      uint64_t v733 = v106[2];
                    }
                    uint64_t v734 = v725 - v732 * v245[2];
                    do
                    {
                      uint64_t v735 = v733;
                      if (v730)
                      {
                        do
                        {
                          *(unsigned char *)(v720 + v715++) = *(unsigned __int8 *)(v718 + v717) != *(unsigned __int8 *)(v719 + v716);
                          v717 += v731;
                          v716 += v732;
                          --v735;
                        }
                        while (v735);
                      }
                      v717 += v723 - v731 * v730;
                      v716 += v734;
                      ++v729;
                    }
                    while (v729 != v727);
                  }
                  v717 += v728;
                  v716 += v726;
                  ++v714;
                }
                while (v714 != v713);
              }
              break;
            case 4uLL:
              uint64_t v2035 = *v106;
              if (v2035)
              {
                uint64_t v736 = 0;
                uint64_t v737 = 0;
                uint64_t v738 = 0;
                uint64_t v739 = 0;
                uint64_t v740 = *(void *)(v105 + 152);
                uint64_t v741 = v244[19];
                uint64_t v742 = v104[19];
                unint64_t v743 = v106[1];
                unint64_t v744 = *(void **)(v105 + 24);
                uint64_t v745 = (void *)v244[3];
                uint64_t v1903 = v745[1];
                uint64_t v1934 = v744[1];
                uint64_t v1983 = *v745 - v1903 * v245[1];
                int v2021 = v106[1];
                if (v743 <= 1) {
                  uint64_t v746 = 1;
                }
                else {
                  uint64_t v746 = v106[1];
                }
                unint64_t v1948 = *v744 - v744[1] * v743;
                do
                {
                  if (v2021)
                  {
                    uint64_t v747 = 0;
                    unint64_t v748 = v106[2];
                    uint64_t v749 = v744[2];
                    uint64_t v750 = v745[2];
                    if (v748 <= 1) {
                      uint64_t v751 = 1;
                    }
                    else {
                      uint64_t v751 = v106[2];
                    }
                    uint64_t v752 = v1903 - v750 * v245[2];
                    do
                    {
                      if (v748)
                      {
                        uint64_t v753 = 0;
                        unint64_t v754 = v106[3];
                        uint64_t v755 = v744[3];
                        uint64_t v756 = v745[3];
                        if (v754 <= 1) {
                          uint64_t v757 = 1;
                        }
                        else {
                          uint64_t v757 = v106[3];
                        }
                        uint64_t v758 = v750 - v756 * v245[3];
                        do
                        {
                          uint64_t v759 = v757;
                          if (v754)
                          {
                            do
                            {
                              *(unsigned char *)(v742 + v737++) = *(unsigned __int8 *)(v740 + v739) != *(unsigned __int8 *)(v741 + v738);
                              v739 += v755;
                              v738 += v756;
                              --v759;
                            }
                            while (v759);
                          }
                          v739 += v749 - v755 * v754;
                          v738 += v758;
                          ++v753;
                        }
                        while (v753 != v751);
                      }
                      v739 += v1934 - v749 * v748;
                      v738 += v752;
                      ++v747;
                    }
                    while (v747 != v746);
                  }
                  v739 += v1948;
                  v738 += v1983;
                  ++v736;
                }
                while (v736 != v2035);
              }
              break;
            default:
              uint64_t v681 = v104[6];
              if (v681)
              {
                uint64_t v682 = 0;
                uint64_t v1947 = v244[19];
                uint64_t v1982 = *(void *)(v105 + 152);
                uint64_t v1933 = v104[19];
                do
                {
                  uint64_t v683 = 0;
                  if ((v108 & 0x80000000) == 0)
                  {
                    uint64_t v684 = *(void *)(v105 + 24);
                    int v685 = v682;
                    do
                    {
                      ldiv_t v686 = ldiv(v685, v106[v108]);
                      int v685 = v686.quot;
                      v683 += *(void *)(v684 + 8 * v108--) * v686.rem;
                    }
                    while (v108 != -1);
                  }
                  uint64_t v687 = v2014;
                  if ((v2014 & 0x80000000) != 0)
                  {
                    LODWORD(v688) = 0;
                  }
                  else
                  {
                    uint64_t v688 = 0;
                    uint64_t v689 = v244[3];
                    int v690 = v682;
                    do
                    {
                      ldiv_t v691 = ldiv(v690, v245[v687]);
                      int v690 = v691.quot;
                      v688 += *(void *)(v689 + 8 * v687--) * v691.rem;
                    }
                    while (v687 != -1);
                  }
                  *(unsigned char *)(v1933 + v682++) = *(unsigned __int8 *)(v1982 + (int)v683) != *(unsigned __int8 *)(v1947 + (int)v688);
                  uint64_t v108 = v2028;
                }
                while (v682 != v681);
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v25)
      {
        case 0:
LABEL_17:
          int v23 = **(_DWORD **)(*a1 + 152);
          int v24 = **(_DWORD **)(*a2 + 152);
LABEL_18:
          BOOL v26 = v23 == v24;
          goto LABEL_19;
        case 1:
          int v142 = *(_DWORD *)(*a2 + 160);
          if (v142 >= 1)
          {
            int v143 = **(_DWORD **)(*a1 + 152);
            int v144 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v145 = *(int **)(*a2 + 152);
            unsigned int v146 = v142 + 1;
            do
            {
              int v147 = *v145++;
              *v144++ = v143 != v147;
              --v146;
            }
            while (v146 > 1);
          }
          return;
        case 2:
          int v148 = *(_DWORD *)(*a1 + 160);
          if (v148 >= 1)
          {
            int v149 = **(_DWORD **)(*a2 + 152);
            unsigned int v150 = *(BOOL **)(*(void *)a3 + 152);
            int v151 = *(int **)(*a1 + 152);
            unsigned int v152 = v148 + 1;
            do
            {
              int v153 = *v151++;
              *v150++ = v153 != v149;
              --v152;
            }
            while (v152 > 1);
          }
          return;
        case 3:
          int v154 = *(_DWORD *)(*(void *)a3 + 48);
          if (v154 >= 1)
          {
            int v155 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v156 = *(int **)(*a2 + 152);
            int v157 = *(int **)(*a1 + 152);
            unsigned int v158 = v154 + 1;
            do
            {
              int v160 = *v157++;
              int v159 = v160;
              int v161 = *v156++;
              *v155++ = v159 != v161;
              --v158;
            }
            while (v158 > 1);
          }
          return;
        default:
          unsigned int v133 = *(void **)a3;
          uint64_t v134 = *a1;
          char v135 = *(int **)*a1;
          uint64_t v136 = (*(void *)(*a1 + 8) - (void)v135) >> 2;
          uint64_t v137 = (v136 - 1);
          if ((int)v137 >= -1) {
            int v138 = -1;
          }
          else {
            int v138 = v136 - 1;
          }
          int v139 = v138 + 1;
          int v140 = v136 + 1;
          break;
      }
      while (1)
      {
        unsigned int v141 = v140 - 2;
        if (v140 - 2 < 0) {
          break;
        }
        --v140;
        if (*(void *)(*(void *)(v134 + 24) + 8 * v141) != *(void *)(v133[3] + 8 * v141)) {
          goto LABEL_186;
        }
      }
      int v140 = v139;
LABEL_186:
      int v252 = (void *)*a2;
      unsigned int v253 = *(int **)*a2;
      uint64_t v254 = (v252[1] - (void)v253) >> 2;
      uint64_t v255 = (v254 - 1);
      if ((int)v255 >= -1) {
        int v256 = -1;
      }
      else {
        int v256 = v254 - 1;
      }
      int v257 = v256 + 1;
      int v258 = v254 + 1;
      while (1)
      {
        unsigned int v259 = v258 - 2;
        if (v258 - 2 < 0) {
          break;
        }
        --v258;
        if (*(void *)(v252[3] + 8 * v259) != *(void *)(v133[3] + 8 * v259)) {
          goto LABEL_230;
        }
      }
      int v258 = v257;
LABEL_230:
      int v284 = v136 + 1;
      while (1)
      {
        unsigned int v285 = v284 - 2;
        if (v284 - 2 < 0) {
          break;
        }
        --v284;
        if (*(void *)(*(void *)(v134 + 24) + 8 * v285)) {
          goto LABEL_265;
        }
      }
      int v284 = v139;
LABEL_265:
      int v298 = v254 + 1;
      while (1)
      {
        unsigned int v299 = v298 - 2;
        if (v298 - 2 < 0) {
          break;
        }
        --v298;
        if (*(void *)(v252[3] + 8 * v299)) {
          goto LABEL_420;
        }
      }
      int v298 = v257;
LABEL_420:
      unint64_t v384 = (uint64_t)(v133[1] - *v133) >> 2;
      if (v140 <= v258) {
        int v385 = v258;
      }
      else {
        int v385 = v140;
      }
      if (v140 <= v298) {
        int v140 = v298;
      }
      if (v284 > v258) {
        int v258 = v284;
      }
      if (v384 > v258)
      {
        int v386 = 1;
      }
      else
      {
        int v258 = (uint64_t)(v133[1] - *v133) >> 2;
        int v386 = 4;
      }
      if (v384 > v140)
      {
        int v387 = 2;
      }
      else
      {
        int v140 = v258;
        int v387 = v386;
      }
      if (v384 > v385)
      {
        int v140 = v385;
        int v387 = 3;
      }
      uint64_t v2015 = v255;
      uint64_t v2029 = v137;
      if (!v140) {
        goto LABEL_449;
      }
      unint64_t v388 = *(void *)(v133[3] + 8 * (v140 - 1));
      if (v388 < 0x10) {
        goto LABEL_449;
      }
      switch(v387)
      {
        case 1:
          if (v140 == 2)
          {
            uint64_t v1669 = *v135;
            if (v1669)
            {
              uint64_t v1670 = 0;
              uint64_t v1671 = 0;
              uint64_t v1672 = 0;
              uint64_t v1673 = *(void *)(v134 + 152);
              uint64_t v1674 = v252[19];
              uint64_t v1675 = v133[19];
              unint64_t v1676 = v135[1];
              unsigned int v1677 = *(uint64_t **)(v134 + 24);
              uint64_t v1678 = *v1677;
              uint64_t v1679 = v1677[1];
              uint64_t v1680 = (uint64_t *)v252[3];
              uint64_t v1682 = *v1680;
              uint64_t v1681 = v1680[1];
              if (v1676 <= 1) {
                uint64_t v1683 = 1;
              }
              else {
                uint64_t v1683 = v135[1];
              }
              uint64_t v1684 = v1678 - v1679 * v1676;
              uint64_t v1685 = v1682 - v1681 * v253[1];
              do
              {
                if (v1676)
                {
                  uint64_t v1686 = 0;
                  uint64_t v1687 = v1674 + 4 * v1671;
                  do
                  {
                    if ((int)v388 >= 1)
                    {
                      uint64_t v1688 = 0;
                      int v1689 = *(_DWORD *)(v1673 + 4 * v1672);
                      unsigned int v1690 = v388 + 1;
                      do
                      {
                        *(unsigned char *)(v1675 + v1688) = v1689 != *(_DWORD *)(v1687 + 4 * v1688);
                        --v1690;
                        ++v1688;
                      }
                      while (v1690 > 1);
                    }
                    v1672 += v1679;
                    v1671 += v1681;
                    v1675 += (int)v388;
                    ++v1686;
                    v1687 += 4 * v1681;
                  }
                  while (v1686 != v1683);
                }
                v1672 += v1684;
                v1671 += v1685;
                ++v1670;
              }
              while (v1670 != v1669);
            }
          }
          else if (v140 == 1)
          {
            uint64_t v1085 = *v135;
            if (v1085)
            {
              uint64_t v1086 = 0;
              uint64_t v1087 = 0;
              uint64_t v1088 = *(void *)(v134 + 152);
              uint64_t v1089 = v252[19];
              uint64_t v1090 = v133[19];
              uint64_t v1091 = **(void **)(v134 + 24);
              uint64_t v1092 = 4 * *(void *)v252[3];
              do
              {
                if ((int)v388 >= 1)
                {
                  uint64_t v1093 = 0;
                  int v1094 = *(_DWORD *)(v1088 + 4 * v1087);
                  unsigned int v1095 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v1090 + v1093) = v1094 != *(_DWORD *)(v1089 + 4 * v1093);
                    --v1095;
                    ++v1093;
                  }
                  while (v1095 > 1);
                }
                v1087 += v1091;
                v1090 += (int)v388;
                ++v1086;
                v1089 += v1092;
              }
              while (v1086 != v1085);
            }
          }
          else
          {
            unint64_t v1970 = v133[6];
            if (v1970)
            {
              unint64_t v2005 = 0;
              uint64_t v1894 = v252[19];
              uint64_t v1921 = *(void *)(v134 + 152);
              uint64_t v1691 = v133[19];
              do
              {
                uint64_t v1692 = 0;
                if ((v137 & 0x80000000) == 0)
                {
                  uint64_t v1693 = *(void *)(v134 + 24);
                  int v1694 = v2005;
                  do
                  {
                    ldiv_t v1695 = ldiv(v1694, v135[v137]);
                    int v1694 = v1695.quot;
                    v1692 += *(void *)(v1693 + 8 * v137--) * v1695.rem;
                  }
                  while (v137 != -1);
                }
                uint64_t v1696 = v2015;
                if ((v2015 & 0x80000000) != 0)
                {
                  LODWORD(v1697) = 0;
                }
                else
                {
                  uint64_t v1697 = 0;
                  uint64_t v1698 = v252[3];
                  int v1699 = v2005;
                  do
                  {
                    ldiv_t v1700 = ldiv(v1699, v253[v1696]);
                    int v1699 = v1700.quot;
                    v1697 += *(void *)(v1698 + 8 * v1696--) * v1700.rem;
                  }
                  while (v1696 != -1);
                }
                uint64_t v137 = v2029;
                if ((int)v388 >= 1)
                {
                  uint64_t v1701 = 0;
                  int v1702 = *(_DWORD *)(v1921 + 4 * (int)v1692);
                  unsigned int v1703 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v1691 + v1701) = v1702 != *(_DWORD *)(v1894 + 4 * (int)v1697 + 4 * v1701);
                    --v1703;
                    ++v1701;
                  }
                  while (v1703 > 1);
                }
                v1691 += (int)v388;
                v2005 += (int)v388;
              }
              while (v2005 < v1970);
            }
          }
          break;
        case 2:
          if (v140 == 2)
          {
            uint64_t v1704 = *v135;
            if (v1704)
            {
              uint64_t v1705 = 0;
              uint64_t v1706 = 0;
              uint64_t v1707 = 0;
              uint64_t v1708 = *(void *)(v134 + 152);
              uint64_t v1709 = v252[19];
              uint64_t v1710 = v133[19];
              unint64_t v1711 = v135[1];
              unsigned int v1712 = *(uint64_t **)(v134 + 24);
              uint64_t v1713 = *v1712;
              uint64_t v1714 = v1712[1];
              uint64_t v1715 = (uint64_t *)v252[3];
              uint64_t v1717 = *v1715;
              uint64_t v1716 = v1715[1];
              if (v1711 <= 1) {
                uint64_t v1718 = 1;
              }
              else {
                uint64_t v1718 = v135[1];
              }
              uint64_t v1719 = v1713 - v1714 * v1711;
              uint64_t v1720 = v1717 - v1716 * v253[1];
              do
              {
                if (v1711)
                {
                  uint64_t v1721 = 0;
                  uint64_t v1722 = v1708 + 4 * v1707;
                  do
                  {
                    if ((int)v388 >= 1)
                    {
                      uint64_t v1723 = 0;
                      int v1724 = *(_DWORD *)(v1709 + 4 * v1706);
                      unsigned int v1725 = v388 + 1;
                      do
                      {
                        *(unsigned char *)(v1710 + v1723) = *(_DWORD *)(v1722 + 4 * v1723) != v1724;
                        --v1725;
                        ++v1723;
                      }
                      while (v1725 > 1);
                    }
                    v1707 += v1714;
                    v1706 += v1716;
                    v1710 += (int)v388;
                    ++v1721;
                    v1722 += 4 * v1714;
                  }
                  while (v1721 != v1718);
                }
                v1707 += v1719;
                v1706 += v1720;
                ++v1705;
              }
              while (v1705 != v1704);
            }
          }
          else if (v140 == 1)
          {
            uint64_t v1096 = *v135;
            if (v1096)
            {
              uint64_t v1097 = 0;
              uint64_t v1098 = 0;
              uint64_t v1099 = *(void *)(v134 + 152);
              uint64_t v1100 = v252[19];
              uint64_t v1101 = v133[19];
              uint64_t v1102 = *(void *)v252[3];
              uint64_t v1103 = 4 * **(void **)(v134 + 24);
              do
              {
                if ((int)v388 >= 1)
                {
                  uint64_t v1104 = 0;
                  int v1105 = *(_DWORD *)(v1100 + 4 * v1098);
                  unsigned int v1106 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v1101 + v1104) = *(_DWORD *)(v1099 + 4 * v1104) != v1105;
                    --v1106;
                    ++v1104;
                  }
                  while (v1106 > 1);
                }
                v1098 += v1102;
                v1101 += (int)v388;
                ++v1097;
                v1099 += v1103;
              }
              while (v1097 != v1096);
            }
          }
          else
          {
            unint64_t v1971 = v133[6];
            if (v1971)
            {
              unint64_t v2006 = 0;
              uint64_t v1895 = v252[19];
              uint64_t v1922 = *(void *)(v134 + 152);
              uint64_t v1726 = v133[19];
              do
              {
                uint64_t v1727 = 0;
                if ((v137 & 0x80000000) == 0)
                {
                  uint64_t v1728 = *(void *)(v134 + 24);
                  int v1729 = v2006;
                  do
                  {
                    ldiv_t v1730 = ldiv(v1729, v135[v137]);
                    int v1729 = v1730.quot;
                    v1727 += *(void *)(v1728 + 8 * v137--) * v1730.rem;
                  }
                  while (v137 != -1);
                }
                uint64_t v1731 = v2015;
                if ((v2015 & 0x80000000) != 0)
                {
                  LODWORD(v1732) = 0;
                }
                else
                {
                  uint64_t v1732 = 0;
                  uint64_t v1733 = v252[3];
                  int v1734 = v2006;
                  do
                  {
                    ldiv_t v1735 = ldiv(v1734, v253[v1731]);
                    int v1734 = v1735.quot;
                    v1732 += *(void *)(v1733 + 8 * v1731--) * v1735.rem;
                  }
                  while (v1731 != -1);
                }
                uint64_t v137 = v2029;
                if ((int)v388 >= 1)
                {
                  uint64_t v1736 = 0;
                  int v1737 = *(_DWORD *)(v1895 + 4 * (int)v1732);
                  unsigned int v1738 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v1726 + v1736) = *(_DWORD *)(v1922 + 4 * (int)v1727 + 4 * v1736) != v1737;
                    --v1738;
                    ++v1736;
                  }
                  while (v1738 > 1);
                }
                v1726 += (int)v388;
                v2006 += (int)v388;
              }
              while (v2006 < v1971);
            }
          }
          break;
        case 3:
          if (v140 == 2)
          {
            uint64_t v1287 = *v135;
            if (v1287)
            {
              uint64_t v1288 = 0;
              uint64_t v1289 = 0;
              uint64_t v1290 = 0;
              uint64_t v1291 = *(void *)(v134 + 152);
              uint64_t v1292 = v252[19];
              uint64_t v1293 = v133[19];
              unint64_t v1294 = v135[1];
              uint64_t v1295 = *(uint64_t **)(v134 + 24);
              uint64_t v1296 = *v1295;
              uint64_t v1297 = v1295[1];
              uint64_t v1298 = (uint64_t *)v252[3];
              uint64_t v1300 = *v1298;
              uint64_t v1299 = v1298[1];
              if (v1294 <= 1) {
                uint64_t v1301 = 1;
              }
              else {
                uint64_t v1301 = v135[1];
              }
              uint64_t v1302 = v1296 - v1297 * v1294;
              uint64_t v1303 = v1300 - v1299 * v253[1];
              do
              {
                if (v1294)
                {
                  uint64_t v1304 = 0;
                  uint64_t v1305 = v1292 + 4 * v1289;
                  uint64_t v1306 = v1291 + 4 * v1290;
                  do
                  {
                    if ((int)v388 >= 1)
                    {
                      uint64_t v1307 = 0;
                      unsigned int v1308 = v388 + 1;
                      do
                      {
                        *(unsigned char *)(v1293 + v1307) = *(_DWORD *)(v1306 + 4 * v1307) != *(_DWORD *)(v1305 + 4 * v1307);
                        --v1308;
                        ++v1307;
                      }
                      while (v1308 > 1);
                    }
                    v1290 += v1297;
                    v1289 += v1299;
                    v1293 += (int)v388;
                    ++v1304;
                    v1305 += 4 * v1299;
                    v1306 += 4 * v1297;
                  }
                  while (v1304 != v1301);
                }
                v1290 += v1302;
                v1289 += v1303;
                ++v1288;
              }
              while (v1288 != v1287);
            }
          }
          else if (v140 == 1)
          {
            uint64_t v389 = *v135;
            if (v389)
            {
              uint64_t v390 = 0;
              uint64_t v391 = *(void *)(v134 + 152);
              uint64_t v392 = v252[19];
              uint64_t v393 = v133[19];
              uint64_t v394 = 4 * *(void *)v252[3];
              uint64_t v395 = 4 * **(void **)(v134 + 24);
              do
              {
                if ((int)v388 >= 1)
                {
                  uint64_t v396 = 0;
                  unsigned int v397 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v393 + v396) = *(_DWORD *)(v391 + 4 * v396) != *(_DWORD *)(v392 + 4 * v396);
                    --v397;
                    ++v396;
                  }
                  while (v397 > 1);
                }
                v393 += (int)v388;
                ++v390;
                v392 += v394;
                v391 += v395;
              }
              while (v390 != v389);
            }
          }
          else
          {
            unint64_t v1959 = v133[6];
            if (v1959)
            {
              unint64_t v1994 = 0;
              uint64_t v1883 = v252[19];
              uint64_t v1910 = *(void *)(v134 + 152);
              uint64_t v1309 = v133[19];
              do
              {
                uint64_t v1310 = 0;
                if ((v137 & 0x80000000) == 0)
                {
                  uint64_t v1311 = *(void *)(v134 + 24);
                  int v1312 = v1994;
                  do
                  {
                    ldiv_t v1313 = ldiv(v1312, v135[v137]);
                    int v1312 = v1313.quot;
                    v1310 += *(void *)(v1311 + 8 * v137--) * v1313.rem;
                  }
                  while (v137 != -1);
                }
                uint64_t v1314 = v2015;
                if ((v2015 & 0x80000000) != 0)
                {
                  LODWORD(v1315) = 0;
                }
                else
                {
                  uint64_t v1315 = 0;
                  uint64_t v1316 = v252[3];
                  int v1317 = v1994;
                  do
                  {
                    ldiv_t v1318 = ldiv(v1317, v253[v1314]);
                    int v1317 = v1318.quot;
                    v1315 += *(void *)(v1316 + 8 * v1314--) * v1318.rem;
                  }
                  while (v1314 != -1);
                }
                uint64_t v137 = v2029;
                if ((int)v388 >= 1)
                {
                  uint64_t v1319 = 0;
                  unsigned int v1320 = v388 + 1;
                  do
                  {
                    *(unsigned char *)(v1309 + v1319) = *(_DWORD *)(v1910 + 4 * (int)v1310 + 4 * v1319) != *(_DWORD *)(v1883 + 4 * (int)v1315 + 4 * v1319);
                    --v1320;
                    ++v1319;
                  }
                  while (v1320 > 1);
                }
                v1309 += (int)v388;
                v1994 += (int)v388;
              }
              while (v1994 < v1959);
            }
          }
          break;
        default:
LABEL_449:
          switch(v384)
          {
            case 1uLL:
              uint64_t v398 = v133[6];
              if (v398)
              {
                uint64_t v399 = *(_DWORD **)(v134 + 152);
                uint64_t v400 = (_DWORD *)v252[19];
                uint64_t v401 = (BOOL *)v133[19];
                uint64_t v402 = 4 * *(void *)v252[3];
                uint64_t v403 = 4 * **(void **)(v134 + 24);
                do
                {
                  *v401++ = *v399 != *v400;
                  uint64_t v400 = (_DWORD *)((char *)v400 + v402);
                  uint64_t v399 = (_DWORD *)((char *)v399 + v403);
                  --v398;
                }
                while (v398);
              }
              break;
            case 2uLL:
              uint64_t v771 = *v135;
              if (v771)
              {
                uint64_t v772 = 0;
                uint64_t v773 = 0;
                uint64_t v774 = 0;
                uint64_t v775 = 0;
                uint64_t v776 = *(void *)(v134 + 152);
                uint64_t v777 = v252[19];
                uint64_t v778 = v133[19];
                unint64_t v779 = v135[1];
                unint64_t v780 = *(uint64_t **)(v134 + 24);
                uint64_t v781 = *v780;
                uint64_t v782 = v780[1];
                uint64_t v783 = (uint64_t *)v252[3];
                uint64_t v784 = *v783;
                uint64_t v785 = v783[1];
                uint64_t v786 = v784 - v785 * v253[1];
                if (v779 <= 1) {
                  uint64_t v787 = 1;
                }
                else {
                  uint64_t v787 = v135[1];
                }
                uint64_t v788 = v781 - v782 * v779;
                do
                {
                  if (v779)
                  {
                    uint64_t v789 = v773 + v787;
                    unint64_t v790 = (BOOL *)(v778 + v773);
                    uint64_t v791 = v787;
                    do
                    {
                      *v790++ = *(_DWORD *)(v776 + 4 * v775) != *(_DWORD *)(v777 + 4 * v774);
                      v775 += v782;
                      v774 += v785;
                      --v791;
                    }
                    while (v791);
                    uint64_t v773 = v789;
                  }
                  v775 += v788;
                  v774 += v786;
                  ++v772;
                }
                while (v772 != v771);
              }
              break;
            case 3uLL:
              uint64_t v792 = *v135;
              if (v792)
              {
                uint64_t v793 = 0;
                uint64_t v794 = 0;
                uint64_t v795 = 0;
                uint64_t v796 = 0;
                uint64_t v797 = *(void *)(v134 + 152);
                uint64_t v798 = v252[19];
                uint64_t v799 = v133[19];
                unint64_t v800 = v135[1];
                uint64_t v801 = *(void **)(v134 + 24);
                uint64_t v802 = v801[1];
                unint64_t v803 = (void *)v252[3];
                uint64_t v804 = v803[1];
                uint64_t v805 = *v803 - v804 * v253[1];
                if (v800 <= 1) {
                  uint64_t v806 = 1;
                }
                else {
                  uint64_t v806 = v135[1];
                }
                unint64_t v807 = *v801 - v802 * v800;
                do
                {
                  if (v800)
                  {
                    uint64_t v808 = 0;
                    unint64_t v809 = v135[2];
                    uint64_t v810 = v801[2];
                    uint64_t v811 = v803[2];
                    if (v809 <= 1) {
                      uint64_t v812 = 1;
                    }
                    else {
                      uint64_t v812 = v135[2];
                    }
                    uint64_t v813 = v804 - v811 * v253[2];
                    do
                    {
                      uint64_t v814 = v812;
                      if (v809)
                      {
                        do
                        {
                          *(unsigned char *)(v799 + v794++) = *(_DWORD *)(v797 + 4 * v796) != *(_DWORD *)(v798 + 4 * v795);
                          v796 += v810;
                          v795 += v811;
                          --v814;
                        }
                        while (v814);
                      }
                      v796 += v802 - v810 * v809;
                      v795 += v813;
                      ++v808;
                    }
                    while (v808 != v806);
                  }
                  v796 += v807;
                  v795 += v805;
                  ++v793;
                }
                while (v793 != v792);
              }
              break;
            case 4uLL:
              uint64_t v2036 = *v135;
              if (v2036)
              {
                uint64_t v815 = 0;
                uint64_t v816 = 0;
                uint64_t v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = *(void *)(v134 + 152);
                uint64_t v820 = v252[19];
                uint64_t v821 = v133[19];
                unint64_t v822 = v135[1];
                unint64_t v823 = *(void **)(v134 + 24);
                uint64_t v824 = (void *)v252[3];
                uint64_t v1904 = v824[1];
                uint64_t v1936 = v823[1];
                uint64_t v1985 = *v824 - v1904 * v253[1];
                int v2022 = v135[1];
                if (v822 <= 1) {
                  uint64_t v825 = 1;
                }
                else {
                  uint64_t v825 = v135[1];
                }
                unint64_t v1950 = *v823 - v823[1] * v822;
                do
                {
                  if (v2022)
                  {
                    uint64_t v826 = 0;
                    unint64_t v827 = v135[2];
                    uint64_t v828 = v823[2];
                    uint64_t v829 = v824[2];
                    if (v827 <= 1) {
                      uint64_t v830 = 1;
                    }
                    else {
                      uint64_t v830 = v135[2];
                    }
                    uint64_t v831 = v1904 - v829 * v253[2];
                    do
                    {
                      if (v827)
                      {
                        uint64_t v832 = 0;
                        unint64_t v833 = v135[3];
                        uint64_t v834 = v823[3];
                        uint64_t v835 = v824[3];
                        if (v833 <= 1) {
                          uint64_t v836 = 1;
                        }
                        else {
                          uint64_t v836 = v135[3];
                        }
                        uint64_t v837 = v829 - v835 * v253[3];
                        do
                        {
                          uint64_t v838 = v836;
                          if (v833)
                          {
                            do
                            {
                              *(unsigned char *)(v821 + v816++) = *(_DWORD *)(v819 + 4 * v818) != *(_DWORD *)(v820 + 4 * v817);
                              v818 += v834;
                              v817 += v835;
                              --v838;
                            }
                            while (v838);
                          }
                          v818 += v828 - v834 * v833;
                          v817 += v837;
                          ++v832;
                        }
                        while (v832 != v830);
                      }
                      v818 += v1936 - v828 * v827;
                      v817 += v831;
                      ++v826;
                    }
                    while (v826 != v825);
                  }
                  v818 += v1950;
                  v817 += v1985;
                  ++v815;
                }
                while (v815 != v2036);
              }
              break;
            default:
              uint64_t v760 = v133[6];
              if (v760)
              {
                uint64_t v761 = 0;
                uint64_t v1949 = v252[19];
                uint64_t v1984 = *(void *)(v134 + 152);
                uint64_t v1935 = v133[19];
                do
                {
                  uint64_t v762 = 0;
                  if ((v137 & 0x80000000) == 0)
                  {
                    uint64_t v763 = *(void *)(v134 + 24);
                    int v764 = v761;
                    do
                    {
                      ldiv_t v765 = ldiv(v764, v135[v137]);
                      int v764 = v765.quot;
                      v762 += *(void *)(v763 + 8 * v137--) * v765.rem;
                    }
                    while (v137 != -1);
                  }
                  uint64_t v766 = v2015;
                  if ((v2015 & 0x80000000) != 0)
                  {
                    LODWORD(v767) = 0;
                  }
                  else
                  {
                    uint64_t v767 = 0;
                    uint64_t v768 = v252[3];
                    int v769 = v761;
                    do
                    {
                      ldiv_t v770 = ldiv(v769, v253[v766]);
                      int v769 = v770.quot;
                      v767 += *(void *)(v768 + 8 * v766--) * v770.rem;
                    }
                    while (v766 != -1);
                  }
                  *(unsigned char *)(v1935 + v761++) = *(_DWORD *)(v1984 + 4 * (int)v762) != *(_DWORD *)(v1949
                                                                                                 + 4 * (int)v767);
                  uint64_t v137 = v2029;
                }
                while (v761 != v760);
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v27)
      {
        case 0:
          BOOL v26 = **(void **)(*a1 + 152) == **(void **)(*a2 + 152);
          goto LABEL_19;
        case 1:
          int v171 = *(_DWORD *)(*a2 + 160);
          if (v171 >= 1)
          {
            uint64_t v172 = **(void **)(*a1 + 152);
            int v173 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v174 = *(uint64_t **)(*a2 + 152);
            unsigned int v175 = v171 + 1;
            do
            {
              uint64_t v176 = *v174++;
              *v173++ = v172 != v176;
              --v175;
            }
            while (v175 > 1);
          }
          return;
        case 2:
          int v177 = *(_DWORD *)(*a1 + 160);
          if (v177 >= 1)
          {
            uint64_t v178 = **(void **)(*a2 + 152);
            unsigned int v179 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v180 = *(uint64_t **)(*a1 + 152);
            unsigned int v181 = v177 + 1;
            do
            {
              uint64_t v182 = *v180++;
              *v179++ = v182 != v178;
              --v181;
            }
            while (v181 > 1);
          }
          return;
        case 3:
          int v183 = *(_DWORD *)(*(void *)a3 + 48);
          if (v183 >= 1)
          {
            int v184 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v185 = *(uint64_t **)(*a2 + 152);
            uint64_t v186 = *(uint64_t **)(*a1 + 152);
            unsigned int v187 = v183 + 1;
            do
            {
              uint64_t v189 = *v186++;
              uint64_t v188 = v189;
              uint64_t v190 = *v185++;
              *v184++ = v188 != v190;
              --v187;
            }
            while (v187 > 1);
          }
          return;
        default:
          unsigned int v162 = *(void **)a3;
          uint64_t v163 = *a1;
          int v164 = *(int **)*a1;
          uint64_t v165 = (*(void *)(*a1 + 8) - (void)v164) >> 2;
          uint64_t v166 = (v165 - 1);
          if ((int)v166 >= -1) {
            int v167 = -1;
          }
          else {
            int v167 = v165 - 1;
          }
          int v168 = v167 + 1;
          int v169 = v165 + 1;
          break;
      }
      while (1)
      {
        unsigned int v170 = v169 - 2;
        if (v169 - 2 < 0) {
          break;
        }
        --v169;
        if (*(void *)(*(void *)(v163 + 24) + 8 * v170) != *(void *)(v162[3] + 8 * v170)) {
          goto LABEL_194;
        }
      }
      int v169 = v168;
LABEL_194:
      int v260 = (void *)*a2;
      unsigned int v261 = *(int **)*a2;
      uint64_t v262 = (v260[1] - (void)v261) >> 2;
      uint64_t v263 = (v262 - 1);
      if ((int)v263 >= -1) {
        int v264 = -1;
      }
      else {
        int v264 = v262 - 1;
      }
      int v265 = v264 + 1;
      int v266 = v262 + 1;
      while (1)
      {
        unsigned int v267 = v266 - 2;
        if (v266 - 2 < 0) {
          break;
        }
        --v266;
        if (*(void *)(v260[3] + 8 * v267) != *(void *)(v162[3] + 8 * v267)) {
          goto LABEL_235;
        }
      }
      int v266 = v265;
LABEL_235:
      int v286 = v165 + 1;
      while (1)
      {
        unsigned int v287 = v286 - 2;
        if (v286 - 2 < 0) {
          break;
        }
        --v286;
        if (*(void *)(*(void *)(v163 + 24) + 8 * v287)) {
          goto LABEL_270;
        }
      }
      int v286 = v168;
LABEL_270:
      int v300 = v262 + 1;
      while (1)
      {
        unsigned int v301 = v300 - 2;
        if (v300 - 2 < 0) {
          break;
        }
        --v300;
        if (*(void *)(v260[3] + 8 * v301)) {
          goto LABEL_455;
        }
      }
      int v300 = v265;
LABEL_455:
      unint64_t v404 = (uint64_t)(v162[1] - *v162) >> 2;
      if (v169 <= v266) {
        int v405 = v266;
      }
      else {
        int v405 = v169;
      }
      if (v169 <= v300) {
        int v169 = v300;
      }
      if (v286 > v266) {
        int v266 = v286;
      }
      if (v404 > v266)
      {
        int v406 = 1;
      }
      else
      {
        int v266 = (uint64_t)(v162[1] - *v162) >> 2;
        int v406 = 4;
      }
      if (v404 > v169)
      {
        int v407 = 2;
      }
      else
      {
        int v169 = v266;
        int v407 = v406;
      }
      if (v404 > v405)
      {
        int v169 = v405;
        int v407 = 3;
      }
      uint64_t v2016 = v263;
      uint64_t v2030 = v166;
      if (!v169) {
        goto LABEL_484;
      }
      unint64_t v408 = *(void *)(v162[3] + 8 * (v169 - 1));
      if (v408 < 0x10) {
        goto LABEL_484;
      }
      switch(v407)
      {
        case 1:
          if (v169 == 2)
          {
            uint64_t v1739 = *v164;
            if (v1739)
            {
              uint64_t v1740 = 0;
              uint64_t v1741 = 0;
              uint64_t v1742 = 0;
              uint64_t v1743 = *(void *)(v163 + 152);
              uint64_t v1744 = v260[19];
              uint64_t v1745 = v162[19];
              unint64_t v1746 = v164[1];
              uint64_t v1747 = *(uint64_t **)(v163 + 24);
              uint64_t v1748 = *v1747;
              uint64_t v1749 = v1747[1];
              uint64_t v1750 = (uint64_t *)v260[3];
              uint64_t v1752 = *v1750;
              uint64_t v1751 = v1750[1];
              if (v1746 <= 1) {
                uint64_t v1753 = 1;
              }
              else {
                uint64_t v1753 = v164[1];
              }
              uint64_t v1754 = v1748 - v1749 * v1746;
              uint64_t v1755 = v1752 - v1751 * v261[1];
              do
              {
                if (v1746)
                {
                  uint64_t v1756 = 0;
                  uint64_t v1757 = v1744 + 8 * v1741;
                  do
                  {
                    if ((int)v408 >= 1)
                    {
                      uint64_t v1758 = 0;
                      uint64_t v1759 = *(void *)(v1743 + 8 * v1742);
                      unsigned int v1760 = v408 + 1;
                      do
                      {
                        *(unsigned char *)(v1745 + v1758) = v1759 != *(void *)(v1757 + 8 * v1758);
                        --v1760;
                        ++v1758;
                      }
                      while (v1760 > 1);
                    }
                    v1742 += v1749;
                    v1741 += v1751;
                    v1745 += (int)v408;
                    ++v1756;
                    v1757 += 8 * v1751;
                  }
                  while (v1756 != v1753);
                }
                v1742 += v1754;
                v1741 += v1755;
                ++v1740;
              }
              while (v1740 != v1739);
            }
          }
          else if (v169 == 1)
          {
            uint64_t v1107 = *v164;
            if (v1107)
            {
              uint64_t v1108 = 0;
              uint64_t v1109 = 0;
              uint64_t v1110 = *(void *)(v163 + 152);
              uint64_t v1111 = v260[19];
              uint64_t v1112 = v162[19];
              uint64_t v1113 = **(void **)(v163 + 24);
              uint64_t v1114 = 8 * *(void *)v260[3];
              do
              {
                if ((int)v408 >= 1)
                {
                  uint64_t v1115 = 0;
                  uint64_t v1116 = *(void *)(v1110 + 8 * v1109);
                  unsigned int v1117 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v1112 + v1115) = v1116 != *(void *)(v1111 + 8 * v1115);
                    --v1117;
                    ++v1115;
                  }
                  while (v1117 > 1);
                }
                v1109 += v1113;
                v1112 += (int)v408;
                ++v1108;
                v1111 += v1114;
              }
              while (v1108 != v1107);
            }
          }
          else
          {
            unint64_t v1972 = v162[6];
            if (v1972)
            {
              unint64_t v2007 = 0;
              uint64_t v1896 = v260[19];
              uint64_t v1923 = *(void *)(v163 + 152);
              uint64_t v1761 = v162[19];
              do
              {
                uint64_t v1762 = 0;
                if ((v166 & 0x80000000) == 0)
                {
                  uint64_t v1763 = *(void *)(v163 + 24);
                  int v1764 = v2007;
                  do
                  {
                    ldiv_t v1765 = ldiv(v1764, v164[v166]);
                    int v1764 = v1765.quot;
                    v1762 += *(void *)(v1763 + 8 * v166--) * v1765.rem;
                  }
                  while (v166 != -1);
                }
                uint64_t v1766 = v2016;
                if ((v2016 & 0x80000000) != 0)
                {
                  LODWORD(v1767) = 0;
                }
                else
                {
                  uint64_t v1767 = 0;
                  uint64_t v1768 = v260[3];
                  int v1769 = v2007;
                  do
                  {
                    ldiv_t v1770 = ldiv(v1769, v261[v1766]);
                    int v1769 = v1770.quot;
                    v1767 += *(void *)(v1768 + 8 * v1766--) * v1770.rem;
                  }
                  while (v1766 != -1);
                }
                uint64_t v166 = v2030;
                if ((int)v408 >= 1)
                {
                  uint64_t v1771 = 0;
                  uint64_t v1772 = *(void *)(v1923 + 8 * (int)v1762);
                  unsigned int v1773 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v1761 + v1771) = v1772 != *(void *)(v1896 + 8 * (int)v1767 + 8 * v1771);
                    --v1773;
                    ++v1771;
                  }
                  while (v1773 > 1);
                }
                v1761 += (int)v408;
                v2007 += (int)v408;
              }
              while (v2007 < v1972);
            }
          }
          break;
        case 2:
          if (v169 == 2)
          {
            uint64_t v1774 = *v164;
            if (v1774)
            {
              uint64_t v1775 = 0;
              uint64_t v1776 = 0;
              uint64_t v1777 = 0;
              uint64_t v1778 = *(void *)(v163 + 152);
              uint64_t v1779 = v260[19];
              uint64_t v1780 = v162[19];
              unint64_t v1781 = v164[1];
              uint64_t v1782 = *(uint64_t **)(v163 + 24);
              uint64_t v1783 = *v1782;
              uint64_t v1784 = v1782[1];
              unsigned int v1785 = (uint64_t *)v260[3];
              uint64_t v1787 = *v1785;
              uint64_t v1786 = v1785[1];
              if (v1781 <= 1) {
                uint64_t v1788 = 1;
              }
              else {
                uint64_t v1788 = v164[1];
              }
              uint64_t v1789 = v1783 - v1784 * v1781;
              uint64_t v1790 = v1787 - v1786 * v261[1];
              do
              {
                if (v1781)
                {
                  uint64_t v1791 = 0;
                  uint64_t v1792 = v1778 + 8 * v1777;
                  do
                  {
                    if ((int)v408 >= 1)
                    {
                      uint64_t v1793 = 0;
                      uint64_t v1794 = *(void *)(v1779 + 8 * v1776);
                      unsigned int v1795 = v408 + 1;
                      do
                      {
                        *(unsigned char *)(v1780 + v1793) = *(void *)(v1792 + 8 * v1793) != v1794;
                        --v1795;
                        ++v1793;
                      }
                      while (v1795 > 1);
                    }
                    v1777 += v1784;
                    v1776 += v1786;
                    v1780 += (int)v408;
                    ++v1791;
                    v1792 += 8 * v1784;
                  }
                  while (v1791 != v1788);
                }
                v1777 += v1789;
                v1776 += v1790;
                ++v1775;
              }
              while (v1775 != v1774);
            }
          }
          else if (v169 == 1)
          {
            uint64_t v1118 = *v164;
            if (v1118)
            {
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              uint64_t v1121 = *(void *)(v163 + 152);
              uint64_t v1122 = v260[19];
              uint64_t v1123 = v162[19];
              uint64_t v1124 = *(void *)v260[3];
              uint64_t v1125 = 8 * **(void **)(v163 + 24);
              do
              {
                if ((int)v408 >= 1)
                {
                  uint64_t v1126 = 0;
                  uint64_t v1127 = *(void *)(v1122 + 8 * v1120);
                  unsigned int v1128 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v1123 + v1126) = *(void *)(v1121 + 8 * v1126) != v1127;
                    --v1128;
                    ++v1126;
                  }
                  while (v1128 > 1);
                }
                v1120 += v1124;
                v1123 += (int)v408;
                ++v1119;
                v1121 += v1125;
              }
              while (v1119 != v1118);
            }
          }
          else
          {
            unint64_t v1973 = v162[6];
            if (v1973)
            {
              unint64_t v2008 = 0;
              uint64_t v1897 = v260[19];
              uint64_t v1924 = *(void *)(v163 + 152);
              uint64_t v1796 = v162[19];
              do
              {
                uint64_t v1797 = 0;
                if ((v166 & 0x80000000) == 0)
                {
                  uint64_t v1798 = *(void *)(v163 + 24);
                  int v1799 = v2008;
                  do
                  {
                    ldiv_t v1800 = ldiv(v1799, v164[v166]);
                    int v1799 = v1800.quot;
                    v1797 += *(void *)(v1798 + 8 * v166--) * v1800.rem;
                  }
                  while (v166 != -1);
                }
                uint64_t v1801 = v2016;
                if ((v2016 & 0x80000000) != 0)
                {
                  LODWORD(v1802) = 0;
                }
                else
                {
                  uint64_t v1802 = 0;
                  uint64_t v1803 = v260[3];
                  int v1804 = v2008;
                  do
                  {
                    ldiv_t v1805 = ldiv(v1804, v261[v1801]);
                    int v1804 = v1805.quot;
                    v1802 += *(void *)(v1803 + 8 * v1801--) * v1805.rem;
                  }
                  while (v1801 != -1);
                }
                uint64_t v166 = v2030;
                if ((int)v408 >= 1)
                {
                  uint64_t v1806 = 0;
                  uint64_t v1807 = *(void *)(v1897 + 8 * (int)v1802);
                  unsigned int v1808 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v1796 + v1806) = *(void *)(v1924 + 8 * (int)v1797 + 8 * v1806) != v1807;
                    --v1808;
                    ++v1806;
                  }
                  while (v1808 > 1);
                }
                v1796 += (int)v408;
                v2008 += (int)v408;
              }
              while (v2008 < v1973);
            }
          }
          break;
        case 3:
          if (v169 == 2)
          {
            uint64_t v1321 = *v164;
            if (v1321)
            {
              uint64_t v1322 = 0;
              uint64_t v1323 = 0;
              uint64_t v1324 = 0;
              uint64_t v1325 = *(void *)(v163 + 152);
              uint64_t v1326 = v260[19];
              uint64_t v1327 = v162[19];
              unint64_t v1328 = v164[1];
              uint64_t v1329 = *(uint64_t **)(v163 + 24);
              uint64_t v1330 = *v1329;
              uint64_t v1331 = v1329[1];
              uint64_t v1332 = (uint64_t *)v260[3];
              uint64_t v1334 = *v1332;
              uint64_t v1333 = v1332[1];
              if (v1328 <= 1) {
                uint64_t v1335 = 1;
              }
              else {
                uint64_t v1335 = v164[1];
              }
              uint64_t v1336 = v1330 - v1331 * v1328;
              uint64_t v1337 = v1334 - v1333 * v261[1];
              do
              {
                if (v1328)
                {
                  uint64_t v1338 = 0;
                  uint64_t v1339 = v1326 + 8 * v1323;
                  uint64_t v1340 = v1325 + 8 * v1324;
                  do
                  {
                    if ((int)v408 >= 1)
                    {
                      uint64_t v1341 = 0;
                      unsigned int v1342 = v408 + 1;
                      do
                      {
                        *(unsigned char *)(v1327 + v1341) = *(void *)(v1340 + 8 * v1341) != *(void *)(v1339 + 8 * v1341);
                        --v1342;
                        ++v1341;
                      }
                      while (v1342 > 1);
                    }
                    v1324 += v1331;
                    v1323 += v1333;
                    v1327 += (int)v408;
                    ++v1338;
                    v1339 += 8 * v1333;
                    v1340 += 8 * v1331;
                  }
                  while (v1338 != v1335);
                }
                v1324 += v1336;
                v1323 += v1337;
                ++v1322;
              }
              while (v1322 != v1321);
            }
          }
          else if (v169 == 1)
          {
            uint64_t v409 = *v164;
            if (v409)
            {
              uint64_t v410 = 0;
              uint64_t v411 = *(void *)(v163 + 152);
              uint64_t v412 = v260[19];
              uint64_t v413 = v162[19];
              uint64_t v414 = 8 * *(void *)v260[3];
              uint64_t v415 = 8 * **(void **)(v163 + 24);
              do
              {
                if ((int)v408 >= 1)
                {
                  uint64_t v416 = 0;
                  unsigned int v417 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v413 + v416) = *(void *)(v411 + 8 * v416) != *(void *)(v412 + 8 * v416);
                    --v417;
                    ++v416;
                  }
                  while (v417 > 1);
                }
                v413 += (int)v408;
                ++v410;
                v412 += v414;
                v411 += v415;
              }
              while (v410 != v409);
            }
          }
          else
          {
            unint64_t v1960 = v162[6];
            if (v1960)
            {
              unint64_t v1995 = 0;
              uint64_t v1884 = v260[19];
              uint64_t v1911 = *(void *)(v163 + 152);
              uint64_t v1343 = v162[19];
              do
              {
                uint64_t v1344 = 0;
                if ((v166 & 0x80000000) == 0)
                {
                  uint64_t v1345 = *(void *)(v163 + 24);
                  int v1346 = v1995;
                  do
                  {
                    ldiv_t v1347 = ldiv(v1346, v164[v166]);
                    int v1346 = v1347.quot;
                    v1344 += *(void *)(v1345 + 8 * v166--) * v1347.rem;
                  }
                  while (v166 != -1);
                }
                uint64_t v1348 = v2016;
                if ((v2016 & 0x80000000) != 0)
                {
                  LODWORD(v1349) = 0;
                }
                else
                {
                  uint64_t v1349 = 0;
                  uint64_t v1350 = v260[3];
                  int v1351 = v1995;
                  do
                  {
                    ldiv_t v1352 = ldiv(v1351, v261[v1348]);
                    int v1351 = v1352.quot;
                    v1349 += *(void *)(v1350 + 8 * v1348--) * v1352.rem;
                  }
                  while (v1348 != -1);
                }
                uint64_t v166 = v2030;
                if ((int)v408 >= 1)
                {
                  uint64_t v1353 = 0;
                  unsigned int v1354 = v408 + 1;
                  do
                  {
                    *(unsigned char *)(v1343 + v1353) = *(void *)(v1911 + 8 * (int)v1344 + 8 * v1353) != *(void *)(v1884 + 8 * (int)v1349 + 8 * v1353);
                    --v1354;
                    ++v1353;
                  }
                  while (v1354 > 1);
                }
                v1343 += (int)v408;
                v1995 += (int)v408;
              }
              while (v1995 < v1960);
            }
          }
          break;
        default:
LABEL_484:
          switch(v404)
          {
            case 1uLL:
              uint64_t v418 = v162[6];
              if (v418)
              {
                uint64_t v419 = *(void **)(v163 + 152);
                uint64_t v420 = (void *)v260[19];
                uint64_t v421 = (BOOL *)v162[19];
                uint64_t v422 = 8 * *(void *)v260[3];
                uint64_t v423 = 8 * **(void **)(v163 + 24);
                do
                {
                  *v421++ = *v419 != *v420;
                  uint64_t v420 = (void *)((char *)v420 + v422);
                  uint64_t v419 = (void *)((char *)v419 + v423);
                  --v418;
                }
                while (v418);
              }
              break;
            case 2uLL:
              uint64_t v850 = *v164;
              if (v850)
              {
                uint64_t v851 = 0;
                uint64_t v852 = 0;
                uint64_t v853 = 0;
                uint64_t v854 = 0;
                uint64_t v855 = *(void *)(v163 + 152);
                uint64_t v856 = v260[19];
                uint64_t v857 = v162[19];
                unint64_t v858 = v164[1];
                uint64_t v859 = *(uint64_t **)(v163 + 24);
                uint64_t v860 = *v859;
                uint64_t v861 = v859[1];
                unint64_t v862 = (uint64_t *)v260[3];
                uint64_t v863 = *v862;
                uint64_t v864 = v862[1];
                uint64_t v865 = v863 - v864 * v261[1];
                if (v858 <= 1) {
                  uint64_t v866 = 1;
                }
                else {
                  uint64_t v866 = v164[1];
                }
                uint64_t v867 = v860 - v861 * v858;
                do
                {
                  if (v858)
                  {
                    uint64_t v868 = v852 + v866;
                    uint64_t v869 = (BOOL *)(v857 + v852);
                    uint64_t v870 = v866;
                    do
                    {
                      *v869++ = *(void *)(v855 + 8 * v854) != *(void *)(v856 + 8 * v853);
                      v854 += v861;
                      v853 += v864;
                      --v870;
                    }
                    while (v870);
                    uint64_t v852 = v868;
                  }
                  v854 += v867;
                  v853 += v865;
                  ++v851;
                }
                while (v851 != v850);
              }
              break;
            case 3uLL:
              uint64_t v871 = *v164;
              if (v871)
              {
                uint64_t v872 = 0;
                uint64_t v873 = 0;
                uint64_t v874 = 0;
                uint64_t v875 = 0;
                uint64_t v876 = *(void *)(v163 + 152);
                uint64_t v877 = v260[19];
                uint64_t v878 = v162[19];
                unint64_t v879 = v164[1];
                uint64_t v880 = *(void **)(v163 + 24);
                uint64_t v881 = v880[1];
                uint64_t v882 = (void *)v260[3];
                uint64_t v883 = v882[1];
                uint64_t v884 = *v882 - v883 * v261[1];
                if (v879 <= 1) {
                  uint64_t v885 = 1;
                }
                else {
                  uint64_t v885 = v164[1];
                }
                unint64_t v886 = *v880 - v881 * v879;
                do
                {
                  if (v879)
                  {
                    uint64_t v887 = 0;
                    unint64_t v888 = v164[2];
                    uint64_t v889 = v880[2];
                    uint64_t v890 = v882[2];
                    if (v888 <= 1) {
                      uint64_t v891 = 1;
                    }
                    else {
                      uint64_t v891 = v164[2];
                    }
                    uint64_t v892 = v883 - v890 * v261[2];
                    do
                    {
                      uint64_t v893 = v891;
                      if (v888)
                      {
                        do
                        {
                          *(unsigned char *)(v878 + v873++) = *(void *)(v876 + 8 * v875) != *(void *)(v877 + 8 * v874);
                          v875 += v889;
                          v874 += v890;
                          --v893;
                        }
                        while (v893);
                      }
                      v875 += v881 - v889 * v888;
                      v874 += v892;
                      ++v887;
                    }
                    while (v887 != v885);
                  }
                  v875 += v886;
                  v874 += v884;
                  ++v872;
                }
                while (v872 != v871);
              }
              break;
            case 4uLL:
              uint64_t v2037 = *v164;
              if (v2037)
              {
                uint64_t v894 = 0;
                uint64_t v895 = 0;
                uint64_t v896 = 0;
                uint64_t v897 = 0;
                uint64_t v898 = *(void *)(v163 + 152);
                uint64_t v899 = v260[19];
                uint64_t v900 = v162[19];
                unint64_t v901 = v164[1];
                uint64_t v902 = *(void **)(v163 + 24);
                uint64_t v903 = (void *)v260[3];
                uint64_t v1905 = v903[1];
                uint64_t v1938 = v902[1];
                uint64_t v1987 = *v903 - v1905 * v261[1];
                int v2023 = v164[1];
                if (v901 <= 1) {
                  uint64_t v904 = 1;
                }
                else {
                  uint64_t v904 = v164[1];
                }
                unint64_t v1952 = *v902 - v902[1] * v901;
                do
                {
                  if (v2023)
                  {
                    uint64_t v905 = 0;
                    unint64_t v906 = v164[2];
                    uint64_t v907 = v902[2];
                    uint64_t v908 = v903[2];
                    if (v906 <= 1) {
                      uint64_t v909 = 1;
                    }
                    else {
                      uint64_t v909 = v164[2];
                    }
                    uint64_t v910 = v1905 - v908 * v261[2];
                    do
                    {
                      if (v906)
                      {
                        uint64_t v911 = 0;
                        unint64_t v912 = v164[3];
                        uint64_t v913 = v902[3];
                        uint64_t v914 = v903[3];
                        if (v912 <= 1) {
                          uint64_t v915 = 1;
                        }
                        else {
                          uint64_t v915 = v164[3];
                        }
                        uint64_t v916 = v908 - v914 * v261[3];
                        do
                        {
                          uint64_t v917 = v915;
                          if (v912)
                          {
                            do
                            {
                              *(unsigned char *)(v900 + v895++) = *(void *)(v898 + 8 * v897) != *(void *)(v899 + 8 * v896);
                              v897 += v913;
                              v896 += v914;
                              --v917;
                            }
                            while (v917);
                          }
                          v897 += v907 - v913 * v912;
                          v896 += v916;
                          ++v911;
                        }
                        while (v911 != v909);
                      }
                      v897 += v1938 - v907 * v906;
                      v896 += v910;
                      ++v905;
                    }
                    while (v905 != v904);
                  }
                  v897 += v1952;
                  v896 += v1987;
                  ++v894;
                }
                while (v894 != v2037);
              }
              break;
            default:
              uint64_t v839 = v162[6];
              if (v839)
              {
                uint64_t v840 = 0;
                uint64_t v1951 = v260[19];
                uint64_t v1986 = *(void *)(v163 + 152);
                uint64_t v1937 = v162[19];
                do
                {
                  uint64_t v841 = 0;
                  if ((v166 & 0x80000000) == 0)
                  {
                    uint64_t v842 = *(void *)(v163 + 24);
                    int v843 = v840;
                    do
                    {
                      ldiv_t v844 = ldiv(v843, v164[v166]);
                      int v843 = v844.quot;
                      v841 += *(void *)(v842 + 8 * v166--) * v844.rem;
                    }
                    while (v166 != -1);
                  }
                  uint64_t v845 = v2016;
                  if ((v2016 & 0x80000000) != 0)
                  {
                    LODWORD(v846) = 0;
                  }
                  else
                  {
                    uint64_t v846 = 0;
                    uint64_t v847 = v260[3];
                    int v848 = v840;
                    do
                    {
                      ldiv_t v849 = ldiv(v848, v261[v845]);
                      int v848 = v849.quot;
                      v846 += *(void *)(v847 + 8 * v845--) * v849.rem;
                    }
                    while (v845 != -1);
                  }
                  *(unsigned char *)(v1937 + v840++) = *(void *)(v1986 + 8 * (int)v841) != *(void *)(v1951
                                                                                                 + 8 * (int)v846);
                  uint64_t v166 = v2030;
                }
                while (v840 != v839);
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v28)
      {
        case 0:
          BOOL v26 = **(float **)(*a1 + 152) == **(float **)(*a2 + 152);
LABEL_19:
          char v7 = !v26;
LABEL_22:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v200 = *(_DWORD *)(*a2 + 160);
          if (v200 >= 1)
          {
            float v201 = **(float **)(*a1 + 152);
            int v202 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v203 = *(float **)(*a2 + 152);
            unsigned int v204 = v200 + 1;
            do
            {
              float v205 = *v203++;
              *v202++ = v201 != v205;
              --v204;
            }
            while (v204 > 1);
          }
          return;
        case 2:
          int v206 = *(_DWORD *)(*a1 + 160);
          if (v206 >= 1)
          {
            float v207 = **(float **)(*a2 + 152);
            unsigned int v208 = *(BOOL **)(*(void *)a3 + 152);
            float v209 = *(float **)(*a1 + 152);
            unsigned int v210 = v206 + 1;
            do
            {
              float v211 = *v209++;
              *v208++ = v211 != v207;
              --v210;
            }
            while (v210 > 1);
          }
          return;
        case 3:
          int v212 = *(_DWORD *)(*(void *)a3 + 48);
          if (v212 >= 1)
          {
            uint64_t v213 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v214 = *(float **)(*a2 + 152);
            float v215 = *(float **)(*a1 + 152);
            unsigned int v216 = v212 + 1;
            do
            {
              float v217 = *v215++;
              float v218 = v217;
              float v219 = *v214++;
              *v213++ = v218 != v219;
              --v216;
            }
            while (v216 > 1);
          }
          return;
        default:
          unsigned int v191 = *(void **)a3;
          uint64_t v192 = *a1;
          uint64_t v193 = *(int **)*a1;
          uint64_t v194 = (*(void *)(*a1 + 8) - (void)v193) >> 2;
          uint64_t v195 = (v194 - 1);
          if ((int)v195 >= -1) {
            int v196 = -1;
          }
          else {
            int v196 = v194 - 1;
          }
          int v197 = v196 + 1;
          int v198 = v194 + 1;
          while (1)
          {
            unsigned int v199 = v198 - 2;
            if (v198 - 2 < 0) {
              break;
            }
            --v198;
            if (*(void *)(*(void *)(v192 + 24) + 8 * v199) != *(void *)(v191[3] + 8 * v199)) {
              goto LABEL_202;
            }
          }
          int v198 = v197;
LABEL_202:
          int v268 = (void *)*a2;
          unsigned int v269 = *(int **)*a2;
          uint64_t v270 = (v268[1] - (void)v269) >> 2;
          uint64_t v271 = (v270 - 1);
          if ((int)v271 >= -1) {
            int v272 = -1;
          }
          else {
            int v272 = v270 - 1;
          }
          int v273 = v272 + 1;
          int v274 = v270 + 1;
          while (1)
          {
            unsigned int v275 = v274 - 2;
            if (v274 - 2 < 0) {
              break;
            }
            --v274;
            if (*(void *)(v268[3] + 8 * v275) != *(void *)(v191[3] + 8 * v275)) {
              goto LABEL_240;
            }
          }
          int v274 = v273;
LABEL_240:
          int v288 = v194 + 1;
          while (1)
          {
            unsigned int v289 = v288 - 2;
            if (v288 - 2 < 0) {
              break;
            }
            --v288;
            if (*(void *)(*(void *)(v192 + 24) + 8 * v289)) {
              goto LABEL_275;
            }
          }
          int v288 = v197;
LABEL_275:
          int v302 = v270 + 1;
          while (1)
          {
            unsigned int v303 = v302 - 2;
            if (v302 - 2 < 0) {
              break;
            }
            --v302;
            if (*(void *)(v268[3] + 8 * v303)) {
              goto LABEL_490;
            }
          }
          int v302 = v273;
LABEL_490:
          unint64_t v424 = (uint64_t)(v191[1] - *v191) >> 2;
          if (v198 <= v274) {
            int v425 = v274;
          }
          else {
            int v425 = v198;
          }
          if (v198 <= v302) {
            int v198 = v302;
          }
          if (v288 > v274) {
            int v274 = v288;
          }
          if (v424 > v274)
          {
            int v426 = 1;
          }
          else
          {
            int v274 = (uint64_t)(v191[1] - *v191) >> 2;
            int v426 = 4;
          }
          if (v424 > v198)
          {
            int v427 = 2;
          }
          else
          {
            int v198 = v274;
            int v427 = v426;
          }
          if (v424 > v425)
          {
            int v198 = v425;
            int v427 = 3;
          }
          uint64_t v2017 = v271;
          uint64_t v2031 = v195;
          if (!v198) {
            goto LABEL_519;
          }
          unint64_t v428 = *(void *)(v191[3] + 8 * (v198 - 1));
          if (v428 < 0x10) {
            goto LABEL_519;
          }
          switch(v427)
          {
            case 1:
              if (v198 == 2)
              {
                uint64_t v1809 = *v193;
                if (v1809)
                {
                  uint64_t v1810 = 0;
                  uint64_t v1811 = 0;
                  uint64_t v1812 = 0;
                  uint64_t v1813 = *(void *)(v192 + 152);
                  uint64_t v1814 = v268[19];
                  uint64_t v1815 = v191[19];
                  unint64_t v1816 = v193[1];
                  uint64_t v1817 = *(uint64_t **)(v192 + 24);
                  uint64_t v1818 = *v1817;
                  uint64_t v1819 = v1817[1];
                  float v1820 = (uint64_t *)v268[3];
                  uint64_t v1822 = *v1820;
                  uint64_t v1821 = v1820[1];
                  if (v1816 <= 1) {
                    uint64_t v1823 = 1;
                  }
                  else {
                    uint64_t v1823 = v193[1];
                  }
                  uint64_t v1824 = v1818 - v1819 * v1816;
                  uint64_t v1825 = v1822 - v1821 * v269[1];
                  do
                  {
                    if (v1816)
                    {
                      uint64_t v1826 = 0;
                      uint64_t v1827 = v1814 + 4 * v1811;
                      do
                      {
                        if ((int)v428 >= 1)
                        {
                          uint64_t v1828 = 0;
                          float v1829 = *(float *)(v1813 + 4 * v1812);
                          unsigned int v1830 = v428 + 1;
                          do
                          {
                            *(unsigned char *)(v1815 + v1828) = v1829 != *(float *)(v1827 + 4 * v1828);
                            --v1830;
                            ++v1828;
                          }
                          while (v1830 > 1);
                        }
                        v1812 += v1819;
                        v1811 += v1821;
                        v1815 += (int)v428;
                        ++v1826;
                        v1827 += 4 * v1821;
                      }
                      while (v1826 != v1823);
                    }
                    v1812 += v1824;
                    v1811 += v1825;
                    ++v1810;
                  }
                  while (v1810 != v1809);
                }
              }
              else if (v198 == 1)
              {
                uint64_t v1129 = *v193;
                if (v1129)
                {
                  uint64_t v1130 = 0;
                  uint64_t v1131 = 0;
                  uint64_t v1132 = *(void *)(v192 + 152);
                  uint64_t v1133 = v268[19];
                  uint64_t v1134 = v191[19];
                  uint64_t v1135 = **(void **)(v192 + 24);
                  uint64_t v1136 = 4 * *(void *)v268[3];
                  do
                  {
                    if ((int)v428 >= 1)
                    {
                      uint64_t v1137 = 0;
                      float v1138 = *(float *)(v1132 + 4 * v1131);
                      unsigned int v1139 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v1134 + v1137) = v1138 != *(float *)(v1133 + 4 * v1137);
                        --v1139;
                        ++v1137;
                      }
                      while (v1139 > 1);
                    }
                    v1131 += v1135;
                    v1134 += (int)v428;
                    ++v1130;
                    v1133 += v1136;
                  }
                  while (v1130 != v1129);
                }
              }
              else
              {
                unint64_t v1974 = v191[6];
                if (v1974)
                {
                  unint64_t v2009 = 0;
                  uint64_t v1898 = v268[19];
                  uint64_t v1925 = *(void *)(v192 + 152);
                  uint64_t v1831 = v191[19];
                  do
                  {
                    uint64_t v1832 = 0;
                    if ((v195 & 0x80000000) == 0)
                    {
                      uint64_t v1833 = *(void *)(v192 + 24);
                      int v1834 = v2009;
                      do
                      {
                        ldiv_t v1835 = ldiv(v1834, v193[v195]);
                        int v1834 = v1835.quot;
                        v1832 += *(void *)(v1833 + 8 * v195--) * v1835.rem;
                      }
                      while (v195 != -1);
                    }
                    uint64_t v1836 = v2017;
                    if ((v2017 & 0x80000000) != 0)
                    {
                      LODWORD(v1837) = 0;
                    }
                    else
                    {
                      uint64_t v1837 = 0;
                      uint64_t v1838 = v268[3];
                      int v1839 = v2009;
                      do
                      {
                        ldiv_t v1840 = ldiv(v1839, v269[v1836]);
                        int v1839 = v1840.quot;
                        v1837 += *(void *)(v1838 + 8 * v1836--) * v1840.rem;
                      }
                      while (v1836 != -1);
                    }
                    uint64_t v195 = v2031;
                    if ((int)v428 >= 1)
                    {
                      uint64_t v1841 = 0;
                      float v1842 = *(float *)(v1925 + 4 * (int)v1832);
                      unsigned int v1843 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v1831 + v1841) = v1842 != *(float *)(v1898 + 4 * (int)v1837 + 4 * v1841);
                        --v1843;
                        ++v1841;
                      }
                      while (v1843 > 1);
                    }
                    v1831 += (int)v428;
                    v2009 += (int)v428;
                  }
                  while (v2009 < v1974);
                }
              }
              break;
            case 2:
              if (v198 == 2)
              {
                uint64_t v1844 = *v193;
                if (v1844)
                {
                  uint64_t v1845 = 0;
                  uint64_t v1846 = 0;
                  uint64_t v1847 = 0;
                  uint64_t v1848 = *(void *)(v192 + 152);
                  uint64_t v1849 = v268[19];
                  uint64_t v1850 = v191[19];
                  unint64_t v1851 = v193[1];
                  uint64_t v1852 = *(uint64_t **)(v192 + 24);
                  uint64_t v1853 = *v1852;
                  uint64_t v1854 = v1852[1];
                  uint64_t v1855 = (uint64_t *)v268[3];
                  uint64_t v1857 = *v1855;
                  uint64_t v1856 = v1855[1];
                  if (v1851 <= 1) {
                    uint64_t v1858 = 1;
                  }
                  else {
                    uint64_t v1858 = v193[1];
                  }
                  uint64_t v1859 = v1853 - v1854 * v1851;
                  uint64_t v1860 = v1857 - v1856 * v269[1];
                  do
                  {
                    if (v1851)
                    {
                      uint64_t v1861 = 0;
                      uint64_t v1862 = v1848 + 4 * v1847;
                      do
                      {
                        if ((int)v428 >= 1)
                        {
                          uint64_t v1863 = 0;
                          float v1864 = *(float *)(v1849 + 4 * v1846);
                          unsigned int v1865 = v428 + 1;
                          do
                          {
                            *(unsigned char *)(v1850 + v1863) = *(float *)(v1862 + 4 * v1863) != v1864;
                            --v1865;
                            ++v1863;
                          }
                          while (v1865 > 1);
                        }
                        v1847 += v1854;
                        v1846 += v1856;
                        v1850 += (int)v428;
                        ++v1861;
                        v1862 += 4 * v1854;
                      }
                      while (v1861 != v1858);
                    }
                    v1847 += v1859;
                    v1846 += v1860;
                    ++v1845;
                  }
                  while (v1845 != v1844);
                }
              }
              else if (v198 == 1)
              {
                uint64_t v1140 = *v193;
                if (v1140)
                {
                  uint64_t v1141 = 0;
                  uint64_t v1142 = 0;
                  uint64_t v1143 = *(void *)(v192 + 152);
                  uint64_t v1144 = v268[19];
                  uint64_t v1145 = v191[19];
                  uint64_t v1146 = *(void *)v268[3];
                  uint64_t v1147 = 4 * **(void **)(v192 + 24);
                  do
                  {
                    if ((int)v428 >= 1)
                    {
                      uint64_t v1148 = 0;
                      float v1149 = *(float *)(v1144 + 4 * v1142);
                      unsigned int v1150 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v1145 + v1148) = *(float *)(v1143 + 4 * v1148) != v1149;
                        --v1150;
                        ++v1148;
                      }
                      while (v1150 > 1);
                    }
                    v1142 += v1146;
                    v1145 += (int)v428;
                    ++v1141;
                    v1143 += v1147;
                  }
                  while (v1141 != v1140);
                }
              }
              else
              {
                unint64_t v1975 = v191[6];
                if (v1975)
                {
                  unint64_t v2010 = 0;
                  uint64_t v1899 = v268[19];
                  uint64_t v1926 = *(void *)(v192 + 152);
                  uint64_t v1866 = v191[19];
                  do
                  {
                    uint64_t v1867 = 0;
                    if ((v195 & 0x80000000) == 0)
                    {
                      uint64_t v1868 = *(void *)(v192 + 24);
                      int v1869 = v2010;
                      do
                      {
                        ldiv_t v1870 = ldiv(v1869, v193[v195]);
                        int v1869 = v1870.quot;
                        v1867 += *(void *)(v1868 + 8 * v195--) * v1870.rem;
                      }
                      while (v195 != -1);
                    }
                    uint64_t v1871 = v2017;
                    if ((v2017 & 0x80000000) != 0)
                    {
                      LODWORD(v1872) = 0;
                    }
                    else
                    {
                      uint64_t v1872 = 0;
                      uint64_t v1873 = v268[3];
                      int v1874 = v2010;
                      do
                      {
                        ldiv_t v1875 = ldiv(v1874, v269[v1871]);
                        int v1874 = v1875.quot;
                        v1872 += *(void *)(v1873 + 8 * v1871--) * v1875.rem;
                      }
                      while (v1871 != -1);
                    }
                    uint64_t v195 = v2031;
                    if ((int)v428 >= 1)
                    {
                      uint64_t v1876 = 0;
                      float v1877 = *(float *)(v1899 + 4 * (int)v1872);
                      unsigned int v1878 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v1866 + v1876) = *(float *)(v1926 + 4 * (int)v1867 + 4 * v1876) != v1877;
                        --v1878;
                        ++v1876;
                      }
                      while (v1878 > 1);
                    }
                    v1866 += (int)v428;
                    v2010 += (int)v428;
                  }
                  while (v2010 < v1975);
                }
              }
              break;
            case 3:
              if (v198 == 2)
              {
                uint64_t v1355 = *v193;
                if (v1355)
                {
                  uint64_t v1356 = 0;
                  uint64_t v1357 = 0;
                  uint64_t v1358 = 0;
                  uint64_t v1359 = *(void *)(v192 + 152);
                  uint64_t v1360 = v268[19];
                  uint64_t v1361 = v191[19];
                  unint64_t v1362 = v193[1];
                  uint64_t v1363 = *(uint64_t **)(v192 + 24);
                  uint64_t v1364 = *v1363;
                  uint64_t v1365 = v1363[1];
                  uint64_t v1366 = (uint64_t *)v268[3];
                  uint64_t v1368 = *v1366;
                  uint64_t v1367 = v1366[1];
                  if (v1362 <= 1) {
                    uint64_t v1369 = 1;
                  }
                  else {
                    uint64_t v1369 = v193[1];
                  }
                  uint64_t v1370 = v1364 - v1365 * v1362;
                  uint64_t v1371 = v1368 - v1367 * v269[1];
                  do
                  {
                    if (v1362)
                    {
                      uint64_t v1372 = 0;
                      uint64_t v1373 = v1360 + 4 * v1357;
                      uint64_t v1374 = v1359 + 4 * v1358;
                      do
                      {
                        if ((int)v428 >= 1)
                        {
                          uint64_t v1375 = 0;
                          unsigned int v1376 = v428 + 1;
                          do
                          {
                            *(unsigned char *)(v1361 + v1375) = *(float *)(v1374 + 4 * v1375) != *(float *)(v1373 + 4 * v1375);
                            --v1376;
                            ++v1375;
                          }
                          while (v1376 > 1);
                        }
                        v1358 += v1365;
                        v1357 += v1367;
                        v1361 += (int)v428;
                        ++v1372;
                        v1373 += 4 * v1367;
                        v1374 += 4 * v1365;
                      }
                      while (v1372 != v1369);
                    }
                    v1358 += v1370;
                    v1357 += v1371;
                    ++v1356;
                  }
                  while (v1356 != v1355);
                }
              }
              else if (v198 == 1)
              {
                uint64_t v429 = *v193;
                if (v429)
                {
                  uint64_t v430 = 0;
                  uint64_t v431 = *(void *)(v192 + 152);
                  uint64_t v432 = v268[19];
                  uint64_t v433 = v191[19];
                  uint64_t v434 = 4 * *(void *)v268[3];
                  uint64_t v435 = 4 * **(void **)(v192 + 24);
                  do
                  {
                    if ((int)v428 >= 1)
                    {
                      uint64_t v436 = 0;
                      unsigned int v437 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v433 + v436) = *(float *)(v431 + 4 * v436) != *(float *)(v432 + 4 * v436);
                        --v437;
                        ++v436;
                      }
                      while (v437 > 1);
                    }
                    v433 += (int)v428;
                    ++v430;
                    v432 += v434;
                    v431 += v435;
                  }
                  while (v430 != v429);
                }
              }
              else
              {
                unint64_t v1961 = v191[6];
                if (v1961)
                {
                  unint64_t v1996 = 0;
                  uint64_t v1885 = v268[19];
                  uint64_t v1912 = *(void *)(v192 + 152);
                  uint64_t v1377 = v191[19];
                  do
                  {
                    uint64_t v1378 = 0;
                    if ((v195 & 0x80000000) == 0)
                    {
                      uint64_t v1379 = *(void *)(v192 + 24);
                      int v1380 = v1996;
                      do
                      {
                        ldiv_t v1381 = ldiv(v1380, v193[v195]);
                        int v1380 = v1381.quot;
                        v1378 += *(void *)(v1379 + 8 * v195--) * v1381.rem;
                      }
                      while (v195 != -1);
                    }
                    uint64_t v1382 = v2017;
                    if ((v2017 & 0x80000000) != 0)
                    {
                      LODWORD(v1383) = 0;
                    }
                    else
                    {
                      uint64_t v1383 = 0;
                      uint64_t v1384 = v268[3];
                      int v1385 = v1996;
                      do
                      {
                        ldiv_t v1386 = ldiv(v1385, v269[v1382]);
                        int v1385 = v1386.quot;
                        v1383 += *(void *)(v1384 + 8 * v1382--) * v1386.rem;
                      }
                      while (v1382 != -1);
                    }
                    uint64_t v195 = v2031;
                    if ((int)v428 >= 1)
                    {
                      uint64_t v1387 = 0;
                      unsigned int v1388 = v428 + 1;
                      do
                      {
                        *(unsigned char *)(v1377 + v1387) = *(float *)(v1912 + 4 * (int)v1378 + 4 * v1387) != *(float *)(v1885 + 4 * (int)v1383 + 4 * v1387);
                        --v1388;
                        ++v1387;
                      }
                      while (v1388 > 1);
                    }
                    v1377 += (int)v428;
                    v1996 += (int)v428;
                  }
                  while (v1996 < v1961);
                }
              }
              break;
            default:
LABEL_519:
              switch(v424)
              {
                case 1uLL:
                  uint64_t v438 = v191[6];
                  if (v438)
                  {
                    uint64_t v439 = *(float **)(v192 + 152);
                    uint64_t v440 = (float *)v268[19];
                    uint64_t v441 = (BOOL *)v191[19];
                    uint64_t v442 = 4 * *(void *)v268[3];
                    uint64_t v443 = 4 * **(void **)(v192 + 24);
                    do
                    {
                      *v441++ = *v439 != *v440;
                      uint64_t v440 = (float *)((char *)v440 + v442);
                      uint64_t v439 = (float *)((char *)v439 + v443);
                      --v438;
                    }
                    while (v438);
                  }
                  break;
                case 2uLL:
                  uint64_t v929 = *v193;
                  if (v929)
                  {
                    uint64_t v930 = 0;
                    uint64_t v931 = 0;
                    uint64_t v932 = 0;
                    uint64_t v933 = 0;
                    uint64_t v934 = *(void *)(v192 + 152);
                    uint64_t v935 = v268[19];
                    uint64_t v936 = v191[19];
                    unint64_t v937 = v193[1];
                    uint64_t v938 = *(uint64_t **)(v192 + 24);
                    uint64_t v939 = *v938;
                    uint64_t v940 = v938[1];
                    uint64_t v941 = (uint64_t *)v268[3];
                    uint64_t v942 = *v941;
                    uint64_t v943 = v941[1];
                    uint64_t v944 = v942 - v943 * v269[1];
                    if (v937 <= 1) {
                      uint64_t v945 = 1;
                    }
                    else {
                      uint64_t v945 = v193[1];
                    }
                    uint64_t v946 = v939 - v940 * v937;
                    do
                    {
                      if (v937)
                      {
                        uint64_t v947 = v931 + v945;
                        uint64_t v948 = (BOOL *)(v936 + v931);
                        uint64_t v949 = v945;
                        do
                        {
                          *v948++ = *(float *)(v934 + 4 * v933) != *(float *)(v935 + 4 * v932);
                          v933 += v940;
                          v932 += v943;
                          --v949;
                        }
                        while (v949);
                        uint64_t v931 = v947;
                      }
                      v933 += v946;
                      v932 += v944;
                      ++v930;
                    }
                    while (v930 != v929);
                  }
                  break;
                case 3uLL:
                  uint64_t v950 = *v193;
                  if (v950)
                  {
                    uint64_t v951 = 0;
                    uint64_t v952 = 0;
                    uint64_t v953 = 0;
                    uint64_t v954 = 0;
                    uint64_t v955 = *(void *)(v192 + 152);
                    uint64_t v956 = v268[19];
                    uint64_t v957 = v191[19];
                    unint64_t v958 = v193[1];
                    unint64_t v959 = *(void **)(v192 + 24);
                    uint64_t v960 = v959[1];
                    unint64_t v961 = (void *)v268[3];
                    uint64_t v962 = v961[1];
                    uint64_t v963 = *v961 - v962 * v269[1];
                    if (v958 <= 1) {
                      uint64_t v964 = 1;
                    }
                    else {
                      uint64_t v964 = v193[1];
                    }
                    unint64_t v965 = *v959 - v960 * v958;
                    do
                    {
                      if (v958)
                      {
                        uint64_t v966 = 0;
                        unint64_t v967 = v193[2];
                        uint64_t v968 = v959[2];
                        uint64_t v969 = v961[2];
                        if (v967 <= 1) {
                          uint64_t v970 = 1;
                        }
                        else {
                          uint64_t v970 = v193[2];
                        }
                        uint64_t v971 = v962 - v969 * v269[2];
                        do
                        {
                          uint64_t v972 = v970;
                          if (v967)
                          {
                            do
                            {
                              *(unsigned char *)(v957 + v952++) = *(float *)(v955 + 4 * v954) != *(float *)(v956 + 4 * v953);
                              v954 += v968;
                              v953 += v969;
                              --v972;
                            }
                            while (v972);
                          }
                          v954 += v960 - v968 * v967;
                          v953 += v971;
                          ++v966;
                        }
                        while (v966 != v964);
                      }
                      v954 += v965;
                      v953 += v963;
                      ++v951;
                    }
                    while (v951 != v950);
                  }
                  break;
                case 4uLL:
                  uint64_t v2038 = *v193;
                  if (v2038)
                  {
                    uint64_t v973 = 0;
                    uint64_t v974 = 0;
                    uint64_t v975 = 0;
                    uint64_t v976 = 0;
                    uint64_t v977 = *(void *)(v192 + 152);
                    uint64_t v978 = v268[19];
                    uint64_t v979 = v191[19];
                    unint64_t v980 = v193[1];
                    uint64_t v981 = *(void **)(v192 + 24);
                    uint64_t v982 = (void *)v268[3];
                    uint64_t v1940 = v982[1];
                    uint64_t v1954 = v981[1];
                    if (v980 <= 1) {
                      uint64_t v983 = 1;
                    }
                    else {
                      uint64_t v983 = v193[1];
                    }
                    unint64_t v1989 = *v981 - v981[1] * v980;
                    uint64_t v2024 = *v982 - v1940 * v269[1];
                    do
                    {
                      if (v980)
                      {
                        uint64_t v984 = 0;
                        unint64_t v985 = v193[2];
                        uint64_t v986 = v981[2];
                        uint64_t v987 = v982[2];
                        if (v985 <= 1) {
                          uint64_t v988 = 1;
                        }
                        else {
                          uint64_t v988 = v193[2];
                        }
                        uint64_t v989 = v1940 - v987 * v269[2];
                        do
                        {
                          if (v985)
                          {
                            uint64_t v990 = 0;
                            unint64_t v991 = v193[3];
                            uint64_t v992 = v981[3];
                            uint64_t v993 = v982[3];
                            if (v991 <= 1) {
                              uint64_t v994 = 1;
                            }
                            else {
                              uint64_t v994 = v193[3];
                            }
                            uint64_t v995 = v987 - v993 * v269[3];
                            do
                            {
                              uint64_t v996 = v994;
                              if (v991)
                              {
                                do
                                {
                                  *(unsigned char *)(v979 + v974++) = *(float *)(v977 + 4 * v976) != *(float *)(v978 + 4 * v975);
                                  v976 += v992;
                                  v975 += v993;
                                  --v996;
                                }
                                while (v996);
                              }
                              v976 += v986 - v992 * v991;
                              v975 += v995;
                              ++v990;
                            }
                            while (v990 != v988);
                          }
                          v976 += v1954 - v986 * v985;
                          v975 += v989;
                          ++v984;
                        }
                        while (v984 != v983);
                      }
                      v976 += v1989;
                      v975 += v2024;
                      ++v973;
                    }
                    while (v973 != v2038);
                  }
                  break;
                default:
                  uint64_t v918 = v191[6];
                  if (v918)
                  {
                    uint64_t v919 = 0;
                    uint64_t v1953 = v268[19];
                    uint64_t v1988 = *(void *)(v192 + 152);
                    uint64_t v1939 = v191[19];
                    do
                    {
                      uint64_t v920 = 0;
                      if ((v195 & 0x80000000) == 0)
                      {
                        uint64_t v921 = *(void *)(v192 + 24);
                        int v922 = v919;
                        do
                        {
                          ldiv_t v923 = ldiv(v922, v193[v195]);
                          int v922 = v923.quot;
                          v920 += *(void *)(v921 + 8 * v195--) * v923.rem;
                        }
                        while (v195 != -1);
                      }
                      uint64_t v924 = v2017;
                      if ((v2017 & 0x80000000) != 0)
                      {
                        LODWORD(v925) = 0;
                      }
                      else
                      {
                        uint64_t v925 = 0;
                        uint64_t v926 = v268[3];
                        int v927 = v919;
                        do
                        {
                          ldiv_t v928 = ldiv(v927, v269[v924]);
                          int v927 = v928.quot;
                          v925 += *(void *)(v926 + 8 * v924--) * v928.rem;
                        }
                        while (v924 != -1);
                      }
                      *(unsigned char *)(v1939 + v919++) = *(float *)(v1988 + 4 * (int)v920) != *(float *)(v1953 + 4 * (int)v925);
                      uint64_t v195 = v2031;
                    }
                    while (v919 != v918);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::Power::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Power::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::Power>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          BOOL v7 = **(unsigned char **)(*a2 + 152) != 0;
          BOOL v8 = 1;
          do
          {
            BOOL v9 = v8;
            BOOL v10 = v7;
            BOOL v8 = **(unsigned char **)(*a1 + 152) != 0;
            BOOL v7 = 0;
          }
          while (v10);
          **(unsigned char **)(*(void *)a3 + 152) = v9;
          return;
        case 1:
          int v47 = *(_DWORD *)(*a2 + 160);
          BOOL v48 = **(unsigned char **)(*a1 + 152) != 0;
          if (v47 >= 1)
          {
            int v49 = *(unsigned char **)(*(void *)a3 + 152);
            int v50 = *(unsigned char **)(*a2 + 152);
            do
            {
              BOOL v51 = *v50 != 0;
              char v52 = 1;
              do
              {
                char v53 = v52;
                BOOL v54 = v51;
                char v52 = v48;
                BOOL v51 = 0;
              }
              while (v54);
              *v49++ = v53 & 1;
              ++v50;
              BOOL v55 = __OFSUB__(v47--, 1);
            }
            while (!((v47 < 0) ^ v55 | (v47 == 0)));
          }
          return;
        case 2:
          int v56 = *(_DWORD *)(*a1 + 160);
          BOOL v57 = **(unsigned char **)(*a2 + 152) != 0;
          if (v56 >= 1)
          {
            unsigned int v58 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v59 = *(unsigned char **)(*a1 + 152);
            do
            {
              BOOL v60 = 1;
              BOOL v61 = v57;
              do
              {
                BOOL v62 = v60;
                BOOL v63 = v61;
                BOOL v60 = *v59 != 0;
                BOOL v61 = 0;
              }
              while (v63);
              *v58++ = v62;
              ++v59;
              BOOL v55 = __OFSUB__(v56--, 1);
            }
            while (!((v56 < 0) ^ v55 | (v56 == 0)));
          }
          return;
        case 3:
          int v64 = *(_DWORD *)(*(void *)a3 + 48);
          if (v64 >= 1)
          {
            int v65 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v66 = *(unsigned char **)(*a2 + 152);
            int v67 = *(unsigned char **)(*a1 + 152);
            do
            {
              BOOL v68 = *v66 != 0;
              BOOL v69 = 1;
              do
              {
                BOOL v70 = v69;
                BOOL v71 = v68;
                BOOL v69 = *v67 != 0;
                BOOL v68 = 0;
              }
              while (v71);
              *v65++ = v70;
              ++v67;
              ++v66;
              BOOL v55 = __OFSUB__(v64--, 1);
            }
            while (!((v64 < 0) ^ v55 | (v64 == 0)));
          }
          return;
        default:
          int v38 = *(void **)a3;
          uint64_t v39 = *a1;
          unsigned int v40 = *(int **)*a1;
          uint64_t v41 = (*(void *)(*a1 + 8) - (void)v40) >> 2;
          uint64_t v42 = (v41 - 1);
          if ((int)v42 >= -1) {
            int v43 = -1;
          }
          else {
            int v43 = v41 - 1;
          }
          int v44 = v43 + 1;
          int v45 = v41 + 1;
          while (1)
          {
            unsigned int v46 = v45 - 2;
            if (v45 - 2 < 0) {
              break;
            }
            --v45;
            if (*(void *)(*(void *)(v39 + 24) + 8 * v46) != *(void *)(v38[3] + 8 * v46)) {
              goto LABEL_328;
            }
          }
          int v45 = v44;
LABEL_328:
          uint64_t v268 = *a2;
          uint64_t v269 = (*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
          uint64_t v270 = (v269 - 1);
          if ((int)v270 >= -1) {
            int v271 = -1;
          }
          else {
            int v271 = v269 - 1;
          }
          int v272 = v271 + 1;
          int v273 = v269 + 1;
          while (1)
          {
            unsigned int v274 = v273 - 2;
            if (v273 - 2 < 0) {
              break;
            }
            --v273;
            if (*(void *)(*(void *)(v268 + 24) + 8 * v274) != *(void *)(v38[3] + 8 * v274)) {
              goto LABEL_382;
            }
          }
          int v273 = v272;
LABEL_382:
          int v320 = v41 + 1;
          while (1)
          {
            unsigned int v321 = v320 - 2;
            if (v320 - 2 < 0) {
              break;
            }
            --v320;
            if (*(void *)(*(void *)(v39 + 24) + 8 * v321)) {
              goto LABEL_417;
            }
          }
          int v320 = v44;
LABEL_417:
          int v334 = v269 + 1;
          while (1)
          {
            unsigned int v335 = v334 - 2;
            if (v334 - 2 < 0) {
              break;
            }
            --v334;
            if (*(void *)(*(void *)(v268 + 24) + 8 * v335)) {
              goto LABEL_452;
            }
          }
          int v334 = v272;
LABEL_452:
          unint64_t v348 = (uint64_t)(v38[1] - *v38) >> 2;
          if (v45 <= v273) {
            int v349 = v273;
          }
          else {
            int v349 = v45;
          }
          if (v45 <= v334) {
            int v45 = v334;
          }
          if (v320 > v273) {
            int v273 = v320;
          }
          if (v348 > v273)
          {
            int v350 = 1;
          }
          else
          {
            int v273 = (uint64_t)(v38[1] - *v38) >> 2;
            int v350 = 4;
          }
          if (v348 > v45)
          {
            int v351 = 2;
          }
          else
          {
            int v45 = v273;
            int v351 = v350;
          }
          if (v348 > v349)
          {
            int v45 = v349;
            int v351 = 3;
          }
          v2475 = *(int **)*a2;
          v2497 = *(int **)*a1;
          uint64_t v2425 = v42;
          uint64_t v2456 = v270;
          if (!v45) {
            goto LABEL_484;
          }
          unint64_t v352 = *(void *)(v38[3] + 8 * (v45 - 1));
          if (v352 < 0x10) {
            goto LABEL_484;
          }
          switch(v351)
          {
            case 1:
              if (v45 == 2)
              {
                uint64_t v1722 = *v40;
                if (v1722)
                {
                  uint64_t v1723 = 0;
                  uint64_t v1724 = 0;
                  uint64_t v1725 = 0;
                  uint64_t v1726 = *(void *)(v39 + 152);
                  uint64_t v1727 = *(void *)(v268 + 152);
                  uint64_t v1728 = (unsigned char *)v38[19];
                  unint64_t v1729 = v40[1];
                  ldiv_t v1730 = *(uint64_t **)(v39 + 24);
                  uint64_t v1731 = *v1730;
                  uint64_t v1732 = v1730[1];
                  uint64_t v1733 = *(uint64_t **)(v268 + 24);
                  uint64_t v1735 = *v1733;
                  uint64_t v1734 = v1733[1];
                  if (v1729 <= 1) {
                    uint64_t v1736 = 1;
                  }
                  else {
                    uint64_t v1736 = v2497[1];
                  }
                  uint64_t v1737 = v1735 - v1734 * v2475[1];
                  uint64_t v1738 = v1731 - v1732 * v1729;
                  do
                  {
                    if (v1729)
                    {
                      uint64_t v1739 = 0;
                      uint64_t v1740 = v1724;
                      do
                      {
                        BOOL v1741 = *(unsigned char *)(v1726 + v1725) != 0;
                        if ((int)v352 >= 1)
                        {
                          uint64_t v1742 = (unsigned char *)(v1727 + v1740);
                          int v1743 = v352;
                          uint64_t v1744 = v1728;
                          do
                          {
                            BOOL v1745 = *v1742 != 0;
                            char v1746 = 1;
                            do
                            {
                              char v1747 = v1746;
                              BOOL v1748 = v1745;
                              char v1746 = v1741;
                              BOOL v1745 = 0;
                            }
                            while (v1748);
                            *v1744++ = v1747 & 1;
                            ++v1742;
                            BOOL v55 = __OFSUB__(v1743--, 1);
                          }
                          while (!((v1743 < 0) ^ v55 | (v1743 == 0)));
                        }
                        v1725 += v1732;
                        v1740 += v1734;
                        v1728 += (int)v352;
                        ++v1739;
                      }
                      while (v1739 != v1736);
                      v1724 += v1734 * v1736;
                    }
                    v1725 += v1738;
                    v1724 += v1737;
                    ++v1723;
                  }
                  while (v1723 != v1722);
                }
              }
              else if (v45 == 1)
              {
                uint64_t v1207 = *v40;
                if (v1207)
                {
                  uint64_t v1208 = 0;
                  uint64_t v1209 = 0;
                  uint64_t v1210 = 0;
                  uint64_t v1211 = *(void *)(v39 + 152);
                  uint64_t v1212 = *(void *)(v268 + 152);
                  uint64_t v1213 = (unsigned char *)v38[19];
                  uint64_t v1214 = **(void **)(v39 + 24);
                  uint64_t v1215 = **(void **)(v268 + 24);
                  do
                  {
                    BOOL v1216 = *(unsigned char *)(v1211 + v1210) != 0;
                    if ((int)v352 >= 1)
                    {
                      uint64_t v1217 = (unsigned char *)(v1212 + v1209);
                      int v1218 = v352;
                      uint64_t v1219 = v1213;
                      do
                      {
                        BOOL v1220 = *v1217 != 0;
                        char v1221 = 1;
                        do
                        {
                          char v1222 = v1221;
                          BOOL v1223 = v1220;
                          char v1221 = v1216;
                          BOOL v1220 = 0;
                        }
                        while (v1223);
                        *v1219++ = v1222 & 1;
                        ++v1217;
                        BOOL v55 = __OFSUB__(v1218--, 1);
                      }
                      while (!((v1218 < 0) ^ v55 | (v1218 == 0)));
                    }
                    v1210 += v1214;
                    v1209 += v1215;
                    v1213 += (int)v352;
                    ++v1208;
                  }
                  while (v1208 != v1207);
                }
              }
              else
              {
                unint64_t v2415 = v38[6];
                if (v2415)
                {
                  unint64_t v1749 = 0;
                  uint64_t v2354 = *(void *)(v268 + 152);
                  uint64_t v2390 = *(void *)(v39 + 152);
                  uint64_t v1750 = (unsigned char *)v38[19];
                  do
                  {
                    uint64_t v1751 = 0;
                    if ((v42 & 0x80000000) == 0)
                    {
                      uint64_t v1752 = *(void *)(v39 + 24);
                      int quot = v1749;
                      do
                      {
                        ldiv_t v1754 = ldiv(quot, v2497[v42]);
                        int quot = v1754.quot;
                        v1751 += *(void *)(v1752 + 8 * v42--) * v1754.rem;
                      }
                      while (v42 != -1);
                    }
                    uint64_t v1755 = v2456;
                    if ((v2456 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      uint64_t v1756 = 0;
                      uint64_t v1757 = *(void *)(v268 + 24);
                      int v1758 = v1749;
                      do
                      {
                        ldiv_t v1759 = ldiv(v1758, v2475[v1755]);
                        int v1758 = v1759.quot;
                        v1756 += *(void *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    BOOL v1760 = *(unsigned char *)(v2390 + (int)v1751) != 0;
                    uint64_t v42 = v2425;
                    if ((int)v352 >= 1)
                    {
                      uint64_t v1761 = (unsigned char *)(v2354 + (int)v1756);
                      int v1762 = v352;
                      uint64_t v1763 = v1750;
                      do
                      {
                        BOOL v1764 = *v1761 != 0;
                        char v1765 = 1;
                        do
                        {
                          char v1766 = v1765;
                          BOOL v1767 = v1764;
                          char v1765 = v1760;
                          BOOL v1764 = 0;
                        }
                        while (v1767);
                        *v1763++ = v1766 & 1;
                        ++v1761;
                        BOOL v55 = __OFSUB__(v1762--, 1);
                      }
                      while (!((v1762 < 0) ^ v55 | (v1762 == 0)));
                    }
                    v1750 += (int)v352;
                    v1749 += (int)v352;
                  }
                  while (v1749 < v2415);
                }
              }
              break;
            case 2:
              if (v45 == 2)
              {
                uint64_t v1768 = *v40;
                if (v1768)
                {
                  uint64_t v1769 = 0;
                  uint64_t v1770 = 0;
                  uint64_t v1771 = 0;
                  uint64_t v1772 = *(void *)(v39 + 152);
                  uint64_t v1773 = *(void *)(v268 + 152);
                  uint64_t v1774 = (BOOL *)v38[19];
                  unint64_t v1775 = v40[1];
                  uint64_t v1776 = *(uint64_t **)(v39 + 24);
                  uint64_t v1777 = *v1776;
                  uint64_t v1778 = v1776[1];
                  uint64_t v1779 = *(uint64_t **)(v268 + 24);
                  uint64_t v1781 = *v1779;
                  uint64_t v1780 = v1779[1];
                  if (v1775 <= 1) {
                    uint64_t v1782 = 1;
                  }
                  else {
                    uint64_t v1782 = v2497[1];
                  }
                  uint64_t v1783 = v1781 - v1780 * v2475[1];
                  uint64_t v1784 = v1777 - v1778 * v1775;
                  do
                  {
                    if (v1775)
                    {
                      uint64_t v1785 = 0;
                      uint64_t v1786 = v1770;
                      do
                      {
                        BOOL v1787 = *(unsigned char *)(v1773 + v1786) != 0;
                        if ((int)v352 >= 1)
                        {
                          uint64_t v1788 = (unsigned char *)(v1772 + v1771);
                          int v1789 = v352;
                          uint64_t v1790 = v1774;
                          do
                          {
                            BOOL v1791 = 1;
                            BOOL v1792 = v1787;
                            do
                            {
                              BOOL v1793 = v1791;
                              BOOL v1794 = v1792;
                              BOOL v1791 = *v1788 != 0;
                              BOOL v1792 = 0;
                            }
                            while (v1794);
                            *v1790++ = v1793;
                            ++v1788;
                            BOOL v55 = __OFSUB__(v1789--, 1);
                          }
                          while (!((v1789 < 0) ^ v55 | (v1789 == 0)));
                        }
                        v1771 += v1778;
                        v1786 += v1780;
                        v1774 += (int)v352;
                        ++v1785;
                      }
                      while (v1785 != v1782);
                      v1770 += v1780 * v1782;
                    }
                    v1771 += v1784;
                    v1770 += v1783;
                    ++v1769;
                  }
                  while (v1769 != v1768);
                }
              }
              else if (v45 == 1)
              {
                uint64_t v1224 = *v40;
                if (v1224)
                {
                  uint64_t v1225 = 0;
                  uint64_t v1226 = 0;
                  uint64_t v1227 = 0;
                  uint64_t v1228 = *(void *)(v39 + 152);
                  uint64_t v1229 = *(void *)(v268 + 152);
                  uint64_t v1230 = (BOOL *)v38[19];
                  uint64_t v1231 = **(void **)(v39 + 24);
                  uint64_t v1232 = **(void **)(v268 + 24);
                  do
                  {
                    BOOL v1233 = *(unsigned char *)(v1229 + v1226) != 0;
                    if ((int)v352 >= 1)
                    {
                      uint64_t v1234 = (unsigned char *)(v1228 + v1227);
                      int v1235 = v352;
                      uint64_t v1236 = v1230;
                      do
                      {
                        BOOL v1237 = 1;
                        BOOL v1238 = v1233;
                        do
                        {
                          BOOL v1239 = v1237;
                          BOOL v1240 = v1238;
                          BOOL v1237 = *v1234 != 0;
                          BOOL v1238 = 0;
                        }
                        while (v1240);
                        *v1236++ = v1239;
                        ++v1234;
                        BOOL v55 = __OFSUB__(v1235--, 1);
                      }
                      while (!((v1235 < 0) ^ v55 | (v1235 == 0)));
                    }
                    v1227 += v1231;
                    v1226 += v1232;
                    v1230 += (int)v352;
                    ++v1225;
                  }
                  while (v1225 != v1224);
                }
              }
              else
              {
                unint64_t v2416 = v38[6];
                if (v2416)
                {
                  unint64_t v1795 = 0;
                  uint64_t v2391 = *(void *)(v268 + 152);
                  uint64_t v2355 = *(void *)(v39 + 152);
                  uint64_t v1796 = (BOOL *)v38[19];
                  do
                  {
                    uint64_t v1797 = 0;
                    if ((v42 & 0x80000000) == 0)
                    {
                      uint64_t v1798 = *(void *)(v39 + 24);
                      int v1799 = v1795;
                      do
                      {
                        ldiv_t v1800 = ldiv(v1799, v2497[v42]);
                        int v1799 = v1800.quot;
                        v1797 += *(void *)(v1798 + 8 * v42--) * v1800.rem;
                      }
                      while (v42 != -1);
                    }
                    uint64_t v1801 = v2456;
                    if ((v2456 & 0x80000000) != 0)
                    {
                      LODWORD(v1802) = 0;
                    }
                    else
                    {
                      uint64_t v1802 = 0;
                      uint64_t v1803 = *(void *)(v268 + 24);
                      int v1804 = v1795;
                      do
                      {
                        ldiv_t v1805 = ldiv(v1804, v2475[v1801]);
                        int v1804 = v1805.quot;
                        v1802 += *(void *)(v1803 + 8 * v1801--) * v1805.rem;
                      }
                      while (v1801 != -1);
                    }
                    BOOL v1806 = *(unsigned char *)(v2391 + (int)v1802) != 0;
                    uint64_t v42 = v2425;
                    if ((int)v352 >= 1)
                    {
                      uint64_t v1807 = (unsigned char *)(v2355 + (int)v1797);
                      int v1808 = v352;
                      uint64_t v1809 = v1796;
                      do
                      {
                        BOOL v1810 = 1;
                        BOOL v1811 = v1806;
                        do
                        {
                          BOOL v1812 = v1810;
                          BOOL v1813 = v1811;
                          BOOL v1810 = *v1807 != 0;
                          BOOL v1811 = 0;
                        }
                        while (v1813);
                        *v1809++ = v1812;
                        ++v1807;
                        BOOL v55 = __OFSUB__(v1808--, 1);
                      }
                      while (!((v1808 < 0) ^ v55 | (v1808 == 0)));
                    }
                    v1796 += (int)v352;
                    v1795 += (int)v352;
                  }
                  while (v1795 < v2416);
                }
              }
              break;
            case 3:
              if (v45 == 2)
              {
                uint64_t v1426 = *v40;
                if (v1426)
                {
                  uint64_t v1427 = 0;
                  uint64_t v1428 = 0;
                  uint64_t v1429 = 0;
                  uint64_t v1430 = *(void *)(v39 + 152);
                  uint64_t v1431 = *(void *)(v268 + 152);
                  uint64_t v1432 = (BOOL *)v38[19];
                  unint64_t v1433 = v40[1];
                  uint64_t v1434 = *(uint64_t **)(v39 + 24);
                  uint64_t v1435 = *v1434;
                  uint64_t v1436 = v1434[1];
                  uint64_t v1437 = *(uint64_t **)(v268 + 24);
                  uint64_t v1439 = *v1437;
                  uint64_t v1438 = v1437[1];
                  if (v1433 <= 1) {
                    uint64_t v1440 = 1;
                  }
                  else {
                    uint64_t v1440 = v2497[1];
                  }
                  uint64_t v1441 = v1439 - v1438 * v2475[1];
                  uint64_t v1442 = v1435 - v1436 * v1433;
                  do
                  {
                    if (v1433)
                    {
                      uint64_t v1443 = 0;
                      uint64_t v1444 = v1428;
                      do
                      {
                        if ((int)v352 >= 1)
                        {
                          unsigned int v1445 = (unsigned char *)(v1431 + v1444);
                          uint64_t v1446 = (unsigned char *)(v1430 + v1429);
                          int v1447 = v352;
                          uint64_t v1448 = v1432;
                          do
                          {
                            BOOL v1449 = *v1445 != 0;
                            BOOL v1450 = 1;
                            do
                            {
                              BOOL v1451 = v1450;
                              BOOL v1452 = v1449;
                              BOOL v1450 = *v1446 != 0;
                              BOOL v1449 = 0;
                            }
                            while (v1452);
                            *v1448++ = v1451;
                            ++v1446;
                            ++v1445;
                            BOOL v55 = __OFSUB__(v1447--, 1);
                          }
                          while (!((v1447 < 0) ^ v55 | (v1447 == 0)));
                        }
                        v1429 += v1436;
                        v1444 += v1438;
                        v1432 += (int)v352;
                        ++v1443;
                      }
                      while (v1443 != v1440);
                      v1428 += v1438 * v1440;
                    }
                    v1429 += v1442;
                    v1428 += v1441;
                    ++v1427;
                  }
                  while (v1427 != v1426);
                }
              }
              else if (v45 == 1)
              {
                uint64_t v353 = *v40;
                if (v353)
                {
                  uint64_t v354 = 0;
                  uint64_t v355 = 0;
                  uint64_t v356 = 0;
                  uint64_t v357 = *(void *)(v39 + 152);
                  uint64_t v358 = *(void *)(v268 + 152);
                  uint64_t v359 = (BOOL *)v38[19];
                  uint64_t v360 = **(void **)(v39 + 24);
                  uint64_t v361 = **(void **)(v268 + 24);
                  do
                  {
                    if ((int)v352 >= 1)
                    {
                      uint64_t v362 = (unsigned char *)(v358 + v355);
                      uint64_t v363 = (unsigned char *)(v357 + v356);
                      int v364 = v352;
                      int v365 = v359;
                      do
                      {
                        BOOL v366 = *v362 != 0;
                        BOOL v367 = 1;
                        do
                        {
                          BOOL v368 = v367;
                          BOOL v369 = v366;
                          BOOL v367 = *v363 != 0;
                          BOOL v366 = 0;
                        }
                        while (v369);
                        *v365++ = v368;
                        ++v363;
                        ++v362;
                        BOOL v55 = __OFSUB__(v364--, 1);
                      }
                      while (!((v364 < 0) ^ v55 | (v364 == 0)));
                    }
                    v356 += v360;
                    v355 += v361;
                    v359 += (int)v352;
                    ++v354;
                  }
                  while (v354 != v353);
                }
              }
              else
              {
                unint64_t v2409 = v38[6];
                if (v2409)
                {
                  unint64_t v1453 = 0;
                  uint64_t v2351 = *(void *)(v268 + 152);
                  uint64_t v2364 = *(void *)(v39 + 152);
                  int v1454 = (BOOL *)v38[19];
                  do
                  {
                    uint64_t v1455 = 0;
                    if ((v42 & 0x80000000) == 0)
                    {
                      uint64_t v1456 = *(void *)(v39 + 24);
                      int v1457 = v1453;
                      do
                      {
                        ldiv_t v1458 = ldiv(v1457, v2497[v42]);
                        int v1457 = v1458.quot;
                        v1455 += *(void *)(v1456 + 8 * v42--) * v1458.rem;
                      }
                      while (v42 != -1);
                    }
                    uint64_t v1459 = v2456;
                    if ((v2456 & 0x80000000) != 0)
                    {
                      LODWORD(v1460) = 0;
                    }
                    else
                    {
                      uint64_t v1460 = 0;
                      uint64_t v1461 = *(void *)(v268 + 24);
                      int v1462 = v1453;
                      do
                      {
                        ldiv_t v1463 = ldiv(v1462, v2475[v1459]);
                        int v1462 = v1463.quot;
                        v1460 += *(void *)(v1461 + 8 * v1459--) * v1463.rem;
                      }
                      while (v1459 != -1);
                    }
                    uint64_t v42 = v2425;
                    if ((int)v352 >= 1)
                    {
                      uint64_t v1464 = (unsigned char *)(v2351 + (int)v1460);
                      int v1465 = v352;
                      unint64_t v1466 = v1454;
                      unint64_t v1467 = (unsigned char *)(v2364 + (int)v1455);
                      do
                      {
                        BOOL v1468 = *v1464 != 0;
                        BOOL v1469 = 1;
                        do
                        {
                          BOOL v1470 = v1469;
                          BOOL v1471 = v1468;
                          BOOL v1469 = *v1467 != 0;
                          BOOL v1468 = 0;
                        }
                        while (v1471);
                        *v1466++ = v1470;
                        ++v1467;
                        ++v1464;
                        BOOL v55 = __OFSUB__(v1465--, 1);
                      }
                      while (!((v1465 < 0) ^ v55 | (v1465 == 0)));
                    }
                    v1454 += (int)v352;
                    v1453 += (int)v352;
                  }
                  while (v1453 < v2409);
                }
              }
              break;
            default:
LABEL_484:
              switch(v348)
              {
                case 1uLL:
                  uint64_t v370 = v38[6];
                  if (v370)
                  {
                    uint64_t v371 = 0;
                    uint64_t v372 = 0;
                    uint64_t v373 = 0;
                    uint64_t v374 = *(void *)(v39 + 152);
                    uint64_t v375 = *(void *)(v268 + 152);
                    uint64_t v376 = v38[19];
                    uint64_t v377 = **(void **)(v39 + 24);
                    uint64_t v378 = **(void **)(v268 + 24);
                    do
                    {
                      BOOL v379 = *(unsigned char *)(v375 + v372) != 0;
                      BOOL v380 = 1;
                      do
                      {
                        BOOL v381 = v380;
                        BOOL v382 = v379;
                        BOOL v380 = *(unsigned char *)(v374 + v373) != 0;
                        BOOL v379 = 0;
                      }
                      while (v382);
                      *(unsigned char *)(v376 + v371) = v381;
                      v373 += v377;
                      v372 += v378;
                      ++v371;
                    }
                    while (v371 != v370);
                  }
                  break;
                case 2uLL:
                  uint64_t v586 = *v40;
                  if (v586)
                  {
                    uint64_t v587 = 0;
                    uint64_t v588 = 0;
                    uint64_t v589 = 0;
                    uint64_t v590 = 0;
                    uint64_t v591 = *(void *)(v39 + 152);
                    uint64_t v592 = *(void *)(v268 + 152);
                    uint64_t v593 = v38[19];
                    unint64_t v594 = v40[1];
                    uint64_t v595 = *(uint64_t **)(v39 + 24);
                    uint64_t v596 = *v595;
                    uint64_t v597 = v595[1];
                    uint64_t v598 = *(uint64_t **)(v268 + 24);
                    uint64_t v600 = *v598;
                    uint64_t v599 = v598[1];
                    if (v594 <= 1) {
                      uint64_t v601 = 1;
                    }
                    else {
                      uint64_t v601 = v2497[1];
                    }
                    uint64_t v602 = v600 - v599 * v2475[1];
                    uint64_t v603 = v596 - v597 * v594;
                    do
                    {
                      if (v594)
                      {
                        uint64_t v604 = v588 + v601;
                        uint64_t v605 = v589;
                        do
                        {
                          BOOL v606 = *(unsigned char *)(v592 + v605) != 0;
                          BOOL v607 = 1;
                          do
                          {
                            BOOL v608 = v607;
                            BOOL v609 = v606;
                            BOOL v607 = *(unsigned char *)(v591 + v590) != 0;
                            BOOL v606 = 0;
                          }
                          while (v609);
                          *(unsigned char *)(v593 + v588) = v608;
                          v590 += v597;
                          v605 += v599;
                          ++v588;
                        }
                        while (v588 != v604);
                        v589 += v599 * v601;
                        uint64_t v588 = v604;
                      }
                      v590 += v603;
                      v589 += v602;
                      ++v587;
                    }
                    while (v587 != v586);
                  }
                  break;
                case 3uLL:
                  uint64_t v610 = *v40;
                  if (v610)
                  {
                    uint64_t v611 = 0;
                    uint64_t v612 = 0;
                    uint64_t v613 = 0;
                    uint64_t v614 = 0;
                    uint64_t v615 = *(void *)(v39 + 152);
                    uint64_t v616 = *(void *)(v268 + 152);
                    uint64_t v617 = v38[19];
                    unint64_t v618 = v40[1];
                    uint64_t v619 = *(void **)(v39 + 24);
                    uint64_t v620 = *(void **)(v268 + 24);
                    uint64_t v2427 = v620[1];
                    uint64_t v2459 = v619[1];
                    uint64_t v621 = *v620 - v2427 * v2475[1];
                    if (v618 <= 1) {
                      uint64_t v622 = 1;
                    }
                    else {
                      uint64_t v622 = v618;
                    }
                    unint64_t v623 = *v619 - v619[1] * v618;
                    do
                    {
                      if (v618)
                      {
                        uint64_t v624 = 0;
                        unint64_t v625 = v2497[2];
                        uint64_t v626 = v619[2];
                        uint64_t v627 = v620[2];
                        if (v625 <= 1) {
                          uint64_t v628 = 1;
                        }
                        else {
                          uint64_t v628 = v2497[2];
                        }
                        uint64_t v629 = v2427 - v627 * v2475[2];
                        do
                        {
                          if (v625)
                          {
                            uint64_t v630 = 0;
                            uint64_t v631 = v613;
                            do
                            {
                              BOOL v632 = *(unsigned char *)(v616 + v631) != 0;
                              BOOL v633 = 1;
                              do
                              {
                                BOOL v634 = v633;
                                BOOL v635 = v632;
                                BOOL v633 = *(unsigned char *)(v615 + v614) != 0;
                                BOOL v632 = 0;
                              }
                              while (v635);
                              *(unsigned char *)(v617 + v612) = v634;
                              uint64_t v636 = v612 + 1;
                              v614 += v626;
                              v631 += v627;
                              ++v630;
                              ++v612;
                            }
                            while (v630 != v628);
                            v613 += v628 * v627;
                            uint64_t v612 = v636;
                          }
                          else
                          {
                            uint64_t v636 = v612;
                          }
                          v614 += v2459 - v626 * v625;
                          v613 += v629;
                          ++v624;
                        }
                        while (v624 != v622);
                      }
                      else
                      {
                        uint64_t v636 = v612;
                      }
                      v614 += v623;
                      v613 += v621;
                      ++v611;
                      uint64_t v612 = v636;
                    }
                    while (v611 != v610);
                  }
                  break;
                case 4uLL:
                  uint64_t v2381 = *v40;
                  if (v2381)
                  {
                    uint64_t v637 = 0;
                    uint64_t v638 = 0;
                    uint64_t v639 = 0;
                    uint64_t v640 = 0;
                    uint64_t v641 = *(void *)(v39 + 152);
                    uint64_t v642 = *(void *)(v268 + 152);
                    uint64_t v643 = v38[19];
                    unint64_t v644 = v40[1];
                    uint64_t v645 = *(void **)(v39 + 24);
                    v2460 = v645;
                    uint64_t v646 = *(void **)(v268 + 24);
                    v2428 = v646;
                    uint64_t v2333 = v646[1];
                    uint64_t v2335 = v645[1];
                    uint64_t v2347 = *v646 - v2333 * v2475[1];
                    int v2360 = v40[1];
                    if (v644 <= 1) {
                      uint64_t v647 = 1;
                    }
                    else {
                      uint64_t v647 = v40[1];
                    }
                    unint64_t v2341 = *v645 - v645[1] * v644;
                    do
                    {
                      uint64_t v2401 = v637;
                      if (v2360)
                      {
                        uint64_t v648 = 0;
                        unint64_t v649 = v2497[2];
                        uint64_t v650 = v2460[2];
                        uint64_t v651 = v2428[2];
                        if (v649 <= 1) {
                          uint64_t v652 = 1;
                        }
                        else {
                          uint64_t v652 = v2497[2];
                        }
                        uint64_t v653 = v2333 - v651 * v2475[2];
                        do
                        {
                          if (v649)
                          {
                            uint64_t v654 = 0;
                            unint64_t v655 = v2497[3];
                            uint64_t v656 = v2460[3];
                            uint64_t v657 = v2428[3];
                            if (v655 <= 1) {
                              uint64_t v658 = 1;
                            }
                            else {
                              uint64_t v658 = v2497[3];
                            }
                            uint64_t v659 = v651 - v657 * v2475[3];
                            do
                            {
                              if (v655)
                              {
                                uint64_t v660 = 0;
                                uint64_t v661 = v639;
                                do
                                {
                                  BOOL v662 = *(unsigned char *)(v642 + v661) != 0;
                                  BOOL v663 = 1;
                                  do
                                  {
                                    BOOL v664 = v663;
                                    BOOL v665 = v662;
                                    BOOL v663 = *(unsigned char *)(v641 + v640) != 0;
                                    BOOL v662 = 0;
                                  }
                                  while (v665);
                                  *(unsigned char *)(v643 + v638) = v664;
                                  uint64_t v666 = v638 + 1;
                                  v640 += v656;
                                  v661 += v657;
                                  ++v660;
                                  ++v638;
                                }
                                while (v660 != v658);
                                v639 += v658 * v657;
                                uint64_t v638 = v666;
                              }
                              else
                              {
                                uint64_t v666 = v638;
                              }
                              v640 += v650 - v656 * v655;
                              v639 += v659;
                              ++v654;
                            }
                            while (v654 != v652);
                          }
                          else
                          {
                            uint64_t v666 = v638;
                          }
                          v640 += v2335 - v650 * v649;
                          v639 += v653;
                          ++v648;
                          uint64_t v638 = v666;
                        }
                        while (v648 != v647);
                      }
                      else
                      {
                        uint64_t v666 = v638;
                      }
                      v640 += v2341;
                      v639 += v2347;
                      ++v637;
                      uint64_t v638 = v666;
                    }
                    while (v2401 + 1 != v2381);
                  }
                  break;
                default:
                  uint64_t v570 = v38[6];
                  if (v570)
                  {
                    uint64_t v571 = 0;
                    uint64_t v572 = *(void *)(v39 + 152);
                    uint64_t v2380 = v38[19];
                    uint64_t v2400 = *(void *)(v268 + 152);
                    do
                    {
                      uint64_t v573 = 0;
                      if ((v42 & 0x80000000) == 0)
                      {
                        uint64_t v574 = *(void *)(v39 + 24);
                        int v575 = v571;
                        do
                        {
                          ldiv_t v576 = ldiv(v575, v2497[v42]);
                          int v575 = v576.quot;
                          v573 += *(void *)(v574 + 8 * v42--) * v576.rem;
                        }
                        while (v42 != -1);
                      }
                      uint64_t v577 = v2456;
                      if ((v2456 & 0x80000000) != 0)
                      {
                        LODWORD(v578) = 0;
                      }
                      else
                      {
                        uint64_t v578 = 0;
                        uint64_t v579 = *(void *)(v268 + 24);
                        int v580 = v571;
                        do
                        {
                          ldiv_t v581 = ldiv(v580, v2475[v577]);
                          int v580 = v581.quot;
                          v578 += *(void *)(v579 + 8 * v577--) * v581.rem;
                        }
                        while (v577 != -1);
                      }
                      BOOL v582 = *(unsigned char *)(v2400 + (int)v578) != 0;
                      BOOL v583 = 1;
                      do
                      {
                        BOOL v584 = v583;
                        BOOL v585 = v582;
                        BOOL v583 = *(unsigned char *)(v572 + (int)v573) != 0;
                        BOOL v582 = 0;
                      }
                      while (v585);
                      *(unsigned char *)(v2380 + v571++) = v584;
                      uint64_t v42 = v2425;
                    }
                    while (v571 != v570);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v11)
      {
        case 0:
          int v12 = *(unsigned char **)(*a2 + 152);
          unsigned int v13 = *v12;
          if (!*v12) {
            goto LABEL_323;
          }
          char v14 = **(unsigned char **)(*a1 + 152);
          char v15 = 1;
          do
          {
            if (v13) {
              char v16 = v14;
            }
            else {
              char v16 = 1;
            }
            v15 *= v16;
            v14 *= v14;
            BOOL v17 = v13 > 1;
            v13 >>= 1;
          }
          while (v17);
          goto LABEL_324;
        case 1:
          int v80 = *(_DWORD *)(*a2 + 160);
          if (v80 >= 1)
          {
            char v81 = **(unsigned char **)(*a1 + 152);
            uint64_t v82 = *(char **)(*(void *)a3 + 152);
            char v83 = *(unsigned char **)(*a2 + 152);
            do
            {
              unsigned int v84 = *v83;
              if (*v83)
              {
                char v85 = 1;
                char v86 = v81;
                do
                {
                  if (v84) {
                    char v87 = v86;
                  }
                  else {
                    char v87 = 1;
                  }
                  v85 *= v87;
                  v86 *= v86;
                  BOOL v17 = v84 > 1;
                  v84 >>= 1;
                }
                while (v17);
              }
              else
              {
                char v85 = 1;
              }
              *v82++ = v85;
              ++v83;
              BOOL v17 = v80-- <= 1;
            }
            while (!v17);
          }
          return;
        case 2:
          int v88 = *(_DWORD *)(*a1 + 160);
          if (v88 >= 1)
          {
            unsigned int v89 = **(unsigned __int8 **)(*a2 + 152);
            int v90 = *(char **)(*(void *)a3 + 152);
            int v91 = *(char **)(*a1 + 152);
            do
            {
              if (v89)
              {
                char v92 = *v91;
                char v93 = 1;
                unsigned int v94 = v89;
                do
                {
                  if (v94) {
                    char v95 = v92;
                  }
                  else {
                    char v95 = 1;
                  }
                  v93 *= v95;
                  v92 *= v92;
                  BOOL v17 = v94 > 1;
                  v94 >>= 1;
                }
                while (v17);
              }
              else
              {
                char v93 = 1;
              }
              *v90++ = v93;
              ++v91;
              BOOL v17 = v88-- <= 1;
            }
            while (!v17);
          }
          return;
        case 3:
          int v96 = *(_DWORD *)(*(void *)a3 + 48);
          if (v96 >= 1)
          {
            unsigned int v97 = *(char **)(*(void *)a3 + 152);
            unsigned int v98 = *(unsigned char **)(*a2 + 152);
            unsigned int v99 = *(char **)(*a1 + 152);
            do
            {
              unsigned int v100 = *v98;
              if (*v98)
              {
                char v101 = *v99;
                char v102 = 1;
                do
                {
                  if (v100) {
                    char v103 = v101;
                  }
                  else {
                    char v103 = 1;
                  }
                  v102 *= v103;
                  v101 *= v101;
                  BOOL v17 = v100 > 1;
                  v100 >>= 1;
                }
                while (v17);
              }
              else
              {
                char v102 = 1;
              }
              *v97++ = v102;
              ++v99;
              ++v98;
              BOOL v17 = v96-- <= 1;
            }
            while (!v17);
          }
          return;
        default:
          int v72 = *(void **)a3;
          uint64_t v73 = *a1;
          unsigned int v74 = *(int **)*a1;
          uint64_t v75 = (*(void *)(*a1 + 8) - (void)v74) >> 2;
          int v76 = v75 - 1;
          if ((int)v75 - 1 >= -1) {
            int v76 = -1;
          }
          int v77 = v76 + 1;
          int v78 = v75 + 1;
          break;
      }
      while (1)
      {
        unsigned int v79 = v78 - 2;
        if (v78 - 2 < 0) {
          break;
        }
        --v78;
        if (*(void *)(*(void *)(v73 + 24) + 8 * v79) != *(void *)(v72[3] + 8 * v79)) {
          goto LABEL_336;
        }
      }
      int v78 = v77;
LABEL_336:
      unsigned int v275 = (int **)*a2;
      int v276 = *(int **)*a2;
      uint64_t v277 = (*(void *)(*a2 + 8) - (void)v276) >> 2;
      int v278 = v277 - 1;
      if ((int)v277 - 1 >= -1) {
        int v278 = -1;
      }
      int v279 = v278 + 1;
      int v280 = v277 + 1;
      while (1)
      {
        unsigned int v281 = v280 - 2;
        if (v280 - 2 < 0) {
          break;
        }
        --v280;
        if (*(void *)&v275[3][2 * v281] != *(void *)(v72[3] + 8 * v281)) {
          goto LABEL_387;
        }
      }
      int v280 = v279;
LABEL_387:
      int v322 = v75 + 1;
      while (1)
      {
        unsigned int v323 = v322 - 2;
        if (v322 - 2 < 0) {
          break;
        }
        --v322;
        if (*(void *)(*(void *)(v73 + 24) + 8 * v323)) {
          goto LABEL_422;
        }
      }
      int v322 = v77;
LABEL_422:
      int v336 = v277 + 1;
      while (1)
      {
        int v337 = v336 - 2;
        if (v336 - 2 < 0) {
          break;
        }
        --v336;
        if (*(void *)&v275[3][2 * v337]) {
          goto LABEL_492;
        }
      }
      int v336 = v279;
LABEL_492:
      unint64_t v383 = (uint64_t)(v72[1] - *v72) >> 2;
      if (v78 <= v280) {
        int v384 = v280;
      }
      else {
        int v384 = v78;
      }
      if (v78 <= v336) {
        int v78 = v336;
      }
      if (v322 > v280) {
        int v280 = v322;
      }
      if (v383 > v280)
      {
        int v385 = 1;
      }
      else
      {
        int v280 = (uint64_t)(v72[1] - *v72) >> 2;
        int v385 = 4;
      }
      if (v383 > v78)
      {
        int v386 = 2;
      }
      else
      {
        int v78 = v280;
        int v386 = v385;
      }
      if (v383 > v384)
      {
        int v78 = v384;
        int v386 = 3;
      }
      if (!v78) {
        goto LABEL_531;
      }
      unint64_t v387 = *(void *)(v72[3] + 8 * (v78 - 1));
      if (v387 < 0x10) {
        goto LABEL_531;
      }
      switch(v386)
      {
        case 1:
          if (v78 == 2)
          {
            int v1814 = *v74;
            if (*v74)
            {
              unint64_t v1815 = 0;
              uint64_t v1816 = 0;
              uint64_t v1817 = 0;
              uint64_t v1818 = *(void *)(v73 + 152);
              uint64_t v1819 = v275[19];
              float v1820 = (char *)v72[19];
              do
              {
                if (v74[1])
                {
                  unint64_t v1821 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      char v1822 = *(unsigned char *)(v1818 + v1817);
                      uint64_t v1823 = (char *)v1819 + v1816;
                      int v1824 = v387;
                      uint64_t v1825 = v1820;
                      do
                      {
                        unsigned int v1826 = *v1823;
                        if (*v1823)
                        {
                          char v1827 = 1;
                          char v1828 = v1822;
                          do
                          {
                            if (v1826) {
                              char v1829 = v1828;
                            }
                            else {
                              char v1829 = 1;
                            }
                            v1827 *= v1829;
                            v1828 *= v1828;
                            BOOL v17 = v1826 > 1;
                            v1826 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          char v1827 = 1;
                        }
                        *v1825++ = v1827;
                        ++v1823;
                        BOOL v17 = v1824-- <= 1;
                      }
                      while (!v17);
                      uint64_t v73 = *a1;
                      unsigned int v275 = (int **)*a2;
                      unsigned int v74 = *(int **)*a1;
                    }
                    unsigned int v1830 = *(void **)(v73 + 24);
                    uint64_t v1831 = v1830[1];
                    v1817 += v1831;
                    v1816 += *((void *)v275[3] + 1);
                    v1820 += (int)v387;
                    ++v1821;
                    unint64_t v1832 = v74[1];
                  }
                  while (v1821 < v1832);
                  int v1814 = *v74;
                  int v276 = *v275;
                }
                else
                {
                  unint64_t v1832 = 0;
                  unsigned int v1830 = *(void **)(v73 + 24);
                  uint64_t v1831 = v1830[1];
                }
                uint64_t v1817 = *v1830 + v1817 - v1832 * v1831;
                uint64_t v1816 = *(void *)v275[3] + v1816 - *((void *)v275[3] + 1) * v276[1];
                ++v1815;
              }
              while (v1815 < v1814);
            }
          }
          else if (v78 == 1)
          {
            int v1241 = *v74;
            if (*v74)
            {
              unint64_t v1242 = 0;
              uint64_t v1243 = 0;
              uint64_t v1244 = 0;
              uint64_t v1245 = *(void *)(v73 + 152);
              uint64_t v1246 = v275[19];
              uint64_t v1247 = (char *)v72[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  char v1248 = *(unsigned char *)(v1245 + v1244);
                  int v1249 = (char *)v1246 + v1243;
                  int v1250 = v387;
                  uint64_t v1251 = v1247;
                  do
                  {
                    unsigned int v1252 = *v1249;
                    if (*v1249)
                    {
                      char v1253 = 1;
                      char v1254 = v1248;
                      do
                      {
                        if (v1252) {
                          char v1255 = v1254;
                        }
                        else {
                          char v1255 = 1;
                        }
                        v1253 *= v1255;
                        v1254 *= v1254;
                        BOOL v17 = v1252 > 1;
                        v1252 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      char v1253 = 1;
                    }
                    *v1251++ = v1253;
                    ++v1249;
                    BOOL v17 = v1250-- <= 1;
                  }
                  while (!v17);
                  uint64_t v73 = *a1;
                  unsigned int v275 = (int **)*a2;
                  int v1241 = **(_DWORD **)*a1;
                }
                v1244 += **(void **)(v73 + 24);
                v1243 += *(void *)v275[3];
                v1247 += (int)v387;
                ++v1242;
              }
              while (v1242 < v1241);
            }
          }
          else if (v72[6])
          {
            unint64_t v2510 = 0;
            uint64_t v2444 = *(void *)(v73 + 152);
            v2417 = v275[19];
            v2491 = (char *)v72[19];
            do
            {
              uint64_t v1833 = *(void *)*a1;
              unint64_t v1834 = (unint64_t)(*(void *)(*a1 + 8) - v1833) >> 2;
              uint64_t v1835 = 0;
              uint64_t v1836 = (v1834 - 1);
              if ((int)v1834 - 1 >= 0)
              {
                uint64_t v1837 = *(void *)(*a1 + 24);
                int v1838 = v2510;
                do
                {
                  ldiv_t v1839 = ldiv(v1838, *(int *)(v1833 + 4 * v1836));
                  int v1838 = v1839.quot;
                  v1835 += *(void *)(v1837 + 8 * v1836--) * v1839.rem;
                }
                while (v1836 != -1);
              }
              uint64_t v1840 = *(void *)*a2;
              unint64_t v1841 = (unint64_t)(*(void *)(*a2 + 8) - v1840) >> 2;
              uint64_t v1842 = 0;
              uint64_t v1843 = (v1841 - 1);
              if ((int)v1841 - 1 >= 0)
              {
                uint64_t v1844 = *(void *)(*a2 + 24);
                int v1845 = v2510;
                do
                {
                  ldiv_t v1846 = ldiv(v1845, *(int *)(v1840 + 4 * v1843));
                  int v1845 = v1846.quot;
                  v1842 += *(void *)(v1844 + 8 * v1843--) * v1846.rem;
                }
                while (v1843 != -1);
              }
              if ((int)v387 >= 1)
              {
                char v1847 = *(unsigned char *)(v2444 + (int)v1835);
                int v1848 = v387;
                uint64_t v1849 = v2491;
                uint64_t v1850 = (char *)v2417 + (int)v1842;
                do
                {
                  unsigned int v1851 = *v1850;
                  if (*v1850)
                  {
                    char v1852 = 1;
                    char v1853 = v1847;
                    do
                    {
                      if (v1851) {
                        char v1854 = v1853;
                      }
                      else {
                        char v1854 = 1;
                      }
                      v1852 *= v1854;
                      v1853 *= v1853;
                      BOOL v17 = v1851 > 1;
                      v1851 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    char v1852 = 1;
                  }
                  *v1849++ = v1852;
                  ++v1850;
                  BOOL v17 = v1848-- <= 1;
                }
                while (!v17);
                int v72 = *(void **)a3;
              }
              v2491 += (int)v387;
              v2510 += (int)v387;
            }
            while (v2510 < v72[6]);
          }
          break;
        case 2:
          if (v78 == 2)
          {
            int v1855 = *v74;
            if (*v74)
            {
              unint64_t v1856 = 0;
              uint64_t v1857 = 0;
              uint64_t v1858 = 0;
              uint64_t v1859 = *(void *)(v73 + 152);
              uint64_t v1860 = v275[19];
              uint64_t v1861 = (char *)v72[19];
              do
              {
                if (v74[1])
                {
                  unint64_t v1862 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      unsigned int v1863 = *((unsigned __int8 *)v1860 + v1857);
                      float v1864 = (char *)(v1859 + v1858);
                      int v1865 = v387;
                      uint64_t v1866 = v1861;
                      do
                      {
                        if (v1863)
                        {
                          char v1867 = *v1864;
                          char v1868 = 1;
                          unsigned int v1869 = v1863;
                          do
                          {
                            if (v1869) {
                              char v1870 = v1867;
                            }
                            else {
                              char v1870 = 1;
                            }
                            v1868 *= v1870;
                            v1867 *= v1867;
                            BOOL v17 = v1869 > 1;
                            v1869 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          char v1868 = 1;
                        }
                        *v1866++ = v1868;
                        ++v1864;
                        BOOL v17 = v1865-- <= 1;
                      }
                      while (!v17);
                      uint64_t v73 = *a1;
                      unsigned int v275 = (int **)*a2;
                      unsigned int v74 = *(int **)*a1;
                    }
                    uint64_t v1871 = *(void **)(v73 + 24);
                    uint64_t v1872 = v1871[1];
                    v1858 += v1872;
                    v1857 += *((void *)v275[3] + 1);
                    v1861 += (int)v387;
                    ++v1862;
                    unint64_t v1873 = v74[1];
                  }
                  while (v1862 < v1873);
                  int v1855 = *v74;
                  int v276 = *v275;
                }
                else
                {
                  unint64_t v1873 = 0;
                  uint64_t v1871 = *(void **)(v73 + 24);
                  uint64_t v1872 = v1871[1];
                }
                uint64_t v1858 = *v1871 + v1858 - v1873 * v1872;
                uint64_t v1857 = *(void *)v275[3] + v1857 - *((void *)v275[3] + 1) * v276[1];
                ++v1856;
              }
              while (v1856 < v1855);
            }
          }
          else if (v78 == 1)
          {
            int v1256 = *v74;
            if (*v74)
            {
              unint64_t v1257 = 0;
              uint64_t v1258 = 0;
              uint64_t v1259 = 0;
              uint64_t v1260 = *(void *)(v73 + 152);
              uint64_t v1261 = v275[19];
              uint64_t v1262 = (char *)v72[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  unsigned int v1263 = *((unsigned __int8 *)v1261 + v1258);
                  uint64_t v1264 = (char *)(v1260 + v1259);
                  int v1265 = v387;
                  uint64_t v1266 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      char v1267 = *v1264;
                      char v1268 = 1;
                      unsigned int v1269 = v1263;
                      do
                      {
                        if (v1269) {
                          char v1270 = v1267;
                        }
                        else {
                          char v1270 = 1;
                        }
                        v1268 *= v1270;
                        v1267 *= v1267;
                        BOOL v17 = v1269 > 1;
                        v1269 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      char v1268 = 1;
                    }
                    *v1266++ = v1268;
                    ++v1264;
                    BOOL v17 = v1265-- <= 1;
                  }
                  while (!v17);
                  uint64_t v73 = *a1;
                  unsigned int v275 = (int **)*a2;
                  int v1256 = **(_DWORD **)*a1;
                }
                v1259 += **(void **)(v73 + 24);
                v1258 += *(void *)v275[3];
                v1262 += (int)v387;
                ++v1257;
              }
              while (v1257 < v1256);
            }
          }
          else if (v72[6])
          {
            unint64_t v2511 = 0;
            uint64_t v2445 = *(void *)(v73 + 152);
            v2418 = v275[19];
            v2492 = (char *)v72[19];
            do
            {
              uint64_t v1874 = *(void *)*a1;
              unint64_t v1875 = (unint64_t)(*(void *)(*a1 + 8) - v1874) >> 2;
              uint64_t v1876 = 0;
              uint64_t v1877 = (v1875 - 1);
              if ((int)v1875 - 1 >= 0)
              {
                uint64_t v1878 = *(void *)(*a1 + 24);
                int v1879 = v2511;
                do
                {
                  ldiv_t v1880 = ldiv(v1879, *(int *)(v1874 + 4 * v1877));
                  int v1879 = v1880.quot;
                  v1876 += *(void *)(v1878 + 8 * v1877--) * v1880.rem;
                }
                while (v1877 != -1);
              }
              uint64_t v1881 = *(void *)*a2;
              unint64_t v1882 = (unint64_t)(*(void *)(*a2 + 8) - v1881) >> 2;
              uint64_t v1883 = 0;
              uint64_t v1884 = (v1882 - 1);
              if ((int)v1882 - 1 >= 0)
              {
                uint64_t v1885 = *(void *)(*a2 + 24);
                int v1886 = v2511;
                do
                {
                  ldiv_t v1887 = ldiv(v1886, *(int *)(v1881 + 4 * v1884));
                  int v1886 = v1887.quot;
                  v1883 += *(void *)(v1885 + 8 * v1884--) * v1887.rem;
                }
                while (v1884 != -1);
              }
              if ((int)v387 >= 1)
              {
                unsigned int v1888 = *((unsigned __int8 *)v2418 + (int)v1883);
                int v1889 = v387;
                uint64_t v1890 = v2492;
                uint64_t v1891 = (char *)(v2445 + (int)v1876);
                do
                {
                  if (v1888)
                  {
                    char v1892 = *v1891;
                    char v1893 = 1;
                    unsigned int v1894 = v1888;
                    do
                    {
                      if (v1894) {
                        char v1895 = v1892;
                      }
                      else {
                        char v1895 = 1;
                      }
                      v1893 *= v1895;
                      v1892 *= v1892;
                      BOOL v17 = v1894 > 1;
                      v1894 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    char v1893 = 1;
                  }
                  *v1890++ = v1893;
                  ++v1891;
                  BOOL v17 = v1889-- <= 1;
                }
                while (!v17);
                int v72 = *(void **)a3;
              }
              v2492 += (int)v387;
              v2511 += (int)v387;
            }
            while (v2511 < v72[6]);
          }
          break;
        case 3:
          if (v78 == 2)
          {
            int v1472 = *v74;
            if (*v74)
            {
              unint64_t v1473 = 0;
              uint64_t v1474 = 0;
              uint64_t v1475 = 0;
              uint64_t v1476 = *(void *)(v73 + 152);
              uint64_t v1477 = v275[19];
              uint64_t v1478 = (char *)v72[19];
              do
              {
                if (v74[1])
                {
                  unint64_t v1479 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      unsigned int v1480 = (char *)v1477 + v1474;
                      uint64_t v1481 = (char *)(v1476 + v1475);
                      int v1482 = v387;
                      uint64_t v1483 = v1478;
                      do
                      {
                        unsigned int v1484 = *v1480;
                        if (*v1480)
                        {
                          char v1485 = *v1481;
                          char v1486 = 1;
                          do
                          {
                            if (v1484) {
                              char v1487 = v1485;
                            }
                            else {
                              char v1487 = 1;
                            }
                            v1486 *= v1487;
                            v1485 *= v1485;
                            BOOL v17 = v1484 > 1;
                            v1484 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          char v1486 = 1;
                        }
                        *v1483++ = v1486;
                        ++v1481;
                        ++v1480;
                        BOOL v17 = v1482-- <= 1;
                      }
                      while (!v17);
                      uint64_t v73 = *a1;
                      unsigned int v275 = (int **)*a2;
                      unsigned int v74 = *(int **)*a1;
                    }
                    uint64_t v1488 = *(void **)(v73 + 24);
                    uint64_t v1489 = v1488[1];
                    v1475 += v1489;
                    v1474 += *((void *)v275[3] + 1);
                    v1478 += (int)v387;
                    ++v1479;
                    unint64_t v1490 = v74[1];
                  }
                  while (v1479 < v1490);
                  int v1472 = *v74;
                  int v276 = *v275;
                }
                else
                {
                  unint64_t v1490 = 0;
                  uint64_t v1488 = *(void **)(v73 + 24);
                  uint64_t v1489 = v1488[1];
                }
                uint64_t v1475 = *v1488 + v1475 - v1490 * v1489;
                uint64_t v1474 = *(void *)v275[3] + v1474 - *((void *)v275[3] + 1) * v276[1];
                ++v1473;
              }
              while (v1473 < v1472);
            }
          }
          else if (v78 == 1)
          {
            int v388 = *v74;
            if (*v74)
            {
              unint64_t v389 = 0;
              uint64_t v390 = 0;
              uint64_t v391 = 0;
              uint64_t v392 = *(void *)(v73 + 152);
              uint64_t v393 = v275[19];
              uint64_t v394 = (char *)v72[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  uint64_t v395 = (char *)v393 + v390;
                  uint64_t v396 = (char *)(v392 + v391);
                  int v397 = v387;
                  uint64_t v398 = v394;
                  do
                  {
                    unsigned int v399 = *v395;
                    if (*v395)
                    {
                      char v400 = *v396;
                      char v401 = 1;
                      do
                      {
                        if (v399) {
                          char v402 = v400;
                        }
                        else {
                          char v402 = 1;
                        }
                        v401 *= v402;
                        v400 *= v400;
                        BOOL v17 = v399 > 1;
                        v399 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      char v401 = 1;
                    }
                    *v398++ = v401;
                    ++v396;
                    ++v395;
                    BOOL v17 = v397-- <= 1;
                  }
                  while (!v17);
                  uint64_t v73 = *a1;
                  unsigned int v275 = (int **)*a2;
                  int v388 = **(_DWORD **)*a1;
                }
                v391 += **(void **)(v73 + 24);
                v390 += *(void *)v275[3];
                v394 += (int)v387;
                ++v389;
              }
              while (v389 < v388);
            }
          }
          else if (v72[6])
          {
            unint64_t v2508 = 0;
            uint64_t v2438 = *(void *)(v73 + 152);
            v2410 = v275[19];
            v2488 = (char *)v72[19];
            do
            {
              uint64_t v1491 = *(void *)*a1;
              unint64_t v1492 = (unint64_t)(*(void *)(*a1 + 8) - v1491) >> 2;
              uint64_t v1493 = 0;
              uint64_t v1494 = (v1492 - 1);
              if ((int)v1492 - 1 >= 0)
              {
                uint64_t v1495 = *(void *)(*a1 + 24);
                int v1496 = v2508;
                do
                {
                  ldiv_t v1497 = ldiv(v1496, *(int *)(v1491 + 4 * v1494));
                  int v1496 = v1497.quot;
                  v1493 += *(void *)(v1495 + 8 * v1494--) * v1497.rem;
                }
                while (v1494 != -1);
              }
              uint64_t v1498 = *(void *)*a2;
              unint64_t v1499 = (unint64_t)(*(void *)(*a2 + 8) - v1498) >> 2;
              uint64_t v1500 = 0;
              uint64_t v1501 = (v1499 - 1);
              if ((int)v1499 - 1 >= 0)
              {
                uint64_t v1502 = *(void *)(*a2 + 24);
                int v1503 = v2508;
                do
                {
                  ldiv_t v1504 = ldiv(v1503, *(int *)(v1498 + 4 * v1501));
                  int v1503 = v1504.quot;
                  v1500 += *(void *)(v1502 + 8 * v1501--) * v1504.rem;
                }
                while (v1501 != -1);
              }
              if ((int)v387 >= 1)
              {
                unint64_t v1505 = (char *)v2410 + (int)v1500;
                int v1506 = v387;
                uint64_t v1507 = v2488;
                uint64_t v1508 = (char *)(v2438 + (int)v1493);
                do
                {
                  unsigned int v1509 = *v1505;
                  if (*v1505)
                  {
                    char v1510 = *v1508;
                    char v1511 = 1;
                    do
                    {
                      if (v1509) {
                        char v1512 = v1510;
                      }
                      else {
                        char v1512 = 1;
                      }
                      v1511 *= v1512;
                      v1510 *= v1510;
                      BOOL v17 = v1509 > 1;
                      v1509 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    char v1511 = 1;
                  }
                  *v1507++ = v1511;
                  ++v1508;
                  ++v1505;
                  BOOL v17 = v1506-- <= 1;
                }
                while (!v17);
                int v72 = *(void **)a3;
              }
              v2488 += (int)v387;
              v2508 += (int)v387;
            }
            while (v2508 < v72[6]);
          }
          break;
        default:
LABEL_531:
          switch(v383)
          {
            case 1uLL:
              if (v72[6])
              {
                unint64_t v403 = 0;
                uint64_t v404 = 0;
                uint64_t v405 = 0;
                uint64_t v406 = *(void *)(v73 + 152);
                int v407 = v275[19];
                uint64_t v408 = v72[19];
                do
                {
                  unsigned int v409 = *((unsigned __int8 *)v407 + v404);
                  if (*((unsigned char *)v407 + v404))
                  {
                    char v410 = *(unsigned char *)(v406 + v405);
                    char v411 = 1;
                    do
                    {
                      if (v409) {
                        char v412 = v410;
                      }
                      else {
                        char v412 = 1;
                      }
                      v411 *= v412;
                      v410 *= v410;
                      BOOL v17 = v409 > 1;
                      v409 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    char v411 = 1;
                  }
                  *(unsigned char *)(v408 + v403) = v411;
                  v405 += **(void **)(*a1 + 24);
                  v404 += **(void **)(*a2 + 24);
                  ++v403;
                }
                while (v403 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v687 = *v74;
              if (*v74)
              {
                unint64_t v688 = 0;
                uint64_t v689 = 0;
                uint64_t v690 = 0;
                uint64_t v691 = 0;
                uint64_t v692 = *(void *)(v73 + 152);
                uint64_t v693 = v275[19];
                uint64_t v694 = v72[19];
                do
                {
                  if (v74[1])
                  {
                    unint64_t v695 = 0;
                    do
                    {
                      unsigned int v696 = *((unsigned __int8 *)v693 + v690);
                      if (*((unsigned char *)v693 + v690))
                      {
                        char v697 = *(unsigned char *)(v692 + v691);
                        char v698 = 1;
                        do
                        {
                          if (v696) {
                            char v699 = v697;
                          }
                          else {
                            char v699 = 1;
                          }
                          v698 *= v699;
                          v697 *= v697;
                          BOOL v17 = v696 > 1;
                          v696 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        char v698 = 1;
                      }
                      uint64_t v700 = v689 + 1;
                      *(unsigned char *)(v694 + v689) = v698;
                      uint64_t v73 = *a1;
                      unint64_t v701 = *(void **)(*a1 + 24);
                      uint64_t v702 = v701[1];
                      v691 += v702;
                      unsigned int v275 = (int **)*a2;
                      uint64_t v703 = *(int **)(*a2 + 24);
                      uint64_t v704 = *((void *)v703 + 1);
                      v690 += v704;
                      ++v695;
                      unsigned int v74 = *(int **)*a1;
                      unint64_t v705 = v74[1];
                      ++v689;
                    }
                    while (v695 < v705);
                    int v687 = *v74;
                    int v276 = *v275;
                    uint64_t v689 = v700;
                  }
                  else
                  {
                    unint64_t v705 = 0;
                    unint64_t v701 = *(void **)(v73 + 24);
                    uint64_t v702 = v701[1];
                    uint64_t v703 = v275[3];
                    uint64_t v704 = *((void *)v703 + 1);
                  }
                  uint64_t v691 = *v701 + v691 - v705 * v702;
                  uint64_t v690 = *(void *)v703 + v690 - v704 * v276[1];
                  ++v688;
                }
                while (v688 < v687);
              }
              break;
            case 3uLL:
              int v706 = *v74;
              if (*v74)
              {
                unint64_t v707 = 0;
                uint64_t v708 = 0;
                uint64_t v709 = 0;
                uint64_t v710 = 0;
                uint64_t v711 = *(void *)(v73 + 152);
                uint64_t v712 = v275[19];
                uint64_t v713 = v72[19];
                do
                {
                  if (v74[1])
                  {
                    unint64_t v714 = 0;
                    do
                    {
                      if (v74[2])
                      {
                        unint64_t v715 = 0;
                        do
                        {
                          unsigned int v716 = *((unsigned __int8 *)v712 + v709);
                          if (*((unsigned char *)v712 + v709))
                          {
                            char v717 = *(unsigned char *)(v711 + v710);
                            char v718 = 1;
                            do
                            {
                              if (v716) {
                                char v719 = v717;
                              }
                              else {
                                char v719 = 1;
                              }
                              v718 *= v719;
                              v717 *= v717;
                              BOOL v17 = v716 > 1;
                              v716 >>= 1;
                            }
                            while (v17);
                          }
                          else
                          {
                            char v718 = 1;
                          }
                          uint64_t v720 = v708 + 1;
                          *(unsigned char *)(v713 + v708) = v718;
                          uint64_t v73 = *a1;
                          unint64_t v721 = *(void **)(*a1 + 24);
                          uint64_t v722 = v721[2];
                          v710 += v722;
                          unsigned int v275 = (int **)*a2;
                          uint64_t v723 = *(int **)(*a2 + 24);
                          uint64_t v724 = *((void *)v723 + 2);
                          v709 += v724;
                          ++v715;
                          unsigned int v74 = *(int **)*a1;
                          unint64_t v725 = v74[2];
                          ++v708;
                        }
                        while (v715 < v725);
                        int v276 = *v275;
                        uint64_t v708 = v720;
                      }
                      else
                      {
                        unint64_t v725 = 0;
                        unint64_t v721 = *(void **)(v73 + 24);
                        uint64_t v722 = v721[2];
                        uint64_t v723 = v275[3];
                        uint64_t v724 = *((void *)v723 + 2);
                      }
                      uint64_t v726 = v721[1];
                      uint64_t v710 = v726 + v710 - v725 * v722;
                      uint64_t v709 = *((void *)v723 + 1) + v709 - v724 * v276[2];
                      ++v714;
                      unint64_t v727 = v74[1];
                    }
                    while (v714 < v727);
                    int v706 = *v74;
                  }
                  else
                  {
                    unint64_t v727 = 0;
                    unint64_t v721 = *(void **)(v73 + 24);
                    uint64_t v726 = v721[1];
                  }
                  uint64_t v710 = *v721 + v710 - v727 * v726;
                  uint64_t v709 = *(void *)v275[3] + v709 - *((void *)v275[3] + 1) * v276[1];
                  ++v707;
                }
                while (v707 < v706);
              }
              break;
            case 4uLL:
              int v728 = *v74;
              if (*v74)
              {
                unint64_t v729 = 0;
                uint64_t v730 = 0;
                uint64_t v731 = 0;
                uint64_t v732 = 0;
                uint64_t v733 = *(void *)(v73 + 152);
                uint64_t v734 = v275[19];
                uint64_t v735 = v72[19];
                do
                {
                  if (v74[1])
                  {
                    unint64_t v736 = 0;
                    do
                    {
                      if (v74[2])
                      {
                        unint64_t v737 = 0;
                        do
                        {
                          if (v74[3])
                          {
                            unint64_t v738 = 0;
                            do
                            {
                              unsigned int v739 = *((unsigned __int8 *)v734 + v731);
                              if (*((unsigned char *)v734 + v731))
                              {
                                char v740 = *(unsigned char *)(v733 + v732);
                                char v741 = 1;
                                do
                                {
                                  if (v739) {
                                    char v742 = v740;
                                  }
                                  else {
                                    char v742 = 1;
                                  }
                                  v741 *= v742;
                                  v740 *= v740;
                                  BOOL v17 = v739 > 1;
                                  v739 >>= 1;
                                }
                                while (v17);
                              }
                              else
                              {
                                char v741 = 1;
                              }
                              uint64_t v743 = v730 + 1;
                              *(unsigned char *)(v735 + v730) = v741;
                              uint64_t v73 = *a1;
                              unint64_t v744 = *(void **)(*a1 + 24);
                              uint64_t v745 = v744[3];
                              v732 += v745;
                              unsigned int v275 = (int **)*a2;
                              uint64_t v746 = *(int **)(*a2 + 24);
                              uint64_t v747 = *((void *)v746 + 3);
                              v731 += v747;
                              ++v738;
                              unsigned int v74 = *(int **)*a1;
                              unint64_t v748 = v74[3];
                              ++v730;
                            }
                            while (v738 < v748);
                            int v276 = *v275;
                            uint64_t v730 = v743;
                          }
                          else
                          {
                            unint64_t v748 = 0;
                            unint64_t v744 = *(void **)(v73 + 24);
                            uint64_t v745 = v744[3];
                            uint64_t v746 = v275[3];
                            uint64_t v747 = *((void *)v746 + 3);
                          }
                          uint64_t v749 = v744[2];
                          uint64_t v732 = v749 + v732 - v748 * v745;
                          uint64_t v731 = *((void *)v746 + 2) + v731 - v747 * v276[3];
                          ++v737;
                          unint64_t v750 = v74[2];
                        }
                        while (v737 < v750);
                      }
                      else
                      {
                        unint64_t v750 = 0;
                        unint64_t v744 = *(void **)(v73 + 24);
                        uint64_t v749 = v744[2];
                      }
                      uint64_t v732 = v744[1] + v732 - v750 * v749;
                      uint64_t v731 = *((void *)v275[3] + 1) + v731 - *((void *)v275[3] + 2) * v276[2];
                      ++v736;
                      unint64_t v751 = v74[1];
                    }
                    while (v736 < v751);
                    int v728 = *v74;
                  }
                  else
                  {
                    unint64_t v751 = 0;
                  }
                  uint64_t v732 = **(void **)(v73 + 24) + v732 - *(void *)(*(void *)(v73 + 24) + 8) * v751;
                  uint64_t v731 = *(void *)v275[3] + v731 - *((void *)v275[3] + 1) * v276[1];
                  ++v729;
                }
                while (v729 < v728);
              }
              break;
            default:
              if (v72[6])
              {
                unint64_t v667 = 0;
                uint64_t v2480 = *(void *)(v73 + 152);
                v2502 = v275[19];
                uint64_t v668 = v72[19];
                do
                {
                  uint64_t v669 = *(void *)*a1;
                  unint64_t v670 = (unint64_t)(*(void *)(*a1 + 8) - v669) >> 2;
                  uint64_t v671 = 0;
                  uint64_t v672 = (v670 - 1);
                  if ((int)v670 - 1 >= 0)
                  {
                    uint64_t v673 = *(void *)(*a1 + 24);
                    int v674 = v667;
                    do
                    {
                      ldiv_t v675 = ldiv(v674, *(int *)(v669 + 4 * v672));
                      int v674 = v675.quot;
                      v671 += *(void *)(v673 + 8 * v672--) * v675.rem;
                    }
                    while (v672 != -1);
                  }
                  uint64_t v676 = *(void *)*a2;
                  unint64_t v677 = (unint64_t)(*(void *)(*a2 + 8) - v676) >> 2;
                  uint64_t v678 = 0;
                  uint64_t v679 = (v677 - 1);
                  if ((int)v677 - 1 >= 0)
                  {
                    uint64_t v680 = *(void *)(*a2 + 24);
                    int v681 = v667;
                    do
                    {
                      ldiv_t v682 = ldiv(v681, *(int *)(v676 + 4 * v679));
                      int v681 = v682.quot;
                      v678 += *(void *)(v680 + 8 * v679--) * v682.rem;
                    }
                    while (v679 != -1);
                  }
                  unsigned int v683 = *((unsigned __int8 *)v2502 + (int)v678);
                  if (*((unsigned char *)v2502 + (int)v678))
                  {
                    char v684 = *(unsigned char *)(v2480 + (int)v671);
                    char v685 = 1;
                    do
                    {
                      if (v683) {
                        char v686 = v684;
                      }
                      else {
                        char v686 = 1;
                      }
                      v685 *= v686;
                      v684 *= v684;
                      BOOL v17 = v683 > 1;
                      v683 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    char v685 = 1;
                  }
                  *(unsigned char *)(v668 + v667++) = v685;
                }
                while (v667 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v18)
      {
        case 0:
          unsigned int v19 = **(_DWORD **)(*a2 + 152);
          if (!v19) {
            goto LABEL_325;
          }
          int v20 = **(_DWORD **)(*a1 + 152);
          int v21 = 1;
          do
          {
            if (v19) {
              int v22 = v20;
            }
            else {
              int v22 = 1;
            }
            v21 *= v22;
            v20 *= v20;
            BOOL v17 = v19 > 1;
            v19 >>= 1;
          }
          while (v17);
          goto LABEL_326;
        case 1:
          int v113 = *(_DWORD *)(*a2 + 160);
          if (v113 >= 1)
          {
            int v114 = **(_DWORD **)(*a1 + 152);
            int v115 = *(int **)(*(void *)a3 + 152);
            unsigned int v116 = *(unsigned int **)(*a2 + 152);
            do
            {
              unsigned int v117 = *v116;
              if (*v116)
              {
                int v118 = 1;
                int v119 = v114;
                do
                {
                  if (v117) {
                    int v120 = v119;
                  }
                  else {
                    int v120 = 1;
                  }
                  v118 *= v120;
                  v119 *= v119;
                  BOOL v17 = v117 > 1;
                  v117 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v118 = 1;
              }
              *v115++ = v118;
              ++v116;
              BOOL v17 = v113-- <= 1;
            }
            while (!v17);
          }
          return;
        case 2:
          int v121 = *(_DWORD *)(*a1 + 160);
          if (v121 >= 1)
          {
            unsigned int v122 = **(_DWORD **)(*a2 + 152);
            unsigned int v123 = *(int **)(*(void *)a3 + 152);
            int v124 = *(int **)(*a1 + 152);
            do
            {
              if (v122)
              {
                int v125 = *v124;
                int v126 = 1;
                unsigned int v127 = v122;
                do
                {
                  if (v127) {
                    int v128 = v125;
                  }
                  else {
                    int v128 = 1;
                  }
                  v126 *= v128;
                  v125 *= v125;
                  BOOL v17 = v127 > 1;
                  v127 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v126 = 1;
              }
              *v123++ = v126;
              ++v124;
              BOOL v17 = v121-- <= 1;
            }
            while (!v17);
          }
          return;
        case 3:
          int v129 = *(_DWORD *)(*(void *)a3 + 48);
          if (v129 >= 1)
          {
            int v130 = *(int **)(*(void *)a3 + 152);
            int v131 = *(unsigned int **)(*a2 + 152);
            int v132 = *(int **)(*a1 + 152);
            do
            {
              unsigned int v133 = *v131;
              if (*v131)
              {
                int v134 = *v132;
                int v135 = 1;
                do
                {
                  if (v133) {
                    int v136 = v134;
                  }
                  else {
                    int v136 = 1;
                  }
                  v135 *= v136;
                  v134 *= v134;
                  BOOL v17 = v133 > 1;
                  v133 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v135 = 1;
              }
              *v130++ = v135;
              ++v132;
              ++v131;
              BOOL v17 = v129-- <= 1;
            }
            while (!v17);
          }
          return;
        default:
          unsigned int v104 = *(void **)a3;
          uint64_t v105 = (void *)*a1;
          int v106 = *(int **)*a1;
          uint64_t v107 = (v105[1] - (void)v106) >> 2;
          uint64_t v108 = (v107 - 1);
          if ((int)v108 >= -1) {
            int v109 = -1;
          }
          else {
            int v109 = v107 - 1;
          }
          int v110 = v109 + 1;
          int v111 = v107 + 1;
          break;
      }
      while (1)
      {
        unsigned int v112 = v111 - 2;
        if (v111 - 2 < 0) {
          break;
        }
        --v111;
        if (*(void *)(v105[3] + 8 * v112) != *(void *)(v104[3] + 8 * v112)) {
          goto LABEL_343;
        }
      }
      int v111 = v110;
LABEL_343:
      int v282 = (void *)*a2;
      unsigned int v283 = *(int **)*a2;
      uint64_t v284 = (v282[1] - (void)v283) >> 2;
      uint64_t v285 = (v284 - 1);
      if ((int)v285 >= -1) {
        int v286 = -1;
      }
      else {
        int v286 = v284 - 1;
      }
      int v287 = v286 + 1;
      int v288 = v284 + 1;
      while (1)
      {
        unsigned int v289 = v288 - 2;
        if (v288 - 2 < 0) {
          break;
        }
        --v288;
        if (*(void *)(v282[3] + 8 * v289) != *(void *)(v104[3] + 8 * v289)) {
          goto LABEL_392;
        }
      }
      int v288 = v287;
LABEL_392:
      int v324 = v107 + 1;
      while (1)
      {
        unsigned int v325 = v324 - 2;
        if (v324 - 2 < 0) {
          break;
        }
        --v324;
        if (*(void *)(v105[3] + 8 * v325)) {
          goto LABEL_427;
        }
      }
      int v324 = v110;
LABEL_427:
      int v338 = v284 + 1;
      while (1)
      {
        unsigned int v339 = v338 - 2;
        if (v338 - 2 < 0) {
          break;
        }
        --v338;
        if (*(void *)(v282[3] + 8 * v339)) {
          goto LABEL_545;
        }
      }
      int v338 = v287;
LABEL_545:
      unint64_t v413 = (uint64_t)(v104[1] - *v104) >> 2;
      if (v111 <= v288) {
        int v414 = v288;
      }
      else {
        int v414 = v111;
      }
      if (v111 <= v338) {
        int v111 = v338;
      }
      if (v324 > v288) {
        int v288 = v324;
      }
      if (v413 > v288)
      {
        int v415 = 1;
      }
      else
      {
        int v288 = (uint64_t)(v104[1] - *v104) >> 2;
        int v415 = 4;
      }
      if (v413 > v111)
      {
        int v416 = 2;
      }
      else
      {
        int v111 = v288;
        int v416 = v415;
      }
      if (v413 > v414)
      {
        int v111 = v414;
        int v416 = 3;
      }
      uint64_t v2476 = v108;
      uint64_t v2498 = v285;
      if (!v111) {
        goto LABEL_584;
      }
      unint64_t v417 = *(void *)(v104[3] + 8 * (v111 - 1));
      if (v417 < 0x10) {
        goto LABEL_584;
      }
      switch(v416)
      {
        case 1:
          if (v111 == 2)
          {
            int v1896 = *v106;
            if (*v106)
            {
              unint64_t v1897 = 0;
              uint64_t v1898 = 0;
              uint64_t v1899 = 0;
              uint64_t v1900 = v105[19];
              uint64_t v1901 = v282[19];
              uint64_t v1902 = (int *)v104[19];
              uint64_t v1903 = (uint64_t *)v105[3];
              uint64_t v1904 = *v1903;
              uint64_t v1905 = v1903[1];
              uint64_t v1906 = (uint64_t *)v282[3];
              uint64_t v1908 = *v1906;
              uint64_t v1907 = v1906[1];
              int v1909 = v106[1];
              int v1910 = v1909;
              do
              {
                if (v1910)
                {
                  unint64_t v1911 = 0;
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      int v1912 = *(_DWORD *)(v1900 + 4 * v1899);
                      int v1913 = v417;
                      uint64_t v1914 = v1902;
                      uint64_t v1915 = (unsigned int *)(v1901 + 4 * v1898);
                      do
                      {
                        unsigned int v1916 = *v1915;
                        if (*v1915)
                        {
                          int v1917 = 1;
                          int v1918 = v1912;
                          do
                          {
                            if (v1916) {
                              int v1919 = v1918;
                            }
                            else {
                              int v1919 = 1;
                            }
                            v1917 *= v1919;
                            v1918 *= v1918;
                            BOOL v17 = v1916 > 1;
                            v1916 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1917 = 1;
                        }
                        *v1914++ = v1917;
                        ++v1915;
                        BOOL v17 = v1913-- <= 1;
                      }
                      while (!v17);
                      int v1909 = v106[1];
                    }
                    v1899 += v1905;
                    v1898 += v1907;
                    v1902 += (int)v417;
                    ++v1911;
                  }
                  while (v1911 < v1909);
                  uint64_t v1920 = v1909;
                  int v1896 = *v106;
                  int v1910 = v1909;
                }
                else
                {
                  uint64_t v1920 = 0;
                }
                uint64_t v1899 = v1899 + v1904 - v1920 * v1905;
                uint64_t v1898 = v1898 + v1908 - v1907 * v283[1];
                ++v1897;
              }
              while (v1897 < v1896);
            }
          }
          else if (v111 == 1)
          {
            int v1271 = *v106;
            if (*v106)
            {
              unint64_t v1272 = 0;
              uint64_t v1273 = 0;
              uint64_t v1274 = 0;
              uint64_t v1275 = v105[19];
              uint64_t v1276 = v282[19];
              uint64_t v1277 = (int *)v104[19];
              uint64_t v1278 = *(void *)v105[3];
              uint64_t v1279 = *(void *)v282[3];
              do
              {
                if ((int)v417 >= 1)
                {
                  int v1280 = *(_DWORD *)(v1275 + 4 * v1274);
                  int v1281 = v417;
                  uint64_t v1282 = v1277;
                  int v1283 = (unsigned int *)(v1276 + 4 * v1273);
                  do
                  {
                    unsigned int v1284 = *v1283;
                    if (*v1283)
                    {
                      int v1285 = 1;
                      int v1286 = v1280;
                      do
                      {
                        if (v1284) {
                          int v1287 = v1286;
                        }
                        else {
                          int v1287 = 1;
                        }
                        v1285 *= v1287;
                        v1286 *= v1286;
                        BOOL v17 = v1284 > 1;
                        v1284 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v1285 = 1;
                    }
                    *v1282++ = v1285;
                    ++v1283;
                    BOOL v17 = v1281-- <= 1;
                  }
                  while (!v17);
                  int v1271 = *v106;
                }
                v1274 += v1278;
                v1273 += v1279;
                v1277 += (int)v417;
                ++v1272;
              }
              while (v1272 < v1271);
            }
          }
          else
          {
            unint64_t v2446 = v104[6];
            if (v2446)
            {
              unint64_t v1921 = 0;
              uint64_t v2370 = v282[19];
              uint64_t v2392 = v105[19];
              v2469 = (int *)v104[19];
              do
              {
                uint64_t v1922 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1923 = v105[3];
                  int v1924 = v1921;
                  do
                  {
                    ldiv_t v1925 = ldiv(v1924, v106[v108]);
                    int v1924 = v1925.quot;
                    v1922 += *(void *)(v1923 + 8 * v108--) * v1925.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1926 = v2498;
                if ((v2498 & 0x80000000) != 0)
                {
                  LODWORD(v1927) = 0;
                }
                else
                {
                  uint64_t v1927 = 0;
                  uint64_t v1928 = v282[3];
                  int v1929 = v1921;
                  do
                  {
                    ldiv_t v1930 = ldiv(v1929, v283[v1926]);
                    int v1929 = v1930.quot;
                    v1927 += *(void *)(v1928 + 8 * v1926--) * v1930.rem;
                  }
                  while (v1926 != -1);
                }
                if ((int)v417 >= 1)
                {
                  int v1931 = *(_DWORD *)(v2392 + 4 * (int)v1922);
                  int v1932 = v417;
                  uint64_t v1933 = v2469;
                  uint64_t v1934 = (unsigned int *)(v2370 + 4 * (int)v1927);
                  do
                  {
                    unsigned int v1935 = *v1934;
                    if (*v1934)
                    {
                      int v1936 = 1;
                      int v1937 = v1931;
                      do
                      {
                        if (v1935) {
                          int v1938 = v1937;
                        }
                        else {
                          int v1938 = 1;
                        }
                        v1936 *= v1938;
                        v1937 *= v1937;
                        BOOL v17 = v1935 > 1;
                        v1935 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v1936 = 1;
                    }
                    *v1933++ = v1936;
                    ++v1934;
                    BOOL v17 = v1932-- <= 1;
                  }
                  while (!v17);
                }
                v2469 += (int)v417;
                v1921 += (int)v417;
                uint64_t v108 = v2476;
              }
              while (v1921 < v2446);
            }
          }
          break;
        case 2:
          if (v111 == 2)
          {
            int v1939 = *v106;
            if (*v106)
            {
              unint64_t v1940 = 0;
              uint64_t v1941 = 0;
              uint64_t v1942 = 0;
              uint64_t v1943 = v105[19];
              uint64_t v1944 = v282[19];
              uint64_t v1945 = (int *)v104[19];
              unint64_t v1946 = (uint64_t *)v105[3];
              uint64_t v1947 = *v1946;
              uint64_t v1948 = v1946[1];
              uint64_t v1949 = (uint64_t *)v282[3];
              uint64_t v1951 = *v1949;
              uint64_t v1950 = v1949[1];
              int v1952 = v106[1];
              int v1953 = v1952;
              do
              {
                if (v1953)
                {
                  unint64_t v1954 = 0;
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      unsigned int v1955 = *(_DWORD *)(v1944 + 4 * v1941);
                      int v1956 = v417;
                      unint64_t v1957 = v1945;
                      unint64_t v1958 = (int *)(v1943 + 4 * v1942);
                      do
                      {
                        if (v1955)
                        {
                          int v1959 = *v1958;
                          int v1960 = 1;
                          unsigned int v1961 = v1955;
                          do
                          {
                            if (v1961) {
                              int v1962 = v1959;
                            }
                            else {
                              int v1962 = 1;
                            }
                            v1960 *= v1962;
                            v1959 *= v1959;
                            BOOL v17 = v1961 > 1;
                            v1961 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1960 = 1;
                        }
                        *v1957++ = v1960;
                        ++v1958;
                        BOOL v17 = v1956-- <= 1;
                      }
                      while (!v17);
                      int v1952 = v106[1];
                    }
                    v1942 += v1948;
                    v1941 += v1950;
                    v1945 += (int)v417;
                    ++v1954;
                  }
                  while (v1954 < v1952);
                  uint64_t v1963 = v1952;
                  int v1939 = *v106;
                  int v1953 = v1952;
                }
                else
                {
                  uint64_t v1963 = 0;
                }
                uint64_t v1942 = v1942 + v1947 - v1963 * v1948;
                uint64_t v1941 = v1941 + v1951 - v1950 * v283[1];
                ++v1940;
              }
              while (v1940 < v1939);
            }
          }
          else if (v111 == 1)
          {
            int v1288 = *v106;
            if (*v106)
            {
              unint64_t v1289 = 0;
              uint64_t v1290 = 0;
              uint64_t v1291 = 0;
              uint64_t v1292 = v105[19];
              uint64_t v1293 = v282[19];
              unint64_t v1294 = (int *)v104[19];
              uint64_t v1295 = *(void *)v105[3];
              uint64_t v1296 = *(void *)v282[3];
              do
              {
                if ((int)v417 >= 1)
                {
                  unsigned int v1297 = *(_DWORD *)(v1293 + 4 * v1290);
                  int v1298 = v417;
                  uint64_t v1299 = v1294;
                  uint64_t v1300 = (int *)(v1292 + 4 * v1291);
                  do
                  {
                    if (v1297)
                    {
                      int v1301 = *v1300;
                      int v1302 = 1;
                      unsigned int v1303 = v1297;
                      do
                      {
                        if (v1303) {
                          int v1304 = v1301;
                        }
                        else {
                          int v1304 = 1;
                        }
                        v1302 *= v1304;
                        v1301 *= v1301;
                        BOOL v17 = v1303 > 1;
                        v1303 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v1302 = 1;
                    }
                    *v1299++ = v1302;
                    ++v1300;
                    BOOL v17 = v1298-- <= 1;
                  }
                  while (!v17);
                  int v1288 = *v106;
                }
                v1291 += v1295;
                v1290 += v1296;
                v1294 += (int)v417;
                ++v1289;
              }
              while (v1289 < v1288);
            }
          }
          else
          {
            unint64_t v2447 = v104[6];
            if (v2447)
            {
              unint64_t v1964 = 0;
              uint64_t v2371 = v282[19];
              uint64_t v2393 = v105[19];
              v2470 = (int *)v104[19];
              do
              {
                uint64_t v1965 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1966 = v105[3];
                  int v1967 = v1964;
                  do
                  {
                    ldiv_t v1968 = ldiv(v1967, v106[v108]);
                    int v1967 = v1968.quot;
                    v1965 += *(void *)(v1966 + 8 * v108--) * v1968.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1969 = v2498;
                if ((v2498 & 0x80000000) != 0)
                {
                  LODWORD(v1970) = 0;
                }
                else
                {
                  uint64_t v1970 = 0;
                  uint64_t v1971 = v282[3];
                  int v1972 = v1964;
                  do
                  {
                    ldiv_t v1973 = ldiv(v1972, v283[v1969]);
                    int v1972 = v1973.quot;
                    v1970 += *(void *)(v1971 + 8 * v1969--) * v1973.rem;
                  }
                  while (v1969 != -1);
                }
                if ((int)v417 >= 1)
                {
                  unsigned int v1974 = *(_DWORD *)(v2371 + 4 * (int)v1970);
                  int v1975 = v417;
                  uint64_t v1976 = v2470;
                  uint64_t v1977 = (int *)(v2393 + 4 * (int)v1965);
                  do
                  {
                    if (v1974)
                    {
                      int v1978 = *v1977;
                      int v1979 = 1;
                      unsigned int v1980 = v1974;
                      do
                      {
                        if (v1980) {
                          int v1981 = v1978;
                        }
                        else {
                          int v1981 = 1;
                        }
                        v1979 *= v1981;
                        v1978 *= v1978;
                        BOOL v17 = v1980 > 1;
                        v1980 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v1979 = 1;
                    }
                    *v1976++ = v1979;
                    ++v1977;
                    BOOL v17 = v1975-- <= 1;
                  }
                  while (!v17);
                }
                v2470 += (int)v417;
                v1964 += (int)v417;
                uint64_t v108 = v2476;
              }
              while (v1964 < v2447);
            }
          }
          break;
        case 3:
          if (v111 == 2)
          {
            int v1513 = *v106;
            if (*v106)
            {
              unint64_t v1514 = 0;
              uint64_t v1515 = 0;
              uint64_t v1516 = 0;
              uint64_t v1517 = v105[19];
              uint64_t v1518 = v282[19];
              int v1519 = (int *)v104[19];
              ldiv_t v1520 = (uint64_t *)v105[3];
              uint64_t v1521 = *v1520;
              uint64_t v1522 = v1520[1];
              uint64_t v1523 = (uint64_t *)v282[3];
              uint64_t v1525 = *v1523;
              uint64_t v1524 = v1523[1];
              int v1526 = v106[1];
              int v1527 = v1526;
              do
              {
                if (v1527)
                {
                  unint64_t v1528 = 0;
                  do
                  {
                    if ((int)v417 >= 1)
                    {
                      uint64_t v1529 = (unsigned int *)(v1518 + 4 * v1515);
                      int v1530 = v417;
                      uint64_t v1531 = v1519;
                      uint64_t v1532 = (int *)(v1517 + 4 * v1516);
                      do
                      {
                        unsigned int v1533 = *v1529;
                        if (*v1529)
                        {
                          int v1534 = *v1532;
                          int v1535 = 1;
                          do
                          {
                            if (v1533) {
                              int v1536 = v1534;
                            }
                            else {
                              int v1536 = 1;
                            }
                            v1535 *= v1536;
                            v1534 *= v1534;
                            BOOL v17 = v1533 > 1;
                            v1533 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1535 = 1;
                        }
                        *v1531++ = v1535;
                        ++v1532;
                        ++v1529;
                        BOOL v17 = v1530-- <= 1;
                      }
                      while (!v17);
                      int v1526 = v106[1];
                    }
                    v1516 += v1522;
                    v1515 += v1524;
                    v1519 += (int)v417;
                    ++v1528;
                  }
                  while (v1528 < v1526);
                  uint64_t v1537 = v1526;
                  int v1513 = *v106;
                  int v1527 = v1526;
                }
                else
                {
                  uint64_t v1537 = 0;
                }
                uint64_t v1516 = v1516 + v1521 - v1537 * v1522;
                uint64_t v1515 = v1515 + v1525 - v1524 * v283[1];
                ++v1514;
              }
              while (v1514 < v1513);
            }
          }
          else if (v111 == 1)
          {
            int v418 = *v106;
            if (*v106)
            {
              unint64_t v419 = 0;
              uint64_t v420 = 0;
              uint64_t v421 = 0;
              uint64_t v422 = v105[19];
              uint64_t v423 = v282[19];
              unint64_t v424 = (int *)v104[19];
              uint64_t v425 = *(void *)v105[3];
              uint64_t v426 = *(void *)v282[3];
              do
              {
                if ((int)v417 >= 1)
                {
                  int v427 = (unsigned int *)(v423 + 4 * v420);
                  int v428 = v417;
                  uint64_t v429 = v424;
                  uint64_t v430 = (int *)(v422 + 4 * v421);
                  do
                  {
                    unsigned int v431 = *v427;
                    if (*v427)
                    {
                      int v432 = *v430;
                      int v433 = 1;
                      do
                      {
                        if (v431) {
                          int v434 = v432;
                        }
                        else {
                          int v434 = 1;
                        }
                        v433 *= v434;
                        v432 *= v432;
                        BOOL v17 = v431 > 1;
                        v431 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v433 = 1;
                    }
                    *v429++ = v433;
                    ++v430;
                    ++v427;
                    BOOL v17 = v428-- <= 1;
                  }
                  while (!v17);
                  int v418 = *v106;
                }
                v421 += v425;
                v420 += v426;
                v424 += (int)v417;
                ++v419;
              }
              while (v419 < v418);
            }
          }
          else
          {
            unint64_t v2439 = v104[6];
            if (v2439)
            {
              unint64_t v1538 = 0;
              uint64_t v2365 = v282[19];
              uint64_t v2387 = v105[19];
              v2467 = (int *)v104[19];
              do
              {
                uint64_t v1539 = 0;
                if ((v108 & 0x80000000) == 0)
                {
                  uint64_t v1540 = v105[3];
                  int v1541 = v1538;
                  do
                  {
                    ldiv_t v1542 = ldiv(v1541, v106[v108]);
                    int v1541 = v1542.quot;
                    v1539 += *(void *)(v1540 + 8 * v108--) * v1542.rem;
                  }
                  while (v108 != -1);
                }
                uint64_t v1543 = v2498;
                if ((v2498 & 0x80000000) != 0)
                {
                  LODWORD(v1544) = 0;
                }
                else
                {
                  uint64_t v1544 = 0;
                  uint64_t v1545 = v282[3];
                  int v1546 = v1538;
                  do
                  {
                    ldiv_t v1547 = ldiv(v1546, v283[v1543]);
                    int v1546 = v1547.quot;
                    v1544 += *(void *)(v1545 + 8 * v1543--) * v1547.rem;
                  }
                  while (v1543 != -1);
                }
                if ((int)v417 >= 1)
                {
                  uint64_t v1548 = (unsigned int *)(v2365 + 4 * (int)v1544);
                  int v1549 = v417;
                  unsigned int v1550 = v2467;
                  uint64_t v1551 = (int *)(v2387 + 4 * (int)v1539);
                  do
                  {
                    unsigned int v1552 = *v1548;
                    if (*v1548)
                    {
                      int v1553 = *v1551;
                      int v1554 = 1;
                      do
                      {
                        if (v1552) {
                          int v1555 = v1553;
                        }
                        else {
                          int v1555 = 1;
                        }
                        v1554 *= v1555;
                        v1553 *= v1553;
                        BOOL v17 = v1552 > 1;
                        v1552 >>= 1;
                      }
                      while (v17);
                    }
                    else
                    {
                      int v1554 = 1;
                    }
                    *v1550++ = v1554;
                    ++v1551;
                    ++v1548;
                    BOOL v17 = v1549-- <= 1;
                  }
                  while (!v17);
                }
                v2467 += (int)v417;
                v1538 += (int)v417;
                uint64_t v108 = v2476;
              }
              while (v1538 < v2439);
            }
          }
          break;
        default:
LABEL_584:
          switch(v413)
          {
            case 1uLL:
              uint64_t v435 = v104[6];
              if (v435)
              {
                uint64_t v436 = 0;
                uint64_t v437 = 0;
                uint64_t v438 = 0;
                uint64_t v439 = v105[19];
                uint64_t v440 = v282[19];
                uint64_t v441 = v104[19];
                uint64_t v442 = *(void *)v105[3];
                uint64_t v443 = *(void *)v282[3];
                do
                {
                  unsigned int v444 = *(_DWORD *)(v440 + 4 * v437);
                  if (v444)
                  {
                    int v445 = *(_DWORD *)(v439 + 4 * v438);
                    int v446 = 1;
                    do
                    {
                      if (v444) {
                        int v447 = v445;
                      }
                      else {
                        int v447 = 1;
                      }
                      v446 *= v447;
                      v445 *= v445;
                      BOOL v17 = v444 > 1;
                      v444 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    int v446 = 1;
                  }
                  *(_DWORD *)(v441 + 4 * v436) = v446;
                  v438 += v442;
                  v437 += v443;
                  ++v436;
                }
                while (v436 != v435);
              }
              break;
            case 2uLL:
              int v767 = *v106;
              if (*v106)
              {
                unint64_t v768 = 0;
                uint64_t v769 = 0;
                uint64_t v770 = 0;
                uint64_t v771 = 0;
                uint64_t v772 = v105[19];
                uint64_t v773 = v282[19];
                uint64_t v774 = v104[19];
                uint64_t v775 = (uint64_t *)v105[3];
                uint64_t v776 = *v775;
                uint64_t v777 = v775[1];
                uint64_t v778 = (uint64_t *)v282[3];
                uint64_t v779 = *v778;
                uint64_t v780 = v778[1];
                int v781 = v106[1];
                do
                {
                  if (v781)
                  {
                    for (unint64_t i = 0; i < v781; ++i)
                    {
                      unsigned int v783 = *(_DWORD *)(v773 + 4 * v770);
                      if (v783)
                      {
                        int v784 = *(_DWORD *)(v772 + 4 * v771);
                        int v785 = 1;
                        do
                        {
                          if (v783) {
                            int v786 = v784;
                          }
                          else {
                            int v786 = 1;
                          }
                          v785 *= v786;
                          v784 *= v784;
                          BOOL v17 = v783 > 1;
                          v783 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        int v785 = 1;
                      }
                      uint64_t v787 = v769 + 1;
                      *(_DWORD *)(v774 + 4 * v769) = v785;
                      v771 += v777;
                      v770 += v780;
                      int v781 = v106[1];
                      ++v769;
                    }
                    uint64_t v788 = v781;
                    int v767 = *v106;
                    uint64_t v769 = v787;
                  }
                  else
                  {
                    uint64_t v788 = 0;
                  }
                  uint64_t v771 = v771 + v776 - v788 * v777;
                  uint64_t v770 = v770 + v779 - v780 * v283[1];
                  ++v768;
                }
                while (v768 < v767);
              }
              break;
            case 3uLL:
              int v789 = *v106;
              if (*v106)
              {
                unint64_t v790 = 0;
                uint64_t v791 = 0;
                uint64_t v792 = 0;
                uint64_t v793 = 0;
                uint64_t v794 = v105[19];
                uint64_t v795 = v282[19];
                uint64_t v796 = v104[19];
                uint64_t v797 = (uint64_t *)v105[3];
                uint64_t v798 = *v797;
                uint64_t v799 = v797[1];
                unint64_t v800 = (uint64_t *)v282[3];
                uint64_t v801 = *v800;
                uint64_t v802 = v800[1];
                int v803 = v106[1];
                int v804 = v803;
                do
                {
                  if (v804)
                  {
                    unint64_t v805 = 0;
                    uint64_t v806 = v797[2];
                    uint64_t v807 = v800[2];
                    int v808 = v106[2];
                    do
                    {
                      if (v808)
                      {
                        for (unint64_t j = 0; j < v808; ++j)
                        {
                          unsigned int v810 = *(_DWORD *)(v795 + 4 * v792);
                          if (v810)
                          {
                            int v811 = *(_DWORD *)(v794 + 4 * v793);
                            int v812 = 1;
                            do
                            {
                              if (v810) {
                                int v813 = v811;
                              }
                              else {
                                int v813 = 1;
                              }
                              v812 *= v813;
                              v811 *= v811;
                              BOOL v17 = v810 > 1;
                              v810 >>= 1;
                            }
                            while (v17);
                          }
                          else
                          {
                            int v812 = 1;
                          }
                          uint64_t v814 = v791 + 1;
                          *(_DWORD *)(v796 + 4 * v791) = v812;
                          v793 += v806;
                          v792 += v807;
                          int v808 = v106[2];
                          ++v791;
                        }
                        uint64_t v815 = v808;
                        int v803 = v106[1];
                        uint64_t v791 = v814;
                      }
                      else
                      {
                        uint64_t v815 = 0;
                      }
                      uint64_t v793 = v793 + v799 - v815 * v806;
                      uint64_t v792 = v792 + v802 - v807 * v283[2];
                      ++v805;
                    }
                    while (v805 < v803);
                    uint64_t v816 = v803;
                    int v789 = *v106;
                    int v804 = v803;
                  }
                  else
                  {
                    uint64_t v816 = 0;
                  }
                  uint64_t v793 = v793 + v798 - v816 * v799;
                  uint64_t v792 = v792 + v801 - v802 * v283[1];
                  ++v790;
                }
                while (v790 < v789);
              }
              break;
            case 4uLL:
              int v817 = *v106;
              if (*v106)
              {
                unint64_t v818 = 0;
                uint64_t v819 = 0;
                uint64_t v820 = 0;
                uint64_t v821 = 0;
                uint64_t v822 = v105[19];
                uint64_t v823 = v282[19];
                uint64_t v824 = v104[19];
                uint64_t v825 = (uint64_t *)v105[3];
                uint64_t v826 = *v825;
                uint64_t v827 = v825[1];
                uint64_t v828 = (uint64_t *)v282[3];
                uint64_t v829 = *v828;
                uint64_t v830 = v828[1];
                int v831 = v106[1];
                int v832 = v831;
                do
                {
                  if (v832)
                  {
                    unint64_t v833 = 0;
                    uint64_t v834 = v825[2];
                    uint64_t v835 = v828[2];
                    int v836 = v106[2];
                    int v837 = v836;
                    do
                    {
                      if (v837)
                      {
                        unint64_t v838 = 0;
                        uint64_t v839 = v825[3];
                        uint64_t v840 = v828[3];
                        int v841 = v106[3];
                        do
                        {
                          if (v841)
                          {
                            for (unint64_t k = 0; k < v841; ++k)
                            {
                              unsigned int v843 = *(_DWORD *)(v823 + 4 * v820);
                              if (v843)
                              {
                                int v844 = *(_DWORD *)(v822 + 4 * v821);
                                int v845 = 1;
                                do
                                {
                                  if (v843) {
                                    int v846 = v844;
                                  }
                                  else {
                                    int v846 = 1;
                                  }
                                  v845 *= v846;
                                  v844 *= v844;
                                  BOOL v17 = v843 > 1;
                                  v843 >>= 1;
                                }
                                while (v17);
                              }
                              else
                              {
                                int v845 = 1;
                              }
                              uint64_t v847 = v819 + 1;
                              *(_DWORD *)(v824 + 4 * v819) = v845;
                              v821 += v839;
                              v820 += v840;
                              int v841 = v106[3];
                              ++v819;
                            }
                            uint64_t v848 = v841;
                            int v836 = v106[2];
                            uint64_t v819 = v847;
                          }
                          else
                          {
                            uint64_t v848 = 0;
                          }
                          uint64_t v821 = v821 + v834 - v848 * v839;
                          uint64_t v820 = v820 + v835 - v840 * v283[3];
                          ++v838;
                        }
                        while (v838 < v836);
                        uint64_t v849 = v836;
                        int v831 = v106[1];
                        int v837 = v836;
                      }
                      else
                      {
                        uint64_t v849 = 0;
                      }
                      uint64_t v821 = v821 + v827 - v849 * v834;
                      uint64_t v820 = v820 + v830 - v835 * v283[2];
                      ++v833;
                    }
                    while (v833 < v831);
                    uint64_t v850 = v831;
                    int v817 = *v106;
                    int v832 = v831;
                  }
                  else
                  {
                    uint64_t v850 = 0;
                  }
                  uint64_t v821 = v821 + v826 - v850 * v827;
                  uint64_t v820 = v820 + v829 - v830 * v283[1];
                  ++v818;
                }
                while (v818 < v817);
              }
              break;
            default:
              uint64_t v752 = v104[6];
              if (v752)
              {
                uint64_t v753 = 0;
                uint64_t v2402 = v105[19];
                uint64_t v2429 = v104[19];
                uint64_t v2461 = v282[19];
                do
                {
                  uint64_t v754 = 0;
                  if ((v108 & 0x80000000) == 0)
                  {
                    uint64_t v755 = v105[3];
                    int v756 = v753;
                    do
                    {
                      ldiv_t v757 = ldiv(v756, v106[v108]);
                      int v756 = v757.quot;
                      v754 += *(void *)(v755 + 8 * v108--) * v757.rem;
                    }
                    while (v108 != -1);
                  }
                  uint64_t v758 = v2498;
                  if ((v2498 & 0x80000000) != 0)
                  {
                    LODWORD(v759) = 0;
                  }
                  else
                  {
                    uint64_t v759 = 0;
                    uint64_t v760 = v282[3];
                    int v761 = v753;
                    do
                    {
                      ldiv_t v762 = ldiv(v761, v283[v758]);
                      int v761 = v762.quot;
                      v759 += *(void *)(v760 + 8 * v758--) * v762.rem;
                    }
                    while (v758 != -1);
                  }
                  unsigned int v763 = *(_DWORD *)(v2461 + 4 * (int)v759);
                  if (v763)
                  {
                    int v764 = *(_DWORD *)(v2402 + 4 * (int)v754);
                    int v765 = 1;
                    uint64_t v108 = v2476;
                    do
                    {
                      if (v763) {
                        int v766 = v764;
                      }
                      else {
                        int v766 = 1;
                      }
                      v765 *= v766;
                      v764 *= v764;
                      BOOL v17 = v763 > 1;
                      v763 >>= 1;
                    }
                    while (v17);
                  }
                  else
                  {
                    int v765 = 1;
                    uint64_t v108 = v2476;
                  }
                  *(_DWORD *)(v2429 + 4 * v753++) = v765;
                }
                while (v753 != v752);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v23)
      {
        case 0:
          LOBYTE(v24) = **(unsigned char **)(*a2 + 152);
          if ((_BYTE)v24)
          {
            char v25 = **(unsigned char **)(*a1 + 152);
            char v15 = 1;
            do
            {
              unsigned int v26 = v24;
              if (v24) {
                char v27 = v25;
              }
              else {
                char v27 = 1;
              }
              v15 *= v27;
              int v24 = (char)v24 >> 1;
              v25 *= v25;
            }
            while (v26 > 1);
          }
          else
          {
LABEL_323:
            char v15 = 1;
          }
LABEL_324:
          **(unsigned char **)(*(void *)a3 + 152) = v15;
          return;
        case 1:
          int v145 = *(_DWORD *)(*a2 + 160);
          if (v145 >= 1)
          {
            char v146 = **(unsigned char **)(*a1 + 152);
            int v147 = *(char **)(*(void *)a3 + 152);
            int v148 = *(unsigned char **)(*a2 + 152);
            do
            {
              LOBYTE(v149) = *v148;
              if (*v148)
              {
                char v150 = 1;
                char v151 = v146;
                do
                {
                  unsigned int v152 = v149;
                  if (v149) {
                    char v153 = v151;
                  }
                  else {
                    char v153 = 1;
                  }
                  v150 *= v153;
                  int v149 = (char)v149 >> 1;
                  v151 *= v151;
                }
                while (v152 > 1);
              }
              else
              {
                char v150 = 1;
              }
              *v147++ = v150;
              ++v148;
              BOOL v17 = v145-- <= 1;
            }
            while (!v17);
          }
          return;
        case 2:
          int v154 = *(_DWORD *)(*a1 + 160);
          if (v154 >= 1)
          {
            int v155 = **(unsigned __int8 **)(*a2 + 152);
            unsigned int v156 = *(char **)(*(void *)a3 + 152);
            int v157 = *(char **)(*a1 + 152);
            do
            {
              if (v155)
              {
                char v158 = *v157;
                char v159 = 1;
                LOBYTE(v160) = v155;
                do
                {
                  unsigned int v161 = v160;
                  if (v160) {
                    char v162 = v158;
                  }
                  else {
                    char v162 = 1;
                  }
                  v159 *= v162;
                  int v160 = (char)v160 >> 1;
                  v158 *= v158;
                }
                while (v161 > 1);
              }
              else
              {
                char v159 = 1;
              }
              *v156++ = v159;
              ++v157;
              BOOL v17 = v154-- <= 1;
            }
            while (!v17);
          }
          return;
        case 3:
          int v163 = *(_DWORD *)(*(void *)a3 + 48);
          if (v163 >= 1)
          {
            int v164 = *(char **)(*(void *)a3 + 152);
            uint64_t v165 = *(unsigned char **)(*a2 + 152);
            uint64_t v166 = *(char **)(*a1 + 152);
            do
            {
              LOBYTE(v167) = *v165;
              if (*v165)
              {
                char v168 = *v166;
                char v169 = 1;
                do
                {
                  unsigned int v170 = v167;
                  if (v167) {
                    char v171 = v168;
                  }
                  else {
                    char v171 = 1;
                  }
                  v169 *= v171;
                  int v167 = (char)v167 >> 1;
                  v168 *= v168;
                }
                while (v170 > 1);
              }
              else
              {
                char v169 = 1;
              }
              *v164++ = v169;
              ++v166;
              ++v165;
              BOOL v17 = v163-- <= 1;
            }
            while (!v17);
          }
          return;
        default:
          uint64_t v137 = *(void **)a3;
          uint64_t v138 = *a1;
          int v139 = *(int **)*a1;
          uint64_t v140 = (*(void *)(*a1 + 8) - (void)v139) >> 2;
          int v141 = v140 - 1;
          if ((int)v140 - 1 >= -1) {
            int v141 = -1;
          }
          int v142 = v141 + 1;
          int v143 = v140 + 1;
          while (1)
          {
            unsigned int v144 = v143 - 2;
            if (v143 - 2 < 0) {
              break;
            }
            --v143;
            if (*(void *)(*(void *)(v138 + 24) + 8 * v144) != *(void *)(v137[3] + 8 * v144)) {
              goto LABEL_351;
            }
          }
          int v143 = v142;
LABEL_351:
          int v290 = (int **)*a2;
          unsigned int v291 = *(int **)*a2;
          uint64_t v292 = (*(void *)(*a2 + 8) - (void)v291) >> 2;
          int v293 = v292 - 1;
          if ((int)v292 - 1 >= -1) {
            int v293 = -1;
          }
          int v294 = v293 + 1;
          int v295 = v292 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)&v290[3][2 * v296] != *(void *)(v137[3] + 8 * v296)) {
              goto LABEL_397;
            }
          }
          int v295 = v294;
LABEL_397:
          int v326 = v140 + 1;
          while (1)
          {
            unsigned int v327 = v326 - 2;
            if (v326 - 2 < 0) {
              break;
            }
            --v326;
            if (*(void *)(*(void *)(v138 + 24) + 8 * v327)) {
              goto LABEL_432;
            }
          }
          int v326 = v142;
LABEL_432:
          int v340 = v292 + 1;
          while (1)
          {
            int v341 = v340 - 2;
            if (v340 - 2 < 0) {
              break;
            }
            --v340;
            if (*(void *)&v290[3][2 * v341]) {
              goto LABEL_598;
            }
          }
          int v340 = v294;
LABEL_598:
          unint64_t v448 = (uint64_t)(v137[1] - *v137) >> 2;
          if (v143 <= v295) {
            int v449 = v295;
          }
          else {
            int v449 = v143;
          }
          if (v143 <= v340) {
            int v143 = v340;
          }
          if (v326 > v295) {
            int v295 = v326;
          }
          if (v448 > v295)
          {
            int v450 = 1;
          }
          else
          {
            int v295 = (uint64_t)(v137[1] - *v137) >> 2;
            int v450 = 4;
          }
          if (v448 > v143)
          {
            int v451 = 2;
          }
          else
          {
            int v143 = v295;
            int v451 = v450;
          }
          if (v448 > v449)
          {
            int v143 = v449;
            int v451 = 3;
          }
          if (!v143) {
            goto LABEL_637;
          }
          unint64_t v452 = *(void *)(v137[3] + 8 * (v143 - 1));
          if (v452 < 0x10) {
            goto LABEL_637;
          }
          switch(v451)
          {
            case 1:
              if (v143 == 2)
              {
                int v1982 = *v139;
                if (*v139)
                {
                  unint64_t v1983 = 0;
                  uint64_t v1984 = 0;
                  uint64_t v1985 = 0;
                  uint64_t v1986 = *(void *)(v138 + 152);
                  uint64_t v1987 = v290[19];
                  uint64_t v1988 = (char *)v137[19];
                  do
                  {
                    if (v139[1])
                    {
                      unint64_t v1989 = 0;
                      do
                      {
                        if ((int)v452 >= 1)
                        {
                          char v1990 = *(unsigned char *)(v1986 + v1985);
                          unint64_t v1991 = (char *)v1987 + v1984;
                          int v1992 = v452;
                          unint64_t v1993 = v1988;
                          do
                          {
                            LOBYTE(v1994) = *v1991;
                            if (*v1991)
                            {
                              char v1995 = 1;
                              char v1996 = v1990;
                              do
                              {
                                unsigned int v1997 = v1994;
                                if (v1994) {
                                  char v1998 = v1996;
                                }
                                else {
                                  char v1998 = 1;
                                }
                                v1995 *= v1998;
                                int v1994 = (char)v1994 >> 1;
                                v1996 *= v1996;
                              }
                              while (v1997 > 1);
                            }
                            else
                            {
                              char v1995 = 1;
                            }
                            *v1993++ = v1995;
                            ++v1991;
                            BOOL v17 = v1992-- <= 1;
                          }
                          while (!v17);
                          uint64_t v138 = *a1;
                          int v290 = (int **)*a2;
                          int v139 = *(int **)*a1;
                        }
                        unint64_t v1999 = *(void **)(v138 + 24);
                        uint64_t v2000 = v1999[1];
                        v1985 += v2000;
                        v1984 += *((void *)v290[3] + 1);
                        v1988 += (int)v452;
                        ++v1989;
                        unint64_t v2001 = v139[1];
                      }
                      while (v1989 < v2001);
                      int v1982 = *v139;
                      unsigned int v291 = *v290;
                    }
                    else
                    {
                      unint64_t v2001 = 0;
                      unint64_t v1999 = *(void **)(v138 + 24);
                      uint64_t v2000 = v1999[1];
                    }
                    uint64_t v1985 = *v1999 + v1985 - v2001 * v2000;
                    uint64_t v1984 = *(void *)v290[3] + v1984 - *((void *)v290[3] + 1) * v291[1];
                    ++v1983;
                  }
                  while (v1983 < v1982);
                }
              }
              else if (v143 == 1)
              {
                int v1305 = *v139;
                if (*v139)
                {
                  unint64_t v1306 = 0;
                  uint64_t v1307 = 0;
                  uint64_t v1308 = 0;
                  uint64_t v1309 = *(void *)(v138 + 152);
                  uint64_t v1310 = v290[19];
                  uint64_t v1311 = (char *)v137[19];
                  do
                  {
                    if ((int)v452 >= 1)
                    {
                      char v1312 = *(unsigned char *)(v1309 + v1308);
                      ldiv_t v1313 = (char *)v1310 + v1307;
                      int v1314 = v452;
                      uint64_t v1315 = v1311;
                      do
                      {
                        LOBYTE(v1316) = *v1313;
                        if (*v1313)
                        {
                          char v1317 = 1;
                          char v1318 = v1312;
                          do
                          {
                            unsigned int v1319 = v1316;
                            if (v1316) {
                              char v1320 = v1318;
                            }
                            else {
                              char v1320 = 1;
                            }
                            v1317 *= v1320;
                            int v1316 = (char)v1316 >> 1;
                            v1318 *= v1318;
                          }
                          while (v1319 > 1);
                        }
                        else
                        {
                          char v1317 = 1;
                        }
                        *v1315++ = v1317;
                        ++v1313;
                        BOOL v17 = v1314-- <= 1;
                      }
                      while (!v17);
                      uint64_t v138 = *a1;
                      int v290 = (int **)*a2;
                      int v1305 = **(_DWORD **)*a1;
                    }
                    v1308 += **(void **)(v138 + 24);
                    v1307 += *(void *)v290[3];
                    v1311 += (int)v452;
                    ++v1306;
                  }
                  while (v1306 < v1305);
                }
              }
              else if (v137[6])
              {
                unint64_t v2512 = 0;
                uint64_t v2448 = *(void *)(v138 + 152);
                v2419 = v290[19];
                v2493 = (char *)v137[19];
                do
                {
                  uint64_t v2002 = *(void *)*a1;
                  unint64_t v2003 = (unint64_t)(*(void *)(*a1 + 8) - v2002) >> 2;
                  uint64_t v2004 = 0;
                  uint64_t v2005 = (v2003 - 1);
                  if ((int)v2003 - 1 >= 0)
                  {
                    uint64_t v2006 = *(void *)(*a1 + 24);
                    int v2007 = v2512;
                    do
                    {
                      ldiv_t v2008 = ldiv(v2007, *(int *)(v2002 + 4 * v2005));
                      int v2007 = v2008.quot;
                      v2004 += *(void *)(v2006 + 8 * v2005--) * v2008.rem;
                    }
                    while (v2005 != -1);
                  }
                  uint64_t v2009 = *(void *)*a2;
                  unint64_t v2010 = (unint64_t)(*(void *)(*a2 + 8) - v2009) >> 2;
                  uint64_t v2011 = 0;
                  uint64_t v2012 = (v2010 - 1);
                  if ((int)v2010 - 1 >= 0)
                  {
                    uint64_t v2013 = *(void *)(*a2 + 24);
                    int v2014 = v2512;
                    do
                    {
                      ldiv_t v2015 = ldiv(v2014, *(int *)(v2009 + 4 * v2012));
                      int v2014 = v2015.quot;
                      v2011 += *(void *)(v2013 + 8 * v2012--) * v2015.rem;
                    }
                    while (v2012 != -1);
                  }
                  if ((int)v452 >= 1)
                  {
                    char v2016 = *(unsigned char *)(v2448 + (int)v2004);
                    int v2017 = v452;
                    int v2018 = v2493;
                    int v2019 = (char *)v2419 + (int)v2011;
                    do
                    {
                      LOBYTE(v2020) = *v2019;
                      if (*v2019)
                      {
                        char v2021 = 1;
                        char v2022 = v2016;
                        do
                        {
                          unsigned int v2023 = v2020;
                          if (v2020) {
                            char v2024 = v2022;
                          }
                          else {
                            char v2024 = 1;
                          }
                          v2021 *= v2024;
                          int v2020 = (char)v2020 >> 1;
                          v2022 *= v2022;
                        }
                        while (v2023 > 1);
                      }
                      else
                      {
                        char v2021 = 1;
                      }
                      *v2018++ = v2021;
                      ++v2019;
                      BOOL v17 = v2017-- <= 1;
                    }
                    while (!v17);
                    uint64_t v137 = *(void **)a3;
                  }
                  v2493 += (int)v452;
                  v2512 += (int)v452;
                }
                while (v2512 < v137[6]);
              }
              break;
            case 2:
              if (v143 == 2)
              {
                int v2025 = *v139;
                if (*v139)
                {
                  unint64_t v2026 = 0;
                  uint64_t v2027 = 0;
                  uint64_t v2028 = 0;
                  uint64_t v2029 = *(void *)(v138 + 152);
                  uint64_t v2030 = v290[19];
                  uint64_t v2031 = (char *)v137[19];
                  do
                  {
                    if (v139[1])
                    {
                      unint64_t v2032 = 0;
                      do
                      {
                        if ((int)v452 >= 1)
                        {
                          int v2033 = *((unsigned __int8 *)v2030 + v2027);
                          uint64_t v2034 = (char *)(v2029 + v2028);
                          int v2035 = v452;
                          uint64_t v2036 = v2031;
                          do
                          {
                            if (v2033)
                            {
                              char v2037 = *v2034;
                              char v2038 = 1;
                              LOBYTE(v2039) = v2033;
                              do
                              {
                                unsigned int v2040 = v2039;
                                if (v2039) {
                                  char v2041 = v2037;
                                }
                                else {
                                  char v2041 = 1;
                                }
                                v2038 *= v2041;
                                int v2039 = (char)v2039 >> 1;
                                v2037 *= v2037;
                              }
                              while (v2040 > 1);
                            }
                            else
                            {
                              char v2038 = 1;
                            }
                            *v2036++ = v2038;
                            ++v2034;
                            BOOL v17 = v2035-- <= 1;
                          }
                          while (!v17);
                          uint64_t v138 = *a1;
                          int v290 = (int **)*a2;
                          int v139 = *(int **)*a1;
                        }
                        unint64_t v2042 = *(void **)(v138 + 24);
                        uint64_t v2043 = v2042[1];
                        v2028 += v2043;
                        v2027 += *((void *)v290[3] + 1);
                        v2031 += (int)v452;
                        ++v2032;
                        unint64_t v2044 = v139[1];
                      }
                      while (v2032 < v2044);
                      int v2025 = *v139;
                      unsigned int v291 = *v290;
                    }
                    else
                    {
                      unint64_t v2044 = 0;
                      unint64_t v2042 = *(void **)(v138 + 24);
                      uint64_t v2043 = v2042[1];
                    }
                    uint64_t v2028 = *v2042 + v2028 - v2044 * v2043;
                    uint64_t v2027 = *(void *)v290[3] + v2027 - *((void *)v290[3] + 1) * v291[1];
                    ++v2026;
                  }
                  while (v2026 < v2025);
                }
              }
              else if (v143 == 1)
              {
                int v1321 = *v139;
                if (*v139)
                {
                  unint64_t v1322 = 0;
                  uint64_t v1323 = 0;
                  uint64_t v1324 = 0;
                  uint64_t v1325 = *(void *)(v138 + 152);
                  uint64_t v1326 = v290[19];
                  uint64_t v1327 = (char *)v137[19];
                  do
                  {
                    if ((int)v452 >= 1)
                    {
                      int v1328 = *((unsigned __int8 *)v1326 + v1323);
                      uint64_t v1329 = (char *)(v1325 + v1324);
                      int v1330 = v452;
                      uint64_t v1331 = v1327;
                      do
                      {
                        if (v1328)
                        {
                          char v1332 = *v1329;
                          char v1333 = 1;
                          LOBYTE(v1334) = v1328;
                          do
                          {
                            unsigned int v1335 = v1334;
                            if (v1334) {
                              char v1336 = v1332;
                            }
                            else {
                              char v1336 = 1;
                            }
                            v1333 *= v1336;
                            int v1334 = (char)v1334 >> 1;
                            v1332 *= v1332;
                          }
                          while (v1335 > 1);
                        }
                        else
                        {
                          char v1333 = 1;
                        }
                        *v1331++ = v1333;
                        ++v1329;
                        BOOL v17 = v1330-- <= 1;
                      }
                      while (!v17);
                      uint64_t v138 = *a1;
                      int v290 = (int **)*a2;
                      int v1321 = **(_DWORD **)*a1;
                    }
                    v1324 += **(void **)(v138 + 24);
                    v1323 += *(void *)v290[3];
                    v1327 += (int)v452;
                    ++v1322;
                  }
                  while (v1322 < v1321);
                }
              }
              else if (v137[6])
              {
                unint64_t v2513 = 0;
                uint64_t v2449 = *(void *)(v138 + 152);
                v2420 = v290[19];
                v2494 = (char *)v137[19];
                do
                {
                  uint64_t v2045 = *(void *)*a1;
                  unint64_t v2046 = (unint64_t)(*(void *)(*a1 + 8) - v2045) >> 2;
                  uint64_t v2047 = 0;
                  uint64_t v2048 = (v2046 - 1);
                  if ((int)v2046 - 1 >= 0)
                  {
                    uint64_t v2049 = *(void *)(*a1 + 24);
                    int v2050 = v2513;
                    do
                    {
                      ldiv_t v2051 = ldiv(v2050, *(int *)(v2045 + 4 * v2048));
                      int v2050 = v2051.quot;
                      v2047 += *(void *)(v2049 + 8 * v2048--) * v2051.rem;
                    }
                    while (v2048 != -1);
                  }
                  uint64_t v2052 = *(void *)*a2;
                  unint64_t v2053 = (unint64_t)(*(void *)(*a2 + 8) - v2052) >> 2;
                  uint64_t v2054 = 0;
                  uint64_t v2055 = (v2053 - 1);
                  if ((int)v2053 - 1 >= 0)
                  {
                    uint64_t v2056 = *(void *)(*a2 + 24);
                    int v2057 = v2513;
                    do
                    {
                      ldiv_t v2058 = ldiv(v2057, *(int *)(v2052 + 4 * v2055));
                      int v2057 = v2058.quot;
                      v2054 += *(void *)(v2056 + 8 * v2055--) * v2058.rem;
                    }
                    while (v2055 != -1);
                  }
                  if ((int)v452 >= 1)
                  {
                    int v2059 = *((unsigned __int8 *)v2420 + (int)v2054);
                    int v2060 = v452;
                    uint64_t v2061 = v2494;
                    unint64_t v2062 = (char *)(v2449 + (int)v2047);
                    do
                    {
                      if (v2059)
                      {
                        char v2063 = *v2062;
                        char v2064 = 1;
                        LOBYTE(v2065) = v2059;
                        do
                        {
                          unsigned int v2066 = v2065;
                          if (v2065) {
                            char v2067 = v2063;
                          }
                          else {
                            char v2067 = 1;
                          }
                          v2064 *= v2067;
                          int v2065 = (char)v2065 >> 1;
                          v2063 *= v2063;
                        }
                        while (v2066 > 1);
                      }
                      else
                      {
                        char v2064 = 1;
                      }
                      *v2061++ = v2064;
                      ++v2062;
                      BOOL v17 = v2060-- <= 1;
                    }
                    while (!v17);
                    uint64_t v137 = *(void **)a3;
                  }
                  v2494 += (int)v452;
                  v2513 += (int)v452;
                }
                while (v2513 < v137[6]);
              }
              break;
            case 3:
              if (v143 == 2)
              {
                int v1556 = *v139;
                if (*v139)
                {
                  unint64_t v1557 = 0;
                  uint64_t v1558 = 0;
                  uint64_t v1559 = 0;
                  uint64_t v1560 = *(void *)(v138 + 152);
                  uint64_t v1561 = v290[19];
                  int v1562 = (char *)v137[19];
                  do
                  {
                    if (v139[1])
                    {
                      unint64_t v1563 = 0;
                      do
                      {
                        if ((int)v452 >= 1)
                        {
                          uint64_t v1564 = (char *)v1561 + v1558;
                          uint64_t v1565 = (char *)(v1560 + v1559);
                          int v1566 = v452;
                          uint64_t v1567 = v1562;
                          do
                          {
                            LOBYTE(v1568) = *v1564;
                            if (*v1564)
                            {
                              char v1569 = *v1565;
                              char v1570 = 1;
                              do
                              {
                                unsigned int v1571 = v1568;
                                if (v1568) {
                                  char v1572 = v1569;
                                }
                                else {
                                  char v1572 = 1;
                                }
                                v1570 *= v1572;
                                int v1568 = (char)v1568 >> 1;
                                v1569 *= v1569;
                              }
                              while (v1571 > 1);
                            }
                            else
                            {
                              char v1570 = 1;
                            }
                            *v1567++ = v1570;
                            ++v1565;
                            ++v1564;
                            BOOL v17 = v1566-- <= 1;
                          }
                          while (!v17);
                          uint64_t v138 = *a1;
                          int v290 = (int **)*a2;
                          int v139 = *(int **)*a1;
                        }
                        uint64_t v1573 = *(void **)(v138 + 24);
                        uint64_t v1574 = v1573[1];
                        v1559 += v1574;
                        v1558 += *((void *)v290[3] + 1);
                        v1562 += (int)v452;
                        ++v1563;
                        unint64_t v1575 = v139[1];
                      }
                      while (v1563 < v1575);
                      int v1556 = *v139;
                      unsigned int v291 = *v290;
                    }
                    else
                    {
                      unint64_t v1575 = 0;
                      uint64_t v1573 = *(void **)(v138 + 24);
                      uint64_t v1574 = v1573[1];
                    }
                    uint64_t v1559 = *v1573 + v1559 - v1575 * v1574;
                    uint64_t v1558 = *(void *)v290[3] + v1558 - *((void *)v290[3] + 1) * v291[1];
                    ++v1557;
                  }
                  while (v1557 < v1556);
                }
              }
              else if (v143 == 1)
              {
                int v453 = *v139;
                if (*v139)
                {
                  unint64_t v454 = 0;
                  uint64_t v455 = 0;
                  uint64_t v456 = 0;
                  uint64_t v457 = *(void *)(v138 + 152);
                  uint64_t v458 = v290[19];
                  uint64_t v459 = (char *)v137[19];
                  do
                  {
                    if ((int)v452 >= 1)
                    {
                      uint64_t v460 = (char *)v458 + v455;
                      uint64_t v461 = (char *)(v457 + v456);
                      int v462 = v452;
                      unint64_t v463 = v459;
                      do
                      {
                        LOBYTE(v464) = *v460;
                        if (*v460)
                        {
                          char v465 = *v461;
                          char v466 = 1;
                          do
                          {
                            unsigned int v467 = v464;
                            if (v464) {
                              char v468 = v465;
                            }
                            else {
                              char v468 = 1;
                            }
                            v466 *= v468;
                            int v464 = (char)v464 >> 1;
                            v465 *= v465;
                          }
                          while (v467 > 1);
                        }
                        else
                        {
                          char v466 = 1;
                        }
                        *v463++ = v466;
                        ++v461;
                        ++v460;
                        BOOL v17 = v462-- <= 1;
                      }
                      while (!v17);
                      uint64_t v138 = *a1;
                      int v290 = (int **)*a2;
                      int v453 = **(_DWORD **)*a1;
                    }
                    v456 += **(void **)(v138 + 24);
                    v455 += *(void *)v290[3];
                    v459 += (int)v452;
                    ++v454;
                  }
                  while (v454 < v453);
                }
              }
              else if (v137[6])
              {
                unint64_t v2509 = 0;
                uint64_t v2440 = *(void *)(v138 + 152);
                v2411 = v290[19];
                v2489 = (char *)v137[19];
                do
                {
                  uint64_t v1576 = *(void *)*a1;
                  unint64_t v1577 = (unint64_t)(*(void *)(*a1 + 8) - v1576) >> 2;
                  uint64_t v1578 = 0;
                  uint64_t v1579 = (v1577 - 1);
                  if ((int)v1577 - 1 >= 0)
                  {
                    uint64_t v1580 = *(void *)(*a1 + 24);
                    int v1581 = v2509;
                    do
                    {
                      ldiv_t v1582 = ldiv(v1581, *(int *)(v1576 + 4 * v1579));
                      int v1581 = v1582.quot;
                      v1578 += *(void *)(v1580 + 8 * v1579--) * v1582.rem;
                    }
                    while (v1579 != -1);
                  }
                  uint64_t v1583 = *(void *)*a2;
                  unint64_t v1584 = (unint64_t)(*(void *)(*a2 + 8) - v1583) >> 2;
                  uint64_t v1585 = 0;
                  uint64_t v1586 = (v1584 - 1);
                  if ((int)v1584 - 1 >= 0)
                  {
                    uint64_t v1587 = *(void *)(*a2 + 24);
                    int v1588 = v2509;
                    do
                    {
                      ldiv_t v1589 = ldiv(v1588, *(int *)(v1583 + 4 * v1586));
                      int v1588 = v1589.quot;
                      v1585 += *(void *)(v1587 + 8 * v1586--) * v1589.rem;
                    }
                    while (v1586 != -1);
                  }
                  if ((int)v452 >= 1)
                  {
                    ldiv_t v1590 = (char *)v2411 + (int)v1585;
                    int v1591 = v452;
                    uint64_t v1592 = v2489;
                    uint64_t v1593 = (char *)(v2440 + (int)v1578);
                    do
                    {
                      LOBYTE(v1594) = *v1590;
                      if (*v1590)
                      {
                        char v1595 = *v1593;
                        char v1596 = 1;
                        do
                        {
                          unsigned int v1597 = v1594;
                          if (v1594) {
                            char v1598 = v1595;
                          }
                          else {
                            char v1598 = 1;
                          }
                          v1596 *= v1598;
                          int v1594 = (char)v1594 >> 1;
                          v1595 *= v1595;
                        }
                        while (v1597 > 1);
                      }
                      else
                      {
                        char v1596 = 1;
                      }
                      *v1592++ = v1596;
                      ++v1593;
                      ++v1590;
                      BOOL v17 = v1591-- <= 1;
                    }
                    while (!v17);
                    uint64_t v137 = *(void **)a3;
                  }
                  v2489 += (int)v452;
                  v2509 += (int)v452;
                }
                while (v2509 < v137[6]);
              }
              break;
            default:
LABEL_637:
              switch(v448)
              {
                case 1uLL:
                  if (v137[6])
                  {
                    unint64_t v469 = 0;
                    uint64_t v470 = 0;
                    uint64_t v471 = 0;
                    uint64_t v472 = *(void *)(v138 + 152);
                    uint64_t v473 = v290[19];
                    uint64_t v474 = v137[19];
                    do
                    {
                      LOBYTE(v475) = *((unsigned char *)v473 + v470);
                      if ((_BYTE)v475)
                      {
                        char v476 = *(unsigned char *)(v472 + v471);
                        char v477 = 1;
                        do
                        {
                          unsigned int v478 = v475;
                          if (v475) {
                            char v479 = v476;
                          }
                          else {
                            char v479 = 1;
                          }
                          v477 *= v479;
                          int v475 = (char)v475 >> 1;
                          v476 *= v476;
                        }
                        while (v478 > 1);
                      }
                      else
                      {
                        char v477 = 1;
                      }
                      *(unsigned char *)(v474 + v469) = v477;
                      v471 += **(void **)(*a1 + 24);
                      v470 += **(void **)(*a2 + 24);
                      ++v469;
                    }
                    while (v469 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v872 = *v139;
                  if (*v139)
                  {
                    unint64_t v873 = 0;
                    uint64_t v874 = 0;
                    uint64_t v875 = 0;
                    uint64_t v876 = 0;
                    uint64_t v877 = *(void *)(v138 + 152);
                    uint64_t v878 = v290[19];
                    uint64_t v879 = v137[19];
                    do
                    {
                      if (v139[1])
                      {
                        unint64_t v880 = 0;
                        do
                        {
                          LOBYTE(v881) = *((unsigned char *)v878 + v875);
                          if ((_BYTE)v881)
                          {
                            char v882 = *(unsigned char *)(v877 + v876);
                            char v883 = 1;
                            do
                            {
                              unsigned int v884 = v881;
                              if (v881) {
                                char v885 = v882;
                              }
                              else {
                                char v885 = 1;
                              }
                              v883 *= v885;
                              int v881 = (char)v881 >> 1;
                              v882 *= v882;
                            }
                            while (v884 > 1);
                          }
                          else
                          {
                            char v883 = 1;
                          }
                          uint64_t v886 = v874 + 1;
                          *(unsigned char *)(v879 + v874) = v883;
                          uint64_t v138 = *a1;
                          uint64_t v887 = *(void **)(*a1 + 24);
                          uint64_t v888 = v887[1];
                          v876 += v888;
                          int v290 = (int **)*a2;
                          uint64_t v889 = *(int **)(*a2 + 24);
                          uint64_t v890 = *((void *)v889 + 1);
                          v875 += v890;
                          ++v880;
                          int v139 = *(int **)*a1;
                          unint64_t v891 = v139[1];
                          ++v874;
                        }
                        while (v880 < v891);
                        int v872 = *v139;
                        unsigned int v291 = *v290;
                        uint64_t v874 = v886;
                      }
                      else
                      {
                        unint64_t v891 = 0;
                        uint64_t v887 = *(void **)(v138 + 24);
                        uint64_t v888 = v887[1];
                        uint64_t v889 = v290[3];
                        uint64_t v890 = *((void *)v889 + 1);
                      }
                      uint64_t v876 = *v887 + v876 - v891 * v888;
                      uint64_t v875 = *(void *)v889 + v875 - v890 * v291[1];
                      ++v873;
                    }
                    while (v873 < v872);
                  }
                  break;
                case 3uLL:
                  int v892 = *v139;
                  if (*v139)
                  {
                    unint64_t v893 = 0;
                    uint64_t v894 = 0;
                    uint64_t v895 = 0;
                    uint64_t v896 = 0;
                    uint64_t v897 = *(void *)(v138 + 152);
                    uint64_t v898 = v290[19];
                    uint64_t v899 = v137[19];
                    do
                    {
                      if (v139[1])
                      {
                        unint64_t v900 = 0;
                        do
                        {
                          if (v139[2])
                          {
                            unint64_t v901 = 0;
                            do
                            {
                              LOBYTE(v902) = *((unsigned char *)v898 + v895);
                              if ((_BYTE)v902)
                              {
                                char v903 = *(unsigned char *)(v897 + v896);
                                char v904 = 1;
                                do
                                {
                                  unsigned int v905 = v902;
                                  if (v902) {
                                    char v906 = v903;
                                  }
                                  else {
                                    char v906 = 1;
                                  }
                                  v904 *= v906;
                                  int v902 = (char)v902 >> 1;
                                  v903 *= v903;
                                }
                                while (v905 > 1);
                              }
                              else
                              {
                                char v904 = 1;
                              }
                              uint64_t v907 = v894 + 1;
                              *(unsigned char *)(v899 + v894) = v904;
                              uint64_t v138 = *a1;
                              uint64_t v908 = *(void **)(*a1 + 24);
                              uint64_t v909 = v908[2];
                              v896 += v909;
                              int v290 = (int **)*a2;
                              uint64_t v910 = *(int **)(*a2 + 24);
                              uint64_t v911 = *((void *)v910 + 2);
                              v895 += v911;
                              ++v901;
                              int v139 = *(int **)*a1;
                              unint64_t v912 = v139[2];
                              ++v894;
                            }
                            while (v901 < v912);
                            unsigned int v291 = *v290;
                            uint64_t v894 = v907;
                          }
                          else
                          {
                            unint64_t v912 = 0;
                            uint64_t v908 = *(void **)(v138 + 24);
                            uint64_t v909 = v908[2];
                            uint64_t v910 = v290[3];
                            uint64_t v911 = *((void *)v910 + 2);
                          }
                          uint64_t v913 = v908[1];
                          uint64_t v896 = v913 + v896 - v912 * v909;
                          uint64_t v895 = *((void *)v910 + 1) + v895 - v911 * v291[2];
                          ++v900;
                          unint64_t v914 = v139[1];
                        }
                        while (v900 < v914);
                        int v892 = *v139;
                      }
                      else
                      {
                        unint64_t v914 = 0;
                        uint64_t v908 = *(void **)(v138 + 24);
                        uint64_t v913 = v908[1];
                      }
                      uint64_t v896 = *v908 + v896 - v914 * v913;
                      uint64_t v895 = *(void *)v290[3] + v895 - *((void *)v290[3] + 1) * v291[1];
                      ++v893;
                    }
                    while (v893 < v892);
                  }
                  break;
                case 4uLL:
                  int v915 = *v139;
                  if (*v139)
                  {
                    unint64_t v916 = 0;
                    uint64_t v917 = 0;
                    uint64_t v918 = 0;
                    uint64_t v919 = 0;
                    uint64_t v920 = *(void *)(v138 + 152);
                    uint64_t v921 = v290[19];
                    uint64_t v922 = v137[19];
                    do
                    {
                      if (v139[1])
                      {
                        unint64_t v923 = 0;
                        do
                        {
                          if (v139[2])
                          {
                            unint64_t v924 = 0;
                            do
                            {
                              if (v139[3])
                              {
                                unint64_t v925 = 0;
                                do
                                {
                                  LOBYTE(v926) = *((unsigned char *)v921 + v918);
                                  if ((_BYTE)v926)
                                  {
                                    char v927 = *(unsigned char *)(v920 + v919);
                                    char v928 = 1;
                                    do
                                    {
                                      unsigned int v929 = v926;
                                      if (v926) {
                                        char v930 = v927;
                                      }
                                      else {
                                        char v930 = 1;
                                      }
                                      v928 *= v930;
                                      int v926 = (char)v926 >> 1;
                                      v927 *= v927;
                                    }
                                    while (v929 > 1);
                                  }
                                  else
                                  {
                                    char v928 = 1;
                                  }
                                  uint64_t v931 = v917 + 1;
                                  *(unsigned char *)(v922 + v917) = v928;
                                  uint64_t v138 = *a1;
                                  uint64_t v932 = *(void **)(*a1 + 24);
                                  uint64_t v933 = v932[3];
                                  v919 += v933;
                                  int v290 = (int **)*a2;
                                  uint64_t v934 = *(int **)(*a2 + 24);
                                  uint64_t v935 = *((void *)v934 + 3);
                                  v918 += v935;
                                  ++v925;
                                  int v139 = *(int **)*a1;
                                  unint64_t v936 = v139[3];
                                  ++v917;
                                }
                                while (v925 < v936);
                                unsigned int v291 = *v290;
                                uint64_t v917 = v931;
                              }
                              else
                              {
                                unint64_t v936 = 0;
                                uint64_t v932 = *(void **)(v138 + 24);
                                uint64_t v933 = v932[3];
                                uint64_t v934 = v290[3];
                                uint64_t v935 = *((void *)v934 + 3);
                              }
                              uint64_t v937 = v932[2];
                              uint64_t v919 = v937 + v919 - v936 * v933;
                              uint64_t v918 = *((void *)v934 + 2) + v918 - v935 * v291[3];
                              ++v924;
                              unint64_t v938 = v139[2];
                            }
                            while (v924 < v938);
                          }
                          else
                          {
                            unint64_t v938 = 0;
                            uint64_t v932 = *(void **)(v138 + 24);
                            uint64_t v937 = v932[2];
                          }
                          uint64_t v919 = v932[1] + v919 - v938 * v937;
                          uint64_t v918 = *((void *)v290[3] + 1) + v918 - *((void *)v290[3] + 2) * v291[2];
                          ++v923;
                          unint64_t v939 = v139[1];
                        }
                        while (v923 < v939);
                        int v915 = *v139;
                      }
                      else
                      {
                        unint64_t v939 = 0;
                      }
                      uint64_t v919 = **(void **)(v138 + 24) + v919 - *(void *)(*(void *)(v138 + 24) + 8) * v939;
                      uint64_t v918 = *(void *)v290[3] + v918 - *((void *)v290[3] + 1) * v291[1];
                      ++v916;
                    }
                    while (v916 < v915);
                  }
                  break;
                default:
                  if (v137[6])
                  {
                    unint64_t v851 = 0;
                    uint64_t v2481 = *(void *)(v138 + 152);
                    v2503 = v290[19];
                    uint64_t v852 = v137[19];
                    do
                    {
                      uint64_t v853 = *(void *)*a1;
                      unint64_t v854 = (unint64_t)(*(void *)(*a1 + 8) - v853) >> 2;
                      uint64_t v855 = 0;
                      uint64_t v856 = (v854 - 1);
                      if ((int)v854 - 1 >= 0)
                      {
                        uint64_t v857 = *(void *)(*a1 + 24);
                        int v858 = v851;
                        do
                        {
                          ldiv_t v859 = ldiv(v858, *(int *)(v853 + 4 * v856));
                          int v858 = v859.quot;
                          v855 += *(void *)(v857 + 8 * v856--) * v859.rem;
                        }
                        while (v856 != -1);
                      }
                      uint64_t v860 = *(void *)*a2;
                      unint64_t v861 = (unint64_t)(*(void *)(*a2 + 8) - v860) >> 2;
                      uint64_t v862 = 0;
                      uint64_t v863 = (v861 - 1);
                      if ((int)v861 - 1 >= 0)
                      {
                        uint64_t v864 = *(void *)(*a2 + 24);
                        int v865 = v851;
                        do
                        {
                          ldiv_t v866 = ldiv(v865, *(int *)(v860 + 4 * v863));
                          int v865 = v866.quot;
                          v862 += *(void *)(v864 + 8 * v863--) * v866.rem;
                        }
                        while (v863 != -1);
                      }
                      LOBYTE(v867) = *((unsigned char *)v2503 + (int)v862);
                      if ((_BYTE)v867)
                      {
                        char v868 = *(unsigned char *)(v2481 + (int)v855);
                        char v869 = 1;
                        do
                        {
                          unsigned int v870 = v867;
                          if (v867) {
                            char v871 = v868;
                          }
                          else {
                            char v871 = 1;
                          }
                          v869 *= v871;
                          int v867 = (char)v867 >> 1;
                          v868 *= v868;
                        }
                        while (v870 > 1);
                      }
                      else
                      {
                        char v869 = 1;
                      }
                      *(unsigned char *)(v852 + v851++) = v869;
                    }
                    while (v851 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v28)
      {
        case 0:
          int v29 = **(_DWORD **)(*a2 + 152);
          if (v29)
          {
            int v30 = **(_DWORD **)(*a1 + 152);
            int v21 = 1;
            do
            {
              if (v29) {
                int v31 = v30;
              }
              else {
                int v31 = 1;
              }
              v21 *= v31;
              v30 *= v30;
              BOOL v17 = v29 > 1;
              v29 >>= 1;
            }
            while (v17);
          }
          else
          {
LABEL_325:
            int v21 = 1;
          }
LABEL_326:
          **(_DWORD **)(*(void *)a3 + 152) = v21;
          return;
        case 1:
          int v181 = *(_DWORD *)(*a2 + 160);
          if (v181 >= 1)
          {
            int v182 = **(_DWORD **)(*a1 + 152);
            int v183 = *(int **)(*(void *)a3 + 152);
            int v184 = *(int **)(*a2 + 152);
            do
            {
              int v185 = *v184;
              if (*v184)
              {
                int v186 = 1;
                int v187 = v182;
                do
                {
                  if (v185) {
                    int v188 = v187;
                  }
                  else {
                    int v188 = 1;
                  }
                  v186 *= v188;
                  v187 *= v187;
                  BOOL v17 = v185 > 1;
                  v185 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v186 = 1;
              }
              *v183++ = v186;
              ++v184;
              BOOL v17 = v181-- <= 1;
            }
            while (!v17);
          }
          return;
        case 2:
          int v189 = *(_DWORD *)(*a1 + 160);
          if (v189 >= 1)
          {
            int v190 = **(_DWORD **)(*a2 + 152);
            unsigned int v191 = *(int **)(*(void *)a3 + 152);
            uint64_t v192 = *(int **)(*a1 + 152);
            do
            {
              if (v190)
              {
                int v193 = *v192;
                int v194 = 1;
                int v195 = v190;
                do
                {
                  if (v195) {
                    int v196 = v193;
                  }
                  else {
                    int v196 = 1;
                  }
                  v194 *= v196;
                  v193 *= v193;
                  BOOL v17 = v195 > 1;
                  v195 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v194 = 1;
              }
              *v191++ = v194;
              ++v192;
              BOOL v17 = v189-- <= 1;
            }
            while (!v17);
          }
          return;
        case 3:
          int v197 = *(_DWORD *)(*(void *)a3 + 48);
          if (v197 >= 1)
          {
            int v198 = *(int **)(*(void *)a3 + 152);
            unsigned int v199 = *(int **)(*a2 + 152);
            int v200 = *(int **)(*a1 + 152);
            do
            {
              int v201 = *v199;
              if (*v199)
              {
                int v202 = *v200;
                int v203 = 1;
                do
                {
                  if (v201) {
                    int v204 = v202;
                  }
                  else {
                    int v204 = 1;
                  }
                  v203 *= v204;
                  v202 *= v202;
                  BOOL v17 = v201 > 1;
                  v201 >>= 1;
                }
                while (v17);
              }
              else
              {
                int v203 = 1;
              }
              *v198++ = v203;
              ++v200;
              ++v199;
              BOOL v17 = v197-- <= 1;
            }
            while (!v17);
          }
          return;
        default:
          uint64_t v172 = *(void **)a3;
          int v173 = (void *)*a1;
          unsigned int v174 = *(int **)*a1;
          uint64_t v175 = (v173[1] - (void)v174) >> 2;
          uint64_t v176 = (v175 - 1);
          if ((int)v176 >= -1) {
            int v177 = -1;
          }
          else {
            int v177 = v175 - 1;
          }
          int v178 = v177 + 1;
          int v179 = v175 + 1;
          while (1)
          {
            unsigned int v180 = v179 - 2;
            if (v179 - 2 < 0) {
              break;
            }
            --v179;
            if (*(void *)(v173[3] + 8 * v180) != *(void *)(v172[3] + 8 * v180)) {
              goto LABEL_358;
            }
          }
          int v179 = v178;
LABEL_358:
          unsigned int v297 = (void *)*a2;
          int v298 = *(int **)*a2;
          uint64_t v299 = (v297[1] - (void)v298) >> 2;
          uint64_t v300 = (v299 - 1);
          if ((int)v300 >= -1) {
            int v301 = -1;
          }
          else {
            int v301 = v299 - 1;
          }
          int v302 = v301 + 1;
          int v303 = v299 + 1;
          while (1)
          {
            unsigned int v304 = v303 - 2;
            if (v303 - 2 < 0) {
              break;
            }
            --v303;
            if (*(void *)(v297[3] + 8 * v304) != *(void *)(v172[3] + 8 * v304)) {
              goto LABEL_402;
            }
          }
          int v303 = v302;
LABEL_402:
          int v328 = v175 + 1;
          while (1)
          {
            unsigned int v329 = v328 - 2;
            if (v328 - 2 < 0) {
              break;
            }
            --v328;
            if (*(void *)(v173[3] + 8 * v329)) {
              goto LABEL_437;
            }
          }
          int v328 = v178;
LABEL_437:
          int v342 = v299 + 1;
          while (1)
          {
            unsigned int v343 = v342 - 2;
            if (v342 - 2 < 0) {
              break;
            }
            --v342;
            if (*(void *)(v297[3] + 8 * v343)) {
              goto LABEL_651;
            }
          }
          int v342 = v302;
LABEL_651:
          unint64_t v480 = (uint64_t)(v172[1] - *v172) >> 2;
          if (v179 <= v303) {
            int v481 = v303;
          }
          else {
            int v481 = v179;
          }
          if (v179 <= v342) {
            int v179 = v342;
          }
          if (v328 > v303) {
            int v303 = v328;
          }
          if (v480 > v303)
          {
            int v482 = 1;
          }
          else
          {
            int v303 = (uint64_t)(v172[1] - *v172) >> 2;
            int v482 = 4;
          }
          if (v480 > v179)
          {
            int v483 = 2;
          }
          else
          {
            int v179 = v303;
            int v483 = v482;
          }
          if (v480 > v481)
          {
            int v179 = v481;
            int v483 = 3;
          }
          uint64_t v2477 = v176;
          uint64_t v2499 = v300;
          if (!v179) {
            goto LABEL_690;
          }
          unint64_t v484 = *(void *)(v172[3] + 8 * (v179 - 1));
          if (v484 < 0x10) {
            goto LABEL_690;
          }
          switch(v483)
          {
            case 1:
              if (v179 == 2)
              {
                int v2068 = *v174;
                if (*v174)
                {
                  unint64_t v2069 = 0;
                  uint64_t v2070 = 0;
                  uint64_t v2071 = 0;
                  uint64_t v2072 = v173[19];
                  uint64_t v2073 = v297[19];
                  unint64_t v2074 = (int *)v172[19];
                  unint64_t v2075 = (uint64_t *)v173[3];
                  uint64_t v2076 = *v2075;
                  uint64_t v2077 = v2075[1];
                  uint64_t v2078 = (uint64_t *)v297[3];
                  uint64_t v2080 = *v2078;
                  uint64_t v2079 = v2078[1];
                  int v2081 = v174[1];
                  int v2082 = v2081;
                  do
                  {
                    if (v2082)
                    {
                      unint64_t v2083 = 0;
                      do
                      {
                        if ((int)v484 >= 1)
                        {
                          int v2084 = *(_DWORD *)(v2072 + 4 * v2071);
                          int v2085 = v484;
                          unint64_t v2086 = v2074;
                          unint64_t v2087 = (int *)(v2073 + 4 * v2070);
                          do
                          {
                            int v2088 = *v2087;
                            if (*v2087)
                            {
                              int v2089 = 1;
                              int v2090 = v2084;
                              do
                              {
                                if (v2088) {
                                  int v2091 = v2090;
                                }
                                else {
                                  int v2091 = 1;
                                }
                                v2089 *= v2091;
                                v2090 *= v2090;
                                BOOL v17 = v2088 > 1;
                                v2088 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              int v2089 = 1;
                            }
                            *v2086++ = v2089;
                            ++v2087;
                            BOOL v17 = v2085-- <= 1;
                          }
                          while (!v17);
                          int v2081 = v174[1];
                        }
                        v2071 += v2077;
                        v2070 += v2079;
                        v2074 += (int)v484;
                        ++v2083;
                      }
                      while (v2083 < v2081);
                      uint64_t v2092 = v2081;
                      int v2068 = *v174;
                      int v2082 = v2081;
                    }
                    else
                    {
                      uint64_t v2092 = 0;
                    }
                    uint64_t v2071 = v2071 + v2076 - v2092 * v2077;
                    uint64_t v2070 = v2070 + v2080 - v2079 * v298[1];
                    ++v2069;
                  }
                  while (v2069 < v2068);
                }
              }
              else if (v179 == 1)
              {
                int v1337 = *v174;
                if (*v174)
                {
                  unint64_t v1338 = 0;
                  uint64_t v1339 = 0;
                  uint64_t v1340 = 0;
                  uint64_t v1341 = v173[19];
                  uint64_t v1342 = v297[19];
                  uint64_t v1343 = (int *)v172[19];
                  uint64_t v1344 = *(void *)v173[3];
                  uint64_t v1345 = *(void *)v297[3];
                  do
                  {
                    if ((int)v484 >= 1)
                    {
                      int v1346 = *(_DWORD *)(v1341 + 4 * v1340);
                      int v1347 = v484;
                      uint64_t v1348 = v1343;
                      uint64_t v1349 = (int *)(v1342 + 4 * v1339);
                      do
                      {
                        int v1350 = *v1349;
                        if (*v1349)
                        {
                          int v1351 = 1;
                          int v1352 = v1346;
                          do
                          {
                            if (v1350) {
                              int v1353 = v1352;
                            }
                            else {
                              int v1353 = 1;
                            }
                            v1351 *= v1353;
                            v1352 *= v1352;
                            BOOL v17 = v1350 > 1;
                            v1350 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1351 = 1;
                        }
                        *v1348++ = v1351;
                        ++v1349;
                        BOOL v17 = v1347-- <= 1;
                      }
                      while (!v17);
                      int v1337 = *v174;
                    }
                    v1340 += v1344;
                    v1339 += v1345;
                    v1343 += (int)v484;
                    ++v1338;
                  }
                  while (v1338 < v1337);
                }
              }
              else
              {
                unint64_t v2450 = v172[6];
                if (v2450)
                {
                  unint64_t v2093 = 0;
                  uint64_t v2372 = v297[19];
                  uint64_t v2394 = v173[19];
                  v2471 = (int *)v172[19];
                  do
                  {
                    uint64_t v2094 = 0;
                    if ((v176 & 0x80000000) == 0)
                    {
                      uint64_t v2095 = v173[3];
                      int v2096 = v2093;
                      do
                      {
                        ldiv_t v2097 = ldiv(v2096, v174[v176]);
                        int v2096 = v2097.quot;
                        v2094 += *(void *)(v2095 + 8 * v176--) * v2097.rem;
                      }
                      while (v176 != -1);
                    }
                    uint64_t v2098 = v2499;
                    if ((v2499 & 0x80000000) != 0)
                    {
                      LODWORD(v2099) = 0;
                    }
                    else
                    {
                      uint64_t v2099 = 0;
                      uint64_t v2100 = v297[3];
                      int v2101 = v2093;
                      do
                      {
                        ldiv_t v2102 = ldiv(v2101, v298[v2098]);
                        int v2101 = v2102.quot;
                        v2099 += *(void *)(v2100 + 8 * v2098--) * v2102.rem;
                      }
                      while (v2098 != -1);
                    }
                    if ((int)v484 >= 1)
                    {
                      int v2103 = *(_DWORD *)(v2394 + 4 * (int)v2094);
                      int v2104 = v484;
                      unint64_t v2105 = v2471;
                      uint64_t v2106 = (int *)(v2372 + 4 * (int)v2099);
                      do
                      {
                        int v2107 = *v2106;
                        if (*v2106)
                        {
                          int v2108 = 1;
                          int v2109 = v2103;
                          do
                          {
                            if (v2107) {
                              int v2110 = v2109;
                            }
                            else {
                              int v2110 = 1;
                            }
                            v2108 *= v2110;
                            v2109 *= v2109;
                            BOOL v17 = v2107 > 1;
                            v2107 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v2108 = 1;
                        }
                        *v2105++ = v2108;
                        ++v2106;
                        BOOL v17 = v2104-- <= 1;
                      }
                      while (!v17);
                    }
                    v2471 += (int)v484;
                    v2093 += (int)v484;
                    uint64_t v176 = v2477;
                  }
                  while (v2093 < v2450);
                }
              }
              break;
            case 2:
              if (v179 == 2)
              {
                int v2111 = *v174;
                if (*v174)
                {
                  unint64_t v2112 = 0;
                  uint64_t v2113 = 0;
                  uint64_t v2114 = 0;
                  uint64_t v2115 = v173[19];
                  uint64_t v2116 = v297[19];
                  uint64_t v2117 = (int *)v172[19];
                  v2118 = (uint64_t *)v173[3];
                  uint64_t v2119 = *v2118;
                  uint64_t v2120 = v2118[1];
                  v2121 = (uint64_t *)v297[3];
                  uint64_t v2123 = *v2121;
                  uint64_t v2122 = v2121[1];
                  int v2124 = v174[1];
                  int v2125 = v2124;
                  do
                  {
                    if (v2125)
                    {
                      unint64_t v2126 = 0;
                      do
                      {
                        if ((int)v484 >= 1)
                        {
                          int v2127 = *(_DWORD *)(v2116 + 4 * v2113);
                          int v2128 = v484;
                          v2129 = v2117;
                          v2130 = (int *)(v2115 + 4 * v2114);
                          do
                          {
                            if (v2127)
                            {
                              int v2131 = *v2130;
                              int v2132 = 1;
                              int v2133 = v2127;
                              do
                              {
                                if (v2133) {
                                  int v2134 = v2131;
                                }
                                else {
                                  int v2134 = 1;
                                }
                                v2132 *= v2134;
                                v2131 *= v2131;
                                BOOL v17 = v2133 > 1;
                                v2133 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              int v2132 = 1;
                            }
                            *v2129++ = v2132;
                            ++v2130;
                            BOOL v17 = v2128-- <= 1;
                          }
                          while (!v17);
                          int v2124 = v174[1];
                        }
                        v2114 += v2120;
                        v2113 += v2122;
                        v2117 += (int)v484;
                        ++v2126;
                      }
                      while (v2126 < v2124);
                      uint64_t v2135 = v2124;
                      int v2111 = *v174;
                      int v2125 = v2124;
                    }
                    else
                    {
                      uint64_t v2135 = 0;
                    }
                    uint64_t v2114 = v2114 + v2119 - v2135 * v2120;
                    uint64_t v2113 = v2113 + v2123 - v2122 * v298[1];
                    ++v2112;
                  }
                  while (v2112 < v2111);
                }
              }
              else if (v179 == 1)
              {
                int v1354 = *v174;
                if (*v174)
                {
                  unint64_t v1355 = 0;
                  uint64_t v1356 = 0;
                  uint64_t v1357 = 0;
                  uint64_t v1358 = v173[19];
                  uint64_t v1359 = v297[19];
                  uint64_t v1360 = (int *)v172[19];
                  uint64_t v1361 = *(void *)v173[3];
                  uint64_t v1362 = *(void *)v297[3];
                  do
                  {
                    if ((int)v484 >= 1)
                    {
                      int v1363 = *(_DWORD *)(v1359 + 4 * v1356);
                      int v1364 = v484;
                      uint64_t v1365 = v1360;
                      uint64_t v1366 = (int *)(v1358 + 4 * v1357);
                      do
                      {
                        if (v1363)
                        {
                          int v1367 = *v1366;
                          int v1368 = 1;
                          int v1369 = v1363;
                          do
                          {
                            if (v1369) {
                              int v1370 = v1367;
                            }
                            else {
                              int v1370 = 1;
                            }
                            v1368 *= v1370;
                            v1367 *= v1367;
                            BOOL v17 = v1369 > 1;
                            v1369 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1368 = 1;
                        }
                        *v1365++ = v1368;
                        ++v1366;
                        BOOL v17 = v1364-- <= 1;
                      }
                      while (!v17);
                      int v1354 = *v174;
                    }
                    v1357 += v1361;
                    v1356 += v1362;
                    v1360 += (int)v484;
                    ++v1355;
                  }
                  while (v1355 < v1354);
                }
              }
              else
              {
                unint64_t v2451 = v172[6];
                if (v2451)
                {
                  unint64_t v2136 = 0;
                  uint64_t v2373 = v297[19];
                  uint64_t v2395 = v173[19];
                  v2472 = (int *)v172[19];
                  do
                  {
                    uint64_t v2137 = 0;
                    if ((v176 & 0x80000000) == 0)
                    {
                      uint64_t v2138 = v173[3];
                      int v2139 = v2136;
                      do
                      {
                        ldiv_t v2140 = ldiv(v2139, v174[v176]);
                        int v2139 = v2140.quot;
                        v2137 += *(void *)(v2138 + 8 * v176--) * v2140.rem;
                      }
                      while (v176 != -1);
                    }
                    uint64_t v2141 = v2499;
                    if ((v2499 & 0x80000000) != 0)
                    {
                      LODWORD(v2142) = 0;
                    }
                    else
                    {
                      uint64_t v2142 = 0;
                      uint64_t v2143 = v297[3];
                      int v2144 = v2136;
                      do
                      {
                        ldiv_t v2145 = ldiv(v2144, v298[v2141]);
                        int v2144 = v2145.quot;
                        v2142 += *(void *)(v2143 + 8 * v2141--) * v2145.rem;
                      }
                      while (v2141 != -1);
                    }
                    if ((int)v484 >= 1)
                    {
                      int v2146 = *(_DWORD *)(v2373 + 4 * (int)v2142);
                      int v2147 = v484;
                      v2148 = v2472;
                      v2149 = (int *)(v2395 + 4 * (int)v2137);
                      do
                      {
                        if (v2146)
                        {
                          int v2150 = *v2149;
                          int v2151 = 1;
                          int v2152 = v2146;
                          do
                          {
                            if (v2152) {
                              int v2153 = v2150;
                            }
                            else {
                              int v2153 = 1;
                            }
                            v2151 *= v2153;
                            v2150 *= v2150;
                            BOOL v17 = v2152 > 1;
                            v2152 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v2151 = 1;
                        }
                        *v2148++ = v2151;
                        ++v2149;
                        BOOL v17 = v2147-- <= 1;
                      }
                      while (!v17);
                    }
                    v2472 += (int)v484;
                    v2136 += (int)v484;
                    uint64_t v176 = v2477;
                  }
                  while (v2136 < v2451);
                }
              }
              break;
            case 3:
              if (v179 == 2)
              {
                int v1599 = *v174;
                if (*v174)
                {
                  unint64_t v1600 = 0;
                  uint64_t v1601 = 0;
                  uint64_t v1602 = 0;
                  uint64_t v1603 = v173[19];
                  uint64_t v1604 = v297[19];
                  uint64_t v1605 = (int *)v172[19];
                  unint64_t v1606 = (uint64_t *)v173[3];
                  uint64_t v1607 = *v1606;
                  uint64_t v1608 = v1606[1];
                  uint64_t v1609 = (uint64_t *)v297[3];
                  uint64_t v1611 = *v1609;
                  uint64_t v1610 = v1609[1];
                  int v1612 = v174[1];
                  int v1613 = v1612;
                  do
                  {
                    if (v1613)
                    {
                      unint64_t v1614 = 0;
                      do
                      {
                        if ((int)v484 >= 1)
                        {
                          uint64_t v1615 = (int *)(v1604 + 4 * v1601);
                          int v1616 = v484;
                          uint64_t v1617 = v1605;
                          uint64_t v1618 = (int *)(v1603 + 4 * v1602);
                          do
                          {
                            int v1619 = *v1615;
                            if (*v1615)
                            {
                              int v1620 = *v1618;
                              int v1621 = 1;
                              do
                              {
                                if (v1619) {
                                  int v1622 = v1620;
                                }
                                else {
                                  int v1622 = 1;
                                }
                                v1621 *= v1622;
                                v1620 *= v1620;
                                BOOL v17 = v1619 > 1;
                                v1619 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              int v1621 = 1;
                            }
                            *v1617++ = v1621;
                            ++v1618;
                            ++v1615;
                            BOOL v17 = v1616-- <= 1;
                          }
                          while (!v17);
                          int v1612 = v174[1];
                        }
                        v1602 += v1608;
                        v1601 += v1610;
                        v1605 += (int)v484;
                        ++v1614;
                      }
                      while (v1614 < v1612);
                      uint64_t v1623 = v1612;
                      int v1599 = *v174;
                      int v1613 = v1612;
                    }
                    else
                    {
                      uint64_t v1623 = 0;
                    }
                    uint64_t v1602 = v1602 + v1607 - v1623 * v1608;
                    uint64_t v1601 = v1601 + v1611 - v1610 * v298[1];
                    ++v1600;
                  }
                  while (v1600 < v1599);
                }
              }
              else if (v179 == 1)
              {
                int v485 = *v174;
                if (*v174)
                {
                  unint64_t v486 = 0;
                  uint64_t v487 = 0;
                  uint64_t v488 = 0;
                  uint64_t v489 = v173[19];
                  uint64_t v490 = v297[19];
                  unint64_t v491 = (int *)v172[19];
                  uint64_t v492 = *(void *)v173[3];
                  uint64_t v493 = *(void *)v297[3];
                  do
                  {
                    if ((int)v484 >= 1)
                    {
                      uint64_t v494 = (int *)(v490 + 4 * v487);
                      int v495 = v484;
                      uint64_t v496 = v491;
                      uint64_t v497 = (int *)(v489 + 4 * v488);
                      do
                      {
                        int v498 = *v494;
                        if (*v494)
                        {
                          int v499 = *v497;
                          int v500 = 1;
                          do
                          {
                            if (v498) {
                              int v501 = v499;
                            }
                            else {
                              int v501 = 1;
                            }
                            v500 *= v501;
                            v499 *= v499;
                            BOOL v17 = v498 > 1;
                            v498 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v500 = 1;
                        }
                        *v496++ = v500;
                        ++v497;
                        ++v494;
                        BOOL v17 = v495-- <= 1;
                      }
                      while (!v17);
                      int v485 = *v174;
                    }
                    v488 += v492;
                    v487 += v493;
                    v491 += (int)v484;
                    ++v486;
                  }
                  while (v486 < v485);
                }
              }
              else
              {
                unint64_t v2441 = v172[6];
                if (v2441)
                {
                  unint64_t v1624 = 0;
                  uint64_t v2366 = v297[19];
                  uint64_t v2388 = v173[19];
                  v2468 = (int *)v172[19];
                  do
                  {
                    uint64_t v1625 = 0;
                    if ((v176 & 0x80000000) == 0)
                    {
                      uint64_t v1626 = v173[3];
                      int v1627 = v1624;
                      do
                      {
                        ldiv_t v1628 = ldiv(v1627, v174[v176]);
                        int v1627 = v1628.quot;
                        v1625 += *(void *)(v1626 + 8 * v176--) * v1628.rem;
                      }
                      while (v176 != -1);
                    }
                    uint64_t v1629 = v2499;
                    if ((v2499 & 0x80000000) != 0)
                    {
                      LODWORD(v1630) = 0;
                    }
                    else
                    {
                      uint64_t v1630 = 0;
                      uint64_t v1631 = v297[3];
                      int v1632 = v1624;
                      do
                      {
                        ldiv_t v1633 = ldiv(v1632, v298[v1629]);
                        int v1632 = v1633.quot;
                        v1630 += *(void *)(v1631 + 8 * v1629--) * v1633.rem;
                      }
                      while (v1629 != -1);
                    }
                    if ((int)v484 >= 1)
                    {
                      uint64_t v1634 = (int *)(v2366 + 4 * (int)v1630);
                      int v1635 = v484;
                      uint64_t v1636 = v2468;
                      uint64_t v1637 = (int *)(v2388 + 4 * (int)v1625);
                      do
                      {
                        int v1638 = *v1634;
                        if (*v1634)
                        {
                          int v1639 = *v1637;
                          int v1640 = 1;
                          do
                          {
                            if (v1638) {
                              int v1641 = v1639;
                            }
                            else {
                              int v1641 = 1;
                            }
                            v1640 *= v1641;
                            v1639 *= v1639;
                            BOOL v17 = v1638 > 1;
                            v1638 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          int v1640 = 1;
                        }
                        *v1636++ = v1640;
                        ++v1637;
                        ++v1634;
                        BOOL v17 = v1635-- <= 1;
                      }
                      while (!v17);
                    }
                    v2468 += (int)v484;
                    v1624 += (int)v484;
                    uint64_t v176 = v2477;
                  }
                  while (v1624 < v2441);
                }
              }
              break;
            default:
LABEL_690:
              switch(v480)
              {
                case 1uLL:
                  uint64_t v502 = v172[6];
                  if (v502)
                  {
                    uint64_t v503 = 0;
                    uint64_t v504 = 0;
                    uint64_t v505 = 0;
                    uint64_t v506 = v173[19];
                    uint64_t v507 = v297[19];
                    uint64_t v508 = v172[19];
                    uint64_t v509 = *(void *)v173[3];
                    uint64_t v510 = *(void *)v297[3];
                    do
                    {
                      int v511 = *(_DWORD *)(v507 + 4 * v504);
                      if (v511)
                      {
                        int v512 = *(_DWORD *)(v506 + 4 * v505);
                        int v513 = 1;
                        do
                        {
                          if (v511) {
                            int v514 = v512;
                          }
                          else {
                            int v514 = 1;
                          }
                          v513 *= v514;
                          v512 *= v512;
                          BOOL v17 = v511 > 1;
                          v511 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        int v513 = 1;
                      }
                      *(_DWORD *)(v508 + 4 * v503) = v513;
                      v505 += v509;
                      v504 += v510;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  break;
                case 2uLL:
                  int v955 = *v174;
                  if (*v174)
                  {
                    unint64_t v956 = 0;
                    uint64_t v957 = 0;
                    uint64_t v958 = 0;
                    uint64_t v959 = 0;
                    uint64_t v960 = v173[19];
                    uint64_t v961 = v297[19];
                    uint64_t v962 = v172[19];
                    uint64_t v963 = (uint64_t *)v173[3];
                    uint64_t v964 = *v963;
                    uint64_t v965 = v963[1];
                    uint64_t v966 = (uint64_t *)v297[3];
                    uint64_t v967 = *v966;
                    uint64_t v968 = v966[1];
                    int v969 = v174[1];
                    do
                    {
                      if (v969)
                      {
                        for (unint64_t m = 0; m < v969; ++m)
                        {
                          int v971 = *(_DWORD *)(v961 + 4 * v958);
                          if (v971)
                          {
                            int v972 = *(_DWORD *)(v960 + 4 * v959);
                            int v973 = 1;
                            do
                            {
                              if (v971) {
                                int v974 = v972;
                              }
                              else {
                                int v974 = 1;
                              }
                              v973 *= v974;
                              v972 *= v972;
                              BOOL v17 = v971 > 1;
                              v971 >>= 1;
                            }
                            while (v17);
                          }
                          else
                          {
                            int v973 = 1;
                          }
                          uint64_t v975 = v957 + 1;
                          *(_DWORD *)(v962 + 4 * v957) = v973;
                          v959 += v965;
                          v958 += v968;
                          int v969 = v174[1];
                          ++v957;
                        }
                        uint64_t v976 = v969;
                        int v955 = *v174;
                        uint64_t v957 = v975;
                      }
                      else
                      {
                        uint64_t v976 = 0;
                      }
                      uint64_t v959 = v959 + v964 - v976 * v965;
                      uint64_t v958 = v958 + v967 - v968 * v298[1];
                      ++v956;
                    }
                    while (v956 < v955);
                  }
                  break;
                case 3uLL:
                  int v977 = *v174;
                  if (*v174)
                  {
                    unint64_t v978 = 0;
                    uint64_t v979 = 0;
                    uint64_t v980 = 0;
                    uint64_t v981 = 0;
                    uint64_t v982 = v173[19];
                    uint64_t v983 = v297[19];
                    uint64_t v984 = v172[19];
                    unint64_t v985 = (uint64_t *)v173[3];
                    uint64_t v986 = *v985;
                    uint64_t v987 = v985[1];
                    uint64_t v988 = (uint64_t *)v297[3];
                    uint64_t v989 = *v988;
                    uint64_t v990 = v988[1];
                    int v991 = v174[1];
                    int v992 = v991;
                    do
                    {
                      if (v992)
                      {
                        unint64_t v993 = 0;
                        uint64_t v994 = v985[2];
                        uint64_t v995 = v988[2];
                        int v996 = v174[2];
                        do
                        {
                          if (v996)
                          {
                            for (unint64_t n = 0; n < v996; ++n)
                            {
                              int v998 = *(_DWORD *)(v983 + 4 * v980);
                              if (v998)
                              {
                                int v999 = *(_DWORD *)(v982 + 4 * v981);
                                int v1000 = 1;
                                do
                                {
                                  if (v998) {
                                    int v1001 = v999;
                                  }
                                  else {
                                    int v1001 = 1;
                                  }
                                  v1000 *= v1001;
                                  v999 *= v999;
                                  BOOL v17 = v998 > 1;
                                  v998 >>= 1;
                                }
                                while (v17);
                              }
                              else
                              {
                                int v1000 = 1;
                              }
                              uint64_t v1002 = v979 + 1;
                              *(_DWORD *)(v984 + 4 * v979) = v1000;
                              v981 += v994;
                              v980 += v995;
                              int v996 = v174[2];
                              ++v979;
                            }
                            uint64_t v1003 = v996;
                            int v991 = v174[1];
                            uint64_t v979 = v1002;
                          }
                          else
                          {
                            uint64_t v1003 = 0;
                          }
                          uint64_t v981 = v981 + v987 - v1003 * v994;
                          uint64_t v980 = v980 + v990 - v995 * v298[2];
                          ++v993;
                        }
                        while (v993 < v991);
                        uint64_t v1004 = v991;
                        int v977 = *v174;
                        int v992 = v991;
                      }
                      else
                      {
                        uint64_t v1004 = 0;
                      }
                      uint64_t v981 = v981 + v986 - v1004 * v987;
                      uint64_t v980 = v980 + v989 - v990 * v298[1];
                      ++v978;
                    }
                    while (v978 < v977);
                  }
                  break;
                case 4uLL:
                  int v1005 = *v174;
                  if (*v174)
                  {
                    unint64_t v1006 = 0;
                    uint64_t v1007 = 0;
                    uint64_t v1008 = 0;
                    uint64_t v1009 = 0;
                    uint64_t v1010 = v173[19];
                    uint64_t v1011 = v297[19];
                    uint64_t v1012 = v172[19];
                    uint64_t v1013 = (uint64_t *)v173[3];
                    uint64_t v1014 = *v1013;
                    uint64_t v1015 = v1013[1];
                    uint64_t v1016 = (uint64_t *)v297[3];
                    uint64_t v1017 = *v1016;
                    uint64_t v1018 = v1016[1];
                    int v1019 = v174[1];
                    int v1020 = v1019;
                    do
                    {
                      if (v1020)
                      {
                        unint64_t v1021 = 0;
                        uint64_t v1022 = v1013[2];
                        uint64_t v1023 = v1016[2];
                        int v1024 = v174[2];
                        int v1025 = v1024;
                        do
                        {
                          if (v1025)
                          {
                            unint64_t v1026 = 0;
                            uint64_t v1027 = v1013[3];
                            uint64_t v1028 = v1016[3];
                            int v1029 = v174[3];
                            do
                            {
                              if (v1029)
                              {
                                for (iunint64_t i = 0; ii < v1029; ++ii)
                                {
                                  int v1031 = *(_DWORD *)(v1011 + 4 * v1008);
                                  if (v1031)
                                  {
                                    int v1032 = *(_DWORD *)(v1010 + 4 * v1009);
                                    int v1033 = 1;
                                    do
                                    {
                                      if (v1031) {
                                        int v1034 = v1032;
                                      }
                                      else {
                                        int v1034 = 1;
                                      }
                                      v1033 *= v1034;
                                      v1032 *= v1032;
                                      BOOL v17 = v1031 > 1;
                                      v1031 >>= 1;
                                    }
                                    while (v17);
                                  }
                                  else
                                  {
                                    int v1033 = 1;
                                  }
                                  uint64_t v1035 = v1007 + 1;
                                  *(_DWORD *)(v1012 + 4 * v1007) = v1033;
                                  v1009 += v1027;
                                  v1008 += v1028;
                                  int v1029 = v174[3];
                                  ++v1007;
                                }
                                uint64_t v1036 = v1029;
                                int v1024 = v174[2];
                                uint64_t v1007 = v1035;
                              }
                              else
                              {
                                uint64_t v1036 = 0;
                              }
                              uint64_t v1009 = v1009 + v1022 - v1036 * v1027;
                              uint64_t v1008 = v1008 + v1023 - v1028 * v298[3];
                              ++v1026;
                            }
                            while (v1026 < v1024);
                            uint64_t v1037 = v1024;
                            int v1019 = v174[1];
                            int v1025 = v1024;
                          }
                          else
                          {
                            uint64_t v1037 = 0;
                          }
                          uint64_t v1009 = v1009 + v1015 - v1037 * v1022;
                          uint64_t v1008 = v1008 + v1018 - v1023 * v298[2];
                          ++v1021;
                        }
                        while (v1021 < v1019);
                        uint64_t v1038 = v1019;
                        int v1005 = *v174;
                        int v1020 = v1019;
                      }
                      else
                      {
                        uint64_t v1038 = 0;
                      }
                      uint64_t v1009 = v1009 + v1014 - v1038 * v1015;
                      uint64_t v1008 = v1008 + v1017 - v1018 * v298[1];
                      ++v1006;
                    }
                    while (v1006 < v1005);
                  }
                  break;
                default:
                  uint64_t v940 = v172[6];
                  if (v940)
                  {
                    uint64_t v941 = 0;
                    uint64_t v2403 = v173[19];
                    uint64_t v2430 = v172[19];
                    uint64_t v2462 = v297[19];
                    do
                    {
                      uint64_t v942 = 0;
                      if ((v176 & 0x80000000) == 0)
                      {
                        uint64_t v943 = v173[3];
                        int v944 = v941;
                        do
                        {
                          ldiv_t v945 = ldiv(v944, v174[v176]);
                          int v944 = v945.quot;
                          v942 += *(void *)(v943 + 8 * v176--) * v945.rem;
                        }
                        while (v176 != -1);
                      }
                      uint64_t v946 = v2499;
                      if ((v2499 & 0x80000000) != 0)
                      {
                        LODWORD(v947) = 0;
                      }
                      else
                      {
                        uint64_t v947 = 0;
                        uint64_t v948 = v297[3];
                        int v949 = v941;
                        do
                        {
                          ldiv_t v950 = ldiv(v949, v298[v946]);
                          int v949 = v950.quot;
                          v947 += *(void *)(v948 + 8 * v946--) * v950.rem;
                        }
                        while (v946 != -1);
                      }
                      int v951 = *(_DWORD *)(v2462 + 4 * (int)v947);
                      if (v951)
                      {
                        int v952 = *(_DWORD *)(v2403 + 4 * (int)v942);
                        int v953 = 1;
                        uint64_t v176 = v2477;
                        do
                        {
                          if (v951) {
                            int v954 = v952;
                          }
                          else {
                            int v954 = 1;
                          }
                          v953 *= v954;
                          v952 *= v952;
                          BOOL v17 = v951 > 1;
                          v951 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        int v953 = 1;
                        uint64_t v176 = v2477;
                      }
                      *(_DWORD *)(v2430 + 4 * v941++) = v953;
                    }
                    while (v941 != v940);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v32)
      {
        case 0:
          uint64_t v33 = **(void **)(*a2 + 152);
          if (v33)
          {
            uint64_t v34 = **(void **)(*a1 + 152);
            uint64_t v35 = 1;
            do
            {
              if (v33) {
                uint64_t v36 = v34;
              }
              else {
                uint64_t v36 = 1;
              }
              v35 *= v36;
              v34 *= v34;
              BOOL v17 = (unint64_t)v33 > 1;
              v33 >>= 1;
            }
            while (v17);
          }
          else
          {
            uint64_t v35 = 1;
          }
          **(void **)(*(void *)a3 + 152) = v35;
          return;
        case 1:
          int v214 = *(_DWORD *)(*a2 + 160);
          if (v214 >= 1)
          {
            uint64_t v215 = **(void **)(*a1 + 152);
            unsigned int v216 = *(uint64_t **)(*(void *)a3 + 152);
            float v217 = *(uint64_t **)(*a2 + 152);
            do
            {
              uint64_t v218 = *v217;
              if (*v217)
              {
                uint64_t v219 = 1;
                uint64_t v220 = v215;
                do
                {
                  if (v218) {
                    uint64_t v221 = v220;
                  }
                  else {
                    uint64_t v221 = 1;
                  }
                  v219 *= v221;
                  v220 *= v220;
                  BOOL v17 = (unint64_t)v218 > 1;
                  v218 >>= 1;
                }
                while (v17);
              }
              else
              {
                uint64_t v219 = 1;
              }
              *v216++ = v219;
              ++v217;
              BOOL v17 = v214-- <= 1;
            }
            while (!v17);
          }
          return;
        case 2:
          int v222 = *(_DWORD *)(*a1 + 160);
          if (v222 >= 1)
          {
            uint64_t v223 = **(void **)(*a2 + 152);
            int v224 = *(uint64_t **)(*(void *)a3 + 152);
            int v225 = *(uint64_t **)(*a1 + 152);
            do
            {
              if (v223)
              {
                uint64_t v226 = *v225;
                uint64_t v227 = 1;
                uint64_t v228 = v223;
                do
                {
                  if (v228) {
                    uint64_t v229 = v226;
                  }
                  else {
                    uint64_t v229 = 1;
                  }
                  v227 *= v229;
                  v226 *= v226;
                  BOOL v17 = (unint64_t)v228 > 1;
                  v228 >>= 1;
                }
                while (v17);
              }
              else
              {
                uint64_t v227 = 1;
              }
              *v224++ = v227;
              ++v225;
              BOOL v17 = v222-- <= 1;
            }
            while (!v17);
          }
          return;
        case 3:
          int v230 = *(_DWORD *)(*(void *)a3 + 48);
          if (v230 >= 1)
          {
            uint64_t v231 = *(uint64_t **)(*(void *)a3 + 152);
            int v232 = *(uint64_t **)(*a2 + 152);
            int v233 = *(uint64_t **)(*a1 + 152);
            do
            {
              uint64_t v234 = *v232;
              if (*v232)
              {
                uint64_t v235 = *v233;
                uint64_t v236 = 1;
                do
                {
                  if (v234) {
                    uint64_t v237 = v235;
                  }
                  else {
                    uint64_t v237 = 1;
                  }
                  v236 *= v237;
                  v235 *= v235;
                  BOOL v17 = (unint64_t)v234 > 1;
                  v234 >>= 1;
                }
                while (v17);
              }
              else
              {
                uint64_t v236 = 1;
              }
              *v231++ = v236;
              ++v233;
              ++v232;
              BOOL v17 = v230-- <= 1;
            }
            while (!v17);
          }
          return;
        default:
          float v205 = *(void **)a3;
          int v206 = (void *)*a1;
          float v207 = *(int **)*a1;
          uint64_t v208 = (v206[1] - (void)v207) >> 2;
          uint64_t v209 = (v208 - 1);
          if ((int)v209 >= -1) {
            int v210 = -1;
          }
          else {
            int v210 = v208 - 1;
          }
          int v211 = v210 + 1;
          int v212 = v208 + 1;
          while (1)
          {
            unsigned int v213 = v212 - 2;
            if (v212 - 2 < 0) {
              break;
            }
            --v212;
            if (*(void *)(v206[3] + 8 * v213) != *(void *)(v205[3] + 8 * v213)) {
              goto LABEL_366;
            }
          }
          int v212 = v211;
LABEL_366:
          uint64_t v305 = *a2;
          uint64_t v306 = (*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
          uint64_t v307 = (v306 - 1);
          if ((int)v307 >= -1) {
            int v308 = -1;
          }
          else {
            int v308 = v306 - 1;
          }
          int v309 = v308 + 1;
          int v310 = v306 + 1;
          while (1)
          {
            unsigned int v311 = v310 - 2;
            if (v310 - 2 < 0) {
              break;
            }
            --v310;
            if (*(void *)(*(void *)(v305 + 24) + 8 * v311) != *(void *)(v205[3] + 8 * v311)) {
              goto LABEL_407;
            }
          }
          int v310 = v309;
LABEL_407:
          int v330 = v208 + 1;
          while (1)
          {
            unsigned int v331 = v330 - 2;
            if (v330 - 2 < 0) {
              break;
            }
            --v330;
            if (*(void *)(v206[3] + 8 * v331)) {
              goto LABEL_442;
            }
          }
          int v330 = v211;
LABEL_442:
          int v344 = v306 + 1;
          while (1)
          {
            unsigned int v345 = v344 - 2;
            if (v344 - 2 < 0) {
              break;
            }
            --v344;
            if (*(void *)(*(void *)(v305 + 24) + 8 * v345)) {
              goto LABEL_704;
            }
          }
          int v344 = v309;
LABEL_704:
          unint64_t v515 = (uint64_t)(v205[1] - *v205) >> 2;
          if (v212 <= v310) {
            int v516 = v310;
          }
          else {
            int v516 = v212;
          }
          if (v212 <= v344) {
            int v212 = v344;
          }
          if (v330 > v310) {
            int v310 = v330;
          }
          if (v515 > v310)
          {
            int v517 = 1;
          }
          else
          {
            int v310 = (uint64_t)(v205[1] - *v205) >> 2;
            int v517 = 4;
          }
          if (v515 > v212)
          {
            int v518 = 2;
          }
          else
          {
            int v212 = v310;
            int v518 = v517;
          }
          if (v515 > v516)
          {
            int v212 = v516;
            int v518 = 3;
          }
          uint64_t v2478 = v307;
          v2500 = *(int **)*a2;
          uint64_t v2457 = v209;
          if (!v212) {
            goto LABEL_742;
          }
          unint64_t v519 = *(void *)(v205[3] + 8 * (v212 - 1));
          if (v519 < 0x10) {
            goto LABEL_742;
          }
          switch(v518)
          {
            case 1:
              if (v212 == 2)
              {
                uint64_t v2154 = *v207;
                if (v2154)
                {
                  uint64_t v2155 = 0;
                  uint64_t v2156 = 0;
                  uint64_t v2157 = 0;
                  uint64_t v2158 = v206[19];
                  uint64_t v2159 = *(void *)(v305 + 152);
                  v2160 = (uint64_t *)v205[19];
                  unint64_t v2161 = v207[1];
                  v2162 = (uint64_t *)v206[3];
                  uint64_t v2163 = *v2162;
                  uint64_t v2164 = v2162[1];
                  v2165 = *(uint64_t **)(v305 + 24);
                  uint64_t v2167 = *v2165;
                  uint64_t v2166 = v2165[1];
                  uint64_t v2168 = v2167 - v2166 * v2500[1];
                  if (v2161 <= 1) {
                    uint64_t v2169 = 1;
                  }
                  else {
                    uint64_t v2169 = v207[1];
                  }
                  uint64_t v2170 = v2163 - v2164 * v2161;
                  do
                  {
                    if (v2161)
                    {
                      uint64_t v2171 = 0;
                      do
                      {
                        if ((int)v519 >= 1)
                        {
                          uint64_t v2172 = *(void *)(v2158 + 8 * v2157);
                          int v2173 = v519;
                          v2174 = v2160;
                          v2175 = (uint64_t *)(v2159 + 8 * v2156);
                          do
                          {
                            uint64_t v2176 = *v2175;
                            if (*v2175)
                            {
                              uint64_t v2177 = 1;
                              uint64_t v2178 = v2172;
                              do
                              {
                                if (v2176) {
                                  uint64_t v2179 = v2178;
                                }
                                else {
                                  uint64_t v2179 = 1;
                                }
                                v2177 *= v2179;
                                v2178 *= v2178;
                                BOOL v17 = (unint64_t)v2176 > 1;
                                v2176 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              uint64_t v2177 = 1;
                            }
                            *v2174++ = v2177;
                            ++v2175;
                            BOOL v17 = v2173-- <= 1;
                          }
                          while (!v17);
                        }
                        v2157 += v2164;
                        v2156 += v2166;
                        v2160 += (int)v519;
                        ++v2171;
                      }
                      while (v2171 != v2169);
                    }
                    v2157 += v2170;
                    v2156 += v2168;
                    ++v2155;
                  }
                  while (v2155 != v2154);
                }
              }
              else if (v212 == 1)
              {
                uint64_t v1371 = *v207;
                if (v1371)
                {
                  uint64_t v1372 = 0;
                  uint64_t v1373 = 0;
                  uint64_t v1374 = 0;
                  uint64_t v1375 = v206[19];
                  uint64_t v1376 = *(void *)(v305 + 152);
                  uint64_t v1377 = (uint64_t *)v205[19];
                  uint64_t v1378 = *(void *)v206[3];
                  uint64_t v1379 = **(void **)(v305 + 24);
                  do
                  {
                    if ((int)v519 >= 1)
                    {
                      uint64_t v1380 = *(void *)(v1375 + 8 * v1374);
                      int v1381 = v519;
                      uint64_t v1382 = v1377;
                      uint64_t v1383 = (uint64_t *)(v1376 + 8 * v1373);
                      do
                      {
                        uint64_t v1384 = *v1383;
                        if (*v1383)
                        {
                          uint64_t v1385 = 1;
                          uint64_t v1386 = v1380;
                          do
                          {
                            if (v1384) {
                              uint64_t v1387 = v1386;
                            }
                            else {
                              uint64_t v1387 = 1;
                            }
                            v1385 *= v1387;
                            v1386 *= v1386;
                            BOOL v17 = (unint64_t)v1384 > 1;
                            v1384 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v1385 = 1;
                        }
                        *v1382++ = v1385;
                        ++v1383;
                        BOOL v17 = v1381-- <= 1;
                      }
                      while (!v17);
                    }
                    v1374 += v1378;
                    v1373 += v1379;
                    v1377 += (int)v519;
                    ++v1372;
                  }
                  while (v1372 != v1371);
                }
              }
              else
              {
                unint64_t v2421 = v205[6];
                if (v2421)
                {
                  unint64_t v2180 = 0;
                  uint64_t v2356 = *(void *)(v305 + 152);
                  uint64_t v2374 = v206[19];
                  v2452 = (uint64_t *)v205[19];
                  do
                  {
                    uint64_t v2181 = 0;
                    if ((v209 & 0x80000000) != 0)
                    {
                      v2184 = v2500;
                    }
                    else
                    {
                      uint64_t v2182 = v206[3];
                      int v2183 = v2180;
                      v2184 = v2500;
                      do
                      {
                        ldiv_t v2185 = ldiv(v2183, v207[v209]);
                        int v2183 = v2185.quot;
                        v2181 += *(void *)(v2182 + 8 * v209--) * v2185.rem;
                      }
                      while (v209 != -1);
                    }
                    uint64_t v2186 = v2478;
                    if ((v2478 & 0x80000000) != 0)
                    {
                      LODWORD(v2187) = 0;
                    }
                    else
                    {
                      uint64_t v2187 = 0;
                      uint64_t v2188 = *(void *)(v305 + 24);
                      int v2189 = v2180;
                      do
                      {
                        ldiv_t v2190 = ldiv(v2189, v2184[v2186]);
                        int v2189 = v2190.quot;
                        v2187 += *(void *)(v2188 + 8 * v2186--) * v2190.rem;
                      }
                      while (v2186 != -1);
                    }
                    if ((int)v519 >= 1)
                    {
                      uint64_t v2191 = *(void *)(v2374 + 8 * (int)v2181);
                      int v2192 = v519;
                      v2193 = v2452;
                      v2194 = (uint64_t *)(v2356 + 8 * (int)v2187);
                      do
                      {
                        uint64_t v2195 = *v2194;
                        if (*v2194)
                        {
                          uint64_t v2196 = 1;
                          uint64_t v2197 = v2191;
                          do
                          {
                            if (v2195) {
                              uint64_t v2198 = v2197;
                            }
                            else {
                              uint64_t v2198 = 1;
                            }
                            v2196 *= v2198;
                            v2197 *= v2197;
                            BOOL v17 = (unint64_t)v2195 > 1;
                            v2195 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v2196 = 1;
                        }
                        *v2193++ = v2196;
                        ++v2194;
                        BOOL v17 = v2192-- <= 1;
                      }
                      while (!v17);
                    }
                    v2452 += (int)v519;
                    v2180 += (int)v519;
                    uint64_t v209 = v2457;
                  }
                  while (v2180 < v2421);
                }
              }
              break;
            case 2:
              if (v212 == 2)
              {
                uint64_t v2199 = *v207;
                if (v2199)
                {
                  uint64_t v2200 = 0;
                  uint64_t v2201 = 0;
                  uint64_t v2202 = 0;
                  uint64_t v2203 = v206[19];
                  uint64_t v2204 = *(void *)(v305 + 152);
                  v2205 = (uint64_t *)v205[19];
                  unint64_t v2206 = v207[1];
                  v2207 = (uint64_t *)v206[3];
                  uint64_t v2208 = *v2207;
                  uint64_t v2209 = v2207[1];
                  v2210 = *(uint64_t **)(v305 + 24);
                  uint64_t v2212 = *v2210;
                  uint64_t v2211 = v2210[1];
                  uint64_t v2213 = v2212 - v2211 * v2500[1];
                  if (v2206 <= 1) {
                    uint64_t v2214 = 1;
                  }
                  else {
                    uint64_t v2214 = v207[1];
                  }
                  uint64_t v2215 = v2208 - v2209 * v2206;
                  do
                  {
                    if (v2206)
                    {
                      uint64_t v2216 = 0;
                      do
                      {
                        if ((int)v519 >= 1)
                        {
                          uint64_t v2217 = *(void *)(v2204 + 8 * v2201);
                          int v2218 = v519;
                          v2219 = v2205;
                          v2220 = (uint64_t *)(v2203 + 8 * v2202);
                          do
                          {
                            if (v2217)
                            {
                              uint64_t v2221 = *v2220;
                              uint64_t v2222 = 1;
                              uint64_t v2223 = v2217;
                              do
                              {
                                if (v2223) {
                                  uint64_t v2224 = v2221;
                                }
                                else {
                                  uint64_t v2224 = 1;
                                }
                                v2222 *= v2224;
                                v2221 *= v2221;
                                BOOL v17 = (unint64_t)v2223 > 1;
                                v2223 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              uint64_t v2222 = 1;
                            }
                            *v2219++ = v2222;
                            ++v2220;
                            BOOL v17 = v2218-- <= 1;
                          }
                          while (!v17);
                        }
                        v2202 += v2209;
                        v2201 += v2211;
                        v2205 += (int)v519;
                        ++v2216;
                      }
                      while (v2216 != v2214);
                    }
                    v2202 += v2215;
                    v2201 += v2213;
                    ++v2200;
                  }
                  while (v2200 != v2199);
                }
              }
              else if (v212 == 1)
              {
                uint64_t v1388 = *v207;
                if (v1388)
                {
                  uint64_t v1389 = 0;
                  uint64_t v1390 = 0;
                  uint64_t v1391 = 0;
                  uint64_t v1392 = v206[19];
                  uint64_t v1393 = *(void *)(v305 + 152);
                  uint64_t v1394 = (uint64_t *)v205[19];
                  uint64_t v1395 = *(void *)v206[3];
                  uint64_t v1396 = **(void **)(v305 + 24);
                  do
                  {
                    if ((int)v519 >= 1)
                    {
                      uint64_t v1397 = *(void *)(v1393 + 8 * v1390);
                      int v1398 = v519;
                      uint64_t v1399 = v1394;
                      uint64_t v1400 = (uint64_t *)(v1392 + 8 * v1391);
                      do
                      {
                        if (v1397)
                        {
                          uint64_t v1401 = *v1400;
                          uint64_t v1402 = 1;
                          uint64_t v1403 = v1397;
                          do
                          {
                            if (v1403) {
                              uint64_t v1404 = v1401;
                            }
                            else {
                              uint64_t v1404 = 1;
                            }
                            v1402 *= v1404;
                            v1401 *= v1401;
                            BOOL v17 = (unint64_t)v1403 > 1;
                            v1403 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v1402 = 1;
                        }
                        *v1399++ = v1402;
                        ++v1400;
                        BOOL v17 = v1398-- <= 1;
                      }
                      while (!v17);
                    }
                    v1391 += v1395;
                    v1390 += v1396;
                    v1394 += (int)v519;
                    ++v1389;
                  }
                  while (v1389 != v1388);
                }
              }
              else
              {
                unint64_t v2422 = v205[6];
                if (v2422)
                {
                  unint64_t v2225 = 0;
                  uint64_t v2357 = *(void *)(v305 + 152);
                  uint64_t v2375 = v206[19];
                  v2453 = (uint64_t *)v205[19];
                  do
                  {
                    uint64_t v2226 = 0;
                    if ((v209 & 0x80000000) != 0)
                    {
                      v2229 = v2500;
                    }
                    else
                    {
                      uint64_t v2227 = v206[3];
                      int v2228 = v2225;
                      v2229 = v2500;
                      do
                      {
                        ldiv_t v2230 = ldiv(v2228, v207[v209]);
                        int v2228 = v2230.quot;
                        v2226 += *(void *)(v2227 + 8 * v209--) * v2230.rem;
                      }
                      while (v209 != -1);
                    }
                    uint64_t v2231 = v2478;
                    if ((v2478 & 0x80000000) != 0)
                    {
                      LODWORD(v2232) = 0;
                    }
                    else
                    {
                      uint64_t v2232 = 0;
                      uint64_t v2233 = *(void *)(v305 + 24);
                      int v2234 = v2225;
                      do
                      {
                        ldiv_t v2235 = ldiv(v2234, v2229[v2231]);
                        int v2234 = v2235.quot;
                        v2232 += *(void *)(v2233 + 8 * v2231--) * v2235.rem;
                      }
                      while (v2231 != -1);
                    }
                    if ((int)v519 >= 1)
                    {
                      uint64_t v2236 = *(void *)(v2357 + 8 * (int)v2232);
                      int v2237 = v519;
                      v2238 = v2453;
                      v2239 = (uint64_t *)(v2375 + 8 * (int)v2226);
                      do
                      {
                        if (v2236)
                        {
                          uint64_t v2240 = *v2239;
                          uint64_t v2241 = 1;
                          uint64_t v2242 = v2236;
                          do
                          {
                            if (v2242) {
                              uint64_t v2243 = v2240;
                            }
                            else {
                              uint64_t v2243 = 1;
                            }
                            v2241 *= v2243;
                            v2240 *= v2240;
                            BOOL v17 = (unint64_t)v2242 > 1;
                            v2242 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v2241 = 1;
                        }
                        *v2238++ = v2241;
                        ++v2239;
                        BOOL v17 = v2237-- <= 1;
                      }
                      while (!v17);
                    }
                    v2453 += (int)v519;
                    v2225 += (int)v519;
                    uint64_t v209 = v2457;
                  }
                  while (v2225 < v2422);
                }
              }
              break;
            case 3:
              if (v212 == 2)
              {
                uint64_t v1642 = *v207;
                if (v1642)
                {
                  uint64_t v1643 = 0;
                  uint64_t v1644 = 0;
                  uint64_t v1645 = 0;
                  uint64_t v1646 = v206[19];
                  uint64_t v1647 = *(void *)(v305 + 152);
                  uint64_t v1648 = (uint64_t *)v205[19];
                  unint64_t v1649 = v207[1];
                  uint64_t v1650 = (uint64_t *)v206[3];
                  uint64_t v1651 = *v1650;
                  uint64_t v1652 = v1650[1];
                  uint64_t v1653 = *(uint64_t **)(v305 + 24);
                  uint64_t v1655 = *v1653;
                  uint64_t v1654 = v1653[1];
                  uint64_t v1656 = v1655 - v1654 * v2500[1];
                  if (v1649 <= 1) {
                    uint64_t v1657 = 1;
                  }
                  else {
                    uint64_t v1657 = v207[1];
                  }
                  uint64_t v1658 = v1651 - v1652 * v1649;
                  do
                  {
                    if (v1649)
                    {
                      uint64_t v1659 = 0;
                      do
                      {
                        if ((int)v519 >= 1)
                        {
                          ldiv_t v1660 = (uint64_t *)(v1647 + 8 * v1644);
                          int v1661 = v519;
                          uint64_t v1662 = v1648;
                          uint64_t v1663 = (uint64_t *)(v1646 + 8 * v1645);
                          do
                          {
                            uint64_t v1664 = *v1660;
                            if (*v1660)
                            {
                              uint64_t v1665 = *v1663;
                              uint64_t v1666 = 1;
                              do
                              {
                                if (v1664) {
                                  uint64_t v1667 = v1665;
                                }
                                else {
                                  uint64_t v1667 = 1;
                                }
                                v1666 *= v1667;
                                v1665 *= v1665;
                                BOOL v17 = (unint64_t)v1664 > 1;
                                v1664 >>= 1;
                              }
                              while (v17);
                            }
                            else
                            {
                              uint64_t v1666 = 1;
                            }
                            *v1662++ = v1666;
                            ++v1663;
                            ++v1660;
                            BOOL v17 = v1661-- <= 1;
                          }
                          while (!v17);
                        }
                        v1645 += v1652;
                        v1644 += v1654;
                        v1648 += (int)v519;
                        ++v1659;
                      }
                      while (v1659 != v1657);
                    }
                    v1645 += v1658;
                    v1644 += v1656;
                    ++v1643;
                  }
                  while (v1643 != v1642);
                }
              }
              else if (v212 == 1)
              {
                uint64_t v520 = *v207;
                if (v520)
                {
                  uint64_t v521 = 0;
                  uint64_t v522 = 0;
                  uint64_t v523 = 0;
                  uint64_t v524 = v206[19];
                  uint64_t v525 = *(void *)(v305 + 152);
                  uint64_t v526 = (uint64_t *)v205[19];
                  uint64_t v527 = *(void *)v206[3];
                  uint64_t v528 = **(void **)(v305 + 24);
                  do
                  {
                    if ((int)v519 >= 1)
                    {
                      uint64_t v529 = (uint64_t *)(v525 + 8 * v522);
                      int v530 = v519;
                      uint64_t v531 = v526;
                      int v532 = (uint64_t *)(v524 + 8 * v523);
                      do
                      {
                        uint64_t v533 = *v529;
                        if (*v529)
                        {
                          uint64_t v534 = *v532;
                          uint64_t v535 = 1;
                          do
                          {
                            if (v533) {
                              uint64_t v536 = v534;
                            }
                            else {
                              uint64_t v536 = 1;
                            }
                            v535 *= v536;
                            v534 *= v534;
                            BOOL v17 = (unint64_t)v533 > 1;
                            v533 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v535 = 1;
                        }
                        *v531++ = v535;
                        ++v532;
                        ++v529;
                        BOOL v17 = v530-- <= 1;
                      }
                      while (!v17);
                    }
                    v523 += v527;
                    v522 += v528;
                    v526 += (int)v519;
                    ++v521;
                  }
                  while (v521 != v520);
                }
              }
              else
              {
                unint64_t v2412 = v205[6];
                if (v2412)
                {
                  unint64_t v1668 = 0;
                  uint64_t v2352 = *(void *)(v305 + 152);
                  uint64_t v2367 = v206[19];
                  v2442 = (uint64_t *)v205[19];
                  do
                  {
                    uint64_t v1669 = 0;
                    if ((v209 & 0x80000000) != 0)
                    {
                      uint64_t v1672 = v2500;
                    }
                    else
                    {
                      uint64_t v1670 = v206[3];
                      int v1671 = v1668;
                      uint64_t v1672 = v2500;
                      do
                      {
                        ldiv_t v1673 = ldiv(v1671, v207[v209]);
                        int v1671 = v1673.quot;
                        v1669 += *(void *)(v1670 + 8 * v209--) * v1673.rem;
                      }
                      while (v209 != -1);
                    }
                    uint64_t v1674 = v2478;
                    if ((v2478 & 0x80000000) != 0)
                    {
                      LODWORD(v1675) = 0;
                    }
                    else
                    {
                      uint64_t v1675 = 0;
                      uint64_t v1676 = *(void *)(v305 + 24);
                      int v1677 = v1668;
                      do
                      {
                        ldiv_t v1678 = ldiv(v1677, v1672[v1674]);
                        int v1677 = v1678.quot;
                        v1675 += *(void *)(v1676 + 8 * v1674--) * v1678.rem;
                      }
                      while (v1674 != -1);
                    }
                    if ((int)v519 >= 1)
                    {
                      uint64_t v1679 = (uint64_t *)(v2352 + 8 * (int)v1675);
                      int v1680 = v519;
                      uint64_t v1681 = v2442;
                      uint64_t v1682 = (uint64_t *)(v2367 + 8 * (int)v1669);
                      do
                      {
                        uint64_t v1683 = *v1679;
                        if (*v1679)
                        {
                          uint64_t v1684 = *v1682;
                          uint64_t v1685 = 1;
                          do
                          {
                            if (v1683) {
                              uint64_t v1686 = v1684;
                            }
                            else {
                              uint64_t v1686 = 1;
                            }
                            v1685 *= v1686;
                            v1684 *= v1684;
                            BOOL v17 = (unint64_t)v1683 > 1;
                            v1683 >>= 1;
                          }
                          while (v17);
                        }
                        else
                        {
                          uint64_t v1685 = 1;
                        }
                        *v1681++ = v1685;
                        ++v1682;
                        ++v1679;
                        BOOL v17 = v1680-- <= 1;
                      }
                      while (!v17);
                    }
                    v2442 += (int)v519;
                    v1668 += (int)v519;
                    uint64_t v209 = v2457;
                  }
                  while (v1668 < v2412);
                }
              }
              break;
            default:
LABEL_742:
              switch(v515)
              {
                case 1uLL:
                  uint64_t v537 = v205[6];
                  if (v537)
                  {
                    uint64_t v538 = 0;
                    uint64_t v539 = 0;
                    uint64_t v540 = 0;
                    uint64_t v541 = v206[19];
                    uint64_t v542 = *(void *)(v305 + 152);
                    uint64_t v543 = v205[19];
                    uint64_t v544 = *(void *)v206[3];
                    uint64_t v545 = **(void **)(v305 + 24);
                    do
                    {
                      uint64_t v546 = *(void *)(v542 + 8 * v539);
                      if (v546)
                      {
                        uint64_t v547 = *(void *)(v541 + 8 * v540);
                        uint64_t v548 = 1;
                        do
                        {
                          if (v546) {
                            uint64_t v549 = v547;
                          }
                          else {
                            uint64_t v549 = 1;
                          }
                          v548 *= v549;
                          v547 *= v547;
                          BOOL v17 = (unint64_t)v546 > 1;
                          v546 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        uint64_t v548 = 1;
                      }
                      *(void *)(v543 + 8 * v538) = v548;
                      v540 += v544;
                      v539 += v545;
                      ++v538;
                    }
                    while (v538 != v537);
                  }
                  break;
                case 2uLL:
                  uint64_t v1055 = *v207;
                  if (v1055)
                  {
                    uint64_t v1056 = 0;
                    uint64_t v1057 = 0;
                    uint64_t v1058 = 0;
                    uint64_t v1059 = 0;
                    uint64_t v1060 = v206[19];
                    uint64_t v1061 = *(void *)(v305 + 152);
                    uint64_t v1062 = v205[19];
                    unint64_t v1063 = v207[1];
                    uint64_t v1064 = (uint64_t *)v206[3];
                    uint64_t v1065 = *v1064;
                    uint64_t v1066 = v1064[1];
                    uint64_t v1067 = *(uint64_t **)(v305 + 24);
                    uint64_t v1069 = *v1067;
                    uint64_t v1068 = v1067[1];
                    uint64_t v1070 = v1069 - v1068 * v2500[1];
                    if (v1063 <= 1) {
                      uint64_t v1071 = 1;
                    }
                    else {
                      uint64_t v1071 = v207[1];
                    }
                    uint64_t v1072 = v1065 - v1066 * v1063;
                    do
                    {
                      if (v1063)
                      {
                        uint64_t v1073 = v1057 + v1071;
                        do
                        {
                          uint64_t v1074 = *(void *)(v1061 + 8 * v1058);
                          if (v1074)
                          {
                            uint64_t v1075 = *(void *)(v1060 + 8 * v1059);
                            uint64_t v1076 = 1;
                            do
                            {
                              if (v1074) {
                                uint64_t v1077 = v1075;
                              }
                              else {
                                uint64_t v1077 = 1;
                              }
                              v1076 *= v1077;
                              v1075 *= v1075;
                              BOOL v17 = (unint64_t)v1074 > 1;
                              v1074 >>= 1;
                            }
                            while (v17);
                          }
                          else
                          {
                            uint64_t v1076 = 1;
                          }
                          *(void *)(v1062 + 8 * v1057) = v1076;
                          v1059 += v1066;
                          v1058 += v1068;
                          ++v1057;
                        }
                        while (v1057 != v1073);
                        uint64_t v1057 = v1073;
                      }
                      v1059 += v1072;
                      v1058 += v1070;
                      ++v1056;
                    }
                    while (v1056 != v1055);
                  }
                  break;
                case 3uLL:
                  uint64_t v1078 = *v207;
                  if (v1078)
                  {
                    uint64_t v1079 = 0;
                    uint64_t v1080 = 0;
                    uint64_t v1081 = 0;
                    uint64_t v1082 = 0;
                    uint64_t v1083 = v206[19];
                    uint64_t v1084 = *(void *)(v305 + 152);
                    uint64_t v1085 = v205[19];
                    unint64_t v1086 = v207[1];
                    uint64_t v1087 = (void *)v206[3];
                    uint64_t v1088 = v1087[1];
                    uint64_t v1089 = *(void **)(v305 + 24);
                    uint64_t v1090 = v1089[1];
                    uint64_t v1091 = *v1089 - v1090 * v2500[1];
                    if (v1086 <= 1) {
                      uint64_t v1092 = 1;
                    }
                    else {
                      uint64_t v1092 = v207[1];
                    }
                    unint64_t v1093 = *v1087 - v1088 * v1086;
                    do
                    {
                      if (v1086)
                      {
                        uint64_t v1094 = 0;
                        unint64_t v1095 = v207[2];
                        uint64_t v1096 = v1087[2];
                        uint64_t v1097 = v1089[2];
                        if (v1095 <= 1) {
                          uint64_t v1098 = 1;
                        }
                        else {
                          uint64_t v1098 = v207[2];
                        }
                        uint64_t v1099 = v1090 - v1097 * v2500[2];
                        do
                        {
                          if (v1095)
                          {
                            uint64_t v1100 = 0;
                            do
                            {
                              uint64_t v1101 = *(void *)(v1084 + 8 * v1081);
                              if (v1101)
                              {
                                uint64_t v1102 = *(void *)(v1083 + 8 * v1082);
                                uint64_t v1103 = 1;
                                do
                                {
                                  if (v1101) {
                                    uint64_t v1104 = v1102;
                                  }
                                  else {
                                    uint64_t v1104 = 1;
                                  }
                                  v1103 *= v1104;
                                  v1102 *= v1102;
                                  BOOL v17 = (unint64_t)v1101 > 1;
                                  v1101 >>= 1;
                                }
                                while (v17);
                              }
                              else
                              {
                                uint64_t v1103 = 1;
                              }
                              *(void *)(v1085 + 8 * v1080) = v1103;
                              uint64_t v1105 = v1080 + 1;
                              v1082 += v1096;
                              v1081 += v1097;
                              ++v1100;
                              ++v1080;
                            }
                            while (v1100 != v1098);
                          }
                          else
                          {
                            uint64_t v1105 = v1080;
                          }
                          v1082 += v1088 - v1096 * v1095;
                          v1081 += v1099;
                          ++v1094;
                          uint64_t v1080 = v1105;
                        }
                        while (v1094 != v1092);
                      }
                      else
                      {
                        uint64_t v1105 = v1080;
                      }
                      v1082 += v1093;
                      v1081 += v1091;
                      ++v1079;
                      uint64_t v1080 = v1105;
                    }
                    while (v1079 != v1078);
                  }
                  break;
                case 4uLL:
                  uint64_t v2463 = *v207;
                  if (v2463)
                  {
                    uint64_t v1106 = 0;
                    uint64_t v1107 = 0;
                    uint64_t v1108 = 0;
                    uint64_t v1109 = 0;
                    uint64_t v1110 = v206[19];
                    uint64_t v1111 = *(void *)(v305 + 152);
                    uint64_t v1112 = v205[19];
                    unint64_t v1113 = v207[1];
                    uint64_t v1114 = (void *)v206[3];
                    uint64_t v1115 = *(void **)(v305 + 24);
                    uint64_t v2348 = v1115[1];
                    uint64_t v2405 = *v1115 - v2348 * v2500[1];
                    if (v1113 <= 1) {
                      uint64_t v1116 = 1;
                    }
                    else {
                      uint64_t v1116 = v207[1];
                    }
                    uint64_t v2361 = v1114[1];
                    unint64_t v2383 = *v1114 - v2361 * v1113;
                    unsigned int v1117 = v207;
                    do
                    {
                      uint64_t v2482 = v1106;
                      if (v1113)
                      {
                        uint64_t v1118 = 0;
                        unint64_t v1119 = v207[2];
                        uint64_t v1120 = v1114[2];
                        uint64_t v1121 = v1115[2];
                        if (v1119 <= 1) {
                          uint64_t v1122 = 1;
                        }
                        else {
                          uint64_t v1122 = v207[2];
                        }
                        uint64_t v1123 = v2348 - v1121 * v2500[2];
                        do
                        {
                          if (v1119)
                          {
                            uint64_t v1124 = 0;
                            unint64_t v1125 = v207[3];
                            uint64_t v1126 = v1114[3];
                            uint64_t v1127 = v1115[3];
                            if (v1125 <= 1) {
                              uint64_t v1128 = 1;
                            }
                            else {
                              uint64_t v1128 = v207[3];
                            }
                            uint64_t v1129 = v1121 - v1127 * v2500[3];
                            do
                            {
                              if (v1125)
                              {
                                uint64_t v1130 = 0;
                                do
                                {
                                  uint64_t v1131 = *(void *)(v1111 + 8 * v1108);
                                  if (v1131)
                                  {
                                    uint64_t v1132 = *(void *)(v1110 + 8 * v1109);
                                    uint64_t v1133 = 1;
                                    do
                                    {
                                      if (v1131) {
                                        uint64_t v1134 = v1132;
                                      }
                                      else {
                                        uint64_t v1134 = 1;
                                      }
                                      v1133 *= v1134;
                                      v1132 *= v1132;
                                      BOOL v17 = (unint64_t)v1131 > 1;
                                      v1131 >>= 1;
                                    }
                                    while (v17);
                                  }
                                  else
                                  {
                                    uint64_t v1133 = 1;
                                  }
                                  *(void *)(v1112 + 8 * v1107) = v1133;
                                  uint64_t v1135 = v1107 + 1;
                                  v1109 += v1126;
                                  v1108 += v1127;
                                  ++v1130;
                                  ++v1107;
                                }
                                while (v1130 != v1128);
                              }
                              else
                              {
                                uint64_t v1135 = v1107;
                              }
                              v1109 += v1120 - v1126 * v1125;
                              v1108 += v1129;
                              ++v1124;
                              uint64_t v1107 = v1135;
                            }
                            while (v1124 != v1122);
                          }
                          else
                          {
                            uint64_t v1135 = v1107;
                          }
                          v1109 += v2361 - v1120 * v1119;
                          v1108 += v1123;
                          ++v1118;
                          uint64_t v1107 = v1135;
                          float v207 = v1117;
                        }
                        while (v1118 != v1116);
                      }
                      else
                      {
                        uint64_t v1135 = v1107;
                      }
                      v1109 += v2383;
                      v1108 += v2405;
                      uint64_t v1106 = v2482 + 1;
                      uint64_t v1107 = v1135;
                    }
                    while (v2482 + 1 != v2463);
                  }
                  break;
                default:
                  uint64_t v1039 = v205[6];
                  if (v1039)
                  {
                    uint64_t v1040 = 0;
                    uint64_t v2382 = v206[19];
                    uint64_t v2431 = *(void *)(v305 + 152);
                    uint64_t v2404 = v205[19];
                    do
                    {
                      uint64_t v1041 = 0;
                      if ((v209 & 0x80000000) != 0)
                      {
                        uint64_t v1044 = v2500;
                      }
                      else
                      {
                        uint64_t v1042 = v206[3];
                        int v1043 = v1040;
                        uint64_t v1044 = v2500;
                        do
                        {
                          ldiv_t v1045 = ldiv(v1043, v207[v209]);
                          int v1043 = v1045.quot;
                          v1041 += *(void *)(v1042 + 8 * v209--) * v1045.rem;
                        }
                        while (v209 != -1);
                      }
                      uint64_t v1046 = v2478;
                      if ((v2478 & 0x80000000) != 0)
                      {
                        LODWORD(v1047) = 0;
                      }
                      else
                      {
                        uint64_t v1047 = 0;
                        uint64_t v1048 = *(void *)(v305 + 24);
                        int v1049 = v1040;
                        do
                        {
                          ldiv_t v1050 = ldiv(v1049, v1044[v1046]);
                          int v1049 = v1050.quot;
                          v1047 += *(void *)(v1048 + 8 * v1046--) * v1050.rem;
                        }
                        while (v1046 != -1);
                      }
                      uint64_t v1051 = *(void *)(v2431 + 8 * (int)v1047);
                      if (v1051)
                      {
                        uint64_t v1052 = *(void *)(v2382 + 8 * (int)v1041);
                        uint64_t v1053 = 1;
                        uint64_t v209 = v2457;
                        do
                        {
                          if (v1051) {
                            uint64_t v1054 = v1052;
                          }
                          else {
                            uint64_t v1054 = 1;
                          }
                          v1053 *= v1054;
                          v1052 *= v1052;
                          BOOL v17 = (unint64_t)v1051 > 1;
                          v1051 >>= 1;
                        }
                        while (v17);
                      }
                      else
                      {
                        uint64_t v1053 = 1;
                        uint64_t v209 = v2457;
                      }
                      *(void *)(v2404 + 8 * v1040++) = v1053;
                    }
                    while (v1040 != v1039);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 6:
      switch(v37)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = powf(**(float **)(*a1 + 152), **(float **)(*a2 + 152));
          return;
        case 1:
          uint64_t v247 = *a2;
          int v248 = *(_DWORD *)(*a2 + 160);
          if (v248 >= 1)
          {
            float v249 = **(float **)(*a1 + 152);
            int v250 = *(float **)(*(void *)a3 + 152);
            unsigned int v251 = *(float **)(v247 + 152);
            unsigned int v252 = v248 + 1;
            do
            {
              float v253 = *v251++;
              *v250++ = powf(v249, v253);
              --v252;
            }
            while (v252 > 1);
          }
          return;
        case 2:
          int v254 = *(_DWORD *)(*a1 + 160);
          if (v254 >= 1)
          {
            float v255 = **(float **)(*a2 + 152);
            int v256 = *(float **)(*(void *)a3 + 152);
            int v257 = *(float **)(*a1 + 152);
            unsigned int v258 = v254 + 1;
            do
            {
              float v259 = *v257++;
              *v256++ = powf(v259, v255);
              --v258;
            }
            while (v258 > 1);
          }
          return;
        case 3:
          int v260 = *(_DWORD *)(*(void *)a3 + 48);
          if (v260 >= 1)
          {
            unsigned int v261 = *(float **)(*(void *)a3 + 152);
            uint64_t v262 = *(float **)(*a2 + 152);
            uint64_t v263 = *(float **)(*a1 + 152);
            unsigned int v264 = v260 + 1;
            do
            {
              float v265 = *v263++;
              float v266 = v265;
              float v267 = *v262++;
              *v261++ = powf(v266, v267);
              --v264;
            }
            while (v264 > 1);
          }
          return;
        default:
          uint64_t v238 = *(void **)a3;
          uint64_t v239 = *a1;
          int v240 = *(int **)*a1;
          uint64_t v241 = (*(void *)(*a1 + 8) - (void)v240) >> 2;
          uint64_t v242 = (v241 - 1);
          if ((int)v242 >= -1) {
            int v243 = -1;
          }
          else {
            int v243 = v241 - 1;
          }
          int v244 = v243 + 1;
          int v245 = v241 + 1;
          while (1)
          {
            unsigned int v246 = v245 - 2;
            if (v245 - 2 < 0) {
              break;
            }
            --v245;
            if (*(void *)(*(void *)(v239 + 24) + 8 * v246) != *(void *)(v238[3] + 8 * v246)) {
              goto LABEL_374;
            }
          }
          int v245 = v244;
LABEL_374:
          uint64_t v312 = *a2;
          uint64_t v313 = *(void *)*a2;
          unint64_t v314 = (unint64_t)(*(void *)(*a2 + 8) - v313) >> 2;
          uint64_t v315 = (v314 - 1);
          if ((int)v315 >= -1) {
            int v316 = -1;
          }
          else {
            int v316 = v314 - 1;
          }
          int v317 = v316 + 1;
          int v318 = v314 + 1;
          while (1)
          {
            unsigned int v319 = v318 - 2;
            if (v318 - 2 < 0) {
              break;
            }
            --v318;
            if (*(void *)(*(void *)(v312 + 24) + 8 * v319) != *(void *)(v238[3] + 8 * v319)) {
              goto LABEL_412;
            }
          }
          int v318 = v317;
LABEL_412:
          int v332 = v241 + 1;
          while (1)
          {
            unsigned int v333 = v332 - 2;
            if (v332 - 2 < 0) {
              break;
            }
            --v332;
            if (*(void *)(*(void *)(v239 + 24) + 8 * v333)) {
              goto LABEL_447;
            }
          }
          int v332 = v244;
LABEL_447:
          int v346 = v314 + 1;
          while (1)
          {
            unsigned int v347 = v346 - 2;
            if (v346 - 2 < 0) {
              break;
            }
            --v346;
            if (*(void *)(*(void *)(v312 + 24) + 8 * v347)) {
              goto LABEL_756;
            }
          }
          int v346 = v317;
LABEL_756:
          unint64_t v550 = (uint64_t)(v238[1] - *v238) >> 2;
          if (v245 <= v318) {
            int v551 = v318;
          }
          else {
            int v551 = v245;
          }
          if (v245 <= v346) {
            int v245 = v346;
          }
          if (v332 > v318) {
            int v318 = v332;
          }
          if (v550 > v318)
          {
            int v552 = 1;
          }
          else
          {
            int v318 = (uint64_t)(v238[1] - *v238) >> 2;
            int v552 = 4;
          }
          if (v550 > v245)
          {
            int v553 = 2;
          }
          else
          {
            int v245 = v318;
            int v553 = v552;
          }
          if (v550 > v551)
          {
            int v245 = v551;
            int v553 = 3;
          }
          v2331 = *(int **)*a1;
          uint64_t v2332 = *(void *)*a2;
          uint64_t v2458 = v315;
          uint64_t v2479 = v242;
          if (!v245) {
            goto LABEL_785;
          }
          unint64_t v2501 = *(void *)(v238[3] + 8 * (v245 - 1));
          if (v2501 < 0x10) {
            goto LABEL_785;
          }
          switch(v553)
          {
            case 1:
              if (v245 == 2)
              {
                uint64_t v2376 = *v240;
                if (v2376)
                {
                  uint64_t v2396 = 0;
                  uint64_t v2244 = 0;
                  uint64_t v2245 = 0;
                  uint64_t v2454 = *(void *)(v239 + 152);
                  uint64_t v2329 = *(void *)(v312 + 152);
                  uint64_t v2246 = v238[19];
                  unint64_t v2247 = v2331[1];
                  v2248 = *(uint64_t **)(v239 + 24);
                  uint64_t v2249 = *v2248;
                  uint64_t v2250 = v2248[1];
                  v2251 = *(void **)(v312 + 24);
                  uint64_t v2252 = v2251[1];
                  if (v2247 <= 1) {
                    uint64_t v2253 = 1;
                  }
                  else {
                    uint64_t v2253 = v2331[1];
                  }
                  uint64_t v2473 = v2253;
                  int v2358 = v2331[1];
                  uint64_t v2495 = v2250;
                  uint64_t v2339 = *v2251 - v2252 * *(int *)(v313 + 4);
                  uint64_t v2345 = v2249 - v2250 * v2247;
                  uint64_t v2254 = v2251[1];
                  uint64_t v2255 = 4 * v2252;
                  do
                  {
                    if (v2358)
                    {
                      uint64_t v2256 = 0;
                      uint64_t v2257 = v2329 + 4 * v2244;
                      do
                      {
                        if ((int)v2501 >= 1)
                        {
                          uint64_t v2258 = 0;
                          float v2259 = *(float *)(v2454 + 4 * v2245);
                          unsigned int v2260 = v2501 + 1;
                          do
                          {
                            *(float *)(v2246 + v2258) = powf(v2259, *(float *)(v2257 + v2258));
                            --v2260;
                            v2258 += 4;
                          }
                          while (v2260 > 1);
                        }
                        v2245 += v2495;
                        v2244 += v2254;
                        v2246 += 4 * (int)v2501;
                        ++v2256;
                        v2257 += v2255;
                      }
                      while (v2256 != v2473);
                    }
                    v2245 += v2345;
                    v2244 += v2339;
                    ++v2396;
                  }
                  while (v2396 != v2376);
                }
              }
              else
              {
                uint64_t v2436 = *a2;
                if (v245 == 1)
                {
                  uint64_t v1405 = *v240;
                  if (v1405)
                  {
                    uint64_t v1406 = 0;
                    uint64_t v1407 = 0;
                    uint64_t v2486 = *(void *)(v239 + 152);
                    uint64_t v1408 = *(void *)(v312 + 152);
                    uint64_t v1409 = v238[19];
                    uint64_t v1410 = **(void **)(v239 + 24);
                    uint64_t v1411 = 4 * **(void **)(v312 + 24);
                    do
                    {
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v1412 = 0;
                        float v1413 = *(float *)(v2486 + 4 * v1407);
                        unsigned int v1414 = v2501 + 1;
                        do
                        {
                          *(float *)(v1409 + v1412) = powf(v1413, *(float *)(v1408 + v1412));
                          --v1414;
                          v1412 += 4;
                        }
                        while (v1414 > 1);
                      }
                      v1407 += v1410;
                      ++v1406;
                      v1409 += 4 * (int)v2501;
                      v1408 += v1411;
                    }
                    while (v1406 != v1405);
                  }
                }
                else
                {
                  unint64_t v2423 = v238[6];
                  if (v2423)
                  {
                    unint64_t v2261 = 0;
                    uint64_t v2397 = *(void *)(v239 + 152);
                    uint64_t v2377 = *(void *)(v312 + 152);
                    uint64_t v2262 = v238[19];
                    do
                    {
                      uint64_t v2263 = v2479;
                      if ((v2479 & 0x80000000) != 0)
                      {
                        LODWORD(v2264) = 0;
                        uint64_t v2267 = v2332;
                      }
                      else
                      {
                        uint64_t v2264 = 0;
                        uint64_t v2265 = *(void *)(v239 + 24);
                        int v2266 = v2261;
                        uint64_t v2267 = v2332;
                        do
                        {
                          ldiv_t v2268 = ldiv(v2266, v2331[v2263]);
                          int v2266 = v2268.quot;
                          v2264 += *(void *)(v2265 + 8 * v2263--) * v2268.rem;
                        }
                        while (v2263 != -1);
                      }
                      uint64_t v2269 = v2458;
                      if ((v2458 & 0x80000000) != 0)
                      {
                        LODWORD(v2270) = 0;
                      }
                      else
                      {
                        uint64_t v2270 = 0;
                        uint64_t v2271 = *(void *)(v2436 + 24);
                        int v2272 = v2261;
                        do
                        {
                          ldiv_t v2273 = ldiv(v2272, *(int *)(v2267 + 4 * v2269));
                          int v2272 = v2273.quot;
                          v2270 += *(void *)(v2271 + 8 * v2269--) * v2273.rem;
                        }
                        while (v2269 != -1);
                      }
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v2274 = 0;
                        float v2275 = *(float *)(v2397 + 4 * (int)v2264);
                        unsigned int v2276 = v2501 + 1;
                        uint64_t v2277 = v2377 + 4 * (int)v2270;
                        do
                        {
                          *(float *)(v2262 + v2274) = powf(v2275, *(float *)(v2277 + v2274));
                          --v2276;
                          v2274 += 4;
                        }
                        while (v2276 > 1);
                      }
                      v2261 += (int)v2501;
                      v2262 += 4 * (int)v2501;
                    }
                    while (v2261 < v2423);
                  }
                }
              }
              break;
            case 2:
              if (v245 == 2)
              {
                uint64_t v2378 = *v240;
                if (v2378)
                {
                  uint64_t v2398 = 0;
                  uint64_t v2278 = 0;
                  uint64_t v2279 = 0;
                  uint64_t v2330 = *(void *)(v239 + 152);
                  uint64_t v2455 = *(void *)(v312 + 152);
                  uint64_t v2280 = v238[19];
                  unint64_t v2281 = v2331[1];
                  v2282 = *(uint64_t **)(v239 + 24);
                  uint64_t v2283 = *v2282;
                  uint64_t v2284 = v2282[1];
                  v2285 = *(void **)(v312 + 24);
                  if (v2281 <= 1) {
                    uint64_t v2286 = 1;
                  }
                  else {
                    uint64_t v2286 = v2331[1];
                  }
                  uint64_t v2474 = v2286;
                  uint64_t v2346 = v2283 - v2284 * v2281;
                  int v2359 = v2331[1];
                  uint64_t v2496 = v2285[1];
                  uint64_t v2340 = *v2285 - v2496 * *(int *)(v313 + 4);
                  uint64_t v2287 = v2284;
                  uint64_t v2288 = 4 * v2284;
                  do
                  {
                    if (v2359)
                    {
                      uint64_t v2289 = 0;
                      uint64_t v2290 = v2330 + 4 * v2279;
                      do
                      {
                        if ((int)v2501 >= 1)
                        {
                          uint64_t v2291 = 0;
                          float v2292 = *(float *)(v2455 + 4 * v2278);
                          unsigned int v2293 = v2501 + 1;
                          do
                          {
                            *(float *)(v2280 + v2291) = powf(*(float *)(v2290 + v2291), v2292);
                            --v2293;
                            v2291 += 4;
                          }
                          while (v2293 > 1);
                        }
                        v2279 += v2287;
                        v2278 += v2496;
                        v2280 += 4 * (int)v2501;
                        ++v2289;
                        v2290 += v2288;
                      }
                      while (v2289 != v2474);
                    }
                    v2279 += v2346;
                    v2278 += v2340;
                    ++v2398;
                  }
                  while (v2398 != v2378);
                }
              }
              else
              {
                uint64_t v2437 = *a2;
                if (v245 == 1)
                {
                  uint64_t v1415 = *v240;
                  if (v1415)
                  {
                    uint64_t v1416 = 0;
                    uint64_t v1417 = 0;
                    uint64_t v1418 = *(void *)(v239 + 152);
                    uint64_t v2487 = *(void *)(v312 + 152);
                    uint64_t v1419 = v238[19];
                    uint64_t v1420 = **(void **)(v239 + 24);
                    uint64_t v1421 = **(void **)(v312 + 24);
                    uint64_t v1422 = 4 * v1420;
                    do
                    {
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v1423 = 0;
                        float v1424 = *(float *)(v2487 + 4 * v1417);
                        unsigned int v1425 = v2501 + 1;
                        do
                        {
                          *(float *)(v1419 + v1423) = powf(*(float *)(v1418 + v1423), v1424);
                          --v1425;
                          v1423 += 4;
                        }
                        while (v1425 > 1);
                      }
                      v1417 += v1421;
                      ++v1416;
                      v1419 += 4 * (int)v2501;
                      v1418 += v1422;
                    }
                    while (v1416 != v1415);
                  }
                }
                else
                {
                  unint64_t v2424 = v238[6];
                  if (v2424)
                  {
                    unint64_t v2294 = 0;
                    uint64_t v2399 = *(void *)(v239 + 152);
                    uint64_t v2379 = *(void *)(v312 + 152);
                    uint64_t v2295 = v238[19];
                    do
                    {
                      uint64_t v2296 = v2479;
                      if ((v2479 & 0x80000000) != 0)
                      {
                        uint64_t v2297 = 0;
                        uint64_t v2300 = v2332;
                      }
                      else
                      {
                        uint64_t v2297 = 0;
                        uint64_t v2298 = *(void *)(v239 + 24);
                        int v2299 = v2294;
                        uint64_t v2300 = v2332;
                        do
                        {
                          ldiv_t v2301 = ldiv(v2299, v2331[v2296]);
                          int v2299 = v2301.quot;
                          v2297 += *(void *)(v2298 + 8 * v2296--) * v2301.rem;
                        }
                        while (v2296 != -1);
                      }
                      uint64_t v2302 = v2458;
                      if ((v2458 & 0x80000000) != 0)
                      {
                        LODWORD(v2303) = 0;
                      }
                      else
                      {
                        uint64_t v2303 = 0;
                        uint64_t v2304 = *(void *)(v2437 + 24);
                        int v2305 = v2294;
                        do
                        {
                          ldiv_t v2306 = ldiv(v2305, *(int *)(v2300 + 4 * v2302));
                          int v2305 = v2306.quot;
                          v2303 += *(void *)(v2304 + 8 * v2302--) * v2306.rem;
                        }
                        while (v2302 != -1);
                      }
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v2307 = 0;
                        float v2308 = *(float *)(v2379 + 4 * (int)v2303);
                        uint64_t v2309 = v2297 << 32;
                        unsigned int v2310 = v2501 + 1;
                        uint64_t v2311 = v2399 + (v2309 >> 30);
                        do
                        {
                          *(float *)(v2295 + v2307) = powf(*(float *)(v2311 + v2307), v2308);
                          --v2310;
                          v2307 += 4;
                        }
                        while (v2310 > 1);
                      }
                      v2294 += (int)v2501;
                      v2295 += 4 * (int)v2501;
                    }
                    while (v2294 < v2424);
                  }
                }
              }
              break;
            case 3:
              if (v245 == 2)
              {
                uint64_t v2353 = *v240;
                if (v2353)
                {
                  uint64_t v2368 = 0;
                  uint64_t v1687 = 0;
                  uint64_t v1688 = 0;
                  uint64_t v2325 = *(void *)(v312 + 152);
                  uint64_t v2328 = *(void *)(v239 + 152);
                  uint64_t v1689 = v238[19];
                  unint64_t v1690 = v2331[1];
                  uint64_t v1691 = *(uint64_t **)(v239 + 24);
                  uint64_t v1692 = *v1691;
                  uint64_t v1693 = v1691[1];
                  int v1694 = *(void **)(v312 + 24);
                  uint64_t v1695 = v1694[1];
                  if (v1690 <= 1) {
                    uint64_t v1696 = 1;
                  }
                  else {
                    uint64_t v1696 = v2331[1];
                  }
                  uint64_t v2490 = v1696;
                  uint64_t v2338 = v1692 - v1693 * v1690;
                  int v2344 = v2331[1];
                  uint64_t v2334 = *v1694 - v1695 * *(int *)(v313 + 4);
                  uint64_t v1697 = v1694[1];
                  uint64_t v2443 = 4 * v1695;
                  uint64_t v1698 = v1693;
                  uint64_t v2413 = 4 * v1693;
                  do
                  {
                    if (v2344)
                    {
                      uint64_t v1699 = 0;
                      uint64_t v1700 = v2325 + 4 * v1687;
                      uint64_t v1701 = v2328 + 4 * v1688;
                      do
                      {
                        if ((int)v2501 >= 1)
                        {
                          uint64_t v1702 = 0;
                          unsigned int v1703 = v2501 + 1;
                          do
                          {
                            *(float *)(v1689 + v1702) = powf(*(float *)(v1701 + v1702), *(float *)(v1700 + v1702));
                            --v1703;
                            v1702 += 4;
                          }
                          while (v1703 > 1);
                        }
                        v1688 += v1698;
                        v1687 += v1697;
                        v1689 += 4 * (int)v2501;
                        ++v1699;
                        v1700 += v2443;
                        v1701 += v2413;
                      }
                      while (v1699 != v2490);
                    }
                    v1688 += v2338;
                    v1687 += v2334;
                    ++v2368;
                  }
                  while (v2368 != v2353);
                }
              }
              else
              {
                uint64_t v2426 = *a2;
                if (v245 == 1)
                {
                  uint64_t v554 = *v240;
                  if (v554)
                  {
                    uint64_t v555 = 0;
                    uint64_t v556 = *(void *)(v239 + 152);
                    uint64_t v557 = *(void *)(v312 + 152);
                    uint64_t v558 = v238[19];
                    uint64_t v559 = 4 * **(void **)(v312 + 24);
                    uint64_t v560 = 4 * **(void **)(v239 + 24);
                    do
                    {
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v561 = 0;
                        unsigned int v562 = v2501 + 1;
                        do
                        {
                          *(float *)(v558 + v561) = powf(*(float *)(v556 + v561), *(float *)(v557 + v561));
                          --v562;
                          v561 += 4;
                        }
                        while (v562 > 1);
                      }
                      ++v555;
                      v558 += 4 * (int)v2501;
                      v557 += v559;
                      v556 += v560;
                    }
                    while (v555 != v554);
                  }
                }
                else
                {
                  unint64_t v2414 = v238[6];
                  if (v2414)
                  {
                    unint64_t v1704 = 0;
                    uint64_t v2389 = *(void *)(v239 + 152);
                    uint64_t v2369 = *(void *)(v312 + 152);
                    uint64_t v1705 = v238[19];
                    do
                    {
                      uint64_t v1706 = v2479;
                      if ((v2479 & 0x80000000) != 0)
                      {
                        uint64_t v1707 = 0;
                        uint64_t v1710 = v2332;
                      }
                      else
                      {
                        uint64_t v1707 = 0;
                        uint64_t v1708 = *(void *)(v239 + 24);
                        int v1709 = v1704;
                        uint64_t v1710 = v2332;
                        do
                        {
                          ldiv_t v1711 = ldiv(v1709, v2331[v1706]);
                          int v1709 = v1711.quot;
                          v1707 += *(void *)(v1708 + 8 * v1706--) * v1711.rem;
                        }
                        while (v1706 != -1);
                      }
                      uint64_t v1712 = v2458;
                      if ((v2458 & 0x80000000) != 0)
                      {
                        LODWORD(v1713) = 0;
                      }
                      else
                      {
                        uint64_t v1713 = 0;
                        uint64_t v1714 = *(void *)(v2426 + 24);
                        int v1715 = v1704;
                        do
                        {
                          ldiv_t v1716 = ldiv(v1715, *(int *)(v1710 + 4 * v1712));
                          int v1715 = v1716.quot;
                          v1713 += *(void *)(v1714 + 8 * v1712--) * v1716.rem;
                        }
                        while (v1712 != -1);
                      }
                      if ((int)v2501 >= 1)
                      {
                        uint64_t v1717 = 0;
                        uint64_t v1718 = v2369 + 4 * (int)v1713;
                        uint64_t v1719 = v1707 << 32;
                        unsigned int v1720 = v2501 + 1;
                        uint64_t v1721 = v2389 + (v1719 >> 30);
                        do
                        {
                          *(float *)(v1705 + v1717) = powf(*(float *)(v1721 + v1717), *(float *)(v1718 + v1717));
                          --v1720;
                          v1717 += 4;
                        }
                        while (v1720 > 1);
                      }
                      v1704 += (int)v2501;
                      v1705 += 4 * (int)v2501;
                    }
                    while (v1704 < v2414);
                  }
                }
              }
              break;
            default:
LABEL_785:
              switch(v550)
              {
                case 1uLL:
                  uint64_t v563 = v238[6];
                  if (v563)
                  {
                    uint64_t v564 = *(float **)(v239 + 152);
                    uint64_t v565 = *(float **)(v312 + 152);
                    unint64_t v566 = (float *)v238[19];
                    uint64_t v567 = **(void **)(v239 + 24);
                    uint64_t v568 = 4 * **(void **)(v312 + 24);
                    uint64_t v569 = 4 * v567;
                    do
                    {
                      *v566++ = powf(*v564, *v565);
                      uint64_t v565 = (float *)((char *)v565 + v568);
                      uint64_t v564 = (float *)((char *)v564 + v569);
                      --v563;
                    }
                    while (v563);
                  }
                  break;
                case 2uLL:
                  uint64_t v2505 = *v240;
                  if (v2505)
                  {
                    uint64_t v1150 = 0;
                    uint64_t v1151 = 0;
                    uint64_t v1152 = 0;
                    uint64_t v1153 = 0;
                    uint64_t v1154 = *(void *)(v239 + 152);
                    uint64_t v1155 = *(void *)(v312 + 152);
                    uint64_t v2406 = v238[19];
                    unint64_t v1156 = v2331[1];
                    uint64_t v1157 = *(uint64_t **)(v239 + 24);
                    uint64_t v1158 = *v1157;
                    uint64_t v1159 = v1157[1];
                    uint64_t v1160 = *(void **)(v312 + 24);
                    uint64_t v1161 = v1160[1];
                    uint64_t v2464 = *v1160 - v1161 * *(int *)(v313 + 4);
                    if (v1156 <= 1) {
                      uint64_t v1162 = 1;
                    }
                    else {
                      uint64_t v1162 = v2331[1];
                    }
                    uint64_t v2384 = v1162;
                    int v2483 = v2331[1];
                    uint64_t v2433 = v1158 - v1159 * v1156;
                    do
                    {
                      if (v2483)
                      {
                        uint64_t v1163 = v2384;
                        uint64_t v1164 = v1151 + v2384;
                        uint64_t v1165 = (float *)(v2406 + 4 * v1151);
                        do
                        {
                          *v1165++ = powf(*(float *)(v1154 + 4 * v1153), *(float *)(v1155 + 4 * v1152));
                          v1153 += v1159;
                          v1152 += v1161;
                          --v1163;
                        }
                        while (v1163);
                        uint64_t v1151 = v1164;
                      }
                      v1153 += v2433;
                      v1152 += v2464;
                      ++v1150;
                    }
                    while (v1150 != v2505);
                  }
                  break;
                case 3uLL:
                  uint64_t v2362 = *v240;
                  if (v2362)
                  {
                    uint64_t v1166 = 0;
                    uint64_t v1167 = 0;
                    uint64_t v1168 = 0;
                    uint64_t v1169 = 0;
                    uint64_t v1170 = *(void *)(v239 + 152);
                    uint64_t v1171 = *(void *)(v312 + 152);
                    uint64_t v1172 = v238[19];
                    unint64_t v1173 = v2331[1];
                    uint64_t v1174 = *(void **)(v239 + 24);
                    uint64_t v1175 = *v1174;
                    uint64_t v1176 = v1174[1];
                    uint64_t v2323 = v1176;
                    v2326 = v1174;
                    ldiv_t v1177 = *(void **)(v312 + 24);
                    uint64_t v2319 = v1177[1];
                    v2321 = v1177;
                    uint64_t v2342 = *v1177 - v2319 * *(int *)(v313 + 4);
                    int v2349 = v2331[1];
                    if (v1173 <= 1) {
                      uint64_t v1178 = 1;
                    }
                    else {
                      uint64_t v1178 = v2331[1];
                    }
                    uint64_t v2407 = v1178;
                    uint64_t v2336 = v1175 - v1176 * v1173;
                    do
                    {
                      uint64_t v2385 = v1166;
                      if (v2349)
                      {
                        uint64_t v1179 = 0;
                        unint64_t v1180 = v2331[2];
                        uint64_t v1181 = v2326[2];
                        uint64_t v1182 = v2321[2];
                        if (v1180 <= 1) {
                          uint64_t v1183 = 1;
                        }
                        else {
                          uint64_t v1183 = v2331[2];
                        }
                        uint64_t v2484 = v1183;
                        int v2506 = v2331[2];
                        uint64_t v2465 = v2323 - v1181 * v1180;
                        uint64_t v2434 = v2319 - v1182 * *(int *)(v2332 + 8);
                        do
                        {
                          uint64_t v1184 = v2484;
                          if (v2506)
                          {
                            do
                            {
                              *(float *)(v1172 + 4 * v1167++) = powf(*(float *)(v1170 + 4 * v1169), *(float *)(v1171 + 4 * v1168));
                              v1169 += v1181;
                              v1168 += v1182;
                              --v1184;
                            }
                            while (v1184);
                          }
                          v1169 += v2465;
                          v1168 += v2434;
                          ++v1179;
                        }
                        while (v1179 != v2407);
                      }
                      v1169 += v2336;
                      v1168 += v2342;
                      uint64_t v1166 = v2385 + 1;
                    }
                    while (v2385 + 1 != v2362);
                  }
                  break;
                case 4uLL:
                  uint64_t v2317 = *v240;
                  if (v2317)
                  {
                    uint64_t v1185 = 0;
                    uint64_t v1186 = 0;
                    uint64_t v1187 = 0;
                    uint64_t v1188 = 0;
                    uint64_t v1189 = *(void *)(v239 + 152);
                    uint64_t v1190 = *(void *)(v312 + 152);
                    uint64_t v1191 = v238[19];
                    unint64_t v1192 = v2331[1];
                    unsigned int v1193 = *(void **)(v239 + 24);
                    uint64_t v1194 = *v1193;
                    uint64_t v1195 = v1193[1];
                    v2327 = v1193;
                    unint64_t v1196 = *(void **)(v312 + 24);
                    v2324 = v1196;
                    uint64_t v2312 = v1196[1];
                    uint64_t v2313 = v1195;
                    uint64_t v2315 = *v1196 - v2312 * *(int *)(v313 + 4);
                    int v2316 = v2331[1];
                    if (v1192 <= 1) {
                      uint64_t v1197 = 1;
                    }
                    else {
                      uint64_t v1197 = v2331[1];
                    }
                    uint64_t v2337 = v1197;
                    uint64_t v2314 = v1194 - v1195 * v1192;
                    do
                    {
                      uint64_t v2318 = v1185;
                      if (v2316)
                      {
                        uint64_t v1198 = 0;
                        unint64_t v1199 = v2331[2];
                        if (v1199 <= 1) {
                          uint64_t v1200 = 1;
                        }
                        else {
                          uint64_t v1200 = v2331[2];
                        }
                        uint64_t v2408 = v1200;
                        uint64_t v2320 = v2324[2];
                        uint64_t v2322 = v2327[2];
                        uint64_t v2350 = v2313 - v2322 * v1199;
                        int v2363 = v2331[2];
                        uint64_t v2343 = v2312 - v2320 * *(int *)(v2332 + 8);
                        do
                        {
                          uint64_t v2386 = v1198;
                          if (v2363)
                          {
                            uint64_t v1201 = 0;
                            unint64_t v1202 = v2331[3];
                            uint64_t v1203 = v2327[3];
                            uint64_t v1204 = v2324[3];
                            if (v1202 <= 1) {
                              uint64_t v1205 = 1;
                            }
                            else {
                              uint64_t v1205 = v2331[3];
                            }
                            uint64_t v2485 = v1205;
                            int v2507 = v2331[3];
                            uint64_t v2466 = v2322 - v1203 * v1202;
                            uint64_t v2435 = v2320 - v1204 * *(int *)(v2332 + 12);
                            do
                            {
                              uint64_t v1206 = v2485;
                              if (v2507)
                              {
                                do
                                {
                                  *(float *)(v1191 + 4 * v1186++) = powf(*(float *)(v1189 + 4 * v1188), *(float *)(v1190 + 4 * v1187));
                                  v1188 += v1203;
                                  v1187 += v1204;
                                  --v1206;
                                }
                                while (v1206);
                              }
                              v1188 += v2466;
                              v1187 += v2435;
                              ++v1201;
                            }
                            while (v1201 != v2408);
                          }
                          v1188 += v2350;
                          v1187 += v2343;
                          uint64_t v1198 = v2386 + 1;
                        }
                        while (v2386 + 1 != v2337);
                      }
                      v1188 += v2314;
                      v1187 += v2315;
                      uint64_t v1185 = v2318 + 1;
                    }
                    while (v2318 + 1 != v2317);
                  }
                  break;
                default:
                  uint64_t v2432 = *a2;
                  uint64_t v1136 = v238[6];
                  if (v1136)
                  {
                    uint64_t v1137 = 0;
                    uint64_t v2504 = *(void *)(v239 + 152);
                    uint64_t v1138 = *(void *)(v312 + 152);
                    uint64_t v1139 = v238[19];
                    do
                    {
                      uint64_t v1140 = v2479;
                      if ((v2479 & 0x80000000) != 0)
                      {
                        LODWORD(v1141) = 0;
                      }
                      else
                      {
                        uint64_t v1141 = 0;
                        uint64_t v1142 = *(void *)(v239 + 24);
                        int v1143 = v1137;
                        do
                        {
                          ldiv_t v1144 = ldiv(v1143, v2331[v1140]);
                          int v1143 = v1144.quot;
                          v1141 += *(void *)(v1142 + 8 * v1140--) * v1144.rem;
                        }
                        while (v1140 != -1);
                      }
                      uint64_t v1145 = v2458;
                      if ((v2458 & 0x80000000) != 0)
                      {
                        LODWORD(v1146) = 0;
                      }
                      else
                      {
                        uint64_t v1146 = 0;
                        uint64_t v1147 = *(void *)(v2432 + 24);
                        int v1148 = v1137;
                        do
                        {
                          ldiv_t v1149 = ldiv(v1148, *(int *)(v2332 + 4 * v1145));
                          int v1148 = v1149.quot;
                          v1146 += *(void *)(v1147 + 8 * v1145--) * v1149.rem;
                        }
                        while (v1145 != -1);
                      }
                      *(float *)(v1139 + 4 * v1137++) = powf(*(float *)(v2504 + 4 * (int)v1141), *(float *)(v1138 + 4 * (int)v1146));
                    }
                    while (v1137 != v1136);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::Subtract::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Subtract::eval();
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::detail::Subtract>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = (**(unsigned char **)(*a1 + 152) != 0) ^ (**(unsigned char **)(*a2 + 152) != 0);
          goto LABEL_16;
        case 1:
          int v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            int v36 = **(unsigned __int8 **)(*a1 + 152);
            int v37 = *(unsigned char **)(*(void *)a3 + 152);
            int v38 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v39 = v35 + 1;
            do
            {
              int v40 = *v38++;
              *v37++ = (v36 != 0) ^ (v40 != 0);
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          int v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            int v42 = **(unsigned __int8 **)(*a2 + 152);
            int v43 = *(unsigned char **)(*(void *)a3 + 152);
            int v44 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v45 = v41 + 1;
            do
            {
              int v46 = *v44++;
              *v43++ = (v42 != 0) ^ (v46 != 0);
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            BOOL v48 = *(unsigned char **)(*(void *)a3 + 152);
            int v49 = *(unsigned __int8 **)(*a2 + 152);
            int v50 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v52 = *v50++;
              BOOL v53 = v52 != 0;
              int v54 = *v49++;
              *v48++ = v53 ^ (v54 != 0);
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          unsigned int v26 = *(void **)a3;
          char v27 = (void *)*a1;
          int v28 = *(int **)*a1;
          uint64_t v29 = (v27[1] - (void)v28) >> 2;
          uint64_t v30 = (v29 - 1);
          if ((int)v30 >= -1) {
            int v31 = -1;
          }
          else {
            int v31 = v29 - 1;
          }
          int v32 = v31 + 1;
          int v33 = v29 + 1;
          break;
      }
      while (1)
      {
        unsigned int v34 = v33 - 2;
        if (v33 - 2 < 0) {
          break;
        }
        --v33;
        if (*(void *)(v27[3] + 8 * v34) != *(void *)(v26[3] + 8 * v34)) {
          goto LABEL_147;
        }
      }
      int v33 = v32;
LABEL_147:
      uint64_t v215 = (void *)*a2;
      unsigned int v216 = *(int **)*a2;
      uint64_t v217 = (v215[1] - (void)v216) >> 2;
      uint64_t v218 = (v217 - 1);
      if ((int)v218 >= -1) {
        int v219 = -1;
      }
      else {
        int v219 = v217 - 1;
      }
      int v220 = v219 + 1;
      int v221 = v217 + 1;
      while (1)
      {
        unsigned int v222 = v221 - 2;
        if (v221 - 2 < 0) {
          break;
        }
        --v221;
        if (*(void *)(v215[3] + 8 * v222) != *(void *)(v26[3] + 8 * v222)) {
          goto LABEL_201;
        }
      }
      int v221 = v220;
LABEL_201:
      int v269 = v29 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v27[3] + 8 * v270)) {
          goto LABEL_236;
        }
      }
      int v269 = v32;
LABEL_236:
      int v283 = v217 + 1;
      while (1)
      {
        unsigned int v284 = v283 - 2;
        if (v283 - 2 < 0) {
          break;
        }
        --v283;
        if (*(void *)(v215[3] + 8 * v284)) {
          goto LABEL_271;
        }
      }
      int v283 = v220;
LABEL_271:
      unint64_t v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221) {
        int v298 = v221;
      }
      else {
        int v298 = v33;
      }
      if (v33 <= v283) {
        int v33 = v283;
      }
      if (v269 > v221) {
        int v221 = v269;
      }
      if (v297 > v221)
      {
        int v299 = 1;
      }
      else
      {
        int v221 = (uint64_t)(v26[1] - *v26) >> 2;
        int v299 = 4;
      }
      if (v297 > v33)
      {
        int v300 = 2;
      }
      else
      {
        int v33 = v221;
        int v300 = v299;
      }
      if (v297 > v298)
      {
        int v33 = v298;
        int v300 = 3;
      }
      uint64_t v1944 = v218;
      uint64_t v1960 = v30;
      if (!v33) {
        goto LABEL_300;
      }
      unint64_t v301 = *(void *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10) {
        goto LABEL_300;
      }
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            uint64_t v1353 = *v28;
            if (v1353)
            {
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = 0;
              uint64_t v1357 = v27[19];
              uint64_t v1358 = v215[19];
              uint64_t v1359 = v26[19];
              unint64_t v1360 = v28[1];
              uint64_t v1361 = (uint64_t *)v27[3];
              uint64_t v1362 = *v1361;
              uint64_t v1363 = v1361[1];
              int v1364 = (uint64_t *)v215[3];
              uint64_t v1366 = *v1364;
              uint64_t v1365 = v1364[1];
              if (v1360 <= 1) {
                uint64_t v1367 = 1;
              }
              else {
                uint64_t v1367 = v28[1];
              }
              uint64_t v1368 = v1362 - v1363 * v1360;
              uint64_t v1369 = v1366 - v1365 * v216[1];
              do
              {
                if (v1360)
                {
                  uint64_t v1370 = 0;
                  uint64_t v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1372 = 0;
                      int v1373 = *(unsigned __int8 *)(v1357 + v1356);
                      unsigned int v1374 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1359 + v1372) = (v1373 != 0) ^ (*(unsigned char *)(v1371 + v1372) != 0);
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v971 = *v28;
            if (v971)
            {
              uint64_t v972 = 0;
              uint64_t v973 = 0;
              uint64_t v974 = v27[19];
              uint64_t v975 = v215[19];
              uint64_t v976 = v26[19];
              uint64_t v977 = *(void *)v27[3];
              uint64_t v978 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v979 = 0;
                  int v980 = *(unsigned __int8 *)(v974 + v973);
                  unsigned int v981 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v976 + v979) = (v980 != 0) ^ (*(unsigned char *)(v975 + v979) != 0);
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            unint64_t v1901 = v26[6];
            if (v1901)
            {
              unint64_t v1930 = 0;
              uint64_t v1852 = v215[19];
              uint64_t v1867 = v27[19];
              uint64_t v1375 = v26[19];
              do
              {
                uint64_t v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1377 = v27[3];
                  int quot = v1930;
                  do
                  {
                    ldiv_t v1379 = ldiv(quot, v28[v30]);
                    int quot = v1379.quot;
                    v1376 += *(void *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  uint64_t v1381 = 0;
                  uint64_t v1382 = v215[3];
                  int v1383 = v1930;
                  do
                  {
                    ldiv_t v1384 = ldiv(v1383, v216[v1380]);
                    int v1383 = v1384.quot;
                    v1381 += *(void *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1385 = 0;
                  int v1386 = *(unsigned __int8 *)(v1867 + (int)v1376);
                  unsigned int v1387 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1375 + v1385) = (v1386 != 0) ^ (*(unsigned char *)(v1852 + (int)v1381 + v1385) != 0);
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            uint64_t v1388 = *v28;
            if (v1388)
            {
              uint64_t v1389 = 0;
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              uint64_t v1392 = v27[19];
              uint64_t v1393 = v215[19];
              uint64_t v1394 = v26[19];
              unint64_t v1395 = v28[1];
              uint64_t v1396 = (uint64_t *)v27[3];
              uint64_t v1397 = *v1396;
              uint64_t v1398 = v1396[1];
              uint64_t v1399 = (uint64_t *)v215[3];
              uint64_t v1401 = *v1399;
              uint64_t v1400 = v1399[1];
              if (v1395 <= 1) {
                uint64_t v1402 = 1;
              }
              else {
                uint64_t v1402 = v28[1];
              }
              uint64_t v1403 = v1397 - v1398 * v1395;
              uint64_t v1404 = v1401 - v1400 * v216[1];
              do
              {
                if (v1395)
                {
                  uint64_t v1405 = 0;
                  uint64_t v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1407 = 0;
                      int v1408 = *(unsigned __int8 *)(v1393 + v1390);
                      unsigned int v1409 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1394 + v1407) = (v1408 != 0) ^ (*(unsigned char *)(v1406 + v1407) != 0);
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v982 = *v28;
            if (v982)
            {
              uint64_t v983 = 0;
              uint64_t v984 = 0;
              uint64_t v985 = v27[19];
              uint64_t v986 = v215[19];
              uint64_t v987 = v26[19];
              uint64_t v988 = *(void *)v27[3];
              uint64_t v989 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v990 = 0;
                  int v991 = *(unsigned __int8 *)(v986 + v984);
                  unsigned int v992 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v987 + v990) = (v991 != 0) ^ (*(unsigned char *)(v985 + v990) != 0);
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            unint64_t v1902 = v26[6];
            if (v1902)
            {
              unint64_t v1931 = 0;
              uint64_t v1853 = v215[19];
              uint64_t v1868 = v27[19];
              uint64_t v1410 = v26[19];
              do
              {
                uint64_t v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1412 = v27[3];
                  int v1413 = v1931;
                  do
                  {
                    ldiv_t v1414 = ldiv(v1413, v28[v30]);
                    int v1413 = v1414.quot;
                    v1411 += *(void *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  uint64_t v1416 = 0;
                  uint64_t v1417 = v215[3];
                  int v1418 = v1931;
                  do
                  {
                    ldiv_t v1419 = ldiv(v1418, v216[v1415]);
                    int v1418 = v1419.quot;
                    v1416 += *(void *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1420 = 0;
                  int v1421 = *(unsigned __int8 *)(v1853 + (int)v1416);
                  unsigned int v1422 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1410 + v1420) = (v1421 != 0) ^ (*(unsigned char *)(v1868 + (int)v1411 + v1420) != 0);
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            uint64_t v1121 = *v28;
            if (v1121)
            {
              uint64_t v1122 = 0;
              uint64_t v1123 = 0;
              uint64_t v1124 = 0;
              uint64_t v1125 = v27[19];
              uint64_t v1126 = v215[19];
              uint64_t v1127 = v26[19];
              unint64_t v1128 = v28[1];
              uint64_t v1129 = (uint64_t *)v27[3];
              uint64_t v1130 = *v1129;
              uint64_t v1131 = v1129[1];
              uint64_t v1132 = (uint64_t *)v215[3];
              uint64_t v1134 = *v1132;
              uint64_t v1133 = v1132[1];
              if (v1128 <= 1) {
                uint64_t v1135 = 1;
              }
              else {
                uint64_t v1135 = v28[1];
              }
              uint64_t v1136 = v1130 - v1131 * v1128;
              uint64_t v1137 = v1134 - v1133 * v216[1];
              do
              {
                if (v1128)
                {
                  uint64_t v1138 = 0;
                  uint64_t v1139 = v1126 + v1123;
                  uint64_t v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1141 = 0;
                      unsigned int v1142 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1127 + v1141) = (*(unsigned char *)(v1140 + v1141) != 0) ^ (*(unsigned char *)(v1139 + v1141) != 0);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v302 = *v28;
            if (v302)
            {
              uint64_t v303 = 0;
              uint64_t v304 = v27[19];
              uint64_t v305 = v215[19];
              uint64_t v306 = v26[19];
              uint64_t v307 = *(void *)v27[3];
              uint64_t v308 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v309 = 0;
                  unsigned int v310 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v306 + v309) = (*(unsigned char *)(v304 + v309) != 0) ^ (*(unsigned char *)(v305 + v309) != 0);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            unint64_t v1894 = v26[6];
            if (v1894)
            {
              unint64_t v1923 = 0;
              uint64_t v1847 = v215[19];
              uint64_t v1864 = v27[19];
              uint64_t v1143 = v26[19];
              do
              {
                uint64_t v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1145 = v27[3];
                  int v1146 = v1923;
                  do
                  {
                    ldiv_t v1147 = ldiv(v1146, v28[v30]);
                    int v1146 = v1147.quot;
                    v1144 += *(void *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  uint64_t v1149 = 0;
                  uint64_t v1150 = v215[3];
                  int v1151 = v1923;
                  do
                  {
                    ldiv_t v1152 = ldiv(v1151, v216[v1148]);
                    int v1151 = v1152.quot;
                    v1149 += *(void *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1153 = 0;
                  unsigned int v1154 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1143 + v1153) = (*(unsigned char *)(v1864 + (int)v1144 + v1153) != 0) ^ (*(unsigned char *)(v1847 + (int)v1149 + v1153) != 0);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              uint64_t v311 = v26[6];
              if (v311)
              {
                uint64_t v312 = (unsigned char *)v27[19];
                uint64_t v313 = (unsigned char *)v215[19];
                unint64_t v314 = (unsigned char *)v26[19];
                uint64_t v315 = *(void *)v27[3];
                uint64_t v316 = *(void *)v215[3];
                do
                {
                  *v314++ = (*v312 != 0) ^ (*v313 != 0);
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              uint64_t v448 = *v28;
              if (v448)
              {
                uint64_t v449 = 0;
                uint64_t v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = v27[19];
                uint64_t v454 = v215[19];
                uint64_t v455 = v26[19];
                unint64_t v456 = v28[1];
                uint64_t v457 = (uint64_t *)v27[3];
                uint64_t v458 = *v457;
                uint64_t v459 = v457[1];
                uint64_t v460 = (uint64_t *)v215[3];
                uint64_t v461 = *v460;
                uint64_t v462 = v460[1];
                uint64_t v463 = v461 - v462 * v216[1];
                if (v456 <= 1) {
                  uint64_t v464 = 1;
                }
                else {
                  uint64_t v464 = v28[1];
                }
                uint64_t v465 = v458 - v459 * v456;
                do
                {
                  if (v456)
                  {
                    uint64_t v466 = v450 + v464;
                    unsigned int v467 = (unsigned char *)(v455 + v450);
                    uint64_t v468 = v464;
                    do
                    {
                      *v467++ = (*(unsigned char *)(v453 + v452) != 0) ^ (*(unsigned char *)(v454 + v451) != 0);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    uint64_t v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              uint64_t v469 = *v28;
              if (v469)
              {
                uint64_t v470 = 0;
                uint64_t v471 = 0;
                uint64_t v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = v27[19];
                uint64_t v475 = v215[19];
                uint64_t v476 = v26[19];
                unint64_t v477 = v28[1];
                unsigned int v478 = (void *)v27[3];
                uint64_t v479 = v478[1];
                unint64_t v480 = (void *)v215[3];
                uint64_t v481 = v480[1];
                uint64_t v482 = *v480 - v481 * v216[1];
                if (v477 <= 1) {
                  uint64_t v483 = 1;
                }
                else {
                  uint64_t v483 = v28[1];
                }
                unint64_t v484 = *v478 - v479 * v477;
                do
                {
                  if (v477)
                  {
                    uint64_t v485 = 0;
                    unint64_t v486 = v28[2];
                    uint64_t v487 = v478[2];
                    uint64_t v488 = v480[2];
                    if (v486 <= 1) {
                      uint64_t v489 = 1;
                    }
                    else {
                      uint64_t v489 = v28[2];
                    }
                    uint64_t v490 = v481 - v488 * v216[2];
                    do
                    {
                      uint64_t v491 = v489;
                      if (v486)
                      {
                        do
                        {
                          *(unsigned char *)(v476 + v471++) = (*(unsigned char *)(v474 + v473) != 0) ^ (*(unsigned char *)(v475 + v472) != 0);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              uint64_t v1967 = *v28;
              if (v1967)
              {
                uint64_t v492 = 0;
                uint64_t v493 = 0;
                uint64_t v494 = 0;
                uint64_t v495 = 0;
                uint64_t v496 = v27[19];
                uint64_t v497 = v215[19];
                uint64_t v498 = v26[19];
                unint64_t v499 = v28[1];
                int v500 = (void *)v27[3];
                int v501 = (void *)v215[3];
                uint64_t v1862 = v501[1];
                uint64_t v1874 = v500[1];
                uint64_t v1916 = *v501 - v1862 * v216[1];
                int v1949 = v28[1];
                if (v499 <= 1) {
                  uint64_t v502 = 1;
                }
                else {
                  uint64_t v502 = v28[1];
                }
                unint64_t v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    uint64_t v503 = 0;
                    unint64_t v504 = v28[2];
                    uint64_t v505 = v500[2];
                    uint64_t v506 = v501[2];
                    if (v504 <= 1) {
                      uint64_t v507 = 1;
                    }
                    else {
                      uint64_t v507 = v28[2];
                    }
                    uint64_t v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if (v504)
                      {
                        uint64_t v509 = 0;
                        unint64_t v510 = v28[3];
                        uint64_t v511 = v500[3];
                        uint64_t v512 = v501[3];
                        if (v510 <= 1) {
                          uint64_t v513 = 1;
                        }
                        else {
                          uint64_t v513 = v28[3];
                        }
                        uint64_t v514 = v506 - v512 * v216[3];
                        do
                        {
                          uint64_t v515 = v513;
                          if (v510)
                          {
                            do
                            {
                              *(unsigned char *)(v498 + v493++) = (*(unsigned char *)(v496 + v495) != 0) ^ (*(unsigned char *)(v497 + v494) != 0);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              uint64_t v437 = v26[6];
              if (v437)
              {
                uint64_t v438 = 0;
                uint64_t v1886 = v215[19];
                uint64_t v1915 = v27[19];
                uint64_t v1873 = v26[19];
                do
                {
                  uint64_t v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    uint64_t v440 = v27[3];
                    int v441 = v438;
                    do
                    {
                      ldiv_t v442 = ldiv(v441, v28[v30]);
                      int v441 = v442.quot;
                      v439 += *(void *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  uint64_t v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    uint64_t v444 = 0;
                    uint64_t v445 = v215[3];
                    int v446 = v438;
                    do
                    {
                      ldiv_t v447 = ldiv(v446, v216[v443]);
                      int v446 = v447.quot;
                      v444 += *(void *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(unsigned char *)(v1873 + v438++) = (*(unsigned char *)(v1915 + (int)v439) != 0) ^ (*(unsigned char *)(v1886 + (int)v444) != 0);
                  uint64_t v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            char v10 = **(unsigned char **)(*a1 + 152);
            int v11 = *(unsigned char **)(*(void *)a3 + 152);
            int v12 = *(char **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              char v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            char v64 = **(unsigned char **)(*a2 + 152);
            int v65 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v66 = *(char **)(*a1 + 152);
            unsigned int v67 = v63 + 1;
            do
            {
              char v68 = *v66++;
              *v65++ = v68 - v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          int v69 = *(_DWORD *)(*(void *)a3 + 48);
          if (v69 >= 1)
          {
            BOOL v70 = *(unsigned char **)(*(void *)a3 + 152);
            BOOL v71 = *(char **)(*a2 + 152);
            int v72 = *(char **)(*a1 + 152);
            unsigned int v73 = v69 + 1;
            do
            {
              char v75 = *v72++;
              char v74 = v75;
              char v76 = *v71++;
              *v70++ = v74 - v76;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          BOOL v55 = *(void **)a3;
          uint64_t v56 = *a1;
          BOOL v57 = *(int **)*a1;
          uint64_t v58 = (*(void *)(*a1 + 8) - (void)v57) >> 2;
          int v59 = v58 - 1;
          if ((int)v58 - 1 >= -1) {
            int v59 = -1;
          }
          int v60 = v59 + 1;
          int v61 = v58 + 1;
          break;
      }
      while (1)
      {
        unsigned int v62 = v61 - 2;
        if (v61 - 2 < 0) {
          break;
        }
        --v61;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v62) != *(void *)(v55[3] + 8 * v62)) {
          goto LABEL_155;
        }
      }
      int v61 = v60;
LABEL_155:
      uint64_t v223 = (int **)*a2;
      int v224 = *(int **)*a2;
      uint64_t v225 = (*(void *)(*a2 + 8) - (void)v224) >> 2;
      int v226 = v225 - 1;
      if ((int)v225 - 1 >= -1) {
        int v226 = -1;
      }
      int v227 = v226 + 1;
      int v228 = v225 + 1;
      while (1)
      {
        unsigned int v229 = v228 - 2;
        if (v228 - 2 < 0) {
          break;
        }
        --v228;
        if (*(void *)&v223[3][2 * v229] != *(void *)(v55[3] + 8 * v229)) {
          goto LABEL_206;
        }
      }
      int v228 = v227;
LABEL_206:
      int v271 = v58 + 1;
      while (1)
      {
        unsigned int v272 = v271 - 2;
        if (v271 - 2 < 0) {
          break;
        }
        --v271;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v272)) {
          goto LABEL_241;
        }
      }
      int v271 = v60;
LABEL_241:
      int v285 = v225 + 1;
      while (1)
      {
        int v286 = v285 - 2;
        if (v285 - 2 < 0) {
          break;
        }
        --v285;
        if (*(void *)&v223[3][2 * v286]) {
          goto LABEL_306;
        }
      }
      int v285 = v227;
LABEL_306:
      unint64_t v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228) {
        int v318 = v228;
      }
      else {
        int v318 = v61;
      }
      if (v61 <= v285) {
        int v61 = v285;
      }
      if (v271 > v228) {
        int v228 = v271;
      }
      if (v317 > v228)
      {
        int v319 = 1;
      }
      else
      {
        int v228 = (uint64_t)(v55[1] - *v55) >> 2;
        int v319 = 4;
      }
      if (v317 > v61)
      {
        int v320 = 2;
      }
      else
      {
        int v61 = v228;
        int v320 = v319;
      }
      if (v317 > v318)
      {
        int v61 = v318;
        int v320 = 3;
      }
      if (!v61) {
        goto LABEL_336;
      }
      unint64_t v321 = *(void *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10) {
        goto LABEL_336;
      }
      uint64_t v1961 = *(void *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            int v1423 = *v57;
            if (*v57)
            {
              unint64_t v1424 = 0;
              uint64_t v1425 = 0;
              uint64_t v1426 = 0;
              uint64_t v1427 = *(void *)(v56 + 152);
              uint64_t v1428 = v223[19];
              uint64_t v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1431 = 0;
                      char v1432 = *(unsigned char *)(v1427 + v1426);
                      unsigned int v1433 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1429 + v1431) = v1432 - *((unsigned char *)v1428 + v1425 + v1431);
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      uint64_t v56 = *a1;
                      uint64_t v223 = (int **)*a2;
                      BOOL v57 = *(int **)*a1;
                    }
                    uint64_t v1434 = *(void **)(v56 + 24);
                    uint64_t v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((void *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    unint64_t v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  int v1423 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1436 = 0;
                  uint64_t v1434 = *(void **)(v56 + 24);
                  uint64_t v1435 = v1434[1];
                }
                uint64_t v1426 = *v1434 + v1426 - v1436 * v1435;
                uint64_t v1425 = *(void *)v223[3] + v1425 - *((void *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            int v993 = *v57;
            if (*v57)
            {
              unint64_t v994 = 0;
              uint64_t v995 = 0;
              uint64_t v996 = 0;
              uint64_t v997 = *(void *)(v56 + 152);
              int v998 = v223[19];
              uint64_t v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1000 = 0;
                  char v1001 = *(unsigned char *)(v997 + v996);
                  unsigned int v1002 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v999 + v1000) = v1001 - *((unsigned char *)v998 + v995 + v1000);
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  uint64_t v56 = *a1;
                  uint64_t v223 = (int **)*a2;
                  int v993 = **(_DWORD **)*a1;
                }
                v996 += **(void **)(v56 + 24);
                v995 += *(void *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            unint64_t v1882 = v223[19];
            uint64_t v1903 = *(void *)(v56 + 152);
            uint64_t v1932 = (int)v321;
            unint64_t v1956 = 0;
            unsigned int v1869 = v321 + 1;
            uint64_t v1437 = v55[19];
            do
            {
              uint64_t v1438 = *(void *)*a1;
              unint64_t v1439 = (unint64_t)(*(void *)(*a1 + 8) - v1438) >> 2;
              uint64_t v1440 = 0;
              uint64_t v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                uint64_t v1442 = *(void *)(*a1 + 24);
                int v1443 = v1956;
                do
                {
                  ldiv_t v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  int v1443 = v1444.quot;
                  v1440 += *(void *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              uint64_t v1445 = *(void *)*a2;
              unint64_t v1446 = (unint64_t)(*(void *)(*a2 + 8) - v1445) >> 2;
              uint64_t v1447 = 0;
              uint64_t v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                uint64_t v1449 = *(void *)(*a2 + 24);
                int v1450 = v1956;
                do
                {
                  ldiv_t v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  int v1450 = v1451.quot;
                  v1447 += *(void *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1452 = 0;
                char v1453 = *(unsigned char *)(v1903 + (int)v1440);
                unsigned int v1454 = v1869;
                do
                {
                  *(unsigned char *)(v1437 + v1452) = v1453 - *((unsigned char *)v1882 + (int)v1447 + v1452);
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                BOOL v55 = *(void **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            int v1455 = *v57;
            if (*v57)
            {
              unint64_t v1456 = 0;
              uint64_t v1457 = 0;
              uint64_t v1458 = 0;
              uint64_t v1459 = *(void *)(v56 + 152);
              uint64_t v1460 = v223[19];
              uint64_t v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1463 = 0;
                      char v1464 = *((unsigned char *)v1460 + v1457);
                      unsigned int v1465 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1461 + v1463) = *(unsigned char *)(v1459 + v1458 + v1463) - v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      uint64_t v56 = *a1;
                      uint64_t v223 = (int **)*a2;
                      BOOL v57 = *(int **)*a1;
                    }
                    unint64_t v1466 = *(void **)(v56 + 24);
                    uint64_t v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((void *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    unint64_t v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  int v1455 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1468 = 0;
                  unint64_t v1466 = *(void **)(v56 + 24);
                  uint64_t v1467 = v1466[1];
                }
                uint64_t v1458 = *v1466 + v1458 - v1468 * v1467;
                uint64_t v1457 = *(void *)v223[3] + v1457 - *((void *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            int v1003 = *v57;
            if (*v57)
            {
              unint64_t v1004 = 0;
              uint64_t v1005 = 0;
              uint64_t v1006 = 0;
              uint64_t v1007 = *(void *)(v56 + 152);
              uint64_t v1008 = v223[19];
              uint64_t v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1010 = 0;
                  char v1011 = *((unsigned char *)v1008 + v1005);
                  unsigned int v1012 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v1009 + v1010) = *(unsigned char *)(v1007 + v1006 + v1010) - v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  uint64_t v56 = *a1;
                  uint64_t v223 = (int **)*a2;
                  int v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(void **)(v56 + 24);
                v1005 += *(void *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            uint64_t v1883 = v223[19];
            uint64_t v1904 = *(void *)(v56 + 152);
            uint64_t v1933 = (int)v321;
            unint64_t v1957 = 0;
            unsigned int v1870 = v321 + 1;
            uint64_t v1469 = v55[19];
            do
            {
              uint64_t v1470 = *(void *)*a1;
              unint64_t v1471 = (unint64_t)(*(void *)(*a1 + 8) - v1470) >> 2;
              uint64_t v1472 = 0;
              uint64_t v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                uint64_t v1474 = *(void *)(*a1 + 24);
                int v1475 = v1957;
                do
                {
                  ldiv_t v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  int v1475 = v1476.quot;
                  v1472 += *(void *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              uint64_t v1477 = *(void *)*a2;
              unint64_t v1478 = (unint64_t)(*(void *)(*a2 + 8) - v1477) >> 2;
              uint64_t v1479 = 0;
              uint64_t v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                uint64_t v1481 = *(void *)(*a2 + 24);
                int v1482 = v1957;
                do
                {
                  ldiv_t v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  int v1482 = v1483.quot;
                  v1479 += *(void *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1484 = 0;
                char v1485 = *((unsigned char *)v1883 + (int)v1479);
                unsigned int v1486 = v1870;
                do
                {
                  *(unsigned char *)(v1469 + v1484) = *(unsigned char *)(v1904 + (int)v1472 + v1484) - v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                BOOL v55 = *(void **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            int v1155 = *v57;
            if (*v57)
            {
              unint64_t v1156 = 0;
              uint64_t v1157 = 0;
              uint64_t v1158 = 0;
              uint64_t v1159 = *(void *)(v56 + 152);
              uint64_t v1160 = v223[19];
              uint64_t v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1163 = 0;
                      unsigned int v1164 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1163) = *(unsigned char *)(v1159 + v1158 + v1163)
                                                  - *((unsigned char *)v1160 + v1157 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      uint64_t v56 = *a1;
                      uint64_t v223 = (int **)*a2;
                      BOOL v57 = *(int **)*a1;
                    }
                    uint64_t v1165 = *(void **)(v56 + 24);
                    uint64_t v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((void *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    unint64_t v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  int v1155 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1167 = 0;
                  uint64_t v1165 = *(void **)(v56 + 24);
                  uint64_t v1166 = v1165[1];
                }
                uint64_t v1158 = *v1165 + v1158 - v1167 * v1166;
                uint64_t v1157 = *(void *)v223[3] + v1157 - *((void *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            int v322 = *v57;
            if (*v57)
            {
              unint64_t v323 = 0;
              uint64_t v324 = 0;
              uint64_t v325 = 0;
              uint64_t v326 = *(void *)(v56 + 152);
              unsigned int v327 = v223[19];
              uint64_t v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v329 = 0;
                  unsigned int v330 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v328 + v329) = *(unsigned char *)(v326 + v325 + v329) - *((unsigned char *)v327 + v324 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  uint64_t v56 = *a1;
                  uint64_t v223 = (int **)*a2;
                  int v322 = **(_DWORD **)*a1;
                }
                v325 += **(void **)(v56 + 24);
                v324 += *(void *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            ldiv_t v1880 = v223[19];
            uint64_t v1895 = *(void *)(v56 + 152);
            uint64_t v1924 = (int)v321;
            unint64_t v1954 = 0;
            unsigned int v1865 = v321 + 1;
            uint64_t v1168 = v55[19];
            do
            {
              uint64_t v1169 = *(void *)*a1;
              unint64_t v1170 = (unint64_t)(*(void *)(*a1 + 8) - v1169) >> 2;
              uint64_t v1171 = 0;
              uint64_t v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                uint64_t v1173 = *(void *)(*a1 + 24);
                int v1174 = v1954;
                do
                {
                  ldiv_t v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  int v1174 = v1175.quot;
                  v1171 += *(void *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              uint64_t v1176 = *(void *)*a2;
              unint64_t v1177 = (unint64_t)(*(void *)(*a2 + 8) - v1176) >> 2;
              uint64_t v1178 = 0;
              uint64_t v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                uint64_t v1180 = *(void *)(*a2 + 24);
                int v1181 = v1954;
                do
                {
                  ldiv_t v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  int v1181 = v1182.quot;
                  v1178 += *(void *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1183 = 0;
                unsigned int v1184 = v1865;
                do
                {
                  *(unsigned char *)(v1168 + v1183) = *(unsigned char *)(v1895 + (int)v1171 + v1183)
                                            - *((unsigned char *)v1880 + (int)v1178 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                BOOL v55 = *(void **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                unint64_t v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = *(void *)(v56 + 152);
                unsigned int v335 = v223[19];
                uint64_t v336 = v55[19];
                do
                {
                  *(unsigned char *)(v336 + v331) = *(unsigned char *)(v334 + v333) - *((unsigned char *)v335 + v332);
                  v333 += **(void **)(*a1 + 24);
                  v332 += **(void **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v532 = *v57;
              if (*v57)
              {
                unint64_t v533 = 0;
                uint64_t v534 = 0;
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = *(void *)(v56 + 152);
                uint64_t v538 = v223[19];
                uint64_t v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v540 = 0;
                    do
                    {
                      *(unsigned char *)(v539 + v534 + v540) = *(unsigned char *)(v537 + v536) - *((unsigned char *)v538 + v535);
                      uint64_t v56 = *a1;
                      uint64_t v541 = *(void **)(*a1 + 24);
                      uint64_t v542 = v541[1];
                      v536 += v542;
                      uint64_t v223 = (int **)*a2;
                      uint64_t v543 = *(int **)(*a2 + 24);
                      uint64_t v544 = *((void *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      BOOL v57 = *(int **)*a1;
                      unint64_t v545 = v57[1];
                    }
                    while (v540 < v545);
                    int v532 = *v57;
                    int v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    unint64_t v545 = 0;
                    uint64_t v541 = *(void **)(v56 + 24);
                    uint64_t v542 = v541[1];
                    uint64_t v543 = v223[3];
                    uint64_t v544 = *((void *)v543 + 1);
                  }
                  uint64_t v536 = *v541 + v536 - v545 * v542;
                  uint64_t v535 = *(void *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              int v546 = *v57;
              if (*v57)
              {
                unint64_t v547 = 0;
                uint64_t v548 = 0;
                uint64_t v549 = 0;
                uint64_t v550 = 0;
                uint64_t v551 = *(void *)(v56 + 152);
                int v552 = v223[19];
                uint64_t v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v555 = 0;
                        do
                        {
                          *(unsigned char *)(v553 + v548 + v555) = *(unsigned char *)(v551 + v550) - *((unsigned char *)v552 + v549);
                          uint64_t v56 = *a1;
                          uint64_t v556 = *(void **)(*a1 + 24);
                          uint64_t v557 = v556[2];
                          v550 += v557;
                          uint64_t v223 = (int **)*a2;
                          uint64_t v558 = *(int **)(*a2 + 24);
                          uint64_t v559 = *((void *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          BOOL v57 = *(int **)*a1;
                          unint64_t v560 = v57[2];
                        }
                        while (v555 < v560);
                        int v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        unint64_t v560 = 0;
                        uint64_t v556 = *(void **)(v56 + 24);
                        uint64_t v557 = v556[2];
                        uint64_t v558 = v223[3];
                        uint64_t v559 = *((void *)v558 + 2);
                      }
                      uint64_t v561 = v556[1];
                      uint64_t v550 = v561 + v550 - v560 * v557;
                      uint64_t v549 = *((void *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      unint64_t v562 = v57[1];
                    }
                    while (v554 < v562);
                    int v546 = *v57;
                  }
                  else
                  {
                    unint64_t v562 = 0;
                    uint64_t v556 = *(void **)(v56 + 24);
                    uint64_t v561 = v556[1];
                  }
                  uint64_t v550 = *v556 + v550 - v562 * v561;
                  uint64_t v549 = *(void *)v223[3] + v549 - *((void *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              int v563 = *v57;
              if (*v57)
              {
                unint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = 0;
                uint64_t v568 = *(void *)(v56 + 152);
                uint64_t v569 = v223[19];
                uint64_t v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            unint64_t v573 = 0;
                            do
                            {
                              *(unsigned char *)(v570 + v565 + v573) = *(unsigned char *)(v568 + v567) - *((unsigned char *)v569 + v566);
                              uint64_t v56 = *a1;
                              uint64_t v574 = *(void **)(*a1 + 24);
                              uint64_t v575 = v574[3];
                              v567 += v575;
                              uint64_t v223 = (int **)*a2;
                              ldiv_t v576 = *(int **)(*a2 + 24);
                              uint64_t v577 = *((void *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              BOOL v57 = *(int **)*a1;
                              unint64_t v578 = v57[3];
                            }
                            while (v573 < v578);
                            int v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            unint64_t v578 = 0;
                            uint64_t v574 = *(void **)(v56 + 24);
                            uint64_t v575 = v574[3];
                            ldiv_t v576 = v223[3];
                            uint64_t v577 = *((void *)v576 + 3);
                          }
                          uint64_t v579 = v574[2];
                          uint64_t v567 = v579 + v567 - v578 * v575;
                          uint64_t v566 = *((void *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          unint64_t v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        unint64_t v580 = 0;
                        uint64_t v574 = *(void **)(v56 + 24);
                        uint64_t v579 = v574[2];
                      }
                      uint64_t v567 = v574[1] + v567 - v580 * v579;
                      uint64_t v566 = *((void *)v223[3] + 1) + v566 - *((void *)v223[3] + 2) * v224[2];
                      ++v571;
                      unint64_t v581 = v57[1];
                    }
                    while (v571 < v581);
                    int v563 = *v57;
                  }
                  else
                  {
                    unint64_t v581 = 0;
                  }
                  uint64_t v567 = **(void **)(v56 + 24) + v567 - *(void *)(*(void *)(v56 + 24) + 8) * v581;
                  uint64_t v566 = *(void *)v223[3] + v566 - *((void *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                unint64_t v516 = 0;
                uint64_t v1950 = v223[19];
                uint64_t v1968 = *(void *)(v56 + 152);
                uint64_t v517 = v55[19];
                do
                {
                  uint64_t v518 = *(void *)*a1;
                  unint64_t v519 = (unint64_t)(*(void *)(*a1 + 8) - v518) >> 2;
                  uint64_t v520 = 0;
                  uint64_t v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    uint64_t v522 = *(void *)(*a1 + 24);
                    int v523 = v516;
                    do
                    {
                      ldiv_t v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      int v523 = v524.quot;
                      v520 += *(void *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  uint64_t v525 = *(void *)*a2;
                  unint64_t v526 = (unint64_t)(*(void *)(*a2 + 8) - v525) >> 2;
                  uint64_t v527 = 0;
                  uint64_t v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    uint64_t v529 = *(void *)(*a2 + 24);
                    int v530 = v516;
                    do
                    {
                      ldiv_t v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      int v530 = v531.quot;
                      v527 += *(void *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(unsigned char *)(v517 + v516++) = *(unsigned char *)(v1968 + (int)v520) - *((unsigned char *)v1950 + (int)v527);
                }
                while (v516 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            int v18 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          int v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            int v87 = **(_DWORD **)(*a2 + 152);
            int v88 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v89 = *(int **)(*a1 + 152);
            unsigned int v90 = v86 + 1;
            do
            {
              int v91 = *v89++;
              *v88++ = v91 - v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          int v92 = *(_DWORD *)(*(void *)a3 + 48);
          if (v92 >= 1)
          {
            char v93 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v94 = *(int **)(*a2 + 152);
            char v95 = *(int **)(*a1 + 152);
            unsigned int v96 = v92 + 1;
            do
            {
              int v98 = *v95++;
              int v97 = v98;
              int v99 = *v94++;
              *v93++ = v97 - v99;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          int v77 = *(void **)a3;
          int v78 = (void *)*a1;
          unsigned int v79 = *(int **)*a1;
          uint64_t v80 = (v78[1] - (void)v79) >> 2;
          uint64_t v81 = (v80 - 1);
          if ((int)v81 >= -1) {
            int v82 = -1;
          }
          else {
            int v82 = v80 - 1;
          }
          int v83 = v82 + 1;
          int v84 = v80 + 1;
          break;
      }
      while (1)
      {
        unsigned int v85 = v84 - 2;
        if (v84 - 2 < 0) {
          break;
        }
        --v84;
        if (*(void *)(v78[3] + 8 * v85) != *(void *)(v77[3] + 8 * v85)) {
          goto LABEL_162;
        }
      }
      int v84 = v83;
LABEL_162:
      int v230 = (void *)*a2;
      uint64_t v231 = *(int **)*a2;
      uint64_t v232 = (v230[1] - (void)v231) >> 2;
      uint64_t v233 = (v232 - 1);
      if ((int)v233 >= -1) {
        int v234 = -1;
      }
      else {
        int v234 = v232 - 1;
      }
      int v235 = v234 + 1;
      int v236 = v232 + 1;
      while (1)
      {
        unsigned int v237 = v236 - 2;
        if (v236 - 2 < 0) {
          break;
        }
        --v236;
        if (*(void *)(v230[3] + 8 * v237) != *(void *)(v77[3] + 8 * v237)) {
          goto LABEL_211;
        }
      }
      int v236 = v235;
LABEL_211:
      int v273 = v80 + 1;
      while (1)
      {
        unsigned int v274 = v273 - 2;
        if (v273 - 2 < 0) {
          break;
        }
        --v273;
        if (*(void *)(v78[3] + 8 * v274)) {
          goto LABEL_246;
        }
      }
      int v273 = v83;
LABEL_246:
      int v287 = v232 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(v230[3] + 8 * v288)) {
          goto LABEL_342;
        }
      }
      int v287 = v235;
LABEL_342:
      unint64_t v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236) {
        int v338 = v236;
      }
      else {
        int v338 = v84;
      }
      if (v84 <= v287) {
        int v84 = v287;
      }
      if (v273 > v236) {
        int v236 = v273;
      }
      if (v337 > v236)
      {
        int v339 = 1;
      }
      else
      {
        int v236 = (uint64_t)(v77[1] - *v77) >> 2;
        int v339 = 4;
      }
      if (v337 > v84)
      {
        int v340 = 2;
      }
      else
      {
        int v84 = v236;
        int v340 = v339;
      }
      if (v337 > v338)
      {
        int v84 = v338;
        int v340 = 3;
      }
      uint64_t v1945 = v233;
      uint64_t v1962 = v81;
      if (!v84) {
        goto LABEL_372;
      }
      unint64_t v341 = *(void *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10) {
        goto LABEL_372;
      }
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            int v1487 = *v79;
            if (*v79)
            {
              unint64_t v1488 = 0;
              uint64_t v1489 = 0;
              uint64_t v1490 = 0;
              uint64_t v1491 = v78[19];
              uint64_t v1492 = v230[19];
              uint64_t v1493 = v77[19];
              uint64_t v1494 = (uint64_t *)v78[3];
              uint64_t v1495 = *v1494;
              uint64_t v1496 = v1494[1];
              ldiv_t v1497 = (uint64_t *)v230[3];
              uint64_t v1498 = *v1497;
              uint64_t v1499 = v1497[1];
              int v1500 = v79[1];
              int v1501 = v1500;
              do
              {
                if (v1501)
                {
                  unint64_t v1502 = 0;
                  uint64_t v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1504 = 0;
                      int v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      unsigned int v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = v1505 - *(_DWORD *)(v1503 + v1504);
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      int v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  uint64_t v1507 = v1500;
                  int v1487 = *v79;
                  int v1501 = v1500;
                }
                else
                {
                  uint64_t v1507 = 0;
                }
                uint64_t v1490 = v1490 + v1495 - v1507 * v1496;
                uint64_t v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            int v1013 = *v79;
            if (*v79)
            {
              unint64_t v1014 = 0;
              uint64_t v1015 = 0;
              uint64_t v1016 = v78[19];
              uint64_t v1017 = v230[19];
              uint64_t v1018 = v77[19];
              uint64_t v1019 = *(void *)v78[3];
              uint64_t v1020 = 4 * *(void *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1021 = 0;
                  int v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  unsigned int v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = v1022 - *(_DWORD *)(v1017 + v1021);
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  int v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            unint64_t v1905 = v77[6];
            if (v1905)
            {
              unint64_t v1934 = 0;
              uint64_t v1839 = v230[19];
              uint64_t v1854 = v78[19];
              uint64_t v1508 = v77[19];
              do
              {
                uint64_t v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1510 = v78[3];
                  uint64_t v1511 = v81;
                  int v1512 = v1934;
                  do
                  {
                    ldiv_t v1513 = ldiv(v1512, v79[v1511]);
                    int v1512 = v1513.quot;
                    v1509 += *(void *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                uint64_t v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v230[3];
                  int v1517 = v1934;
                  do
                  {
                    ldiv_t v1518 = ldiv(v1517, v231[v1514]);
                    int v1517 = v1518.quot;
                    v1515 += *(void *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1519 = 0;
                  int v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  unsigned int v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = v1520 - *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519);
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            int v1522 = *v79;
            if (*v79)
            {
              unint64_t v1523 = 0;
              uint64_t v1524 = 0;
              uint64_t v1525 = 0;
              uint64_t v1526 = v78[19];
              uint64_t v1527 = v230[19];
              uint64_t v1528 = v77[19];
              uint64_t v1529 = (uint64_t *)v78[3];
              uint64_t v1530 = *v1529;
              uint64_t v1531 = v1529[1];
              uint64_t v1532 = (uint64_t *)v230[3];
              uint64_t v1533 = *v1532;
              uint64_t v1534 = v1532[1];
              int v1535 = v79[1];
              int v1536 = v1535;
              do
              {
                if (v1536)
                {
                  unint64_t v1537 = 0;
                  uint64_t v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1539 = 0;
                      int v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      unsigned int v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) - v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      int v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  uint64_t v1542 = v1535;
                  int v1522 = *v79;
                  int v1536 = v1535;
                }
                else
                {
                  uint64_t v1542 = 0;
                }
                uint64_t v1525 = v1525 + v1530 - v1542 * v1531;
                uint64_t v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            int v1024 = *v79;
            if (*v79)
            {
              unint64_t v1025 = 0;
              uint64_t v1026 = 0;
              uint64_t v1027 = v78[19];
              uint64_t v1028 = v230[19];
              uint64_t v1029 = v77[19];
              uint64_t v1030 = *(void *)v230[3];
              uint64_t v1031 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1032 = 0;
                  int v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  unsigned int v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) - v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  int v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            unint64_t v1906 = v77[6];
            if (v1906)
            {
              unint64_t v1935 = 0;
              uint64_t v1840 = v230[19];
              uint64_t v1855 = v78[19];
              uint64_t v1543 = v77[19];
              do
              {
                uint64_t v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1545 = v78[3];
                  uint64_t v1546 = v81;
                  int v1547 = v1935;
                  do
                  {
                    ldiv_t v1548 = ldiv(v1547, v79[v1546]);
                    int v1547 = v1548.quot;
                    v1544 += *(void *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                uint64_t v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v230[3];
                  int v1552 = v1935;
                  do
                  {
                    ldiv_t v1553 = ldiv(v1552, v231[v1549]);
                    int v1552 = v1553.quot;
                    v1550 += *(void *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1554 = 0;
                  int v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  unsigned int v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) - v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            int v1185 = *v79;
            if (*v79)
            {
              unint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = 0;
              uint64_t v1189 = v78[19];
              uint64_t v1190 = v230[19];
              uint64_t v1191 = v77[19];
              unint64_t v1192 = (uint64_t *)v78[3];
              uint64_t v1193 = *v1192;
              uint64_t v1194 = v1192[1];
              uint64_t v1195 = (uint64_t *)v230[3];
              uint64_t v1196 = *v1195;
              uint64_t v1197 = v1195[1];
              int v1198 = v79[1];
              int v1199 = v1198;
              do
              {
                if (v1199)
                {
                  unint64_t v1200 = 0;
                  uint64_t v1201 = v1190 + 4 * v1187;
                  uint64_t v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1203 = 0;
                      unsigned int v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1202 + v1203) - *(_DWORD *)(v1201 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      int v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  uint64_t v1205 = v1198;
                  int v1185 = *v79;
                  int v1199 = v1198;
                }
                else
                {
                  uint64_t v1205 = 0;
                }
                uint64_t v1188 = v1188 + v1193 - v1205 * v1194;
                uint64_t v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            int v342 = *v79;
            if (*v79)
            {
              unint64_t v343 = 0;
              uint64_t v344 = v78[19];
              uint64_t v345 = v230[19];
              uint64_t v346 = v77[19];
              uint64_t v347 = 4 * *(void *)v230[3];
              uint64_t v348 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v349 = 0;
                  unsigned int v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v344 + v349) - *(_DWORD *)(v345 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  int v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            unint64_t v1896 = v77[6];
            if (v1896)
            {
              unint64_t v1925 = 0;
              uint64_t v1835 = v230[19];
              uint64_t v1848 = v78[19];
              uint64_t v1206 = v77[19];
              do
              {
                uint64_t v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1208 = v78[3];
                  uint64_t v1209 = v81;
                  int v1210 = v1925;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v79[v1209]);
                    int v1210 = v1211.quot;
                    v1207 += *(void *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                uint64_t v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  uint64_t v1213 = 0;
                  uint64_t v1214 = v230[3];
                  int v1215 = v1925;
                  do
                  {
                    ldiv_t v1216 = ldiv(v1215, v231[v1212]);
                    int v1215 = v1216.quot;
                    v1213 += *(void *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1217 = 0;
                  unsigned int v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217)
                                               - *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              uint64_t v351 = v77[6];
              if (v351)
              {
                unint64_t v352 = (_DWORD *)v78[19];
                uint64_t v353 = (_DWORD *)v230[19];
                uint64_t v354 = (_DWORD *)v77[19];
                uint64_t v355 = 4 * *(void *)v230[3];
                uint64_t v356 = 4 * *(void *)v78[3];
                do
                {
                  *v354++ = *v352 - *v353;
                  uint64_t v353 = (_DWORD *)((char *)v353 + v355);
                  unint64_t v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              int v594 = *v79;
              if (*v79)
              {
                unint64_t v595 = 0;
                uint64_t v596 = 0;
                uint64_t v597 = 0;
                uint64_t v598 = 0;
                uint64_t v599 = v78[19];
                uint64_t v600 = v230[19];
                uint64_t v601 = v77[19];
                uint64_t v602 = (uint64_t *)v78[3];
                uint64_t v603 = *v602;
                uint64_t v604 = v602[1];
                uint64_t v605 = (uint64_t *)v230[3];
                uint64_t v607 = *v605;
                uint64_t v606 = v605[1];
                int v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (unint64_t i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v599 + 4 * v598) - *(_DWORD *)(v600 + 4 * v597);
                      v598 += v604;
                      v597 += v606;
                      int v608 = v79[1];
                    }
                    uint64_t v610 = v608;
                    int v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    uint64_t v610 = 0;
                  }
                  uint64_t v598 = v598 + v603 - v610 * v604;
                  uint64_t v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              int v611 = *v79;
              if (*v79)
              {
                unint64_t v612 = 0;
                uint64_t v613 = 0;
                uint64_t v614 = 0;
                uint64_t v615 = 0;
                uint64_t v616 = v78[19];
                uint64_t v617 = v230[19];
                uint64_t v618 = v77[19];
                uint64_t v619 = (uint64_t *)v78[3];
                uint64_t v620 = *v619;
                uint64_t v621 = v619[1];
                uint64_t v622 = (uint64_t *)v230[3];
                uint64_t v623 = *v622;
                uint64_t v624 = v622[1];
                int v625 = v79[1];
                int v626 = v625;
                do
                {
                  if (v626)
                  {
                    unint64_t v627 = 0;
                    uint64_t v628 = v619[2];
                    uint64_t v629 = v622[2];
                    int v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (unint64_t j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v616 + 4 * v615)
                                                               - *(_DWORD *)(v617 + 4 * v614);
                          v615 += v628;
                          v614 += v629;
                          int v630 = v79[2];
                        }
                        uint64_t v632 = v630;
                        int v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        uint64_t v632 = 0;
                      }
                      uint64_t v615 = v615 + v621 - v632 * v628;
                      uint64_t v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    uint64_t v633 = v625;
                    int v611 = *v79;
                    int v626 = v625;
                  }
                  else
                  {
                    uint64_t v633 = 0;
                  }
                  uint64_t v615 = v615 + v620 - v633 * v621;
                  uint64_t v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              int v634 = *v79;
              if (*v79)
              {
                unint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = v78[19];
                uint64_t v640 = v230[19];
                uint64_t v641 = v77[19];
                uint64_t v642 = (uint64_t *)v78[3];
                uint64_t v643 = *v642;
                uint64_t v644 = v642[1];
                uint64_t v645 = (uint64_t *)v230[3];
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                int v648 = v79[1];
                int v649 = v648;
                do
                {
                  if (v649)
                  {
                    unint64_t v650 = 0;
                    uint64_t v651 = v642[2];
                    uint64_t v652 = v645[2];
                    int v653 = v79[2];
                    int v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        unint64_t v655 = 0;
                        uint64_t v656 = v642[3];
                        uint64_t v657 = v645[3];
                        int v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (unint64_t k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v639 + 4 * v638)
                                                                   - *(_DWORD *)(v640 + 4 * v637);
                              v638 += v656;
                              v637 += v657;
                              int v658 = v79[3];
                            }
                            uint64_t v660 = v658;
                            int v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            uint64_t v660 = 0;
                          }
                          uint64_t v638 = v638 + v651 - v660 * v656;
                          uint64_t v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        uint64_t v661 = v653;
                        int v648 = v79[1];
                        int v654 = v653;
                      }
                      else
                      {
                        uint64_t v661 = 0;
                      }
                      uint64_t v638 = v638 + v644 - v661 * v651;
                      uint64_t v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    uint64_t v662 = v648;
                    int v634 = *v79;
                    int v649 = v648;
                  }
                  else
                  {
                    uint64_t v662 = 0;
                  }
                  uint64_t v638 = v638 + v643 - v662 * v644;
                  uint64_t v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              uint64_t v582 = v77[6];
              if (v582)
              {
                uint64_t v583 = 0;
                uint64_t v1888 = v230[19];
                uint64_t v1917 = v78[19];
                uint64_t v1875 = v77[19];
                do
                {
                  uint64_t v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    uint64_t v585 = v78[3];
                    uint64_t v586 = v81;
                    int v587 = v583;
                    do
                    {
                      ldiv_t v588 = ldiv(v587, v79[v586]);
                      int v587 = v588.quot;
                      v584 += *(void *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  uint64_t v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    uint64_t v590 = 0;
                    uint64_t v591 = v230[3];
                    int v592 = v583;
                    do
                    {
                      ldiv_t v593 = ldiv(v592, v231[v589]);
                      int v592 = v593.quot;
                      v590 += *(void *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1917 + 4 * (int)v584)
                                                  - *(_DWORD *)(v1888 + 4 * (int)v590);
                  uint64_t v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          char v7 = **(unsigned char **)(*a1 + 152) - **(unsigned char **)(*a2 + 152);
LABEL_16:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            char v109 = **(unsigned char **)(*a1 + 152);
            int v110 = *(unsigned char **)(*(void *)a3 + 152);
            int v111 = *(char **)(*a2 + 152);
            unsigned int v112 = v108 + 1;
            do
            {
              char v113 = *v111++;
              *v110++ = v109 - v113;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          int v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            char v115 = **(unsigned char **)(*a2 + 152);
            unsigned int v116 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v117 = *(char **)(*a1 + 152);
            unsigned int v118 = v114 + 1;
            do
            {
              char v119 = *v117++;
              *v116++ = v119 - v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          int v120 = *(_DWORD *)(*(void *)a3 + 48);
          if (v120 >= 1)
          {
            int v121 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v122 = *(char **)(*a2 + 152);
            unsigned int v123 = *(char **)(*a1 + 152);
            unsigned int v124 = v120 + 1;
            do
            {
              char v126 = *v123++;
              char v125 = v126;
              char v127 = *v122++;
              *v121++ = v125 - v127;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          unsigned int v100 = *(void **)a3;
          uint64_t v101 = *a1;
          char v102 = *(int **)*a1;
          uint64_t v103 = (*(void *)(*a1 + 8) - (void)v102) >> 2;
          int v104 = v103 - 1;
          if ((int)v103 - 1 >= -1) {
            int v104 = -1;
          }
          int v105 = v104 + 1;
          int v106 = v103 + 1;
          while (1)
          {
            unsigned int v107 = v106 - 2;
            if (v106 - 2 < 0) {
              break;
            }
            --v106;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v107) != *(void *)(v100[3] + 8 * v107)) {
              goto LABEL_170;
            }
          }
          int v106 = v105;
LABEL_170:
          uint64_t v238 = (int **)*a2;
          uint64_t v239 = *(int **)*a2;
          uint64_t v240 = (*(void *)(*a2 + 8) - (void)v239) >> 2;
          int v241 = v240 - 1;
          if ((int)v240 - 1 >= -1) {
            int v241 = -1;
          }
          int v242 = v241 + 1;
          int v243 = v240 + 1;
          while (1)
          {
            unsigned int v244 = v243 - 2;
            if (v243 - 2 < 0) {
              break;
            }
            --v243;
            if (*(void *)&v238[3][2 * v244] != *(void *)(v100[3] + 8 * v244)) {
              goto LABEL_216;
            }
          }
          int v243 = v242;
LABEL_216:
          int v275 = v103 + 1;
          while (1)
          {
            unsigned int v276 = v275 - 2;
            if (v275 - 2 < 0) {
              break;
            }
            --v275;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v276)) {
              goto LABEL_251;
            }
          }
          int v275 = v105;
LABEL_251:
          int v289 = v240 + 1;
          while (1)
          {
            int v290 = v289 - 2;
            if (v289 - 2 < 0) {
              break;
            }
            --v289;
            if (*(void *)&v238[3][2 * v290]) {
              goto LABEL_378;
            }
          }
          int v289 = v242;
LABEL_378:
          unint64_t v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243) {
            int v358 = v243;
          }
          else {
            int v358 = v106;
          }
          if (v106 <= v289) {
            int v106 = v289;
          }
          if (v275 > v243) {
            int v243 = v275;
          }
          if (v357 > v243)
          {
            int v359 = 1;
          }
          else
          {
            int v243 = (uint64_t)(v100[1] - *v100) >> 2;
            int v359 = 4;
          }
          if (v357 > v106)
          {
            int v360 = 2;
          }
          else
          {
            int v106 = v243;
            int v360 = v359;
          }
          if (v357 > v358)
          {
            int v106 = v358;
            int v360 = 3;
          }
          if (!v106) {
            goto LABEL_408;
          }
          unint64_t v361 = *(void *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10) {
            goto LABEL_408;
          }
          uint64_t v1963 = *(void *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                int v1557 = *v102;
                if (*v102)
                {
                  unint64_t v1558 = 0;
                  uint64_t v1559 = 0;
                  uint64_t v1560 = 0;
                  uint64_t v1561 = *(void *)(v101 + 152);
                  int v1562 = v238[19];
                  uint64_t v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1565 = 0;
                          char v1566 = *(unsigned char *)(v1561 + v1560);
                          unsigned int v1567 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1563 + v1565) = v1566 - *((unsigned char *)v1562 + v1559 + v1565);
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          char v102 = *(int **)*a1;
                        }
                        int v1568 = *(void **)(v101 + 24);
                        uint64_t v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((void *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        unint64_t v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      int v1557 = *v102;
                      uint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1570 = 0;
                      int v1568 = *(void **)(v101 + 24);
                      uint64_t v1569 = v1568[1];
                    }
                    uint64_t v1560 = *v1568 + v1560 - v1570 * v1569;
                    uint64_t v1559 = *(void *)v238[3] + v1559 - *((void *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                int v1035 = *v102;
                if (*v102)
                {
                  unint64_t v1036 = 0;
                  uint64_t v1037 = 0;
                  uint64_t v1038 = 0;
                  uint64_t v1039 = *(void *)(v101 + 152);
                  uint64_t v1040 = v238[19];
                  uint64_t v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1042 = 0;
                      char v1043 = *(unsigned char *)(v1039 + v1038);
                      unsigned int v1044 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1041 + v1042) = v1043 - *((unsigned char *)v1040 + v1037 + v1042);
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(void **)(v101 + 24);
                    v1037 += *(void *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                uint64_t v1884 = v238[19];
                uint64_t v1907 = *(void *)(v101 + 152);
                uint64_t v1936 = (int)v361;
                unint64_t v1958 = 0;
                unsigned int v1871 = v361 + 1;
                uint64_t v1571 = v100[19];
                do
                {
                  uint64_t v1572 = *(void *)*a1;
                  unint64_t v1573 = (unint64_t)(*(void *)(*a1 + 8) - v1572) >> 2;
                  uint64_t v1574 = 0;
                  uint64_t v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    uint64_t v1576 = *(void *)(*a1 + 24);
                    int v1577 = v1958;
                    do
                    {
                      ldiv_t v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      int v1577 = v1578.quot;
                      v1574 += *(void *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  uint64_t v1579 = *(void *)*a2;
                  unint64_t v1580 = (unint64_t)(*(void *)(*a2 + 8) - v1579) >> 2;
                  uint64_t v1581 = 0;
                  uint64_t v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    uint64_t v1583 = *(void *)(*a2 + 24);
                    int v1584 = v1958;
                    do
                    {
                      ldiv_t v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      int v1584 = v1585.quot;
                      v1581 += *(void *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1586 = 0;
                    char v1587 = *(unsigned char *)(v1907 + (int)v1574);
                    unsigned int v1588 = v1871;
                    do
                    {
                      *(unsigned char *)(v1571 + v1586) = v1587 - *((unsigned char *)v1884 + (int)v1581 + v1586);
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    unsigned int v100 = *(void **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                int v1589 = *v102;
                if (*v102)
                {
                  unint64_t v1590 = 0;
                  uint64_t v1591 = 0;
                  uint64_t v1592 = 0;
                  uint64_t v1593 = *(void *)(v101 + 152);
                  int v1594 = v238[19];
                  uint64_t v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1597 = 0;
                          char v1598 = *((unsigned char *)v1594 + v1591);
                          unsigned int v1599 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1595 + v1597) = *(unsigned char *)(v1593 + v1592 + v1597) - v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          char v102 = *(int **)*a1;
                        }
                        unint64_t v1600 = *(void **)(v101 + 24);
                        uint64_t v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((void *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        unint64_t v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      int v1589 = *v102;
                      uint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1602 = 0;
                      unint64_t v1600 = *(void **)(v101 + 24);
                      uint64_t v1601 = v1600[1];
                    }
                    uint64_t v1592 = *v1600 + v1592 - v1602 * v1601;
                    uint64_t v1591 = *(void *)v238[3] + v1591 - *((void *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                int v1045 = *v102;
                if (*v102)
                {
                  unint64_t v1046 = 0;
                  uint64_t v1047 = 0;
                  uint64_t v1048 = 0;
                  uint64_t v1049 = *(void *)(v101 + 152);
                  ldiv_t v1050 = v238[19];
                  uint64_t v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1052 = 0;
                      char v1053 = *((unsigned char *)v1050 + v1047);
                      unsigned int v1054 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1051 + v1052) = *(unsigned char *)(v1049 + v1048 + v1052) - v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(void **)(v101 + 24);
                    v1047 += *(void *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                uint64_t v1885 = v238[19];
                uint64_t v1908 = *(void *)(v101 + 152);
                uint64_t v1937 = (int)v361;
                unint64_t v1959 = 0;
                unsigned int v1872 = v361 + 1;
                uint64_t v1603 = v100[19];
                do
                {
                  uint64_t v1604 = *(void *)*a1;
                  unint64_t v1605 = (unint64_t)(*(void *)(*a1 + 8) - v1604) >> 2;
                  uint64_t v1606 = 0;
                  uint64_t v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    uint64_t v1608 = *(void *)(*a1 + 24);
                    int v1609 = v1959;
                    do
                    {
                      ldiv_t v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      int v1609 = v1610.quot;
                      v1606 += *(void *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  uint64_t v1611 = *(void *)*a2;
                  unint64_t v1612 = (unint64_t)(*(void *)(*a2 + 8) - v1611) >> 2;
                  uint64_t v1613 = 0;
                  uint64_t v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    uint64_t v1615 = *(void *)(*a2 + 24);
                    int v1616 = v1959;
                    do
                    {
                      ldiv_t v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      int v1616 = v1617.quot;
                      v1613 += *(void *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1618 = 0;
                    char v1619 = *((unsigned char *)v1885 + (int)v1613);
                    unsigned int v1620 = v1872;
                    do
                    {
                      *(unsigned char *)(v1603 + v1618) = *(unsigned char *)(v1908 + (int)v1606 + v1618) - v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    unsigned int v100 = *(void **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                int v1219 = *v102;
                if (*v102)
                {
                  unint64_t v1220 = 0;
                  uint64_t v1221 = 0;
                  uint64_t v1222 = 0;
                  uint64_t v1223 = *(void *)(v101 + 152);
                  uint64_t v1224 = v238[19];
                  uint64_t v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1227 = 0;
                          unsigned int v1228 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1225 + v1227) = *(unsigned char *)(v1223 + v1222 + v1227)
                                                      - *((unsigned char *)v1224 + v1221 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          char v102 = *(int **)*a1;
                        }
                        uint64_t v1229 = *(void **)(v101 + 24);
                        uint64_t v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((void *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        unint64_t v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      int v1219 = *v102;
                      uint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1231 = 0;
                      uint64_t v1229 = *(void **)(v101 + 24);
                      uint64_t v1230 = v1229[1];
                    }
                    uint64_t v1222 = *v1229 + v1222 - v1231 * v1230;
                    uint64_t v1221 = *(void *)v238[3] + v1221 - *((void *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                int v362 = *v102;
                if (*v102)
                {
                  unint64_t v363 = 0;
                  uint64_t v364 = 0;
                  uint64_t v365 = 0;
                  uint64_t v366 = *(void *)(v101 + 152);
                  BOOL v367 = v238[19];
                  uint64_t v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v369 = 0;
                      unsigned int v370 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v368 + v369) = *(unsigned char *)(v366 + v365 + v369) - *((unsigned char *)v367 + v364 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(void **)(v101 + 24);
                    v364 += *(void *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                uint64_t v1881 = v238[19];
                uint64_t v1897 = *(void *)(v101 + 152);
                uint64_t v1926 = (int)v361;
                unint64_t v1955 = 0;
                unsigned int v1866 = v361 + 1;
                uint64_t v1232 = v100[19];
                do
                {
                  uint64_t v1233 = *(void *)*a1;
                  unint64_t v1234 = (unint64_t)(*(void *)(*a1 + 8) - v1233) >> 2;
                  uint64_t v1235 = 0;
                  uint64_t v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    uint64_t v1237 = *(void *)(*a1 + 24);
                    int v1238 = v1955;
                    do
                    {
                      ldiv_t v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      int v1238 = v1239.quot;
                      v1235 += *(void *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  uint64_t v1240 = *(void *)*a2;
                  unint64_t v1241 = (unint64_t)(*(void *)(*a2 + 8) - v1240) >> 2;
                  uint64_t v1242 = 0;
                  uint64_t v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    uint64_t v1244 = *(void *)(*a2 + 24);
                    int v1245 = v1955;
                    do
                    {
                      ldiv_t v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      int v1245 = v1246.quot;
                      v1242 += *(void *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1247 = 0;
                    unsigned int v1248 = v1866;
                    do
                    {
                      *(unsigned char *)(v1232 + v1247) = *(unsigned char *)(v1897 + (int)v1235 + v1247)
                                                - *((unsigned char *)v1881 + (int)v1242 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    unsigned int v100 = *(void **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    unint64_t v371 = 0;
                    uint64_t v372 = 0;
                    uint64_t v373 = 0;
                    uint64_t v374 = *(void *)(v101 + 152);
                    uint64_t v375 = v238[19];
                    uint64_t v376 = v100[19];
                    do
                    {
                      *(unsigned char *)(v376 + v371) = *(unsigned char *)(v374 + v373) - *((unsigned char *)v375 + v372);
                      v373 += **(void **)(*a1 + 24);
                      v372 += **(void **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v679 = *v102;
                  if (*v102)
                  {
                    unint64_t v680 = 0;
                    uint64_t v681 = 0;
                    uint64_t v682 = 0;
                    uint64_t v683 = 0;
                    uint64_t v684 = *(void *)(v101 + 152);
                    char v685 = v238[19];
                    uint64_t v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v687 = 0;
                        do
                        {
                          *(unsigned char *)(v686 + v681 + v687) = *(unsigned char *)(v684 + v683) - *((unsigned char *)v685 + v682);
                          uint64_t v101 = *a1;
                          unint64_t v688 = *(void **)(*a1 + 24);
                          uint64_t v689 = v688[1];
                          v683 += v689;
                          uint64_t v238 = (int **)*a2;
                          uint64_t v690 = *(int **)(*a2 + 24);
                          uint64_t v691 = *((void *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          char v102 = *(int **)*a1;
                          unint64_t v692 = v102[1];
                        }
                        while (v687 < v692);
                        int v679 = *v102;
                        uint64_t v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        unint64_t v692 = 0;
                        unint64_t v688 = *(void **)(v101 + 24);
                        uint64_t v689 = v688[1];
                        uint64_t v690 = v238[3];
                        uint64_t v691 = *((void *)v690 + 1);
                      }
                      uint64_t v683 = *v688 + v683 - v692 * v689;
                      uint64_t v682 = *(void *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  int v693 = *v102;
                  if (*v102)
                  {
                    unint64_t v694 = 0;
                    uint64_t v695 = 0;
                    uint64_t v696 = 0;
                    uint64_t v697 = 0;
                    uint64_t v698 = *(void *)(v101 + 152);
                    char v699 = v238[19];
                    uint64_t v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v702 = 0;
                            do
                            {
                              *(unsigned char *)(v700 + v695 + v702) = *(unsigned char *)(v698 + v697) - *((unsigned char *)v699 + v696);
                              uint64_t v101 = *a1;
                              uint64_t v703 = *(void **)(*a1 + 24);
                              uint64_t v704 = v703[2];
                              v697 += v704;
                              uint64_t v238 = (int **)*a2;
                              unint64_t v705 = *(int **)(*a2 + 24);
                              uint64_t v706 = *((void *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              char v102 = *(int **)*a1;
                              unint64_t v707 = v102[2];
                            }
                            while (v702 < v707);
                            uint64_t v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            unint64_t v707 = 0;
                            uint64_t v703 = *(void **)(v101 + 24);
                            uint64_t v704 = v703[2];
                            unint64_t v705 = v238[3];
                            uint64_t v706 = *((void *)v705 + 2);
                          }
                          uint64_t v708 = v703[1];
                          uint64_t v697 = v708 + v697 - v707 * v704;
                          uint64_t v696 = *((void *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          unint64_t v709 = v102[1];
                        }
                        while (v701 < v709);
                        int v693 = *v102;
                      }
                      else
                      {
                        unint64_t v709 = 0;
                        uint64_t v703 = *(void **)(v101 + 24);
                        uint64_t v708 = v703[1];
                      }
                      uint64_t v697 = *v703 + v697 - v709 * v708;
                      uint64_t v696 = *(void *)v238[3] + v696 - *((void *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  int v710 = *v102;
                  if (*v102)
                  {
                    unint64_t v711 = 0;
                    uint64_t v712 = 0;
                    uint64_t v713 = 0;
                    uint64_t v714 = 0;
                    uint64_t v715 = *(void *)(v101 + 152);
                    unsigned int v716 = v238[19];
                    uint64_t v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                unint64_t v720 = 0;
                                do
                                {
                                  *(unsigned char *)(v717 + v712 + v720) = *(unsigned char *)(v715 + v714) - *((unsigned char *)v716 + v713);
                                  uint64_t v101 = *a1;
                                  unint64_t v721 = *(void **)(*a1 + 24);
                                  uint64_t v722 = v721[3];
                                  v714 += v722;
                                  uint64_t v238 = (int **)*a2;
                                  uint64_t v723 = *(int **)(*a2 + 24);
                                  uint64_t v724 = *((void *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  char v102 = *(int **)*a1;
                                  unint64_t v725 = v102[3];
                                }
                                while (v720 < v725);
                                uint64_t v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                unint64_t v725 = 0;
                                unint64_t v721 = *(void **)(v101 + 24);
                                uint64_t v722 = v721[3];
                                uint64_t v723 = v238[3];
                                uint64_t v724 = *((void *)v723 + 3);
                              }
                              uint64_t v726 = v721[2];
                              uint64_t v714 = v726 + v714 - v725 * v722;
                              uint64_t v713 = *((void *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              unint64_t v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            unint64_t v727 = 0;
                            unint64_t v721 = *(void **)(v101 + 24);
                            uint64_t v726 = v721[2];
                          }
                          uint64_t v714 = v721[1] + v714 - v727 * v726;
                          uint64_t v713 = *((void *)v238[3] + 1) + v713 - *((void *)v238[3] + 2) * v239[2];
                          ++v718;
                          unint64_t v728 = v102[1];
                        }
                        while (v718 < v728);
                        int v710 = *v102;
                      }
                      else
                      {
                        unint64_t v728 = 0;
                      }
                      uint64_t v714 = **(void **)(v101 + 24) + v714 - *(void *)(*(void *)(v101 + 24) + 8) * v728;
                      uint64_t v713 = *(void *)v238[3] + v713 - *((void *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    unint64_t v663 = 0;
                    uint64_t v1951 = v238[19];
                    uint64_t v1969 = *(void *)(v101 + 152);
                    uint64_t v664 = v100[19];
                    do
                    {
                      uint64_t v665 = *(void *)*a1;
                      unint64_t v666 = (unint64_t)(*(void *)(*a1 + 8) - v665) >> 2;
                      uint64_t v667 = 0;
                      uint64_t v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        uint64_t v669 = *(void *)(*a1 + 24);
                        int v670 = v663;
                        do
                        {
                          ldiv_t v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          int v670 = v671.quot;
                          v667 += *(void *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      uint64_t v672 = *(void *)*a2;
                      unint64_t v673 = (unint64_t)(*(void *)(*a2 + 8) - v672) >> 2;
                      uint64_t v674 = 0;
                      uint64_t v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        uint64_t v676 = *(void *)(*a2 + 24);
                        int v677 = v663;
                        do
                        {
                          ldiv_t v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          int v677 = v678.quot;
                          v674 += *(void *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(unsigned char *)(v664 + v663++) = *(unsigned char *)(v1969 + (int)v667) - *((unsigned char *)v1951 + (int)v674);
                    }
                    while (v663 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          int v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            int v138 = **(_DWORD **)(*a1 + 152);
            int v139 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v140 = *(int **)(*a2 + 152);
            unsigned int v141 = v137 + 1;
            do
            {
              int v142 = *v140++;
              *v139++ = v138 - v142;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          int v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            int v144 = **(_DWORD **)(*a2 + 152);
            int v145 = *(_DWORD **)(*(void *)a3 + 152);
            char v146 = *(int **)(*a1 + 152);
            unsigned int v147 = v143 + 1;
            do
            {
              int v148 = *v146++;
              *v145++ = v148 - v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          int v149 = *(_DWORD *)(*(void *)a3 + 48);
          if (v149 >= 1)
          {
            char v150 = *(_DWORD **)(*(void *)a3 + 152);
            char v151 = *(int **)(*a2 + 152);
            unsigned int v152 = *(int **)(*a1 + 152);
            unsigned int v153 = v149 + 1;
            do
            {
              int v155 = *v152++;
              int v154 = v155;
              int v156 = *v151++;
              *v150++ = v154 - v156;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          int v128 = *(void **)a3;
          int v129 = (void *)*a1;
          int v130 = *(int **)*a1;
          uint64_t v131 = (v129[1] - (void)v130) >> 2;
          uint64_t v132 = (v131 - 1);
          if ((int)v132 >= -1) {
            int v133 = -1;
          }
          else {
            int v133 = v131 - 1;
          }
          int v134 = v133 + 1;
          int v135 = v131 + 1;
          while (1)
          {
            unsigned int v136 = v135 - 2;
            if (v135 - 2 < 0) {
              break;
            }
            --v135;
            if (*(void *)(v129[3] + 8 * v136) != *(void *)(v128[3] + 8 * v136)) {
              goto LABEL_177;
            }
          }
          int v135 = v134;
LABEL_177:
          int v245 = (void *)*a2;
          unsigned int v246 = *(int **)*a2;
          uint64_t v247 = (v245[1] - (void)v246) >> 2;
          uint64_t v248 = (v247 - 1);
          if ((int)v248 >= -1) {
            int v249 = -1;
          }
          else {
            int v249 = v247 - 1;
          }
          int v250 = v249 + 1;
          int v251 = v247 + 1;
          while (1)
          {
            unsigned int v252 = v251 - 2;
            if (v251 - 2 < 0) {
              break;
            }
            --v251;
            if (*(void *)(v245[3] + 8 * v252) != *(void *)(v128[3] + 8 * v252)) {
              goto LABEL_221;
            }
          }
          int v251 = v250;
LABEL_221:
          int v277 = v131 + 1;
          while (1)
          {
            unsigned int v278 = v277 - 2;
            if (v277 - 2 < 0) {
              break;
            }
            --v277;
            if (*(void *)(v129[3] + 8 * v278)) {
              goto LABEL_256;
            }
          }
          int v277 = v134;
LABEL_256:
          int v291 = v247 + 1;
          while (1)
          {
            unsigned int v292 = v291 - 2;
            if (v291 - 2 < 0) {
              break;
            }
            --v291;
            if (*(void *)(v245[3] + 8 * v292)) {
              goto LABEL_414;
            }
          }
          int v291 = v250;
LABEL_414:
          unint64_t v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251) {
            int v378 = v251;
          }
          else {
            int v378 = v135;
          }
          if (v135 <= v291) {
            int v135 = v291;
          }
          if (v277 > v251) {
            int v251 = v277;
          }
          if (v377 > v251)
          {
            int v379 = 1;
          }
          else
          {
            int v251 = (uint64_t)(v128[1] - *v128) >> 2;
            int v379 = 4;
          }
          if (v377 > v135)
          {
            int v380 = 2;
          }
          else
          {
            int v135 = v251;
            int v380 = v379;
          }
          if (v377 > v378)
          {
            int v135 = v378;
            int v380 = 3;
          }
          uint64_t v1946 = v248;
          uint64_t v1964 = v132;
          if (!v135) {
            goto LABEL_444;
          }
          unint64_t v381 = *(void *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10) {
            goto LABEL_444;
          }
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                int v1621 = *v130;
                if (*v130)
                {
                  unint64_t v1622 = 0;
                  uint64_t v1623 = 0;
                  uint64_t v1624 = 0;
                  uint64_t v1625 = v129[19];
                  uint64_t v1626 = v245[19];
                  uint64_t v1627 = v128[19];
                  ldiv_t v1628 = (uint64_t *)v129[3];
                  uint64_t v1629 = *v1628;
                  uint64_t v1630 = v1628[1];
                  uint64_t v1631 = (uint64_t *)v245[3];
                  uint64_t v1632 = *v1631;
                  uint64_t v1633 = v1631[1];
                  int v1634 = v130[1];
                  int v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      unint64_t v1636 = 0;
                      uint64_t v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1638 = 0;
                          int v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          unsigned int v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = v1639 - *(_DWORD *)(v1637 + v1638);
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          int v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      uint64_t v1641 = v1634;
                      int v1621 = *v130;
                      int v1635 = v1634;
                    }
                    else
                    {
                      uint64_t v1641 = 0;
                    }
                    uint64_t v1624 = v1624 + v1629 - v1641 * v1630;
                    uint64_t v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                int v1055 = *v130;
                if (*v130)
                {
                  unint64_t v1056 = 0;
                  uint64_t v1057 = 0;
                  uint64_t v1058 = v129[19];
                  uint64_t v1059 = v245[19];
                  uint64_t v1060 = v128[19];
                  uint64_t v1061 = *(void *)v129[3];
                  uint64_t v1062 = 4 * *(void *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1063 = 0;
                      int v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      unsigned int v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = v1064 - *(_DWORD *)(v1059 + v1063);
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      int v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                unint64_t v1909 = v128[6];
                if (v1909)
                {
                  unint64_t v1938 = 0;
                  uint64_t v1841 = v245[19];
                  uint64_t v1856 = v129[19];
                  uint64_t v1642 = v128[19];
                  do
                  {
                    uint64_t v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1644 = v129[3];
                      uint64_t v1645 = v132;
                      int v1646 = v1938;
                      do
                      {
                        ldiv_t v1647 = ldiv(v1646, v130[v1645]);
                        int v1646 = v1647.quot;
                        v1643 += *(void *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    uint64_t v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      uint64_t v1649 = 0;
                      uint64_t v1650 = v245[3];
                      int v1651 = v1938;
                      do
                      {
                        ldiv_t v1652 = ldiv(v1651, v246[v1648]);
                        int v1651 = v1652.quot;
                        v1649 += *(void *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1653 = 0;
                      int v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      unsigned int v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = v1654 - *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653);
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                int v1656 = *v130;
                if (*v130)
                {
                  unint64_t v1657 = 0;
                  uint64_t v1658 = 0;
                  uint64_t v1659 = 0;
                  uint64_t v1660 = v129[19];
                  uint64_t v1661 = v245[19];
                  uint64_t v1662 = v128[19];
                  uint64_t v1663 = (uint64_t *)v129[3];
                  uint64_t v1664 = *v1663;
                  uint64_t v1665 = v1663[1];
                  uint64_t v1666 = (uint64_t *)v245[3];
                  uint64_t v1667 = *v1666;
                  uint64_t v1668 = v1666[1];
                  int v1669 = v130[1];
                  int v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      unint64_t v1671 = 0;
                      uint64_t v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1673 = 0;
                          int v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          unsigned int v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) - v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          int v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      uint64_t v1676 = v1669;
                      int v1656 = *v130;
                      int v1670 = v1669;
                    }
                    else
                    {
                      uint64_t v1676 = 0;
                    }
                    uint64_t v1659 = v1659 + v1664 - v1676 * v1665;
                    uint64_t v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                int v1066 = *v130;
                if (*v130)
                {
                  unint64_t v1067 = 0;
                  uint64_t v1068 = 0;
                  uint64_t v1069 = v129[19];
                  uint64_t v1070 = v245[19];
                  uint64_t v1071 = v128[19];
                  uint64_t v1072 = *(void *)v245[3];
                  uint64_t v1073 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1074 = 0;
                      int v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      unsigned int v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) - v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      int v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                unint64_t v1910 = v128[6];
                if (v1910)
                {
                  unint64_t v1939 = 0;
                  uint64_t v1842 = v245[19];
                  uint64_t v1857 = v129[19];
                  uint64_t v1677 = v128[19];
                  do
                  {
                    uint64_t v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1679 = v129[3];
                      uint64_t v1680 = v132;
                      int v1681 = v1939;
                      do
                      {
                        ldiv_t v1682 = ldiv(v1681, v130[v1680]);
                        int v1681 = v1682.quot;
                        v1678 += *(void *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    uint64_t v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      uint64_t v1684 = 0;
                      uint64_t v1685 = v245[3];
                      int v1686 = v1939;
                      do
                      {
                        ldiv_t v1687 = ldiv(v1686, v246[v1683]);
                        int v1686 = v1687.quot;
                        v1684 += *(void *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1688 = 0;
                      int v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      unsigned int v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) - v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                int v1249 = *v130;
                if (*v130)
                {
                  unint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = 0;
                  uint64_t v1253 = v129[19];
                  uint64_t v1254 = v245[19];
                  uint64_t v1255 = v128[19];
                  int v1256 = (uint64_t *)v129[3];
                  uint64_t v1257 = *v1256;
                  uint64_t v1258 = v1256[1];
                  uint64_t v1259 = (uint64_t *)v245[3];
                  uint64_t v1260 = *v1259;
                  uint64_t v1261 = v1259[1];
                  int v1262 = v130[1];
                  int v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      unint64_t v1264 = 0;
                      uint64_t v1265 = v1254 + 4 * v1251;
                      uint64_t v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1267 = 0;
                          unsigned int v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1266 + v1267) - *(_DWORD *)(v1265 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          int v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      uint64_t v1269 = v1262;
                      int v1249 = *v130;
                      int v1263 = v1262;
                    }
                    else
                    {
                      uint64_t v1269 = 0;
                    }
                    uint64_t v1252 = v1252 + v1257 - v1269 * v1258;
                    uint64_t v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                int v382 = *v130;
                if (*v130)
                {
                  unint64_t v383 = 0;
                  uint64_t v384 = v129[19];
                  uint64_t v385 = v245[19];
                  uint64_t v386 = v128[19];
                  uint64_t v387 = 4 * *(void *)v245[3];
                  uint64_t v388 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v389 = 0;
                      unsigned int v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v384 + v389) - *(_DWORD *)(v385 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      int v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                unint64_t v1898 = v128[6];
                if (v1898)
                {
                  unint64_t v1927 = 0;
                  uint64_t v1836 = v245[19];
                  uint64_t v1849 = v129[19];
                  uint64_t v1270 = v128[19];
                  do
                  {
                    uint64_t v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1272 = v129[3];
                      uint64_t v1273 = v132;
                      int v1274 = v1927;
                      do
                      {
                        ldiv_t v1275 = ldiv(v1274, v130[v1273]);
                        int v1274 = v1275.quot;
                        v1271 += *(void *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    uint64_t v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      uint64_t v1277 = 0;
                      uint64_t v1278 = v245[3];
                      int v1279 = v1927;
                      do
                      {
                        ldiv_t v1280 = ldiv(v1279, v246[v1276]);
                        int v1279 = v1280.quot;
                        v1277 += *(void *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1281 = 0;
                      unsigned int v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281)
                                                   - *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  uint64_t v391 = v128[6];
                  if (v391)
                  {
                    uint64_t v392 = (_DWORD *)v129[19];
                    uint64_t v393 = (_DWORD *)v245[19];
                    uint64_t v394 = (_DWORD *)v128[19];
                    uint64_t v395 = 4 * *(void *)v245[3];
                    uint64_t v396 = 4 * *(void *)v129[3];
                    do
                    {
                      *v394++ = *v392 - *v393;
                      uint64_t v393 = (_DWORD *)((char *)v393 + v395);
                      uint64_t v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  int v741 = *v130;
                  if (*v130)
                  {
                    unint64_t v742 = 0;
                    uint64_t v743 = 0;
                    uint64_t v744 = 0;
                    uint64_t v745 = 0;
                    uint64_t v746 = v129[19];
                    uint64_t v747 = v245[19];
                    uint64_t v748 = v128[19];
                    uint64_t v749 = (uint64_t *)v129[3];
                    uint64_t v750 = *v749;
                    uint64_t v751 = v749[1];
                    uint64_t v752 = (uint64_t *)v245[3];
                    uint64_t v754 = *v752;
                    uint64_t v753 = v752[1];
                    int v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (unint64_t m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v746 + 4 * v745)
                                                               - *(_DWORD *)(v747 + 4 * v744);
                          v745 += v751;
                          v744 += v753;
                          int v755 = v130[1];
                        }
                        uint64_t v757 = v755;
                        int v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        uint64_t v757 = 0;
                      }
                      uint64_t v745 = v745 + v750 - v757 * v751;
                      uint64_t v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  int v758 = *v130;
                  if (*v130)
                  {
                    unint64_t v759 = 0;
                    uint64_t v760 = 0;
                    uint64_t v761 = 0;
                    uint64_t v762 = 0;
                    uint64_t v763 = v129[19];
                    uint64_t v764 = v245[19];
                    uint64_t v765 = v128[19];
                    int v766 = (uint64_t *)v129[3];
                    uint64_t v767 = *v766;
                    uint64_t v768 = v766[1];
                    uint64_t v769 = (uint64_t *)v245[3];
                    uint64_t v770 = *v769;
                    uint64_t v771 = v769[1];
                    int v772 = v130[1];
                    int v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        unint64_t v774 = 0;
                        uint64_t v775 = v766[2];
                        uint64_t v776 = v769[2];
                        int v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (unint64_t n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v763 + 4 * v762)
                                                                   - *(_DWORD *)(v764 + 4 * v761);
                              v762 += v775;
                              v761 += v776;
                              int v777 = v130[2];
                            }
                            uint64_t v779 = v777;
                            int v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            uint64_t v779 = 0;
                          }
                          uint64_t v762 = v762 + v768 - v779 * v775;
                          uint64_t v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        uint64_t v780 = v772;
                        int v758 = *v130;
                        int v773 = v772;
                      }
                      else
                      {
                        uint64_t v780 = 0;
                      }
                      uint64_t v762 = v762 + v767 - v780 * v768;
                      uint64_t v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  int v781 = *v130;
                  if (*v130)
                  {
                    unint64_t v782 = 0;
                    uint64_t v783 = 0;
                    uint64_t v784 = 0;
                    uint64_t v785 = 0;
                    uint64_t v786 = v129[19];
                    uint64_t v787 = v245[19];
                    uint64_t v788 = v128[19];
                    int v789 = (uint64_t *)v129[3];
                    uint64_t v790 = *v789;
                    uint64_t v791 = v789[1];
                    uint64_t v792 = (uint64_t *)v245[3];
                    uint64_t v793 = *v792;
                    uint64_t v794 = v792[1];
                    int v795 = v130[1];
                    int v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        unint64_t v797 = 0;
                        uint64_t v798 = v789[2];
                        uint64_t v799 = v792[2];
                        int v800 = v130[2];
                        int v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            unint64_t v802 = 0;
                            uint64_t v803 = v789[3];
                            uint64_t v804 = v792[3];
                            int v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (iunint64_t i = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v786 + 4 * v785)
                                                                        - *(_DWORD *)(v787 + 4 * v784);
                                  v785 += v803;
                                  v784 += v804;
                                  int v805 = v130[3];
                                }
                                uint64_t v807 = v805;
                                int v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                uint64_t v807 = 0;
                              }
                              uint64_t v785 = v785 + v798 - v807 * v803;
                              uint64_t v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            uint64_t v808 = v800;
                            int v795 = v130[1];
                            int v801 = v800;
                          }
                          else
                          {
                            uint64_t v808 = 0;
                          }
                          uint64_t v785 = v785 + v791 - v808 * v798;
                          uint64_t v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        uint64_t v809 = v795;
                        int v781 = *v130;
                        int v796 = v795;
                      }
                      else
                      {
                        uint64_t v809 = 0;
                      }
                      uint64_t v785 = v785 + v790 - v809 * v791;
                      uint64_t v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  uint64_t v729 = v128[6];
                  if (v729)
                  {
                    uint64_t v730 = 0;
                    uint64_t v1889 = v245[19];
                    uint64_t v1918 = v129[19];
                    uint64_t v1876 = v128[19];
                    do
                    {
                      uint64_t v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        uint64_t v732 = v129[3];
                        uint64_t v733 = v132;
                        int v734 = v730;
                        do
                        {
                          ldiv_t v735 = ldiv(v734, v130[v733]);
                          int v734 = v735.quot;
                          v731 += *(void *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      uint64_t v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        uint64_t v737 = 0;
                        uint64_t v738 = v245[3];
                        int v739 = v730;
                        do
                        {
                          ldiv_t v740 = ldiv(v739, v246[v736]);
                          int v739 = v740.quot;
                          v737 += *(void *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1918 + 4 * (int)v731)
                                                      - *(_DWORD *)(v1889 + 4 * (int)v737);
                      uint64_t v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) - **(void **)(*a2 + 152);
          return;
        case 1:
          int v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            uint64_t v167 = **(void **)(*a1 + 152);
            char v168 = *(void **)(*(void *)a3 + 152);
            char v169 = *(uint64_t **)(*a2 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              uint64_t v171 = *v169++;
              *v168++ = v167 - v171;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          int v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            uint64_t v173 = **(void **)(*a2 + 152);
            unsigned int v174 = *(void **)(*(void *)a3 + 152);
            uint64_t v175 = *(uint64_t **)(*a1 + 152);
            unsigned int v176 = v172 + 1;
            do
            {
              uint64_t v177 = *v175++;
              *v174++ = v177 - v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          int v178 = *(_DWORD *)(*(void *)a3 + 48);
          if (v178 >= 1)
          {
            int v179 = *(void **)(*(void *)a3 + 152);
            unsigned int v180 = *(uint64_t **)(*a2 + 152);
            int v181 = *(uint64_t **)(*a1 + 152);
            unsigned int v182 = v178 + 1;
            do
            {
              uint64_t v184 = *v181++;
              uint64_t v183 = v184;
              uint64_t v185 = *v180++;
              *v179++ = v183 - v185;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          int v157 = *(void **)a3;
          char v158 = (void *)*a1;
          char v159 = *(int **)*a1;
          uint64_t v160 = (v158[1] - (void)v159) >> 2;
          uint64_t v161 = (v160 - 1);
          if ((int)v161 >= -1) {
            int v162 = -1;
          }
          else {
            int v162 = v160 - 1;
          }
          int v163 = v162 + 1;
          int v164 = v160 + 1;
          while (1)
          {
            unsigned int v165 = v164 - 2;
            if (v164 - 2 < 0) {
              break;
            }
            --v164;
            if (*(void *)(v158[3] + 8 * v165) != *(void *)(v157[3] + 8 * v165)) {
              goto LABEL_185;
            }
          }
          int v164 = v163;
LABEL_185:
          float v253 = (void *)*a2;
          int v254 = *(int **)*a2;
          uint64_t v255 = (v253[1] - (void)v254) >> 2;
          uint64_t v256 = (v255 - 1);
          if ((int)v256 >= -1) {
            int v257 = -1;
          }
          else {
            int v257 = v255 - 1;
          }
          int v258 = v257 + 1;
          int v259 = v255 + 1;
          while (1)
          {
            unsigned int v260 = v259 - 2;
            if (v259 - 2 < 0) {
              break;
            }
            --v259;
            if (*(void *)(v253[3] + 8 * v260) != *(void *)(v157[3] + 8 * v260)) {
              goto LABEL_226;
            }
          }
          int v259 = v258;
LABEL_226:
          int v279 = v160 + 1;
          while (1)
          {
            unsigned int v280 = v279 - 2;
            if (v279 - 2 < 0) {
              break;
            }
            --v279;
            if (*(void *)(v158[3] + 8 * v280)) {
              goto LABEL_261;
            }
          }
          int v279 = v163;
LABEL_261:
          int v293 = v255 + 1;
          while (1)
          {
            unsigned int v294 = v293 - 2;
            if (v293 - 2 < 0) {
              break;
            }
            --v293;
            if (*(void *)(v253[3] + 8 * v294)) {
              goto LABEL_450;
            }
          }
          int v293 = v258;
LABEL_450:
          unint64_t v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259) {
            int v398 = v259;
          }
          else {
            int v398 = v164;
          }
          if (v164 <= v293) {
            int v164 = v293;
          }
          if (v279 > v259) {
            int v259 = v279;
          }
          if (v397 > v259)
          {
            int v399 = 1;
          }
          else
          {
            int v259 = (uint64_t)(v157[1] - *v157) >> 2;
            int v399 = 4;
          }
          if (v397 > v164)
          {
            int v400 = 2;
          }
          else
          {
            int v164 = v259;
            int v400 = v399;
          }
          if (v397 > v398)
          {
            int v164 = v398;
            int v400 = 3;
          }
          uint64_t v1947 = v256;
          uint64_t v1965 = v161;
          if (!v164) {
            goto LABEL_479;
          }
          unint64_t v401 = *(void *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10) {
            goto LABEL_479;
          }
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                uint64_t v1691 = *v159;
                if (v1691)
                {
                  uint64_t v1692 = 0;
                  uint64_t v1693 = 0;
                  uint64_t v1694 = 0;
                  uint64_t v1695 = v158[19];
                  uint64_t v1696 = v253[19];
                  uint64_t v1697 = v157[19];
                  unint64_t v1698 = v159[1];
                  uint64_t v1699 = (uint64_t *)v158[3];
                  uint64_t v1700 = *v1699;
                  uint64_t v1701 = v1699[1];
                  uint64_t v1702 = (uint64_t *)v253[3];
                  uint64_t v1703 = *v1702;
                  uint64_t v1704 = v1702[1];
                  if (v1698 <= 1) {
                    uint64_t v1705 = 1;
                  }
                  else {
                    uint64_t v1705 = v159[1];
                  }
                  uint64_t v1706 = v1700 - v1701 * v1698;
                  uint64_t v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if (v1698)
                    {
                      uint64_t v1708 = 0;
                      uint64_t v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1710 = 0;
                          uint64_t v1711 = *(void *)(v1695 + 8 * v1694);
                          unsigned int v1712 = v401 + 1;
                          do
                          {
                            *(void *)(v1697 + v1710) = v1711 - *(void *)(v1709 + v1710);
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1077 = *v159;
                if (v1077)
                {
                  uint64_t v1078 = 0;
                  uint64_t v1079 = 0;
                  uint64_t v1080 = v158[19];
                  uint64_t v1081 = v253[19];
                  uint64_t v1082 = v157[19];
                  uint64_t v1083 = *(void *)v158[3];
                  uint64_t v1084 = 8 * *(void *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1085 = 0;
                      uint64_t v1086 = *(void *)(v1080 + 8 * v1079);
                      unsigned int v1087 = v401 + 1;
                      do
                      {
                        *(void *)(v1082 + v1085) = v1086 - *(void *)(v1081 + v1085);
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                unint64_t v1911 = v157[6];
                if (v1911)
                {
                  unint64_t v1940 = 0;
                  uint64_t v1843 = v253[19];
                  uint64_t v1858 = v158[19];
                  uint64_t v1713 = v157[19];
                  do
                  {
                    uint64_t v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1715 = v158[3];
                      uint64_t v1716 = v161;
                      int v1717 = v1940;
                      do
                      {
                        ldiv_t v1718 = ldiv(v1717, v159[v1716]);
                        int v1717 = v1718.quot;
                        v1714 += *(void *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    uint64_t v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      uint64_t v1720 = 0;
                      uint64_t v1721 = v253[3];
                      int v1722 = v1940;
                      do
                      {
                        ldiv_t v1723 = ldiv(v1722, v254[v1719]);
                        int v1722 = v1723.quot;
                        v1720 += *(void *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1724 = 0;
                      uint64_t v1725 = *(void *)(v1858 + 8 * (int)v1714);
                      unsigned int v1726 = v401 + 1;
                      do
                      {
                        *(void *)(v1713 + v1724) = v1725 - *(void *)(v1843 + 8 * (int)v1720 + v1724);
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                uint64_t v1727 = *v159;
                if (v1727)
                {
                  uint64_t v1728 = 0;
                  uint64_t v1729 = 0;
                  uint64_t v1730 = 0;
                  uint64_t v1731 = v158[19];
                  uint64_t v1732 = v253[19];
                  uint64_t v1733 = v157[19];
                  unint64_t v1734 = v159[1];
                  uint64_t v1735 = (uint64_t *)v158[3];
                  uint64_t v1736 = *v1735;
                  uint64_t v1737 = v1735[1];
                  uint64_t v1738 = (uint64_t *)v253[3];
                  uint64_t v1739 = *v1738;
                  uint64_t v1740 = v1738[1];
                  if (v1734 <= 1) {
                    uint64_t v1741 = 1;
                  }
                  else {
                    uint64_t v1741 = v159[1];
                  }
                  uint64_t v1742 = v1736 - v1737 * v1734;
                  uint64_t v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if (v1734)
                    {
                      uint64_t v1744 = 0;
                      uint64_t v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1746 = 0;
                          uint64_t v1747 = *(void *)(v1732 + 8 * v1729);
                          unsigned int v1748 = v401 + 1;
                          do
                          {
                            *(void *)(v1733 + v1746) = *(void *)(v1745 + v1746) - v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1088 = *v159;
                if (v1088)
                {
                  uint64_t v1089 = 0;
                  uint64_t v1090 = 0;
                  uint64_t v1091 = v158[19];
                  uint64_t v1092 = v253[19];
                  uint64_t v1093 = v157[19];
                  uint64_t v1094 = *(void *)v253[3];
                  uint64_t v1095 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1096 = 0;
                      uint64_t v1097 = *(void *)(v1092 + 8 * v1090);
                      unsigned int v1098 = v401 + 1;
                      do
                      {
                        *(void *)(v1093 + v1096) = *(void *)(v1091 + v1096) - v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                unint64_t v1912 = v157[6];
                if (v1912)
                {
                  unint64_t v1941 = 0;
                  uint64_t v1844 = v253[19];
                  uint64_t v1859 = v158[19];
                  uint64_t v1749 = v157[19];
                  do
                  {
                    uint64_t v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1751 = v158[3];
                      uint64_t v1752 = v161;
                      int v1753 = v1941;
                      do
                      {
                        ldiv_t v1754 = ldiv(v1753, v159[v1752]);
                        int v1753 = v1754.quot;
                        v1750 += *(void *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    uint64_t v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      uint64_t v1756 = 0;
                      uint64_t v1757 = v253[3];
                      int v1758 = v1941;
                      do
                      {
                        ldiv_t v1759 = ldiv(v1758, v254[v1755]);
                        int v1758 = v1759.quot;
                        v1756 += *(void *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1760 = 0;
                      uint64_t v1761 = *(void *)(v1844 + 8 * (int)v1756);
                      unsigned int v1762 = v401 + 1;
                      do
                      {
                        *(void *)(v1749 + v1760) = *(void *)(v1859 + 8 * (int)v1750 + v1760) - v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                uint64_t v1283 = *v159;
                if (v1283)
                {
                  uint64_t v1284 = 0;
                  uint64_t v1285 = 0;
                  uint64_t v1286 = 0;
                  uint64_t v1287 = v158[19];
                  uint64_t v1288 = v253[19];
                  uint64_t v1289 = v157[19];
                  unint64_t v1290 = v159[1];
                  uint64_t v1291 = (uint64_t *)v158[3];
                  uint64_t v1292 = *v1291;
                  uint64_t v1293 = v1291[1];
                  unint64_t v1294 = (uint64_t *)v253[3];
                  uint64_t v1295 = *v1294;
                  uint64_t v1296 = v1294[1];
                  if (v1290 <= 1) {
                    uint64_t v1297 = 1;
                  }
                  else {
                    uint64_t v1297 = v159[1];
                  }
                  uint64_t v1298 = v1292 - v1293 * v1290;
                  uint64_t v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if (v1290)
                    {
                      uint64_t v1300 = 0;
                      uint64_t v1301 = v1288 + 8 * v1285;
                      uint64_t v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1303 = 0;
                          unsigned int v1304 = v401 + 1;
                          do
                          {
                            *(void *)(v1289 + v1303) = *(void *)(v1302 + v1303) - *(void *)(v1301 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v402 = *v159;
                if (v402)
                {
                  uint64_t v403 = 0;
                  uint64_t v404 = v158[19];
                  uint64_t v405 = v253[19];
                  uint64_t v406 = v157[19];
                  uint64_t v407 = 8 * *(void *)v253[3];
                  uint64_t v408 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v409 = 0;
                      unsigned int v410 = v401 + 1;
                      do
                      {
                        *(void *)(v406 + v409) = *(void *)(v404 + v409) - *(void *)(v405 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                unint64_t v1899 = v157[6];
                if (v1899)
                {
                  unint64_t v1928 = 0;
                  uint64_t v1837 = v253[19];
                  uint64_t v1850 = v158[19];
                  uint64_t v1305 = v157[19];
                  do
                  {
                    uint64_t v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1307 = v158[3];
                      uint64_t v1308 = v161;
                      int v1309 = v1928;
                      do
                      {
                        ldiv_t v1310 = ldiv(v1309, v159[v1308]);
                        int v1309 = v1310.quot;
                        v1306 += *(void *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    uint64_t v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      uint64_t v1312 = 0;
                      uint64_t v1313 = v253[3];
                      int v1314 = v1928;
                      do
                      {
                        ldiv_t v1315 = ldiv(v1314, v254[v1311]);
                        int v1314 = v1315.quot;
                        v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1316 = 0;
                      unsigned int v1317 = v401 + 1;
                      do
                      {
                        *(void *)(v1305 + v1316) = *(void *)(v1850 + 8 * (int)v1306 + v1316)
                                                   - *(void *)(v1837 + 8 * (int)v1312 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  uint64_t v411 = v157[6];
                  if (v411)
                  {
                    char v412 = (void *)v158[19];
                    unint64_t v413 = (void *)v253[19];
                    int v414 = (void *)v157[19];
                    uint64_t v415 = 8 * *(void *)v253[3];
                    uint64_t v416 = 8 * *(void *)v158[3];
                    do
                    {
                      *v414++ = *v412 - *v413;
                      unint64_t v413 = (void *)((char *)v413 + v415);
                      char v412 = (void *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  uint64_t v822 = *v159;
                  if (v822)
                  {
                    uint64_t v823 = 0;
                    uint64_t v824 = 0;
                    uint64_t v825 = 0;
                    uint64_t v826 = 0;
                    uint64_t v827 = v158[19];
                    uint64_t v828 = v253[19];
                    uint64_t v829 = v157[19];
                    unint64_t v830 = v159[1];
                    int v831 = (uint64_t *)v158[3];
                    uint64_t v832 = *v831;
                    uint64_t v833 = v831[1];
                    uint64_t v834 = (uint64_t *)v253[3];
                    uint64_t v835 = *v834;
                    uint64_t v836 = v834[1];
                    uint64_t v837 = v835 - v836 * v254[1];
                    if (v830 <= 1) {
                      uint64_t v838 = 1;
                    }
                    else {
                      uint64_t v838 = v159[1];
                    }
                    uint64_t v839 = v832 - v833 * v830;
                    do
                    {
                      if (v830)
                      {
                        uint64_t v840 = v824 + v838;
                        int v841 = (void *)(v829 + 8 * v824);
                        uint64_t v842 = v838;
                        do
                        {
                          *v841++ = *(void *)(v827 + 8 * v826) - *(void *)(v828 + 8 * v825);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        uint64_t v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  uint64_t v843 = *v159;
                  if (v843)
                  {
                    uint64_t v844 = 0;
                    uint64_t v845 = 0;
                    uint64_t v846 = 0;
                    uint64_t v847 = 0;
                    uint64_t v848 = v158[19];
                    uint64_t v849 = v253[19];
                    uint64_t v850 = v157[19];
                    unint64_t v851 = v159[1];
                    uint64_t v852 = (void *)v158[3];
                    uint64_t v853 = v852[1];
                    unint64_t v854 = (void *)v253[3];
                    uint64_t v855 = v854[1];
                    uint64_t v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1) {
                      uint64_t v857 = 1;
                    }
                    else {
                      uint64_t v857 = v159[1];
                    }
                    unint64_t v858 = *v852 - v853 * v851;
                    do
                    {
                      if (v851)
                      {
                        uint64_t v859 = 0;
                        unint64_t v860 = v159[2];
                        uint64_t v861 = v852[2];
                        uint64_t v862 = v854[2];
                        if (v860 <= 1) {
                          uint64_t v863 = 1;
                        }
                        else {
                          uint64_t v863 = v159[2];
                        }
                        uint64_t v864 = v855 - v862 * v254[2];
                        do
                        {
                          uint64_t v865 = v863;
                          if (v860)
                          {
                            do
                            {
                              *(void *)(v850 + 8 * v845++) = *(void *)(v848 + 8 * v847)
                                                             - *(void *)(v849 + 8 * v846);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  uint64_t v1970 = *v159;
                  if (v1970)
                  {
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = 0;
                    uint64_t v869 = 0;
                    uint64_t v870 = v158[19];
                    uint64_t v871 = v253[19];
                    uint64_t v872 = v157[19];
                    unint64_t v873 = v159[1];
                    uint64_t v874 = (void *)v158[3];
                    uint64_t v875 = (void *)v253[3];
                    uint64_t v1863 = v875[1];
                    uint64_t v1878 = v874[1];
                    uint64_t v1920 = *v875 - v1863 * v254[1];
                    int v1952 = v159[1];
                    if (v873 <= 1) {
                      uint64_t v876 = 1;
                    }
                    else {
                      uint64_t v876 = v159[1];
                    }
                    unint64_t v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        uint64_t v877 = 0;
                        unint64_t v878 = v159[2];
                        uint64_t v879 = v874[2];
                        uint64_t v880 = v875[2];
                        if (v878 <= 1) {
                          uint64_t v881 = 1;
                        }
                        else {
                          uint64_t v881 = v159[2];
                        }
                        uint64_t v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if (v878)
                          {
                            uint64_t v883 = 0;
                            unint64_t v884 = v159[3];
                            uint64_t v885 = v874[3];
                            uint64_t v886 = v875[3];
                            if (v884 <= 1) {
                              uint64_t v887 = 1;
                            }
                            else {
                              uint64_t v887 = v159[3];
                            }
                            uint64_t v888 = v880 - v886 * v254[3];
                            do
                            {
                              uint64_t v889 = v887;
                              if (v884)
                              {
                                do
                                {
                                  *(void *)(v872 + 8 * v867++) = *(void *)(v870 + 8 * v869)
                                                                 - *(void *)(v871 + 8 * v868);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  uint64_t v810 = v157[6];
                  if (v810)
                  {
                    uint64_t v811 = 0;
                    uint64_t v1890 = v253[19];
                    uint64_t v1919 = v158[19];
                    uint64_t v1877 = v157[19];
                    do
                    {
                      uint64_t v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        uint64_t v813 = v158[3];
                        uint64_t v814 = v161;
                        int v815 = v811;
                        do
                        {
                          ldiv_t v816 = ldiv(v815, v159[v814]);
                          int v815 = v816.quot;
                          v812 += *(void *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      uint64_t v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        uint64_t v818 = 0;
                        uint64_t v819 = v253[3];
                        int v820 = v811;
                        do
                        {
                          ldiv_t v821 = ldiv(v820, v254[v817]);
                          int v820 = v821.quot;
                          v818 += *(void *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(void *)(v1877 + 8 * v811++) = *(void *)(v1919 + 8 * (int)v812)
                                                      - *(void *)(v1890 + 8 * (int)v818);
                      uint64_t v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          int v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            float v196 = **(float **)(*a1 + 152);
            int v197 = *(float **)(*(void *)a3 + 152);
            int v198 = *(float **)(*a2 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              float v200 = *v198++;
              *v197++ = v196 - v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          int v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            float v202 = **(float **)(*a2 + 152);
            int v203 = *(float **)(*(void *)a3 + 152);
            int v204 = *(float **)(*a1 + 152);
            unsigned int v205 = v201 + 1;
            do
            {
              float v206 = *v204++;
              *v203++ = v206 - v202;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          int v207 = *(_DWORD *)(*(void *)a3 + 48);
          if (v207 >= 1)
          {
            uint64_t v208 = *(float **)(*(void *)a3 + 152);
            uint64_t v209 = *(float **)(*a2 + 152);
            int v210 = *(float **)(*a1 + 152);
            unsigned int v211 = v207 + 1;
            do
            {
              float v212 = *v210++;
              float v213 = v212;
              float v214 = *v209++;
              *v208++ = v213 - v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          int v186 = *(void **)a3;
          int v187 = (void *)*a1;
          int v188 = *(int **)*a1;
          uint64_t v189 = (v187[1] - (void)v188) >> 2;
          uint64_t v190 = (v189 - 1);
          if ((int)v190 >= -1) {
            int v191 = -1;
          }
          else {
            int v191 = v189 - 1;
          }
          int v192 = v191 + 1;
          int v193 = v189 + 1;
          while (1)
          {
            unsigned int v194 = v193 - 2;
            if (v193 - 2 < 0) {
              break;
            }
            --v193;
            if (*(void *)(v187[3] + 8 * v194) != *(void *)(v186[3] + 8 * v194)) {
              goto LABEL_193;
            }
          }
          int v193 = v192;
LABEL_193:
          unsigned int v261 = (void *)*a2;
          uint64_t v262 = *(int **)*a2;
          uint64_t v263 = (v261[1] - (void)v262) >> 2;
          uint64_t v264 = (v263 - 1);
          if ((int)v264 >= -1) {
            int v265 = -1;
          }
          else {
            int v265 = v263 - 1;
          }
          int v266 = v265 + 1;
          int v267 = v263 + 1;
          while (1)
          {
            unsigned int v268 = v267 - 2;
            if (v267 - 2 < 0) {
              break;
            }
            --v267;
            if (*(void *)(v261[3] + 8 * v268) != *(void *)(v186[3] + 8 * v268)) {
              goto LABEL_231;
            }
          }
          int v267 = v266;
LABEL_231:
          int v281 = v189 + 1;
          while (1)
          {
            unsigned int v282 = v281 - 2;
            if (v281 - 2 < 0) {
              break;
            }
            --v281;
            if (*(void *)(v187[3] + 8 * v282)) {
              goto LABEL_266;
            }
          }
          int v281 = v192;
LABEL_266:
          int v295 = v263 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)(v261[3] + 8 * v296)) {
              goto LABEL_485;
            }
          }
          int v295 = v266;
LABEL_485:
          unint64_t v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267) {
            int v418 = v267;
          }
          else {
            int v418 = v193;
          }
          if (v193 <= v295) {
            int v193 = v295;
          }
          if (v281 > v267) {
            int v267 = v281;
          }
          if (v417 > v267)
          {
            int v419 = 1;
          }
          else
          {
            int v267 = (uint64_t)(v186[1] - *v186) >> 2;
            int v419 = 4;
          }
          if (v417 > v193)
          {
            int v420 = 2;
          }
          else
          {
            int v193 = v267;
            int v420 = v419;
          }
          if (v417 > v418)
          {
            int v193 = v418;
            int v420 = 3;
          }
          uint64_t v1948 = v264;
          uint64_t v1966 = v190;
          if (!v193) {
            goto LABEL_514;
          }
          unint64_t v421 = *(void *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10) {
            goto LABEL_514;
          }
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                uint64_t v1763 = *v188;
                if (v1763)
                {
                  uint64_t v1764 = 0;
                  uint64_t v1765 = 0;
                  uint64_t v1766 = 0;
                  uint64_t v1767 = v187[19];
                  uint64_t v1768 = v261[19];
                  uint64_t v1769 = v186[19];
                  unint64_t v1770 = v188[1];
                  uint64_t v1771 = (uint64_t *)v187[3];
                  uint64_t v1772 = *v1771;
                  uint64_t v1773 = v1771[1];
                  uint64_t v1774 = (uint64_t *)v261[3];
                  uint64_t v1775 = *v1774;
                  uint64_t v1776 = v1774[1];
                  if (v1770 <= 1) {
                    uint64_t v1777 = 1;
                  }
                  else {
                    uint64_t v1777 = v188[1];
                  }
                  uint64_t v1778 = v1772 - v1773 * v1770;
                  uint64_t v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if (v1770)
                    {
                      uint64_t v1780 = 0;
                      uint64_t v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1782 = 0;
                          float v1783 = *(float *)(v1767 + 4 * v1766);
                          unsigned int v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 - *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1099 = *v188;
                if (v1099)
                {
                  uint64_t v1100 = 0;
                  uint64_t v1101 = 0;
                  uint64_t v1102 = v187[19];
                  uint64_t v1103 = v261[19];
                  uint64_t v1104 = v186[19];
                  uint64_t v1105 = *(void *)v187[3];
                  uint64_t v1106 = 4 * *(void *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1107 = 0;
                      float v1108 = *(float *)(v1102 + 4 * v1101);
                      unsigned int v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 - *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                unint64_t v1913 = v186[6];
                if (v1913)
                {
                  unint64_t v1942 = 0;
                  uint64_t v1845 = v261[19];
                  uint64_t v1860 = v187[19];
                  uint64_t v1785 = v186[19];
                  do
                  {
                    uint64_t v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1787 = v187[3];
                      uint64_t v1788 = v190;
                      int v1789 = v1942;
                      do
                      {
                        ldiv_t v1790 = ldiv(v1789, v188[v1788]);
                        int v1789 = v1790.quot;
                        v1786 += *(void *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    uint64_t v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      uint64_t v1792 = 0;
                      uint64_t v1793 = v261[3];
                      int v1794 = v1942;
                      do
                      {
                        ldiv_t v1795 = ldiv(v1794, v262[v1791]);
                        int v1794 = v1795.quot;
                        v1792 += *(void *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1796 = 0;
                      float v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      unsigned int v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 - *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                uint64_t v1799 = *v188;
                if (v1799)
                {
                  uint64_t v1800 = 0;
                  uint64_t v1801 = 0;
                  uint64_t v1802 = 0;
                  uint64_t v1803 = v187[19];
                  uint64_t v1804 = v261[19];
                  uint64_t v1805 = v186[19];
                  unint64_t v1806 = v188[1];
                  uint64_t v1807 = (uint64_t *)v187[3];
                  uint64_t v1808 = *v1807;
                  uint64_t v1809 = v1807[1];
                  BOOL v1810 = (uint64_t *)v261[3];
                  uint64_t v1811 = *v1810;
                  uint64_t v1812 = v1810[1];
                  if (v1806 <= 1) {
                    uint64_t v1813 = 1;
                  }
                  else {
                    uint64_t v1813 = v188[1];
                  }
                  uint64_t v1814 = v1808 - v1809 * v1806;
                  uint64_t v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if (v1806)
                    {
                      uint64_t v1816 = 0;
                      uint64_t v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1818 = 0;
                          float v1819 = *(float *)(v1804 + 4 * v1801);
                          unsigned int v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = *(float *)(v1817 + v1818) - v1819;
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1110 = *v188;
                if (v1110)
                {
                  uint64_t v1111 = 0;
                  uint64_t v1112 = 0;
                  uint64_t v1113 = v187[19];
                  uint64_t v1114 = v261[19];
                  uint64_t v1115 = v186[19];
                  uint64_t v1116 = *(void *)v261[3];
                  uint64_t v1117 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1118 = 0;
                      float v1119 = *(float *)(v1114 + 4 * v1112);
                      unsigned int v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = *(float *)(v1113 + v1118) - v1119;
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                unint64_t v1914 = v186[6];
                if (v1914)
                {
                  unint64_t v1943 = 0;
                  uint64_t v1846 = v261[19];
                  uint64_t v1861 = v187[19];
                  uint64_t v1821 = v186[19];
                  do
                  {
                    uint64_t v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1823 = v187[3];
                      uint64_t v1824 = v190;
                      int v1825 = v1943;
                      do
                      {
                        ldiv_t v1826 = ldiv(v1825, v188[v1824]);
                        int v1825 = v1826.quot;
                        v1822 += *(void *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    uint64_t v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      uint64_t v1828 = 0;
                      uint64_t v1829 = v261[3];
                      int v1830 = v1943;
                      do
                      {
                        ldiv_t v1831 = ldiv(v1830, v262[v1827]);
                        int v1830 = v1831.quot;
                        v1828 += *(void *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1832 = 0;
                      float v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      unsigned int v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = *(float *)(v1861 + 4 * (int)v1822 + v1832) - v1833;
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                uint64_t v1318 = *v188;
                if (v1318)
                {
                  uint64_t v1319 = 0;
                  uint64_t v1320 = 0;
                  uint64_t v1321 = 0;
                  uint64_t v1322 = v187[19];
                  uint64_t v1323 = v261[19];
                  uint64_t v1324 = v186[19];
                  unint64_t v1325 = v188[1];
                  uint64_t v1326 = (uint64_t *)v187[3];
                  uint64_t v1327 = *v1326;
                  uint64_t v1328 = v1326[1];
                  uint64_t v1329 = (uint64_t *)v261[3];
                  uint64_t v1330 = *v1329;
                  uint64_t v1331 = v1329[1];
                  if (v1325 <= 1) {
                    uint64_t v1332 = 1;
                  }
                  else {
                    uint64_t v1332 = v188[1];
                  }
                  uint64_t v1333 = v1327 - v1328 * v1325;
                  uint64_t v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if (v1325)
                    {
                      uint64_t v1335 = 0;
                      uint64_t v1336 = v1323 + 4 * v1320;
                      uint64_t v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1338 = 0;
                          unsigned int v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) - *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v422 = *v188;
                if (v422)
                {
                  uint64_t v423 = 0;
                  uint64_t v424 = v187[19];
                  uint64_t v425 = v261[19];
                  uint64_t v426 = v186[19];
                  uint64_t v427 = 4 * *(void *)v261[3];
                  uint64_t v428 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v429 = 0;
                      unsigned int v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) - *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                unint64_t v1900 = v186[6];
                if (v1900)
                {
                  unint64_t v1929 = 0;
                  uint64_t v1838 = v261[19];
                  uint64_t v1851 = v187[19];
                  uint64_t v1340 = v186[19];
                  do
                  {
                    uint64_t v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1342 = v187[3];
                      uint64_t v1343 = v190;
                      int v1344 = v1929;
                      do
                      {
                        ldiv_t v1345 = ldiv(v1344, v188[v1343]);
                        int v1344 = v1345.quot;
                        v1341 += *(void *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    uint64_t v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      uint64_t v1347 = 0;
                      uint64_t v1348 = v261[3];
                      int v1349 = v1929;
                      do
                      {
                        ldiv_t v1350 = ldiv(v1349, v262[v1346]);
                        int v1349 = v1350.quot;
                        v1347 += *(void *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1351 = 0;
                      unsigned int v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  - *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  uint64_t v431 = v186[6];
                  if (v431)
                  {
                    int v432 = (float *)v187[19];
                    int v433 = (float *)v261[19];
                    int v434 = (float *)v186[19];
                    uint64_t v435 = 4 * *(void *)v261[3];
                    uint64_t v436 = 4 * *(void *)v187[3];
                    do
                    {
                      *v434++ = *v432 - *v433;
                      int v433 = (float *)((char *)v433 + v435);
                      int v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  uint64_t v902 = *v188;
                  if (v902)
                  {
                    uint64_t v903 = 0;
                    uint64_t v904 = 0;
                    uint64_t v905 = 0;
                    uint64_t v906 = 0;
                    uint64_t v907 = v187[19];
                    uint64_t v908 = v261[19];
                    uint64_t v909 = v186[19];
                    unint64_t v910 = v188[1];
                    uint64_t v911 = (uint64_t *)v187[3];
                    uint64_t v912 = *v911;
                    uint64_t v913 = v911[1];
                    unint64_t v914 = (uint64_t *)v261[3];
                    uint64_t v915 = *v914;
                    uint64_t v916 = v914[1];
                    uint64_t v917 = v915 - v916 * v262[1];
                    if (v910 <= 1) {
                      uint64_t v918 = 1;
                    }
                    else {
                      uint64_t v918 = v188[1];
                    }
                    uint64_t v919 = v912 - v913 * v910;
                    do
                    {
                      if (v910)
                      {
                        uint64_t v920 = v904 + v918;
                        uint64_t v921 = (float *)(v909 + 4 * v904);
                        uint64_t v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) - *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        uint64_t v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  uint64_t v923 = *v188;
                  if (v923)
                  {
                    uint64_t v924 = 0;
                    uint64_t v925 = 0;
                    uint64_t v926 = 0;
                    uint64_t v927 = 0;
                    uint64_t v928 = v187[19];
                    uint64_t v929 = v261[19];
                    uint64_t v930 = v186[19];
                    unint64_t v931 = v188[1];
                    uint64_t v932 = (void *)v187[3];
                    uint64_t v933 = v932[1];
                    uint64_t v934 = (void *)v261[3];
                    uint64_t v935 = v934[1];
                    uint64_t v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1) {
                      uint64_t v937 = 1;
                    }
                    else {
                      uint64_t v937 = v188[1];
                    }
                    unint64_t v938 = *v932 - v933 * v931;
                    do
                    {
                      if (v931)
                      {
                        uint64_t v939 = 0;
                        unint64_t v940 = v188[2];
                        uint64_t v941 = v932[2];
                        uint64_t v942 = v934[2];
                        if (v940 <= 1) {
                          uint64_t v943 = 1;
                        }
                        else {
                          uint64_t v943 = v188[2];
                        }
                        uint64_t v944 = v935 - v942 * v262[2];
                        do
                        {
                          uint64_t v945 = v943;
                          if (v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) - *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  uint64_t v1971 = *v188;
                  if (v1971)
                  {
                    uint64_t v946 = 0;
                    uint64_t v947 = 0;
                    uint64_t v948 = 0;
                    uint64_t v949 = 0;
                    uint64_t v950 = v187[19];
                    uint64_t v951 = v261[19];
                    uint64_t v952 = v186[19];
                    unint64_t v953 = v188[1];
                    int v954 = (void *)v187[3];
                    int v955 = (void *)v261[3];
                    uint64_t v1893 = v955[1];
                    uint64_t v1922 = v954[1];
                    uint64_t v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1) {
                      uint64_t v956 = 1;
                    }
                    else {
                      uint64_t v956 = v188[1];
                    }
                    unint64_t v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if (v953)
                      {
                        uint64_t v958 = 0;
                        unint64_t v959 = v188[2];
                        uint64_t v960 = v954[2];
                        uint64_t v961 = v955[2];
                        if (v959 <= 1) {
                          uint64_t v962 = 1;
                        }
                        else {
                          uint64_t v962 = v188[2];
                        }
                        uint64_t v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if (v959)
                          {
                            uint64_t v964 = 0;
                            unint64_t v965 = v188[3];
                            uint64_t v966 = v954[3];
                            uint64_t v967 = v955[3];
                            if (v965 <= 1) {
                              uint64_t v968 = 1;
                            }
                            else {
                              uint64_t v968 = v188[3];
                            }
                            uint64_t v969 = v961 - v967 * v262[3];
                            do
                            {
                              uint64_t v970 = v968;
                              if (v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                - *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  uint64_t v890 = v186[6];
                  if (v890)
                  {
                    uint64_t v891 = 0;
                    uint64_t v1892 = v261[19];
                    uint64_t v1921 = v187[19];
                    uint64_t v1879 = v186[19];
                    do
                    {
                      uint64_t v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        uint64_t v893 = v187[3];
                        uint64_t v894 = v190;
                        int v895 = v891;
                        do
                        {
                          ldiv_t v896 = ldiv(v895, v188[v894]);
                          int v895 = v896.quot;
                          v892 += *(void *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      uint64_t v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        uint64_t v898 = 0;
                        uint64_t v899 = v261[3];
                        int v900 = v891;
                        do
                        {
                          ldiv_t v901 = ldiv(v900, v262[v897]);
                          int v900 = v901.quot;
                          v898 += *(void *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     - *(float *)(v1892 + 4 * (int)v898);
                      uint64_t v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}