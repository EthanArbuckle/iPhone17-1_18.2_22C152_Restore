void mlx_linalg_cholesky()
{
  operator new();
}

void sub_256EE789C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linalg_inv()
{
}

void sub_256EE796C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linalg_norm_p()
{
}

void sub_256EE7AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linalg_norm_ord()
{
}

void sub_256EE7C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linalg_norm()
{
}

void sub_256EE7E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linalg_qr()
{
}

void sub_256EE7F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)(v10 + 16));
  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x25A2B1780](v9, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_linalg_svd()
{
}

void sub_256EE7FF0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::linalg::at_least_float(unsigned int *a1)
{
  if (mlx::core::issubdtype(a1, &mlx::core::inexact)) {
    return *(void *)a1;
  }
  return mlx::core::promote_types((int *)a1, (int *)&mlx::core::float32);
}

void mlx::core::linalg::norm(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(void *)(a2 + 8) - *(void *)a2 >= 9uLL)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[linalg::norm] Received too many axes for norm.");
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    mlx::core::linalg::l2_norm(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    mlx::core::flatten(a1, a4, a5, (uint64_t)v15);
    uint64_t v9 = operator new(4uLL);
    *uint64_t v9 = 0;
    __p = v9;
    v12 = v9 + 1;
    v13 = v9 + 1;
    char v14 = 1;
    mlx::core::linalg::norm(v15, &__p, a3, a4, a5);
    if (v14 && __p)
    {
      v12 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v15);
  }
}

void sub_256EE819C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::linalg::l2_norm(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *(void *)v17 = *(void *)(*a1 + 56);
  if (mlx::core::issubdtype(v17, &mlx::core::complexfloating))
  {
    mlx::core::abs(a1, a4, a5, v15);
    mlx::core::abs(a1, a4, a5, v14);
    mlx::core::operator*(v15, v14, v12, v16);
    mlx::core::sum((uint64_t)v16, a2, a3, a4, a5, (mlx::core::array *)v17);
    mlx::core::sqrt(v17, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v17);
    mlx::core::array::~array((mlx::core::array *)v16);
    mlx::core::array::~array((mlx::core::array *)v14);
    v13 = (mlx::core::array *)v15;
  }
  else
  {
    mlx::core::square(a1, a4, a5, v16);
    mlx::core::sum((uint64_t)v16, a2, a3, a4, a5, (mlx::core::array *)v17);
    mlx::core::sqrt(v17, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v17);
    v13 = (mlx::core::array *)v16;
  }
  mlx::core::array::~array(v13);
}

void sub_256EE8328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::linalg::norm(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>, double a7@<D0>)
{
  memset(&v19, 0, sizeof(v19));
  if (*(unsigned char *)(a2 + 24))
  {
    if (&v19 == (std::vector<int> *)a2)
    {
      std::vector<int>::pointer begin = 0;
      std::vector<int>::pointer end = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v19, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      std::vector<int>::pointer begin = v19.__begin_;
      std::vector<int>::pointer end = v19.__end_;
    }
  }
  else
  {
    std::vector<int>::resize(&v19, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
    std::vector<int>::pointer begin = v19.__begin_;
    std::vector<int>::pointer end = v19.__end_;
    if (v19.__begin_ == v19.__end_)
    {
      std::vector<int>::pointer end = v19.__begin_;
    }
    else
    {
      int v15 = 0;
      std::vector<int>::pointer v16 = v19.__begin_;
      do
        *v16++ = v15++;
      while (v16 != end);
    }
  }
  uint64_t v17 = end - begin;
  if (v17 == 2)
  {
    mlx::core::linalg::matrix_norm(a1, &v19.__begin_, a3, a4, a5, a6, a7);
  }
  else
  {
    if (v17 != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "[linalg::norm] Received too many axes for norm.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    mlx::core::linalg::vector_norm(a1, (uint64_t)&v19, a3, a4, a5, a6, a7);
  }
  if (v19.__begin_)
  {
    v19.__end_ = v19.__begin_;
    operator delete(v19.__begin_);
  }
}

void sub_256EE852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void mlx::core::linalg::vector_norm(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>, double a7@<D0>)
{
  v25[0] = *(uint64_t **)(*a1 + 56);
  uint64_t v14 = mlx::core::linalg::at_least_float((unsigned int *)v25);
  if (a7 == 0.0)
  {
    uint64_t v15 = mlx::core::TypeToDtype<int>::operator mlx::core::Dtype();
    mlx::core::array::array<int>(v24, 0, v15);
    mlx::core::not_equal(a1, v24, a4, a5, v25);
    mlx::core::sum((uint64_t)v25, a2, a3, a4, a5, (mlx::core::array *)v26);
    mlx::core::astype(v26, v14, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v26);
    mlx::core::array::~array((mlx::core::array *)v25);
    std::vector<int>::pointer v16 = (mlx::core::array *)v24;
LABEL_6:
    mlx::core::array::~array(v16);
    return;
  }
  if (a7 == 1.0)
  {
    mlx::core::abs(a1, a4, a5, v25);
    mlx::core::sum((uint64_t)v25, a2, a3, a4, a5, (mlx::core::array *)v23);
    mlx::core::astype(v23, v14, a4, a5, a6);
    uint64_t v17 = (uint64_t **)v23;
LABEL_5:
    mlx::core::array::~array((mlx::core::array *)v17);
    std::vector<int>::pointer v16 = (mlx::core::array *)v25;
    goto LABEL_6;
  }
  if (a7 != 2.0)
  {
    if (a7 == INFINITY)
    {
      mlx::core::abs(a1, a4, a5, v25);
      mlx::core::max(v25, a2, a3, a4, a5, v22);
      mlx::core::astype(v22, v14, a4, a5, a6);
      uint64_t v17 = v22;
    }
    else
    {
      if (a7 != -INFINITY)
      {
        mlx::core::abs(a1, a4, a5, v20);
        mlx::core::array::array<double>(v19, v14, a7);
        mlx::core::power(v20, (const void ***)v19, a4, a5, v24);
        mlx::core::sum((uint64_t)v24, a2, a3, a4, a5, (mlx::core::array *)v25);
        mlx::core::array::array<double>(v18, v14, 1.0 / a7);
        mlx::core::power((const void ***)v25, (const void ***)v18, a4, a5, a6);
        mlx::core::array::~array((mlx::core::array *)v18);
        mlx::core::array::~array((mlx::core::array *)v25);
        mlx::core::array::~array((mlx::core::array *)v24);
        mlx::core::array::~array((mlx::core::array *)v19);
        std::vector<int>::pointer v16 = (mlx::core::array *)v20;
        goto LABEL_6;
      }
      mlx::core::abs(a1, a4, a5, v25);
      mlx::core::min(v25, a2, a3, a4, a5, v21);
      mlx::core::astype(v21, v14, a4, a5, a6);
      uint64_t v17 = v21;
    }
    goto LABEL_5;
  }
  mlx::core::linalg::l2_norm(a1, a2, a3, a4, a5, a6);
}

void sub_256EE8880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
}

void mlx::core::linalg::matrix_norm(void *a1@<X0>, int **a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>, double a7@<D0>)
{
  v27 = *(uint64_t **)(*a1 + 56);
  uint64_t v14 = mlx::core::linalg::at_least_float((unsigned int *)&v27);
  uint64_t v15 = *a2;
  int v16 = **a2;
  int v17 = v15[1];
  if (a7 == -1.0)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v16, a3, a4, a5, (mlx::core::array *)&v27);
    int v18 = (v17 > v16) & ~a3;
    if (v17 <= 0) {
      int v18 = 0;
    }
    mlx::core::min(&v27, v17 - v18, a3, a4, a5, v32);
    mlx::core::astype(v32, v14, a4, a5, a6);
    std::vector<int> v19 = v32;
  }
  else if (a7 == 1.0)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v16, a3, a4, a5, (mlx::core::array *)&v27);
    int v20 = (v17 > v16) & ~a3;
    if (v17 <= 0) {
      int v20 = 0;
    }
    mlx::core::max(&v27, v17 - v20, a3, a4, a5, v31);
    mlx::core::astype(v31, v14, a4, a5, a6);
    std::vector<int> v19 = v31;
  }
  else if (a7 == INFINITY)
  {
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v17, a3, a4, a5, (mlx::core::array *)&v27);
    int v21 = (v16 > v17) & ~a3;
    if (v16 <= 0) {
      int v21 = 0;
    }
    mlx::core::max(&v27, v16 - v21, a3, a4, a5, v30);
    mlx::core::astype(v30, v14, a4, a5, a6);
    std::vector<int> v19 = v30;
  }
  else
  {
    if (a7 != -INFINITY)
    {
      if (a7 != 2.0 && a7 != -2.0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"[linalg::norm] Invalid ord ", 27);
        v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for matrix norm.", 17);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v28, &v26);
        std::logic_error::logic_error(exception, &v26);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      v25 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x25A2B1470](v25, "[linalg::norm] Singular value norms are not implemented.");
      __cxa_throw(v25, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    mlx::core::abs(a1, a4, a5, &v26);
    mlx::core::sum((uint64_t)&v26, v17, a3, a4, a5, (mlx::core::array *)&v27);
    int v22 = (v16 > v17) & ~a3;
    if (v16 <= 0) {
      int v22 = 0;
    }
    mlx::core::min(&v27, v16 - v22, a3, a4, a5, v29);
    mlx::core::astype(v29, v14, a4, a5, a6);
    std::vector<int> v19 = v29;
  }
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)&v27);
  mlx::core::array::~array((mlx::core::array *)&v26);
}

void sub_256EE8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::linalg::norm(void *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  memset(&v28, 0, sizeof(v28));
  if (*(unsigned char *)(a3 + 24))
  {
    if (&v28 == (std::vector<int> *)a3)
    {
      std::vector<int>::pointer begin = 0;
      std::vector<int>::pointer end = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      std::vector<int>::pointer begin = v28.__begin_;
      std::vector<int>::pointer end = v28.__end_;
    }
  }
  else
  {
    std::vector<int>::resize(&v28, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
    std::vector<int>::pointer begin = v28.__begin_;
    std::vector<int>::pointer end = v28.__end_;
    if (v28.__begin_ == v28.__end_)
    {
      std::vector<int>::pointer end = v28.__begin_;
    }
    else
    {
      int v15 = 0;
      std::vector<int>::pointer v16 = v28.__begin_;
      do
        *v16++ = v15++;
      while (v16 != end);
    }
  }
  if ((char *)end - (char *)begin != 8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[linalg::norm] Norm '", 21);
    int v18 = *((char *)a2 + 23);
    if (v18 >= 0) {
      uint64_t v19 = (uint64_t)a2;
    }
    else {
      uint64_t v19 = (uint64_t)*a2;
    }
    if (v18 >= 0) {
      uint64_t v20 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v20 = (uint64_t)a2[1];
    }
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' only supported for matrices,", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" but received ", 14);
    v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" axis/axes.", 11);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27, &v25);
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::linalg::matrix_norm(a1, a2, (uint64_t)&v28, a4, a5, a6, a7);
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void sub_256EE8FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      uint64_t v19 = *(void **)(v17 - 96);
      if (v19)
      {
        *(void *)(v17 - 88) = v19;
        operator delete(v19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void mlx::core::linalg::matrix_norm(void *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    int v15 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    int v15 = a2[1];
  }
  if (v15 == (const void *)3)
  {
    if (v14 >= 0) {
      int v18 = a2;
    }
    else {
      int v18 = *a2;
    }
    if (memcmp(v18, "fro", 3uLL))
    {
LABEL_10:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "nuc"))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x25A2B1470](exception, "[linalg::norm] Nuclear norm not yet implemented.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[linalg::norm] Invalid ord value '", 34);
      int v20 = *((char *)a2 + 23);
      if (v20 >= 0) {
        int v21 = a2;
      }
      else {
        int v21 = (void *)*a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v22 = (uint64_t)a2[1];
      }
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"' for matrix norm.", 18);
      v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27, &v25);
      std::logic_error::logic_error(v24, &v25);
      v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v24, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
  }
  else
  {
    if (v15 != (const void *)1) {
      goto LABEL_10;
    }
    int v16 = v14 >= 0 ? a2 : (const void **)*a2;
    if (*(unsigned char *)v16 != 102) {
      goto LABEL_10;
    }
  }
  mlx::core::linalg::l2_norm(a1, a3, a4, a5, a6, a7);
}

void sub_256EE9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::linalg::qr(char ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v55[27] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  if (*((_DWORD *)*a1 + 14) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v51);
    std::vector<int> v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"[linalg::qr] Arrays must type float32. Received array ", 54);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"with type ", 10);
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    v30 = mlx::core::operator<<(v29, &v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v52, &v47);
    std::logic_error::logic_error(exception, &v47);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v9 = *v6;
  uint64_t v10 = (uint64_t)v6[1];
  uint64_t v11 = v10 - (void)*v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"[linalg::qr] Arrays must have >= 2 dimensions. Received array with ", 67);
    v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" dimensions.", 12);
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v52, &v47);
    std::logic_error::logic_error(v33, &v47);
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v33, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (*(_DWORD *)&v9[v11 - 4] != *(_DWORD *)&v9[v11 - 8])
  {
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v34, "[linalg::qr] Support for non-square matrices NYI.");
    __cxa_throw(v34, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  v51 = 0;
  v52[0] = 0;
  v52[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, v9, v10, v11 >> 2);
  v12 = (const void **)*a1;
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v53 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *v12, (uint64_t)v12[1], ((unsigned char *)v12[1] - (unsigned char *)*v12) >> 2);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __p = &v44;
  LOBYTE(v42) = 0;
  v44 = operator new(0x30uLL);
  v45 = v44;
  v46 = v44 + 6;
  v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v46, (uint64_t)&v51, (uint64_t)v55, v44);
  v13 = (*a1)[7];
  int v14 = operator new(0x10uLL);
  v42 = v14 + 2;
  v43 = v14 + 2;
  *int v14 = v13;
  v14[1] = v13;
  __p = v14;
  int v15 = mlx::core::to_stream(a2, a3);
  LODWORD(v13) = v16;
  int v17 = (std::__shared_weak_count *)operator new(0x30uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633040;
  LODWORD(v17[1].__shared_weak_owners_) = v13;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_2706376A0;
  v17[1].__shared_owners_ = (uint64_t)v15;
  v39 = v17 + 1;
  v40 = v17;
  int v18 = *a1;
  uint64_t v19 = a1[1];
  v35[0] = *a1;
  v35[1] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    int v18 = *a1;
  }
  mlx::core::astype(v35, (uint64_t)v18[7], a2, a3, v50);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v48 = (void **)&v36;
  char v49 = 0;
  int v20 = operator new(0x10uLL);
  v36 = v20;
  v37 = v20;
  v38 = v20 + 2;
  uint64_t v21 = v50[1];
  *int v20 = v50[0];
  v20[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  v37 = v20 + 2;
  mlx::core::array::make_arrays((uint64_t *)&v44, &__p, &v39, &v36, (uint64_t *)&v47);
  v48 = (void **)&v36;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v48);
  mlx::core::array::~array((mlx::core::array *)v50);
  mlx::core::array::~array((mlx::core::array *)v35);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  __p = &v44;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    v23 = (void *)v54[i - 1];
    if (v23)
    {
      v54[i] = v23;
      operator delete(v23);
    }
  }
  std::string::size_type v24 = v47.__r_.__value_.__r.__words[0];
  uint64_t v25 = *(void *)(v47.__r_.__value_.__r.__words[0] + 8);
  *a4 = *(void *)v47.__r_.__value_.__l.__data_;
  a4[1] = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(void *)(v24 + 16);
  uint64_t v26 = *(void *)(v24 + 24);
  a4[2] = v27;
  a4[3] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  v51 = &v47;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_256EE970C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::linalg::svd(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v66[24] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  if (*(_DWORD *)(*a1 + 56) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v61);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"[linalg::svd] Input array must have type float32. Received array ", 65);
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"with type ", 10);
    v56.__r_.__value_.__r.__words[0] = *(void *)(*a1 + 56);
    v35 = mlx::core::operator<<(v34, &v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v62, &v56);
    std::logic_error::logic_error(exception, &v56);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v9 = *(_DWORD **)v6;
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v11 = v10 - *(void *)v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"[linalg::svd] Input array must have >= 2 dimensions. Received array with ", 73);
    v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
    v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v62, &v56);
    std::logic_error::logic_error(v38, &v56);
    v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v38, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v12 = (v11 >> 2) - 2;
  int v13 = v9[v12];
  uint64_t v14 = (v11 >> 2) - 1;
  int v15 = v9[v14];
  memset(&v56, 0, sizeof(v56));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, v9, v10, v11 >> 2);
  std::string::size_type v16 = v56.__r_.__value_.__r.__words[0];
  *(_DWORD *)(v56.__r_.__value_.__r.__words[0] + 4 * v12) = v13;
  *(_DWORD *)(v16 + 4 * v14) = v13;
  uint64_t v17 = *a1;
  v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 2);
  v54 -= 4;
  if (v15 >= v13) {
    int v18 = v13;
  }
  else {
    int v18 = v15;
  }
  *((_DWORD *)v53 + v12) = v18;
  uint64_t v19 = *a1;
  v51 = 0;
  uint64_t v52 = 0;
  v50 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 2);
  int v20 = v50;
  *((_DWORD *)v50 + v12) = v15;
  v20[v14] = v15;
  uint64_t v61 = 0;
  v62[0] = 0;
  v62[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 2);
  memset(v63, 0, sizeof(v63));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v63, v53, (uint64_t)v54, (v54 - (unsigned char *)v53) >> 2);
  uint64_t v64 = 0;
  v65[0] = 0;
  v65[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, v50, (uint64_t)v51, (v51 - (unsigned char *)v50) >> 2);
  std::string v47 = 0;
  v48 = 0;
  char v49 = 0;
  __p = &v47;
  LOBYTE(v45) = 0;
  std::string v47 = operator new(0x48uLL);
  v48 = v47;
  char v49 = v47 + 9;
  v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v49, (uint64_t)&v61, (uint64_t)v66, v47);
  uint64_t v21 = *(void *)(*a1 + 56);
  uint64_t v22 = operator new(0x18uLL);
  v45 = v22 + 3;
  v46 = v22 + 3;
  *uint64_t v22 = v21;
  v22[1] = v21;
  v22[2] = v21;
  __p = v22;
  v23 = mlx::core::to_stream(a2, a3);
  int v25 = v24;
  uint64_t v26 = (std::__shared_weak_count *)operator new(0x30uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633090;
  LODWORD(v26[1].__shared_weak_owners_) = v25;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270637718;
  v26[1].__shared_owners_ = (uint64_t)v23;
  v42 = v26 + 1;
  v43 = v26;
  uint64_t v28 = *a1;
  uint64_t v27 = a1[1];
  uint64_t v59 = *a1;
  uint64_t v60 = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v57 = (void **)&v39;
  char v58 = 0;
  v29 = operator new(0x10uLL);
  v39 = v29;
  v40 = v29;
  v41 = v29 + 2;
  uint64_t v30 = v60;
  void *v29 = v28;
  v29[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  v40 = v29 + 2;
  mlx::core::array::make_arrays((uint64_t *)&v47, &__p, &v42, &v39, a4);
  v57 = (void **)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v57);
  mlx::core::array::~array((mlx::core::array *)&v59);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  __p = &v47;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    v32 = (void *)v65[i - 1];
    if (v32)
    {
      v65[i] = v32;
      operator delete(v32);
    }
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }
}

void sub_256EE9D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void mlx::core::linalg::inv(std::string::size_type *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char **)*a1;
  if (*(_DWORD *)(*a1 + 56) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"[linalg::inv] Arrays must type float32. Received array ", 55);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"with type ", 10);
    v33.__r_.__value_.__r.__words[0] = *(void *)(*a1 + 56);
    uint64_t v22 = mlx::core::operator<<(v21, &v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, &v33);
    std::logic_error::logic_error(exception, &v33);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v9 = *v6;
  uint64_t v10 = (uint64_t)v6[1];
  uint64_t v11 = v10 - (void)*v6;
  if ((unint64_t)v11 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"[linalg::inv] Arrays must have >= 2 dimensions. Received array with ", 68);
    int v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" dimensions.", 12);
    int v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, &v33);
    std::logic_error::logic_error(v25, &v33);
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v25, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (*(_DWORD *)&v9[v11 - 4] != *(_DWORD *)&v9[v11 - 8])
  {
    uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v26, "[linalg::inv] Inverses are only defined for square matrices.");
    __cxa_throw(v26, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v9, v10, v11 >> 2);
  uint64_t v12 = *(void *)(*a1 + 56);
  int v13 = mlx::core::to_stream(a2, a3);
  int v15 = v14;
  std::string::size_type v16 = operator new(0x30uLL);
  v16[1] = 0;
  void v16[2] = 0;
  *std::string::size_type v16 = &unk_2706330E0;
  *((_DWORD *)v16 + 10) = v15;
  v16[3] = &unk_270637790;
  v16[4] = v13;
  *(void *)&long long v29 = v16 + 3;
  *((void *)&v29 + 1) = v16;
  std::string::size_type v18 = *a1;
  std::string::size_type v17 = a1[1];
  v33.__r_.__value_.__r.__words[0] = v18;
  v33.__r_.__value_.__l.__size_ = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  long long v27 = 0uLL;
  uint64_t v28 = 0;
  v31 = (void **)&v27;
  v32[0] = 0;
  uint64_t v19 = operator new(0x10uLL);
  *(void *)&long long v27 = v19;
  uint64_t v28 = v19 + 2;
  *uint64_t v19 = v18;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v27 + 1) = v19 + 2;
  mlx::core::array::array(a4, (long long *)__p, v12, &v29, &v27);
  v31 = (void **)&v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v31);
  mlx::core::array::~array((mlx::core::array *)&v33);
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EEA218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 57) < 0)
  {
    operator delete(*(void **)(v19 - 80));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::linalg::cholesky(std::string::size_type *a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v7 = (char **)*a1;
  if (*(_DWORD *)(*a1 + 56) != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"[linalg::cholesky] Arrays must type float32. Received array ", 60);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"with type ", 10);
    v34.__r_.__value_.__r.__words[0] = *(void *)(*a1 + 56);
    v23 = mlx::core::operator<<(v22, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, &v34);
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v10 = *v7;
  uint64_t v11 = (uint64_t)v7[1];
  uint64_t v12 = v11 - (void)*v7;
  if ((unint64_t)v12 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"[linalg::cholesky] Arrays must have >= 2 dimensions. Received array with ", 73);
    int v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" dimensions.", 12);
    uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, &v34);
    std::logic_error::logic_error(v26, &v34);
    v26->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v26, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (*(_DWORD *)&v10[v12 - 4] != *(_DWORD *)&v10[v12 - 8])
  {
    long long v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v27, "[linalg::cholesky] Cholesky decomposition is only defined for square matrices.");
    __cxa_throw(v27, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v10, v11, v12 >> 2);
  uint64_t v14 = *(void *)(*a1 + 56);
  int v15 = mlx::core::to_stream(a3, a4);
  LODWORD(a4) = v16;
  std::string::size_type v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *std::string::size_type v17 = &unk_270633130;
  *((_DWORD *)v17 + 10) = a4;
  v17[3] = &unk_270637818;
  unsigned int v17[4] = v15;
  *((unsigned char *)v17 + 44) = a2;
  *(void *)&long long v30 = v17 + 3;
  *((void *)&v30 + 1) = v17;
  std::string::size_type v19 = *a1;
  std::string::size_type v18 = a1[1];
  v34.__r_.__value_.__r.__words[0] = v19;
  v34.__r_.__value_.__l.__size_ = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  long long v28 = 0uLL;
  long long v29 = 0;
  v32 = (void **)&v28;
  v33[0] = 0;
  int v20 = operator new(0x10uLL);
  *(void *)&long long v28 = v20;
  long long v29 = v20 + 2;
  *int v20 = v19;
  v20[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v28 + 1) = v20 + 2;
  mlx::core::array::array(a5, (long long *)__p, v14, &v30, &v28);
  v32 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)&v34);
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EEA654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 73) < 0)
  {
    operator delete(*(void **)(v19 - 96));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[4 * v11];
    int v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    std::string::size_type v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  mlx::core *v12 = &v9[v17];
  return result;
}

int ***mlx::core::array::array<int>(int ***a1, int a2, uint64_t a3)
{
  uint64_t v9 = a3;
  int v8 = a2;
  __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<int *>(a1, &v8);
  return a1;
}

void sub_256EEA9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<int *>(int ***a1, int *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v28[0] = &unk_27062AEC8;
  v28[1] = mlx::core::allocator::free;
  v28[3] = v28;
  mlx::core::array::set_data(a1, v4, (uint64_t)v28);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v28);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      int v8 = v6[6];
      if (v8)
      {
        uint64_t v9 = (BOOL *)v6[19];
        uint64_t v10 = 4 * (void)v8;
        do
        {
          int v11 = *a2++;
          *v9++ = v11 != 0;
          v10 -= 4;
        }
        while (v10);
      }
      break;
    case 1:
      uint64_t v12 = v6[6];
      if (v12)
      {
        unint64_t v13 = v6[19];
        uint64_t v14 = 4 * (void)v12;
        do
        {
          int v15 = *a2++;
          *(unsigned char *)unint64_t v13 = v15;
          unint64_t v13 = (int *)((char *)v13 + 1);
          v14 -= 4;
        }
        while (v14);
      }
      break;
    case 2:
    case 4:
      uint64_t v7 = v6[6];
      if (v7) {
        memmove(v6[19], a2, 4 * (void)v7);
      }
      break;
    case 3:
      int v16 = v6[6];
      if (v16)
      {
        size_t v17 = v6[19];
        uint64_t v18 = 4 * (void)v16;
        do
        {
          int v19 = *a2++;
          *(unsigned char *)size_t v17 = v19;
          size_t v17 = (int *)((char *)v17 + 1);
          v18 -= 4;
        }
        while (v18);
      }
      break;
    case 5:
      int v20 = v6[6];
      if (v20)
      {
        uint64_t v21 = v6[19];
        uint64_t v22 = 4 * (void)v20;
        do
        {
          uint64_t v23 = *a2++;
          *(void *)uint64_t v21 = v23;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
      }
      break;
    case 6:
      int v24 = v6[6];
      if (v24)
      {
        int v25 = (float *)v6[19];
        uint64_t v26 = 4 * (void)v24;
        do
        {
          int v27 = *a2++;
          float result = (float)v27;
          *v25++ = (float)v27;
          v26 -= 4;
        }
        while (v26);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EEAB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void std::__shared_ptr_emplace<mlx::core::QRF>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::QRF>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::QRF>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::SVD>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::SVD>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::SVD>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Inverse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706330E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Inverse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706330E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Inverse>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Cholesky>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cholesky>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cholesky>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void mlx_stream_::tostring(mlx_stream_ *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v3);
  mlx::core::operator<<(&v3, (uint64_t)this + 16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4, __p);
  operator new();
}

void sub_256EEB058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlx_stream_new()
{
}

void mlx_stream_new_on_device()
{
}

void sub_256EEB198(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

BOOL mlx_stream_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

void mlx_stream_get_device()
{
}

void mlx_synchronize(uint64_t a1)
{
}

void mlx_default_stream()
{
}

void sub_256EEB2B0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_set_default_stream(uint64_t a1)
{
  return a1;
}

void mlx_cpu_stream()
{
}

void sub_256EEB370(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void mlx_gpu_stream()
{
}

void sub_256EEB400(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void mlx_stream_::~mlx_stream_(mlx_stream_ *this)
{
}

float mlx::core::erfinv(mlx::core *this, float a2)
{
  float v3 = logf((float)(a2 * (float)(0.0 - a2)) + 1.0);
  if (fabsf(v3) <= 6.125)
  {
    float v4 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 * 0.0000000054388) + 0.00000014329) * v3) + 0.0000012277)
                                                                                               * v3)
                                                                                       + 0.00000011296)
                                                                               * v3)
                                                                       + -0.000056153)
                                                               * v3)
                                                       + -0.0001477)
                                               * v3)
                                       + 0.0023147)
                               * v3)
                       + 0.011539)
               * v3)
       + -0.23202;
    float v5 = 0.88623;
  }
  else
  {
    float v4 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 * 3.037e-10) + 0.000000029324)
                                                                                               * v3)
                                                                                       + 0.0000012215)
                                                                               * v3)
                                                                       + 0.000028411)
                                                               * v3)
                                                       + 0.00039355)
                                               * v3)
                                       + 0.003027)
                               * v3)
                       + 0.0048319)
               * v3)
       + -0.26465;
    float v5 = 0.84002;
  }
  return (float)(v5 + (float)(v4 * v3)) * a2;
}

void mlx::core::cholesky_impl(mlx::core *this, int ***a2, mlx::core::array *a3, float a4)
{
  int v4 = (int)a3;
  if (a3) {
    char v7 = 76;
  }
  else {
    char v7 = 85;
  }
  char v25 = v7;
  if ((*(unsigned char *)(*(void *)this + 168) & 2) != 0) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  mlx::core::copy(this, a2, v8, a4);
  uint64_t v9 = *(void *)(*(void *)this + 8);
  if (v9 == **(void **)this) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = *(unsigned int *)(v9 - 4);
  unint64_t v11 = *(void *)(*(void *)this + 48);
  unint64_t v12 = (v10 * v10);
  if (v11 >= v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v11 / v12;
    int v15 = (*a2)[19];
    uint64_t v16 = 4 * (int)v10;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v23 = v14;
    int v24 = v10;
    uint64_t v17 = 4 * v10;
    while (1)
    {
      char v28 = v25;
      int v27 = v10;
      int v26 = 0;
      spotrf_NEWLAPACK();
      if ((int)v10 >= 1) {
        break;
      }
LABEL_21:
      ++v13;
      LODWORD(v10) = v24;
      if (v13 == v23) {
        return;
      }
    }
    size_t v18 = 0;
    int v19 = v15 + 1;
    uint64_t v20 = -4;
    while (1)
    {
      if (v4)
      {
        if (v18)
        {
          uint64_t v21 = v15;
          size_t v22 = v18;
LABEL_19:
          bzero(v21, v22);
        }
      }
      else if (v16 + v20 >= 1)
      {
        size_t v22 = 4 * (((unint64_t)(v16 + v20) >> 2) - (v16 - 4 != v18)) + 4;
        uint64_t v21 = v19;
        goto LABEL_19;
      }
      v20 -= 4;
      v18 += 4;
      int v19 = (int *)((char *)v19 + v16 + 4);
      int v15 = (int *)((char *)v15 + v16);
      if (v17 == v18) {
        goto LABEL_21;
      }
    }
  }
}

void sub_256EEB764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void mlx::core::Cholesky::eval(uint64_t a1, mlx::core **a2, int ***a3, float a4)
{
  if (*(_DWORD *)(*(void *)*a2 + 56) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[Cholesky::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v4 = (mlx::core::array *)*(unsigned __int8 *)(a1 + 20);
  float v5 = *a2;
  mlx::core::cholesky_impl(v5, a3, v4, a4);
}

void sub_256EEB834(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::eval(uint64_t a1, const void ****a2, int ***a3)
{
  v382[4] = *MEMORY[0x263EF8340];
  float v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArgReduce::eval();
  }
  uint64_t v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]));
  v382[0] = &unk_27062AEC8;
  v382[1] = mlx::core::allocator::free;
  v382[3] = v382;
  mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v382);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v382);
  char v7 = *v3;
  switch(*((_DWORD *)*v3 + 14))
  {
    case 0:
      int v8 = *(_DWORD *)(a1 + 20);
      uint64_t v9 = *(int *)(a1 + 24);
      if (v8 == 1)
      {
        int v266 = *((_DWORD *)*v7 + v9);
        v267 = v7[3];
        uint64_t v268 = (uint64_t)v7[4];
        uint64_t v269 = v267[v9];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v267, v268, (v268 - (uint64_t)v267) >> 3);
        v270 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v270, (uint64_t)v270[1], ((unsigned char *)v270[1] - (unsigned char *)*v270) >> 2);
        v271 = (char *)__p + 8 * v9;
        int64_t v272 = v380 - (v271 + 8);
        if (v380 != v271 + 8) {
          memmove((char *)__p + 8 * v9, v271 + 8, v380 - (v271 + 8));
        }
        v380 = &v271[v272];
        uint64_t v17 = (char *)v376;
        v273 = &v376[v9];
        v274 = (char *)((char *)v377 - (char *)(v273 + 1));
        if (v377 != v273 + 1)
        {
          memmove(v273, v273 + 1, (char *)v377 - (char *)(v273 + 1));
          uint64_t v17 = (char *)v376;
        }
        v275 = *a3;
        v276 = (*a3)[6];
        if (v276)
        {
          unint64_t v277 = 0;
          uint64_t v278 = ((unint64_t)(&v274[(void)v273] - v17) >> 2) - 1;
          v279 = __p;
          v372 = (*v3)[19];
          v280 = v275[19];
          do
          {
            uint64_t v281 = 0;
            if ((v278 & 0x80000000) == 0)
            {
              uint64_t v282 = v278;
              int quot = v277;
              do
              {
                ldiv_t v284 = ldiv(quot, *(int *)&v17[4 * v282]);
                int quot = v284.quot;
                v281 += v279[v282--] * v284.rem;
              }
              while (v282 != -1);
            }
            if (v266)
            {
              int v285 = 0;
              int v286 = 0;
              v287 = &v372[v281];
              char v288 = v372[v281];
              do
              {
                if (v288 == 0 && *v287 != 0)
                {
                  int v286 = v285;
                  char v288 = 1;
                }
                ++v285;
                v287 += v269;
              }
              while (v266 != v285);
            }
            else
            {
              int v286 = 0;
            }
            v280[v277] = v286;
            unint64_t v277 = (v277 + 1);
          }
          while ((unint64_t)v276 > v277);
        }
        goto LABEL_290;
      }
      if (!v8)
      {
        int v10 = *((_DWORD *)*v7 + v9);
        unint64_t v11 = v7[3];
        uint64_t v12 = (uint64_t)v7[4];
        uint64_t v13 = v11[v9];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 3);
        unint64_t v14 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v14, (uint64_t)v14[1], ((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
        int v15 = (char *)__p + 8 * v9;
        int64_t v16 = v380 - (v15 + 8);
        if (v380 != v15 + 8) {
          memmove((char *)__p + 8 * v9, v15 + 8, v380 - (v15 + 8));
        }
        v380 = &v15[v16];
        uint64_t v17 = (char *)v376;
        size_t v18 = &v376[v9];
        int v19 = (char *)((char *)v377 - (char *)(v18 + 1));
        if (v377 != v18 + 1)
        {
          memmove(v18, v18 + 1, (char *)v377 - (char *)(v18 + 1));
          uint64_t v17 = (char *)v376;
        }
        int v20 = *a3;
        uint64_t v21 = (*a3)[6];
        if (v21)
        {
          unint64_t v22 = 0;
          uint64_t v23 = ((unint64_t)(&v19[(void)v18] - v17) >> 2) - 1;
          int v24 = __p;
          v362 = (*v3)[19];
          char v25 = v20[19];
          do
          {
            uint64_t v26 = 0;
            if ((v23 & 0x80000000) == 0)
            {
              uint64_t v27 = v23;
              int v28 = v22;
              do
              {
                ldiv_t v29 = ldiv(v28, *(int *)&v17[4 * v27]);
                int v28 = v29.quot;
                v26 += v24[v27--] * v29.rem;
              }
              while (v27 != -1);
            }
            if (v10)
            {
              int v30 = 0;
              int v31 = 0;
              v32 = &v362[v26];
              unsigned __int8 v33 = v362[v26];
              do
              {
                unsigned int v34 = *v32;
                if (v33 > v34) {
                  int v31 = v30;
                }
                if (v33 >= v34) {
                  unsigned __int8 v33 = *v32;
                }
                ++v30;
                v32 += v13;
              }
              while (v10 != v30);
            }
            else
            {
              int v31 = 0;
            }
            v25[v22] = v31;
            unint64_t v22 = (v22 + 1);
          }
          while ((unint64_t)v21 > v22);
        }
        goto LABEL_290;
      }
      break;
    case 1:
      int v114 = *(_DWORD *)(a1 + 20);
      uint64_t v115 = *(int *)(a1 + 24);
      if (v114 == 1)
      {
        int v289 = *((_DWORD *)*v7 + v115);
        v290 = v7[3];
        uint64_t v291 = (uint64_t)v7[4];
        uint64_t v292 = v290[v115];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v290, v291, (v291 - (uint64_t)v290) >> 3);
        v293 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v293, (uint64_t)v293[1], ((unsigned char *)v293[1] - (unsigned char *)*v293) >> 2);
        v294 = (char *)__p + 8 * v115;
        int64_t v295 = v380 - (v294 + 8);
        if (v380 != v294 + 8) {
          memmove((char *)__p + 8 * v115, v294 + 8, v380 - (v294 + 8));
        }
        v380 = &v294[v295];
        uint64_t v17 = (char *)v376;
        v296 = &v376[v115];
        v297 = (char *)((char *)v377 - (char *)(v296 + 1));
        if (v377 != v296 + 1)
        {
          memmove(v296, v296 + 1, (char *)v377 - (char *)(v296 + 1));
          uint64_t v17 = (char *)v376;
        }
        v298 = &v297[(void)v296];
        v377 = (int *)&v297[(void)v296];
        v299 = *a3;
        v300 = (*a3)[6];
        if (v300)
        {
          unint64_t v301 = 0;
          uint64_t v302 = ((unint64_t)(v298 - v17) >> 2) - 1;
          v303 = __p;
          v373 = (*v3)[19];
          v304 = v299[19];
          do
          {
            uint64_t v305 = 0;
            if ((v302 & 0x80000000) == 0)
            {
              uint64_t v306 = v302;
              int v307 = v301;
              do
              {
                ldiv_t v308 = ldiv(v307, *(int *)&v17[4 * v306]);
                int v307 = v308.quot;
                v305 += v303[v306--] * v308.rem;
              }
              while (v306 != -1);
            }
            if (v289)
            {
              int v309 = 0;
              int v310 = 0;
              v311 = &v373[v305];
              unsigned __int8 v312 = v373[v305];
              do
              {
                unsigned int v313 = *v311;
                if (v312 < v313) {
                  int v310 = v309;
                }
                if (v312 <= v313) {
                  unsigned __int8 v312 = *v311;
                }
                ++v309;
                v311 += v292;
              }
              while (v289 != v309);
            }
            else
            {
              int v310 = 0;
            }
            v304[v301] = v310;
            unint64_t v301 = (v301 + 1);
          }
          while ((unint64_t)v300 > v301);
        }
        goto LABEL_290;
      }
      if (!v114)
      {
        int v116 = *((_DWORD *)*v7 + v115);
        v117 = v7[3];
        uint64_t v118 = (uint64_t)v7[4];
        uint64_t v119 = v117[v115];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v117, v118, (v118 - (uint64_t)v117) >> 3);
        v120 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v120, (uint64_t)v120[1], ((unsigned char *)v120[1] - (unsigned char *)*v120) >> 2);
        v121 = (char *)__p + 8 * v115;
        int64_t v122 = v380 - (v121 + 8);
        if (v380 != v121 + 8) {
          memmove((char *)__p + 8 * v115, v121 + 8, v380 - (v121 + 8));
        }
        v380 = &v121[v122];
        uint64_t v17 = (char *)v376;
        v123 = &v376[v115];
        v124 = (char *)((char *)v377 - (char *)(v123 + 1));
        if (v377 != v123 + 1)
        {
          memmove(v123, v123 + 1, (char *)v377 - (char *)(v123 + 1));
          uint64_t v17 = (char *)v376;
        }
        v125 = &v124[(void)v123];
        v377 = (int *)&v124[(void)v123];
        v126 = *a3;
        v127 = (*a3)[6];
        if (v127)
        {
          unint64_t v128 = 0;
          uint64_t v129 = ((unint64_t)(v125 - v17) >> 2) - 1;
          v130 = __p;
          v366 = (*v3)[19];
          v131 = v126[19];
          do
          {
            uint64_t v132 = 0;
            if ((v129 & 0x80000000) == 0)
            {
              uint64_t v133 = v129;
              int v134 = v128;
              do
              {
                ldiv_t v135 = ldiv(v134, *(int *)&v17[4 * v133]);
                int v134 = v135.quot;
                v132 += v130[v133--] * v135.rem;
              }
              while (v133 != -1);
            }
            if (v116)
            {
              int v136 = 0;
              int v137 = 0;
              v138 = &v366[v132];
              unsigned __int8 v139 = v366[v132];
              do
              {
                unsigned int v140 = *v138;
                if (v139 > v140) {
                  int v137 = v136;
                }
                if (v139 >= v140) {
                  unsigned __int8 v139 = *v138;
                }
                ++v136;
                v138 += v119;
              }
              while (v116 != v136);
            }
            else
            {
              int v137 = 0;
            }
            v131[v128] = v137;
            unint64_t v128 = (v128 + 1);
          }
          while ((unint64_t)v127 > v128);
        }
        goto LABEL_290;
      }
      break;
    case 2:
      int v61 = *(_DWORD *)(a1 + 20);
      uint64_t v62 = *(int *)(a1 + 24);
      if (v61 == 1)
      {
        int v217 = *((_DWORD *)*v7 + v62);
        v218 = v7[3];
        uint64_t v219 = (uint64_t)v7[4];
        uint64_t v220 = v218[v62];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v218, v219, (v219 - (uint64_t)v218) >> 3);
        v221 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v221, (uint64_t)v221[1], ((unsigned char *)v221[1] - (unsigned char *)*v221) >> 2);
        v222 = (char *)__p + 8 * v62;
        int64_t v223 = v380 - (v222 + 8);
        if (v380 != v222 + 8) {
          memmove((char *)__p + 8 * v62, v222 + 8, v380 - (v222 + 8));
        }
        v380 = &v222[v223];
        uint64_t v17 = (char *)v376;
        v224 = &v376[v62];
        v225 = (char *)((char *)v377 - (char *)(v224 + 1));
        if (v377 != v224 + 1)
        {
          memmove(v224, v224 + 1, (char *)v377 - (char *)(v224 + 1));
          uint64_t v17 = (char *)v376;
        }
        v226 = *a3;
        v227 = (*a3)[6];
        if (v227)
        {
          unint64_t v228 = 0;
          uint64_t v229 = ((unint64_t)(&v225[(void)v224] - v17) >> 2) - 1;
          v230 = __p;
          v370 = (char *)(*v3)[19];
          v231 = v226[19];
          uint64_t v232 = 4 * v220;
          do
          {
            uint64_t v233 = 0;
            if ((v229 & 0x80000000) == 0)
            {
              uint64_t v234 = v229;
              int v235 = v228;
              do
              {
                ldiv_t v236 = ldiv(v235, *(int *)&v17[4 * v234]);
                int v235 = v236.quot;
                v233 += v230[v234--] * v236.rem;
              }
              while (v234 != -1);
            }
            if (v217)
            {
              int v237 = 0;
              int v238 = 0;
              v239 = (unsigned int *)&v370[4 * v233];
              unsigned int v240 = *v239;
              do
              {
                if (v240 < *v239) {
                  int v238 = v237;
                }
                if (v240 <= *v239) {
                  unsigned int v240 = *v239;
                }
                ++v237;
                v239 = (unsigned int *)((char *)v239 + v232);
              }
              while (v217 != v237);
            }
            else
            {
              int v238 = 0;
            }
            v231[v228] = v238;
            unint64_t v228 = (v228 + 1);
          }
          while ((unint64_t)v227 > v228);
        }
        goto LABEL_290;
      }
      if (!v61)
      {
        int v63 = *((_DWORD *)*v7 + v62);
        uint64_t v64 = v7[3];
        uint64_t v65 = (uint64_t)v7[4];
        uint64_t v66 = v64[v62];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v64, v65, (v65 - (uint64_t)v64) >> 3);
        v67 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v67, (uint64_t)v67[1], ((unsigned char *)v67[1] - (unsigned char *)*v67) >> 2);
        v68 = (char *)__p + 8 * v62;
        int64_t v69 = v380 - (v68 + 8);
        if (v380 != v68 + 8) {
          memmove((char *)__p + 8 * v62, v68 + 8, v380 - (v68 + 8));
        }
        v380 = &v68[v69];
        uint64_t v17 = (char *)v376;
        v70 = &v376[v62];
        v71 = (char *)((char *)v377 - (char *)(v70 + 1));
        if (v377 != v70 + 1)
        {
          memmove(v70, v70 + 1, (char *)v377 - (char *)(v70 + 1));
          uint64_t v17 = (char *)v376;
        }
        v72 = *a3;
        v73 = (*a3)[6];
        if (v73)
        {
          unint64_t v74 = 0;
          uint64_t v75 = ((unint64_t)(&v71[(void)v70] - v17) >> 2) - 1;
          v76 = __p;
          v364 = (char *)(*v3)[19];
          v77 = v72[19];
          uint64_t v78 = 4 * v66;
          do
          {
            uint64_t v79 = 0;
            if ((v75 & 0x80000000) == 0)
            {
              uint64_t v80 = v75;
              int v81 = v74;
              do
              {
                ldiv_t v82 = ldiv(v81, *(int *)&v17[4 * v80]);
                int v81 = v82.quot;
                v79 += v76[v80--] * v82.rem;
              }
              while (v80 != -1);
            }
            if (v63)
            {
              int v83 = 0;
              int v84 = 0;
              v85 = (unsigned int *)&v364[4 * v79];
              unsigned int v86 = *v85;
              do
              {
                if (v86 > *v85) {
                  int v84 = v83;
                }
                if (v86 >= *v85) {
                  unsigned int v86 = *v85;
                }
                ++v83;
                v85 = (unsigned int *)((char *)v85 + v78);
              }
              while (v63 != v83);
            }
            else
            {
              int v84 = 0;
            }
            v77[v74] = v84;
            unint64_t v74 = (v74 + 1);
          }
          while ((unint64_t)v73 > v74);
        }
        goto LABEL_290;
      }
      break;
    case 3:
      int v87 = *(_DWORD *)(a1 + 20);
      uint64_t v88 = *(int *)(a1 + 24);
      if (v87 == 1)
      {
        int v241 = *((_DWORD *)*v7 + v88);
        v242 = v7[3];
        uint64_t v243 = (uint64_t)v7[4];
        uint64_t v244 = v242[v88];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v242, v243, (v243 - (uint64_t)v242) >> 3);
        v245 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v245, (uint64_t)v245[1], ((unsigned char *)v245[1] - (unsigned char *)*v245) >> 2);
        v246 = (char *)__p + 8 * v88;
        int64_t v247 = v380 - (v246 + 8);
        if (v380 != v246 + 8) {
          memmove((char *)__p + 8 * v88, v246 + 8, v380 - (v246 + 8));
        }
        v380 = &v246[v247];
        uint64_t v17 = (char *)v376;
        v248 = &v376[v88];
        v249 = (char *)((char *)v377 - (char *)(v248 + 1));
        if (v377 != v248 + 1)
        {
          memmove(v248, v248 + 1, (char *)v377 - (char *)(v248 + 1));
          uint64_t v17 = (char *)v376;
        }
        v250 = &v249[(void)v248];
        v377 = (int *)&v249[(void)v248];
        v251 = *a3;
        v252 = (*a3)[6];
        if (v252)
        {
          unint64_t v253 = 0;
          uint64_t v254 = ((unint64_t)(v250 - v17) >> 2) - 1;
          v255 = __p;
          v371 = (*v3)[19];
          v256 = v251[19];
          do
          {
            uint64_t v257 = 0;
            if ((v254 & 0x80000000) == 0)
            {
              uint64_t v258 = v254;
              int v259 = v253;
              do
              {
                ldiv_t v260 = ldiv(v259, *(int *)&v17[4 * v258]);
                int v259 = v260.quot;
                v257 += v255[v258--] * v260.rem;
              }
              while (v258 != -1);
            }
            if (v241)
            {
              int v261 = 0;
              int v262 = 0;
              v263 = &v371[v257];
              char v264 = v371[v257];
              do
              {
                int v265 = *v263;
                if (v264 < v265) {
                  int v262 = v261;
                }
                if (v264 <= v265) {
                  char v264 = *v263;
                }
                ++v261;
                v263 += v244;
              }
              while (v241 != v261);
            }
            else
            {
              int v262 = 0;
            }
            v256[v253] = v262;
            unint64_t v253 = (v253 + 1);
          }
          while ((unint64_t)v252 > v253);
        }
        goto LABEL_290;
      }
      if (!v87)
      {
        int v89 = *((_DWORD *)*v7 + v88);
        v90 = v7[3];
        uint64_t v91 = (uint64_t)v7[4];
        uint64_t v92 = v90[v88];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v90, v91, (v91 - (uint64_t)v90) >> 3);
        v93 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v93, (uint64_t)v93[1], ((unsigned char *)v93[1] - (unsigned char *)*v93) >> 2);
        v94 = (char *)__p + 8 * v88;
        int64_t v95 = v380 - (v94 + 8);
        if (v380 != v94 + 8) {
          memmove((char *)__p + 8 * v88, v94 + 8, v380 - (v94 + 8));
        }
        v380 = &v94[v95];
        uint64_t v17 = (char *)v376;
        v96 = &v376[v88];
        v97 = (char *)((char *)v377 - (char *)(v96 + 1));
        if (v377 != v96 + 1)
        {
          memmove(v96, v96 + 1, (char *)v377 - (char *)(v96 + 1));
          uint64_t v17 = (char *)v376;
        }
        v98 = &v97[(void)v96];
        v377 = (int *)&v97[(void)v96];
        v99 = *a3;
        v100 = (*a3)[6];
        if (v100)
        {
          unint64_t v101 = 0;
          uint64_t v102 = ((unint64_t)(v98 - v17) >> 2) - 1;
          v103 = __p;
          v365 = (*v3)[19];
          v104 = v99[19];
          do
          {
            uint64_t v105 = 0;
            if ((v102 & 0x80000000) == 0)
            {
              uint64_t v106 = v102;
              int v107 = v101;
              do
              {
                ldiv_t v108 = ldiv(v107, *(int *)&v17[4 * v106]);
                int v107 = v108.quot;
                v105 += v103[v106--] * v108.rem;
              }
              while (v106 != -1);
            }
            if (v89)
            {
              int v109 = 0;
              int v110 = 0;
              v111 = &v365[v105];
              char v112 = v365[v105];
              do
              {
                int v113 = *v111;
                if (v112 > v113) {
                  int v110 = v109;
                }
                if (v112 >= v113) {
                  char v112 = *v111;
                }
                ++v109;
                v111 += v92;
              }
              while (v89 != v109);
            }
            else
            {
              int v110 = 0;
            }
            v104[v101] = v110;
            unint64_t v101 = (v101 + 1);
          }
          while ((unint64_t)v100 > v101);
        }
        goto LABEL_290;
      }
      break;
    case 4:
      int v35 = *(_DWORD *)(a1 + 20);
      uint64_t v36 = *(int *)(a1 + 24);
      if (v35 == 1)
      {
        int v193 = *((_DWORD *)*v7 + v36);
        v194 = v7[3];
        uint64_t v195 = (uint64_t)v7[4];
        uint64_t v196 = v194[v36];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v194, v195, (v195 - (uint64_t)v194) >> 3);
        v197 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v197, (uint64_t)v197[1], ((unsigned char *)v197[1] - (unsigned char *)*v197) >> 2);
        v198 = (char *)__p + 8 * v36;
        int64_t v199 = v380 - (v198 + 8);
        if (v380 != v198 + 8) {
          memmove((char *)__p + 8 * v36, v198 + 8, v380 - (v198 + 8));
        }
        v380 = &v198[v199];
        uint64_t v17 = (char *)v376;
        v200 = &v376[v36];
        v201 = (char *)((char *)v377 - (char *)(v200 + 1));
        if (v377 != v200 + 1)
        {
          memmove(v200, v200 + 1, (char *)v377 - (char *)(v200 + 1));
          uint64_t v17 = (char *)v376;
        }
        v202 = *a3;
        v203 = (*a3)[6];
        if (v203)
        {
          unint64_t v204 = 0;
          uint64_t v205 = ((unint64_t)(&v201[(void)v200] - v17) >> 2) - 1;
          v206 = __p;
          v369 = (char *)(*v3)[19];
          v207 = v202[19];
          uint64_t v208 = 4 * v196;
          do
          {
            uint64_t v209 = 0;
            if ((v205 & 0x80000000) == 0)
            {
              uint64_t v210 = v205;
              int v211 = v204;
              do
              {
                ldiv_t v212 = ldiv(v211, *(int *)&v17[4 * v210]);
                int v211 = v212.quot;
                v209 += v206[v210--] * v212.rem;
              }
              while (v210 != -1);
            }
            if (v193)
            {
              int v213 = 0;
              int v214 = 0;
              v215 = (int *)&v369[4 * v209];
              int v216 = *v215;
              do
              {
                if (v216 < *v215) {
                  int v214 = v213;
                }
                if (v216 <= *v215) {
                  int v216 = *v215;
                }
                ++v213;
                v215 = (int *)((char *)v215 + v208);
              }
              while (v193 != v213);
            }
            else
            {
              int v214 = 0;
            }
            v207[v204] = v214;
            unint64_t v204 = (v204 + 1);
          }
          while ((unint64_t)v203 > v204);
        }
        goto LABEL_290;
      }
      if (!v35)
      {
        int v37 = *((_DWORD *)*v7 + v36);
        v38 = v7[3];
        uint64_t v39 = (uint64_t)v7[4];
        uint64_t v40 = v38[v36];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v38, v39, (v39 - (uint64_t)v38) >> 3);
        v41 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v41, (uint64_t)v41[1], ((unsigned char *)v41[1] - (unsigned char *)*v41) >> 2);
        v42 = (char *)__p + 8 * v36;
        int64_t v43 = v380 - (v42 + 8);
        if (v380 != v42 + 8) {
          memmove((char *)__p + 8 * v36, v42 + 8, v380 - (v42 + 8));
        }
        v380 = &v42[v43];
        uint64_t v17 = (char *)v376;
        v44 = &v376[v36];
        v45 = (char *)((char *)v377 - (char *)(v44 + 1));
        if (v377 != v44 + 1)
        {
          memmove(v44, v44 + 1, (char *)v377 - (char *)(v44 + 1));
          uint64_t v17 = (char *)v376;
        }
        v46 = *a3;
        std::string v47 = (*a3)[6];
        if (v47)
        {
          unint64_t v48 = 0;
          uint64_t v49 = ((unint64_t)(&v45[(void)v44] - v17) >> 2) - 1;
          v50 = __p;
          v363 = (char *)(*v3)[19];
          v51 = v46[19];
          uint64_t v52 = 4 * v40;
          do
          {
            uint64_t v53 = 0;
            if ((v49 & 0x80000000) == 0)
            {
              uint64_t v54 = v49;
              int v55 = v48;
              do
              {
                ldiv_t v56 = ldiv(v55, *(int *)&v17[4 * v54]);
                int v55 = v56.quot;
                v53 += v50[v54--] * v56.rem;
              }
              while (v54 != -1);
            }
            if (v37)
            {
              int v57 = 0;
              int v58 = 0;
              uint64_t v59 = (int *)&v363[4 * v53];
              int v60 = *v59;
              do
              {
                if (v60 > *v59) {
                  int v58 = v57;
                }
                if (v60 >= *v59) {
                  int v60 = *v59;
                }
                ++v57;
                uint64_t v59 = (int *)((char *)v59 + v52);
              }
              while (v37 != v57);
            }
            else
            {
              int v58 = 0;
            }
            v51[v48] = v58;
            unint64_t v48 = (v48 + 1);
          }
          while ((unint64_t)v47 > v48);
        }
        goto LABEL_290;
      }
      break;
    case 5:
      int v141 = *(_DWORD *)(a1 + 20);
      uint64_t v142 = *(int *)(a1 + 24);
      if (v141 == 1)
      {
        int v314 = *((_DWORD *)*v7 + v142);
        v315 = v7[3];
        uint64_t v316 = (uint64_t)v7[4];
        uint64_t v317 = v315[v142];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v315, v316, (v316 - (uint64_t)v315) >> 3);
        v318 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v318, (uint64_t)v318[1], ((unsigned char *)v318[1] - (unsigned char *)*v318) >> 2);
        v319 = (char *)__p + 8 * v142;
        int64_t v320 = v380 - (v319 + 8);
        if (v380 != v319 + 8) {
          memmove((char *)__p + 8 * v142, v319 + 8, v380 - (v319 + 8));
        }
        v380 = &v319[v320];
        uint64_t v17 = (char *)v376;
        v321 = &v376[v142];
        v322 = (char *)((char *)v377 - (char *)(v321 + 1));
        if (v377 != v321 + 1)
        {
          memmove(v321, v321 + 1, (char *)v377 - (char *)(v321 + 1));
          uint64_t v17 = (char *)v376;
        }
        v323 = *a3;
        v324 = (*a3)[6];
        if (v324)
        {
          unint64_t v325 = 0;
          uint64_t v326 = ((unint64_t)(&v322[(void)v321] - v17) >> 2) - 1;
          v327 = __p;
          v374 = (char *)(*v3)[19];
          v328 = v323[19];
          uint64_t v329 = 8 * v317;
          do
          {
            uint64_t v330 = 0;
            if ((v326 & 0x80000000) == 0)
            {
              uint64_t v331 = v326;
              int v332 = v325;
              do
              {
                ldiv_t v333 = ldiv(v332, *(int *)&v17[4 * v331]);
                int v332 = v333.quot;
                v330 += v327[v331--] * v333.rem;
              }
              while (v331 != -1);
            }
            if (v314)
            {
              int v334 = 0;
              int v335 = 0;
              v336 = (uint64_t *)&v374[8 * v330];
              uint64_t v337 = *v336;
              do
              {
                if (v337 < *v336) {
                  int v335 = v334;
                }
                if (v337 <= *v336) {
                  uint64_t v337 = *v336;
                }
                ++v334;
                v336 = (uint64_t *)((char *)v336 + v329);
              }
              while (v314 != v334);
            }
            else
            {
              int v335 = 0;
            }
            v328[v325] = v335;
            unint64_t v325 = (v325 + 1);
          }
          while ((unint64_t)v324 > v325);
        }
        goto LABEL_290;
      }
      if (!v141)
      {
        int v143 = *((_DWORD *)*v7 + v142);
        v144 = v7[3];
        uint64_t v145 = (uint64_t)v7[4];
        uint64_t v146 = v144[v142];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v144, v145, (v145 - (uint64_t)v144) >> 3);
        v147 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v147, (uint64_t)v147[1], ((unsigned char *)v147[1] - (unsigned char *)*v147) >> 2);
        v148 = (char *)__p + 8 * v142;
        int64_t v149 = v380 - (v148 + 8);
        if (v380 != v148 + 8) {
          memmove((char *)__p + 8 * v142, v148 + 8, v380 - (v148 + 8));
        }
        v380 = &v148[v149];
        uint64_t v17 = (char *)v376;
        v150 = &v376[v142];
        v151 = (char *)((char *)v377 - (char *)(v150 + 1));
        if (v377 != v150 + 1)
        {
          memmove(v150, v150 + 1, (char *)v377 - (char *)(v150 + 1));
          uint64_t v17 = (char *)v376;
        }
        v152 = *a3;
        v153 = (*a3)[6];
        if (v153)
        {
          unint64_t v154 = 0;
          uint64_t v155 = ((unint64_t)(&v151[(void)v150] - v17) >> 2) - 1;
          v156 = __p;
          v367 = (char *)(*v3)[19];
          v157 = v152[19];
          uint64_t v158 = 8 * v146;
          do
          {
            uint64_t v159 = 0;
            if ((v155 & 0x80000000) == 0)
            {
              uint64_t v160 = v155;
              int v161 = v154;
              do
              {
                ldiv_t v162 = ldiv(v161, *(int *)&v17[4 * v160]);
                int v161 = v162.quot;
                v159 += v156[v160--] * v162.rem;
              }
              while (v160 != -1);
            }
            if (v143)
            {
              int v163 = 0;
              int v164 = 0;
              v165 = (uint64_t *)&v367[8 * v159];
              uint64_t v166 = *v165;
              do
              {
                if (v166 > *v165) {
                  int v164 = v163;
                }
                if (v166 >= *v165) {
                  uint64_t v166 = *v165;
                }
                ++v163;
                v165 = (uint64_t *)((char *)v165 + v158);
              }
              while (v143 != v163);
            }
            else
            {
              int v164 = 0;
            }
            v157[v154] = v164;
            unint64_t v154 = (v154 + 1);
          }
          while ((unint64_t)v153 > v154);
        }
        goto LABEL_290;
      }
      break;
    case 6:
      int v167 = *(_DWORD *)(a1 + 20);
      uint64_t v168 = *(int *)(a1 + 24);
      if (v167 == 1)
      {
        int v338 = *((_DWORD *)*v7 + v168);
        v339 = v7[3];
        uint64_t v340 = (uint64_t)v7[4];
        uint64_t v341 = v339[v168];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v339, v340, (v340 - (uint64_t)v339) >> 3);
        v342 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v342, (uint64_t)v342[1], ((unsigned char *)v342[1] - (unsigned char *)*v342) >> 2);
        v343 = (char *)__p + 8 * v168;
        int64_t v344 = v380 - (v343 + 8);
        if (v380 != v343 + 8) {
          memmove((char *)__p + 8 * v168, v343 + 8, v380 - (v343 + 8));
        }
        v380 = &v343[v344];
        uint64_t v17 = (char *)v376;
        v345 = &v376[v168];
        v346 = (char *)((char *)v377 - (char *)(v345 + 1));
        if (v377 != v345 + 1)
        {
          memmove(v345, v345 + 1, (char *)v377 - (char *)(v345 + 1));
          uint64_t v17 = (char *)v376;
        }
        v347 = *a3;
        v348 = (*a3)[6];
        if (v348)
        {
          unint64_t v349 = 0;
          uint64_t v350 = ((unint64_t)(&v346[(void)v345] - v17) >> 2) - 1;
          v351 = __p;
          v375 = (char *)(*v3)[19];
          v352 = v347[19];
          uint64_t v353 = 4 * v341;
          do
          {
            uint64_t v354 = 0;
            if ((v350 & 0x80000000) == 0)
            {
              uint64_t v355 = v350;
              int v356 = v349;
              do
              {
                ldiv_t v357 = ldiv(v356, *(int *)&v17[4 * v355]);
                int v356 = v357.quot;
                v354 += v351[v355--] * v357.rem;
              }
              while (v355 != -1);
            }
            if (v338)
            {
              int v358 = 0;
              int v359 = 0;
              v360 = (float *)&v375[4 * v354];
              float v361 = *v360;
              do
              {
                if (v361 < *v360)
                {
                  int v359 = v358;
                  float v361 = *v360;
                }
                ++v358;
                v360 = (float *)((char *)v360 + v353);
              }
              while (v338 != v358);
            }
            else
            {
              int v359 = 0;
            }
            v352[v349] = v359;
            unint64_t v349 = (v349 + 1);
          }
          while ((unint64_t)v348 > v349);
        }
      }
      else
      {
        if (v167) {
          return;
        }
        int v169 = *((_DWORD *)*v7 + v168);
        v170 = v7[3];
        uint64_t v171 = (uint64_t)v7[4];
        uint64_t v172 = v170[v168];
        __p = 0;
        v380 = 0;
        uint64_t v381 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v170, v171, (v171 - (uint64_t)v170) >> 3);
        v173 = *v3;
        v376 = 0;
        v377 = 0;
        uint64_t v378 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v376, *v173, (uint64_t)v173[1], ((unsigned char *)v173[1] - (unsigned char *)*v173) >> 2);
        v174 = (char *)__p + 8 * v168;
        int64_t v175 = v380 - (v174 + 8);
        if (v380 != v174 + 8) {
          memmove((char *)__p + 8 * v168, v174 + 8, v380 - (v174 + 8));
        }
        v380 = &v174[v175];
        uint64_t v17 = (char *)v376;
        v176 = &v376[v168];
        v177 = (char *)((char *)v377 - (char *)(v176 + 1));
        if (v377 != v176 + 1)
        {
          memmove(v176, v176 + 1, (char *)v377 - (char *)(v176 + 1));
          uint64_t v17 = (char *)v376;
        }
        v178 = *a3;
        v179 = (*a3)[6];
        if (v179)
        {
          unint64_t v180 = 0;
          uint64_t v181 = ((unint64_t)(&v177[(void)v176] - v17) >> 2) - 1;
          v182 = __p;
          v368 = (char *)(*v3)[19];
          v183 = v178[19];
          uint64_t v184 = 4 * v172;
          do
          {
            uint64_t v185 = 0;
            if ((v181 & 0x80000000) == 0)
            {
              uint64_t v186 = v181;
              int v187 = v180;
              do
              {
                ldiv_t v188 = ldiv(v187, *(int *)&v17[4 * v186]);
                int v187 = v188.quot;
                v185 += v182[v186--] * v188.rem;
              }
              while (v186 != -1);
            }
            if (v169)
            {
              int v189 = 0;
              int v190 = 0;
              v191 = (float *)&v368[4 * v185];
              float v192 = *v191;
              do
              {
                if (v192 > *v191)
                {
                  int v190 = v189;
                  float v192 = *v191;
                }
                ++v189;
                v191 = (float *)((char *)v191 + v184);
              }
              while (v169 != v189);
            }
            else
            {
              int v190 = 0;
            }
            v183[v180] = v190;
            unint64_t v180 = (v180 + 1);
          }
          while ((unint64_t)v179 > v180);
        }
      }
LABEL_290:
      if (v17)
      {
        v377 = (int *)v17;
        operator delete(v17);
      }
      if (__p)
      {
        v380 = (char *)__p;
        operator delete(__p);
      }
      break;
    default:
      return;
  }
}

void sub_256EECC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::distributed::Group::rank(mlx::core::distributed::Group *this)
{
  return 0;
}

uint64_t mlx::core::distributed::Group::size(mlx::core::distributed::Group *this)
{
  return 1;
}

void mlx::core::distributed::Group::split(mlx::core::distributed::Group *this)
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Cannot split the distributed group further");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECD68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::distributed::is_available(mlx::core::distributed *this)
{
  return 0;
}

void mlx::core::distributed::init(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t mlx::core::distributed::detail::communication_stream(mlx::core::distributed::detail *this)
{
  {
    mlx::core::new_stream(0);
  }
  return mlx::core::distributed::detail::communication_stream(void)::comm_stream;
}

void sub_256EECDF8(_Unwind_Exception *a1)
{
}

void mlx::core::Abs::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Abs has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECE60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Add::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Add has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECEBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AddMM::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "AddMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECF18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Arange::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Arange has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECF74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcCos has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EECFD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcCosh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED02C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcSin has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcSinh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED0E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcTan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcTan2 has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED19C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArcTanh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED1F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArgPartition has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED254(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArgReduce has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED2B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ArgSort has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED30C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "AsType has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED368(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::AsStrided::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "AsStrided has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED3C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BitwiseBinary::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "BitwiseBinary has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED420(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "BlockMaskedMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED47C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Broadcast has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED4D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Ceil has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED534(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Concatenate::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Concatenate has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED590(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Copy::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Copy has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED5EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cos::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Cos has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED648(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Cosh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED6A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::CustomVJP::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "CustomVJP has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED700(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Depends::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Depends has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED75C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Divide has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED7B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "DivMod has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED814(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::NumberOfElements::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "NumberOfElements has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED870(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Remainder has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED8CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Equal has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED928(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Erf::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Erf has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED984(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "ErfInv has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EED9E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Exp has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDA3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Expm1 has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDA98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Floor::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Floor has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDAF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Full::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Full has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDB50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Gather has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDBAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "GatherMM has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDC08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Greater::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Greater has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDC64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "GreaterEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDCC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Less::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Less has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDD1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "LessEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDD78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Log::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Log has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDDD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Log1p has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDE30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "LogicalNot has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDE8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "LogicalAnd has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDEE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "LogicalOr has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDF44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "LogAddExp has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDFA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Matmul::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Matmul has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEDFFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Maximum has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE058(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Minimum has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE0B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Multiply has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Negative::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Negative has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE16C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "NotEqual has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE1C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Pad has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE224(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Partition::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Partition has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE280(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Power::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Power has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::QRF::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "QRF has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::RandomBits::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "RandomBits has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Reduce has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE3F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Reshape has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE44C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Round::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Round has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE4A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Scan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE504(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Scatter::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Scatter has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE560(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Select::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Select has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE5BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sigmoid has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sign::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sign has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sin has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE6D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sinh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE72C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Slice::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Slice has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "SliceUpdate has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE7E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sort::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sort has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE840(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Split::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Split has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE89C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Square::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Square has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE8F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Sqrt has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::StopGradient::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "StopGradient has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEE9B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Subtract has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEA0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::SVD::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "SVD has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEA68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Tan::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Tan has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEAC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Tanh has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEB20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Transpose has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEB7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Inverse::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Inverse has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEBD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Cholesky::eval_gpu()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Cholesky has no GPU implementation.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256EEEC34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx_array_::tostring(mlx_array_ *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  uint64_t v2 = *((void *)this + 3);
  v4[0] = *((void *)this + 2);
  v4[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::operator<<(&v5, (mlx::core::array *)v4);
  mlx::core::array::~array((mlx::core::array *)v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, __p);
  operator new();
}

void sub_256EEEE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  MEMORY[0x25A2B1780](v18, 0x1093C401FB1DE5ELL);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void mlx_vector_array_::tostring(mlx_vector_array_ *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v3, (uint64_t)"vector of arrays (size=", 23);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4, __p);
  operator new();
}

void sub_256EEF04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlx_vector_vector_array_::tostring(mlx_vector_vector_array_ *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v3, (uint64_t)"vector of vector of arrays (size=", 33);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4, __p);
  operator new();
}

void sub_256EEF280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x25A2B1780](v16, 0x1093C401FB1DE5ELL);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void mlx_vector_array_new()
{
}

void mlx_vector_array_from_arrays(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100](v4, (void *)(*(void *)a1 + 16));
      a1 += 8;
      --v2;
    }
    while (v2);
  }
  operator new();
}

void sub_256EEF3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  MEMORY[0x25A2B1780](v12, 0x10A1C405897D53FLL);
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void mlx_vector_array_from_array()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_256EEF52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void **);
  uint64_t v8 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  MEMORY[0x25A2B1780](v4, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t mlx_vector_array_add(uint64_t a1, uint64_t a2)
{
  return std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)(a1 + 16), (void *)(a2 + 16));
}

uint64_t mlx_vector_array_add_arrays(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (char **)(result + 16);
    do
    {
      uint64_t v6 = *a2++;
      float result = std::vector<mlx::core::array>::push_back[abi:ne180100](v5, (void *)(v6 + 16));
      --v3;
    }
    while (v3);
  }
  return result;
}

void mlx_vector_array_get()
{
}

void sub_256EEF684(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_vector_array_size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4;
}

void mlx_vector_vector_array_new()
{
}

uint64_t mlx_vector_vector_array_add(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 2;
  uint64_t v4 = (void **)(a2 + 16);
  unint64_t v5 = a1[3];
  if (v5 >= a1[4])
  {
    uint64_t result = std::vector<std::vector<mlx::core::array>>::__push_back_slow_path<std::vector<mlx::core::array> const&>(v3, v4);
  }
  else
  {
    std::vector<std::vector<mlx::core::array>>::__construct_one_at_end[abi:ne180100]<std::vector<mlx::core::array> const&>((uint64_t)v3, v4);
    uint64_t result = v5 + 24;
  }
  a1[3] = result;
  return result;
}

void mlx_vector_vector_array_get()
{
}

void sub_256EEF810(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_vector_vector_array_get2d()
{
}

void sub_256EEF930(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

unint64_t mlx_vector_vector_array_size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
}

void mlx_array_from_BOOL()
{
}

void sub_256EEFA10(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_array_from_int()
{
}

void sub_256EEFAD4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_array_from_float()
{
}

void sub_256EEFBA0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_from_data(uint64_t a1, char *a2, int a3, int a4)
{
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v6, a2, (uint64_t)&a2[4 * a3], a3);
  switch(mlx_cpp_dtypes[a4])
  {
    case 0u:
      operator new();
    case 1u:
      operator new();
    case 2u:
      operator new();
    case 3u:
      operator new();
    case 4u:
      operator new();
    case 5u:
      operator new();
    case 6u:
      operator new();
    default:
      if (v6)
      {
        char v7 = v6;
        operator delete(v6);
      }
      return 0;
  }
}

void sub_256EF00A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v30, 0x10A1C407049A3A3);
  unsigned __int8 v33 = *(void **)(v31 - 56);
  if (v33)
  {
    *(void *)(v31 - 48) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx_array_itemsize(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 60);
}

uint64_t mlx_array_size(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 48);
}

uint64_t mlx_array_nbytes(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 60) * *(void *)(*(void *)(a1 + 16) + 48);
}

uint64_t mlx_array_ndim(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 2;
}

uint64_t mlx_array_shape(uint64_t a1)
{
  return **(void **)(a1 + 16);
}

uint64_t mlx_array_strides(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 24);
}

uint64_t mlx_array_dim(uint64_t a1, int a2)
{
  return mlx::core::array::shape((mlx::core::array *)(a1 + 16), a2);
}

uint64_t mlx_array_get_dtype(uint64_t a1)
{
  return *(unsigned int *)((char *)&mlx_c_dtypes + ((uint64_t)(*(void *)(*(void *)(a1 + 16) + 56) << 32) >> 30));
}

void mlx_array_eval(uint64_t a1)
{
}

uint64_t mlx_array_item_BOOL(uint64_t a1)
{
  return mlx::core::array::item<BOOL>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<BOOL>(mlx::core::array *a1)
{
  if (*(void *)(*(void *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::array::eval(a1);
  return **(unsigned __int8 **)(*(void *)a1 + 152);
}

void sub_256EF02A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_uint8(uint64_t a1)
{
  return mlx::core::array::item<BOOL>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx_array_item_uint32(uint64_t a1)
{
  return mlx::core::array::item<unsigned int>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<unsigned int>(mlx::core::array *a1)
{
  if (*(void *)(*(void *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::array::eval(a1);
  return **(unsigned int **)(*(void *)a1 + 152);
}

void sub_256EF0344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_int8(uint64_t a1)
{
  return mlx::core::array::item<signed char>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<signed char>(mlx::core::array *a1)
{
  if (*(void *)(*(void *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::array::eval(a1);
  return **(char **)(*(void *)a1 + 152);
}

void sub_256EF03D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_item_int32(uint64_t a1)
{
  return mlx::core::array::item<unsigned int>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx_array_item_int64(uint64_t a1)
{
  return mlx::core::array::item<long long>((mlx::core::array *)(a1 + 16));
}

uint64_t mlx::core::array::item<long long>(mlx::core::array *a1)
{
  if (*(void *)(*(void *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::array::eval(a1);
  return **(void **)(*(void *)a1 + 152);
}

void sub_256EF0474(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float mlx_array_item_float32(uint64_t a1)
{
  return mlx::core::array::item<float>((mlx::core::array *)(a1 + 16));
}

float mlx::core::array::item<float>(mlx::core::array *a1)
{
  if (*(void *)(*(void *)a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "item can only be called on arrays of size 1.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::array::eval(a1);
  return **(float **)(*(void *)a1 + 152);
}

void sub_256EF0508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx_array_data_BOOL(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_uint8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_uint32(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int32(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_int64(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

uint64_t mlx_array_data_float32(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 152);
}

void mlx_array_::~mlx_array_(mlx_array_ *this)
{
  *(void *)this = &unk_2706331C0;
  mlx::core::array::~array((mlx_array_ *)((char *)this + 16));
}

{
  uint64_t vars8;

  *(void *)this = &unk_2706331C0;
  mlx::core::array::~array((mlx_array_ *)((char *)this + 16));
  JUMPOUT(0x25A2B1780);
}

void mlx_vector_array_::~mlx_vector_array_(mlx_vector_array_ *this)
{
  *(void *)this = &unk_270633200;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_270633200;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x25A2B1780](this, 0x10A1C405897D53FLL);
}

void mlx_vector_vector_array_::~mlx_vector_vector_array_(mlx_vector_vector_array_ *this)
{
  *(void *)this = &unk_270633240;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_270633240;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::vector<mlx::core::array>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x25A2B1780](this, 0x10A1C405897D53FLL);
}

char *std::vector<std::vector<mlx::core::array>>::__construct_one_at_end[abi:ne180100]<std::vector<mlx::core::array> const&>(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_256EF07EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mlx::core::array>>::__push_back_slow_path<std::vector<mlx::core::array> const&>(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<mlx::core::array>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer(v14);
  return v12;
}

void sub_256EF08F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mlx::core::array>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>,std::reverse_iterator<std::vector<mlx::core::array>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mlx::core::array>>,std::reverse_iterator<std::vector<mlx::core::array>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<mlx::core::array>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<mlx::core::array>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

int ***mlx::core::array::array<BOOL>(int ***a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v9 = a3;
  unsigned __int8 v8 = a2;
  __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v9, a1);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<BOOL *>(a1, &v8);
  return a1;
}

void sub_256EF0BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  char v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void *mlx::core::array::init<BOOL *>(int ***a1, unsigned __int8 *a2)
{
  v21[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v21[0] = &unk_27062AEC8;
  v21[1] = mlx::core::allocator::free;
  v21[3] = v21;
  mlx::core::array::set_data(a1, v4, (uint64_t)v21);
  uint64_t result = std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v21);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
    case 1:
    case 3:
      size_t v7 = (size_t)v6[6];
      if (v7) {
        uint64_t result = memmove(v6[19], a2, v7);
      }
      break;
    case 2:
      unsigned __int8 v8 = v6[6];
      if (v8)
      {
        uint64_t v9 = v6[19];
        do
        {
          int v10 = *a2++;
          *v9++ = v10;
          unsigned __int8 v8 = (int *)((char *)v8 - 1);
        }
        while (v8);
      }
      break;
    case 4:
      unint64_t v11 = v6[6];
      if (v11)
      {
        char v12 = v6[19];
        do
        {
          int v13 = *a2++;
          *v12++ = v13;
          unint64_t v11 = (int *)((char *)v11 - 1);
        }
        while (v11);
      }
      break;
    case 5:
      long long v14 = v6[6];
      if (v14)
      {
        int v15 = v6[19];
        do
        {
          unsigned int v16 = *a2++;
          *(void *)int v15 = v16;
          v15 += 2;
          long long v14 = (int *)((char *)v14 - 1);
        }
        while (v14);
      }
      break;
    case 6:
      uint64_t v17 = v6[6];
      if (v17)
      {
        uint64_t v18 = (float *)v6[19];
        do
        {
          if (*a2++) {
            float v20 = 1.0;
          }
          else {
            float v20 = 0.0;
          }
          *v18++ = v20;
          uint64_t v17 = (int *)((char *)v17 - 1);
        }
        while (v17);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF0D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<BOOL *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<BOOL *>(a1, a2);
  return a1;
}

void sub_256EF0DE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<unsigned char *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<unsigned char *>(a1, a2);
  return a1;
}

void sub_256EF0E54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<unsigned char *>(int ***a1, unsigned __int8 *a2)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v23[0] = &unk_27062AEC8;
  v23[1] = mlx::core::allocator::free;
  v23[3] = v23;
  mlx::core::array::set_data(a1, v4, (uint64_t)v23);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v23);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      unsigned __int8 v8 = v6[6];
      if (v8)
      {
        uint64_t v9 = (BOOL *)v6[19];
        do
        {
          int v10 = *a2++;
          *v9++ = v10 != 0;
          unsigned __int8 v8 = (int *)((char *)v8 - 1);
        }
        while (v8);
      }
      break;
    case 1:
    case 3:
      size_t v7 = (size_t)v6[6];
      if (v7) {
        memmove(v6[19], a2, v7);
      }
      break;
    case 2:
      unint64_t v11 = v6[6];
      if (v11)
      {
        char v12 = v6[19];
        do
        {
          int v13 = *a2++;
          *v12++ = v13;
          unint64_t v11 = (int *)((char *)v11 - 1);
        }
        while (v11);
      }
      break;
    case 4:
      long long v14 = v6[6];
      if (v14)
      {
        int v15 = v6[19];
        do
        {
          int v16 = *a2++;
          *v15++ = v16;
          long long v14 = (int *)((char *)v14 - 1);
        }
        while (v14);
      }
      break;
    case 5:
      uint64_t v17 = v6[6];
      if (v17)
      {
        uint64_t v18 = v6[19];
        do
        {
          unsigned int v19 = *a2++;
          *(void *)uint64_t v18 = v19;
          v18 += 2;
          uint64_t v17 = (int *)((char *)v17 - 1);
        }
        while (v17);
      }
      break;
    case 6:
      float v20 = v6[6];
      if (v20)
      {
        uint64_t v21 = (float *)v6[19];
        do
        {
          unsigned int v22 = *a2++;
          float result = (float)v22;
          *v21++ = (float)v22;
          float v20 = (int *)((char *)v20 - 1);
        }
        while (v20);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF1014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<unsigned int *>(int ***a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<unsigned int *>(a1, a2);
  return a1;
}

void sub_256EF109C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<signed char *>(int ***a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<signed char *>(a1, a2);
  return a1;
}

void sub_256EF110C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<signed char *>(int ***a1, unsigned __int8 *a2)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v23[0] = &unk_27062AEC8;
  v23[1] = mlx::core::allocator::free;
  v23[3] = v23;
  mlx::core::array::set_data(a1, v4, (uint64_t)v23);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v23);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      unsigned __int8 v8 = v6[6];
      if (v8)
      {
        uint64_t v9 = (BOOL *)v6[19];
        do
        {
          int v10 = *a2++;
          *v9++ = v10 != 0;
          unsigned __int8 v8 = (int *)((char *)v8 - 1);
        }
        while (v8);
      }
      break;
    case 1:
    case 3:
      size_t v7 = (size_t)v6[6];
      if (v7) {
        memmove(v6[19], a2, v7);
      }
      break;
    case 2:
      unint64_t v11 = v6[6];
      if (v11)
      {
        char v12 = v6[19];
        do
        {
          int v13 = (char)*a2++;
          *v12++ = v13;
          unint64_t v11 = (int *)((char *)v11 - 1);
        }
        while (v11);
      }
      break;
    case 4:
      long long v14 = v6[6];
      if (v14)
      {
        int v15 = v6[19];
        do
        {
          int v16 = (char)*a2++;
          *v15++ = v16;
          long long v14 = (int *)((char *)v14 - 1);
        }
        while (v14);
      }
      break;
    case 5:
      uint64_t v17 = v6[6];
      if (v17)
      {
        uint64_t v18 = v6[19];
        do
        {
          uint64_t v19 = (char)*a2++;
          *(void *)uint64_t v18 = v19;
          v18 += 2;
          uint64_t v17 = (int *)((char *)v17 - 1);
        }
        while (v17);
      }
      break;
    case 6:
      float v20 = v6[6];
      if (v20)
      {
        uint64_t v21 = (float *)v6[19];
        do
        {
          int v22 = (char)*a2++;
          float result = (float)v22;
          *v21++ = (float)v22;
          float v20 = (int *)((char *)v20 - 1);
        }
        while (v20);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF12CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<int *>(int ***a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<int *>(a1, a2);
  return a1;
}

void sub_256EF1354(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

int ***mlx::core::array::array<long long *>(int ***a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<long long *>(a1, a2);
  return a1;
}

void sub_256EF13C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<long long *>(int ***a1, uint64_t *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v32[0] = &unk_27062AEC8;
  v32[1] = mlx::core::allocator::free;
  v32[3] = v32;
  mlx::core::array::set_data(a1, v4, (uint64_t)v32);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v32);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      uint64_t v7 = v6[6];
      if (v7)
      {
        unsigned __int8 v8 = (BOOL *)v6[19];
        uint64_t v9 = 8 * (void)v7;
        do
        {
          uint64_t v10 = *a2++;
          *v8++ = v10 != 0;
          v9 -= 8;
        }
        while (v9);
      }
      break;
    case 1:
      uint64_t v23 = v6[6];
      if (v23)
      {
        int v24 = v6[19];
        uint64_t v25 = 8 * (void)v23;
        do
        {
          uint64_t v26 = *a2++;
          *(unsigned char *)int v24 = v26;
          int v24 = (int *)((char *)v24 + 1);
          v25 -= 8;
        }
        while (v25);
      }
      break;
    case 2:
      unint64_t v11 = v6[6];
      if (v11)
      {
        char v12 = v6[19];
        uint64_t v13 = 8 * (void)v11;
        do
        {
          uint64_t v14 = *a2++;
          *v12++ = v14;
          v13 -= 8;
        }
        while (v13);
      }
      break;
    case 3:
      int v15 = v6[6];
      if (v15)
      {
        int v16 = v6[19];
        uint64_t v17 = 8 * (void)v15;
        do
        {
          uint64_t v18 = *a2++;
          *(unsigned char *)int v16 = v18;
          int v16 = (int *)((char *)v16 + 1);
          v17 -= 8;
        }
        while (v17);
      }
      break;
    case 4:
      uint64_t v19 = v6[6];
      if (v19)
      {
        float v20 = v6[19];
        uint64_t v21 = 8 * (void)v19;
        do
        {
          uint64_t v22 = *a2++;
          *v20++ = v22;
          v21 -= 8;
        }
        while (v21);
      }
      break;
    case 5:
      uint64_t v27 = v6[6];
      if (v27) {
        memmove(v6[19], a2, 8 * (void)v27);
      }
      break;
    case 6:
      int v28 = v6[6];
      if (v28)
      {
        ldiv_t v29 = (float *)v6[19];
        uint64_t v30 = 8 * (void)v28;
        do
        {
          uint64_t v31 = *a2++;
          float result = (float)v31;
          *v29++ = (float)v31;
          v30 -= 8;
        }
        while (v30);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF15C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array<float *>(int ***a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v7, a1);
  mlx::core::array::init<float *>(a1, a2);
  return a1;
}

void sub_256EF1648(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *mlx::core::array::array(void *a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v7 = a3;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>(a2, &v7, a4, a5, a1);
  return a1;
}

{
  uint64_t v7;

  uint64_t v7 = a3;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>(a2, &v7, a4, a5, a1);
  return a1;
}

void mlx::core::array::make_arrays(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void **a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + v12;
      int v16 = (uint64_t *)(*a2 + v11);
      if ((unint64_t)v13 >= a5[2])
      {
        uint64_t v13 = (void *)std::vector<mlx::core::array>::__emplace_back_slow_path<std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&>(a5, v15, v16, a3, a4);
      }
      else
      {
        std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(v13, v15, v16, a3, a4);
        v13 += 2;
        a5[1] = (uint64_t)v13;
      }
      a5[1] = (uint64_t)v13;
      ++v14;
      uint64_t v6 = *a1;
      v12 += 24;
      v11 += 8;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    uint64_t v17 = (void *)*a5;
    if (v13 != (void *)*a5)
    {
      unint64_t v18 = 0;
      unint64_t v19 = ((uint64_t)v13 - *a5) >> 4;
      do
      {
        uint64_t v27 = 0;
        int v28 = 0;
        uint64_t v29 = 0;
        std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v27, v17, v13, v19);
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<mlx::core::array *,mlx::core::array *,mlx::core::array *>((uint64_t)&v30, (long long *)(v27 + 16 * v18 + 16), v28, v27 + 16 * v18);
        uint64_t v21 = v20;
        for (uint64_t i = v28; i != v21; mlx::core::array::~array((mlx::core::array *)(i - 1)))
          ;
        uint64_t v23 = *a5;
        *(void *)&long long v25 = v27;
        *((void *)&v25 + 1) = v21;
        uint64_t v26 = v29;
        uint64_t v27 = 0;
        int v28 = 0;
        uint64_t v29 = 0;
        uint64_t v24 = *(void *)(v23 + 16 * v18);
        std::vector<mlx::core::array>::__vdeallocate((void **)(v24 + 200));
        *(_OWORD *)(v24 + 200) = v25;
        *(void *)(v24 + 216) = v26;
        uint64_t v26 = 0;
        long long v25 = 0uLL;
        *(_DWORD *)(*(void *)(v23 + 16 * v18) + 224) = (unsigned __int16)v18;
        uint64_t v31 = (void **)&v25;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v31);
        uint64_t v31 = (void **)&v27;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v31);
        ++v18;
        uint64_t v17 = (void *)*a5;
        uint64_t v13 = (void *)a5[1];
        unint64_t v19 = ((uint64_t)v13 - *a5) >> 4;
      }
      while (v18 < v19);
    }
  }
}

void sub_256EF18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array(int ***a1, float *a2, int a3)
{
  uint64_t v6 = operator new(4uLL);
  __p = v6;
  *uint64_t v6 = a3;
  uint64_t v9 = v6 + 1;
  uint64_t v10 = v6 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype const&,void>((uint64_t)&__p, &mlx::core::float32, a1);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<float const*>(a1, a2);
  return a1;
}

void sub_256EF1974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void *mlx::core::array::init<float const*>(int ***a1, float *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v32[0] = &unk_27062AEC8;
  v32[1] = mlx::core::allocator::free;
  v32[3] = v32;
  mlx::core::array::set_data(a1, v4, (uint64_t)v32);
  float result = std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v32);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      uint64_t v7 = v6[6];
      if (v7)
      {
        unsigned __int8 v8 = (BOOL *)v6[19];
        uint64_t v9 = 4 * (void)v7;
        do
        {
          float v10 = *a2++;
          *v8++ = v10 != 0.0;
          v9 -= 4;
        }
        while (v9);
      }
      break;
    case 1:
      uint64_t v23 = v6[6];
      if (v23)
      {
        uint64_t v24 = v6[19];
        uint64_t v25 = 4 * (void)v23;
        do
        {
          float v26 = *a2++;
          *(unsigned char *)uint64_t v24 = (int)v26;
          uint64_t v24 = (int *)((char *)v24 + 1);
          v25 -= 4;
        }
        while (v25);
      }
      break;
    case 2:
      uint64_t v11 = v6[6];
      if (v11)
      {
        uint64_t v12 = v6[19];
        uint64_t v13 = 4 * (void)v11;
        do
        {
          float v14 = *a2++;
          *v12++ = v14;
          v13 -= 4;
        }
        while (v13);
      }
      break;
    case 3:
      uint64_t v15 = v6[6];
      if (v15)
      {
        int v16 = v6[19];
        uint64_t v17 = 4 * (void)v15;
        do
        {
          float v18 = *a2++;
          *(unsigned char *)int v16 = (int)v18;
          int v16 = (int *)((char *)v16 + 1);
          v17 -= 4;
        }
        while (v17);
      }
      break;
    case 4:
      unint64_t v19 = v6[6];
      if (v19)
      {
        float v20 = v6[19];
        uint64_t v21 = 4 * (void)v19;
        do
        {
          float v22 = *a2++;
          *v20++ = (int)v22;
          v21 -= 4;
        }
        while (v21);
      }
      break;
    case 5:
      uint64_t v27 = v6[6];
      if (v27)
      {
        int v28 = v6[19];
        uint64_t v29 = 4 * (void)v27;
        do
        {
          float v30 = *a2++;
          *(void *)int v28 = (uint64_t)v30;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
      }
      break;
    case 6:
      uint64_t v31 = v6[6];
      if (v31) {
        float result = memmove(v6[19], a2, 4 * (void)v31);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF1B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array(int ***a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = operator new(4uLL);
  __p = v7;
  _DWORD *v7 = a3;
  float v10 = v7 + 1;
  uint64_t v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    float v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<int const*>(a1, a2);
  return a1;
}

void sub_256EF1C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<int const*>(int ***a1, int *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v28[0] = &unk_27062AEC8;
  v28[1] = mlx::core::allocator::free;
  v28[3] = v28;
  mlx::core::array::set_data(a1, v4, (uint64_t)v28);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v28);
  uint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      unsigned __int8 v8 = v6[6];
      if (v8)
      {
        uint64_t v9 = (BOOL *)v6[19];
        uint64_t v10 = 4 * (void)v8;
        do
        {
          int v11 = *a2++;
          *v9++ = v11 != 0;
          v10 -= 4;
        }
        while (v10);
      }
      break;
    case 1:
      uint64_t v12 = v6[6];
      if (v12)
      {
        uint64_t v13 = v6[19];
        uint64_t v14 = 4 * (void)v12;
        do
        {
          int v15 = *a2++;
          *(unsigned char *)uint64_t v13 = v15;
          uint64_t v13 = (int *)((char *)v13 + 1);
          v14 -= 4;
        }
        while (v14);
      }
      break;
    case 2:
    case 4:
      uint64_t v7 = v6[6];
      if (v7) {
        memmove(v6[19], a2, 4 * (void)v7);
      }
      break;
    case 3:
      int v16 = v6[6];
      if (v16)
      {
        uint64_t v17 = v6[19];
        uint64_t v18 = 4 * (void)v16;
        do
        {
          int v19 = *a2++;
          *(unsigned char *)uint64_t v17 = v19;
          uint64_t v17 = (int *)((char *)v17 + 1);
          v18 -= 4;
        }
        while (v18);
      }
      break;
    case 5:
      float v20 = v6[6];
      if (v20)
      {
        uint64_t v21 = v6[19];
        uint64_t v22 = 4 * (void)v20;
        do
        {
          uint64_t v23 = *a2++;
          *(void *)uint64_t v21 = v23;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
      }
      break;
    case 6:
      uint64_t v24 = v6[6];
      if (v24)
      {
        uint64_t v25 = (float *)v6[19];
        uint64_t v26 = 4 * (void)v24;
        do
        {
          int v27 = *a2++;
          float result = (float)v27;
          *v25++ = (float)v27;
          v26 -= 4;
        }
        while (v26);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256EF1E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

int ***mlx::core::array::array(int ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>(a3, &v9, a1);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)v10, a5);
  mlx::core::array::set_data(a1, a2, (uint64_t)v10);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v10);
  return a1;
}

void sub_256EF1F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::array::set_data(int ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>(&v22, a3, &v21);
  uint64_t v4 = *a1;
  long long v5 = v21;
  long long v21 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)v4[18];
  *(_OWORD *)(v4 + 17) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v21 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  uint64_t result = mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v22);
  unsigned __int8 v8 = *a1;
  uint64_t v9 = (*a1)[6];
  v8[19] = (int *)result;
  v8[20] = v9;
  *((unsigned char *)v8 + 168) |= 1u;
  *((unsigned char *)*a1 + 168) |= 2u;
  uint64_t v10 = *a1;
  int v11 = **a1;
  uint64_t v12 = (*a1)[1];
  if (v11 != v12)
  {
    uint64_t v13 = v11 + 1;
    if (v11 + 1 != v12)
    {
      int v14 = *v11;
      int v15 = v11 + 1;
      do
      {
        int v17 = *v15++;
        int v16 = v17;
        BOOL v18 = v14 < v17;
        if (v14 <= v17) {
          int v14 = v16;
        }
        if (v18) {
          int v11 = v13;
        }
        uint64_t v13 = v15;
      }
      while (v15 != v12);
    }
  }
  unint64_t v19 = (unint64_t)v10[6];
  if (v19 >= 2) {
    char v20 = 4 * (v19 == *v11);
  }
  else {
    char v20 = 4;
  }
  *((unsigned char *)v10 + 168) = (_BYTE)v10[21] & 0xFB | v20;
  return result;
}

void mlx::core::array::detach(mlx::core::array *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(uint64_t **)(*(void *)this + 200);
  uint64_t v4 = *(uint64_t **)(*(void *)this + 208);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v7 = *(void *)(*v3 + 176);
      uint64_t v6 = *(void *)(*v3 + 184);
      uint64_t v8 = *v3;
      if (v6 != v7)
      {
        do
          mlx::core::array::~array((mlx::core::array *)(v6 - 16));
        while (v6 != v7);
        uint64_t v8 = *v3;
      }
      *(void *)(v5 + 184) = v7;
      uint64_t v10 = *(void *)(v8 + 200);
      uint64_t v9 = *(void *)(v8 + 208);
      uint64_t v11 = v8;
      if (v9 != v10)
      {
        do
          mlx::core::array::~array((mlx::core::array *)(v9 - 16));
        while (v9 != v10);
        uint64_t v11 = *v3;
      }
      *(void *)(v8 + 208) = v10;
      *(_DWORD *)(v11 + 224) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 72);
      *(void *)(v11 + 64) = 0;
      *(void *)(v11 + 72) = 0;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v3 += 2;
    }
    while (v3 != v4);
    uint64_t v2 = *(void *)this;
  }
  uint64_t v14 = *(void *)(v2 + 176);
  uint64_t v13 = *(void *)(v2 + 184);
  uint64_t v15 = v2;
  if (v13 != v14)
  {
    do
      mlx::core::array::~array((mlx::core::array *)(v13 - 16));
    while (v13 != v14);
    uint64_t v15 = *(void *)this;
  }
  *(void *)(v2 + 184) = v14;
  uint64_t v17 = *(void *)(v15 + 200);
  uint64_t v16 = *(void *)(v15 + 208);
  uint64_t v18 = v15;
  if (v16 != v17)
  {
    do
      mlx::core::array::~array((mlx::core::array *)(v16 - 16));
    while (v16 != v17);
    uint64_t v18 = *(void *)this;
  }
  *(void *)(v15 + 208) = v17;
  *(_DWORD *)(v18 + 224) = 0;
  unint64_t v19 = *(std::__shared_weak_count **)(v18 + 72);
  *(void *)(v18 + 64) = 0;
  *(void *)(v18 + 72) = 0;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void mlx::core::array::eval(mlx::core::array *this)
{
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  int v3 = *(_DWORD *)(*(void *)this + 80);
  if (v3)
  {
    if (v3 == 1)
    {
      mlx::core::Event::wait((mlx::core::Event *)(v2 + 88));
      *(_DWORD *)(*(void *)this + 80) = 2;
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    v10[0] = *(void *)this;
    v10[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v8 = (void **)&v6;
    char v9 = 0;
    uint64_t v5 = operator new(0x10uLL);
    *(void *)&long long v6 = v5;
    uint64_t v7 = v5 + 2;
    void *v5 = v2;
    v5[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v6 + 1) = v5 + 2;
    mlx::core::eval(&v6);
    uint64_t v8 = (void **)&v6;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v8);
    mlx::core::array::~array((mlx::core::array *)v10);
  }
}

void sub_256EF2288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::array::is_tracer(mlx::core::array *this)
{
  if (*(unsigned char *)(*(void *)this + 128)) {
    BOOL v1 = mlx::core::detail::InTracing::tracing_counter <= 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

void mlx::core::array::set_data(uint64_t *a1, uint64_t a2, uint64_t a3, __n128 *a4, char a5, uint64_t a6)
{
  uint64_t v16 = a2;
  std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>(&v16, a6, &v15);
  uint64_t v10 = *a1;
  long long v11 = v15;
  long long v15 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 144);
  *(_OWORD *)(v10 + 136) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  uint64_t v13 = mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v16);
  uint64_t v14 = *a1;
  *(void *)(v14 + 152) = v13;
  *(void *)(v14 + 160) = a3;
  std::vector<unsigned long>::__move_assign(v14 + 24, a4);
  *(unsigned char *)(*a1 + 168) = a5;
}

char *mlx::core::array::copy_shared_buffer(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a1;
  uint64_t v14 = *(void *)(*(void *)a2 + 136);
  uint64_t v13 = *(void *)(*(void *)a2 + 144);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = *(std::__shared_weak_count **)(v12 + 144);
  *(void *)(v12 + 136) = v14;
  *(void *)(v12 + 144) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *a1;
  uint64_t result = (char *)(*a1 + 24);
  if (result != (char *)a3)
  {
    uint64_t result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    uint64_t v16 = *a1;
  }
  *(unsigned char *)(v16 + 168) = a4;
  uint64_t v18 = *a1;
  *(void *)(v18 + 152) = *(void *)(*(void *)a2 + 152) + *(unsigned __int8 *)(*a1 + 60) * a6;
  *(void *)(v18 + 160) = a5;
  return result;
}

char *mlx::core::array::copy_shared_buffer(mlx::core::array *this, const mlx::core::array *a2)
{
  return mlx::core::array::copy_shared_buffer((uint64_t *)this, (uint64_t)a2, *(void *)a2 + 24, *(unsigned char *)(*(void *)a2 + 168), *(void *)(*(void *)a2 + 160), 0);
}

char *mlx::core::array::move_shared_buffer(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a1;
  long long v14 = *(_OWORD *)(*a2 + 136);
  *(void *)(v12 + 136) = 0;
  *(void *)(v12 + 144) = 0;
  long long v15 = *(std::__shared_weak_count **)(v13 + 144);
  *(_OWORD *)(v13 + 136) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *a1;
  uint64_t result = (char *)(*a1 + 24);
  if (result != (char *)a3)
  {
    uint64_t result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    uint64_t v16 = *a1;
  }
  *(unsigned char *)(v16 + 168) = a4;
  uint64_t v18 = *a1;
  *(void *)(v18 + 152) = *(void *)(*a2 + 152) + *(unsigned __int8 *)(*a1 + 60) * a6;
  *(void *)(v18 + 160) = a5;
  return result;
}

void mlx::core::array::move_shared_buffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v2 = *a2;
  }
  mlx::core::array::move_shared_buffer(a1, v4, v2 + 24, *(unsigned char *)(v2 + 168), *(void *)(v2 + 160), 0);
  mlx::core::array::~array((mlx::core::array *)v4);
}

void sub_256EF2544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::array::~array(mlx::core::array *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    if (!*(_DWORD *)(v2 + 80))
    {
      uint64_t v5 = *(void *)(v2 + 200);
      uint64_t v4 = *(void *)(v2 + 208);
      if (v4 != v5)
      {
        uint64_t v6 = (v4 - v5) >> 4;
        uint64_t v7 = *((void *)this + 1);
        if (v7) {
          uint64_t v7 = *(void *)(v7 + 8) + 1;
        }
        BOOL v8 = v7 == v6 + 1;
        uint64_t v9 = v5;
        while (1)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10) {
            uint64_t v10 = *(void *)(v10 + 8) + 1;
          }
          if (!v8 || v10 != v6) {
            break;
          }
          v9 += 16;
          BOOL v8 = 1;
          if (v9 == v4)
          {
            do
            {
              long long v11 = (void *)(*(void *)v5 + 208);
              uint64_t v12 = (void *)*v11;
              uint64_t v13 = *(void **)(*(void *)v5 + 200);
              if (v13 != (void *)*v11)
              {
                do
                {
                  long long v14 = (std::__shared_weak_count *)v13[1];
                  void *v13 = 0;
                  v13[1] = 0;
                  if (v14) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                  }
                  v13 += 2;
                }
                while (v13 != v12);
                long long v11 = (void *)(*(void *)v5 + 208);
                long long v15 = (void *)*v11;
                uint64_t v13 = *(void **)(*(void *)v5 + 200);
                while (v15 != v13)
                  mlx::core::array::~array((mlx::core::array *)(v15 - 2));
              }
              void *v11 = v13;
              v5 += 16;
            }
            while (v5 != v4);
            break;
          }
        }
      }
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void mlx::core::array::ArrayDesc::init(mlx::core::array::ArrayDesc *this)
{
  uint64_t v2 = (void *)((char *)this + 24);
  std::vector<unsigned long>::resize((uint64_t)this + 24, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2);
  *((void *)this + 6) = 1;
  uint64_t v3 = (*((void *)this + 1) - *(void *)this) >> 2;
  unsigned int v4 = v3 - 1;
  if ((int)v3 - 1 >= 0)
  {
    uint64_t v5 = (int *)(*(void *)this + 4 * v4);
    uint64_t v6 = (uint64_t *)(*v2 + 8 * v4);
    uint64_t v7 = 1;
    do
    {
      *v6-- = v7;
      uint64_t v8 = *v5--;
      uint64_t v7 = *((void *)this + 6) * v8;
      *((void *)this + 6) = v7;
      LODWORD(v3) = v3 - 1;
    }
    while (v3);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 22);
  uint64_t v10 = (uint64_t *)*((void *)this + 23);
  if (v9 != v10)
  {
    int v11 = mlx::core::detail::InTracing::tracing_counter;
    int v12 = *((unsigned __int8 *)this + 128);
    do
    {
      uint64_t v13 = *v9;
      v9 += 2;
      if (*(unsigned char *)(v13 + 128)) {
        BOOL v14 = v11 <= 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = !v14;
      v12 |= v15;
      *((unsigned char *)this + 128) = v12;
    }
    while (v9 != v10);
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 80) = 2;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  mlx::core::array::ArrayDesc::init((mlx::core::array::ArrayDesc *)a1);
  return a1;
}

void sub_256EF2810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  BOOL v14 = v13;
  a10 = (void **)(v10 + 200);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 144);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  mlx::core::array::ArrayDesc::ArrayDesc(v10, v12, v11);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a5;
  *(void *)(a1 + 192) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  mlx::core::array::ArrayDesc::init((mlx::core::array::ArrayDesc *)a1);
  return a1;
}

void sub_256EF2940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v15 = v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v17 = *(std::__shared_weak_count **)(v10 + 144);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  mlx::core::array::ArrayDesc::ArrayDesc(v10, v13, v12, v11);
  _Unwind_Resume(a1);
}

void mlx::core::array::ArrayDesc::~ArrayDesc(mlx::core::array::ArrayDesc *this)
{
  unint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *((void *)this + 23);
  unsigned int v4 = (void **)((char *)this + 176);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 8);
      if (v5 && !*(void *)(v5 + 8)) {
        std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100]((uint64_t *)&v19, v2);
      }
      v2 += 16;
    }
    while (v2 != v3);
    while (1)
    {
      uint64_t v13 = v20;
      if (v19 == v20) {
        break;
      }
      uint64_t v7 = (uint64_t)*(v20 - 2);
      uint64_t v6 = (std::__shared_weak_count *)*(v20 - 1);
      *(v20 - 2) = 0;
      *(v13 - 1) = 0;
      uint64_t v8 = v20;
      uint64_t v9 = (std::__shared_weak_count *)*(v20 - 1);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      char v20 = v8 - 2;
      uint64_t v10 = *(void *)(v7 + 176);
      uint64_t v11 = *(void *)(v7 + 184);
      while (v10 != v11)
      {
        uint64_t v12 = *(void *)(v10 + 8);
        if (v12 && !*(void *)(v12 + 8)) {
          std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100]((uint64_t *)&v19, v10);
        }
        v10 += 16;
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  uint64_t v22 = &v19;
  std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  unint64_t v19 = (void **)((char *)this + 200);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = v4;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v19);
  BOOL v14 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = (void *)*((void *)this + 3);
  if (v17)
  {
    *((void *)this + 4) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v18;
    operator delete(v18);
  }
}

void **std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v12);
    BOOL v14 = &v13[16 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[16 * v15];
    *(_OWORD *)BOOL v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    void v16[2] = v14 + 16;
    std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (_OWORD *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::~__split_buffer(v16);
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    uint64_t v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_256EF2BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::array::ArrayIterator::ArrayIterator(uint64_t this, const mlx::core::array *a2, int a3)
{
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = a3;
  if (*(void *)(*(void *)a2 + 8) == **(void **)a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot iterate over 0-d array.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  return this;
}

void sub_256EF2C4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::array::ArrayIterator::operator*(int *a1@<X0>, const void ***a2@<X8>)
{
  std::vector<int>::size_type v4 = (uint64_t)(*(void *)(**(void **)a1 + 8) - ***(void ***)a1) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v21, v4, __x);
  uint64_t v5 = **(void **)a1;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  *(void *)__x = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  uint64_t v6 = **(void **)a1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
  uint64_t v8 = (char *)v15;
  int64_t v9 = v16 - ((unsigned char *)v15 + 4);
  if (v16 != (char *)v15 + 4) {
    memmove(v15, (char *)v15 + 4, v16 - ((unsigned char *)v15 + 4));
  }
  uint64_t v16 = &v8[v9];
  *v21.__begin_ = a1[2];
  **(_DWORD **)__x = a1[2] + 1;
  mlx::core::slice(*(const void ****)a1, (uint64_t)&v21, (uint64_t)__x, v7, 0, v14);
  __p = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 2);
  mlx::core::reshape(v14, (uint64_t)&__p, v10, 0, a2);
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)v14);
  if (v15)
  {
    uint64_t v16 = (char *)v15;
    operator delete(v15);
  }
  if (*(void *)__x)
  {
    unint64_t v19 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_256EF2DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  uint64_t v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(void *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlx::core::array>::__emplace_back_slow_path<std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&>(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, void **a5)
{
  uint64_t v6 = (void *)*a1;
  uint64_t v7 = (a1[1] - *a1) >> 4;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  uint64_t v14 = a1[2] - (void)v6;
  if (v14 >> 3 > v8) {
    unint64_t v8 = v14 >> 3;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v8;
  }
  int v28 = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v13, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v25 = v16;
  v26.i64[0] = (uint64_t)&v16[16 * v7];
  int v27 = &v16[16 * v15];
  std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(v26.i64[0], a2, a3, a4, a5);
  uint64_t v17 = v26.i64[0];
  uint64_t v18 = v26.i64[0] + 16;
  v26.i64[1] = v26.i64[0] + 16;
  uint64_t v20 = (void *)*a1;
  unint64_t v19 = (void *)a1[1];
  if (v19 == (void *)*a1)
  {
    int64x2_t v22 = vdupq_n_s64((unint64_t)v19);
  }
  else
  {
    do
    {
      long long v21 = *((_OWORD *)v19 - 1);
      v19 -= 2;
      *(_OWORD *)(v17 - 16) = v21;
      v17 -= 16;
      *unint64_t v19 = 0;
      v19[1] = 0;
    }
    while (v19 != v20);
    int64x2_t v22 = *(int64x2_t *)a1;
    uint64_t v18 = v26.i64[1];
  }
  *a1 = v17;
  a1[1] = v18;
  int64x2_t v26 = v22;
  uint64_t v23 = (char *)a1[2];
  a1[2] = (uint64_t)v27;
  int v27 = v23;
  uint64_t v25 = (char *)v22.i64[0];
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v25);
  return v18;
}

void sub_256EF2F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::construct_at[abi:ne180100]<mlx::core::array,std::vector<int>,mlx::core::Dtype const&,std::shared_ptr<mlx::core::Primitive> const&,std::vector<mlx::core::array> const&,mlx::core::array*>(void *a1, uint64_t a2, uint64_t *a3, void *a4, void **a5)
{
  *(_OWORD *)__p = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a4[1];
  *(void *)&long long v11 = *a4;
  *((void *)&v11 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v9, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  uint64_t v14 = v6;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>((long long *)__p, &v14, &v11, &v9, a1);
  unint64_t v15 = (void **)&v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_256EF305C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16)
{
  *(void *)(v17 - 40) = v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<mlx::core::array *,mlx::core::array *,mlx::core::array *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      unint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<mlx::core::array>::__vdeallocate(void **a1)
{
  BOOL v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    std::vector<int>::size_type v4 = v1;
    if (v3 != v1)
    {
      do
        mlx::core::array::~array((mlx::core::array *)(v3 - 16));
      while (v3 != v1);
      std::vector<int>::size_type v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 std::vector<unsigned long>::__move_assign(uint64_t a1, __n128 *a2)
{
  std::vector<int>::size_type v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *a1;
      long long v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    size_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<mlx::core::array::ArrayDesc>>,std::reverse_iterator<std::shared_ptr<mlx::core::array::ArrayDesc>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<mlx::core::array::ArrayDesc>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<mlx::core::array::ArrayDesc>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void *std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,void>@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, long long *a3@<X3>, long long *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,std::allocator<mlx::core::array::ArrayDesc>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_256EF36FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,std::allocator<mlx::core::array::ArrayDesc>,0>(void *a1, long long *a2, uint64_t *a3, long long *a4, long long *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270632520;
  std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,mlx::core::array::ArrayDesc*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_256EF3758(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype &,std::shared_ptr<mlx::core::Primitive>,std::vector<mlx::core::array>,mlx::core::array::ArrayDesc*>(uint64_t a1, long long *a2, uint64_t *a3, long long *a4, long long *a5)
{
  long long v6 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = *a3;
  long long v11 = *a4;
  *(_OWORD *)__p = v6;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v9 = *a5;
  uint64_t v10 = *((void *)a5 + 2);
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  mlx::core::array::ArrayDesc::ArrayDesc(a1, (uint64_t)__p, v7, (uint64_t)&v11, (uint64_t)&v9);
  long long v14 = (void **)&v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_256EF380C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p)
{
  *(void *)(v16 - 24) = v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 24));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype const&,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype const&,std::allocator<mlx::core::array::ArrayDesc>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_256EF388C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::array::ArrayDesc>::__shared_ptr_emplace[abi:ne180100]<std::vector<int>,mlx::core::Dtype const&,std::allocator<mlx::core::array::ArrayDesc>,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270632520;
  std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype const&,mlx::core::array::ArrayDesc*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_256EF38E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::array::ArrayDesc,std::vector<int>,mlx::core::Dtype const&,mlx::core::array::ArrayDesc*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)__p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  mlx::core::array::ArrayDesc::ArrayDesc(a1, (uint64_t)__p, *a3);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_256EF3958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<mlx::core::array::Data,std::allocator<mlx::core::array::Data>,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::array::Data>::__shared_ptr_emplace[abi:ne180100]<mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,std::allocator<mlx::core::array::Data>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_256EF39C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::array::Data>::__shared_ptr_emplace[abi:ne180100]<mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,std::allocator<mlx::core::array::Data>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270633280;
  std::construct_at[abi:ne180100]<mlx::core::array::Data,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,mlx::core::array::Data*>(a1 + 3, a2, a3);
  return a1;
}

void sub_256EF3A1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

void std::__shared_ptr_emplace<mlx::core::array::Data>::__on_zero_shared(uint64_t a1)
{
}

void *std::construct_at[abi:ne180100]<mlx::core::array::Data,mlx::core::allocator::Buffer &,std::function<void ()(mlx::core::allocator::Buffer)> &,mlx::core::array::Data*>(void *a1, uint64_t *a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  *a1 = v4;
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v6);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_256EF3B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx_metal_start_capture(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string __p = *(std::string *)(a1 + 16);
  }
  mlx::core::metal::start_capture(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_256EF3BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::BlockMaskedMM::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  v58[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (*a3)[7];
  if (v3 != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[BlockMaskedMM::eval] Currently only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)(*a3)[6] * BYTE4(v3)));
  v58[0] = &unk_27062AEC8;
  v58[1] = mlx::core::allocator::free;
  v58[3] = v58;
  mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v58);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v58);
  uint64_t v8 = *(mlx::core::array **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  unint64_t v47 = v9 - *(void *)a2;
  mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()(*(mlx::core::array **)a2, v47 > 0x30, *(_DWORD *)(*(void *)(v9 - 16) + 56) != 0, (uint64_t)v55);
  mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()((mlx::core::array *)((char *)v8 + 16), v47 > 0x30, *(_DWORD *)(*(void *)(*(void *)(a2 + 8) - 16) + 56) != 0, (uint64_t)v52);
  uint64_t v10 = v57[1] - *v57;
  if ((unint64_t)v10 <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v11 = v54[1];
  if (v11 == *v54) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v12 = *v57 + 4 * (v10 >> 2);
  int v13 = *(_DWORD *)(v11 - 4);
  int v48 = *(_DWORD *)(v12 - 8);
  if (v48) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    int v15 = *(_DWORD *)(v12 - 4);
    if (v15)
    {
      int v49 = v15;
      uint64_t v16 = v13;
      size_t v17 = *a3;
      unint64_t v51 = v13 * (uint64_t)v48;
      if (v51 <= (unint64_t)(*a3)[6])
      {
        unint64_t v18 = 0;
        uint64_t v50 = (uint64_t)v47 >> 4;
        int v42 = v15 * v13;
        int v43 = v15 * v48;
        v45 = (void *)a2;
        v46 = a3;
        uint64_t v44 = a1;
        do
        {
          uint64_t v19 = v57[19];
          uint64_t v20 = *v57;
          unint64_t v21 = (unint64_t)(v57[1] - *v57) >> 2;
          uint64_t v22 = 0;
          uint64_t v23 = (v21 - 1);
          if ((int)v21 - 1 >= 0)
          {
            int quot = v43 * v18;
            uint64_t v25 = v57[3];
            do
            {
              ldiv_t v26 = ldiv(quot, *(int *)(v20 + 4 * v23));
              int quot = v26.quot;
              v22 += *(void *)(v25 + 8 * v23--) * v26.rem;
            }
            while (v23 != -1);
          }
          uint64_t v27 = v54[19];
          uint64_t v28 = *v54;
          unint64_t v29 = (unint64_t)(v54[1] - *v54) >> 2;
          uint64_t v30 = 0;
          uint64_t v31 = (v29 - 1);
          if ((int)v29 - 1 >= 0)
          {
            int v32 = v42 * v18;
            uint64_t v33 = v54[3];
            do
            {
              ldiv_t v34 = ldiv(v32, *(int *)(v28 + 4 * v31));
              int v32 = v34.quot;
              v30 += *(void *)(v33 + 8 * v31--) * v34.rem;
            }
            while (v31 != -1);
          }
          int v35 = (float *)(v19 + 4 * v22);
          uint64_t v36 = v17[19];
          if (v47 >= 0x31)
          {
            if (v55[0]) {
              uint64_t v37 = 1;
            }
            else {
              uint64_t v37 = v56;
            }
            if (v55[0]) {
              uint64_t v38 = v56;
            }
            else {
              uint64_t v38 = 1;
            }
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(v45[1] - 32, v35, *(_DWORD *)(v44 + 20), v18, v48, v49, v37, v38);
            if (v52[0]) {
              uint64_t v39 = 1;
            }
            else {
              uint64_t v39 = v53;
            }
            if (v52[0]) {
              uint64_t v40 = v53;
            }
            else {
              uint64_t v40 = 1;
            }
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(v45[1] - 16, (float *)(v27 + 4 * v30), *(_DWORD *)(v44 + 20), v18, v49, v16, v39, v40);
            size_t v17 = *v46;
          }
          if (v17[1] == *v17) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          cblas_sgemm_NEWLAPACK();
          if (v50 == 5 || v50 == 3) {
            mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(*v45 + 32, (float *)&v36[v18 * v51], *(_DWORD *)(v44 + 20), v18, v48, v16, v16, 1);
          }
          ++v18;
          size_t v17 = *v46;
        }
        while ((unint64_t)(*v46)[6] / v51 > v18);
      }
    }
    else
    {
      bzero((*a3)[19], *((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v54);
  mlx::core::array::~array((mlx::core::array *)&v57);
}

void sub_256EF4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, mlx::core::array *a14, mlx::core::array *a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0::operator()(mlx::core::array *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(const void **)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = v10 - *(void *)v8;
  unint64_t v12 = v11 >> 2;
  if (a3) {
    goto LABEL_2;
  }
  if ((const void *)v10 == v9) {
    goto LABEL_38;
  }
  uint64_t v19 = *(void *)(v8 + 24);
  uint64_t v20 = *(void *)(v19 + 8 * (v12 - 2));
  uint64_t v21 = *(void *)(v19 + 8 * (v12 - 1));
  if (v20 != *((_DWORD *)v9 + v12 - 1) || v21 != 1)
  {
    if (v20 != 1) {
      goto LABEL_2;
    }
    if ((unint64_t)v11 > 4)
    {
      if (v21 == *((_DWORD *)v9 + v12 - 2))
      {
        if (a2)
        {
          memset(v36, 0, sizeof(v36));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v36, v9, v10, v12);
          uint64_t v23 = *(void *)(*(void *)a1 + 56);
          long long v35 = 0uLL;
          uint64_t v34 = 0;
          long long v33 = 0uLL;
          mlx::core::array::array(&v42, (long long *)v36, v23, &v35, &v33);
          uint64_t v44 = (void **)&v33;
          std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
          if (*((void *)&v35 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
          }
          if (v36[0])
          {
            v36[1] = v36[0];
            operator delete(v36[0]);
          }
          mlx::core::copy(a1, &v42, 1, v24);
          *(unsigned char *)a4 = 1;
          uint64_t v25 = v42;
          uint64_t v17 = v43;
          *(void *)(a4 + 8) = v21;
LABEL_32:
          *(void *)(a4 + 16) = v25;
LABEL_8:
          *(void *)(a4 + 24) = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          }
          mlx::core::array::~array((mlx::core::array *)&v42);
          return;
        }
        *(unsigned char *)a4 = 1;
        *(void *)(a4 + 8) = v21;
        goto LABEL_34;
      }
LABEL_2:
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v9, v10, v12);
      uint64_t v13 = *(void *)(*(void *)a1 + 56);
      long long v31 = 0uLL;
      uint64_t v30 = 0;
      long long v29 = 0uLL;
      mlx::core::array::array(&v42, (long long *)__p, v13, &v31, &v29);
      uint64_t v44 = (void **)&v29;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      mlx::core::copy(a1, &v42, 2, v14);
      uint64_t v15 = *(void *)(*(void *)a1 + 8);
      if (v15 == **(void **)a1) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v16 = *(int *)(v15 - 4);
      *(unsigned char *)a4 = 0;
      unint64_t v18 = v42;
      uint64_t v17 = v43;
      *(void *)(a4 + 8) = v16;
      *(void *)(a4 + 16) = v18;
      goto LABEL_8;
    }
LABEL_38:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  if (a2)
  {
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, v9, v10, v12);
    uint64_t v26 = *(void *)(*(void *)a1 + 56);
    long long v39 = 0uLL;
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    mlx::core::array::array(&v42, &v40, v26, &v39, &v37);
    uint64_t v44 = (void **)&v37;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (*((void *)&v39 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
    }
    if ((void)v40)
    {
      *((void *)&v40 + 1) = v40;
      operator delete((void *)v40);
    }
    mlx::core::copy(a1, &v42, 1, v27);
    *(unsigned char *)a4 = 0;
    uint64_t v25 = v42;
    uint64_t v17 = v43;
    *(void *)(a4 + 8) = v20;
    goto LABEL_32;
  }
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = v20;
LABEL_34:
  uint64_t v28 = *((void *)a1 + 1);
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_256EF436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  mlx::core::array::~array((mlx::core::array *)(v24 - 72));
  _Unwind_Resume(a1);
}

uint64_t mlx::core::BlockMaskedMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(uint64_t result, float *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)result;
  uint64_t v9 = **(void **)result;
  unint64_t v10 = *(void *)(*(void *)result + 8) - v9;
  if (v10 <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v15 = (*(void *)(*(void *)result + 8) - v9) >> 2;
  uint64_t v16 = v15 - 2;
  unint64_t v17 = v10 >> 2;
  uint64_t v18 = v8[3];
  uint64_t v19 = (v17 - 1);
  uint64_t v58 = v15 - 1;
  uint64_t v20 = 0;
  if ((int)v17 - 1 >= 0)
  {
    LODWORD(result) = *(_DWORD *)(v9 + 4 * (v15 - 1)) * a4 * *(_DWORD *)(v9 + 4 * v16);
    do
    {
      ldiv_t v21 = ldiv((int)result, *(int *)(v9 + 4 * v19));
      uint64_t result = v21.quot;
      v20 += *(void *)(v18 + 8 * v19--) * v21.rem;
    }
    while (v19 != -1);
  }
  uint64_t v22 = *(void *)(v18 + 8 * v16);
  uint64_t v23 = *(void *)(v18 + 8 * v58);
  uint64_t v24 = v8[19];
  int v25 = a3 - 1;
  uint64_t v26 = ((a3 - 1 + a5) / a3);
  if (*((_DWORD *)v8 + 14))
  {
    if ((int)v26 >= 1)
    {
      uint64_t v27 = 0;
      LODWORD(result) = a5;
      uint64_t v28 = ((v25 + a6) / a3);
      do
      {
        if (a3 >= (int)result) {
          int v29 = result;
        }
        else {
          int v29 = a3;
        }
        if ((int)v28 >= 1)
        {
          uint64_t v30 = 0;
          int v31 = a5 - v27 * a3;
          if (v31 >= a3) {
            int v31 = a3;
          }
          int v32 = a2;
          int v33 = a6;
          do
          {
            uint64_t v34 = v33;
            if (a3 < (uint64_t)v33) {
              uint64_t v34 = a3;
            }
            float v35 = *(float *)(v24 + 4 * (v20 + v27 * v22 + v30 * v23));
            if (v35 != 1.0 && v31 >= 1)
            {
              uint64_t v37 = 0;
              int v38 = a6 - v30 * a3;
              if (v38 >= a3) {
                int v38 = a3;
              }
              long long v39 = v32;
              do
              {
                long long v40 = v39;
                uint64_t v41 = v34;
                if (v38 >= 1)
                {
                  do
                  {
                    float *v40 = v35 * *v40;
                    v40 += a8;
                    --v41;
                  }
                  while (v41);
                }
                ++v37;
                v39 += a7;
              }
              while (v37 != v29);
            }
            ++v30;
            v33 -= a3;
            v32 += a8 * a3;
          }
          while (v30 != v28);
        }
        ++v27;
        uint64_t result = (result - a3);
        a2 += a7 * a3;
      }
      while (v27 != v26);
    }
  }
  else if ((int)v26 >= 1)
  {
    uint64_t v42 = 0;
    LODWORD(result) = a5;
    uint64_t v43 = ((v25 + a6) / a3);
    do
    {
      if (a3 >= (int)result) {
        int v44 = result;
      }
      else {
        int v44 = a3;
      }
      if ((int)v43 >= 1)
      {
        uint64_t v45 = 0;
        int v46 = a5 - v42 * a3;
        if (v46 >= a3) {
          int v46 = a3;
        }
        unint64_t v47 = a2;
        int v48 = a6;
        do
        {
          uint64_t v49 = v48;
          if (a3 < (uint64_t)v48) {
            uint64_t v49 = a3;
          }
          if (*(unsigned char *)(v24 + v20 + v42 * v22 + v45 * v23)) {
            BOOL v50 = 1;
          }
          else {
            BOOL v50 = v46 < 1;
          }
          if (!v50)
          {
            uint64_t v51 = 0;
            int v52 = a6 - v45 * a3;
            if (v52 >= a3) {
              int v52 = a3;
            }
            uint64_t v53 = v47;
            do
            {
              uint64_t v54 = v53;
              uint64_t v55 = v49;
              if (v52 >= 1)
              {
                do
                {
                  float *v54 = 0.0;
                  v54 += a8;
                  --v55;
                }
                while (v55);
              }
              ++v51;
              v53 += a7;
            }
            while (v51 != v44);
          }
          ++v45;
          v48 -= a3;
          v47 += a8 * a3;
        }
        while (v45 != v43);
      }
      ++v42;
      uint64_t result = (result - a3);
      a2 += a7 * a3;
    }
    while (v42 != v26);
  }
  return result;
}

void mlx::core::GatherMM::eval(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  v92[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (*a3)[7];
  if (v3 != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[GatherMM::eval] Currently only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = a3;
  uint64_t v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)(*a3)[6] * BYTE4(v3)));
  v92[0] = &unk_27062AEC8;
  v92[1] = mlx::core::allocator::free;
  v92[3] = v92;
  mlx::core::array::set_data(v4, (uint64_t)v6, (uint64_t)v92);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v92);
  uint64_t v7 = *a2;
  mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(*a2, (uint64_t)v87);
  mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()((mlx::core::array *)((char *)v7 + 16), (uint64_t)v85);
  uint64_t v8 = (unsigned char *)v88[1] - (unsigned char *)*v88;
  if ((unint64_t)v8 <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v9 = v86[1];
  if (v9 == *v86) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = (uint64_t)*v88 + 4 * (v8 >> 2);
  int v11 = *(v9 - 1);
  int v69 = *(_DWORD *)(v10 - 8);
  if (v69) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    int v13 = *(_DWORD *)(v10 - 4);
    float v14 = *v4;
    if (v13)
    {
      unint64_t v15 = (unint64_t)v14[6];
      uint64_t v16 = *a2;
      unint64_t v17 = *v14;
      uint64_t v18 = (uint64_t)(v14[1] - 2);
      unint64_t v19 = (v18 - (uint64_t)*v14) >> 2;
      int v89 = 0;
      v90 = 0;
      uint64_t v91 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v89, v17, v18, v19);
      ldiv_t v82 = 0;
      int v83 = 0;
      uint64_t v84 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v82, v89, (uint64_t)v90, (v90 - (unsigned char *)v89) >> 2);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      uint64_t v20 = *v88;
      uint64_t v21 = (uint64_t)v88[1] - 8;
      unint64_t v22 = (v21 - (uint64_t)*v88) >> 2;
      int v89 = 0;
      v90 = 0;
      uint64_t v91 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v89, v20, v21, v22);
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v79, v89, (uint64_t)v90, (v90 - (unsigned char *)v89) >> 2);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      uint64_t v23 = v88[3];
      uint64_t v24 = (uint64_t)v88[4] - 16;
      v90 = 0;
      uint64_t v91 = 0;
      int v89 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&v89, v23, v24, (v24 - (uint64_t)v23) >> 3);
      v76 = 0;
      v77 = 0;
      uint64_t v78 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v76, v89, (uint64_t)v90, (v90 - (unsigned char *)v89) >> 3);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      int v25 = *v86;
      uint64_t v26 = (uint64_t)v86[1] - 8;
      unint64_t v27 = (v26 - (uint64_t)*v86) >> 2;
      int v89 = 0;
      v90 = 0;
      uint64_t v91 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v89, v25, v26, v27);
      v73 = 0;
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v89, (uint64_t)v90, (v90 - (unsigned char *)v89) >> 2);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      uint64_t v28 = v86[3];
      uint64_t v29 = (uint64_t)v86[4] - 16;
      v90 = 0;
      uint64_t v91 = 0;
      int v89 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&v89, v28, v29, (v29 - (uint64_t)v28) >> 3);
      std::string __p = 0;
      v71 = 0;
      uint64_t v72 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v89, (uint64_t)v90, (v90 - (unsigned char *)v89) >> 3);
      unint64_t v68 = v11 * (uint64_t)v69;
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v68 <= v15)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v15 / v68;
        uint64_t v66 = *(void *)(*((void *)v16 + 6) + 152);
        uint64_t v67 = *(void *)(*((void *)v16 + 4) + 152);
        if (v15 / v68 <= 1) {
          uint64_t v31 = 1;
        }
        uint64_t v64 = v31;
        uint64_t v65 = v16;
        do
        {
          int v32 = (uint64_t *)*((void *)v16 + 4);
          uint64_t v33 = v30;
          if ((v32[21] & 2) == 0)
          {
            uint64_t v34 = *v32;
            unint64_t v35 = (unint64_t)(v32[1] - *v32) >> 2;
            uint64_t v33 = 0;
            uint64_t v36 = (v35 - 1);
            if ((int)v35 - 1 >= 0)
            {
              uint64_t v37 = v32[3];
              int quot = v30;
              do
              {
                ldiv_t v39 = ldiv(quot, *(int *)(v34 + 4 * v36));
                int quot = v39.quot;
                v33 += *(void *)(v37 + 8 * v36--) * v39.rem;
              }
              while (v36 != -1);
            }
          }
          int v40 = *(_DWORD *)(v67 + 4 * v33);
          uint64_t v41 = (uint64_t *)*((void *)v16 + 6);
          uint64_t v42 = v30;
          if ((v41[21] & 2) == 0)
          {
            uint64_t v43 = *v41;
            unint64_t v44 = (unint64_t)(v41[1] - *v41) >> 2;
            uint64_t v42 = 0;
            uint64_t v45 = (v44 - 1);
            if ((int)v44 - 1 >= 0)
            {
              uint64_t v46 = v41[3];
              int v47 = v30;
              do
              {
                ldiv_t v48 = ldiv(v47, *(int *)(v43 + 4 * v45));
                int v47 = v48.quot;
                v42 += *(void *)(v46 + 8 * v45--) * v48.rem;
              }
              while (v45 != -1);
            }
          }
          uint64_t v49 = v4;
          int v50 = *(_DWORD *)(v66 + 4 * v42);
          uint64_t v51 = (int *)v79;
          unint64_t v52 = (unint64_t)(v80 - (unsigned char *)v79) >> 2;
          uint64_t v53 = 0;
          uint64_t v54 = (v52 - 1);
          if ((int)v52 - 1 >= 0)
          {
            uint64_t v55 = v76;
            do
            {
              ldiv_t v56 = ldiv(v40, v51[v54]);
              v53 += v55[v54--] * v56.rem;
              int v40 = v56.quot;
            }
            while (v54 != -1);
          }
          int v57 = (int *)v73;
          unint64_t v58 = (unint64_t)(v74 - (unsigned char *)v73) >> 2;
          uint64_t v59 = 0;
          uint64_t v60 = (v58 - 1);
          if ((int)v58 - 1 >= 0)
          {
            int v61 = __p;
            do
            {
              ldiv_t v62 = ldiv(v50, v57[v60]);
              v59 += v61[v60--] * v62.rem;
              int v50 = v62.quot;
            }
            while (v60 != -1);
          }
          if ((*v49)[1] == **v49) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v4 = v49;
          cblas_sgemm_NEWLAPACK();
          ++v30;
          uint64_t v16 = v65;
        }
        while (v30 != v64);
      }
      if (__p)
      {
        v71 = __p;
        operator delete(__p);
      }
      if (v73)
      {
        unint64_t v74 = v73;
        operator delete(v73);
      }
      if (v76)
      {
        v77 = v76;
        operator delete(v76);
      }
      if (v79)
      {
        uint64_t v80 = v79;
        operator delete(v79);
      }
      if (v82)
      {
        int v83 = v82;
        operator delete(v82);
      }
    }
    else
    {
      bzero(v14[19], *((unsigned __int8 *)v14 + 60) * (void)v14[6]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v86);
  mlx::core::array::~array((mlx::core::array *)&v88);
}

void sub_256EF4D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, mlx::core::array *a13, mlx::core::array *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  int v40 = *(void **)(v38 - 152);
  if (v40)
  {
    *(void *)(v38 - 144) = v40;
    operator delete(v40);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  mlx::core::array::~array(a13);
  mlx::core::array::~array(a14);
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::eval(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1::operator()(mlx::core::array *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(_DWORD **)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = v6 - *(void *)v4;
  if (v6 == *(void *)v4) {
    goto LABEL_22;
  }
  unint64_t v8 = v7 >> 2;
  uint64_t v9 = (v7 >> 2) - 2;
  uint64_t v10 = (v7 >> 2) - 1;
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = *(void *)(v11 + 8 * v9);
  uint64_t v13 = *(void *)(v11 + 8 * v10);
  if (v12 == v5[v10] && v13 == 1)
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = v12;
LABEL_11:
    uint64_t v15 = *((void *)a1 + 1);
    *(void *)(a2 + 16) = v4;
    *(void *)(a2 + 24) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  if (v12 == 1)
  {
    if ((unint64_t)(v6 - *(void *)v4) > 4)
    {
      if (v13 == v5[v9])
      {
        *(unsigned char *)a2 = 1;
        *(void *)(a2 + 8) = v13;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
LABEL_22:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_13:
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v5, v6, v8);
  uint64_t v16 = *(void *)(*(void *)a1 + 56);
  long long v24 = 0uLL;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  mlx::core::array::array(v26, (long long *)__p, v16, &v24, &v22);
  unint64_t v27 = (void **)&v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::copy(a1, v26, 2, v17);
  uint64_t v18 = *(void *)(*(void *)a1 + 8);
  if (v18 == **(void **)a1) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v19 = *(int *)(v18 - 4);
  *(unsigned char *)a2 = 0;
  uint64_t v21 = v26[0];
  uint64_t v20 = v26[1];
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v21;
  *(void *)(a2 + 24) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v20 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::array::~array((mlx::core::array *)v26);
}

void sub_256EF4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256EF5064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, void **a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  v31[32] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    long long v22 = mlx::core::operator<<(&v30, &mlx::core::BOOL_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" not supported for arange.", 26);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, &v29);
    std::logic_error::logic_error(exception, &v29);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  BOOL v13 = fabs(*(double *)&a5) == INFINITY;
  double v12 = fabs(a6);
  BOOL v13 = v13 || v12 == INFINITY;
  if (v13)
  {
    long long v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v24, "[arange] Cannot compute length.");
    goto LABEL_21;
  }
  if (fabs(a7) == INFINITY && (*(double *)&a5 < a6 && a7 > 0.0 || *(double *)&a5 > a6 && a7 < 0.0))
  {
    uint64_t v30 = a5;
    mlx::core::array::array<double>(a4, (double *)&v30, 1, a1);
    return;
  }
  double v16 = ceil((a6 - *(double *)&a5) / a7);
  if (v16 > 2147483650.0)
  {
    long long v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v24, "[arange] Maximum size exceeded.");
LABEL_21:
    __cxa_throw(v24, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  float v17 = operator new(4uLL);
  __p[0] = v17;
  *float v17 = (int)v16 & ~((int)v16 >> 31);
  __p[1] = v17 + 1;
  __p[2] = v17 + 1;
  uint64_t v18 = mlx::core::to_stream(a2, a3);
  int v20 = v19;
  uint64_t v21 = operator new(0x48uLL);
  v21[1] = 0;
  v21[2] = 0;
  *uint64_t v21 = &unk_2706332D0;
  *((_DWORD *)v21 + 10) = v20;
  v21[3] = &unk_270634F90;
  v21[4] = v18;
  *((double *)v21 + 6) = *(double *)&a5;
  *((double *)v21 + 7) = a6;
  *((double *)v21 + 8) = a7;
  *(void *)&long long v27 = v21 + 3;
  *((void *)&v27 + 1) = v21;
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  mlx::core::array::array(a4, (long long *)__p, a1, &v27, &v25);
  uint64_t v30 = (void **)&v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EF5380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, void **a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v11 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v11, v10 | 0x100000000, a3, a4, a5, a6);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, void **a5@<D0>, double a6@<D1>)
{
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(a1, v11, v10 | 0x100000000, a4, a5, a6, 1.0);
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, void **a4@<D0>, double a5@<D1>)
{
  uint64_t v9 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v9, v8 | 0x100000000, a3, a4, a5, 1.0);
}

void mlx::core::arange(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>, double a5@<D0>)
{
  uint64_t v9 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(a1, v9, v8 | 0x100000000, a4, 0, a5, 1.0);
}

void mlx::core::arange(mlx::core *a1@<X0>, uint64_t a2@<X1>, int ***a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = mlx::core::to_stream(a1, a2);
  mlx::core::arange(0x400000006, v7, v6 | 0x100000000, a3, 0, a4, 1.0);
}

void mlx::core::arange(int a1@<W0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, int ***a6@<X8>)
{
  double v7 = (double)a1;
  double v8 = (double)a2;
  double v9 = (double)a3;
  uint64_t v11 = mlx::core::to_stream(a4, a5);
  mlx::core::arange(0x400000004, v11, v10 | 0x100000000, a6, *(void ***)&v7, v8, v9);
}

void mlx::core::arange(int a1@<W0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, int ***a5@<X8>)
{
  double v6 = (double)a1;
  double v7 = (double)a2;
  double v9 = mlx::core::to_stream(a3, a4);
  mlx::core::arange(0x400000004, v9, v8 | 0x100000000, a5, *(void ***)&v6, v7, 1.0);
}

void mlx::core::arange(int a1@<W0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, int ***a4@<X8>)
{
  double v5 = (double)a1;
  double v7 = mlx::core::to_stream(a2, a3);
  mlx::core::arange(0x400000004, v7, v6 | 0x100000000, a4, 0, v5, 1.0);
}

void mlx::core::linspace(int a1@<W0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, int **a6@<D0>, double a7@<D1>)
{
  v40[32] = *MEMORY[0x263EF8340];
  if (a1 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[linspace] number of samples, ", 30);
    int v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", must be non-negative.", 23);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v40, &v38);
    std::logic_error::logic_error(exception, &v38);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v12 = a1 - 1;
  if (a1 == 1)
  {
    ldiv_t v39 = a6;
    uint64_t v13 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
    mlx::core::array::array<double>(v37, (double *)&v39, 1, v13);
    float v14 = mlx::core::to_stream(a3, a4);
    mlx::core::astype(v37, a2, v14, v15 | 0x100000000, a5);
    double v16 = v37;
  }
  else
  {
    double v18 = (double)a1;
    int v19 = mlx::core::to_stream(a3, a4);
    uint64_t v21 = mlx::core::to_stream(v19, v20 | 0x100000000);
    mlx::core::arange(0x400000006, v21, v22 | 0x100000000, &v39, 0, v18, 1.0);
    uint64_t v23 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
    float v24 = (a7 - *(double *)&a6) / (double)v12;
    mlx::core::array::array<float>(v35, v23, v24);
    int v25 = mlx::core::to_stream(a3, a4);
    mlx::core::multiply(&v39, v35, v25, v26 | 0x100000000, &v38);
    uint64_t v27 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
    mlx::core::array::array<double>(v34, v27, *(double *)&a6);
    uint64_t v28 = mlx::core::to_stream(a3, a4);
    mlx::core::add(&v38, v34, v28, v29 | 0x100000000, v36);
    uint64_t v30 = mlx::core::to_stream(a3, a4);
    mlx::core::astype(v36, a2, v30, v31 | 0x100000000, a5);
    mlx::core::array::~array((mlx::core::array *)v36);
    mlx::core::array::~array((mlx::core::array *)v34);
    mlx::core::array::~array((mlx::core::array *)&v38);
    mlx::core::array::~array((mlx::core::array *)v35);
    double v16 = &v39;
  }
  mlx::core::array::~array((mlx::core::array *)v16);
}

void sub_256EF5A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void mlx::core::astype(void *a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v27[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  if (a2 == *(_DWORD *)(*a1 + 56))
  {
    uint64_t v9 = a1[1];
    *a5 = v8;
    a5[1] = v9;
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v24 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v23, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
    *(_OWORD *)std::string __p = *(_OWORD *)v23;
    uint64_t v22 = v24;
    v23[1] = 0;
    uint64_t v24 = 0;
    v23[0] = 0;
    int v12 = mlx::core::to_stream(a3, a4);
    LODWORD(a4) = v13;
    float v14 = operator new(0x38uLL);
    v14[1] = 0;
    void v14[2] = 0;
    *float v14 = &unk_270633320;
    *((_DWORD *)v14 + 10) = a4;
    v14[3] = &unk_270635568;
    v14[4] = v12;
    *(void *)((char *)v14 + 44) = a2;
    *(void *)&long long v20 = v14 + 3;
    *((void *)&v20 + 1) = v14;
    uint64_t v15 = a1[1];
    v27[0] = *a1;
    uint64_t v16 = v27[0];
    v27[1] = v15;
    *a1 = 0;
    a1[1] = 0;
    int v19 = 0;
    long long v18 = 0uLL;
    int v25 = (void **)&v18;
    char v26 = 0;
    float v17 = operator new(0x10uLL);
    *(void *)&long long v18 = v17;
    int v19 = v17 + 2;
    *float v17 = v16;
    v17[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v18 + 1) = v17 + 2;
    mlx::core::array::array(a5, (long long *)__p, a2, &v20, &v18);
    int v25 = (void **)&v18;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
    mlx::core::array::~array((mlx::core::array *)v27);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v23[0])
    {
      v23[1] = v23[0];
      operator delete(v23[0]);
    }
  }
}

void sub_256EF5CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void mlx::core::add(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  float v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  float v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *float v17 = &unk_270633CD0;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270634F08;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EF5F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::multiply(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  float v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  float v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *float v17 = &unk_270633D70;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636858;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EF61D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::as_strided(const void ***a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  v34[2] = *(const void ***)MEMORY[0x263EF8340];
  uint64_t v31 = a4;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v13 = (uint64_t)(*a1)[7];
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v29;
  uint64_t v28 = v30;
  v29[1] = 0;
  uint64_t v30 = 0;
  v29[0] = 0;
  uint64_t v23 = mlx::core::to_stream(a5, a6);
  int v24 = v14;
  std::allocate_shared[abi:ne180100]<mlx::core::AsStrided,std::allocator<mlx::core::AsStrided>,mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,void>((uint64_t *)&v23, (long long *)a2, a3, &v31, &v25);
  long long v26 = v25;
  long long v25 = 0uLL;
  int v15 = operator new(4uLL);
  std::string __p = v15;
  *int v15 = -1;
  uint64_t v19 = v15 + 1;
  long long v20 = v15 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a5, a6, v34);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  int v32 = (void **)&v21;
  char v33 = 0;
  int v16 = operator new(0x10uLL);
  *(void *)&long long v21 = v16;
  *((void *)&v21 + 1) = v16;
  uint64_t v22 = (char *)(v16 + 2);
  float v17 = v34[1];
  *int v16 = v34[0];
  v16[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v21 + 1) = v16 + 2;
  mlx::core::array::array(a7, (long long *)v27, v13, &v26, &v21);
  int v32 = (void **)&v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)v34);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_256EF6458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  *(void *)(v27 - 104) = v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 104));
  mlx::core::array::~array((mlx::core::array *)(v27 - 88));
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void mlx::core::reshape(const void ***a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  v42[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  uint64_t v11 = **a1;
  size_t v12 = (unsigned char *)v10[1] - v11;
  uint64_t v13 = *(int **)a2;
  int v14 = *(int **)(a2 + 8);
  uint64_t v15 = (uint64_t)v14 - *(void *)a2;
  if (v12 == v15 && !memcmp(v11, *(const void **)a2, v12))
  {
    uint64_t v28 = a1[1];
    *a5 = v10;
    a5[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v28 + 1, 1uLL, memory_order_relaxed);
    }
    return;
  }
  if (v14 == v13)
  {
    uint64_t v19 = 1;
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v15 >> 2;
  if ((unint64_t)(v15 >> 2) <= 1) {
    uint64_t v17 = 1;
  }
  unsigned int v18 = -1;
  uint64_t v19 = 1;
  do
  {
    uint64_t v20 = v13[v16];
    if (v20 == -1)
    {
      if ((v18 & 0x80000000) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "[reshape] Reshape can only infer one dimension.");
        goto LABEL_33;
      }
      unsigned int v18 = v16;
    }
    else
    {
      v19 *= v20;
    }
    ++v16;
  }
  while (v17 != v16);
  if (!v19)
  {
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t v19 = 0;
      goto LABEL_18;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[reshape] Cannot infer the shape of an empty array");
LABEL_33:
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if ((v18 & 0x80000000) == 0)
  {
    uint64_t quot = ldiv((uint64_t)v10[6], v19).quot;
    v13[v18] = quot;
    v19 *= quot;
  }
LABEL_18:
  if (v10[6] != (const void *)v19)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"[reshape] Cannot reshape array of size ", 39);
    uint64_t v30 = (void *)std::ostream::operator<<();
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" into shape ", 12);
    int v32 = mlx::core::operator<<(v31, (void *)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
    char v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v41, &v39);
    std::logic_error::logic_error(v33, &v39);
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v33, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v40 = (void **)mlx::core::to_stream(a3, a4);
  v41[0] = v22;
  std::allocate_shared[abi:ne180100]<mlx::core::Reshape,std::allocator<mlx::core::Reshape>,mlx::core::Stream,std::vector<int> &,void>((uint64_t *)&v40, a2, &v39);
  long long v23 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  long long v25 = *a1;
  int v24 = (atomic_ullong *)a1[1];
  uint64_t v26 = (uint64_t)v25[7];
  long long v36 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
  *(_OWORD *)std::string __p = v23;
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = 0uLL;
  v42[0] = v25;
  v42[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
  }
  long long v34 = 0uLL;
  unint64_t v35 = 0;
  int v40 = (void **)&v34;
  LOBYTE(v41[0]) = 0;
  uint64_t v27 = operator new(0x10uLL);
  *(void *)&long long v34 = v27;
  unint64_t v35 = v27 + 2;
  void *v27 = v25;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v34 + 1) = v27 + 2;
  mlx::core::array::array(a5, (long long *)__p, v26, &v36, &v34);
  int v40 = (void **)&v34;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v40);
  mlx::core::array::~array((mlx::core::array *)v42);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39.__r_.__value_.__l.__size_);
  }
}

void sub_256EF6848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void mlx::core::copy(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v25[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  v21[1] = 0;
  uint64_t v22 = 0;
  v21[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v21, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  *(_OWORD *)std::string __p = *(_OWORD *)v21;
  uint64_t v20 = v22;
  v21[1] = 0;
  uint64_t v22 = 0;
  v21[0] = 0;
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  size_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_2706333C0;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_270635920;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v13 = a1[1];
  v25[0] = *a1;
  uint64_t v14 = v25[0];
  v25[1] = v13;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  long long v23 = (void **)&v16;
  char v24 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  uint64_t v17 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  long long v23 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v23);
  mlx::core::array::~array((mlx::core::array *)v25);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_256EF6AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void mlx::core::full(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v33[2] = *(const void ***)MEMORY[0x263EF8340];
  size_t v12 = *(_DWORD **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(void *)a1 != v13)
  {
    uint64_t v14 = *(_DWORD **)a1;
    do
    {
      if ((*v14 & 0x80000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "[full] Negative dimensions not allowed.");
        __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v14;
    }
    while (v14 != (_DWORD *)v13);
  }
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, v12, v13, (v13 - (uint64_t)v12) >> 2);
  *(_OWORD *)std::string __p = *(_OWORD *)v29;
  uint64_t v28 = v30;
  v29[1] = 0;
  uint64_t v30 = 0;
  v29[0] = 0;
  uint64_t v15 = mlx::core::to_stream(a4, a5);
  int v17 = v16;
  long long v18 = operator new(0x30uLL);
  v18[1] = 0;
  v18[2] = 0;
  *long long v18 = &unk_270633410;
  *((_DWORD *)v18 + 10) = v17;
  v18[3] = &unk_2706360E8;
  v18[4] = v15;
  *(void *)&long long v26 = v18 + 3;
  *((void *)&v26 + 1) = v18;
  long long v22 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  mlx::core::astype(&v22, a3, a4, a5, v23);
  mlx::core::broadcast_to(v23, (const void **)a1, a4, a5, v33);
  long long v24 = 0uLL;
  long long v25 = 0;
  uint64_t v31 = (void **)&v24;
  char v32 = 0;
  uint64_t v19 = operator new(0x10uLL);
  *(void *)&long long v24 = v19;
  *((void *)&v24 + 1) = v19;
  long long v25 = (char *)(v19 + 2);
  uint64_t v20 = v33[1];
  *uint64_t v19 = v33[0];
  v19[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v20 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v24 + 1) = v19 + 2;
  mlx::core::array::array(a6, (long long *)__p, a3, &v26, &v24);
  uint64_t v31 = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v31);
  mlx::core::array::~array((mlx::core::array *)v33);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)&v22);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_256EF6D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  *(void *)(v25 - 120) = v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 120));
  mlx::core::array::~array((mlx::core::array *)(v25 - 104));
  mlx::core::array::~array((mlx::core::array *)&a12);
  mlx::core::array::~array((mlx::core::array *)&a9);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void mlx::core::broadcast_to(const void ***a1@<X0>, const void **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  v38[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  int v11 = **a1;
  size_t v12 = (unsigned char *)v10[1] - v11;
  uint64_t v13 = *a2;
  if (v12 == (unsigned char *)a2[1] - v13 && !memcmp(v11, v13, v12))
  {
    long long v22 = a1[1];
    *a5 = v10;
    a5[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::broadcast_shapes(v10, a2, &v37);
    std::vector<int>::pointer begin = v37.__begin_;
    std::vector<int>::pointer end = v37.__end_;
    if ((char *)v37.__end_ - (char *)v37.__begin_ != (unsigned char *)a2[1] - (unsigned char *)*a2
      || memcmp(v37.__begin_, *a2, (char *)v37.__end_ - (char *)v37.__begin_))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v35);
      long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Cannot broadcast array of shape ", 32);
      uint64_t v24 = mlx::core::operator<<(v23, *a1);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" into shape ", 12);
      long long v26 = mlx::core::operator<<(v25, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36, &v34);
      std::logic_error::logic_error(exception, &v34);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    __p[0] = begin;
    __p[1] = end;
    __p[2] = v37.__end_cap_.__value_;
    memset(&v37, 0, sizeof(v37));
    uint64_t v17 = (uint64_t)(*a1)[7];
    uint64_t v30 = mlx::core::to_stream(a3, a4);
    int v31 = v18;
    std::allocate_shared[abi:ne180100]<mlx::core::Broadcast,std::allocator<mlx::core::Broadcast>,mlx::core::Stream,std::vector<int> const&,void>((uint64_t *)&v30, (uint64_t)a2, &v34);
    long long v32 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v20 = *a1;
    uint64_t v19 = a1[1];
    v38[0] = *a1;
    v38[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    }
    long long v28 = 0uLL;
    unsigned int v29 = 0;
    unint64_t v35 = (void **)&v28;
    v36[0] = 0;
    uint64_t v21 = operator new(0x10uLL);
    *(void *)&long long v28 = v21;
    unsigned int v29 = v21 + 2;
    *uint64_t v21 = v20;
    v21[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    }
    *((void *)&v28 + 1) = v21 + 2;
    mlx::core::array::array(a5, (long long *)__p, v17, &v32, &v28);
    unint64_t v35 = (void **)&v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v35);
    mlx::core::array::~array((mlx::core::array *)v38);
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
    if (v34.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.__r_.__value_.__l.__size_);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v37.__begin_)
    {
      v37.__end_ = v37.__begin_;
      operator delete(v37.__begin_);
    }
  }
}

void sub_256EF70D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      int v31 = *(void **)(v29 - 112);
      if (v31)
      {
        *(void *)(v29 - 104) = v31;
        operator delete(v31);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void mlx::core::full(long long *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *(void *)(*a2 + 56);
  long long v7 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  long long v10 = *(_OWORD *)a2;
  *(_OWORD *)std::string __p = v7;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = mlx::core::to_stream(a3, a4);
  mlx::core::full((uint64_t)__p, &v10, v6, v8, v9 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)&v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EF7220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::zeros(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  mlx::core::array::array<int>(v11, 0, a2);
  unsigned int v9 = mlx::core::to_stream(a3, a4);
  mlx::core::full((long long *)__p, v11, v9, v10 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EF72EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::zeros_like(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 56);
  uint64_t v8 = mlx::core::to_stream(a2, a3);
  mlx::core::zeros(v5, v6, v8, v7 | 0x100000000, a4);
}

void mlx::core::ones(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  mlx::core::array::array<int>(v11, 1, a2);
  unsigned int v9 = mlx::core::to_stream(a3, a4);
  mlx::core::full((long long *)__p, v11, v9, v10 | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EF7424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::ones_like(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 56);
  uint64_t v8 = mlx::core::to_stream(a2, a3);
  mlx::core::ones(v5, v6, v8, v7 | 0x100000000, a4);
}

void mlx::core::eye(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  int v32 = a2;
  int v33 = a1;
  if (a1 < 1 || (int)a2 <= 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[eye] N and M must be positive integers.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v14 = (char *)operator new(8uLL);
  *(void *)uint64_t v14 = a1 | (unint64_t)(a2 << 32);
  uint64_t v29 = v14 + 8;
  uint64_t v30 = v14 + 8;
  int v28 = v14;
  mlx::core::zeros((uint64_t)&v28, a4, a5, a6, &v31);
  operator delete(v14);
  if ((int)a2 <= a3 || -a3 >= a1)
  {
    *(_OWORD *)a7 = v31;
    long long v31 = 0uLL;
  }
  else
  {
    if (a3 < 0)
    {
      LODWORD(v28) = a3 + a1;
      uint64_t v15 = &v28;
      if (a3 + a1 > (int)a2) {
        uint64_t v15 = (char **)&v32;
      }
    }
    else
    {
      LODWORD(v28) = a2 - a3;
      uint64_t v15 = (char **)&v33;
      if ((int)a2 - a3 < a1) {
        uint64_t v15 = &v28;
      }
    }
    int v16 = *(_DWORD *)v15;
    int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v17 = mlx::core::to_stream(a5, a6);
    mlx::core::arange(0x400000004, v17, v18 | 0x100000000, (int ***)&__p, COERCE_VOID_((double)(-a3 & ~(-a3 >> 31))), (double)(v16 + (-a3 & ~(-a3 >> 31))), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v28, (uint64_t)&__p);
    mlx::core::array::~array((mlx::core::array *)&__p);
    uint64_t v19 = mlx::core::to_stream(a5, a6);
    mlx::core::arange(0x400000004, v19, v20 | 0x100000000, (int ***)&__p, COERCE_VOID_((double)(a3 & ~(a3 >> 31))), (double)(v16 + (a3 & ~(a3 >> 31))), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v28, (uint64_t)&__p);
    mlx::core::array::~array((mlx::core::array *)&__p);
    uint64_t v21 = (char *)operator new(0xCuLL);
    uint64_t v25 = v21 + 12;
    long long v26 = v21 + 12;
    *(_DWORD *)uint64_t v21 = v16;
    *(void *)(v21 + 4) = 0x100000001;
    std::string __p = v21;
    mlx::core::ones((uint64_t)&__p, a4, a5, a6, v27);
    operator delete(v21);
    long long v22 = operator new(8uLL);
    std::string __p = v22;
    *long long v22 = 0x100000000;
    uint64_t v25 = v22 + 1;
    long long v26 = v22 + 1;
    mlx::core::scatter((mlx::core::array *)&v31, (const void ****)&v28, (mlx::core::array *)v27, (int **)&__p, 4, a5, a6, a7);
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v27);
    std::string __p = &v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  mlx::core::array::~array((mlx::core::array *)&v31);
}

void sub_256EF7750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a12);
  std::string __p = &a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a17);
  _Unwind_Resume(a1);
}

void mlx::core::scatter(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
}

void mlx::core::identity(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void mlx::core::flatten(const void ***a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11 = **a1;
  uint64_t v12 = (*a1)[1];
  unint64_t v13 = (unint64_t)(v12 - v11) >> 2;
  if ((int)((v13 & (a3 >> 31)) + a3) >= (int)v13 - 1) {
    int v14 = v13 - 1;
  }
  else {
    int v14 = (v13 & (a3 >> 31)) + a3;
  }
  if (v12 == v11)
  {
    uint64_t v17 = (int *)operator new(4uLL);
    long long v36 = v17;
    *uint64_t v17 = 1;
    std::vector<int> v37 = v17 + 1;
    uint64_t v38 = v17 + 1;
    mlx::core::reshape(a1, (uint64_t)&v36, a4, a5, (const void ***)a6);
    std::vector<int>::pointer v18 = v36;
    if (!v36) {
      return;
    }
    std::vector<int> v37 = v36;
    goto LABEL_31;
  }
  unint64_t v15 = ((v13 & (a2 >> 31)) + a2) & ~((int)((v13 & (a2 >> 31)) + a2) >> 31);
  if (v14 < (int)v15)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[flatten] start_axis must be less than or equal to end_axis");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v15 == v14)
  {
    int v16 = a1[1];
    *(void *)a6 = *a1;
    *(void *)(a6 + 8) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
    }
    return;
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v11, (uint64_t)&v11[4 * v15], v15);
  std::vector<int>::pointer end = __p.__end_;
  if (__p.__end_ >= __p.__end_cap_.__value_)
  {
    std::vector<int>::pointer begin = __p.__begin_;
    int64_t v22 = __p.__end_ - __p.__begin_;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v24 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v25);
      std::vector<int>::pointer begin = __p.__begin_;
      std::vector<int>::pointer end = __p.__end_;
    }
    else
    {
      long long v26 = 0;
    }
    int v27 = (int *)&v26[4 * v22];
    int v28 = (int *)&v26[4 * v25];
    int *v27 = -1;
    unsigned int v20 = v27 + 1;
    while (end != begin)
    {
      int v29 = *--end;
      *--int v27 = v29;
    }
    __p.__begin_ = v27;
    __p.__end_ = v20;
    __p.__end_cap_.__value_ = v28;
    if (begin) {
      operator delete(begin);
    }
  }
  else
  {
    *__p.__end_ = -1;
    unsigned int v20 = end + 1;
  }
  __p.__end_ = v20;
  uint64_t v30 = (char *)**a1 + 4 * v14 + 4;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (uint64_t)v20, v30, (char *)(*a1)[1], ((unsigned char *)(*a1)[1] - v30) >> 2);
  int v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, __p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
  mlx::core::reshape(a1, (uint64_t)&v32, a4, a5, (const void ***)a6);
  if (v32)
  {
    int v33 = v32;
    operator delete(v32);
  }
  std::vector<int>::pointer v18 = __p.__begin_;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
LABEL_31:
    operator delete(v18);
  }
}

void sub_256EF7A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::flatten(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void mlx::core::squeeze(mlx::core::array *this@<X0>, unsigned int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = (uint64_t *)&v50;
  unsigned int v9 = *a2;
  unsigned int v10 = a2[1];
  if (*a2 == v10)
  {
    uint64_t v13 = 0;
    int v14 = *a2;
  }
  else
  {
    do
    {
      uint64_t v12 = *v9;
      if ((v12 & 0x80000000) != 0) {
        v12 += (uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2;
      }
      int v48 = v12;
      if ((v12 & 0x80000000) != 0
        || v12 >= (unint64_t)((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[squeeze] Invalid axes ", 23);
        uint64_t v34 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with ", 16);
        unint64_t v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &__p);
        std::logic_error::logic_error(exception, &__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      if (mlx::core::array::shape(this, v12) != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[squeeze] Cannot squeeze axis ", 30);
        std::vector<int> v37 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" with size ", 11);
        mlx::core::array::shape(this, v48);
        uint64_t v38 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" which is not equal to 1.", 25);
        std::string v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &__p);
        std::logic_error::logic_error(v39, &__p);
        v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v39, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v49, &v48, &v48);
      ++v9;
    }
    while (v9 != v10);
    uint64_t v13 = v51;
    unsigned int v9 = *a2;
    int v14 = a2[1];
  }
  if (v13 != v14 - v9)
  {
    int v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "[squeeze] Received duplicate axes.");
    v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v40, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v46, v49, &v50);
  memset(&__p, 0, sizeof(__p));
  unint64_t v15 = *(uint64_t **)this;
  uint64_t v16 = **(void **)this;
  if (*(void *)(*(void *)this + 8) == v16)
  {
    std::string::size_type v19 = 0;
    int v33 = 0;
  }
  else
  {
    uint64_t v41 = a5;
    uint64_t v17 = a3;
    uint64_t v18 = a4;
    std::string::size_type v19 = 0;
    unint64_t v20 = 0;
    int v21 = 0;
    do
    {
      if (v21 < (unint64_t)((uint64_t)(v47[0] - (void)v46) >> 2) && v20 == *((_DWORD *)v46 + v21))
      {
        ++v21;
      }
      else
      {
        int v22 = mlx::core::array::shape(this, v20);
        int v23 = v22;
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          unint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v26 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v28 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v29);
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            unint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v30 = 0;
          }
          long long v31 = &v30[4 * v26];
          *(_DWORD *)long long v31 = v23;
          std::string::size_type v19 = (std::string::size_type)(v31 + 4);
          while ((void *)size != v25)
          {
            int v32 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
          __p.__r_.__value_.__l.__size_ = v19;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v22;
          std::string::size_type v19 = size + 4;
        }
        __p.__r_.__value_.__l.__size_ = v19;
        unint64_t v15 = *(uint64_t **)this;
        uint64_t v16 = **(void **)this;
      }
      ++v20;
    }
    while (v20 < (v15[1] - v16) >> 2);
    int v33 = (const void *)__p.__r_.__value_.__r.__words[0];
    a4 = v18;
    a3 = v17;
    a5 = v41;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, v33, v19, (uint64_t)(v19 - (void)v33) >> 2);
  mlx::core::reshape((const void ***)this, (uint64_t)&v42, a3, a4, a5);
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v46)
  {
    v47[0] = v46;
    operator delete(v46);
  }
  std::__tree<int>::destroy((uint64_t)&v49, v50);
}

void sub_256EF7FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      std::__tree<int>::destroy(v22 - 120, *(void **)(v22 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::squeeze(mlx::core::array *this@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, const void ***a4@<X8>)
{
  unint64_t v20 = 0;
  int v21 = 0;
  std::string __p = 0;
  if (*(void *)(*(void *)this + 8) != **(void **)this)
  {
    unint64_t v8 = 0;
    do
    {
      if (mlx::core::array::shape(this, v8) == 1)
      {
        unsigned int v9 = v20;
        if (v20 >= v21)
        {
          int v11 = (char *)__p;
          uint64_t v12 = (v20 - (unsigned char *)__p) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v21 - (unsigned char *)__p;
          if ((v21 - (unsigned char *)__p) >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v21, v15);
            int v11 = (char *)__p;
            unsigned int v9 = v20;
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[4 * v12];
          *(_DWORD *)uint64_t v17 = v8;
          unsigned int v10 = v17 + 4;
          while (v9 != v11)
          {
            int v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          std::string __p = v17;
          unint64_t v20 = v10;
          int v21 = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v20 = v8;
          unsigned int v10 = v9 + 4;
        }
        unint64_t v20 = v10;
      }
      ++v8;
    }
    while (v8 < (uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2);
  }
  mlx::core::squeeze(this, (unsigned int **)&__p, a2, a3, a4);
  if (__p)
  {
    unint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_256EF8218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::expand_dims(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  unsigned int v9 = **a1;
  uint64_t v10 = (uint64_t)(*a1)[1];
  int v11 = ((unint64_t)(v10 - (void)v9) >> 2) + 1;
  int v12 = (v11 & (a2 >> 31)) + a2;
  if (v12 < 0 || v12 >= v11)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"[expand_dims] Invalid axis ", 27);
    unint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for output array with ", 23);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v20.__end_, &__x);
    std::logic_error::logic_error(exception, &__x);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, v9, v10, (v10 - (uint64_t)v9) >> 2);
  v14.__i_ = &v20.__begin_[v12];
  LODWORD(__x.__r_.__value_.__l.__data_) = 1;
  std::vector<int>::insert(&v20, v14, (std::vector<int>::value_type *)&__x);
  std::vector<int> __p = v20;
  memset(&v20, 0, sizeof(v20));
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, a5);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
}

void sub_256EF83FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void mlx::core::expand_dims(const void ***a1@<X0>, int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v33, *a2, a2[1]);
  if (v35 != a2[1] - *a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[expand_dims] Received duplicate axes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::__tree<int>::destroy((uint64_t)&v33, v34);
  uint64_t v10 = *a2;
  uint64_t v11 = (uint64_t)a2[1];
  unint64_t v12 = (v11 - (uint64_t)*a2) >> 2;
  std::vector<int>::const_iterator v14 = **a1;
  unint64_t v13 = (*a1)[1];
  long long v36 = 0;
  std::vector<int> v37 = 0;
  uint64_t v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, v10, v11, v12);
  unint64_t v15 = v36;
  uint64_t v16 = v37;
  if (v36 != v37)
  {
    int v17 = ((unint64_t)(v13 - v14) >> 2) + v12;
    int v18 = v36;
    do
    {
      int v19 = (v17 & (*v18 >> 31)) + *v18;
      *int v18 = v19;
      if (v19 < 0 || v19 >= v17)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[expand_dims] Invalid axis ", 27);
        int64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" for output array with ", 23);
        unint64_t v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" dimensions.", 12);
        uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v34, &v32);
        std::logic_error::logic_error(v26, &v32);
        v26->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v26, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v18;
    }
    while (v18 != v16);
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int *>>((uint64_t)&v33, v15, v16);
  if (v35 != a2[1] - *a2)
  {
    int64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "[expand_dims] Received duplicate axes.");
    v28->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v28, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v32, v33, &v34);
  int v20 = *a1;
  memset(&v31, 0, sizeof(v31));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *v20, (uint64_t)v20[1], ((unsigned char *)v20[1] - (unsigned char *)*v20) >> 2);
  std::string::size_type v21 = v32.__r_.__value_.__r.__words[0];
  if (v32.__r_.__value_.__l.__size_ != v32.__r_.__value_.__r.__words[0])
  {
    unint64_t v22 = 0;
    do
    {
      v23.__i_ = &v31.__begin_[*(int *)(v21 + 4 * v22)];
      std::vector<int>::value_type __x = 1;
      std::vector<int>::insert(&v31, v23, &__x);
      ++v22;
      std::string::size_type v21 = v32.__r_.__value_.__r.__words[0];
    }
    while (v22 < (uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 2);
  }
  std::vector<int> __p = v31;
  memset(&v31, 0, sizeof(v31));
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, a5);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  if (v32.__r_.__value_.__r.__words[0])
  {
    v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::__tree<int>::destroy((uint64_t)&v33, v34);
  if (v36)
  {
    std::vector<int> v37 = v36;
    operator delete(v36);
  }
}

void sub_256EF87FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      unint64_t v27 = *(void **)(v25 - 104);
      if (v27)
      {
        *(void *)(v25 - 96) = v27;
        operator delete(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void mlx::core::slice(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  v42[2] = *MEMORY[0x263EF8340];
  uint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  uint64_t v10 = *a1;
  if (v9 != ((unsigned char *)v10[1] - (unsigned char *)*v10) >> 2
    || v9 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2
    || v9 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[slice] Invalid number of indices or strides for ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"array with dimension ", 21);
    int64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__s1, &v38);
    std::logic_error::logic_error(exception, &v38);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v30 = a7;
  uint64_t v16 = __s1;
  if ((_BYTE)v39)
  {
    uint64_t v17 = (uint64_t)v41;
    uint64_t v18 = v41 - (unsigned char *)__s1;
LABEL_8:
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v16, v17, v18 >> 2);
    uint64_t v21 = (uint64_t)(*a1)[7];
    int v33 = mlx::core::to_stream(a5, a6);
    int v34 = v22;
    std::allocate_shared[abi:ne180100]<mlx::core::Slice,std::allocator<mlx::core::Slice>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>((uint64_t)&v33, a2, a3, a4, &v35);
    long long v36 = v35;
    long long v35 = 0uLL;
    int v24 = *a1;
    std::vector<int>::const_iterator v23 = a1[1];
    v42[0] = v24;
    v42[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
    }
    long long v31 = 0uLL;
    std::string v32 = 0;
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v38.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v25 = operator new(0x10uLL);
    *(void *)&long long v31 = v25;
    std::string v32 = v25 + 2;
    void *v25 = v24;
    v25[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
    }
    *((void *)&v31 + 1) = v25 + 2;
    mlx::core::array::array(v30, (long long *)__p, v21, &v36, &v31);
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    mlx::core::array::~array((mlx::core::array *)v42);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_18;
  }
  int v19 = *a1;
  uint64_t v17 = (uint64_t)v41;
  uint64_t v18 = v41 - (unsigned char *)__s1;
  int v20 = **a1;
  if (v41 - (unsigned char *)__s1 != (unsigned char *)(*a1)[1] - v20 || memcmp(__s1, v20, v41 - (unsigned char *)__s1)) {
    goto LABEL_8;
  }
  uint64_t v26 = a1[1];
  char *v30 = v19;
  v30[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v26 + 1, 1uLL, memory_order_relaxed);
  }
LABEL_18:
  if (__s1)
  {
    uint64_t v41 = __s1;
    operator delete(__s1);
  }
}

void sub_256EF8C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void mlx::core::anonymous namespace'::normalize_slice(int **a1@<X0>, int **a2@<X1>, int **a3@<X2>, _DWORD **a4@<X3>, uint64_t a5@<X8>)
{
  std::vector<int>::vector(&v26, a1[1] - *a1);
  uint64_t v10 = *a1;
  char v11 = 0;
  uint64_t v12 = (char *)a1[1] - (char *)*a1;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    std::vector<int>::const_iterator v14 = *a2;
    unint64_t v15 = *a3;
    uint64_t v16 = *a4;
    std::vector<int>::pointer begin = v26.__begin_;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      int v19 = *v10++;
      int v18 = v19;
      int v20 = (v19 & (*v14 >> 31)) + *v14;
      int v21 = (v19 & (*v15 >> 31)) + *v15;
      if ((*v16 & 0x80000000) != 0)
      {
        int v24 = v18 - 1;
        if (v18 - 1 >= v20) {
          int v24 = v20;
        }
        if (v21 < 0) {
          int v25 = -1;
        }
        else {
          int v25 = v21;
        }
        *std::vector<int>::const_iterator v14 = v24;
        if (v25 < v24) {
          int v24 = v25;
        }
        *unint64_t v15 = v24;
        int v23 = (*v14 + ~(*v16 + v24)) / -*v16;
        char v11 = 1;
      }
      else
      {
        if (v18 < v20) {
          int v20 = v18;
        }
        int v22 = v20 & ~(v20 >> 31);
        if (v18 >= v21) {
          int v18 = v21;
        }
        *std::vector<int>::const_iterator v14 = v22;
        if (v18 <= v22) {
          int v18 = v22;
        }
        *unint64_t v15 = v18;
        int v23 = (v18 + ~*v14 + *v16) / *v16;
      }
      *begin++ = v23;
      ++v16;
      ++v15;
      ++v14;
      --v13;
    }
    while (v13);
  }
  *(unsigned char *)a5 = v11;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a5 + 8), v26.__begin_, (uint64_t)v26.__end_, v26.__end_ - v26.__begin_);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_256EF8E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::slice(const void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  int v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<int> __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  std::vector<int>::size_type v11 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
  std::vector<int>::value_type __x = 1;
  std::vector<int>::vector(&v15, v11, &__x);
  uint64_t v12 = mlx::core::to_stream(a4, a5);
  mlx::core::slice(a1, (uint64_t)&v19, (uint64_t)&__p, (uint64_t)&v15, v12, v13 | 0x100000000, a6);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
}

void sub_256EF8F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::slice_update(void *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v10 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  uint64_t v11 = *a1;
  if (v10 != (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2
    || v10 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2
    || v10 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"[slice] Invalid number of indices or strides for ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"array with dimension ", 21);
    int64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v41, &v45);
    std::logic_error::logic_error(exception, &v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::broadcast_to(a2, (const void **)&v41, a6, a7, &v38);
  uint64_t v18 = *a1;
  if (!(_BYTE)v40
    && v42 - (unsigned char *)v41 == *(void *)(v18 + 8) - *(void *)v18
    && !memcmp(v41, *(const void **)v18, v42 - (unsigned char *)v41))
  {
    v37[0] = v38;
    v37[1] = v39;
    if (v39)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      uint64_t v18 = *a1;
    }
    mlx::core::astype(v37, *(void *)(v18 + 56), a6, a7, a8);
    mlx::core::array::~array((mlx::core::array *)v37);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 2);
    uint64_t v19 = *(void *)(*a1 + 56);
    int v32 = mlx::core::to_stream(a6, a7);
    int v33 = v20;
    std::allocate_shared[abi:ne180100]<mlx::core::SliceUpdate,std::allocator<mlx::core::SliceUpdate>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>((uint64_t)&v32, a3, a4, a5, &v34);
    long long v35 = v34;
    long long v34 = 0uLL;
    std::string::size_type v21 = a1[1];
    v45.__r_.__value_.__r.__words[0] = *a1;
    v45.__r_.__value_.__l.__size_ = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
    uint64_t v46 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    long long v30 = 0uLL;
    long long v31 = 0;
    uint64_t v43 = (void **)&v30;
    char v44 = 0;
    int v22 = (char *)operator new(0x20uLL);
    uint64_t v23 = 0;
    *(void *)&long long v30 = v22;
    *((void *)&v30 + 1) = v22;
    long long v31 = v22 + 32;
    do
    {
      int v24 = &v22[v23];
      uint64_t v25 = *(std::string::size_type *)((char *)&v45.__r_.__value_.__l.__size_ + v23);
      *(void *)int v24 = *(std::string::pointer *)((char *)&v45.__r_.__value_.__l.__data_ + v23);
      *((void *)v24 + 1) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      v23 += 16;
    }
    while (v23 != 32);
    *((void *)&v30 + 1) = v22 + 32;
    mlx::core::array::array(a8, (long long *)__p, v19, &v35, &v30);
    uint64_t v43 = (void **)&v30;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v43);
    for (uint64_t i = 16; i != -16; i -= 16)
      mlx::core::array::~array((mlx::core::array *)((char *)&v45 + i));
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v38);
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
}

void sub_256EF936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,void *__p,uint64_t a29)
{
  if (*(char *)(v31 - 97) < 0)
  {
    operator delete(*(void **)(v31 - 120));
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void mlx::core::slice_update(void *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  std::vector<int>::size_type v14 = (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2;
  std::vector<int>::value_type __x = 1;
  std::vector<int>::vector(&v21, v14, &__x);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)a3;
  uint64_t v19 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a4;
  uint64_t v17 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  std::vector<int> __p = v21;
  memset(&v21, 0, sizeof(v21));
  mlx::core::slice_update(a1, a2, (uint64_t)v18, (uint64_t)v16, (uint64_t)&__p, a5, a6, a7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_256EF9584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::split(mlx::core::array *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *(void *)(*(void *)this + 8) - **(void **)this;
  if (a3 >= 0) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = (v9 >> 2) + a3;
  }
  unint64_t v64 = v10;
  if (v10 >= v9 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid axis (", 14);
    int v48 = (void *)std::ostream::operator<<();
    uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)") passed to split", 17);
    int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" for array with shape ", 22);
    uint64_t v51 = mlx::core::operator<<(v50, *(void **)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v63, &v68);
    std::logic_error::logic_error(exception, (const std::string *)&v68);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  unsigned int v13 = *(int **)a2;
  uint64_t v12 = *(char **)(a2 + 8);
  if (*(char **)a2 != v12)
  {
    if ((unint64_t)(v12 - (char *)v13) <= 0x27)
    {
      uint64_t v16 = (char *)(v13 + 1);
      while (v16 != v12)
      {
        int v18 = *((_DWORD *)v16 - 1);
        int v17 = *(_DWORD *)v16;
        v16 += 4;
        if (v17 < v18) {
          goto LABEL_32;
        }
      }
      if (*v13 >= 1)
      {
        int v21 = *((_DWORD *)v12 - 1);
        int v22 = mlx::core::array::shape(this, v10);
        uint64_t v8 = *(void *)this;
        if (v21 < v22)
        {
          unint64_t v23 = ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) + 1;
          v68.__begin_ = *(std::vector<int>::pointer *)(v8 + 56);
          std::vector<mlx::core::Dtype>::vector(&__p, v23, &v68);
          std::vector<std::vector<int>>::vector(&v68, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) + 1, *(void *)this);
          int v24 = *(int **)a2;
          std::vector<int>::pointer begin = v68.__begin_;
          *(_DWORD *)(*(void *)v68.__begin_ + 4 * v10) = **(_DWORD **)a2;
          uint64_t v26 = *(void *)(a2 + 8) - (void)v24;
          if ((unint64_t)v26 >= 5)
          {
            unint64_t v27 = v26 >> 2;
            if (v27 <= 2) {
              unint64_t v27 = 2;
            }
            int64_t v28 = (uint64_t *)(begin + 6);
            unint64_t v29 = v24 + 1;
            unint64_t v30 = v27 - 1;
            do
            {
              uint64_t v31 = *v28;
              v28 += 3;
              *(_DWORD *)(v31 + 4 * v10) = *v29 - *(v29 - 1);
              ++v29;
              --v30;
            }
            while (v30);
          }
          int v32 = mlx::core::array::shape(this, v10) - *(_DWORD *)(*(void *)(a2 + 8) - 4);
          std::vector<int>::pointer v60 = v68.__begin_;
          long long v33 = *(_OWORD *)&v68.__end_;
          *(_DWORD *)(*((void *)v68.__end_ - 3) + 4 * v10) = v32;
          long long v61 = v33;
          memset(&v68, 0, sizeof(v68));
          ldiv_t v56 = mlx::core::to_stream(a4, a5);
          int v57 = v34;
          std::allocate_shared[abi:ne180100]<mlx::core::Split,std::allocator<mlx::core::Split>,mlx::core::Stream,std::vector<int> const&,unsigned long &,void>((uint64_t *)&v56, a2, (uint64_t *)&v64, &v58);
          long long v59 = v58;
          long long v58 = 0uLL;
          uint64_t v36 = *(void *)this;
          uint64_t v35 = *((void *)this + 1);
          v67[0] = v36;
          v67[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)std::vector<int>::value_type __x = 0;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64_t v65 = __x;
          char v66 = 0;
          std::vector<int> v37 = operator new(0x10uLL);
          *(void *)std::vector<int>::value_type __x = v37;
          uint64_t v55 = v37 + 2;
          void *v37 = v36;
          v37[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v54 = v37 + 2;
          mlx::core::array::make_arrays((uint64_t *)&v60, &__p, &v59, (void **)__x, a6);
          uint64_t v65 = __x;
          std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
          mlx::core::array::~array((mlx::core::array *)v67);
          if (*((void *)&v59 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
          }
          if (*((void *)&v58 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
          }
          *(void *)std::vector<int>::value_type __x = &v60;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          *(void *)std::vector<int>::value_type __x = &v68;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          goto LABEL_43;
        }
      }
    }
LABEL_32:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    std::vector<int> __p = 0;
    v63[0] = 0;
    v63[1] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
    std::vector<int>::size_type v38 = (uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2;
    __x[0] = 0;
    std::vector<int>::vector(&v68, v38, __x);
    uint64_t v39 = *(void *)this;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    *(void *)std::vector<int>::value_type __x = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v39, *(void *)(v39 + 8), (uint64_t)(*(void *)(v39 + 8) - *(void *)v39) >> 2);
    uint64_t v40 = *(int **)a2;
    uint64_t v41 = *(void *)(a2 + 8) - *(void *)a2;
    if (v41 == -4)
    {
      uint64_t v42 = *(void **)__x;
      if (!*(void *)__x)
      {
LABEL_41:
        if (v68.__begin_)
        {
          v68.__end_ = v68.__begin_;
          operator delete(v68.__begin_);
        }
LABEL_43:
        if (__p)
        {
          v63[0] = __p;
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      unint64_t v43 = 0;
      unint64_t v44 = v41 >> 2;
      do
      {
        if (v44 <= v43) {
          int v45 = mlx::core::array::shape(this, v10);
        }
        else {
          int v45 = v40[v43];
        }
        *(_DWORD *)(*(void *)__x + 4 * v10) = v45;
        uint64_t v46 = mlx::core::to_stream(a4, a5);
        mlx::core::slice((const void ***)this, (uint64_t)&v68, (uint64_t)__x, v46, v47 | 0x100000000, (const void ***)&v65);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&v65);
        mlx::core::array::~array((mlx::core::array *)&v65);
        uint64_t v42 = *(void **)__x;
        v68.__begin_[v10] = *(_DWORD *)(*(void *)__x + 4 * v10);
        ++v43;
        uint64_t v40 = *(int **)a2;
        unint64_t v44 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      }
      while (v44 + 1 > v43);
    }
    uint64_t v54 = v42;
    operator delete(v42);
    goto LABEL_41;
  }
  uint64_t v19 = *((void *)this + 1);
  v68.__begin_ = (std::vector<int>::pointer)v8;
  v68.__end_ = (std::vector<int>::pointer)v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<int> __p = a6;
  LOBYTE(v63[0]) = 0;
  int v20 = operator new(0x10uLL);
  *a6 = (uint64_t)v20;
  a6[1] = (uint64_t)v20;
  a6[2] = (uint64_t)(v20 + 2);
  *int v20 = v8;
  v20[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  a6[1] = (uint64_t)(v20 + 2);
  mlx::core::array::~array((mlx::core::array *)&v68);
}

void sub_256EF9B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (*(char *)(v26 - 89) < 0)
  {
    operator delete(*(void **)(v26 - 112));
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::split(mlx::core::array *a1@<X0>, uint64_t a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
}

void mlx::core::split(mlx::core::array *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = *(void *)(*(void *)this + 8) - **(void **)this;
  unint64_t v10 = (v9 >> 2) + a3;
  if (a3 >= 0) {
    unint64_t v10 = a3;
  }
  if (v10 >= v9 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Invalid axis ", 13);
    uint64_t v19 = (void *)std::ostream::operator<<();
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" passed to split", 16);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with shape ", 22);
    int v22 = mlx::core::operator<<(v21, *(void **)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v31.__end_, &v30);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v14 = mlx::core::array::shape(this, a3);
  ldiv_t v15 = ldiv(v14, a2);
  if (v15.rem)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Array split does not result in sub arrays with equal size:", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" attempting ", 12);
    int v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" splits along axis ", 19);
    uint64_t v26 = (void *)std::ostream::operator<<();
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" for shape ", 11);
    int64_t v28 = mlx::core::operator<<(v27, *(void **)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".", 1);
    unint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v31.__end_, &v30);
    std::logic_error::logic_error(v29, &v30);
    v29->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v29, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int>::vector(&v31, a2 - 1);
  std::vector<int>::pointer begin = v31.__begin_;
  if (v31.__end_ != v31.__begin_)
  {
    unint64_t v17 = v31.__end_ - v31.__begin_;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    int quot = v15.quot;
    do
    {
      *begin++ = quot;
      quot += LODWORD(v15.quot);
      --v17;
    }
    while (v17);
  }
  mlx::core::split(this, (uint64_t)&v31, a3, a4, a5, a6);
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
}

void sub_256EF9F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_256EF9FB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x256EF9FA8);
}

void mlx::core::split(mlx::core::array *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = mlx::core::to_stream(a3, a4);
  mlx::core::split(a1, a2, 0, v9, v8 | 0x100000000, a5);
}

void mlx::core::meshgrid(const void ****a1@<X0>, char a2@<W1>, unsigned __int16 *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a3 + 23);
  char v8 = v7;
  uint64_t v9 = *((void *)a3 + 1);
  if ((v7 & 0x80u) == 0) {
    uint64_t v10 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v10 = *((void *)a3 + 1);
  }
  if (v10 != 2) {
    goto LABEL_39;
  }
  char v13 = a2;
  ldiv_t v15 = *(_WORD **)a3;
  if ((v7 & 0x80u) == 0) {
    ldiv_t v15 = a3;
  }
  if (*v15 != 31096 && *v15 != 27241)
  {
LABEL_39:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[meshgrid] Invalid indexing value. Valid values are 'xy' and 'ij'.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v17 = *a1;
  uint64_t v16 = a1[1];
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  uint64_t v18 = (char *)v16 - (char *)v17;
  std::vector<int>::size_type v19 = v18 >> 4;
  if (v18)
  {
    uint64_t v38 = v18;
    uint64_t v39 = a3;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if (v19 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v18 >> 4;
    }
    do
    {
      __x[0] = 1;
      std::vector<int>::vector(&v49, v19, __x);
      std::vector<int>::pointer begin = v49.__begin_;
      v49.__begin_[v21] = -1;
      int v24 = &(*a1)[v20];
      std::vector<int> __p = begin;
      long long v47 = *(_OWORD *)&v49.__end_;
      memset(&v49, 0, sizeof(v49));
      mlx::core::reshape(v24, (uint64_t)&__p, a4, a5, (const void ***)__x);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)__x);
      mlx::core::array::~array((mlx::core::array *)__x);
      if (__p)
      {
        *(void *)&long long v47 = __p;
        operator delete(__p);
      }
      if (v49.__begin_)
      {
        v49.__end_ = v49.__begin_;
        operator delete(v49.__begin_);
      }
      ++v21;
      v20 += 2;
    }
    while (v22 != v21);
    uint64_t v18 = v38;
    a3 = v39;
    uint64_t v7 = *((unsigned __int8 *)v39 + 23);
    uint64_t v9 = *((void *)v39 + 1);
    char v8 = *((unsigned char *)v39 + 23);
    char v13 = a2;
  }
  if (v8 < 0) {
    uint64_t v7 = v9;
  }
  if (v7 == 2)
  {
    int v25 = *(unsigned __int16 **)a3;
    if (v8 >= 0) {
      int v25 = a3;
    }
    BOOL v26 = *v25 != 31096;
    if ((unint64_t)v18 >= 0x11 && !v26)
    {
      __x[0] = 1;
      std::vector<int>::vector(&v49, v19, __x);
      unint64_t v27 = *a1;
      std::vector<int>::pointer v28 = v49.__begin_;
      v49.__begin_[1] = (**a1)[6];
      unint64_t v44 = 0;
      uint64_t v45 = 0;
      unint64_t v43 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, v28, (uint64_t)v49.__end_, v49.__end_ - v28);
      mlx::core::reshape(v27, (uint64_t)&v43, a4, a5, (const void ***)__x);
      unint64_t v29 = *(char **)a6;
      long long v30 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      std::vector<int> v31 = (std::__shared_weak_count *)*((void *)v29 + 1);
      *(_OWORD *)unint64_t v29 = v30;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      mlx::core::array::~array((mlx::core::array *)__x);
      if (v43)
      {
        unint64_t v44 = v43;
        operator delete(v43);
      }
      std::vector<int>::pointer v32 = v49.__begin_;
      v49.__begin_[1] = 1;
      long long v33 = *a1 + 2;
      mlx::core *v32 = (*v33)[6];
      uint64_t v41 = v32;
      long long v42 = *(_OWORD *)&v49.__end_;
      memset(&v49, 0, sizeof(v49));
      mlx::core::reshape(v33, (uint64_t)&v41, a4, a5, (const void ***)__x);
      int v34 = *(char **)a6;
      long long v35 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      uint64_t v36 = (std::__shared_weak_count *)*((void *)v34 + 3);
      *((_OWORD *)v34 + 1) = v35;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      mlx::core::array::~array((mlx::core::array *)__x);
      if (v41)
      {
        *(void *)&long long v42 = v41;
        operator delete(v41);
      }
      if (v49.__begin_)
      {
        v49.__end_ = v49.__begin_;
        operator delete(v49.__begin_);
      }
    }
  }
  if ((v13 & 1) == 0)
  {
    mlx::core::broadcast_arrays((const void ****)a6, a4, a5, (uint64_t)&v49);
    std::vector<mlx::core::array>::__vdeallocate((void **)a6);
    *(std::vector<int> *)a6 = v49;
    memset(&v49, 0, sizeof(v49));
    *(void *)std::vector<int>::value_type __x = &v49;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  }
}

void sub_256EFA384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void mlx::core::broadcast_arrays(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    return;
  }
  do
  {
    mlx::core::broadcast_shapes(&__p, *v5, &v14);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    std::vector<int>::pointer begin = v14.__begin_;
    std::vector<int> __p = v14;
    v5 += 2;
  }
  while (v5 != v6);
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v12 == v11)
  {
    char v13 = begin;
    if (!begin) {
      return;
    }
    goto LABEL_11;
  }
  do
  {
    mlx::core::broadcast_to(v12, (const void **)&__p.__begin_, a2, a3, (const void ***)&v14);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)&v14);
    mlx::core::array::~array((mlx::core::array *)&v14);
    v12 += 2;
  }
  while (v12 != v11);
  char v13 = __p.__begin_;
  if (__p.__begin_)
  {
LABEL_11:
    __p.__end_ = v13;
    operator delete(v13);
  }
}

void sub_256EFA524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::clip(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a3 + 16)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "At most one of a_min and a_max may be None");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  v19[0] = *a1;
  v19[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *a1;
  }
  mlx::core::astype(v19, *(void *)(v11 + 56), a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)v19);
  if (*(unsigned char *)(a2 + 16))
  {
    mlx::core::maximum(a6, (void *)a2, a4, a5, &v18);
    long long v13 = v18;
    long long v18 = 0uLL;
    std::vector<int> v14 = (std::__shared_weak_count *)a6[1];
    *(_OWORD *)a6 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    mlx::core::array::~array((mlx::core::array *)&v18);
  }
  if (*(unsigned char *)(a3 + 16))
  {
    mlx::core::minimum(a6, (void *)a3, a4, a5, &v18);
    long long v15 = v18;
    long long v18 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)a6[1];
    *(_OWORD *)a6 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    mlx::core::array::~array((mlx::core::array *)&v18);
  }
}

void sub_256EFA6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void mlx::core::maximum(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  std::vector<int> v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  int v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *int v17 = &unk_270633EB0;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636748;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFA8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::minimum(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  std::vector<int> v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  int v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *int v17 = &unk_270633F00;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_2706367D0;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFAB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::concatenate(mlx::core::array **a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a1[1] == *a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[concatenate] No arrays provided for concatenation");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = *(void *)*a1;
  uint64_t v8 = *(void *)(v7 + 8) - *(void *)v7;
  if (a2 >= 0) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = (v8 >> 2) + a2;
  }
  if (v9 >= v8 >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"[concatenate] Invalid axis (", 28);
    std::vector<int> v37 = (void *)std::ostream::operator<<();
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") passed to concatenate", 23);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" for array with shape ", 22);
    uint64_t v40 = mlx::core::operator<<(v39, *(void **)*a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)".", 1);
    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, &v49);
    std::logic_error::logic_error(v41, &v49);
    v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v41, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  v47[0] = 0;
  v47[1] = 0;
  uint64_t v48 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v47, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
  uint64_t v12 = v47[0];
  *((_DWORD *)v47[0] + v9) = 0;
  uint64_t v13 = *a1;
  std::vector<int> v14 = a1[1];
  while (v13 != v14)
  {
    int v15 = *(uint64_t **)v13;
    uint64_t v16 = **(void **)v13;
    uint64_t v17 = *(void *)(*(void *)v13 + 8);
    if (v17 - v16 != (char *)v47[1] - (char *)v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
      std::vector<int>::pointer v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"[concatenate] All the input arrays must have the same number of ", 64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"dimensions. However, got arrays with dimensions ", 48);
      long long v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)".", 1);
      long long v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, &v49);
      std::logic_error::logic_error(v35, &v49);
      v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v35, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    if (v17 != v16)
    {
      unint64_t v18 = 0;
      do
      {
        if (v9 != v18)
        {
          int v19 = mlx::core::array::shape(v13, v18);
          if (v19 != *((_DWORD *)v47[0] + v18))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
            long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"[concatenate] All the input array dimensions must match exactly ", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"except for the concatenation axis. However, the provided shapes are ", 68);
            uint64_t v27 = *a1;
            std::vector<int>::pointer v28 = a1[1];
            if (*a1 != v28)
            {
              do
              {
                unint64_t v29 = mlx::core::operator<<(&v50, *(void **)v27);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
                uint64_t v27 = (mlx::core::array *)((char *)v27 + 16);
              }
              while (v27 != v28);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"and the concatenation axis is ", 30);
            long long v30 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
            std::vector<int> v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, &v49);
            std::logic_error::logic_error(v31, &v49);
            v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v31, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
          }
          int v15 = *(uint64_t **)v13;
          uint64_t v16 = **(void **)v13;
        }
        ++v18;
      }
      while (v18 < (v15[1] - v16) >> 2);
    }
    int v20 = mlx::core::array::shape(v13, v9);
    uint64_t v12 = v47[0];
    *((_DWORD *)v47[0] + v9) += v20;
    uint64_t v13 = (mlx::core::array *)((char *)v13 + 16);
  }
  uint64_t v21 = mlx::core::result_type((uint64_t *)a1);
  *(_OWORD *)std::vector<int> __p = *(_OWORD *)v47;
  uint64_t v46 = v48;
  v47[1] = 0;
  uint64_t v48 = 0;
  v47[0] = 0;
  uint64_t v22 = mlx::core::to_stream(a3, a4);
  int v24 = v23;
  int v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  void *v25 = &unk_2706335A0;
  *((_DWORD *)v25 + 10) = v24;
  *((_DWORD *)v25 + 11) = v9;
  void v25[3] = &unk_270635898;
  v25[4] = v22;
  *(void *)&long long v44 = v25 + 3;
  *((void *)&v44 + 1) = v25;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v42, *a1, a1[1], (a1[1] - *a1) >> 4);
  mlx::core::array::array(a5, (long long *)__p, v21, &v44, &v42);
  int v50 = (void **)&v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v50);
  if (*((void *)&v44 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
}

void sub_256EFB12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void mlx::core::concatenate(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  memset(v14, 0, sizeof(v14));
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      std::vector<int> __p = 0;
      unint64_t v9 = operator new(4uLL);
      std::vector<int> __p = v9;
      *unint64_t v9 = -1;
      uint64_t v11 = v9 + 1;
      uint64_t v12 = v9 + 1;
      mlx::core::reshape(v7, (uint64_t)&__p, a2, a3, (const void ***)v13);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v14, (uint64_t)v13);
      mlx::core::array::~array((mlx::core::array *)v13);
      if (__p)
      {
        uint64_t v11 = __p;
        operator delete(__p);
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  mlx::core::concatenate(v14, 0, a2, a3, a4);
  v13[0] = (void **)v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_256EFB434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14)
{
  a12 = &a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void mlx::core::stack(const void ****a1@<X0>, mlx::core *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (*a1 == a1[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "No arrays provided for stacking");
    goto LABEL_9;
  }
  if ((mlx::core::is_same_shape(a1) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "All arrays must have the same shape");
LABEL_9:
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v10 = mlx::core::normalize_axis(a2, ((unint64_t)((unsigned char *)(**a1)[1] - (unsigned char *)***a1) >> 2) + 1);
  memset(v15, 0, sizeof(v15));
  std::vector<mlx::core::array>::reserve((char **)v15, ((char *)a1[1] - (char *)*a1) >> 4);
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  while (v12 != v11)
  {
    mlx::core::expand_dims(v12, v10, a3, a4, (const void ***)v14);
    std::vector<mlx::core::array>::emplace_back<mlx::core::array>((char **)v15, (uint64_t)v14);
    mlx::core::array::~array((mlx::core::array *)v14);
    v12 += 2;
  }
  mlx::core::concatenate(v15, (int)a2, a3, a4, a5);
  v14[0] = (void **)v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v14);
}

void sub_256EFB5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::emplace_back<mlx::core::array>(char **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v25 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    std::vector<int> v14 = &v13[16 * v9];
    int v15 = &v13[16 * v12];
    int v24 = v15;
    *(_OWORD *)std::vector<int> v14 = *(_OWORD *)a2;
    uint64_t v8 = v14 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v23.i64[1] = (uint64_t)(v14 + 16);
    uint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        long long v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
      }
      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v23.i64[1];
      int v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    int64x2_t v23 = v19;
    int v20 = a1[2];
    a1[2] = v15;
    int v24 = v20;
    uint64_t v22 = v19.i64[0];
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = v7 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return v8 - 16;
}

void mlx::core::stack(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::repeat(mlx::core *this@<X2>, const void ***a2@<X0>, std::vector<int>::value_type a3@<W1>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::vector<int>::value_type __x = a3;
  int v11 = mlx::core::normalize_axis(this, (unint64_t)((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2);
  if (a3 < 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[repeat] Number of repeats cannot be negative");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (a3 == 1)
  {
    uint64_t v13 = a2[1];
    *(void *)a6 = *a2;
    *(void *)(a6 + 8) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else if (a3)
  {
    int v14 = v11;
    int v15 = *a2;
    memset(&v32, 0, sizeof(v32));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *v15, (uint64_t)v15[1], ((unsigned char *)v15[1] - (unsigned char *)*v15) >> 2);
    v16.__i_ = &v32.__begin_[v14 + 1];
    std::vector<int>::insert(&v32, v16, &__x);
    mlx::core::expand_dims(a2, v14 + 1, a4, a5, (const void ***)a6);
    mlx::core::broadcast_to((const void ***)a6, (const void **)&v32.__begin_, a4, a5, (const void ***)&v31);
    uint64_t v17 = v14;
    long long v18 = v31;
    long long v31 = 0uLL;
    int64x2_t v19 = *(std::__shared_weak_count **)(a6 + 8);
    *(_OWORD *)a6 = v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    mlx::core::array::~array((mlx::core::array *)&v31);
    std::vector<int>::pointer begin = v32.__begin_;
    uint64_t v21 = &v32.__begin_[v14];
    uint64_t v22 = v21 + 1;
    int64x2_t v23 = (char *)(v21 + 2);
    int v24 = (char *)((char *)v32.__end_ - v23);
    if ((char *)v32.__end_ != v23)
    {
      memmove(v22, v23, (char *)v32.__end_ - v23);
      std::vector<int>::pointer begin = v32.__begin_;
    }
    v32.__end_ = (std::vector<int>::pointer)&v24[(void)v22];
    begin[v17] *= __x;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)&v24[(void)v22], (&v24[(void)v22] - (char *)begin) >> 2);
    mlx::core::reshape((const void ***)a6, (uint64_t)&__p, a4, a5, (const void ***)&v31);
    long long v25 = v31;
    long long v31 = 0uLL;
    long long v26 = *(std::__shared_weak_count **)(a6 + 8);
    *(_OWORD *)a6 = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    mlx::core::array::~array((mlx::core::array *)&v31);
    if (__p)
    {
      unint64_t v29 = __p;
      operator delete(__p);
    }
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
  }
  else
  {
    unint64_t v12 = (*a2)[7];
    mlx::core::array::array(a6, 0, 0, v12);
  }
}

void sub_256EFB998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array(v16);
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3 = __x;
  uint64_t i = (int *)__position.__i_;
  std::vector<int>::pointer end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<int>::pointer begin = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)&this->__end_cap_;
    if (v18) {
      int64x2_t v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__end_cap_, v18);
    }
    else {
      int64x2_t v19 = 0;
    }
    int v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        int64x2_t v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v22);
        int v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *int v20 = *v3;
    __v.__end_ = v20 + 1;
    uint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v9 = __position.__i_ + 1;
    uint64_t v10 = end - 1;
    std::vector<int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    if (i <= v3) {
      v3 += this->__end_ > v3;
    }
    *uint64_t i = *v3;
  }
  return (std::vector<int>::iterator)i;
}

void sub_256EFBC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::repeat(const void ***a1@<X0>, std::vector<int>::value_type a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  mlx::core::flatten(a1, 0, ((unint64_t)((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2) - 1, a3, a4, (uint64_t)v9);
  mlx::core::repeat(0, v9, a2, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256EFBCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::tile(const void ***a1@<X0>, std::vector<int> *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  uint64_t v10 = *a1;
  memset(&v93, 0, sizeof(v93));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v93, *v10, (uint64_t)v10[1], ((unsigned char *)v10[1] - (unsigned char *)*v10) >> 2);
  v11.__i_ = a2->__begin_;
  unint64_t v12 = a2->__end_ - a2->__begin_;
  std::vector<int>::pointer begin = v93.__begin_;
  std::vector<int>::pointer end = v93.__end_;
  unint64_t v15 = v93.__end_ - v93.__begin_;
  if (v15 > v12)
  {
    __x[0] = 1;
    std::vector<int>::insert(a2, v11, v15 - v12, __x);
    std::vector<int>::pointer begin = v93.__begin_;
    std::vector<int>::pointer end = v93.__end_;
    unint64_t v12 = a2->__end_ - a2->__begin_;
    unint64_t v15 = v93.__end_ - v93.__begin_;
  }
  if (v12 > v15)
  {
    __x[0] = 1;
    v16.__i_ = begin;
    std::vector<int>::insert(&v93, v16, v12 - v15, __x);
    std::vector<int>::pointer begin = v93.__begin_;
    std::vector<int>::pointer end = v93.__end_;
  }
  *(void *)std::vector<int>::value_type __x = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  std::vector<int> __p = 0;
  uint64_t v88 = 0;
  int v89 = 0;
  uint64_t v84 = 0;
  v85 = 0;
  unint64_t v86 = 0;
  if (end == begin)
  {
    uint64_t v72 = 0;
    v71 = 0;
  }
  else
  {
    uint64_t v75 = a3;
    unint64_t v17 = 0;
    do
    {
      int64x2_t v19 = v91;
      unint64_t v18 = (unint64_t)v92;
      if (a2->__begin_[v17] != 1)
      {
        if (v91 >= v92)
        {
          unint64_t v21 = *(char **)__x;
          uint64_t v22 = (uint64_t)&v91[-*(void *)__x] >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = (uint64_t)&v92[-*(void *)__x];
          if ((uint64_t)&v92[-*(void *)__x] >> 1 > v23) {
            unint64_t v23 = v24 >> 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v92, v25);
            unint64_t v21 = *(char **)__x;
            int64x2_t v19 = v91;
          }
          else
          {
            long long v26 = 0;
          }
          uint64_t v27 = &v26[4 * v22];
          *(_DWORD *)uint64_t v27 = 1;
          int v20 = v27 + 4;
          while (v19 != v21)
          {
            int v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          *(void *)std::vector<int>::value_type __x = v27;
          uint64_t v91 = v20;
          uint64_t v92 = &v26[4 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v91 = 1;
          int v20 = v19 + 4;
        }
        uint64_t v91 = v20;
        std::vector<int>::pointer v29 = a2->__begin_;
        uint64_t v30 = v88;
        if (v88 >= v89)
        {
          std::vector<int> v32 = (char *)__p;
          uint64_t v33 = (v88 - (unsigned char *)__p) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            goto LABEL_109;
          }
          uint64_t v35 = v89 - (unsigned char *)__p;
          if ((v89 - (unsigned char *)__p) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            std::vector<int> v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v36);
            std::vector<int> v32 = (char *)__p;
            uint64_t v30 = v88;
          }
          else
          {
            std::vector<int> v37 = 0;
          }
          uint64_t v38 = &v37[4 * v33];
          *(_DWORD *)uint64_t v38 = v29[v17];
          long long v31 = v38 + 4;
          while (v30 != v32)
          {
            int v39 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v38 - 1) = v39;
            v38 -= 4;
          }
          std::vector<int> __p = v38;
          uint64_t v88 = v31;
          int v89 = &v37[4 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v88 = v29[v17];
          long long v31 = v30 + 4;
        }
        uint64_t v88 = v31;
        unint64_t v18 = (unint64_t)v92;
        std::vector<int>::pointer begin = v93.__begin_;
        int64x2_t v19 = v91;
      }
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v41 = *(char **)__x;
        uint64_t v42 = (uint64_t)&v19[-*(void *)__x] >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          goto LABEL_109;
        }
        uint64_t v44 = v18 - *(void *)__x;
        if (v44 >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v92, v45);
          uint64_t v41 = *(char **)__x;
          int64x2_t v19 = v91;
        }
        else
        {
          uint64_t v46 = 0;
        }
        long long v47 = &v46[4 * v42];
        *(_DWORD *)long long v47 = begin[v17];
        uint64_t v40 = v47 + 4;
        while (v19 != v41)
        {
          int v48 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *(void *)std::vector<int>::value_type __x = v47;
        uint64_t v91 = v40;
        uint64_t v92 = &v46[4 * v45];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(_DWORD *)int64x2_t v19 = begin[v17];
        uint64_t v40 = v19 + 4;
      }
      uint64_t v91 = v40;
      std::vector<int>::pointer v49 = v93.__begin_;
      int v50 = v88;
      if (v88 >= v89)
      {
        unint64_t v52 = (char *)__p;
        uint64_t v53 = (v88 - (unsigned char *)__p) >> 2;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62) {
LABEL_109:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v55 = v89 - (unsigned char *)__p;
        if ((v89 - (unsigned char *)__p) >> 1 > v54) {
          unint64_t v54 = v55 >> 1;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v56);
          unint64_t v52 = (char *)__p;
          int v50 = v88;
        }
        else
        {
          int v57 = 0;
        }
        long long v58 = &v57[4 * v53];
        *(_DWORD *)long long v58 = v49[v17];
        uint64_t v51 = v58 + 4;
        while (v50 != v52)
        {
          int v59 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v58 - 1) = v59;
          v58 -= 4;
        }
        std::vector<int> __p = v58;
        uint64_t v88 = v51;
        int v89 = &v57[4 * v56];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v88 = v93.__begin_[v17];
        uint64_t v51 = v50 + 4;
      }
      uint64_t v88 = v51;
      int v60 = v93.__begin_[v17] * a2->__begin_[v17];
      long long v61 = v85;
      if ((unint64_t)v85 >= v86)
      {
        int v63 = v84;
        uint64_t v64 = ((char *)v85 - (unsigned char *)v84) >> 2;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v86 - (void)v84;
        if ((uint64_t)(v86 - (void)v84) >> 1 > v65) {
          unint64_t v65 = v66 >> 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67)
        {
          std::vector<int> v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v86, v67);
          int v63 = v84;
          long long v61 = v85;
        }
        else
        {
          std::vector<int> v68 = 0;
        }
        uint64_t v69 = (int *)&v68[4 * v64];
        *uint64_t v69 = v60;
        ldiv_t v62 = v69 + 1;
        while (v61 != v63)
        {
          int v70 = *--v61;
          *--uint64_t v69 = v70;
        }
        uint64_t v84 = v69;
        v85 = v62;
        unint64_t v86 = (unint64_t)&v68[4 * v67];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        _DWORD *v85 = v60;
        ldiv_t v62 = v61 + 1;
      }
      v85 = v62;
      ++v17;
      std::vector<int>::pointer begin = v93.__begin_;
    }
    while (v17 < v93.__end_ - v93.__begin_);
    v71 = *(char **)__x;
    uint64_t v72 = (uint64_t)v91;
    a3 = v75;
  }
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v80 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v80, v71, v72, (v72 - (uint64_t)v71) >> 2);
  mlx::core::reshape(a1, (uint64_t)&v80, a3, a4, (const void ***)&v83);
  if (v80)
  {
    uint64_t v81 = v80;
    operator delete(v80);
  }
  mlx::core::broadcast_to((const void ***)&v83, (const void **)&__p, a3, a4, (const void ***)&v79);
  long long v73 = v79;
  long long v79 = 0uLL;
  unint64_t v74 = (std::__shared_weak_count *)*((void *)&v83 + 1);
  long long v83 = v73;
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  mlx::core::array::~array((mlx::core::array *)&v79);
  v77 = 0;
  uint64_t v78 = 0;
  v76 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v76, v84, (uint64_t)v85, ((char *)v85 - (unsigned char *)v84) >> 2);
  mlx::core::reshape((const void ***)&v83, (uint64_t)&v76, a3, a4, a5);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  mlx::core::array::~array((mlx::core::array *)&v83);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (__p)
  {
    uint64_t v88 = (char *)__p;
    operator delete(__p);
  }
  if (*(void *)__x)
  {
    uint64_t v91 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v93.__begin_)
  {
    v93.__end_ = v93.__begin_;
    operator delete(v93.__begin_);
  }
}

void sub_256EFC2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  std::vector<int> v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(void *)(v30 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  uint64_t i = (int *)__position.__i_;
  if (__n)
  {
    unint64_t v5 = (int *)__x;
    value = this->__end_cap_.__value_;
    p_end_cap = &this->__end_cap_;
    std::__wrap_iter<const int *>::iterator_type v9 = value;
    std::vector<int>::const_iterator v11 = p_end_cap[-1].__value_;
    if (__n <= value - v11)
    {
      uint64_t v18 = (char *)v11 - (char *)__position.__i_;
      if (__n <= v11 - __position.__i_)
      {
        unint64_t v21 = p_end_cap[-1].__value_;
        std::vector<int>::size_type v20 = __n;
      }
      else
      {
        unint64_t v19 = 0;
        std::vector<int>::size_type v20 = v18 >> 2;
        unint64_t v21 = (int *)&v11[__n - (v18 >> 2)];
        do
        {
          v11[v19 / 4] = *__x;
          v19 += 4;
        }
        while (4 * __n - 4 * v20 != v19);
        this->__end_ = v21;
        if (v11 == __position.__i_) {
          return (std::vector<int>::iterator)i;
        }
      }
      uint64_t v22 = &__position.__i_[__n];
      unint64_t v23 = &v21[-__n];
      uint64_t v24 = v21;
      if (v23 < v11)
      {
        uint64_t v24 = v21;
        do
        {
          int v25 = *v23++;
          *v24++ = v25;
        }
        while (v23 < v11);
      }
      this->__end_ = v24;
      if (v21 != v22) {
        memmove(&v21[-(v21 - v22)], __position.__i_, (char *)v21 - (char *)v22);
      }
      if (i <= v5)
      {
        if (this->__end_ <= v5) {
          std::vector<int>::size_type v26 = 0;
        }
        else {
          std::vector<int>::size_type v26 = __n;
        }
        v5 += v26;
      }
      uint64_t v27 = i;
      do
      {
        *v27++ = *v5;
        --v20;
      }
      while (v20);
    }
    else
    {
      std::vector<int>::pointer begin = this->__begin_;
      unint64_t v13 = __n + v11 - this->__begin_;
      if (v13 >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = __position.__i_ - begin;
      uint64_t v15 = (char *)v9 - (char *)begin;
      if (v15 >> 1 > v13) {
        unint64_t v13 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
      if (v16) {
        unint64_t v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v16);
      }
      else {
        unint64_t v17 = 0;
      }
      int v28 = &v17[v14];
      __v.__first_ = v17;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v17[v16];
      std::vector<int>::size_type v29 = 4 * __n;
      uint64_t v30 = &v28[__n];
      do
      {
        *v28++ = *v5;
        v29 -= 4;
      }
      while (v29);
      __v.__end_ = v30;
      uint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
      if (__v.__end_ != __v.__begin_) {
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
      }
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
    }
  }
  return (std::vector<int>::iterator)i;
}

void sub_256EFC560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  v61[31] = *MEMORY[0x263EF8340];
  uint64_t v10 = (a2[1] - *a2) >> 2;
  if (v10 != (a3[1] - *a3) >> 2 || v10 != (a4[1] - *a4) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
    long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Invalid number of padding sizes passed to pad ", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"with axes of size ", 18);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v60, &v58);
    std::logic_error::logic_error(exception, &v58);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  unint64_t v17 = *a1;
  memset(&v58, 0, sizeof(v58));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *v17, (uint64_t)v17[1], ((unsigned char *)v17[1] - (unsigned char *)*v17) >> 2);
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1] - *a2;
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19 >> 2;
    uint64_t v22 = *a3;
    uint64_t v23 = *a4;
    uint64_t v24 = *a1;
    std::string::size_type v25 = v58.__r_.__value_.__r.__words[0];
    if (v21 <= 1) {
      unint64_t v21 = 1;
    }
    do
    {
      int v26 = *(_DWORD *)(v22 + 4 * v20);
      if (v26 < 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Invalid low padding size (", 26);
        int v39 = (void *)std::ostream::operator<<();
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") passed to pad", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" for axis ", 10);
        uint64_t v41 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)". Padding sizes must be non-negative", 36);
        uint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v60, &v57);
        std::logic_error::logic_error(v42, &v57);
        v42->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v42, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      int v27 = *(_DWORD *)(v23 + 4 * v20);
      if (v27 < 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Invalid high padding size (", 27);
        unint64_t v43 = (void *)std::ostream::operator<<();
        uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") passed to pad", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" for axis ", 10);
        unint64_t v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)". Padding sizes must be non-negative", 36);
        uint64_t v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v60, &v57);
        std::logic_error::logic_error(v46, &v57);
        v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v46, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      uint64_t v28 = *(int *)(v18 + 4 * v20);
      if ((v28 & 0x80000000) != 0) {
        uint64_t v29 = v28 + (((unsigned char *)v24[1] - (unsigned char *)*v24) >> 2);
      }
      else {
        uint64_t v29 = *(unsigned int *)(v18 + 4 * v20);
      }
      *(_DWORD *)(v25 + 4 * v29) += v27 + v26;
      ++v20;
    }
    while (v21 != v20);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_, (uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v30 = (uint64_t)(*a1)[7];
  unint64_t v52 = mlx::core::to_stream(a6, a7);
  int v53 = v31;
  std::allocate_shared[abi:ne180100]<mlx::core::Pad,std::allocator<mlx::core::Pad>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,void>((uint64_t)&v52, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, &v54);
  long long v55 = v54;
  long long v54 = 0uLL;
  std::vector<int> v32 = a1[1];
  int v59 = *a1;
  int v60 = v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = a5[1];
  v49[0] = *a5;
  v49[1] = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v49, (uint64_t)(*a1)[7], a6, a7, v61);
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v57.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v34 = (char *)operator new(0x20uLL);
  uint64_t v35 = 0;
  *(void *)&long long v50 = v34;
  *((void *)&v50 + 1) = v34;
  uint64_t v51 = v34 + 32;
  do
  {
    unint64_t v36 = &v34[v35 * 8];
    std::vector<int> v37 = (&v59)[v35 + 1];
    *(void *)unint64_t v36 = (&v59)[v35];
    *((void *)v36 + 1) = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v37 + 1, 1uLL, memory_order_relaxed);
    }
    v35 += 2;
  }
  while (v35 != 4);
  *((void *)&v50 + 1) = v34 + 32;
  mlx::core::array::array(a8, (long long *)__p, v30, &v55, &v50);
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&(&v59)[i]);
  mlx::core::array::~array((mlx::core::array *)v49);
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  if (*((void *)&v54 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v58.__r_.__value_.__r.__words[0])
  {
    v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_256EFCAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void mlx::core::pad(const void ***a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  std::vector<int>::size_type v10 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v44, v10, __x);
  std::vector<int>::pointer begin = v44.__begin_;
  std::vector<int>::pointer end = v44.__end_;
  if (v44.__begin_ != v44.__end_)
  {
    int v13 = 0;
    do
      *begin++ = v13++;
    while (begin != end);
  }
  *(void *)std::vector<int>::value_type __x = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  std::vector<int> __p = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v14 = *(_DWORD **)a2;
  uint64_t v15 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v15)
  {
    do
    {
      unint64_t v16 = v42;
      if (v42 >= v43)
      {
        uint64_t v18 = *(char **)__x;
        uint64_t v19 = (uint64_t)&v42[-*(void *)__x] >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          goto LABEL_45;
        }
        uint64_t v21 = (uint64_t)&v43[-*(void *)__x];
        if ((uint64_t)&v43[-*(void *)__x] >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v43, v22);
          uint64_t v18 = *(char **)__x;
          unint64_t v16 = v42;
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[4 * v19];
        *(_DWORD *)uint64_t v24 = *v14;
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(void *)std::vector<int>::value_type __x = v24;
        uint64_t v42 = v17;
        unint64_t v43 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v42 = *v14;
        unint64_t v17 = v16 + 4;
      }
      uint64_t v42 = v17;
      int v26 = v39;
      if (v39 >= v40)
      {
        uint64_t v28 = (char *)__p;
        uint64_t v29 = (v39 - (unsigned char *)__p) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
LABEL_45:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v31 = v40 - (unsigned char *)__p;
        if ((v40 - (unsigned char *)__p) >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v40, v32);
          uint64_t v28 = (char *)__p;
          int v26 = v39;
        }
        else
        {
          uint64_t v33 = 0;
        }
        unint64_t v34 = &v33[4 * v29];
        *(_DWORD *)unint64_t v34 = v14[1];
        int v27 = v34 + 4;
        while (v26 != v28)
        {
          int v35 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        std::vector<int> __p = v34;
        int v39 = v27;
        uint64_t v40 = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)int v39 = v14[1];
        int v27 = v26 + 4;
      }
      int v39 = v27;
      v14 += 2;
    }
    while (v14 != v15);
  }
  mlx::core::pad(a1, (uint64_t *)&v44, (uint64_t *)__x, (uint64_t *)&__p, a3, a4, a5, a6);
  if (__p)
  {
    int v39 = (char *)__p;
    operator delete(__p);
  }
  if (*(void *)__x)
  {
    uint64_t v42 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
}

void sub_256EFCEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, void *a2@<X1>, void *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  std::vector<std::pair<int,int>>::vector(__p, ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2, a2);
  mlx::core::pad(a1, (uint64_t)__p, a3, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EFCF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::pad(const void ***a1@<X0>, int a2@<W1>, void *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v11 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
  LODWORD(v12) = a2;
  HIDWORD(v12) = a2;
  std::vector<std::pair<int,int>>::vector(__p, v11, &v12);
  mlx::core::pad(a1, (uint64_t)__p, a3, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256EFD030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::moveaxis(uint64_t **a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v24 = a1;
  std::vector<int>::value_type v11 = mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v24, a2);
  std::vector<int>::value_type __x = v11;
  int v12 = mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v24, a3);
  std::vector<int>::vector(&v23, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v23.__begin_;
  std::vector<int>::pointer end = v23.__end_;
  if (v23.__begin_ != v23.__end_)
  {
    int v15 = 0;
    std::vector<int>::pointer v16 = v23.__begin_;
    do
      *v16++ = v15++;
    while (v16 != end);
  }
  unint64_t v17 = &begin[v11];
  uint64_t v18 = (char *)((char *)end - (char *)(v17 + 1));
  if (end != v17 + 1)
  {
    memmove(v17, v17 + 1, (char *)end - (char *)(v17 + 1));
    std::vector<int>::pointer begin = v23.__begin_;
  }
  v23.__end_ = (std::vector<int>::pointer)&v18[(void)v17];
  v19.__i_ = &begin[v12];
  std::vector<int>::insert(&v23, v19, &__x);
  std::vector<int> __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23.__begin_, (uint64_t)v23.__end_, v23.__end_ - v23.__begin_);
  mlx::core::transpose(a1, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  if (v23.__begin_)
  {
    v23.__end_ = v23.__begin_;
    operator delete(v23.__begin_);
  }
}

void sub_256EFD188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::moveaxis(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()(uint64_t a1, int a2)
{
  uint64_t v2 = (*(void *)(**(void **)a1 + 8) - ***(void ***)a1) >> 2;
  if (-(int)v2 > a2 || (int)v2 <= a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"[moveaxis] Invalid axis ", 24);
    unint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for array with ", 16);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  return (v2 & (a2 >> 31)) + a2;
}

void sub_256EFD2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::transpose(uint64_t **a1@<X0>, unsigned int **a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v48[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  std::vector<int>::value_type v11 = a2[1];
  if (*a2 != v11)
  {
    int v12 = *a1;
    int v13 = *a2;
    do
    {
      uint64_t v14 = *v13;
      if ((v14 & 0x80000000) != 0) {
        v14 += (v12[1] - *v12) >> 2;
      }
      *v13++ = v14;
    }
    while (v13 != v11);
  }
  std::vector<int>::size_type v15 = v11 - v10;
  if (v15 != ((*a1)[1] - **a1) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"[transpose] Recived ", 20);
    int v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" axes for array with ", 21);
    int v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(exception, (const std::string *)&v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  __x[0] = 0;
  std::vector<int>::vector(&v45, v15, __x);
  std::vector<int>::pointer v16 = (char *)*a2;
  int v17 = a2[1];
  if (*a2 != v17)
  {
    uint64_t v18 = *a1;
    std::vector<int>::pointer begin = v45.__begin_;
    unint64_t v20 = *a2;
    do
    {
      unint64_t v21 = *v20;
      if ((v21 & 0x80000000) != 0 || v21 >= (v18[1] - *v18) >> 2)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"[transpose] Invalid axis (", 26);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") for array with ", 17);
        unint64_t v32 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" dimensions.", 12);
        uint64_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v44);
        std::logic_error::logic_error(v33, &v44);
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v33, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      if (begin[v21])
      {
        unint64_t v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v34, "[transpose] Repeat axes not allowed.");
        v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v34, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      begin[v21] = 1;
      ++v20;
    }
    while (v20 != v17);
    unint64_t v22 = ((char *)v17 - v16) >> 2;
    uint64_t v23 = **a1;
    std::vector<int>::pointer v24 = v45.__begin_;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    do
    {
      uint64_t v25 = *(int *)v16;
      v16 += 4;
      *v24++ = *(_DWORD *)(v23 + 4 * v25);
      --v22;
    }
    while (v22);
  }
  std::vector<int> __p = v45;
  memset(&v45, 0, sizeof(v45));
  uint64_t v26 = (*a1)[7];
  uint64_t v40 = mlx::core::to_stream(a3, a4);
  int v41 = v27;
  std::allocate_shared[abi:ne180100]<mlx::core::Transpose,std::allocator<mlx::core::Transpose>,mlx::core::Stream,std::vector<int>,void>((uint64_t *)&v40, (uint64_t)a2, &v44);
  long long v42 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v29 = *a1;
  uint64_t v28 = a1[1];
  v48[0] = v29;
  v48[1] = v28;
  if (v28) {
    atomic_fetch_add_explicit(v28 + 1, 1uLL, memory_order_relaxed);
  }
  long long v38 = 0uLL;
  int v39 = 0;
  *(void *)std::vector<int>::value_type __x = &v38;
  v47[0] = 0;
  unint64_t v30 = operator new(0x10uLL);
  *(void *)&long long v38 = v30;
  int v39 = v30 + 2;
  void *v30 = v29;
  v30[1] = v28;
  if (v28) {
    atomic_fetch_add_explicit(v28 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v38 + 1) = v30 + 2;
  mlx::core::array::array(a5, (long long *)&__p, v26, &v42, &v38);
  *(void *)std::vector<int>::value_type __x = &v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  mlx::core::array::~array((mlx::core::array *)v48);
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  if (v44.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
}

void sub_256EFD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void mlx::core::swapaxes(uint64_t **a1@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v22 = a1;
  int v11 = mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v22, a2);
  int v12 = mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()((uint64_t)&v22, a3);
  std::vector<int>::vector(&v21, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v21.__begin_;
  std::vector<int>::pointer end = v21.__end_;
  if (v21.__begin_ != v21.__end_)
  {
    int v15 = 0;
    std::vector<int>::pointer v16 = v21.__begin_;
    do
      *v16++ = v15++;
    while (v16 != end);
  }
  int v17 = begin[v11];
  begin[v11] = begin[v12];
  begin[v12] = v17;
  std::vector<int> __p = begin;
  std::vector<int>::const_iterator v19 = end;
  value = v21.__end_cap_.__value_;
  memset(&v21, 0, sizeof(v21));
  mlx::core::transpose(a1, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    std::vector<int>::const_iterator v19 = __p;
    operator delete(__p);
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_256EFD998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::swapaxes(mlx::core::array const&,int,int,std::variant<std::monostate,mlx::core::Stream,mlx::core::Device>)::$_0::operator()(uint64_t a1, int a2)
{
  uint64_t v2 = (*(void *)(**(void **)a1 + 8) - ***(void ***)a1) >> 2;
  if (-(int)v2 > a2 || (int)v2 <= a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"[swapaxes] Invalid axis ", 24);
    unint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for array with ", 16);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  return (v2 & (a2 >> 31)) + a2;
}

void sub_256EFDAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void mlx::core::transpose(uint64_t **a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::vector<int>::vector(&v17, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v17.__begin_;
  std::vector<int>::pointer end = v17.__end_;
  if (v17.__end_ != v17.__begin_)
  {
    int v10 = 0;
    std::vector<int>::pointer v11 = v17.__end_;
    do
      *--std::vector<int>::pointer v11 = v10++;
    while (v11 != begin);
  }
  std::vector<int> __p = begin;
  int v15 = end;
  value = v17.__end_cap_.__value_;
  memset(&v17, 0, sizeof(v17));
  int v12 = mlx::core::to_stream(a2, a3);
  mlx::core::transpose(a1, (unsigned int **)&__p, v12, v13 | 0x100000000, a4);
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_256EFDBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::broadcast_arrays(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void v19[2] = *(const void ***)MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(*a1, *a2, &__p);
  mlx::core::broadcast_to(a1, (const void **)&__p.__begin_, a3, a4, v18);
  mlx::core::broadcast_to(a2, (const void **)&__p.__begin_, a3, a4, v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  std::vector<int>::pointer v16 = a5;
  char v17 = 0;
  int v10 = (char *)operator new(0x20uLL);
  uint64_t v11 = 0;
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 32;
  do
  {
    int v12 = &v10[v11 * 8];
    unsigned int v13 = v18[v11 + 1];
    *(void *)int v12 = v18[v11];
    *((void *)v12 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    }
    v11 += 2;
  }
  while (v11 != 4);
  a5[1] = v10 + 32;
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v18[i]);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256EFDD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a14 + i));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::equal(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_2706336E0;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270635DB8;
  unsigned int v17[4] = v14;
  *((unsigned char *)v17 + 44) = 0;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFDFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::not_equal(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_270633730;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636968;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFE250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::greater(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_270633780;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_2706361F8;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::greater_equal(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_2706337D0;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636280;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFE760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::less(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_270633820;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636308;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFE9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::less_equal(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  char v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *char v17 = &unk_270633870;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270636390;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256EFEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::array_equal(const void ***a1@<X0>, const void ***a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  v42[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = **a1;
  size_t v13 = (unsigned char *)v10[1] - v12;
  uint64_t v14 = **a2;
  if (v13 == (unsigned char *)v11[1] - v14 && !memcmp(v12, v14, v13))
  {
    *(void *)int v41 = v10[7];
    int v39 = (void **)v11[7];
    uint64_t v38 = mlx::core::promote_types(v41, (int *)&v39);
    char v18 = mlx::core::issubdtype((unsigned int *)&v38, &mlx::core::inexact);
    uint64_t v19 = *a1;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v19, (uint64_t)v19[1], ((unsigned char *)v19[1] - (unsigned char *)*v19) >> 2);
    long long v20 = mlx::core::to_stream(a4, a5);
    int v22 = v21;
    uint64_t v23 = operator new(0x30uLL);
    v23[1] = 0;
    void v23[2] = 0;
    void *v23 = &unk_2706336E0;
    *((_DWORD *)v23 + 10) = v22;
    v23[3] = &unk_270635DB8;
    v23[4] = v20;
    *((unsigned char *)v23 + 44) = v18 & a3;
    *(void *)&long long v35 = v23 + 3;
    *((void *)&v35 + 1) = v23;
    std::vector<int>::pointer v24 = (atomic_ullong *)a1[1];
    v32[0] = *a1;
    v32[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v32, v38, a4, a5, v41);
    uint64_t v25 = (atomic_ullong *)a2[1];
    v31[0] = *a2;
    v31[1] = v25;
    if (v25) {
      atomic_fetch_add_explicit(v25 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v31, v38, a4, a5, v42);
    long long v33 = 0uLL;
    unint64_t v34 = 0;
    int v39 = (void **)&v33;
    char v40 = 0;
    long long v26 = (char *)operator new(0x20uLL);
    uint64_t v27 = 0;
    *(void *)&long long v33 = v26;
    *((void *)&v33 + 1) = v26;
    unint64_t v34 = v26 + 32;
    do
    {
      uint64_t v28 = &v26[v27 * 4];
      uint64_t v29 = *(void *)&v41[v27 + 2];
      *(void *)uint64_t v28 = *(void *)&v41[v27];
      *((void *)v28 + 1) = v29;
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      v27 += 4;
    }
    while (v27 != 8);
    *((void *)&v33 + 1) = v26 + 32;
    mlx::core::array::array(v37, (long long *)__p, 0x100000000, &v35, &v33);
    mlx::core::all((uint64_t)v37, 0, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v37);
    int v39 = (void **)&v33;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
    for (uint64_t i = 4; i != -4; i -= 4)
      mlx::core::array::~array((mlx::core::array *)&v41[i]);
    mlx::core::array::~array((mlx::core::array *)v31);
    mlx::core::array::~array((mlx::core::array *)v32);
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v17 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
    mlx::core::array::array<BOOL>((int ***)a6, 0, v17);
  }
}

void sub_256EFEFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  mlx::core::array::~array((mlx::core::array *)&a21);
  a24 = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(v24 - 120 + i));
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a11);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::all(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::vector(&v13, (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::all(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256EFF140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::isnan(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v12 = *(void *)(*a1 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v12, &mlx::core::integer))
  {
    uint64_t v8 = *a1;
  }
  else
  {
    uint64_t v8 = *a1;
    if (*(_DWORD *)(*a1 + 56))
    {
      mlx::core::not_equal(a1, a1, a2, a3, a4);
      return;
    }
  }
  std::vector<int> __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_256EFF230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::full<BOOL>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *(_OWORD *)std::vector<int> __p = *(_OWORD *)a1;
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  mlx::core::array::array<BOOL>(v11, a2, a3);
  uint64_t v9 = mlx::core::to_stream(a4, a5);
  mlx::core::full((long long *)__p, v11, v9, v10 | 0x100000000, a6);
  mlx::core::array::~array((mlx::core::array *)v11);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_256EFF2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, char a10, uint64_t a11, uint64_t a12)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::isinf(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  mlx::core::isposinf(a1, a2, a3, v9);
  mlx::core::isneginf(a1, a2, a3, v8);
  mlx::core::logical_or(v9, v8, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v8);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256EFF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void mlx::core::logical_or(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, 0x100000000, a3, a4, v23);
  uint64_t v10 = a2[1];
  v20[0] = *a2;
  v20[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v20, 0x100000000, a3, a4, v21);
  mlx::core::broadcast_arrays((const void ***)v23, v21, a3, a4, &v24);
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v11 = *(void *)v24;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2);
  uint64_t v12 = mlx::core::to_stream(a3, a4);
  int v14 = v13;
  int v15 = operator new(0x30uLL);
  v15[1] = 0;
  void v15[2] = 0;
  *int v15 = &unk_270633C80;
  *((_DWORD *)v15 + 10) = v14;
  v15[3] = &unk_270636638;
  v15[4] = v12;
  *(void *)&long long v18 = v15 + 3;
  *((void *)&v18 + 1) = v15;
  long long v16 = v24;
  uint64_t v17 = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v18, &v16);
  v23[0] = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v23);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v23[0] = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v23);
}

void sub_256EFF580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 80) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 80) = v22 - 64;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::isposinf(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v10[0] = *(int ***)(*a1 + 56);
  if (mlx::core::issubdtype((unsigned int *)v10, &mlx::core::integer))
  {
    uint64_t v8 = *a1;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(*a1 + 56);
    if (v9)
    {
      mlx::core::array::array<float>(v10, v9, INFINITY);
      mlx::core::equal(a1, v10, a2, a3, a4);
      mlx::core::array::~array((mlx::core::array *)v10);
      return;
    }
  }
  std::vector<int> __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_256EFF6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void mlx::core::isneginf(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v10[0] = *(int ***)(*a1 + 56);
  if (mlx::core::issubdtype((unsigned int *)v10, &mlx::core::integer))
  {
    uint64_t v8 = *a1;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(*a1 + 56);
    if (v9)
    {
      mlx::core::array::array<float>(v10, v9, -INFINITY);
      mlx::core::equal(a1, v10, a2, a3, a4);
      mlx::core::array::~array((mlx::core::array *)v10);
      return;
    }
  }
  std::vector<int> __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  mlx::core::full<BOOL>((uint64_t)&__p, 0, 0x100000000, a2, a3, a4);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_256EFF810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void mlx::core::where(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v43[2] = *MEMORY[0x263EF8340];
  uint64_t v11 = a1[1];
  v36[0] = *a1;
  v36[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v36, 0x100000000, a4, a5, &v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  v41[0] = *(void ***)(*a2 + 56);
  unint64_t v34 = *(char **)(*a3 + 56);
  uint64_t v12 = mlx::core::promote_types((int *)v41, (int *)&v34);
  v41[0] = v37;
  v41[1] = (void **)v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2[1];
  v30[0] = *a2;
  v30[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v30, v12, a4, a5, &v42);
  uint64_t v14 = a3[1];
  v29[0] = *a3;
  v29[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v29, v12, a4, a5, v43);
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  long long v33 = 0;
  int v39 = &v31;
  char v40 = 0;
  int v15 = (const void ***)operator new(0x30uLL);
  uint64_t v16 = 0;
  uint64_t v31 = v15;
  unint64_t v32 = v15;
  long long v33 = v15 + 6;
  do
  {
    uint64_t v17 = &v15[v16];
    long long v18 = v41[v16 + 1];
    *uint64_t v17 = (const void **)v41[v16];
    v17[1] = (const void **)v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    }
    v16 += 2;
  }
  while (v16 != 6);
  unint64_t v32 = v15 + 6;
  mlx::core::broadcast_arrays(&v31, a4, a5, (uint64_t)&v34);
  int v39 = &v31;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  for (uint64_t i = 4; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v41[i]);
  mlx::core::array::~array((mlx::core::array *)v29);
  mlx::core::array::~array((mlx::core::array *)v30);
  uint64_t v20 = *(void *)v34;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 2);
  uint64_t v21 = mlx::core::to_stream(a4, a5);
  int v23 = v22;
  long long v24 = operator new(0x30uLL);
  v24[1] = 0;
  void v24[2] = 0;
  void *v24 = &unk_2706338C0;
  *((_DWORD *)v24 + 10) = v23;
  v24[3] = &unk_270635CA8;
  v24[4] = v21;
  *(void *)&long long v27 = v24 + 3;
  *((void *)&v27 + 1) = v24;
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v25, v34, v35, (v35 - v34) >> 4);
  mlx::core::array::array(a6, (long long *)__p, v12, &v27, &v25);
  v41[0] = (void **)&v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v41);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v41[0] = (void **)&v34;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v41);
  mlx::core::array::~array((mlx::core::array *)&v37);
}

void sub_256EFFB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v29 - 120) = v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 120));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v29 - 120) = &a25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 120));
  mlx::core::array::~array((mlx::core::array *)(v29 - 152));
  _Unwind_Resume(a1);
}

void mlx::core::allclose(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  mlx::core::isclose(a1, a2, a3, a4, a5, v13, a7, a8);
  uint64_t v11 = mlx::core::to_stream(a4, a5);
  mlx::core::all((uint64_t)v13, 0, v11, v12 | 0x100000000, a6);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256EFFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::isclose(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v16 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v32, v16, a8);
  uint64_t v17 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v30, v17, a7);
  mlx::core::abs(a2, a4, a5, &v29);
  mlx::core::multiply(v30, &v29, a4, a5, v31);
  mlx::core::add(v32, v31, a4, a5, v33);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)&v29);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::subtract(a1, a2, a4, a5, v31);
  mlx::core::abs(v31, a4, a5, v32);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::less_equal(v32, v33, a4, a5, a6);
  mlx::core::isinf(a1, a4, a5, v30);
  mlx::core::isinf(a2, a4, a5, &v29);
  mlx::core::logical_or(v30, &v29, a4, a5, v31);
  mlx::core::array::~array((mlx::core::array *)&v29);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::isposinf(a1, a4, a5, &v28);
  mlx::core::isposinf(a2, a4, a5, v27);
  mlx::core::logical_and(&v28, v27, a4, a5, &v29);
  mlx::core::isneginf(a1, a4, a5, v25);
  mlx::core::isneginf(a2, a4, a5, v24);
  mlx::core::logical_and(v25, v24, a4, a5, v26);
  mlx::core::logical_or(&v29, v26, a4, a5, v30);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)&v29);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)&v28);
  mlx::core::logical_not(v31, a4, a5, &v28);
  mlx::core::logical_and(a6, &v28, a4, a5, &v29);
  long long v18 = v29;
  long long v29 = 0uLL;
  uint64_t v19 = (std::__shared_weak_count *)a6[1];
  *(_OWORD *)a6 = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  mlx::core::array::~array((mlx::core::array *)&v29);
  mlx::core::array::~array((mlx::core::array *)&v28);
  mlx::core::logical_or(a6, v30, a4, a5, &v29);
  long long v20 = v29;
  long long v29 = 0uLL;
  uint64_t v21 = (std::__shared_weak_count *)a6[1];
  *(_OWORD *)a6 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  mlx::core::array::~array((mlx::core::array *)&v29);
  if (a3)
  {
    mlx::core::isnan(a1, a4, a5, &v28);
    mlx::core::isnan(a2, a4, a5, v27);
    mlx::core::logical_and(&v28, v27, a4, a5, &v29);
    mlx::core::array::~array((mlx::core::array *)v27);
    mlx::core::array::~array((mlx::core::array *)&v28);
    mlx::core::logical_or(a6, &v29, a4, a5, &v28);
    long long v22 = v28;
    long long v28 = 0uLL;
    int v23 = (std::__shared_weak_count *)a6[1];
    *(_OWORD *)a6 = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    mlx::core::array::~array((mlx::core::array *)&v28);
    mlx::core::array::~array((mlx::core::array *)&v29);
  }
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v31);
  mlx::core::array::~array((mlx::core::array *)v32);
  mlx::core::array::~array((mlx::core::array *)v33);
}

void sub_256F00070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array(v11);
  mlx::core::array::~array((mlx::core::array *)(v12 - 96));
  mlx::core::array::~array((mlx::core::array *)(v12 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::abs(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633AF0;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_270634E80;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  long long v20 = (void **)&v16;
  char v21 = 0;
  int v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  uint64_t v17 = v15 + 2;
  *int v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  long long v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::subtract(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v26, (int *)v25);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  uint64_t v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *uint64_t v17 = &unk_270633D20;
  *((_DWORD *)v17 + 10) = v16;
  v17[3] = &unk_270637480;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256F005AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::logical_and(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, 0x100000000, a3, a4, v23);
  uint64_t v10 = a2[1];
  v20[0] = *a2;
  v20[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v20, 0x100000000, a3, a4, v21);
  mlx::core::broadcast_arrays((const void ***)v23, v21, a3, a4, &v24);
  mlx::core::array::~array((mlx::core::array *)v21);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v11 = *(void *)v24;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2);
  uint64_t v12 = mlx::core::to_stream(a3, a4);
  int v14 = v13;
  int v15 = operator new(0x30uLL);
  v15[1] = 0;
  void v15[2] = 0;
  *int v15 = &unk_270633C30;
  *((_DWORD *)v15 + 10) = v14;
  v15[3] = &unk_2706365B0;
  v15[4] = v12;
  *(void *)&long long v18 = v15 + 3;
  *((void *)&v18 + 1) = v15;
  long long v16 = v24;
  uint64_t v17 = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  mlx::core::array::array(a5, (long long *)__p, 0x100000000, &v18, &v16);
  v23[0] = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v23);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v23[0] = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v23);
}

void sub_256F00800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 80) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 80) = v22 - 64;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  _Unwind_Resume(a1);
}

void mlx::core::logical_not(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = mlx::core::to_stream(a2, a3);
  int v11 = v10;
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633BE0;
  *((_DWORD *)v12 + 10) = v11;
  void v12[3] = &unk_270636528;
  v12[4] = v9;
  *(void *)&long long v19 = v12 + 3;
  *((void *)&v19 + 1) = v12;
  uint64_t v13 = a1[1];
  v16[0] = *a1;
  v16[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v16, 0x100000000, a2, a3, v23);
  long long v17 = 0uLL;
  long long v18 = 0;
  uint64_t v21 = (void **)&v17;
  char v22 = 0;
  int v14 = operator new(0x10uLL);
  *(void *)&long long v17 = v14;
  *((void *)&v17 + 1) = v14;
  long long v18 = v14 + 2;
  uint64_t v15 = v23[1];
  *int v14 = v23[0];
  v14[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v17 + 1) = v14 + 2;
  mlx::core::array::array(a4, (long long *)__p, 0x100000000, &v19, &v17);
  uint64_t v21 = (void **)&v17;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v21);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v16);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F00A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 72));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::all(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t v18 = *(void *)(a1 + 8);
    v30[0] = *(void *)a1;
    v30[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v30, 0x100000000, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v30);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
    char v22 = mlx::core::to_stream(a4, a5);
    int v23 = v11;
    int v21 = 0;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v22, &v21, (uint64_t)v29, &v24);
    long long v25 = v24;
    long long v24 = 0uLL;
    uint64_t v13 = *(uint64_t **)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = *(uint64_t **)a1;
    uint64_t v33 = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    *(void *)&long long v31 = &v19;
    BYTE8(v31) = 0;
    int v14 = operator new(0x10uLL);
    *(void *)&long long v19 = v14;
    *((void *)&v19 + 1) = v14;
    uint64_t v20 = v14 + 2;
    uint64_t v15 = v33;
    *int v14 = v13;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v19 + 1) = v14 + 2;
    mlx::core::array::array(a6, (long long *)__p, 0x100000000, &v25, &v19);
    *(void *)&long long v31 = &v19;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v29, a4, a5, (const void ***)&v31);
      long long v16 = v31;
      long long v31 = 0uLL;
      long long v17 = (std::__shared_weak_count *)*((void *)a6 + 1);
      *(_OWORD *)a6 = v16;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      mlx::core::array::~array((mlx::core::array *)&v31);
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    if (v27)
    {
      long long v28 = v27;
      operator delete(v27);
    }
  }
}

void sub_256F00CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F00D80()
{
}

void mlx::core::anonymous namespace'::compute_reduce_shape(int **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  std::vector<int> v45 = 0;
  uint64_t v46 = 0;
  std::string v44 = (uint64_t *)&v45;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = v4 - *a2;
  unint64_t v7 = v6 >> 2;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8)
  {
    uint64_t v13 = 0;
    int v14 = *a1;
  }
  else
  {
    unint64_t v11 = (unint64_t)v6 >> 2;
    do
    {
      unint64_t v12 = (v11 & (*v9 >> 31)) + *v9;
      int v43 = v12;
      if ((v12 & 0x80000000) != 0 || v7 <= v12)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid axis ", 13);
        uint64_t v34 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with ", 16);
        long long v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v41, &v39);
        std::logic_error::logic_error(exception, &v39);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
        __cxa_throw(exception, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v44, &v43, &v43);
      ++v9;
    }
    while (v9 != v8);
    uint64_t v13 = v46;
    uint64_t v9 = *a1;
    int v14 = a1[1];
  }
  if (v13 != v14 - v9)
  {
    std::vector<int> v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "Duplicate axes detected in reduction.");
    v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v37, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int> __p = 0;
  int v41 = 0;
  v42[0] = 0;
  if (v4 == v5) {
    goto LABEL_49;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  do
  {
    long long v17 = v45;
    if (!v45)
    {
LABEL_17:
      uint64_t v19 = *a2;
      if ((unint64_t)v15 < v42[0])
      {
        *(_DWORD *)uint64_t v15 = *(_DWORD *)(v19 + 4 * v16);
        uint64_t v20 = v15 + 4;
        goto LABEL_29;
      }
      int v21 = (char *)__p;
      uint64_t v22 = (v15 - (unsigned char *)__p) >> 2;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v42[0] - (void)__p;
      if ((uint64_t)(v42[0] - (void)__p) >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v25);
        int v21 = (char *)__p;
        uint64_t v15 = v41;
      }
      else
      {
        long long v26 = 0;
      }
      long long v28 = &v26[4 * v22];
      *(_DWORD *)long long v28 = *(_DWORD *)(v19 + 4 * v16);
      uint64_t v27 = v28 + 4;
      while (v15 != v21)
      {
        int v29 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      goto LABEL_46;
    }
    while (1)
    {
      uint64_t v18 = *((int *)v17 + 7);
      if (v16 >= v18) {
        break;
      }
LABEL_16:
      long long v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_17;
      }
    }
    if (v16 > v18)
    {
      ++v17;
      goto LABEL_16;
    }
    if ((unint64_t)v15 >= v42[0])
    {
      int v21 = (char *)__p;
      uint64_t v30 = (v15 - (unsigned char *)__p) >> 2;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v42[0] - (void)__p;
      if ((uint64_t)(v42[0] - (void)__p) >> 1 > v31) {
        unint64_t v31 = v32 >> 1;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v31;
      }
      if (v25)
      {
        long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v25);
        int v21 = (char *)__p;
        uint64_t v15 = v41;
      }
      else
      {
        long long v26 = 0;
      }
      long long v28 = &v26[4 * v30];
      *(_DWORD *)long long v28 = 1;
      uint64_t v27 = v28 + 4;
      while (v15 != v21)
      {
        int v33 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v28 - 1) = v33;
        v28 -= 4;
      }
LABEL_46:
      std::vector<int> __p = v28;
      int v41 = v27;
      v42[0] = &v26[4 * v25];
      if (v21) {
        operator delete(v21);
      }
      goto LABEL_48;
    }
    *(_DWORD *)uint64_t v15 = 1;
    uint64_t v20 = v15 + 4;
LABEL_29:
    uint64_t v27 = v20;
LABEL_48:
    int v41 = v27;
    ++v16;
    uint64_t v15 = v27;
  }
  while (v16 != v7);
LABEL_49:
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v39, v44, &v45);
  std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]<std::vector<int>&,std::vector<int>&,0>(a3, (uint64_t)&__p, (uint64_t)&v39);
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    int v41 = (char *)__p;
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&v44, v45);
}

void sub_256F01168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      std::__tree<int>::destroy(v20 - 120, *(void **)(v20 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::pair<std::vector<int>,std::vector<int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  std::vector<int>::const_reference v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void mlx::core::all(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  unint64_t v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::all(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F01300(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::any(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::vector(&v13, (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::any(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F013C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::any(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t v18 = *(void *)(a1 + 8);
    v30[0] = *(void *)a1;
    v30[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v30, 0x100000000, a4, a5, a6);
    mlx::core::array::~array((mlx::core::array *)v30);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
    uint64_t v22 = mlx::core::to_stream(a4, a5);
    int v23 = v11;
    int v21 = 1;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v22, &v21, (uint64_t)v29, &v24);
    long long v25 = v24;
    long long v24 = 0uLL;
    std::vector<int> v13 = *(uint64_t **)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v32 = *(uint64_t **)a1;
    uint64_t v33 = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    *(void *)&long long v31 = &v19;
    BYTE8(v31) = 0;
    int v14 = operator new(0x10uLL);
    *(void *)&long long v19 = v14;
    *((void *)&v19 + 1) = v14;
    uint64_t v20 = v14 + 2;
    uint64_t v15 = v33;
    *int v14 = v13;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v19 + 1) = v14 + 2;
    mlx::core::array::array(a6, (long long *)__p, 0x100000000, &v25, &v19);
    *(void *)&long long v31 = &v19;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v29, a4, a5, (const void ***)&v31);
      long long v16 = v31;
      long long v31 = 0uLL;
      long long v17 = (std::__shared_weak_count *)*((void *)a6 + 1);
      *(_OWORD *)a6 = v16;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      mlx::core::array::~array((mlx::core::array *)&v31);
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    if (v27)
    {
      long long v28 = v27;
      operator delete(v27);
    }
  }
}

void sub_256F01628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F016B4()
{
}

void mlx::core::any(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::any(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F0175C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::sum(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::vector(&v13, (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::sum(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F0181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::sum(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)a6 = *(void *)a1;
    *((void *)a6 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (*(void *)(*(void *)a1 + 56)) {
      uint64_t v11 = *(void *)(*(void *)a1 + 56);
    }
    else {
      uint64_t v11 = 0x400000004;
    }
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
    int v23 = mlx::core::to_stream(a4, a5);
    int v24 = v12;
    int v22 = 2;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v23, &v22, (uint64_t)v30, &v25);
    long long v26 = v25;
    long long v25 = 0uLL;
    int v14 = *(uint64_t **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v32 = *(uint64_t **)a1;
    uint64_t v33 = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    long long v20 = 0uLL;
    int v21 = 0;
    *(void *)&long long v31 = &v20;
    BYTE8(v31) = 0;
    uint64_t v15 = operator new(0x10uLL);
    *(void *)&long long v20 = v15;
    *((void *)&v20 + 1) = v15;
    int v21 = v15 + 2;
    uint64_t v16 = v33;
    *uint64_t v15 = v14;
    v15[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v20 + 1) = v15 + 2;
    mlx::core::array::array(a6, (long long *)__p, v11, &v26, &v20);
    *(void *)&long long v31 = &v20;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v30, a4, a5, (const void ***)&v31);
      long long v17 = v31;
      long long v31 = 0uLL;
      uint64_t v18 = (std::__shared_weak_count *)*((void *)a6 + 1);
      *(_OWORD *)a6 = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      mlx::core::array::~array((mlx::core::array *)&v31);
    }
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
    if (v28)
    {
      int v29 = v28;
      operator delete(v28);
    }
  }
}

void sub_256F01A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F01AFC()
{
}

void mlx::core::sum(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  int v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::sum(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F01BA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::mean(void *a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  std::vector<int>::vector(&v15, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
  std::vector<int>::pointer begin = v15.__begin_;
  std::vector<int>::pointer end = v15.__end_;
  if (v15.__begin_ != v15.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  uint64_t v13 = mlx::core::to_stream(a3, a4);
  mlx::core::mean(a1, (uint64_t)&v15, a2, v13, v14 | 0x100000000, a5);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
}

void sub_256F01C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::mean(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v12 = (void *)*a1;
  uint64_t v13 = *(_DWORD **)a2;
  unsigned int v14 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v14)
  {
    do
    {
      if (*v13 < -(int)((v12[1] - *v12) >> 2) || *v13 >= (int)((v12[1] - *v12) >> 2))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"[mean] axis ", 12);
        long long v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is out of bounds for array with ", 33);
        uint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v25, &v23);
        std::logic_error::logic_error(exception, &v23);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  uint64_t v24 = v12[7];
  int v21 = 0;
  uint64_t v22 = 0;
  std::vector<int> __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  mlx::core::number_of_elements(a1, (int **)&__p, 1, v16, a4, a5, &v24);
  if (__p)
  {
    int v21 = __p;
    operator delete(__p);
  }
  mlx::core::sum((uint64_t)a1, a2, a3, a4, a5, (mlx::core::array *)&v23);
  mlx::core::multiply(&v23, &v24, a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)&v24);
}

void sub_256F01E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t mlx::core::anonymous namespace'::at_least_float(unsigned int *a1)
{
  if (mlx::core::issubdtype(a1, &mlx::core::inexact)) {
    return *(void *)a1;
  }
  return mlx::core::promote_types((int *)a1, (int *)&mlx::core::float32);
}

void mlx::core::number_of_elements(void *a1@<X0>, int **a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void v36[2] = *MEMORY[0x263EF8340];
  uint64_t v13 = *a2;
  int v12 = a2[1];
  if (*a2 != v12)
  {
    unint64_t v14 = (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2;
    do
    {
      unint64_t v15 = (v14 + *v13) % v14;
      if ((v15 & 0x80000000) != 0 || (int)v15 >= v14)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"[number_of_elements] Can't get the shape for axis ", 50);
        long long v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" from an array with ", 20);
        uint64_t v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" dimensions.", 12);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v35, &v33);
        std::logic_error::logic_error(exception, &v33);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      *v13++ = v15;
    }
    while (v13 != v12);
  }
  memset(__p, 0, sizeof(__p));
  uint64_t v16 = mlx::core::to_stream(a5, a6);
  int v18 = v17;
  int v19 = operator new(0x58uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *int v19 = &unk_270634A90;
  long long v20 = a2[2];
  long long v21 = *(_OWORD *)a2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  *((_DWORD *)v19 + 10) = v18;
  v19[3] = &unk_2706369F0;
  v19[4] = v16;
  *((_OWORD *)v19 + 3) = v21;
  v19[8] = v20;
  *((unsigned char *)v19 + 72) = a3;
  *(void *)((char *)v19 + 76) = a4;
  *(void *)&long long v31 = v19 + 3;
  *((void *)&v31 + 1) = v19;
  uint64_t v23 = *a1;
  uint64_t v22 = a1[1];
  v36[0] = v23;
  v36[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  uint64_t v34 = (void **)&v29;
  v35[0] = 0;
  uint64_t v24 = operator new(0x10uLL);
  *(void *)&long long v29 = v24;
  uint64_t v30 = v24 + 2;
  void *v24 = v23;
  v24[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v29 + 1) = v24 + 2;
  mlx::core::array::array(&v33, (long long *)__p, a4, &v31, &v29);
  mlx::core::stop_gradient(&v33, v25, 0, a7);
  mlx::core::array::~array((mlx::core::array *)&v33);
  uint64_t v34 = (void **)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)v36);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F02240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void mlx::core::mean(void *a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v15[1] = v12 + 1;
  void v15[2] = v12 + 1;
  v15[0] = v12;
  uint64_t v13 = mlx::core::to_stream(a4, a5);
  mlx::core::mean(a1, (uint64_t)v15, a3, v13, v14 | 0x100000000, a6);
  operator delete(v12);
}

void sub_256F0239C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::var(void *a1@<X0>, char a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  std::vector<int>::vector(&v17, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
  std::vector<int>::pointer begin = v17.__begin_;
  std::vector<int>::pointer end = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    int v14 = 0;
    do
      *begin++ = v14++;
    while (begin != end);
  }
  unint64_t v15 = mlx::core::to_stream(a4, a5);
  mlx::core::var(a1, (uint64_t)&v17, a2, a3, v15, v16 | 0x100000000, a6);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_256F02474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::var(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *(void *)uint64_t v27 = *(void *)(*a1 + 56);
  mlx::core::mean(a1, a2, a3, a5, a6, v26);
  mlx::core::square(v26, a5, a6, v27);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::square(a1, a5, a6, v25);
  mlx::core::mean(v25, a2, a3, a5, a6, v26);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::subtract(v26, v27, a5, a6, a7);
  if (a4)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    mlx::core::number_of_elements(a1, (int **)&__p, 0, v14, a5, a6, v25);
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
    mlx::core::array::array<int>(v18, a4, v14);
    mlx::core::subtract(v25, v18, a5, a6, v19);
    mlx::core::array::array<int>(v17, 0, v14);
    mlx::core::maximum(v19, v17, a5, a6, &v20);
    mlx::core::divide(v25, &v20, a5, a6, v21);
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)v17);
    mlx::core::array::~array((mlx::core::array *)v19);
    mlx::core::array::~array((mlx::core::array *)v18);
    mlx::core::multiply(a7, v21, a5, a6, &v20);
    long long v15 = v20;
    long long v20 = 0uLL;
    unsigned int v16 = (std::__shared_weak_count *)a7[1];
    *(_OWORD *)a7 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    mlx::core::array::~array((mlx::core::array *)&v20);
    mlx::core::array::~array((mlx::core::array *)v21);
    mlx::core::array::~array((mlx::core::array *)v25);
  }
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v27);
}

void sub_256F026B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array(v10);
  mlx::core::array::~array((mlx::core::array *)(v11 - 96));
  mlx::core::array::~array((mlx::core::array *)(v11 - 80));
  _Unwind_Resume(a1);
}

void sub_256F02728()
{
}

void sub_256F02730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x256F02708);
}

void sub_256F02748()
{
}

void sub_256F02750()
{
}

void sub_256F02758()
{
}

void sub_256F02764()
{
}

void sub_256F0276C()
{
}

void mlx::core::square(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  int v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  int v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633FF0;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_2706372E8;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  long long v20 = (void **)&v16;
  char v21 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  uint64_t v17 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  long long v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F02918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::divide(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v27[0] = *(void ***)(*a1 + 56);
  v25[0] = *(const void ***)(*a2 + 56);
  *(void *)&long long v28 = mlx::core::promote_types((int *)v27, (int *)v25);
  uint64_t v11 = a1[1];
  v26[0] = *a1;
  v26[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v26, v10, a3, a4, v27);
  uint64_t v12 = a2[1];
  v24[0] = *a2;
  v24[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v24, v10, v13, v14 | 0x100000000, v25);
  mlx::core::broadcast_arrays((const void ***)v27, v25, a3, a4, &v28);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)v26);
  uint64_t v15 = *(void *)v28;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 2);
  long long v16 = mlx::core::to_stream(a3, a4);
  int v18 = v17;
  int v19 = operator new(0x30uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *int v19 = &unk_270633DC0;
  *((_DWORD *)v19 + 10) = v18;
  v19[3] = &unk_270635BA8;
  v19[4] = v16;
  *(void *)&long long v22 = v19 + 3;
  *((void *)&v22 + 1) = v19;
  long long v20 = v28;
  uint64_t v21 = v29;
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v22, &v20);
  v27[0] = (void **)&v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v27);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v27);
}

void sub_256F02B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::var(void *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  unsigned int v14 = operator new(4uLL);
  *unsigned int v14 = a2;
  v17[1] = v14 + 1;
  v17[2] = v14 + 1;
  v17[0] = v14;
  uint64_t v15 = mlx::core::to_stream(a5, a6);
  mlx::core::var(a1, (uint64_t)v17, a3, a4, v15, v16 | 0x100000000, a7);
  operator delete(v14);
}

void sub_256F02CC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::std(void *a1@<X0>, char a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  std::vector<int>::vector(&v17, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
  std::vector<int>::pointer begin = v17.__begin_;
  std::vector<int>::pointer end = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    int v14 = 0;
    do
      *begin++ = v14++;
    while (begin != end);
  }
  uint64_t v15 = mlx::core::to_stream(a4, a5);
  mlx::core::std(a1, (uint64_t)&v17, a2, a3, v15, v16 | 0x100000000, a6);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_256F02DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::std(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  mlx::core::var(a1, a2, a3, a4, a5, a6, v10);
  mlx::core::sqrt(v10, a5, a6, a7);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F02E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::sqrt(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v24[2] = *MEMORY[0x263EF8340];
  uint64_t v22 = *(void ***)(*a1 + 56);
  uint64_t v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  int v12 = v11;
  uint64_t v13 = operator new(0x30uLL);
  v13[1] = 0;
  void v13[2] = 0;
  void *v13 = &unk_270634860;
  *((_DWORD *)v13 + 10) = v12;
  void v13[3] = &unk_270637370;
  v13[4] = v10;
  *((unsigned char *)v13 + 44) = 0;
  *(void *)&long long v20 = v13 + 3;
  *((void *)&v20 + 1) = v13;
  uint64_t v14 = a1[1];
  v17[0] = *a1;
  v17[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v8, a2, a3, v24);
  long long v18 = 0uLL;
  int v19 = 0;
  uint64_t v22 = (void **)&v18;
  char v23 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v15;
  int v19 = v15 + 2;
  uint64_t v16 = v24[1];
  *uint64_t v15 = v24[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  uint64_t v22 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v22);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v17);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::std(void *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14 = operator new(4uLL);
  *uint64_t v14 = a2;
  v17[1] = v14 + 1;
  void v17[2] = v14 + 1;
  v17[0] = v14;
  uint64_t v15 = mlx::core::to_stream(a5, a6);
  mlx::core::std(a1, (uint64_t)v17, a3, a4, v15, v16 | 0x100000000, a7);
  operator delete(v14);
}

void sub_256F03128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::prod(uint64_t a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  std::vector<int>::vector(&v13, (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::prod(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F031E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::prod(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)a6 = *(void *)a1;
    *((void *)a6 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
    uint64_t v11 = *(void *)(*(void *)a1 + 56);
    char v23 = mlx::core::to_stream(a4, a5);
    int v24 = v12;
    int v22 = 3;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v23, &v22, (uint64_t)v30, &v25);
    long long v26 = v25;
    long long v25 = 0uLL;
    uint64_t v14 = *(uint64_t **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v32 = *(uint64_t **)a1;
    uint64_t v33 = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    *(void *)&long long v31 = &v20;
    BYTE8(v31) = 0;
    uint64_t v15 = operator new(0x10uLL);
    *(void *)&long long v20 = v15;
    *((void *)&v20 + 1) = v15;
    uint64_t v21 = v15 + 2;
    uint64_t v16 = v33;
    *uint64_t v15 = v14;
    v15[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v20 + 1) = v15 + 2;
    mlx::core::array::array(a6, (long long *)__p, v11, &v26, &v20);
    *(void *)&long long v31 = &v20;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze(a6, (unsigned int **)v30, a4, a5, (const void ***)&v31);
      long long v17 = v31;
      long long v31 = 0uLL;
      long long v18 = (std::__shared_weak_count *)*((void *)a6 + 1);
      *(_OWORD *)a6 = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      mlx::core::array::~array((mlx::core::array *)&v31);
    }
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
  }
}

void sub_256F03440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F034BC()
{
}

void mlx::core::prod(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  int v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::prod(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F03564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::max(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::max(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F03624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::max(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[max] Cannot max reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    long long v20 = a1[1];
    *a6 = v7;
    a6[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 2);
    uint64_t v12 = (*a1)[7];
    long long v25 = mlx::core::to_stream(a4, a5);
    int v26 = v13;
    int v24 = 5;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v25, &v24, (uint64_t)v32, &v27);
    long long v28 = v27;
    long long v27 = 0uLL;
    uint64_t v15 = *a1;
    uint64_t v14 = a1[1];
    uint64_t v34 = *a1;
    long long v35 = v14;
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    long long v22 = 0uLL;
    char v23 = 0;
    *(void *)&long long v33 = &v22;
    BYTE8(v33) = 0;
    uint64_t v16 = operator new(0x10uLL);
    *(void *)&long long v22 = v16;
    *((void *)&v22 + 1) = v16;
    char v23 = v16 + 2;
    long long v17 = v35;
    *uint64_t v16 = v15;
    v16[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
    }
    *((void *)&v22 + 1) = v16 + 2;
    mlx::core::array::array(a6, (long long *)__p, v12, &v28, &v22);
    *(void *)&long long v33 = &v22;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    mlx::core::array::~array((mlx::core::array *)&v34);
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze((mlx::core::array *)a6, (unsigned int **)v32, a4, a5, (const void ***)&v33);
      long long v18 = v33;
      long long v33 = 0uLL;
      uint64_t v19 = (std::__shared_weak_count *)a6[1];
      *(_OWORD *)a6 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      mlx::core::array::~array((mlx::core::array *)&v33);
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
  }
}

void sub_256F038BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F03948()
{
}

void mlx::core::max(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::max(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F039F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::min(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::min(a1, (uint64_t)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F03AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::min(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[min] Cannot min reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    long long v20 = a1[1];
    *a6 = v7;
    a6[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 2);
    uint64_t v12 = (*a1)[7];
    long long v25 = mlx::core::to_stream(a4, a5);
    int v26 = v13;
    int v24 = 4;
    std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>((uint64_t *)&v25, &v24, (uint64_t)v32, &v27);
    long long v28 = v27;
    long long v27 = 0uLL;
    uint64_t v15 = *a1;
    uint64_t v14 = a1[1];
    uint64_t v34 = *a1;
    long long v35 = v14;
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    long long v22 = 0uLL;
    char v23 = 0;
    *(void *)&long long v33 = &v22;
    BYTE8(v33) = 0;
    uint64_t v16 = operator new(0x10uLL);
    *(void *)&long long v22 = v16;
    *((void *)&v22 + 1) = v16;
    char v23 = v16 + 2;
    long long v17 = v35;
    *uint64_t v16 = v15;
    v16[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
    }
    *((void *)&v22 + 1) = v16 + 2;
    mlx::core::array::array(a6, (long long *)__p, v12, &v28, &v22);
    *(void *)&long long v33 = &v22;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    mlx::core::array::~array((mlx::core::array *)&v34);
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((a3 & 1) == 0)
    {
      mlx::core::squeeze((mlx::core::array *)a6, (unsigned int **)v32, a4, a5, (const void ***)&v33);
      long long v18 = v33;
      long long v33 = 0uLL;
      uint64_t v19 = (std::__shared_weak_count *)a6[1];
      *(_OWORD *)a6 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      mlx::core::array::~array((mlx::core::array *)&v33);
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
  }
}

void sub_256F03D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  mlx::core::array::~array(v23);
  std::pair<std::vector<int>,std::vector<int>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_256F03DD4()
{
}

void mlx::core::min(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v12 = operator new(4uLL);
  _DWORD *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::min(a1, (uint64_t)v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F03E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::argmin(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  uint64_t v10 = (*a1)[6];
  uint64_t v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v10;
  long long v20 = v11 + 1;
  uint64_t v21 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, (const void ***)&v22);
  mlx::core::argmin((uint64_t **)&v22, 0, 1, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)&v22);
  if (__p)
  {
    long long v20 = __p;
    operator delete(__p);
  }
  if (a2)
  {
    std::vector<int>::size_type v12 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
    std::vector<int>::value_type __x = 1;
    std::vector<int>::vector(&v18, v12, &__x);
    mlx::core::reshape((const void ***)a5, (uint64_t)&v18, a3, a4, (const void ***)&v22);
    long long v13 = v22;
    long long v22 = 0uLL;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a5 + 1);
    *(_OWORD *)a5 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    mlx::core::array::~array((mlx::core::array *)&v22);
    if (v18.__begin_)
    {
      v18.__end_ = v18.__begin_;
      operator delete(v18.__begin_);
    }
  }
  else
  {
    mlx::core::squeeze(a5, a3, a4, (const void ***)&v22);
    long long v15 = v22;
    long long v22 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a5 + 1);
    *(_OWORD *)a5 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    mlx::core::array::~array((mlx::core::array *)&v22);
  }
}

void sub_256F03FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  mlx::core::array::~array(v17);
  _Unwind_Resume(a1);
}

void mlx::core::argmin(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  v34[2] = *MEMORY[0x263EF8340];
  unint64_t v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[argmin] Cannot argmin reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  long long v13 = operator new(4uLL);
  _DWORD *v13 = a2;
  *((void *)&v29 + 1) = v13 + 1;
  uint64_t v30 = v13 + 1;
  *(void *)&long long v29 = v13;
  operator delete(v13);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
  uint64_t v14 = mlx::core::to_stream(a4, a5);
  LODWORD(v13) = v15;
  uint64_t v16 = (int *)v33[0];
  long long v17 = operator new(0x38uLL);
  v17[1] = 0;
  void v17[2] = 0;
  *long long v17 = &unk_270633960;
  int v18 = *v16;
  *((_DWORD *)v17 + 10) = v13;
  *((_DWORD *)v17 + 11) = 0;
  void v17[3] = &unk_270635458;
  unsigned int v17[4] = v14;
  *((_DWORD *)v17 + 12) = v18;
  *(void *)&long long v27 = v17 + 3;
  *((void *)&v27 + 1) = v17;
  long long v20 = *a1;
  uint64_t v19 = a1[1];
  v34[0] = v20;
  v34[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  long long v25 = 0uLL;
  int v26 = 0;
  *(void *)&long long v29 = &v25;
  BYTE8(v29) = 0;
  uint64_t v21 = operator new(0x10uLL);
  *(void *)&long long v25 = v21;
  int v26 = v21 + 2;
  *uint64_t v21 = v20;
  v21[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v25 + 1) = v21 + 2;
  mlx::core::array::array(a6, (long long *)__p, 0x400000002, &v27, &v25);
  *(void *)&long long v29 = &v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  mlx::core::array::~array((mlx::core::array *)v34);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze(a6, (unsigned int **)v33, a4, a5, (const void ***)&v29);
    long long v22 = v29;
    long long v29 = 0uLL;
    char v23 = (std::__shared_weak_count *)*((void *)a6 + 1);
    *(_OWORD *)a6 = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    mlx::core::array::~array((mlx::core::array *)&v29);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
}

void sub_256F042D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void sub_256F04354()
{
  operator delete(v0);
  JUMPOUT(0x256F0434CLL);
}

void mlx::core::argmax(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, mlx::core::array *a5@<X8>)
{
  uint64_t v10 = (*a1)[6];
  uint64_t v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v10;
  long long v20 = v11 + 1;
  uint64_t v21 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, (const void ***)&v22);
  mlx::core::argmax((uint64_t **)&v22, 0, 1, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)&v22);
  if (__p)
  {
    long long v20 = __p;
    operator delete(__p);
  }
  if (a2)
  {
    std::vector<int>::size_type v12 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
    std::vector<int>::value_type __x = 1;
    std::vector<int>::vector(&v18, v12, &__x);
    mlx::core::reshape((const void ***)a5, (uint64_t)&v18, a3, a4, (const void ***)&v22);
    long long v13 = v22;
    long long v22 = 0uLL;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a5 + 1);
    *(_OWORD *)a5 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    mlx::core::array::~array((mlx::core::array *)&v22);
    if (v18.__begin_)
    {
      v18.__end_ = v18.__begin_;
      operator delete(v18.__begin_);
    }
  }
  else
  {
    mlx::core::squeeze(a5, a3, a4, (const void ***)&v22);
    long long v15 = v22;
    long long v22 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a5 + 1);
    *(_OWORD *)a5 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    mlx::core::array::~array((mlx::core::array *)&v22);
  }
}

void sub_256F044BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  mlx::core::array::~array(v17);
  _Unwind_Resume(a1);
}

void mlx::core::argmax(uint64_t **a1@<X0>, int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  v34[2] = *MEMORY[0x263EF8340];
  unint64_t v7 = *a1;
  if (!(*a1)[6])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[argmax] Cannot argmax reduce zero size array.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  long long v13 = operator new(4uLL);
  _DWORD *v13 = a2;
  *((void *)&v29 + 1) = v13 + 1;
  uint64_t v30 = v13 + 1;
  *(void *)&long long v29 = v13;
  operator delete(v13);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
  uint64_t v14 = mlx::core::to_stream(a4, a5);
  LODWORD(v13) = v15;
  uint64_t v16 = (int *)v33[0];
  long long v17 = operator new(0x38uLL);
  v17[1] = 0;
  void v17[2] = 0;
  *long long v17 = &unk_270633960;
  int v18 = *v16;
  void v17[3] = &unk_270635458;
  unsigned int v17[4] = v14;
  *((_DWORD *)v17 + 10) = v13;
  *((_DWORD *)v17 + 11) = 1;
  *((_DWORD *)v17 + 12) = v18;
  *(void *)&long long v27 = v17 + 3;
  *((void *)&v27 + 1) = v17;
  long long v20 = *a1;
  uint64_t v19 = a1[1];
  v34[0] = v20;
  v34[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  long long v25 = 0uLL;
  int v26 = 0;
  *(void *)&long long v29 = &v25;
  BYTE8(v29) = 0;
  uint64_t v21 = operator new(0x10uLL);
  *(void *)&long long v25 = v21;
  int v26 = v21 + 2;
  *uint64_t v21 = v20;
  v21[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v25 + 1) = v21 + 2;
  mlx::core::array::array(a6, (long long *)__p, 0x400000002, &v27, &v25);
  *(void *)&long long v29 = &v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  mlx::core::array::~array((mlx::core::array *)v34);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze(a6, (unsigned int **)v33, a4, a5, (const void ***)&v29);
    long long v22 = v29;
    long long v29 = 0uLL;
    char v23 = (std::__shared_weak_count *)*((void *)a6 + 1);
    *(_OWORD *)a6 = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    mlx::core::array::~array((mlx::core::array *)&v29);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
}

void sub_256F047AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void sub_256F0482C()
{
  operator delete(v0);
  JUMPOUT(0x256F04824);
}

void mlx::core::sort(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = operator new(4uLL);
  std::vector<int> __p = v9;
  *uint64_t v9 = v8;
  uint64_t v11 = v9 + 1;
  std::vector<int>::size_type v12 = v9 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, v13);
  mlx::core::sort((std::string::size_type *)v13, 0, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v13);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_256F048E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::sort(std::string::size_type *this@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(void *)(*this + 8) - *(void *)*this) >> 2;
  if ((int)v8 <= a2 || v8 + a2 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"[sort] Received invalid axis ", 29);
    long long v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with ", 16);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, &v33);
    std::logic_error::logic_error(exception, &v33);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (mlx::core::array::shape((mlx::core::array *)this, a2) >= 0x200000
    && (unint64_t)mlx::core::to_stream(a3, a4) >> 32 == 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"[sort] GPU sort cannot handle sort axis of >= 2M elements,", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" got array with sort axis size ", 31);
    mlx::core::array::shape((mlx::core::array *)this, a2);
    int v24 = (void *)std::ostream::operator<<();
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Please place this operation on the CPU instead.", 48);
    int v26 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32, &v33);
    MEMORY[0x25A2B1480](v26, &v33);
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::size_type v11 = *this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2);
  uint64_t v12 = *(void *)(*this + 56);
  long long v13 = mlx::core::to_stream(a3, a4);
  int v15 = v14;
  uint64_t v16 = operator new(0x30uLL);
  v16[1] = 0;
  void v16[2] = 0;
  *uint64_t v16 = &unk_2706339B0;
  *((_DWORD *)v16 + 10) = v15;
  *((_DWORD *)v16 + 11) = a2;
  v16[3] = &unk_2706371E8;
  v16[4] = v13;
  *(void *)&long long v29 = v16 + 3;
  *((void *)&v29 + 1) = v16;
  std::string::size_type v18 = *this;
  std::string::size_type v17 = this[1];
  v33.__r_.__value_.__r.__words[0] = v18;
  v33.__r_.__value_.__l.__size_ = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  long long v27 = 0uLL;
  long long v28 = 0;
  long long v31 = (void **)&v27;
  v32[0] = 0;
  uint64_t v19 = operator new(0x10uLL);
  *(void *)&long long v27 = v19;
  long long v28 = v19 + 2;
  *uint64_t v19 = v18;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v27 + 1) = v19 + 2;
  mlx::core::array::array(a5, (long long *)__p, v12, &v29, &v27);
  long long v31 = (void **)&v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v31);
  mlx::core::array::~array((mlx::core::array *)&v33);
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F04C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 73) < 0)
  {
    operator delete(*(void **)(v19 - 96));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::argsort(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = operator new(4uLL);
  std::vector<int> __p = v9;
  *uint64_t v9 = v8;
  std::string::size_type v11 = v9 + 1;
  uint64_t v12 = v9 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, v13);
  mlx::core::argsort((std::string::size_type *)v13, 0, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v13);
  if (__p)
  {
    std::string::size_type v11 = __p;
    operator delete(__p);
  }
}

void sub_256F04DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::argsort(std::string::size_type *this@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(void *)(*this + 8) - *(void *)*this) >> 2;
  if ((int)v8 <= a2 || v8 + a2 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[argsort] Received invalid axis ", 32);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" for array with ", 16);
    long long v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, &v32);
    std::logic_error::logic_error(exception, &v32);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (mlx::core::array::shape((mlx::core::array *)this, a2) >= 0x200000
    && (unint64_t)mlx::core::to_stream(a3, a4) >> 32 == 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[argsort] GPU sort cannot handle sort axis of >= 2M elements,", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" got array with sort axis size ", 31);
    mlx::core::array::shape((mlx::core::array *)this, a2);
    char v23 = (void *)std::ostream::operator<<();
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)".", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" Please place this operation on the CPU instead.", 48);
    long long v25 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, &v32);
    MEMORY[0x25A2B1480](v25, &v32);
    __cxa_throw(v25, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::size_type v11 = *this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2);
  uint64_t v12 = mlx::core::to_stream(a3, a4);
  int v14 = v13;
  int v15 = operator new(0x30uLL);
  v15[1] = 0;
  void v15[2] = 0;
  *int v15 = &unk_270633A00;
  *((_DWORD *)v15 + 10) = v14;
  *((_DWORD *)v15 + 11) = a2;
  void v15[3] = &unk_2706354E0;
  v15[4] = v12;
  *(void *)&long long v28 = v15 + 3;
  *((void *)&v28 + 1) = v15;
  std::string::size_type v17 = *this;
  std::string::size_type v16 = this[1];
  v32.__r_.__value_.__r.__words[0] = v17;
  v32.__r_.__value_.__l.__size_ = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  long long v26 = 0uLL;
  long long v27 = 0;
  uint64_t v30 = (void **)&v26;
  v31[0] = 0;
  int v18 = operator new(0x10uLL);
  *(void *)&long long v26 = v18;
  long long v27 = v18 + 2;
  *int v18 = v17;
  v18[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v26 + 1) = v18 + 2;
  mlx::core::array::array(a5, (long long *)__p, 0x400000002, &v28, &v26);
  uint64_t v30 = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v30);
  mlx::core::array::~array((mlx::core::array *)&v32);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F05184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 57) < 0)
  {
    operator delete(*(void **)(v19 - 80));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::partition(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = (*a1)[6];
  std::string::size_type v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v10;
  int v13 = v11 + 1;
  int v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::partition((std::string::size_type *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_256F052D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::partition(std::string::size_type *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(void *)(*this + 8) - *(void *)*this) >> 2;
  if ((int)v9 <= a3 || v9 + a3 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"[partition] Received invalid axis ", 34);
    long long v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for array with ", 16);
    long long v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v35, &v36);
    std::logic_error::logic_error(exception, &v36);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v12 = a2;
  if (a2 < 0 && (int v12 = mlx::core::array::shape((mlx::core::array *)this, a3) + a2, v12 < 0)
    || (int v13 = (v9 & (a3 >> 31)) + a3, v12 >= (int)mlx::core::array::shape((mlx::core::array *)this, v13)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"[partition] Received invalid kth ", 33);
    char v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"along axis ", 11);
    int v24 = (void *)std::ostream::operator<<();
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v25, (void *)*this);
    long long v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v35, &v36);
    std::logic_error::logic_error(v26, &v36);
    v26->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v26, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::string::size_type v14 = *this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
  uint64_t v15 = *(void *)(*this + 56);
  std::string::size_type v16 = mlx::core::to_stream(a4, a5);
  int v18 = v17;
  uint64_t v19 = operator new(0x38uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *uint64_t v19 = &unk_270633A50;
  *((_DWORD *)v19 + 10) = v18;
  *((_DWORD *)v19 + 11) = v12;
  v19[3] = &unk_270636B00;
  v19[4] = v16;
  *((_DWORD *)v19 + 12) = v13;
  *(void *)&long long v32 = v19 + 3;
  *((void *)&v32 + 1) = v19;
  std::string::size_type v21 = *this;
  std::string::size_type v20 = this[1];
  v36.__r_.__value_.__r.__words[0] = v21;
  v36.__r_.__value_.__l.__size_ = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v30 = 0uLL;
  long long v31 = 0;
  uint64_t v34 = (void **)&v30;
  v35[0] = 0;
  long long v22 = operator new(0x10uLL);
  *(void *)&long long v30 = v22;
  long long v31 = v22 + 2;
  *long long v22 = v21;
  v22[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v30 + 1) = v22 + 2;
  mlx::core::array::array(a6, (long long *)__p, v15, &v32, &v30);
  uint64_t v34 = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  mlx::core::array::~array((mlx::core::array *)&v36);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F056AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::argpartition(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = (*a1)[6];
  std::string::size_type v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v10;
  int v13 = v11 + 1;
  std::string::size_type v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::argpartition((std::string::size_type *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_256F05800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::argpartition(std::string::size_type *this@<X0>, int a2@<W1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v9 = (*(void *)(*this + 8) - *(void *)*this) >> 2;
  if ((int)v9 <= a3 || v9 + a3 < 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[argpartition] Received invalid axis ", 37);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" for array with ", 16);
    long long v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v34, &v35);
    std::logic_error::logic_error(exception, &v35);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v12 = a2;
  if (a2 < 0 && (int v12 = mlx::core::array::shape((mlx::core::array *)this, a3) + a2, v12 < 0)
    || (int v13 = (v9 & (a3 >> 31)) + a3, v12 >= (int)mlx::core::array::shape((mlx::core::array *)this, v13)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[argpartition] Received invalid kth ", 36);
    long long v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" along axis ", 12);
    char v23 = (void *)std::ostream::operator<<();
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v24, (void *)*this);
    long long v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v34, &v35);
    std::logic_error::logic_error(v25, &v35);
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v25, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::string::size_type v14 = *this;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
  uint64_t v15 = mlx::core::to_stream(a4, a5);
  int v17 = v16;
  int v18 = operator new(0x38uLL);
  v18[1] = 0;
  v18[2] = 0;
  *int v18 = &unk_270633AA0;
  *((_DWORD *)v18 + 10) = v17;
  *((_DWORD *)v18 + 11) = v12;
  v18[3] = &unk_2706353D0;
  v18[4] = v15;
  *((_DWORD *)v18 + 12) = v13;
  *(void *)&long long v31 = v18 + 3;
  *((void *)&v31 + 1) = v18;
  std::string::size_type v20 = *this;
  std::string::size_type v19 = this[1];
  v35.__r_.__value_.__r.__words[0] = v20;
  v35.__r_.__value_.__l.__size_ = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v29 = 0uLL;
  long long v30 = 0;
  uint64_t v33 = (void **)&v29;
  v34[0] = 0;
  std::string::size_type v21 = operator new(0x10uLL);
  *(void *)&long long v29 = v21;
  long long v30 = v21 + 2;
  *std::string::size_type v21 = v20;
  v21[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v29 + 1) = v21 + 2;
  mlx::core::array::array(a6, (long long *)__p, 0x400000002, &v31, &v29);
  uint64_t v33 = (void **)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
  mlx::core::array::~array((mlx::core::array *)&v35);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F05BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::topk(const void ***a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (*a1)[6];
  std::string::size_type v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v10;
  int v13 = v11 + 1;
  std::string::size_type v14 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v15);
  mlx::core::topk((mlx::core::array *)v15, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_256F05D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::topk(mlx::core::array *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  LODWORD(v11) = a3;
  if ((a3 & 0x80000000) != 0) {
    uint64_t v11 = a3 + ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2);
  }
  if ((v11 & 0x80000000) != 0 || (int)v11 >= (int)((*(void *)(*(void *)this + 8) - **(void **)this) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[topk] Received invalid axis ", 29);
    int v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" for array with ", 16);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v25.__end_, &__x);
    std::logic_error::logic_error(exception, &__x);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (a2 < 0 || (int)mlx::core::array::shape(this, v11) < a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[topk] Received invalid k=", 26);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" along axis ", 12);
    std::string::size_type v20 = (void *)std::ostream::operator<<();
    std::string::size_type v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with shape: ", 23);
    mlx::core::operator<<(v21, *(void **)this);
    long long v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v25.__end_, &__x);
    std::logic_error::logic_error(v22, &__x);
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v22, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (mlx::core::array::shape(this, v11) == a2)
  {
    uint64_t v12 = *((void *)this + 1);
    *(void *)a6 = *(void *)this;
    *(void *)(a6 + 8) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::partition((std::string::size_type *)this, -a2, v11, a4, a5, v23);
    std::vector<int>::size_type v13 = (uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2;
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector(&v25, v13, (const std::vector<int>::value_type *)&__x);
    uint64_t v14 = *(void *)this;
    memset(&__x, 0, sizeof(__x));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
    int v15 = mlx::core::array::shape(this, v11);
    v25.__begin_[v11] = v15 - a2;
    mlx::core::slice(v23, (uint64_t)&v25, (uint64_t)&__x, a4, a5, (const void ***)a6);
    if (__x.__r_.__value_.__r.__words[0])
    {
      __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v25.__begin_)
    {
      v25.__end_ = v25.__begin_;
      operator delete(v25.__begin_);
    }
    mlx::core::array::~array((mlx::core::array *)v23);
  }
}

void sub_256F0606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, char a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  std::vector<int>::vector(&v13, ((*a1)[1] - **a1) >> 2);
  std::vector<int>::pointer begin = v13.__begin_;
  std::vector<int>::pointer end = v13.__end_;
  if (v13.__begin_ != v13.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  mlx::core::logsumexp(a1, (unsigned int **)&v13, a2, a3, a4, a5);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F061AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  mlx::core::max(a1, (uint64_t)a2, 1, a4, a5, (uint64_t **)&v22);
  mlx::core::stop_gradient(&v22, a4, a5, &v23);
  mlx::core::array::~array((mlx::core::array *)&v22);
  mlx::core::subtract(a1, &v23, a4, a5, v19);
  mlx::core::exp(v19, a4, a5, v20);
  mlx::core::sum((uint64_t)v20, (uint64_t)a2, a3, a4, a5, (mlx::core::array *)&v21);
  mlx::core::log(&v21, a4, a5, &v22);
  mlx::core::array::~array((mlx::core::array *)&v21);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v19);
  int v17 = 0;
  uint64_t v18 = 0;
  std::vector<int> __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v22, *(void *)(v22 + 8), (uint64_t)(*(void *)(v22 + 8) - *(void *)v22) >> 2);
  mlx::core::reshape((const void ***)&v23, (uint64_t)&__p, a4, a5, v20);
  mlx::core::add(&v22, v20, a4, a5, &v21);
  long long v12 = v21;
  long long v21 = 0uLL;
  std::vector<int> v13 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  long long v22 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  mlx::core::array::~array((mlx::core::array *)&v21);
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  if ((a3 & 1) == 0)
  {
    mlx::core::squeeze((mlx::core::array *)&v23, a2, a4, a5, (const void ***)&v21);
    long long v14 = v21;
    long long v21 = 0uLL;
    int v15 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    long long v23 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    mlx::core::array::~array((mlx::core::array *)&v21);
  }
  mlx::core::isinf(&v23, a4, a5, &v21);
  mlx::core::where(&v21, &v23, &v22, a4, a5, a6);
  mlx::core::array::~array((mlx::core::array *)&v21);
  mlx::core::array::~array((mlx::core::array *)&v22);
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F063BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  mlx::core::array::~array((mlx::core::array *)&a19);
  mlx::core::array::~array((mlx::core::array *)(v19 - 64));
  _Unwind_Resume(a1);
}

void sub_256F06444()
{
}

void sub_256F0644C()
{
}

void mlx::core::stop_gradient(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  long long v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_2706346D0;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_2706373F8;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  int v17 = 0;
  std::string::size_type v20 = (void **)&v16;
  char v21 = 0;
  int v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  int v17 = v15 + 2;
  *int v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  std::string::size_type v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F065F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::log(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706344F0;
  v14[3] = &unk_270636418;
  v14[4] = v11;
  *((_DWORD *)v14 + 10) = v13;
  *((_DWORD *)v14 + 11) = 2;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  int v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *int v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F06840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void sub_256F068A0()
{
}

void sub_256F068AC()
{
}

void mlx::core::exp(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634040;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635F50;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  int v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *int v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F06AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::logsumexp(uint64_t **a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v12 = (unsigned int *)operator new(4uLL);
  unsigned int *v12 = a2;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  v13[0] = v12;
  mlx::core::logsumexp(a1, v13, a3, a4, a5, a6);
  operator delete(v12);
}

void sub_256F06BB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void mlx::core::negative(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  if (!*(_DWORD *)(*a1 + 56))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[negative] Not supported for BOOL, use logical_not instead.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  int v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633B40;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_2706368E0;
  v12[4] = v10;
  *(void *)&long long v19 = v12 + 3;
  *((void *)&v19 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v23[0] = v14;
  v23[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = 0uLL;
  long long v18 = 0;
  uint64_t v21 = (void **)&v17;
  char v22 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v17 = v15;
  long long v18 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v17 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v19, &v17);
  uint64_t v21 = (void **)&v17;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v21);
  mlx::core::array::~array((mlx::core::array *)v23);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F06DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void mlx::core::operator-(void *a1@<X0>, mlx::core *a2@<X1>, void *a3@<X8>)
{
}

void mlx::core::sign(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  int v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633B90;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_270636F40;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  long long v17 = 0;
  uint64_t v20 = (void **)&v16;
  char v21 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  long long v17 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  uint64_t v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F06FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::operator&&(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::operator||(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::reciprocal(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v11[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<float>(v11, v8, 1.0);
  uint64_t v9 = mlx::core::to_stream(a2, a3);
  mlx::core::divide(v11, a1, v9, v10 | 0x100000000, a4);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256F070A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::operator+(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::operator-(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::operator*(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::operator/(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::operator/(void *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v8, v6, a3);
  mlx::core::divide(v8, a1, v7, 0, a2);
  mlx::core::array::~array((mlx::core::array *)v8);
}

{
  uint64_t v6;
  mlx::core *v7;
  int **v8[2];

  uint64_t v6 = mlx::core::TypeToDtype<double>::operator mlx::core::Dtype();
  mlx::core::array::array<double>(v8, v6, a3);
  mlx::core::divide(a1, v8, v7, 0, a2);
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_256F07148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void sub_256F071C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::floor_divide(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v26 = *(void *)(*a1 + 56);
  v25[0] = *(void ***)(*a2 + 56);
  uint64_t v28 = mlx::core::promote_types((int *)&v26, (int *)v25);
  if (mlx::core::issubdtype((unsigned int *)&v28, &mlx::core::inexact))
  {
    mlx::core::divide(a1, a2, a3, a4, &v26);
    mlx::core::floor(&v26, a3, a4, a5);
    mlx::core::array::~array((mlx::core::array *)&v26);
  }
  else
  {
    uint64_t v10 = a1[1];
    v24[0] = *a1;
    v24[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v24, v28, a3, a4, v25);
    uint64_t v11 = a2[1];
    v22[0] = *a2;
    v22[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v22, v28, a3, a4, v23);
    mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
    mlx::core::array::~array((mlx::core::array *)v23);
    mlx::core::array::~array((mlx::core::array *)v22);
    mlx::core::array::~array((mlx::core::array *)v25);
    mlx::core::array::~array((mlx::core::array *)v24);
    uint64_t v12 = *(void *)v26;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2);
    uint64_t v13 = v28;
    uint64_t v14 = mlx::core::to_stream(a3, a4);
    int v16 = v15;
    long long v17 = operator new(0x30uLL);
    v17[1] = 0;
    void v17[2] = 0;
    *long long v17 = &unk_270633DC0;
    *((_DWORD *)v17 + 10) = v16;
    void v17[3] = &unk_270635BA8;
    unsigned int v17[4] = v14;
    *(void *)&long long v20 = v17 + 3;
    *((void *)&v20 + 1) = v17;
    long long v18 = v26;
    uint64_t v19 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    mlx::core::array::array(a5, (long long *)__p, v13, &v20, &v18);
    v25[0] = (void **)&v18;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v25[0] = (void **)&v26;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  }
}

void sub_256F07428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::floor(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633F50;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_270636060;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  long long v17 = 0;
  long long v20 = (void **)&v16;
  char v21 = 0;
  int v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  long long v17 = v15 + 2;
  *int v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  long long v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F07660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::remainder(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v28 = *(void *)(*a1 + 56);
  v27[0] = *(void ***)(*a2 + 56);
  uint64_t v10 = mlx::core::promote_types((int *)&v28, (int *)v27);
  uint64_t v11 = a1[1];
  v26[0] = *a1;
  v26[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v26, v10, a3, a4, v27);
  uint64_t v12 = a2[1];
  v24[0] = *a2;
  v24[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v24, v10, v13, v14 | 0x100000000, v25);
  mlx::core::broadcast_arrays((const void ***)v27, v25, a3, a4, &v28);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)v26);
  uint64_t v15 = *(void *)v28;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 2);
  long long v16 = mlx::core::to_stream(a3, a4);
  int v18 = v17;
  uint64_t v19 = operator new(0x30uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *uint64_t v19 = &unk_270633E10;
  *((_DWORD *)v19 + 10) = v18;
  v19[3] = &unk_270635D30;
  v19[4] = v16;
  *(void *)&long long v22 = v19 + 3;
  *((void *)&v22 + 1) = v19;
  long long v20 = v28;
  uint64_t v21 = v29;
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v22, &v20);
  v27[0] = (void **)&v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v27);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27[0] = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v27);
}

void sub_256F078C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::operator%(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::divmod(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  v38[0] = *(const void ***)(*a1 + 56);
  *(void *)uint64_t v36 = *(void *)(*a2 + 56);
  uint64_t v37 = mlx::core::promote_types((int *)v38, v36);
  if (mlx::core::issubdtype((unsigned int *)&v37, &mlx::core::complexfloating))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[divmod] Complex type not supported.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v10 = a1[1];
  v35[0] = *a1;
  v35[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v35, v37, a3, a4, v38);
  uint64_t v11 = a2[1];
  v34[0] = *a2;
  v34[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v37;
  uint64_t v13 = mlx::core::to_stream(a3, a4);
  mlx::core::astype(v34, v12, v13, v14 | 0x100000000, &__p);
  mlx::core::broadcast_arrays(v38, (const void ***)&__p, a3, a4, v36);
  mlx::core::array::~array((mlx::core::array *)&__p);
  mlx::core::array::~array((mlx::core::array *)v34);
  mlx::core::array::~array((mlx::core::array *)v38);
  mlx::core::array::~array((mlx::core::array *)v35);
  uint64_t v15 = **(void **)v36;
  memset(v38, 0, sizeof(v38));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v38, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 2);
  uint64_t v16 = **(void **)v36;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
  long long v31 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  std::vector<int> __p = &v31;
  LOBYTE(v29) = 0;
  long long v31 = operator new(0x30uLL);
  long long v32 = v31;
  uint64_t v33 = v31 + 6;
  long long v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v33, (uint64_t)v38, (uint64_t)&v41, v31);
  uint64_t v17 = *(void *)(**(void **)v36 + 56);
  int v18 = operator new(0x10uLL);
  uint64_t v29 = v18 + 2;
  long long v30 = v18 + 2;
  *int v18 = v17;
  v18[1] = v17;
  std::vector<int> __p = v18;
  uint64_t v19 = mlx::core::to_stream(a3, a4);
  int v21 = v20;
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x30uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633E60;
  LODWORD(v22[1].__shared_weak_owners_) = v21;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270635C30;
  v22[1].__shared_owners_ = (uint64_t)v19;
  long long v26 = v22 + 1;
  uint64_t v27 = v22;
  mlx::core::array::make_arrays((uint64_t *)&v31, &__p, &v26, (void **)v36, a5);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v31;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    uint64_t v24 = v38[i + 3];
    if (v24)
    {
      v40[i] = v24;
      operator delete(v24);
    }
  }
  v38[0] = (const void **)v36;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
}

void sub_256F07C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void mlx::core::ceil(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *(void *)(*a1 + 56);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  LODWORD(a3) = v11;
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_270633FA0;
  *((_DWORD *)v12 + 10) = a3;
  void v12[3] = &unk_270635810;
  v12[4] = v10;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v22[0] = v14;
  v22[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  int v20 = (void **)&v16;
  char v21 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v16 = v15;
  uint64_t v17 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v16 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v9, &v18, &v16);
  int v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F07F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::expm1(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634090;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635FD8;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::sin(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706340E0;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270636FC8;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F083CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::cos(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634130;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_2706359A8;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::tan(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634180;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270637508;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0888C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arcsin(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706341D0;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635128;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F08AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arccos(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634220;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635018;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F08D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arctan(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  int v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634270;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635238;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F08FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arctan2(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v25[0] = *(void ***)(*a1 + 56);
  v23[0] = *(const void ***)(*a2 + 56);
  *(void *)&long long v26 = mlx::core::promote_types((int *)v25, (int *)v23);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  uint64_t v17 = operator new(0x30uLL);
  v17[1] = 0;
  void v17[2] = 0;
  *uint64_t v17 = &unk_2706342C0;
  *((_DWORD *)v17 + 10) = v16;
  void v17[3] = &unk_2706352C0;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256F09224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::sinh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634310;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270637050;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F094A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::cosh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634360;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635A30;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F09700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::tanh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706343B0;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270637590;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F09960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arcsinh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634400;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_2706351B0;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F09BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arccosh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634450;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_2706350A0;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F09E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::arctanh(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706344A0;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270635348;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::degrees(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v9[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<double>(v9, v8, 57.2957795);
  mlx::core::multiply(a1, v9, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256F0A174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::radians(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v9[0] = *(int ***)(*a1 + 56);
  mlx::core::array::array<double>(v9, v8, 0.0174532925);
  mlx::core::multiply(a1, v9, a2, a3, a4);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256F0A20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::log2(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706344F0;
  *((_DWORD *)v14 + 10) = v13;
  *((_DWORD *)v14 + 11) = 0;
  v14[3] = &unk_270636418;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0A410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void sub_256F0A470()
{
}

void sub_256F0A47C()
{
}

void mlx::core::log10(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706344F0;
  v14[3] = &unk_270636418;
  v14[4] = v11;
  *((_DWORD *)v14 + 10) = v13;
  *((_DWORD *)v14 + 11) = 1;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0A678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void sub_256F0A6D8()
{
}

void sub_256F0A6E4()
{
}

void mlx::core::log1p(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_270634540;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_2706364A0;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::logaddexp(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v25[0] = *(void ***)(*a1 + 56);
  v23[0] = *(const void ***)(*a2 + 56);
  *(void *)&long long v26 = mlx::core::promote_types((int *)v25, (int *)v23);
  uint64_t v11 = a1[1];
  v24[0] = *a1;
  v24[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v24, v10, a3, a4, v25);
  uint64_t v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v10, a3, a4, v23);
  mlx::core::broadcast_arrays((const void ***)v25, v23, a3, a4, &v26);
  mlx::core::array::~array((mlx::core::array *)v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v24);
  uint64_t v13 = *(void *)v26;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  uint64_t v14 = mlx::core::to_stream(a3, a4);
  int v16 = v15;
  uint64_t v17 = operator new(0x30uLL);
  v17[1] = 0;
  void v17[2] = 0;
  *uint64_t v17 = &unk_270634590;
  *((_DWORD *)v17 + 10) = v16;
  void v17[3] = &unk_2706366C0;
  unsigned int v17[4] = v14;
  *(void *)&long long v20 = v17 + 3;
  *((void *)&v20 + 1) = v17;
  long long v18 = v26;
  uint64_t v19 = v27;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  mlx::core::array::array(a5, (long long *)__p, v10, &v20, &v18);
  v25[0] = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_256F0AB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 96) = v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v22 - 80;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void mlx::core::sigmoid(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int> v25 = *(void ***)(*a1 + 56);
  uint64_t v9 = a1[1];
  v22[0] = *a1;
  v22[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v22, v8, a2, a3, &v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  uint64_t v10 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2);
  uint64_t v11 = mlx::core::to_stream(a2, a3);
  int v13 = v12;
  uint64_t v14 = operator new(0x30uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *uint64_t v14 = &unk_2706345E0;
  *((_DWORD *)v14 + 10) = v13;
  v14[3] = &unk_270636EB8;
  v14[4] = v11;
  *(void *)&long long v20 = v14 + 3;
  *((void *)&v20 + 1) = v14;
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  std::vector<int> v25 = (void **)&v18;
  char v26 = 0;
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v18 = v17;
  uint64_t v19 = v17 + 2;
  *uint64_t v17 = v16;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v17 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  std::vector<int> v25 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v25);
  mlx::core::array::~array((mlx::core::array *)v27);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v23);
}

void sub_256F0ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 88) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::erf(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v24[2] = *MEMORY[0x263EF8340];
  uint64_t v22 = *(void ***)(*a1 + 56);
  uint64_t v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  int v12 = v11;
  int v13 = operator new(0x30uLL);
  v13[1] = 0;
  void v13[2] = 0;
  void *v13 = &unk_270634630;
  *((_DWORD *)v13 + 10) = v12;
  void v13[3] = &unk_270635E40;
  v13[4] = v10;
  *(void *)&long long v20 = v13 + 3;
  *((void *)&v20 + 1) = v13;
  uint64_t v14 = a1[1];
  v17[0] = *a1;
  v17[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v8, a2, a3, v24);
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  uint64_t v22 = (void **)&v18;
  char v23 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v15;
  uint64_t v19 = v15 + 2;
  uint64_t v16 = v24[1];
  *uint64_t v15 = v24[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  uint64_t v22 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v22);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v17);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0B01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::erfinv(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v24[2] = *MEMORY[0x263EF8340];
  uint64_t v22 = *(void ***)(*a1 + 56);
  uint64_t v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  uint64_t v10 = mlx::core::to_stream(a2, a3);
  int v12 = v11;
  int v13 = operator new(0x30uLL);
  v13[1] = 0;
  void v13[2] = 0;
  void *v13 = &unk_270634680;
  *((_DWORD *)v13 + 10) = v12;
  void v13[3] = &unk_270635EC8;
  v13[4] = v10;
  *(void *)&long long v20 = v13 + 3;
  *((void *)&v20 + 1) = v13;
  uint64_t v14 = a1[1];
  v17[0] = *a1;
  v17[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v8, a2, a3, v24);
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  uint64_t v22 = (void **)&v18;
  char v23 = 0;
  uint64_t v15 = operator new(0x10uLL);
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v15;
  uint64_t v19 = v15 + 2;
  uint64_t v16 = v24[1];
  *uint64_t v15 = v24[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  uint64_t v22 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v22);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v17);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0B25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::round(void *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(void *)&long long v31 = *(void *)(*a1 + 56);
    float v11 = __exp10((double)a2);
    mlx::core::array::array<float>((int ***)&v32, v10, v11);
    mlx::core::multiply(a1, &v32, a3, a4, &v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    mlx::core::round(&v32, &v31, 0, a3, a4);
    long long v12 = v32;
    long long v32 = 0uLL;
    int v13 = (std::__shared_weak_count *)*((void *)&v31 + 1);
    long long v31 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    mlx::core::array::~array((mlx::core::array *)&v32);
    mlx::core::array::array<float>(v26, v10, 1.0 / v11);
    mlx::core::multiply(&v31, v26, a3, a4, &v32);
    long long v14 = v32;
    long long v32 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v31 + 1);
    long long v31 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    mlx::core::array::~array((mlx::core::array *)&v32);
    mlx::core::array::~array((mlx::core::array *)v26);
    long long v25 = v31;
    if (*((void *)&v31 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(&v25, *(void *)(*a1 + 56), a3, a4, a5);
    mlx::core::array::~array((mlx::core::array *)&v25);
    mlx::core::array::~array((mlx::core::array *)&v31);
  }
  else
  {
    uint64_t v16 = *a1;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
    uint64_t v17 = *(void *)(*a1 + 56);
    long long v18 = mlx::core::to_stream(a3, a4);
    int v20 = v19;
    uint64_t v21 = operator new(0x30uLL);
    v21[1] = 0;
    v21[2] = 0;
    *uint64_t v21 = &unk_270634720;
    *((_DWORD *)v21 + 10) = v20;
    v21[3] = &unk_270636D20;
    v21[4] = v18;
    *(void *)&long long v29 = v21 + 3;
    *((void *)&v29 + 1) = v21;
    uint64_t v23 = *a1;
    uint64_t v22 = a1[1];
    *(void *)&long long v32 = v23;
    *((void *)&v32 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    long long v27 = 0uLL;
    long long v28 = 0;
    *(void *)&long long v31 = &v27;
    BYTE8(v31) = 0;
    uint64_t v24 = operator new(0x10uLL);
    *(void *)&long long v27 = v24;
    long long v28 = v24 + 2;
    void *v24 = v23;
    v24[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v27 + 1) = v24 + 2;
    mlx::core::array::array(a5, (long long *)__p, v17, &v29, &v27);
    *(void *)&long long v31 = &v27;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    mlx::core::array::~array((mlx::core::array *)&v32);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_256F0B598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  mlx::core::array::~array((mlx::core::array *)(v21 - 96));
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::matmul(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  uint64_t v170 = *MEMORY[0x263EF8340];
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = a1[1];
  *(void *)&long long v167 = *a1;
  *((void *)&v167 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = (void *)*a2;
  uint64_t v13 = a2[1];
  *(void *)&long long v166 = *a2;
  *((void *)&v166 + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = v10[1] - *v10;
  if (!v14 || (v17 = v12, uint64_t v16 = *v12, v15 = v17[1], v15 == v16))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[matmul] Got 0 dimension input. Inputs must have at least one dimension.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v14 == 4)
  {
    long long v18 = operator new(8uLL);
    std::vector<int> __p = v18;
    *long long v18 = 0xFFFFFFFF00000001;
    int v164 = v18 + 1;
    v165 = v18 + 1;
    mlx::core::reshape((const void ***)&v167, (uint64_t)&__p, a3, a4, (const void ***)v168);
    long long v19 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    int v20 = (std::__shared_weak_count *)*((void *)&v167 + 1);
    long long v167 = v19;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    mlx::core::array::~array((mlx::core::array *)v168);
    if (__p)
    {
      int v164 = __p;
      operator delete(__p);
    }
    uint64_t v16 = *(void *)v166;
    uint64_t v15 = *(void *)(v166 + 8);
  }
  if (v15 - v16 == 4)
  {
    uint64_t v21 = operator new(8uLL);
    uint64_t v160 = v21;
    *uint64_t v21 = 0x1FFFFFFFFLL;
    int v161 = v21 + 1;
    ldiv_t v162 = v21 + 1;
    mlx::core::reshape((const void ***)&v166, (uint64_t)&v160, a3, a4, (const void ***)v168);
    long long v22 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    uint64_t v23 = (std::__shared_weak_count *)*((void *)&v166 + 1);
    long long v166 = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    mlx::core::array::~array((mlx::core::array *)v168);
    if (v160)
    {
      int v161 = v160;
      operator delete(v160);
    }
  }
  uint64_t v24 = *(void *)(v167 + 8);
  if (v24 == *(void *)v167 || *(void *)(v166 + 8) - *(void *)v166 <= 4uLL) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(_DWORD *)(v24 - 4) != *(_DWORD *)(*(void *)(v166 + 8) - 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v168);
    uint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"[matmul] Last dimension of first input with shape ", 50);
    v120 = mlx::core::operator<<(v119, (void *)v167);
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" must match second to last dimension of", 39);
    int64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" second input with shape ", 25);
    v123 = mlx::core::operator<<(v122, (void *)v166);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)".", 1);
    v124 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v168[1], &v159);
    std::logic_error::logic_error(v124, &v159);
    v124->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v124, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  v168[0] = *(void **)(v167 + 56);
  v159.__r_.__value_.__r.__words[0] = *(void *)(v166 + 56);
  uint64_t v158 = mlx::core::promote_types((int *)v168, (int *)&v159);
  if ((mlx::core::issubdtype((unsigned int *)&v158, mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v168);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"[matmul] Only real floating point types are supported but ", 58);
    v159.__r_.__value_.__r.__words[0] = *(void *)(v167 + 56);
    v126 = mlx::core::operator<<(v125, &v159);
    v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)" and ", 5);
    v144.__begin_ = *(std::vector<int>::pointer *)(v166 + 56);
    unint64_t v128 = mlx::core::operator<<(v127, &v144);
    uint64_t v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)" were provided which results", 28);
    v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)" in ", 4);
    v131 = mlx::core::operator<<(v130, &v158);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)", which is not a real floating point type.", 42);
    uint64_t v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v168[1], &v159);
    std::logic_error::logic_error(v132, &v159);
    v132->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v132, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v25 = *(_DWORD *)(v167 + 56);
  if (v158 != v25)
  {
    long long v157 = v167;
    if (*((void *)&v167 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v167 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(&v157, v158, a3, a4, v168);
    long long v26 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    long long v27 = (std::__shared_weak_count *)*((void *)&v167 + 1);
    long long v167 = v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    mlx::core::array::~array((mlx::core::array *)v168);
    mlx::core::array::~array((mlx::core::array *)&v157);
    int v25 = v158;
  }
  if (v25 != *(_DWORD *)(v166 + 56))
  {
    long long v156 = v166;
    if (*((void *)&v166 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v166 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(&v156, v158, a3, a4, v168);
    long long v28 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    long long v29 = (std::__shared_weak_count *)*((void *)&v166 + 1);
    long long v166 = v28;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    mlx::core::array::~array((mlx::core::array *)v168);
    mlx::core::array::~array((mlx::core::array *)&v156);
  }
  uint64_t v30 = v167;
  long long v31 = *(const void **)v167;
  uint64_t v32 = *(void *)(v167 + 8);
  unint64_t v33 = *(void *)(v166 + 8) - *(void *)v166;
  if ((unint64_t)(v32 - *(void *)v167) < 9)
  {
    if (v33 < 9) {
      goto LABEL_108;
    }
  }
  else if (v33 == 8)
  {
    memset(&v159, 0, sizeof(v159));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v159, *(const void **)v167, *(void *)(v167 + 8), (uint64_t)(*(void *)(v167 + 8) - *(void *)v167) >> 2);
    uint64_t v34 = *(unsigned int *)(v159.__r_.__value_.__l.__size_ - 4);
    std::string v35 = operator new(8uLL);
    v153 = v35;
    void *v35 = (v34 << 32) | 0xFFFFFFFFLL;
    unint64_t v154 = v35 + 1;
    uint64_t v155 = v35 + 1;
    mlx::core::reshape((const void ***)&v167, (uint64_t)&v153, a3, a4, (const void ***)v168);
    long long v36 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    uint64_t v37 = (std::__shared_weak_count *)*((void *)&v167 + 1);
    long long v167 = v36;
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    mlx::core::array::~array((mlx::core::array *)v168);
    if (v153)
    {
      unint64_t v154 = v153;
      operator delete(v153);
    }
    uint64_t v38 = v166;
    uint64_t v39 = *(void *)v166;
    uint64_t v40 = *(void *)(v166 + 8);
    if (v40 == *(void *)v166) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    int v41 = *(_DWORD *)(v40 - 4);
    std::string::size_type size = v159.__r_.__value_.__l.__size_;
    *(_DWORD *)(v159.__r_.__value_.__l.__size_ - 4) = v41;
    std::string::size_type v43 = size - 4;
    if (*(void *)(*a2 + 8) - *(void *)*a2 == 4) {
      v159.__r_.__value_.__l.__size_ = v43;
    }
    if (*(void *)(v167 + 8) == *(void *)v167 || (unint64_t)(*(void *)(v38 + 8) - v39) <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v44 = **(unsigned int **)v167;
    uint64_t v45 = *(unsigned int *)(v39 + 4);
    uint64_t v46 = operator new(8uLL);
    v151[0] = v46;
    void *v46 = v44 | (v45 << 32);
    v151[1] = v46 + 1;
    v151[2] = v46 + 1;
    uint64_t v47 = v158;
    int v48 = mlx::core::to_stream(a3, a4);
    LODWORD(v45) = v49;
    long long v50 = operator new(0x30uLL);
    v50[1] = 0;
    void v50[2] = 0;
    void *v50 = &unk_270634770;
    *((_DWORD *)v50 + 10) = v45;
    v50[3] = &unk_270632280;
    v50[4] = v48;
    *(void *)&long long v150 = v50 + 3;
    *((void *)&v150 + 1) = v50;
    *(_OWORD *)uint64_t v168 = v167;
    if (*((void *)&v167 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v167 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v169 = v166;
    if (*((void *)&v166 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v166 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v148 = 0uLL;
    int64_t v149 = 0;
    v144.__begin_ = (std::vector<int>::pointer)&v148;
    LOBYTE(v144.__end_) = 0;
    uint64_t v51 = (char *)operator new(0x20uLL);
    uint64_t v52 = 0;
    *(void *)&long long v148 = v51;
    *((void *)&v148 + 1) = v51;
    int64_t v149 = v51 + 32;
    do
    {
      int v53 = &v51[v52 * 8];
      long long v54 = (atomic_ullong *)v168[v52 + 1];
      *(void *)int v53 = v168[v52];
      *((void *)v53 + 1) = v54;
      if (v54) {
        atomic_fetch_add_explicit(v54 + 1, 1uLL, memory_order_relaxed);
      }
      v52 += 2;
    }
    while (v52 != 4);
    *((void *)&v148 + 1) = v51 + 32;
    mlx::core::array::array(&v152, (long long *)v151, v47, &v150, &v148);
    v144.__begin_ = (std::vector<int>::pointer)&v148;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    for (uint64_t i = 2; i != -2; i -= 2)
      mlx::core::array::~array((mlx::core::array *)&v168[i]);
    if (*((void *)&v150 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v150 + 1));
    }
    if (v151[0])
    {
      v151[1] = v151[0];
      operator delete(v151[0]);
    }
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v145, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_, (uint64_t)(v159.__r_.__value_.__l.__size_ - v159.__r_.__value_.__r.__words[0]) >> 2);
    mlx::core::reshape((const void ***)&v152, (uint64_t)&v145, a3, a4, a5);
    unint64_t v56 = v145;
    if (!v145) {
      goto LABEL_142;
    }
    uint64_t v146 = v145;
LABEL_141:
    operator delete(v56);
LABEL_142:
    mlx::core::array::~array((mlx::core::array *)&v152);
    goto LABEL_143;
  }
  v168[0] = 0;
  v168[1] = 0;
  *(void *)&long long v169 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v168, v31, v32 - 8, (v32 - 8 - (uint64_t)v31) >> 2);
  std::string v57 = *(const void **)v166;
  uint64_t v58 = *(void *)(v166 + 8) - 8;
  unint64_t v59 = (v58 - *(void *)v166) >> 2;
  memset(&v159, 0, sizeof(v159));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v159, v57, v58, v59);
  mlx::core::broadcast_shapes(v168, &v159, &v144);
  if (*(void *)(v167 + 8) - *(void *)v167 <= 4uLL) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  int v60 = *(_DWORD *)(*(void *)(v167 + 8) - 8);
  std::vector<int>::pointer end = v144.__end_;
  if (v144.__end_ >= v144.__end_cap_.__value_)
  {
    std::vector<int>::pointer begin = v144.__begin_;
    int64_t v64 = v144.__end_ - v144.__begin_;
    unint64_t v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v66 = (char *)v144.__end_cap_.__value_ - (char *)v144.__begin_;
    if (((char *)v144.__end_cap_.__value_ - (char *)v144.__begin_) >> 1 > v65) {
      unint64_t v65 = v66 >> 1;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    if (v67)
    {
      std::vector<int> v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v144.__end_cap_, v67);
      std::vector<int>::pointer begin = v144.__begin_;
      std::vector<int>::pointer end = v144.__end_;
    }
    else
    {
      std::vector<int> v68 = 0;
    }
    uint64_t v69 = (int *)&v68[4 * v64];
    int v70 = (int *)&v68[4 * v67];
    *uint64_t v69 = v60;
    ldiv_t v62 = v69 + 1;
    while (end != begin)
    {
      int v71 = *--end;
      *--uint64_t v69 = v71;
    }
    v144.__begin_ = v69;
    v144.__end_ = v62;
    v144.__end_cap_.__value_ = v70;
    if (begin) {
      operator delete(begin);
    }
  }
  else
  {
    *v144.__end_ = v60;
    ldiv_t v62 = end + 1;
  }
  v144.__end_ = v62;
  uint64_t v72 = *(void *)(v167 + 8);
  if (v72 == *(void *)v167) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  int v73 = *(_DWORD *)(v72 - 4);
  if (v62 >= v144.__end_cap_.__value_)
  {
    std::vector<int>::pointer v75 = v144.__begin_;
    uint64_t v76 = v62 - v144.__begin_;
    unint64_t v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v78 = (char *)v144.__end_cap_.__value_ - (char *)v144.__begin_;
    if (((char *)v144.__end_cap_.__value_ - (char *)v144.__begin_) >> 1 > v77) {
      unint64_t v77 = v78 >> 1;
    }
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v79 = v77;
    }
    if (v79)
    {
      uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v144.__end_cap_, v79);
      std::vector<int>::pointer v75 = v144.__begin_;
      ldiv_t v62 = v144.__end_;
    }
    else
    {
      uint64_t v80 = 0;
    }
    uint64_t v81 = (int *)&v80[4 * v76];
    uint64_t v82 = (int *)&v80[4 * v79];
    *uint64_t v81 = v73;
    unint64_t v74 = v81 + 1;
    while (v62 != v75)
    {
      int v83 = *--v62;
      *--uint64_t v81 = v83;
    }
    v144.__begin_ = v81;
    v144.__end_ = v74;
    v144.__end_cap_.__value_ = v82;
    if (v75) {
      operator delete(v75);
    }
  }
  else
  {
    *ldiv_t v62 = v73;
    unint64_t v74 = v62 + 1;
  }
  v144.__end_ = v74;
  mlx::core::broadcast_to((const void ***)&v167, (const void **)&v144.__begin_, a3, a4, (const void ***)&v152);
  long long v84 = v152;
  long long v152 = 0uLL;
  v85 = (std::__shared_weak_count *)*((void *)&v167 + 1);
  long long v167 = v84;
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  mlx::core::array::~array((mlx::core::array *)&v152);
  if (*(void *)(v166 + 8) - *(void *)v166 <= 4uLL) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v86 = *(void *)(v166 + 8);
  std::vector<int>::pointer v87 = v144.__end_;
  *(v144.__end_ - 2) = *(_DWORD *)(v86 - 8);
  *(v87 - 1) = *(_DWORD *)(v86 - 4);
  mlx::core::broadcast_to((const void ***)&v166, (const void **)&v144.__begin_, a3, a4, (const void ***)&v152);
  long long v88 = v152;
  long long v152 = 0uLL;
  int v89 = (std::__shared_weak_count *)*((void *)&v166 + 1);
  long long v166 = v88;
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  mlx::core::array::~array((mlx::core::array *)&v152);
  if (v144.__begin_)
  {
    v144.__end_ = v144.__begin_;
    operator delete(v144.__begin_);
  }
  if (v159.__r_.__value_.__r.__words[0])
  {
    v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if (v168[0])
  {
    v168[1] = v168[0];
    operator delete(v168[0]);
  }
  uint64_t v30 = v167;
LABEL_108:
  memset(&v159, 0, sizeof(v159));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v159, *(const void **)v30, *(void *)(v30 + 8), (uint64_t)(*(void *)(v30 + 8) - *(void *)v30) >> 2);
  uint64_t v90 = *(void *)(v166 + 8);
  if (v90 == *(void *)v166) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  *(_DWORD *)(v159.__r_.__value_.__l.__size_ - 4) = *(_DWORD *)(v90 - 4);
  uint64_t v91 = mlx::core::to_stream(a3, a4);
  int v93 = v92;
  v94 = operator new(0x30uLL);
  int64_t v95 = v94;
  v94[1] = 0;
  v94[2] = 0;
  void *v94 = &unk_270634770;
  v96 = (char *)(v94 + 3);
  *((_DWORD *)v94 + 10) = v93;
  v94[3] = &unk_270632280;
  v94[4] = v91;
  if (*(void *)(*a1 + 8) - *(void *)*a1 == 4 || *(void *)(*a2 + 8) - *(void *)*a2 == 4)
  {
    memset(v143, 0, sizeof(v143));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v143, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_, (uint64_t)(v159.__r_.__value_.__l.__size_ - v159.__r_.__value_.__r.__words[0]) >> 2);
    uint64_t v97 = v158;
    *(void *)&long long v142 = v96;
    *((void *)&v142 + 1) = v95;
    *(_OWORD *)uint64_t v168 = v167;
    if (*((void *)&v167 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v167 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v169 = v166;
    if (*((void *)&v166 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v166 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v140 = 0uLL;
    int v141 = 0;
    v144.__begin_ = (std::vector<int>::pointer)&v140;
    LOBYTE(v144.__end_) = 0;
    v98 = (char *)operator new(0x20uLL);
    uint64_t v99 = 0;
    *(void *)&long long v140 = v98;
    *((void *)&v140 + 1) = v98;
    int v141 = v98 + 32;
    do
    {
      v100 = &v98[v99 * 8];
      unint64_t v101 = (atomic_ullong *)v168[v99 + 1];
      *(void *)v100 = v168[v99];
      *((void *)v100 + 1) = v101;
      if (v101) {
        atomic_fetch_add_explicit(v101 + 1, 1uLL, memory_order_relaxed);
      }
      v99 += 2;
    }
    while (v99 != 4);
    *((void *)&v140 + 1) = v98 + 32;
    mlx::core::array::array(&v152, (long long *)v143, v97, &v142, &v140);
    v144.__begin_ = (std::vector<int>::pointer)&v140;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    for (uint64_t j = 2; j != -2; j -= 2)
      mlx::core::array::~array((mlx::core::array *)&v168[j]);
    if (*((void *)&v142 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v142 + 1));
    }
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
    uint64_t v103 = *(void *)(*a2 + 8) - *(void *)*a2;
    if (*(void *)(*a1 + 8) - *(void *)*a1 == 4) {
      uint64_t v104 = -2;
    }
    else {
      uint64_t v104 = -1;
    }
    std::string::size_type v106 = v159.__r_.__value_.__l.__size_;
    uint64_t v105 = (void *)v159.__r_.__value_.__r.__words[0];
    if (*(void *)(*a1 + 8) - *(void *)*a1 == 4 || v103 == 4)
    {
      std::string::size_type v108 = v159.__r_.__value_.__l.__size_ + 4 * v104;
      if (v103 == 4) {
        uint64_t v109 = 0;
      }
      else {
        uint64_t v109 = -1;
      }
      int v110 = (const void *)(v108 + 4 * (v109 - v104));
      std::string::size_type v111 = v159.__r_.__value_.__l.__size_ - (void)v110;
      if ((const void *)v159.__r_.__value_.__l.__size_ != v110)
      {
        memmove((void *)(v159.__r_.__value_.__l.__size_ + 4 * v104), v110, v159.__r_.__value_.__l.__size_ - (void)v110);
        uint64_t v105 = (void *)v159.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v106 = v108 + v111;
      v159.__r_.__value_.__l.__size_ = v108 + v111;
    }
    int v137 = v105;
    std::string::size_type v138 = v106;
    std::string::size_type v139 = v159.__r_.__value_.__r.__words[2];
    memset(&v159, 0, sizeof(v159));
    mlx::core::reshape((const void ***)&v152, (uint64_t)&v137, a3, a4, a5);
    unint64_t v56 = v137;
    if (!v137) {
      goto LABEL_142;
    }
    std::string::size_type v138 = (std::string::size_type)v137;
    goto LABEL_141;
  }
  std::string v136 = v159;
  memset(&v159, 0, sizeof(v159));
  uint64_t v112 = v158;
  *(void *)&long long v135 = v94 + 3;
  *((void *)&v135 + 1) = v94;
  *(_OWORD *)uint64_t v168 = v167;
  if (*((void *)&v167 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v167 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v169 = v166;
  if (*((void *)&v166 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v166 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v133 = 0uLL;
  int v134 = 0;
  v144.__begin_ = (std::vector<int>::pointer)&v133;
  LOBYTE(v144.__end_) = 0;
  int v113 = (char *)operator new(0x20uLL);
  uint64_t v114 = 0;
  *(void *)&long long v133 = v113;
  *((void *)&v133 + 1) = v113;
  int v134 = v113 + 32;
  do
  {
    uint64_t v115 = &v113[v114 * 8];
    int v116 = (atomic_ullong *)v168[v114 + 1];
    *(void *)uint64_t v115 = v168[v114];
    *((void *)v115 + 1) = v116;
    if (v116) {
      atomic_fetch_add_explicit(v116 + 1, 1uLL, memory_order_relaxed);
    }
    v114 += 2;
  }
  while (v114 != 4);
  *((void *)&v133 + 1) = v113 + 32;
  mlx::core::array::array(a5, (long long *)&v136, v112, &v135, &v133);
  v144.__begin_ = (std::vector<int>::pointer)&v133;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (uint64_t k = 2; k != -2; k -= 2)
    mlx::core::array::~array((mlx::core::array *)&v168[k]);
  if (*((void *)&v135 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v135 + 1));
  }
  if (v136.__r_.__value_.__r.__words[0])
  {
    v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
    operator delete(v136.__r_.__value_.__l.__data_);
  }
LABEL_143:
  if (v159.__r_.__value_.__r.__words[0])
  {
    v159.__r_.__value_.__l.__size_ = v159.__r_.__value_.__r.__words[0];
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  mlx::core::array::~array((mlx::core::array *)&v166);
  mlx::core::array::~array((mlx::core::array *)&v167);
}

void sub_256F0C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a58 < 0)
  {
    operator delete(__p);
    if ((v71 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a70);
      mlx::core::array::~array((mlx::core::array *)&a66);
      mlx::core::array::~array((mlx::core::array *)&a68);
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v70);
  goto LABEL_6;
}

void mlx::core::gather(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if ((a2[1] - *a2) >> 4 > (unint64_t)((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"[gather] Too many index arrays. Got ", 36);
    uint64_t v40 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" index arrays for input with ", 29);
    int v41 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v59, &v57);
    std::logic_error::logic_error(exception, &v57);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v57, *a3, a3[1]);
  if (v57.__r_.__value_.__r.__words[2] != a3[1] - *a3)
  {
    uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "[gather] Repeat axes not allowed in gather.");
    goto LABEL_48;
  }
  if (v57.__r_.__value_.__r.__words[2])
  {
    if ((*(_DWORD *)(v57.__r_.__value_.__r.__words[0] + 28) & 0x80000000) != 0) {
      goto LABEL_44;
    }
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      do
      {
        std::string::size_type v15 = size;
        std::string::size_type size = *(void *)(size + 8);
      }
      while (size);
    }
    else
    {
      p_std::string::size_type size = &v57.__r_.__value_.__l.__size_;
      do
      {
        std::string::size_type v15 = p_size[2];
        BOOL v17 = *(void *)v15 == (void)p_size;
        p_std::string::size_type size = (std::string::size_type *)v15;
      }
      while (v17);
    }
    if (*(int *)(v15 + 28) >= (unint64_t)((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2))
    {
LABEL_44:
      uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v39, "[gather] Axes don't match array dimensions.");
      goto LABEL_48;
    }
  }
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  if (v57.__r_.__value_.__r.__words[2] != (v18 - *a2) >> 4)
  {
    uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "[gather] Number of index arrays does not match number of axes.");
LABEL_48:
    v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v39, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  while (v19 != v18)
  {
    if (!*(_DWORD *)(*(void *)v19 + 56))
    {
      uint64_t v38 = __cxa_allocate_exception(8uLL);
      void *v38 = "[Gather] Boolean indices not supported.";
      __cxa_throw(v38, MEMORY[0x263F8C1D8], 0);
    }
    v19 += 16;
  }
  uint64_t v21 = **(void **)a1;
  uint64_t v20 = *(void *)(*(void *)a1 + 8);
  if (*(void *)(a4 + 8) - *(void *)a4 != v20 - v21)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"[gather] Got slice_sizes with size ", 35);
    std::string::size_type v43 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" for array with ", 16);
    uint64_t v44 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" dimensions.", 12);
    uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v59, &v56);
    std::logic_error::logic_error(v45, &v56);
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v45, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v20 != v21)
  {
    unint64_t v22 = 0;
    do
    {
      int v23 = *(_DWORD *)(*(void *)a4 + 4 * v22);
      if (v23 < 0 || v23 > (int)mlx::core::array::shape(a1, v22))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v58);
        unint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"[gather] Slice sizes must be in [0, a.shape(i)]. Got ", 53);
        uint64_t v34 = mlx::core::operator<<(v33, (void *)a4);
        std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for array with shape ", 22);
        long long v36 = mlx::core::operator<<(v35, *(void **)a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
        uint64_t v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v59, &v56);
        std::logic_error::logic_error(v37, &v56);
        v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v37, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v22;
    }
    while (v22 < (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  }
  uint64_t v55 = mlx::core::result_type(a2);
  if (mlx::core::issubdtype((unsigned int *)&v55, &mlx::core::inexact))
  {
    uint64_t v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v46, "[gather] Got indices with invalid dtype. Indices must be integral.");
    v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v46, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::broadcast_arrays((const void ****)a2, v24, 0, (uint64_t)&v58);
  int v25 = v58;
  long long v26 = (char ***)v59[0];
  if (v58 == v59[0])
  {
    std::string::size_type v30 = 0;
    memset(&v56, 0, sizeof(v56));
  }
  else
  {
    do
    {
      v54[0] = *v25;
      long long v27 = v25[1];
      v54[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v27 + 1, 1uLL, memory_order_relaxed);
      }
      mlx::core::astype(v54, v55, a5, a6, &v56);
      long long v28 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
      long long v29 = (std::__shared_weak_count *)v25[1];
      *(_OWORD *)int v25 = v28;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      mlx::core::array::~array((mlx::core::array *)&v56);
      mlx::core::array::~array((mlx::core::array *)v54);
      v25 += 2;
    }
    while (v25 != v26);
    memset(&v56, 0, sizeof(v56));
    if (v58 == v59[0] || &v56 == (std::string *)*v58)
    {
      std::string::size_type v30 = 0;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v56, **v58, (uint64_t)(*v58)[1], ((*v58)[1] - **v58) >> 2);
      std::string::size_type v30 = v56.__r_.__value_.__l.__size_;
    }
  }
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)&v56, v30, *(char **)a4, *(char **)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  std::vector<mlx::core::array>::insert(&v58, (uint64_t *)v58, (uint64_t *)a1);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v31 = *(void *)(*(void *)a1 + 56);
  int v49 = mlx::core::to_stream(a5, a6);
  int v50 = v32;
  std::allocate_shared[abi:ne180100]<mlx::core::Gather,std::allocator<mlx::core::Gather>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,void>((uint64_t)&v49, (uint64_t)a3, a4, &v51);
  long long v52 = v51;
  long long v51 = 0uLL;
  uint64_t v48 = 0;
  long long v47 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v47, v58, v59[0], ((char *)v59[0] - (char *)v58) >> 4);
  mlx::core::array::array(a7, (long long *)__p, v31, &v52, &v47);
  int v60 = (void **)&v47;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v60);
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  std::__tree<int>::destroy((uint64_t)&v57, (void *)v57.__r_.__value_.__l.__size_);
}

void sub_256F0CEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,void *a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a37);
      std::__tree<int>::destroy((uint64_t)&a31, a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t *std::vector<mlx::core::array>::insert(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    uint64_t v9 = (uint64_t *)*a1;
    unint64_t v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)a2 - (char *)v9;
    uint64_t v12 = ((char *)a2 - (char *)v9) >> 4;
    uint64_t v13 = v7 - (void)v9;
    if (v13 >> 3 > v10) {
      unint64_t v10 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v10;
    }
    uint64_t v37 = a1 + 2;
    if (v14)
    {
      std::string::size_type v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 2), v14);
      uint64_t v17 = v16;
    }
    else
    {
      std::string::size_type v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v19 = (long long *)&v15[16 * v12];
    uint64_t v34 = v15;
    *(void *)&long long v35 = v19;
    *((void *)&v35 + 1) = v19;
    long long v36 = &v15[16 * v17];
    if (v12 == v17)
    {
      if (v11 < 1)
      {
        if (v9 == v4) {
          unint64_t v21 = 1;
        }
        else {
          unint64_t v21 = v11 >> 3;
        }
        uint64_t v41 = v8;
        unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v8, v21);
        uint64_t v24 = v35;
        uint64_t v25 = *((void *)&v35 + 1) - v35;
        if (*((void *)&v35 + 1) == (void)v35)
        {
          int64x2_t v30 = vdupq_n_s64(v35);
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          uint64_t v26 = v25 >> 4;
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v28 = 16 * v26;
          long long v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)long long v29 = *(_OWORD *)v24;
            v29 += 16;
            *(void *)uint64_t v24 = 0;
            *(void *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          int64x2_t v30 = (int64x2_t)v35;
        }
        uint64_t v31 = v36;
        int v38 = v34;
        uint64_t v34 = v22;
        *(void *)&long long v35 = &v22[16 * (v21 >> 2)];
        int64x2_t v39 = v30;
        *((void *)&v35 + 1) = v27;
        long long v36 = &v22[16 * v23];
        uint64_t v40 = v31;
        std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v38);
        uint64_t v19 = (long long *)*((void *)&v35 + 1);
      }
      else
      {
        if (v12 >= -1) {
          uint64_t v20 = v12 + 1;
        }
        else {
          uint64_t v20 = v12 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<mlx::core::array *,mlx::core::array *,mlx::core::array *>((uint64_t)&v38, v19, v19, (uint64_t)&v19[-(v20 >> 1)]);
        *(void *)&long long v35 = v35 - 16 * (v20 >> 1);
        *((void *)&v35 + 1) = v19;
      }
    }
    *(void *)uint64_t v19 = *a3;
    uint64_t v32 = a3[1];
    *((void *)v19 + 1) = v32;
    if (v32)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      uint64_t v19 = (long long *)*((void *)&v35 + 1);
    }
    *((void *)&v35 + 1) = v19 + 1;
    uint64_t v4 = (uint64_t *)std::vector<mlx::core::array>::__swap_out_circular_buffer(a1, &v34, v4);
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v34);
  }
  else if (a2 == (uint64_t *)v6)
  {
    *a2 = *a3;
    uint64_t v18 = a3[1];
    a2[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = a2 + 2;
  }
  else
  {
    std::vector<mlx::core::array>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    mlx::core::array::operator=(v4, a3);
  }
  return v4;
}

void sub_256F0D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mlx::core::take(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  LODWORD(v6) = a3;
  unint64_t v10 = **(const void ***)a1;
  uint64_t v11 = *(void *)(*(void *)a1 + 8);
  unint64_t v12 = (unint64_t)(v11 - (void)v10) >> 2;
  if ((int)v12 <= (int)v6 || (unsigned int v13 = v12 + v6, (v13 & 0x80000000) != 0))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[take] Received invalid axis ", 29);
    unint64_t v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" for array with ", 16);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(exception, (const std::string *)&v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (!*(void *)(*(void *)a1 + 48) && *(void *)(*a2 + 48))
  {
    long long v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v36, "[take] Cannot do a non-empty take from an array with zero elements.");
    __cxa_throw(v36, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if ((int)v6 >= 0) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v13;
  }
  uint64_t v46 = 0;
  v47[0] = 0;
  v47[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, v10, v11, (v11 - (uint64_t)v10) >> 2);
  *((_DWORD *)v46 + v6) = *(void *)(*a2 + 48) != 0;
  mlx::core::gather(a1, a2, v6, (uint64_t)&v46, a4, a5, &v44);
  if (v6)
  {
    std::vector<int>::vector(&v45, (uint64_t)(*(void *)(v44 + 8) - *(void *)v44) >> 2);
    uint64_t v16 = 0;
    std::vector<int>::pointer begin = v45.__begin_;
    uint64_t v18 = &v45.__begin_[v6];
    uint64_t v20 = *(void *)*a2;
    uint64_t v19 = *(void *)(*a2 + 8);
    uint64_t v21 = (v19 - v20) >> 2;
    int v22 = v21;
    do
      begin[v16++] = v22++;
    while (v6 != v16);
    uint64_t v23 = &v18[v21];
    if (v19 != v20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 4 * v21;
      do
      {
        v18[v24] = v24;
        ++v24;
        v25 -= 4;
      }
      while (v25);
    }
    std::vector<int>::pointer end = v45.__end_;
    if (v23 != v45.__end_)
    {
      int v27 = v6 + ((unint64_t)(v19 - v20) >> 2);
      do
        *v23++ = v27++;
      while (v23 != end);
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)end, end - begin);
    mlx::core::transpose((uint64_t **)&v44, (unsigned int **)&__p, a4, a5, &v43);
    long long v28 = v43;
    long long v43 = 0uLL;
    long long v29 = (std::__shared_weak_count *)*((void *)&v44 + 1);
    long long v44 = v28;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    mlx::core::array::~array((mlx::core::array *)&v43);
    if (__p)
    {
      uint64_t v41 = __p;
      operator delete(__p);
    }
    if (v45.__begin_)
    {
      v45.__end_ = v45.__begin_;
      operator delete(v45.__begin_);
    }
  }
  memset(&v45, 0, sizeof(v45));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)v44, *(void *)(v44 + 8), (uint64_t)(*(void *)(v44 + 8) - *(void *)v44) >> 2);
  std::vector<int>::pointer v30 = v45.__begin_;
  uint64_t v31 = (char *)&v45.__begin_[v6] + *(void *)(*a2 + 8) - *(void *)*a2;
  uint64_t v32 = (char *)((char *)v45.__end_ - (v31 + 4));
  if ((char *)v45.__end_ != v31 + 4)
  {
    memmove(v31, v31 + 4, (char *)v45.__end_ - (v31 + 4));
    std::vector<int>::pointer v30 = v45.__begin_;
  }
  v45.__end_ = (std::vector<int>::pointer)&v32[(void)v31];
  int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v30, (uint64_t)&v32[(void)v31], (&v32[(void)v31] - (char *)v30) >> 2);
  mlx::core::reshape((const void ***)&v44, (uint64_t)&v37, a4, a5, a6);
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v44);
  if (v46)
  {
    v47[0] = v46;
    operator delete(v46);
  }
}

void sub_256F0D65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_256F0D720()
{
}

void mlx::core::gather(mlx::core::array *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  v23[0] = *a2;
  v23[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  std::vector<int> __p = &v20;
  LOBYTE(v18) = 0;
  std::string::size_type v15 = operator new(0x10uLL);
  uint64_t v20 = v15;
  int v22 = v15 + 2;
  *std::string::size_type v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v15 + 2;
  uint64_t v16 = operator new(4uLL);
  std::vector<int> __p = v16;
  *uint64_t v16 = a3;
  uint64_t v18 = v16 + 1;
  uint64_t v19 = v16 + 1;
  mlx::core::gather(a1, (uint64_t *)&v20, (int **)&__p, a4, a5, a6, a7);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v23);
}

void sub_256F0D85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::take(const void ***a1@<X0>, uint64_t *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  unint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *unint64_t v10 = -1;
  unint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v14);
  mlx::core::take((mlx::core::array *)v14, a2, 0, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v14);
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_256F0D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::take_along_axis(mlx::core::array *a1@<X0>, void *a2@<X1>, int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  std::vector<int>::size_type v8 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  if ((int)v8 <= a3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[take_along_axis] Received invalid axis ", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for array with ", 16);
    long long v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(exception, (const std::string *)&v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v8 != (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"[take_along_axis] Indices of dimension ", 39);
    std::vector<int>::pointer v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" does not match array of dimension ", 35);
    uint64_t v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
    uint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v47, &v45);
    std::logic_error::logic_error(v32, (const std::string *)&v45);
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v32, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v46 = 0;
  v47[0] = 0;
  v47[1] = 0;
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v45, v8, (const std::vector<int>::value_type *)&__x);
  if (*(void *)(*(void *)a1 + 8) == **(void **)a1)
  {
    std::vector<int>::size_type v19 = 0;
  }
  else
  {
    std::vector<int>::size_type v13 = 0;
    uint64_t v14 = (v8 & (a3 >> 31)) + a3;
    do
    {
      if (v14 == v13)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](&v46, a2);
      }
      else
      {
        int v15 = mlx::core::array::shape(a1, v13);
        v45.__begin_[v13] = v15;
        int v16 = mlx::core::array::shape(a1, v13);
        uint64_t v17 = mlx::core::to_stream(a4, a5);
        mlx::core::arange(0x400000004, v17, v18 | 0x100000000, (int ***)&v40, 0, (double)v16, 1.0);
        std::vector<int> __p = 0;
        long long v43 = 0;
        uint64_t v44 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v45.__begin_, (uint64_t)v45.__end_, v45.__end_ - v45.__begin_);
        mlx::core::reshape((const void ***)&v40, (uint64_t)&__p, a4, a5, (const void ***)&__x);
        std::vector<mlx::core::array>::push_back[abi:ne180100](&v46, (uint64_t)&__x);
        mlx::core::array::~array((mlx::core::array *)&__x);
        if (__p)
        {
          long long v43 = __p;
          operator delete(__p);
        }
        mlx::core::array::~array((mlx::core::array *)&v40);
        v45.__begin_[v13] = 1;
      }
      ++v13;
      std::vector<int>::size_type v19 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
    }
    while (v19 > v13);
  }
  std::vector<int>::vector(&__x, v19);
  std::vector<int>::pointer begin = __x.__begin_;
  std::vector<int>::pointer end = __x.__end_;
  if (__x.__begin_ != __x.__end_)
  {
    int v22 = 0;
    do
      *begin++ = v22++;
    while (begin != end);
  }
  std::vector<int>::size_type v23 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  v36[0] = *(void *)(*(void *)a1 + 48) != 0;
  std::vector<int>::vector(&v40, v23, v36);
  mlx::core::gather(a1, (uint64_t *)&v46, &__x.__begin_, (uint64_t)&v40, a4, a5, v39);
  uint64_t v24 = *v39[0];
  uint64_t v25 = *(void *)(*(void *)a1 + 8) - **(void **)a1;
  uint64_t v26 = (char *)*v39[0] + v25;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(void *)long long v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v36, v24, (uint64_t)v26, v25 >> 2);
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)v36, (uint64_t)v37, ((uint64_t)v37 - *(void *)v36) >> 2);
  mlx::core::reshape(v39, (uint64_t)&v33, a4, a5, a6);
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (*(void *)v36)
  {
    uint64_t v37 = *(const void **)v36;
    operator delete(*(void **)v36);
  }
  mlx::core::array::~array((mlx::core::array *)v39);
  if (v40.__begin_)
  {
    v40.__end_ = v40.__begin_;
    operator delete(v40.__begin_);
  }
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  v45.__begin_ = (std::vector<int>::pointer)&v46;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
}

void sub_256F0DE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::scatter(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, int a5@<W4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  int v77 = a5;
  unint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (((char *)v11 - (char *)*a2) >> 4 > (unint64_t)((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[scatter] Too many index arrays. Got ", 37);
    long long v52 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" index arrays for input with ", 29);
    int v53 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, &v75);
    std::logic_error::logic_error(exception, &v75);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  while (v12 != v11)
  {
    if (!*((_DWORD *)*v12 + 14))
    {
      std::vector<int> v40 = __cxa_allocate_exception(8uLL);
      void *v40 = "[scatter] Boolean indices not supported.";
      __cxa_throw(v40, MEMORY[0x263F8C1D8], 0);
    }
    v12 += 2;
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>((uint64_t)&v75, *a4, a4[1]);
  if (v75.__r_.__value_.__r.__words[2] != a4[1] - *a4)
  {
    long long v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v51, "[scatter] Repeat axes not allowed in scatter.");
    goto LABEL_56;
  }
  if (v75.__r_.__value_.__r.__words[2])
  {
    if ((*(_DWORD *)(v75.__r_.__value_.__r.__words[0] + 28) & 0x80000000) != 0) {
      goto LABEL_52;
    }
    std::string::size_type size = v75.__r_.__value_.__l.__size_;
    if (v75.__r_.__value_.__l.__size_)
    {
      do
      {
        std::string::size_type v19 = size;
        std::string::size_type size = *(void *)(size + 8);
      }
      while (size);
    }
    else
    {
      p_std::string::size_type size = &v75.__r_.__value_.__l.__size_;
      do
      {
        std::string::size_type v19 = p_size[2];
        BOOL v21 = *(void *)v19 == (void)p_size;
        p_std::string::size_type size = (std::string::size_type *)v19;
      }
      while (v21);
    }
    if (*(int *)(v19 + 28) >= (unint64_t)((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2))
    {
LABEL_52:
      long long v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v51, "[scatter] Axes don't match array dimensions.");
      goto LABEL_56;
    }
  }
  if (v75.__r_.__value_.__r.__words[2] != ((char *)a2[1] - (char *)*a2) >> 4)
  {
    long long v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v51, "[scatter] Number of index arrays does not match number of axes.");
LABEL_56:
    v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v51, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::broadcast_arrays(a2, v17, 0, (uint64_t)&v73);
  int v70 = 0;
  int v71 = 0;
  uint64_t v72 = 0;
  if (v73 == v74 || &v70 == *(void ***)v73)
  {
    int v22 = 0;
    std::vector<int>::size_type v23 = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v70, **(char ***)v73, *(void *)(*(void *)v73 + 8), (uint64_t)(*(void *)(*(void *)v73 + 8) - **(void **)v73) >> 2);
    int v22 = v70;
    std::vector<int>::size_type v23 = v71;
  }
  uint64_t v25 = **(void **)a1;
  uint64_t v24 = *(void *)(*(void *)a1 + 8);
  if (((v23 - v22) >> 2) + ((v24 - v25) >> 2) != (uint64_t)(*(void *)(*(void *)a3 + 8) - **(void **)a3) >> 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[scatter] Updates with ", 23);
    uint64_t v55 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" dimensions does not match the sum of the array and indices dimensions ", 71);
    std::string v56 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)".", 1);
    std::string v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, &v69);
    std::logic_error::logic_error(v57, &v69);
    v57->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v57, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v23 != v22)
  {
    unint64_t v26 = 0;
    do
    {
      int v27 = mlx::core::array::shape(a3, v26);
      if (v27 != *((_DWORD *)v70 + v26))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
        uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[scatter] Update shape ", 23);
        uint64_t v42 = mlx::core::operator<<(v41, *(void **)a3);
        long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" is not valid for broadcasted index shape ", 42);
        uint64_t v44 = mlx::core::operator<<(v43, &v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
        std::vector<int> v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, &v69);
        std::logic_error::logic_error(v45, &v69);
        v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v45, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v26;
    }
    while (v26 < (v71 - (unsigned char *)v70) >> 2);
    uint64_t v25 = **(void **)a1;
    uint64_t v24 = *(void *)(*(void *)a1 + 8);
  }
  if (v24 != v25)
  {
    unint64_t v28 = 0;
    do
    {
      int v29 = mlx::core::array::shape(a3, v28 + ((unint64_t)(v71 - (unsigned char *)v70) >> 2));
      if (v29 > (int)mlx::core::array::shape(a1, v28))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[scatter] Updates with shape ", 29);
        long long v47 = mlx::core::operator<<(v46, *(void **)a3);
        uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" are too large for array with shape ", 36);
        int v49 = mlx::core::operator<<(v48, *(void **)a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".", 1);
        int v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, &v69);
        std::logic_error::logic_error(v50, &v69);
        v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v50, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      ++v28;
    }
    while (v28 < (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  }
  uint64_t v68 = mlx::core::result_type((uint64_t *)a2);
  if (mlx::core::issubdtype((unsigned int *)&v68, &mlx::core::inexact))
  {
    uint64_t v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v58, "[scatter] Got indices with invalid dtype. Indices must be integral.");
    v58->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v58, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int>::pointer v30 = v73;
  for (uint64_t i = v74; v30 != i; v30 += 16)
  {
    v67[0] = *(void *)v30;
    uint64_t v32 = *((void *)v30 + 1);
    v67[1] = v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v67, v68, a6, a7, v76);
    long long v33 = v76[0];
    v76[0] = 0uLL;
    int v34 = (std::__shared_weak_count *)*((void *)v30 + 1);
    *(_OWORD *)std::vector<int>::pointer v30 = v33;
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    mlx::core::array::~array((mlx::core::array *)v76);
    mlx::core::array::~array((mlx::core::array *)v67);
  }
  *(void *)&v76[0] = mlx::core::to_stream(a6, a7);
  DWORD2(v76[0]) = v35;
  v69.__r_.__value_.__r.__words[0] = 1;
  if (mlx::core::operator==((_DWORD *)v76 + 1, &v69)
    && (unint64_t)*(unsigned __int8 *)(*(void *)a1 + 60) << 32 == 0x800000000)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
    unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"[scatter] GPU scatter does not yet support ", 43);
    v69.__r_.__value_.__r.__words[0] = *(void *)(*(void *)a1 + 56);
    int v60 = mlx::core::operator<<(v59, &v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" for the input or updates.", 26);
    long long v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, &v69);
    std::logic_error::logic_error(v61, &v69);
    v61->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v61, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<mlx::core::array>::insert(&v73, (uint64_t *)v73, (uint64_t *)a1);
  long long v36 = (void *)*((void *)a3 + 1);
  v66[0] = *(void *)a3;
  v66[1] = v36;
  if (v36) {
    atomic_fetch_add_explicit(v36 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v66, *(void *)(*(void *)a1 + 56), a6, a7, v76);
  std::vector<mlx::core::array>::push_back[abi:ne180100](&v73, (uint64_t)v76);
  mlx::core::array::~array((mlx::core::array *)v76);
  mlx::core::array::~array((mlx::core::array *)v66);
  uint64_t v37 = *(const void ***)a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v37, (uint64_t)v37[1], ((unsigned char *)v37[1] - (unsigned char *)*v37) >> 2);
  uint64_t v38 = *(void *)(*(void *)a1 + 56);
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)mlx::core::to_stream(a6, a7);
  LODWORD(v69.__r_.__value_.__r.__words[1]) = v39;
  std::allocate_shared[abi:ne180100]<mlx::core::Scatter,std::allocator<mlx::core::Scatter>,mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,void>((uint64_t *)&v69, &v77, (uint64_t)a4, v76);
  long long v64 = v76[0];
  v76[0] = 0uLL;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v62, v73, v74, (v74 - v73) >> 4);
  mlx::core::array::array(a8, (long long *)__p, v38, &v64, &v62);
  int64_t v78 = (void **)&v62;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v78);
  if (*((void *)&v64 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
  }
  if (*((void *)&v76[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v76[0] + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v70)
  {
    int v71 = v70;
    operator delete(v70);
  }
  *(void *)&v76[0] = &v73;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
  std::__tree<int>::destroy((uint64_t)&v75, (void *)v75.__r_.__value_.__l.__size_);
}

void sub_256F0E8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,void *a36,int a37,__int16 a38,char a39,char a40,char *a41,uint64_t a42)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a41);
      if (a29) {
        operator delete(a29);
      }
      a41 = &a32;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
      std::__tree<int>::destroy((uint64_t)&a35, a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void mlx::core::scatter_add(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
}

void mlx::core::scatter_prod(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
}

void mlx::core::scatter_max(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
}

void mlx::core::scatter_min(mlx::core::array *a1@<X0>, const void ****a2@<X1>, mlx::core::array *a3@<X2>, int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
}

void mlx::core::rsqrt(void *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v24[2] = *MEMORY[0x263EF8340];
  int v22 = *(void ***)(*a1 + 56);
  uint64_t v9 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  unint64_t v10 = mlx::core::to_stream(a2, a3);
  int v12 = v11;
  std::vector<int>::size_type v13 = operator new(0x30uLL);
  v13[1] = 0;
  void v13[2] = 0;
  void *v13 = &unk_270634860;
  *((_DWORD *)v13 + 10) = v12;
  void v13[3] = &unk_270637370;
  v13[4] = v10;
  *((unsigned char *)v13 + 44) = 1;
  *(void *)&long long v20 = v13 + 3;
  *((void *)&v20 + 1) = v13;
  uint64_t v14 = a1[1];
  v17[0] = *a1;
  v17[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v8, a2, a3, v24);
  long long v18 = 0uLL;
  std::string::size_type v19 = 0;
  int v22 = (void **)&v18;
  char v23 = 0;
  int v15 = operator new(0x10uLL);
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v15;
  std::string::size_type v19 = v15 + 2;
  uint64_t v16 = v24[1];
  *int v15 = v24[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = v15 + 2;
  mlx::core::array::array(a4, (long long *)__p, v8, &v20, &v18);
  int v22 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v22);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v17);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0ECA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v20 - 88));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::power(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v37[3] = *MEMORY[0x263EF8340];
  *(void *)&long long v36 = (*a1)[7];
  *(void *)&long long v32 = (*a2)[7];
  uint64_t v10 = mlx::core::promote_types((int *)&v36, (int *)&v32);
  int v11 = a1[1];
  v31[0] = *a1;
  v31[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v31, v10, a3, a4, &v36);
  int v12 = a2[1];
  v30[0] = *a2;
  v30[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v30, v10, a3, a4, v37);
  long long v32 = 0uLL;
  long long v33 = 0;
  int v34 = (void **)&v32;
  char v35 = 0;
  std::vector<int>::size_type v13 = (char *)operator new(0x20uLL);
  uint64_t v14 = 0;
  *(void *)&long long v32 = v13;
  *((void *)&v32 + 1) = v13;
  long long v33 = v13 + 32;
  do
  {
    int v15 = &v13[v14 * 8];
    uint64_t v16 = v37[v14 - 1];
    *(void *)int v15 = v37[v14 - 2];
    *((void *)v15 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    v14 += 2;
  }
  while (v14 != 4);
  *((void *)&v32 + 1) = v13 + 32;
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v37[i - 2]);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)v31);
  long long v18 = **a1;
  size_t v19 = (unsigned char *)(*a1)[1] - v18;
  uint64_t v20 = **a2;
  if (v19 != (unsigned char *)(*a2)[1] - v20 || memcmp(v18, v20, v19))
  {
    mlx::core::broadcast_arrays((const void ****)&v32, a3, a4, (uint64_t)&v36);
    std::vector<mlx::core::array>::__vdeallocate((void **)&v32);
    long long v32 = v36;
    long long v33 = (char *)v37[0];
    v37[0] = 0;
    long long v36 = 0uLL;
    int v34 = (void **)&v36;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v34);
  }
  uint64_t v21 = *(void *)v32;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v21, *(void *)(v21 + 8), (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 2);
  int v22 = mlx::core::to_stream(a3, a4);
  int v24 = v23;
  uint64_t v25 = operator new(0x30uLL);
  v25[1] = 0;
  void v25[2] = 0;
  void *v25 = &unk_2706348B0;
  *((_DWORD *)v25 + 10) = v24;
  void v25[3] = &unk_270636B88;
  v25[4] = v22;
  *(void *)&long long v28 = v25 + 3;
  *((void *)&v28 + 1) = v25;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v26, (void *)v32, *((void **)&v32 + 1), (uint64_t)(*((void *)&v32 + 1) - v32) >> 4);
  mlx::core::array::array(a5, (long long *)__p, v10, &v28, &v26);
  *(void *)&long long v36 = &v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = &v32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_256F0F018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 - 128) = &a21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 128));
  _Unwind_Resume(a1);
}

void mlx::core::cumsum(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v11 = **a1;
  uint64_t v12 = (uint64_t)(*a1)[1];
  unint64_t v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[cumsum] Axis ", 14);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" is out of bounds for array with ", 33);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v34, &v35);
    std::logic_error::logic_error(exception, &v35);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if ((*a1)[7]) {
    uint64_t v18 = (uint64_t)(*a1)[7];
  }
  else {
    uint64_t v18 = 0x400000004;
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  size_t v19 = mlx::core::to_stream(a5, a6);
  int v21 = v20;
  int v22 = operator new(0x38uLL);
  v22[1] = 0;
  void v22[2] = 0;
  *int v22 = &unk_270634900;
  void v22[3] = &unk_270636DA8;
  v22[4] = v19;
  *((_DWORD *)v22 + 10) = v21;
  *((_DWORD *)v22 + 11) = 2;
  *((_DWORD *)v22 + 12) = (v13 + a2) % v13;
  *((unsigned char *)v22 + 52) = a3;
  *((unsigned char *)v22 + 53) = a4;
  *(void *)&long long v31 = v22 + 3;
  *((void *)&v31 + 1) = v22;
  int v24 = *a1;
  std::string::size_type v23 = (std::string::size_type)a1[1];
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  v35.__r_.__value_.__l.__size_ = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  long long v29 = 0uLL;
  std::vector<int>::pointer v30 = 0;
  long long v33 = (void **)&v29;
  v34[0] = 0;
  uint64_t v25 = operator new(0x10uLL);
  *(void *)&long long v29 = v25;
  std::vector<int>::pointer v30 = v25 + 2;
  void *v25 = v24;
  v25[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v29 + 1) = v25 + 2;
  mlx::core::array::array(a7, (long long *)__p, v18, &v31, &v29);
  long long v33 = (void **)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v33);
  mlx::core::array::~array((mlx::core::array *)&v35);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0F3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::cumprod(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v11 = **a1;
  uint64_t v12 = (uint64_t)(*a1)[1];
  unint64_t v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"[cumprod] Axis ", 15);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is out of bounds for array with ", 33);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, &v34);
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  uint64_t v18 = (uint64_t)(*a1)[7];
  uint64_t v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  int v21 = operator new(0x38uLL);
  v21[1] = 0;
  v21[2] = 0;
  *int v21 = &unk_270634900;
  v21[3] = &unk_270636DA8;
  v21[4] = v19;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 3;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((unsigned char *)v21 + 52) = a3;
  *((unsigned char *)v21 + 53) = a4;
  *(void *)&long long v30 = v21 + 3;
  *((void *)&v30 + 1) = v21;
  std::string::size_type v23 = *a1;
  std::string::size_type v22 = (std::string::size_type)a1[1];
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v34.__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v28 = 0uLL;
  long long v29 = 0;
  long long v32 = (void **)&v28;
  v33[0] = 0;
  int v24 = operator new(0x10uLL);
  *(void *)&long long v28 = v24;
  long long v29 = v24 + 2;
  void *v24 = v23;
  v24[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v28 + 1) = v24 + 2;
  mlx::core::array::array(a7, (long long *)__p, v18, &v30, &v28);
  long long v32 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)&v34);
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0F6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::cummax(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v11 = **a1;
  uint64_t v12 = (uint64_t)(*a1)[1];
  unint64_t v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"[cummax] Axis ", 14);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is out of bounds for array with ", 33);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, &v34);
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  uint64_t v18 = (uint64_t)(*a1)[7];
  uint64_t v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  int v21 = operator new(0x38uLL);
  v21[1] = 0;
  v21[2] = 0;
  *int v21 = &unk_270634900;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 0;
  v21[3] = &unk_270636DA8;
  v21[4] = v19;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((unsigned char *)v21 + 52) = a3;
  *((unsigned char *)v21 + 53) = a4;
  *(void *)&long long v30 = v21 + 3;
  *((void *)&v30 + 1) = v21;
  std::string::size_type v23 = *a1;
  std::string::size_type v22 = (std::string::size_type)a1[1];
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v34.__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v28 = 0uLL;
  long long v29 = 0;
  long long v32 = (void **)&v28;
  v33[0] = 0;
  int v24 = operator new(0x10uLL);
  *(void *)&long long v28 = v24;
  long long v29 = v24 + 2;
  void *v24 = v23;
  v24[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v28 + 1) = v24 + 2;
  mlx::core::array::array(a7, (long long *)__p, v18, &v30, &v28);
  long long v32 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)&v34);
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0FA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::cummin(const void ***a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v11 = **a1;
  uint64_t v12 = (uint64_t)(*a1)[1];
  unint64_t v13 = (v12 - (uint64_t)v11) >> 2;
  if ((int)v13 <= a2 || -(int)((v12 - (uint64_t)v11) >> 2) > a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"[cummin] Axis ", 14);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is out of bounds for array with ", 33);
    long long v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, &v34);
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  uint64_t v18 = (uint64_t)(*a1)[7];
  uint64_t v19 = mlx::core::to_stream(a5, a6);
  LODWORD(a6) = v20;
  int v21 = operator new(0x38uLL);
  v21[1] = 0;
  v21[2] = 0;
  *int v21 = &unk_270634900;
  v21[3] = &unk_270636DA8;
  v21[4] = v19;
  *((_DWORD *)v21 + 10) = a6;
  *((_DWORD *)v21 + 11) = 1;
  *((_DWORD *)v21 + 12) = (v13 + a2) % v13;
  *((unsigned char *)v21 + 52) = a3;
  *((unsigned char *)v21 + 53) = a4;
  *(void *)&long long v30 = v21 + 3;
  *((void *)&v30 + 1) = v21;
  std::string::size_type v23 = *a1;
  std::string::size_type v22 = (std::string::size_type)a1[1];
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v34.__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v28 = 0uLL;
  long long v29 = 0;
  long long v32 = (void **)&v28;
  v33[0] = 0;
  int v24 = operator new(0x10uLL);
  *(void *)&long long v28 = v24;
  long long v29 = v24 + 2;
  void *v24 = v23;
  v24[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v28 + 1) = v24 + 2;
  mlx::core::array::array(a7, (long long *)__p, v18, &v30, &v28);
  long long v32 = (void **)&v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v32);
  mlx::core::array::~array((mlx::core::array *)&v34);
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F0FDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(char *)(v19 - 89) < 0)
  {
    operator delete(*(void **)(v19 - 112));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::tensordot(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, unsigned int a3@<W2>, mlx::core *a4@<X3>, uint64_t a5@<X4>, const void ***a6@<X8>)
{
  if ((a3 & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axis must be greater or equal to 0.");
    goto LABEL_49;
  }
  unint64_t v9 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  uint64_t v10 = *(void *)(*(void *)a2 + 8);
  if ((v10 - **(void **)a2) >> 2 < v9) {
    unint64_t v9 = (v10 - **(void **)a2) >> 2;
  }
  if (v9 < a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axis must be less than the number of dimensions of a and b.");
LABEL_49:
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  std::vector<int> __p = 0;
  std::vector<int> v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v38 = 0;
  int v39 = 0;
  if (a3)
  {
    for (int i = 0; i != a3; ++i)
    {
      uint64_t v12 = v38;
      if (v38 >= v39)
      {
        uint64_t v14 = (char *)__p;
        uint64_t v15 = (v38 - (unsigned char *)__p) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v39 - (unsigned char *)__p;
        if ((v39 - (unsigned char *)__p) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v18);
          uint64_t v14 = (char *)__p;
          uint64_t v12 = v38;
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v20 = &v19[4 * v15];
        *(_DWORD *)int v20 = i;
        unint64_t v13 = v20 + 4;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        std::vector<int> __p = v20;
        uint64_t v38 = v13;
        int v39 = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v38 = i;
        unint64_t v13 = v12 + 4;
      }
      uint64_t v38 = v13;
      int v22 = i - a3;
      std::string::size_type v23 = v41;
      if (v41 >= v42)
      {
        uint64_t v25 = (char *)v40;
        uint64_t v26 = (v41 - (unsigned char *)v40) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v42 - (unsigned char *)v40;
        if ((v42 - (unsigned char *)v40) >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v29);
          uint64_t v25 = (char *)v40;
          std::string::size_type v23 = v41;
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = &v30[4 * v26];
        *(_DWORD *)long long v31 = v22;
        int v24 = v31 + 4;
        while (v23 != v25)
        {
          int v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        std::vector<int> v40 = v31;
        uint64_t v41 = v24;
        uint64_t v42 = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v41 = v22;
        int v24 = v23 + 4;
      }
      uint64_t v41 = v24;
    }
  }
  mlx::core::tensordot(a1, a2, (unsigned int **)&v40, (unsigned int **)&__p, a4, a5, a6);
  if (__p)
  {
    uint64_t v38 = (char *)__p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
}

void sub_256F100E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void mlx::core::tensordot(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  if ((char *)a3[1] - (char *)*a3 != (char *)a4[1] - (char *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tensordot] axes must have the same size.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v12 = *(uint64_t **)a1;
  uint64_t v13 = *((void *)a1 + 1);
  *(void *)&v150[0] = *(void *)a1;
  *((void *)&v150[0] + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *((void *)a2 + 1);
  *(void *)&long long v149 = *(void *)a2;
  *((void *)&v149 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a3;
  if (a3[1] == *a3)
  {
    unsigned int v17 = 1;
  }
  else
  {
    unint64_t v16 = 0;
    unsigned int v17 = 1;
    do
    {
      int v18 = mlx::core::array::shape((mlx::core::array *)v150, v15[v16]);
      if (v16 >= a4[1] - *a4) {
        goto LABEL_165;
      }
      if (v18 != mlx::core::array::shape((mlx::core::array *)&v149, (*a4)[v16]))
      {
        uint64_t v115 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v115, "[tensordot] a and b must have the same shape on the contracted axes.");
        v115->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v115, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
      }
      if (v16 >= a3[1] - *a3) {
LABEL_165:
      }
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v17 *= mlx::core::array::shape((mlx::core::array *)v150, (*a3)[v16++]);
      uint64_t v15 = *a3;
    }
    while (v16 < a3[1] - *a3);
    uint64_t v12 = *(uint64_t **)&v150[0];
  }
  unint64_t v19 = (v12[1] - *v12) >> 2;
  LOBYTE(v147[0]) = 0;
  std::vector<BOOL>::vector(&v148, v19, (unsigned __int8 *)v147);
  unint64_t v20 = (uint64_t)(*(void *)(v149 + 8) - *(void *)v149) >> 2;
  LOBYTE(v144) = 0;
  std::vector<BOOL>::vector(v147, v20, (unsigned __int8 *)&v144);
  int v21 = *a3;
  int v22 = a3[1];
  if (*a3 != v22)
  {
    std::string::size_type v23 = *(void **)&v150[0];
    int v24 = v148;
    uint64_t v25 = *a3;
    do
    {
      uint64_t v26 = *v25;
      if ((v26 & 0x80000000) != 0) {
        v26 += (uint64_t)(v23[1] - *v23) >> 2;
      }
      *(void *)&v24[((unint64_t)(int)v26 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v26;
      ++v25;
    }
    while (v25 != v22);
  }
  unint64_t v27 = *a4;
  uint64_t v28 = a4[1];
  if (*a4 != v28)
  {
    unint64_t v29 = (void *)v149;
    long long v30 = (char *)v147[0];
    do
    {
      uint64_t v31 = *v27;
      if ((v31 & 0x80000000) != 0) {
        v31 += (uint64_t)(v29[1] - *v29) >> 2;
      }
      *(void *)&v30[((unint64_t)(int)v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
      ++v27;
    }
    while (v27 != v28);
  }
  v117 = a7;
  std::vector<int> v144 = 0;
  uint64_t v145 = 0;
  unint64_t v146 = 0;
  int v141 = 0;
  long long v142 = 0;
  unint64_t v143 = 0;
  std::string::size_type v139 = 0;
  unint64_t v140 = 0;
  std::vector<int> __p = 0;
  int v32 = *(uint64_t **)a1;
  uint64_t v33 = **(void **)a1;
  if (*(void *)(*(void *)a1 + 8) == v33)
  {
    unsigned int v120 = 1;
  }
  else
  {
    unint64_t v34 = 0;
    unsigned int v120 = 1;
    do
    {
      if (((*(void *)&v148[(v34 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v34) & 1) == 0)
      {
        uint64_t v35 = v145;
        if ((unint64_t)v145 >= v146)
        {
          uint64_t v37 = v144;
          uint64_t v38 = (v145 - v144) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v146 - (void)v144;
          if ((uint64_t)(v146 - (void)v144) >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v41);
            uint64_t v37 = v144;
            uint64_t v35 = v145;
          }
          else
          {
            uint64_t v42 = 0;
          }
          int v43 = &v42[4 * v38];
          *(_DWORD *)int v43 = v34;
          uint64_t v36 = v43 + 4;
          while (v35 != v37)
          {
            int v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          std::vector<int> v144 = v43;
          uint64_t v145 = v36;
          unint64_t v146 = (unint64_t)&v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v145 = v34;
          uint64_t v36 = v35 + 4;
        }
        uint64_t v145 = v36;
        int v45 = mlx::core::array::shape(a1, v34);
        int v46 = mlx::core::array::shape(a1, v34);
        int v47 = v46;
        uint64_t v48 = v139;
        if ((unint64_t)v139 >= v140)
        {
          int v50 = __p;
          uint64_t v51 = ((char *)v139 - (unsigned char *)__p) >> 2;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v53 = v140 - (void)__p;
          if ((uint64_t)(v140 - (void)__p) >> 1 > v52) {
            unint64_t v52 = v53 >> 1;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v52;
          }
          if (v54)
          {
            uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v54);
            int v50 = __p;
            uint64_t v48 = v139;
          }
          else
          {
            uint64_t v55 = 0;
          }
          std::string v56 = &v55[4 * v51];
          *(_DWORD *)std::string v56 = v47;
          int v49 = v56 + 4;
          while (v48 != v50)
          {
            int v57 = *--v48;
            *((_DWORD *)v56 - 1) = v57;
            v56 -= 4;
          }
          std::vector<int> __p = v56;
          std::string::size_type v139 = v49;
          unint64_t v140 = (unint64_t)&v55[4 * v54];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *std::string::size_type v139 = v46;
          int v49 = v48 + 1;
        }
        v120 *= v45;
        std::string::size_type v139 = v49;
        int v32 = *(uint64_t **)a1;
        uint64_t v33 = **(void **)a1;
      }
      ++v34;
    }
    while (v34 < (v32[1] - v33) >> 2);
    int v21 = *a3;
    int v22 = a3[1];
  }
  if (v21 != v22)
  {
    uint64_t v58 = (unsigned int *)v145;
    do
    {
      unsigned int v59 = *v21;
      if ((unint64_t)v58 >= v146)
      {
        long long v61 = v144;
        uint64_t v62 = ((char *)v58 - v144) >> 2;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v146 - (void)v144;
        if ((uint64_t)(v146 - (void)v144) >> 1 > v63) {
          unint64_t v63 = v64 >> 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          int64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v65);
          long long v61 = v144;
          uint64_t v58 = (unsigned int *)v145;
        }
        else
        {
          int64_t v66 = 0;
        }
        unint64_t v67 = &v66[4 * v62];
        *(_DWORD *)unint64_t v67 = v59;
        int v60 = v67 + 4;
        while (v58 != (unsigned int *)v61)
        {
          int v68 = *--v58;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        std::vector<int> v144 = v67;
        uint64_t v145 = v60;
        unint64_t v146 = (unint64_t)&v66[4 * v65];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *uint64_t v58 = v59;
        int v60 = (char *)(v58 + 1);
      }
      uint64_t v145 = v60;
      ++v21;
      uint64_t v58 = (unsigned int *)v60;
    }
    while (v21 != v22);
  }
  std::string v69 = *a4;
  int v70 = a4[1];
  if (*a4 != v70)
  {
    int v71 = (unsigned int *)v142;
    do
    {
      unsigned int v72 = *v69;
      if ((unint64_t)v71 >= v143)
      {
        unint64_t v74 = v141;
        uint64_t v75 = ((char *)v71 - v141) >> 2;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v77 = v143 - (void)v141;
        if ((uint64_t)(v143 - (void)v141) >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          unint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v143, v78);
          unint64_t v74 = v141;
          int v71 = (unsigned int *)v142;
        }
        else
        {
          unint64_t v79 = 0;
        }
        uint64_t v80 = &v79[4 * v75];
        *(_DWORD *)uint64_t v80 = v72;
        int v73 = v80 + 4;
        while (v71 != (unsigned int *)v74)
        {
          int v81 = *--v71;
          *((_DWORD *)v80 - 1) = v81;
          v80 -= 4;
        }
        int v141 = v80;
        long long v142 = v73;
        unint64_t v143 = (unint64_t)&v79[4 * v78];
        if (v74) {
          operator delete(v74);
        }
      }
      else
      {
        unsigned int *v71 = v72;
        int v73 = (char *)(v71 + 1);
      }
      long long v142 = v73;
      ++v69;
      int v71 = (unsigned int *)v73;
    }
    while (v69 != v70);
  }
  uint64_t v82 = *(uint64_t **)a2;
  uint64_t v83 = **(void **)a2;
  if (*(void *)(*(void *)a2 + 8) == v83)
  {
    uint64_t v85 = 1;
  }
  else
  {
    unint64_t v84 = 0;
    uint64_t v85 = 1;
    do
    {
      if (((*(void *)((char *)v147[0] + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v84) & 1) == 0)
      {
        uint64_t v86 = v142;
        if ((unint64_t)v142 >= v143)
        {
          long long v88 = v141;
          uint64_t v89 = (v142 - v141) >> 2;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v91 = v143 - (void)v141;
          if ((uint64_t)(v143 - (void)v141) >> 1 > v90) {
            unint64_t v90 = v91 >> 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          if (v92)
          {
            int v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v143, v92);
            long long v88 = v141;
            uint64_t v86 = v142;
          }
          else
          {
            int v93 = 0;
          }
          v94 = &v93[4 * v89];
          *(_DWORD *)v94 = v84;
          std::vector<int>::pointer v87 = v94 + 4;
          while (v86 != v88)
          {
            int v95 = *((_DWORD *)v86 - 1);
            v86 -= 4;
            *((_DWORD *)v94 - 1) = v95;
            v94 -= 4;
          }
          int v141 = v94;
          long long v142 = v87;
          unint64_t v143 = (unint64_t)&v93[4 * v92];
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          *(_DWORD *)long long v142 = v84;
          std::vector<int>::pointer v87 = v86 + 4;
        }
        long long v142 = v87;
        int v96 = mlx::core::array::shape(a2, v84);
        int v97 = mlx::core::array::shape(a2, v84);
        int v98 = v97;
        uint64_t v99 = v139;
        if ((unint64_t)v139 >= v140)
        {
          unint64_t v101 = __p;
          uint64_t v102 = ((char *)v139 - (unsigned char *)__p) >> 2;
          unint64_t v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v104 = v140 - (void)__p;
          if ((uint64_t)(v140 - (void)__p) >> 1 > v103) {
            unint64_t v103 = v104 >> 1;
          }
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v105 = v103;
          }
          if (v105)
          {
            std::string::size_type v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v105);
            unint64_t v101 = __p;
            uint64_t v99 = v139;
          }
          else
          {
            std::string::size_type v106 = 0;
          }
          int v107 = &v106[4 * v102];
          *(_DWORD *)int v107 = v98;
          v100 = v107 + 4;
          while (v99 != v101)
          {
            int v108 = *--v99;
            *((_DWORD *)v107 - 1) = v108;
            v107 -= 4;
          }
          std::vector<int> __p = v107;
          std::string::size_type v139 = v100;
          unint64_t v140 = (unint64_t)&v106[4 * v105];
          if (v101) {
            operator delete(v101);
          }
        }
        else
        {
          *std::string::size_type v139 = v97;
          v100 = v99 + 1;
        }
        uint64_t v85 = (v96 * v85);
        std::string::size_type v139 = v100;
        uint64_t v82 = *(uint64_t **)a2;
        uint64_t v83 = **(void **)a2;
      }
      ++v84;
    }
    while (v84 < (v82[1] - v83) >> 2);
  }
  int v134 = 0;
  uint64_t v135 = 0;
  long long v133 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, v144, (uint64_t)v145, (v145 - v144) >> 2);
  mlx::core::transpose((uint64_t **)v150, (unsigned int **)&v133, a5, a6, v136);
  uint64_t v109 = operator new(8uLL);
  v130 = v109;
  *uint64_t v109 = v120 | ((unint64_t)v17 << 32);
  v131 = v109 + 1;
  uint64_t v132 = v109 + 1;
  mlx::core::reshape(v136, (uint64_t)&v130, a5, a6, (const void ***)&v137);
  long long v110 = v137;
  long long v137 = 0uLL;
  std::string::size_type v111 = (std::__shared_weak_count *)*((void *)&v150[0] + 1);
  v150[0] = v110;
  if (v111) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v111);
  }
  mlx::core::array::~array((mlx::core::array *)&v137);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  mlx::core::array::~array((mlx::core::array *)v136);
  if (v133)
  {
    int v134 = v133;
    operator delete(v133);
  }
  unint64_t v128 = 0;
  uint64_t v129 = 0;
  v127 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v127, v141, (uint64_t)v142, (v142 - v141) >> 2);
  mlx::core::transpose((uint64_t **)&v149, (unsigned int **)&v127, a5, a6, v136);
  uint64_t v112 = operator new(8uLL);
  v124 = v112;
  *uint64_t v112 = v17 | (unint64_t)(v85 << 32);
  v125 = v112 + 1;
  v126 = v112 + 1;
  mlx::core::reshape(v136, (uint64_t)&v124, a5, a6, (const void ***)&v137);
  long long v113 = v137;
  long long v137 = 0uLL;
  uint64_t v114 = (std::__shared_weak_count *)*((void *)&v149 + 1);
  long long v149 = v113;
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  mlx::core::array::~array((mlx::core::array *)&v137);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  mlx::core::array::~array((mlx::core::array *)v136);
  if (v127)
  {
    unint64_t v128 = v127;
    operator delete(v127);
  }
  mlx::core::matmul(v150, &v149, a5, a6, (const void ***)&v137);
  v121 = 0;
  int64_t v122 = 0;
  uint64_t v123 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v121, __p, (uint64_t)v139, ((char *)v139 - (unsigned char *)__p) >> 2);
  mlx::core::reshape((const void ***)&v137, (uint64_t)&v121, a5, a6, v117);
  if (v121)
  {
    int64_t v122 = v121;
    operator delete(v121);
  }
  mlx::core::array::~array((mlx::core::array *)&v137);
  if (__p)
  {
    std::string::size_type v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    long long v142 = v141;
    operator delete(v141);
  }
  if (v144)
  {
    uint64_t v145 = v144;
    operator delete(v144);
  }
  if (v147[0]) {
    operator delete(v147[0]);
  }
  if (v148) {
    operator delete(v148);
  }
  mlx::core::array::~array((mlx::core::array *)&v149);
  mlx::core::array::~array((mlx::core::array *)v150);
}

void sub_256F10BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  __cxa_free_exception(v37);
  _Unwind_Resume(a1);
}

void mlx::core::outer(const void ***a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *((unsigned int *)*a1 + 12);
  int v11 = operator new(8uLL);
  std::vector<int> __p = v11;
  void *v11 = v10 | 0x100000000;
  uint64_t v14 = v11 + 1;
  uint64_t v15 = v11 + 1;
  mlx::core::reshape(a1, (uint64_t)&__p, a3, a4, v16);
  mlx::core::flatten(a2, 0, ((unint64_t)((unsigned char *)(*a2)[1] - (unsigned char *)**a2) >> 2) - 1, a3, a4, (uint64_t)v12);
  mlx::core::multiply(v16, v12, a3, a4, a5);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_256F10E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::inner(mlx::core::array *a1@<X0>, mlx::core::array *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, const void ***a5@<X8>)
{
  uint64_t v10 = **(void **)a1;
  uint64_t v11 = *(void *)(*(void *)a1 + 8) - v10;
  if (!v11 || (uint64_t v12 = *(void *)(*(void *)a2 + 8), v12 == **(void **)a2))
  {
    mlx::core::multiply(a1, a2, a3, a4, a5);
  }
  else
  {
    if (*(_DWORD *)(v10 + 4 * (v11 >> 2) - 4) != *(_DWORD *)(v12 - 4))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[inner] a and b must have the same last dimension.");
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    uint64_t v13 = operator new(4uLL);
    unint64_t v19 = v13;
    _DWORD *v13 = -1;
    unint64_t v20 = v13 + 1;
    int v21 = v13 + 1;
    uint64_t v14 = operator new(4uLL);
    std::vector<int> __p = v14;
    *uint64_t v14 = -1;
    unsigned int v17 = v14 + 1;
    int v18 = v14 + 1;
    mlx::core::tensordot(a1, a2, (unsigned int **)&v19, (unsigned int **)&__p, a3, a4, a5);
    if (__p)
    {
      unsigned int v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      unint64_t v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_256F10FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void mlx::core::addmm(const void ***a1@<X0>, const void ***a2@<X1>, const void ***a3@<X2>, int *a4@<X3>, int *a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v226 = *MEMORY[0x263EF8340];
  uint64_t v8 = **a2;
  unint64_t v9 = (*a2)[1];
  uint64_t v11 = **a3;
  uint64_t v10 = (*a3)[1];
  int64_t v12 = v9 - v8;
  if (v9 == v8 || v10 == v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[addmm] Got 0 dimension input. Inputs must have at least one dimension.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  if (v12 == 4)
  {
    unint64_t v19 = operator new(8uLL);
    std::vector<int> __p = v19;
    *unint64_t v19 = 0xFFFFFFFF00000001;
    v218 = v19 + 1;
    uint64_t v219 = v19 + 1;
    mlx::core::reshape(a2, (uint64_t)&__p, a6, a7, (const void ***)v221);
    long long v20 = *(_OWORD *)v221;
    v221[0] = 0;
    v221[1] = 0;
    int v21 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v20;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    mlx::core::array::~array((mlx::core::array *)v221);
    if (__p)
    {
      v218 = __p;
      operator delete(__p);
    }
    int v22 = **a3;
    std::string::size_type v23 = (*a3)[1];
  }
  else
  {
    int v22 = **a3;
    std::string::size_type v23 = (*a3)[1];
  }
  if (v23 - v22 == 4)
  {
    int v24 = operator new(8uLL);
    int v214 = v24;
    void *v24 = 0x1FFFFFFFFLL;
    int v216 = v24 + 1;
    v215 = v24 + 1;
    mlx::core::reshape(a3, (uint64_t)&v214, a6, a7, (const void ***)v221);
    long long v25 = *(_OWORD *)v221;
    v221[0] = 0;
    v221[1] = 0;
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    mlx::core::array::~array((mlx::core::array *)v221);
    if (v214)
    {
      v215 = v214;
      operator delete(v214);
    }
  }
  unint64_t v27 = (*a2)[1];
  if (v27 == **a2) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = *a3;
  if ((unint64_t)((unsigned char *)(*a3)[1] - (unsigned char *)**a3) <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(v27 - 1) != *((_DWORD *)(*a3)[1] - 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v221);
    uint64_t v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)"[addmm] Last dimension of first input with shape ", 49);
    long long v169 = mlx::core::operator<<(v168, *a2);
    uint64_t v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" must match second to last dimension of", 39);
    uint64_t v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)" second input with shape ", 25);
    uint64_t v172 = mlx::core::operator<<(v171, *a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)".", 1);
    v173 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v221[1], &v213);
    std::logic_error::logic_error(v173, &v213);
    v173->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v173, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  v221[0] = (void *)(*a2)[7];
  v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v28[7];
  v221[0] = (void *)mlx::core::promote_types((int *)v221, (int *)&v213);
  v213.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
  uint64_t v212 = mlx::core::promote_types((int *)v221, (int *)&v213);
  if ((mlx::core::issubdtype((unsigned int *)&v212, mlx::core::floating) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v221);
    v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)"[addmm] Only real floating point types are supported but ", 57);
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
    int64_t v175 = mlx::core::operator<<(v174, &v213);
    v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)", ", 2);
    v197.__begin_ = (std::vector<int>::pointer)(*a2)[7];
    v177 = mlx::core::operator<<(v176, &v197);
    v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" and ", 5);
    v196.__begin_ = (std::vector<int>::pointer)(*a3)[7];
    v179 = mlx::core::operator<<(v178, &v196);
    unint64_t v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)" were provided which results in ", 32);
    uint64_t v181 = mlx::core::operator<<(v180, &v212);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)", which is not a real floating point type.", 42);
    v182 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v221[1], &v213);
    std::logic_error::logic_error(v182, &v213);
    v182->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v182, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  unint64_t v29 = a2[1];
  v211[0] = *a2;
  v211[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v211, v212, a6, a7, v221);
  long long v30 = *(_OWORD *)v221;
  v221[0] = 0;
  v221[1] = 0;
  uint64_t v31 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v30;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  mlx::core::array::~array((mlx::core::array *)v221);
  mlx::core::array::~array((mlx::core::array *)v211);
  int v32 = a3[1];
  v210[0] = *a3;
  v210[1] = v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v210, v212, a6, a7, v221);
  long long v33 = *(_OWORD *)v221;
  v221[0] = 0;
  v221[1] = 0;
  unint64_t v34 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = v33;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  mlx::core::array::~array((mlx::core::array *)v221);
  mlx::core::array::~array((mlx::core::array *)v210);
  uint64_t v35 = a1[1];
  v209[0] = *a1;
  v209[1] = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v35 + 1, 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v209, v212, a6, a7, v221);
  unint64_t v36 = (unint64_t)(v10 - v11) >> 2;
  long long v37 = *(_OWORD *)v221;
  v221[0] = 0;
  v221[1] = 0;
  uint64_t v38 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v37;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  mlx::core::array::~array((mlx::core::array *)v221);
  mlx::core::array::~array((mlx::core::array *)v209);
  unint64_t v39 = *a2;
  uint64_t v40 = **a2;
  unint64_t v41 = (*a2)[1];
  unint64_t v42 = (unsigned char *)(*a3)[1] - (unsigned char *)**a3;
  if ((unint64_t)(v41 - v40) >= 9)
  {
    if (v42 == 8 && (unint64_t)((unsigned char *)(*a1)[1] - (unsigned char *)**a1) <= 7)
    {
      memset(&v213, 0, sizeof(v213));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v213, *v39, (uint64_t)v39[1], ((unsigned char *)v39[1] - (unsigned char *)*v39) >> 2);
      uint64_t v43 = *(unsigned int *)(v213.__r_.__value_.__l.__size_ - 4);
      int v44 = operator new(8uLL);
      v206 = v44;
      void *v44 = (v43 << 32) | 0xFFFFFFFFLL;
      v207 = v44 + 1;
      uint64_t v208 = v44 + 1;
      mlx::core::reshape(a2, (uint64_t)&v206, a6, a7, (const void ***)v221);
      long long v45 = *(_OWORD *)v221;
      v221[0] = 0;
      v221[1] = 0;
      int v46 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v45;
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      mlx::core::array::~array((mlx::core::array *)v221);
      if (v206)
      {
        v207 = v206;
        operator delete(v206);
      }
      int v47 = *a3;
      uint64_t v48 = **a3;
      int v49 = (*a3)[1];
      if (v49 == (_DWORD *)v48) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      int v50 = *(v49 - 1);
      std::string::size_type size = v213.__r_.__value_.__l.__size_;
      *(_DWORD *)(v213.__r_.__value_.__l.__size_ - 4) = v50;
      std::string::size_type v52 = size - 4;
      if (v36 == 1) {
        v213.__r_.__value_.__l.__size_ = v52;
      }
      uint64_t v53 = (unsigned int *)**a2;
      if ((*a2)[1] == v53 || (unint64_t)((unsigned char *)v47[1] - v48) <= 4) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v54 = *v53;
      uint64_t v55 = *((unsigned int *)v48 + 1);
      std::string v56 = operator new(8uLL);
      v221[0] = v56;
      *std::string v56 = v54 | (v55 << 32);
      v221[1] = v56 + 1;
      v222 = (const void **)(v56 + 1);
      mlx::core::broadcast_to(a1, (const void **)v221, a6, a7, (const void ***)&v197);
      long long v57 = *(_OWORD *)&v197.__begin_;
      v197.__begin_ = 0;
      v197.__end_ = 0;
      uint64_t v58 = (std::__shared_weak_count *)a1[1];
      *(_OWORD *)a1 = v57;
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      mlx::core::array::~array((mlx::core::array *)&v197);
      if (v221[0])
      {
        v221[1] = v221[0];
        operator delete(v221[0]);
      }
      unsigned int v59 = (unsigned int *)**a2;
      if ((*a2)[1] == v59 || (int v60 = **a3, (unint64_t)((unsigned char *)(*a3)[1] - v60) <= 4)) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v61 = *v59;
      uint64_t v62 = *((unsigned int *)v60 + 1);
      long long v204 = 0uLL;
      uint64_t v205 = 0;
      unint64_t v63 = operator new(8uLL);
      *(void *)&long long v204 = v63;
      *unint64_t v63 = v61 | (v62 << 32);
      *((void *)&v204 + 1) = v63 + 1;
      uint64_t v205 = v63 + 1;
      uint64_t v64 = v212;
      unint64_t v65 = mlx::core::to_stream(a6, a7);
      int v67 = v66;
      int v68 = operator new(0x38uLL);
      v68[1] = 0;
      v68[2] = 0;
      void *v68 = &unk_270634950;
      int v69 = *a4;
      int v70 = *a5;
      *((_DWORD *)v68 + 10) = v67;
      v68[3] = &unk_2706321F8;
      v68[4] = v65;
      *((_DWORD *)v68 + 11) = v69;
      *((_DWORD *)v68 + 12) = v70;
      *(void *)&long long v203 = v68 + 3;
      *((void *)&v203 + 1) = v68;
      int v71 = (atomic_ullong *)a2[1];
      v221[0] = *a2;
      v221[1] = v71;
      if (v71) {
        atomic_fetch_add_explicit(v71 + 1, 1uLL, memory_order_relaxed);
      }
      unsigned int v72 = a3[1];
      v222 = *a3;
      int64_t v223 = v72;
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v72 + 1, 1uLL, memory_order_relaxed);
      }
      int v73 = a1[1];
      v224 = *a1;
      v225 = v73;
      if (v73) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v73 + 1, 1uLL, memory_order_relaxed);
      }
      long long v201 = 0uLL;
      v202 = 0;
      v197.__begin_ = (std::vector<int>::pointer)&v201;
      LOBYTE(v197.__end_) = 0;
      unint64_t v74 = (char *)operator new(0x30uLL);
      uint64_t v75 = 0;
      *(void *)&long long v201 = v74;
      *((void *)&v201 + 1) = v74;
      v202 = v74 + 48;
      do
      {
        unint64_t v76 = &v74[v75 * 8];
        uint64_t v77 = (atomic_ullong *)v221[v75 + 1];
        *(void *)unint64_t v76 = v221[v75];
        *((void *)v76 + 1) = v77;
        if (v77) {
          atomic_fetch_add_explicit(v77 + 1, 1uLL, memory_order_relaxed);
        }
        v75 += 2;
      }
      while (v75 != 6);
      *((void *)&v201 + 1) = v74 + 48;
      mlx::core::array::array(&v196, &v204, v64, &v203, &v201);
      v197.__begin_ = (std::vector<int>::pointer)&v201;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      for (uint64_t i = 4; i != -2; i -= 2)
        mlx::core::array::~array((mlx::core::array *)&v221[i]);
      if (*((void *)&v203 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
      }
      if ((void)v204)
      {
        *((void *)&v204 + 1) = v204;
        operator delete((void *)v204);
      }
      v198 = 0;
      int64_t v199 = 0;
      uint64_t v200 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v198, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_, (uint64_t)(v213.__r_.__value_.__l.__size_ - v213.__r_.__value_.__r.__words[0]) >> 2);
      mlx::core::reshape((const void ***)&v196, (uint64_t)&v198, a6, a7, (const void ***)a8);
      if (v198)
      {
        int64_t v199 = v198;
        operator delete(v198);
      }
      mlx::core::array::~array((mlx::core::array *)&v196);
      goto LABEL_204;
    }
    goto LABEL_71;
  }
  if (v42 >= 9)
  {
LABEL_71:
    v221[0] = 0;
    v221[1] = 0;
    v222 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v221, v40, (uint64_t)(v41 - 8), (v41 - 8 - v40) >> 2);
    unint64_t v79 = **a3;
    uint64_t v80 = (uint64_t)(*a3)[1] - 8;
    memset(&v213, 0, sizeof(v213));
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v213, v79, v80, (v80 - (uint64_t)v79) >> 2);
    mlx::core::broadcast_shapes(v221, &v213, &v197);
    if ((unint64_t)((unsigned char *)(*a2)[1] - (unsigned char *)**a2) <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    int v81 = *((_DWORD *)(*a2)[1] - 2);
    std::vector<int>::pointer end = v197.__end_;
    if (v197.__end_ >= v197.__end_cap_.__value_)
    {
      std::vector<int>::pointer begin = v197.__begin_;
      int64_t v85 = v197.__end_ - v197.__begin_;
      unint64_t v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v87 = (char *)v197.__end_cap_.__value_ - (char *)v197.__begin_;
      if (((char *)v197.__end_cap_.__value_ - (char *)v197.__begin_) >> 1 > v86) {
        unint64_t v86 = v87 >> 1;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v86;
      }
      if (v88)
      {
        uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197.__end_cap_, v88);
        std::vector<int>::pointer begin = v197.__begin_;
        std::vector<int>::pointer end = v197.__end_;
      }
      else
      {
        uint64_t v89 = 0;
      }
      unint64_t v90 = (int *)&v89[4 * v85];
      uint64_t v91 = (int *)&v89[4 * v88];
      int *v90 = v81;
      uint64_t v83 = v90 + 1;
      while (end != begin)
      {
        int v92 = *--end;
        *--unint64_t v90 = v92;
      }
      v197.__begin_ = v90;
      v197.__end_ = v83;
      v197.__end_cap_.__value_ = v91;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v197.__end_ = v81;
      uint64_t v83 = end + 1;
    }
    v197.__end_ = v83;
    int v93 = (*a2)[1];
    if (v93 == **a2) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    int v94 = v36;
    uint64_t v95 = v12;
    int v96 = *(v93 - 1);
    if (v83 >= v197.__end_cap_.__value_)
    {
      std::vector<int>::pointer v98 = v197.__begin_;
      uint64_t v99 = v83 - v197.__begin_;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v101 = (char *)v197.__end_cap_.__value_ - (char *)v197.__begin_;
      if (((char *)v197.__end_cap_.__value_ - (char *)v197.__begin_) >> 1 > v100) {
        unint64_t v100 = v101 >> 1;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        unint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197.__end_cap_, v102);
        std::vector<int>::pointer v98 = v197.__begin_;
        uint64_t v83 = v197.__end_;
      }
      else
      {
        unint64_t v103 = 0;
      }
      uint64_t v104 = (int *)&v103[4 * v99];
      unint64_t v105 = (int *)&v103[4 * v102];
      int *v104 = v96;
      int v97 = v104 + 1;
      while (v83 != v98)
      {
        int v106 = *--v83;
        *--uint64_t v104 = v106;
      }
      v197.__begin_ = v104;
      v197.__end_ = v97;
      v197.__end_cap_.__value_ = v105;
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      *uint64_t v83 = v96;
      int v97 = v83 + 1;
    }
    v197.__end_ = v97;
    mlx::core::broadcast_to(a2, (const void **)&v197.__begin_, a6, a7, (const void ***)&v196);
    long long v107 = *(_OWORD *)&v196.__begin_;
    v196.__begin_ = 0;
    v196.__end_ = 0;
    int v108 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v107;
    int64_t v12 = v95;
    if (v108) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v108);
    }
    mlx::core::array::~array((mlx::core::array *)&v196);
    if ((unint64_t)((unsigned char *)(*a3)[1] - (unsigned char *)**a3) <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    LODWORD(v36) = v94;
    uint64_t v109 = (*a3)[1];
    std::vector<int>::pointer v110 = v197.__end_;
    *(v197.__end_ - 2) = *(v109 - 2);
    *(v110 - 1) = *(v109 - 1);
    mlx::core::broadcast_to(a3, (const void **)&v197.__begin_, a6, a7, (const void ***)&v196);
    long long v111 = *(_OWORD *)&v196.__begin_;
    v196.__begin_ = 0;
    v196.__end_ = 0;
    uint64_t v112 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v111;
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    mlx::core::array::~array((mlx::core::array *)&v196);
    if (v197.__begin_)
    {
      v197.__end_ = v197.__begin_;
      operator delete(v197.__begin_);
    }
    if (v213.__r_.__value_.__r.__words[0])
    {
      v213.__r_.__value_.__l.__size_ = v213.__r_.__value_.__r.__words[0];
      operator delete(v213.__r_.__value_.__l.__data_);
    }
    if (v221[0])
    {
      v221[1] = v221[0];
      operator delete(v221[0]);
    }
    unint64_t v39 = *a2;
  }
  memset(&v213, 0, sizeof(v213));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v213, *v39, (uint64_t)v39[1], ((unsigned char *)v39[1] - (unsigned char *)*v39) >> 2);
  long long v113 = (*a3)[1];
  if (v113 == **a3) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  std::string::size_type v114 = v213.__r_.__value_.__l.__size_;
  *(_DWORD *)(v213.__r_.__value_.__l.__size_ - 4) = *(v113 - 1);
  memset(&v197, 0, sizeof(v197));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v197, v213.__r_.__value_.__l.__data_, v114, (uint64_t)(v114 - v213.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v115 = v12 & 0x3FFFFFFFCLL;
  BOOL v116 = (v12 & 0x3FFFFFFFCLL) == 4 || v36 == 1;
  int v117 = v116;
  if (v116)
  {
    uint64_t v118 = -2;
    if (v115 != 4) {
      uint64_t v118 = -1;
    }
    uint64_t v119 = &v197.__end_[v118];
    if (v36 == 1) {
      uint64_t v120 = 0;
    }
    else {
      uint64_t v120 = -1;
    }
    std::vector<int>::pointer v121 = &v119[v120 - v118];
    int64_t v122 = (char *)((char *)v197.__end_ - (char *)v121);
    if (v197.__end_ != v121) {
      memmove(&v197.__end_[v118], v121, (char *)v197.__end_ - (char *)v121);
    }
    v197.__end_ = (std::vector<int>::pointer)&v122[(void)v119];
  }
  mlx::core::broadcast_shapes(*a1, &v197, &v196);
  mlx::core::broadcast_to(a1, (const void **)&v196.__begin_, a6, a7, (const void ***)v221);
  long long v123 = *(_OWORD *)v221;
  v221[0] = 0;
  v221[1] = 0;
  v124 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v123;
  if (v124) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v124);
  }
  mlx::core::array::~array((mlx::core::array *)v221);
  if (v117)
  {
    v125 = *a1;
    v221[1] = 0;
    v222 = 0;
    v221[0] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v221, *v125, (uint64_t)v125[1], ((unsigned char *)v125[1] - (unsigned char *)*v125) >> 2);
    if (v36 == 1)
    {
      v126 = (char *)v221[1];
      if (v221[1] >= v222)
      {
        unint64_t v128 = (char *)v221[0];
        int64_t v129 = ((char *)v221[1] - (char *)v221[0]) >> 2;
        unint64_t v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v131 = (char *)v222 - (char *)v221[0];
        if (((char *)v222 - (char *)v221[0]) >> 1 > v130) {
          unint64_t v130 = v131 >> 1;
        }
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v132 = v130;
        }
        if (v132)
        {
          long long v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v222, v132);
          unint64_t v128 = (char *)v221[0];
          v126 = (char *)v221[1];
        }
        else
        {
          long long v133 = 0;
        }
        int v134 = &v133[4 * v129];
        uint64_t v135 = (const void **)&v133[4 * v132];
        *(_DWORD *)int v134 = 1;
        v127 = v134 + 4;
        while (v126 != v128)
        {
          int v136 = *((_DWORD *)v126 - 1);
          v126 -= 4;
          *((_DWORD *)v134 - 1) = v136;
          v134 -= 4;
        }
        v221[0] = v134;
        v221[1] = v127;
        v222 = v135;
        if (v128) {
          operator delete(v128);
        }
      }
      else
      {
        *(_DWORD *)v221[1] = 1;
        v127 = v126 + 4;
      }
      v221[1] = v127;
    }
    long long v137 = v221[1];
    if (v115 == 4)
    {
      if (v221[1] >= v222)
      {
        std::string::size_type v138 = (char *)v221[0];
        int64_t v139 = ((char *)v221[1] - (char *)v221[0]) >> 2;
        unint64_t v140 = v139 + 1;
        if ((unint64_t)(v139 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v141 = (char *)v222 - (char *)v221[0];
        if (((char *)v222 - (char *)v221[0]) >> 1 > v140) {
          unint64_t v140 = v141 >> 1;
        }
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v140;
        }
        if (v142)
        {
          unint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v222, v142);
          std::string::size_type v138 = (char *)v221[0];
          std::vector<int> v144 = (char *)v221[1];
        }
        else
        {
          unint64_t v143 = 0;
          std::vector<int> v144 = (char *)v221[1];
        }
        uint64_t v145 = &v143[4 * v139];
        unint64_t v146 = (const void **)&v143[4 * v142];
        *(_DWORD *)uint64_t v145 = *(v137 - 1);
        long long v137 = v145 + 4;
        while (v144 != v138)
        {
          int v147 = *((_DWORD *)v144 - 1);
          v144 -= 4;
          *((_DWORD *)v145 - 1) = v147;
          v145 -= 4;
        }
        v221[0] = v145;
        v221[1] = v137;
        v222 = v146;
        if (v138) {
          operator delete(v138);
        }
      }
      else
      {
        *(_DWORD *)v221[1] = *((_DWORD *)v221[1] - 1);
        ++v137;
      }
      v221[1] = v137;
      *(v137 - 2) = 1;
    }
    v194 = 0;
    uint64_t v195 = 0;
    int v193 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v193, v221[0], (uint64_t)v137, ((char *)v137 - (char *)v221[0]) >> 2);
    mlx::core::reshape(a1, (uint64_t)&v193, a6, a7, (const void ***)&v220);
    long long v148 = v220;
    long long v220 = 0uLL;
    long long v149 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v148;
    if (v149) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v149);
    }
    mlx::core::array::~array((mlx::core::array *)&v220);
    if (v193)
    {
      v194 = v193;
      operator delete(v193);
    }
    if (v221[0])
    {
      v221[1] = v221[0];
      operator delete(v221[0]);
    }
  }
  memset(v192, 0, sizeof(v192));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v192, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_, (uint64_t)(v213.__r_.__value_.__l.__size_ - v213.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v150 = v212;
  v151 = mlx::core::to_stream(a6, a7);
  int v153 = v152;
  unint64_t v154 = operator new(0x38uLL);
  v154[1] = 0;
  v154[2] = 0;
  *unint64_t v154 = &unk_270634950;
  int v155 = *a4;
  int v156 = *a5;
  *((_DWORD *)v154 + 10) = v153;
  v154[3] = &unk_2706321F8;
  v154[4] = v151;
  *((_DWORD *)v154 + 11) = v155;
  *((_DWORD *)v154 + 12) = v156;
  *(void *)&long long v191 = v154 + 3;
  *((void *)&v191 + 1) = v154;
  long long v157 = (atomic_ullong *)a2[1];
  v221[0] = *a2;
  v221[1] = v157;
  if (v157) {
    atomic_fetch_add_explicit(v157 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v158 = a3[1];
  v222 = *a3;
  int64_t v223 = v158;
  if (v158) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v158 + 1, 1uLL, memory_order_relaxed);
  }
  std::string v159 = a1[1];
  v224 = *a1;
  v225 = v159;
  if (v159) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v159 + 1, 1uLL, memory_order_relaxed);
  }
  long long v189 = 0uLL;
  int v190 = 0;
  *(void *)&long long v220 = &v189;
  BYTE8(v220) = 0;
  uint64_t v160 = (char *)operator new(0x30uLL);
  uint64_t v161 = 0;
  *(void *)&long long v189 = v160;
  *((void *)&v189 + 1) = v160;
  int v190 = v160 + 48;
  do
  {
    ldiv_t v162 = &v160[v161 * 8];
    int v163 = (atomic_ullong *)v221[v161 + 1];
    *(void *)ldiv_t v162 = v221[v161];
    *((void *)v162 + 1) = v163;
    if (v163) {
      atomic_fetch_add_explicit(v163 + 1, 1uLL, memory_order_relaxed);
    }
    v161 += 2;
  }
  while (v161 != 6);
  *((void *)&v189 + 1) = v160 + 48;
  mlx::core::array::array((void *)a8, (long long *)v192, v150, &v191, &v189);
  *(void *)&long long v220 = &v189;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
  for (uint64_t j = 4; j != -2; j -= 2)
    mlx::core::array::~array((mlx::core::array *)&v221[j]);
  if (*((void *)&v191 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v191 + 1));
  }
  if (v192[0])
  {
    v192[1] = v192[0];
    operator delete(v192[0]);
  }
  if (v117)
  {
    int v187 = 0;
    uint64_t v188 = 0;
    uint64_t v186 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v186, v197.__begin_, (uint64_t)v197.__end_, v197.__end_ - v197.__begin_);
    mlx::core::reshape((const void ***)a8, (uint64_t)&v186, a6, a7, (const void ***)v221);
    long long v165 = *(_OWORD *)v221;
    v221[0] = 0;
    v221[1] = 0;
    long long v166 = *(std::__shared_weak_count **)(a8 + 8);
    *(_OWORD *)a8 = v165;
    if (v166) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v166);
    }
    mlx::core::array::~array((mlx::core::array *)v221);
    if (v186)
    {
      int v187 = v186;
      operator delete(v186);
    }
  }
  if (v196.__begin_)
  {
    v196.__end_ = v196.__begin_;
    operator delete(v196.__begin_);
  }
  if (v197.__begin_)
  {
    v197.__end_ = v197.__begin_;
    operator delete(v197.__begin_);
  }
LABEL_204:
  if (v213.__r_.__value_.__r.__words[0])
  {
    v213.__r_.__value_.__l.__size_ = v213.__r_.__value_.__r.__words[0];
    operator delete(v213.__r_.__value_.__l.__data_);
  }
}

void sub_256F12194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, mlx::core::array *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if ((v71 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a70);
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v70);
  goto LABEL_6;
}

void mlx::core::block_masked_mm(const void ***a1@<X0>, const void ***a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, mlx::core *a7@<X6>, uint64_t a8@<X7>, const void ***a9@<X8>)
{
  v221[31] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a4 + 16))
  {
    if (!*(unsigned char *)(a5 + 16)) {
      goto LABEL_7;
    }
LABEL_5:
    BOOL v17 = 1;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a5 + 16)) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a6 + 16))
  {
LABEL_7:
    BOOL v17 = *(unsigned char *)(a6 + 16) != 0;
LABEL_8:
    if (a3 != 32 && a3 != 64)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v220);
      int64_t v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"[block_masked_mm] Only block_sizes 32, 64 are supported.", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"Got block size ", 15);
      v176 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v220[1], &v218);
      std::logic_error::logic_error(exception, &v218);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    int64_t v18 = (unsigned char *)(*a1)[1] - (unsigned char *)**a1;
    v183 = **a2;
    uint64_t v184 = (*a2)[1];
    if (v18) {
      BOOL v19 = (*a2)[1] == **a2;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      uint64_t v161 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v161, "[block_masked_mm] Got 0 dimension input. Inputs must have at least one dimension.");
      __cxa_throw(v161, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    unint64_t v182 = (unsigned char *)(*a1)[1] - (unsigned char *)**a1;
    if (v18 == 4)
    {
      long long v20 = operator new(8uLL);
      std::vector<int> __p = v20;
      *long long v20 = 0xFFFFFFFF00000001;
      int v216 = v20 + 1;
      int v217 = v20 + 1;
      mlx::core::reshape(a1, (uint64_t)&__p, a7, a8, (const void ***)v220);
      long long v21 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      int v22 = (std::__shared_weak_count *)a1[1];
      *(_OWORD *)a1 = v21;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      if (__p)
      {
        int v216 = __p;
        operator delete(__p);
      }
      std::string::size_type v23 = **a2;
      int v24 = (*a2)[1];
    }
    else
    {
      std::string::size_type v23 = **a2;
      int v24 = (*a2)[1];
    }
    if (v24 - v23 == 4)
    {
      long long v25 = operator new(8uLL);
      uint64_t v212 = v25;
      void *v25 = 0x1FFFFFFFFLL;
      int v214 = v25 + 1;
      std::string v213 = v25 + 1;
      mlx::core::reshape(a2, (uint64_t)&v212, a7, a8, (const void ***)v220);
      long long v26 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      unint64_t v27 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v26;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      if (v212)
      {
        std::string v213 = v212;
        operator delete(v212);
      }
    }
    uint64_t v28 = (*a1)[1];
    if (v28 == **a1) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v29 = *a2;
    if ((unint64_t)((unsigned char *)(*a2)[1] - (unsigned char *)**a2) <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(v28 - 1) != *((_DWORD *)(*a2)[1] - 2))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v220);
      ldiv_t v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"[block_masked_mm] Last dimension of first input with shape ", 59);
      int v163 = mlx::core::operator<<(v162, *a1);
      int v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)" must match second to last dimension of", 39);
      long long v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" second input with shape ", 25);
      long long v166 = mlx::core::operator<<(v165, *a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)".", 1);
      long long v167 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v220[1], &v218);
      std::logic_error::logic_error(v167, &v218);
      v167->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v167, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    v220[0] = (void *)(*a1)[7];
    v218.__r_.__value_.__r.__words[0] = (std::string::size_type)v29[7];
    uint64_t v211 = mlx::core::promote_types((int *)v220, (int *)&v218);
    if ((mlx::core::issubdtype((unsigned int *)&v211, mlx::core::floating) & 1) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v220);
      uint64_t v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"[block_masked_mm] Only real floating point types are supported but ", 67);
      v218.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
      long long v169 = mlx::core::operator<<(v168, &v218);
      uint64_t v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" and ", 5);
      v206 = (void *)(*a2)[7];
      uint64_t v171 = mlx::core::operator<<(v170, &v206);
      uint64_t v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)" were provided which results in ", 32);
      v173 = mlx::core::operator<<(v172, &v211);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)", which is not a real floating point type.", 42);
      v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v220[1], &v218);
      std::logic_error::logic_error(v174, &v218);
      v174->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v174, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    long long v30 = a1[1];
    v210[0] = *a1;
    v210[1] = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v30 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v210, v211, a7, a8, v220);
    long long v31 = *(_OWORD *)v220;
    v220[0] = 0;
    v220[1] = 0;
    int v32 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v31;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    mlx::core::array::~array((mlx::core::array *)v220);
    mlx::core::array::~array((mlx::core::array *)v210);
    long long v33 = a2[1];
    v209[0] = *a2;
    v209[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v209, v211, a7, a8, v220);
    long long v34 = *(_OWORD *)v220;
    v220[0] = 0;
    v220[1] = 0;
    uint64_t v35 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v34;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    mlx::core::array::~array((mlx::core::array *)v220);
    mlx::core::array::~array((mlx::core::array *)v209);
    unint64_t v36 = **a1;
    uint64_t v37 = (uint64_t)(*a1)[1] - 8;
    memset(&v218, 0, sizeof(v218));
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v218, v36, v37, (v37 - (uint64_t)v36) >> 2);
    uint64_t v38 = **a2;
    uint64_t v39 = (uint64_t)(*a2)[1] - 8;
    v207 = 0;
    uint64_t v208 = 0;
    v206 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v206, v38, v39, (v39 - (uint64_t)v38) >> 2);
    BOOL v181 = v17;
    int v186 = a3;
    mlx::core::broadcast_shapes(&v218, &v206, &v205);
    std::vector<int>::pointer end = v205.__end_;
    value = v205.__end_cap_.__value_;
    if (v205.__end_ >= v205.__end_cap_.__value_)
    {
      std::vector<int>::pointer begin = v205.__begin_;
      int64_t v44 = v205.__end_ - v205.__begin_;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v46 = (char *)v205.__end_cap_.__value_ - (char *)v205.__begin_;
      if (((char *)v205.__end_cap_.__value_ - (char *)v205.__begin_) >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v205.__end_cap_, v47);
        std::vector<int>::pointer begin = v205.__begin_;
        std::vector<int>::pointer end = v205.__end_;
      }
      else
      {
        uint64_t v48 = 0;
      }
      int v49 = (int *)&v48[4 * v44];
      value = (int *)&v48[4 * v47];
      *int v49 = 1;
      unint64_t v42 = v49 + 1;
      while (end != begin)
      {
        int v50 = *--end;
        *--int v49 = v50;
      }
      v205.__begin_ = v49;
      v205.__end_ = v42;
      v205.__end_cap_.__value_ = value;
      if (begin)
      {
        operator delete(begin);
        value = v205.__end_cap_.__value_;
      }
    }
    else
    {
      *v205.__end_ = 1;
      unint64_t v42 = end + 1;
    }
    v205.__end_ = v42;
    if (v42 >= value)
    {
      std::vector<int>::pointer v52 = v205.__begin_;
      uint64_t v53 = v42 - v205.__begin_;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v55 = (char *)value - (char *)v205.__begin_;
      if (v55 >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        long long v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v205.__end_cap_, v56);
        std::vector<int>::pointer v52 = v205.__begin_;
        unint64_t v42 = v205.__end_;
      }
      else
      {
        long long v57 = 0;
      }
      uint64_t v58 = (int *)&v57[4 * v53];
      unsigned int v59 = (int *)&v57[4 * v56];
      *uint64_t v58 = 1;
      uint64_t v51 = v58 + 1;
      while (v42 != v52)
      {
        int v60 = *--v42;
        *--uint64_t v58 = v60;
      }
      v205.__begin_ = v58;
      v205.__end_ = v51;
      v205.__end_cap_.__value_ = v59;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      int *v42 = 1;
      uint64_t v51 = v42 + 1;
    }
    v205.__end_ = v51;
    uint64_t v61 = **a1;
    uint64_t v62 = (unsigned char *)(*a1)[1] - v61;
    if ((unint64_t)v62 <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v178 = a6;
    unint64_t v180 = a9;
    unint64_t v63 = (*a2)[1];
    if (v63 == **a2) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    std::vector<int>::pointer v64 = v205.__begin_;
    int64_t v65 = (char *)v51 - (char *)v205.__begin_;
    int v66 = &v61[4 * (v62 >> 2)];
    int v67 = *(v63 - 1);
    int v69 = *((_DWORD *)v66 - 2);
    int v68 = *((_DWORD *)v66 - 1);
    uint64_t v70 = (v65 << 30) - 0x200000000;
    *(std::vector<int>::pointer)((char *)v205.__begin_ + (v70 >> 30)) = v69;
    uint64_t v71 = (v65 << 30) - 0x100000000;
    *(std::vector<int>::pointer)((char *)v64 + (v71 >> 30)) = v68;
    mlx::core::broadcast_to(a1, (const void **)&v205.__begin_, a7, a8, (const void ***)v220);
    uint64_t v72 = v70 >> 32;
    uint64_t v73 = v71 >> 32;
    long long v74 = *(_OWORD *)v220;
    v220[0] = 0;
    v220[1] = 0;
    uint64_t v75 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v74;
    if (v75) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v75);
    }
    mlx::core::array::~array((mlx::core::array *)v220);
    std::vector<int>::pointer v76 = v205.__begin_;
    v205.__begin_[v72] = v68;
    v76[v73] = v67;
    mlx::core::broadcast_to(a2, (const void **)&v205.__begin_, a7, a8, (const void ***)v220);
    long long v77 = *(_OWORD *)v220;
    v220[0] = 0;
    v220[1] = 0;
    unint64_t v78 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v77;
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    mlx::core::array::~array((mlx::core::array *)v220);
    v202 = 0;
    long long v203 = 0;
    uint64_t v204 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v202, v205.__begin_, (uint64_t)v205.__end_, v205.__end_ - v205.__begin_);
    unint64_t v79 = v202;
    *((_DWORD *)v202 + v72) = v69;
    v79[v73] = v67;
    uint64_t v80 = (atomic_ullong *)a1[1];
    v220[0] = *a1;
    v220[1] = v80;
    if (v80) {
      atomic_fetch_add_explicit(v80 + 1, 1uLL, memory_order_relaxed);
    }
    int v81 = a2[1];
    v221[0] = *a2;
    v221[1] = v81;
    if (v81) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v81 + 1, 1uLL, memory_order_relaxed);
    }
    long long v200 = 0uLL;
    long long v201 = 0;
    *(void *)&long long v219 = &v200;
    BYTE8(v219) = 0;
    uint64_t v82 = (char *)operator new(0x20uLL);
    uint64_t v83 = 0;
    unint64_t v84 = v182 >> 2;
    unint64_t v85 = (unint64_t)(v184 - v183) >> 2;
    int v86 = (v186 - 1 + v69) / v186;
    int v87 = (v186 - 1 + v67) / v186;
    *(void *)&long long v200 = v82;
    *((void *)&v200 + 1) = v82;
    long long v201 = v82 + 32;
    int v185 = (v186 - 1 + v68) / v186;
    do
    {
      unint64_t v88 = &v82[v83 * 8];
      uint64_t v89 = (atomic_ullong *)v220[v83 + 1];
      *(void *)unint64_t v88 = v220[v83];
      *((void *)v88 + 1) = v89;
      if (v89) {
        atomic_fetch_add_explicit(v89 + 1, 1uLL, memory_order_relaxed);
      }
      v83 += 2;
    }
    while (v83 != 4);
    *((void *)&v200 + 1) = v82 + 32;
    for (uint64_t i = 2; i != -2; i -= 2)
      mlx::core::array::~array((mlx::core::array *)&v220[i]);
    if (*(unsigned char *)(a4 + 16))
    {
      LOBYTE(v219) = 1;
      uint64_t v91 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
      mlx::core::array::array<BOOL>((int ***)v220, (unsigned __int8 *)&v219, 1, v91);
      if (*(unsigned char *)(a4 + 16))
      {
        uint64_t v92 = *(void *)(a4 + 8);
        *(void *)&long long v199 = *(void *)a4;
        *((void *)&v199 + 1) = v92;
        int v93 = v85;
        if (v92) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        long long v199 = *(_OWORD *)v220;
        v220[0] = 0;
        v220[1] = 0;
        int v93 = v85;
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      if (v84 == 1 || v93 == 1)
      {
        int v94 = 0;
        v220[0] = 0;
        v220[1] = 0;
        v221[0] = 0;
        if (v84 == 1)
        {
          uint64_t v95 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v221, 1uLL);
          int v96 = (char *)v220[0];
          int v97 = (char *)v220[1];
          uint64_t v99 = &v95[v98];
          *uint64_t v95 = -2;
          int v94 = v95 + 1;
          while (v97 != v96)
          {
            int v100 = *((_DWORD *)v97 - 1);
            v97 -= 4;
            *--uint64_t v95 = v100;
          }
          v220[0] = v95;
          v220[1] = v94;
          v221[0] = v99;
          if (v96) {
            operator delete(v96);
          }
          v220[1] = v94;
        }
        if (v93 == 1)
        {
          if ((unint64_t)v94 >= v221[0])
          {
            unint64_t v102 = v220[0];
            uint64_t v103 = ((char *)v94 - (char *)v220[0]) >> 2;
            unint64_t v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v105 = v221[0] - (unint64_t)v220[0];
            if ((uint64_t)(v221[0] - (unint64_t)v220[0]) >> 1 > v104) {
              unint64_t v104 = v105 >> 1;
            }
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v104;
            }
            if (v106)
            {
              long long v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v221, v106);
              unint64_t v102 = v220[0];
              int v94 = v220[1];
            }
            else
            {
              long long v107 = 0;
            }
            int v108 = &v107[4 * v103];
            uint64_t v109 = &v107[4 * v106];
            *(_DWORD *)int v108 = -1;
            int64_t v101 = v108 + 4;
            while (v94 != v102)
            {
              int v110 = *--v94;
              *((_DWORD *)v108 - 1) = v110;
              v108 -= 4;
            }
            v220[0] = v108;
            v220[1] = v101;
            v221[0] = v109;
            if (v102) {
              operator delete(v102);
            }
          }
          else
          {
            _DWORD *v94 = -1;
            int64_t v101 = v94 + 1;
          }
          v220[1] = v101;
        }
        mlx::core::expand_dims((const void ***)&v199, (int **)v220, a7, a8, (const void ***)&v219);
        long long v111 = v219;
        long long v219 = 0uLL;
        uint64_t v112 = (std::__shared_weak_count *)*((void *)&v199 + 1);
        long long v199 = v111;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
        mlx::core::array::~array((mlx::core::array *)&v219);
        if (v220[0])
        {
          v220[1] = v220[0];
          operator delete(v220[0]);
        }
      }
      uint64_t v114 = *((void *)&v199 + 1);
      uint64_t v113 = v199;
      if (*(_DWORD *)(v199 + 56)) {
        uint64_t v115 = v211;
      }
      else {
        uint64_t v115 = 0x100000000;
      }
      long long v197 = v199;
      if (*((void *)&v199 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v199 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v114 = *((void *)&v197 + 1);
      }
      std::vector<int>::pointer v116 = v205.__begin_;
      int64_t v117 = (char *)v205.__end_ - (char *)v205.__begin_;
      *(std::vector<int>::pointer)((char *)v205.__begin_
                                 + (((((char *)v205.__end_ - (char *)v205.__begin_) << 30) - 0x200000000) >> 30)) = v86;
      *(std::vector<int>::pointer)((char *)v116 + (((v117 << 30) - 0x100000000) >> 30)) = v87;
      *(void *)&long long v219 = v113;
      *((void *)&v219 + 1) = v114;
      if (v114) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
      }
      mlx::core::astype(&v219, v115, a7, a8, v220);
      long long v118 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      uint64_t v119 = (std::__shared_weak_count *)*((void *)&v197 + 1);
      long long v197 = v118;
      if (v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v119);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      mlx::core::array::~array((mlx::core::array *)&v219);
      mlx::core::broadcast_to((const void ***)&v197, (const void **)&v205.__begin_, a7, a8, (const void ***)&v198);
      long long v120 = v198;
      long long v198 = 0uLL;
      std::vector<int>::pointer v121 = (std::__shared_weak_count *)*((void *)&v199 + 1);
      long long v199 = v120;
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      mlx::core::array::~array((mlx::core::array *)&v198);
      mlx::core::array::~array((mlx::core::array *)&v197);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v200, &v199);
      mlx::core::array::~array((mlx::core::array *)&v199);
    }
    int v122 = v85;
    if (v181)
    {
      LOBYTE(v219) = 1;
      uint64_t v123 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
      mlx::core::array::array<BOOL>((int ***)v220, (unsigned __int8 *)&v219, 1, v123);
      if (*(unsigned char *)(a5 + 16))
      {
        uint64_t v124 = *(void *)(a5 + 8);
        *(void *)&long long v199 = *(void *)a5;
        *((void *)&v199 + 1) = v124;
        if (v124) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        long long v199 = *(_OWORD *)v220;
        v220[0] = 0;
        v220[1] = 0;
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      LOBYTE(v219) = 1;
      uint64_t v125 = mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype();
      mlx::core::array::array<BOOL>((int ***)v220, (unsigned __int8 *)&v219, 1, v125);
      if (*(unsigned char *)(v178 + 16))
      {
        uint64_t v126 = *(void *)(v178 + 8);
        *(void *)&long long v198 = *(void *)v178;
        *((void *)&v198 + 1) = v126;
        if (v126) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        long long v198 = *(_OWORD *)v220;
        v220[0] = 0;
        v220[1] = 0;
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      uint64_t v127 = v199;
      if (*(_DWORD *)(v199 + 56) || *(_DWORD *)(v198 + 56)) {
        unint64_t v128 = &v211;
      }
      else {
        unint64_t v128 = &mlx::core::BOOL_;
      }
      uint64_t v129 = *v128;
      if (v84 == 1)
      {
        mlx::core::expand_dims((const void ***)&v199, -2, a7, a8, (const void ***)v220);
        long long v130 = *(_OWORD *)v220;
        v220[0] = 0;
        v220[1] = 0;
        uint64_t v131 = (std::__shared_weak_count *)*((void *)&v199 + 1);
        long long v199 = v130;
        if (v131) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v131);
        }
        mlx::core::array::~array((mlx::core::array *)v220);
        uint64_t v127 = v199;
      }
      uint64_t v132 = *((void *)&v199 + 1);
      *(void *)&long long v195 = v127;
      *((void *)&v195 + 1) = *((void *)&v199 + 1);
      if (*((void *)&v199 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v199 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v132 = *((void *)&v195 + 1);
      }
      std::vector<int>::pointer v133 = v205.__begin_;
      int64_t v134 = (char *)v205.__end_ - (char *)v205.__begin_;
      *(std::vector<int>::pointer)((char *)v205.__begin_
                                 + (((((char *)v205.__end_ - (char *)v205.__begin_) << 30) - 0x200000000) >> 30)) = v86;
      *(std::vector<int>::pointer)((char *)v133 + (((v134 << 30) - 0x100000000) >> 30)) = v185;
      *(void *)&long long v219 = v127;
      *((void *)&v219 + 1) = v132;
      if (v132) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
      }
      mlx::core::astype(&v219, v129, a7, a8, v220);
      long long v135 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      int v136 = (std::__shared_weak_count *)*((void *)&v195 + 1);
      long long v195 = v135;
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      mlx::core::array::~array((mlx::core::array *)&v219);
      mlx::core::broadcast_to((const void ***)&v195, (const void **)&v205.__begin_, a7, a8, (const void ***)&v196);
      long long v137 = v196;
      long long v196 = 0uLL;
      std::string::size_type v138 = (std::__shared_weak_count *)*((void *)&v199 + 1);
      long long v199 = v137;
      if (v138) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v138);
      }
      mlx::core::array::~array((mlx::core::array *)&v196);
      mlx::core::array::~array((mlx::core::array *)&v195);
      if (v122 == 1)
      {
        mlx::core::expand_dims((const void ***)&v198, -1, a7, a8, (const void ***)v220);
        long long v139 = *(_OWORD *)v220;
        v220[0] = 0;
        v220[1] = 0;
        unint64_t v140 = (std::__shared_weak_count *)*((void *)&v198 + 1);
        long long v198 = v139;
        if (v140) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v140);
        }
        mlx::core::array::~array((mlx::core::array *)v220);
      }
      uint64_t v142 = *((void *)&v198 + 1);
      uint64_t v141 = v198;
      long long v194 = v198;
      if (*((void *)&v198 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v198 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v142 = *((void *)&v194 + 1);
      }
      std::vector<int>::pointer v143 = v205.__begin_;
      int64_t v144 = (char *)v205.__end_ - (char *)v205.__begin_;
      *(std::vector<int>::pointer)((char *)v205.__begin_
                                 + (((((char *)v205.__end_ - (char *)v205.__begin_) << 30) - 0x200000000) >> 30)) = v185;
      *(std::vector<int>::pointer)((char *)v143 + (((v144 << 30) - 0x100000000) >> 30)) = v87;
      *(void *)&long long v219 = v141;
      *((void *)&v219 + 1) = v142;
      if (v142) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
      }
      mlx::core::astype(&v219, v129, a7, a8, v220);
      long long v145 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      unint64_t v146 = (std::__shared_weak_count *)*((void *)&v194 + 1);
      long long v194 = v145;
      if (v146) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      mlx::core::array::~array((mlx::core::array *)&v219);
      mlx::core::broadcast_to((const void ***)&v194, (const void **)&v205.__begin_, a7, a8, (const void ***)&v196);
      long long v147 = v196;
      long long v196 = 0uLL;
      long long v148 = (std::__shared_weak_count *)*((void *)&v198 + 1);
      long long v198 = v147;
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
      mlx::core::array::~array((mlx::core::array *)&v196);
      mlx::core::array::~array((mlx::core::array *)&v194);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v200, &v199);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v200, &v198);
      mlx::core::array::~array((mlx::core::array *)&v198);
      mlx::core::array::~array((mlx::core::array *)&v199);
    }
    memset(v193, 0, sizeof(v193));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v193, v202, (uint64_t)v203, (v203 - (unsigned char *)v202) >> 2);
    uint64_t v149 = v211;
    uint64_t v150 = mlx::core::to_stream(a7, a8);
    int v152 = v151;
    int v153 = operator new(0x30uLL);
    v153[1] = 0;
    v153[2] = 0;
    void *v153 = &unk_2706349A0;
    v153[3] = &unk_270635678;
    v153[4] = v150;
    *((_DWORD *)v153 + 10) = v152;
    *((_DWORD *)v153 + 11) = v186;
    *(void *)&long long v192 = v153 + 3;
    *((void *)&v192 + 1) = v153;
    long long v190 = v200;
    long long v191 = v201;
    long long v200 = 0uLL;
    long long v201 = 0;
    mlx::core::array::array(v180, (long long *)v193, v149, &v192, &v190);
    v220[0] = &v190;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v220);
    if (*((void *)&v192 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v192 + 1));
    }
    if (v193[0])
    {
      v193[1] = v193[0];
      operator delete(v193[0]);
    }
    if (v84 == 1 || v122 == 1)
    {
      uint64_t v154 = -2;
      if (v84 != 1) {
        uint64_t v154 = -1;
      }
      int v155 = &v203[4 * v154];
      if (v122 == 1) {
        uint64_t v156 = 0;
      }
      else {
        uint64_t v156 = -1;
      }
      long long v157 = &v155[4 * (v156 - v154)];
      int64_t v158 = v203 - v157;
      if (v203 != v157) {
        memmove(&v203[4 * v154], v157, v203 - v157);
      }
      long long v203 = &v155[v158];
      uint64_t v188 = 0;
      uint64_t v189 = 0;
      int v187 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v187, v202, (uint64_t)&v155[v158], (&v155[v158] - (unsigned char *)v202) >> 2);
      mlx::core::reshape(v180, (uint64_t)&v187, a7, a8, (const void ***)v220);
      long long v159 = *(_OWORD *)v220;
      v220[0] = 0;
      v220[1] = 0;
      uint64_t v160 = (std::__shared_weak_count *)v180[1];
      *(_OWORD *)unint64_t v180 = v159;
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      mlx::core::array::~array((mlx::core::array *)v220);
      if (v187)
      {
        uint64_t v188 = v187;
        operator delete(v187);
      }
    }
    v220[0] = &v200;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v220);
    if (v202)
    {
      long long v203 = (char *)v202;
      operator delete(v202);
    }
    if (v205.__begin_)
    {
      v205.__end_ = v205.__begin_;
      operator delete(v205.__begin_);
    }
    if (v206)
    {
      v207 = v206;
      operator delete(v206);
    }
    if (v218.__r_.__value_.__r.__words[0])
    {
      v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    return;
  }
  mlx::core::matmul(a1, a2, a7, a8, a9);
}

void sub_256F136BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69 < 0)
  {
    operator delete(__p);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a72);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void mlx::core::gather_mm(const void ***a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a3 + 16) || *(unsigned char *)(a4 + 16))
  {
    uint64_t v14 = **a2;
    int64_t v15 = (unsigned char *)(*a1)[1] - (unsigned char *)**a1;
    int64_t v105 = (*a2)[1];
    if (v15) {
      BOOL v16 = (*a2)[1] == v14;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather_mm] Got 0 dimension input. Inputs must have at least one dimension.");
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    int64_t v104 = (unsigned char *)(*a1)[1] - (unsigned char *)**a1;
    if (v15 == 4)
    {
      BOOL v17 = operator new(8uLL);
      std::vector<int> __p = v17;
      *BOOL v17 = 0xFFFFFFFF00000001;
      uint64_t v132 = v17 + 1;
      std::vector<int>::pointer v133 = v17 + 1;
      mlx::core::reshape(a1, (uint64_t)&__p, a5, a6, (const void ***)&v136);
      long long v18 = v136;
      long long v136 = 0uLL;
      BOOL v19 = (std::__shared_weak_count *)a1[1];
      *(_OWORD *)a1 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      mlx::core::array::~array((mlx::core::array *)&v136);
      if (__p)
      {
        uint64_t v132 = __p;
        operator delete(__p);
      }
      long long v20 = **a2;
      long long v21 = (*a2)[1];
    }
    else
    {
      long long v20 = **a2;
      long long v21 = (*a2)[1];
    }
    if (v21 - v20 == 4)
    {
      int v22 = operator new(8uLL);
      unint64_t v128 = v22;
      *int v22 = 0x1FFFFFFFFLL;
      long long v130 = v22 + 1;
      uint64_t v129 = v22 + 1;
      mlx::core::reshape(a2, (uint64_t)&v128, a5, a6, (const void ***)&v136);
      long long v23 = v136;
      long long v136 = 0uLL;
      int v24 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v23;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      mlx::core::array::~array((mlx::core::array *)&v136);
      if (v128)
      {
        uint64_t v129 = v128;
        operator delete(v128);
      }
    }
    long long v25 = (*a1)[1];
    if (v25 == **a1) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    long long v26 = *a2;
    if ((unint64_t)((unsigned char *)(*a2)[1] - (unsigned char *)**a2) <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(v25 - 1) != *((_DWORD *)(*a2)[1] - 2))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v136);
      uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v136, (uint64_t)"[gather_mm] Last dimension of first input with shape ", 53);
      unint64_t v90 = mlx::core::operator<<(v89, *a1);
      uint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" must match second to last dimension of", 39);
      uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" second input with shape ", 25);
      int v93 = mlx::core::operator<<(v92, *a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)".", 1);
      int v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v136 + 8, &v127);
      std::logic_error::logic_error(v94, &v127);
      v94->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v94, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    *(void *)&long long v136 = (*a1)[7];
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v26[7];
    uint64_t v126 = mlx::core::promote_types((int *)&v136, (int *)&v127);
    if ((mlx::core::issubdtype((unsigned int *)&v126, mlx::core::floating) & 1) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v136);
      uint64_t v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v136, (uint64_t)"[gather_mm] Only real floating point types are supported but ", 61);
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)(*a1)[7];
      int v96 = mlx::core::operator<<(v95, &v127);
      int v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" and ", 5);
      uint64_t v113 = (void *)(*a2)[7];
      uint64_t v98 = mlx::core::operator<<(v97, &v113);
      uint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" were provided which results in ", 32);
      int v100 = mlx::core::operator<<(v99, &v126);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)", which is not a real floating point type.", 42);
      int64_t v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v136 + 8, &v127);
      std::logic_error::logic_error(v101, &v127);
      v101->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v101, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    unint64_t v27 = a1[1];
    v125[0] = *a1;
    v125[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v27 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v125, v126, a5, a6, &v136);
    long long v28 = v136;
    long long v136 = 0uLL;
    unint64_t v29 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v28;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    mlx::core::array::~array((mlx::core::array *)&v136);
    mlx::core::array::~array((mlx::core::array *)v125);
    long long v30 = a2[1];
    v124[0] = *a2;
    v124[1] = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v30 + 1, 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v124, v126, a5, a6, &v136);
    long long v31 = v136;
    long long v136 = 0uLL;
    int v32 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v31;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    mlx::core::array::~array((mlx::core::array *)&v136);
    mlx::core::array::~array((mlx::core::array *)v124);
    LOBYTE(v121[0]) = 0;
    char v122 = 0;
    if (*(unsigned char *)(a3 + 16))
    {
      uint64_t v33 = *(void *)(a3 + 8);
      v121[0] = *(void *)a3;
      v121[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      char v122 = 1;
    }
    if (v122) {
      mlx::core::array::~array((mlx::core::array *)v121);
    }
    LOBYTE(v118[0]) = 0;
    char v119 = 0;
    if (*(unsigned char *)(a4 + 16))
    {
      uint64_t v34 = *(void *)(a4 + 8);
      v118[0] = *(void *)a4;
      v118[1] = v34;
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      char v119 = 1;
    }
    if (v119) {
      mlx::core::array::~array((mlx::core::array *)v118);
    }
    *(void *)&long long v136 = *(void *)(v123 + 56);
    if (mlx::core::issubdtype((unsigned int *)&v136, &mlx::core::integer))
    {
      *(void *)&long long v136 = *(void *)(v120 + 56);
      if (mlx::core::issubdtype((unsigned int *)&v136, &mlx::core::integer))
      {
        long long v117 = v123;
        if (*((void *)&v123 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v123 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        mlx::core::astype(&v117, 0x400000002, a5, a6, &v136);
        long long v35 = v136;
        long long v136 = 0uLL;
        unint64_t v36 = (std::__shared_weak_count *)*((void *)&v123 + 1);
        long long v123 = v35;
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        mlx::core::array::~array((mlx::core::array *)&v136);
        mlx::core::array::~array((mlx::core::array *)&v117);
        long long v116 = v120;
        if (*((void *)&v120 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v120 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        mlx::core::astype(&v116, 0x400000002, a5, a6, &v136);
        long long v37 = v136;
        long long v136 = 0uLL;
        uint64_t v38 = (std::__shared_weak_count *)*((void *)&v120 + 1);
        long long v120 = v37;
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        mlx::core::array::~array((mlx::core::array *)&v136);
        mlx::core::array::~array((mlx::core::array *)&v116);
        if ((unint64_t)((unsigned char *)(*a1)[1] - (unsigned char *)**a1) <= 4) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v103 = a7;
        uint64_t v39 = (*a2)[1];
        if (v39 == **a2) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        int v40 = *((_DWORD *)(*a1)[1] - 2);
        int v41 = *(v39 - 1);
        mlx::core::broadcast_shapes((void *)v123, (void *)v120, (std::vector<int> *)&v127);
        mlx::core::broadcast_to((const void ***)&v123, (const void **)&v127.__r_.__value_.__l.__data_, a5, a6, (const void ***)&v136);
        long long v42 = v136;
        long long v136 = 0uLL;
        uint64_t v43 = (std::__shared_weak_count *)*((void *)&v123 + 1);
        long long v123 = v42;
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        mlx::core::array::~array((mlx::core::array *)&v136);
        mlx::core::broadcast_to((const void ***)&v120, (const void **)&v127.__r_.__value_.__l.__data_, a5, a6, (const void ***)&v136);
        long long v44 = v136;
        long long v136 = 0uLL;
        unint64_t v45 = (std::__shared_weak_count *)*((void *)&v120 + 1);
        long long v120 = v44;
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        mlx::core::array::~array((mlx::core::array *)&v136);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        unint64_t v115 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v113, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_, (uint64_t)(v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0]) >> 2);
        unint64_t v47 = v114;
        int64_t v46 = (char *)v115;
        if ((unint64_t)v114 >= v115)
        {
          int v49 = (char *)v113;
          uint64_t v50 = (v114 - (unsigned char *)v113) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            goto LABEL_140;
          }
          uint64_t v52 = v115 - (void)v113;
          if ((uint64_t)(v115 - (void)v113) >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            unint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115, v53);
            int v49 = (char *)v113;
            unint64_t v47 = v114;
          }
          else
          {
            unint64_t v54 = 0;
          }
          uint64_t v55 = &v54[4 * v50];
          int64_t v46 = &v54[4 * v53];
          *(_DWORD *)uint64_t v55 = v40;
          uint64_t v48 = v55 + 4;
          while (v47 != v49)
          {
            int v56 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          uint64_t v113 = v55;
          uint64_t v114 = v48;
          unint64_t v115 = (unint64_t)v46;
          if (v49)
          {
            operator delete(v49);
            int64_t v46 = (char *)v115;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v114 = v40;
          uint64_t v48 = v47 + 4;
        }
        uint64_t v114 = v48;
        if (v48 < v46)
        {
          *(_DWORD *)uint64_t v48 = v41;
          uint64_t v57 = (uint64_t)(v48 + 4);
LABEL_91:
          uint64_t v114 = (char *)v57;
          memset(v112, 0, sizeof(v112));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v112, v113, v57, (v57 - (uint64_t)v113) >> 2);
          uint64_t v67 = v126;
          int v68 = mlx::core::to_stream(a5, a6);
          int v70 = v69;
          uint64_t v71 = operator new(0x30uLL);
          v71[1] = 0;
          v71[2] = 0;
          void *v71 = &unk_2706349F0;
          *((_DWORD *)v71 + 10) = v70;
          v71[3] = &unk_270635700;
          v71[4] = v68;
          *(void *)&long long v111 = v71 + 3;
          *((void *)&v111 + 1) = v71;
          uint64_t v72 = a1[1];
          *(void *)&long long v136 = *a1;
          *((void *)&v136 + 1) = v72;
          if (v72) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v72 + 1, 1uLL, memory_order_relaxed);
          }
          int v73 = a2[1];
          long long v137 = *a2;
          std::string::size_type v138 = v73;
          if (v73) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v73 + 1, 1uLL, memory_order_relaxed);
          }
          long long v139 = v123;
          if (*((void *)&v123 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v123 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v140 = v120;
          if (*((void *)&v120 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v120 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v109 = 0uLL;
          int v110 = 0;
          int64_t v134 = (void **)&v109;
          char v135 = 0;
          long long v74 = (char *)operator new(0x40uLL);
          uint64_t v75 = 0;
          int64_t v76 = v105 - v14;
          *(void *)&long long v109 = v74;
          *((void *)&v109 + 1) = v74;
          int v110 = v74 + 64;
          do
          {
            long long v77 = &v74[v75];
            uint64_t v78 = *(void *)((char *)&v136 + v75 + 8);
            *(void *)long long v77 = *(void *)((char *)&v136 + v75);
            *((void *)v77 + 1) = v78;
            if (v78) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
            }
            v75 += 16;
          }
          while (v75 != 64);
          *((void *)&v109 + 1) = v74 + 64;
          mlx::core::array::array(v103, (long long *)v112, v67, &v111, &v109);
          int64_t v134 = (void **)&v109;
          std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v134);
          for (uint64_t i = 48; i != -16; i -= 16)
            mlx::core::array::~array((mlx::core::array *)((char *)&v136 + i));
          if (*((void *)&v111 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v111 + 1));
          }
          if (v112[0])
          {
            v112[1] = v112[0];
            operator delete(v112[0]);
          }
          uint64_t v80 = v76 & 0x3FFFFFFFCLL;
          if ((v104 & 0x3FFFFFFFCLL) == 4 || v80 == 4)
          {
            uint64_t v81 = -2;
            if ((v104 & 0x3FFFFFFFCLL) != 4) {
              uint64_t v81 = -1;
            }
            uint64_t v82 = &v114[4 * v81];
            if (v80 == 4) {
              uint64_t v83 = 0;
            }
            else {
              uint64_t v83 = -1;
            }
            unint64_t v84 = &v82[4 * (v83 - v81)];
            int64_t v85 = v114 - v84;
            if (v114 != v84) {
              memmove(&v114[4 * v81], v84, v114 - v84);
            }
            uint64_t v114 = &v82[v85];
            long long v107 = 0;
            uint64_t v108 = 0;
            unint64_t v106 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v106, v113, (uint64_t)&v82[v85], (&v82[v85] - (unsigned char *)v113) >> 2);
            mlx::core::reshape(v103, (uint64_t)&v106, a5, a6, (const void ***)&v136);
            long long v86 = v136;
            long long v136 = 0uLL;
            int v87 = (std::__shared_weak_count *)v103[1];
            *(_OWORD *)uint64_t v103 = v86;
            if (v87) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v87);
            }
            mlx::core::array::~array((mlx::core::array *)&v136);
            if (v106)
            {
              long long v107 = v106;
              operator delete(v106);
            }
          }
          if (v113)
          {
            uint64_t v114 = (char *)v113;
            operator delete(v113);
          }
          if (v127.__r_.__value_.__r.__words[0])
          {
            v127.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          mlx::core::array::~array((mlx::core::array *)&v120);
          mlx::core::array::~array((mlx::core::array *)&v123);
          return;
        }
        uint64_t v58 = (char *)v113;
        uint64_t v59 = (v48 - (unsigned char *)v113) >> 2;
        unint64_t v60 = v59 + 1;
        if (!((unint64_t)(v59 + 1) >> 62))
        {
          uint64_t v61 = v46 - (unsigned char *)v113;
          if (v61 >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            unint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115, v62);
            uint64_t v58 = (char *)v113;
            uint64_t v48 = v114;
          }
          else
          {
            unint64_t v63 = 0;
          }
          std::vector<int>::pointer v64 = &v63[4 * v59];
          int64_t v65 = &v63[4 * v62];
          *(_DWORD *)std::vector<int>::pointer v64 = v41;
          uint64_t v57 = (uint64_t)(v64 + 4);
          while (v48 != v58)
          {
            int v66 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v64 - 1) = v66;
            v64 -= 4;
          }
          uint64_t v113 = v64;
          uint64_t v114 = (char *)v57;
          unint64_t v115 = (unint64_t)v65;
          if (v58) {
            operator delete(v58);
          }
          goto LABEL_91;
        }
LABEL_140:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v102 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v102, "[gather_mm] Got rhs_indices with invalid dtype. Indices must be integral.");
    }
    else
    {
      unint64_t v102 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v102, "[gather_mm] Got lhs_indices with invalid dtype. Indices must be integral.");
    }
    v102->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v102, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::matmul(a1, a2, a5, a6, a7);
}

void sub_256F14574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, mlx::core::array *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a51 < 0)
  {
    operator delete(__p);
    if ((v61 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v61)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v60);
  goto LABEL_6;
}

void sub_256F14764()
{
}

void mlx::core::anonymous namespace'::indices_or_default(uint64_t a1@<X0>, const void ***a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a5 = *(void *)a1;
    *(void *)(a5 + 8) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v9 = *a2;
    uint64_t v10 = **a2;
    uint64_t v11 = (uint64_t)v9[1] - 8;
    long long v23 = 0;
    uint64_t v24 = 0;
    int v22 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v22, v10, v11, (v11 - (uint64_t)v10) >> 2);
    int64_t v12 = (int *)v22;
    if (v22 == v23)
    {
      double v15 = 1.0;
    }
    else
    {
      int v13 = 1;
      do
      {
        int v14 = *v12++;
        v13 *= v14;
      }
      while (v12 != (int *)v23);
      double v15 = (double)v13;
    }
    BOOL v16 = mlx::core::to_stream(a3, a4);
    mlx::core::arange(0x400000002, v16, v17 | 0x100000000, v21, 0, v15, 1.0);
    std::vector<int> __p = 0;
    BOOL v19 = 0;
    uint64_t v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
    mlx::core::reshape((const void ***)v21, (uint64_t)&__p, a3, a4, (const void ***)a5);
    if (__p)
    {
      BOOL v19 = __p;
      operator delete(__p);
    }
    mlx::core::array::~array((mlx::core::array *)v21);
    if (v22)
    {
      long long v23 = v22;
      operator delete(v22);
    }
  }
}

void sub_256F148B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void mlx::core::diagonal(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  v51[31] = *(int ***)MEMORY[0x263EF8340];
  uint64_t v8 = (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  if ((int)v8 <= 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"[diagonal] Array must have at least two dimensions, but got ", 60);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &v48);
    std::logic_error::logic_error(exception, &v48);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v9 = v8 & (a3 >> 31);
  uint64_t v10 = (v9 + a3);
  if (v9 + a3 < 0 || (int)v10 >= (int)v8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"[diagonal] Invalid axis1 ", 25);
    unint64_t v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" for array with ", 16);
    long long v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" dimensions.", 12);
    uint64_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &v48);
    std::logic_error::logic_error(v38, &v48);
    v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v38, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  int v11 = v8 & (a4 >> 31);
  uint64_t v12 = (v11 + a4);
  if (v11 + a4 < 0 || (int)v12 >= (int)v8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"[diagonal] Invalid axis2 ", 25);
    uint64_t v39 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" for array with ", 16);
    int v40 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" dimensions.", 12);
    int v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &v48);
    std::logic_error::logic_error(v41, &v48);
    v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v41, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  if (v10 == v12)
  {
    long long v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v42, "[diagonal] axis1 and axis2 cannot be the same axis");
    __cxa_throw(v42, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v16 = -a2 & ~(-a2 >> 31);
  int v17 = a2 & ~(a2 >> 31);
  int v18 = mlx::core::array::shape(a1, v10) - v16;
  int v19 = mlx::core::array::shape(a1, v12) - v17;
  if (v19 < v18) {
    int v18 = v19;
  }
  uint64_t v20 = mlx::core::to_stream(a5, a6);
  int v21 = v18 & ~(v18 >> 31);
  mlx::core::arange(0x400000004, v20, v22 | 0x100000000, (int ***)&v49, COERCE_VOID_((double)v16), (double)(v21 + v16), 1.0);
  long long v23 = mlx::core::to_stream(a5, a6);
  mlx::core::arange(0x400000004, v23, v24 | 0x100000000, v51, COERCE_VOID_((double)v17), (double)(v21 + v17), 1.0);
  memset(&v48, 0, sizeof(v48));
  std::vector<int> __p = &v48;
  LOBYTE(v45) = 0;
  long long v25 = (char *)operator new(0x20uLL);
  uint64_t v26 = 0;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  v48.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
  v48.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 32);
  do
  {
    unint64_t v27 = &v25[v26];
    uint64_t v28 = *(uint64_t *)((char *)&v49 + v26 + 8);
    *(void *)unint64_t v27 = *(void **)((char *)&v49 + v26);
    *((void *)v27 + 1) = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
    v26 += 16;
  }
  while (v26 != 32);
  v48.__r_.__value_.__l.__size_ = (std::string::size_type)(v25 + 32);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)((char *)&v49 + i));
  uint64_t v30 = *(void *)a1;
  uint64_t v50 = 0;
  v51[0] = 0;
  int v49 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, *(const void **)v30, *(void *)(v30 + 8), (uint64_t)(*(void *)(v30 + 8) - *(void *)v30) >> 2);
  long long v31 = v49;
  *((_DWORD *)v49 + v10) = 1;
  v31[v12] = 1;
  int v32 = operator new(8uLL);
  std::vector<int> __p = v32;
  void *v32 = v10 | (v12 << 32);
  unint64_t v45 = v32 + 1;
  int64_t v46 = v32 + 1;
  mlx::core::gather(a1, (uint64_t *)&v48, (int **)&__p, (uint64_t)&v49, a5, a6, v47);
  if (__p)
  {
    unint64_t v45 = __p;
    operator delete(__p);
  }
  uint64_t v33 = operator new(8uLL);
  void *v33 = (v10 + 1) | ((unint64_t)(v12 + 1) << 32);
  unint64_t v45 = v33 + 1;
  int64_t v46 = v33 + 1;
  std::vector<int> __p = v33;
  mlx::core::squeeze((mlx::core::array *)v47, (unsigned int **)&__p, a5, a6, (const void ***)v43);
  mlx::core::moveaxis(v43, 0, -1, a5, a6, a7);
  mlx::core::array::~array((mlx::core::array *)v43);
  operator delete(v33);
  mlx::core::array::~array((mlx::core::array *)v47);
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  int v49 = &v48;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
}

void sub_256F14E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void mlx::core::diag(mlx::core::array *a1@<X0>, int a2@<W1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  if (v11 == 2)
  {
    mlx::core::diagonal(a1, a2, 0, 1, a3, a4, a5);
  }
  else
  {
    if (v11 != 1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"[diag] array must be 1-D or 2-D, got array with ", 48);
      long long v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" dimensions.", 12);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v26, &v28);
      std::logic_error::logic_error(exception, &v28);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    int v12 = *(_DWORD *)(v10 + 48);
    int v13 = (char *)operator new(8uLL);
    int v14 = v13;
    if (a2 >= 0) {
      int v15 = a2;
    }
    else {
      int v15 = -a2;
    }
    *(void *)int v13 = (v15 + v12) | ((unint64_t)(v15 + v12) << 32);
    uint64_t v26 = v13 + 8;
    unint64_t v27 = v13 + 8;
    long long v25 = v13;
    mlx::core::zeros((uint64_t)&v25, *(void *)(v10 + 56), a3, a4, v33);
    operator delete(v14);
    long long v25 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    int v16 = mlx::core::to_stream(a3, a4);
    int v17 = -a2 & ~(-a2 >> 31);
    mlx::core::arange(0x400000002, v16, v18 | 0x100000000, (int ***)&v28, COERCE_VOID_((double)v17), (double)(v17 + v12), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v25, (uint64_t)&v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    int v19 = mlx::core::to_stream(a3, a4);
    mlx::core::arange(0x400000002, v19, v20 | 0x100000000, (int ***)&v28, COERCE_VOID_((double)(a2 & ~(a2 >> 31))), (double)((a2 & ~(a2 >> 31)) + v12), 1.0);
    std::vector<mlx::core::array>::push_back[abi:ne180100](&v25, (uint64_t)&v28);
    mlx::core::array::~array((mlx::core::array *)&v28);
    uint64_t v30 = 0;
    long long v31 = 0;
    unint64_t v29 = 0;
    int v21 = (char *)operator new(0xCuLL);
    uint64_t v30 = v21 + 12;
    long long v31 = v21 + 12;
    *(_DWORD *)int v21 = v12;
    *(void *)(v21 + 4) = 0x100000001;
    unint64_t v29 = v21;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v29, a3, a4, v32);
    unsigned int v22 = operator new(8uLL);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *unsigned int v22 = 0x100000000;
    v28.__r_.__value_.__l.__size_ = (std::string::size_type)(v22 + 1);
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
    mlx::core::scatter((mlx::core::array *)v33, (const void ****)&v25, (mlx::core::array *)v32, (int **)&v28, 4, a3, a4, a5);
    if (v28.__r_.__value_.__r.__words[0])
    {
      v28.__r_.__value_.__l.__size_ = v28.__r_.__value_.__r.__words[0];
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    mlx::core::array::~array((mlx::core::array *)v32);
    if (v29)
    {
      uint64_t v30 = v29;
      operator delete(v29);
    }
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    mlx::core::array::~array((mlx::core::array *)v33);
  }
}

void sub_256F152C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v4 - 137) < 0)
  {
    operator delete(*(void **)(v4 - 160));
    if ((v3 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

void mlx::core::trace(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, mlx::core *a6@<X5>, uint64_t a7@<X6>, mlx::core::array *a8@<X8>)
{
  uint64_t v9 = (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2;
  if ((int)v9 <= 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Array must have at least two dimensions, but got ", 57);
    int v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" dimensions.", 12);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  int v10 = (v9 & (a3 >> 31)) + a3;
  if (v10 < 0 || v10 >= (int)v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Invalid axis1 ", 22);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" for array with ", 16);
    unsigned int v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" dimensions.", 12);
    int v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(v19, &v25);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v19, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  int v11 = (v9 & (a4 >> 31)) + a4;
  if (v11 < 0 || v11 >= (int)v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[trace] Invalid axis2 ", 22);
    unsigned int v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for array with ", 16);
    int v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" dimensions.", 12);
    unsigned int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
    std::logic_error::logic_error(v22, &v25);
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v22, (struct type_info *)off_265426348, MEMORY[0x263F8C068]);
  }
  if (v10 == v11)
  {
    long long v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v23, "[trace] axis1 and axis2 cannot be the same axis");
    __cxa_throw(v23, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::diagonal(a1, a2, a3, a4, a6, a7, v24);
  mlx::core::astype(v24, a5, a6, a7, &v26);
  mlx::core::sum((uint64_t)&v26, -1, 0, a6, a7, a8);
  mlx::core::array::~array((mlx::core::array *)&v26);
  mlx::core::array::~array((mlx::core::array *)v24);
}

void sub_256F156E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void mlx::core::trace(mlx::core::array *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, mlx::core::array *a7@<X8>)
{
}

void mlx::core::trace(mlx::core::array *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, mlx::core::array *a4@<X8>)
{
}

void mlx::core::depends(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  int v41 = 0;
  long long v42 = 0;
  uint64_t v43 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v41, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  uint64_t v6 = (mlx::core *)std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((uint64_t *)&v41, v42, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  unint64_t v7 = *a1;
  uint64_t v8 = *(void *)(**a1 + 64);
  if (v8)
  {
    uint64_t v9 = *(mlx::core **)(v8 + 8);
    unsigned int v10 = *(_DWORD *)(v8 + 16);
  }
  else
  {
    uint64_t v9 = mlx::core::to_stream(v6, 0);
    unsigned int v10 = v11;
    unint64_t v7 = *a1;
  }
  unint64_t v40 = 0;
  long long v12 = 0uLL;
  long long v39 = 0u;
  uint64_t v38 = 0;
  *(_OWORD *)std::vector<int> __p = 0u;
  int v13 = a1[1];
  if (v7 == v13)
  {
    unint64_t v28 = 0;
  }
  else
  {
    do
    {
      uint64_t v14 = *v7;
      int v15 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) >= v40)
      {
        uint64_t v16 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>((uint64_t *)&v39, v14);
      }
      else
      {
        **((void **)&v39 + 1) = 0;
        v15[1] = 0;
        void v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
        uint64_t v16 = (uint64_t)(v15 + 3);
      }
      *((void *)&v39 + 1) = v16;
      uint64_t v17 = *(void *)(*v7 + 56);
      unsigned int v18 = (char *)__p[1];
      if (__p[1] >= v38)
      {
        int64_t v20 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (v38 - (char *)__p[0]) >> 2;
        if (v21 <= v20 + 1) {
          unint64_t v21 = v20 + 1;
        }
        if ((unint64_t)(v38 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v38, v22);
        }
        else {
          long long v23 = 0;
        }
        int v24 = &v23[8 * v20];
        *(void *)int v24 = v17;
        int v19 = v24 + 8;
        uint64_t v26 = (char *)__p[0];
        std::string v25 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          std::string v25 = (char *)__p[0];
        }
        __p[0] = v24;
        __p[1] = v19;
        uint64_t v38 = &v23[8 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)__p[1] = v17;
        int v19 = v18 + 8;
      }
      __p[1] = v19;
      v7 += 2;
    }
    while (v7 != v13);
    long long v12 = v39;
    unint64_t v28 = v40;
  }
  long long v35 = v12;
  unint64_t v36 = v28;
  unint64_t v40 = 0;
  long long v39 = 0uLL;
  unint64_t v29 = mlx::core::to_stream(v9, v10 | 0x100000000);
  int v31 = v30;
  int v32 = (std::__shared_weak_count *)operator new(0x30uLL);
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634A40;
  LODWORD(v32[1].__shared_weak_owners_) = v31;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270635B30;
  v32[1].__shared_owners_ = (uint64_t)v29;
  uint64_t v33 = (void **)&v32[1].__vftable;
  uint64_t v34 = v32;
  mlx::core::array::make_arrays((uint64_t *)&v35, __p, &v33, &v41, a3);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v33 = (void **)&v35;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v33);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v39;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)&long long v39 = &v41;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_256F15A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, char a20)
{
  a17 = &a20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void mlx::core::atleast_1d(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(*(void *)a1 + 8) == **(void **)a1)
  {
    uint64_t v9 = operator new(4uLL);
    std::vector<int> __p = v9;
    *uint64_t v9 = 1;
    unsigned int v11 = v9 + 1;
    long long v12 = v9 + 1;
    mlx::core::reshape((const void ***)a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    if (__p)
    {
      unsigned int v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a4 = *(void *)a1;
    *(void *)(a4 + 8) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_256F15BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_1d(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, (a1[1] - *a1) >> 4);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_1d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 16;
  }
}

void sub_256F15C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mlx::core::atleast_2d(const void ***a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 2;
  if (v9 == 1)
  {
    long long v12 = v8[6];
    int v13 = operator new(8uLL);
    std::vector<int> __p = v13;
    void *v13 = ((void)v12 << 32) | 1;
    uint64_t v16 = v13 + 1;
    uint64_t v17 = v13 + 1;
    mlx::core::reshape(a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    unsigned int v11 = __p;
    if (!__p) {
      return;
    }
    uint64_t v16 = __p;
    goto LABEL_7;
  }
  if (!v9)
  {
    unsigned int v10 = operator new(8uLL);
    unsigned int v18 = v10;
    *unsigned int v10 = 0x100000001;
    int v19 = v10 + 1;
    int64_t v20 = v10 + 1;
    mlx::core::reshape(a1, (uint64_t)&v18, a2, a3, (const void ***)a4);
    unsigned int v11 = v18;
    if (!v18) {
      return;
    }
    int v19 = v18;
LABEL_7:
    operator delete(v11);
    return;
  }
  uint64_t v14 = a1[1];
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_256F15D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_2d(const void ****a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, ((char *)a1[1] - (char *)*a1) >> 4);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_2d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 2;
  }
}

void sub_256F15E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mlx::core::atleast_3d(uint64_t a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(const void ***)a1;
  uint64_t v9 = (char *)*v8;
  unsigned int v10 = (char *)v8[1];
  uint64_t v11 = v10 - (unsigned char *)*v8;
  uint64_t v12 = v11 >> 2;
  if (v11 >> 2 == 2)
  {
    if (v10 == v9 || (unint64_t)v11 <= 4) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v15 = *(void *)v9;
    uint64_t v16 = (char *)operator new(0xCuLL);
    unint64_t v21 = v16 + 12;
    unint64_t v22 = v16 + 12;
    *(void *)uint64_t v16 = v15;
    *((_DWORD *)v16 + 2) = 1;
    int64_t v20 = v16;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v20, a2, a3, (const void ***)a4);
    uint64_t v14 = v20;
    if (v20)
    {
      unint64_t v21 = v20;
      goto LABEL_12;
    }
  }
  else if (v12 == 1)
  {
    uint64_t v17 = v8[6];
    unsigned int v18 = operator new(0xCuLL);
    int v24 = v18 + 3;
    std::string v25 = v18 + 3;
    *unsigned int v18 = 1;
    v18[1] = v17;
    v18[2] = 1;
    std::vector<int> __p = v18;
    mlx::core::reshape((const void ***)a1, (uint64_t)&__p, a2, a3, (const void ***)a4);
    uint64_t v14 = __p;
    if (__p)
    {
      int v24 = __p;
      goto LABEL_12;
    }
  }
  else if (v12)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v13 = (char *)operator new(0xCuLL);
    uint64_t v27 = v13 + 12;
    unint64_t v28 = v13 + 12;
    *(void *)int v13 = 0x100000001;
    *((_DWORD *)v13 + 2) = 1;
    uint64_t v26 = v13;
    mlx::core::reshape((const void ***)a1, (uint64_t)&v26, a2, a3, (const void ***)a4);
    uint64_t v14 = v26;
    if (v26)
    {
      uint64_t v27 = v26;
LABEL_12:
      operator delete(v14);
    }
  }
}

void sub_256F1600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::atleast_3d(uint64_t *a1@<X0>, mlx::core *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a4, (a1[1] - *a1) >> 4);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    mlx::core::atleast_3d(v8, a2, a3, (uint64_t)v10);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
    mlx::core::array::~array((mlx::core::array *)v10);
    v8 += 16;
  }
}

void sub_256F160EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void mlx::core::bitwise_impl(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *(void *)&long long v38 = *(void *)(*a1 + 56);
  v37[0] = *(void ***)(*a2 + 56);
  uint64_t v40 = mlx::core::promote_types((int *)&v38, (int *)v37);
  if ((mlx::core::issubdtype((unsigned int *)&v40, &mlx::core::integer) & 1) == 0 && v40)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
    int64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"[", 1);
    int v21 = *(char *)(a4 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a4;
    }
    else {
      uint64_t v22 = *(void *)a4;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a4 + 8);
    }
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    std::string v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] Only allowed on integer or BOOLean types but got types ", 57);
    v37[0] = *(void ***)(*a1 + 56);
    uint64_t v26 = mlx::core::operator<<(v25, v37);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" and ", 5);
    v35[0] = *(const void ***)(*a2 + 56);
    unint64_t v28 = mlx::core::operator<<(v27, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v38 + 8, v37);
    MEMORY[0x25A2B1480](exception, v37);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v12 = a1[1];
  v36[0] = *a1;
  v36[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v36, v40, *(mlx::core **)a5, *(void *)(a5 + 8), v37);
  uint64_t v13 = a2[1];
  v34[0] = *a2;
  v34[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v34, v40, *(mlx::core **)a5, *(void *)(a5 + 8), v35);
  mlx::core::broadcast_arrays((const void ***)v37, v35, *(mlx::core **)a5, *(void *)(a5 + 8), &v38);
  mlx::core::array::~array((mlx::core::array *)v35);
  mlx::core::array::~array((mlx::core::array *)v34);
  mlx::core::array::~array((mlx::core::array *)v37);
  mlx::core::array::~array((mlx::core::array *)v36);
  uint64_t v14 = *(void *)v38;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
  uint64_t v15 = v40;
  uint64_t v16 = mlx::core::to_stream(*(mlx::core **)a5, *(void *)(a5 + 8));
  int v18 = v17;
  uint64_t v19 = operator new(0x30uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *uint64_t v19 = &unk_270634AE0;
  *((_DWORD *)v19 + 10) = v18;
  *((_DWORD *)v19 + 11) = a3;
  v19[3] = &unk_270632458;
  v19[4] = v16;
  *(void *)&long long v32 = v19 + 3;
  *((void *)&v32 + 1) = v19;
  long long v30 = v38;
  uint64_t v31 = v39;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  mlx::core::array::array(a6, (long long *)__p, v15, &v32, &v30);
  v37[0] = (void **)&v30;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v37);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v37[0] = (void **)&v38;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v37);
}

void sub_256F16418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a30);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void mlx::core::bitwise_and(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_and");
  mlx::core::bitwise_impl(a1, a2, 0, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_256F16568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::operator&(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::bitwise_or(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_or");
  mlx::core::bitwise_impl(a1, a2, 1, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_256F16604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::operator|(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::bitwise_xor(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "bitwise_xor");
  mlx::core::bitwise_impl(a1, a2, 2, (uint64_t)__p, (uint64_t)v10, a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_256F166A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::operator^(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::left_shift(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v19[0] = a3;
  v19[1] = a4;
  __p[0] = *(void **)(*a1 + 56);
  *(void *)int v18 = *(void *)(*a2 + 56);
  __p[0] = (void *)mlx::core::promote_types((int *)__p, v18);
  uint64_t v10 = mlx::core::promote_types((int *)__p, (int *)&mlx::core::uint8);
  uint64_t v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v10, a3, a4, v18);
  uint64_t v12 = a2[1];
  v15[0] = *a2;
  v15[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v15, v10, a3, a4, v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "left_shift");
  mlx::core::bitwise_impl(v18, v16, 3, (uint64_t)__p, (uint64_t)v19, a5);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F16808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a18);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a22);
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::operator<<(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

void mlx::core::right_shift(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v19[0] = a3;
  v19[1] = a4;
  __p[0] = *(void **)(*a1 + 56);
  *(void *)int v18 = *(void *)(*a2 + 56);
  __p[0] = (void *)mlx::core::promote_types((int *)__p, v18);
  uint64_t v10 = mlx::core::promote_types((int *)__p, (int *)&mlx::core::uint8);
  uint64_t v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v17, v10, a3, a4, v18);
  uint64_t v12 = a2[1];
  v15[0] = *a2;
  v15[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v15, v10, a3, a4, v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "right_shift");
  mlx::core::bitwise_impl(v18, v16, 4, (uint64_t)__p, (uint64_t)v19, a5);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F169A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a18);
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a22);
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::operator>>(void *a1@<X0>, void *a2@<X1>, mlx::core *a3@<X2>, void *a4@<X8>)
{
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      int v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      int v18 = 0;
    }
    unint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    long long v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    uint64_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    int v21 = &__src[4 * a5];
    uint64_t v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    int v24 = &v5[a5];
    std::string v25 = &v23[-a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  int v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_256F16BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<int>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_256F16CF0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t result, void *a2, void *a3)
{
  int v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *int v3 = *((_DWORD *)a2 + 7);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    BOOL v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *BOOL v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_256F16E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::pair<int,int>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_256F16E88(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]<std::vector<int>&,std::vector<int>&,0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F16F04(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  int v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *int v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

int ***mlx::core::array::array<double>(int ***a1, double *a2, int a3, uint64_t a4)
{
  uint64_t v12 = a4;
  unint64_t v7 = operator new(4uLL);
  std::vector<int> __p = v7;
  _DWORD *v7 = a3;
  unint64_t v10 = v7 + 1;
  unint64_t v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<double const*>(a1, a2);
  return a1;
}

void sub_256F17224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

float mlx::core::array::init<double const*>(int ***a1, double *a2)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v35[0] = &unk_27062AEC8;
  v35[1] = mlx::core::allocator::free;
  v35[3] = v35;
  mlx::core::array::set_data(a1, v4, (uint64_t)v35);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v35);
  unint64_t v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
      unint64_t v7 = v6[6];
      if (v7)
      {
        unint64_t v8 = (BOOL *)v6[19];
        uint64_t v9 = 8 * (void)v7;
        do
        {
          double v10 = *a2++;
          float result = *(float *)&v10;
          *v8++ = v10 != 0.0;
          v9 -= 8;
        }
        while (v9);
      }
      break;
    case 1:
      uint64_t v23 = v6[6];
      if (v23)
      {
        int v24 = v6[19];
        uint64_t v25 = 8 * (void)v23;
        do
        {
          double v26 = *a2++;
          float result = *(float *)&v26;
          *(unsigned char *)int v24 = (int)v26;
          int v24 = (int *)((char *)v24 + 1);
          v25 -= 8;
        }
        while (v25);
      }
      break;
    case 2:
      uint64_t v11 = v6[6];
      if (v11)
      {
        uint64_t v12 = v6[19];
        uint64_t v13 = 8 * (void)v11;
        do
        {
          double v14 = *a2++;
          float result = *(float *)&v14;
          *v12++ = v14;
          v13 -= 8;
        }
        while (v13);
      }
      break;
    case 3:
      uint64_t v15 = v6[6];
      if (v15)
      {
        uint64_t v16 = v6[19];
        uint64_t v17 = 8 * (void)v15;
        do
        {
          double v18 = *a2++;
          float result = *(float *)&v18;
          *(unsigned char *)uint64_t v16 = (int)v18;
          uint64_t v16 = (int *)((char *)v16 + 1);
          v17 -= 8;
        }
        while (v17);
      }
      break;
    case 4:
      uint64_t v19 = v6[6];
      if (v19)
      {
        uint64_t v20 = v6[19];
        uint64_t v21 = 8 * (void)v19;
        do
        {
          double v22 = *a2++;
          float result = *(float *)&v22;
          *v20++ = (int)v22;
          v21 -= 8;
        }
        while (v21);
      }
      break;
    case 5:
      int v27 = v6[6];
      if (v27)
      {
        unint64_t v28 = v6[19];
        uint64_t v29 = 8 * (void)v27;
        do
        {
          double v30 = *a2++;
          float result = *(float *)&v30;
          *(void *)unint64_t v28 = (uint64_t)v30;
          v28 += 2;
          v29 -= 8;
        }
        while (v29);
      }
      break;
    case 6:
      int v31 = v6[6];
      if (v31)
      {
        long long v32 = (float *)v6[19];
        uint64_t v33 = 8 * (void)v31;
        do
        {
          double v34 = *a2++;
          float result = v34;
          *v32++ = result;
          v33 -= 8;
        }
        while (v33);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256F17454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Arange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706332D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Arange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706332D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Arange>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::AsType>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AsType>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AsType>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::allocate_shared[abi:ne180100]<mlx::core::AsStrided,std::allocator<mlx::core::AsStrided>,mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,void>(uint64_t *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  double v10 = (char *)operator new(0x68uLL);
  std::__shared_ptr_emplace<mlx::core::AsStrided>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,std::allocator<mlx::core::AsStrided>,0>((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 24;
  a5[1] = v10;
}

void sub_256F17624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__shared_ptr_emplace<mlx::core::AsStrided>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<unsigned long>,unsigned long &,std::allocator<mlx::core::AsStrided>,0>(uint64_t a1, uint64_t *a2, long long *a3, long long *a4, uint64_t *a5)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633370;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *((void *)a3 + 2);
  long long v9 = *a3;
  *((void *)a3 + 2) = 0;
  *a3 = 0u;
  uint64_t v10 = *((void *)a4 + 2);
  long long v11 = *a4;
  *(void *)a4 = 0;
  *(long long *)((char *)a4 + 8) = 0u;
  uint64_t v12 = *a5;
  *(_DWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 24) = &unk_2706355F0;
  *(void *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = v11;
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v12;
  return result;
}

void std::__shared_ptr_emplace<mlx::core::AsStrided>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AsStrided>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AsStrided>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Copy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706333C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Copy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706333C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Copy>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Full>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Full>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Full>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Reshape,std::allocator<mlx::core::Reshape>,mlx::core::Stream,std::vector<int> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Reshape>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> &,std::allocator<mlx::core::Reshape>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_256F178E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reshape>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> &,std::allocator<mlx::core::Reshape>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633460;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(void *)(v6 - 24) = &unk_270636C98;
  *(void *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F17984(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Reshape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Reshape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reshape>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_256F17AA0(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<int *>>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_256F17D54(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<mlx::core::Slice,std::allocator<mlx::core::Slice>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Slice>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::Slice>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_256F17DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::Slice>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::Slice>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2706334B0;
  mlx::core::Slice::Slice((uint64_t)(a1 + 3), *(void *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_256F17E48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Slice>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706334B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Slice>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706334B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Slice>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t mlx::core::Slice::Slice(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)a1 = &unk_2706370D8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  return a1;
}

void sub_256F17FB0(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<mlx::core::SliceUpdate,std::allocator<mlx::core::SliceUpdate>,mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::SliceUpdate>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_256F1804C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::vector<int>,std::vector<int>,std::allocator<mlx::core::SliceUpdate>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270633500;
  mlx::core::SliceUpdate::SliceUpdate((uint64_t)(a1 + 3), *(void *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_256F180C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::SliceUpdate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::SliceUpdate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::SliceUpdate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t mlx::core::SliceUpdate::SliceUpdate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)a1 = &unk_270637160;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  return a1;
}

void sub_256F18228(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Split,std::allocator<mlx::core::Split>,mlx::core::Stream,std::vector<int> const&,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Split>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,unsigned long &,std::allocator<mlx::core::Split>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_256F182BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Split>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,unsigned long &,std::allocator<mlx::core::Split>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633550;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *a4;
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(void *)(v8 - 24) = &unk_270637270;
  *(void *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v8, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_DWORD *)(a1 + 72) = v7;
  return a1;
}

void sub_256F18364(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Split>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Split>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Split>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Concatenate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706335A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Concatenate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706335A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Concatenate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<mlx::core::Pad,std::allocator<mlx::core::Pad>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Pad>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Pad>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_256F18518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::Pad>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Pad>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2706335F0;
  mlx::core::Pad::Pad((uint64_t)(a1 + 3), *(void *)a2, *(_DWORD *)(a2 + 8), a3, a4, a5);
  return a1;
}

void sub_256F1858C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Pad>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706335F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Pad>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706335F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Pad>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t mlx::core::Pad::Pad(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)a1 = &unk_270636A78;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  return a1;
}

void sub_256F186F4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Transpose,std::allocator<mlx::core::Transpose>,mlx::core::Stream,std::vector<int>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  int v6 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Transpose>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::allocator<mlx::core::Transpose>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_256F18778(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Transpose>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int>,std::allocator<mlx::core::Transpose>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633640;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(void *)(v6 - 24) = &unk_270637618;
  *(void *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F18818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Transpose>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Transpose>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Transpose>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Broadcast,std::allocator<mlx::core::Broadcast>,mlx::core::Stream,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Broadcast>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::allocator<mlx::core::Broadcast>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_256F18918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Broadcast>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::allocator<mlx::core::Broadcast>,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633690;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = a1 + 48;
  *(_DWORD *)(v6 - 8) = v5;
  *(void *)(v6 - 24) = &unk_270635788;
  *(void *)(v6 - 16) = v4;
  *(_OWORD *)(v6 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F189B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Broadcast>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Broadcast>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Broadcast>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Equal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706336E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Equal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706336E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Equal>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::NotEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::NotEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::NotEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Greater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Greater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Greater>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::GreaterEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706337D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::GreaterEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706337D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::GreaterEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Less>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Less>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Less>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::LessEqual>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LessEqual>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LessEqual>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Select>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706338C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Select>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706338C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Select>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Reduce,std::allocator<mlx::core::Reduce>,mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Reduce>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,std::allocator<mlx::core::Reduce>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_256F18F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reduce>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Reduce::ReduceType,std::vector<int> &,std::allocator<mlx::core::Reduce>,0>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270633910;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = *a3;
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(_DWORD *)(v8 - 4) = v7;
  *(void *)(v8 - 24) = &unk_27062AF78;
  *(void *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v8, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_256F18FB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Reduce>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Reduce>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Reduce>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArgReduce>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgReduce>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgReduce>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706339B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706339B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sort>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArgSort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgSort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633A00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgSort>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Partition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Partition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Partition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArgPartition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArgPartition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArgPartition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Abs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Abs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Abs>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Negative>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Negative>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Negative>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sign>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::LogicalNot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalNot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalNot>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::LogicalAnd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalAnd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalAnd>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::LogicalOr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogicalOr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogicalOr>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Add>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Add>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Add>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Subtract>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Subtract>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Subtract>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Multiply>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Multiply>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Multiply>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Divide>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Divide>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Divide>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Remainder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Remainder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Remainder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::DivMod>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::DivMod>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::DivMod>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Maximum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Maximum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Maximum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Minimum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Minimum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Minimum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Floor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Floor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Floor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Ceil>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Ceil>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Ceil>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Square>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Square>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270633FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Square>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Exp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Exp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Exp>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Expm1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Expm1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Expm1>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706340E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706340E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Cos>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cos>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Tan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Tan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Tan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcSin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706341D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcSin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706341D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcSin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcCos>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcCos>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcCos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcTan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcTan2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706342C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTan2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706342C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTan2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sinh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sinh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sinh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Cosh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Cosh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Cosh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Tanh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706343B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Tanh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706343B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Tanh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcSinh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcSinh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcSinh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcCosh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcCosh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcCosh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ArcTanh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706344A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ArcTanh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706344A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ArcTanh>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706344F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706344F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Log>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Log1p>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Log1p>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Log1p>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::LogAddExp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::LogAddExp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::LogAddExp>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sigmoid>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706345E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sigmoid>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706345E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sigmoid>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Erf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Erf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Erf>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::ErfInv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::ErfInv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::ErfInv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::StopGradient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706346D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::StopGradient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706346D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::StopGradient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Round>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Round>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Round>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Matmul>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Matmul>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Matmul>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<mlx::core::Gather,std::allocator<mlx::core::Gather>,mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Gather>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Gather>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_256F1ACC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::Gather>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::vector<int> const&,std::vector<int> const&,std::allocator<mlx::core::Gather>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2706347C0;
  mlx::core::Gather::Gather((uint64_t)(a1 + 3), *(void *)a2, *(_DWORD *)(a2 + 8), a3, a4);
  return a1;
}

void sub_256F1AD38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Gather>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706347C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Gather>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706347C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Gather>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t mlx::core::Gather::Gather(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)a1 = &unk_270636170;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  return a1;
}

void sub_256F1AE74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::Scatter,std::allocator<mlx::core::Scatter>,mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::Scatter>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,std::allocator<mlx::core::Scatter>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_256F1AEF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scatter>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,mlx::core::Scatter::ReduceType &,std::vector<int> const&,std::allocator<mlx::core::Scatter>,0>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270634810;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = *a3;
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(_DWORD *)(v8 - 4) = v7;
  *(void *)(v8 - 24) = &unk_270636E30;
  *(void *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v8, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_256F1AF94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::Scatter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Scatter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scatter>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Sqrt>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Sqrt>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Sqrt>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Power>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706348B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Power>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706348B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Power>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Scan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Scan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Scan>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::AddMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::AddMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::AddMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

int ***mlx::core::array::array<BOOL>(int ***a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v12 = a4;
  int v7 = operator new(4uLL);
  std::vector<int> __p = v7;
  _DWORD *v7 = a3;
  uint64_t v10 = v7 + 1;
  uint64_t v11 = v7 + 1;
  std::allocate_shared[abi:ne180100]<mlx::core::array::ArrayDesc,std::allocator<mlx::core::array::ArrayDesc>,std::vector<int>,mlx::core::Dtype &,void>((uint64_t)&__p, &v12, a1);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  mlx::core::array::init<BOOL const*>(a1, a2);
  return a1;
}

void sub_256F1B338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void *mlx::core::array::init<BOOL const*>(int ***a1, unsigned __int8 *a2)
{
  v21[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlx::core::allocator::malloc((mlx::core::allocator *)(*((unsigned __int8 *)*a1 + 60) * (void)(*a1)[6]));
  v21[0] = &unk_27062AEC8;
  v21[1] = mlx::core::allocator::free;
  v21[3] = v21;
  mlx::core::array::set_data(a1, v4, (uint64_t)v21);
  uint64_t result = std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v21);
  int v6 = *a1;
  switch(*((_DWORD *)*a1 + 14))
  {
    case 0:
    case 1:
    case 3:
      size_t v7 = (size_t)v6[6];
      if (v7) {
        uint64_t result = memmove(v6[19], a2, v7);
      }
      break;
    case 2:
      uint64_t v8 = v6[6];
      if (v8)
      {
        long long v9 = v6[19];
        do
        {
          int v10 = *a2++;
          *v9++ = v10;
          uint64_t v8 = (int *)((char *)v8 - 1);
        }
        while (v8);
      }
      break;
    case 4:
      uint64_t v11 = v6[6];
      if (v11)
      {
        uint64_t v12 = v6[19];
        do
        {
          int v13 = *a2++;
          *v12++ = v13;
          uint64_t v11 = (int *)((char *)v11 - 1);
        }
        while (v11);
      }
      break;
    case 5:
      BOOL v14 = v6[6];
      if (v14)
      {
        int v15 = v6[19];
        do
        {
          unsigned int v16 = *a2++;
          *(void *)int v15 = v16;
          v15 += 2;
          BOOL v14 = (int *)((char *)v14 - 1);
        }
        while (v14);
      }
      break;
    case 6:
      uint64_t v17 = v6[6];
      if (v17)
      {
        int v18 = (float *)v6[19];
        do
        {
          if (*a2++) {
            float v20 = 1.0;
          }
          else {
            float v20 = 0.0;
          }
          *v18++ = v20;
          uint64_t v17 = (int *)((char *)v17 - 1);
        }
        while (v17);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_256F1B4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706349A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706349A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::BlockMaskedMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::GatherMM>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706349F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::GatherMM>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2706349F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::GatherMM>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::Depends>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Depends>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Depends>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::NumberOfElements>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::NumberOfElements>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270634AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_emplace<mlx::core::BitwiseBinary>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void mlx_abs()
{
}

void sub_256F1B8DC(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_add()
{
}

void sub_256F1B9B4(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_addmm(float a1, float a2)
{
  float v2 = a2;
  float v3 = a1;
  operator new();
}

void sub_256F1BB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  MEMORY[0x25A2B1780](v2, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_all_axes()
{
}

void sub_256F1BC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_all_axis()
{
}

void sub_256F1BD38(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_all_all()
{
}

void sub_256F1BE10(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_allclose()
{
}

void sub_256F1BF10(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_any()
{
}

void sub_256F1C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_any_all()
{
}

void sub_256F1C118(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arange()
{
}

void sub_256F1C218(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arccos()
{
}

void sub_256F1C2E8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arccosh()
{
}

void sub_256F1C3B8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arcsin()
{
}

void sub_256F1C488(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arcsinh()
{
}

void sub_256F1C558(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arctan()
{
}

void sub_256F1C628(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arctan2()
{
}

void sub_256F1C700(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_arctanh()
{
}

void sub_256F1C7D0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argmax()
{
}

void sub_256F1C8B8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argmax_all()
{
}

void sub_256F1C990(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argmin()
{
}

void sub_256F1CA78(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argmin_all()
{
}

void sub_256F1CB50(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argpartition()
{
}

void sub_256F1CC38(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argpartition_all()
{
}

void sub_256F1CD10(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argsort()
{
}

void sub_256F1CDE8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_argsort_all()
{
}

void sub_256F1CEB8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_array_equal()
{
}

void sub_256F1CFA0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_as_strided()
{
}

void sub_256F1D118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  mlx::core::array::~array((mlx::core::array *)&a15);
  MEMORY[0x25A2B1780](v15, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_astype()
{
}

void sub_256F1D250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x25A2B1780](v9, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_atleast_1d()
{
}

void sub_256F1D328(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_atleast_2d()
{
}

void sub_256F1D3F8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_atleast_3d()
{
}

void sub_256F1D4C8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_bitwise_and()
{
}

void sub_256F1D5A0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_bitwise_or()
{
}

void sub_256F1D678(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_bitwise_xor()
{
}

void sub_256F1D750(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_block_masked_mm()
{
}

void sub_256F1D964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v16 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  if ((_BYTE)v7) {
    mlx::core::array::~array((mlx::core::array *)va);
  }
  if ((_BYTE)v11) {
    mlx::core::array::~array((mlx::core::array *)va1);
  }
  if ((_BYTE)v15) {
    mlx::core::array::~array((mlx::core::array *)va2);
  }
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va4);
  MEMORY[0x25A2B1780](v2, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_broadcast_arrays()
{
}

void sub_256F1DA78(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_broadcast_to()
{
}

void sub_256F1DB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_ceil()
{
}

void sub_256F1DC70(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_clip()
{
}

void sub_256F1DDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a11) {
    mlx::core::array::~array((mlx::core::array *)&a9);
  }
  if (a17) {
    mlx::core::array::~array((mlx::core::array *)&a13);
  }
  MEMORY[0x25A2B1780](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_concatenate()
{
}

void sub_256F1DED8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_concatenate_all()
{
}

void sub_256F1DFA8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_copy()
{
}

void sub_256F1E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  MEMORY[0x25A2B1780](v9, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cos()
{
}

void sub_256F1E170(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cosh()
{
}

void sub_256F1E240(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cummax()
{
}

void sub_256F1E330(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cummin()
{
}

void sub_256F1E420(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cumprod()
{
}

void sub_256F1E510(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_cumsum()
{
}

void sub_256F1E600(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_degrees()
{
}

void sub_256F1E6D0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_depends()
{
}

void sub_256F1E79C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_diag()
{
}

void sub_256F1E874(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_diagonal()
{
}

void sub_256F1E964(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_divide()
{
}

void sub_256F1EA3C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_divmod()
{
}

void sub_256F1EB18(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_equal()
{
}

void sub_256F1EBF0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_erf()
{
}

void sub_256F1ECC0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_erfinv()
{
}

void sub_256F1ED90(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_exp()
{
}

void sub_256F1EE60(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_expand_dims()
{
}

void sub_256F1EF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_expm1()
{
}

void sub_256F1F058(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_eye()
{
}

void sub_256F1F150(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_flatten()
{
}

void sub_256F1F238(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_floor()
{
}

void sub_256F1F308(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_floor_divide()
{
}

void sub_256F1F3E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_full()
{
}

void sub_256F1F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_gather()
{
}

void sub_256F1F698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  MEMORY[0x25A2B1780](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_gather_mm()
{
}

void sub_256F1F880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a11) {
    mlx::core::array::~array((mlx::core::array *)&a9);
  }
  if (a17) {
    mlx::core::array::~array((mlx::core::array *)&a13);
  }
  mlx::core::array::~array((mlx::core::array *)&a19);
  mlx::core::array::~array((mlx::core::array *)&a23);
  MEMORY[0x25A2B1780](v23, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_greater()
{
}

void sub_256F1F988(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_greater_equal()
{
}

void sub_256F1FA60(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_identity()
{
}

void sub_256F1FB40(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_inner()
{
}

void sub_256F1FC18(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_isclose()
{
}

void sub_256F1FD18(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_isinf()
{
}

void sub_256F1FDE8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_isnan()
{
}

void sub_256F1FEB8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_isneginf()
{
}

void sub_256F1FF88(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_isposinf()
{
}

void sub_256F20058(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_left_shift()
{
}

void sub_256F20130(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_less()
{
}

void sub_256F20208(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_less_equal()
{
}

void sub_256F202E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_linspace()
{
}

void sub_256F203D8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_log()
{
}

void sub_256F204A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_log10()
{
}

void sub_256F20578(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_log1p()
{
}

void sub_256F20648(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_log2()
{
}

void sub_256F20718(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logaddexp()
{
}

void sub_256F207F0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logical_and()
{
}

void sub_256F208C8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logical_not()
{
}

void sub_256F20998(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logical_or()
{
}

void sub_256F20A70(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logsumexp()
{
}

void sub_256F20B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_logsumexp_all()
{
}

void sub_256F20C78(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_matmul()
{
}

void sub_256F20D50(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_max()
{
}

void sub_256F20E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_max_all()
{
}

void sub_256F20F58(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_maximum()
{
}

void sub_256F21030(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_mean()
{
}

void sub_256F21148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_mean_all()
{
}

void sub_256F21238(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_meshgrid()
{
}

void sub_256F21360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x25A2B1780](v14, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_min()
{
}

void sub_256F21490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_min_all()
{
}

void sub_256F21580(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_minimum()
{
}

void sub_256F21658(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_moveaxis()
{
}

void sub_256F21740(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_multiply()
{
}

void sub_256F21818(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_negative()
{
}

void sub_256F218E8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_not_equal()
{
}

void sub_256F219C0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_number_of_elements()
{
}

void sub_256F21AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_ones()
{
}

void sub_256F21C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_ones_like()
{
}

void sub_256F21D08(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_outer()
{
}

void sub_256F21DE0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_pad()
{
}

void sub_256F21F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  MEMORY[0x25A2B1780](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_partition()
{
}

void sub_256F220A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_partition_all()
{
}

void sub_256F22180(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_power()
{
}

void sub_256F22258(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_prod()
{
}

void sub_256F22370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_prod_all()
{
}

void sub_256F22460(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_radians()
{
}

void sub_256F22530(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_reciprocal()
{
}

void sub_256F22600(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_remainder()
{
}

void sub_256F226D8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_repeat()
{
}

void sub_256F227C0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_repeat_all()
{
}

void sub_256F22898(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_reshape()
{
}

void sub_256F229A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_right_shift()
{
}

void sub_256F22A98(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_round()
{
}

void sub_256F22B70(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_rsqrt()
{
}

void sub_256F22C40(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_scatter()
{
}

void sub_256F22D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_scatter_add()
{
}

void sub_256F22EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_scatter_max()
{
}

void sub_256F22FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_scatter_min()
{
}

void sub_256F23128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_scatter_prod()
{
}

void sub_256F23268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sigmoid()
{
}

void sub_256F23350(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sign()
{
}

void sub_256F23420(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sin()
{
}

void sub_256F234F0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sinh()
{
}

void sub_256F235C0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_slice()
{
}

void sub_256F23750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  MEMORY[0x25A2B1780](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_slice_update()
{
}

void sub_256F23930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  MEMORY[0x25A2B1780](v17, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sort()
{
}

void sub_256F23A50(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sort_all()
{
}

void sub_256F23B20(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_split_equal_parts()
{
}

void sub_256F23C0C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_split()
{
}

void sub_256F23D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void mlx_sqrt()
{
}

void sub_256F23E10(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_square()
{
}

void sub_256F23EE0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_squeeze()
{
}

void sub_256F23FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_squeeze_all()
{
}

void sub_256F240D8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_stack()
{
}

void sub_256F241B0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_stack_all()
{
}

void sub_256F24280(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_std()
{
}

void sub_256F243A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_std_all()
{
}

void sub_256F244A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_stop_gradient()
{
}

void sub_256F24578(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_subtract()
{
}

void sub_256F24650(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sum()
{
}

void sub_256F24768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_sum_all()
{
}

void sub_256F24858(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_swapaxes()
{
}

void sub_256F24940(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_take()
{
}

void sub_256F24A28(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_take_all()
{
}

void sub_256F24B00(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_take_along_axis()
{
}

void sub_256F24BE8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_tan()
{
}

void sub_256F24CB8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_tanh()
{
}

void sub_256F24D88(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_tensordot()
{
}

void sub_256F24EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  MEMORY[0x25A2B1780](v13, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_tensordot_along_axis()
{
}

void sub_256F24FF8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_tile()
{
}

void sub_256F25108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_topk()
{
}

void sub_256F25208(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_topk_all()
{
}

void sub_256F252E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_trace()
{
}

void sub_256F253E8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_transpose()
{
}

void sub_256F254F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_transpose_all()
{
}

void sub_256F255E0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_var()
{
}

void sub_256F25708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_var_all()
{
}

void sub_256F25808(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_where()
{
}

void sub_256F258F0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_zeros()
{
}

void sub_256F25A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v11, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void mlx_zeros_like()
{
}

void sub_256F25AF0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2B1780](v1, 0x10A1C407049A3A3);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_256F25B74(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx_closure_::tostring(mlx_closure_ *this)
{
}

void sub_256F25C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v15, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

void mlx_closure_new()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_256F25D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x25A2B1780](v2, 0x10A1C40E41A338ALL);
  _Unwind_Resume(a1);
}

void mlx_closure_new_unary()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_256F25E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x25A2B1780](v2, 0x10A1C40E41A338ALL);
  _Unwind_Resume(a1);
}

void mlx_closure_new_with_payload(uint64_t a1, uint64_t a2)
{
  v2[6] = *MEMORY[0x263EF8340];
  std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(v2, a2);
}

void sub_256F25F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x25A2B1780](v5, 0x10A1C40E41A338ALL);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void mlx_closure_apply(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 48))(&v2);
    operator new();
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_256F260C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  MEMORY[0x25A2B1780](v12, 0x10A1C405897D53FLL);
  a12 = (void **)&a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void mlx_closure_value_and_grad_apply(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v1 + 48))(v2);
    operator new();
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_256F261A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x25A2B1780](v2, 0x10A1C405897D53FLL);
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::~pair((void **)va);
  _Unwind_Resume(a1);
}

void mlx_closure_value_and_grad_::tostring(mlx_closure_value_and_grad_ *this)
{
}

void sub_256F26280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x25A2B1780](v15, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

void mlx_closure_::~mlx_closure_(mlx_closure_ *this)
{
  *(void *)this = &unk_270634B30;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270634B30;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 2);
  JUMPOUT(0x25A2B1780);
}

void mlx_closure_value_and_grad_::~mlx_closure_value_and_grad_(mlx_closure_value_and_grad_ *this)
{
  *(void *)this = &unk_270634B70;
  std::__function::__value_func<std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270634B70;
  std::__function::__value_func<std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 2);
  JUMPOUT(0x25A2B1780);
}

void std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
}

void *std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270634BB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270634BB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()()
{
}

void sub_256F26560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<mlx_closure_new::$_0,std::allocator<mlx_closure_new::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
}

void *std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270634C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270634C30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 == 16) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "closure: expected unary input");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256F2680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<mlx_closure_new_unary::$_0,std::allocator<mlx_closure_new_unary::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_256F26918(void *a1)
{
  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_256F2692C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270634D30;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(void *a1)
{
  *a1 = &unk_270634D30;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x25A2B1780);
}

char *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = &unk_270634D30;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 4) = *(void *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_270634D30;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 32) = *(void *)(result + 32);
  return result;
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()()
{
}

void sub_256F26C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<mlx_closure_new_with_payload::$_0,std::allocator<mlx_closure_new_with_payload::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t mlx::core::random::threefry2x32_hash(_DWORD *a1, uint64_t a2)
{
  int v2 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = a1[1];
  int v4 = *a1 ^ v3 ^ 0x1BD11BDA;
  v9[0] = *a1;
  v9[1] = v3;
  void v9[2] = v4;
  LODWORD(v5) = v9[0] + a2;
  LODWORD(v6) = v3 + HIDWORD(a2);
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      LODWORD(v5) = v6 + v5;
      LODWORD(v6) = __ROR4__(v6, -mlx::core::random::threefry2x32_hash(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int>)::rotations[16 * (v2 & 1) + i]) ^ v5;
    }
    uint64_t v5 = (v9[(v2 + 1) % 3u] + v5);
    uint64_t v6 = (v2 + 1 + v6 + v9[(v2 + 2) % 3u]);
    ++v2;
  }
  while (v2 != 5);
  return v5 | (v6 << 32);
}

void mlx::core::Event::Event(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  operator new();
}

void sub_256F26ED0(void *a1)
{
  __cxa_begin_catch(a1);
  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  MEMORY[0x25A2B1780](v1, 0x1000C40A9FC9F90);
  __cxa_rethrow();
}

void sub_256F26F04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  int v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Event::wait(mlx::core::Event *this)
{
  uint64_t v2 = *((void *)this + 2);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v2 + 8));
  unint64_t v3 = *((void *)this + 4);
  if (*(void *)v2 >= v3) {
    goto LABEL_4;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(v2 + 72), &v4);
  while (*(void *)v2 < v3);
  if (v4.__owns_) {
LABEL_4:
  }
    std::mutex::unlock(v4.__m_);
}

void mlx::core::Event::signal(mlx::core::Event *this)
{
  uint64_t v2 = *((void *)this + 2);
  std::mutex::lock((std::mutex *)(v2 + 8));
  *(void *)uint64_t v2 = *((void *)this + 4);
  std::mutex::unlock((std::mutex *)(v2 + 8));
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 72));
}

void std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2B1780);
}

uint64_t std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 72));
    std::mutex::~mutex((std::mutex *)(v1 + 8));
    JUMPOUT(0x25A2B1780);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<mlx::core::EventCounter *,mlx::core::Event::Event(mlx::core::Stream const&)::$_0,std::allocator<mlx::core::EventCounter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void mlx::core::QRF::eval(uint64_t a1, const void ****a2, int ****a3)
{
  unint64_t v3 = *a2;
  if (*((_DWORD *)**a2 + 14) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[QRF::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::unique_lock<std::mutex> v4 = *a3;
  uint64_t v5 = *a3 + 2;
  mlx::core::qrf_impl<float>(v3, v4, v5);
}

void sub_256F27174(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::qrf_impl<float>(const void ***a1, int ***a2, int ***a3)
{
  v65[4] = *MEMORY[0x263EF8340];
  std::unique_lock<std::mutex> v4 = *a1;
  if ((unint64_t)((unsigned char *)v4[1] - (unsigned char *)*v4) <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = v4[1];
  int v8 = *(v7 - 2);
  int v62 = v8;
  int v9 = *(v7 - 1);
  if (v8 <= v9) {
    int v10 = v9;
  }
  else {
    int v10 = v8;
  }
  int v60 = v10;
  int v61 = v9;
  unint64_t v11 = (unint64_t)v4[6];
  unint64_t v12 = v9 * v8;
  unint64_t v13 = v11 / v12;
  if (v9 >= v8) {
    int v14 = v8;
  }
  else {
    int v14 = v9;
  }
  int v59 = v14;
  uint64_t v58 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * v13 * v14));
  uint64_t v15 = *a1;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v15, (uint64_t)v15[1], ((unsigned char *)v15[1] - (unsigned char *)*v15) >> 2);
  long long v55 = 0uLL;
  uint64_t v54 = 0;
  long long v53 = 0uLL;
  mlx::core::array::array(v57, (long long *)__p, 0x400000006, &v55, &v53);
  uint64_t v50 = &v53;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v42 = v12;
  unint64_t v43 = v11;
  char v16 = *(unsigned char *)(v57[0] + 168);
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v50, *(const void **)(v57[0] + 24), *(void *)(v57[0] + 32), (uint64_t)(*(void *)(v57[0] + 32) - *(void *)(v57[0] + 24)) >> 3);
  uint64_t v17 = v57[0];
  uint64_t v18 = (char *)v50 + 2 * (*(void *)(v57[0] + 8) - *(void *)v57[0]);
  uint64_t v19 = v62;
  *((void *)v18 - 2) = 1;
  *((void *)v18 - 1) = v19;
  float v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(v17 + 60)
                                                                    * *(void *)(v17 + 48)));
  uint64_t v21 = *(void *)(v57[0] + 48);
  uint64_t v22 = *(void *)(v57[0] + 56);
  uint64_t v49 = 0;
  __n128 v48 = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v48, v50, (uint64_t)v51, (v51 - (unsigned char *)v50) >> 3);
  v65[0] = &unk_27062AEC8;
  v65[1] = mlx::core::allocator::free;
  v65[3] = v65;
  mlx::core::array::set_data(v57, (uint64_t)v20, BYTE4(v22) * v21, &v48, v16 & 0xF9 | (4 * (v13 == 1)), (uint64_t)v65);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v65);
  if (v48.n128_u64[0])
  {
    v48.n128_u64[1] = v48.n128_u64[0];
    operator delete((void *)v48.n128_u64[0]);
  }
  mlx::core::copy_inplace(a1, v57, 3);
  float v47 = 0.0;
  int v45 = 0;
  sgeqrf_NEWLAPACK();
  int v46 = (int)0.0;
  uint64_t v23 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)0.0));
  unint64_t v25 = v42;
  unint64_t v24 = v43;
  long long v44 = v23;
  if (v43 >= v42)
  {
    int v26 = 0;
    uint64_t v27 = 0;
    if (v13 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v13;
    }
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v58);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v44);
      sgeqrf_NEWLAPACK();
      ++v27;
      v26 += v14;
    }
    while (v28 != v27);
    unint64_t v24 = v43;
    uint64_t v23 = v44;
    unint64_t v25 = v42;
  }
  mlx::core::allocator::free(v23);
  uint64_t v29 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (void)(*a3)[6]));
  v64[0] = &unk_27062AEC8;
  v64[1] = mlx::core::allocator::free;
  v64[3] = v64;
  mlx::core::array::set_data(a3, (uint64_t)v29, (uint64_t)v64);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v64);
  mlx::core::copy_inplace(v57, a3, 2);
  if (v24 >= v25)
  {
    double v30 = *a3;
    if ((unint64_t)((char *)(*a3)[1] - (char *)**a3) < 5) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v31 = 0;
    int v32 = *((*a3)[1] - 2);
    if (v13 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = v13;
    }
    do
    {
      if (v32 >= 1)
      {
        uint64_t v34 = 0;
        int v35 = v61;
        int v36 = v62 * v61 * v31;
        do
        {
          if (v34)
          {
            uint64_t v37 = 0;
            long long v38 = v30[19];
            do
              v38[v36 + (int)v37++] = 0;
            while (v34 != v37);
          }
          ++v34;
          v36 += v35;
        }
        while (v34 != (v32 & ~(v32 >> 31)));
      }
      ++v31;
    }
    while (v31 != v33);
  }
  int v46 = -1;
  sorgqr_NEWLAPACK();
  int v46 = (int)v47;
  long long v44 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)v47));
  if (v24 >= v25)
  {
    uint64_t v39 = 0;
    if (v13 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v13;
    }
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v58);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v44);
      sorgqr_NEWLAPACK();
      ++v39;
    }
    while (v40 != v39);
  }
  int v41 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (void)(*a2)[6]));
  v63[0] = &unk_27062AEC8;
  v63[1] = mlx::core::allocator::free;
  void v63[3] = v63;
  mlx::core::array::set_data(a2, (uint64_t)v41, (uint64_t)v63);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v63);
  mlx::core::copy_inplace(v57, a2, 2);
  mlx::core::allocator::free(v44);
  mlx::core::allocator::free(v58);
  if (v50)
  {
    unint64_t v51 = v50;
    operator delete(v50);
  }
  mlx::core::array::~array((mlx::core::array *)v57);
}

void sub_256F27728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a30);
  _Unwind_Resume(a1);
}

void mlx::core::Primitive::jvp(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::jvp] Not implemented for ", 37);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
}

void sub_256F278D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a17 = MEMORY[0x263F8C318] + 16;
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x25A2B1740](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::vjp(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::vip] Not implemented for ", 37);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
}

void sub_256F27ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a17 = MEMORY[0x263F8C318] + 16;
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x25A2B1740](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::vmap(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::vmap] Not implemented for ", 38);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)".", 1);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
}

void sub_256F27CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a17 = MEMORY[0x263F8C318] + 16;
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x25A2B1740](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::Primitive::output_shapes(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"[Primitive::output_shapes] ", 27);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)" cannot infer output shapes.", 28);
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5, &v3);
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
}

void sub_256F27EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a17 = MEMORY[0x263F8C318] + 16;
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x25A2B1740](&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t mlx::core::Abs::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Abs::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Abs::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Abs::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::sign(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  int v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *int v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F2814C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Abs::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Abs::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Abs::vmap();
  }
  mlx::core::abs(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  int v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F28290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Add::jvp(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 < 0x11uLL)
  {
    uint64_t v6 = v5[1];
    uint64_t v9 = *v5;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::add(v5, v5 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v9);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = operator new(0x10uLL);
  *a3 = v7;
  a3[1] = v7;
  a3[2] = v7 + 2;
  uint64_t v8 = v10;
  void *v7 = v9;
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)&v9);
}

void sub_256F283A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

void mlx::core::Add::vjp(char **a1@<X2>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 == 4)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a3, v4, v5, (v5 - v4) >> 4);
  }
  else
  {
    uint64_t v6 = *(void *)*a1;
    uint64_t v7 = *((void *)*a1 + 1);
    v14[0] = v6;
    v14[1] = v7;
    if (v7)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = *((void *)*a1 + 1);
      uint64_t v15 = *(void *)*a1;
      uint64_t v16 = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = v6;
      uint64_t v16 = 0;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v9 = (char *)operator new(0x20uLL);
    uint64_t v10 = 0;
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 16) = v9 + 32;
    do
    {
      uint64_t v11 = &v9[v10 * 8];
      uint64_t v12 = v14[v10 + 1];
      *(void *)uint64_t v11 = v14[v10];
      *((void *)v11 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      v10 += 2;
    }
    while (v10 != 4);
    *(void *)(a3 + 8) = v9 + 32;
    for (uint64_t i = 2; i != -2; i -= 2)
      mlx::core::array::~array((mlx::core::array *)&v14[i]);
  }
}

void sub_256F28544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a12 + i));
  _Unwind_Resume(a1);
}

void mlx::core::Add::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::add(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  int v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  unint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F286B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::anonymous namespace'::vmap_binary_op(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void **)a1;
  if (*(void *)(a1 + 8) - *(void *)a1 != 32) {
  uint64_t v6 = *a2;
  }
  if ((char *)a2[1] - (char *)*a2 != 8) {
  if (*v6 == -1 && v6[1] == -1)
  }
  {
    uint64_t v36 = v5[1];
    *(void *)a4 = *v5;
    *(void *)(a4 + 8) = v36;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = v5[3];
    *(void *)(a4 + 16) = v5[2];
    *(void *)(a4 + 24) = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)(a4 + 32) = -1;
  }
  else
  {
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    *(void *)&long long v50 = *v5;
    *((void *)&v50 + 1) = v9;
    if (v9)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void **)a1;
    }
    uint64_t v11 = (void *)v5[2];
    uint64_t v10 = v5[3];
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2;
    int v14 = **a2;
    int v13 = (*a2)[1];
    if (v14 == -1) {
      unint64_t v15 = v12 + 1;
    }
    else {
      unint64_t v15 = (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2;
    }
    uint64_t v16 = (uint64_t)(v11[1] - *v11) >> 2;
    if (v13 == -1) {
      unint64_t v17 = v16 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v15 <= v17) {
      int v18 = v17;
    }
    else {
      int v18 = v15;
    }
    int v46 = *(mlx::core **)a3;
    int v47 = *(_DWORD *)(a3 + 8);
    int v48 = v18;
    std::vector<int>::value_type v19 = v13 + v18 - v16;
    std::vector<int>::value_type __x = v19;
    v44[0] = (const void **)v8;
    v44[1] = *((const void ***)&v50 + 1);
    if (*((void *)&v50 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v20 = *(_OWORD *)&v42.__begin_;
    v42.__begin_ = 0;
    v42.__end_ = 0;
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v50 + 1);
    long long v50 = v20;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    mlx::core::array::~array((mlx::core::array *)&v42);
    mlx::core::array::~array((mlx::core::array *)v44);
    long long v43 = v49;
    if (*((void *)&v49 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v22 = v14 + v18 - v12;
    long long v23 = *(_OWORD *)&v42.__begin_;
    v42.__begin_ = 0;
    v42.__end_ = 0;
    unint64_t v24 = (std::__shared_weak_count *)*((void *)&v49 + 1);
    long long v49 = v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    mlx::core::array::~array((mlx::core::array *)&v42);
    mlx::core::array::~array((mlx::core::array *)&v43);
    if (v19 != v22)
    {
      std::vector<int>::vector(&v42, (uint64_t)(*(void *)(v49 + 8) - *(void *)v49) >> 2);
      std::vector<int>::pointer begin = v42.__begin_;
      std::vector<int>::pointer end = v42.__end_;
      if (v42.__begin_ != v42.__end_)
      {
        int v27 = 0;
        std::vector<int>::pointer v28 = v42.__begin_;
        do
          *v28++ = v27++;
        while (v28 != end);
      }
      uint64_t v29 = &begin[v19];
      double v30 = (char *)((char *)end - (char *)(v29 + 1));
      if (end != v29 + 1)
      {
        memmove(v29, v29 + 1, (char *)end - (char *)(v29 + 1));
        std::vector<int>::pointer begin = v42.__begin_;
      }
      v42.__end_ = (std::vector<int>::pointer)&v30[(void)v29];
      v31.__i_ = &begin[v22];
      std::vector<int>::insert(&v42, v31, &__x);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      std::vector<int> __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v42.__begin_, (uint64_t)v42.__end_, v42.__end_ - v42.__begin_);
      mlx::core::transpose((uint64_t **)&v49, (unsigned int **)&__p, *(mlx::core **)a3, *(unsigned int *)(a3 + 8) | 0x100000000, &v41);
      long long v32 = v41;
      long long v41 = 0uLL;
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v49 + 1);
      long long v49 = v32;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      mlx::core::array::~array((mlx::core::array *)&v41);
      if (__p)
      {
        uint64_t v39 = __p;
        operator delete(__p);
      }
      if (v42.__begin_)
      {
        v42.__end_ = v42.__begin_;
        operator delete(v42.__begin_);
      }
    }
    uint64_t v34 = *((void *)&v50 + 1);
    *(void *)a4 = v50;
    *(void *)(a4 + 8) = v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = *((void *)&v49 + 1);
    *(void *)(a4 + 16) = v49;
    *(void *)(a4 + 24) = v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)(a4 + 32) = v22;
    mlx::core::array::~array((mlx::core::array *)&v49);
    mlx::core::array::~array((mlx::core::array *)&v50);
  }
}

void sub_256F28A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  mlx::core::array::~array((mlx::core::array *)(v20 - 80));
  mlx::core::array::~array((mlx::core::array *)(v20 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::AddMM::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v9 = *(void **)a3;
  std::vector<int>::vector(&v40, (uint64_t)(*(void *)(**(void **)a3 + 8) - ***(void ***)a3) >> 2);
  std::vector<int>::pointer begin = v40.__begin_;
  std::vector<int>::pointer end = v40.__end_;
  if (v40.__begin_ != v40.__end_)
  {
    int v12 = 0;
    std::vector<int>::pointer v13 = v40.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  int v14 = *(_DWORD **)a4;
  unint64_t v15 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v15)
  {
    while (*v14 != 1)
    {
      if (*v14)
      {
        uint64_t v27 = v9[1];
        *(void *)&long long v39 = *v9;
        *((void *)&v39 + 1) = v27;
        if (v27) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
        }
        float v28 = *(float *)(a1 + 24);
        if (v28 != 1.0)
        {
          mlx::core::array::array<float>(v38, *(void *)(*v9 + 56), v28);
          mlx::core::multiply(v38, &v39, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v37);
          long long v29 = v37;
          long long v37 = 0uLL;
          double v30 = (std::__shared_weak_count *)*((void *)&v39 + 1);
          long long v39 = v29;
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          mlx::core::array::~array((mlx::core::array *)&v37);
          mlx::core::array::~array((mlx::core::array *)v38);
        }
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v39);
        goto LABEL_31;
      }
      uint64_t v16 = v9[1];
      *(void *)&long long v39 = *v9;
      *((void *)&v39 + 1) = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      float v17 = *(float *)(a1 + 20);
      if (v17 != 1.0)
      {
        mlx::core::array::array<float>(v38, *(void *)(*v9 + 56), v17);
        mlx::core::multiply(v38, &v39, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v37);
        long long v18 = v37;
        long long v37 = 0uLL;
        std::vector<int>::value_type v19 = (std::__shared_weak_count *)*((void *)&v39 + 1);
        long long v39 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        mlx::core::array::~array((mlx::core::array *)&v37);
        mlx::core::array::~array((mlx::core::array *)v38);
      }
      uint64_t v20 = *a2;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, v40.__begin_, (uint64_t)v40.__end_, v40.__end_ - v40.__begin_);
      mlx::core::transpose(v20 + 2, &v34, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v37);
      mlx::core::matmul(&v39, &v37, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v38);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v38);
      mlx::core::array::~array((mlx::core::array *)v38);
      mlx::core::array::~array((mlx::core::array *)&v37);
      uint64_t v21 = v34;
      if (v34)
      {
        uint64_t v35 = v34;
LABEL_23:
        operator delete(v21);
      }
LABEL_31:
      mlx::core::array::~array((mlx::core::array *)&v39);
      if (++v14 == v15)
      {
        std::vector<int>::pointer begin = v40.__begin_;
        goto LABEL_33;
      }
    }
    uint64_t v22 = v9[1];
    *(void *)&long long v39 = *v9;
    *((void *)&v39 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    float v23 = *(float *)(a1 + 20);
    if (v23 != 1.0)
    {
      mlx::core::array::array<float>(v38, *(void *)(*v9 + 56), v23);
      mlx::core::multiply(v38, &v39, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v37);
      long long v24 = v37;
      long long v37 = 0uLL;
      unint64_t v25 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      long long v39 = v24;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      mlx::core::array::~array((mlx::core::array *)&v37);
      mlx::core::array::~array((mlx::core::array *)v38);
    }
    int v26 = *a2;
    long long v32 = 0;
    uint64_t v33 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v40.__begin_, (uint64_t)v40.__end_, v40.__end_ - v40.__begin_);
    mlx::core::transpose(v26, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v37);
    mlx::core::matmul(&v37, &v39, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v38);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v38);
    mlx::core::array::~array((mlx::core::array *)v38);
    mlx::core::array::~array((mlx::core::array *)&v37);
    uint64_t v21 = (unsigned int *)__p;
    if (!__p) {
      goto LABEL_31;
    }
    long long v32 = __p;
    goto LABEL_23;
  }
LABEL_33:
  if (begin)
  {
    v40.__end_ = begin;
    operator delete(begin);
  }
}

void sub_256F28E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
}

BOOL mlx::core::AddMM::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 20) == *(float *)(a2 + 20) && *(float *)(a1 + 24) == *(float *)(a2 + 24);
}

void mlx::core::AddMM::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v37[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  int v9 = **a3;
  if (v9 < 1)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v35 = *(uint64_t **)v8;
    uint64_t v36 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v8, v9, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v35);
  }
  uint64_t v11 = *a2;
  int v12 = (*a3)[1];
  if (v12 < 1)
  {
    int v14 = *(const void ***)(v11 + 16);
    uint64_t v13 = *(void *)(v11 + 24);
    uint64_t v33 = v14;
    uint64_t v34 = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v11 + 16), v12, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v33);
  }
  uint64_t v15 = *a2;
  int v16 = (*a3)[2];
  if (v16 < 1)
  {
    float v17 = *(const void ***)(v15 + 32);
    uint64_t v18 = *(void *)(v15 + 40);
    std::vector<int>::const_iterator v31 = v17;
    uint64_t v32 = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v15 + 32), v16, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v31);
    float v17 = v31;
  }
  v27[0] = v17;
  v27[1] = (const void **)v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  v26[0] = (const void **)v35;
  v26[1] = (const void **)v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  v25[0] = v33;
  v25[1] = (const void **)v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::addmm(v27, v26, v25, (int *)(a1 + 20), (int *)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (uint64_t)v37);
  float v28 = 0;
  long long v29 = 0;
  double v30 = 0;
  std::vector<int> __p = &v28;
  LOBYTE(v23) = 0;
  std::vector<int>::value_type v19 = operator new(0x10uLL);
  float v28 = v19;
  long long v29 = v19;
  double v30 = v19 + 2;
  uint64_t v20 = v37[1];
  *std::vector<int>::value_type v19 = v37[0];
  v19[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v29 = v19 + 2;
  uint64_t v21 = operator new(4uLL);
  std::vector<int> __p = v21;
  *uint64_t v21 = 0;
  float v23 = v21 + 1;
  long long v24 = v21 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v28, (uint64_t)&__p);
  if (__p)
  {
    float v23 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v28;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v37);
  mlx::core::array::~array((mlx::core::array *)v25);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)&v31);
  mlx::core::array::~array((mlx::core::array *)&v33);
  mlx::core::array::~array((mlx::core::array *)&v35);
}

void sub_256F29180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  mlx::core::array::~array((mlx::core::array *)(v22 - 88));
  mlx::core::array::~array((mlx::core::array *)(v22 - 72));
  _Unwind_Resume(a1);
}

BOOL mlx::core::Arange::is_equivalent(double *a1, double *a2)
{
  return a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t mlx::core::ArcCos::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcCos::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v16[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcCos::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcCos::jvp();
  }
  mlx::core::array::array<double>(v13, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
  mlx::core::subtract(v13, &v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::rsqrt(v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
  mlx::core::negative(&v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::multiply(*a3, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v14 = a5;
  char v15 = 0;
  int v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  uint64_t v10 = v16[1];
  *int v9 = v16[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F29410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCos::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcCos::vmap();
  }
  mlx::core::arccos(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcCosh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcCosh::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcCosh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcCosh::jvp();
  }
  mlx::core::array::array<double>(v14, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
  mlx::core::subtract(&v15, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v15);
  uint64_t v9 = *a3;
  mlx::core::rsqrt(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v9, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  char v15 = a5;
  char v16 = 0;
  uint64_t v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  uint64_t v11 = v17[1];
  *uint64_t v10 = v17[0];
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F29760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCosh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcCosh::vmap();
  }
  mlx::core::arccosh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F298D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcSin::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcSin::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcSin::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcSin::jvp();
  }
  mlx::core::array::array<double>(v14, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
  mlx::core::subtract(v14, &v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v15);
  uint64_t v9 = *a3;
  mlx::core::rsqrt(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v9, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  char v15 = a5;
  char v16 = 0;
  uint64_t v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  uint64_t v11 = v17[1];
  *uint64_t v10 = v17[0];
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F29AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSin::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcSin::vmap();
  }
  mlx::core::arcsin(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F29C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcSinh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcSinh::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcSinh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcSinh::jvp();
  }
  mlx::core::array::array<double>(v14, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
  mlx::core::add(&v15, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v15);
  uint64_t v9 = *a3;
  mlx::core::rsqrt(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v9, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  char v15 = a5;
  char v16 = 0;
  uint64_t v10 = operator new(0x10uLL);
  *a5 = v10;
  a5[1] = v10;
  a5[2] = v10 + 2;
  uint64_t v11 = v17[1];
  *uint64_t v10 = v17[0];
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F29DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSinh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcSinh::vmap();
  }
  mlx::core::arcsinh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F29F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTan::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcTan::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v15[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcTan::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcTan::jvp();
  }
  mlx::core::array::array<double>(v12, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  mlx::core::add(v12, &v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::array::~array((mlx::core::array *)&v13);
  mlx::core::divide(*a3, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v13 = a5;
  char v14 = 0;
  uint64_t v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  uint64_t v10 = v15[1];
  *uint64_t v9 = v15[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_256F2A108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTan::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcTan::vmap();
  }
  mlx::core::arctan(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTan2::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcTan2::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::ArcTan2::jvp();
  }
  if (a4[1] - *a4 != 8) {
    mlx::core::ArcTan2::jvp();
  }
  mlx::core::square(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  mlx::core::square((void *)(*(void *)a2 + 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
  mlx::core::add(v18, &v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  mlx::core::array::~array((mlx::core::array *)&v16);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::divide(*a3, v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  mlx::core::negative(*a3 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::divide(v14, v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  char v16 = a5;
  char v17 = 0;
  uint64_t v9 = (char *)operator new(0x20uLL);
  uint64_t v10 = 0;
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 32;
  do
  {
    uint64_t v11 = &v9[v10 * 8];
    uint64_t v12 = v18[v10 + 1];
    *(void *)uint64_t v11 = v18[v10];
    *((void *)v11 + 1) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    v10 += 2;
  }
  while (v10 != 4);
  a5[1] = v9 + 32;
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v18[i]);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_256F2A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a14);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a16 + i));
  mlx::core::array::~array((mlx::core::array *)&a10);
  mlx::core::array::~array((mlx::core::array *)&a12);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::vmap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::ArcTan2::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 8) {
    mlx::core::ArcTan2::vmap();
  }
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::arctan2(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  char v14 = v7;
  char v15 = v7;
  char v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F2A69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::ArcTanh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::ArcTanh::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v15[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ArcTanh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ArcTanh::jvp();
  }
  mlx::core::array::array<double>(v12, *(void *)(**a2 + 56), 1.0);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
  mlx::core::subtract(v12, &v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::array::~array((mlx::core::array *)&v13);
  mlx::core::divide(*a3, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v13 = a5;
  char v14 = 0;
  int v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  uint64_t v10 = v15[1];
  *int v9 = v15[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_256F2A880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  int v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTanh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ArcTanh::vmap();
  }
  mlx::core::arctanh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  int v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  int v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(const void ****)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArgPartition::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 4) {
    mlx::core::ArgPartition::vmap();
  }
  int v8 = **(_DWORD **)a3;
  int v9 = *(_DWORD *)(a1 + 24);
  if (v8 >= 0 && v8 <= v9) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 24);
  }
  mlx::core::argpartition(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  char v17 = (void **)&v14;
  char v18 = 0;
  char v12 = operator new(0x10uLL);
  char v14 = v12;
  char v15 = v12;
  uint64_t v16 = v12 + 2;
  uint64_t v13 = v19[1];
  void *v12 = v19[0];
  v12[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, a3);
  char v17 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_256F2AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::ArgPartition::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL mlx::core::ArgReduce::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

void mlx::core::ArgReduce::vmap(uint64_t a1@<X0>, uint64_t ***a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = **a3;
  int v10 = *(_DWORD *)(a1 + 20);
  int v9 = *(_DWORD *)(a1 + 24);
  if (v8 < 0 || v9 < v8) {
    int v12 = *(_DWORD *)(a1 + 24);
  }
  else {
    int v12 = v9 + 1;
  }
  uint64_t v13 = *a2;
  memset(v15, 0, sizeof(v15));
  if (v10) {
    mlx::core::argmax(v13, v12, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v14);
  }
  else {
    mlx::core::argmin(v13, v12, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v14);
  }
  std::vector<mlx::core::array>::push_back[abi:ne180100](v15, (uint64_t)v14);
  mlx::core::array::~array((mlx::core::array *)v14);
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(a4, (void **)v15, (uint64_t)a3);
  v14[0] = (void **)v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v14);
}

void sub_256F2AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(std::string::size_type **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArgSort::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 4) {
    mlx::core::ArgSort::vmap();
  }
  int v8 = **(_DWORD **)a3;
  int v9 = *(_DWORD *)(a1 + 20);
  if (v8 >= 0 && v8 <= v9) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 20);
  }
  mlx::core::argsort(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  char v17 = (void **)&v14;
  char v18 = 0;
  int v12 = operator new(0x10uLL);
  char v14 = v12;
  char v15 = v12;
  uint64_t v16 = v12 + 2;
  uint64_t v13 = v19[1];
  void *v12 = v19[0];
  v12[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, a3);
  char v17 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_256F2ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgReduce::output_shapes(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = **a2;
  int v9 = 0;
  uint64_t v10 = 0;
  int v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  uint64_t v6 = v8;
  *((_DWORD *)v8 + *(int *)(a1 + 24)) = 1;
  std::vector<int> __p = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, (uint64_t)v9, (v9 - (unsigned char *)v6) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v11 = a3;
  char v12 = 0;
  uint64_t v7 = operator new(0x18uLL);
  *a3 = v7;
  a3[1] = v7;
  a3[2] = v7 + 3;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&v16, v7);
  if (__p)
  {
    char v14 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    int v9 = v8;
    operator delete(v8);
  }
}

void sub_256F2AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::ArgSort::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::AsType::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(**a3 + 56))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[astype] Type of cotangentsgent does not much primal output type.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v5 = (*a3)[1];
  v9[0] = **a3;
  v9[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v9, *(void *)(**(void **)a2 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  void v9[2] = a4;
  char v10 = 0;
  uint64_t v6 = operator new(0x10uLL);
  *a4 = v6;
  a4[1] = v6;
  a4[2] = v6 + 2;
  uint64_t v7 = v11[1];
  *uint64_t v6 = v11[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v6 + 2;
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256F2B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::jvp(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*a2)[1];
  v7[0] = **a2;
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v7, *(void *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7[2] = a3;
  char v8 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v9[1];
  void *v5 = v9[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F2B1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::AsType::vmap(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v15[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*a2)[1];
  v9[0] = **a2;
  v9[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::astype(v9, *(void *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  char v10 = 0;
  int v11 = 0;
  char v12 = 0;
  uint64_t v13 = (void **)&v10;
  char v14 = 0;
  uint64_t v7 = operator new(0x10uLL);
  char v10 = v7;
  int v11 = v7;
  char v12 = v7 + 2;
  uint64_t v8 = v15[1];
  void *v7 = v15[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v11 = v7 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, a3);
  uint64_t v13 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256F2B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
}

BOOL mlx::core::AsType::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::AsStrided::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, const void ****a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a4[1] - *a4 != 4) {
    mlx::core::AsStrided::vjp();
  }
  int v9 = *(_DWORD *)(**a2 + 48);
  char v10 = (**a3)[6];
  mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v47);
  int v11 = operator new(4uLL);
  long long v44 = v11;
  _DWORD *v11 = v9;
  int v45 = v11 + 1;
  int v46 = v11 + 1;
  mlx::core::reshape((const void ***)&v47, (uint64_t)&v44, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v48);
  long long v12 = v48;
  long long v48 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  long long v47 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  mlx::core::array::~array((mlx::core::array *)&v48);
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  mlx::core::arange(v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)&v43);
  long long v42 = v43;
  if (*((void *)&v43 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v39 = 0;
  std::vector<int> v40 = 0;
  uint64_t v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  mlx::core::as_strided((const void ***)&v42, (uint64_t)&v39, (long long *)__p, *(void *)(a1 + 72), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v48);
  long long v14 = v48;
  long long v48 = 0uLL;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  long long v43 = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  mlx::core::array::~array((mlx::core::array *)&v48);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39)
  {
    std::vector<int> v40 = v39;
    operator delete(v39);
  }
  mlx::core::array::~array((mlx::core::array *)&v42);
  uint64_t v16 = operator new(4uLL);
  uint64_t v35 = v16;
  *uint64_t v16 = v10;
  uint64_t v36 = v16 + 1;
  long long v37 = v16 + 1;
  mlx::core::reshape((const void ***)&v43, (uint64_t)&v35, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v48);
  long long v17 = v48;
  long long v48 = 0uLL;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  long long v43 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  mlx::core::array::~array((mlx::core::array *)&v48);
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  int v19 = *a3;
  uint64_t v20 = operator new(8uLL);
  std::vector<int>::const_iterator v31 = v20;
  *uint64_t v20 = v10 | 0x100000000;
  uint64_t v32 = v20 + 1;
  uint64_t v33 = v20 + 1;
  mlx::core::reshape(v19, (uint64_t)&v31, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v34);
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  mlx::core::scatter_add((mlx::core::array *)&v47, (const void ***)&v43, (mlx::core::array *)v34, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v48);
  long long v21 = v48;
  long long v48 = 0uLL;
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  long long v47 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  mlx::core::array::~array((mlx::core::array *)&v48);
  uint64_t v23 = **a2;
  long long v29 = 0;
  uint64_t v30 = 0;
  float v28 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, *(const void **)v23, *(void *)(v23 + 8), (uint64_t)(*(void *)(v23 + 8) - *(void *)v23) >> 2);
  mlx::core::reshape((const void ***)&v47, (uint64_t)&v28, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v48);
  long long v24 = v48;
  long long v48 = 0uLL;
  unint64_t v25 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  long long v47 = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  mlx::core::array::~array((mlx::core::array *)&v48);
  if (v28)
  {
    long long v29 = v28;
    operator delete(v28);
  }
  long long v26 = v47;
  long long v49 = v47;
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v48 = a5;
  BYTE8(v48) = 0;
  uint64_t v27 = operator new(0x10uLL);
  *a5 = v27;
  a5[1] = v27;
  a5[2] = v27 + 1;
  _OWORD *v27 = v26;
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v27 + 1;
  mlx::core::array::~array((mlx::core::array *)&v49);
  mlx::core::array::~array((mlx::core::array *)v34);
  mlx::core::array::~array((mlx::core::array *)&v43);
  mlx::core::array::~array((mlx::core::array *)&v47);
}

void sub_256F2B738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 112));
  mlx::core::array::~array((mlx::core::array *)(v29 - 88));
  mlx::core::array::~array((mlx::core::array *)&a16);
  mlx::core::array::~array((mlx::core::array *)&a29);
  mlx::core::array::~array((mlx::core::array *)(v29 - 128));
  _Unwind_Resume(a1);
}

void mlx::core::scatter_add(mlx::core::array *a1@<X0>, const void ***a2@<X1>, mlx::core::array *a3@<X2>, int a4@<W3>, mlx::core *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  long long v14 = *a2;
  uint64_t v13 = a2[1];
  v23[0] = *a2;
  v23[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  std::vector<int> __p = &v20;
  LOBYTE(v18) = 0;
  uint64_t v15 = (const void ***)operator new(0x10uLL);
  uint64_t v20 = v15;
  uint64_t v22 = (char *)(v15 + 2);
  *uint64_t v15 = v14;
  v15[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  }
  long long v21 = (char *)(v15 + 2);
  uint64_t v16 = operator new(4uLL);
  std::vector<int> __p = v16;
  *uint64_t v16 = a4;
  uint64_t v18 = v16 + 1;
  int v19 = v16 + 1;
  mlx::core::scatter_add(a1, &v20, a3, (int **)&__p, a5, a6, a7);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v23);
}

void sub_256F2B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::AsStrided::jvp(uint64_t a1@<X0>, void *a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X8>)
{
  void v15[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::AsStrided::jvp();
  }
  uint64_t v6 = (*a3)[1];
  v13[0] = **a3;
  v13[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  }
  char v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  mlx::core::as_strided(v13, (uint64_t)&v10, (long long *)__p, *(void *)(a1 + 72), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  void v13[2] = (const void **)a4;
  char v14 = 0;
  uint64_t v7 = operator new(0x10uLL);
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v7 + 2;
  uint64_t v8 = v15[1];
  void *v7 = v15[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a4 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v10)
  {
    int v11 = v10;
    operator delete(v10);
  }
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 56));
  mlx::core::array::~array((mlx::core::array *)(v16 - 40));
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

BOOL mlx::core::AsStrided::is_equivalent(void *a1, void *a2)
{
  uint64_t v5 = a1 + 3;
  uint64_t v4 = (const void *)a1[3];
  size_t v6 = v5[1] - (void)v4;
  uint64_t v8 = a2 + 3;
  uint64_t v7 = (const void *)a2[3];
  if (v6 == v8[1] - (void)v7
    && !memcmp(v4, v7, v6)
    && (int v9 = (const void *)a1[6], v10 = a1[7] - (void)v9, v11 = (const void *)a2[6], v10 == a2[7] - (void)v11)
    && !memcmp(v9, v11, v10))
  {
    return a1[9] == a2[9];
  }
  else
  {
    return 0;
  }
}

BOOL mlx::core::BitwiseBinary::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void *mlx::core::BitwiseBinary::print(void *result, void *a2)
{
  switch(*((_DWORD *)result + 5))
  {
    case 0:
      uint64_t v2 = "BitwiseAnd";
      goto LABEL_9;
    case 1:
      uint64_t v3 = "BitwiseOr";
      goto LABEL_6;
    case 2:
      uint64_t v2 = "BitwiseXor";
      goto LABEL_9;
    case 3:
      uint64_t v3 = "LeftShift";
LABEL_6:
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, 9);
      break;
    case 4:
      uint64_t v2 = "RightShift";
LABEL_9:
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v2, 10);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::BitwiseBinary::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v35[2] = *MEMORY[0x263EF8340];
  memset(v25, 0, sizeof(v25));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v25, *(const void **)v29, *(void *)(v29 + 8), (uint64_t)(*(void *)(v29 + 8) - *(void *)v29) >> 2);
  uint64_t v6 = v29;
  uint64_t v7 = *(void *)(v29 + 56);
  uint64_t v8 = operator new(0x30uLL);
  v8[1] = 0;
  void v8[2] = 0;
  *uint64_t v8 = &unk_270634AE0;
  uint64_t v9 = *(void *)(a1 + 8);
  v8[3] = &unk_270632458;
  v8[4] = v9;
  v8[5] = *(void *)(a1 + 16);
  *(void *)&long long v24 = v8 + 3;
  *((void *)&v24 + 1) = v8;
  v34[0] = v6;
  v34[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  void v34[2] = v31;
  void v34[3] = v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  std::vector<int> __p = &v22;
  LOBYTE(v20) = 0;
  size_t v10 = (char *)operator new(0x20uLL);
  uint64_t v11 = 0;
  *(void *)&long long v22 = v10;
  *((void *)&v22 + 1) = v10;
  uint64_t v23 = v10 + 32;
  do
  {
    uint64_t v12 = &v10[v11 * 8];
    uint64_t v13 = v34[v11 + 1];
    *(void *)uint64_t v12 = v34[v11];
    *((void *)v12 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    v11 += 2;
  }
  while (v11 != 4);
  *((void *)&v22 + 1) = v10 + 32;
  mlx::core::array::array(v35, (long long *)v25, v7, &v24, &v22);
  long long v26 = 0;
  uint64_t v27 = 0;
  float v28 = 0;
  std::vector<int> __p = &v26;
  LOBYTE(v20) = 0;
  char v14 = operator new(0x10uLL);
  long long v26 = v14;
  uint64_t v27 = v14;
  float v28 = v14 + 2;
  uint64_t v15 = v35[1];
  *char v14 = v35[0];
  v14[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = v14 + 2;
  int v16 = v33;
  long long v17 = operator new(4uLL);
  std::vector<int> __p = v17;
  *long long v17 = v16;
  uint64_t v20 = v17 + 1;
  long long v21 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v26, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v35);
  std::vector<int> __p = &v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v34[i]);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  mlx::core::array::~array((mlx::core::array *)&v31);
  mlx::core::array::~array((mlx::core::array *)&v29);
}

void sub_256F2BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v24 - 72));
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(v24 - 104 + i));
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  mlx::core::array::~array(v23);
  mlx::core::array::~array((mlx::core::array *)&a23);
  _Unwind_Resume(a1);
}

void sub_256F2BFE8()
{
}

void mlx::core::Broadcast::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, mlx::core::array **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  v41[2] = *(const void ***)MEMORY[0x263EF8340];
  if (a4[1] - *a4 != 4) {
    mlx::core::Broadcast::vjp();
  }
  uint64_t v7 = **a2;
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t **)*a3;
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v13 = *(const void **)v7;
  uint64_t v12 = *(void *)(v7 + 8);
  std::vector<int> __p = 0;
  long long v38 = 0;
  v39[0] = 0;
  if (*(void *)(*(void *)v8 + 8) != **(void **)v8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (int)(((unint64_t)(v10 - v11) >> 2) - ((unint64_t)(v12 - (void)v13) >> 2));
    while (v14 >= v15)
    {
      int v23 = *(_DWORD *)(*(void *)v7 + 4 * (v14 - v15));
      if (v23 != mlx::core::array::shape(v8, v14))
      {
        int v16 = v38;
        if ((unint64_t)v38 < v39[0])
        {
LABEL_16:
          *int v16 = v14;
          uint64_t v24 = v16 + 1;
LABEL_35:
          long long v38 = v24;
          goto LABEL_36;
        }
        long long v17 = __p;
        uint64_t v25 = ((char *)v38 - (unsigned char *)__p) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
LABEL_45:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v27 = v39[0] - (void)__p;
        if ((uint64_t)(v39[0] - (void)__p) >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v26;
        }
        if (v21)
        {
          long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v39, v21);
          long long v17 = __p;
          int v16 = v38;
        }
        else
        {
          long long v22 = 0;
        }
        float v28 = &v22[4 * v25];
        *(_DWORD *)float v28 = v14;
        uint64_t v24 = v28 + 4;
        while (v16 != v17)
        {
          int v30 = *--v16;
          *((_DWORD *)v28 - 1) = v30;
          v28 -= 4;
        }
LABEL_33:
        std::vector<int> __p = v28;
        long long v38 = v24;
        v39[0] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
        goto LABEL_35;
      }
LABEL_36:
      if ((uint64_t)(*(void *)(*(void *)v8 + 8) - **(void **)v8) >> 2 <= (unint64_t)++v14) {
        goto LABEL_37;
      }
    }
    int v16 = v38;
    if ((unint64_t)v38 < v39[0]) {
      goto LABEL_16;
    }
    long long v17 = __p;
    uint64_t v18 = ((char *)v38 - (unsigned char *)__p) >> 2;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      goto LABEL_45;
    }
    uint64_t v20 = v39[0] - (void)__p;
    if ((uint64_t)(v39[0] - (void)__p) >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v39, v21);
      long long v17 = __p;
      int v16 = v38;
    }
    else
    {
      long long v22 = 0;
    }
    float v28 = &v22[4 * v18];
    *(_DWORD *)float v28 = v14;
    uint64_t v24 = v28 + 4;
    while (v16 != v17)
    {
      int v29 = *--v16;
      *((_DWORD *)v28 - 1) = v29;
      v28 -= 4;
    }
    goto LABEL_33;
  }
LABEL_37:
  mlx::core::sum((uint64_t)v8, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v36);
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
  mlx::core::reshape(v36, (uint64_t)&v33, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v41);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v39[1] = a5;
  char v40 = 0;
  uint64_t v31 = operator new(0x10uLL);
  *a5 = v31;
  a5[1] = v31;
  a5[2] = v31 + 2;
  uint64_t v32 = v41[1];
  *uint64_t v31 = v41[0];
  v31[1] = v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
  }
  a5[1] = v31 + 2;
  mlx::core::array::~array((mlx::core::array *)v41);
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  mlx::core::array::~array((mlx::core::array *)v36);
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
}

void sub_256F2C304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a13);
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::jvp(uint64_t a1@<X0>, const void ****a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *(const void ***)MEMORY[0x263EF8340];
  if (a3[1] - *a3 != 4) {
    mlx::core::Broadcast::jvp();
  }
  mlx::core::broadcast_to(*a2, (const void **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F2C444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  void v26[2] = *(const void ***)MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Broadcast::vmap();
  }
  if ((char *)a3[1] - (char *)*a3 != 4) {
    mlx::core::Broadcast::vmap();
  }
  unsigned int v7 = **a3;
  uint64_t v8 = *v5;
  uint64_t v9 = v5[1];
  *(void *)&long long v25 = v8;
  *((void *)&v25 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  if ((v7 & 0x80000000) == 0)
  {
    memset(&v24, 0, sizeof(v24));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
    int v10 = ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2) - ((*(void *)(v25 + 8) - *(void *)v25) >> 2);
    std::vector<int>::size_type v11 = (v10 + 1);
    if (v10 + 1 < 0) {
      __assert_rtn("vmap", "primitives.cpp", 672, "diff >= 0");
    }
    v12.__i_ = v24.__begin_;
    LODWORD(v19[0]) = 1;
    std::vector<int>::insert(&v24, v12, v11, (std::vector<int>::const_reference)v19);
    v7 += v11;
    v13.__i_ = (std::__wrap_iter<const int *>::iterator_type)(*(void *)(a1 + 24) + 4 * v7);
    std::vector<int>::insert((std::vector<int> *)(a1 + 24), v13, &v24.__begin_[v7]);
    long long v22 = 0;
    uint64_t v23 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v24.__begin_, (uint64_t)v24.__end_, v24.__end_ - v24.__begin_);
    mlx::core::reshape((const void ***)&v25, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)v19);
    long long v14 = *(_OWORD *)v19;
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    long long v25 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    mlx::core::array::~array((mlx::core::array *)v19);
    if (__p)
    {
      long long v22 = __p;
      operator delete(__p);
    }
    if (v24.__begin_)
    {
      v24.__end_ = v24.__begin_;
      operator delete(v24.__begin_);
    }
  }
  mlx::core::broadcast_to((const void ***)&v25, (const void **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
  memset(&v24, 0, sizeof(v24));
  v19[0] = &v24;
  LOBYTE(v19[1]) = 0;
  int v16 = (int *)operator new(0x10uLL);
  v24.__begin_ = v16;
  v24.__end_ = v16;
  v24.__end_cap_.__value_ = v16 + 4;
  long long v17 = v26[1];
  *(const void ***)int v16 = v26[0];
  *((void *)v16 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
  }
  v24.__end_ = v16 + 4;
  uint64_t v18 = operator new(4uLL);
  v19[0] = v18;
  *uint64_t v18 = v7;
  v19[1] = v18 + 1;
  uint64_t v20 = v18 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v24, (uint64_t)v19);
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  v19[0] = &v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)&v25);
}

void sub_256F2C6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Broadcast::is_equivalent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(const void **)(a1 + 24);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 24;
  uint64_t v5 = *(const void **)(a2 + 24);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

uint64_t mlx::core::Ceil::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Ceil::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Ceil::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Ceil::jvp();
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F2C8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Ceil::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Ceil::vmap();
  }
  mlx::core::ceil(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  std::vector<int>::size_type v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  int v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  std::vector<int>::size_type v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2CA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Cholesky::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  int v6 = **a3;
  uint64_t v7 = *a2;
  if (v6 < 1)
  {
    std::string::size_type v8 = *(void *)(v7 + 8);
    v18[0] = *(void *)v7;
    v18[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  }
  mlx::core::linalg::cholesky(v18, *(unsigned char *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  uint64_t v15 = 0;
  int v16 = 0;
  long long v17 = 0;
  std::vector<int> __p = &v15;
  LOBYTE(v13) = 0;
  uint64_t v9 = operator new(0x10uLL);
  uint64_t v15 = v9;
  int v16 = v9;
  long long v17 = v9 + 2;
  uint64_t v10 = v19[1];
  *uint64_t v9 = v19[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v16 = v9 + 2;
  std::vector<int>::size_type v11 = operator new(4uLL);
  std::vector<int> __p = v11;
  _DWORD *v11 = v6 >> 31;
  std::vector<int>::const_iterator v13 = v11 + 1;
  long long v14 = v11 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v15, (uint64_t)&__p);
  if (__p)
  {
    std::vector<int>::const_iterator v13 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v18);
}

void sub_256F2CB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
}

void mlx::core::Concatenate::vjp(uint64_t a1@<X0>, mlx::core::array **a2@<X1>, const void ****a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  std::vector<int>::size_type v10 = ((unsigned char *)(**a3)[1] - (unsigned char *)***a3) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v42, v10, __x);
  std::vector<int>::size_type v11 = *v9;
  *(void *)std::vector<int>::value_type __x = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *v11, (uint64_t)v11[1], ((unsigned char *)v11[1] - (unsigned char *)*v11) >> 2);
  long long v38 = 0;
  char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, 1uLL);
  *(_DWORD *)char v12 = 0;
  long long v14 = v12 + 4;
  uint64_t v34 = a4;
  std::vector<int> __p = v12;
  long long v38 = &v12[4 * v13];
  long long v37 = v12 + 4;
  uint64_t v15 = *a2;
  int v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      int v17 = mlx::core::array::shape(v15, *(_DWORD *)(a1 + 20));
      int v18 = v17;
      unint64_t v19 = v37;
      if (v37 >= v38)
      {
        uint64_t v20 = (char *)__p;
        uint64_t v21 = (v37 - (unsigned char *)__p) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v38 - (unsigned char *)__p;
        if ((v38 - (unsigned char *)__p) >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, v24);
          uint64_t v20 = (char *)__p;
          unint64_t v19 = v37;
        }
        else
        {
          long long v25 = 0;
        }
        unint64_t v26 = &v25[4 * v21];
        *(_DWORD *)unint64_t v26 = v18;
        long long v14 = v26 + 4;
        while (v19 != v20)
        {
          int v27 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        std::vector<int> __p = v26;
        long long v37 = v14;
        long long v38 = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)long long v37 = v17;
        long long v14 = v19 + 4;
      }
      long long v37 = v14;
      uint64_t v15 = (mlx::core::array *)((char *)v15 + 16);
    }
    while (v15 != v16);
  }
  float v28 = (char *)__p + 4;
  if (__p != v14 && v28 != v14)
  {
    int v30 = *(_DWORD *)__p;
    do
    {
      v30 += *(_DWORD *)v28;
      *(_DWORD *)float v28 = v30;
      v28 += 4;
    }
    while (v28 != v14);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v31 = *v34;
  uint64_t v32 = v34[1];
  while (v31 != v32)
  {
    int v33 = (int *)((char *)__p + 4 * *v31);
    v42.__begin_[*(int *)(a1 + 20)] = *v33;
    *(_DWORD *)(*(void *)__x + 4 * *(int *)(a1 + 20)) = v33[1];
    mlx::core::slice(v9, (uint64_t)&v42, (uint64_t)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v35);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v35);
    mlx::core::array::~array((mlx::core::array *)v35);
    ++v31;
  }
  if (__p)
  {
    long long v37 = (char *)__p;
    operator delete(__p);
  }
  if (*(void *)__x)
  {
    char v40 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
}

void sub_256F2CEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Concatenate::jvp(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, mlx::core::array *a4@<X3>, uint64_t a5@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  std::vector<int>::vector(&v24, (uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 2);
  std::vector<int>::pointer begin = v24.__begin_;
  std::vector<int>::pointer end = v24.__end_;
  if (v24.__begin_ != v24.__end_)
  {
    int v12 = 0;
    std::vector<int>::pointer v13 = v24.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  unint64_t v14 = 126 - 2 * __clz(end - begin);
  v23[0] = a4;
  if (end == begin) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>((unint64_t)begin, end, (uint64_t **)v23, v15, 1);
  memset(v23, 0, sizeof(v23));
  uint64_t v16 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int v19 = 0;
    do
    {
      if (v19 < (unint64_t)((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 2)
        && (uint64_t v20 = v24.__begin_[v19], v18 == *(_DWORD *)(*(void *)a4 + 4 * v20)))
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v23, (void *)(*a3 + 16 * v20));
        ++v19;
      }
      else
      {
        mlx::core::zeros_like((uint64_t *)(v16 + v17), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v25);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v23, (uint64_t)&v25);
        mlx::core::array::~array((mlx::core::array *)&v25);
      }
      ++v18;
      uint64_t v16 = *a2;
      v17 += 16;
    }
    while (v18 < (a2[1] - *a2) >> 4);
  }
  mlx::core::concatenate(v23, *(_DWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v27);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  long long v25 = (mlx::core::array **)a5;
  char v26 = 0;
  uint64_t v21 = operator new(0x10uLL);
  *(void *)a5 = v21;
  *(void *)(a5 + 8) = v21;
  *(void *)(a5 + 16) = v21 + 2;
  uint64_t v22 = v27[1];
  *uint64_t v21 = v27[0];
  v21[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v21 + 2;
  mlx::core::array::~array((mlx::core::array *)v27);
  long long v25 = v23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
}

void sub_256F2D114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char a18)
{
  a16 = &a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Concatenate::vmap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void v25[2] = *MEMORY[0x263EF8340];
  memset(v24, 0, sizeof(v24));
  if (a3[1] == *a3)
  {
LABEL_5:
    BOOL v12 = 0;
    int v13 = *(_DWORD *)(a1 + 20);
    int v11 = -1;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 16;
    while (1)
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v24, (void *)(*a2 + v9 - 16));
      uint64_t v10 = *a3;
      int v11 = *(_DWORD *)(*a3 + 4 * v8++);
      if ((v11 & 0x80000000) == 0) {
        break;
      }
      v9 += 16;
      if (v8 >= (a3[1] - v10) >> 2) {
        goto LABEL_5;
      }
    }
    if ((a3[1] - v10) >> 2 > (unint64_t)v8)
    {
      do
      {
        int v14 = *(_DWORD *)(v10 + 4 * v8);
        if (v11 == v14 || v14 < 0)
        {
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v24, (void *)(*a2 + v9));
        }
        else
        {
          mlx::core::moveaxis((uint64_t **)(*a2 + v9), v14, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v21);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v24, (uint64_t)&v21);
          mlx::core::array::~array((mlx::core::array *)&v21);
        }
        ++v8;
        uint64_t v10 = *a3;
        v9 += 16;
      }
      while (v8 < (a3[1] - *a3) >> 2);
    }
    int v13 = *(_DWORD *)(a1 + 20);
    BOOL v12 = v13 >= v11;
  }
  mlx::core::concatenate(v24, v12 + v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<int> __p = &v21;
  LOBYTE(v19) = 0;
  uint64_t v15 = (mlx::core::array **)operator new(0x10uLL);
  uint64_t v21 = v15;
  uint64_t v22 = v15;
  uint64_t v23 = v15 + 2;
  uint64_t v16 = (atomic_ullong *)v25[1];
  *uint64_t v15 = (mlx::core::array *)v25[0];
  v15[1] = (mlx::core::array *)v16;
  if (v16) {
    atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = v15 + 2;
  uint64_t v17 = operator new(4uLL);
  std::vector<int> __p = v17;
  *uint64_t v17 = v11;
  int v19 = v17 + 1;
  uint64_t v20 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v21, (uint64_t)&__p);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v25);
  uint64_t v21 = v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_256F2D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, char **a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a18);
  a12 = &a15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Concatenate::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

char *mlx::core::Copy::vjp@<X0>(void *a1@<X1>, char **a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16) {
    mlx::core::Copy::vjp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Copy::vjp();
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  size_t v4 = *a2;
  uint64_t v5 = a2[1];
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, v4, v5, (v5 - v4) >> 4);
}

char *mlx::core::Copy::jvp@<X0>(void *a1@<X1>, char **a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16) {
    mlx::core::Copy::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Copy::jvp();
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  size_t v4 = *a2;
  uint64_t v5 = a2[1];
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, v4, v5, (v5 - v4) >> 4);
}

void mlx::core::Copy::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Copy::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Copy::vmap();
  }
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  v11[0] = v8;
  v11[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::copy(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  BOOL v12 = 0;
  int v13 = 0;
  int v14 = 0;
  uint64_t v15 = (void **)&v12;
  char v16 = 0;
  uint64_t v9 = operator new(0x10uLL);
  BOOL v12 = v9;
  int v13 = v9;
  int v14 = v9 + 2;
  uint64_t v10 = v17[1];
  *uint64_t v9 = v17[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = v9 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v12, (uint64_t)a3);
  uint64_t v15 = (void **)&v12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v15);
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256F2D61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
}

uint64_t mlx::core::Cos::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Cos::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cos::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Cos::jvp();
  }
  uint64_t v7 = *a3;
  mlx::core::sin(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::negative(v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::multiply(v7, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v11[2] = a5;
  char v12 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *uint64_t v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F2D7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Cos::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cos::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Cos::vmap();
  }
  mlx::core::cos(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Cosh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Cosh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cosh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Cosh::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::sinh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *uint64_t v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F2DA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cosh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Cosh::vmap();
  }
  mlx::core::cosh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::CustomVJP::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void **)a2;
  char v11 = (void *)(*(void *)(a2 + 8) + *a5 - a5[1]);
  uint64_t v12 = (uint64_t)v11 - *(void *)a2;
  memset(v19, 0, sizeof(v19));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v19, v10, v11, v12 >> 4);
  uint64_t v13 = *(void *)(a1 + 48);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(char **__return_ptr))(*(void *)v13 + 48))(v18);
  uint64_t v15 = *(void **)a3;
  int v14 = *(void **)(a3 + 8);
  while (v15 != v14)
  {
    std::vector<mlx::core::array>::emplace_back<mlx::core::array const&>(v18, v15);
    v15 += 2;
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  std::vector<mlx::core::array>::reserve((char **)a6, a4[1] - *a4);
  uint64_t v17 = *a4;
  char v16 = a4[1];
  while (v17 != v16)
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, &v18[0][16 * *v17++]);
  uint64_t v20 = v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v18[0] = (char *)v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_256F2DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = &a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = (void **)&a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

char *std::vector<mlx::core::array>::emplace_back<mlx::core::array const&>(char **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v27 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    char v16 = &v14[16 * v13];
    char v26 = v16;
    *(void *)uint64_t v15 = *a2;
    uint64_t v17 = a2[1];
    *((void *)v15 + 1) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v15 + 16;
    v25.i64[1] = (uint64_t)(v15 + 16);
    int v19 = *a1;
    unint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 16;
        *(void *)unint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v25.i64[1];
      char v16 = v26;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v25 = v21;
    uint64_t v22 = a1[2];
    a1[2] = v16;
    char v26 = v22;
    uint64_t v24 = v21.i64[0];
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return v9 - 16;
}

void mlx::core::Depends::vjp(mlx::core *a1@<X1>, void *a2@<X2>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  unint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      unint64_t v9 = *v4;
      if (v9 >= (uint64_t)(a2[1] - *a2) >> 4)
      {
        mlx::core::zeros_like((uint64_t *)(*(void *)a1 + 16 * v9), a1, 0, v10);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v10);
        mlx::core::array::~array((mlx::core::array *)v10);
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (void *)(*a2 + 16 * v9));
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F2DF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::Divide::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  unint64_t v5 = *(_DWORD **)a4;
  unint64_t v6 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v6)
  {
    do
    {
      if (*v5)
      {
        mlx::core::multiply(*a3, *a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
        mlx::core::square(*a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
        mlx::core::divide(v13, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
        mlx::core::negative(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v15);
        mlx::core::array::~array((mlx::core::array *)v15);
        mlx::core::array::~array((mlx::core::array *)v14);
        mlx::core::array::~array((mlx::core::array *)v12);
        unint64_t v11 = (mlx::core::array *)v13;
      }
      else
      {
        mlx::core::divide(*a3, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v15);
        unint64_t v11 = (mlx::core::array *)v15;
      }
      mlx::core::array::~array(v11);
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_256F2E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  unint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F2E1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::DivMod::jvp(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = operator new(0x10uLL);
  *a3 = v4;
  a3[1] = v4;
  a3[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *uint64_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256F2E2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::DivMod::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1;
  mlx::core::divmod(v11, v12, *(mlx::core **)(v4 + 8), *(unsigned int *)(v4 + 16) | 0x100000000, v10);
  LODWORD(v4) = v13;
  unint64_t v6 = operator new(4uLL);
  std::vector<int> __p = v6;
  *unint64_t v6 = v4;
  uint64_t v8 = v6 + 1;
  unint64_t v9 = v6 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)v10, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256F2E3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array(v16);
  mlx::core::array::~array((mlx::core::array *)&a16);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v13[0] = a4;
  v13[1] = a3;
  void v13[2] = a2;
  void v13[3] = a1;
  mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v13, 0, &v12);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v13, 1u, &v15);
    mlx::core::add(&v12, &v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
    long long v8 = v14;
    long long v14 = 0uLL;
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    long long v12 = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    mlx::core::array::~array((mlx::core::array *)&v14);
    mlx::core::array::~array((mlx::core::array *)&v15);
  }
  long long v10 = v12;
  long long v15 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v14 = a5;
  BYTE8(v14) = 0;
  unint64_t v11 = operator new(0x10uLL);
  *a5 = v11;
  a5[1] = v11;
  a5[2] = v11 + 1;
  _OWORD *v11 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v11 + 1;
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::array::~array((mlx::core::array *)&v12);
}

void sub_256F2E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)(v9 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Divide::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(_DWORD *)(**(void **)a1 + 4 * a2))
  {
    mlx::core::multiply((void *)(**(void **)(a1 + 8) + 16 * a2), **(void ***)(a1 + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v12);
    mlx::core::square((void *)(**(void **)(a1 + 16) + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v11);
    mlx::core::divide(v12, v11, *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v13);
    mlx::core::negative(v13, *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v13);
    mlx::core::array::~array((mlx::core::array *)v11);
    mlx::core::array::~array((mlx::core::array *)v12);
  }
  else
  {
    unint64_t v6 = *(void **)(a1 + 16);
    uint64_t v7 = (void *)(**(void **)(a1 + 8) + 16 * a2);
    long long v8 = (void *)(*v6 + 16);
    uint64_t v9 = *(mlx::core **)(v5 + 8);
    uint64_t v10 = *(unsigned int *)(v5 + 16) | 0x100000000;
    mlx::core::divide(v7, v8, v9, v10, a3);
  }
}

void sub_256F2E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void mlx::core::Divide::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  unint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::divide(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  long long v12 = v10 + 1;
  int v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F2E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v5 = *(_DWORD **)a4;
  unint64_t v6 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v6)
  {
    do
    {
      if (*v5)
      {
        mlx::core::divide(*a2, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
        mlx::core::floor(&v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
        long long v11 = v14;
        long long v14 = 0uLL;
        long long v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
        long long v15 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        mlx::core::array::~array((mlx::core::array *)&v14);
        mlx::core::multiply(&v15, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
        mlx::core::negative(v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)&v14);
        mlx::core::array::~array((mlx::core::array *)&v14);
        mlx::core::array::~array((mlx::core::array *)v13);
        mlx::core::array::~array((mlx::core::array *)&v15);
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, *a3);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_256F2E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v13[0] = a4;
  v13[1] = a3;
  void v13[2] = a2;
  void v13[3] = a1;
  mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v13, 0, &v12);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v13, 1u, &v15);
    mlx::core::add(&v12, &v15, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
    long long v8 = v14;
    long long v14 = 0uLL;
    int v9 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    long long v12 = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    mlx::core::array::~array((mlx::core::array *)&v14);
    mlx::core::array::~array((mlx::core::array *)&v15);
  }
  long long v10 = v12;
  long long v15 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v14 = a5;
  BYTE8(v14) = 0;
  long long v11 = operator new(0x10uLL);
  *a5 = v11;
  a5[1] = v11;
  a5[2] = v11 + 1;
  _OWORD *v11 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v11 + 1;
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::array::~array((mlx::core::array *)&v12);
}

void sub_256F2EB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)(v9 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = a2;
  if (*(_DWORD *)(**(void **)a1 + 4 * a2))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    mlx::core::divide(**(void ***)(a1 + 16), (void *)(**(void **)(a1 + 16) + 16), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v12);
    mlx::core::floor(&v12, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v11);
    long long v7 = v11;
    long long v11 = 0uLL;
    long long v8 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    long long v12 = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    mlx::core::array::~array((mlx::core::array *)&v11);
    mlx::core::multiply(&v12, (void *)(**(void **)(a1 + 8) + 16 * v5), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, &v11);
    mlx::core::negative(&v11, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)&v11);
    mlx::core::array::~array((mlx::core::array *)&v12);
  }
  else
  {
    uint64_t v9 = (void *)(**(void **)(a1 + 8) + 16 * a2);
    *a3 = *v9;
    uint64_t v10 = v9[1];
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_256F2EC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void mlx::core::Remainder::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::remainder(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  long long v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  long long v12 = v10 + 1;
  int v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F2EDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::equal(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  long long v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  long long v12 = v10 + 1;
  int v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F2EF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Equal::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F2F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::Equal::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F2F18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Erf::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Erf::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::Erf::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Erf::jvp();
  }
  mlx::core::array::array<double>(&v15, *(void *)(**a2 + 56), 1.12837917);
  mlx::core::multiply(&v15, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::square(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::negative(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::exp(v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::multiply(v14, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  long long v15 = (int **)a5;
  char v16 = 0;
  char v9 = operator new(0x10uLL);
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v9 + 2;
  uint64_t v10 = v17[1];
  *char v9 = v17[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F2F38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v13 = va_arg(va4, void);
  uint64_t v15 = va_arg(va4, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  _Unwind_Resume(a1);
}

void mlx::core::Erf::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Erf::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Erf::vmap();
  }
  mlx::core::erf(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  long long v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void **a4@<X4>, uint64_t a5@<X8>)
{
  void v16[2] = *MEMORY[0x263EF8340];
  mlx::core::array::array<double>(&v14, *(void *)(**(void **)a2 + 56), 0.886226925);
  mlx::core::multiply(&v14, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::array::~array((mlx::core::array *)&v14);
  mlx::core::square(*a4, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::exp(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::multiply(v13, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  long long v14 = (int **)a5;
  char v15 = 0;
  uint64_t v9 = operator new(0x10uLL);
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v9 + 2;
  uint64_t v10 = v16[1];
  *uint64_t v9 = v16[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2F690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void sub_256F2F6E8()
{
}

void mlx::core::ErfInv::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::ErfInv::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::ErfInv::jvp();
  }
  mlx::core::array::array<double>(&v15, *(void *)(**a2 + 56), 0.886226925);
  mlx::core::multiply(&v15, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  mlx::core::array::~array((mlx::core::array *)&v15);
  mlx::core::erfinv(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::square(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::exp(v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  mlx::core::multiply(v14, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  char v15 = (int **)a5;
  char v16 = 0;
  uint64_t v9 = operator new(0x10uLL);
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v9 + 2;
  uint64_t v10 = v17[1];
  *uint64_t v9 = v17[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F2F890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v13 = va_arg(va4, void);
  uint64_t v15 = va_arg(va4, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  mlx::core::array::~array((mlx::core::array *)(v2 - 56));
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ErfInv::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::ErfInv::vmap();
  }
  mlx::core::erfinv(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  long long v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2FA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::vjp(uint64_t a1@<X0>, void **a2@<X2>, void **a3@<X4>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  mlx::core::multiply(*a2, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F2FAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Exp::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Exp::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::exp(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *uint64_t v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F2FC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Exp::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Exp::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Exp::vmap();
  }
  mlx::core::exp(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F2FD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::vjp(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v7 = *(void **)a3;
  mlx::core::array::array<float>(v10, *(void *)(**(void **)a3 + 56), 1.0);
  mlx::core::add(v7, v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::multiply(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  void v11[2] = a4;
  char v12 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *uint64_t v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F2FEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Expm1::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Expm1::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::exp(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *uint64_t v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F30014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Expm1::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Expm1::vmap();
  }
  mlx::core::expm1(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F30158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Floor::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Floor::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Floor::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Floor::jvp();
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F30290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Floor::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Floor::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Floor::vmap();
  }
  mlx::core::floor(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F303C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Full::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)a2;
  if (*(void *)(a2 + 8) - (void)v6 != 16) {
    mlx::core::Full::vjp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Full::vjp();
  }
  mlx::core::multiply(*a3, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v10[1];
  *uint64_t v8 = v10[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F304DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

char *mlx::core::Full::jvp@<X0>(void *a1@<X1>, char **a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  if (a1[1] - *a1 != 16) {
    mlx::core::Full::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Full::jvp();
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  return std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, v4, v5, (v5 - v4) >> 4);
}

void mlx::core::Full::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void ****)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Full::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Full::vmap();
  }
  uint64_t v8 = *v5;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *v8, (uint64_t)v8[1], ((unsigned char *)v8[1] - (unsigned char *)*v8) >> 2);
  uint64_t v9 = *v5;
  uint64_t v10 = (uint64_t)(*v5)[7];
  char v11 = operator new(0x30uLL);
  v11[1] = 0;
  void v11[2] = 0;
  void *v11 = &unk_270633410;
  uint64_t v12 = *(void *)(a1 + 8);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a1 + 16);
  void v11[3] = &unk_2706360E8;
  v11[4] = v12;
  *(void *)&long long v23 = v11 + 3;
  *((void *)&v23 + 1) = v11;
  uint64_t v13 = v5[1];
  float v28 = (long long **)v9;
  int v29 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  }
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  unint64_t v18 = &v21;
  LOBYTE(v19) = 0;
  long long v14 = operator new(0x10uLL);
  *(void *)&long long v21 = v14;
  uint64_t v22 = v14 + 2;
  *long long v14 = v9;
  v14[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  }
  *((void *)&v21 + 1) = v14 + 2;
  mlx::core::array::array(&v25, (long long *)__p, v10, &v23, &v21);
  unint64_t v18 = &v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  mlx::core::array::~array((mlx::core::array *)&v28);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  v27[0] = v25;
  v27[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = 0;
  int v19 = 0;
  long long v20 = 0;
  float v28 = &v18;
  LOBYTE(v29) = 0;
  uint64_t v17 = (long long *)operator new(0x10uLL);
  unint64_t v18 = v17;
  long long v20 = v17 + 1;
  *(void *)uint64_t v17 = v16;
  *((void *)v17 + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  int v19 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&v18, (uint64_t)a3);
  float v28 = &v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)&v25);
}

void sub_256F307AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  *(void *)(v21 - 72) = v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 72));
  mlx::core::array::~array((mlx::core::array *)(v21 - 88));
  mlx::core::array::~array((mlx::core::array *)&a20);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(mlx::core::array **)a2;
  uint64_t v7 = *(char **)(a2 + 8);
  uint64_t v9 = (char *)(*(void *)a2 + 16);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  long long v53 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)&v53, v9, v7, (v7 - v9) >> 4);
  memset(&v52, 0, sizeof(v52));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  memset(&v51, 0, sizeof(v51));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  uint64_t v10 = *a3;
  char v11 = a3[1];
  int v12 = **a3;
  if (*a3 + 1 == v11)
  {
    BOOL v15 = 0;
  }
  else
  {
    uint64_t v13 = v10 + 2;
    do
    {
      int v14 = *(v13 - 1);
      BOOL v15 = v14 >= 0;
      if ((v14 & 0x80000000) == 0) {
        break;
      }
    }
    while (v13++ != v11);
  }
  std::vector<int>::value_type v50 = 0;
  uint64_t v17 = v10;
  if (v10 != v11)
  {
    uint64_t v17 = v10;
    while (*v17 < 0)
    {
      if (++v17 == v11)
      {
        uint64_t v17 = v11;
        break;
      }
    }
  }
  std::vector<int>::value_type v50 = *v17;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 5)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 1;
    do
    {
      int v20 = v10[v19];
      if (v50 != v20 && (v20 & 0x80000000) == 0)
      {
        mlx::core::moveaxis(&v53[v18], v20, v50, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v49);
        long long v21 = *(_OWORD *)&v49.__begin_;
        v49.__begin_ = 0;
        v49.__end_ = 0;
        uint64_t v22 = (std::__shared_weak_count *)v53[v18 + 1];
        *(_OWORD *)&v53[v18] = v21;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        mlx::core::array::~array((mlx::core::array *)&v49);
        uint64_t v10 = *a3;
        char v11 = a3[1];
      }
      ++v19;
      v18 += 2;
    }
    while (v19 < v11 - v10);
  }
  if ((v12 & 0x80000000) == 0)
  {
    long long v23 = v53;
    if (v53 == v54)
    {
      int v24 = 0;
    }
    else
    {
      int v24 = 0;
      do
      {
        uint64_t v25 = *v23;
        v23 += 2;
        uint64_t v26 = (v25[1] - *v25) >> 2;
        if (v24 <= (int)v26) {
          int v24 = v26;
        }
      }
      while (v23 != v54);
    }
    std::vector<int>::pointer begin = v52.__begin_;
    std::vector<int>::pointer end = v52.__end_;
    if (v52.__begin_ != v52.__end_)
    {
      while (v50 > *begin)
      {
        if (++begin == v52.__end_)
        {
          std::vector<int>::pointer begin = v52.__end_;
          goto LABEL_35;
        }
      }
    }
    while (begin < end)
      ++*begin++;
LABEL_35:
    if (v15)
    {
      LODWORD(v44[0]) = 1;
      std::vector<int>::vector(&v49, v24 - (uint64_t)v50, (const std::vector<int>::value_type *)v44);
      int v29 = mlx::core::array::shape(v8, v50);
      mlx::core::arange(0, v29, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)v44);
      if (*((void *)v44[0] + 1) == *(void *)v44[0]) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      std::vector<int>::pointer v30 = v49.__begin_;
      *v49.__begin_ = **(_DWORD **)v44[0];
      long long v47 = 0;
      uint64_t v48 = 0;
      std::vector<int> __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v30, (uint64_t)v49.__end_, v49.__end_ - v30);
      mlx::core::reshape((const void ***)v44, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)__x);
      long long v31 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      uint64_t v32 = (std::__shared_weak_count *)v44[1];
      *(_OWORD *)long long v44 = v31;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      mlx::core::array::~array((mlx::core::array *)__x);
      if (__p)
      {
        long long v47 = __p;
        operator delete(__p);
      }
      v33.__i_ = &v51.__begin_[v50];
      __x[0] = 1;
      std::vector<int>::insert(&v51, v33, __x);
      std::vector<int>::pointer v34 = v52.__begin_;
      v35.__i_ = begin;
      std::vector<int>::insert(&v52, v35, &v50);
      std::vector<mlx::core::array>::insert(&v53, (uint64_t *)((char *)v53 + 4 * ((char *)begin - (char *)v34)), (uint64_t *)v44);
      mlx::core::array::~array((mlx::core::array *)v44);
      if (v49.__begin_)
      {
        v49.__end_ = v49.__begin_;
        operator delete(v49.__begin_);
      }
    }
    else
    {
      std::vector<int>::pointer v36 = v51.__begin_;
      int v37 = *v10;
      int v38 = mlx::core::array::shape(v8, *v10);
      v39.__i_ = &v36[v37];
      LODWORD(v49.__begin_) = v38;
      std::vector<int>::insert(&v51, v39, (std::vector<int>::value_type *)&v49);
      std::vector<int>::value_type v50 = **a3 + v24;
    }
  }
  mlx::core::gather(v8, (uint64_t *)&v53, &v52.__begin_, (uint64_t)&v51, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, __x);
  memset(&v49, 0, sizeof(v49));
  v44[0] = &v49;
  LOBYTE(v44[1]) = 0;
  char v40 = (int *)operator new(0x10uLL);
  v49.__begin_ = v40;
  v49.__end_ = v40;
  v49.__end_cap_.__value_ = v40 + 4;
  uint64_t v41 = *(void *)&__x[2];
  *(void *)char v40 = *(void *)__x;
  *((void *)v40 + 1) = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  v49.__end_ = v40 + 4;
  std::vector<int>::value_type v42 = v50;
  long long v43 = operator new(4uLL);
  v44[0] = v43;
  _DWORD *v43 = v42;
  v44[1] = v43 + 1;
  int v45 = v43 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v49, (uint64_t)v44);
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  v44[0] = &v49;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
  mlx::core::array::~array((mlx::core::array *)__x);
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
  if (v52.__begin_)
  {
    v52.__end_ = v52.__begin_;
    operator delete(v52.__begin_);
  }
  v52.__begin_ = (std::vector<int>::pointer)&v53;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
}

void sub_256F30CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char *a23,char *a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  a23 = &a26;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core::array **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v18[2] = *MEMORY[0x263EF8340];
  if (a4[1] - *a4 > 4uLL || *(_DWORD *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather] Cannot calculate VJP with respect to indices.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  uint64_t v9 = *(char **)(a2 + 8);
  uint64_t v10 = (char *)(*(void *)a2 + 16);
  memset(v14, 0, sizeof(v14));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v14, v10, v9, (v9 - v10) >> 4);
  mlx::core::scatter_add((mlx::core::array *)v15, v14, *a3, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v16 = (const void ****)a5;
  char v17 = 0;
  char v11 = operator new(0x10uLL);
  *(void *)a5 = v11;
  *(void *)(a5 + 8) = v11;
  *(void *)(a5 + 16) = v11 + 2;
  uint64_t v12 = v18[1];
  void *v11 = v18[0];
  v11[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v11 + 2;
  mlx::core::array::~array((mlx::core::array *)v18);
  uint64_t v16 = v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_256F30F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::Gather::jvp(uint64_t a1@<X0>, void *a2@<X1>, mlx::core::array **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v16[2] = *MEMORY[0x263EF8340];
  if (a4[1] - *a4 > 4uLL || *(_DWORD *)*a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[gather] Cannot calculate JVP with respect to indices.");
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v8 = (char *)a2[1];
  uint64_t v9 = (char *)(*a2 + 16);
  memset(v13, 0, sizeof(v13));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v13, v9, v8, (v8 - v9) >> 4);
  mlx::core::gather(*a3, v13, (int **)(a1 + 24), a1 + 48, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  int v14 = (void **)a5;
  char v15 = 0;
  uint64_t v10 = operator new(0x10uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v10;
  *(void *)(a5 + 16) = v10 + 2;
  uint64_t v11 = v16[1];
  *uint64_t v10 = v16[0];
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v10 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  int v14 = (void **)v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_256F310EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Gather::is_equivalent(void *a1, void *a2)
{
  uint64_t v5 = a1 + 3;
  uint64_t v4 = (const void *)a1[3];
  size_t v6 = v5[1] - (void)v4;
  uint64_t v8 = a2 + 3;
  uint64_t v7 = (const void *)a2[3];
  if (v6 == v8[1] - (void)v7
    && !memcmp(v4, v7, v6)
    && (uint64_t v9 = (const void *)a1[6], v10 = a1[7] - (void)v9, v11 = (const void *)a2[6], v10 == a2[7] - (void)v11))
  {
    return memcmp(v9, v11, v10) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Greater::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  size_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::greater(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  int v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  int v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  size_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *size_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F312E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Greater::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F313E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::Greater::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F314E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::greater_equal(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  int v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  int v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  size_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *size_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F31664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F3175C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::GreaterEqual::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F31864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Less::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::less(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  int v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  int v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  size_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *size_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F319E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Less::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F31AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::Less::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F31BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::less_equal(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  int v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  int v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  size_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *size_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F31D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F31E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::LessEqual::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F31F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Log::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Log::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)a2;
  if (*(void *)(a2 + 8) - (void)v6 != 16) {
    mlx::core::Log::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Log::jvp();
  }
  mlx::core::divide(*a3, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
  int v9 = *(_DWORD *)(a1 + 20);
  if (v9 != 2)
  {
    float v10 = 2.0;
    if (v9 == 1) {
      float v10 = 10.0;
    }
    float v11 = logf(v10);
    mlx::core::array::array<float>((int ***)&v18, *(void *)(v16 + 56), 1.0 / v11);
    mlx::core::multiply(&v18, &v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
    long long v12 = v17;
    long long v17 = 0uLL;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    long long v16 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    mlx::core::array::~array((mlx::core::array *)&v17);
    mlx::core::array::~array((mlx::core::array *)&v18);
  }
  long long v14 = v16;
  long long v18 = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v17 = a5;
  BYTE8(v17) = 0;
  char v15 = operator new(0x10uLL);
  *a5 = v15;
  a5[1] = v15;
  a5[2] = v15 + 1;
  *char v15 = v14;
  if (*((void *)&v14 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v15 + 1;
  mlx::core::array::~array((mlx::core::array *)&v18);
  mlx::core::array::~array((mlx::core::array *)&v16);
}

void sub_256F32144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void mlx::core::Log::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Log::vmap();
  }
  uint64_t v8 = *v5;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  uint64_t v9 = *v5;
  uint64_t v10 = *(void *)(*v5 + 56);
  float v11 = operator new(0x30uLL);
  v11[1] = 0;
  void v11[2] = 0;
  void *v11 = &unk_2706344F0;
  uint64_t v12 = *(void *)(a1 + 8);
  void v11[3] = &unk_270636418;
  v11[4] = v12;
  v11[5] = *(void *)(a1 + 16);
  *(void *)&long long v19 = v11 + 3;
  *((void *)&v19 + 1) = v11;
  uint64_t v13 = v5[1];
  v26[0] = v9;
  v26[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = 0uLL;
  long long v18 = 0;
  int v24 = (void **)&v17;
  char v25 = 0;
  long long v14 = operator new(0x10uLL);
  *(void *)&long long v17 = v14;
  long long v18 = v14 + 2;
  *long long v14 = v9;
  v14[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v17 + 1) = v14 + 2;
  mlx::core::array::array(v27, (long long *)__p, v10, &v19, &v17);
  long long v21 = 0;
  uint64_t v22 = 0;
  long long v23 = 0;
  int v24 = (void **)&v21;
  char v25 = 0;
  char v15 = operator new(0x10uLL);
  long long v21 = v15;
  uint64_t v22 = v15;
  long long v23 = v15 + 2;
  uint64_t v16 = v27[1];
  *char v15 = v27[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = v15 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v21, (uint64_t)a3);
  int v24 = (void **)&v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v24);
  mlx::core::array::~array((mlx::core::array *)v27);
  int v24 = (void **)&v17;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v24);
  mlx::core::array::~array((mlx::core::array *)v26);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F323A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  a20 = (uint64_t *)v20;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v21 - 72));
  a20 = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v21 - 88));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Log1p::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Log1p::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::Log1p::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Log1p::jvp();
  }
  uint64_t v8 = *a3;
  mlx::core::array::array<float>(v11, *(void *)(**a2 + 56), 1.0);
  mlx::core::add(v11, *a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::divide(v8, v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v12[2] = a5;
  char v13 = 0;
  uint64_t v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  uint64_t v10 = v14[1];
  *uint64_t v9 = v14[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256F32584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log1p::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Log1p::vmap();
  }
  mlx::core::log1p(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F326D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::LogicalNot::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::LogicalNot::jvp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v8[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::LogicalNot::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::LogicalNot::jvp();
  }
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v8);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = operator new(0x10uLL);
  *a5 = v6;
  a5[1] = v6;
  a5[2] = v6 + 2;
  uint64_t v7 = v8[1];
  *uint64_t v6 = v8[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v6 + 2;
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_256F32814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::LogicalNot::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::LogicalNot::vmap();
  }
  mlx::core::logical_not(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F32948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::vjp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::LogicalAnd::vjp();
  }
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v7 = operator new(0x10uLL);
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v7;
  *(void *)(a5 + 16) = v7 + 2;
  uint64_t v8 = v9[1];
  void *v7 = v9[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
  if (a4[1] - *a4 > 4uLL) {
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (void *)(*(void *)(a5 + 8) - 16));
  }
}

void sub_256F32A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LogicalAnd::jvp();
  }
  if (a3[1] - *a3 >= 9uLL) {
    mlx::core::LogicalAnd::jvp();
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F32B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::vmap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::LogicalAnd::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 8) {
    mlx::core::LogicalAnd::vmap();
  }
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::logical_and(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  long long v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  char v12 = v10 + 1;
  char v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    char v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F32D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::vjp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::LogicalOr::vjp();
  }
  mlx::core::zeros_like(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v7 = operator new(0x10uLL);
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v7;
  *(void *)(a5 + 16) = v7 + 2;
  uint64_t v8 = v9[1];
  void *v7 = v9[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a5 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
  if (a4[1] - *a4 > 4uLL) {
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (void *)(*(void *)(a5 + 8) - 16));
  }
}

void sub_256F32E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::LogicalOr::jvp();
  }
  if (a3[1] - *a3 >= 9uLL) {
    mlx::core::LogicalOr::jvp();
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F32F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::vmap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::LogicalOr::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 8) {
    mlx::core::LogicalOr::vmap();
  }
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::logical_or(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  long long v14 = v7;
  char v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  char v12 = v10 + 1;
  char v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    char v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F3312C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  int v9 = *a2;
  uint64_t v10 = (*a2)[1];
  v23[0] = **a2;
  v23[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    int v9 = *a2;
  }
  uint64_t v12 = v9[2];
  uint64_t v11 = v9[3];
  v22[0] = v12;
  v22[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::subtract(v23, v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  mlx::core::sigmoid(v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
  mlx::core::array::~array((mlx::core::array *)v19);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  char v13 = *a4;
  long long v14 = a4[1];
  if (*a4 != v14)
  {
    do
    {
      int v15 = *v13;
      uint64_t v16 = *a3;
      if (*v13)
      {
        mlx::core::array::array<float>(v17, *(void *)(v20 + 56), 1.0);
        mlx::core::subtract(v17, &v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
      }
      else
      {
        v18[0] = v20;
        v18[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
      }
      mlx::core::multiply(v16, v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v19);
      mlx::core::array::~array((mlx::core::array *)v19);
      mlx::core::array::~array((mlx::core::array *)v18);
      if (v15) {
        mlx::core::array::~array((mlx::core::array *)v17);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  mlx::core::array::~array((mlx::core::array *)&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
  mlx::core::array::~array((mlx::core::array *)v23);
}

void sub_256F33324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::jvp(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a2;
  uint64_t v10 = (*a2)[1];
  v21[0] = **a2;
  v21[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *a2;
  }
  uint64_t v12 = v9[2];
  uint64_t v11 = v9[3];
  v20[0] = v12;
  v20[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlx::core::subtract(v21, v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  mlx::core::sigmoid(v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  mlx::core::array::~array((mlx::core::array *)v18);
  v18[0] = a4;
  v18[1] = a3;
  void v18[2] = v19;
  void v18[3] = a1;
  mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v18, 0, &v17);
  if (a4[1] - *a4 >= 5uLL)
  {
    mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v18, 1u, &v23);
    mlx::core::add(&v17, &v23, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
    long long v13 = v22;
    long long v22 = 0uLL;
    long long v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    long long v17 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    mlx::core::array::~array((mlx::core::array *)&v22);
    mlx::core::array::~array((mlx::core::array *)&v23);
  }
  long long v15 = v17;
  long long v23 = v17;
  if (*((void *)&v17 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v22 = a5;
  BYTE8(v22) = 0;
  uint64_t v16 = operator new(0x10uLL);
  *a5 = v16;
  a5[1] = v16;
  a5[2] = v16 + 1;
  *uint64_t v16 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v16 + 1;
  mlx::core::array::~array((mlx::core::array *)&v23);
  mlx::core::array::~array((mlx::core::array *)&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v21);
}

void sub_256F3357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  mlx::core::array::~array((mlx::core::array *)(v19 - 72));
  mlx::core::array::~array((mlx::core::array *)&a9);
  mlx::core::array::~array((mlx::core::array *)&a15);
  mlx::core::array::~array((mlx::core::array *)&a17);
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(_DWORD *)(**(void **)a1 + 4 * a2);
  uint64_t v8 = **(void **)(a1 + 8);
  if (v7)
  {
    mlx::core::array::array<float>(v12, *(void *)(**(void **)(a1 + 16) + 56), 1.0);
    mlx::core::subtract(v12, *(void **)(a1 + 16), *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, v13);
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    v13[0] = v11;
    v13[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  mlx::core::multiply((void *)(v8 + 16 * a2), v13, *(mlx::core **)(v6 + 8), *(unsigned int *)(v6 + 16) | 0x100000000, a3);
  mlx::core::array::~array((mlx::core::array *)v13);
  if (v7) {
    mlx::core::array::~array((mlx::core::array *)v12);
  }
}

void sub_256F336C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void mlx::core::LogAddExp::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::logaddexp(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  int v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  long long v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F33828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Matmul::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  int v9 = *(void **)a3;
  std::vector<int>::vector(&v27, (uint64_t)(*(void *)(**(void **)a3 + 8) - ***(void ***)a3) >> 2);
  std::vector<int>::pointer begin = v27.__begin_;
  std::vector<int>::pointer end = v27.__end_;
  if (v27.__begin_ != v27.__end_)
  {
    int v12 = 0;
    std::vector<int>::pointer v13 = v27.__begin_;
    do
      *v13++ = v12++;
    while (v13 != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  long long v14 = *(_DWORD **)a4;
  long long v15 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v15)
  {
    while (1)
    {
      if (*v14)
      {
        uint64_t v16 = *a2;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        int v19 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, v27.__begin_, (uint64_t)v27.__end_, v27.__end_ - v27.__begin_);
        mlx::core::transpose(v16, &v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
        mlx::core::matmul(v25, v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v26);
        mlx::core::array::~array((mlx::core::array *)v26);
        mlx::core::array::~array((mlx::core::array *)v25);
        long long v17 = v19;
        if (v19)
        {
          uint64_t v20 = v19;
LABEL_10:
          operator delete(v17);
        }
      }
      else
      {
        long long v18 = *a2;
        long long v23 = 0;
        uint64_t v24 = 0;
        std::vector<int> __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v27.__begin_, (uint64_t)v27.__end_, v27.__end_ - v27.__begin_);
        mlx::core::transpose(v18 + 2, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
        mlx::core::matmul(v9, v25, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v26);
        mlx::core::array::~array((mlx::core::array *)v26);
        mlx::core::array::~array((mlx::core::array *)v25);
        long long v17 = (unsigned int *)__p;
        if (__p)
        {
          long long v23 = __p;
          goto LABEL_10;
        }
      }
      if (++v14 == v15)
      {
        std::vector<int>::pointer begin = v27.__begin_;
        break;
      }
    }
  }
  if (begin)
  {
    v27.__end_ = begin;
    operator delete(begin);
  }
}

void sub_256F33A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21)
{
}

void mlx::core::Matmul::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v26[2] = *(const void ***)MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  int v9 = **a3;
  if (v9 < 1)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    v25[0] = *(void *)v8;
    v25[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v8, v9, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v25);
  }
  uint64_t v11 = *a2;
  int v12 = (*a3)[1];
  if (v12 < 1)
  {
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v13 = *(void *)(v11 + 24);
    v24[0] = v14;
    v24[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)(v11 + 16), v12, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v24);
  }
  mlx::core::matmul(v25, v24, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v26);
  uint64_t v21 = 0;
  long long v22 = 0;
  long long v23 = 0;
  std::vector<int> __p = &v21;
  LOBYTE(v19) = 0;
  long long v15 = operator new(0x10uLL);
  uint64_t v21 = v15;
  long long v22 = v15;
  long long v23 = v15 + 2;
  uint64_t v16 = v26[1];
  *long long v15 = v26[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
  }
  long long v22 = v15 + 2;
  long long v17 = operator new(4uLL);
  std::vector<int> __p = v17;
  *long long v17 = 0;
  int v19 = v17 + 1;
  uint64_t v20 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v21, (uint64_t)&__p);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v26);
  mlx::core::array::~array((mlx::core::array *)v24);
  mlx::core::array::~array((mlx::core::array *)v25);
}

void sub_256F33CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
}

void mlx::core::Maximum::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a2;
  long long v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  int v7 = *(_DWORD **)a4;
  uint64_t v8 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 == v8)
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    do
    {
      uint64_t v11 = *(mlx::core **)(a1 + 8);
      uint64_t v12 = *(unsigned int *)(a1 + 16) | 0x100000000;
      if (*v7) {
        mlx::core::less_equal(v6, v6 + 2, v11, v12, v16);
      }
      else {
        mlx::core::greater(v6, v6 + 2, v11, v12, v16);
      }
      mlx::core::multiply(*a3, v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
      std::vector<mlx::core::array>::push_back[abi:ne180100](&v17, (uint64_t)v15);
      mlx::core::array::~array((mlx::core::array *)v15);
      mlx::core::array::~array((mlx::core::array *)v16);
      ++v7;
    }
    while (v7 != v8);
    uint64_t v13 = v17;
    uint64_t v14 = v18;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a5, v13, v14, (v14 - v13) >> 4);
  v16[0] = (void **)&v17;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v16);
}

void sub_256F33E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, int **a4@<X3>, void *a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v9 = *a2;
  uint64_t v10 = *a2 + 2;
  int v11 = **a4;
  uint64_t v12 = *(mlx::core **)(a1 + 8);
  uint64_t v13 = *(unsigned int *)(a1 + 16) | 0x100000000;
  if (v11) {
    mlx::core::less_equal(*a2, *a2 + 2, v12, v13, &v22);
  }
  else {
    mlx::core::greater(*a2, *a2 + 2, v12, v13, &v22);
  }
  mlx::core::multiply(*a3, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v21);
  mlx::core::array::~array((mlx::core::array *)&v22);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 5)
  {
    uint64_t v14 = *(mlx::core **)(a1 + 8);
    uint64_t v15 = *(unsigned int *)(a1 + 16) | 0x100000000;
    if ((*a4)[1]) {
      mlx::core::less_equal(v9, v10, v14, v15, &v22);
    }
    else {
      mlx::core::greater(v9, v10, v14, v15, &v22);
    }
    mlx::core::multiply(*a3 + 2, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
    mlx::core::array::~array((mlx::core::array *)&v22);
    mlx::core::add(&v21, v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v24);
    long long v16 = v24;
    long long v24 = 0uLL;
    long long v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    long long v21 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    mlx::core::array::~array((mlx::core::array *)&v24);
    mlx::core::array::~array((mlx::core::array *)v20);
  }
  long long v18 = v21;
  long long v24 = v21;
  if (*((void *)&v21 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  long long v22 = a5;
  char v23 = 0;
  uint64_t v19 = operator new(0x10uLL);
  *a5 = v19;
  a5[1] = v19;
  a5[2] = v19 + 1;
  *uint64_t v19 = v18;
  if (*((void *)&v18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v19 + 1;
  mlx::core::array::~array((mlx::core::array *)&v24);
  mlx::core::array::~array((mlx::core::array *)&v21);
}

void sub_256F34070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void mlx::core::Maximum::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::maximum(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  int v7 = operator new(0x10uLL);
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  long long v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F34208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a2;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  uint64_t v6 = *(_DWORD **)a4;
  int v7 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v7)
  {
    do
    {
      int v11 = *(mlx::core **)(a1 + 8);
      uint64_t v12 = *(unsigned int *)(a1 + 16) | 0x100000000;
      if (*v6) {
        mlx::core::greater_equal(v5, v5 + 2, v11, v12, v14);
      }
      else {
        mlx::core::less(v5, v5 + 2, v11, v12, v14);
      }
      mlx::core::multiply(*a3, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v13);
      mlx::core::array::~array((mlx::core::array *)v13);
      mlx::core::array::~array((mlx::core::array *)v14);
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_256F3434C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void mlx::core::Minimum::jvp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, int **a4@<X3>, void *a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v9 = *a2;
  uint64_t v10 = *a2 + 2;
  int v11 = **a4;
  uint64_t v12 = *(mlx::core **)(a1 + 8);
  uint64_t v13 = *(unsigned int *)(a1 + 16) | 0x100000000;
  if (v11) {
    mlx::core::greater_equal(*a2, *a2 + 2, v12, v13, &v22);
  }
  else {
    mlx::core::less(*a2, *a2 + 2, v12, v13, &v22);
  }
  mlx::core::multiply(*a3, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v21);
  mlx::core::array::~array((mlx::core::array *)&v22);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 5)
  {
    uint64_t v14 = *(mlx::core **)(a1 + 8);
    uint64_t v15 = *(unsigned int *)(a1 + 16) | 0x100000000;
    if ((*a4)[1]) {
      mlx::core::greater_equal(v9, v10, v14, v15, &v22);
    }
    else {
      mlx::core::less(v9, v10, v14, v15, &v22);
    }
    mlx::core::multiply(*a3 + 2, &v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
    mlx::core::array::~array((mlx::core::array *)&v22);
    mlx::core::add(&v21, v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v24);
    long long v16 = v24;
    long long v24 = 0uLL;
    long long v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    long long v21 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    mlx::core::array::~array((mlx::core::array *)&v24);
    mlx::core::array::~array((mlx::core::array *)v20);
  }
  long long v18 = v21;
  long long v24 = v21;
  if (*((void *)&v21 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  long long v22 = a5;
  char v23 = 0;
  int v19 = operator new(0x10uLL);
  *a5 = v19;
  a5[1] = v19;
  a5[2] = v19 + 1;
  *int v19 = v18;
  if (*((void *)&v18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v19 + 1;
  mlx::core::array::~array((mlx::core::array *)&v24);
  mlx::core::array::~array((mlx::core::array *)&v21);
}

void sub_256F34574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void mlx::core::Minimum::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::minimum(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  int v7 = operator new(0x10uLL);
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  long long v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F3470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::jvp(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X2>, char **a4@<X3>, void *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  mlx::core::multiply(*a3, (void *)(*a2 + 16 * (1 - *(int *)*a4)), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v14);
  if ((unint64_t)(a4[1] - *a4) >= 5)
  {
    mlx::core::multiply(*a3 + 2, (void *)(*a2 + 16 * (1 - *((int *)*a4 + 1))), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
    mlx::core::add(&v14, &v16, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v15);
    long long v10 = v15;
    long long v15 = 0uLL;
    int v11 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    long long v14 = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    mlx::core::array::~array((mlx::core::array *)&v15);
    mlx::core::array::~array((mlx::core::array *)&v16);
  }
  long long v12 = v14;
  long long v16 = v14;
  if (*((void *)&v14 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v15 = a5;
  BYTE8(v15) = 0;
  uint64_t v13 = operator new(0x10uLL);
  *a5 = v13;
  a5[1] = v13;
  a5[2] = v13 + 1;
  _OWORD *v13 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v13 + 1;
  mlx::core::array::~array((mlx::core::array *)&v16);
  mlx::core::array::~array((mlx::core::array *)&v14);
}

void sub_256F348FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void mlx::core::Multiply::vjp(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1];
  if (*a4 != v6)
  {
    do
    {
      mlx::core::multiply((void *)(*a2 + 16 * (1 - *v5)), *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v11);
      mlx::core::array::~array((mlx::core::array *)v11);
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_256F349E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::Multiply::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::multiply(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  long long v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  int v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  long long v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  long long v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *long long v10 = v9;
  long long v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F34B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Select::jvp(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 48) {
    mlx::core::Select::jvp();
  }
  if (a3[1] - *a3 != 48) {
    mlx::core::Select::jvp();
  }
  v15[0] = a4;
  v15[1] = a2;
  void v15[2] = a1;
  void v15[3] = a3;
  mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v15, **(_DWORD **)a4, &v14);
  int v7 = *(int **)a4;
  if (*(void *)(a4 + 8) - *(void *)a4 >= 5uLL)
  {
    unint64_t v8 = 1;
    do
    {
      mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()((uint64_t)v15, v7[v8], &v17);
      mlx::core::add(&v14, &v17, v9, 0, &v16);
      long long v10 = v16;
      long long v16 = 0uLL;
      int v11 = (std::__shared_weak_count *)*((void *)&v14 + 1);
      long long v14 = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      mlx::core::array::~array((mlx::core::array *)&v16);
      mlx::core::array::~array((mlx::core::array *)&v17);
      ++v8;
      int v7 = *(int **)a4;
    }
    while (v8 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  long long v12 = v14;
  long long v17 = v14;
  if (*((void *)&v14 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v16 = a5;
  BYTE8(v16) = 0;
  uint64_t v13 = operator new(0x10uLL);
  *a5 = v13;
  a5[1] = v13;
  a5[2] = v13 + 1;
  _OWORD *v13 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v13 + 1;
  mlx::core::array::~array((mlx::core::array *)&v17);
  mlx::core::array::~array((mlx::core::array *)&v14);
}

void sub_256F34D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a15);
  mlx::core::array::~array((mlx::core::array *)(v15 - 56));
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

void mlx::core::Select::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0::operator()(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(**(void **)a1 + 4 * a2);
  if (v6 == 1)
  {
    long long v10 = **(uint64_t ***)(a1 + 8);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    v15[0] = v12;
    v15[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::astype(v15, *(void *)(*(void *)(**(void **)(a1 + 24) + 16) + 56), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v16);
    mlx::core::multiply(v16, (void *)(**(void **)(a1 + 24) + 16), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v16);
    uint64_t v13 = (mlx::core::array *)v15;
    goto LABEL_10;
  }
  if (v6)
  {
    mlx::core::logical_not(**(uint64_t ***)(a1 + 8), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v14);
    mlx::core::astype(v14, *(void *)(*(void *)(**(void **)(a1 + 24) + 32) + 56), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, v16);
    mlx::core::multiply(v16, (void *)(**(void **)(a1 + 24) + 32), *(mlx::core **)(v5 + 8), *(unsigned int *)(v5 + 16) | 0x100000000, a3);
    mlx::core::array::~array((mlx::core::array *)v16);
    uint64_t v13 = (mlx::core::array *)v14;
LABEL_10:
    mlx::core::array::~array(v13);
    return;
  }
  int v7 = **(uint64_t ***)(a1 + 8);
  unint64_t v8 = *(mlx::core **)(v5 + 8);
  uint64_t v9 = *(unsigned int *)(v5 + 16) | 0x100000000;
  mlx::core::zeros_like(v7, v8, v9, a3);
}

void sub_256F34EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void mlx::core::Select::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, void **a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  if ((char *)a2[1] - (char *)*a2 != 48) {
    mlx::core::Select::vjp();
  }
  if ((char *)a3[1] - (char *)*a3 != 16) {
    mlx::core::Select::vjp();
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  int v7 = *a4;
  unint64_t v8 = a4[1];
  if (*a4 != v8)
  {
    while (1)
    {
      int v11 = *v7;
      if (*v7 == 2) {
        break;
      }
      if (v11 == 1)
      {
        uint64_t v13 = (*a2)[1];
        v15[0] = **a2;
        v15[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        mlx::core::astype(v15, *(void *)(**a3 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
        mlx::core::multiply(v16, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v17);
        mlx::core::array::~array((mlx::core::array *)v17);
        mlx::core::array::~array((mlx::core::array *)v16);
        uint64_t v12 = (mlx::core::array *)v15;
        goto LABEL_12;
      }
      if (!v11)
      {
        mlx::core::zeros_like(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v17);
        uint64_t v12 = (mlx::core::array *)v17;
LABEL_12:
        mlx::core::array::~array(v12);
      }
      if (++v7 == v8) {
        return;
      }
    }
    mlx::core::logical_not(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
    mlx::core::astype(v14, *(void *)(**a3 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
    mlx::core::multiply(v16, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
    std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v17);
    mlx::core::array::~array((mlx::core::array *)v17);
    mlx::core::array::~array((mlx::core::array *)v16);
    uint64_t v12 = (mlx::core::array *)v14;
    goto LABEL_12;
  }
}

void sub_256F35104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void mlx::core::Select::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 48) {
    mlx::core::Select::vmap();
  }
  uint64_t v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 12) {
    mlx::core::Select::vmap();
  }
  if (*v6 == -1 && v6[1] == -1 && v6[2] == -1)
  {
    uint64_t v63 = v5[1];
    *(void *)&long long v67 = *v5;
    *((void *)&v67 + 1) = v63;
    if (v63) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = v5[3];
    *(void *)&long long v68 = v5[2];
    *((void *)&v68 + 1) = v64;
    if (v64) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v66 = v5[4];
    uint64_t v65 = v5[5];
    *(void *)&long long v69 = v66;
    *((void *)&v69 + 1) = v65;
    if (v65) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
    }
    int v70 = -1;
  }
  else
  {
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    *(void *)&long long v86 = *v5;
    *((void *)&v86 + 1) = v9;
    if (v9)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void **)a2;
    }
    long long v10 = (void *)v5[2];
    uint64_t v11 = v5[3];
    *(void *)&long long v84 = v10;
    *((void *)&v84 + 1) = v11;
    if (v11)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void **)a2;
    }
    uint64_t v13 = (void *)v5[4];
    uint64_t v12 = v5[5];
    *(void *)&long long v83 = v13;
    *((void *)&v83 + 1) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(void *)(v8 + 8) - *(void *)v8;
    unint64_t v15 = v14 >> 2;
    int v16 = **a3;
    int v17 = (*a3)[1];
    if (v16 == -1) {
      ++v15;
    }
    uint64_t v18 = v10[1] - *v10;
    unint64_t v19 = v18 >> 2;
    if (v17 == -1) {
      ++v19;
    }
    uint64_t v20 = v13[1] - *v13;
    unint64_t v21 = v20 >> 2;
    int v22 = (*a3)[2];
    if (v22 == -1) {
      ++v21;
    }
    if (v15 <= v19) {
      unint64_t v15 = v19;
    }
    if (v15 <= v21) {
      int v23 = v21;
    }
    else {
      int v23 = v15;
    }
    uint64_t v24 = *(void *)(a1 + 8);
    int v81 = *(_DWORD *)(a1 + 16);
    int v82 = v23;
    v79[0] = (const void **)v8;
    v79[1] = *((const void ***)&v86 + 1);
    uint64_t v80 = v24;
    if (*((void *)&v86 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v25 = *(_OWORD *)&v85.__begin_;
    v85.__begin_ = 0;
    v85.__end_ = 0;
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    long long v86 = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    mlx::core::array::~array((mlx::core::array *)&v85);
    mlx::core::array::~array((mlx::core::array *)v79);
    long long v78 = v84;
    if (*((void *)&v84 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v84 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v27 = *(_OWORD *)&v85.__begin_;
    v85.__begin_ = 0;
    v85.__end_ = 0;
    float v28 = (std::__shared_weak_count *)*((void *)&v84 + 1);
    long long v84 = v27;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    mlx::core::array::~array((mlx::core::array *)&v85);
    mlx::core::array::~array((mlx::core::array *)&v78);
    long long v77 = v83;
    if (*((void *)&v83 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v29 = v23 - ((unint64_t)v18 >> 2);
    int v30 = v16 + v23 - ((unint64_t)v14 >> 2);
    std::vector<int>::value_type v31 = v17 + v29;
    long long v32 = *(_OWORD *)&v85.__begin_;
    v85.__begin_ = 0;
    v85.__end_ = 0;
    std::vector<int>::const_iterator v33 = (std::__shared_weak_count *)*((void *)&v83 + 1);
    long long v83 = v32;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    mlx::core::array::~array((mlx::core::array *)&v85);
    mlx::core::array::~array((mlx::core::array *)&v77);
    if (v30 != v31)
    {
      std::vector<int>::pointer v34 = (void *)v84;
      long long v76 = v84;
      if (*((void *)&v84 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v84 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      __x[0] = v31;
      std::vector<int>::vector(&v85, (uint64_t)(v34[1] - *v34) >> 2);
      std::vector<int>::pointer begin = v85.__begin_;
      std::vector<int>::pointer end = v85.__end_;
      if (v85.__begin_ != v85.__end_)
      {
        int v37 = 0;
        std::vector<int>::pointer v38 = v85.__begin_;
        do
          *v38++ = v37++;
        while (v38 != end);
      }
      std::vector<int>::const_iterator v39 = &begin[v31];
      char v40 = (char *)((char *)end - (char *)(v39 + 1));
      if (end != v39 + 1)
      {
        memmove(v39, v39 + 1, (char *)end - (char *)(v39 + 1));
        std::vector<int>::pointer begin = v85.__begin_;
      }
      v85.__end_ = (std::vector<int>::pointer)&v40[(void)v39];
      v41.__i_ = &begin[v30];
      std::vector<int>::insert(&v85, v41, __x);
      std::vector<int>::pointer v42 = v85.__begin_;
      std::vector<int>::pointer v43 = v85.__end_;
      mlx::core::array::~array((mlx::core::array *)&v76);
      long long v74 = 0;
      uint64_t v75 = 0;
      *(void *)std::vector<int>::value_type __x = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, v42, (uint64_t)v43, v43 - v42);
      mlx::core::transpose((uint64_t **)&v84, (unsigned int **)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v85);
      long long v44 = *(_OWORD *)&v85.__begin_;
      v85.__begin_ = 0;
      v85.__end_ = 0;
      int v45 = (std::__shared_weak_count *)*((void *)&v84 + 1);
      long long v84 = v44;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      mlx::core::array::~array((mlx::core::array *)&v85);
      if (*(void *)__x)
      {
        long long v74 = *(void **)__x;
        operator delete(*(void **)__x);
      }
      if (v42) {
        operator delete(v42);
      }
    }
    int v46 = v22 + v23 - ((unint64_t)v20 >> 2);
    if (v30 != v46)
    {
      long long v47 = (void *)v83;
      long long v72 = v83;
      if (*((void *)&v83 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v71[0] = v22 + v23 - ((unint64_t)v20 >> 2);
      std::vector<int>::vector(&v85, (uint64_t)(v47[1] - *v47) >> 2);
      std::vector<int>::pointer v48 = v85.__begin_;
      std::vector<int>::pointer v49 = v85.__end_;
      if (v85.__begin_ != v85.__end_)
      {
        int v50 = 0;
        std::vector<int>::pointer v51 = v85.__begin_;
        do
          *v51++ = v50++;
        while (v51 != v49);
      }
      std::vector<int> v52 = &v48[v46];
      long long v53 = (char *)((char *)v49 - (char *)(v52 + 1));
      if (v49 != v52 + 1)
      {
        memmove(v52, v52 + 1, (char *)v49 - (char *)(v52 + 1));
        std::vector<int>::pointer v48 = v85.__begin_;
      }
      v85.__end_ = (std::vector<int>::pointer)&v53[(void)v52];
      v54.__i_ = &v48[v30];
      std::vector<int>::insert(&v85, v54, v71);
      std::vector<int>::pointer v55 = v85.__begin_;
      std::vector<int>::pointer v56 = v85.__end_;
      mlx::core::array::~array((mlx::core::array *)&v72);
      memset(&v85, 0, sizeof(v85));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v85, v55, (uint64_t)v56, v56 - v55);
      mlx::core::transpose((uint64_t **)&v83, (unsigned int **)&v85, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v71);
      long long v57 = *(_OWORD *)v71;
      memset(v71, 0, 16);
      uint64_t v58 = (std::__shared_weak_count *)*((void *)&v83 + 1);
      long long v83 = v57;
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      mlx::core::array::~array((mlx::core::array *)v71);
      if (v85.__begin_)
      {
        v85.__end_ = v85.__begin_;
        operator delete(v85.__begin_);
      }
      if (v55) {
        operator delete(v55);
      }
    }
    long long v67 = v86;
    if (*((void *)&v86 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v68 = v84;
    if (*((void *)&v84 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v84 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v69 = v83;
    if (*((void *)&v83 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v70 = v30;
    mlx::core::array::~array((mlx::core::array *)&v83);
    mlx::core::array::~array((mlx::core::array *)&v84);
    mlx::core::array::~array((mlx::core::array *)&v86);
  }
  mlx::core::where(&v67, &v68, &v69, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v86);
  memset(&v85, 0, sizeof(v85));
  *(void *)std::vector<int>::value_type __x = &v85;
  LOBYTE(v74) = 0;
  int v59 = (int *)operator new(0x10uLL);
  v85.__begin_ = v59;
  v85.__end_ = v59;
  v85.__end_cap_.__value_ = v59 + 4;
  uint64_t v60 = *((void *)&v86 + 1);
  *(void *)int v59 = v86;
  *((void *)v59 + 1) = v60;
  if (v60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
  }
  v85.__end_ = v59 + 4;
  int v61 = v70;
  int v62 = operator new(4uLL);
  *(void *)std::vector<int>::value_type __x = v62;
  *int v62 = v61;
  long long v74 = v62 + 1;
  uint64_t v75 = v62 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v85, (uint64_t)__x);
  if (*(void *)__x)
  {
    long long v74 = *(void **)__x;
    operator delete(*(void **)__x);
  }
  *(void *)std::vector<int>::value_type __x = &v85;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  mlx::core::array::~array((mlx::core::array *)&v86);
  mlx::core::array::~array((mlx::core::array *)&v69);
  mlx::core::array::~array((mlx::core::array *)&v68);
  mlx::core::array::~array((mlx::core::array *)&v67);
}

void sub_256F357E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  std::vector<int>::pointer v34 = *(void **)(v32 - 160);
  if (v34)
  {
    *(void *)(v32 - 152) = v34;
    operator delete(v34);
  }
  if (v31) {
    operator delete(v31);
  }
  mlx::core::array::~array((mlx::core::array *)(v32 - 192));
  mlx::core::array::~array((mlx::core::array *)(v32 - 176));
  mlx::core::array::~array((mlx::core::array *)(v32 - 128));
  _Unwind_Resume(a1);
}

void std::tuple<mlx::core::array,mlx::core::array,mlx::core::array,int>::~tuple(uint64_t a1)
{
  mlx::core::array::~array((mlx::core::array *)(a1 + 32));
  mlx::core::array::~array((mlx::core::array *)(a1 + 16));
  mlx::core::array::~array((mlx::core::array *)a1);
}

uint64_t mlx::core::Negative::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Negative::jvp(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v8[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::Negative::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Negative::jvp();
  }
  mlx::core::negative(*a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v8);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = operator new(0x10uLL);
  *a5 = v6;
  a5[1] = v6;
  a5[2] = v6 + 2;
  uint64_t v7 = v8[1];
  *uint64_t v6 = v8[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v6 + 2;
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_256F35A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Negative::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Negative::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Negative::vmap();
  }
  mlx::core::negative(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  long long v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F35B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = (mlx::core **)(a1 + 8);
  mlx::core::not_equal(v13, v14, *v7, *(unsigned int *)(a1 + 16) | 0x100000000, v17);
  long long v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  unint64_t v15 = (void **)&v10;
  char v16 = 0;
  uint64_t v8 = operator new(0x10uLL);
  long long v10 = v8;
  uint64_t v11 = v8;
  char v12 = v8 + 2;
  uint64_t v9 = v17[1];
  *uint64_t v8 = v17[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v8 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v10, (uint64_t)a3);
  unint64_t v15 = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v15);
  mlx::core::array::~array((mlx::core::array *)v17);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F35CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)(v6 - 72));
  mlx::core::array::~array(v5);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::vjp(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      mlx::core::zeros_like((uint64_t *)(*a2 + 16 * *v4), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v9);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, (uint64_t)v9);
      mlx::core::array::~array((mlx::core::array *)v9);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F35DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void mlx::core::NotEqual::jvp(uint64_t a1@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  void v10[2] = *MEMORY[0x263EF8340];
  mlx::core::broadcast_shapes(**a2, (*a2)[2], &__p);
  mlx::core::zeros((uint64_t)&__p, 0x100000000, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v8 = a3;
  char v9 = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  uint64_t v6 = v10[1];
  void *v5 = v10[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v10);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_256F35ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Pad::vjp(uint64_t a1@<X0>, const void ****a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  void v27[2] = *MEMORY[0x263EF8340];
  if (a3[1] - *a3 != 4 || *(_DWORD *)*a3) {
    mlx::core::Pad::vjp();
  }
  uint64_t v6 = *a2;
  std::vector<int>::size_type v7 = ((unsigned char *)(**a2)[1] - (unsigned char *)***a2) >> 2;
  __x[0] = 0;
  std::vector<int>::vector(&v24, v7, __x);
  uint64_t v8 = *v6;
  *(void *)std::vector<int>::value_type __x = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *v8, (uint64_t)v8[1], ((unsigned char *)v8[1] - (unsigned char *)*v8) >> 2);
  char v9 = *(int **)(a1 + 24);
  uint64_t v10 = *(int **)(a1 + 32);
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    std::vector<int>::pointer begin = v24.__begin_;
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(_DWORD **)__x;
    do
    {
      uint64_t v15 = *v9++;
      begin[v15] = *(_DWORD *)(v11 + 4 * v15);
      v14[v15] -= *(_DWORD *)(v13 + 4 * v15);
    }
    while (v9 != v10);
  }
  mlx::core::slice(v6, (uint64_t)&v24, (uint64_t)__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
  int v17 = v19;
  uint64_t v16 = v20;
  v27[0] = v19;
  v27[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v25 = a4;
  char v26 = 0;
  uint64_t v18 = operator new(0x10uLL);
  *a4 = v18;
  a4[1] = v18;
  a4[2] = v18 + 2;
  *uint64_t v18 = v17;
  v18[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v18 + 2;
  mlx::core::array::~array((mlx::core::array *)v27);
  mlx::core::array::~array((mlx::core::array *)&v19);
  if (*(void *)__x)
  {
    int v22 = *(_DWORD **)__x;
    operator delete(*(void **)__x);
  }
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
}

void sub_256F360B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  mlx::core::array::~array((mlx::core::array *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Pad::jvp(uint64_t a1@<X0>, const void ****a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (a3[1] - *a3 != 4 || *(_DWORD *)*a3) {
    mlx::core::Pad::jvp();
  }
  uint64_t v6 = *a2;
  mlx::core::array::array<int>(v9, 0, (uint64_t)(**a2)[7]);
  mlx::core::pad(v6, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72), v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  void v9[2] = (int **)a4;
  char v10 = 0;
  std::vector<int>::size_type v7 = operator new(0x10uLL);
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v7 + 2;
  uint64_t v8 = v11[1];
  void *v7 = v11[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a4 + 8) = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_256F3621C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Pad::vmap()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "Pad vmap is NYI.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256F36298(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Pad::is_equivalent(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[3];
  size_t v5 = a2[4] - (void)v4;
  uint64_t v6 = (const void *)a1[3];
  if (v5 == a1[4] - (void)v6
    && !memcmp(v4, v6, v5)
    && (v7 = (const void *)a2[6], v8 = a2[7] - (void)v7, char v9 = (const void *)a1[6], v8 == a1[7] - (void)v9)
    && !memcmp(v7, v9, v8)
    && (char v10 = (const void *)a2[9], v11 = a2[10] - (void)v10, v12 = (const void *)a1[9], v11 == a1[10] - (void)v12))
  {
    return memcmp(v10, v12, v11) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlx::core::Partition::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Partition::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Partition::jvp();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 16) {
    mlx::core::Partition::jvp();
  }
  uint64_t v6 = (int *)(a1 + 24);
  mlx::core::argpartition(*(std::string::size_type **)a2, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::take_along_axis(*(mlx::core::array **)a3, v12, *v6, *((mlx::core **)v6 - 2), *(v6 - 2) | 0x100000000, &v10);
  size_t v8 = v10;
  uint64_t v7 = v11;
  v14[0] = v10;
  v14[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  void v12[2] = a4;
  char v13 = 0;
  char v9 = operator new(0x10uLL);
  *a4 = v9;
  a4[1] = v9;
  a4[2] = v9 + 2;
  *char v9 = v8;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)&v10);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_256F364AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  char v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Partition::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(const void ****)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Partition::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 4) {
    mlx::core::Partition::vmap();
  }
  int v8 = **(_DWORD **)a3;
  int v9 = *(_DWORD *)(a1 + 24);
  if (v8 >= 0 && v8 <= v9) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 24);
  }
  mlx::core::partition(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = (void **)&v14;
  char v18 = 0;
  uint64_t v12 = operator new(0x10uLL);
  uint64_t v14 = v12;
  uint64_t v15 = v12;
  uint64_t v16 = v12 + 2;
  uint64_t v13 = v19[1];
  void *v12 = v19[0];
  v12[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, a3);
  int v17 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_256F3660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Partition::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Power::vjp(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, void **a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v6 = *(_DWORD **)a4;
  uint64_t v7 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v7)
  {
    do
    {
      if (*v6)
      {
        uint64_t v13 = *a5;
        mlx::core::log(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
        mlx::core::multiply(v21, *a5, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
        mlx::core::array::~array((mlx::core::array *)v21);
        mlx::core::array::array<float>(v20, *(void *)(*v13 + 56), 0.0);
        mlx::core::where(v13, &v22, v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v21);
        mlx::core::array::~array((mlx::core::array *)v21);
        mlx::core::array::~array((mlx::core::array *)v20);
        uint64_t v14 = (mlx::core::array *)&v22;
      }
      else
      {
        uint64_t v15 = (uint64_t)*a2;
        mlx::core::array::array<int>(v19, 1, *(void *)(**a2 + 56));
        mlx::core::subtract((void *)(v15 + 16), v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
        mlx::core::power((const void ***)v15, (const void ***)v20, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
        mlx::core::multiply(v21, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&v22);
        mlx::core::array::~array((mlx::core::array *)&v22);
        mlx::core::array::~array((mlx::core::array *)v21);
        mlx::core::array::~array((mlx::core::array *)v20);
        uint64_t v14 = (mlx::core::array *)v19;
      }
      mlx::core::array::~array(v14);
      mlx::core::multiply(*a3, (void *)(*(void *)(a6 + 8) - 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v22);
      uint64_t v16 = *(void *)(a6 + 8);
      long long v17 = v22;
      long long v22 = 0uLL;
      char v18 = *(std::__shared_weak_count **)(v16 - 8);
      *(_OWORD *)(v16 - 16) = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      mlx::core::array::~array((mlx::core::array *)&v22);
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_256F36858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
}

void mlx::core::Power::jvp(uint64_t a1@<X0>, const void ****a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  mlx::core::power(*a2, *a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v20);
  int v11 = v20;
  char v10 = v21;
  v22[0] = v20;
  v22[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit(v21 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v17 = 0;
  uint64_t v23 = &v15;
  LOBYTE(v24) = 0;
  uint64_t v12 = (void **)operator new(0x10uLL);
  uint64_t v15 = v12;
  long long v17 = (char *)(v12 + 2);
  void *v12 = v11;
  v12[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (char *)(v12 + 2);
  (*(void (**)(long long *__return_ptr, uint64_t, const void ****, uint64_t, void *, void ***))(*(void *)a1 + 24))(&v18, a1, a2, a3, a4, &v15);
  uint64_t v23 = &v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  mlx::core::array::~array((mlx::core::array *)v22);
  if (a4[1] - *a4 < 5uLL)
  {
    *(_OWORD *)a5 = v18;
    *(void *)(a5 + 16) = v19;
    uint64_t v19 = 0;
    long long v18 = 0uLL;
  }
  else
  {
    mlx::core::add((void *)v18, (void *)(v18 + 16), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v23);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    uint64_t v15 = (void **)a5;
    LOBYTE(v16) = 0;
    uint64_t v13 = operator new(0x10uLL);
    *(void *)a5 = v13;
    *(void *)(a5 + 8) = v13;
    *(void *)(a5 + 16) = v13 + 2;
    uint64_t v14 = v24;
    void *v13 = v23;
    v13[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a5 + 8) = v13 + 2;
    mlx::core::array::~array((mlx::core::array *)&v23);
  }
  uint64_t v15 = (void **)&v18;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v15);
  mlx::core::array::~array((mlx::core::array *)&v20);
}

void sub_256F36ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va3);
  va_copy((va_list)v3, va1);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va2);
  _Unwind_Resume(a1);
}

void mlx::core::Power::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::power(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<int> __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  std::vector<int> __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  uint64_t v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F36C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::RandomBits::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  if (a2[1] - *a2 != 16) {
    mlx::core::RandomBits::vmap();
  }
  uint64_t v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 4) {
    mlx::core::RandomBits::vmap();
  }
  uint64_t v8 = *(void **)v5;
  uint64_t v9 = *(void *)(v5 + 8);
  *(void *)&long long v42 = v8;
  *((void *)&v42 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
  }
  unsigned int v10 = *v6;
  std::vector<int>::size_type v11 = (uint64_t)(v8[1] - *v8) >> 2;
  if (v11 - 1 == *v6)
  {
    std::vector<int>::vector(&v41, v11);
    uint64_t v12 = (int)v10;
    std::vector<int>::pointer begin = v41.__begin_;
    std::vector<int>::pointer end = v41.__end_;
    if (v41.__begin_ != v41.__end_)
    {
      int v15 = 0;
      std::vector<int>::pointer v16 = v41.__begin_;
      do
        *v16++ = v15++;
      while (v16 != end);
    }
    --v10;
    int v17 = begin[v12];
    begin[v12] = begin[v10];
    begin[v10] = v17;
    std::vector<int>::const_iterator v39 = 0;
    uint64_t v40 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)end, end - begin);
    mlx::core::transpose((uint64_t **)&v42, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v31);
    long long v18 = v31;
    long long v31 = 0uLL;
    int v19 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    long long v42 = v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    mlx::core::array::~array((mlx::core::array *)&v31);
    if (__p)
    {
      std::vector<int>::const_iterator v39 = __p;
      operator delete(__p);
    }
    if (v41.__begin_)
    {
      v41.__end_ = v41.__begin_;
      operator delete(v41.__begin_);
    }
  }
  memset(&v41, 0, sizeof(v41));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  if ((v10 & 0x80000000) == 0)
  {
    v20.__i_ = &v41.__begin_[v10];
    std::vector<int>::insert(&v41, v20, (std::vector<int>::const_reference)(*(void *)v42 + 4 * v10));
  }
  int v21 = *(_DWORD *)(a1 + 48);
  memset(v36, 0, sizeof(v36));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v36, v41.__begin_, (uint64_t)v41.__end_, v41.__end_ - v41.__begin_);
  if (v21 == 1) {
    uint64_t v22 = 0x100000001;
  }
  else {
    uint64_t v22 = 0x400000002;
  }
  std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream const&,std::vector<int> &,int &,void>((uint64_t *)(a1 + 8), (uint64_t)&v41, (int *)(a1 + 48), v29);
  long long v35 = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v23 = v42;
  long long v43 = v42;
  if (*((void *)&v42 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v33 = 0uLL;
  std::vector<int>::pointer v34 = 0;
  *(void *)&long long v31 = &v33;
  BYTE8(v31) = 0;
  uint64_t v24 = operator new(0x10uLL);
  *(void *)&long long v33 = v24;
  *((void *)&v33 + 1) = v24;
  std::vector<int>::pointer v34 = v24 + 2;
  uint64_t v25 = *((void *)&v43 + 1);
  void *v24 = v23;
  v24[1] = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v33 + 1) = v24 + 2;
  mlx::core::array::array(&v37, (long long *)v36, v22, &v35, &v33);
  *(void *)&long long v31 = &v33;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  mlx::core::array::~array((mlx::core::array *)&v43);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (v29[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  long long v26 = v37;
  long long v43 = v37;
  if (*((void *)&v37 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  v29[0] = &v31;
  LOBYTE(v29[1]) = 0;
  long long v27 = operator new(0x10uLL);
  *(void *)&long long v31 = v27;
  uint64_t v32 = v27 + 1;
  _OWORD *v27 = v26;
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v31 + 1) = v27 + 1;
  float v28 = operator new(4uLL);
  v29[0] = v28;
  *float v28 = v10;
  v29[1] = v28 + 1;
  int v30 = v28 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&v31, (uint64_t)v29);
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  v29[0] = &v31;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  mlx::core::array::~array((mlx::core::array *)&v43);
  mlx::core::array::~array((mlx::core::array *)&v37);
  if (v41.__begin_)
  {
    v41.__end_ = v41.__begin_;
    operator delete(v41.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v42);
}

void sub_256F37080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  int v30 = *(void **)(v28 - 120);
  if (v30)
  {
    *(void *)(v28 - 112) = v30;
    operator delete(v30);
  }
  mlx::core::array::~array((mlx::core::array *)(v28 - 96));
  _Unwind_Resume(a1);
}

BOOL mlx::core::RandomBits::is_equivalent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(const void **)(a1 + 24);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 24;
  uint64_t v5 = *(const void **)(a2 + 24);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::Reshape::vmap(uint64_t a1@<X0>, const void ****a2@<X1>, std::vector<int>::value_type **a3@<X2>, uint64_t a4@<X8>)
{
  void v40[2] = *(const void ***)MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  std::vector<int>::value_type __x = **a3;
  if (__x < 0)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
    mlx::core::reshape(v6, (uint64_t)&v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v37);
    memset(&v35, 0, sizeof(v35));
    uint64_t v28 = &v35;
    LOBYTE(v29) = 0;
    long long v18 = (int *)operator new(0x10uLL);
    v35.__begin_ = v18;
    v35.__end_ = v18;
    v35.__end_cap_.__value_ = v18 + 4;
    int v19 = v38;
    *(void *)long long v18 = v37;
    *((void *)v18 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    }
    v35.__end_ = v18 + 4;
    std::vector<int>::value_type v20 = __x;
    int v21 = operator new(4uLL);
    uint64_t v28 = v21;
    *int v21 = v20;
    int v29 = v21 + 1;
    int v30 = (const void ***)(v21 + 1);
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v35, (uint64_t)&v28);
    if (v28)
    {
      int v29 = v28;
      operator delete(v28);
    }
    uint64_t v28 = &v35;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    mlx::core::array::~array((mlx::core::array *)&v37);
    int v17 = v22;
    if (v22)
    {
      uint64_t v23 = v22;
      goto LABEL_23;
    }
  }
  else
  {
    std::vector<int>::vector(&v35, ((unsigned char *)(*v6)[1] - (unsigned char *)**v6) >> 2);
    v7.__i_ = v35.__begin_;
    std::vector<int>::pointer end = v35.__end_;
    if (v35.__begin_ != v35.__end_)
    {
      int v9 = 0;
      std::vector<int>::pointer begin = v35.__begin_;
      do
        *begin++ = v9++;
      while (begin != end);
    }
    std::vector<int>::size_type v11 = &v7.__i_[__x];
    int64_t v12 = (char *)end - (char *)(v11 + 1);
    if (end != v11 + 1)
    {
      memmove((void *)&v7.__i_[__x], v11 + 1, (char *)end - (char *)(v11 + 1));
      v7.__i_ = v35.__begin_;
    }
    v35.__end_ = (std::vector<int>::pointer)((char *)v11 + v12);
    std::vector<int>::insert(&v35, v7, &__x);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<int> __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v35.__begin_, (uint64_t)v35.__end_, v35.__end_ - v35.__begin_);
    mlx::core::transpose((uint64_t **)v6, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v34);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    v13.__i_ = *(std::__wrap_iter<const int *>::iterator_type *)(a1 + 24);
    std::vector<int>::insert((std::vector<int> *)(a1 + 24), v13, (std::vector<int>::const_reference)**v6 + __x);
    long long v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
    mlx::core::reshape(v34, (uint64_t)&v25, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v40);
    uint64_t v28 = 0;
    int v29 = 0;
    int v30 = 0;
    long long v37 = &v28;
    LOBYTE(v38) = 0;
    uint64_t v14 = (const void ***)operator new(0x10uLL);
    uint64_t v28 = v14;
    int v29 = v14;
    int v30 = v14 + 2;
    int v15 = v40[1];
    *uint64_t v14 = v40[0];
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
    }
    int v29 = v14 + 2;
    std::vector<int>::pointer v16 = (void **)operator new(4uLL);
    long long v37 = v16;
    *(_DWORD *)std::vector<int>::pointer v16 = 0;
    std::vector<int>::pointer v38 = (void **)((char *)v16 + 4);
    std::vector<int>::const_iterator v39 = (char *)v16 + 4;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&v28, (uint64_t)&v37);
    if (v37)
    {
      std::vector<int>::pointer v38 = v37;
      operator delete(v37);
    }
    long long v37 = &v28;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v37);
    mlx::core::array::~array((mlx::core::array *)v40);
    if (v25)
    {
      long long v26 = v25;
      operator delete(v25);
    }
    mlx::core::array::~array((mlx::core::array *)v34);
    int v17 = v35.__begin_;
    if (v35.__begin_)
    {
      v35.__end_ = v35.__begin_;
LABEL_23:
      operator delete(v17);
    }
  }
}

void sub_256F374D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a23;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v24 - 96));
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::vjp(uint64_t a1@<X0>, uint64_t **a2@<X1>, const void ****a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v16[2] = *(const void ***)MEMORY[0x263EF8340];
  if ((char *)a2[1] - (char *)*a2 != 16) {
    mlx::core::Reshape::vjp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Reshape::vjp();
  }
  if (*(_DWORD *)*a4) {
    mlx::core::Reshape::vjp();
  }
  std::vector<int>::const_iterator v7 = *a3;
  uint64_t v8 = **a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<int> __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  mlx::core::reshape(v7, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v14 = a5;
  char v15 = 0;
  int v9 = operator new(0x10uLL);
  *a5 = v9;
  a5[1] = v9;
  a5[2] = v9 + 2;
  unsigned int v10 = v16[1];
  *int v9 = v16[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  }
  a5[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v16);
  if (__p)
  {
    int64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_256F37710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Reshape::jvp(uint64_t a1@<X0>, void *a2@<X1>, const void ****a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v15[2] = *(const void ***)MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::Reshape::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Reshape::jvp();
  }
  if (*(_DWORD *)*a4) {
    mlx::core::Reshape::jvp();
  }
  std::vector<int>::const_iterator v7 = *a3;
  std::vector<int>::size_type v11 = 0;
  uint64_t v12 = 0;
  std::vector<int> __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  mlx::core::reshape(v7, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v15);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v13 = a5;
  char v14 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  int v9 = v15[1];
  *uint64_t v8 = v15[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v15);
  if (__p)
  {
    std::vector<int>::size_type v11 = __p;
    operator delete(__p);
  }
}

void sub_256F37880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Reshape::is_equivalent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(const void **)(a1 + 24);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 24;
  uint64_t v5 = *(const void **)(a2 + 24);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::Reduce::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, const void ****a3@<X2>, uint64_t **a4@<X4>, void *a5@<X8>)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  int v9 = **a2;
  unsigned int v10 = (*a2)[1];
  v134[0] = v9;
  v134[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v131, (const void *)*v9, v9[1], (v9[1] - *v9) >> 2);
  std::vector<int>::size_type v11 = *(int **)(a1 + 24);
  uint64_t v12 = *(int **)(a1 + 32);
  if (v11 != v12)
  {
    uint64_t v13 = v131;
    char v14 = *(int **)(a1 + 24);
    do
    {
      uint64_t v15 = *v14++;
      v13[v15] = 1;
    }
    while (v14 != v12);
  }
  std::vector<int>::pointer v16 = *a3;
  int v17 = *(_DWORD *)(a1 + 20);
  if ((v17 - 4) < 2)
  {
    uint64_t v45 = **a4;
    uint64_t v46 = (*a4)[1];
    v138.__begin_ = (std::vector<int>::pointer)v45;
    v138.__end_ = (std::vector<int>::pointer)v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(void *)(v45 + 8) - *(void *)v45 != v134[0][1] - *v134[0])
    {
      mlx::core::expand_dims((const void ***)&v138, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__p);
      long long v47 = __p;
      long long __p = 0uLL;
      std::vector<int>::pointer end = (std::__shared_weak_count *)v138.__end_;
      *(_OWORD *)&v138.__begin_ = v47;
      if (end) {
        std::__shared_weak_count::__release_shared[abi:ne180100](end);
      }
      mlx::core::array::~array((mlx::core::array *)&__p);
    }
    mlx::core::equal(v134, &v138, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v120);
    mlx::core::sum((uint64_t)&v120, a1 + 24, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)&v114);
    int v96 = 0;
    uint64_t v97 = 0;
    uint64_t v95 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v95, v131, (uint64_t)v132, (v132 - (unsigned char *)v131) >> 2);
    mlx::core::reshape(v16, (uint64_t)&v95, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v135);
    if (v95)
    {
      int v96 = v95;
      operator delete(v95);
    }
    mlx::core::divide(&v135, &v114, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
    long long v49 = __p;
    long long __p = 0uLL;
    int v50 = (std::__shared_weak_count *)*((void *)&v135 + 1);
    long long v135 = v49;
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    mlx::core::array::~array((mlx::core::array *)&__p);
    mlx::core::multiply(&v135, &v120, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v137);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(void *)&long long __p = a5;
    BYTE8(__p) = 0;
    std::vector<int>::pointer v51 = operator new(0x10uLL);
    *a5 = v51;
    a5[1] = v51;
    a5[2] = v51 + 2;
    uint64_t v52 = *((void *)&v137 + 1);
    void *v51 = v137;
    v51[1] = v52;
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    a5[1] = v51 + 2;
    mlx::core::array::~array((mlx::core::array *)&v137);
    mlx::core::array::~array((mlx::core::array *)&v135);
    mlx::core::array::~array((mlx::core::array *)&v114);
    mlx::core::array::~array((mlx::core::array *)&v120);
    mlx::core::array::~array((mlx::core::array *)&v138);
    goto LABEL_142;
  }
  if (v17 == 2)
  {
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    unint64_t v128 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v128, v131, (uint64_t)v132, (v132 - (unsigned char *)v131) >> 2);
    mlx::core::reshape(v16, (uint64_t)&v128, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v120);
    mlx::core::broadcast_to((const void ***)&v120, (const void **)v134[0], *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v138);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(void *)&long long __p = a5;
    BYTE8(__p) = 0;
    long long v53 = operator new(0x10uLL);
    *a5 = v53;
    a5[1] = v53;
    a5[2] = v53 + 2;
    std::vector<int>::pointer v54 = v138.__end_;
    *long long v53 = v138.__begin_;
    v53[1] = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
    }
    a5[1] = v53 + 2;
    mlx::core::array::~array((mlx::core::array *)&v138);
    mlx::core::array::~array((mlx::core::array *)&v120);
    std::vector<int>::pointer v55 = v128;
    if (!v128) {
      goto LABEL_142;
    }
    uint64_t v129 = v128;
LABEL_141:
    operator delete(v55);
    goto LABEL_142;
  }
  if (v17 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "Reduce type VJP not yet implemented.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v126 = *(mlx::core **)(a1 + 8);
  unsigned int v127 = *(_DWORD *)(a1 + 16);
  uint64_t v125 = &v126;
  if ((unint64_t)((char *)v12 - (char *)v11) < 5)
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v98 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v98, v131, (uint64_t)v132, (v132 - (unsigned char *)v131) >> 2);
    mlx::core::reshape(v16, (uint64_t)&v98, v126, v127 | 0x100000000, (const void ***)&v120);
    mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v125, (const void ***)v134, &v120, **(_DWORD **)(a1 + 24), &v138);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *(void *)&long long __p = a5;
    BYTE8(__p) = 0;
    std::vector<int>::pointer v56 = operator new(0x10uLL);
    *a5 = v56;
    a5[1] = v56;
    a5[2] = v56 + 2;
    std::vector<int>::pointer v57 = v138.__end_;
    *std::vector<int>::pointer v56 = v138.__begin_;
    v56[1] = v57;
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v57 + 1, 1uLL, memory_order_relaxed);
    }
    a5[1] = v56 + 2;
    mlx::core::array::~array((mlx::core::array *)&v138);
    mlx::core::array::~array((mlx::core::array *)&v120);
    std::vector<int>::pointer v55 = v98;
    if (!v98) {
      goto LABEL_142;
    }
    uint64_t v99 = v98;
    goto LABEL_141;
  }
  int v94 = v16;
  long long __p = 0uLL;
  uint64_t v124 = 0;
  memset(&v138, 0, sizeof(v138));
  std::vector<int>::pointer v121 = 0;
  unint64_t v122 = 0;
  long long v120 = 0;
  long long v18 = v134[0];
  uint64_t v19 = *v134[0];
  if (v134[0][1] == *v134[0])
  {
    std::vector<int>::value_type v20 = 0;
  }
  else
  {
    std::vector<int>::value_type v20 = 0;
    unint64_t v21 = 0;
    int v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(a1 + 24);
      if (v22 < (unint64_t)((*(void *)(a1 + 32) - v23) >> 2) && v21 == *(_DWORD *)(v23 + 4 * v22))
      {
        ++v22;
      }
      else
      {
        uint64_t v24 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) >= (unint64_t)v124)
        {
          long long v26 = (char *)__p;
          uint64_t v27 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = (uint64_t)&v124[-__p];
          if ((uint64_t)&v124[-__p] >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124, v30);
            uint64_t v24 = (char *)*((void *)&__p + 1);
            long long v26 = (char *)__p;
          }
          else
          {
            long long v31 = 0;
          }
          uint64_t v32 = &v31[4 * v27];
          *(_DWORD *)uint64_t v32 = v21;
          uint64_t v25 = v32 + 4;
          while (v24 != v26)
          {
            int v33 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          *(void *)&long long __p = v32;
          *((void *)&__p + 1) = v25;
          uint64_t v124 = &v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          **((_DWORD **)&__p + 1) = v21;
          uint64_t v25 = v24 + 4;
        }
        *((void *)&__p + 1) = v25;
        int v34 = mlx::core::array::shape((mlx::core::array *)v134, v21);
        int v35 = v34;
        std::vector<int>::pointer v36 = v121;
        if ((unint64_t)v121 >= v122)
        {
          long long v37 = v120;
          uint64_t v38 = ((char *)v121 - (unsigned char *)v120) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v122 - (void)v120;
          if ((uint64_t)(v122 - (void)v120) >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122, v41);
            long long v37 = v120;
            std::vector<int>::pointer v36 = v121;
          }
          else
          {
            long long v42 = 0;
          }
          long long v43 = &v42[4 * v38];
          *(_DWORD *)long long v43 = v35;
          std::vector<int>::value_type v20 = v43 + 4;
          while (v36 != v37)
          {
            int v44 = *--v36;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          long long v120 = v43;
          std::vector<int>::pointer v121 = v20;
          unint64_t v122 = (unint64_t)&v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          _DWORD *v121 = v34;
          std::vector<int>::value_type v20 = v36 + 1;
        }
        std::vector<int>::pointer v121 = v20;
        long long v18 = v134[0];
        uint64_t v19 = *v134[0];
      }
      ++v21;
    }
    while (v21 < (v18[1] - v19) >> 2);
    std::vector<int>::size_type v11 = *(int **)(a1 + 24);
    uint64_t v12 = *(int **)(a1 + 32);
  }
  if (v11 != v12)
  {
    uint64_t v58 = (char *)*((void *)&__p + 1);
    do
    {
      int v59 = *v11;
      if (v58 >= v124)
      {
        int v61 = (char *)__p;
        uint64_t v62 = (uint64_t)&v58[-__p] >> 2;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = (uint64_t)&v124[-__p];
        if ((uint64_t)&v124[-__p] >> 1 > v63) {
          unint64_t v63 = v64 >> 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124, v65);
          uint64_t v58 = (char *)*((void *)&__p + 1);
          int v61 = (char *)__p;
        }
        else
        {
          uint64_t v66 = 0;
        }
        long long v67 = &v66[4 * v62];
        *(_DWORD *)long long v67 = v59;
        uint64_t v60 = v67 + 4;
        while (v58 != v61)
        {
          int v68 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        *(void *)&long long __p = v67;
        *((void *)&__p + 1) = v60;
        uint64_t v124 = &v66[4 * v65];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v58 = v59;
        uint64_t v60 = v58 + 4;
      }
      *((void *)&__p + 1) = v60;
      ++v11;
      uint64_t v58 = v60;
    }
    while (v11 != v12);
    std::vector<int>::value_type v20 = v121;
  }
  if ((unint64_t)v20 >= v122)
  {
    int v70 = v120;
    uint64_t v71 = ((char *)v20 - (unsigned char *)v120) >> 2;
    unint64_t v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v73 = v122 - (void)v120;
    if ((uint64_t)(v122 - (void)v120) >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122, v74);
      int v70 = v120;
      std::vector<int>::value_type v20 = v121;
    }
    else
    {
      uint64_t v75 = 0;
    }
    long long v76 = &v75[4 * v71];
    long long v77 = &v75[4 * v74];
    *(_DWORD *)long long v76 = -1;
    long long v69 = v76 + 4;
    while (v20 != v70)
    {
      int v78 = *--v20;
      *((_DWORD *)v76 - 1) = v78;
      v76 -= 4;
    }
    long long v120 = v76;
    std::vector<int>::pointer v121 = v69;
    unint64_t v122 = (unint64_t)v77;
    if (v70) {
      operator delete(v70);
    }
  }
  else
  {
    *std::vector<int>::value_type v20 = -1;
    long long v69 = v20 + 1;
  }
  std::vector<int>::pointer v121 = v69;
  std::vector<int>::resize(&v138, (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
  long long v79 = __p;
  unint64_t v80 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
  if (*((void *)&__p + 1) != (void)__p)
  {
    uint64_t v81 = 0;
    std::vector<int>::pointer begin = v138.__begin_;
    if (v80 <= 1) {
      uint64_t v83 = 1;
    }
    else {
      uint64_t v83 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
    }
    do
    {
      begin[*(int *)(v79 + 4 * v81)] = v81;
      ++v81;
    }
    while (v83 != v81);
  }
  long long v118 = 0;
  uint64_t v119 = 0;
  long long v117 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v117, (const void *)v79, *((uint64_t *)&v79 + 1), v80);
  mlx::core::transpose(v134, (unsigned int **)&v117, v126, v127 | 0x100000000, &v137);
  if (v117)
  {
    long long v118 = v117;
    operator delete(v117);
  }
  unint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v114 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v114, *(const void **)v137, *(void *)(v137 + 8), (uint64_t)(*(void *)(v137 + 8) - *(void *)v137) >> 2);
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  long long v111 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v111, v120, (uint64_t)v121, ((char *)v121 - (unsigned char *)v120) >> 2);
  mlx::core::reshape((const void ***)&v137, (uint64_t)&v111, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v135);
  long long v84 = v135;
  long long v135 = 0uLL;
  std::vector<int> v85 = (std::__shared_weak_count *)*((void *)&v137 + 1);
  long long v137 = v84;
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  mlx::core::array::~array((mlx::core::array *)&v135);
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  long long v107 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v107, v120, (uint64_t)v121, ((char *)v121 - (unsigned char *)v120) >> 2);
  mlx::core::reshape(v94, (uint64_t)&v107, v126, v127 | 0x100000000, (const void ***)&v135);
  mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v125, (const void ***)&v137, &v135, -1, &v110);
  mlx::core::array::~array((mlx::core::array *)&v135);
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
  int64_t v105 = 0;
  uint64_t v106 = 0;
  int64_t v104 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v104, v114, (uint64_t)v115, (v115 - (unsigned char *)v114) >> 2);
  mlx::core::reshape((const void ***)&v110, (uint64_t)&v104, v126, v127 | 0x100000000, (const void ***)&v135);
  long long v86 = v135;
  long long v135 = 0uLL;
  uint64_t v87 = (std::__shared_weak_count *)*((void *)&v110 + 1);
  long long v110 = v86;
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  mlx::core::array::~array((mlx::core::array *)&v135);
  if (v104)
  {
    int64_t v105 = v104;
    operator delete(v104);
  }
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  int64_t v101 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v101, v138.__begin_, (uint64_t)v138.__end_, v138.__end_ - v138.__begin_);
  mlx::core::transpose((uint64_t **)&v110, (unsigned int **)&v101, v126, v127 | 0x100000000, &v135);
  long long v88 = v135;
  long long v135 = 0uLL;
  uint64_t v89 = (std::__shared_weak_count *)*((void *)&v110 + 1);
  long long v110 = v88;
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  mlx::core::array::~array((mlx::core::array *)&v135);
  if (v101)
  {
    unint64_t v102 = v101;
    operator delete(v101);
  }
  uint64_t v90 = v110;
  long long v136 = v110;
  if (*((void *)&v110 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v110 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *(void *)&long long v135 = a5;
  BYTE8(v135) = 0;
  uint64_t v91 = operator new(0x10uLL);
  *a5 = v91;
  a5[1] = v91;
  a5[2] = v91 + 2;
  uint64_t v92 = *((void *)&v136 + 1);
  *uint64_t v91 = v90;
  v91[1] = v92;
  if (v92) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v91 + 2;
  mlx::core::array::~array((mlx::core::array *)&v136);
  mlx::core::array::~array((mlx::core::array *)&v110);
  if (v114)
  {
    unint64_t v115 = v114;
    operator delete(v114);
  }
  mlx::core::array::~array((mlx::core::array *)&v137);
  if (v120)
  {
    std::vector<int>::pointer v121 = v120;
    operator delete(v120);
  }
  if (v138.__begin_)
  {
    v138.__end_ = v138.__begin_;
    operator delete(v138.__begin_);
  }
  std::vector<int>::pointer v55 = (void *)__p;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    goto LABEL_141;
  }
LABEL_142:
  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }
  mlx::core::array::~array((mlx::core::array *)v134);
}

void sub_256F38438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  long long v42 = *(void **)(v40 - 128);
  if (v42)
  {
    *(void *)(v40 - 120) = v42;
    operator delete(v42);
  }
  if (a39) {
    operator delete(a39);
  }
  long long v43 = *(void **)(v40 - 216);
  if (v43)
  {
    *(void *)(v40 - 208) = v43;
    operator delete(v43);
  }
  mlx::core::array::~array((mlx::core::array *)(v40 - 192));
  _Unwind_Resume(a1);
}

void mlx::core::Reduce::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(mlx::core ***a1@<X0>, const void ***a2@<X1>, void *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  mlx::core::cumprod(a2, a4, 0, 0, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v12);
  mlx::core::cumprod(a2, a4, 1, 0, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v11);
  mlx::core::multiply(v12, v11, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, v10);
  mlx::core::multiply(v10, a3, **a1, *((unsigned int *)*a1 + 2) | 0x100000000, a5);
  mlx::core::array::~array((mlx::core::array *)v10);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_256F3878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void mlx::core::Reduce::vmap(uint64_t a1@<X0>, uint64_t ***a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = **a3;
  long long __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  if ((v8 & 0x80000000) == 0)
  {
    int v9 = __p;
    unsigned int v10 = v15;
    while (v9 != v10)
    {
      if (*v9 >= v8) {
        ++*v9;
      }
      ++v9;
    }
  }
  std::vector<int>::size_type v11 = *a2;
  memset(v13, 0, sizeof(v13));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      mlx::core::all((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 1:
      mlx::core::any((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 2:
      mlx::core::sum((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 3:
      mlx::core::prod((uint64_t)v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (mlx::core::array *)v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 4:
      mlx::core::min(v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
      goto LABEL_14;
    case 5:
      mlx::core::max(v11, (uint64_t)&__p, 1, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
      std::vector<mlx::core::array>::push_back[abi:ne180100](v13, (uint64_t)v12);
LABEL_14:
      mlx::core::array::~array((mlx::core::array *)v12);
      break;
    default:
      break;
  }
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(a4, (void **)v13, (uint64_t)a3);
  v12[0] = (uint64_t *)v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_256F389C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  a9 = &a11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Reduce::is_equivalent(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && (uint64_t v3 = a1 + 24,
        uint64_t v2 = *(const void **)(a1 + 24),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 24,
        uint64_t v5 = *(const void **)(a2 + 24),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Reduce::output_shapes(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v5 = **a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<int>::size_type v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v11, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  uint64_t v6 = *(int **)(a1 + 24);
  std::vector<int>::const_iterator v7 = *(int **)(a1 + 32);
  for (uint64_t i = v11; v6 != v7; i[v9] = 1)
    uint64_t v9 = *v6++;
  long long __p = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, i, (uint64_t)v12, (v12 - (unsigned char *)i) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v14 = a3;
  char v15 = 0;
  unsigned int v10 = operator new(0x18uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 3;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&v19, v10);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_256F38BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Round::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Round::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Round::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Round::jvp();
  }
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F38D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Round::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Round::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Round::vmap();
  }
  mlx::core::round(*(void **)a2, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  int v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  std::vector<int>::size_type v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  int v8 = v6;
  uint64_t v9 = v6;
  unsigned int v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  std::vector<int>::size_type v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F38E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::vmap(uint64_t a1@<X0>, uint64_t **a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v31[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = **a2;
  uint64_t v9 = *(void *)(v8 + 56);
  if (!v9 && *(_DWORD *)(a1 + 20) == 2) {
    uint64_t v9 = 0x400000004;
  }
  int v10 = **a3;
  BOOL v11 = (v10 & 0x80000000) == 0 && v10 <= *(_DWORD *)(a1 + 24);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  int v12 = *(_DWORD *)(a1 + 24);
  uint64_t v13 = operator new(0x38uLL);
  v13[1] = 0;
  void v13[2] = 0;
  void *v13 = &unk_270634900;
  uint64_t v14 = *(void *)(a1 + 8);
  __int16 v15 = *(_WORD *)(a1 + 28);
  void v13[3] = &unk_270636DA8;
  void v13[4] = v14;
  v13[5] = *(void *)(a1 + 16);
  *((_DWORD *)v13 + 12) = v12 + v11;
  *((_WORD *)v13 + 26) = v15;
  *(void *)&long long v23 = v13 + 3;
  *((void *)&v23 + 1) = v13;
  uint64_t v17 = *v7;
  uint64_t v16 = v7[1];
  v30[0] = *v7;
  v30[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  long long v21 = 0uLL;
  int v22 = 0;
  unint64_t v28 = (void **)&v21;
  char v29 = 0;
  uint64_t v18 = operator new(0x10uLL);
  *(void *)&long long v21 = v18;
  int v22 = v18 + 2;
  *uint64_t v18 = v17;
  v18[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v21 + 1) = v18 + 2;
  mlx::core::array::array(v31, (long long *)__p, v9, &v23, &v21);
  uint64_t v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = (void **)&v25;
  char v29 = 0;
  uint64_t v19 = operator new(0x10uLL);
  uint64_t v25 = v19;
  long long v26 = v19;
  uint64_t v27 = v19 + 2;
  uint64_t v20 = v31[1];
  *uint64_t v19 = v31[0];
  v19[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v26 = v19 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v25, (uint64_t)a3);
  unint64_t v28 = (void **)&v25;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v28);
  mlx::core::array::~array((mlx::core::array *)v31);
  unint64_t v28 = (void **)&v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v28);
  mlx::core::array::~array((mlx::core::array *)v30);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_256F390C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,char a22)
{
  a20 = (uint64_t *)v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)(v23 - 88));
  a20 = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  mlx::core::array::~array((mlx::core::array *)&a22);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Scan::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, const void ****a3@<X2>, _DWORD **a4@<X3>, uint64_t **a5@<X4>, void *a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Scan::vjp();
  }
  if (**a4) {
    mlx::core::Scan::vjp();
  }
  int v8 = *(_DWORD *)(a1 + 20);
  if (v8 == 3)
  {
    uint64_t v12 = (*a5)[1];
    uint64_t v21 = **a5;
    uint64_t v22 = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    mlx::core::multiply(&v21, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v17);
    mlx::core::cumsum(v17, *(_DWORD *)(a1 + 24), *(unsigned char *)(a1 + 28) == 0, *(unsigned char *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v16);
    mlx::core::divide(v16, *(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t v18 = a6;
    char v19 = 0;
    uint64_t v13 = operator new(0x10uLL);
    *a6 = v13;
    a6[1] = v13;
    a6[2] = v13 + 2;
    uint64_t v14 = v20[1];
    void *v13 = v20[0];
    v13[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    a6[1] = v13 + 2;
    mlx::core::array::~array((mlx::core::array *)v20);
    mlx::core::array::~array((mlx::core::array *)v16);
    mlx::core::array::~array((mlx::core::array *)v17);
  }
  else
  {
    if (v8 != 2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x25A2B1470](exception, "VJP is not implemented for cumulative min/max");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    mlx::core::cumsum(*a3, *(_DWORD *)(a1 + 24), *(unsigned char *)(a1 + 28) == 0, *(unsigned char *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v21);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t v18 = a6;
    char v19 = 0;
    uint64_t v9 = operator new(0x10uLL);
    *a6 = v9;
    a6[1] = v9;
    a6[2] = v9 + 2;
    uint64_t v10 = v22;
    *uint64_t v9 = v21;
    v9[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    a6[1] = v9 + 2;
  }
  mlx::core::array::~array((mlx::core::array *)&v21);
}

void sub_256F3936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::jvp(uint64_t a1@<X0>, uint64_t a2@<X2>, _DWORD **a3@<X3>, void *a4@<X8>)
{
  void v8[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Scan::jvp();
  }
  if (**a3) {
    mlx::core::Scan::jvp();
  }
  if (*(_DWORD *)(a1 + 20) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "JVP is not implemented for cumulative prod/min/max");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  mlx::core::cumsum(*(const void ****)a2, *(_DWORD *)(a1 + 24), *(unsigned char *)(a1 + 28), *(unsigned char *)(a1 + 29), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v8[1];
  void *v5 = v8[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v8);
}

void sub_256F39514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Scan::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
}

BOOL mlx::core::Scatter::is_equivalent(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && (uint64_t v3 = a1 + 24,
        uint64_t v2 = *(const void **)(a1 + 24),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 24,
        uint64_t v5 = *(const void **)(a2 + 24),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Scatter::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, mlx::core::array **a3@<X2>, int **a4@<X3>, mlx::core::array **a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= 3 && v7 != 4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25A2B1470](exception, "[scatter] VJP not implemented for scatter_prod");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v13 = (char *)(*(void *)(a2 + 8) - 16);
  std::vector<int>::pointer v36 = *(void **)a2;
  long long v37 = *a5;
  memset(v45, 0, sizeof(v45));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((char *)v45, v36 + 2, v13, (v13 - (char *)(v36 + 2)) >> 4);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  __int16 v15 = *a4;
  uint64_t v14 = a4[1];
  if (*a4 != v14)
  {
    do
    {
      uint64_t v16 = *v15;
      if (v16)
      {
        if (((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) - 1 != v16)
        {
          int v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v34, "[scatter] Cannot calculate VJP with respect to indices.");
          goto LABEL_36;
        }
        unsigned int v17 = *(_DWORD *)(a1 + 20);
        if (v17 < 2)
        {
          uint64_t v27 = *(void *)*a3;
          unint64_t v41 = 0;
          uint64_t v42 = 0;
          long long __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v27, *(void *)(v27 + 8), (uint64_t)(*(void *)(v27 + 8) - *(void *)v27) >> 2);
          unint64_t v28 = *(int **)(a1 + 24);
          char v29 = *(int **)(a1 + 32);
          if (v28 != v29)
          {
            unint64_t v30 = __p;
            do
            {
              uint64_t v31 = *v28++;
              v30[v31] = 1;
            }
            while (v28 != v29);
          }
          mlx::core::gather(*a3, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          mlx::core::gather(v37, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v43);
          mlx::core::equal(v43, v13, v32, 0, v38);
          mlx::core::multiply(v44, v38, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v39);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v39);
          mlx::core::array::~array((mlx::core::array *)v39);
          mlx::core::array::~array((mlx::core::array *)v38);
          mlx::core::array::~array((mlx::core::array *)v43);
        }
        else
        {
          if (v17 != 4 && v17 != 2)
          {
LABEL_35:
            int v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v34, "");
LABEL_36:
            v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v34, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
          }
          uint64_t v19 = *(void *)*a3;
          unint64_t v41 = 0;
          uint64_t v42 = 0;
          long long __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 2);
          uint64_t v20 = *(int **)(a1 + 24);
          uint64_t v21 = *(int **)(a1 + 32);
          if (v20 != v21)
          {
            uint64_t v22 = __p;
            do
            {
              uint64_t v23 = *v20++;
              v22[v23] = 1;
            }
            while (v20 != v21);
          }
          mlx::core::gather(*a3, (uint64_t *)v45, (int **)(a1 + 24), (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)v44);
        }
        mlx::core::array::~array((mlx::core::array *)v44);
        if (__p)
        {
          unint64_t v41 = __p;
          operator delete(__p);
        }
      }
      else
      {
        unsigned int v24 = *(_DWORD *)(a1 + 20);
        if (v24 < 2)
        {
          mlx::core::equal(v37, v36, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          int v33 = *a3;
          mlx::core::array::array<int>(v43, 0, *(void *)(*(void *)*a3 + 56));
          mlx::core::where(v44, v33, v43, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&__p);
          mlx::core::array::~array((mlx::core::array *)&__p);
          p_p = (void **)v43;
        }
        else
        {
          if (v24 == 2)
          {
            std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, *a3);
            goto LABEL_32;
          }
          if (v24 != 4) {
            goto LABEL_35;
          }
          uint64_t v25 = *a3;
          mlx::core::zeros_like((uint64_t *)v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v44);
          mlx::core::scatter(v25, v45, (mlx::core::array *)v44, (int **)(a1 + 24), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__p);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a6, (uint64_t)&__p);
          p_p = &__p;
        }
        mlx::core::array::~array((mlx::core::array *)p_p);
        mlx::core::array::~array((mlx::core::array *)v44);
      }
LABEL_32:
      ++v15;
    }
    while (v15 != v14);
  }
  long long __p = v45;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_256F39A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void mlx::core::Scatter::jvp()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x25A2B1470](exception, "[scatter] JVP not yet implemented");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_256F39B68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::vjp(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  void v13[2] = *(int ***)MEMORY[0x263EF8340];
  unsigned int v7 = *(void **)a3;
  mlx::core::array::array<float>(v13, *(void *)(**(void **)a3 + 56), 1.0);
  mlx::core::subtract(v13, v7, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v11);
  mlx::core::multiply(v7, &v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::array::~array((mlx::core::array *)&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::multiply(*a2, v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BOOL v11 = a4;
  char v12 = 0;
  int v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *int v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F39CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v14[2] = *(int ***)MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sigmoid::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Sigmoid::jvp();
  }
  mlx::core::sigmoid(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::array::array<float>(v14, *(void *)(v11[0] + 56), 1.0);
  mlx::core::subtract(v14, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v12);
  mlx::core::multiply(v11, &v12, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::array::~array((mlx::core::array *)&v12);
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::multiply(*a3, v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  char v12 = a5;
  char v13 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v14[1];
  *uint64_t v8 = v14[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)v10);
  mlx::core::array::~array((mlx::core::array *)v11);
}

void sub_256F39E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sigmoid::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sigmoid::vmap();
  }
  mlx::core::sigmoid(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F39FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sign::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Sign::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sign::jvp();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sign::jvp();
  }
  mlx::core::zeros(**(void **)a2, *(void *)(**(void **)a2 + 56), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = operator new(0x10uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  uint64_t v6 = v7[1];
  void *v5 = v7[0];
  v5[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v7);
}

void sub_256F3A124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sign::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sign::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sign::vmap();
  }
  mlx::core::sign(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3A258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sin::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Sin::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sin::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Sin::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::cos(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *uint64_t v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F3A3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sin::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sin::vmap();
  }
  mlx::core::sin(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3A508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sinh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Sinh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sinh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Sinh::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 8;
  mlx::core::cosh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::multiply(v6, v10, *(mlx::core **)v7, *(unsigned int *)(v7 + 8) | 0x100000000, v12);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  void v10[2] = a5;
  char v11 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v12[1];
  *uint64_t v8 = v12[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v12);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F3A674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sinh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sinh::vmap();
  }
  mlx::core::sinh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  char v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3A7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Slice::vmap(uint64_t a1@<X0>, mlx::core::array **a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  void v36[2] = *(const void ***)MEMORY[0x263EF8340];
  memset(&v35, 0, sizeof(v35));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  memset(&v34, 0, sizeof(v34));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  memset(&v33, 0, sizeof(v33));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  uint64_t v8 = **a3;
  uint64_t v9 = *a2;
  if ((v8 & 0x80000000) == 0)
  {
    v10.__i_ = &v35.__begin_[v8];
    __x[0] = 0;
    std::vector<int>::insert(&v35, v10, __x);
    std::vector<int>::pointer begin = v34.__begin_;
    std::vector<int>::value_type v12 = mlx::core::array::shape(v9, v8);
    v13.__i_ = &begin[v8];
    __x[0] = v12;
    std::vector<int>::insert(&v34, v13, __x);
    v14.__i_ = &v33.__begin_[v8];
    __x[0] = 1;
    std::vector<int>::insert(&v33, v14, __x);
  }
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, v35.__begin_, (uint64_t)v35.__end_, v35.__end_ - v35.__begin_);
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v34.__begin_, (uint64_t)v34.__end_, v34.__end_ - v34.__begin_);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v33.__begin_, (uint64_t)v33.__end_, v33.__end_ - v33.__begin_);
  mlx::core::slice((const void ***)v9, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v36);
  *(void *)std::vector<int>::value_type __x = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = __x;
  LOBYTE(v19) = 0;
  __int16 v15 = (char *)operator new(0x10uLL);
  *(void *)std::vector<int>::value_type __x = v15;
  uint64_t v31 = v15;
  uint64_t v32 = v15 + 16;
  uint64_t v16 = v36[1];
  *(const void ***)__int16 v15 = v36[0];
  *((void *)v15 + 1) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = v15 + 16;
  unsigned int v17 = operator new(4uLL);
  long long __p = v17;
  *unsigned int v17 = v8;
  uint64_t v19 = v17 + 1;
  uint64_t v20 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)__x, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  long long __p = __x;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v36);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
}

void sub_256F3AA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v26 - 96);
  if (v29)
  {
    *(void *)(v26 - 88) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::Slice::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Slice::vjp();
  }
  uint64_t v116 = 0;
  long long v117 = 0;
  uint64_t v118 = 0;
  memset(&v115, 0, sizeof(v115));
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  long long __p = 0;
  long long v110 = 0;
  unint64_t v111 = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v7)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
      int v10 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v8);
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v10 == 1;
      }
      if (!v11)
      {
        if (v10 == 1)
        {
          uint64_t v12 = mlx::core::TypeToDtype<int>::operator mlx::core::Dtype();
          mlx::core::array::array<int>((int ***)&v107, v9, v12);
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v112, (uint64_t)&v107);
          mlx::core::array::~array((mlx::core::array *)&v107);
          std::vector<int>::const_iterator v13 = v110;
          if ((unint64_t)v110 >= v111)
          {
            uint64_t v23 = (char *)__p;
            int64_t v24 = (v110 - (unsigned char *)__p) >> 2;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
LABEL_150:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v26 = v111 - (void)__p;
            if ((uint64_t)(v111 - (void)__p) >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v111, v27);
              uint64_t v23 = (char *)__p;
              std::vector<int>::const_iterator v13 = v110;
            }
            else
            {
              unint64_t v28 = 0;
            }
            uint64_t v31 = &v28[4 * v24];
            *(_DWORD *)uint64_t v31 = v8;
            std::vector<int>::const_iterator v14 = v31 + 4;
            while (v13 != v23)
            {
              int v32 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            long long __p = v31;
            long long v110 = v14;
            unint64_t v111 = (unint64_t)&v28[4 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_DWORD *)long long v110 = v8;
            std::vector<int>::const_iterator v14 = v13 + 4;
          }
          long long v110 = v14;
        }
        else
        {
          mlx::core::arange(v9, *(_DWORD *)(*(void *)(a1 + 48) + 4 * v8), v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (int ***)&v107);
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v116, (uint64_t)&v107);
          mlx::core::array::~array((mlx::core::array *)&v107);
          std::vector<int>::pointer end = v115.__end_;
          if (v115.__end_ >= v115.__end_cap_.__value_)
          {
            std::vector<int>::pointer begin = v115.__begin_;
            int64_t v18 = v115.__end_ - v115.__begin_;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              goto LABEL_150;
            }
            int64_t v20 = (char *)v115.__end_cap_.__value_ - (char *)v115.__begin_;
            if (((char *)v115.__end_cap_.__value_ - (char *)v115.__begin_) >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v21);
              std::vector<int>::pointer begin = v115.__begin_;
              std::vector<int>::pointer end = v115.__end_;
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v29 = (int *)&v22[4 * v18];
            int *v29 = v8;
            uint64_t v16 = v29 + 1;
            while (end != begin)
            {
              int v30 = *--end;
              *--uint64_t v29 = v30;
            }
            v115.__begin_ = v29;
            v115.__end_ = v16;
            v115.__end_cap_.__value_ = (int *)&v22[4 * v21];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *v115.__end_ = v8;
            uint64_t v16 = end + 1;
          }
          v115.__end_ = v16;
        }
      }
      ++v8;
      uint64_t v7 = *(void *)(a1 + 24);
    }
    while (v8 < (*(void *)(a1 + 32) - v7) >> 2);
  }
  uint64_t v33 = (*a3)[1];
  *(void *)&long long v108 = **a3;
  *((void *)&v108 + 1) = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<int> v34 = v115.__begin_;
  std::vector<int>::pointer v35 = v115.__end_;
  if (v115.__begin_ != v115.__end_)
  {
    memset(&v107, 0, sizeof(v107));
    do
    {
      int v36 = mlx::core::array::shape((mlx::core::array *)&v108, *v34);
      int v37 = v36;
      std::vector<int>::pointer v38 = v107.__end_;
      if (v107.__end_ >= v107.__end_cap_.__value_)
      {
        std::vector<int>::pointer v40 = v107.__begin_;
        int64_t v41 = v107.__end_ - v107.__begin_;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v43 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
        if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v44);
          std::vector<int>::pointer v40 = v107.__begin_;
          std::vector<int>::pointer v38 = v107.__end_;
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v46 = (int *)&v45[4 * v41];
        int *v46 = v37;
        unint64_t v39 = v46 + 1;
        while (v38 != v40)
        {
          int v47 = *--v38;
          *--uint64_t v46 = v47;
        }
        v107.__begin_ = v46;
        v107.__end_ = v39;
        v107.__end_cap_.__value_ = (int *)&v45[4 * v44];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *v107.__end_ = v36;
        unint64_t v39 = v38 + 1;
      }
      v107.__end_ = v39;
      ++v34;
    }
    while (v34 != v35);
    memset(__x, 0, sizeof(__x));
    uint64_t v106 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, v115.__begin_, (uint64_t)v115.__end_, v115.__end_ - v115.__begin_);
    if (*(void *)(v108 + 8) != *(void *)v108)
    {
      unint64_t v48 = 0;
      int v49 = 0;
      do
      {
        if (v49 < (unint64_t)(v115.__end_ - v115.__begin_) && v48 == v115.__begin_[v49])
        {
          std::vector<int>::pointer v50 = v107.__end_;
          if (v107.__end_ >= v107.__end_cap_.__value_)
          {
            std::vector<int>::pointer v74 = v107.__begin_;
            int64_t v75 = v107.__end_ - v107.__begin_;
            unint64_t v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v77 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
            if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v76) {
              unint64_t v76 = v77 >> 1;
            }
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78)
            {
              long long v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v78);
              std::vector<int>::pointer v74 = v107.__begin_;
              std::vector<int>::pointer v50 = v107.__end_;
            }
            else
            {
              long long v79 = 0;
            }
            unint64_t v80 = (int *)&v79[4 * v75];
            *unint64_t v80 = 1;
            std::vector<int>::pointer v51 = v80 + 1;
            while (v50 != v74)
            {
              int v81 = *--v50;
              *--unint64_t v80 = v81;
            }
            v107.__begin_ = v80;
            v107.__end_ = v51;
            v107.__end_cap_.__value_ = (int *)&v79[4 * v78];
            if (v74) {
              operator delete(v74);
            }
          }
          else
          {
            *v107.__end_ = 1;
            std::vector<int>::pointer v51 = v50 + 1;
          }
          v107.__end_ = v51;
          ++v49;
        }
        else
        {
          int v52 = mlx::core::array::shape((mlx::core::array *)&v108, v48);
          int v53 = v52;
          std::vector<int>::pointer v54 = v107.__end_;
          if (v107.__end_ >= v107.__end_cap_.__value_)
          {
            std::vector<int>::pointer v56 = v107.__begin_;
            int64_t v57 = v107.__end_ - v107.__begin_;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v59 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
            if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v58) {
              unint64_t v58 = v59 >> 1;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              int v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v60);
              std::vector<int>::pointer v56 = v107.__begin_;
              std::vector<int>::pointer v54 = v107.__end_;
            }
            else
            {
              int v61 = 0;
            }
            uint64_t v62 = (int *)&v61[4 * v57];
            *uint64_t v62 = v53;
            std::vector<int>::pointer v55 = v62 + 1;
            while (v54 != v56)
            {
              int v63 = *--v54;
              *--uint64_t v62 = v63;
            }
            v107.__begin_ = v62;
            v107.__end_ = v55;
            v107.__end_cap_.__value_ = (int *)&v61[4 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *v107.__end_ = v52;
            std::vector<int>::pointer v55 = v54 + 1;
          }
          v107.__end_ = v55;
          uint64_t v64 = *(char **)&__x[2];
          if (*(void *)&__x[2] >= (unint64_t)v106)
          {
            uint64_t v66 = *(char **)__x;
            uint64_t v67 = (uint64_t)(*(void *)&__x[2] - *(void *)__x) >> 2;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v69 = (uint64_t)&v106[-*(void *)__x];
            if ((uint64_t)&v106[-*(void *)__x] >> 1 > v68) {
              unint64_t v68 = v69 >> 1;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106, v70);
              uint64_t v66 = *(char **)__x;
              uint64_t v64 = *(char **)&__x[2];
            }
            else
            {
              uint64_t v71 = 0;
            }
            unint64_t v72 = &v71[4 * v67];
            *(_DWORD *)unint64_t v72 = v48;
            unint64_t v65 = v72 + 4;
            while (v64 != v66)
            {
              int v73 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *((_DWORD *)v72 - 1) = v73;
              v72 -= 4;
            }
            *(void *)std::vector<int>::value_type __x = v72;
            *(void *)&std::vector<int>::value_type __x[2] = v65;
            uint64_t v106 = &v71[4 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            **(_DWORD **)&std::vector<int>::value_type __x[2] = v48;
            unint64_t v65 = v64 + 4;
          }
          *(void *)&std::vector<int>::value_type __x[2] = v65;
        }
        ++v48;
      }
      while (v48 < (uint64_t)(*(void *)(v108 + 8) - *(void *)v108) >> 2);
    }
    unint64_t v102 = 0;
    uint64_t v103 = 0;
    int64_t v101 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v101, *(const void **)__x, *(uint64_t *)&__x[2], (uint64_t)(*(void *)&__x[2] - *(void *)__x) >> 2);
    mlx::core::transpose((uint64_t **)&v108, (unsigned int **)&v101, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v104);
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v98, v107.__begin_, (uint64_t)v107.__end_, v107.__end_ - v107.__begin_);
    mlx::core::reshape(v104, (uint64_t)&v98, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v119);
    long long v82 = v119;
    long long v119 = 0uLL;
    uint64_t v83 = (std::__shared_weak_count *)*((void *)&v108 + 1);
    long long v108 = v82;
    if (v83) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v83);
    }
    mlx::core::array::~array((mlx::core::array *)&v119);
    if (v98)
    {
      uint64_t v99 = v98;
      operator delete(v98);
    }
    mlx::core::array::~array((mlx::core::array *)v104);
    if (v101)
    {
      unint64_t v102 = v101;
      operator delete(v101);
    }
    if (*(void *)__x)
    {
      *(void *)&std::vector<int>::value_type __x[2] = *(void *)__x;
      operator delete(*(void **)__x);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
  }
  __x[0] = 1;
  std::vector<int>::vector(&v107, (v117 - v116) >> 4, __x);
  std::vector<int> v85 = v116;
  long long v84 = v117;
  if (v117 != v116)
  {
    uint64_t v86 = 0;
    unint64_t v87 = 0;
    std::vector<int>::pointer v88 = v107.__begin_;
    do
    {
      uint64_t v89 = (const void ***)&v85[v86];
      v88[v87] = *(void *)(*(void *)&v85[v86] + 48);
      int v96 = 0;
      uint64_t v97 = 0;
      uint64_t v95 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v95, v88, (uint64_t)v107.__end_, v107.__end_ - v88);
      mlx::core::reshape(v89, (uint64_t)&v95, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)__x);
      long long v90 = *(_OWORD *)__x;
      memset(__x, 0, sizeof(__x));
      uint64_t v91 = *(std::__shared_weak_count **)&v116[v86 + 8];
      *(_OWORD *)&v116[16 * v87] = v90;
      if (v91) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v91);
      }
      mlx::core::array::~array((mlx::core::array *)__x);
      if (v95)
      {
        int v96 = v95;
        operator delete(v95);
      }
      std::vector<int>::pointer v88 = v107.__begin_;
      v107.__begin_[v87++] = 1;
      std::vector<int> v85 = v116;
      long long v84 = v117;
      v86 += 16;
    }
    while (v87 < (v117 - v116) >> 4);
  }
  std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>((uint64_t *)&v116, v84, (uint64_t *)v112, v113, ((char *)v113 - v112) >> 4);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v115, (uint64_t)v115.__end_, (char *)__p, v110, (v110 - (unsigned char *)__p) >> 2);
  mlx::core::zeros_like(*(uint64_t **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v104);
  mlx::core::scatter_add((mlx::core::array *)v104, (const void ****)&v116, (mlx::core::array *)&v108, &v115.__begin_, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v119);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(void *)std::vector<int>::value_type __x = a4;
  LOBYTE(__x[2]) = 0;
  uint64_t v92 = operator new(0x10uLL);
  *a4 = v92;
  a4[1] = v92;
  a4[2] = v92 + 2;
  uint64_t v93 = *((void *)&v119 + 1);
  *uint64_t v92 = v119;
  v92[1] = v93;
  if (v93) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v92 + 2;
  mlx::core::array::~array((mlx::core::array *)&v119);
  mlx::core::array::~array((mlx::core::array *)v104);
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  mlx::core::array::~array((mlx::core::array *)&v108);
  if (__p)
  {
    long long v110 = (char *)__p;
    operator delete(__p);
  }
  long long __p = &v112;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v115.__begin_)
  {
    v115.__end_ = v115.__begin_;
    operator delete(v115.__begin_);
  }
  v115.__begin_ = (std::vector<int>::pointer)&v116;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
}

void sub_256F3B490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char *a29,char *a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)&a19);
  if (a16) {
    operator delete(a16);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  mlx::core::array::~array((mlx::core::array *)&a27);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  a29 = &a32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::vector<int> v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(void *)(v32 - 168) = v34;
    operator delete(v34);
  }
  *(void *)(v32 - 176) = v32 - 152;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 176));
  _Unwind_Resume(a1);
}

void mlx::core::Slice::jvp(uint64_t a1@<X0>, void *a2@<X1>, const void ****a3@<X2>, void *a4@<X8>)
{
  void v20[2] = *(const void ***)MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::Slice::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __int16 v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  uint64_t v12 = 0;
  std::vector<int>::const_iterator v13 = 0;
  uint64_t v14 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  long long __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  mlx::core::slice(v6, (uint64_t)&v15, (uint64_t)&v12, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  int64_t v18 = a4;
  char v19 = 0;
  uint64_t v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  unint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    std::vector<int>::const_iterator v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_256F3B758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Slice::is_equivalent(void *a1, void *a2)
{
  uint64_t v5 = a1 + 3;
  size_t v4 = (const void *)a1[3];
  size_t v6 = v5[1] - (void)v4;
  unint64_t v8 = a2 + 3;
  uint64_t v7 = (const void *)a2[3];
  if (v6 == v8[1] - (void)v7
    && !memcmp(v4, v7, v6)
    && (int v9 = (const void *)a1[6], v10 = a1[7] - (void)v9, v11 = (const void *)a2[6], v10 == a2[7] - (void)v11)
    && !memcmp(v9, v11, v10)
    && (v12 = (const void *)a1[9], v13 = a1[10] - (void)v12, uint64_t v14 = (const void *)a2[9], v13 == a2[10] - (void)v14))
  {
    return memcmp(v12, v14, v13) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::SliceUpdate::vmap(uint64_t a1@<X0>, char **a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::SliceUpdate::vmap();
  }
  if ((char *)a3[1] - (char *)*a3 != 8) {
    mlx::core::SliceUpdate::vmap();
  }
  memset(&v62, 0, sizeof(v62));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v62, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  memset(&v61, 0, sizeof(v61));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  memset(&v60, 0, sizeof(v60));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v60, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  unint64_t v8 = *a2;
  uint64_t v9 = *((void *)*a2 + 1);
  *(void *)&long long v59 = *(void *)*a2;
  *((void *)&v59 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    unint64_t v8 = *a2;
  }
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v10 = *((void *)v8 + 3);
  *(void *)&long long v58 = v11;
  *((void *)&v58 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *a3;
  int v13 = **a3;
  int v14 = v12[1];
  if (v13 == -1 && v14 == -1)
  {
    std::vector<int>::pointer v54 = 0;
    uint64_t v55 = 0;
    int v53 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, v62.__begin_, (uint64_t)v62.__end_, v62.__end_ - v62.__begin_);
    std::vector<int>::pointer v50 = 0;
    std::vector<int>::pointer v51 = 0;
    uint64_t v52 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, v61.__begin_, (uint64_t)v61.__end_, v61.__end_ - v61.__begin_);
    int v47 = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, v60.__begin_, (uint64_t)v60.__end_, v60.__end_ - v60.__begin_);
    mlx::core::slice_update(&v59, (const void ***)&v58, (uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v47, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v63);
    long long __x = 0uLL;
    int64_t v57 = 0;
    __p[0] = &__x;
    LOBYTE(__p[1]) = 0;
    __int16 v15 = operator new(0x10uLL);
    *(void *)&long long __x = v15;
    *((void *)&__x + 1) = v15;
    int64_t v57 = v15 + 2;
    uint64_t v16 = v64;
    *__int16 v15 = v63;
    v15[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&__x + 1) = v15 + 2;
    uint64_t v17 = operator new(4uLL);
    __p[0] = v17;
    *uint64_t v17 = -1;
    __p[1] = v17 + 1;
    uint64_t v46 = v17 + 1;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&__x, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &__x;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    mlx::core::array::~array((mlx::core::array *)&v63);
    if (v47)
    {
      unint64_t v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      std::vector<int>::pointer v51 = v50;
      operator delete(v50);
    }
    uint64_t v18 = v53;
    if (v53)
    {
      std::vector<int>::pointer v54 = v53;
LABEL_45:
      operator delete(v18);
    }
  }
  else
  {
    if (v13 == -1)
    {
      mlx::core::expand_dims((const void ***)&v59, v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__x);
      long long v19 = __x;
      long long __x = 0uLL;
      int64_t v20 = (std::__shared_weak_count *)*((void *)&v59 + 1);
      long long v59 = v19;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      mlx::core::array::~array((mlx::core::array *)&__x);
      int64_t v57 = 0;
      long long __x = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x, *(const void **)v59, *(void *)(v59 + 8), (uint64_t)(*(void *)(v59 + 8) - *(void *)v59) >> 2);
      int v21 = mlx::core::array::shape((mlx::core::array *)&v58, v14);
      *(_DWORD *)(__x + 4 * v14) = v21;
      mlx::core::broadcast_to((const void ***)&v59, (const void **)&__x, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)__p);
      long long v22 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v23 = (std::__shared_weak_count *)*((void *)&v59 + 1);
      long long v59 = v22;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      mlx::core::array::~array((mlx::core::array *)__p);
      if ((void)__x)
      {
        *((void *)&__x + 1) = __x;
        operator delete((void *)__x);
      }
      int v13 = v14;
    }
    if (v14 == -1)
    {
      mlx::core::expand_dims((const void ***)&v58, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&__x);
      long long v24 = __x;
      long long __x = 0uLL;
      unint64_t v25 = (std::__shared_weak_count *)*((void *)&v58 + 1);
      long long v58 = v24;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      mlx::core::array::~array((mlx::core::array *)&__x);
      int v14 = v13;
    }
    if (v13 != v14)
    {
      mlx::core::moveaxis((uint64_t **)&v58, v14, v13, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &__x);
      long long v26 = __x;
      long long __x = 0uLL;
      unint64_t v27 = (std::__shared_weak_count *)*((void *)&v58 + 1);
      long long v58 = v26;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      mlx::core::array::~array((mlx::core::array *)&__x);
    }
    v28.__i_ = &v62.__begin_[v13];
    LODWORD(__x) = 0;
    std::vector<int>::insert(&v62, v28, (std::vector<int>::value_type *)&__x);
    std::vector<int>::pointer begin = v61.__begin_;
    int v30 = mlx::core::array::shape((mlx::core::array *)&v59, v13);
    v31.__i_ = &begin[v13];
    LODWORD(__x) = v30;
    std::vector<int>::insert(&v61, v31, (std::vector<int>::value_type *)&__x);
    v32.__i_ = &v60.__begin_[v13];
    LODWORD(__x) = 1;
    std::vector<int>::insert(&v60, v32, (std::vector<int>::value_type *)&__x);
    int64_t v43 = 0;
    uint64_t v44 = 0;
    unint64_t v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, v62.__begin_, (uint64_t)v62.__end_, v62.__end_ - v62.__begin_);
    unint64_t v39 = 0;
    std::vector<int>::pointer v40 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, v61.__begin_, (uint64_t)v61.__end_, v61.__end_ - v61.__begin_);
    int v36 = 0;
    int v37 = 0;
    uint64_t v38 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, v60.__begin_, (uint64_t)v60.__end_, v60.__end_ - v60.__begin_);
    mlx::core::slice_update(&v59, (const void ***)&v58, (uint64_t)&v42, (uint64_t)&v39, (uint64_t)&v36, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v63);
    long long __x = 0uLL;
    int64_t v57 = 0;
    __p[0] = &__x;
    LOBYTE(__p[1]) = 0;
    uint64_t v33 = operator new(0x10uLL);
    *(void *)&long long __x = v33;
    *((void *)&__x + 1) = v33;
    int64_t v57 = v33 + 2;
    uint64_t v34 = v64;
    void *v33 = v63;
    v33[1] = v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&__x + 1) = v33 + 2;
    std::vector<int>::pointer v35 = operator new(4uLL);
    __p[0] = v35;
    _DWORD *v35 = v13;
    __p[1] = v35 + 1;
    uint64_t v46 = v35 + 1;
    std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&__x, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &__x;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    mlx::core::array::~array((mlx::core::array *)&v63);
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
    if (v39)
    {
      std::vector<int>::pointer v40 = v39;
      operator delete(v39);
    }
    uint64_t v18 = v42;
    if (v42)
    {
      int64_t v43 = v42;
      goto LABEL_45;
    }
  }
  mlx::core::array::~array((mlx::core::array *)&v58);
  mlx::core::array::~array((mlx::core::array *)&v59);
  if (v60.__begin_)
  {
    v60.__end_ = v60.__begin_;
    operator delete(v60.__begin_);
  }
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  if (v62.__begin_)
  {
    v62.__end_ = v62.__begin_;
    operator delete(v62.__begin_);
  }
}

void sub_256F3BE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  mlx::core::array::~array((mlx::core::array *)(v32 - 176));
  mlx::core::array::~array((mlx::core::array *)(v32 - 160));
  uint64_t v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(void *)(v32 - 136) = v34;
    operator delete(v34);
  }
  std::vector<int>::pointer v35 = *(void **)(v32 - 120);
  if (v35)
  {
    *(void *)(v32 - 112) = v35;
    operator delete(v35);
  }
  int v36 = *(void **)(v32 - 96);
  if (v36)
  {
    *(void *)(v32 - 88) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::vjp(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a2;
  if (a2[1] - *a2 != 32) {
    mlx::core::SliceUpdate::vjp();
  }
  uint64_t v7 = *a3;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  unint64_t v8 = *(_DWORD **)a4;
  uint64_t v9 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 16);
    do
    {
      if (*v8)
      {
        long long v19 = 0;
        uint64_t v20 = 0;
        uint64_t v18 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
        __int16 v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
        long long __p = 0;
        int v13 = 0;
        uint64_t v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
        mlx::core::slice(v7, (uint64_t)&v18, (uint64_t)&v15, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v31);
        if (__p)
        {
          int v13 = __p;
          operator delete(__p);
        }
        if (v15)
        {
          uint64_t v16 = v15;
          operator delete(v15);
        }
        if (v18)
        {
          long long v19 = v18;
          operator delete(v18);
        }
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, v31);
      }
      else
      {
        mlx::core::zeros_like(v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v30);
        unint64_t v27 = 0;
        std::vector<int>::const_iterator v28 = 0;
        uint64_t v29 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
        long long v24 = 0;
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
        int v21 = 0;
        long long v22 = 0;
        uint64_t v23 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
        mlx::core::slice_update(v7, v30, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v31);
        if (v21)
        {
          long long v22 = v21;
          operator delete(v21);
        }
        if (v24)
        {
          unint64_t v25 = v24;
          operator delete(v24);
        }
        if (v27)
        {
          std::vector<int>::const_iterator v28 = v27;
          operator delete(v27);
        }
        mlx::core::array::~array((mlx::core::array *)v30);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, v31);
      }
      mlx::core::array::~array((mlx::core::array *)v31);
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_256F3C1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  mlx::core::array::~array((mlx::core::array *)(v23 - 64));
  *(void *)(v23 - 64) = v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::SliceUpdate::jvp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 32) {
    mlx::core::SliceUpdate::jvp();
  }
  uint64_t v6 = *a3;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __int16 v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  long long __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  mlx::core::slice_update((void *)v6, (const void ***)(v6 + 16), (uint64_t)&v15, (uint64_t)&v12, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v18 = a4;
  char v19 = 0;
  uint64_t v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v20);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_256F3C40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a18);
  mlx::core::array::~array((mlx::core::array *)(v18 - 56));
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::SliceUpdate::is_equivalent(void *a1, void *a2)
{
  uint64_t v5 = a1 + 3;
  size_t v4 = (const void *)a1[3];
  size_t v6 = v5[1] - (void)v4;
  uint64_t v8 = a2 + 3;
  uint64_t v7 = (const void *)a2[3];
  if (v6 == v8[1] - (void)v7
    && !memcmp(v4, v7, v6)
    && (uint64_t v9 = (const void *)a1[6], v10 = a1[7] - (void)v9, v11 = (const void *)a2[6], v10 == a2[7] - (void)v11)
    && !memcmp(v9, v11, v10)
    && (v12 = (const void *)a1[9], v13 = a1[10] - (void)v12, uint64_t v14 = (const void *)a2[9], v13 == a2[10] - (void)v14))
  {
    return memcmp(v12, v14, v13) == 0;
  }
  else
  {
    return 0;
  }
}

void mlx::core::Sort::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  size_t v6 = *(std::string::size_type **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sort::vmap();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 4) {
    mlx::core::Sort::vmap();
  }
  int v8 = **(_DWORD **)a3;
  int v9 = *(_DWORD *)(a1 + 20);
  if (v8 >= 0 && v8 <= v9) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 20);
  }
  mlx::core::sort(v6, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  uint64_t v14 = 0;
  __int16 v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = (void **)&v14;
  char v18 = 0;
  uint64_t v12 = operator new(0x10uLL);
  uint64_t v14 = v12;
  __int16 v15 = v12;
  uint64_t v16 = v12 + 2;
  uint64_t v13 = v19[1];
  void *v12 = v19[0];
  v12[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v15 = v12 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, a3);
  uint64_t v17 = (void **)&v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v17);
  mlx::core::array::~array((mlx::core::array *)v19);
}

void sub_256F3C628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Sort::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Sort::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sort::jvp();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 16) {
    mlx::core::Sort::jvp();
  }
  size_t v6 = (int *)(a1 + 20);
  mlx::core::argsort(*(std::string::size_type **)a2, *(_DWORD *)(a1 + 20), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v12);
  mlx::core::take_along_axis(*(mlx::core::array **)a3, v12, *v6, *(mlx::core **)(v6 - 3), *(v6 - 1) | 0x100000000, &v10);
  int v8 = v10;
  uint64_t v7 = v11;
  v14[0] = v10;
  v14[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  void v12[2] = a4;
  char v13 = 0;
  int v9 = operator new(0x10uLL);
  *a4 = v9;
  a4[1] = v9;
  a4[2] = v9 + 2;
  *int v9 = v8;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v9 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  mlx::core::array::~array((mlx::core::array *)&v10);
  mlx::core::array::~array((mlx::core::array *)v12);
}

void sub_256F3C7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  int v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Sort::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Split::vmap(uint64_t a1@<X0>, mlx::core::array **a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = **a3;
  int v7 = *(_DWORD *)(a1 + 48);
  if (v6 >= 0 && v6 <= v7) {
    int v9 = v7 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 48);
  }
  mlx::core::split(*a2, a1 + 24, v9, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (uint64_t *)v10);
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, v10, (uint64_t)a3);
  uint64_t v11 = (void **)v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_256F3C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Split::vjp(uint64_t a1@<X0>, mlx::core::array **a2@<X2>, void *a3@<X8>)
{
  v6[2] = *MEMORY[0x263EF8340];
  mlx::core::concatenate(a2, *(_DWORD *)(a1 + 48), *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = operator new(0x10uLL);
  *a3 = v4;
  a3[1] = v4;
  a3[2] = v4 + 2;
  uint64_t v5 = v6[1];
  *size_t v4 = v6[0];
  v4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a3[1] = v4 + 2;
  mlx::core::array::~array((mlx::core::array *)v6);
}

void sub_256F3C974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Split::jvp(uint64_t a1@<X0>, mlx::core::array **a2@<X2>, uint64_t *a3@<X8>)
{
}

BOOL mlx::core::Split::is_equivalent(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && (uint64_t v3 = a1 + 24,
        uint64_t v2 = *(const void **)(a1 + 24),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 24,
        uint64_t v5 = *(const void **)(a2 + 24),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlx::core::Square::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Square::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Square::jvp();
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 16) {
    mlx::core::Square::jvp();
  }
  mlx::core::array::array<int>(v10, 2, *(void *)(*v5 + 56));
  mlx::core::multiply(v10, *(void **)a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v11);
  mlx::core::multiply(v5, v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  void v11[2] = a4;
  char v12 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a4 = v8;
  a4[1] = v8;
  a4[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *uint64_t v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v11);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F3CB64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void **);
  uint64_t v11 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va1);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Square::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Square::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Square::vmap();
  }
  mlx::core::square(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  size_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::vjp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void **a4@<X4>, void *a5@<X8>)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)a2;
  if (*(void *)(a2 + 8) - (void)v6 != 16) {
    mlx::core::Sqrt::vjp();
  }
  if ((char *)a3[1] - (char *)*a3 != 16) {
    mlx::core::Sqrt::vjp();
  }
  uint64_t v11 = *(void *)(*v6 + 56);
  if (*(unsigned char *)(a1 + 20))
  {
    mlx::core::divide(*a4, v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
    mlx::core::array::array<double>(v17, v11, -0.5);
    mlx::core::multiply(v17, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
    mlx::core::multiply(v18, v22, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    char v19 = a5;
    char v20 = 0;
    char v12 = operator new(0x10uLL);
    *a5 = v12;
    a5[1] = v12;
    a5[2] = v12 + 2;
    uint64_t v13 = v21[1];
    void *v12 = v21[0];
    v12[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    a5[1] = v12 + 2;
    mlx::core::array::~array((mlx::core::array *)v21);
    mlx::core::array::~array((mlx::core::array *)v18);
    mlx::core::array::~array((mlx::core::array *)v17);
    uint64_t v14 = (mlx::core::array *)v22;
  }
  else
  {
    mlx::core::array::array<double>(v18, *(void *)(*v6 + 56), 0.5);
    mlx::core::multiply(v18, *a3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v21);
    mlx::core::divide(v21, *a4, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v22);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    char v19 = a5;
    char v20 = 0;
    __int16 v15 = operator new(0x10uLL);
    *a5 = v15;
    a5[1] = v15;
    a5[2] = v15 + 2;
    uint64_t v16 = v22[1];
    *__int16 v15 = v22[0];
    v15[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    a5[1] = v15 + 2;
    mlx::core::array::~array((mlx::core::array *)v22);
    mlx::core::array::~array((mlx::core::array *)v21);
    uint64_t v14 = (mlx::core::array *)v18;
  }
  mlx::core::array::~array(v14);
}

void sub_256F3CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void **);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va3);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::jvp(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 20))
  {
    mlx::core::rsqrt(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (void **)&v11;
    char v15 = 0;
    uint64_t v8 = operator new(0x10uLL);
    uint64_t v11 = v8;
    char v12 = v8;
    uint64_t v13 = v8 + 2;
    uint64_t v9 = v17;
    *uint64_t v8 = v16;
    v8[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::sqrt(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (void **)&v11;
    char v15 = 0;
    uint64_t v8 = operator new(0x10uLL);
    uint64_t v11 = v8;
    char v12 = v8;
    uint64_t v13 = v8 + 2;
    uint64_t v10 = v17;
    *uint64_t v8 = v16;
    v8[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  char v12 = v8 + 2;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void **))(*(void *)a1 + 24))(a1, a2, a3, a4, &v11);
  uint64_t v14 = (void **)&v11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  mlx::core::array::~array((mlx::core::array *)&v16);
}

void sub_256F3D148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sqrt::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Sqrt::vmap();
  }
  if (*(unsigned char *)(a1 + 20))
  {
    mlx::core::rsqrt(v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (void **)&v11;
    char v15 = 0;
    uint64_t v8 = operator new(0x10uLL);
    uint64_t v11 = v8;
    char v12 = v8;
    uint64_t v13 = v8 + 2;
    uint64_t v9 = v17;
    *uint64_t v8 = v16;
    v8[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::sqrt(v6, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v16);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (void **)&v11;
    char v15 = 0;
    uint64_t v8 = operator new(0x10uLL);
    uint64_t v11 = v8;
    char v12 = v8;
    uint64_t v13 = v8 + 2;
    uint64_t v10 = v17;
    *uint64_t v8 = v16;
    v8[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  char v12 = v8 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v11, (uint64_t)a3);
  uint64_t v14 = (void **)&v11;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v14);
  mlx::core::array::~array((mlx::core::array *)&v16);
}

void sub_256F3D308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

BOOL mlx::core::Sqrt::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
}

void mlx::core::StopGradient::vmap(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  mlx::core::stop_gradient(*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::vjp(uint64_t a1@<X0>, void **a2@<X2>, int **a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  size_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    do
    {
      int v9 = *v4;
      uint64_t v10 = (*a2)[1];
      *(void *)&long long v14 = **a2;
      *((void *)&v14 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      if (v9 == 1)
      {
        mlx::core::negative(&v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v13);
        long long v11 = v13;
        long long v13 = 0uLL;
        char v12 = (std::__shared_weak_count *)*((void *)&v14 + 1);
        long long v14 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        mlx::core::array::~array((mlx::core::array *)&v13);
      }
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a4, &v14);
      mlx::core::array::~array((mlx::core::array *)&v14);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_256F3D544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  mlx::core::array::~array((mlx::core::array *)va);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::jvp(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  if (*(_DWORD *)*a3 == 1)
  {
    mlx::core::negative(v8, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v17);
  }
  else
  {
    uint64_t v9 = v8[1];
    *(void *)&long long v17 = *v8;
    *((void *)&v17 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (a3[1] - *a3 >= 5uLL)
  {
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 4) == 1)
    {
      mlx::core::negative(v10 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v19);
    }
    else
    {
      uint64_t v12 = v10[2];
      uint64_t v11 = v10[3];
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
    }
    mlx::core::add(&v17, &v19, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v18);
    long long v13 = v18;
    long long v18 = 0uLL;
    long long v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    long long v17 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    mlx::core::array::~array((mlx::core::array *)&v18);
    mlx::core::array::~array((mlx::core::array *)&v19);
  }
  long long v15 = v17;
  long long v19 = v17;
  if (*((void *)&v17 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(void *)&long long v18 = a4;
  BYTE8(v18) = 0;
  uint64_t v16 = operator new(0x10uLL);
  *a4 = v16;
  a4[1] = v16;
  a4[2] = v16 + 1;
  *uint64_t v16 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v16 + 1;
  mlx::core::array::~array((mlx::core::array *)&v19);
  mlx::core::array::~array((mlx::core::array *)&v17);
}

void sub_256F3D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
}

void mlx::core::Subtract::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v20[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (mlx::core **)(a1 + 8);
  mlx::core::subtract(v17, v18, *v6, *(unsigned int *)(a1 + 16) | 0x100000000, v20);
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  long long __p = &v14;
  LOBYTE(v12) = 0;
  uint64_t v7 = operator new(0x10uLL);
  long long v14 = v7;
  long long v15 = v7;
  uint64_t v16 = v7 + 2;
  uint64_t v8 = v20[1];
  void *v7 = v20[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = v7 + 2;
  int v9 = v19;
  uint64_t v10 = operator new(4uLL);
  long long __p = v10;
  *uint64_t v10 = v9;
  uint64_t v12 = v10 + 1;
  long long v13 = v10 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v14, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  long long __p = &v14;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v20);
  mlx::core::array::~array((mlx::core::array *)v18);
  mlx::core::array::~array((mlx::core::array *)v17);
}

void sub_256F3D88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  long long __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  mlx::core::array::~array(v15);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Tan::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Tan::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tan::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Tan::jvp();
  }
  mlx::core::cos(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v11);
  mlx::core::square(&v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::array::~array((mlx::core::array *)&v11);
  mlx::core::divide(*a3, v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v11 = a5;
  char v12 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *uint64_t v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F3DA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Tan::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tan::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Tan::vmap();
  }
  mlx::core::tan(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3DBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::Tanh::vjp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void mlx::core::Tanh::jvp(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tanh::jvp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Tanh::jvp();
  }
  mlx::core::cosh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v11);
  mlx::core::square(&v11, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v10);
  mlx::core::array::~array((mlx::core::array *)&v11);
  mlx::core::divide(*a3, v10, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v11 = a5;
  char v12 = 0;
  uint64_t v8 = operator new(0x10uLL);
  *a5 = v8;
  a5[1] = v8;
  a5[2] = v8 + 2;
  uint64_t v9 = v13[1];
  *uint64_t v8 = v13[0];
  v8[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v8 + 2;
  mlx::core::array::~array((mlx::core::array *)v13);
  mlx::core::array::~array((mlx::core::array *)v10);
}

void sub_256F3DD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void **);
  uint64_t v8 = va_arg(va2, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  mlx::core::array::~array((mlx::core::array *)va2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tanh::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Tanh::vmap();
  }
  mlx::core::tanh(*(void **)a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (void **)&v8;
  char v12 = 0;
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v8 = v6;
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 2;
  uint64_t v7 = v13[1];
  *uint64_t v6 = v13[0];
  v6[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6 + 2;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v8, (uint64_t)a3);
  uint64_t v11 = (void **)&v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v11);
  mlx::core::array::~array((mlx::core::array *)v13);
}

void sub_256F3DE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

void mlx::core::BlockMaskedMM::vjp(uint64_t a1@<X0>, const void ****a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v9 = *(void **)a3;
  std::vector<int>::vector(&v200, (uint64_t)(*(void *)(**(void **)a3 + 8) - ***(void ***)a3) >> 2);
  std::vector<int>::pointer begin = v200.__begin_;
  std::vector<int>::pointer end = v200.__end_;
  if (v200.__begin_ != v200.__end_)
  {
    int v12 = 0;
    do
      *begin++ = v12++;
    while (begin != end);
  }
  *((int32x2_t *)end - 1) = vrev64_s32(*(int32x2_t *)(end - 2));
  long long v13 = *a2;
  unint64_t v14 = (char *)a2[1] - (char *)*a2;
  if (v14 == 80 || v14 == 48)
  {
    unsigned int v108 = 3;
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
    unsigned int v108 = 2;
  }
  uint64_t v16 = a4[1];
  if (*a4 == v16)
  {
    if (v14 <= 0x30)
    {
      BOOL v109 = 0;
LABEL_16:
      int v104 = 0;
      goto LABEL_17;
    }
    BOOL v109 = 1;
  }
  else
  {
    int v17 = *(int *)((char *)*a4 + (((char *)v16 - (char *)*a4 - 4) & 0xFFFFFFFFFFFFFFFCLL));
    BOOL v109 = v17 == v108 + 1;
    if (v17 != v108) {
      goto LABEL_16;
    }
  }
  if (!*((_DWORD *)v13[2 * v108] + 14)) {
    goto LABEL_254;
  }
  int v104 = 1;
LABEL_17:
  if (v109 && !*((_DWORD *)v13[2 * v108 + 2] + 14))
  {
LABEL_254:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[BlockMaskedMM] Cannot calculate VJP with respect to BOOLean masks.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
  }
  uint64_t v199 = a1;
  mlx::core::array::array<int>(v198, 0, *(void *)(*v9 + 56));
  v197[0] = (mlx::core **)a1;
  v197[1] = (mlx::core **)v198;
  if (*(void *)(*v9 + 8) - *(void *)*v9 <= 4uLL) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  long long v18 = *a2;
  int v19 = **a2;
  uint64_t v20 = v19[1];
  if (v20 == *v19) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v21 = *(void *)(*v9 + 8);
  int v100 = *(_DWORD *)(v21 - 8);
  int v101 = *(_DWORD *)(v21 - 4);
  int v103 = *(v20 - 1);
  int v22 = *(_DWORD *)(a1 + 20);
  uint64_t v23 = v18[1];
  *(void *)&long long v196 = **a2;
  *((void *)&v196 + 1) = v23;
  if (v23)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
    long long v18 = *a2;
  }
  unint64_t v25 = v18[2];
  long long v24 = v18[3];
  *(void *)&long long v195 = v25;
  *((void *)&v195 + 1) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v27 = *a4;
  uint64_t v26 = a4[1];
  if (v27 != v26)
  {
    unsigned int v106 = v100 % v22;
    unsigned int v105 = v101 % v22;
    unsigned int v107 = v103 % v22;
    uint64_t v110 = 0;
    uint64_t v111 = v108 + 1;
    char v28 = v104;
    if (v14 < 0x31) {
      char v28 = 1;
    }
    char v102 = v28;
    while (1)
    {
      int v29 = *v27;
      if (*v27 != 2) {
        break;
      }
      if (!v15)
      {
LABEL_48:
        if (v14 >= 0x31 && v29 == v108)
        {
          uint64_t v44 = (uint64_t **)*a2;
          if ((v110 & 0x100000000) == 0)
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            uint64_t v141 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v141, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
            mlx::core::transpose(v44 + 2, (unsigned int **)&v141, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v186);
            if (v141)
            {
              uint64_t v142 = v141;
              operator delete(v141);
            }
            if (v15)
            {
              uint64_t v45 = (*a2)[5];
              uint64_t v188 = (*a2)[4];
              uint64_t v189 = v45;
              if (v45)
              {
                uint64_t v46 = (atomic_ullong *)(v45 + 1);
                char v47 = 1;
                atomic_fetch_add_explicit(v46, 1uLL, memory_order_relaxed);
              }
              else
              {
                char v47 = 1;
              }
            }
            else
            {
              char v47 = 0;
              LOBYTE(v188) = 0;
            }
            char v190 = v47;
            uint64_t v86 = *a2;
            uint64_t v139 = 0;
            uint64_t v140 = 0;
            std::vector<int> v138 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
            mlx::core::transpose((uint64_t **)&v86[2 * v111], (unsigned int **)&v138, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v184);
            if (v138)
            {
              uint64_t v139 = v138;
              operator delete(v138);
            }
            uint64_t v87 = v9[1];
            v137[0] = *(const void ***)v9;
            v137[1] = (const void **)v87;
            if (v87) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
            }
            long long v136 = v186;
            if (*((void *)&v186 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v186 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v88 = *(_DWORD *)(a1 + 20);
            v134[0] = 0;
            char v135 = 0;
            LOBYTE(v132[0]) = 0;
            char v133 = 0;
            if (v190)
            {
              v132[0] = v188;
              v132[1] = v189;
              if (v189) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v189 + 1, 1uLL, memory_order_relaxed);
              }
              char v133 = 1;
            }
            long long v130 = v184;
            if (*((void *)&v184 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v131 = 1;
            mlx::core::block_masked_mm(v137, (const void ***)&v136, v88, (uint64_t)v134, (uint64_t)v132, (uint64_t)&v130, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v194);
            long long v89 = v194;
            long long v194 = 0uLL;
            long long v90 = (std::__shared_weak_count *)*((void *)&v196 + 1);
            long long v196 = v89;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            mlx::core::array::~array((mlx::core::array *)&v194);
            if (v131) {
              mlx::core::array::~array((mlx::core::array *)&v130);
            }
            if (v133) {
              mlx::core::array::~array((mlx::core::array *)v132);
            }
            if (v135) {
              mlx::core::array::~array((mlx::core::array *)v134);
            }
            mlx::core::array::~array((mlx::core::array *)&v136);
            mlx::core::array::~array((mlx::core::array *)v137);
            mlx::core::array::~array((mlx::core::array *)&v184);
            if (v190) {
              mlx::core::array::~array((mlx::core::array *)&v188);
            }
            mlx::core::array::~array((mlx::core::array *)&v186);
            uint64_t v44 = (uint64_t **)*a2;
          }
          uint64_t v91 = v44[1];
          v129[0] = *v44;
          v129[1] = v91;
          if (v91) {
            atomic_fetch_add_explicit(v91 + 1, 1uLL, memory_order_relaxed);
          }
          long long v128 = v196;
          if (*((void *)&v196 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v196 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v197, v129, &v128, v106, v107, (mlx::core::array *)&v188);
          mlx::core::array::~array((mlx::core::array *)&v128);
          mlx::core::array::~array((mlx::core::array *)v129);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v188);
          mlx::core::array::~array((mlx::core::array *)&v188);
          BYTE4(v110) = 1;
        }
        else
        {
          if (v14 < 0x31 || v29 != v111)
          {
            uint64_t v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v98, "[BlockMaskedMM] Cannot calculate VJP with respect to masks.");
            v98->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v98, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
          }
          unint64_t v48 = (uint64_t **)*a2;
          if ((v110 & 1) == 0)
          {
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v125 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v125, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
            mlx::core::transpose(v48, (unsigned int **)&v125, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v186);
            if (v125)
            {
              uint64_t v126 = v125;
              operator delete(v125);
            }
            if (v15)
            {
              uint64_t v49 = (*a2)[5];
              uint64_t v188 = (*a2)[4];
              uint64_t v189 = v49;
              if (v49)
              {
                std::vector<int>::pointer v50 = (atomic_ullong *)(v49 + 1);
                char v51 = 1;
                atomic_fetch_add_explicit(v50, 1uLL, memory_order_relaxed);
              }
              else
              {
                char v51 = 1;
              }
            }
            else
            {
              char v51 = 0;
              LOBYTE(v188) = 0;
            }
            char v190 = v51;
            uint64_t v92 = *a2;
            long long v123 = 0;
            uint64_t v124 = 0;
            unint64_t v122 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v122, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
            mlx::core::transpose((uint64_t **)&v92[2 * v108], (unsigned int **)&v122, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v184);
            if (v122)
            {
              long long v123 = v122;
              operator delete(v122);
            }
            long long v121 = v186;
            if (*((void *)&v186 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v186 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v93 = v9[1];
            v120[0] = *(const void ***)v9;
            v120[1] = (const void **)v93;
            if (v93) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
            }
            int v94 = *(_DWORD *)(a1 + 20);
            v118[0] = 0;
            char v119 = 0;
            long long v116 = v184;
            if (*((void *)&v184 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v117 = 1;
            LOBYTE(v114[0]) = 0;
            char v115 = 0;
            if (v190)
            {
              v114[0] = v188;
              v114[1] = v189;
              if (v189) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v189 + 1, 1uLL, memory_order_relaxed);
              }
              char v115 = 1;
            }
            mlx::core::block_masked_mm((const void ***)&v121, v120, v94, (uint64_t)v118, (uint64_t)&v116, (uint64_t)v114, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v194);
            long long v95 = v194;
            long long v194 = 0uLL;
            int v96 = (std::__shared_weak_count *)*((void *)&v195 + 1);
            long long v195 = v95;
            if (v96) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v96);
            }
            mlx::core::array::~array((mlx::core::array *)&v194);
            if (v115) {
              mlx::core::array::~array((mlx::core::array *)v114);
            }
            if (v117) {
              mlx::core::array::~array((mlx::core::array *)&v116);
            }
            if (v119) {
              mlx::core::array::~array((mlx::core::array *)v118);
            }
            mlx::core::array::~array((mlx::core::array *)v120);
            mlx::core::array::~array((mlx::core::array *)&v121);
            mlx::core::array::~array((mlx::core::array *)&v184);
            if (v190) {
              mlx::core::array::~array((mlx::core::array *)&v188);
            }
            mlx::core::array::~array((mlx::core::array *)&v186);
            unint64_t v48 = (uint64_t **)*a2;
          }
          uint64_t v97 = v48[3];
          v113[0] = v48[2];
          v113[1] = v97;
          if (v97) {
            atomic_fetch_add_explicit(v97 + 1, 1uLL, memory_order_relaxed);
          }
          long long v112 = v195;
          if (*((void *)&v195 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v195 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v197, v113, &v112, v107, v105, (mlx::core::array *)&v188);
          mlx::core::array::~array((mlx::core::array *)&v112);
          mlx::core::array::~array((mlx::core::array *)v113);
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v188);
          mlx::core::array::~array((mlx::core::array *)&v188);
          LOBYTE(v110) = 1;
        }
        goto LABEL_249;
      }
      if (v14 < 0x31)
      {
        char v41 = 0;
        LOBYTE(v188) = 0;
        char v190 = 0;
        LOBYTE(v186) = 0;
      }
      else
      {
        uint64_t v38 = *a2;
        unint64_t v39 = &(*a2)[2 * v108];
        uint64_t v188 = *v39;
        std::vector<int>::pointer v40 = v39[1];
        uint64_t v189 = v40;
        if (v40)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
          uint64_t v38 = *a2;
        }
        char v41 = 1;
        char v190 = 1;
        unint64_t v42 = &v38[2 * v111];
        *(void *)&long long v186 = *v42;
        int64_t v43 = v42[1];
        *((void *)&v186 + 1) = v43;
        if (v43)
        {
          char v41 = 1;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v43 + 1, 1uLL, memory_order_relaxed);
        }
      }
      char v187 = v41;
      uint64_t v52 = *a2;
      int v53 = (*a2)[1];
      v153[0] = **a2;
      v153[1] = v53;
      if (v53)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v53 + 1, 1uLL, memory_order_relaxed);
        uint64_t v52 = *a2;
      }
      std::vector<int>::pointer v54 = v52[3];
      v152[0] = v52[2];
      v152[1] = v54;
      if (v54)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
        uint64_t v52 = *a2;
      }
      int v55 = *(_DWORD *)(a1 + 20);
      int64_t v57 = v52[4];
      std::vector<int>::pointer v56 = v52[5];
      v150[0] = v57;
      v150[1] = v56;
      if (v56) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v56 + 1, 1uLL, memory_order_relaxed);
      }
      char v151 = 1;
      LOBYTE(v148[0]) = 0;
      char v149 = 0;
      if (v190)
      {
        v148[0] = v188;
        v148[1] = v189;
        if (v189) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v189 + 1, 1uLL, memory_order_relaxed);
        }
        char v149 = 1;
      }
      LOBYTE(v146) = 0;
      char v147 = 0;
      if (v187)
      {
        long long v146 = v186;
        if (*((void *)&v186 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v186 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v147 = 1;
      }
      mlx::core::block_masked_mm(v153, v152, v55, (uint64_t)v150, (uint64_t)v148, (uint64_t)&v146, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v184);
      if (v147) {
        mlx::core::array::~array((mlx::core::array *)&v146);
      }
      if (v149) {
        mlx::core::array::~array((mlx::core::array *)v148);
      }
      if (v151) {
        mlx::core::array::~array((mlx::core::array *)v150);
      }
      mlx::core::array::~array((mlx::core::array *)v152);
      mlx::core::array::~array((mlx::core::array *)v153);
      uint64_t v58 = v9[1];
      v145[0] = *v9;
      v145[1] = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      long long v144 = v184;
      if (*((void *)&v184 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(v197, v145, &v144, v106, v105, (mlx::core::array *)&v194);
      mlx::core::array::~array((mlx::core::array *)&v144);
      mlx::core::array::~array((mlx::core::array *)v145);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v194);
      mlx::core::array::~array((mlx::core::array *)&v194);
      mlx::core::array::~array((mlx::core::array *)&v184);
      if (v187) {
        mlx::core::array::~array((mlx::core::array *)&v186);
      }
      if (!v190) {
        goto LABEL_249;
      }
      long long v59 = (mlx::core::array *)&v188;
LABEL_187:
      mlx::core::array::~array(v59);
LABEL_249:
      if (++v27 == v26) {
        goto LABEL_250;
      }
    }
    if (v29 != 1)
    {
      if (v29) {
        goto LABEL_48;
      }
      int v30 = (uint64_t **)*a2;
      long long v192 = 0;
      uint64_t v193 = 0;
      long long v191 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v191, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
      mlx::core::transpose(v30 + 2, &v191, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v194);
      if (v191)
      {
        long long v192 = v191;
        operator delete(v191);
      }
      if (v15)
      {
        std::vector<int>::const_iterator v31 = (*a2)[5];
        uint64_t v188 = (*a2)[4];
        uint64_t v189 = v31;
        if (v31)
        {
          uint64_t v32 = (atomic_ullong *)(v31 + 1);
          char v33 = 1;
          atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
        }
        else
        {
          char v33 = 1;
        }
      }
      else
      {
        char v33 = 0;
        LOBYTE(v188) = 0;
      }
      char v190 = v33;
      if (v102)
      {
        LOBYTE(v186) = 0;
        char v187 = 0;
        if (v14 < 0x31)
        {
          LOBYTE(v184) = 0;
          char v185 = 0;
LABEL_147:
          uint64_t v77 = v9[1];
          v179[0] = *(const void ***)v9;
          v179[1] = (const void **)v77;
          if (v77) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
          }
          long long v178 = v194;
          if (*((void *)&v194 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v194 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v78 = *(_DWORD *)(a1 + 20);
          LOBYTE(v176) = 0;
          char v177 = 0;
          if (v187)
          {
            long long v176 = v186;
            if (*((void *)&v186 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v186 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v177 = 1;
          }
          LOBYTE(v174[0]) = 0;
          char v175 = 0;
          if (v190)
          {
            v174[0] = v188;
            v174[1] = v189;
            if (v189) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v189 + 1, 1uLL, memory_order_relaxed);
            }
            char v175 = 1;
          }
          LOBYTE(v172) = 0;
          char v173 = 0;
          if (v185)
          {
            long long v172 = v184;
            if (*((void *)&v184 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v173 = 1;
          }
          mlx::core::block_masked_mm(v179, (const void ***)&v178, v78, (uint64_t)&v176, (uint64_t)v174, (uint64_t)&v172, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v183);
          if (v173) {
            mlx::core::array::~array((mlx::core::array *)&v172);
          }
          if (v175) {
            mlx::core::array::~array((mlx::core::array *)v174);
          }
          if (v177) {
            mlx::core::array::~array((mlx::core::array *)&v176);
          }
          mlx::core::array::~array((mlx::core::array *)&v178);
          mlx::core::array::~array((mlx::core::array *)v179);
          if (v104)
          {
            uint64_t v79 = v183;
            if ((void)v196 != (void)v183)
            {
              uint64_t v80 = *((void *)&v183 + 1);
              if (*((void *)&v183 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              int v81 = (std::__shared_weak_count *)*((void *)&v196 + 1);
              *(void *)&long long v196 = v79;
              *((void *)&v196 + 1) = v80;
              if (v81) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v81);
              }
            }
            long long v82 = &(*a2)[2 * v108];
            v170[0] = *v82;
            uint64_t v83 = v82[1];
            v170[1] = v83;
            if (v83) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v83 + 1, 1uLL, memory_order_relaxed);
            }
            mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v199, (uint64_t)v170, v100, v103, &v171);
            mlx::core::array::~array((mlx::core::array *)v170);
            mlx::core::multiply(&v183, &v171, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v169);
            long long v84 = v169;
            long long v169 = 0uLL;
            std::vector<int> v85 = (std::__shared_weak_count *)*((void *)&v183 + 1);
            long long v183 = v84;
            if (v85) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v85);
            }
            mlx::core::array::~array((mlx::core::array *)&v169);
            mlx::core::array::~array((mlx::core::array *)&v171);
            BYTE4(v110) = 1;
          }
LABEL_180:
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, &v183);
          mlx::core::array::~array((mlx::core::array *)&v183);
          if (v185) {
            mlx::core::array::~array((mlx::core::array *)&v184);
          }
          if (v187) {
            mlx::core::array::~array((mlx::core::array *)&v186);
          }
          if (v190) {
            mlx::core::array::~array((mlx::core::array *)&v188);
          }
          long long v59 = (mlx::core::array *)&v194;
          goto LABEL_187;
        }
      }
      else
      {
        std::vector<int>::pointer v74 = &(*a2)[2 * v108];
        *(void *)&long long v186 = *v74;
        int64_t v75 = v74[1];
        *((void *)&v186 + 1) = v75;
        if (v75) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v75 + 1, 1uLL, memory_order_relaxed);
        }
        char v187 = 1;
      }
      unint64_t v76 = *a2;
      uint64_t v182 = 0;
      unint64_t v180 = 0;
      BOOL v181 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v180, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
      mlx::core::transpose((uint64_t **)&v76[2 * v111], (unsigned int **)&v180, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v183);
      long long v184 = v183;
      long long v183 = 0uLL;
      char v185 = 1;
      mlx::core::array::~array((mlx::core::array *)&v183);
      if (v180)
      {
        BOOL v181 = v180;
        operator delete(v180);
      }
      goto LABEL_147;
    }
    uint64_t v34 = (uint64_t **)*a2;
    uint64_t v168 = 0;
    long long __p = 0;
    long long v167 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
    mlx::core::transpose(v34, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v194);
    if (__p)
    {
      long long v167 = __p;
      operator delete(__p);
    }
    if (v15)
    {
      std::vector<int>::pointer v35 = (*a2)[5];
      uint64_t v188 = (*a2)[4];
      uint64_t v189 = v35;
      if (v35)
      {
        int v36 = (atomic_ullong *)(v35 + 1);
        char v37 = 1;
        atomic_fetch_add_explicit(v36, 1uLL, memory_order_relaxed);
      }
      else
      {
        char v37 = 1;
      }
    }
    else
    {
      char v37 = 0;
      LOBYTE(v188) = 0;
    }
    char v190 = v37;
    if (v14 < 0x31)
    {
      LOBYTE(v186) = 0;
      char v187 = 0;
    }
    else
    {
      std::vector<int> v60 = *a2;
      uint64_t v165 = 0;
      int v163 = 0;
      int v164 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v163, v200.__begin_, (uint64_t)v200.__end_, v200.__end_ - v200.__begin_);
      mlx::core::transpose((uint64_t **)&v60[2 * v108], (unsigned int **)&v163, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v184);
      long long v186 = v184;
      long long v184 = 0uLL;
      char v187 = 1;
      mlx::core::array::~array((mlx::core::array *)&v184);
      if (v163)
      {
        int v164 = v163;
        operator delete(v163);
      }
      if (!v109)
      {
        std::vector<int> v61 = &(*a2)[2 * v111];
        *(void *)&long long v184 = *v61;
        std::vector<int> v62 = v61[1];
        *((void *)&v184 + 1) = v62;
        if (v62)
        {
          uint64_t v63 = (atomic_ullong *)(v62 + 1);
          char v64 = 1;
          atomic_fetch_add_explicit(v63, 1uLL, memory_order_relaxed);
        }
        else
        {
          char v64 = 1;
        }
        goto LABEL_104;
      }
    }
    char v64 = 0;
    LOBYTE(v184) = 0;
LABEL_104:
    char v185 = v64;
    long long v162 = v194;
    if (*((void *)&v194 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v194 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v65 = v9[1];
    v161[0] = *(const void ***)v9;
    v161[1] = (const void **)v65;
    if (v65) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
    }
    int v66 = *(_DWORD *)(a1 + 20);
    LOBYTE(v159) = 0;
    char v160 = 0;
    if (v185)
    {
      long long v159 = v184;
      if (*((void *)&v184 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v160 = 1;
    }
    LOBYTE(v157) = 0;
    char v158 = 0;
    if (v187)
    {
      long long v157 = v186;
      if (*((void *)&v186 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v186 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v158 = 1;
    }
    LOBYTE(v155[0]) = 0;
    char v156 = 0;
    if (v190)
    {
      v155[0] = v188;
      v155[1] = v189;
      if (v189) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v189 + 1, 1uLL, memory_order_relaxed);
      }
      char v156 = 1;
    }
    mlx::core::block_masked_mm((const void ***)&v162, v161, v66, (uint64_t)&v159, (uint64_t)&v157, (uint64_t)v155, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v183);
    if (v156) {
      mlx::core::array::~array((mlx::core::array *)v155);
    }
    if (v158) {
      mlx::core::array::~array((mlx::core::array *)&v157);
    }
    if (v160) {
      mlx::core::array::~array((mlx::core::array *)&v159);
    }
    mlx::core::array::~array((mlx::core::array *)v161);
    mlx::core::array::~array((mlx::core::array *)&v162);
    if (v109)
    {
      uint64_t v67 = v183;
      if ((void)v195 != (void)v183)
      {
        uint64_t v68 = *((void *)&v183 + 1);
        if (*((void *)&v183 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v69 = (std::__shared_weak_count *)*((void *)&v195 + 1);
        *(void *)&long long v195 = v67;
        *((void *)&v195 + 1) = v68;
        if (v69) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v69);
        }
      }
      unint64_t v70 = &(*a2)[2 * v111];
      v154[0] = *v70;
      uint64_t v71 = v70[1];
      v154[1] = v71;
      if (v71) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v71 + 1, 1uLL, memory_order_relaxed);
      }
      mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(&v199, (uint64_t)v154, v103, v101, &v171);
      mlx::core::array::~array((mlx::core::array *)v154);
      mlx::core::multiply(&v183, &v171, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v169);
      long long v72 = v169;
      long long v169 = 0uLL;
      int v73 = (std::__shared_weak_count *)*((void *)&v183 + 1);
      long long v183 = v72;
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      }
      mlx::core::array::~array((mlx::core::array *)&v169);
      mlx::core::array::~array((mlx::core::array *)&v171);
      LOBYTE(v110) = 1;
    }
    goto LABEL_180;
  }
LABEL_250:
  mlx::core::array::~array((mlx::core::array *)&v195);
  mlx::core::array::~array((mlx::core::array *)&v196);
  mlx::core::array::~array((mlx::core::array *)v198);
  if (v200.__begin_)
  {
    v200.__end_ = v200.__begin_;
    operator delete(v200.__begin_);
  }
}

void sub_256F3F04C(_Unwind_Exception *a1)
{
  size_t v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(void *)(v2 - 104) = v4;
    operator delete(v4);
  }
  *(void *)(v2 - 112) = v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_256F3F3F8()
{
  uint64_t v1 = *(void *)(v0 - 232);
  if (v1)
  {
    *(void *)(v0 - 224) = v1;
    JUMPOUT(0x256F3F408);
  }
  JUMPOUT(0x256F3F3BCLL);
}

void mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_0::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(const void ***)a2;
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  char v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *v10, (uint64_t)v10[1], ((unsigned char *)v10[1] - (unsigned char *)*v10) >> 2);
  uint64_t v11 = operator new(8uLL);
  long long __p = v11;
  void *v11 = -3;
  unint64_t v39 = v11 + 1;
  std::vector<int>::pointer v40 = v11 + 1;
  mlx::core::expand_dims((const void ***)a2, (int **)&__p, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v33);
  long long v12 = *(_OWORD *)&v33.__begin_;
  v33.__begin_ = 0;
  v33.__end_ = 0;
  long long v13 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  mlx::core::array::~array((mlx::core::array *)&v33);
  if (__p)
  {
    unint64_t v39 = __p;
    operator delete(__p);
  }
  unint64_t v14 = *(const void ***)a2;
  unint64_t v39 = 0;
  std::vector<int>::pointer v40 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *v14, (uint64_t)v14[1], ((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
  int v15 = (char *)__p;
  int64_t v16 = v39 - (unsigned char *)__p;
  *(_DWORD *)((char *)__p + ((((v39 - (unsigned char *)__p) << 30) - 0x100000000) >> 30)) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)&v15[((v16 << 30) - 0x300000000) >> 30] = *(_DWORD *)(v9 + 20);
  mlx::core::broadcast_to((const void ***)a2, (const void **)&__p, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v33);
  long long v17 = *(_OWORD *)&v33.__begin_;
  v33.__begin_ = 0;
  v33.__end_ = 0;
  long long v18 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  mlx::core::array::~array((mlx::core::array *)&v33);
  int v19 = v41;
  uint64_t v20 = (uint64_t)v42;
  uint64_t v21 = v42 - (char *)v41;
  uint64_t v22 = ((v42 - (char *)v41) << 30) - 0x200000000;
  *(_DWORD *)((char *)v41 + (v22 >> 30)) *= *(_DWORD *)(v9 + 20);
  uint64_t v23 = (v21 << 30) - 0x100000000;
  *(_DWORD *)((char *)v19 + (v23 >> 30)) *= *(_DWORD *)(v9 + 20);
  int v36 = 0;
  uint64_t v37 = 0;
  std::vector<int>::pointer v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, v19, v20, v21 >> 2);
  mlx::core::reshape((const void ***)a2, (uint64_t)&v35, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v33);
  long long v24 = *(_OWORD *)&v33.__begin_;
  v33.__begin_ = 0;
  v33.__end_ = 0;
  unint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = v21 << 30;
  uint64_t v27 = v22 >> 32;
  uint64_t v28 = v23 >> 32;
  mlx::core::array::~array((mlx::core::array *)&v33);
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
  int v29 = v41;
  v41[v27] = a3;
  v29[v28] = a4;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v26 >> 32, &__x);
  mlx::core::slice((const void ***)a2, (uint64_t)&v33, (uint64_t)&v41, *(mlx::core **)(v9 + 8), *(unsigned int *)(v9 + 16) | 0x100000000, (const void ***)&v34);
  long long v30 = v34;
  long long v34 = 0uLL;
  std::vector<int>::const_iterator v31 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v30;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  mlx::core::array::~array((mlx::core::array *)&v34);
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
  *a5 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (__p)
  {
    unint64_t v39 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    unint64_t v42 = (char *)v41;
    operator delete(v41);
  }
}

void sub_256F3F6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  long long v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(void *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::BlockMaskedMM::vjp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<mlx::core::array> const&)::$_1::operator()(mlx::core ***a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, mlx::core::array *a6@<X8>)
{
  uint64_t v10 = *a1;
  mlx::core::multiply(a2, a3, (*a1)[1], *((unsigned int *)*a1 + 4) | 0x100000000, &v79);
  if (a5 | a4)
  {
    uint64_t v11 = (char *)operator new(8uLL);
    int64_t v75 = v11;
    *(void *)uint64_t v11 = -2;
    unint64_t v76 = v11 + 8;
    uint64_t v77 = v11 + 8;
    long long v12 = operator new(8uLL);
    v73[0] = v12;
    void *v12 = 0;
    v73[1] = v12 + 1;
    std::vector<int>::pointer v74 = v12 + 1;
    long long v13 = operator new(8uLL);
    long long __p = v13;
    void *v13 = a4 | (unint64_t)(a5 << 32);
    uint64_t v71 = v13 + 1;
    long long v72 = v13 + 1;
    mlx::core::pad((const void ***)&v79, (uint64_t *)&v75, (uint64_t *)v73, (uint64_t *)&__p, a1[1], v10[1], *((unsigned int *)v10 + 4) | 0x100000000, &v78);
    long long v14 = v78;
    long long v78 = 0uLL;
    int v15 = (std::__shared_weak_count *)*((void *)&v79 + 1);
    long long v79 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    mlx::core::array::~array((mlx::core::array *)&v78);
    if (__p)
    {
      uint64_t v71 = __p;
      operator delete(__p);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
    if (v75)
    {
      unint64_t v76 = (char *)v75;
      operator delete(v75);
    }
  }
  int64_t v16 = *(const void **)v79;
  uint64_t v17 = *(void *)(v79 + 8) - 8;
  unint64_t v18 = (v17 - *(void *)v79) >> 2;
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  int64_t v75 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v75, v16, v17, v18);
  if (*(void *)(v79 + 8) - *(void *)v79 <= 4uLL) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v20 = v76;
  int v19 = v77;
  int v21 = *(_DWORD *)(*(void *)(v79 + 8) - 8) / *((_DWORD *)v10 + 5);
  if (v76 >= v77)
  {
    uint64_t v23 = (char *)v75;
    uint64_t v24 = (v76 - (unsigned char *)v75) >> 2;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v77 - (unsigned char *)v75;
    if ((v77 - (unsigned char *)v75) >> 1 > v25) {
      unint64_t v25 = v26 >> 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77, v27);
      uint64_t v23 = (char *)v75;
      uint64_t v20 = v76;
    }
    else
    {
      uint64_t v28 = 0;
    }
    int v29 = (int *)&v28[4 * v24];
    int v19 = &v28[4 * v27];
    int *v29 = v21;
    uint64_t v22 = (char *)(v29 + 1);
    while (v20 != v23)
    {
      int v30 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *--int v29 = v30;
    }
    int64_t v75 = v29;
    unint64_t v76 = v22;
    uint64_t v77 = v19;
    if (v23)
    {
      operator delete(v23);
      int v19 = v77;
    }
  }
  else
  {
    *(_DWORD *)unint64_t v76 = v21;
    uint64_t v22 = v20 + 4;
  }
  unint64_t v76 = v22;
  if (v22 >= v19)
  {
    uint64_t v32 = (char *)v75;
    uint64_t v33 = (v22 - (unsigned char *)v75) >> 2;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 62) {
      goto LABEL_87;
    }
    uint64_t v35 = v19 - (unsigned char *)v75;
    if (v35 >> 1 > v34) {
      unint64_t v34 = v35 >> 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77, v36);
      uint64_t v32 = (char *)v75;
      uint64_t v22 = v76;
    }
    else
    {
      uint64_t v37 = 0;
    }
    uint64_t v38 = (int *)&v37[4 * v33];
    unint64_t v39 = &v37[4 * v36];
    int *v38 = *((_DWORD *)v10 + 5);
    std::vector<int>::const_iterator v31 = v38 + 1;
    while (v22 != v32)
    {
      int v40 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--uint64_t v38 = v40;
    }
    int64_t v75 = v38;
    unint64_t v76 = (char *)v31;
    uint64_t v77 = v39;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v22 = *((_DWORD *)v10 + 5);
    std::vector<int>::const_iterator v31 = (int *)(v22 + 4);
  }
  unint64_t v76 = (char *)v31;
  uint64_t v41 = *(void *)(v79 + 8);
  if (v41 == *(void *)v79) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  int v42 = *(_DWORD *)(v41 - 4);
  uint64_t v43 = v77;
  int v44 = v42 / *((_DWORD *)v10 + 5);
  if (v31 >= (int *)v77)
  {
    uint64_t v46 = (int *)v75;
    uint64_t v47 = ((char *)v31 - (unsigned char *)v75) >> 2;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = v77 - (unsigned char *)v75;
    if ((v77 - (unsigned char *)v75) >> 1 > v48) {
      unint64_t v48 = v49 >> 1;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      char v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77, v50);
      uint64_t v46 = (int *)v75;
      std::vector<int>::const_iterator v31 = (int *)v76;
    }
    else
    {
      char v51 = 0;
    }
    uint64_t v52 = (int *)&v51[4 * v47];
    uint64_t v43 = &v51[4 * v50];
    *uint64_t v52 = v44;
    uint64_t v45 = (char *)(v52 + 1);
    while (v31 != v46)
    {
      int v53 = *--v31;
      *--uint64_t v52 = v53;
    }
    int64_t v75 = v52;
    unint64_t v76 = v45;
    uint64_t v77 = v43;
    if (v46)
    {
      operator delete(v46);
      uint64_t v43 = v77;
    }
  }
  else
  {
    *std::vector<int>::const_iterator v31 = v44;
    uint64_t v45 = (char *)(v31 + 1);
  }
  unint64_t v76 = v45;
  if (v45 < v43)
  {
    *(_DWORD *)uint64_t v45 = *((_DWORD *)v10 + 5);
    uint64_t v54 = (uint64_t)(v45 + 4);
    goto LABEL_76;
  }
  int v55 = (char *)v75;
  uint64_t v56 = (v45 - (unsigned char *)v75) >> 2;
  unint64_t v57 = v56 + 1;
  if ((unint64_t)(v56 + 1) >> 62) {
LABEL_87:
  }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  uint64_t v58 = v43 - (unsigned char *)v75;
  if (v58 >> 1 > v57) {
    unint64_t v57 = v58 >> 1;
  }
  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v59 = v57;
  }
  if (v59)
  {
    std::vector<int> v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77, v59);
    int v55 = (char *)v75;
    uint64_t v45 = v76;
  }
  else
  {
    std::vector<int> v60 = 0;
  }
  std::vector<int> v61 = &v60[4 * v56];
  std::vector<int> v62 = &v60[4 * v59];
  *(_DWORD *)std::vector<int> v61 = *((_DWORD *)v10 + 5);
  uint64_t v54 = (uint64_t)(v61 + 4);
  while (v45 != v55)
  {
    int v63 = *((_DWORD *)v45 - 1);
    v45 -= 4;
    *((_DWORD *)v61 - 1) = v63;
    v61 -= 4;
  }
  int64_t v75 = v61;
  unint64_t v76 = (char *)v54;
  uint64_t v77 = v62;
  if (v55) {
    operator delete(v55);
  }
LABEL_76:
  unint64_t v76 = (char *)v54;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v75, v54, (v54 - (uint64_t)v75) >> 2);
  mlx::core::reshape((const void ***)&v79, (uint64_t)&v67, v10[1], *((unsigned int *)v10 + 4) | 0x100000000, (const void ***)v73);
  long long v64 = *(_OWORD *)v73;
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v65 = (std::__shared_weak_count *)*((void *)&v79 + 1);
  long long v79 = v64;
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  mlx::core::array::~array((mlx::core::array *)v73);
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  int v66 = operator new(8uLL);
  v73[0] = v66;
  *int v66 = -3;
  v73[1] = v66 + 1;
  std::vector<int>::pointer v74 = v66 + 1;
  mlx::core::sum((uint64_t)&v79, (uint64_t)v73, 0, v10[1], *((unsigned int *)v10 + 4) | 0x100000000, a6);
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (v75)
  {
    unint64_t v76 = (char *)v75;
    operator delete(v75);
  }
  mlx::core::array::~array((mlx::core::array *)&v79);
}

void sub_256F3FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  mlx::core::array::~array((mlx::core::array *)(v19 - 64));
  _Unwind_Resume(a1);
}

void mlx::core::GatherMM::vjp(uint64_t a1@<X0>, uint64_t ***a2@<X1>, const void ****a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = **a3;
  uint64_t v9 = *v8;
  unint64_t v10 = (unsigned char *)v8[1] - (unsigned char *)*v8;
  if (v10 <= 4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  long long v12 = (const void ***)*a2;
  long long v13 = **a2;
  uint64_t v14 = v13[1];
  if (v14 == *v13) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  int v15 = *(_DWORD **)a4;
  int64_t v16 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v16)
  {
    uint64_t v17 = (uint64_t)v9 + v10;
    int v35 = *(_DWORD *)(v17 - 4);
    int v36 = *(_DWORD *)(v17 - 8);
    int v18 = *(_DWORD *)(v14 - 4);
    do
    {
      if (*v15 == 1)
      {
        mlx::core::zeros_like((uint64_t *)*a2 + 2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v69);
        mlx::core::swapaxes(*a2, -1, -2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v67);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        long long v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, **(const void ***)&v69[0], *(void *)(*(void *)&v69[0] + 8), (uint64_t)(*(void *)(*(void *)&v69[0] + 8) - **(void **)&v69[0]) >> 2);
        uint64_t v47 = 0;
        unint64_t v48 = 0;
        long long __p = 0;
        unint64_t v27 = operator new(0xCuLL);
        uint64_t v47 = v27 + 3;
        unint64_t v48 = v27 + 3;
        _DWORD *v27 = -1;
        v27[1] = v18;
        void v27[2] = v35;
        long long __p = v27;
        mlx::core::reshape((const void ***)v69, (uint64_t)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v63);
        long long v28 = v63;
        long long v63 = 0uLL;
        int v29 = (std::__shared_weak_count *)*((void *)&v69[0] + 1);
        v69[0] = v28;
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        mlx::core::array::~array((mlx::core::array *)&v63);
        if (__p)
        {
          uint64_t v47 = __p;
          operator delete(__p);
        }
        v45[0] = v67;
        v45[1] = (const void **)v68;
        if (v68) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
        }
        int v30 = v7[1];
        v44[0] = *v7;
        v44[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v30 + 1, 1uLL, memory_order_relaxed);
        }
        std::vector<int>::const_iterator v31 = v12[5];
        v42[0] = v12[4];
        v42[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v31 + 1, 1uLL, memory_order_relaxed);
        }
        char v43 = 1;
        v40[0] = 0;
        char v41 = 0;
        mlx::core::gather_mm(v45, v44, (uint64_t)v42, (uint64_t)v40, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v63);
        if (v41) {
          mlx::core::array::~array((mlx::core::array *)v40);
        }
        if (v43) {
          mlx::core::array::~array((mlx::core::array *)v42);
        }
        mlx::core::array::~array((mlx::core::array *)v44);
        mlx::core::array::~array((mlx::core::array *)v45);
        mlx::core::expand_dims((const void ***)&v63, -3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v53);
        long long v32 = v53;
        long long v53 = 0uLL;
        uint64_t v33 = (std::__shared_weak_count *)*((void *)&v63 + 1);
        long long v63 = v32;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        mlx::core::array::~array((mlx::core::array *)&v53);
        mlx::core::scatter_add((mlx::core::array *)v69, v12 + 6, (mlx::core::array *)&v63, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v53);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v64, (uint64_t)v65, (v65 - (unsigned char *)v64) >> 2);
        mlx::core::reshape((const void ***)&v53, (uint64_t)&v37, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v52);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v52);
        mlx::core::array::~array((mlx::core::array *)v52);
        uint64_t v26 = v37;
        if (!v37) {
          goto LABEL_44;
        }
        uint64_t v38 = v37;
      }
      else
      {
        if (*v15)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "[GatherMM] Cannot calculate VJP with respect to indices.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
        }
        mlx::core::zeros_like((uint64_t *)*a2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v69);
        mlx::core::swapaxes(*a2 + 2, -1, -2, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v67);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        long long v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, **(const void ***)&v69[0], *(void *)(*(void *)&v69[0] + 8), (uint64_t)(*(void *)(*(void *)&v69[0] + 8) - **(void **)&v69[0]) >> 2);
        std::vector<int> v61 = 0;
        std::vector<int> v62 = 0;
        std::vector<int> v60 = 0;
        uint64_t v19 = operator new(0xCuLL);
        std::vector<int> v61 = v19 + 3;
        std::vector<int> v62 = v19 + 3;
        *uint64_t v19 = -1;
        v19[1] = v36;
        void v19[2] = v18;
        std::vector<int> v60 = v19;
        mlx::core::reshape((const void ***)v69, (uint64_t)&v60, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v63);
        long long v20 = v63;
        long long v63 = 0uLL;
        int v21 = (std::__shared_weak_count *)*((void *)&v69[0] + 1);
        v69[0] = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        mlx::core::array::~array((mlx::core::array *)&v63);
        if (v60)
        {
          std::vector<int> v61 = v60;
          operator delete(v60);
        }
        uint64_t v22 = v7[1];
        v59[0] = *v7;
        v59[1] = v22;
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
        }
        v58[0] = v67;
        v58[1] = (const void **)v68;
        if (v68) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
        }
        v56[0] = 0;
        char v57 = 0;
        uint64_t v23 = v12[7];
        v54[0] = v12[6];
        v54[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
        }
        char v55 = 1;
        mlx::core::gather_mm(v59, v58, (uint64_t)v56, (uint64_t)v54, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v63);
        if (v55) {
          mlx::core::array::~array((mlx::core::array *)v54);
        }
        if (v57) {
          mlx::core::array::~array((mlx::core::array *)v56);
        }
        mlx::core::array::~array((mlx::core::array *)v58);
        mlx::core::array::~array((mlx::core::array *)v59);
        mlx::core::expand_dims((const void ***)&v63, -3, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, (const void ***)&v53);
        long long v24 = v53;
        long long v53 = 0uLL;
        unint64_t v25 = (std::__shared_weak_count *)*((void *)&v63 + 1);
        long long v63 = v24;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        mlx::core::array::~array((mlx::core::array *)&v53);
        mlx::core::scatter_add((mlx::core::array *)v69, v12 + 4, (mlx::core::array *)&v63, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, &v53);
        unint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v49 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, v64, (uint64_t)v65, (v65 - (unsigned char *)v64) >> 2);
        mlx::core::reshape((const void ***)&v53, (uint64_t)&v49, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v52);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a5, (uint64_t)v52);
        mlx::core::array::~array((mlx::core::array *)v52);
        uint64_t v26 = v49;
        if (!v49) {
          goto LABEL_44;
        }
        unint64_t v50 = v49;
      }
      operator delete(v26);
LABEL_44:
      mlx::core::array::~array((mlx::core::array *)&v53);
      mlx::core::array::~array((mlx::core::array *)&v63);
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      mlx::core::array::~array((mlx::core::array *)&v67);
      mlx::core::array::~array((mlx::core::array *)v69);
      ++v15;
    }
    while (v15 != v16);
  }
}

void sub_256F402B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  *(void *)(v51 - 152) = v50;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 152));
  _Unwind_Resume(a1);
}

BOOL mlx::core::BlockMaskedMM::is_equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

void mlx::core::Transpose::vjp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t ***a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::Transpose::vjp();
  }
  if (a4[1] - *a4 != 4) {
    mlx::core::Transpose::vjp();
  }
  uint64_t v8 = (uint64_t *)(a1 + 24);
  uint64_t v9 = (void *)(a1 + 32);
  std::vector<int>::vector(&v20, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  uint64_t v10 = *v8;
  std::vector<int>::pointer begin = v20.__begin_;
  if (*v9 != *v8)
  {
    uint64_t v12 = 0;
    unint64_t v13 = (*v9 - *v8) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      begin[*(int *)(v10 + 4 * v12)] = v12;
      ++v12;
    }
    while (v13 != v12);
  }
  uint64_t v14 = *a3;
  int v18 = 0;
  uint64_t v19 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)v20.__end_, v20.__end_ - begin);
  mlx::core::transpose(v14, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v23);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v21 = a5;
  char v22 = 0;
  int v15 = operator new(0x10uLL);
  *a5 = v15;
  a5[1] = v15;
  a5[2] = v15 + 2;
  uint64_t v16 = v23[1];
  *int v15 = v23[0];
  v15[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  a5[1] = v15 + 2;
  mlx::core::array::~array((mlx::core::array *)v23);
  if (__p)
  {
    int v18 = __p;
    operator delete(__p);
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
}

void sub_256F405F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::jvp(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 != 16) {
    mlx::core::Transpose::jvp();
  }
  uint64_t v5 = *(uint64_t ***)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != 16) {
    mlx::core::Transpose::jvp();
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  mlx::core::transpose(v5, (unsigned int **)&__p, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v12 = a4;
  char v13 = 0;
  uint64_t v7 = operator new(0x10uLL);
  *a4 = v7;
  a4[1] = v7;
  a4[2] = v7 + 2;
  uint64_t v8 = v14[1];
  void *v7 = v14[0];
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a4[1] = v7 + 2;
  mlx::core::array::~array((mlx::core::array *)v14);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_256F40764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Transpose::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v28[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t ***)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Transpose::vmap();
  }
  if (a3[1] - *a3 != 4) {
    mlx::core::Transpose::vmap();
  }
  uint64_t v7 = *(int *)*a3;
  std::vector<int>::value_type __x = v7;
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 24);
    uint64_t v11 = *(_DWORD **)(a1 + 32);
    uint64_t v9 = (std::vector<int> *)(a1 + 24);
    if (v10 != v11)
    {
      uint64_t v12 = *(_DWORD **)(a1 + 24);
      do
      {
        if (*v12 >= (int)v7) {
          ++*v12;
        }
        ++v12;
      }
      while (v12 != v11);
    }
    v13.__i_ = &v10[v7];
    std::vector<int>::insert(v9, v13, &__x);
    uint64_t v5 = *(uint64_t ***)a2;
  }
  char v22 = 0;
  uint64_t v23 = 0;
  int v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  mlx::core::transpose(v5, (unsigned int **)&v21, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v28);
  long long v24 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  long long __p = &v24;
  LOBYTE(v19) = 0;
  uint64_t v14 = operator new(0x10uLL);
  long long v24 = v14;
  unint64_t v25 = v14;
  uint64_t v26 = v14 + 2;
  uint64_t v15 = v28[1];
  *uint64_t v14 = v28[0];
  v14[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v25 = v14 + 2;
  std::vector<int>::value_type v16 = __x;
  uint64_t v17 = operator new(4uLL);
  long long __p = v17;
  *uint64_t v17 = v16;
  uint64_t v19 = v17 + 1;
  std::vector<int> v20 = v17 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v24, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  long long __p = &v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v28);
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_256F40960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  long long __p = &a16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v16 - 56));
  if (a13)
  {
    a14 = (uint64_t)a13;
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::Transpose::is_equivalent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(const void **)(a1 + 24);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 24;
  uint64_t v5 = *(const void **)(a2 + 24);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

void mlx::core::NumberOfElements::vmap(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v30[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::NumberOfElements::vmap();
  }
  if ((char *)a3[1] - (char *)*a3 != 4) {
    mlx::core::NumberOfElements::vmap();
  }
  unint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v29 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  int v8 = **a3;
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = v27;
    uint64_t v10 = v28;
    while (v9 != v10)
    {
      if (*v9 >= v8) {
        ++*v9;
      }
      ++v9;
    }
  }
  memset(__p, 0, sizeof(__p));
  uint64_t v11 = *(void *)(a1 + 52);
  std::allocate_shared[abi:ne180100]<mlx::core::NumberOfElements,std::allocator<mlx::core::NumberOfElements>,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,void>((uint64_t *)(a1 + 8), (uint64_t)&v27, (char *)(a1 + 48), (uint64_t *)(a1 + 52), &v19);
  long long v23 = v19;
  long long v19 = 0uLL;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v21, *(void **)a2, *(void **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  mlx::core::array::array(&v25, (long long *)__p, v11, &v23, &v21);
  uint64_t v16 = &v21;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v13 = v25;
  uint64_t v12 = v26;
  v30[0] = v25;
  v30[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  long long v19 = 0uLL;
  std::vector<int> v20 = 0;
  uint64_t v16 = &v19;
  LOBYTE(v17) = 0;
  uint64_t v14 = operator new(0x10uLL);
  *(void *)&long long v19 = v14;
  std::vector<int> v20 = v14 + 2;
  *uint64_t v14 = v13;
  v14[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v19 + 1) = v14 + 2;
  uint64_t v15 = operator new(4uLL);
  uint64_t v16 = v15;
  *uint64_t v15 = -1;
  uint64_t v17 = v15 + 1;
  int v18 = v15 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)&v19, (uint64_t)&v16);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  uint64_t v16 = &v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  mlx::core::array::~array((mlx::core::array *)v30);
  mlx::core::array::~array((mlx::core::array *)&v25);
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
}

void sub_256F40C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  long long __p = &a13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)(v23 - 56));
  mlx::core::array::~array((mlx::core::array *)(v23 - 96));
  uint64_t v25 = *(void **)(v23 - 80);
  if (v25)
  {
    *(void *)(v23 - 72) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

BOOL mlx::core::NumberOfElements::is_equivalent(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 24;
  size_t v4 = *(const void **)(a1 + 24);
  size_t v6 = *(void *)(v5 + 8) - (void)v4;
  uint64_t v8 = a2 + 24;
  uint64_t v7 = *(const void **)(a2 + 24);
  return v6 == *(void *)(v8 + 8) - (void)v7
      && !memcmp(v4, v7, v6)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
}

void mlx::core::SVD::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = **a3;
  uint64_t v7 = *a2;
  if (v6 < 1)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    v14[0] = *(void *)v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v14);
  }
  mlx::core::linalg::svd(v14, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v13);
  uint64_t v9 = operator new(0xCuLL);
  uint64_t v11 = v9 + 3;
  uint64_t v12 = (char *)(v9 + 3);
  *(void *)uint64_t v9 = v6 >> 31;
  void v9[2] = v6 >> 31;
  long long __p = v9;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, (void **)v13, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  long long __p = v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v14);
}

void sub_256F40E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  long long __p = &a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)&a15);
  _Unwind_Resume(a1);
}

void mlx::core::Inverse::vmap(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  int v6 = **a3;
  uint64_t v7 = *a2;
  if (v6 < 1)
  {
    std::string::size_type v8 = *(void *)(v7 + 8);
    v18[0] = *(void *)v7;
    v18[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    mlx::core::moveaxis((uint64_t **)v7, **a3, 0, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v18);
  }
  mlx::core::linalg::inv(v18, *(mlx::core **)(a1 + 8), *(unsigned int *)(a1 + 16) | 0x100000000, v19);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long __p = &v15;
  LOBYTE(v13) = 0;
  uint64_t v9 = operator new(0x10uLL);
  uint64_t v15 = v9;
  uint64_t v16 = v9;
  uint64_t v17 = v9 + 2;
  uint64_t v10 = v19[1];
  *uint64_t v9 = v19[0];
  v9[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v9 + 2;
  uint64_t v11 = operator new(4uLL);
  long long __p = v11;
  _DWORD *v11 = v6 >> 31;
  uint64_t v13 = v11 + 1;
  uint64_t v14 = v11 + 1;
  std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(a4, &v15, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  long long __p = &v15;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  mlx::core::array::~array((mlx::core::array *)v19);
  mlx::core::array::~array((mlx::core::array *)v18);
}

void sub_256F40FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<true,0>(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F410C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void mlx::core::anonymous namespace'::vmap_binary_op(std::vector<mlx::core::array> const&,std::vector<int> const&,mlx::core::Stream const&)::$_0::operator()<mlx::core::array>(uint64_t a1@<X0>, const void ***a2@<X1>, const void ***a3@<X8>)
{
  int v6 = *a2;
  memset(&v13, 0, sizeof(v13));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *v6, (uint64_t)v6[1], ((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2);
  v7.__i_ = v13.__begin_;
  std::vector<int>::size_type v8 = *(int *)(a1 + 12) - (v13.__end_ - v13.__begin_);
  std::vector<int>::value_type __x = 1;
  std::vector<int>::insert(&v13, v7, v8, &__x);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13.__begin_, (uint64_t)v13.__end_, v13.__end_ - v13.__begin_);
  mlx::core::reshape(a2, (uint64_t)&__p, *(mlx::core **)a1, *(unsigned int *)(a1 + 8) | 0x100000000, a3);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F411AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<int>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<int> const&,0>(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_256F4124C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>(unint64_t result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v46 = *(a2 - 1);
                uint64_t v47 = *v12;
                if (*(_DWORD *)(**a3 + 4 * v46) < *(_DWORD *)(**a3 + 4 * v47))
                {
                  int *v12 = v46;
                  *(a2 - 1) = v47;
                }
                break;
              case 3uLL:
                uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4uLL:
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                unint64_t v48 = v12 + 2;
                uint64_t v49 = v12 + 3;
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v50 = *(a2 - 1);
                uint64_t v51 = v12[3];
                uint64_t v52 = **a3;
                if (*(_DWORD *)(v52 + 4 * v50) < *(_DWORD *)(v52 + 4 * v51))
                {
                  *uint64_t v49 = v50;
                  *(a2 - 1) = v51;
                  int v53 = *v49;
                  uint64_t v54 = *v48;
                  if (*(_DWORD *)(v52 + 4 * *v49) < *(_DWORD *)(v52 + 4 * v54))
                  {
                    int *v48 = v53;
                    *uint64_t v49 = v54;
                    uint64_t v55 = v12[1];
                    if (*(_DWORD *)(v52 + 4 * v53) < *(_DWORD *)(v52 + 4 * v55))
                    {
                      v12[1] = v53;
                      void v12[2] = v55;
                      uint64_t v56 = *v12;
                      if (*(_DWORD *)(v52 + 4 * v53) < *(_DWORD *)(v52 + 4 * v56))
                      {
                        int *v12 = v53;
                        v12[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                char v57 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v58 = 0;
                  uint64_t v59 = **a3;
                  std::vector<int> v60 = v12;
                  do
                  {
                    int v61 = v60[1];
                    uint64_t v62 = *v60;
                    std::vector<int> v60 = v57;
                    if (*(_DWORD *)(v59 + 4 * v61) < *(_DWORD *)(v59 + 4 * v62))
                    {
                      uint64_t v63 = v58;
                      while (1)
                      {
                        *(int *)((char *)v12 + v63 + 4) = v62;
                        if (!v63) {
                          break;
                        }
                        uint64_t v62 = *(int *)((char *)v12 + v63 - 4);
                        v63 -= 4;
                        if (*(_DWORD *)(v59 + 4 * v61) >= *(_DWORD *)(v59 + 4 * v62))
                        {
                          long long v64 = (int *)((char *)v12 + v63 + 4);
                          goto LABEL_80;
                        }
                      }
                      long long v64 = v12;
LABEL_80:
                      *long long v64 = v61;
                    }
                    char v57 = v60 + 1;
                    v58 += 4;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              long long v95 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v96 = **a3;
                do
                {
                  int v97 = v11[1];
                  uint64_t v98 = *v11;
                  uint64_t v11 = v95;
                  if (*(_DWORD *)(v96 + 4 * v97) < *(_DWORD *)(v96 + 4 * v98))
                  {
                    do
                    {
                      *long long v95 = v98;
                      uint64_t v98 = *(v95 - 2);
                      --v95;
                    }
                    while (*(_DWORD *)(v96 + 4 * v97) < *(_DWORD *)(v96 + 4 * v98));
                    *long long v95 = v97;
                  }
                  long long v95 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v65 = (v14 - 2) >> 1;
              uint64_t v66 = *a3;
              int64_t v67 = v65;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = &v12[v69];
                  int v71 = *v70;
                  if (2 * v68 + 2 < (uint64_t)v14)
                  {
                    uint64_t v72 = *v66;
                    if (*(_DWORD *)(*v66 + 4 * v71) < *(_DWORD *)(*v66 + 4 * v70[1]))
                    {
                      int v71 = v70[1];
                      ++v70;
                      uint64_t v69 = 2 * v68 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v72 = *v66;
                  }
                  int v73 = &v12[v68];
                  int v74 = *v73;
                  uint64_t result = *(unsigned int *)(v72 + 4 * v71);
                  if ((int)result >= *(_DWORD *)(v72 + 4 * *v73))
                  {
                    uint64_t result = v74;
                    do
                    {
                      int64_t v75 = v70;
                      int *v73 = v71;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v76 = (2 * v69) | 1;
                      unint64_t v70 = &v12[v76];
                      uint64_t v69 = 2 * v69 + 2;
                      int v71 = *v70;
                      if (v69 < (uint64_t)v14)
                      {
                        if (*(_DWORD *)(v72 + 4 * v71) >= *(_DWORD *)(v72 + 4 * v70[1]))
                        {
                          uint64_t v69 = v76;
                        }
                        else
                        {
                          int v71 = v70[1];
                          ++v70;
                        }
                      }
                      else
                      {
                        uint64_t v69 = v76;
                      }
                      int v73 = v75;
                    }
                    while (*(_DWORD *)(v72 + 4 * v71) >= *(_DWORD *)(v72 + 4 * v74));
                    *int64_t v75 = v74;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v77 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v78 = 0;
                int v79 = *v12;
                uint64_t v80 = *a3;
                int v81 = v12;
                do
                {
                  long long v82 = &v81[v78];
                  int v85 = v82[1];
                  uint64_t v83 = v82 + 1;
                  int v84 = v85;
                  uint64_t v86 = (2 * v78) | 1;
                  uint64_t v78 = 2 * v78 + 2;
                  if (v78 >= v77)
                  {
                    uint64_t v78 = v86;
                  }
                  else
                  {
                    uint64_t result = (unint64_t)(v83 + 1);
                    if (*(_DWORD *)(*v80 + 4 * v84) >= *(_DWORD *)(*v80 + 4 * v83[1]))
                    {
                      uint64_t v78 = v86;
                    }
                    else
                    {
                      int v84 = v83[1];
                      ++v83;
                    }
                  }
                  *int v81 = v84;
                  int v81 = v83;
                }
                while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                if (v83 == --a2)
                {
                  *uint64_t v83 = v79;
                }
                else
                {
                  *uint64_t v83 = *a2;
                  *a2 = v79;
                  uint64_t v87 = (char *)v83 - (char *)v12 + 4;
                  if (v87 >= 5)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                    long long v89 = &v12[v88];
                    uint64_t v90 = *v89;
                    int v91 = *v83;
                    uint64_t v92 = *v80;
                    if (*(_DWORD *)(v92 + 4 * v90) < *(_DWORD *)(v92 + 4 * *v83))
                    {
                      do
                      {
                        uint64_t v93 = v89;
                        *uint64_t v83 = v90;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        long long v89 = &v12[v88];
                        uint64_t v90 = *v89;
                        uint64_t result = *(unsigned int *)(v92 + 4 * v91);
                        uint64_t v83 = v93;
                      }
                      while (*(_DWORD *)(v92 + 4 * v90) < (int)result);
                      *uint64_t v93 = v91;
                    }
                  }
                }
              }
              while (v77-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v11, &v11[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v16 - 1, v16, &v11[v15 + 1], a3);
            int v17 = *v11;
            int *v11 = *v16;
            *uint64_t v16 = v17;
          }
          else
          {
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(&v11[v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          int v18 = *v11;
          uint64_t v19 = **a3;
          if (a5) {
            break;
          }
          int v20 = *(_DWORD *)(v19 + 4 * v18);
          if (*(_DWORD *)(v19 + 4 * *(v11 - 1)) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(_DWORD *)(v19 + 4 * *(a2 - 1)))
          {
            uint64_t v37 = v11 + 1;
            do
            {
              uint64_t v12 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v20 >= *(_DWORD *)(v19 + 4 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v36 = v12[1];
              ++v12;
            }
            while (v20 >= *(_DWORD *)(v19 + 4 * v36));
          }
          uint64_t v38 = a2;
          if (v12 < a2)
          {
            uint64_t v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v20 < *(_DWORD *)(v19 + 4 * v39));
          }
          if (v12 < v38)
          {
            int v40 = *v12;
            int v41 = *v38;
            do
            {
              int *v12 = v41;
              int *v38 = v40;
              int v42 = *(_DWORD *)(v19 + 4 * v18);
              do
              {
                uint64_t v43 = v12[1];
                ++v12;
                int v40 = v43;
              }
              while (v42 >= *(_DWORD *)(v19 + 4 * v43));
              do
              {
                uint64_t v44 = *--v38;
                int v41 = v44;
              }
              while (v42 < *(_DWORD *)(v19 + 4 * v44));
            }
            while (v12 < v38);
          }
          uint64_t v45 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            int *v11 = *v45;
          }
          a5 = 0;
          int *v45 = v18;
        }
        int v20 = *(_DWORD *)(v19 + 4 * v18);
LABEL_13:
        uint64_t v21 = 0;
        do
          uint64_t v22 = v11[++v21];
        while (*(_DWORD *)(v19 + 4 * v22) < v20);
        uint64_t v23 = &v11[v21];
        long long v24 = a2;
        if (v21 == 1)
        {
          long long v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *--v24;
          }
          while (*(_DWORD *)(v19 + 4 * v26) >= v20);
        }
        else
        {
          do
            uint64_t v25 = *--v24;
          while (*(_DWORD *)(v19 + 4 * v25) >= v20);
        }
        if (v23 >= v24)
        {
          unint64_t v34 = v23 - 1;
        }
        else
        {
          int v27 = *v24;
          int v28 = v22;
          uint64_t v29 = v23;
          int v30 = v24;
          do
          {
            int *v29 = v27;
            int *v30 = v28;
            int v31 = *(_DWORD *)(v19 + 4 * v18);
            do
            {
              uint64_t v32 = v29[1];
              ++v29;
              int v28 = v32;
            }
            while (*(_DWORD *)(v19 + 4 * v32) < v31);
            do
            {
              uint64_t v33 = *--v30;
              int v27 = v33;
            }
            while (*(_DWORD *)(v19 + 4 * v33) >= v31);
          }
          while (v29 < v30);
          unint64_t v34 = v29 - 1;
        }
        if (v34 != v11) {
          int *v11 = *v34;
        }
        int *v34 = v18;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *,false>(v11, v34, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v34 + 1;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v11, v34, a3);
      uint64_t v12 = v34 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(v34 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v34;
    if (!v35) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  int v5 = *result;
  uint64_t v6 = **a4;
  int v7 = *(_DWORD *)(v6 + 4 * v4);
  uint64_t v8 = *a3;
  int v9 = *(_DWORD *)(v6 + 4 * v8);
  if (v7 >= *(_DWORD *)(v6 + 4 * *result))
  {
    if (v9 < v7)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(_DWORD *)(v6 + 4 * v10) < *(_DWORD *)(v6 + 4 * v11))
      {
        *uint64_t result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v7)
    {
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(_DWORD *)(v6 + 4 * v12) >= *(_DWORD *)(v6 + 4 * v5)) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *uint64_t result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(_DWORD *)(**a3 + 4 * v8) < *(_DWORD *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      int v20 = a1 + 2;
      uint64_t v21 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v22 = *(a2 - 1);
      uint64_t v23 = a1[3];
      uint64_t v24 = **a3;
      if (*(_DWORD *)(v24 + 4 * v22) < *(_DWORD *)(v24 + 4 * v23))
      {
        *uint64_t v21 = v22;
        *(a2 - 1) = v23;
        int v25 = *v21;
        uint64_t v26 = *v20;
        if (*(_DWORD *)(v24 + 4 * *v21) < *(_DWORD *)(v24 + 4 * v26))
        {
          *int v20 = v25;
          *uint64_t v21 = v26;
          uint64_t v27 = a1[1];
          if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v27))
          {
            a1[1] = v25;
            a1[2] = v27;
            uint64_t v28 = *a1;
            if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v28))
            {
              *a1 = v25;
              a1[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    int v15 = *v11;
    uint64_t v16 = *v10;
    if (*(_DWORD *)(v13 + 4 * *v11) < *(_DWORD *)(v13 + 4 * v16))
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 4;
        if (v17 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (*(_DWORD *)(v13 + 4 * v15) >= *(_DWORD *)(v13 + 4 * v16))
        {
          uint64_t v19 = (int *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *uint64_t v19 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::Concatenate::jvp(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&)::$_0 &,int *>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(_DWORD *)(v13 + 4 * v11) < *(_DWORD *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(_DWORD *)(v13 + 4 * v14) < *(_DWORD *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(_DWORD *)(v13 + 4 * v16) < *(_DWORD *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

void mlx::core::anonymous namespace'::vmap_ternary_op(std::vector<mlx::core::array> const&,std::vector<int> const&,mlx::core::Stream const&)::$_0::operator()<mlx::core::array>(uint64_t a1@<X0>, const void ***a2@<X1>, const void ***a3@<X8>)
{
  uint64_t v6 = *a2;
  memset(&v13, 0, sizeof(v13));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *v6, (uint64_t)v6[1], ((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2);
  v7.__i_ = v13.__begin_;
  std::vector<int>::size_type v8 = *(int *)(a1 + 12) - (v13.__end_ - v13.__begin_);
  std::vector<int>::value_type __x = 1;
  std::vector<int>::insert(&v13, v7, v8, &__x);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13.__begin_, (uint64_t)v13.__end_, v13.__end_ - v13.__begin_);
  mlx::core::reshape(a2, (uint64_t)&__p, *(mlx::core **)a1, *(unsigned int *)(a1 + 8) | 0x100000000, a3);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
}

void sub_256F41EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<mlx::core::RandomBits,std::allocator<mlx::core::RandomBits>,mlx::core::Stream const&,std::vector<int> &,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  std::vector<int>::size_type v8 = (char *)operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,int &,std::allocator<mlx::core::RandomBits>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_256F41F74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<mlx::core::RandomBits>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,int &,std::allocator<mlx::core::RandomBits>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270632570;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = *a4;
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = a1 + 48;
  *(_DWORD *)(v8 - 8) = v6;
  *(void *)(v8 - 24) = &unk_270636C10;
  *(void *)(v8 - 16) = v5;
  *(_OWORD *)(v8 + 8) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v8, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_DWORD *)(a1 + 72) = v7;
  return a1;
}

void sub_256F4201C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<mlx::core::NumberOfElements,std::allocator<mlx::core::NumberOfElements>,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,std::allocator<mlx::core::NumberOfElements>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_256F42098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mlx::core::NumberOfElements>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,std::allocator<mlx::core::NumberOfElements>,0>(void *a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270634A90;
  std::construct_at[abi:ne180100]<mlx::core::NumberOfElements,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,mlx::core::NumberOfElements*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_256F420F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::NumberOfElements,mlx::core::Stream const&,std::vector<int> &,BOOL &,mlx::core::Dtype &,mlx::core::NumberOfElements*>(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t *a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  char v10 = *a4;
  uint64_t v11 = *a5;
  *(_DWORD *)(a1 + 16) = v9;
  *(void *)a1 = &unk_2706369F0;
  *(void *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v10;
  *(void *)(a1 + 52) = v11;
  return a1;
}

uint64_t (***mlx::core::allocator::allocator(mlx::core::allocator *this))(mlx::core::allocator::CommonAllocator *__hidden this, size_t size, BOOL)
{
  return &mlx::core::allocator::allocator(void)::allocator_;
}

uint64_t mlx::core::allocator::Buffer::raw_ptr(mlx::core::allocator::Buffer *this)
{
  return *(void *)this;
}

void mlx::core::Abs::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Abs::eval_cpu();
  }
  uint64_t v5 = *(void *)v3;
  int v6 = *(_DWORD *)(*(void *)v3 + 56);
  if (v6 != 4)
  {
    if (v6 == 6 && (*(unsigned char *)(v5 + 168) & 1) != 0)
    {
      int v7 = *(float **)(*(void *)a3 + 152);
      uint64_t v8 = *(const float **)(*(void *)v3 + 152);
      vDSP_Length v9 = *(void *)(*(void *)v3 + 160);
      vDSP_vabs(v8, 1, v7, 1, v9);
      return;
    }
    goto LABEL_9;
  }
  if ((*(unsigned char *)(v5 + 168) & 1) == 0)
  {
LABEL_9:
    mlx::core::Abs::eval(a1, a2, a3);
    return;
  }
  char v10 = *(int **)(*(void *)a3 + 152);
  uint64_t v11 = *(const int **)(*(void *)v3 + 152);
  vDSP_Length v12 = *(void *)(*(void *)v3 + 160);
  vDSP_vabsi(v11, 1, v10, 1, v12);
}

void sub_256F42508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Add::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Add::eval_cpu();
  }
  uint64_t v4 = v3 + 2;
  int v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 4)
  {
  }
  else if (v5 == 6)
  {
  }
  else
  {
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned __int8 **)(*a2 + 152) != -**(unsigned char **)(*a1 + 152);
          goto LABEL_8;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v23 = *(void **)a3;
          uint64_t v24 = *a1;
          int v25 = *(int **)*a1;
          uint64_t v26 = (*(void *)(*a1 + 8) - (void)v25) >> 2;
          uint64_t v27 = (v26 - 1);
          if ((int)v27 >= -1) {
            int v28 = -1;
          }
          else {
            int v28 = v26 - 1;
          }
          int v29 = v28 + 1;
          int v30 = v26 + 1;
          break;
      }
      while (1)
      {
        unsigned int v31 = v30 - 2;
        if (v30 - 2 < 0) {
          break;
        }
        --v30;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v31) != *(void *)(v23[3] + 8 * v31)) {
          goto LABEL_72;
        }
      }
      int v30 = v29;
LABEL_72:
      int v84 = (int **)*a2;
      int v85 = *(int **)*a2;
      uint64_t v86 = (*(void *)(*a2 + 8) - (void)v85) >> 2;
      uint64_t v87 = (v86 - 1);
      if ((int)v87 >= -1) {
        int v88 = -1;
      }
      else {
        int v88 = v86 - 1;
      }
      int v89 = v88 + 1;
      int v90 = v86 + 1;
      while (1)
      {
        unsigned int v91 = v90 - 2;
        if (v90 - 2 < 0) {
          break;
        }
        --v90;
        if (*(void *)&v84[3][2 * v91] != *(void *)(v23[3] + 8 * v91)) {
          goto LABEL_126;
        }
      }
      int v90 = v89;
LABEL_126:
      int v138 = v26 + 1;
      while (1)
      {
        unsigned int v139 = v138 - 2;
        if (v138 - 2 < 0) {
          break;
        }
        --v138;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v139)) {
          goto LABEL_161;
        }
      }
      int v138 = v29;
LABEL_161:
      int v152 = v86 + 1;
      while (1)
      {
        int v153 = v152 - 2;
        if (v152 - 2 < 0) {
          break;
        }
        --v152;
        if (*(void *)&v84[3][2 * v153]) {
          goto LABEL_196;
        }
      }
      int v152 = v89;
LABEL_196:
      unint64_t v166 = (uint64_t)(v23[1] - *v23) >> 2;
      if (v30 <= v90) {
        int v167 = v90;
      }
      else {
        int v167 = v30;
      }
      if (v30 <= v152) {
        int v30 = v152;
      }
      if (v138 > v90) {
        int v90 = v138;
      }
      if (v166 > v90) {
        int v168 = 1;
      }
      else {
        int v168 = 4;
      }
      if (v166 <= v90) {
        int v90 = (uint64_t)(v23[1] - *v23) >> 2;
      }
      if (v166 <= v30) {
        int v30 = v90;
      }
      else {
        int v168 = 2;
      }
      if (v166 <= v167)
      {
        int v169 = v30;
      }
      else
      {
        int v168 = 3;
        int v169 = v167;
      }
      if (!v169) {
        goto LABEL_225;
      }
      unint64_t v170 = *(void *)(v23[3] + 8 * (v169 - 1));
      if (v170 < 0x10) {
        goto LABEL_225;
      }
      switch(v168)
      {
        case 1:
          if (v169 == 2)
          {
            int v1127 = *v25;
            if (*v25)
            {
              uint64_t v1128 = 0;
              uint64_t v1129 = 0;
              unint64_t v1566 = 0;
              uint64_t v1612 = *(void *)(v24 + 152);
              vDSP_Length v1658 = (int)v170;
              v1130 = (float *)v23[19];
              v1131 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v1132 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1131 + v1128), 1, (const float *)(v1612 + v1129), v1130, 1, v1658);
                    uint64_t v24 = *a1;
                    v1133 = *(void **)(*a1 + 24);
                    uint64_t v1134 = v1133[1];
                    v1129 += v1134;
                    int v84 = (int **)*a2;
                    v1135 = *(int **)(*a2 + 24);
                    uint64_t v1136 = *((void *)v1135 + 1);
                    v1128 += v1136;
                    v1130 = (float *)((char *)v1130 + v1658);
                    ++v1132;
                    int v25 = *(int **)*a1;
                    unint64_t v1137 = v25[1];
                  }
                  while (v1132 < v1137);
                  int v1127 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v1137 = 0;
                  v1133 = *(void **)(v24 + 24);
                  uint64_t v1134 = v1133[1];
                  v1135 = v84[3];
                  uint64_t v1136 = *((void *)v1135 + 1);
                }
                uint64_t v1129 = *v1133 + v1129 - v1137 * v1134;
                uint64_t v1128 = *(void *)v1135 + v1128 - v1136 * v85[1];
                ++v1566;
              }
              while (v1566 < v1127);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v826 = 0;
              uint64_t v827 = 0;
              uint64_t v828 = 0;
              uint64_t v829 = *(void *)(v24 + 152);
              v830 = v84[19];
              vDSP_Length v831 = (int)v170;
              v832 = (float *)v23[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v830 + v827), 1, (const float *)(v829 + v828), v832, 1, v831);
                v828 += **(void **)(*a1 + 24);
                v827 += **(void **)(*a2 + 24);
                v832 = (float *)((char *)v832 + v831);
                ++v826;
              }
              while (v826 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v1138 = 0;
            v1613 = v84[19];
            uint64_t v1659 = *(void *)(v24 + 152);
            vDSP_Length v1567 = (int)v170;
            v1139 = (float *)v23[19];
            do
            {
              uint64_t v1140 = *(void *)*a1;
              unint64_t v1141 = (unint64_t)(*(void *)(*a1 + 8) - v1140) >> 2;
              uint64_t v1142 = 0;
              uint64_t v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                uint64_t v1144 = *(void *)(*a1 + 24);
                int quot = v1138;
                do
                {
                  ldiv_t v1146 = ldiv(quot, *(int *)(v1140 + 4 * v1143));
                  int quot = v1146.quot;
                  v1142 += *(void *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              uint64_t v1147 = *(void *)*a2;
              unint64_t v1148 = (unint64_t)(*(void *)(*a2 + 8) - v1147) >> 2;
              uint64_t v1149 = 0;
              uint64_t v1150 = (v1148 - 1);
              if ((int)v1148 - 1 >= 0)
              {
                uint64_t v1151 = *(void *)(*a2 + 24);
                int v1152 = v1138;
                do
                {
                  ldiv_t v1153 = ldiv(v1152, *(int *)(v1147 + 4 * v1150));
                  int v1152 = v1153.quot;
                  v1149 += *(void *)(v1151 + 8 * v1150--) * v1153.rem;
                }
                while (v1150 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1613 + (int)v1149), 1, (const float *)(v1659 + (int)v1142), v1139, 1, v1567);
              v1139 = (float *)((char *)v1139 + v1567);
              v1138 += v1567;
            }
            while (v1138 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v169 == 2)
          {
            int v1154 = *v25;
            if (*v25)
            {
              uint64_t v1155 = 0;
              uint64_t v1156 = 0;
              unint64_t v1568 = 0;
              uint64_t v1614 = *(void *)(v24 + 152);
              vDSP_Length v1660 = (int)v170;
              v1157 = (float *)v23[19];
              v1158 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v1159 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1614 + v1156), 1, (const float *)((char *)v1158 + v1155), v1157, 1, v1660);
                    uint64_t v24 = *a1;
                    v1160 = *(void **)(*a1 + 24);
                    uint64_t v1161 = v1160[1];
                    v1156 += v1161;
                    int v84 = (int **)*a2;
                    v1162 = *(int **)(*a2 + 24);
                    uint64_t v1163 = *((void *)v1162 + 1);
                    v1155 += v1163;
                    v1157 = (float *)((char *)v1157 + v1660);
                    ++v1159;
                    int v25 = *(int **)*a1;
                    unint64_t v1164 = v25[1];
                  }
                  while (v1159 < v1164);
                  int v1154 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v1164 = 0;
                  v1160 = *(void **)(v24 + 24);
                  uint64_t v1161 = v1160[1];
                  v1162 = v84[3];
                  uint64_t v1163 = *((void *)v1162 + 1);
                }
                uint64_t v1156 = *v1160 + v1156 - v1164 * v1161;
                uint64_t v1155 = *(void *)v1162 + v1155 - v1163 * v85[1];
                ++v1568;
              }
              while (v1568 < v1154);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v833 = 0;
              uint64_t v834 = 0;
              uint64_t v835 = 0;
              uint64_t v836 = *(void *)(v24 + 152);
              v837 = v84[19];
              vDSP_Length v838 = (int)v170;
              v839 = (float *)v23[19];
              do
              {
                vDSP_vsadd((const float *)(v836 + v835), 1, (const float *)((char *)v837 + v834), v839, 1, v838);
                v835 += **(void **)(*a1 + 24);
                v834 += **(void **)(*a2 + 24);
                v839 = (float *)((char *)v839 + v838);
                ++v833;
              }
              while (v833 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v1165 = 0;
            v1615 = v84[19];
            uint64_t v1661 = *(void *)(v24 + 152);
            vDSP_Length v1569 = (int)v170;
            v1166 = (float *)v23[19];
            do
            {
              uint64_t v1167 = *(void *)*a1;
              unint64_t v1168 = (unint64_t)(*(void *)(*a1 + 8) - v1167) >> 2;
              uint64_t v1169 = 0;
              uint64_t v1170 = (v1168 - 1);
              if ((int)v1168 - 1 >= 0)
              {
                uint64_t v1171 = *(void *)(*a1 + 24);
                int v1172 = v1165;
                do
                {
                  ldiv_t v1173 = ldiv(v1172, *(int *)(v1167 + 4 * v1170));
                  int v1172 = v1173.quot;
                  v1169 += *(void *)(v1171 + 8 * v1170--) * v1173.rem;
                }
                while (v1170 != -1);
              }
              uint64_t v1174 = *(void *)*a2;
              unint64_t v1175 = (unint64_t)(*(void *)(*a2 + 8) - v1174) >> 2;
              uint64_t v1176 = 0;
              uint64_t v1177 = (v1175 - 1);
              if ((int)v1175 - 1 >= 0)
              {
                uint64_t v1178 = *(void *)(*a2 + 24);
                int v1179 = v1165;
                do
                {
                  ldiv_t v1180 = ldiv(v1179, *(int *)(v1174 + 4 * v1177));
                  int v1179 = v1180.quot;
                  v1176 += *(void *)(v1178 + 8 * v1177--) * v1180.rem;
                }
                while (v1177 != -1);
              }
              vDSP_vsadd((const float *)(v1661 + (int)v1169), 1, (const float *)((char *)v1615 + (int)v1176), v1166, 1, v1569);
              v1166 = (float *)((char *)v1166 + v1569);
              v1165 += v1569;
            }
            while (v1165 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v169 == 2)
          {
            int v932 = *v25;
            if (*v25)
            {
              uint64_t v933 = 0;
              uint64_t v934 = 0;
              unint64_t v1554 = 0;
              uint64_t v1600 = *(void *)(v24 + 152);
              vDSP_Length v1646 = (int)v170;
              v935 = (float *)v23[19];
              v936 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v937 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1600 + v934), 1, (const float *)((char *)v936 + v933), 1, v935, 1, v1646);
                    uint64_t v24 = *a1;
                    v938 = *(void **)(*a1 + 24);
                    uint64_t v939 = v938[1];
                    v934 += v939;
                    int v84 = (int **)*a2;
                    v940 = *(int **)(*a2 + 24);
                    uint64_t v941 = *((void *)v940 + 1);
                    v933 += v941;
                    v935 = (float *)((char *)v935 + v1646);
                    ++v937;
                    int v25 = *(int **)*a1;
                    unint64_t v942 = v25[1];
                  }
                  while (v937 < v942);
                  int v932 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v942 = 0;
                  v938 = *(void **)(v24 + 24);
                  uint64_t v939 = v938[1];
                  v940 = v84[3];
                  uint64_t v941 = *((void *)v940 + 1);
                }
                uint64_t v934 = *v938 + v934 - v942 * v939;
                uint64_t v933 = *(void *)v940 + v933 - v941 * v85[1];
                ++v1554;
              }
              while (v1554 < v932);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v171 = 0;
              uint64_t v172 = 0;
              uint64_t v173 = 0;
              uint64_t v174 = *(void *)(v24 + 152);
              char v175 = v84[19];
              vDSP_Length v176 = (int)v170;
              char v177 = (float *)v23[19];
              do
              {
                vDSP_vadd((const float *)(v174 + v173), 1, (const float *)((char *)v175 + v172), 1, v177, 1, v176);
                v173 += **(void **)(*a1 + 24);
                v172 += **(void **)(*a2 + 24);
                char v177 = (float *)((char *)v177 + v176);
                ++v171;
              }
              while (v171 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v943 = 0;
            v1601 = v84[19];
            uint64_t v1647 = *(void *)(v24 + 152);
            vDSP_Length v1555 = (int)v170;
            v944 = (float *)v23[19];
            do
            {
              uint64_t v945 = *(void *)*a1;
              unint64_t v946 = (unint64_t)(*(void *)(*a1 + 8) - v945) >> 2;
              uint64_t v947 = 0;
              uint64_t v948 = (v946 - 1);
              if ((int)v946 - 1 >= 0)
              {
                uint64_t v949 = *(void *)(*a1 + 24);
                int v950 = v943;
                do
                {
                  ldiv_t v951 = ldiv(v950, *(int *)(v945 + 4 * v948));
                  int v950 = v951.quot;
                  v947 += *(void *)(v949 + 8 * v948--) * v951.rem;
                }
                while (v948 != -1);
              }
              uint64_t v952 = *(void *)*a2;
              unint64_t v953 = (unint64_t)(*(void *)(*a2 + 8) - v952) >> 2;
              uint64_t v954 = 0;
              uint64_t v955 = (v953 - 1);
              if ((int)v953 - 1 >= 0)
              {
                uint64_t v956 = *(void *)(*a2 + 24);
                int v957 = v943;
                do
                {
                  ldiv_t v958 = ldiv(v957, *(int *)(v952 + 4 * v955));
                  int v957 = v958.quot;
                  v954 += *(void *)(v956 + 8 * v955--) * v958.rem;
                }
                while (v955 != -1);
              }
              vDSP_vadd((const float *)(v1647 + (int)v947), 1, (const float *)((char *)v1601 + (int)v954), 1, v944, 1, v1555);
              v944 = (float *)((char *)v944 + v1555);
              v943 += v1555;
            }
            while (v943 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_225:
          switch(v166)
          {
            case 1uLL:
              uint64_t v178 = v23[6];
              if (v178)
              {
                v179 = *(unsigned char **)(v24 + 152);
                unint64_t v180 = v84[19];
                BOOL v181 = (BOOL *)v23[19];
                uint64_t v182 = **(void **)(v24 + 24);
                uint64_t v183 = *(void *)v84[3];
                do
                {
                  *v181++ = *(unsigned __int8 *)v180 != -*v179;
                  unint64_t v180 = (int *)((char *)v180 + v183);
                  v179 += v182;
                  --v178;
                }
                while (v178);
              }
              break;
            case 2uLL:
              uint64_t v307 = *v25;
              if (v307)
              {
                uint64_t v308 = 0;
                uint64_t v309 = 0;
                uint64_t v310 = 0;
                uint64_t v311 = 0;
                uint64_t v312 = *(void *)(v24 + 152);
                unsigned int v313 = v84[19];
                uint64_t v314 = v23[19];
                unint64_t v315 = v25[1];
                uint64_t v316 = *(uint64_t **)(v24 + 24);
                uint64_t v317 = *v316;
                uint64_t v318 = v316[1];
                v319 = v84[3];
                uint64_t v320 = *(void *)v319;
                uint64_t v321 = *((void *)v319 + 1);
                uint64_t v322 = v320 - v321 * v85[1];
                if (v315 <= 1) {
                  uint64_t v323 = 1;
                }
                else {
                  uint64_t v323 = v25[1];
                }
                uint64_t v324 = v317 - v318 * v315;
                do
                {
                  if (v315)
                  {
                    uint64_t v325 = v309 + v323;
                    uint64_t v326 = (BOOL *)(v314 + v309);
                    uint64_t v327 = v323;
                    do
                    {
                      *v326++ = *((unsigned __int8 *)v313 + v310) != -*(unsigned char *)(v312 + v311);
                      v311 += v318;
                      v310 += v321;
                      --v327;
                    }
                    while (v327);
                    uint64_t v309 = v325;
                  }
                  v311 += v324;
                  v310 += v322;
                  ++v308;
                }
                while (v308 != v307);
              }
              break;
            case 3uLL:
              uint64_t v328 = *v25;
              if (v328)
              {
                uint64_t v329 = 0;
                uint64_t v330 = 0;
                uint64_t v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = *(void *)(v24 + 152);
                int v334 = v84[19];
                uint64_t v335 = v23[19];
                unint64_t v336 = v25[1];
                uint64_t v337 = *(void **)(v24 + 24);
                uint64_t v338 = v337[1];
                v339 = v84[3];
                uint64_t v340 = *((void *)v339 + 1);
                uint64_t v341 = *(void *)v339 - v340 * v85[1];
                if (v336 <= 1) {
                  uint64_t v342 = 1;
                }
                else {
                  uint64_t v342 = v25[1];
                }
                unint64_t v343 = *v337 - v338 * v336;
                do
                {
                  if (v336)
                  {
                    uint64_t v344 = 0;
                    unint64_t v345 = v25[2];
                    uint64_t v346 = v337[2];
                    uint64_t v347 = *((void *)v339 + 2);
                    if (v345 <= 1) {
                      uint64_t v348 = 1;
                    }
                    else {
                      uint64_t v348 = v25[2];
                    }
                    uint64_t v349 = v340 - v347 * v85[2];
                    do
                    {
                      uint64_t v350 = v348;
                      if (v345)
                      {
                        do
                        {
                          *(unsigned char *)(v335 + v330++) = *((unsigned __int8 *)v334 + v331) != -*(unsigned char *)(v333 + v332);
                          v332 += v346;
                          v331 += v347;
                          --v350;
                        }
                        while (v350);
                      }
                      v332 += v338 - v346 * v345;
                      v331 += v349;
                      ++v344;
                    }
                    while (v344 != v342);
                  }
                  v332 += v343;
                  v331 += v341;
                  ++v329;
                }
                while (v329 != v328);
              }
              break;
            case 4uLL:
              uint64_t v1637 = *v25;
              if (v1637)
              {
                uint64_t v351 = 0;
                uint64_t v352 = 0;
                uint64_t v353 = 0;
                uint64_t v354 = 0;
                uint64_t v355 = *(void *)(v24 + 152);
                int v356 = v84[19];
                uint64_t v357 = v23[19];
                unint64_t v358 = v25[1];
                int v359 = *(void **)(v24 + 24);
                v360 = v84[3];
                uint64_t v1517 = *((void *)v360 + 1);
                uint64_t v1520 = v359[1];
                uint64_t v1547 = *(void *)v360 - v1517 * v85[1];
                int v1591 = v25[1];
                if (v358 <= 1) {
                  uint64_t v361 = 1;
                }
                else {
                  uint64_t v361 = v25[1];
                }
                unint64_t v1527 = *v359 - v359[1] * v358;
                do
                {
                  if (v1591)
                  {
                    uint64_t v362 = 0;
                    unint64_t v363 = v25[2];
                    uint64_t v364 = v359[2];
                    uint64_t v365 = *((void *)v360 + 2);
                    if (v363 <= 1) {
                      uint64_t v366 = 1;
                    }
                    else {
                      uint64_t v366 = v25[2];
                    }
                    uint64_t v367 = v1517 - v365 * v85[2];
                    do
                    {
                      if (v363)
                      {
                        uint64_t v368 = 0;
                        unint64_t v369 = v25[3];
                        uint64_t v370 = v359[3];
                        uint64_t v371 = *((void *)v360 + 3);
                        if (v369 <= 1) {
                          uint64_t v372 = 1;
                        }
                        else {
                          uint64_t v372 = v25[3];
                        }
                        uint64_t v373 = v365 - v371 * v85[3];
                        do
                        {
                          uint64_t v374 = v372;
                          if (v369)
                          {
                            do
                            {
                              *(unsigned char *)(v357 + v352++) = *((unsigned __int8 *)v356 + v353) != -*(unsigned char *)(v355 + v354);
                              v354 += v370;
                              v353 += v371;
                              --v374;
                            }
                            while (v374);
                          }
                          v354 += v364 - v370 * v369;
                          v353 += v373;
                          ++v368;
                        }
                        while (v368 != v366);
                      }
                      v354 += v1520 - v364 * v363;
                      v353 += v367;
                      ++v362;
                    }
                    while (v362 != v361);
                  }
                  v354 += v1527;
                  v353 += v1547;
                  ++v351;
                }
                while (v351 != v1637);
              }
              break;
            default:
              uint64_t v1590 = v23[6];
              uint64_t v1636 = v27;
              if (v1590)
              {
                uint64_t v296 = 0;
                v1526 = v84[19];
                uint64_t v1546 = *(void *)(v24 + 152);
                uint64_t v1519 = v23[19];
                do
                {
                  uint64_t v297 = v1636;
                  if ((v1636 & 0x80000000) != 0)
                  {
                    LODWORD(v298) = 0;
                  }
                  else
                  {
                    uint64_t v298 = 0;
                    uint64_t v299 = *(void *)(v24 + 24);
                    int v300 = v296;
                    do
                    {
                      ldiv_t v301 = ldiv(v300, v25[v297]);
                      int v300 = v301.quot;
                      v298 += *(void *)(v299 + 8 * v297--) * v301.rem;
                    }
                    while (v297 != -1);
                  }
                  uint64_t v302 = 0;
                  if ((v87 & 0x80000000) == 0)
                  {
                    v303 = v84[3];
                    uint64_t v304 = v87;
                    int v305 = v296;
                    do
                    {
                      ldiv_t v306 = ldiv(v305, v85[v304]);
                      int v305 = v306.quot;
                      v302 += *(void *)&v303[2 * v304--] * v306.rem;
                    }
                    while (v304 != -1);
                  }
                  *(unsigned char *)(v1519 + v296++) = *((unsigned __int8 *)v1526 + (int)v302) != -*(unsigned char *)(v1546 + (int)v298);
                }
                while (v296 != v1590);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_7;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v32 = *(void **)a3;
          uint64_t v33 = *a1;
          unint64_t v34 = *(int **)*a1;
          uint64_t v35 = (*(void *)(*a1 + 8) - (void)v34) >> 2;
          int v36 = v35 - 1;
          if ((int)v35 - 1 >= -1) {
            int v36 = -1;
          }
          int v37 = v36 + 1;
          int v38 = v35 + 1;
          break;
      }
      while (1)
      {
        unsigned int v39 = v38 - 2;
        if (v38 - 2 < 0) {
          break;
        }
        --v38;
        if (*(void *)(*(void *)(v33 + 24) + 8 * v39) != *(void *)(v32[3] + 8 * v39)) {
          goto LABEL_80;
        }
      }
      int v38 = v37;
LABEL_80:
      uint64_t v92 = (int **)*a2;
      uint64_t v93 = *(int **)*a2;
      uint64_t v94 = (*(void *)(*a2 + 8) - (void)v93) >> 2;
      int v95 = v94 - 1;
      if ((int)v94 - 1 >= -1) {
        int v95 = -1;
      }
      int v96 = v95 + 1;
      int v97 = v94 + 1;
      while (1)
      {
        unsigned int v98 = v97 - 2;
        if (v97 - 2 < 0) {
          break;
        }
        --v97;
        if (*(void *)&v92[3][2 * v98] != *(void *)(v32[3] + 8 * v98)) {
          goto LABEL_131;
        }
      }
      int v97 = v96;
LABEL_131:
      int v140 = v35 + 1;
      while (1)
      {
        unsigned int v141 = v140 - 2;
        if (v140 - 2 < 0) {
          break;
        }
        --v140;
        if (*(void *)(*(void *)(v33 + 24) + 8 * v141)) {
          goto LABEL_166;
        }
      }
      int v140 = v37;
LABEL_166:
      int v154 = v94 + 1;
      while (1)
      {
        int v155 = v154 - 2;
        if (v154 - 2 < 0) {
          break;
        }
        --v154;
        if (*(void *)&v92[3][2 * v155]) {
          goto LABEL_231;
        }
      }
      int v154 = v96;
LABEL_231:
      unint64_t v184 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v38 <= v97) {
        int v185 = v97;
      }
      else {
        int v185 = v38;
      }
      if (v38 <= v154) {
        int v38 = v154;
      }
      if (v140 > v97) {
        int v97 = v140;
      }
      if (v184 > v97) {
        int v186 = 1;
      }
      else {
        int v186 = 4;
      }
      if (v184 <= v97) {
        int v97 = (uint64_t)(v32[1] - *v32) >> 2;
      }
      if (v184 <= v38) {
        int v38 = v97;
      }
      else {
        int v186 = 2;
      }
      if (v184 <= v185)
      {
        int v187 = v38;
      }
      else
      {
        int v186 = 3;
        int v187 = v185;
      }
      if (!v187) {
        goto LABEL_260;
      }
      unint64_t v188 = *(void *)(v32[3] + 8 * (v187 - 1));
      if (v188 < 0x10) {
        goto LABEL_260;
      }
      switch(v186)
      {
        case 1:
          if (v187 == 2)
          {
            int v1181 = *v34;
            if (*v34)
            {
              unint64_t v1182 = 0;
              uint64_t v1183 = 0;
              uint64_t v1184 = 0;
              uint64_t v1185 = *(void *)(v33 + 152);
              v1186 = v92[19];
              vDSP_Length v1187 = (int)v188;
              v1188 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v1189 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1186 + v1183), 1, (const float *)(v1185 + v1184), v1188, 1, v1187);
                    uint64_t v33 = *a1;
                    v1190 = *(void **)(*a1 + 24);
                    uint64_t v1191 = v1190[1];
                    v1184 += v1191;
                    uint64_t v92 = (int **)*a2;
                    v1192 = *(int **)(*a2 + 24);
                    uint64_t v1193 = *((void *)v1192 + 1);
                    v1183 += v1193;
                    v1188 = (float *)((char *)v1188 + v1187);
                    ++v1189;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v1194 = v34[1];
                  }
                  while (v1189 < v1194);
                  int v1181 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v1194 = 0;
                  v1190 = *(void **)(v33 + 24);
                  uint64_t v1191 = v1190[1];
                  v1192 = v92[3];
                  uint64_t v1193 = *((void *)v1192 + 1);
                }
                uint64_t v1184 = *v1190 + v1184 - v1194 * v1191;
                uint64_t v1183 = *(void *)v1192 + v1183 - v1193 * v93[1];
                ++v1182;
              }
              while (v1182 < v1181);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v840 = 0;
              uint64_t v841 = 0;
              uint64_t v842 = 0;
              uint64_t v843 = *(void *)(v33 + 152);
              v844 = v92[19];
              vDSP_Length v845 = (int)v188;
              v846 = (float *)v32[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v844 + v841), 1, (const float *)(v843 + v842), v846, 1, v845);
                v842 += **(void **)(*a1 + 24);
                v841 += **(void **)(*a2 + 24);
                v846 = (float *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v1195 = 0;
            v1616 = v92[19];
            uint64_t v1662 = *(void *)(v33 + 152);
            vDSP_Length v1570 = (int)v188;
            v1196 = (float *)v32[19];
            do
            {
              uint64_t v1197 = *(void *)*a1;
              unint64_t v1198 = (unint64_t)(*(void *)(*a1 + 8) - v1197) >> 2;
              uint64_t v1199 = 0;
              uint64_t v1200 = (v1198 - 1);
              if ((int)v1198 - 1 >= 0)
              {
                uint64_t v1201 = *(void *)(*a1 + 24);
                int v1202 = v1195;
                do
                {
                  ldiv_t v1203 = ldiv(v1202, *(int *)(v1197 + 4 * v1200));
                  int v1202 = v1203.quot;
                  v1199 += *(void *)(v1201 + 8 * v1200--) * v1203.rem;
                }
                while (v1200 != -1);
              }
              uint64_t v1204 = *(void *)*a2;
              unint64_t v1205 = (unint64_t)(*(void *)(*a2 + 8) - v1204) >> 2;
              uint64_t v1206 = 0;
              uint64_t v1207 = (v1205 - 1);
              if ((int)v1205 - 1 >= 0)
              {
                uint64_t v1208 = *(void *)(*a2 + 24);
                int v1209 = v1195;
                do
                {
                  ldiv_t v1210 = ldiv(v1209, *(int *)(v1204 + 4 * v1207));
                  int v1209 = v1210.quot;
                  v1206 += *(void *)(v1208 + 8 * v1207--) * v1210.rem;
                }
                while (v1207 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1616 + (int)v1206), 1, (const float *)(v1662 + (int)v1199), v1196, 1, v1570);
              v1196 = (float *)((char *)v1196 + v1570);
              v1195 += v1570;
            }
            while (v1195 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v187 == 2)
          {
            int v1211 = *v34;
            if (*v34)
            {
              unint64_t v1212 = 0;
              uint64_t v1213 = 0;
              uint64_t v1214 = 0;
              uint64_t v1215 = *(void *)(v33 + 152);
              v1216 = v92[19];
              vDSP_Length v1217 = (int)v188;
              v1218 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v1219 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1215 + v1214), 1, (const float *)((char *)v1216 + v1213), v1218, 1, v1217);
                    uint64_t v33 = *a1;
                    v1220 = *(void **)(*a1 + 24);
                    uint64_t v1221 = v1220[1];
                    v1214 += v1221;
                    uint64_t v92 = (int **)*a2;
                    v1222 = *(int **)(*a2 + 24);
                    uint64_t v1223 = *((void *)v1222 + 1);
                    v1213 += v1223;
                    v1218 = (float *)((char *)v1218 + v1217);
                    ++v1219;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v1224 = v34[1];
                  }
                  while (v1219 < v1224);
                  int v1211 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v1224 = 0;
                  v1220 = *(void **)(v33 + 24);
                  uint64_t v1221 = v1220[1];
                  v1222 = v92[3];
                  uint64_t v1223 = *((void *)v1222 + 1);
                }
                uint64_t v1214 = *v1220 + v1214 - v1224 * v1221;
                uint64_t v1213 = *(void *)v1222 + v1213 - v1223 * v93[1];
                ++v1212;
              }
              while (v1212 < v1211);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v847 = 0;
              uint64_t v848 = 0;
              uint64_t v849 = 0;
              uint64_t v850 = *(void *)(v33 + 152);
              v851 = v92[19];
              vDSP_Length v852 = (int)v188;
              v853 = (float *)v32[19];
              do
              {
                vDSP_vsadd((const float *)(v850 + v849), 1, (const float *)((char *)v851 + v848), v853, 1, v852);
                v849 += **(void **)(*a1 + 24);
                v848 += **(void **)(*a2 + 24);
                v853 = (float *)((char *)v853 + v852);
                ++v847;
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v1225 = 0;
            v1617 = v92[19];
            uint64_t v1663 = *(void *)(v33 + 152);
            vDSP_Length v1571 = (int)v188;
            v1226 = (float *)v32[19];
            do
            {
              uint64_t v1227 = *(void *)*a1;
              unint64_t v1228 = (unint64_t)(*(void *)(*a1 + 8) - v1227) >> 2;
              uint64_t v1229 = 0;
              uint64_t v1230 = (v1228 - 1);
              if ((int)v1228 - 1 >= 0)
              {
                uint64_t v1231 = *(void *)(*a1 + 24);
                int v1232 = v1225;
                do
                {
                  ldiv_t v1233 = ldiv(v1232, *(int *)(v1227 + 4 * v1230));
                  int v1232 = v1233.quot;
                  v1229 += *(void *)(v1231 + 8 * v1230--) * v1233.rem;
                }
                while (v1230 != -1);
              }
              uint64_t v1234 = *(void *)*a2;
              unint64_t v1235 = (unint64_t)(*(void *)(*a2 + 8) - v1234) >> 2;
              uint64_t v1236 = 0;
              uint64_t v1237 = (v1235 - 1);
              if ((int)v1235 - 1 >= 0)
              {
                uint64_t v1238 = *(void *)(*a2 + 24);
                int v1239 = v1225;
                do
                {
                  ldiv_t v1240 = ldiv(v1239, *(int *)(v1234 + 4 * v1237));
                  int v1239 = v1240.quot;
                  v1236 += *(void *)(v1238 + 8 * v1237--) * v1240.rem;
                }
                while (v1237 != -1);
              }
              vDSP_vsadd((const float *)(v1663 + (int)v1229), 1, (const float *)((char *)v1617 + (int)v1236), v1226, 1, v1571);
              v1226 = (float *)((char *)v1226 + v1571);
              v1225 += v1571;
            }
            while (v1225 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v187 == 2)
          {
            int v959 = *v34;
            if (*v34)
            {
              unint64_t v960 = 0;
              uint64_t v961 = 0;
              uint64_t v962 = 0;
              uint64_t v963 = *(void *)(v33 + 152);
              v964 = v92[19];
              vDSP_Length v965 = (int)v188;
              v966 = (float *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v967 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v963 + v962), 1, (const float *)((char *)v964 + v961), 1, v966, 1, v965);
                    uint64_t v33 = *a1;
                    v968 = *(void **)(*a1 + 24);
                    uint64_t v969 = v968[1];
                    v962 += v969;
                    uint64_t v92 = (int **)*a2;
                    v970 = *(int **)(*a2 + 24);
                    uint64_t v971 = *((void *)v970 + 1);
                    v961 += v971;
                    v966 = (float *)((char *)v966 + v965);
                    ++v967;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v972 = v34[1];
                  }
                  while (v967 < v972);
                  int v959 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v972 = 0;
                  v968 = *(void **)(v33 + 24);
                  uint64_t v969 = v968[1];
                  v970 = v92[3];
                  uint64_t v971 = *((void *)v970 + 1);
                }
                uint64_t v962 = *v968 + v962 - v972 * v969;
                uint64_t v961 = *(void *)v970 + v961 - v971 * v93[1];
                ++v960;
              }
              while (v960 < v959);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v189 = 0;
              uint64_t v190 = 0;
              uint64_t v191 = 0;
              uint64_t v192 = *(void *)(v33 + 152);
              uint64_t v193 = v92[19];
              vDSP_Length v194 = (int)v188;
              long long v195 = (float *)v32[19];
              do
              {
                vDSP_vadd((const float *)(v192 + v191), 1, (const float *)((char *)v193 + v190), 1, v195, 1, v194);
                v191 += **(void **)(*a1 + 24);
                v190 += **(void **)(*a2 + 24);
                long long v195 = (float *)((char *)v195 + v194);
                ++v189;
              }
              while (v189 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v973 = 0;
            v1602 = v92[19];
            uint64_t v1648 = *(void *)(v33 + 152);
            vDSP_Length v1556 = (int)v188;
            v974 = (float *)v32[19];
            do
            {
              uint64_t v975 = *(void *)*a1;
              unint64_t v976 = (unint64_t)(*(void *)(*a1 + 8) - v975) >> 2;
              uint64_t v977 = 0;
              uint64_t v978 = (v976 - 1);
              if ((int)v976 - 1 >= 0)
              {
                uint64_t v979 = *(void *)(*a1 + 24);
                int v980 = v973;
                do
                {
                  ldiv_t v981 = ldiv(v980, *(int *)(v975 + 4 * v978));
                  int v980 = v981.quot;
                  v977 += *(void *)(v979 + 8 * v978--) * v981.rem;
                }
                while (v978 != -1);
              }
              uint64_t v982 = *(void *)*a2;
              unint64_t v983 = (unint64_t)(*(void *)(*a2 + 8) - v982) >> 2;
              uint64_t v984 = 0;
              uint64_t v985 = (v983 - 1);
              if ((int)v983 - 1 >= 0)
              {
                uint64_t v986 = *(void *)(*a2 + 24);
                int v987 = v973;
                do
                {
                  ldiv_t v988 = ldiv(v987, *(int *)(v982 + 4 * v985));
                  int v987 = v988.quot;
                  v984 += *(void *)(v986 + 8 * v985--) * v988.rem;
                }
                while (v985 != -1);
              }
              vDSP_vadd((const float *)(v1648 + (int)v977), 1, (const float *)((char *)v1602 + (int)v984), 1, v974, 1, v1556);
              v974 = (float *)((char *)v974 + v1556);
              v973 += v1556;
            }
            while (v973 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_260:
          switch(v184)
          {
            case 1uLL:
              if (v32[6])
              {
                unint64_t v196 = 0;
                uint64_t v197 = 0;
                uint64_t v198 = 0;
                uint64_t v199 = *(void *)(v33 + 152);
                std::vector<int> v200 = v92[19];
                uint64_t v201 = v32[19];
                do
                {
                  *(unsigned char *)(v201 + v196) = *((unsigned char *)v200 + v197) + *(unsigned char *)(v199 + v198);
                  v198 += **(void **)(*a1 + 24);
                  v197 += **(void **)(*a2 + 24);
                  ++v196;
                }
                while (v196 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v391 = *v34;
              if (*v34)
              {
                unint64_t v392 = 0;
                uint64_t v393 = 0;
                uint64_t v394 = 0;
                uint64_t v395 = 0;
                uint64_t v396 = *(void *)(v33 + 152);
                v397 = v92[19];
                uint64_t v398 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v399 = 0;
                    do
                    {
                      *(unsigned char *)(v398 + v393 + v399) = *((unsigned char *)v397 + v394) + *(unsigned char *)(v396 + v395);
                      uint64_t v33 = *a1;
                      v400 = *(void **)(*a1 + 24);
                      uint64_t v401 = v400[1];
                      v395 += v401;
                      uint64_t v92 = (int **)*a2;
                      v402 = *(int **)(*a2 + 24);
                      uint64_t v403 = *((void *)v402 + 1);
                      v394 += v403;
                      ++v399;
                      unint64_t v34 = *(int **)*a1;
                      unint64_t v404 = v34[1];
                    }
                    while (v399 < v404);
                    int v391 = *v34;
                    uint64_t v93 = *v92;
                    v393 += v399;
                  }
                  else
                  {
                    unint64_t v404 = 0;
                    v400 = *(void **)(v33 + 24);
                    uint64_t v401 = v400[1];
                    v402 = v92[3];
                    uint64_t v403 = *((void *)v402 + 1);
                  }
                  uint64_t v395 = *v400 + v395 - v404 * v401;
                  uint64_t v394 = *(void *)v402 + v394 - v403 * v93[1];
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3uLL:
              int v405 = *v34;
              if (*v34)
              {
                unint64_t v406 = 0;
                uint64_t v407 = 0;
                uint64_t v408 = 0;
                uint64_t v409 = 0;
                uint64_t v410 = *(void *)(v33 + 152);
                v411 = v92[19];
                uint64_t v412 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v413 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        unint64_t v414 = 0;
                        do
                        {
                          *(unsigned char *)(v412 + v407 + v414) = *((unsigned char *)v411 + v408) + *(unsigned char *)(v410 + v409);
                          uint64_t v33 = *a1;
                          v415 = *(void **)(*a1 + 24);
                          uint64_t v416 = v415[2];
                          v409 += v416;
                          uint64_t v92 = (int **)*a2;
                          v417 = *(int **)(*a2 + 24);
                          uint64_t v418 = *((void *)v417 + 2);
                          v408 += v418;
                          ++v414;
                          unint64_t v34 = *(int **)*a1;
                          unint64_t v419 = v34[2];
                        }
                        while (v414 < v419);
                        uint64_t v93 = *v92;
                        v407 += v414;
                      }
                      else
                      {
                        unint64_t v419 = 0;
                        v415 = *(void **)(v33 + 24);
                        uint64_t v416 = v415[2];
                        v417 = v92[3];
                        uint64_t v418 = *((void *)v417 + 2);
                      }
                      uint64_t v420 = v415[1];
                      uint64_t v409 = v420 + v409 - v419 * v416;
                      uint64_t v408 = *((void *)v417 + 1) + v408 - v418 * v93[2];
                      ++v413;
                      unint64_t v421 = v34[1];
                    }
                    while (v413 < v421);
                    int v405 = *v34;
                  }
                  else
                  {
                    unint64_t v421 = 0;
                    v415 = *(void **)(v33 + 24);
                    uint64_t v420 = v415[1];
                  }
                  uint64_t v409 = *v415 + v409 - v421 * v420;
                  uint64_t v408 = *(void *)v92[3] + v408 - *((void *)v92[3] + 1) * v93[1];
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            case 4uLL:
              int v422 = *v34;
              if (*v34)
              {
                unint64_t v423 = 0;
                uint64_t v424 = 0;
                uint64_t v425 = 0;
                uint64_t v426 = 0;
                uint64_t v427 = *(void *)(v33 + 152);
                v428 = v92[19];
                uint64_t v429 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v430 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        unint64_t v431 = 0;
                        do
                        {
                          if (v34[3])
                          {
                            unint64_t v432 = 0;
                            do
                            {
                              *(unsigned char *)(v429 + v424 + v432) = *((unsigned char *)v428 + v425) + *(unsigned char *)(v427 + v426);
                              uint64_t v33 = *a1;
                              v433 = *(void **)(*a1 + 24);
                              uint64_t v434 = v433[3];
                              v426 += v434;
                              uint64_t v92 = (int **)*a2;
                              v435 = *(int **)(*a2 + 24);
                              uint64_t v436 = *((void *)v435 + 3);
                              v425 += v436;
                              ++v432;
                              unint64_t v34 = *(int **)*a1;
                              unint64_t v437 = v34[3];
                            }
                            while (v432 < v437);
                            uint64_t v93 = *v92;
                            v424 += v432;
                          }
                          else
                          {
                            unint64_t v437 = 0;
                            v433 = *(void **)(v33 + 24);
                            uint64_t v434 = v433[3];
                            v435 = v92[3];
                            uint64_t v436 = *((void *)v435 + 3);
                          }
                          uint64_t v438 = v433[2];
                          uint64_t v426 = v438 + v426 - v437 * v434;
                          uint64_t v425 = *((void *)v435 + 2) + v425 - v436 * v93[3];
                          ++v431;
                          unint64_t v439 = v34[2];
                        }
                        while (v431 < v439);
                      }
                      else
                      {
                        unint64_t v439 = 0;
                        v433 = *(void **)(v33 + 24);
                        uint64_t v438 = v433[2];
                      }
                      uint64_t v426 = v433[1] + v426 - v439 * v438;
                      uint64_t v425 = *((void *)v92[3] + 1) + v425 - *((void *)v92[3] + 2) * v93[2];
                      ++v430;
                      unint64_t v440 = v34[1];
                    }
                    while (v430 < v440);
                    int v422 = *v34;
                  }
                  else
                  {
                    unint64_t v440 = 0;
                  }
                  uint64_t v426 = **(void **)(v33 + 24) + v426 - *(void *)(*(void *)(v33 + 24) + 8) * v440;
                  uint64_t v425 = *(void *)v92[3] + v425 - *((void *)v92[3] + 1) * v93[1];
                  ++v423;
                }
                while (v423 < v422);
              }
              break;
            default:
              if (v32[6])
              {
                unint64_t v375 = 0;
                v1592 = v92[19];
                uint64_t v1638 = *(void *)(v33 + 152);
                uint64_t v376 = v32[19];
                do
                {
                  uint64_t v377 = *(void *)*a1;
                  unint64_t v378 = (unint64_t)(*(void *)(*a1 + 8) - v377) >> 2;
                  uint64_t v379 = 0;
                  uint64_t v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    uint64_t v381 = *(void *)(*a1 + 24);
                    int v382 = v375;
                    do
                    {
                      ldiv_t v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      int v382 = v383.quot;
                      v379 += *(void *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  uint64_t v384 = *(void *)*a2;
                  unint64_t v385 = (unint64_t)(*(void *)(*a2 + 8) - v384) >> 2;
                  uint64_t v386 = 0;
                  uint64_t v387 = (v385 - 1);
                  if ((int)v385 - 1 >= 0)
                  {
                    uint64_t v388 = *(void *)(*a2 + 24);
                    int v389 = v375;
                    do
                    {
                      ldiv_t v390 = ldiv(v389, *(int *)(v384 + 4 * v387));
                      int v389 = v390.quot;
                      v386 += *(void *)(v388 + 8 * v387--) * v390.rem;
                    }
                    while (v387 != -1);
                  }
                  *(unsigned char *)(v376 + v375++) = *((unsigned char *)v1592 + (int)v386) + *(unsigned char *)(v1638 + (int)v379);
                }
                while (v375 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          int v40 = *(void **)a3;
          uint64_t v41 = *a1;
          int v42 = *(int **)*a1;
          uint64_t v43 = (*(void *)(*a1 + 8) - (void)v42) >> 2;
          uint64_t v44 = (v43 - 1);
          if ((int)v44 >= -1) {
            int v45 = -1;
          }
          else {
            int v45 = v43 - 1;
          }
          int v46 = v45 + 1;
          int v47 = v43 + 1;
          break;
      }
      while (1)
      {
        unsigned int v48 = v47 - 2;
        if (v47 - 2 < 0) {
          break;
        }
        --v47;
        if (*(void *)(*(void *)(v41 + 24) + 8 * v48) != *(void *)(v40[3] + 8 * v48)) {
          goto LABEL_87;
        }
      }
      int v47 = v46;
LABEL_87:
      uint64_t v99 = (int **)*a2;
      int v100 = *(int **)*a2;
      uint64_t v101 = (*(void *)(*a2 + 8) - (void)v100) >> 2;
      uint64_t v102 = (v101 - 1);
      if ((int)v102 >= -1) {
        int v103 = -1;
      }
      else {
        int v103 = v101 - 1;
      }
      int v104 = v103 + 1;
      int v105 = v101 + 1;
      while (1)
      {
        unsigned int v106 = v105 - 2;
        if (v105 - 2 < 0) {
          break;
        }
        --v105;
        if (*(void *)&v99[3][2 * v106] != *(void *)(v40[3] + 8 * v106)) {
          goto LABEL_136;
        }
      }
      int v105 = v104;
LABEL_136:
      int v142 = v43 + 1;
      while (1)
      {
        unsigned int v143 = v142 - 2;
        if (v142 - 2 < 0) {
          break;
        }
        --v142;
        if (*(void *)(*(void *)(v41 + 24) + 8 * v143)) {
          goto LABEL_171;
        }
      }
      int v142 = v46;
LABEL_171:
      int v156 = v101 + 1;
      while (1)
      {
        int v157 = v156 - 2;
        if (v156 - 2 < 0) {
          break;
        }
        --v156;
        if (*(void *)&v99[3][2 * v157]) {
          goto LABEL_266;
        }
      }
      int v156 = v104;
LABEL_266:
      unint64_t v202 = (uint64_t)(v40[1] - *v40) >> 2;
      if (v47 <= v105) {
        int v203 = v105;
      }
      else {
        int v203 = v47;
      }
      if (v47 <= v156) {
        int v47 = v156;
      }
      if (v142 > v105) {
        int v105 = v142;
      }
      if (v202 > v105) {
        int v204 = 1;
      }
      else {
        int v204 = 4;
      }
      if (v202 <= v105) {
        int v105 = (uint64_t)(v40[1] - *v40) >> 2;
      }
      if (v202 <= v47) {
        int v47 = v105;
      }
      else {
        int v204 = 2;
      }
      if (v202 <= v203)
      {
        int v205 = v47;
      }
      else
      {
        int v204 = 3;
        int v205 = v203;
      }
      if (!v205) {
        goto LABEL_295;
      }
      unint64_t v206 = *(void *)(v40[3] + 8 * (v205 - 1));
      if (v206 < 0x10) {
        goto LABEL_295;
      }
      switch(v204)
      {
        case 1:
          if (v205 == 2)
          {
            int v1241 = *v42;
            if (*v42)
            {
              uint64_t v1242 = 0;
              uint64_t v1243 = 0;
              uint64_t v1664 = *(void *)(v41 + 152);
              v1618 = v99[19];
              v1244 = (float *)v40[19];
              unint64_t v1538 = 0;
              vDSP_Length v1572 = (int)v206;
              uint64_t v1245 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v1246 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1618[v1242], 1, (const float *)(v1664 + 4 * v1243), v1244, 1, v1572);
                    uint64_t v41 = *a1;
                    v1247 = *(void **)(*a1 + 24);
                    uint64_t v1248 = v1247[1];
                    v1243 += v1248;
                    uint64_t v99 = (int **)*a2;
                    v1249 = *(int **)(*a2 + 24);
                    uint64_t v1250 = *((void *)v1249 + 1);
                    v1242 += v1250;
                    ++v1246;
                    int v42 = *(int **)*a1;
                    unint64_t v1251 = v42[1];
                    v1244 = (float *)((char *)v1244 + v1245);
                  }
                  while (v1246 < v1251);
                  int v1241 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v1251 = 0;
                  v1247 = *(void **)(v41 + 24);
                  uint64_t v1248 = v1247[1];
                  v1249 = v99[3];
                  uint64_t v1250 = *((void *)v1249 + 1);
                }
                uint64_t v1243 = *v1247 + v1243 - v1251 * v1248;
                uint64_t v1242 = *(void *)v1249 + v1242 - v1250 * v100[1];
                ++v1538;
              }
              while (v1538 < v1241);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v854 = 0;
              uint64_t v855 = 0;
              uint64_t v856 = 0;
              uint64_t v857 = *(void *)(v41 + 152);
              v858 = v99[19];
              vDSP_Length v859 = (int)v206;
              uint64_t v860 = 4 * (int)v206;
              v861 = (float *)v40[19];
              do
              {
                vDSP_vsadd((const float *)&v858[v855], 1, (const float *)(v857 + 4 * v856), v861, 1, v859);
                v856 += **(void **)(*a1 + 24);
                v855 += **(void **)(*a2 + 24);
                ++v854;
                v861 = (float *)((char *)v861 + v860);
              }
              while (v854 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1252 = 0;
            v1619 = v99[19];
            uint64_t v1665 = *(void *)(v41 + 152);
            vDSP_Length v1573 = (int)v206;
            v1253 = (float *)v40[19];
            do
            {
              uint64_t v1254 = *(void *)*a1;
              unint64_t v1255 = (unint64_t)(*(void *)(*a1 + 8) - v1254) >> 2;
              uint64_t v1256 = 0;
              uint64_t v1257 = (v1255 - 1);
              if ((int)v1255 - 1 >= 0)
              {
                uint64_t v1258 = *(void *)(*a1 + 24);
                int v1259 = v1252;
                do
                {
                  ldiv_t v1260 = ldiv(v1259, *(int *)(v1254 + 4 * v1257));
                  int v1259 = v1260.quot;
                  v1256 += *(void *)(v1258 + 8 * v1257--) * v1260.rem;
                }
                while (v1257 != -1);
              }
              uint64_t v1261 = *(void *)*a2;
              unint64_t v1262 = (unint64_t)(*(void *)(*a2 + 8) - v1261) >> 2;
              uint64_t v1263 = 0;
              uint64_t v1264 = (v1262 - 1);
              if ((int)v1262 - 1 >= 0)
              {
                uint64_t v1265 = *(void *)(*a2 + 24);
                int v1266 = v1252;
                do
                {
                  ldiv_t v1267 = ldiv(v1266, *(int *)(v1261 + 4 * v1264));
                  int v1266 = v1267.quot;
                  v1263 += *(void *)(v1265 + 8 * v1264--) * v1267.rem;
                }
                while (v1264 != -1);
              }
              vDSP_vsadd((const float *)&v1619[(int)v1263], 1, (const float *)(v1665 + 4 * (int)v1256), v1253, 1, v1573);
              v1253 += v1573;
              v1252 += v1573;
            }
            while (v1252 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v205 == 2)
          {
            int v1268 = *v42;
            if (*v42)
            {
              uint64_t v1269 = 0;
              uint64_t v1270 = 0;
              uint64_t v1666 = *(void *)(v41 + 152);
              v1620 = v99[19];
              v1271 = (float *)v40[19];
              unint64_t v1539 = 0;
              vDSP_Length v1574 = (int)v206;
              uint64_t v1272 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v1273 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1666 + 4 * v1270), 1, (const float *)&v1620[v1269], v1271, 1, v1574);
                    uint64_t v41 = *a1;
                    v1274 = *(void **)(*a1 + 24);
                    uint64_t v1275 = v1274[1];
                    v1270 += v1275;
                    uint64_t v99 = (int **)*a2;
                    v1276 = *(int **)(*a2 + 24);
                    uint64_t v1277 = *((void *)v1276 + 1);
                    v1269 += v1277;
                    ++v1273;
                    int v42 = *(int **)*a1;
                    unint64_t v1278 = v42[1];
                    v1271 = (float *)((char *)v1271 + v1272);
                  }
                  while (v1273 < v1278);
                  int v1268 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v1278 = 0;
                  v1274 = *(void **)(v41 + 24);
                  uint64_t v1275 = v1274[1];
                  v1276 = v99[3];
                  uint64_t v1277 = *((void *)v1276 + 1);
                }
                uint64_t v1270 = *v1274 + v1270 - v1278 * v1275;
                uint64_t v1269 = *(void *)v1276 + v1269 - v1277 * v100[1];
                ++v1539;
              }
              while (v1539 < v1268);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v862 = 0;
              uint64_t v863 = 0;
              uint64_t v864 = 0;
              uint64_t v865 = *(void *)(v41 + 152);
              v866 = v99[19];
              vDSP_Length v867 = (int)v206;
              uint64_t v868 = 4 * (int)v206;
              v869 = (float *)v40[19];
              do
              {
                vDSP_vsadd((const float *)(v865 + 4 * v864), 1, (const float *)&v866[v863], v869, 1, v867);
                v864 += **(void **)(*a1 + 24);
                v863 += **(void **)(*a2 + 24);
                ++v862;
                v869 = (float *)((char *)v869 + v868);
              }
              while (v862 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1279 = 0;
            v1621 = v99[19];
            uint64_t v1667 = *(void *)(v41 + 152);
            vDSP_Length v1575 = (int)v206;
            v1280 = (float *)v40[19];
            do
            {
              uint64_t v1281 = *(void *)*a1;
              unint64_t v1282 = (unint64_t)(*(void *)(*a1 + 8) - v1281) >> 2;
              uint64_t v1283 = 0;
              uint64_t v1284 = (v1282 - 1);
              if ((int)v1282 - 1 >= 0)
              {
                uint64_t v1285 = *(void *)(*a1 + 24);
                int v1286 = v1279;
                do
                {
                  ldiv_t v1287 = ldiv(v1286, *(int *)(v1281 + 4 * v1284));
                  int v1286 = v1287.quot;
                  v1283 += *(void *)(v1285 + 8 * v1284--) * v1287.rem;
                }
                while (v1284 != -1);
              }
              uint64_t v1288 = *(void *)*a2;
              unint64_t v1289 = (unint64_t)(*(void *)(*a2 + 8) - v1288) >> 2;
              uint64_t v1290 = 0;
              uint64_t v1291 = (v1289 - 1);
              if ((int)v1289 - 1 >= 0)
              {
                uint64_t v1292 = *(void *)(*a2 + 24);
                int v1293 = v1279;
                do
                {
                  ldiv_t v1294 = ldiv(v1293, *(int *)(v1288 + 4 * v1291));
                  int v1293 = v1294.quot;
                  v1290 += *(void *)(v1292 + 8 * v1291--) * v1294.rem;
                }
                while (v1291 != -1);
              }
              vDSP_vsadd((const float *)(v1667 + 4 * (int)v1283), 1, (const float *)&v1621[(int)v1290], v1280, 1, v1575);
              v1280 += v1575;
              v1279 += v1575;
            }
            while (v1279 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v205 == 2)
          {
            int v989 = *v42;
            if (*v42)
            {
              uint64_t v990 = 0;
              uint64_t v991 = 0;
              uint64_t v1649 = *(void *)(v41 + 152);
              v1603 = v99[19];
              v992 = (float *)v40[19];
              unint64_t v1534 = 0;
              vDSP_Length v1557 = (int)v206;
              uint64_t v993 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v994 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1649 + 4 * v991), 1, (const float *)&v1603[v990], 1, v992, 1, v1557);
                    uint64_t v41 = *a1;
                    v995 = *(void **)(*a1 + 24);
                    uint64_t v996 = v995[1];
                    v991 += v996;
                    uint64_t v99 = (int **)*a2;
                    v997 = *(int **)(*a2 + 24);
                    uint64_t v998 = *((void *)v997 + 1);
                    v990 += v998;
                    ++v994;
                    int v42 = *(int **)*a1;
                    unint64_t v999 = v42[1];
                    v992 = (float *)((char *)v992 + v993);
                  }
                  while (v994 < v999);
                  int v989 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v999 = 0;
                  v995 = *(void **)(v41 + 24);
                  uint64_t v996 = v995[1];
                  v997 = v99[3];
                  uint64_t v998 = *((void *)v997 + 1);
                }
                uint64_t v991 = *v995 + v991 - v999 * v996;
                uint64_t v990 = *(void *)v997 + v990 - v998 * v100[1];
                ++v1534;
              }
              while (v1534 < v989);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v207 = 0;
              uint64_t v208 = 0;
              uint64_t v209 = 0;
              uint64_t v210 = *(void *)(v41 + 152);
              uint64_t v211 = v99[19];
              vDSP_Length v212 = (int)v206;
              uint64_t v213 = 4 * (int)v206;
              int v214 = (float *)v40[19];
              do
              {
                vDSP_vadd((const float *)(v210 + 4 * v209), 1, (const float *)&v211[v208], 1, v214, 1, v212);
                v209 += **(void **)(*a1 + 24);
                v208 += **(void **)(*a2 + 24);
                ++v207;
                int v214 = (float *)((char *)v214 + v213);
              }
              while (v207 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1000 = 0;
            v1604 = v99[19];
            uint64_t v1650 = *(void *)(v41 + 152);
            vDSP_Length v1558 = (int)v206;
            v1001 = (float *)v40[19];
            do
            {
              uint64_t v1002 = *(void *)*a1;
              unint64_t v1003 = (unint64_t)(*(void *)(*a1 + 8) - v1002) >> 2;
              uint64_t v1004 = 0;
              uint64_t v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                uint64_t v1006 = *(void *)(*a1 + 24);
                int v1007 = v1000;
                do
                {
                  ldiv_t v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  int v1007 = v1008.quot;
                  v1004 += *(void *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              uint64_t v1009 = *(void *)*a2;
              unint64_t v1010 = (unint64_t)(*(void *)(*a2 + 8) - v1009) >> 2;
              uint64_t v1011 = 0;
              uint64_t v1012 = (v1010 - 1);
              if ((int)v1010 - 1 >= 0)
              {
                uint64_t v1013 = *(void *)(*a2 + 24);
                int v1014 = v1000;
                do
                {
                  ldiv_t v1015 = ldiv(v1014, *(int *)(v1009 + 4 * v1012));
                  int v1014 = v1015.quot;
                  v1011 += *(void *)(v1013 + 8 * v1012--) * v1015.rem;
                }
                while (v1012 != -1);
              }
              vDSP_vadd((const float *)(v1650 + 4 * (int)v1004), 1, (const float *)&v1604[(int)v1011], 1, v1001, 1, v1558);
              v1001 += v1558;
              v1000 += v1558;
            }
            while (v1000 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_295:
          switch(v202)
          {
            case 1uLL:
              uint64_t v215 = v40[6];
              if (v215)
              {
                int v216 = *(_DWORD **)(v41 + 152);
                int v217 = v99[19];
                std::string v218 = (_DWORD *)v40[19];
                uint64_t v219 = 4 * *(void *)v99[3];
                uint64_t v220 = 4 * **(void **)(v41 + 24);
                do
                {
                  *v218++ = *v217 + *v216;
                  int v217 = (int *)((char *)v217 + v219);
                  int v216 = (_DWORD *)((char *)v216 + v220);
                  --v215;
                }
                while (v215);
              }
              break;
            case 2uLL:
              int v452 = *v42;
              if (*v42)
              {
                unint64_t v453 = 0;
                uint64_t v454 = 0;
                uint64_t v455 = 0;
                uint64_t v456 = 0;
                uint64_t v457 = *(void *)(v41 + 152);
                v458 = v99[19];
                uint64_t v459 = v40[19];
                v460 = *(uint64_t **)(v41 + 24);
                uint64_t v461 = *v460;
                uint64_t v462 = v460[1];
                v463 = v99[3];
                uint64_t v465 = *(void *)v463;
                uint64_t v464 = *((void *)v463 + 1);
                int v466 = v42[1];
                do
                {
                  if (v466)
                  {
                    for (unint64_t i = 0; i < v466; ++i)
                    {
                      *(_DWORD *)(v459 + 4 * v454 + 4 * i) = v458[v455] + *(_DWORD *)(v457 + 4 * v456);
                      v456 += v462;
                      v455 += v464;
                      int v466 = v42[1];
                    }
                    uint64_t v468 = v466;
                    int v452 = *v42;
                    v454 += i;
                  }
                  else
                  {
                    uint64_t v468 = 0;
                  }
                  uint64_t v456 = v456 + v461 - v468 * v462;
                  uint64_t v455 = v455 + v465 - v464 * v100[1];
                  ++v453;
                }
                while (v453 < v452);
              }
              break;
            case 3uLL:
              int v469 = *v42;
              if (*v42)
              {
                unint64_t v470 = 0;
                uint64_t v471 = 0;
                uint64_t v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = *(void *)(v41 + 152);
                v475 = v99[19];
                uint64_t v476 = v40[19];
                v477 = *(uint64_t **)(v41 + 24);
                uint64_t v478 = *v477;
                uint64_t v479 = v477[1];
                v480 = v99[3];
                uint64_t v481 = *(void *)v480;
                uint64_t v482 = *((void *)v480 + 1);
                int v483 = v42[1];
                int v484 = v483;
                do
                {
                  if (v484)
                  {
                    unint64_t v485 = 0;
                    uint64_t v486 = v477[2];
                    uint64_t v487 = *((void *)v480 + 2);
                    int v488 = v42[2];
                    do
                    {
                      if (v488)
                      {
                        for (unint64_t j = 0; j < v488; ++j)
                        {
                          *(_DWORD *)(v476 + 4 * v471 + 4 * j) = v475[v472] + *(_DWORD *)(v474 + 4 * v473);
                          v473 += v486;
                          v472 += v487;
                          int v488 = v42[2];
                        }
                        uint64_t v490 = v488;
                        int v483 = v42[1];
                        v471 += j;
                      }
                      else
                      {
                        uint64_t v490 = 0;
                      }
                      uint64_t v473 = v473 + v479 - v490 * v486;
                      uint64_t v472 = v472 + v482 - v487 * v100[2];
                      ++v485;
                    }
                    while (v485 < v483);
                    uint64_t v491 = v483;
                    int v469 = *v42;
                    int v484 = v483;
                  }
                  else
                  {
                    uint64_t v491 = 0;
                  }
                  uint64_t v473 = v473 + v478 - v491 * v479;
                  uint64_t v472 = v472 + v481 - v482 * v100[1];
                  ++v470;
                }
                while (v470 < v469);
              }
              break;
            case 4uLL:
              int v492 = *v42;
              if (*v42)
              {
                unint64_t v493 = 0;
                uint64_t v494 = 0;
                uint64_t v495 = 0;
                uint64_t v496 = 0;
                uint64_t v497 = *(void *)(v41 + 152);
                v498 = v99[19];
                uint64_t v499 = v40[19];
                v500 = *(uint64_t **)(v41 + 24);
                uint64_t v501 = *v500;
                uint64_t v502 = v500[1];
                v503 = v99[3];
                uint64_t v504 = *(void *)v503;
                uint64_t v505 = *((void *)v503 + 1);
                int v506 = v42[1];
                int v507 = v506;
                do
                {
                  if (v507)
                  {
                    unint64_t v508 = 0;
                    uint64_t v509 = v500[2];
                    uint64_t v510 = *((void *)v503 + 2);
                    int v511 = v42[2];
                    int v512 = v511;
                    do
                    {
                      if (v512)
                      {
                        unint64_t v513 = 0;
                        uint64_t v514 = v500[3];
                        uint64_t v515 = *((void *)v503 + 3);
                        int v516 = v42[3];
                        do
                        {
                          if (v516)
                          {
                            for (unint64_t k = 0; k < v516; ++k)
                            {
                              *(_DWORD *)(v499 + 4 * v494 + 4 * k) = v498[v495] + *(_DWORD *)(v497 + 4 * v496);
                              v496 += v514;
                              v495 += v515;
                              int v516 = v42[3];
                            }
                            uint64_t v518 = v516;
                            int v511 = v42[2];
                            v494 += k;
                          }
                          else
                          {
                            uint64_t v518 = 0;
                          }
                          uint64_t v496 = v496 + v509 - v518 * v514;
                          uint64_t v495 = v495 + v510 - v515 * v100[3];
                          ++v513;
                        }
                        while (v513 < v511);
                        uint64_t v519 = v511;
                        int v506 = v42[1];
                        int v512 = v511;
                      }
                      else
                      {
                        uint64_t v519 = 0;
                      }
                      uint64_t v496 = v496 + v502 - v519 * v509;
                      uint64_t v495 = v495 + v505 - v510 * v100[2];
                      ++v508;
                    }
                    while (v508 < v506);
                    uint64_t v520 = v506;
                    int v492 = *v42;
                    int v507 = v506;
                  }
                  else
                  {
                    uint64_t v520 = 0;
                  }
                  uint64_t v496 = v496 + v501 - v520 * v502;
                  uint64_t v495 = v495 + v504 - v505 * v100[1];
                  ++v493;
                }
                while (v493 < v492);
              }
              break;
            default:
              uint64_t v1593 = v40[6];
              uint64_t v1639 = v44;
              if (v1593)
              {
                uint64_t v441 = 0;
                v1528 = v99[19];
                uint64_t v1548 = *(void *)(v41 + 152);
                uint64_t v1521 = v40[19];
                do
                {
                  uint64_t v442 = v1639;
                  if ((v1639 & 0x80000000) != 0)
                  {
                    LODWORD(v443) = 0;
                  }
                  else
                  {
                    uint64_t v443 = 0;
                    uint64_t v444 = *(void *)(v41 + 24);
                    int v445 = v441;
                    do
                    {
                      ldiv_t v446 = ldiv(v445, v42[v442]);
                      int v445 = v446.quot;
                      v443 += *(void *)(v444 + 8 * v442--) * v446.rem;
                    }
                    while (v442 != -1);
                  }
                  uint64_t v447 = 0;
                  if ((v102 & 0x80000000) == 0)
                  {
                    v448 = v99[3];
                    uint64_t v449 = v102;
                    int v450 = v441;
                    do
                    {
                      ldiv_t v451 = ldiv(v450, v100[v449]);
                      int v450 = v451.quot;
                      v447 += *(void *)&v448[2 * v449--] * v451.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_DWORD *)(v1521 + 4 * v441++) = v1528[(int)v447] + *(_DWORD *)(v1548 + 4 * (int)v443);
                }
                while (v441 != v1593);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v10)
      {
        case 0:
LABEL_7:
          char v7 = **(unsigned char **)(*a2 + 152) + **(unsigned char **)(*a1 + 152);
LABEL_8:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v49 = *(void **)a3;
          uint64_t v50 = *a1;
          uint64_t v51 = *(int **)*a1;
          uint64_t v52 = (*(void *)(*a1 + 8) - (void)v51) >> 2;
          int v53 = v52 - 1;
          if ((int)v52 - 1 >= -1) {
            int v53 = -1;
          }
          int v54 = v53 + 1;
          int v55 = v52 + 1;
          break;
      }
      while (1)
      {
        unsigned int v56 = v55 - 2;
        if (v55 - 2 < 0) {
          break;
        }
        --v55;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v56) != *(void *)(v49[3] + 8 * v56)) {
          goto LABEL_95;
        }
      }
      int v55 = v54;
LABEL_95:
      unsigned int v107 = (int **)*a2;
      unsigned int v108 = *(int **)*a2;
      uint64_t v109 = (*(void *)(*a2 + 8) - (void)v108) >> 2;
      int v110 = v109 - 1;
      if ((int)v109 - 1 >= -1) {
        int v110 = -1;
      }
      int v111 = v110 + 1;
      int v112 = v109 + 1;
      while (1)
      {
        unsigned int v113 = v112 - 2;
        if (v112 - 2 < 0) {
          break;
        }
        --v112;
        if (*(void *)&v107[3][2 * v113] != *(void *)(v49[3] + 8 * v113)) {
          goto LABEL_141;
        }
      }
      int v112 = v111;
LABEL_141:
      int v144 = v52 + 1;
      while (1)
      {
        unsigned int v145 = v144 - 2;
        if (v144 - 2 < 0) {
          break;
        }
        --v144;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v145)) {
          goto LABEL_176;
        }
      }
      int v144 = v54;
LABEL_176:
      int v158 = v109 + 1;
      while (1)
      {
        int v159 = v158 - 2;
        if (v158 - 2 < 0) {
          break;
        }
        --v158;
        if (*(void *)&v107[3][2 * v159]) {
          goto LABEL_301;
        }
      }
      int v158 = v111;
LABEL_301:
      unint64_t v221 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v55 <= v112) {
        int v222 = v112;
      }
      else {
        int v222 = v55;
      }
      if (v55 <= v158) {
        int v55 = v158;
      }
      if (v144 > v112) {
        int v112 = v144;
      }
      if (v221 > v112) {
        int v223 = 1;
      }
      else {
        int v223 = 4;
      }
      if (v221 <= v112) {
        int v112 = (uint64_t)(v49[1] - *v49) >> 2;
      }
      if (v221 <= v55) {
        int v55 = v112;
      }
      else {
        int v223 = 2;
      }
      if (v221 <= v222)
      {
        int v224 = v55;
      }
      else
      {
        int v223 = 3;
        int v224 = v222;
      }
      if (!v224) {
        goto LABEL_330;
      }
      unint64_t v225 = *(void *)(v49[3] + 8 * (v224 - 1));
      if (v225 < 0x10) {
        goto LABEL_330;
      }
      switch(v223)
      {
        case 1:
          if (v224 == 2)
          {
            int v1295 = *v51;
            if (*v51)
            {
              unint64_t v1296 = 0;
              uint64_t v1297 = 0;
              uint64_t v1298 = 0;
              uint64_t v1299 = *(void *)(v50 + 152);
              v1300 = v107[19];
              vDSP_Length v1301 = (int)v225;
              v1302 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1303 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)((char *)v1300 + v1297), 1, (const float *)(v1299 + v1298), v1302, 1, v1301);
                    uint64_t v50 = *a1;
                    v1304 = *(void **)(*a1 + 24);
                    uint64_t v1305 = v1304[1];
                    v1298 += v1305;
                    unsigned int v107 = (int **)*a2;
                    v1306 = *(int **)(*a2 + 24);
                    uint64_t v1307 = *((void *)v1306 + 1);
                    v1297 += v1307;
                    v1302 = (float *)((char *)v1302 + v1301);
                    ++v1303;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1308 = v51[1];
                  }
                  while (v1303 < v1308);
                  int v1295 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1308 = 0;
                  v1304 = *(void **)(v50 + 24);
                  uint64_t v1305 = v1304[1];
                  v1306 = v107[3];
                  uint64_t v1307 = *((void *)v1306 + 1);
                }
                uint64_t v1298 = *v1304 + v1298 - v1308 * v1305;
                uint64_t v1297 = *(void *)v1306 + v1297 - v1307 * v108[1];
                ++v1296;
              }
              while (v1296 < v1295);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v870 = 0;
              uint64_t v871 = 0;
              uint64_t v872 = 0;
              uint64_t v873 = *(void *)(v50 + 152);
              v874 = v107[19];
              vDSP_Length v875 = (int)v225;
              v876 = (float *)v49[19];
              do
              {
                vDSP_vsadd((const float *)((char *)v874 + v871), 1, (const float *)(v873 + v872), v876, 1, v875);
                v872 += **(void **)(*a1 + 24);
                v871 += **(void **)(*a2 + 24);
                v876 = (float *)((char *)v876 + v875);
                ++v870;
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1309 = 0;
            v1622 = v107[19];
            uint64_t v1668 = *(void *)(v50 + 152);
            vDSP_Length v1576 = (int)v225;
            v1310 = (float *)v49[19];
            do
            {
              uint64_t v1311 = *(void *)*a1;
              unint64_t v1312 = (unint64_t)(*(void *)(*a1 + 8) - v1311) >> 2;
              uint64_t v1313 = 0;
              uint64_t v1314 = (v1312 - 1);
              if ((int)v1312 - 1 >= 0)
              {
                uint64_t v1315 = *(void *)(*a1 + 24);
                int v1316 = v1309;
                do
                {
                  ldiv_t v1317 = ldiv(v1316, *(int *)(v1311 + 4 * v1314));
                  int v1316 = v1317.quot;
                  v1313 += *(void *)(v1315 + 8 * v1314--) * v1317.rem;
                }
                while (v1314 != -1);
              }
              uint64_t v1318 = *(void *)*a2;
              unint64_t v1319 = (unint64_t)(*(void *)(*a2 + 8) - v1318) >> 2;
              uint64_t v1320 = 0;
              uint64_t v1321 = (v1319 - 1);
              if ((int)v1319 - 1 >= 0)
              {
                uint64_t v1322 = *(void *)(*a2 + 24);
                int v1323 = v1309;
                do
                {
                  ldiv_t v1324 = ldiv(v1323, *(int *)(v1318 + 4 * v1321));
                  int v1323 = v1324.quot;
                  v1320 += *(void *)(v1322 + 8 * v1321--) * v1324.rem;
                }
                while (v1321 != -1);
              }
              vDSP_vsadd((const float *)((char *)v1622 + (int)v1320), 1, (const float *)(v1668 + (int)v1313), v1310, 1, v1576);
              v1310 = (float *)((char *)v1310 + v1576);
              v1309 += v1576;
            }
            while (v1309 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v224 == 2)
          {
            int v1325 = *v51;
            if (*v51)
            {
              unint64_t v1326 = 0;
              uint64_t v1327 = 0;
              uint64_t v1328 = 0;
              uint64_t v1329 = *(void *)(v50 + 152);
              v1330 = v107[19];
              vDSP_Length v1331 = (int)v225;
              v1332 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1333 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1329 + v1328), 1, (const float *)((char *)v1330 + v1327), v1332, 1, v1331);
                    uint64_t v50 = *a1;
                    v1334 = *(void **)(*a1 + 24);
                    uint64_t v1335 = v1334[1];
                    v1328 += v1335;
                    unsigned int v107 = (int **)*a2;
                    v1336 = *(int **)(*a2 + 24);
                    uint64_t v1337 = *((void *)v1336 + 1);
                    v1327 += v1337;
                    v1332 = (float *)((char *)v1332 + v1331);
                    ++v1333;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1338 = v51[1];
                  }
                  while (v1333 < v1338);
                  int v1325 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1338 = 0;
                  v1334 = *(void **)(v50 + 24);
                  uint64_t v1335 = v1334[1];
                  v1336 = v107[3];
                  uint64_t v1337 = *((void *)v1336 + 1);
                }
                uint64_t v1328 = *v1334 + v1328 - v1338 * v1335;
                uint64_t v1327 = *(void *)v1336 + v1327 - v1337 * v108[1];
                ++v1326;
              }
              while (v1326 < v1325);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v877 = 0;
              uint64_t v878 = 0;
              uint64_t v879 = 0;
              uint64_t v880 = *(void *)(v50 + 152);
              v881 = v107[19];
              vDSP_Length v882 = (int)v225;
              v883 = (float *)v49[19];
              do
              {
                vDSP_vsadd((const float *)(v880 + v879), 1, (const float *)((char *)v881 + v878), v883, 1, v882);
                v879 += **(void **)(*a1 + 24);
                v878 += **(void **)(*a2 + 24);
                v883 = (float *)((char *)v883 + v882);
                ++v877;
              }
              while (v877 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1339 = 0;
            v1623 = v107[19];
            uint64_t v1669 = *(void *)(v50 + 152);
            vDSP_Length v1577 = (int)v225;
            v1340 = (float *)v49[19];
            do
            {
              uint64_t v1341 = *(void *)*a1;
              unint64_t v1342 = (unint64_t)(*(void *)(*a1 + 8) - v1341) >> 2;
              uint64_t v1343 = 0;
              uint64_t v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                uint64_t v1345 = *(void *)(*a1 + 24);
                int v1346 = v1339;
                do
                {
                  ldiv_t v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  int v1346 = v1347.quot;
                  v1343 += *(void *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              uint64_t v1348 = *(void *)*a2;
              unint64_t v1349 = (unint64_t)(*(void *)(*a2 + 8) - v1348) >> 2;
              uint64_t v1350 = 0;
              uint64_t v1351 = (v1349 - 1);
              if ((int)v1349 - 1 >= 0)
              {
                uint64_t v1352 = *(void *)(*a2 + 24);
                int v1353 = v1339;
                do
                {
                  ldiv_t v1354 = ldiv(v1353, *(int *)(v1348 + 4 * v1351));
                  int v1353 = v1354.quot;
                  v1350 += *(void *)(v1352 + 8 * v1351--) * v1354.rem;
                }
                while (v1351 != -1);
              }
              vDSP_vsadd((const float *)(v1669 + (int)v1343), 1, (const float *)((char *)v1623 + (int)v1350), v1340, 1, v1577);
              v1340 = (float *)((char *)v1340 + v1577);
              v1339 += v1577;
            }
            while (v1339 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v224 == 2)
          {
            int v1016 = *v51;
            if (*v51)
            {
              unint64_t v1017 = 0;
              uint64_t v1018 = 0;
              uint64_t v1019 = 0;
              uint64_t v1020 = *(void *)(v50 + 152);
              v1021 = v107[19];
              vDSP_Length v1022 = (int)v225;
              v1023 = (float *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1024 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1020 + v1019), 1, (const float *)((char *)v1021 + v1018), 1, v1023, 1, v1022);
                    uint64_t v50 = *a1;
                    v1025 = *(void **)(*a1 + 24);
                    uint64_t v1026 = v1025[1];
                    v1019 += v1026;
                    unsigned int v107 = (int **)*a2;
                    v1027 = *(int **)(*a2 + 24);
                    uint64_t v1028 = *((void *)v1027 + 1);
                    v1018 += v1028;
                    v1023 = (float *)((char *)v1023 + v1022);
                    ++v1024;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1029 = v51[1];
                  }
                  while (v1024 < v1029);
                  int v1016 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1029 = 0;
                  v1025 = *(void **)(v50 + 24);
                  uint64_t v1026 = v1025[1];
                  v1027 = v107[3];
                  uint64_t v1028 = *((void *)v1027 + 1);
                }
                uint64_t v1019 = *v1025 + v1019 - v1029 * v1026;
                uint64_t v1018 = *(void *)v1027 + v1018 - v1028 * v108[1];
                ++v1017;
              }
              while (v1017 < v1016);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v226 = 0;
              uint64_t v227 = 0;
              uint64_t v228 = 0;
              uint64_t v229 = *(void *)(v50 + 152);
              v230 = v107[19];
              vDSP_Length v231 = (int)v225;
              uint64_t v232 = (float *)v49[19];
              do
              {
                vDSP_vadd((const float *)(v229 + v228), 1, (const float *)((char *)v230 + v227), 1, v232, 1, v231);
                v228 += **(void **)(*a1 + 24);
                v227 += **(void **)(*a2 + 24);
                uint64_t v232 = (float *)((char *)v232 + v231);
                ++v226;
              }
              while (v226 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1030 = 0;
            v1605 = v107[19];
            uint64_t v1651 = *(void *)(v50 + 152);
            vDSP_Length v1559 = (int)v225;
            v1031 = (float *)v49[19];
            do
            {
              uint64_t v1032 = *(void *)*a1;
              unint64_t v1033 = (unint64_t)(*(void *)(*a1 + 8) - v1032) >> 2;
              uint64_t v1034 = 0;
              uint64_t v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                uint64_t v1036 = *(void *)(*a1 + 24);
                int v1037 = v1030;
                do
                {
                  ldiv_t v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  int v1037 = v1038.quot;
                  v1034 += *(void *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              uint64_t v1039 = *(void *)*a2;
              unint64_t v1040 = (unint64_t)(*(void *)(*a2 + 8) - v1039) >> 2;
              uint64_t v1041 = 0;
              uint64_t v1042 = (v1040 - 1);
              if ((int)v1040 - 1 >= 0)
              {
                uint64_t v1043 = *(void *)(*a2 + 24);
                int v1044 = v1030;
                do
                {
                  ldiv_t v1045 = ldiv(v1044, *(int *)(v1039 + 4 * v1042));
                  int v1044 = v1045.quot;
                  v1041 += *(void *)(v1043 + 8 * v1042--) * v1045.rem;
                }
                while (v1042 != -1);
              }
              vDSP_vadd((const float *)(v1651 + (int)v1034), 1, (const float *)((char *)v1605 + (int)v1041), 1, v1031, 1, v1559);
              v1031 = (float *)((char *)v1031 + v1559);
              v1030 += v1559;
            }
            while (v1030 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_330:
          switch(v221)
          {
            case 1uLL:
              if (v49[6])
              {
                unint64_t v233 = 0;
                uint64_t v234 = 0;
                uint64_t v235 = 0;
                uint64_t v236 = *(void *)(v50 + 152);
                int v237 = v107[19];
                uint64_t v238 = v49[19];
                do
                {
                  *(unsigned char *)(v238 + v233) = *((unsigned char *)v237 + v234) + *(unsigned char *)(v236 + v235);
                  v235 += **(void **)(*a1 + 24);
                  v234 += **(void **)(*a2 + 24);
                  ++v233;
                }
                while (v233 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v537 = *v51;
              if (*v51)
              {
                unint64_t v538 = 0;
                uint64_t v539 = 0;
                uint64_t v540 = 0;
                uint64_t v541 = 0;
                uint64_t v542 = *(void *)(v50 + 152);
                v543 = v107[19];
                uint64_t v544 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v545 = 0;
                    do
                    {
                      *(unsigned char *)(v544 + v539 + v545) = *((unsigned char *)v543 + v540) + *(unsigned char *)(v542 + v541);
                      uint64_t v50 = *a1;
                      v546 = *(void **)(*a1 + 24);
                      uint64_t v547 = v546[1];
                      v541 += v547;
                      unsigned int v107 = (int **)*a2;
                      v548 = *(int **)(*a2 + 24);
                      uint64_t v549 = *((void *)v548 + 1);
                      v540 += v549;
                      ++v545;
                      uint64_t v51 = *(int **)*a1;
                      unint64_t v550 = v51[1];
                    }
                    while (v545 < v550);
                    int v537 = *v51;
                    unsigned int v108 = *v107;
                    v539 += v545;
                  }
                  else
                  {
                    unint64_t v550 = 0;
                    v546 = *(void **)(v50 + 24);
                    uint64_t v547 = v546[1];
                    v548 = v107[3];
                    uint64_t v549 = *((void *)v548 + 1);
                  }
                  uint64_t v541 = *v546 + v541 - v550 * v547;
                  uint64_t v540 = *(void *)v548 + v540 - v549 * v108[1];
                  ++v538;
                }
                while (v538 < v537);
              }
              break;
            case 3uLL:
              int v551 = *v51;
              if (*v51)
              {
                unint64_t v552 = 0;
                uint64_t v553 = 0;
                uint64_t v554 = 0;
                uint64_t v555 = 0;
                uint64_t v556 = *(void *)(v50 + 152);
                v557 = v107[19];
                uint64_t v558 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v559 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        unint64_t v560 = 0;
                        do
                        {
                          *(unsigned char *)(v558 + v553 + v560) = *((unsigned char *)v557 + v554) + *(unsigned char *)(v556 + v555);
                          uint64_t v50 = *a1;
                          v561 = *(void **)(*a1 + 24);
                          uint64_t v562 = v561[2];
                          v555 += v562;
                          unsigned int v107 = (int **)*a2;
                          v563 = *(int **)(*a2 + 24);
                          uint64_t v564 = *((void *)v563 + 2);
                          v554 += v564;
                          ++v560;
                          uint64_t v51 = *(int **)*a1;
                          unint64_t v565 = v51[2];
                        }
                        while (v560 < v565);
                        unsigned int v108 = *v107;
                        v553 += v560;
                      }
                      else
                      {
                        unint64_t v565 = 0;
                        v561 = *(void **)(v50 + 24);
                        uint64_t v562 = v561[2];
                        v563 = v107[3];
                        uint64_t v564 = *((void *)v563 + 2);
                      }
                      uint64_t v566 = v561[1];
                      uint64_t v555 = v566 + v555 - v565 * v562;
                      uint64_t v554 = *((void *)v563 + 1) + v554 - v564 * v108[2];
                      ++v559;
                      unint64_t v567 = v51[1];
                    }
                    while (v559 < v567);
                    int v551 = *v51;
                  }
                  else
                  {
                    unint64_t v567 = 0;
                    v561 = *(void **)(v50 + 24);
                    uint64_t v566 = v561[1];
                  }
                  uint64_t v555 = *v561 + v555 - v567 * v566;
                  uint64_t v554 = *(void *)v107[3] + v554 - *((void *)v107[3] + 1) * v108[1];
                  ++v552;
                }
                while (v552 < v551);
              }
              break;
            case 4uLL:
              int v568 = *v51;
              if (*v51)
              {
                unint64_t v569 = 0;
                uint64_t v570 = 0;
                uint64_t v571 = 0;
                uint64_t v572 = 0;
                uint64_t v573 = *(void *)(v50 + 152);
                v574 = v107[19];
                uint64_t v575 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v576 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        unint64_t v577 = 0;
                        do
                        {
                          if (v51[3])
                          {
                            unint64_t v578 = 0;
                            do
                            {
                              *(unsigned char *)(v575 + v570 + v578) = *((unsigned char *)v574 + v571) + *(unsigned char *)(v573 + v572);
                              uint64_t v50 = *a1;
                              v579 = *(void **)(*a1 + 24);
                              uint64_t v580 = v579[3];
                              v572 += v580;
                              unsigned int v107 = (int **)*a2;
                              v581 = *(int **)(*a2 + 24);
                              uint64_t v582 = *((void *)v581 + 3);
                              v571 += v582;
                              ++v578;
                              uint64_t v51 = *(int **)*a1;
                              unint64_t v583 = v51[3];
                            }
                            while (v578 < v583);
                            unsigned int v108 = *v107;
                            v570 += v578;
                          }
                          else
                          {
                            unint64_t v583 = 0;
                            v579 = *(void **)(v50 + 24);
                            uint64_t v580 = v579[3];
                            v581 = v107[3];
                            uint64_t v582 = *((void *)v581 + 3);
                          }
                          uint64_t v584 = v579[2];
                          uint64_t v572 = v584 + v572 - v583 * v580;
                          uint64_t v571 = *((void *)v581 + 2) + v571 - v582 * v108[3];
                          ++v577;
                          unint64_t v585 = v51[2];
                        }
                        while (v577 < v585);
                      }
                      else
                      {
                        unint64_t v585 = 0;
                        v579 = *(void **)(v50 + 24);
                        uint64_t v584 = v579[2];
                      }
                      uint64_t v572 = v579[1] + v572 - v585 * v584;
                      uint64_t v571 = *((void *)v107[3] + 1) + v571 - *((void *)v107[3] + 2) * v108[2];
                      ++v576;
                      unint64_t v586 = v51[1];
                    }
                    while (v576 < v586);
                    int v568 = *v51;
                  }
                  else
                  {
                    unint64_t v586 = 0;
                  }
                  uint64_t v572 = **(void **)(v50 + 24) + v572 - *(void *)(*(void *)(v50 + 24) + 8) * v586;
                  uint64_t v571 = *(void *)v107[3] + v571 - *((void *)v107[3] + 1) * v108[1];
                  ++v569;
                }
                while (v569 < v568);
              }
              break;
            default:
              if (v49[6])
              {
                unint64_t v521 = 0;
                v1594 = v107[19];
                uint64_t v1640 = *(void *)(v50 + 152);
                uint64_t v522 = v49[19];
                do
                {
                  uint64_t v523 = *(void *)*a1;
                  unint64_t v524 = (unint64_t)(*(void *)(*a1 + 8) - v523) >> 2;
                  uint64_t v525 = 0;
                  uint64_t v526 = (v524 - 1);
                  if ((int)v524 - 1 >= 0)
                  {
                    uint64_t v527 = *(void *)(*a1 + 24);
                    int v528 = v521;
                    do
                    {
                      ldiv_t v529 = ldiv(v528, *(int *)(v523 + 4 * v526));
                      int v528 = v529.quot;
                      v525 += *(void *)(v527 + 8 * v526--) * v529.rem;
                    }
                    while (v526 != -1);
                  }
                  uint64_t v530 = *(void *)*a2;
                  unint64_t v531 = (unint64_t)(*(void *)(*a2 + 8) - v530) >> 2;
                  uint64_t v532 = 0;
                  uint64_t v533 = (v531 - 1);
                  if ((int)v531 - 1 >= 0)
                  {
                    uint64_t v534 = *(void *)(*a2 + 24);
                    int v535 = v521;
                    do
                    {
                      ldiv_t v536 = ldiv(v535, *(int *)(v530 + 4 * v533));
                      int v535 = v536.quot;
                      v532 += *(void *)(v534 + 8 * v533--) * v536.rem;
                    }
                    while (v533 != -1);
                  }
                  *(unsigned char *)(v522 + v521++) = *((unsigned char *)v1594 + (int)v532) + *(unsigned char *)(v1640 + (int)v525);
                }
                while (v521 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v11)
      {
        case 0:
LABEL_10:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          char v57 = *(void **)a3;
          uint64_t v58 = *a1;
          uint64_t v59 = *(int **)*a1;
          uint64_t v60 = (*(void *)(*a1 + 8) - (void)v59) >> 2;
          uint64_t v61 = (v60 - 1);
          if ((int)v61 >= -1) {
            int v62 = -1;
          }
          else {
            int v62 = v60 - 1;
          }
          int v63 = v62 + 1;
          int v64 = v60 + 1;
          break;
      }
      while (1)
      {
        unsigned int v65 = v64 - 2;
        if (v64 - 2 < 0) {
          break;
        }
        --v64;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v65) != *(void *)(v57[3] + 8 * v65)) {
          goto LABEL_102;
        }
      }
      int v64 = v63;
LABEL_102:
      uint64_t v114 = (int **)*a2;
      char v115 = *(int **)*a2;
      uint64_t v116 = (*(void *)(*a2 + 8) - (void)v115) >> 2;
      uint64_t v117 = (v116 - 1);
      if ((int)v117 >= -1) {
        int v118 = -1;
      }
      else {
        int v118 = v116 - 1;
      }
      int v119 = v118 + 1;
      int v120 = v116 + 1;
      while (1)
      {
        unsigned int v121 = v120 - 2;
        if (v120 - 2 < 0) {
          break;
        }
        --v120;
        if (*(void *)&v114[3][2 * v121] != *(void *)(v57[3] + 8 * v121)) {
          goto LABEL_146;
        }
      }
      int v120 = v119;
LABEL_146:
      int v146 = v60 + 1;
      while (1)
      {
        unsigned int v147 = v146 - 2;
        if (v146 - 2 < 0) {
          break;
        }
        --v146;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v147)) {
          goto LABEL_181;
        }
      }
      int v146 = v63;
LABEL_181:
      int v160 = v116 + 1;
      while (1)
      {
        int v161 = v160 - 2;
        if (v160 - 2 < 0) {
          break;
        }
        --v160;
        if (*(void *)&v114[3][2 * v161]) {
          goto LABEL_336;
        }
      }
      int v160 = v119;
LABEL_336:
      unint64_t v239 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v120) {
        int v240 = v120;
      }
      else {
        int v240 = v64;
      }
      if (v64 <= v160) {
        int v64 = v160;
      }
      if (v146 > v120) {
        int v120 = v146;
      }
      if (v239 > v120) {
        int v241 = 1;
      }
      else {
        int v241 = 4;
      }
      if (v239 <= v120) {
        int v120 = (uint64_t)(v57[1] - *v57) >> 2;
      }
      if (v239 <= v64) {
        int v64 = v120;
      }
      else {
        int v241 = 2;
      }
      if (v239 <= v240)
      {
        int v242 = v64;
      }
      else
      {
        int v241 = 3;
        int v242 = v240;
      }
      if (!v242) {
        goto LABEL_365;
      }
      unint64_t v243 = *(void *)(v57[3] + 8 * (v242 - 1));
      if (v243 < 0x10) {
        goto LABEL_365;
      }
      switch(v241)
      {
        case 1:
          if (v242 == 2)
          {
            int v1355 = *v59;
            if (*v59)
            {
              uint64_t v1356 = 0;
              uint64_t v1357 = 0;
              uint64_t v1670 = *(void *)(v58 + 152);
              v1624 = v114[19];
              v1358 = (float *)v57[19];
              unint64_t v1540 = 0;
              vDSP_Length v1578 = (int)v243;
              uint64_t v1359 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1360 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1624[v1356], 1, (const float *)(v1670 + 4 * v1357), v1358, 1, v1578);
                    uint64_t v58 = *a1;
                    v1361 = *(void **)(*a1 + 24);
                    uint64_t v1362 = v1361[1];
                    v1357 += v1362;
                    uint64_t v114 = (int **)*a2;
                    v1363 = *(int **)(*a2 + 24);
                    uint64_t v1364 = *((void *)v1363 + 1);
                    v1356 += v1364;
                    ++v1360;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1365 = v59[1];
                    v1358 = (float *)((char *)v1358 + v1359);
                  }
                  while (v1360 < v1365);
                  int v1355 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1365 = 0;
                  v1361 = *(void **)(v58 + 24);
                  uint64_t v1362 = v1361[1];
                  v1363 = v114[3];
                  uint64_t v1364 = *((void *)v1363 + 1);
                }
                uint64_t v1357 = *v1361 + v1357 - v1365 * v1362;
                uint64_t v1356 = *(void *)v1363 + v1356 - v1364 * v115[1];
                ++v1540;
              }
              while (v1540 < v1355);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v884 = 0;
              uint64_t v885 = 0;
              uint64_t v886 = 0;
              uint64_t v887 = *(void *)(v58 + 152);
              v888 = v114[19];
              vDSP_Length v889 = (int)v243;
              uint64_t v890 = 4 * (int)v243;
              v891 = (float *)v57[19];
              do
              {
                vDSP_vsadd((const float *)&v888[v885], 1, (const float *)(v887 + 4 * v886), v891, 1, v889);
                v886 += **(void **)(*a1 + 24);
                v885 += **(void **)(*a2 + 24);
                ++v884;
                v891 = (float *)((char *)v891 + v890);
              }
              while (v884 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1366 = 0;
            v1625 = v114[19];
            uint64_t v1671 = *(void *)(v58 + 152);
            vDSP_Length v1579 = (int)v243;
            v1367 = (float *)v57[19];
            do
            {
              uint64_t v1368 = *(void *)*a1;
              unint64_t v1369 = (unint64_t)(*(void *)(*a1 + 8) - v1368) >> 2;
              uint64_t v1370 = 0;
              uint64_t v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                uint64_t v1372 = *(void *)(*a1 + 24);
                int v1373 = v1366;
                do
                {
                  ldiv_t v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  int v1373 = v1374.quot;
                  v1370 += *(void *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              uint64_t v1375 = *(void *)*a2;
              unint64_t v1376 = (unint64_t)(*(void *)(*a2 + 8) - v1375) >> 2;
              uint64_t v1377 = 0;
              uint64_t v1378 = (v1376 - 1);
              if ((int)v1376 - 1 >= 0)
              {
                uint64_t v1379 = *(void *)(*a2 + 24);
                int v1380 = v1366;
                do
                {
                  ldiv_t v1381 = ldiv(v1380, *(int *)(v1375 + 4 * v1378));
                  int v1380 = v1381.quot;
                  v1377 += *(void *)(v1379 + 8 * v1378--) * v1381.rem;
                }
                while (v1378 != -1);
              }
              vDSP_vsadd((const float *)&v1625[(int)v1377], 1, (const float *)(v1671 + 4 * (int)v1370), v1367, 1, v1579);
              v1367 += v1579;
              v1366 += v1579;
            }
            while (v1366 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v242 == 2)
          {
            int v1382 = *v59;
            if (*v59)
            {
              uint64_t v1383 = 0;
              uint64_t v1384 = 0;
              uint64_t v1672 = *(void *)(v58 + 152);
              v1626 = v114[19];
              v1385 = (float *)v57[19];
              unint64_t v1541 = 0;
              vDSP_Length v1580 = (int)v243;
              uint64_t v1386 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1387 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1672 + 4 * v1384), 1, (const float *)&v1626[v1383], v1385, 1, v1580);
                    uint64_t v58 = *a1;
                    v1388 = *(void **)(*a1 + 24);
                    uint64_t v1389 = v1388[1];
                    v1384 += v1389;
                    uint64_t v114 = (int **)*a2;
                    v1390 = *(int **)(*a2 + 24);
                    uint64_t v1391 = *((void *)v1390 + 1);
                    v1383 += v1391;
                    ++v1387;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1392 = v59[1];
                    v1385 = (float *)((char *)v1385 + v1386);
                  }
                  while (v1387 < v1392);
                  int v1382 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1392 = 0;
                  v1388 = *(void **)(v58 + 24);
                  uint64_t v1389 = v1388[1];
                  v1390 = v114[3];
                  uint64_t v1391 = *((void *)v1390 + 1);
                }
                uint64_t v1384 = *v1388 + v1384 - v1392 * v1389;
                uint64_t v1383 = *(void *)v1390 + v1383 - v1391 * v115[1];
                ++v1541;
              }
              while (v1541 < v1382);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v892 = 0;
              uint64_t v893 = 0;
              uint64_t v894 = 0;
              uint64_t v895 = *(void *)(v58 + 152);
              v896 = v114[19];
              vDSP_Length v897 = (int)v243;
              uint64_t v898 = 4 * (int)v243;
              v899 = (float *)v57[19];
              do
              {
                vDSP_vsadd((const float *)(v895 + 4 * v894), 1, (const float *)&v896[v893], v899, 1, v897);
                v894 += **(void **)(*a1 + 24);
                v893 += **(void **)(*a2 + 24);
                ++v892;
                v899 = (float *)((char *)v899 + v898);
              }
              while (v892 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1393 = 0;
            v1627 = v114[19];
            uint64_t v1673 = *(void *)(v58 + 152);
            vDSP_Length v1581 = (int)v243;
            v1394 = (float *)v57[19];
            do
            {
              uint64_t v1395 = *(void *)*a1;
              unint64_t v1396 = (unint64_t)(*(void *)(*a1 + 8) - v1395) >> 2;
              uint64_t v1397 = 0;
              uint64_t v1398 = (v1396 - 1);
              if ((int)v1396 - 1 >= 0)
              {
                uint64_t v1399 = *(void *)(*a1 + 24);
                int v1400 = v1393;
                do
                {
                  ldiv_t v1401 = ldiv(v1400, *(int *)(v1395 + 4 * v1398));
                  int v1400 = v1401.quot;
                  v1397 += *(void *)(v1399 + 8 * v1398--) * v1401.rem;
                }
                while (v1398 != -1);
              }
              uint64_t v1402 = *(void *)*a2;
              unint64_t v1403 = (unint64_t)(*(void *)(*a2 + 8) - v1402) >> 2;
              uint64_t v1404 = 0;
              uint64_t v1405 = (v1403 - 1);
              if ((int)v1403 - 1 >= 0)
              {
                uint64_t v1406 = *(void *)(*a2 + 24);
                int v1407 = v1393;
                do
                {
                  ldiv_t v1408 = ldiv(v1407, *(int *)(v1402 + 4 * v1405));
                  int v1407 = v1408.quot;
                  v1404 += *(void *)(v1406 + 8 * v1405--) * v1408.rem;
                }
                while (v1405 != -1);
              }
              vDSP_vsadd((const float *)(v1673 + 4 * (int)v1397), 1, (const float *)&v1627[(int)v1404], v1394, 1, v1581);
              v1394 += v1581;
              v1393 += v1581;
            }
            while (v1393 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v242 == 2)
          {
            int v1046 = *v59;
            if (*v59)
            {
              uint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1652 = *(void *)(v58 + 152);
              v1606 = v114[19];
              v1049 = (float *)v57[19];
              unint64_t v1535 = 0;
              vDSP_Length v1560 = (int)v243;
              uint64_t v1050 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1051 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1652 + 4 * v1048), 1, (const float *)&v1606[v1047], 1, v1049, 1, v1560);
                    uint64_t v58 = *a1;
                    v1052 = *(void **)(*a1 + 24);
                    uint64_t v1053 = v1052[1];
                    v1048 += v1053;
                    uint64_t v114 = (int **)*a2;
                    v1054 = *(int **)(*a2 + 24);
                    uint64_t v1055 = *((void *)v1054 + 1);
                    v1047 += v1055;
                    ++v1051;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1056 = v59[1];
                    v1049 = (float *)((char *)v1049 + v1050);
                  }
                  while (v1051 < v1056);
                  int v1046 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1056 = 0;
                  v1052 = *(void **)(v58 + 24);
                  uint64_t v1053 = v1052[1];
                  v1054 = v114[3];
                  uint64_t v1055 = *((void *)v1054 + 1);
                }
                uint64_t v1048 = *v1052 + v1048 - v1056 * v1053;
                uint64_t v1047 = *(void *)v1054 + v1047 - v1055 * v115[1];
                ++v1535;
              }
              while (v1535 < v1046);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v244 = 0;
              uint64_t v245 = 0;
              uint64_t v246 = 0;
              uint64_t v247 = *(void *)(v58 + 152);
              v248 = v114[19];
              vDSP_Length v249 = (int)v243;
              uint64_t v250 = 4 * (int)v243;
              v251 = (float *)v57[19];
              do
              {
                vDSP_vadd((const float *)(v247 + 4 * v246), 1, (const float *)&v248[v245], 1, v251, 1, v249);
                v246 += **(void **)(*a1 + 24);
                v245 += **(void **)(*a2 + 24);
                ++v244;
                v251 = (float *)((char *)v251 + v250);
              }
              while (v244 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1057 = 0;
            v1607 = v114[19];
            uint64_t v1653 = *(void *)(v58 + 152);
            vDSP_Length v1561 = (int)v243;
            v1058 = (float *)v57[19];
            do
            {
              uint64_t v1059 = *(void *)*a1;
              unint64_t v1060 = (unint64_t)(*(void *)(*a1 + 8) - v1059) >> 2;
              uint64_t v1061 = 0;
              uint64_t v1062 = (v1060 - 1);
              if ((int)v1060 - 1 >= 0)
              {
                uint64_t v1063 = *(void *)(*a1 + 24);
                int v1064 = v1057;
                do
                {
                  ldiv_t v1065 = ldiv(v1064, *(int *)(v1059 + 4 * v1062));
                  int v1064 = v1065.quot;
                  v1061 += *(void *)(v1063 + 8 * v1062--) * v1065.rem;
                }
                while (v1062 != -1);
              }
              uint64_t v1066 = *(void *)*a2;
              unint64_t v1067 = (unint64_t)(*(void *)(*a2 + 8) - v1066) >> 2;
              uint64_t v1068 = 0;
              uint64_t v1069 = (v1067 - 1);
              if ((int)v1067 - 1 >= 0)
              {
                uint64_t v1070 = *(void *)(*a2 + 24);
                int v1071 = v1057;
                do
                {
                  ldiv_t v1072 = ldiv(v1071, *(int *)(v1066 + 4 * v1069));
                  int v1071 = v1072.quot;
                  v1068 += *(void *)(v1070 + 8 * v1069--) * v1072.rem;
                }
                while (v1069 != -1);
              }
              vDSP_vadd((const float *)(v1653 + 4 * (int)v1061), 1, (const float *)&v1607[(int)v1068], 1, v1058, 1, v1561);
              v1058 += v1561;
              v1057 += v1561;
            }
            while (v1057 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_365:
          switch(v239)
          {
            case 1uLL:
              uint64_t v252 = v57[6];
              if (v252)
              {
                unint64_t v253 = *(_DWORD **)(v58 + 152);
                uint64_t v254 = v114[19];
                v255 = (_DWORD *)v57[19];
                uint64_t v256 = 4 * *(void *)v114[3];
                uint64_t v257 = 4 * **(void **)(v58 + 24);
                do
                {
                  *v255++ = *v254 + *v253;
                  uint64_t v254 = (int *)((char *)v254 + v256);
                  unint64_t v253 = (_DWORD *)((char *)v253 + v257);
                  --v252;
                }
                while (v252);
              }
              break;
            case 2uLL:
              int v598 = *v59;
              if (*v59)
              {
                unint64_t v599 = 0;
                uint64_t v600 = 0;
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = *(void *)(v58 + 152);
                v604 = v114[19];
                uint64_t v605 = v57[19];
                v606 = *(uint64_t **)(v58 + 24);
                uint64_t v607 = *v606;
                uint64_t v608 = v606[1];
                v609 = v114[3];
                uint64_t v611 = *(void *)v609;
                uint64_t v610 = *((void *)v609 + 1);
                int v612 = v59[1];
                do
                {
                  if (v612)
                  {
                    for (unint64_t m = 0; m < v612; ++m)
                    {
                      *(_DWORD *)(v605 + 4 * v600 + 4 * m) = v604[v601] + *(_DWORD *)(v603 + 4 * v602);
                      v602 += v608;
                      v601 += v610;
                      int v612 = v59[1];
                    }
                    uint64_t v614 = v612;
                    int v598 = *v59;
                    v600 += m;
                  }
                  else
                  {
                    uint64_t v614 = 0;
                  }
                  uint64_t v602 = v602 + v607 - v614 * v608;
                  uint64_t v601 = v601 + v611 - v610 * v115[1];
                  ++v599;
                }
                while (v599 < v598);
              }
              break;
            case 3uLL:
              int v615 = *v59;
              if (*v59)
              {
                unint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = *(void *)(v58 + 152);
                v621 = v114[19];
                uint64_t v622 = v57[19];
                v623 = *(uint64_t **)(v58 + 24);
                uint64_t v624 = *v623;
                uint64_t v625 = v623[1];
                v626 = v114[3];
                uint64_t v627 = *(void *)v626;
                uint64_t v628 = *((void *)v626 + 1);
                int v629 = v59[1];
                int v630 = v629;
                do
                {
                  if (v630)
                  {
                    unint64_t v631 = 0;
                    uint64_t v632 = v623[2];
                    uint64_t v633 = *((void *)v626 + 2);
                    int v634 = v59[2];
                    do
                    {
                      if (v634)
                      {
                        for (unint64_t n = 0; n < v634; ++n)
                        {
                          *(_DWORD *)(v622 + 4 * v617 + 4 * n) = v621[v618] + *(_DWORD *)(v620 + 4 * v619);
                          v619 += v632;
                          v618 += v633;
                          int v634 = v59[2];
                        }
                        uint64_t v636 = v634;
                        int v629 = v59[1];
                        v617 += n;
                      }
                      else
                      {
                        uint64_t v636 = 0;
                      }
                      uint64_t v619 = v619 + v625 - v636 * v632;
                      uint64_t v618 = v618 + v628 - v633 * v115[2];
                      ++v631;
                    }
                    while (v631 < v629);
                    uint64_t v637 = v629;
                    int v615 = *v59;
                    int v630 = v629;
                  }
                  else
                  {
                    uint64_t v637 = 0;
                  }
                  uint64_t v619 = v619 + v624 - v637 * v625;
                  uint64_t v618 = v618 + v627 - v628 * v115[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 4uLL:
              int v638 = *v59;
              if (*v59)
              {
                unint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = 0;
                uint64_t v642 = 0;
                uint64_t v643 = *(void *)(v58 + 152);
                v644 = v114[19];
                uint64_t v645 = v57[19];
                v646 = *(uint64_t **)(v58 + 24);
                uint64_t v647 = *v646;
                uint64_t v648 = v646[1];
                v649 = v114[3];
                uint64_t v650 = *(void *)v649;
                uint64_t v651 = *((void *)v649 + 1);
                int v652 = v59[1];
                int v653 = v652;
                do
                {
                  if (v653)
                  {
                    unint64_t v654 = 0;
                    uint64_t v655 = v646[2];
                    uint64_t v656 = *((void *)v649 + 2);
                    int v657 = v59[2];
                    int v658 = v657;
                    do
                    {
                      if (v658)
                      {
                        unint64_t v659 = 0;
                        uint64_t v660 = v646[3];
                        uint64_t v661 = *((void *)v649 + 3);
                        int v662 = v59[3];
                        do
                        {
                          if (v662)
                          {
                            for (iunint64_t i = 0; ii < v662; ++ii)
                            {
                              *(_DWORD *)(v645 + 4 * v640 + 4 * ii) = v644[v641] + *(_DWORD *)(v643 + 4 * v642);
                              v642 += v660;
                              v641 += v661;
                              int v662 = v59[3];
                            }
                            uint64_t v664 = v662;
                            int v657 = v59[2];
                            v640 += ii;
                          }
                          else
                          {
                            uint64_t v664 = 0;
                          }
                          uint64_t v642 = v642 + v655 - v664 * v660;
                          uint64_t v641 = v641 + v656 - v661 * v115[3];
                          ++v659;
                        }
                        while (v659 < v657);
                        uint64_t v665 = v657;
                        int v652 = v59[1];
                        int v658 = v657;
                      }
                      else
                      {
                        uint64_t v665 = 0;
                      }
                      uint64_t v642 = v642 + v648 - v665 * v655;
                      uint64_t v641 = v641 + v651 - v656 * v115[2];
                      ++v654;
                    }
                    while (v654 < v652);
                    uint64_t v666 = v652;
                    int v638 = *v59;
                    int v653 = v652;
                  }
                  else
                  {
                    uint64_t v666 = 0;
                  }
                  uint64_t v642 = v642 + v647 - v666 * v648;
                  uint64_t v641 = v641 + v650 - v651 * v115[1];
                  ++v639;
                }
                while (v639 < v638);
              }
              break;
            default:
              uint64_t v1595 = v57[6];
              uint64_t v1641 = v61;
              if (v1595)
              {
                uint64_t v587 = 0;
                v1529 = v114[19];
                uint64_t v1549 = *(void *)(v58 + 152);
                uint64_t v1522 = v57[19];
                do
                {
                  uint64_t v588 = v1641;
                  if ((v1641 & 0x80000000) != 0)
                  {
                    LODWORD(v589) = 0;
                  }
                  else
                  {
                    uint64_t v589 = 0;
                    uint64_t v590 = *(void *)(v58 + 24);
                    int v591 = v587;
                    do
                    {
                      ldiv_t v592 = ldiv(v591, v59[v588]);
                      int v591 = v592.quot;
                      v589 += *(void *)(v590 + 8 * v588--) * v592.rem;
                    }
                    while (v588 != -1);
                  }
                  uint64_t v593 = 0;
                  if ((v117 & 0x80000000) == 0)
                  {
                    v594 = v114[3];
                    uint64_t v595 = v117;
                    int v596 = v587;
                    do
                    {
                      ldiv_t v597 = ldiv(v596, v115[v595]);
                      int v596 = v597.quot;
                      v593 += *(void *)&v594[2 * v595--] * v597.rem;
                    }
                    while (v595 != -1);
                  }
                  *(_DWORD *)(v1522 + 4 * v587++) = v1529[(int)v593] + *(_DWORD *)(v1549 + 4 * (int)v589);
                }
                while (v587 != v1595);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v12)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) + **(void **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v66 = *(void **)a3;
          uint64_t v67 = *a1;
          int64_t v68 = *(int **)*a1;
          uint64_t v69 = (*(void *)(*a1 + 8) - (void)v68) >> 2;
          uint64_t v70 = (v69 - 1);
          if ((int)v70 >= -1) {
            int v71 = -1;
          }
          else {
            int v71 = v69 - 1;
          }
          int v72 = v71 + 1;
          int v73 = v69 + 1;
          break;
      }
      while (1)
      {
        unsigned int v74 = v73 - 2;
        if (v73 - 2 < 0) {
          break;
        }
        --v73;
        if (*(void *)(*(void *)(v67 + 24) + 8 * v74) != *(void *)(v66[3] + 8 * v74)) {
          goto LABEL_110;
        }
      }
      int v73 = v72;
LABEL_110:
      unint64_t v122 = (int **)*a2;
      long long v123 = *(int **)*a2;
      uint64_t v124 = (*(void *)(*a2 + 8) - (void)v123) >> 2;
      uint64_t v125 = (v124 - 1);
      if ((int)v125 >= -1) {
        int v126 = -1;
      }
      else {
        int v126 = v124 - 1;
      }
      int v127 = v126 + 1;
      int v128 = v124 + 1;
      while (1)
      {
        unsigned int v129 = v128 - 2;
        if (v128 - 2 < 0) {
          break;
        }
        --v128;
        if (*(void *)&v122[3][2 * v129] != *(void *)(v66[3] + 8 * v129)) {
          goto LABEL_151;
        }
      }
      int v128 = v127;
LABEL_151:
      int v148 = v69 + 1;
      while (1)
      {
        unsigned int v149 = v148 - 2;
        if (v148 - 2 < 0) {
          break;
        }
        --v148;
        if (*(void *)(*(void *)(v67 + 24) + 8 * v149)) {
          goto LABEL_186;
        }
      }
      int v148 = v72;
LABEL_186:
      int v162 = v124 + 1;
      while (1)
      {
        int v163 = v162 - 2;
        if (v162 - 2 < 0) {
          break;
        }
        --v162;
        if (*(void *)&v122[3][2 * v163]) {
          goto LABEL_371;
        }
      }
      int v162 = v127;
LABEL_371:
      unint64_t v258 = (uint64_t)(v66[1] - *v66) >> 2;
      if (v73 <= v128) {
        int v259 = v128;
      }
      else {
        int v259 = v73;
      }
      if (v73 <= v162) {
        int v73 = v162;
      }
      if (v148 > v128) {
        int v128 = v148;
      }
      if (v258 > v128) {
        int v260 = 1;
      }
      else {
        int v260 = 4;
      }
      if (v258 <= v128) {
        int v128 = (uint64_t)(v66[1] - *v66) >> 2;
      }
      if (v258 <= v73) {
        int v73 = v128;
      }
      else {
        int v260 = 2;
      }
      if (v258 <= v259)
      {
        int v261 = v73;
      }
      else
      {
        int v260 = 3;
        int v261 = v259;
      }
      if (!v261) {
        goto LABEL_400;
      }
      unint64_t v262 = *(void *)(v66[3] + 8 * (v261 - 1));
      if (v262 < 0x10) {
        goto LABEL_400;
      }
      switch(v260)
      {
        case 1:
          if (v261 == 2)
          {
            int v1409 = *v68;
            if (*v68)
            {
              uint64_t v1410 = 0;
              uint64_t v1411 = 0;
              uint64_t v1674 = *(void *)(v67 + 152);
              v1628 = v122[19];
              v1412 = (float *)v66[19];
              unint64_t v1542 = 0;
              vDSP_Length v1582 = (int)v262;
              uint64_t v1413 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1414 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1628[2 * v1410], 1, (const float *)(v1674 + 8 * v1411), v1412, 1, v1582);
                    uint64_t v67 = *a1;
                    v1415 = *(void **)(*a1 + 24);
                    uint64_t v1416 = v1415[1];
                    v1411 += v1416;
                    unint64_t v122 = (int **)*a2;
                    v1417 = *(int **)(*a2 + 24);
                    uint64_t v1418 = *((void *)v1417 + 1);
                    v1410 += v1418;
                    ++v1414;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1419 = v68[1];
                    v1412 = (float *)((char *)v1412 + v1413);
                  }
                  while (v1414 < v1419);
                  int v1409 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1419 = 0;
                  v1415 = *(void **)(v67 + 24);
                  uint64_t v1416 = v1415[1];
                  v1417 = v122[3];
                  uint64_t v1418 = *((void *)v1417 + 1);
                }
                uint64_t v1411 = *v1415 + v1411 - v1419 * v1416;
                uint64_t v1410 = *(void *)v1417 + v1410 - v1418 * v123[1];
                ++v1542;
              }
              while (v1542 < v1409);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v900 = 0;
              uint64_t v901 = 0;
              uint64_t v902 = 0;
              uint64_t v903 = *(void *)(v67 + 152);
              v904 = v122[19];
              vDSP_Length v905 = (int)v262;
              uint64_t v906 = 8 * (int)v262;
              v907 = (float *)v66[19];
              do
              {
                vDSP_vsadd((const float *)&v904[2 * v901], 1, (const float *)(v903 + 8 * v902), v907, 1, v905);
                v902 += **(void **)(*a1 + 24);
                v901 += **(void **)(*a2 + 24);
                ++v900;
                v907 = (float *)((char *)v907 + v906);
              }
              while (v900 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1420 = 0;
            v1629 = v122[19];
            uint64_t v1675 = *(void *)(v67 + 152);
            vDSP_Length v1583 = (int)v262;
            v1421 = (float *)v66[19];
            do
            {
              uint64_t v1422 = *(void *)*a1;
              unint64_t v1423 = (unint64_t)(*(void *)(*a1 + 8) - v1422) >> 2;
              uint64_t v1424 = 0;
              uint64_t v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                uint64_t v1426 = *(void *)(*a1 + 24);
                int v1427 = v1420;
                do
                {
                  ldiv_t v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  int v1427 = v1428.quot;
                  v1424 += *(void *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              uint64_t v1429 = *(void *)*a2;
              unint64_t v1430 = (unint64_t)(*(void *)(*a2 + 8) - v1429) >> 2;
              uint64_t v1431 = 0;
              uint64_t v1432 = (v1430 - 1);
              if ((int)v1430 - 1 >= 0)
              {
                uint64_t v1433 = *(void *)(*a2 + 24);
                int v1434 = v1420;
                do
                {
                  ldiv_t v1435 = ldiv(v1434, *(int *)(v1429 + 4 * v1432));
                  int v1434 = v1435.quot;
                  v1431 += *(void *)(v1433 + 8 * v1432--) * v1435.rem;
                }
                while (v1432 != -1);
              }
              vDSP_vsadd((const float *)&v1629[2 * (int)v1431], 1, (const float *)(v1675 + 8 * (int)v1424), v1421, 1, v1583);
              v1421 += 2 * v1583;
              v1420 += v1583;
            }
            while (v1420 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v261 == 2)
          {
            int v1436 = *v68;
            if (*v68)
            {
              uint64_t v1437 = 0;
              uint64_t v1438 = 0;
              uint64_t v1676 = *(void *)(v67 + 152);
              v1630 = v122[19];
              v1439 = (float *)v66[19];
              unint64_t v1543 = 0;
              vDSP_Length v1584 = (int)v262;
              uint64_t v1440 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1441 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1676 + 8 * v1438), 1, (const float *)&v1630[2 * v1437], v1439, 1, v1584);
                    uint64_t v67 = *a1;
                    v1442 = *(void **)(*a1 + 24);
                    uint64_t v1443 = v1442[1];
                    v1438 += v1443;
                    unint64_t v122 = (int **)*a2;
                    v1444 = *(int **)(*a2 + 24);
                    uint64_t v1445 = *((void *)v1444 + 1);
                    v1437 += v1445;
                    ++v1441;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1446 = v68[1];
                    v1439 = (float *)((char *)v1439 + v1440);
                  }
                  while (v1441 < v1446);
                  int v1436 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1446 = 0;
                  v1442 = *(void **)(v67 + 24);
                  uint64_t v1443 = v1442[1];
                  v1444 = v122[3];
                  uint64_t v1445 = *((void *)v1444 + 1);
                }
                uint64_t v1438 = *v1442 + v1438 - v1446 * v1443;
                uint64_t v1437 = *(void *)v1444 + v1437 - v1445 * v123[1];
                ++v1543;
              }
              while (v1543 < v1436);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v908 = 0;
              uint64_t v909 = 0;
              uint64_t v910 = 0;
              uint64_t v911 = *(void *)(v67 + 152);
              v912 = v122[19];
              vDSP_Length v913 = (int)v262;
              uint64_t v914 = 8 * (int)v262;
              v915 = (float *)v66[19];
              do
              {
                vDSP_vsadd((const float *)(v911 + 8 * v910), 1, (const float *)&v912[2 * v909], v915, 1, v913);
                v910 += **(void **)(*a1 + 24);
                v909 += **(void **)(*a2 + 24);
                ++v908;
                v915 = (float *)((char *)v915 + v914);
              }
              while (v908 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1447 = 0;
            v1631 = v122[19];
            uint64_t v1677 = *(void *)(v67 + 152);
            vDSP_Length v1585 = (int)v262;
            v1448 = (float *)v66[19];
            do
            {
              uint64_t v1449 = *(void *)*a1;
              unint64_t v1450 = (unint64_t)(*(void *)(*a1 + 8) - v1449) >> 2;
              uint64_t v1451 = 0;
              uint64_t v1452 = (v1450 - 1);
              if ((int)v1450 - 1 >= 0)
              {
                uint64_t v1453 = *(void *)(*a1 + 24);
                int v1454 = v1447;
                do
                {
                  ldiv_t v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                  int v1454 = v1455.quot;
                  v1451 += *(void *)(v1453 + 8 * v1452--) * v1455.rem;
                }
                while (v1452 != -1);
              }
              uint64_t v1456 = *(void *)*a2;
              unint64_t v1457 = (unint64_t)(*(void *)(*a2 + 8) - v1456) >> 2;
              uint64_t v1458 = 0;
              uint64_t v1459 = (v1457 - 1);
              if ((int)v1457 - 1 >= 0)
              {
                uint64_t v1460 = *(void *)(*a2 + 24);
                int v1461 = v1447;
                do
                {
                  ldiv_t v1462 = ldiv(v1461, *(int *)(v1456 + 4 * v1459));
                  int v1461 = v1462.quot;
                  v1458 += *(void *)(v1460 + 8 * v1459--) * v1462.rem;
                }
                while (v1459 != -1);
              }
              vDSP_vsadd((const float *)(v1677 + 8 * (int)v1451), 1, (const float *)&v1631[2 * (int)v1458], v1448, 1, v1585);
              v1448 += 2 * v1585;
              v1447 += v1585;
            }
            while (v1447 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v261 == 2)
          {
            int v1073 = *v68;
            if (*v68)
            {
              uint64_t v1074 = 0;
              uint64_t v1075 = 0;
              uint64_t v1654 = *(void *)(v67 + 152);
              v1608 = v122[19];
              v1076 = (float *)v66[19];
              unint64_t v1536 = 0;
              vDSP_Length v1562 = (int)v262;
              uint64_t v1077 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1078 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1654 + 8 * v1075), 1, (const float *)&v1608[2 * v1074], 1, v1076, 1, v1562);
                    uint64_t v67 = *a1;
                    v1079 = *(void **)(*a1 + 24);
                    uint64_t v1080 = v1079[1];
                    v1075 += v1080;
                    unint64_t v122 = (int **)*a2;
                    v1081 = *(int **)(*a2 + 24);
                    uint64_t v1082 = *((void *)v1081 + 1);
                    v1074 += v1082;
                    ++v1078;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1083 = v68[1];
                    v1076 = (float *)((char *)v1076 + v1077);
                  }
                  while (v1078 < v1083);
                  int v1073 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1083 = 0;
                  v1079 = *(void **)(v67 + 24);
                  uint64_t v1080 = v1079[1];
                  v1081 = v122[3];
                  uint64_t v1082 = *((void *)v1081 + 1);
                }
                uint64_t v1075 = *v1079 + v1075 - v1083 * v1080;
                uint64_t v1074 = *(void *)v1081 + v1074 - v1082 * v123[1];
                ++v1536;
              }
              while (v1536 < v1073);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v263 = 0;
              uint64_t v264 = 0;
              uint64_t v265 = 0;
              uint64_t v266 = *(void *)(v67 + 152);
              v267 = v122[19];
              vDSP_Length v268 = (int)v262;
              uint64_t v269 = 8 * (int)v262;
              v270 = (float *)v66[19];
              do
              {
                vDSP_vadd((const float *)(v266 + 8 * v265), 1, (const float *)&v267[2 * v264], 1, v270, 1, v268);
                v265 += **(void **)(*a1 + 24);
                v264 += **(void **)(*a2 + 24);
                ++v263;
                v270 = (float *)((char *)v270 + v269);
              }
              while (v263 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1084 = 0;
            v1609 = v122[19];
            uint64_t v1655 = *(void *)(v67 + 152);
            vDSP_Length v1563 = (int)v262;
            v1085 = (float *)v66[19];
            do
            {
              uint64_t v1086 = *(void *)*a1;
              unint64_t v1087 = (unint64_t)(*(void *)(*a1 + 8) - v1086) >> 2;
              uint64_t v1088 = 0;
              uint64_t v1089 = (v1087 - 1);
              if ((int)v1087 - 1 >= 0)
              {
                uint64_t v1090 = *(void *)(*a1 + 24);
                int v1091 = v1084;
                do
                {
                  ldiv_t v1092 = ldiv(v1091, *(int *)(v1086 + 4 * v1089));
                  int v1091 = v1092.quot;
                  v1088 += *(void *)(v1090 + 8 * v1089--) * v1092.rem;
                }
                while (v1089 != -1);
              }
              uint64_t v1093 = *(void *)*a2;
              unint64_t v1094 = (unint64_t)(*(void *)(*a2 + 8) - v1093) >> 2;
              uint64_t v1095 = 0;
              uint64_t v1096 = (v1094 - 1);
              if ((int)v1094 - 1 >= 0)
              {
                uint64_t v1097 = *(void *)(*a2 + 24);
                int v1098 = v1084;
                do
                {
                  ldiv_t v1099 = ldiv(v1098, *(int *)(v1093 + 4 * v1096));
                  int v1098 = v1099.quot;
                  v1095 += *(void *)(v1097 + 8 * v1096--) * v1099.rem;
                }
                while (v1096 != -1);
              }
              vDSP_vadd((const float *)(v1655 + 8 * (int)v1088), 1, (const float *)&v1609[2 * (int)v1095], 1, v1085, 1, v1563);
              v1085 += 2 * v1563;
              v1084 += v1563;
            }
            while (v1084 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_400:
          switch(v258)
          {
            case 1uLL:
              uint64_t v271 = v66[6];
              if (v271)
              {
                int64_t v272 = *(void **)(v67 + 152);
                v273 = v122[19];
                v274 = (void *)v66[19];
                uint64_t v275 = 8 * *(void *)v122[3];
                uint64_t v276 = 8 * **(void **)(v67 + 24);
                do
                {
                  *v274++ = *(void *)v273 + *v272;
                  v273 = (int *)((char *)v273 + v275);
                  int64_t v272 = (void *)((char *)v272 + v276);
                  --v271;
                }
                while (v271);
              }
              break;
            case 2uLL:
              uint64_t v678 = *v68;
              if (v678)
              {
                uint64_t v679 = 0;
                uint64_t v680 = 0;
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = *(void *)(v67 + 152);
                v684 = v122[19];
                uint64_t v685 = v66[19];
                unint64_t v686 = v68[1];
                v687 = *(uint64_t **)(v67 + 24);
                uint64_t v688 = *v687;
                uint64_t v689 = v687[1];
                v690 = v122[3];
                uint64_t v691 = *(void *)v690;
                uint64_t v692 = *((void *)v690 + 1);
                uint64_t v693 = v691 - v692 * v123[1];
                if (v686 <= 1) {
                  uint64_t v694 = 1;
                }
                else {
                  uint64_t v694 = v68[1];
                }
                uint64_t v695 = v688 - v689 * v686;
                do
                {
                  if (v686)
                  {
                    uint64_t v696 = v680 + v694;
                    v697 = (void *)(v685 + 8 * v680);
                    uint64_t v698 = v694;
                    do
                    {
                      *v697++ = *(void *)&v684[2 * v681] + *(void *)(v683 + 8 * v682);
                      v682 += v689;
                      v681 += v692;
                      --v698;
                    }
                    while (v698);
                    uint64_t v680 = v696;
                  }
                  v682 += v695;
                  v681 += v693;
                  ++v679;
                }
                while (v679 != v678);
              }
              break;
            case 3uLL:
              uint64_t v699 = *v68;
              if (v699)
              {
                uint64_t v700 = 0;
                uint64_t v701 = 0;
                uint64_t v702 = 0;
                uint64_t v703 = 0;
                uint64_t v704 = *(void *)(v67 + 152);
                v705 = v122[19];
                uint64_t v706 = v66[19];
                unint64_t v707 = v68[1];
                v708 = *(void **)(v67 + 24);
                uint64_t v709 = v708[1];
                v710 = v122[3];
                uint64_t v711 = *((void *)v710 + 1);
                uint64_t v712 = *(void *)v710 - v711 * v123[1];
                if (v707 <= 1) {
                  uint64_t v713 = 1;
                }
                else {
                  uint64_t v713 = v68[1];
                }
                unint64_t v714 = *v708 - v709 * v707;
                do
                {
                  if (v707)
                  {
                    uint64_t v715 = 0;
                    unint64_t v716 = v68[2];
                    uint64_t v717 = v708[2];
                    uint64_t v718 = *((void *)v710 + 2);
                    if (v716 <= 1) {
                      uint64_t v719 = 1;
                    }
                    else {
                      uint64_t v719 = v68[2];
                    }
                    uint64_t v720 = v711 - v718 * v123[2];
                    do
                    {
                      uint64_t v721 = v719;
                      if (v716)
                      {
                        do
                        {
                          *(void *)(v706 + 8 * v701++) = *(void *)&v705[2 * v702] + *(void *)(v704 + 8 * v703);
                          v703 += v717;
                          v702 += v718;
                          --v721;
                        }
                        while (v721);
                      }
                      v703 += v709 - v717 * v716;
                      v702 += v720;
                      ++v715;
                    }
                    while (v715 != v713);
                  }
                  v703 += v714;
                  v702 += v712;
                  ++v700;
                }
                while (v700 != v699);
              }
              break;
            case 4uLL:
              uint64_t v1643 = *v68;
              if (v1643)
              {
                uint64_t v722 = 0;
                uint64_t v723 = 0;
                uint64_t v724 = 0;
                uint64_t v725 = 0;
                uint64_t v726 = *(void *)(v67 + 152);
                v727 = v122[19];
                uint64_t v728 = v66[19];
                unint64_t v729 = v68[1];
                v730 = *(void **)(v67 + 24);
                v731 = v122[3];
                uint64_t v1518 = *((void *)v731 + 1);
                uint64_t v1524 = v730[1];
                uint64_t v1551 = *(void *)v731 - v1518 * v123[1];
                int v1597 = v68[1];
                if (v729 <= 1) {
                  uint64_t v732 = 1;
                }
                else {
                  uint64_t v732 = v68[1];
                }
                unint64_t v1531 = *v730 - v730[1] * v729;
                do
                {
                  if (v1597)
                  {
                    uint64_t v733 = 0;
                    unint64_t v734 = v68[2];
                    uint64_t v735 = v730[2];
                    uint64_t v736 = *((void *)v731 + 2);
                    if (v734 <= 1) {
                      uint64_t v737 = 1;
                    }
                    else {
                      uint64_t v737 = v68[2];
                    }
                    uint64_t v738 = v1518 - v736 * v123[2];
                    do
                    {
                      if (v734)
                      {
                        uint64_t v739 = 0;
                        unint64_t v740 = v68[3];
                        uint64_t v741 = v730[3];
                        uint64_t v742 = *((void *)v731 + 3);
                        if (v740 <= 1) {
                          uint64_t v743 = 1;
                        }
                        else {
                          uint64_t v743 = v68[3];
                        }
                        uint64_t v744 = v736 - v742 * v123[3];
                        do
                        {
                          uint64_t v745 = v743;
                          if (v740)
                          {
                            do
                            {
                              *(void *)(v728 + 8 * v723++) = *(void *)&v727[2 * v724] + *(void *)(v726 + 8 * v725);
                              v725 += v741;
                              v724 += v742;
                              --v745;
                            }
                            while (v745);
                          }
                          v725 += v735 - v741 * v740;
                          v724 += v744;
                          ++v739;
                        }
                        while (v739 != v737);
                      }
                      v725 += v1524 - v735 * v734;
                      v724 += v738;
                      ++v733;
                    }
                    while (v733 != v732);
                  }
                  v725 += v1531;
                  v724 += v1551;
                  ++v722;
                }
                while (v722 != v1643);
              }
              break;
            default:
              uint64_t v1596 = v66[6];
              uint64_t v1642 = v70;
              if (v1596)
              {
                uint64_t v667 = 0;
                v1530 = v122[19];
                uint64_t v1550 = *(void *)(v67 + 152);
                uint64_t v1523 = v66[19];
                do
                {
                  uint64_t v668 = v1642;
                  if ((v1642 & 0x80000000) != 0)
                  {
                    LODWORD(v669) = 0;
                  }
                  else
                  {
                    uint64_t v669 = 0;
                    uint64_t v670 = *(void *)(v67 + 24);
                    int v671 = v667;
                    do
                    {
                      ldiv_t v672 = ldiv(v671, v68[v668]);
                      int v671 = v672.quot;
                      v669 += *(void *)(v670 + 8 * v668--) * v672.rem;
                    }
                    while (v668 != -1);
                  }
                  uint64_t v673 = 0;
                  if ((v125 & 0x80000000) == 0)
                  {
                    v674 = v122[3];
                    uint64_t v675 = v125;
                    int v676 = v667;
                    do
                    {
                      ldiv_t v677 = ldiv(v676, v123[v675]);
                      int v676 = v677.quot;
                      v673 += *(void *)&v674[2 * v675--] * v677.rem;
                    }
                    while (v675 != -1);
                  }
                  *(void *)(v1523 + 8 * v667++) = *(void *)&v1530[2 * (int)v673]
                                                  + *(void *)(v1550 + 8 * (int)v669);
                }
                while (v667 != v1596);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v13)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_16:
          uint64_t v14 = *(const float **)(*a1 + 152);
          uint64_t v15 = *a2;
          goto LABEL_18;
        case 2:
LABEL_17:
          uint64_t v15 = *a1;
          uint64_t v14 = *(const float **)(*a2 + 152);
LABEL_18:
          uint64_t v16 = *(float **)(*(void *)a3 + 152);
          uint64_t v17 = *(const float **)(v15 + 152);
          vDSP_Length v18 = *(void *)(v15 + 160);
          vDSP_vsadd(v17, 1, v14, v16, 1, v18);
          return;
        case 3:
LABEL_21:
          uint64_t v19 = *(const float **)(*a1 + 152);
          int v20 = *(const float **)(*a2 + 152);
          uint64_t v21 = *(float **)(*(void *)a3 + 152);
          vDSP_Length v22 = *(void *)(*(void *)a3 + 48);
          vDSP_vadd(v19, 1, v20, 1, v21, 1, v22);
          return;
        default:
          int64_t v75 = *(void **)a3;
          uint64_t v76 = *a1;
          uint64_t v77 = *(int **)*a1;
          uint64_t v78 = (*(void *)(*a1 + 8) - (void)v77) >> 2;
          uint64_t v79 = (v78 - 1);
          if ((int)v79 >= -1) {
            int v80 = -1;
          }
          else {
            int v80 = v78 - 1;
          }
          int v81 = v80 + 1;
          int v82 = v78 + 1;
          break;
      }
      while (1)
      {
        unsigned int v83 = v82 - 2;
        if (v82 - 2 < 0) {
          break;
        }
        --v82;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v83) != *(void *)(v75[3] + 8 * v83)) {
          goto LABEL_118;
        }
      }
      int v82 = v81;
LABEL_118:
      long long v130 = (int **)*a2;
      char v131 = *(int **)*a2;
      uint64_t v132 = (*(void *)(*a2 + 8) - (void)v131) >> 2;
      uint64_t v133 = (v132 - 1);
      if ((int)v133 >= -1) {
        int v134 = -1;
      }
      else {
        int v134 = v132 - 1;
      }
      int v135 = v134 + 1;
      int v136 = v132 + 1;
      while (1)
      {
        unsigned int v137 = v136 - 2;
        if (v136 - 2 < 0) {
          break;
        }
        --v136;
        if (*(void *)&v130[3][2 * v137] != *(void *)(v75[3] + 8 * v137)) {
          goto LABEL_156;
        }
      }
      int v136 = v135;
LABEL_156:
      int v150 = v78 + 1;
      while (1)
      {
        unsigned int v151 = v150 - 2;
        if (v150 - 2 < 0) {
          break;
        }
        --v150;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v151)) {
          goto LABEL_191;
        }
      }
      int v150 = v81;
LABEL_191:
      int v164 = v132 + 1;
      while (1)
      {
        int v165 = v164 - 2;
        if (v164 - 2 < 0) {
          break;
        }
        --v164;
        if (*(void *)&v130[3][2 * v165]) {
          goto LABEL_406;
        }
      }
      int v164 = v135;
LABEL_406:
      unint64_t v277 = (uint64_t)(v75[1] - *v75) >> 2;
      if (v82 <= v136) {
        int v278 = v136;
      }
      else {
        int v278 = v82;
      }
      if (v82 <= v164) {
        int v82 = v164;
      }
      if (v150 > v136) {
        int v136 = v150;
      }
      if (v277 > v136) {
        int v279 = 1;
      }
      else {
        int v279 = 4;
      }
      if (v277 <= v136) {
        int v136 = (uint64_t)(v75[1] - *v75) >> 2;
      }
      if (v277 <= v82) {
        int v82 = v136;
      }
      else {
        int v279 = 2;
      }
      if (v277 <= v278)
      {
        int v280 = v82;
      }
      else
      {
        int v279 = 3;
        int v280 = v278;
      }
      if (!v280) {
        goto LABEL_435;
      }
      unint64_t v281 = *(void *)(v75[3] + 8 * (v280 - 1));
      if (v281 < 0x10) {
        goto LABEL_435;
      }
      switch(v279)
      {
        case 1:
          if (v280 == 2)
          {
            int v1463 = *v77;
            if (*v77)
            {
              uint64_t v1464 = 0;
              uint64_t v1465 = 0;
              uint64_t v1678 = *(void *)(v76 + 152);
              v1632 = v130[19];
              v1466 = (float *)v75[19];
              unint64_t v1544 = 0;
              vDSP_Length v1586 = (int)v281;
              uint64_t v1467 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1468 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)&v1632[v1464], 1, (const float *)(v1678 + 4 * v1465), v1466, 1, v1586);
                    uint64_t v76 = *a1;
                    v1469 = *(void **)(*a1 + 24);
                    uint64_t v1470 = v1469[1];
                    v1465 += v1470;
                    long long v130 = (int **)*a2;
                    v1471 = *(int **)(*a2 + 24);
                    uint64_t v1472 = *((void *)v1471 + 1);
                    v1464 += v1472;
                    ++v1468;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1473 = v77[1];
                    v1466 = (float *)((char *)v1466 + v1467);
                  }
                  while (v1468 < v1473);
                  int v1463 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1473 = 0;
                  v1469 = *(void **)(v76 + 24);
                  uint64_t v1470 = v1469[1];
                  v1471 = v130[3];
                  uint64_t v1472 = *((void *)v1471 + 1);
                }
                uint64_t v1465 = *v1469 + v1465 - v1473 * v1470;
                uint64_t v1464 = *(void *)v1471 + v1464 - v1472 * v131[1];
                ++v1544;
              }
              while (v1544 < v1463);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v916 = 0;
              uint64_t v917 = 0;
              uint64_t v918 = 0;
              uint64_t v919 = *(void *)(v76 + 152);
              v920 = v130[19];
              vDSP_Length v921 = (int)v281;
              uint64_t v922 = 4 * (int)v281;
              v923 = (float *)v75[19];
              do
              {
                vDSP_vsadd((const float *)&v920[v917], 1, (const float *)(v919 + 4 * v918), v923, 1, v921);
                v918 += **(void **)(*a1 + 24);
                v917 += **(void **)(*a2 + 24);
                ++v916;
                v923 = (float *)((char *)v923 + v922);
              }
              while (v916 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1474 = 0;
            v1633 = v130[19];
            uint64_t v1679 = *(void *)(v76 + 152);
            vDSP_Length v1587 = (int)v281;
            v1475 = (float *)v75[19];
            do
            {
              uint64_t v1476 = *(void *)*a1;
              unint64_t v1477 = (unint64_t)(*(void *)(*a1 + 8) - v1476) >> 2;
              uint64_t v1478 = 0;
              uint64_t v1479 = (v1477 - 1);
              if ((int)v1477 - 1 >= 0)
              {
                uint64_t v1480 = *(void *)(*a1 + 24);
                int v1481 = v1474;
                do
                {
                  ldiv_t v1482 = ldiv(v1481, *(int *)(v1476 + 4 * v1479));
                  int v1481 = v1482.quot;
                  v1478 += *(void *)(v1480 + 8 * v1479--) * v1482.rem;
                }
                while (v1479 != -1);
              }
              uint64_t v1483 = *(void *)*a2;
              unint64_t v1484 = (unint64_t)(*(void *)(*a2 + 8) - v1483) >> 2;
              uint64_t v1485 = 0;
              uint64_t v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                uint64_t v1487 = *(void *)(*a2 + 24);
                int v1488 = v1474;
                do
                {
                  ldiv_t v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  int v1488 = v1489.quot;
                  v1485 += *(void *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              vDSP_vsadd((const float *)&v1633[(int)v1485], 1, (const float *)(v1679 + 4 * (int)v1478), v1475, 1, v1587);
              v1475 += v1587;
              v1474 += v1587;
            }
            while (v1474 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v280 == 2)
          {
            int v1490 = *v77;
            if (*v77)
            {
              uint64_t v1491 = 0;
              uint64_t v1492 = 0;
              uint64_t v1680 = *(void *)(v76 + 152);
              v1634 = v130[19];
              v1493 = (float *)v75[19];
              unint64_t v1545 = 0;
              vDSP_Length v1588 = (int)v281;
              uint64_t v1494 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1495 = 0;
                  do
                  {
                    vDSP_vsadd((const float *)(v1680 + 4 * v1492), 1, (const float *)&v1634[v1491], v1493, 1, v1588);
                    uint64_t v76 = *a1;
                    v1496 = *(void **)(*a1 + 24);
                    uint64_t v1497 = v1496[1];
                    v1492 += v1497;
                    long long v130 = (int **)*a2;
                    v1498 = *(int **)(*a2 + 24);
                    uint64_t v1499 = *((void *)v1498 + 1);
                    v1491 += v1499;
                    ++v1495;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1500 = v77[1];
                    v1493 = (float *)((char *)v1493 + v1494);
                  }
                  while (v1495 < v1500);
                  int v1490 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1500 = 0;
                  v1496 = *(void **)(v76 + 24);
                  uint64_t v1497 = v1496[1];
                  v1498 = v130[3];
                  uint64_t v1499 = *((void *)v1498 + 1);
                }
                uint64_t v1492 = *v1496 + v1492 - v1500 * v1497;
                uint64_t v1491 = *(void *)v1498 + v1491 - v1499 * v131[1];
                ++v1545;
              }
              while (v1545 < v1490);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v924 = 0;
              uint64_t v925 = 0;
              uint64_t v926 = 0;
              uint64_t v927 = *(void *)(v76 + 152);
              v928 = v130[19];
              vDSP_Length v929 = (int)v281;
              uint64_t v930 = 4 * (int)v281;
              v931 = (float *)v75[19];
              do
              {
                vDSP_vsadd((const float *)(v927 + 4 * v926), 1, (const float *)&v928[v925], v931, 1, v929);
                v926 += **(void **)(*a1 + 24);
                v925 += **(void **)(*a2 + 24);
                ++v924;
                v931 = (float *)((char *)v931 + v930);
              }
              while (v924 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1501 = 0;
            v1635 = v130[19];
            uint64_t v1681 = *(void *)(v76 + 152);
            vDSP_Length v1589 = (int)v281;
            v1502 = (float *)v75[19];
            do
            {
              uint64_t v1503 = *(void *)*a1;
              unint64_t v1504 = (unint64_t)(*(void *)(*a1 + 8) - v1503) >> 2;
              uint64_t v1505 = 0;
              uint64_t v1506 = (v1504 - 1);
              if ((int)v1504 - 1 >= 0)
              {
                uint64_t v1507 = *(void *)(*a1 + 24);
                int v1508 = v1501;
                do
                {
                  ldiv_t v1509 = ldiv(v1508, *(int *)(v1503 + 4 * v1506));
                  int v1508 = v1509.quot;
                  v1505 += *(void *)(v1507 + 8 * v1506--) * v1509.rem;
                }
                while (v1506 != -1);
              }
              uint64_t v1510 = *(void *)*a2;
              unint64_t v1511 = (unint64_t)(*(void *)(*a2 + 8) - v1510) >> 2;
              uint64_t v1512 = 0;
              uint64_t v1513 = (v1511 - 1);
              if ((int)v1511 - 1 >= 0)
              {
                uint64_t v1514 = *(void *)(*a2 + 24);
                int v1515 = v1501;
                do
                {
                  ldiv_t v1516 = ldiv(v1515, *(int *)(v1510 + 4 * v1513));
                  int v1515 = v1516.quot;
                  v1512 += *(void *)(v1514 + 8 * v1513--) * v1516.rem;
                }
                while (v1513 != -1);
              }
              vDSP_vsadd((const float *)(v1681 + 4 * (int)v1505), 1, (const float *)&v1635[(int)v1512], v1502, 1, v1589);
              v1502 += v1589;
              v1501 += v1589;
            }
            while (v1501 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v280 == 2)
          {
            int v1100 = *v77;
            if (*v77)
            {
              uint64_t v1101 = 0;
              uint64_t v1102 = 0;
              uint64_t v1656 = *(void *)(v76 + 152);
              v1610 = v130[19];
              v1103 = (float *)v75[19];
              unint64_t v1537 = 0;
              vDSP_Length v1564 = (int)v281;
              uint64_t v1104 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1105 = 0;
                  do
                  {
                    vDSP_vadd((const float *)(v1656 + 4 * v1102), 1, (const float *)&v1610[v1101], 1, v1103, 1, v1564);
                    uint64_t v76 = *a1;
                    v1106 = *(void **)(*a1 + 24);
                    uint64_t v1107 = v1106[1];
                    v1102 += v1107;
                    long long v130 = (int **)*a2;
                    v1108 = *(int **)(*a2 + 24);
                    uint64_t v1109 = *((void *)v1108 + 1);
                    v1101 += v1109;
                    ++v1105;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1110 = v77[1];
                    v1103 = (float *)((char *)v1103 + v1104);
                  }
                  while (v1105 < v1110);
                  int v1100 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1110 = 0;
                  v1106 = *(void **)(v76 + 24);
                  uint64_t v1107 = v1106[1];
                  v1108 = v130[3];
                  uint64_t v1109 = *((void *)v1108 + 1);
                }
                uint64_t v1102 = *v1106 + v1102 - v1110 * v1107;
                uint64_t v1101 = *(void *)v1108 + v1101 - v1109 * v131[1];
                ++v1537;
              }
              while (v1537 < v1100);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v282 = 0;
              uint64_t v283 = 0;
              uint64_t v284 = 0;
              uint64_t v285 = *(void *)(v76 + 152);
              int v286 = v130[19];
              vDSP_Length v287 = (int)v281;
              uint64_t v288 = 4 * (int)v281;
              int v289 = (float *)v75[19];
              do
              {
                vDSP_vadd((const float *)(v285 + 4 * v284), 1, (const float *)&v286[v283], 1, v289, 1, v287);
                v284 += **(void **)(*a1 + 24);
                v283 += **(void **)(*a2 + 24);
                ++v282;
                int v289 = (float *)((char *)v289 + v288);
              }
              while (v282 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1111 = 0;
            v1611 = v130[19];
            uint64_t v1657 = *(void *)(v76 + 152);
            vDSP_Length v1565 = (int)v281;
            v1112 = (float *)v75[19];
            do
            {
              uint64_t v1113 = *(void *)*a1;
              unint64_t v1114 = (unint64_t)(*(void *)(*a1 + 8) - v1113) >> 2;
              uint64_t v1115 = 0;
              uint64_t v1116 = (v1114 - 1);
              if ((int)v1114 - 1 >= 0)
              {
                uint64_t v1117 = *(void *)(*a1 + 24);
                int v1118 = v1111;
                do
                {
                  ldiv_t v1119 = ldiv(v1118, *(int *)(v1113 + 4 * v1116));
                  int v1118 = v1119.quot;
                  v1115 += *(void *)(v1117 + 8 * v1116--) * v1119.rem;
                }
                while (v1116 != -1);
              }
              uint64_t v1120 = *(void *)*a2;
              unint64_t v1121 = (unint64_t)(*(void *)(*a2 + 8) - v1120) >> 2;
              uint64_t v1122 = 0;
              uint64_t v1123 = (v1121 - 1);
              if ((int)v1121 - 1 >= 0)
              {
                uint64_t v1124 = *(void *)(*a2 + 24);
                int v1125 = v1111;
                do
                {
                  ldiv_t v1126 = ldiv(v1125, *(int *)(v1120 + 4 * v1123));
                  int v1125 = v1126.quot;
                  v1122 += *(void *)(v1124 + 8 * v1123--) * v1126.rem;
                }
                while (v1123 != -1);
              }
              vDSP_vadd((const float *)(v1657 + 4 * (int)v1115), 1, (const float *)&v1611[(int)v1122], 1, v1112, 1, v1565);
              v1112 += v1565;
              v1111 += v1565;
            }
            while (v1111 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_435:
          switch(v277)
          {
            case 1uLL:
              uint64_t v290 = v75[6];
              if (v290)
              {
                uint64_t v291 = *(float **)(v76 + 152);
                uint64_t v292 = (float *)v130[19];
                v293 = (float *)v75[19];
                uint64_t v294 = 4 * *(void *)v130[3];
                uint64_t v295 = 4 * **(void **)(v76 + 24);
                do
                {
                  *v293++ = *v291 + *v292;
                  uint64_t v292 = (float *)((char *)v292 + v294);
                  uint64_t v291 = (float *)((char *)v291 + v295);
                  --v290;
                }
                while (v290);
              }
              break;
            case 2uLL:
              uint64_t v757 = *v77;
              if (v757)
              {
                uint64_t v758 = 0;
                uint64_t v759 = 0;
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = *(void *)(v76 + 152);
                v763 = v130[19];
                uint64_t v764 = v75[19];
                unint64_t v765 = v77[1];
                v766 = *(uint64_t **)(v76 + 24);
                uint64_t v767 = *v766;
                uint64_t v768 = v766[1];
                v769 = v130[3];
                uint64_t v770 = *(void *)v769;
                uint64_t v771 = *((void *)v769 + 1);
                uint64_t v772 = v770 - v771 * v131[1];
                if (v765 <= 1) {
                  uint64_t v773 = 1;
                }
                else {
                  uint64_t v773 = v77[1];
                }
                uint64_t v774 = v767 - v768 * v765;
                do
                {
                  if (v765)
                  {
                    uint64_t v775 = v759 + v773;
                    v776 = (float *)(v764 + 4 * v759);
                    uint64_t v777 = v773;
                    do
                    {
                      *v776++ = *(float *)(v762 + 4 * v761) + *(float *)&v763[v760];
                      v761 += v768;
                      v760 += v771;
                      --v777;
                    }
                    while (v777);
                    uint64_t v759 = v775;
                  }
                  v761 += v774;
                  v760 += v772;
                  ++v758;
                }
                while (v758 != v757);
              }
              break;
            case 3uLL:
              uint64_t v778 = *v77;
              if (v778)
              {
                uint64_t v779 = 0;
                uint64_t v780 = 0;
                uint64_t v781 = 0;
                uint64_t v782 = 0;
                uint64_t v783 = *(void *)(v76 + 152);
                v784 = v130[19];
                uint64_t v785 = v75[19];
                unint64_t v786 = v77[1];
                v787 = *(void **)(v76 + 24);
                uint64_t v788 = v787[1];
                v789 = v130[3];
                uint64_t v790 = *((void *)v789 + 1);
                uint64_t v791 = *(void *)v789 - v790 * v131[1];
                if (v786 <= 1) {
                  uint64_t v792 = 1;
                }
                else {
                  uint64_t v792 = v77[1];
                }
                unint64_t v793 = *v787 - v788 * v786;
                do
                {
                  if (v786)
                  {
                    uint64_t v794 = 0;
                    unint64_t v795 = v77[2];
                    uint64_t v796 = v787[2];
                    uint64_t v797 = *((void *)v789 + 2);
                    if (v795 <= 1) {
                      uint64_t v798 = 1;
                    }
                    else {
                      uint64_t v798 = v77[2];
                    }
                    uint64_t v799 = v790 - v797 * v131[2];
                    do
                    {
                      uint64_t v800 = v798;
                      if (v795)
                      {
                        do
                        {
                          *(float *)(v785 + 4 * v780++) = *(float *)(v783 + 4 * v782) + *(float *)&v784[v781];
                          v782 += v796;
                          v781 += v797;
                          --v800;
                        }
                        while (v800);
                      }
                      v782 += v788 - v796 * v795;
                      v781 += v799;
                      ++v794;
                    }
                    while (v794 != v792);
                  }
                  v782 += v793;
                  v781 += v791;
                  ++v779;
                }
                while (v779 != v778);
              }
              break;
            case 4uLL:
              uint64_t v1645 = *v77;
              if (v1645)
              {
                uint64_t v801 = 0;
                uint64_t v802 = 0;
                uint64_t v803 = 0;
                uint64_t v804 = 0;
                uint64_t v805 = *(void *)(v76 + 152);
                v806 = v130[19];
                uint64_t v807 = v75[19];
                unint64_t v808 = v77[1];
                v809 = *(void **)(v76 + 24);
                v810 = v130[3];
                uint64_t v1533 = *((void *)v810 + 1);
                uint64_t v1553 = v809[1];
                uint64_t v1599 = *(void *)v810 - v1533 * v131[1];
                if (v808 <= 1) {
                  uint64_t v811 = 1;
                }
                else {
                  uint64_t v811 = v77[1];
                }
                unint64_t v812 = *v809 - v809[1] * v808;
                do
                {
                  if (v808)
                  {
                    uint64_t v813 = 0;
                    unint64_t v814 = v77[2];
                    uint64_t v815 = v809[2];
                    uint64_t v816 = *((void *)v810 + 2);
                    if (v814 <= 1) {
                      uint64_t v817 = 1;
                    }
                    else {
                      uint64_t v817 = v77[2];
                    }
                    uint64_t v818 = v1533 - v816 * v131[2];
                    do
                    {
                      if (v814)
                      {
                        uint64_t v819 = 0;
                        unint64_t v820 = v77[3];
                        uint64_t v821 = v809[3];
                        uint64_t v822 = *((void *)v810 + 3);
                        if (v820 <= 1) {
                          uint64_t v823 = 1;
                        }
                        else {
                          uint64_t v823 = v77[3];
                        }
                        uint64_t v824 = v816 - v822 * v131[3];
                        do
                        {
                          uint64_t v825 = v823;
                          if (v820)
                          {
                            do
                            {
                              *(float *)(v807 + 4 * v802++) = *(float *)(v805 + 4 * v804) + *(float *)&v806[v803];
                              v804 += v821;
                              v803 += v822;
                              --v825;
                            }
                            while (v825);
                          }
                          v804 += v815 - v821 * v820;
                          v803 += v824;
                          ++v819;
                        }
                        while (v819 != v817);
                      }
                      v804 += v1553 - v815 * v814;
                      v803 += v818;
                      ++v813;
                    }
                    while (v813 != v811);
                  }
                  v804 += v812;
                  v803 += v1599;
                  ++v801;
                }
                while (v801 != v1645);
              }
              break;
            default:
              uint64_t v1598 = v75[6];
              uint64_t v1644 = v79;
              if (v1598)
              {
                uint64_t v746 = 0;
                v1532 = v130[19];
                uint64_t v1552 = *(void *)(v76 + 152);
                uint64_t v1525 = v75[19];
                do
                {
                  uint64_t v747 = v1644;
                  if ((v1644 & 0x80000000) != 0)
                  {
                    LODWORD(v748) = 0;
                  }
                  else
                  {
                    uint64_t v748 = 0;
                    uint64_t v749 = *(void *)(v76 + 24);
                    int v750 = v746;
                    do
                    {
                      ldiv_t v751 = ldiv(v750, v77[v747]);
                      int v750 = v751.quot;
                      v748 += *(void *)(v749 + 8 * v747--) * v751.rem;
                    }
                    while (v747 != -1);
                  }
                  uint64_t v752 = 0;
                  if ((v133 & 0x80000000) == 0)
                  {
                    v753 = v130[3];
                    uint64_t v754 = v133;
                    int v755 = v746;
                    do
                    {
                      ldiv_t v756 = ldiv(v755, v131[v754]);
                      int v755 = v756.quot;
                      v752 += *(void *)&v753[2 * v754--] * v756.rem;
                    }
                    while (v754 != -1);
                  }
                  *(float *)(v1525 + 4 * v746++) = *(float *)(v1552 + 4 * (int)v748) + *(float *)&v1532[(int)v752];
                }
                while (v746 != v1598);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6,mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_7>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned __int8 **)(*a2 + 152) != -**(unsigned char **)(*a1 + 152);
          goto LABEL_8;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v23 = *(void **)a3;
          uint64_t v24 = *a1;
          int v25 = *(int **)*a1;
          uint64_t v26 = (*(void *)(*a1 + 8) - (void)v25) >> 2;
          uint64_t v27 = (v26 - 1);
          if ((int)v27 >= -1) {
            int v28 = -1;
          }
          else {
            int v28 = v26 - 1;
          }
          int v29 = v28 + 1;
          int v30 = v26 + 1;
          break;
      }
      while (1)
      {
        unsigned int v31 = v30 - 2;
        if (v30 - 2 < 0) {
          break;
        }
        --v30;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v31) != *(void *)(v23[3] + 8 * v31)) {
          goto LABEL_72;
        }
      }
      int v30 = v29;
LABEL_72:
      int v84 = (int **)*a2;
      int v85 = *(int **)*a2;
      uint64_t v86 = (*(void *)(*a2 + 8) - (void)v85) >> 2;
      uint64_t v87 = (v86 - 1);
      if ((int)v87 >= -1) {
        int v88 = -1;
      }
      else {
        int v88 = v86 - 1;
      }
      int v89 = v88 + 1;
      int v90 = v86 + 1;
      while (1)
      {
        unsigned int v91 = v90 - 2;
        if (v90 - 2 < 0) {
          break;
        }
        --v90;
        if (*(void *)&v84[3][2 * v91] != *(void *)(v23[3] + 8 * v91)) {
          goto LABEL_126;
        }
      }
      int v90 = v89;
LABEL_126:
      int v138 = v26 + 1;
      while (1)
      {
        unsigned int v139 = v138 - 2;
        if (v138 - 2 < 0) {
          break;
        }
        --v138;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v139)) {
          goto LABEL_161;
        }
      }
      int v138 = v29;
LABEL_161:
      int v152 = v86 + 1;
      while (1)
      {
        int v153 = v152 - 2;
        if (v152 - 2 < 0) {
          break;
        }
        --v152;
        if (*(void *)&v84[3][2 * v153]) {
          goto LABEL_196;
        }
      }
      int v152 = v89;
LABEL_196:
      unint64_t v166 = (uint64_t)(v23[1] - *v23) >> 2;
      if (v30 <= v90) {
        int v167 = v90;
      }
      else {
        int v167 = v30;
      }
      if (v30 <= v152) {
        int v30 = v152;
      }
      if (v138 > v90) {
        int v90 = v138;
      }
      if (v166 > v90) {
        int v168 = 1;
      }
      else {
        int v168 = 4;
      }
      if (v166 <= v90) {
        int v90 = (uint64_t)(v23[1] - *v23) >> 2;
      }
      if (v166 <= v30) {
        int v30 = v90;
      }
      else {
        int v168 = 2;
      }
      if (v166 <= v167)
      {
        int v169 = v30;
      }
      else
      {
        int v168 = 3;
        int v169 = v167;
      }
      if (!v169) {
        goto LABEL_225;
      }
      unint64_t v170 = *(void *)(v23[3] + 8 * (v169 - 1));
      if (v170 < 0x10) {
        goto LABEL_225;
      }
      switch(v168)
      {
        case 1:
          if (v169 == 2)
          {
            int v1127 = *v25;
            if (*v25)
            {
              uint64_t v1128 = 0;
              uint64_t v1129 = 0;
              unint64_t v1566 = 0;
              uint64_t v1612 = *(void *)(v24 + 152);
              vDSP_Length v1658 = (int)v170;
              v1130 = (int *)v23[19];
              v1131 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v1132 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1131 + v1128), 1, (const int *)(v1612 + v1129), v1130, 1, v1658);
                    uint64_t v24 = *a1;
                    v1133 = *(void **)(*a1 + 24);
                    uint64_t v1134 = v1133[1];
                    v1129 += v1134;
                    int v84 = (int **)*a2;
                    v1135 = *(int **)(*a2 + 24);
                    uint64_t v1136 = *((void *)v1135 + 1);
                    v1128 += v1136;
                    v1130 = (int *)((char *)v1130 + v1658);
                    ++v1132;
                    int v25 = *(int **)*a1;
                    unint64_t v1137 = v25[1];
                  }
                  while (v1132 < v1137);
                  int v1127 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v1137 = 0;
                  v1133 = *(void **)(v24 + 24);
                  uint64_t v1134 = v1133[1];
                  v1135 = v84[3];
                  uint64_t v1136 = *((void *)v1135 + 1);
                }
                uint64_t v1129 = *v1133 + v1129 - v1137 * v1134;
                uint64_t v1128 = *(void *)v1135 + v1128 - v1136 * v85[1];
                ++v1566;
              }
              while (v1566 < v1127);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v826 = 0;
              uint64_t v827 = 0;
              uint64_t v828 = 0;
              uint64_t v829 = *(void *)(v24 + 152);
              v830 = v84[19];
              vDSP_Length v831 = (int)v170;
              v832 = (int *)v23[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v830 + v827), 1, (const int *)(v829 + v828), v832, 1, v831);
                v828 += **(void **)(*a1 + 24);
                v827 += **(void **)(*a2 + 24);
                v832 = (int *)((char *)v832 + v831);
                ++v826;
              }
              while (v826 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v1138 = 0;
            v1613 = v84[19];
            uint64_t v1659 = *(void *)(v24 + 152);
            vDSP_Length v1567 = (int)v170;
            v1139 = (int *)v23[19];
            do
            {
              uint64_t v1140 = *(void *)*a1;
              unint64_t v1141 = (unint64_t)(*(void *)(*a1 + 8) - v1140) >> 2;
              uint64_t v1142 = 0;
              uint64_t v1143 = (v1141 - 1);
              if ((int)v1141 - 1 >= 0)
              {
                uint64_t v1144 = *(void *)(*a1 + 24);
                int quot = v1138;
                do
                {
                  ldiv_t v1146 = ldiv(quot, *(int *)(v1140 + 4 * v1143));
                  int quot = v1146.quot;
                  v1142 += *(void *)(v1144 + 8 * v1143--) * v1146.rem;
                }
                while (v1143 != -1);
              }
              uint64_t v1147 = *(void *)*a2;
              unint64_t v1148 = (unint64_t)(*(void *)(*a2 + 8) - v1147) >> 2;
              uint64_t v1149 = 0;
              uint64_t v1150 = (v1148 - 1);
              if ((int)v1148 - 1 >= 0)
              {
                uint64_t v1151 = *(void *)(*a2 + 24);
                int v1152 = v1138;
                do
                {
                  ldiv_t v1153 = ldiv(v1152, *(int *)(v1147 + 4 * v1150));
                  int v1152 = v1153.quot;
                  v1149 += *(void *)(v1151 + 8 * v1150--) * v1153.rem;
                }
                while (v1150 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1613 + (int)v1149), 1, (const int *)(v1659 + (int)v1142), v1139, 1, v1567);
              v1139 = (int *)((char *)v1139 + v1567);
              v1138 += v1567;
            }
            while (v1138 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v169 == 2)
          {
            int v1154 = *v25;
            if (*v25)
            {
              uint64_t v1155 = 0;
              uint64_t v1156 = 0;
              unint64_t v1568 = 0;
              uint64_t v1614 = *(void *)(v24 + 152);
              vDSP_Length v1660 = (int)v170;
              v1157 = (int *)v23[19];
              v1158 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v1159 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1614 + v1156), 1, (int *)((char *)v1158 + v1155), v1157, 1, v1660);
                    uint64_t v24 = *a1;
                    v1160 = *(void **)(*a1 + 24);
                    uint64_t v1161 = v1160[1];
                    v1156 += v1161;
                    int v84 = (int **)*a2;
                    v1162 = *(int **)(*a2 + 24);
                    uint64_t v1163 = *((void *)v1162 + 1);
                    v1155 += v1163;
                    v1157 = (int *)((char *)v1157 + v1660);
                    ++v1159;
                    int v25 = *(int **)*a1;
                    unint64_t v1164 = v25[1];
                  }
                  while (v1159 < v1164);
                  int v1154 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v1164 = 0;
                  v1160 = *(void **)(v24 + 24);
                  uint64_t v1161 = v1160[1];
                  v1162 = v84[3];
                  uint64_t v1163 = *((void *)v1162 + 1);
                }
                uint64_t v1156 = *v1160 + v1156 - v1164 * v1161;
                uint64_t v1155 = *(void *)v1162 + v1155 - v1163 * v85[1];
                ++v1568;
              }
              while (v1568 < v1154);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v833 = 0;
              uint64_t v834 = 0;
              uint64_t v835 = 0;
              uint64_t v836 = *(void *)(v24 + 152);
              v837 = v84[19];
              vDSP_Length v838 = (int)v170;
              v839 = (int *)v23[19];
              do
              {
                vDSP_vsaddi((const int *)(v836 + v835), 1, (int *)((char *)v837 + v834), v839, 1, v838);
                v835 += **(void **)(*a1 + 24);
                v834 += **(void **)(*a2 + 24);
                v839 = (int *)((char *)v839 + v838);
                ++v833;
              }
              while (v833 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v1165 = 0;
            v1615 = v84[19];
            uint64_t v1661 = *(void *)(v24 + 152);
            vDSP_Length v1569 = (int)v170;
            v1166 = (int *)v23[19];
            do
            {
              uint64_t v1167 = *(void *)*a1;
              unint64_t v1168 = (unint64_t)(*(void *)(*a1 + 8) - v1167) >> 2;
              uint64_t v1169 = 0;
              uint64_t v1170 = (v1168 - 1);
              if ((int)v1168 - 1 >= 0)
              {
                uint64_t v1171 = *(void *)(*a1 + 24);
                int v1172 = v1165;
                do
                {
                  ldiv_t v1173 = ldiv(v1172, *(int *)(v1167 + 4 * v1170));
                  int v1172 = v1173.quot;
                  v1169 += *(void *)(v1171 + 8 * v1170--) * v1173.rem;
                }
                while (v1170 != -1);
              }
              uint64_t v1174 = *(void *)*a2;
              unint64_t v1175 = (unint64_t)(*(void *)(*a2 + 8) - v1174) >> 2;
              uint64_t v1176 = 0;
              uint64_t v1177 = (v1175 - 1);
              if ((int)v1175 - 1 >= 0)
              {
                uint64_t v1178 = *(void *)(*a2 + 24);
                int v1179 = v1165;
                do
                {
                  ldiv_t v1180 = ldiv(v1179, *(int *)(v1174 + 4 * v1177));
                  int v1179 = v1180.quot;
                  v1176 += *(void *)(v1178 + 8 * v1177--) * v1180.rem;
                }
                while (v1177 != -1);
              }
              vDSP_vsaddi((const int *)(v1661 + (int)v1169), 1, (int *)((char *)v1615 + (int)v1176), v1166, 1, v1569);
              v1166 = (int *)((char *)v1166 + v1569);
              v1165 += v1569;
            }
            while (v1165 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v169 == 2)
          {
            int v932 = *v25;
            if (*v25)
            {
              uint64_t v933 = 0;
              uint64_t v934 = 0;
              unint64_t v1554 = 0;
              uint64_t v1600 = *(void *)(v24 + 152);
              vDSP_Length v1646 = (int)v170;
              v935 = (int *)v23[19];
              v936 = v84[19];
              do
              {
                if (v25[1])
                {
                  unint64_t v937 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1600 + v934), 1, (int *)((char *)v936 + v933), 1, v935, 1, v1646);
                    uint64_t v24 = *a1;
                    v938 = *(void **)(*a1 + 24);
                    uint64_t v939 = v938[1];
                    v934 += v939;
                    int v84 = (int **)*a2;
                    v940 = *(int **)(*a2 + 24);
                    uint64_t v941 = *((void *)v940 + 1);
                    v933 += v941;
                    v935 = (int *)((char *)v935 + v1646);
                    ++v937;
                    int v25 = *(int **)*a1;
                    unint64_t v942 = v25[1];
                  }
                  while (v937 < v942);
                  int v932 = *v25;
                  int v85 = *v84;
                }
                else
                {
                  unint64_t v942 = 0;
                  v938 = *(void **)(v24 + 24);
                  uint64_t v939 = v938[1];
                  v940 = v84[3];
                  uint64_t v941 = *((void *)v940 + 1);
                }
                uint64_t v934 = *v938 + v934 - v942 * v939;
                uint64_t v933 = *(void *)v940 + v933 - v941 * v85[1];
                ++v1554;
              }
              while (v1554 < v932);
            }
          }
          else if (v169 == 1)
          {
            if (*v25)
            {
              unint64_t v171 = 0;
              uint64_t v172 = 0;
              uint64_t v173 = 0;
              uint64_t v174 = *(void *)(v24 + 152);
              char v175 = v84[19];
              vDSP_Length v176 = (int)v170;
              char v177 = (int *)v23[19];
              do
              {
                vDSP_vaddi((const int *)(v174 + v173), 1, (int *)((char *)v175 + v172), 1, v177, 1, v176);
                v173 += **(void **)(*a1 + 24);
                v172 += **(void **)(*a2 + 24);
                char v177 = (int *)((char *)v177 + v176);
                ++v171;
              }
              while (v171 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v943 = 0;
            v1601 = v84[19];
            uint64_t v1647 = *(void *)(v24 + 152);
            vDSP_Length v1555 = (int)v170;
            v944 = (int *)v23[19];
            do
            {
              uint64_t v945 = *(void *)*a1;
              unint64_t v946 = (unint64_t)(*(void *)(*a1 + 8) - v945) >> 2;
              uint64_t v947 = 0;
              uint64_t v948 = (v946 - 1);
              if ((int)v946 - 1 >= 0)
              {
                uint64_t v949 = *(void *)(*a1 + 24);
                int v950 = v943;
                do
                {
                  ldiv_t v951 = ldiv(v950, *(int *)(v945 + 4 * v948));
                  int v950 = v951.quot;
                  v947 += *(void *)(v949 + 8 * v948--) * v951.rem;
                }
                while (v948 != -1);
              }
              uint64_t v952 = *(void *)*a2;
              unint64_t v953 = (unint64_t)(*(void *)(*a2 + 8) - v952) >> 2;
              uint64_t v954 = 0;
              uint64_t v955 = (v953 - 1);
              if ((int)v953 - 1 >= 0)
              {
                uint64_t v956 = *(void *)(*a2 + 24);
                int v957 = v943;
                do
                {
                  ldiv_t v958 = ldiv(v957, *(int *)(v952 + 4 * v955));
                  int v957 = v958.quot;
                  v954 += *(void *)(v956 + 8 * v955--) * v958.rem;
                }
                while (v955 != -1);
              }
              vDSP_vaddi((const int *)(v1647 + (int)v947), 1, (int *)((char *)v1601 + (int)v954), 1, v944, 1, v1555);
              v944 = (int *)((char *)v944 + v1555);
              v943 += v1555;
            }
            while (v943 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_225:
          switch(v166)
          {
            case 1uLL:
              uint64_t v178 = v23[6];
              if (v178)
              {
                v179 = *(unsigned char **)(v24 + 152);
                unint64_t v180 = v84[19];
                BOOL v181 = (BOOL *)v23[19];
                uint64_t v182 = **(void **)(v24 + 24);
                uint64_t v183 = *(void *)v84[3];
                do
                {
                  *v181++ = *(unsigned __int8 *)v180 != -*v179;
                  unint64_t v180 = (int *)((char *)v180 + v183);
                  v179 += v182;
                  --v178;
                }
                while (v178);
              }
              break;
            case 2uLL:
              uint64_t v307 = *v25;
              if (v307)
              {
                uint64_t v308 = 0;
                uint64_t v309 = 0;
                uint64_t v310 = 0;
                uint64_t v311 = 0;
                uint64_t v312 = *(void *)(v24 + 152);
                unsigned int v313 = v84[19];
                uint64_t v314 = v23[19];
                unint64_t v315 = v25[1];
                uint64_t v316 = *(uint64_t **)(v24 + 24);
                uint64_t v317 = *v316;
                uint64_t v318 = v316[1];
                v319 = v84[3];
                uint64_t v320 = *(void *)v319;
                uint64_t v321 = *((void *)v319 + 1);
                uint64_t v322 = v320 - v321 * v85[1];
                if (v315 <= 1) {
                  uint64_t v323 = 1;
                }
                else {
                  uint64_t v323 = v25[1];
                }
                uint64_t v324 = v317 - v318 * v315;
                do
                {
                  if (v315)
                  {
                    uint64_t v325 = v309 + v323;
                    uint64_t v326 = (BOOL *)(v314 + v309);
                    uint64_t v327 = v323;
                    do
                    {
                      *v326++ = *((unsigned __int8 *)v313 + v310) != -*(unsigned char *)(v312 + v311);
                      v311 += v318;
                      v310 += v321;
                      --v327;
                    }
                    while (v327);
                    uint64_t v309 = v325;
                  }
                  v311 += v324;
                  v310 += v322;
                  ++v308;
                }
                while (v308 != v307);
              }
              break;
            case 3uLL:
              uint64_t v328 = *v25;
              if (v328)
              {
                uint64_t v329 = 0;
                uint64_t v330 = 0;
                uint64_t v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = *(void *)(v24 + 152);
                int v334 = v84[19];
                uint64_t v335 = v23[19];
                unint64_t v336 = v25[1];
                uint64_t v337 = *(void **)(v24 + 24);
                uint64_t v338 = v337[1];
                v339 = v84[3];
                uint64_t v340 = *((void *)v339 + 1);
                uint64_t v341 = *(void *)v339 - v340 * v85[1];
                if (v336 <= 1) {
                  uint64_t v342 = 1;
                }
                else {
                  uint64_t v342 = v25[1];
                }
                unint64_t v343 = *v337 - v338 * v336;
                do
                {
                  if (v336)
                  {
                    uint64_t v344 = 0;
                    unint64_t v345 = v25[2];
                    uint64_t v346 = v337[2];
                    uint64_t v347 = *((void *)v339 + 2);
                    if (v345 <= 1) {
                      uint64_t v348 = 1;
                    }
                    else {
                      uint64_t v348 = v25[2];
                    }
                    uint64_t v349 = v340 - v347 * v85[2];
                    do
                    {
                      uint64_t v350 = v348;
                      if (v345)
                      {
                        do
                        {
                          *(unsigned char *)(v335 + v330++) = *((unsigned __int8 *)v334 + v331) != -*(unsigned char *)(v333 + v332);
                          v332 += v346;
                          v331 += v347;
                          --v350;
                        }
                        while (v350);
                      }
                      v332 += v338 - v346 * v345;
                      v331 += v349;
                      ++v344;
                    }
                    while (v344 != v342);
                  }
                  v332 += v343;
                  v331 += v341;
                  ++v329;
                }
                while (v329 != v328);
              }
              break;
            case 4uLL:
              uint64_t v1637 = *v25;
              if (v1637)
              {
                uint64_t v351 = 0;
                uint64_t v352 = 0;
                uint64_t v353 = 0;
                uint64_t v354 = 0;
                uint64_t v355 = *(void *)(v24 + 152);
                int v356 = v84[19];
                uint64_t v357 = v23[19];
                unint64_t v358 = v25[1];
                int v359 = *(void **)(v24 + 24);
                v360 = v84[3];
                uint64_t v1517 = *((void *)v360 + 1);
                uint64_t v1520 = v359[1];
                uint64_t v1547 = *(void *)v360 - v1517 * v85[1];
                int v1591 = v25[1];
                if (v358 <= 1) {
                  uint64_t v361 = 1;
                }
                else {
                  uint64_t v361 = v25[1];
                }
                unint64_t v1527 = *v359 - v359[1] * v358;
                do
                {
                  if (v1591)
                  {
                    uint64_t v362 = 0;
                    unint64_t v363 = v25[2];
                    uint64_t v364 = v359[2];
                    uint64_t v365 = *((void *)v360 + 2);
                    if (v363 <= 1) {
                      uint64_t v366 = 1;
                    }
                    else {
                      uint64_t v366 = v25[2];
                    }
                    uint64_t v367 = v1517 - v365 * v85[2];
                    do
                    {
                      if (v363)
                      {
                        uint64_t v368 = 0;
                        unint64_t v369 = v25[3];
                        uint64_t v370 = v359[3];
                        uint64_t v371 = *((void *)v360 + 3);
                        if (v369 <= 1) {
                          uint64_t v372 = 1;
                        }
                        else {
                          uint64_t v372 = v25[3];
                        }
                        uint64_t v373 = v365 - v371 * v85[3];
                        do
                        {
                          uint64_t v374 = v372;
                          if (v369)
                          {
                            do
                            {
                              *(unsigned char *)(v357 + v352++) = *((unsigned __int8 *)v356 + v353) != -*(unsigned char *)(v355 + v354);
                              v354 += v370;
                              v353 += v371;
                              --v374;
                            }
                            while (v374);
                          }
                          v354 += v364 - v370 * v369;
                          v353 += v373;
                          ++v368;
                        }
                        while (v368 != v366);
                      }
                      v354 += v1520 - v364 * v363;
                      v353 += v367;
                      ++v362;
                    }
                    while (v362 != v361);
                  }
                  v354 += v1527;
                  v353 += v1547;
                  ++v351;
                }
                while (v351 != v1637);
              }
              break;
            default:
              uint64_t v1590 = v23[6];
              uint64_t v1636 = v27;
              if (v1590)
              {
                uint64_t v296 = 0;
                v1526 = v84[19];
                uint64_t v1546 = *(void *)(v24 + 152);
                uint64_t v1519 = v23[19];
                do
                {
                  uint64_t v297 = v1636;
                  if ((v1636 & 0x80000000) != 0)
                  {
                    LODWORD(v298) = 0;
                  }
                  else
                  {
                    uint64_t v298 = 0;
                    uint64_t v299 = *(void *)(v24 + 24);
                    int v300 = v296;
                    do
                    {
                      ldiv_t v301 = ldiv(v300, v25[v297]);
                      int v300 = v301.quot;
                      v298 += *(void *)(v299 + 8 * v297--) * v301.rem;
                    }
                    while (v297 != -1);
                  }
                  uint64_t v302 = 0;
                  if ((v87 & 0x80000000) == 0)
                  {
                    v303 = v84[3];
                    uint64_t v304 = v87;
                    int v305 = v296;
                    do
                    {
                      ldiv_t v306 = ldiv(v305, v85[v304]);
                      int v305 = v306.quot;
                      v302 += *(void *)&v303[2 * v304--] * v306.rem;
                    }
                    while (v304 != -1);
                  }
                  *(unsigned char *)(v1519 + v296++) = *((unsigned __int8 *)v1526 + (int)v302) != -*(unsigned char *)(v1546 + (int)v298);
                }
                while (v296 != v1590);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_7;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v32 = *(void **)a3;
          uint64_t v33 = *a1;
          unint64_t v34 = *(int **)*a1;
          uint64_t v35 = (*(void *)(*a1 + 8) - (void)v34) >> 2;
          int v36 = v35 - 1;
          if ((int)v35 - 1 >= -1) {
            int v36 = -1;
          }
          int v37 = v36 + 1;
          int v38 = v35 + 1;
          break;
      }
      while (1)
      {
        unsigned int v39 = v38 - 2;
        if (v38 - 2 < 0) {
          break;
        }
        --v38;
        if (*(void *)(*(void *)(v33 + 24) + 8 * v39) != *(void *)(v32[3] + 8 * v39)) {
          goto LABEL_80;
        }
      }
      int v38 = v37;
LABEL_80:
      uint64_t v92 = (int **)*a2;
      uint64_t v93 = *(int **)*a2;
      uint64_t v94 = (*(void *)(*a2 + 8) - (void)v93) >> 2;
      int v95 = v94 - 1;
      if ((int)v94 - 1 >= -1) {
        int v95 = -1;
      }
      int v96 = v95 + 1;
      int v97 = v94 + 1;
      while (1)
      {
        unsigned int v98 = v97 - 2;
        if (v97 - 2 < 0) {
          break;
        }
        --v97;
        if (*(void *)&v92[3][2 * v98] != *(void *)(v32[3] + 8 * v98)) {
          goto LABEL_131;
        }
      }
      int v97 = v96;
LABEL_131:
      int v140 = v35 + 1;
      while (1)
      {
        unsigned int v141 = v140 - 2;
        if (v140 - 2 < 0) {
          break;
        }
        --v140;
        if (*(void *)(*(void *)(v33 + 24) + 8 * v141)) {
          goto LABEL_166;
        }
      }
      int v140 = v37;
LABEL_166:
      int v154 = v94 + 1;
      while (1)
      {
        int v155 = v154 - 2;
        if (v154 - 2 < 0) {
          break;
        }
        --v154;
        if (*(void *)&v92[3][2 * v155]) {
          goto LABEL_231;
        }
      }
      int v154 = v96;
LABEL_231:
      unint64_t v184 = (uint64_t)(v32[1] - *v32) >> 2;
      if (v38 <= v97) {
        int v185 = v97;
      }
      else {
        int v185 = v38;
      }
      if (v38 <= v154) {
        int v38 = v154;
      }
      if (v140 > v97) {
        int v97 = v140;
      }
      if (v184 > v97) {
        int v186 = 1;
      }
      else {
        int v186 = 4;
      }
      if (v184 <= v97) {
        int v97 = (uint64_t)(v32[1] - *v32) >> 2;
      }
      if (v184 <= v38) {
        int v38 = v97;
      }
      else {
        int v186 = 2;
      }
      if (v184 <= v185)
      {
        int v187 = v38;
      }
      else
      {
        int v186 = 3;
        int v187 = v185;
      }
      if (!v187) {
        goto LABEL_260;
      }
      unint64_t v188 = *(void *)(v32[3] + 8 * (v187 - 1));
      if (v188 < 0x10) {
        goto LABEL_260;
      }
      switch(v186)
      {
        case 1:
          if (v187 == 2)
          {
            int v1181 = *v34;
            if (*v34)
            {
              unint64_t v1182 = 0;
              uint64_t v1183 = 0;
              uint64_t v1184 = 0;
              uint64_t v1185 = *(void *)(v33 + 152);
              v1186 = v92[19];
              vDSP_Length v1187 = (int)v188;
              v1188 = (int *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v1189 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1186 + v1183), 1, (const int *)(v1185 + v1184), v1188, 1, v1187);
                    uint64_t v33 = *a1;
                    v1190 = *(void **)(*a1 + 24);
                    uint64_t v1191 = v1190[1];
                    v1184 += v1191;
                    uint64_t v92 = (int **)*a2;
                    v1192 = *(int **)(*a2 + 24);
                    uint64_t v1193 = *((void *)v1192 + 1);
                    v1183 += v1193;
                    v1188 = (int *)((char *)v1188 + v1187);
                    ++v1189;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v1194 = v34[1];
                  }
                  while (v1189 < v1194);
                  int v1181 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v1194 = 0;
                  v1190 = *(void **)(v33 + 24);
                  uint64_t v1191 = v1190[1];
                  v1192 = v92[3];
                  uint64_t v1193 = *((void *)v1192 + 1);
                }
                uint64_t v1184 = *v1190 + v1184 - v1194 * v1191;
                uint64_t v1183 = *(void *)v1192 + v1183 - v1193 * v93[1];
                ++v1182;
              }
              while (v1182 < v1181);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v840 = 0;
              uint64_t v841 = 0;
              uint64_t v842 = 0;
              uint64_t v843 = *(void *)(v33 + 152);
              v844 = v92[19];
              vDSP_Length v845 = (int)v188;
              v846 = (int *)v32[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v844 + v841), 1, (const int *)(v843 + v842), v846, 1, v845);
                v842 += **(void **)(*a1 + 24);
                v841 += **(void **)(*a2 + 24);
                v846 = (int *)((char *)v846 + v845);
                ++v840;
              }
              while (v840 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v1195 = 0;
            v1616 = v92[19];
            uint64_t v1662 = *(void *)(v33 + 152);
            vDSP_Length v1570 = (int)v188;
            v1196 = (int *)v32[19];
            do
            {
              uint64_t v1197 = *(void *)*a1;
              unint64_t v1198 = (unint64_t)(*(void *)(*a1 + 8) - v1197) >> 2;
              uint64_t v1199 = 0;
              uint64_t v1200 = (v1198 - 1);
              if ((int)v1198 - 1 >= 0)
              {
                uint64_t v1201 = *(void *)(*a1 + 24);
                int v1202 = v1195;
                do
                {
                  ldiv_t v1203 = ldiv(v1202, *(int *)(v1197 + 4 * v1200));
                  int v1202 = v1203.quot;
                  v1199 += *(void *)(v1201 + 8 * v1200--) * v1203.rem;
                }
                while (v1200 != -1);
              }
              uint64_t v1204 = *(void *)*a2;
              unint64_t v1205 = (unint64_t)(*(void *)(*a2 + 8) - v1204) >> 2;
              uint64_t v1206 = 0;
              uint64_t v1207 = (v1205 - 1);
              if ((int)v1205 - 1 >= 0)
              {
                uint64_t v1208 = *(void *)(*a2 + 24);
                int v1209 = v1195;
                do
                {
                  ldiv_t v1210 = ldiv(v1209, *(int *)(v1204 + 4 * v1207));
                  int v1209 = v1210.quot;
                  v1206 += *(void *)(v1208 + 8 * v1207--) * v1210.rem;
                }
                while (v1207 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1616 + (int)v1206), 1, (const int *)(v1662 + (int)v1199), v1196, 1, v1570);
              v1196 = (int *)((char *)v1196 + v1570);
              v1195 += v1570;
            }
            while (v1195 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v187 == 2)
          {
            int v1211 = *v34;
            if (*v34)
            {
              unint64_t v1212 = 0;
              uint64_t v1213 = 0;
              uint64_t v1214 = 0;
              uint64_t v1215 = *(void *)(v33 + 152);
              v1216 = v92[19];
              vDSP_Length v1217 = (int)v188;
              v1218 = (int *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v1219 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1215 + v1214), 1, (int *)((char *)v1216 + v1213), v1218, 1, v1217);
                    uint64_t v33 = *a1;
                    v1220 = *(void **)(*a1 + 24);
                    uint64_t v1221 = v1220[1];
                    v1214 += v1221;
                    uint64_t v92 = (int **)*a2;
                    v1222 = *(int **)(*a2 + 24);
                    uint64_t v1223 = *((void *)v1222 + 1);
                    v1213 += v1223;
                    v1218 = (int *)((char *)v1218 + v1217);
                    ++v1219;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v1224 = v34[1];
                  }
                  while (v1219 < v1224);
                  int v1211 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v1224 = 0;
                  v1220 = *(void **)(v33 + 24);
                  uint64_t v1221 = v1220[1];
                  v1222 = v92[3];
                  uint64_t v1223 = *((void *)v1222 + 1);
                }
                uint64_t v1214 = *v1220 + v1214 - v1224 * v1221;
                uint64_t v1213 = *(void *)v1222 + v1213 - v1223 * v93[1];
                ++v1212;
              }
              while (v1212 < v1211);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v847 = 0;
              uint64_t v848 = 0;
              uint64_t v849 = 0;
              uint64_t v850 = *(void *)(v33 + 152);
              v851 = v92[19];
              vDSP_Length v852 = (int)v188;
              v853 = (int *)v32[19];
              do
              {
                vDSP_vsaddi((const int *)(v850 + v849), 1, (int *)((char *)v851 + v848), v853, 1, v852);
                v849 += **(void **)(*a1 + 24);
                v848 += **(void **)(*a2 + 24);
                v853 = (int *)((char *)v853 + v852);
                ++v847;
              }
              while (v847 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v1225 = 0;
            v1617 = v92[19];
            uint64_t v1663 = *(void *)(v33 + 152);
            vDSP_Length v1571 = (int)v188;
            v1226 = (int *)v32[19];
            do
            {
              uint64_t v1227 = *(void *)*a1;
              unint64_t v1228 = (unint64_t)(*(void *)(*a1 + 8) - v1227) >> 2;
              uint64_t v1229 = 0;
              uint64_t v1230 = (v1228 - 1);
              if ((int)v1228 - 1 >= 0)
              {
                uint64_t v1231 = *(void *)(*a1 + 24);
                int v1232 = v1225;
                do
                {
                  ldiv_t v1233 = ldiv(v1232, *(int *)(v1227 + 4 * v1230));
                  int v1232 = v1233.quot;
                  v1229 += *(void *)(v1231 + 8 * v1230--) * v1233.rem;
                }
                while (v1230 != -1);
              }
              uint64_t v1234 = *(void *)*a2;
              unint64_t v1235 = (unint64_t)(*(void *)(*a2 + 8) - v1234) >> 2;
              uint64_t v1236 = 0;
              uint64_t v1237 = (v1235 - 1);
              if ((int)v1235 - 1 >= 0)
              {
                uint64_t v1238 = *(void *)(*a2 + 24);
                int v1239 = v1225;
                do
                {
                  ldiv_t v1240 = ldiv(v1239, *(int *)(v1234 + 4 * v1237));
                  int v1239 = v1240.quot;
                  v1236 += *(void *)(v1238 + 8 * v1237--) * v1240.rem;
                }
                while (v1237 != -1);
              }
              vDSP_vsaddi((const int *)(v1663 + (int)v1229), 1, (int *)((char *)v1617 + (int)v1236), v1226, 1, v1571);
              v1226 = (int *)((char *)v1226 + v1571);
              v1225 += v1571;
            }
            while (v1225 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v187 == 2)
          {
            int v959 = *v34;
            if (*v34)
            {
              unint64_t v960 = 0;
              uint64_t v961 = 0;
              uint64_t v962 = 0;
              uint64_t v963 = *(void *)(v33 + 152);
              v964 = v92[19];
              vDSP_Length v965 = (int)v188;
              v966 = (int *)v32[19];
              do
              {
                if (v34[1])
                {
                  unint64_t v967 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v963 + v962), 1, (int *)((char *)v964 + v961), 1, v966, 1, v965);
                    uint64_t v33 = *a1;
                    v968 = *(void **)(*a1 + 24);
                    uint64_t v969 = v968[1];
                    v962 += v969;
                    uint64_t v92 = (int **)*a2;
                    v970 = *(int **)(*a2 + 24);
                    uint64_t v971 = *((void *)v970 + 1);
                    v961 += v971;
                    v966 = (int *)((char *)v966 + v965);
                    ++v967;
                    unint64_t v34 = *(int **)*a1;
                    unint64_t v972 = v34[1];
                  }
                  while (v967 < v972);
                  int v959 = *v34;
                  uint64_t v93 = *v92;
                }
                else
                {
                  unint64_t v972 = 0;
                  v968 = *(void **)(v33 + 24);
                  uint64_t v969 = v968[1];
                  v970 = v92[3];
                  uint64_t v971 = *((void *)v970 + 1);
                }
                uint64_t v962 = *v968 + v962 - v972 * v969;
                uint64_t v961 = *(void *)v970 + v961 - v971 * v93[1];
                ++v960;
              }
              while (v960 < v959);
            }
          }
          else if (v187 == 1)
          {
            if (*v34)
            {
              unint64_t v189 = 0;
              uint64_t v190 = 0;
              uint64_t v191 = 0;
              uint64_t v192 = *(void *)(v33 + 152);
              uint64_t v193 = v92[19];
              vDSP_Length v194 = (int)v188;
              long long v195 = (int *)v32[19];
              do
              {
                vDSP_vaddi((const int *)(v192 + v191), 1, (int *)((char *)v193 + v190), 1, v195, 1, v194);
                v191 += **(void **)(*a1 + 24);
                v190 += **(void **)(*a2 + 24);
                long long v195 = (int *)((char *)v195 + v194);
                ++v189;
              }
              while (v189 < **(int **)*a1);
            }
          }
          else if (v32[6])
          {
            unint64_t v973 = 0;
            v1602 = v92[19];
            uint64_t v1648 = *(void *)(v33 + 152);
            vDSP_Length v1556 = (int)v188;
            v974 = (int *)v32[19];
            do
            {
              uint64_t v975 = *(void *)*a1;
              unint64_t v976 = (unint64_t)(*(void *)(*a1 + 8) - v975) >> 2;
              uint64_t v977 = 0;
              uint64_t v978 = (v976 - 1);
              if ((int)v976 - 1 >= 0)
              {
                uint64_t v979 = *(void *)(*a1 + 24);
                int v980 = v973;
                do
                {
                  ldiv_t v981 = ldiv(v980, *(int *)(v975 + 4 * v978));
                  int v980 = v981.quot;
                  v977 += *(void *)(v979 + 8 * v978--) * v981.rem;
                }
                while (v978 != -1);
              }
              uint64_t v982 = *(void *)*a2;
              unint64_t v983 = (unint64_t)(*(void *)(*a2 + 8) - v982) >> 2;
              uint64_t v984 = 0;
              uint64_t v985 = (v983 - 1);
              if ((int)v983 - 1 >= 0)
              {
                uint64_t v986 = *(void *)(*a2 + 24);
                int v987 = v973;
                do
                {
                  ldiv_t v988 = ldiv(v987, *(int *)(v982 + 4 * v985));
                  int v987 = v988.quot;
                  v984 += *(void *)(v986 + 8 * v985--) * v988.rem;
                }
                while (v985 != -1);
              }
              vDSP_vaddi((const int *)(v1648 + (int)v977), 1, (int *)((char *)v1602 + (int)v984), 1, v974, 1, v1556);
              v974 = (int *)((char *)v974 + v1556);
              v973 += v1556;
            }
            while (v973 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_260:
          switch(v184)
          {
            case 1uLL:
              if (v32[6])
              {
                unint64_t v196 = 0;
                uint64_t v197 = 0;
                uint64_t v198 = 0;
                uint64_t v199 = *(void *)(v33 + 152);
                std::vector<int> v200 = v92[19];
                uint64_t v201 = v32[19];
                do
                {
                  *(unsigned char *)(v201 + v196) = *((unsigned char *)v200 + v197) + *(unsigned char *)(v199 + v198);
                  v198 += **(void **)(*a1 + 24);
                  v197 += **(void **)(*a2 + 24);
                  ++v196;
                }
                while (v196 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v391 = *v34;
              if (*v34)
              {
                unint64_t v392 = 0;
                uint64_t v393 = 0;
                uint64_t v394 = 0;
                uint64_t v395 = 0;
                uint64_t v396 = *(void *)(v33 + 152);
                v397 = v92[19];
                uint64_t v398 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v399 = 0;
                    do
                    {
                      *(unsigned char *)(v398 + v393 + v399) = *((unsigned char *)v397 + v394) + *(unsigned char *)(v396 + v395);
                      uint64_t v33 = *a1;
                      v400 = *(void **)(*a1 + 24);
                      uint64_t v401 = v400[1];
                      v395 += v401;
                      uint64_t v92 = (int **)*a2;
                      v402 = *(int **)(*a2 + 24);
                      uint64_t v403 = *((void *)v402 + 1);
                      v394 += v403;
                      ++v399;
                      unint64_t v34 = *(int **)*a1;
                      unint64_t v404 = v34[1];
                    }
                    while (v399 < v404);
                    int v391 = *v34;
                    uint64_t v93 = *v92;
                    v393 += v399;
                  }
                  else
                  {
                    unint64_t v404 = 0;
                    v400 = *(void **)(v33 + 24);
                    uint64_t v401 = v400[1];
                    v402 = v92[3];
                    uint64_t v403 = *((void *)v402 + 1);
                  }
                  uint64_t v395 = *v400 + v395 - v404 * v401;
                  uint64_t v394 = *(void *)v402 + v394 - v403 * v93[1];
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3uLL:
              int v405 = *v34;
              if (*v34)
              {
                unint64_t v406 = 0;
                uint64_t v407 = 0;
                uint64_t v408 = 0;
                uint64_t v409 = 0;
                uint64_t v410 = *(void *)(v33 + 152);
                v411 = v92[19];
                uint64_t v412 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v413 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        unint64_t v414 = 0;
                        do
                        {
                          *(unsigned char *)(v412 + v407 + v414) = *((unsigned char *)v411 + v408) + *(unsigned char *)(v410 + v409);
                          uint64_t v33 = *a1;
                          v415 = *(void **)(*a1 + 24);
                          uint64_t v416 = v415[2];
                          v409 += v416;
                          uint64_t v92 = (int **)*a2;
                          v417 = *(int **)(*a2 + 24);
                          uint64_t v418 = *((void *)v417 + 2);
                          v408 += v418;
                          ++v414;
                          unint64_t v34 = *(int **)*a1;
                          unint64_t v419 = v34[2];
                        }
                        while (v414 < v419);
                        uint64_t v93 = *v92;
                        v407 += v414;
                      }
                      else
                      {
                        unint64_t v419 = 0;
                        v415 = *(void **)(v33 + 24);
                        uint64_t v416 = v415[2];
                        v417 = v92[3];
                        uint64_t v418 = *((void *)v417 + 2);
                      }
                      uint64_t v420 = v415[1];
                      uint64_t v409 = v420 + v409 - v419 * v416;
                      uint64_t v408 = *((void *)v417 + 1) + v408 - v418 * v93[2];
                      ++v413;
                      unint64_t v421 = v34[1];
                    }
                    while (v413 < v421);
                    int v405 = *v34;
                  }
                  else
                  {
                    unint64_t v421 = 0;
                    v415 = *(void **)(v33 + 24);
                    uint64_t v420 = v415[1];
                  }
                  uint64_t v409 = *v415 + v409 - v421 * v420;
                  uint64_t v408 = *(void *)v92[3] + v408 - *((void *)v92[3] + 1) * v93[1];
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            case 4uLL:
              int v422 = *v34;
              if (*v34)
              {
                unint64_t v423 = 0;
                uint64_t v424 = 0;
                uint64_t v425 = 0;
                uint64_t v426 = 0;
                uint64_t v427 = *(void *)(v33 + 152);
                v428 = v92[19];
                uint64_t v429 = v32[19];
                do
                {
                  if (v34[1])
                  {
                    unint64_t v430 = 0;
                    do
                    {
                      if (v34[2])
                      {
                        unint64_t v431 = 0;
                        do
                        {
                          if (v34[3])
                          {
                            unint64_t v432 = 0;
                            do
                            {
                              *(unsigned char *)(v429 + v424 + v432) = *((unsigned char *)v428 + v425) + *(unsigned char *)(v427 + v426);
                              uint64_t v33 = *a1;
                              v433 = *(void **)(*a1 + 24);
                              uint64_t v434 = v433[3];
                              v426 += v434;
                              uint64_t v92 = (int **)*a2;
                              v435 = *(int **)(*a2 + 24);
                              uint64_t v436 = *((void *)v435 + 3);
                              v425 += v436;
                              ++v432;
                              unint64_t v34 = *(int **)*a1;
                              unint64_t v437 = v34[3];
                            }
                            while (v432 < v437);
                            uint64_t v93 = *v92;
                            v424 += v432;
                          }
                          else
                          {
                            unint64_t v437 = 0;
                            v433 = *(void **)(v33 + 24);
                            uint64_t v434 = v433[3];
                            v435 = v92[3];
                            uint64_t v436 = *((void *)v435 + 3);
                          }
                          uint64_t v438 = v433[2];
                          uint64_t v426 = v438 + v426 - v437 * v434;
                          uint64_t v425 = *((void *)v435 + 2) + v425 - v436 * v93[3];
                          ++v431;
                          unint64_t v439 = v34[2];
                        }
                        while (v431 < v439);
                      }
                      else
                      {
                        unint64_t v439 = 0;
                        v433 = *(void **)(v33 + 24);
                        uint64_t v438 = v433[2];
                      }
                      uint64_t v426 = v433[1] + v426 - v439 * v438;
                      uint64_t v425 = *((void *)v92[3] + 1) + v425 - *((void *)v92[3] + 2) * v93[2];
                      ++v430;
                      unint64_t v440 = v34[1];
                    }
                    while (v430 < v440);
                    int v422 = *v34;
                  }
                  else
                  {
                    unint64_t v440 = 0;
                  }
                  uint64_t v426 = **(void **)(v33 + 24) + v426 - *(void *)(*(void *)(v33 + 24) + 8) * v440;
                  uint64_t v425 = *(void *)v92[3] + v425 - *((void *)v92[3] + 1) * v93[1];
                  ++v423;
                }
                while (v423 < v422);
              }
              break;
            default:
              if (v32[6])
              {
                unint64_t v375 = 0;
                v1592 = v92[19];
                uint64_t v1638 = *(void *)(v33 + 152);
                uint64_t v376 = v32[19];
                do
                {
                  uint64_t v377 = *(void *)*a1;
                  unint64_t v378 = (unint64_t)(*(void *)(*a1 + 8) - v377) >> 2;
                  uint64_t v379 = 0;
                  uint64_t v380 = (v378 - 1);
                  if ((int)v378 - 1 >= 0)
                  {
                    uint64_t v381 = *(void *)(*a1 + 24);
                    int v382 = v375;
                    do
                    {
                      ldiv_t v383 = ldiv(v382, *(int *)(v377 + 4 * v380));
                      int v382 = v383.quot;
                      v379 += *(void *)(v381 + 8 * v380--) * v383.rem;
                    }
                    while (v380 != -1);
                  }
                  uint64_t v384 = *(void *)*a2;
                  unint64_t v385 = (unint64_t)(*(void *)(*a2 + 8) - v384) >> 2;
                  uint64_t v386 = 0;
                  uint64_t v387 = (v385 - 1);
                  if ((int)v385 - 1 >= 0)
                  {
                    uint64_t v388 = *(void *)(*a2 + 24);
                    int v389 = v375;
                    do
                    {
                      ldiv_t v390 = ldiv(v389, *(int *)(v384 + 4 * v387));
                      int v389 = v390.quot;
                      v386 += *(void *)(v388 + 8 * v387--) * v390.rem;
                    }
                    while (v387 != -1);
                  }
                  *(unsigned char *)(v376 + v375++) = *((unsigned char *)v1592 + (int)v386) + *(unsigned char *)(v1638 + (int)v379);
                }
                while (v375 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          goto LABEL_10;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          int v40 = *(void **)a3;
          uint64_t v41 = *a1;
          int v42 = *(int **)*a1;
          uint64_t v43 = (*(void *)(*a1 + 8) - (void)v42) >> 2;
          uint64_t v44 = (v43 - 1);
          if ((int)v44 >= -1) {
            int v45 = -1;
          }
          else {
            int v45 = v43 - 1;
          }
          int v46 = v45 + 1;
          int v47 = v43 + 1;
          break;
      }
      while (1)
      {
        unsigned int v48 = v47 - 2;
        if (v47 - 2 < 0) {
          break;
        }
        --v47;
        if (*(void *)(*(void *)(v41 + 24) + 8 * v48) != *(void *)(v40[3] + 8 * v48)) {
          goto LABEL_87;
        }
      }
      int v47 = v46;
LABEL_87:
      uint64_t v99 = (int **)*a2;
      int v100 = *(int **)*a2;
      uint64_t v101 = (*(void *)(*a2 + 8) - (void)v100) >> 2;
      uint64_t v102 = (v101 - 1);
      if ((int)v102 >= -1) {
        int v103 = -1;
      }
      else {
        int v103 = v101 - 1;
      }
      int v104 = v103 + 1;
      int v105 = v101 + 1;
      while (1)
      {
        unsigned int v106 = v105 - 2;
        if (v105 - 2 < 0) {
          break;
        }
        --v105;
        if (*(void *)&v99[3][2 * v106] != *(void *)(v40[3] + 8 * v106)) {
          goto LABEL_136;
        }
      }
      int v105 = v104;
LABEL_136:
      int v142 = v43 + 1;
      while (1)
      {
        unsigned int v143 = v142 - 2;
        if (v142 - 2 < 0) {
          break;
        }
        --v142;
        if (*(void *)(*(void *)(v41 + 24) + 8 * v143)) {
          goto LABEL_171;
        }
      }
      int v142 = v46;
LABEL_171:
      int v156 = v101 + 1;
      while (1)
      {
        int v157 = v156 - 2;
        if (v156 - 2 < 0) {
          break;
        }
        --v156;
        if (*(void *)&v99[3][2 * v157]) {
          goto LABEL_266;
        }
      }
      int v156 = v104;
LABEL_266:
      unint64_t v202 = (uint64_t)(v40[1] - *v40) >> 2;
      if (v47 <= v105) {
        int v203 = v105;
      }
      else {
        int v203 = v47;
      }
      if (v47 <= v156) {
        int v47 = v156;
      }
      if (v142 > v105) {
        int v105 = v142;
      }
      if (v202 > v105) {
        int v204 = 1;
      }
      else {
        int v204 = 4;
      }
      if (v202 <= v105) {
        int v105 = (uint64_t)(v40[1] - *v40) >> 2;
      }
      if (v202 <= v47) {
        int v47 = v105;
      }
      else {
        int v204 = 2;
      }
      if (v202 <= v203)
      {
        int v205 = v47;
      }
      else
      {
        int v204 = 3;
        int v205 = v203;
      }
      if (!v205) {
        goto LABEL_295;
      }
      unint64_t v206 = *(void *)(v40[3] + 8 * (v205 - 1));
      if (v206 < 0x10) {
        goto LABEL_295;
      }
      switch(v204)
      {
        case 1:
          if (v205 == 2)
          {
            int v1241 = *v42;
            if (*v42)
            {
              uint64_t v1242 = 0;
              uint64_t v1243 = 0;
              uint64_t v1664 = *(void *)(v41 + 152);
              v1618 = v99[19];
              v1244 = (int *)v40[19];
              unint64_t v1538 = 0;
              vDSP_Length v1572 = (int)v206;
              uint64_t v1245 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v1246 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1618[v1242], 1, (const int *)(v1664 + 4 * v1243), v1244, 1, v1572);
                    uint64_t v41 = *a1;
                    v1247 = *(void **)(*a1 + 24);
                    uint64_t v1248 = v1247[1];
                    v1243 += v1248;
                    uint64_t v99 = (int **)*a2;
                    v1249 = *(int **)(*a2 + 24);
                    uint64_t v1250 = *((void *)v1249 + 1);
                    v1242 += v1250;
                    ++v1246;
                    int v42 = *(int **)*a1;
                    unint64_t v1251 = v42[1];
                    v1244 = (int *)((char *)v1244 + v1245);
                  }
                  while (v1246 < v1251);
                  int v1241 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v1251 = 0;
                  v1247 = *(void **)(v41 + 24);
                  uint64_t v1248 = v1247[1];
                  v1249 = v99[3];
                  uint64_t v1250 = *((void *)v1249 + 1);
                }
                uint64_t v1243 = *v1247 + v1243 - v1251 * v1248;
                uint64_t v1242 = *(void *)v1249 + v1242 - v1250 * v100[1];
                ++v1538;
              }
              while (v1538 < v1241);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v854 = 0;
              uint64_t v855 = 0;
              uint64_t v856 = 0;
              uint64_t v857 = *(void *)(v41 + 152);
              v858 = v99[19];
              vDSP_Length v859 = (int)v206;
              uint64_t v860 = 4 * (int)v206;
              v861 = (int *)v40[19];
              do
              {
                vDSP_vsaddi(&v858[v855], 1, (const int *)(v857 + 4 * v856), v861, 1, v859);
                v856 += **(void **)(*a1 + 24);
                v855 += **(void **)(*a2 + 24);
                ++v854;
                v861 = (int *)((char *)v861 + v860);
              }
              while (v854 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1252 = 0;
            v1619 = v99[19];
            uint64_t v1665 = *(void *)(v41 + 152);
            vDSP_Length v1573 = (int)v206;
            v1253 = (int *)v40[19];
            do
            {
              uint64_t v1254 = *(void *)*a1;
              unint64_t v1255 = (unint64_t)(*(void *)(*a1 + 8) - v1254) >> 2;
              uint64_t v1256 = 0;
              uint64_t v1257 = (v1255 - 1);
              if ((int)v1255 - 1 >= 0)
              {
                uint64_t v1258 = *(void *)(*a1 + 24);
                int v1259 = v1252;
                do
                {
                  ldiv_t v1260 = ldiv(v1259, *(int *)(v1254 + 4 * v1257));
                  int v1259 = v1260.quot;
                  v1256 += *(void *)(v1258 + 8 * v1257--) * v1260.rem;
                }
                while (v1257 != -1);
              }
              uint64_t v1261 = *(void *)*a2;
              unint64_t v1262 = (unint64_t)(*(void *)(*a2 + 8) - v1261) >> 2;
              uint64_t v1263 = 0;
              uint64_t v1264 = (v1262 - 1);
              if ((int)v1262 - 1 >= 0)
              {
                uint64_t v1265 = *(void *)(*a2 + 24);
                int v1266 = v1252;
                do
                {
                  ldiv_t v1267 = ldiv(v1266, *(int *)(v1261 + 4 * v1264));
                  int v1266 = v1267.quot;
                  v1263 += *(void *)(v1265 + 8 * v1264--) * v1267.rem;
                }
                while (v1264 != -1);
              }
              vDSP_vsaddi(&v1619[(int)v1263], 1, (const int *)(v1665 + 4 * (int)v1256), v1253, 1, v1573);
              v1253 += v1573;
              v1252 += v1573;
            }
            while (v1252 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v205 == 2)
          {
            int v1268 = *v42;
            if (*v42)
            {
              uint64_t v1269 = 0;
              uint64_t v1270 = 0;
              uint64_t v1666 = *(void *)(v41 + 152);
              v1620 = v99[19];
              v1271 = (int *)v40[19];
              unint64_t v1539 = 0;
              vDSP_Length v1574 = (int)v206;
              uint64_t v1272 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v1273 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1666 + 4 * v1270), 1, &v1620[v1269], v1271, 1, v1574);
                    uint64_t v41 = *a1;
                    v1274 = *(void **)(*a1 + 24);
                    uint64_t v1275 = v1274[1];
                    v1270 += v1275;
                    uint64_t v99 = (int **)*a2;
                    v1276 = *(int **)(*a2 + 24);
                    uint64_t v1277 = *((void *)v1276 + 1);
                    v1269 += v1277;
                    ++v1273;
                    int v42 = *(int **)*a1;
                    unint64_t v1278 = v42[1];
                    v1271 = (int *)((char *)v1271 + v1272);
                  }
                  while (v1273 < v1278);
                  int v1268 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v1278 = 0;
                  v1274 = *(void **)(v41 + 24);
                  uint64_t v1275 = v1274[1];
                  v1276 = v99[3];
                  uint64_t v1277 = *((void *)v1276 + 1);
                }
                uint64_t v1270 = *v1274 + v1270 - v1278 * v1275;
                uint64_t v1269 = *(void *)v1276 + v1269 - v1277 * v100[1];
                ++v1539;
              }
              while (v1539 < v1268);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v862 = 0;
              uint64_t v863 = 0;
              uint64_t v864 = 0;
              uint64_t v865 = *(void *)(v41 + 152);
              v866 = v99[19];
              vDSP_Length v867 = (int)v206;
              uint64_t v868 = 4 * (int)v206;
              v869 = (int *)v40[19];
              do
              {
                vDSP_vsaddi((const int *)(v865 + 4 * v864), 1, &v866[v863], v869, 1, v867);
                v864 += **(void **)(*a1 + 24);
                v863 += **(void **)(*a2 + 24);
                ++v862;
                v869 = (int *)((char *)v869 + v868);
              }
              while (v862 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1279 = 0;
            v1621 = v99[19];
            uint64_t v1667 = *(void *)(v41 + 152);
            vDSP_Length v1575 = (int)v206;
            v1280 = (int *)v40[19];
            do
            {
              uint64_t v1281 = *(void *)*a1;
              unint64_t v1282 = (unint64_t)(*(void *)(*a1 + 8) - v1281) >> 2;
              uint64_t v1283 = 0;
              uint64_t v1284 = (v1282 - 1);
              if ((int)v1282 - 1 >= 0)
              {
                uint64_t v1285 = *(void *)(*a1 + 24);
                int v1286 = v1279;
                do
                {
                  ldiv_t v1287 = ldiv(v1286, *(int *)(v1281 + 4 * v1284));
                  int v1286 = v1287.quot;
                  v1283 += *(void *)(v1285 + 8 * v1284--) * v1287.rem;
                }
                while (v1284 != -1);
              }
              uint64_t v1288 = *(void *)*a2;
              unint64_t v1289 = (unint64_t)(*(void *)(*a2 + 8) - v1288) >> 2;
              uint64_t v1290 = 0;
              uint64_t v1291 = (v1289 - 1);
              if ((int)v1289 - 1 >= 0)
              {
                uint64_t v1292 = *(void *)(*a2 + 24);
                int v1293 = v1279;
                do
                {
                  ldiv_t v1294 = ldiv(v1293, *(int *)(v1288 + 4 * v1291));
                  int v1293 = v1294.quot;
                  v1290 += *(void *)(v1292 + 8 * v1291--) * v1294.rem;
                }
                while (v1291 != -1);
              }
              vDSP_vsaddi((const int *)(v1667 + 4 * (int)v1283), 1, &v1621[(int)v1290], v1280, 1, v1575);
              v1280 += v1575;
              v1279 += v1575;
            }
            while (v1279 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v205 == 2)
          {
            int v989 = *v42;
            if (*v42)
            {
              uint64_t v990 = 0;
              uint64_t v991 = 0;
              uint64_t v1649 = *(void *)(v41 + 152);
              v1603 = v99[19];
              v992 = (int *)v40[19];
              unint64_t v1534 = 0;
              vDSP_Length v1557 = (int)v206;
              uint64_t v993 = 4 * (int)v206;
              do
              {
                if (v42[1])
                {
                  unint64_t v994 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1649 + 4 * v991), 1, &v1603[v990], 1, v992, 1, v1557);
                    uint64_t v41 = *a1;
                    v995 = *(void **)(*a1 + 24);
                    uint64_t v996 = v995[1];
                    v991 += v996;
                    uint64_t v99 = (int **)*a2;
                    v997 = *(int **)(*a2 + 24);
                    uint64_t v998 = *((void *)v997 + 1);
                    v990 += v998;
                    ++v994;
                    int v42 = *(int **)*a1;
                    unint64_t v999 = v42[1];
                    v992 = (int *)((char *)v992 + v993);
                  }
                  while (v994 < v999);
                  int v989 = *v42;
                  int v100 = *v99;
                }
                else
                {
                  unint64_t v999 = 0;
                  v995 = *(void **)(v41 + 24);
                  uint64_t v996 = v995[1];
                  v997 = v99[3];
                  uint64_t v998 = *((void *)v997 + 1);
                }
                uint64_t v991 = *v995 + v991 - v999 * v996;
                uint64_t v990 = *(void *)v997 + v990 - v998 * v100[1];
                ++v1534;
              }
              while (v1534 < v989);
            }
          }
          else if (v205 == 1)
          {
            if (*v42)
            {
              unint64_t v207 = 0;
              uint64_t v208 = 0;
              uint64_t v209 = 0;
              uint64_t v210 = *(void *)(v41 + 152);
              uint64_t v211 = v99[19];
              vDSP_Length v212 = (int)v206;
              uint64_t v213 = 4 * (int)v206;
              int v214 = (int *)v40[19];
              do
              {
                vDSP_vaddi((const int *)(v210 + 4 * v209), 1, &v211[v208], 1, v214, 1, v212);
                v209 += **(void **)(*a1 + 24);
                v208 += **(void **)(*a2 + 24);
                ++v207;
                int v214 = (int *)((char *)v214 + v213);
              }
              while (v207 < **(int **)*a1);
            }
          }
          else if (v40[6])
          {
            unint64_t v1000 = 0;
            v1604 = v99[19];
            uint64_t v1650 = *(void *)(v41 + 152);
            vDSP_Length v1558 = (int)v206;
            v1001 = (int *)v40[19];
            do
            {
              uint64_t v1002 = *(void *)*a1;
              unint64_t v1003 = (unint64_t)(*(void *)(*a1 + 8) - v1002) >> 2;
              uint64_t v1004 = 0;
              uint64_t v1005 = (v1003 - 1);
              if ((int)v1003 - 1 >= 0)
              {
                uint64_t v1006 = *(void *)(*a1 + 24);
                int v1007 = v1000;
                do
                {
                  ldiv_t v1008 = ldiv(v1007, *(int *)(v1002 + 4 * v1005));
                  int v1007 = v1008.quot;
                  v1004 += *(void *)(v1006 + 8 * v1005--) * v1008.rem;
                }
                while (v1005 != -1);
              }
              uint64_t v1009 = *(void *)*a2;
              unint64_t v1010 = (unint64_t)(*(void *)(*a2 + 8) - v1009) >> 2;
              uint64_t v1011 = 0;
              uint64_t v1012 = (v1010 - 1);
              if ((int)v1010 - 1 >= 0)
              {
                uint64_t v1013 = *(void *)(*a2 + 24);
                int v1014 = v1000;
                do
                {
                  ldiv_t v1015 = ldiv(v1014, *(int *)(v1009 + 4 * v1012));
                  int v1014 = v1015.quot;
                  v1011 += *(void *)(v1013 + 8 * v1012--) * v1015.rem;
                }
                while (v1012 != -1);
              }
              vDSP_vaddi((const int *)(v1650 + 4 * (int)v1004), 1, &v1604[(int)v1011], 1, v1001, 1, v1558);
              v1001 += v1558;
              v1000 += v1558;
            }
            while (v1000 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_295:
          switch(v202)
          {
            case 1uLL:
              uint64_t v215 = v40[6];
              if (v215)
              {
                int v216 = *(_DWORD **)(v41 + 152);
                int v217 = v99[19];
                std::string v218 = (_DWORD *)v40[19];
                uint64_t v219 = 4 * *(void *)v99[3];
                uint64_t v220 = 4 * **(void **)(v41 + 24);
                do
                {
                  *v218++ = *v217 + *v216;
                  int v217 = (int *)((char *)v217 + v219);
                  int v216 = (_DWORD *)((char *)v216 + v220);
                  --v215;
                }
                while (v215);
              }
              break;
            case 2uLL:
              int v452 = *v42;
              if (*v42)
              {
                unint64_t v453 = 0;
                uint64_t v454 = 0;
                uint64_t v455 = 0;
                uint64_t v456 = 0;
                uint64_t v457 = *(void *)(v41 + 152);
                v458 = v99[19];
                uint64_t v459 = v40[19];
                v460 = *(uint64_t **)(v41 + 24);
                uint64_t v461 = *v460;
                uint64_t v462 = v460[1];
                v463 = v99[3];
                uint64_t v465 = *(void *)v463;
                uint64_t v464 = *((void *)v463 + 1);
                int v466 = v42[1];
                do
                {
                  if (v466)
                  {
                    for (unint64_t i = 0; i < v466; ++i)
                    {
                      *(_DWORD *)(v459 + 4 * v454 + 4 * i) = v458[v455] + *(_DWORD *)(v457 + 4 * v456);
                      v456 += v462;
                      v455 += v464;
                      int v466 = v42[1];
                    }
                    uint64_t v468 = v466;
                    int v452 = *v42;
                    v454 += i;
                  }
                  else
                  {
                    uint64_t v468 = 0;
                  }
                  uint64_t v456 = v456 + v461 - v468 * v462;
                  uint64_t v455 = v455 + v465 - v464 * v100[1];
                  ++v453;
                }
                while (v453 < v452);
              }
              break;
            case 3uLL:
              int v469 = *v42;
              if (*v42)
              {
                unint64_t v470 = 0;
                uint64_t v471 = 0;
                uint64_t v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = *(void *)(v41 + 152);
                v475 = v99[19];
                uint64_t v476 = v40[19];
                v477 = *(uint64_t **)(v41 + 24);
                uint64_t v478 = *v477;
                uint64_t v479 = v477[1];
                v480 = v99[3];
                uint64_t v481 = *(void *)v480;
                uint64_t v482 = *((void *)v480 + 1);
                int v483 = v42[1];
                int v484 = v483;
                do
                {
                  if (v484)
                  {
                    unint64_t v485 = 0;
                    uint64_t v486 = v477[2];
                    uint64_t v487 = *((void *)v480 + 2);
                    int v488 = v42[2];
                    do
                    {
                      if (v488)
                      {
                        for (unint64_t j = 0; j < v488; ++j)
                        {
                          *(_DWORD *)(v476 + 4 * v471 + 4 * j) = v475[v472] + *(_DWORD *)(v474 + 4 * v473);
                          v473 += v486;
                          v472 += v487;
                          int v488 = v42[2];
                        }
                        uint64_t v490 = v488;
                        int v483 = v42[1];
                        v471 += j;
                      }
                      else
                      {
                        uint64_t v490 = 0;
                      }
                      uint64_t v473 = v473 + v479 - v490 * v486;
                      uint64_t v472 = v472 + v482 - v487 * v100[2];
                      ++v485;
                    }
                    while (v485 < v483);
                    uint64_t v491 = v483;
                    int v469 = *v42;
                    int v484 = v483;
                  }
                  else
                  {
                    uint64_t v491 = 0;
                  }
                  uint64_t v473 = v473 + v478 - v491 * v479;
                  uint64_t v472 = v472 + v481 - v482 * v100[1];
                  ++v470;
                }
                while (v470 < v469);
              }
              break;
            case 4uLL:
              int v492 = *v42;
              if (*v42)
              {
                unint64_t v493 = 0;
                uint64_t v494 = 0;
                uint64_t v495 = 0;
                uint64_t v496 = 0;
                uint64_t v497 = *(void *)(v41 + 152);
                v498 = v99[19];
                uint64_t v499 = v40[19];
                v500 = *(uint64_t **)(v41 + 24);
                uint64_t v501 = *v500;
                uint64_t v502 = v500[1];
                v503 = v99[3];
                uint64_t v504 = *(void *)v503;
                uint64_t v505 = *((void *)v503 + 1);
                int v506 = v42[1];
                int v507 = v506;
                do
                {
                  if (v507)
                  {
                    unint64_t v508 = 0;
                    uint64_t v509 = v500[2];
                    uint64_t v510 = *((void *)v503 + 2);
                    int v511 = v42[2];
                    int v512 = v511;
                    do
                    {
                      if (v512)
                      {
                        unint64_t v513 = 0;
                        uint64_t v514 = v500[3];
                        uint64_t v515 = *((void *)v503 + 3);
                        int v516 = v42[3];
                        do
                        {
                          if (v516)
                          {
                            for (unint64_t k = 0; k < v516; ++k)
                            {
                              *(_DWORD *)(v499 + 4 * v494 + 4 * k) = v498[v495] + *(_DWORD *)(v497 + 4 * v496);
                              v496 += v514;
                              v495 += v515;
                              int v516 = v42[3];
                            }
                            uint64_t v518 = v516;
                            int v511 = v42[2];
                            v494 += k;
                          }
                          else
                          {
                            uint64_t v518 = 0;
                          }
                          uint64_t v496 = v496 + v509 - v518 * v514;
                          uint64_t v495 = v495 + v510 - v515 * v100[3];
                          ++v513;
                        }
                        while (v513 < v511);
                        uint64_t v519 = v511;
                        int v506 = v42[1];
                        int v512 = v511;
                      }
                      else
                      {
                        uint64_t v519 = 0;
                      }
                      uint64_t v496 = v496 + v502 - v519 * v509;
                      uint64_t v495 = v495 + v505 - v510 * v100[2];
                      ++v508;
                    }
                    while (v508 < v506);
                    uint64_t v520 = v506;
                    int v492 = *v42;
                    int v507 = v506;
                  }
                  else
                  {
                    uint64_t v520 = 0;
                  }
                  uint64_t v496 = v496 + v501 - v520 * v502;
                  uint64_t v495 = v495 + v504 - v505 * v100[1];
                  ++v493;
                }
                while (v493 < v492);
              }
              break;
            default:
              uint64_t v1593 = v40[6];
              uint64_t v1639 = v44;
              if (v1593)
              {
                uint64_t v441 = 0;
                v1528 = v99[19];
                uint64_t v1548 = *(void *)(v41 + 152);
                uint64_t v1521 = v40[19];
                do
                {
                  uint64_t v442 = v1639;
                  if ((v1639 & 0x80000000) != 0)
                  {
                    LODWORD(v443) = 0;
                  }
                  else
                  {
                    uint64_t v443 = 0;
                    uint64_t v444 = *(void *)(v41 + 24);
                    int v445 = v441;
                    do
                    {
                      ldiv_t v446 = ldiv(v445, v42[v442]);
                      int v445 = v446.quot;
                      v443 += *(void *)(v444 + 8 * v442--) * v446.rem;
                    }
                    while (v442 != -1);
                  }
                  uint64_t v447 = 0;
                  if ((v102 & 0x80000000) == 0)
                  {
                    v448 = v99[3];
                    uint64_t v449 = v102;
                    int v450 = v441;
                    do
                    {
                      ldiv_t v451 = ldiv(v450, v100[v449]);
                      int v450 = v451.quot;
                      v447 += *(void *)&v448[2 * v449--] * v451.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_DWORD *)(v1521 + 4 * v441++) = v1528[(int)v447] + *(_DWORD *)(v1548 + 4 * (int)v443);
                }
                while (v441 != v1593);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v10)
      {
        case 0:
LABEL_7:
          char v7 = **(unsigned char **)(*a2 + 152) + **(unsigned char **)(*a1 + 152);
LABEL_8:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v49 = *(void **)a3;
          uint64_t v50 = *a1;
          uint64_t v51 = *(int **)*a1;
          uint64_t v52 = (*(void *)(*a1 + 8) - (void)v51) >> 2;
          int v53 = v52 - 1;
          if ((int)v52 - 1 >= -1) {
            int v53 = -1;
          }
          int v54 = v53 + 1;
          int v55 = v52 + 1;
          break;
      }
      while (1)
      {
        unsigned int v56 = v55 - 2;
        if (v55 - 2 < 0) {
          break;
        }
        --v55;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v56) != *(void *)(v49[3] + 8 * v56)) {
          goto LABEL_95;
        }
      }
      int v55 = v54;
LABEL_95:
      unsigned int v107 = (int **)*a2;
      unsigned int v108 = *(int **)*a2;
      uint64_t v109 = (*(void *)(*a2 + 8) - (void)v108) >> 2;
      int v110 = v109 - 1;
      if ((int)v109 - 1 >= -1) {
        int v110 = -1;
      }
      int v111 = v110 + 1;
      int v112 = v109 + 1;
      while (1)
      {
        unsigned int v113 = v112 - 2;
        if (v112 - 2 < 0) {
          break;
        }
        --v112;
        if (*(void *)&v107[3][2 * v113] != *(void *)(v49[3] + 8 * v113)) {
          goto LABEL_141;
        }
      }
      int v112 = v111;
LABEL_141:
      int v144 = v52 + 1;
      while (1)
      {
        unsigned int v145 = v144 - 2;
        if (v144 - 2 < 0) {
          break;
        }
        --v144;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v145)) {
          goto LABEL_176;
        }
      }
      int v144 = v54;
LABEL_176:
      int v158 = v109 + 1;
      while (1)
      {
        int v159 = v158 - 2;
        if (v158 - 2 < 0) {
          break;
        }
        --v158;
        if (*(void *)&v107[3][2 * v159]) {
          goto LABEL_301;
        }
      }
      int v158 = v111;
LABEL_301:
      unint64_t v221 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v55 <= v112) {
        int v222 = v112;
      }
      else {
        int v222 = v55;
      }
      if (v55 <= v158) {
        int v55 = v158;
      }
      if (v144 > v112) {
        int v112 = v144;
      }
      if (v221 > v112) {
        int v223 = 1;
      }
      else {
        int v223 = 4;
      }
      if (v221 <= v112) {
        int v112 = (uint64_t)(v49[1] - *v49) >> 2;
      }
      if (v221 <= v55) {
        int v55 = v112;
      }
      else {
        int v223 = 2;
      }
      if (v221 <= v222)
      {
        int v224 = v55;
      }
      else
      {
        int v223 = 3;
        int v224 = v222;
      }
      if (!v224) {
        goto LABEL_330;
      }
      unint64_t v225 = *(void *)(v49[3] + 8 * (v224 - 1));
      if (v225 < 0x10) {
        goto LABEL_330;
      }
      switch(v223)
      {
        case 1:
          if (v224 == 2)
          {
            int v1295 = *v51;
            if (*v51)
            {
              unint64_t v1296 = 0;
              uint64_t v1297 = 0;
              uint64_t v1298 = 0;
              uint64_t v1299 = *(void *)(v50 + 152);
              v1300 = v107[19];
              vDSP_Length v1301 = (int)v225;
              v1302 = (int *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1303 = 0;
                  do
                  {
                    vDSP_vsaddi((int *)((char *)v1300 + v1297), 1, (const int *)(v1299 + v1298), v1302, 1, v1301);
                    uint64_t v50 = *a1;
                    v1304 = *(void **)(*a1 + 24);
                    uint64_t v1305 = v1304[1];
                    v1298 += v1305;
                    unsigned int v107 = (int **)*a2;
                    v1306 = *(int **)(*a2 + 24);
                    uint64_t v1307 = *((void *)v1306 + 1);
                    v1297 += v1307;
                    v1302 = (int *)((char *)v1302 + v1301);
                    ++v1303;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1308 = v51[1];
                  }
                  while (v1303 < v1308);
                  int v1295 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1308 = 0;
                  v1304 = *(void **)(v50 + 24);
                  uint64_t v1305 = v1304[1];
                  v1306 = v107[3];
                  uint64_t v1307 = *((void *)v1306 + 1);
                }
                uint64_t v1298 = *v1304 + v1298 - v1308 * v1305;
                uint64_t v1297 = *(void *)v1306 + v1297 - v1307 * v108[1];
                ++v1296;
              }
              while (v1296 < v1295);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v870 = 0;
              uint64_t v871 = 0;
              uint64_t v872 = 0;
              uint64_t v873 = *(void *)(v50 + 152);
              v874 = v107[19];
              vDSP_Length v875 = (int)v225;
              v876 = (int *)v49[19];
              do
              {
                vDSP_vsaddi((int *)((char *)v874 + v871), 1, (const int *)(v873 + v872), v876, 1, v875);
                v872 += **(void **)(*a1 + 24);
                v871 += **(void **)(*a2 + 24);
                v876 = (int *)((char *)v876 + v875);
                ++v870;
              }
              while (v870 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1309 = 0;
            v1622 = v107[19];
            uint64_t v1668 = *(void *)(v50 + 152);
            vDSP_Length v1576 = (int)v225;
            v1310 = (int *)v49[19];
            do
            {
              uint64_t v1311 = *(void *)*a1;
              unint64_t v1312 = (unint64_t)(*(void *)(*a1 + 8) - v1311) >> 2;
              uint64_t v1313 = 0;
              uint64_t v1314 = (v1312 - 1);
              if ((int)v1312 - 1 >= 0)
              {
                uint64_t v1315 = *(void *)(*a1 + 24);
                int v1316 = v1309;
                do
                {
                  ldiv_t v1317 = ldiv(v1316, *(int *)(v1311 + 4 * v1314));
                  int v1316 = v1317.quot;
                  v1313 += *(void *)(v1315 + 8 * v1314--) * v1317.rem;
                }
                while (v1314 != -1);
              }
              uint64_t v1318 = *(void *)*a2;
              unint64_t v1319 = (unint64_t)(*(void *)(*a2 + 8) - v1318) >> 2;
              uint64_t v1320 = 0;
              uint64_t v1321 = (v1319 - 1);
              if ((int)v1319 - 1 >= 0)
              {
                uint64_t v1322 = *(void *)(*a2 + 24);
                int v1323 = v1309;
                do
                {
                  ldiv_t v1324 = ldiv(v1323, *(int *)(v1318 + 4 * v1321));
                  int v1323 = v1324.quot;
                  v1320 += *(void *)(v1322 + 8 * v1321--) * v1324.rem;
                }
                while (v1321 != -1);
              }
              vDSP_vsaddi((int *)((char *)v1622 + (int)v1320), 1, (const int *)(v1668 + (int)v1313), v1310, 1, v1576);
              v1310 = (int *)((char *)v1310 + v1576);
              v1309 += v1576;
            }
            while (v1309 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v224 == 2)
          {
            int v1325 = *v51;
            if (*v51)
            {
              unint64_t v1326 = 0;
              uint64_t v1327 = 0;
              uint64_t v1328 = 0;
              uint64_t v1329 = *(void *)(v50 + 152);
              v1330 = v107[19];
              vDSP_Length v1331 = (int)v225;
              v1332 = (int *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1333 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1329 + v1328), 1, (int *)((char *)v1330 + v1327), v1332, 1, v1331);
                    uint64_t v50 = *a1;
                    v1334 = *(void **)(*a1 + 24);
                    uint64_t v1335 = v1334[1];
                    v1328 += v1335;
                    unsigned int v107 = (int **)*a2;
                    v1336 = *(int **)(*a2 + 24);
                    uint64_t v1337 = *((void *)v1336 + 1);
                    v1327 += v1337;
                    v1332 = (int *)((char *)v1332 + v1331);
                    ++v1333;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1338 = v51[1];
                  }
                  while (v1333 < v1338);
                  int v1325 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1338 = 0;
                  v1334 = *(void **)(v50 + 24);
                  uint64_t v1335 = v1334[1];
                  v1336 = v107[3];
                  uint64_t v1337 = *((void *)v1336 + 1);
                }
                uint64_t v1328 = *v1334 + v1328 - v1338 * v1335;
                uint64_t v1327 = *(void *)v1336 + v1327 - v1337 * v108[1];
                ++v1326;
              }
              while (v1326 < v1325);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v877 = 0;
              uint64_t v878 = 0;
              uint64_t v879 = 0;
              uint64_t v880 = *(void *)(v50 + 152);
              v881 = v107[19];
              vDSP_Length v882 = (int)v225;
              v883 = (int *)v49[19];
              do
              {
                vDSP_vsaddi((const int *)(v880 + v879), 1, (int *)((char *)v881 + v878), v883, 1, v882);
                v879 += **(void **)(*a1 + 24);
                v878 += **(void **)(*a2 + 24);
                v883 = (int *)((char *)v883 + v882);
                ++v877;
              }
              while (v877 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1339 = 0;
            v1623 = v107[19];
            uint64_t v1669 = *(void *)(v50 + 152);
            vDSP_Length v1577 = (int)v225;
            v1340 = (int *)v49[19];
            do
            {
              uint64_t v1341 = *(void *)*a1;
              unint64_t v1342 = (unint64_t)(*(void *)(*a1 + 8) - v1341) >> 2;
              uint64_t v1343 = 0;
              uint64_t v1344 = (v1342 - 1);
              if ((int)v1342 - 1 >= 0)
              {
                uint64_t v1345 = *(void *)(*a1 + 24);
                int v1346 = v1339;
                do
                {
                  ldiv_t v1347 = ldiv(v1346, *(int *)(v1341 + 4 * v1344));
                  int v1346 = v1347.quot;
                  v1343 += *(void *)(v1345 + 8 * v1344--) * v1347.rem;
                }
                while (v1344 != -1);
              }
              uint64_t v1348 = *(void *)*a2;
              unint64_t v1349 = (unint64_t)(*(void *)(*a2 + 8) - v1348) >> 2;
              uint64_t v1350 = 0;
              uint64_t v1351 = (v1349 - 1);
              if ((int)v1349 - 1 >= 0)
              {
                uint64_t v1352 = *(void *)(*a2 + 24);
                int v1353 = v1339;
                do
                {
                  ldiv_t v1354 = ldiv(v1353, *(int *)(v1348 + 4 * v1351));
                  int v1353 = v1354.quot;
                  v1350 += *(void *)(v1352 + 8 * v1351--) * v1354.rem;
                }
                while (v1351 != -1);
              }
              vDSP_vsaddi((const int *)(v1669 + (int)v1343), 1, (int *)((char *)v1623 + (int)v1350), v1340, 1, v1577);
              v1340 = (int *)((char *)v1340 + v1577);
              v1339 += v1577;
            }
            while (v1339 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v224 == 2)
          {
            int v1016 = *v51;
            if (*v51)
            {
              unint64_t v1017 = 0;
              uint64_t v1018 = 0;
              uint64_t v1019 = 0;
              uint64_t v1020 = *(void *)(v50 + 152);
              v1021 = v107[19];
              vDSP_Length v1022 = (int)v225;
              v1023 = (int *)v49[19];
              do
              {
                if (v51[1])
                {
                  unint64_t v1024 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1020 + v1019), 1, (int *)((char *)v1021 + v1018), 1, v1023, 1, v1022);
                    uint64_t v50 = *a1;
                    v1025 = *(void **)(*a1 + 24);
                    uint64_t v1026 = v1025[1];
                    v1019 += v1026;
                    unsigned int v107 = (int **)*a2;
                    v1027 = *(int **)(*a2 + 24);
                    uint64_t v1028 = *((void *)v1027 + 1);
                    v1018 += v1028;
                    v1023 = (int *)((char *)v1023 + v1022);
                    ++v1024;
                    uint64_t v51 = *(int **)*a1;
                    unint64_t v1029 = v51[1];
                  }
                  while (v1024 < v1029);
                  int v1016 = *v51;
                  unsigned int v108 = *v107;
                }
                else
                {
                  unint64_t v1029 = 0;
                  v1025 = *(void **)(v50 + 24);
                  uint64_t v1026 = v1025[1];
                  v1027 = v107[3];
                  uint64_t v1028 = *((void *)v1027 + 1);
                }
                uint64_t v1019 = *v1025 + v1019 - v1029 * v1026;
                uint64_t v1018 = *(void *)v1027 + v1018 - v1028 * v108[1];
                ++v1017;
              }
              while (v1017 < v1016);
            }
          }
          else if (v224 == 1)
          {
            if (*v51)
            {
              unint64_t v226 = 0;
              uint64_t v227 = 0;
              uint64_t v228 = 0;
              uint64_t v229 = *(void *)(v50 + 152);
              v230 = v107[19];
              vDSP_Length v231 = (int)v225;
              uint64_t v232 = (int *)v49[19];
              do
              {
                vDSP_vaddi((const int *)(v229 + v228), 1, (int *)((char *)v230 + v227), 1, v232, 1, v231);
                v228 += **(void **)(*a1 + 24);
                v227 += **(void **)(*a2 + 24);
                uint64_t v232 = (int *)((char *)v232 + v231);
                ++v226;
              }
              while (v226 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1030 = 0;
            v1605 = v107[19];
            uint64_t v1651 = *(void *)(v50 + 152);
            vDSP_Length v1559 = (int)v225;
            v1031 = (int *)v49[19];
            do
            {
              uint64_t v1032 = *(void *)*a1;
              unint64_t v1033 = (unint64_t)(*(void *)(*a1 + 8) - v1032) >> 2;
              uint64_t v1034 = 0;
              uint64_t v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                uint64_t v1036 = *(void *)(*a1 + 24);
                int v1037 = v1030;
                do
                {
                  ldiv_t v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  int v1037 = v1038.quot;
                  v1034 += *(void *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              uint64_t v1039 = *(void *)*a2;
              unint64_t v1040 = (unint64_t)(*(void *)(*a2 + 8) - v1039) >> 2;
              uint64_t v1041 = 0;
              uint64_t v1042 = (v1040 - 1);
              if ((int)v1040 - 1 >= 0)
              {
                uint64_t v1043 = *(void *)(*a2 + 24);
                int v1044 = v1030;
                do
                {
                  ldiv_t v1045 = ldiv(v1044, *(int *)(v1039 + 4 * v1042));
                  int v1044 = v1045.quot;
                  v1041 += *(void *)(v1043 + 8 * v1042--) * v1045.rem;
                }
                while (v1042 != -1);
              }
              vDSP_vaddi((const int *)(v1651 + (int)v1034), 1, (int *)((char *)v1605 + (int)v1041), 1, v1031, 1, v1559);
              v1031 = (int *)((char *)v1031 + v1559);
              v1030 += v1559;
            }
            while (v1030 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_330:
          switch(v221)
          {
            case 1uLL:
              if (v49[6])
              {
                unint64_t v233 = 0;
                uint64_t v234 = 0;
                uint64_t v235 = 0;
                uint64_t v236 = *(void *)(v50 + 152);
                int v237 = v107[19];
                uint64_t v238 = v49[19];
                do
                {
                  *(unsigned char *)(v238 + v233) = *((unsigned char *)v237 + v234) + *(unsigned char *)(v236 + v235);
                  v235 += **(void **)(*a1 + 24);
                  v234 += **(void **)(*a2 + 24);
                  ++v233;
                }
                while (v233 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v537 = *v51;
              if (*v51)
              {
                unint64_t v538 = 0;
                uint64_t v539 = 0;
                uint64_t v540 = 0;
                uint64_t v541 = 0;
                uint64_t v542 = *(void *)(v50 + 152);
                v543 = v107[19];
                uint64_t v544 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v545 = 0;
                    do
                    {
                      *(unsigned char *)(v544 + v539 + v545) = *((unsigned char *)v543 + v540) + *(unsigned char *)(v542 + v541);
                      uint64_t v50 = *a1;
                      v546 = *(void **)(*a1 + 24);
                      uint64_t v547 = v546[1];
                      v541 += v547;
                      unsigned int v107 = (int **)*a2;
                      v548 = *(int **)(*a2 + 24);
                      uint64_t v549 = *((void *)v548 + 1);
                      v540 += v549;
                      ++v545;
                      uint64_t v51 = *(int **)*a1;
                      unint64_t v550 = v51[1];
                    }
                    while (v545 < v550);
                    int v537 = *v51;
                    unsigned int v108 = *v107;
                    v539 += v545;
                  }
                  else
                  {
                    unint64_t v550 = 0;
                    v546 = *(void **)(v50 + 24);
                    uint64_t v547 = v546[1];
                    v548 = v107[3];
                    uint64_t v549 = *((void *)v548 + 1);
                  }
                  uint64_t v541 = *v546 + v541 - v550 * v547;
                  uint64_t v540 = *(void *)v548 + v540 - v549 * v108[1];
                  ++v538;
                }
                while (v538 < v537);
              }
              break;
            case 3uLL:
              int v551 = *v51;
              if (*v51)
              {
                unint64_t v552 = 0;
                uint64_t v553 = 0;
                uint64_t v554 = 0;
                uint64_t v555 = 0;
                uint64_t v556 = *(void *)(v50 + 152);
                v557 = v107[19];
                uint64_t v558 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v559 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        unint64_t v560 = 0;
                        do
                        {
                          *(unsigned char *)(v558 + v553 + v560) = *((unsigned char *)v557 + v554) + *(unsigned char *)(v556 + v555);
                          uint64_t v50 = *a1;
                          v561 = *(void **)(*a1 + 24);
                          uint64_t v562 = v561[2];
                          v555 += v562;
                          unsigned int v107 = (int **)*a2;
                          v563 = *(int **)(*a2 + 24);
                          uint64_t v564 = *((void *)v563 + 2);
                          v554 += v564;
                          ++v560;
                          uint64_t v51 = *(int **)*a1;
                          unint64_t v565 = v51[2];
                        }
                        while (v560 < v565);
                        unsigned int v108 = *v107;
                        v553 += v560;
                      }
                      else
                      {
                        unint64_t v565 = 0;
                        v561 = *(void **)(v50 + 24);
                        uint64_t v562 = v561[2];
                        v563 = v107[3];
                        uint64_t v564 = *((void *)v563 + 2);
                      }
                      uint64_t v566 = v561[1];
                      uint64_t v555 = v566 + v555 - v565 * v562;
                      uint64_t v554 = *((void *)v563 + 1) + v554 - v564 * v108[2];
                      ++v559;
                      unint64_t v567 = v51[1];
                    }
                    while (v559 < v567);
                    int v551 = *v51;
                  }
                  else
                  {
                    unint64_t v567 = 0;
                    v561 = *(void **)(v50 + 24);
                    uint64_t v566 = v561[1];
                  }
                  uint64_t v555 = *v561 + v555 - v567 * v566;
                  uint64_t v554 = *(void *)v107[3] + v554 - *((void *)v107[3] + 1) * v108[1];
                  ++v552;
                }
                while (v552 < v551);
              }
              break;
            case 4uLL:
              int v568 = *v51;
              if (*v51)
              {
                unint64_t v569 = 0;
                uint64_t v570 = 0;
                uint64_t v571 = 0;
                uint64_t v572 = 0;
                uint64_t v573 = *(void *)(v50 + 152);
                v574 = v107[19];
                uint64_t v575 = v49[19];
                do
                {
                  if (v51[1])
                  {
                    unint64_t v576 = 0;
                    do
                    {
                      if (v51[2])
                      {
                        unint64_t v577 = 0;
                        do
                        {
                          if (v51[3])
                          {
                            unint64_t v578 = 0;
                            do
                            {
                              *(unsigned char *)(v575 + v570 + v578) = *((unsigned char *)v574 + v571) + *(unsigned char *)(v573 + v572);
                              uint64_t v50 = *a1;
                              v579 = *(void **)(*a1 + 24);
                              uint64_t v580 = v579[3];
                              v572 += v580;
                              unsigned int v107 = (int **)*a2;
                              v581 = *(int **)(*a2 + 24);
                              uint64_t v582 = *((void *)v581 + 3);
                              v571 += v582;
                              ++v578;
                              uint64_t v51 = *(int **)*a1;
                              unint64_t v583 = v51[3];
                            }
                            while (v578 < v583);
                            unsigned int v108 = *v107;
                            v570 += v578;
                          }
                          else
                          {
                            unint64_t v583 = 0;
                            v579 = *(void **)(v50 + 24);
                            uint64_t v580 = v579[3];
                            v581 = v107[3];
                            uint64_t v582 = *((void *)v581 + 3);
                          }
                          uint64_t v584 = v579[2];
                          uint64_t v572 = v584 + v572 - v583 * v580;
                          uint64_t v571 = *((void *)v581 + 2) + v571 - v582 * v108[3];
                          ++v577;
                          unint64_t v585 = v51[2];
                        }
                        while (v577 < v585);
                      }
                      else
                      {
                        unint64_t v585 = 0;
                        v579 = *(void **)(v50 + 24);
                        uint64_t v584 = v579[2];
                      }
                      uint64_t v572 = v579[1] + v572 - v585 * v584;
                      uint64_t v571 = *((void *)v107[3] + 1) + v571 - *((void *)v107[3] + 2) * v108[2];
                      ++v576;
                      unint64_t v586 = v51[1];
                    }
                    while (v576 < v586);
                    int v568 = *v51;
                  }
                  else
                  {
                    unint64_t v586 = 0;
                  }
                  uint64_t v572 = **(void **)(v50 + 24) + v572 - *(void *)(*(void *)(v50 + 24) + 8) * v586;
                  uint64_t v571 = *(void *)v107[3] + v571 - *((void *)v107[3] + 1) * v108[1];
                  ++v569;
                }
                while (v569 < v568);
              }
              break;
            default:
              if (v49[6])
              {
                unint64_t v521 = 0;
                v1594 = v107[19];
                uint64_t v1640 = *(void *)(v50 + 152);
                uint64_t v522 = v49[19];
                do
                {
                  uint64_t v523 = *(void *)*a1;
                  unint64_t v524 = (unint64_t)(*(void *)(*a1 + 8) - v523) >> 2;
                  uint64_t v525 = 0;
                  uint64_t v526 = (v524 - 1);
                  if ((int)v524 - 1 >= 0)
                  {
                    uint64_t v527 = *(void *)(*a1 + 24);
                    int v528 = v521;
                    do
                    {
                      ldiv_t v529 = ldiv(v528, *(int *)(v523 + 4 * v526));
                      int v528 = v529.quot;
                      v525 += *(void *)(v527 + 8 * v526--) * v529.rem;
                    }
                    while (v526 != -1);
                  }
                  uint64_t v530 = *(void *)*a2;
                  unint64_t v531 = (unint64_t)(*(void *)(*a2 + 8) - v530) >> 2;
                  uint64_t v532 = 0;
                  uint64_t v533 = (v531 - 1);
                  if ((int)v531 - 1 >= 0)
                  {
                    uint64_t v534 = *(void *)(*a2 + 24);
                    int v535 = v521;
                    do
                    {
                      ldiv_t v536 = ldiv(v535, *(int *)(v530 + 4 * v533));
                      int v535 = v536.quot;
                      v532 += *(void *)(v534 + 8 * v533--) * v536.rem;
                    }
                    while (v533 != -1);
                  }
                  *(unsigned char *)(v522 + v521++) = *((unsigned char *)v1594 + (int)v532) + *(unsigned char *)(v1640 + (int)v525);
                }
                while (v521 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v11)
      {
        case 0:
LABEL_10:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          char v57 = *(void **)a3;
          uint64_t v58 = *a1;
          uint64_t v59 = *(int **)*a1;
          uint64_t v60 = (*(void *)(*a1 + 8) - (void)v59) >> 2;
          uint64_t v61 = (v60 - 1);
          if ((int)v61 >= -1) {
            int v62 = -1;
          }
          else {
            int v62 = v60 - 1;
          }
          int v63 = v62 + 1;
          int v64 = v60 + 1;
          break;
      }
      while (1)
      {
        unsigned int v65 = v64 - 2;
        if (v64 - 2 < 0) {
          break;
        }
        --v64;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v65) != *(void *)(v57[3] + 8 * v65)) {
          goto LABEL_102;
        }
      }
      int v64 = v63;
LABEL_102:
      uint64_t v114 = (int **)*a2;
      char v115 = *(int **)*a2;
      uint64_t v116 = (*(void *)(*a2 + 8) - (void)v115) >> 2;
      uint64_t v117 = (v116 - 1);
      if ((int)v117 >= -1) {
        int v118 = -1;
      }
      else {
        int v118 = v116 - 1;
      }
      int v119 = v118 + 1;
      int v120 = v116 + 1;
      while (1)
      {
        unsigned int v121 = v120 - 2;
        if (v120 - 2 < 0) {
          break;
        }
        --v120;
        if (*(void *)&v114[3][2 * v121] != *(void *)(v57[3] + 8 * v121)) {
          goto LABEL_146;
        }
      }
      int v120 = v119;
LABEL_146:
      int v146 = v60 + 1;
      while (1)
      {
        unsigned int v147 = v146 - 2;
        if (v146 - 2 < 0) {
          break;
        }
        --v146;
        if (*(void *)(*(void *)(v58 + 24) + 8 * v147)) {
          goto LABEL_181;
        }
      }
      int v146 = v63;
LABEL_181:
      int v160 = v116 + 1;
      while (1)
      {
        int v161 = v160 - 2;
        if (v160 - 2 < 0) {
          break;
        }
        --v160;
        if (*(void *)&v114[3][2 * v161]) {
          goto LABEL_336;
        }
      }
      int v160 = v119;
LABEL_336:
      unint64_t v239 = (uint64_t)(v57[1] - *v57) >> 2;
      if (v64 <= v120) {
        int v240 = v120;
      }
      else {
        int v240 = v64;
      }
      if (v64 <= v160) {
        int v64 = v160;
      }
      if (v146 > v120) {
        int v120 = v146;
      }
      if (v239 > v120) {
        int v241 = 1;
      }
      else {
        int v241 = 4;
      }
      if (v239 <= v120) {
        int v120 = (uint64_t)(v57[1] - *v57) >> 2;
      }
      if (v239 <= v64) {
        int v64 = v120;
      }
      else {
        int v241 = 2;
      }
      if (v239 <= v240)
      {
        int v242 = v64;
      }
      else
      {
        int v241 = 3;
        int v242 = v240;
      }
      if (!v242) {
        goto LABEL_365;
      }
      unint64_t v243 = *(void *)(v57[3] + 8 * (v242 - 1));
      if (v243 < 0x10) {
        goto LABEL_365;
      }
      switch(v241)
      {
        case 1:
          if (v242 == 2)
          {
            int v1355 = *v59;
            if (*v59)
            {
              uint64_t v1356 = 0;
              uint64_t v1357 = 0;
              uint64_t v1670 = *(void *)(v58 + 152);
              v1624 = v114[19];
              v1358 = (int *)v57[19];
              unint64_t v1540 = 0;
              vDSP_Length v1578 = (int)v243;
              uint64_t v1359 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1360 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1624[v1356], 1, (const int *)(v1670 + 4 * v1357), v1358, 1, v1578);
                    uint64_t v58 = *a1;
                    v1361 = *(void **)(*a1 + 24);
                    uint64_t v1362 = v1361[1];
                    v1357 += v1362;
                    uint64_t v114 = (int **)*a2;
                    v1363 = *(int **)(*a2 + 24);
                    uint64_t v1364 = *((void *)v1363 + 1);
                    v1356 += v1364;
                    ++v1360;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1365 = v59[1];
                    v1358 = (int *)((char *)v1358 + v1359);
                  }
                  while (v1360 < v1365);
                  int v1355 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1365 = 0;
                  v1361 = *(void **)(v58 + 24);
                  uint64_t v1362 = v1361[1];
                  v1363 = v114[3];
                  uint64_t v1364 = *((void *)v1363 + 1);
                }
                uint64_t v1357 = *v1361 + v1357 - v1365 * v1362;
                uint64_t v1356 = *(void *)v1363 + v1356 - v1364 * v115[1];
                ++v1540;
              }
              while (v1540 < v1355);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v884 = 0;
              uint64_t v885 = 0;
              uint64_t v886 = 0;
              uint64_t v887 = *(void *)(v58 + 152);
              v888 = v114[19];
              vDSP_Length v889 = (int)v243;
              uint64_t v890 = 4 * (int)v243;
              v891 = (int *)v57[19];
              do
              {
                vDSP_vsaddi(&v888[v885], 1, (const int *)(v887 + 4 * v886), v891, 1, v889);
                v886 += **(void **)(*a1 + 24);
                v885 += **(void **)(*a2 + 24);
                ++v884;
                v891 = (int *)((char *)v891 + v890);
              }
              while (v884 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1366 = 0;
            v1625 = v114[19];
            uint64_t v1671 = *(void *)(v58 + 152);
            vDSP_Length v1579 = (int)v243;
            v1367 = (int *)v57[19];
            do
            {
              uint64_t v1368 = *(void *)*a1;
              unint64_t v1369 = (unint64_t)(*(void *)(*a1 + 8) - v1368) >> 2;
              uint64_t v1370 = 0;
              uint64_t v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                uint64_t v1372 = *(void *)(*a1 + 24);
                int v1373 = v1366;
                do
                {
                  ldiv_t v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  int v1373 = v1374.quot;
                  v1370 += *(void *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              uint64_t v1375 = *(void *)*a2;
              unint64_t v1376 = (unint64_t)(*(void *)(*a2 + 8) - v1375) >> 2;
              uint64_t v1377 = 0;
              uint64_t v1378 = (v1376 - 1);
              if ((int)v1376 - 1 >= 0)
              {
                uint64_t v1379 = *(void *)(*a2 + 24);
                int v1380 = v1366;
                do
                {
                  ldiv_t v1381 = ldiv(v1380, *(int *)(v1375 + 4 * v1378));
                  int v1380 = v1381.quot;
                  v1377 += *(void *)(v1379 + 8 * v1378--) * v1381.rem;
                }
                while (v1378 != -1);
              }
              vDSP_vsaddi(&v1625[(int)v1377], 1, (const int *)(v1671 + 4 * (int)v1370), v1367, 1, v1579);
              v1367 += v1579;
              v1366 += v1579;
            }
            while (v1366 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v242 == 2)
          {
            int v1382 = *v59;
            if (*v59)
            {
              uint64_t v1383 = 0;
              uint64_t v1384 = 0;
              uint64_t v1672 = *(void *)(v58 + 152);
              v1626 = v114[19];
              v1385 = (int *)v57[19];
              unint64_t v1541 = 0;
              vDSP_Length v1580 = (int)v243;
              uint64_t v1386 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1387 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1672 + 4 * v1384), 1, &v1626[v1383], v1385, 1, v1580);
                    uint64_t v58 = *a1;
                    v1388 = *(void **)(*a1 + 24);
                    uint64_t v1389 = v1388[1];
                    v1384 += v1389;
                    uint64_t v114 = (int **)*a2;
                    v1390 = *(int **)(*a2 + 24);
                    uint64_t v1391 = *((void *)v1390 + 1);
                    v1383 += v1391;
                    ++v1387;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1392 = v59[1];
                    v1385 = (int *)((char *)v1385 + v1386);
                  }
                  while (v1387 < v1392);
                  int v1382 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1392 = 0;
                  v1388 = *(void **)(v58 + 24);
                  uint64_t v1389 = v1388[1];
                  v1390 = v114[3];
                  uint64_t v1391 = *((void *)v1390 + 1);
                }
                uint64_t v1384 = *v1388 + v1384 - v1392 * v1389;
                uint64_t v1383 = *(void *)v1390 + v1383 - v1391 * v115[1];
                ++v1541;
              }
              while (v1541 < v1382);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v892 = 0;
              uint64_t v893 = 0;
              uint64_t v894 = 0;
              uint64_t v895 = *(void *)(v58 + 152);
              v896 = v114[19];
              vDSP_Length v897 = (int)v243;
              uint64_t v898 = 4 * (int)v243;
              v899 = (int *)v57[19];
              do
              {
                vDSP_vsaddi((const int *)(v895 + 4 * v894), 1, &v896[v893], v899, 1, v897);
                v894 += **(void **)(*a1 + 24);
                v893 += **(void **)(*a2 + 24);
                ++v892;
                v899 = (int *)((char *)v899 + v898);
              }
              while (v892 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1393 = 0;
            v1627 = v114[19];
            uint64_t v1673 = *(void *)(v58 + 152);
            vDSP_Length v1581 = (int)v243;
            v1394 = (int *)v57[19];
            do
            {
              uint64_t v1395 = *(void *)*a1;
              unint64_t v1396 = (unint64_t)(*(void *)(*a1 + 8) - v1395) >> 2;
              uint64_t v1397 = 0;
              uint64_t v1398 = (v1396 - 1);
              if ((int)v1396 - 1 >= 0)
              {
                uint64_t v1399 = *(void *)(*a1 + 24);
                int v1400 = v1393;
                do
                {
                  ldiv_t v1401 = ldiv(v1400, *(int *)(v1395 + 4 * v1398));
                  int v1400 = v1401.quot;
                  v1397 += *(void *)(v1399 + 8 * v1398--) * v1401.rem;
                }
                while (v1398 != -1);
              }
              uint64_t v1402 = *(void *)*a2;
              unint64_t v1403 = (unint64_t)(*(void *)(*a2 + 8) - v1402) >> 2;
              uint64_t v1404 = 0;
              uint64_t v1405 = (v1403 - 1);
              if ((int)v1403 - 1 >= 0)
              {
                uint64_t v1406 = *(void *)(*a2 + 24);
                int v1407 = v1393;
                do
                {
                  ldiv_t v1408 = ldiv(v1407, *(int *)(v1402 + 4 * v1405));
                  int v1407 = v1408.quot;
                  v1404 += *(void *)(v1406 + 8 * v1405--) * v1408.rem;
                }
                while (v1405 != -1);
              }
              vDSP_vsaddi((const int *)(v1673 + 4 * (int)v1397), 1, &v1627[(int)v1404], v1394, 1, v1581);
              v1394 += v1581;
              v1393 += v1581;
            }
            while (v1393 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v242 == 2)
          {
            int v1046 = *v59;
            if (*v59)
            {
              uint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1652 = *(void *)(v58 + 152);
              v1606 = v114[19];
              v1049 = (int *)v57[19];
              unint64_t v1535 = 0;
              vDSP_Length v1560 = (int)v243;
              uint64_t v1050 = 4 * (int)v243;
              do
              {
                if (v59[1])
                {
                  unint64_t v1051 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1652 + 4 * v1048), 1, &v1606[v1047], 1, v1049, 1, v1560);
                    uint64_t v58 = *a1;
                    v1052 = *(void **)(*a1 + 24);
                    uint64_t v1053 = v1052[1];
                    v1048 += v1053;
                    uint64_t v114 = (int **)*a2;
                    v1054 = *(int **)(*a2 + 24);
                    uint64_t v1055 = *((void *)v1054 + 1);
                    v1047 += v1055;
                    ++v1051;
                    uint64_t v59 = *(int **)*a1;
                    unint64_t v1056 = v59[1];
                    v1049 = (int *)((char *)v1049 + v1050);
                  }
                  while (v1051 < v1056);
                  int v1046 = *v59;
                  char v115 = *v114;
                }
                else
                {
                  unint64_t v1056 = 0;
                  v1052 = *(void **)(v58 + 24);
                  uint64_t v1053 = v1052[1];
                  v1054 = v114[3];
                  uint64_t v1055 = *((void *)v1054 + 1);
                }
                uint64_t v1048 = *v1052 + v1048 - v1056 * v1053;
                uint64_t v1047 = *(void *)v1054 + v1047 - v1055 * v115[1];
                ++v1535;
              }
              while (v1535 < v1046);
            }
          }
          else if (v242 == 1)
          {
            if (*v59)
            {
              unint64_t v244 = 0;
              uint64_t v245 = 0;
              uint64_t v246 = 0;
              uint64_t v247 = *(void *)(v58 + 152);
              v248 = v114[19];
              vDSP_Length v249 = (int)v243;
              uint64_t v250 = 4 * (int)v243;
              v251 = (int *)v57[19];
              do
              {
                vDSP_vaddi((const int *)(v247 + 4 * v246), 1, &v248[v245], 1, v251, 1, v249);
                v246 += **(void **)(*a1 + 24);
                v245 += **(void **)(*a2 + 24);
                ++v244;
                v251 = (int *)((char *)v251 + v250);
              }
              while (v244 < **(int **)*a1);
            }
          }
          else if (v57[6])
          {
            unint64_t v1057 = 0;
            v1607 = v114[19];
            uint64_t v1653 = *(void *)(v58 + 152);
            vDSP_Length v1561 = (int)v243;
            v1058 = (int *)v57[19];
            do
            {
              uint64_t v1059 = *(void *)*a1;
              unint64_t v1060 = (unint64_t)(*(void *)(*a1 + 8) - v1059) >> 2;
              uint64_t v1061 = 0;
              uint64_t v1062 = (v1060 - 1);
              if ((int)v1060 - 1 >= 0)
              {
                uint64_t v1063 = *(void *)(*a1 + 24);
                int v1064 = v1057;
                do
                {
                  ldiv_t v1065 = ldiv(v1064, *(int *)(v1059 + 4 * v1062));
                  int v1064 = v1065.quot;
                  v1061 += *(void *)(v1063 + 8 * v1062--) * v1065.rem;
                }
                while (v1062 != -1);
              }
              uint64_t v1066 = *(void *)*a2;
              unint64_t v1067 = (unint64_t)(*(void *)(*a2 + 8) - v1066) >> 2;
              uint64_t v1068 = 0;
              uint64_t v1069 = (v1067 - 1);
              if ((int)v1067 - 1 >= 0)
              {
                uint64_t v1070 = *(void *)(*a2 + 24);
                int v1071 = v1057;
                do
                {
                  ldiv_t v1072 = ldiv(v1071, *(int *)(v1066 + 4 * v1069));
                  int v1071 = v1072.quot;
                  v1068 += *(void *)(v1070 + 8 * v1069--) * v1072.rem;
                }
                while (v1069 != -1);
              }
              vDSP_vaddi((const int *)(v1653 + 4 * (int)v1061), 1, &v1607[(int)v1068], 1, v1058, 1, v1561);
              v1058 += v1561;
              v1057 += v1561;
            }
            while (v1057 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_365:
          switch(v239)
          {
            case 1uLL:
              uint64_t v252 = v57[6];
              if (v252)
              {
                unint64_t v253 = *(_DWORD **)(v58 + 152);
                uint64_t v254 = v114[19];
                v255 = (_DWORD *)v57[19];
                uint64_t v256 = 4 * *(void *)v114[3];
                uint64_t v257 = 4 * **(void **)(v58 + 24);
                do
                {
                  *v255++ = *v254 + *v253;
                  uint64_t v254 = (int *)((char *)v254 + v256);
                  unint64_t v253 = (_DWORD *)((char *)v253 + v257);
                  --v252;
                }
                while (v252);
              }
              break;
            case 2uLL:
              int v598 = *v59;
              if (*v59)
              {
                unint64_t v599 = 0;
                uint64_t v600 = 0;
                uint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = *(void *)(v58 + 152);
                v604 = v114[19];
                uint64_t v605 = v57[19];
                v606 = *(uint64_t **)(v58 + 24);
                uint64_t v607 = *v606;
                uint64_t v608 = v606[1];
                v609 = v114[3];
                uint64_t v611 = *(void *)v609;
                uint64_t v610 = *((void *)v609 + 1);
                int v612 = v59[1];
                do
                {
                  if (v612)
                  {
                    for (unint64_t m = 0; m < v612; ++m)
                    {
                      *(_DWORD *)(v605 + 4 * v600 + 4 * m) = v604[v601] + *(_DWORD *)(v603 + 4 * v602);
                      v602 += v608;
                      v601 += v610;
                      int v612 = v59[1];
                    }
                    uint64_t v614 = v612;
                    int v598 = *v59;
                    v600 += m;
                  }
                  else
                  {
                    uint64_t v614 = 0;
                  }
                  uint64_t v602 = v602 + v607 - v614 * v608;
                  uint64_t v601 = v601 + v611 - v610 * v115[1];
                  ++v599;
                }
                while (v599 < v598);
              }
              break;
            case 3uLL:
              int v615 = *v59;
              if (*v59)
              {
                unint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = *(void *)(v58 + 152);
                v621 = v114[19];
                uint64_t v622 = v57[19];
                v623 = *(uint64_t **)(v58 + 24);
                uint64_t v624 = *v623;
                uint64_t v625 = v623[1];
                v626 = v114[3];
                uint64_t v627 = *(void *)v626;
                uint64_t v628 = *((void *)v626 + 1);
                int v629 = v59[1];
                int v630 = v629;
                do
                {
                  if (v630)
                  {
                    unint64_t v631 = 0;
                    uint64_t v632 = v623[2];
                    uint64_t v633 = *((void *)v626 + 2);
                    int v634 = v59[2];
                    do
                    {
                      if (v634)
                      {
                        for (unint64_t n = 0; n < v634; ++n)
                        {
                          *(_DWORD *)(v622 + 4 * v617 + 4 * n) = v621[v618] + *(_DWORD *)(v620 + 4 * v619);
                          v619 += v632;
                          v618 += v633;
                          int v634 = v59[2];
                        }
                        uint64_t v636 = v634;
                        int v629 = v59[1];
                        v617 += n;
                      }
                      else
                      {
                        uint64_t v636 = 0;
                      }
                      uint64_t v619 = v619 + v625 - v636 * v632;
                      uint64_t v618 = v618 + v628 - v633 * v115[2];
                      ++v631;
                    }
                    while (v631 < v629);
                    uint64_t v637 = v629;
                    int v615 = *v59;
                    int v630 = v629;
                  }
                  else
                  {
                    uint64_t v637 = 0;
                  }
                  uint64_t v619 = v619 + v624 - v637 * v625;
                  uint64_t v618 = v618 + v627 - v628 * v115[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 4uLL:
              int v638 = *v59;
              if (*v59)
              {
                unint64_t v639 = 0;
                uint64_t v640 = 0;
                uint64_t v641 = 0;
                uint64_t v642 = 0;
                uint64_t v643 = *(void *)(v58 + 152);
                v644 = v114[19];
                uint64_t v645 = v57[19];
                v646 = *(uint64_t **)(v58 + 24);
                uint64_t v647 = *v646;
                uint64_t v648 = v646[1];
                v649 = v114[3];
                uint64_t v650 = *(void *)v649;
                uint64_t v651 = *((void *)v649 + 1);
                int v652 = v59[1];
                int v653 = v652;
                do
                {
                  if (v653)
                  {
                    unint64_t v654 = 0;
                    uint64_t v655 = v646[2];
                    uint64_t v656 = *((void *)v649 + 2);
                    int v657 = v59[2];
                    int v658 = v657;
                    do
                    {
                      if (v658)
                      {
                        unint64_t v659 = 0;
                        uint64_t v660 = v646[3];
                        uint64_t v661 = *((void *)v649 + 3);
                        int v662 = v59[3];
                        do
                        {
                          if (v662)
                          {
                            for (iunint64_t i = 0; ii < v662; ++ii)
                            {
                              *(_DWORD *)(v645 + 4 * v640 + 4 * ii) = v644[v641] + *(_DWORD *)(v643 + 4 * v642);
                              v642 += v660;
                              v641 += v661;
                              int v662 = v59[3];
                            }
                            uint64_t v664 = v662;
                            int v657 = v59[2];
                            v640 += ii;
                          }
                          else
                          {
                            uint64_t v664 = 0;
                          }
                          uint64_t v642 = v642 + v655 - v664 * v660;
                          uint64_t v641 = v641 + v656 - v661 * v115[3];
                          ++v659;
                        }
                        while (v659 < v657);
                        uint64_t v665 = v657;
                        int v652 = v59[1];
                        int v658 = v657;
                      }
                      else
                      {
                        uint64_t v665 = 0;
                      }
                      uint64_t v642 = v642 + v648 - v665 * v655;
                      uint64_t v641 = v641 + v651 - v656 * v115[2];
                      ++v654;
                    }
                    while (v654 < v652);
                    uint64_t v666 = v652;
                    int v638 = *v59;
                    int v653 = v652;
                  }
                  else
                  {
                    uint64_t v666 = 0;
                  }
                  uint64_t v642 = v642 + v647 - v666 * v648;
                  uint64_t v641 = v641 + v650 - v651 * v115[1];
                  ++v639;
                }
                while (v639 < v638);
              }
              break;
            default:
              uint64_t v1595 = v57[6];
              uint64_t v1641 = v61;
              if (v1595)
              {
                uint64_t v587 = 0;
                v1529 = v114[19];
                uint64_t v1549 = *(void *)(v58 + 152);
                uint64_t v1522 = v57[19];
                do
                {
                  uint64_t v588 = v1641;
                  if ((v1641 & 0x80000000) != 0)
                  {
                    LODWORD(v589) = 0;
                  }
                  else
                  {
                    uint64_t v589 = 0;
                    uint64_t v590 = *(void *)(v58 + 24);
                    int v591 = v587;
                    do
                    {
                      ldiv_t v592 = ldiv(v591, v59[v588]);
                      int v591 = v592.quot;
                      v589 += *(void *)(v590 + 8 * v588--) * v592.rem;
                    }
                    while (v588 != -1);
                  }
                  uint64_t v593 = 0;
                  if ((v117 & 0x80000000) == 0)
                  {
                    v594 = v114[3];
                    uint64_t v595 = v117;
                    int v596 = v587;
                    do
                    {
                      ldiv_t v597 = ldiv(v596, v115[v595]);
                      int v596 = v597.quot;
                      v593 += *(void *)&v594[2 * v595--] * v597.rem;
                    }
                    while (v595 != -1);
                  }
                  *(_DWORD *)(v1522 + 4 * v587++) = v1529[(int)v593] + *(_DWORD *)(v1549 + 4 * (int)v589);
                }
                while (v587 != v1595);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v12)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) + **(void **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_17;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v66 = *(void **)a3;
          uint64_t v67 = *a1;
          int64_t v68 = *(int **)*a1;
          uint64_t v69 = (*(void *)(*a1 + 8) - (void)v68) >> 2;
          uint64_t v70 = (v69 - 1);
          if ((int)v70 >= -1) {
            int v71 = -1;
          }
          else {
            int v71 = v69 - 1;
          }
          int v72 = v71 + 1;
          int v73 = v69 + 1;
          break;
      }
      while (1)
      {
        unsigned int v74 = v73 - 2;
        if (v73 - 2 < 0) {
          break;
        }
        --v73;
        if (*(void *)(*(void *)(v67 + 24) + 8 * v74) != *(void *)(v66[3] + 8 * v74)) {
          goto LABEL_110;
        }
      }
      int v73 = v72;
LABEL_110:
      unint64_t v122 = (int **)*a2;
      long long v123 = *(int **)*a2;
      uint64_t v124 = (*(void *)(*a2 + 8) - (void)v123) >> 2;
      uint64_t v125 = (v124 - 1);
      if ((int)v125 >= -1) {
        int v126 = -1;
      }
      else {
        int v126 = v124 - 1;
      }
      int v127 = v126 + 1;
      int v128 = v124 + 1;
      while (1)
      {
        unsigned int v129 = v128 - 2;
        if (v128 - 2 < 0) {
          break;
        }
        --v128;
        if (*(void *)&v122[3][2 * v129] != *(void *)(v66[3] + 8 * v129)) {
          goto LABEL_151;
        }
      }
      int v128 = v127;
LABEL_151:
      int v148 = v69 + 1;
      while (1)
      {
        unsigned int v149 = v148 - 2;
        if (v148 - 2 < 0) {
          break;
        }
        --v148;
        if (*(void *)(*(void *)(v67 + 24) + 8 * v149)) {
          goto LABEL_186;
        }
      }
      int v148 = v72;
LABEL_186:
      int v162 = v124 + 1;
      while (1)
      {
        int v163 = v162 - 2;
        if (v162 - 2 < 0) {
          break;
        }
        --v162;
        if (*(void *)&v122[3][2 * v163]) {
          goto LABEL_371;
        }
      }
      int v162 = v127;
LABEL_371:
      unint64_t v258 = (uint64_t)(v66[1] - *v66) >> 2;
      if (v73 <= v128) {
        int v259 = v128;
      }
      else {
        int v259 = v73;
      }
      if (v73 <= v162) {
        int v73 = v162;
      }
      if (v148 > v128) {
        int v128 = v148;
      }
      if (v258 > v128) {
        int v260 = 1;
      }
      else {
        int v260 = 4;
      }
      if (v258 <= v128) {
        int v128 = (uint64_t)(v66[1] - *v66) >> 2;
      }
      if (v258 <= v73) {
        int v73 = v128;
      }
      else {
        int v260 = 2;
      }
      if (v258 <= v259)
      {
        int v261 = v73;
      }
      else
      {
        int v260 = 3;
        int v261 = v259;
      }
      if (!v261) {
        goto LABEL_400;
      }
      unint64_t v262 = *(void *)(v66[3] + 8 * (v261 - 1));
      if (v262 < 0x10) {
        goto LABEL_400;
      }
      switch(v260)
      {
        case 1:
          if (v261 == 2)
          {
            int v1409 = *v68;
            if (*v68)
            {
              uint64_t v1410 = 0;
              uint64_t v1411 = 0;
              uint64_t v1674 = *(void *)(v67 + 152);
              v1628 = v122[19];
              v1412 = (int *)v66[19];
              unint64_t v1542 = 0;
              vDSP_Length v1582 = (int)v262;
              uint64_t v1413 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1414 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1628[2 * v1410], 1, (const int *)(v1674 + 8 * v1411), v1412, 1, v1582);
                    uint64_t v67 = *a1;
                    v1415 = *(void **)(*a1 + 24);
                    uint64_t v1416 = v1415[1];
                    v1411 += v1416;
                    unint64_t v122 = (int **)*a2;
                    v1417 = *(int **)(*a2 + 24);
                    uint64_t v1418 = *((void *)v1417 + 1);
                    v1410 += v1418;
                    ++v1414;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1419 = v68[1];
                    v1412 = (int *)((char *)v1412 + v1413);
                  }
                  while (v1414 < v1419);
                  int v1409 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1419 = 0;
                  v1415 = *(void **)(v67 + 24);
                  uint64_t v1416 = v1415[1];
                  v1417 = v122[3];
                  uint64_t v1418 = *((void *)v1417 + 1);
                }
                uint64_t v1411 = *v1415 + v1411 - v1419 * v1416;
                uint64_t v1410 = *(void *)v1417 + v1410 - v1418 * v123[1];
                ++v1542;
              }
              while (v1542 < v1409);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v900 = 0;
              uint64_t v901 = 0;
              uint64_t v902 = 0;
              uint64_t v903 = *(void *)(v67 + 152);
              v904 = v122[19];
              vDSP_Length v905 = (int)v262;
              uint64_t v906 = 8 * (int)v262;
              v907 = (int *)v66[19];
              do
              {
                vDSP_vsaddi(&v904[2 * v901], 1, (const int *)(v903 + 8 * v902), v907, 1, v905);
                v902 += **(void **)(*a1 + 24);
                v901 += **(void **)(*a2 + 24);
                ++v900;
                v907 = (int *)((char *)v907 + v906);
              }
              while (v900 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1420 = 0;
            v1629 = v122[19];
            uint64_t v1675 = *(void *)(v67 + 152);
            vDSP_Length v1583 = (int)v262;
            v1421 = (int *)v66[19];
            do
            {
              uint64_t v1422 = *(void *)*a1;
              unint64_t v1423 = (unint64_t)(*(void *)(*a1 + 8) - v1422) >> 2;
              uint64_t v1424 = 0;
              uint64_t v1425 = (v1423 - 1);
              if ((int)v1423 - 1 >= 0)
              {
                uint64_t v1426 = *(void *)(*a1 + 24);
                int v1427 = v1420;
                do
                {
                  ldiv_t v1428 = ldiv(v1427, *(int *)(v1422 + 4 * v1425));
                  int v1427 = v1428.quot;
                  v1424 += *(void *)(v1426 + 8 * v1425--) * v1428.rem;
                }
                while (v1425 != -1);
              }
              uint64_t v1429 = *(void *)*a2;
              unint64_t v1430 = (unint64_t)(*(void *)(*a2 + 8) - v1429) >> 2;
              uint64_t v1431 = 0;
              uint64_t v1432 = (v1430 - 1);
              if ((int)v1430 - 1 >= 0)
              {
                uint64_t v1433 = *(void *)(*a2 + 24);
                int v1434 = v1420;
                do
                {
                  ldiv_t v1435 = ldiv(v1434, *(int *)(v1429 + 4 * v1432));
                  int v1434 = v1435.quot;
                  v1431 += *(void *)(v1433 + 8 * v1432--) * v1435.rem;
                }
                while (v1432 != -1);
              }
              vDSP_vsaddi(&v1629[2 * (int)v1431], 1, (const int *)(v1675 + 8 * (int)v1424), v1421, 1, v1583);
              v1421 += 2 * v1583;
              v1420 += v1583;
            }
            while (v1420 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v261 == 2)
          {
            int v1436 = *v68;
            if (*v68)
            {
              uint64_t v1437 = 0;
              uint64_t v1438 = 0;
              uint64_t v1676 = *(void *)(v67 + 152);
              v1630 = v122[19];
              v1439 = (int *)v66[19];
              unint64_t v1543 = 0;
              vDSP_Length v1584 = (int)v262;
              uint64_t v1440 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1441 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1676 + 8 * v1438), 1, &v1630[2 * v1437], v1439, 1, v1584);
                    uint64_t v67 = *a1;
                    v1442 = *(void **)(*a1 + 24);
                    uint64_t v1443 = v1442[1];
                    v1438 += v1443;
                    unint64_t v122 = (int **)*a2;
                    v1444 = *(int **)(*a2 + 24);
                    uint64_t v1445 = *((void *)v1444 + 1);
                    v1437 += v1445;
                    ++v1441;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1446 = v68[1];
                    v1439 = (int *)((char *)v1439 + v1440);
                  }
                  while (v1441 < v1446);
                  int v1436 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1446 = 0;
                  v1442 = *(void **)(v67 + 24);
                  uint64_t v1443 = v1442[1];
                  v1444 = v122[3];
                  uint64_t v1445 = *((void *)v1444 + 1);
                }
                uint64_t v1438 = *v1442 + v1438 - v1446 * v1443;
                uint64_t v1437 = *(void *)v1444 + v1437 - v1445 * v123[1];
                ++v1543;
              }
              while (v1543 < v1436);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v908 = 0;
              uint64_t v909 = 0;
              uint64_t v910 = 0;
              uint64_t v911 = *(void *)(v67 + 152);
              v912 = v122[19];
              vDSP_Length v913 = (int)v262;
              uint64_t v914 = 8 * (int)v262;
              v915 = (int *)v66[19];
              do
              {
                vDSP_vsaddi((const int *)(v911 + 8 * v910), 1, &v912[2 * v909], v915, 1, v913);
                v910 += **(void **)(*a1 + 24);
                v909 += **(void **)(*a2 + 24);
                ++v908;
                v915 = (int *)((char *)v915 + v914);
              }
              while (v908 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1447 = 0;
            v1631 = v122[19];
            uint64_t v1677 = *(void *)(v67 + 152);
            vDSP_Length v1585 = (int)v262;
            v1448 = (int *)v66[19];
            do
            {
              uint64_t v1449 = *(void *)*a1;
              unint64_t v1450 = (unint64_t)(*(void *)(*a1 + 8) - v1449) >> 2;
              uint64_t v1451 = 0;
              uint64_t v1452 = (v1450 - 1);
              if ((int)v1450 - 1 >= 0)
              {
                uint64_t v1453 = *(void *)(*a1 + 24);
                int v1454 = v1447;
                do
                {
                  ldiv_t v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                  int v1454 = v1455.quot;
                  v1451 += *(void *)(v1453 + 8 * v1452--) * v1455.rem;
                }
                while (v1452 != -1);
              }
              uint64_t v1456 = *(void *)*a2;
              unint64_t v1457 = (unint64_t)(*(void *)(*a2 + 8) - v1456) >> 2;
              uint64_t v1458 = 0;
              uint64_t v1459 = (v1457 - 1);
              if ((int)v1457 - 1 >= 0)
              {
                uint64_t v1460 = *(void *)(*a2 + 24);
                int v1461 = v1447;
                do
                {
                  ldiv_t v1462 = ldiv(v1461, *(int *)(v1456 + 4 * v1459));
                  int v1461 = v1462.quot;
                  v1458 += *(void *)(v1460 + 8 * v1459--) * v1462.rem;
                }
                while (v1459 != -1);
              }
              vDSP_vsaddi((const int *)(v1677 + 8 * (int)v1451), 1, &v1631[2 * (int)v1458], v1448, 1, v1585);
              v1448 += 2 * v1585;
              v1447 += v1585;
            }
            while (v1447 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v261 == 2)
          {
            int v1073 = *v68;
            if (*v68)
            {
              uint64_t v1074 = 0;
              uint64_t v1075 = 0;
              uint64_t v1654 = *(void *)(v67 + 152);
              v1608 = v122[19];
              v1076 = (int *)v66[19];
              unint64_t v1536 = 0;
              vDSP_Length v1562 = (int)v262;
              uint64_t v1077 = 8 * (int)v262;
              do
              {
                if (v68[1])
                {
                  unint64_t v1078 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1654 + 8 * v1075), 1, &v1608[2 * v1074], 1, v1076, 1, v1562);
                    uint64_t v67 = *a1;
                    v1079 = *(void **)(*a1 + 24);
                    uint64_t v1080 = v1079[1];
                    v1075 += v1080;
                    unint64_t v122 = (int **)*a2;
                    v1081 = *(int **)(*a2 + 24);
                    uint64_t v1082 = *((void *)v1081 + 1);
                    v1074 += v1082;
                    ++v1078;
                    int64_t v68 = *(int **)*a1;
                    unint64_t v1083 = v68[1];
                    v1076 = (int *)((char *)v1076 + v1077);
                  }
                  while (v1078 < v1083);
                  int v1073 = *v68;
                  long long v123 = *v122;
                }
                else
                {
                  unint64_t v1083 = 0;
                  v1079 = *(void **)(v67 + 24);
                  uint64_t v1080 = v1079[1];
                  v1081 = v122[3];
                  uint64_t v1082 = *((void *)v1081 + 1);
                }
                uint64_t v1075 = *v1079 + v1075 - v1083 * v1080;
                uint64_t v1074 = *(void *)v1081 + v1074 - v1082 * v123[1];
                ++v1536;
              }
              while (v1536 < v1073);
            }
          }
          else if (v261 == 1)
          {
            if (*v68)
            {
              unint64_t v263 = 0;
              uint64_t v264 = 0;
              uint64_t v265 = 0;
              uint64_t v266 = *(void *)(v67 + 152);
              v267 = v122[19];
              vDSP_Length v268 = (int)v262;
              uint64_t v269 = 8 * (int)v262;
              v270 = (int *)v66[19];
              do
              {
                vDSP_vaddi((const int *)(v266 + 8 * v265), 1, &v267[2 * v264], 1, v270, 1, v268);
                v265 += **(void **)(*a1 + 24);
                v264 += **(void **)(*a2 + 24);
                ++v263;
                v270 = (int *)((char *)v270 + v269);
              }
              while (v263 < **(int **)*a1);
            }
          }
          else if (v66[6])
          {
            unint64_t v1084 = 0;
            v1609 = v122[19];
            uint64_t v1655 = *(void *)(v67 + 152);
            vDSP_Length v1563 = (int)v262;
            v1085 = (int *)v66[19];
            do
            {
              uint64_t v1086 = *(void *)*a1;
              unint64_t v1087 = (unint64_t)(*(void *)(*a1 + 8) - v1086) >> 2;
              uint64_t v1088 = 0;
              uint64_t v1089 = (v1087 - 1);
              if ((int)v1087 - 1 >= 0)
              {
                uint64_t v1090 = *(void *)(*a1 + 24);
                int v1091 = v1084;
                do
                {
                  ldiv_t v1092 = ldiv(v1091, *(int *)(v1086 + 4 * v1089));
                  int v1091 = v1092.quot;
                  v1088 += *(void *)(v1090 + 8 * v1089--) * v1092.rem;
                }
                while (v1089 != -1);
              }
              uint64_t v1093 = *(void *)*a2;
              unint64_t v1094 = (unint64_t)(*(void *)(*a2 + 8) - v1093) >> 2;
              uint64_t v1095 = 0;
              uint64_t v1096 = (v1094 - 1);
              if ((int)v1094 - 1 >= 0)
              {
                uint64_t v1097 = *(void *)(*a2 + 24);
                int v1098 = v1084;
                do
                {
                  ldiv_t v1099 = ldiv(v1098, *(int *)(v1093 + 4 * v1096));
                  int v1098 = v1099.quot;
                  v1095 += *(void *)(v1097 + 8 * v1096--) * v1099.rem;
                }
                while (v1096 != -1);
              }
              vDSP_vaddi((const int *)(v1655 + 8 * (int)v1088), 1, &v1609[2 * (int)v1095], 1, v1085, 1, v1563);
              v1085 += 2 * v1563;
              v1084 += v1563;
            }
            while (v1084 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_400:
          switch(v258)
          {
            case 1uLL:
              uint64_t v271 = v66[6];
              if (v271)
              {
                int64_t v272 = *(void **)(v67 + 152);
                v273 = v122[19];
                v274 = (void *)v66[19];
                uint64_t v275 = 8 * *(void *)v122[3];
                uint64_t v276 = 8 * **(void **)(v67 + 24);
                do
                {
                  *v274++ = *(void *)v273 + *v272;
                  v273 = (int *)((char *)v273 + v275);
                  int64_t v272 = (void *)((char *)v272 + v276);
                  --v271;
                }
                while (v271);
              }
              break;
            case 2uLL:
              uint64_t v678 = *v68;
              if (v678)
              {
                uint64_t v679 = 0;
                uint64_t v680 = 0;
                uint64_t v681 = 0;
                uint64_t v682 = 0;
                uint64_t v683 = *(void *)(v67 + 152);
                v684 = v122[19];
                uint64_t v685 = v66[19];
                unint64_t v686 = v68[1];
                v687 = *(uint64_t **)(v67 + 24);
                uint64_t v688 = *v687;
                uint64_t v689 = v687[1];
                v690 = v122[3];
                uint64_t v691 = *(void *)v690;
                uint64_t v692 = *((void *)v690 + 1);
                uint64_t v693 = v691 - v692 * v123[1];
                if (v686 <= 1) {
                  uint64_t v694 = 1;
                }
                else {
                  uint64_t v694 = v68[1];
                }
                uint64_t v695 = v688 - v689 * v686;
                do
                {
                  if (v686)
                  {
                    uint64_t v696 = v680 + v694;
                    v697 = (void *)(v685 + 8 * v680);
                    uint64_t v698 = v694;
                    do
                    {
                      *v697++ = *(void *)&v684[2 * v681] + *(void *)(v683 + 8 * v682);
                      v682 += v689;
                      v681 += v692;
                      --v698;
                    }
                    while (v698);
                    uint64_t v680 = v696;
                  }
                  v682 += v695;
                  v681 += v693;
                  ++v679;
                }
                while (v679 != v678);
              }
              break;
            case 3uLL:
              uint64_t v699 = *v68;
              if (v699)
              {
                uint64_t v700 = 0;
                uint64_t v701 = 0;
                uint64_t v702 = 0;
                uint64_t v703 = 0;
                uint64_t v704 = *(void *)(v67 + 152);
                v705 = v122[19];
                uint64_t v706 = v66[19];
                unint64_t v707 = v68[1];
                v708 = *(void **)(v67 + 24);
                uint64_t v709 = v708[1];
                v710 = v122[3];
                uint64_t v711 = *((void *)v710 + 1);
                uint64_t v712 = *(void *)v710 - v711 * v123[1];
                if (v707 <= 1) {
                  uint64_t v713 = 1;
                }
                else {
                  uint64_t v713 = v68[1];
                }
                unint64_t v714 = *v708 - v709 * v707;
                do
                {
                  if (v707)
                  {
                    uint64_t v715 = 0;
                    unint64_t v716 = v68[2];
                    uint64_t v717 = v708[2];
                    uint64_t v718 = *((void *)v710 + 2);
                    if (v716 <= 1) {
                      uint64_t v719 = 1;
                    }
                    else {
                      uint64_t v719 = v68[2];
                    }
                    uint64_t v720 = v711 - v718 * v123[2];
                    do
                    {
                      uint64_t v721 = v719;
                      if (v716)
                      {
                        do
                        {
                          *(void *)(v706 + 8 * v701++) = *(void *)&v705[2 * v702] + *(void *)(v704 + 8 * v703);
                          v703 += v717;
                          v702 += v718;
                          --v721;
                        }
                        while (v721);
                      }
                      v703 += v709 - v717 * v716;
                      v702 += v720;
                      ++v715;
                    }
                    while (v715 != v713);
                  }
                  v703 += v714;
                  v702 += v712;
                  ++v700;
                }
                while (v700 != v699);
              }
              break;
            case 4uLL:
              uint64_t v1643 = *v68;
              if (v1643)
              {
                uint64_t v722 = 0;
                uint64_t v723 = 0;
                uint64_t v724 = 0;
                uint64_t v725 = 0;
                uint64_t v726 = *(void *)(v67 + 152);
                v727 = v122[19];
                uint64_t v728 = v66[19];
                unint64_t v729 = v68[1];
                v730 = *(void **)(v67 + 24);
                v731 = v122[3];
                uint64_t v1518 = *((void *)v731 + 1);
                uint64_t v1524 = v730[1];
                uint64_t v1551 = *(void *)v731 - v1518 * v123[1];
                int v1597 = v68[1];
                if (v729 <= 1) {
                  uint64_t v732 = 1;
                }
                else {
                  uint64_t v732 = v68[1];
                }
                unint64_t v1531 = *v730 - v730[1] * v729;
                do
                {
                  if (v1597)
                  {
                    uint64_t v733 = 0;
                    unint64_t v734 = v68[2];
                    uint64_t v735 = v730[2];
                    uint64_t v736 = *((void *)v731 + 2);
                    if (v734 <= 1) {
                      uint64_t v737 = 1;
                    }
                    else {
                      uint64_t v737 = v68[2];
                    }
                    uint64_t v738 = v1518 - v736 * v123[2];
                    do
                    {
                      if (v734)
                      {
                        uint64_t v739 = 0;
                        unint64_t v740 = v68[3];
                        uint64_t v741 = v730[3];
                        uint64_t v742 = *((void *)v731 + 3);
                        if (v740 <= 1) {
                          uint64_t v743 = 1;
                        }
                        else {
                          uint64_t v743 = v68[3];
                        }
                        uint64_t v744 = v736 - v742 * v123[3];
                        do
                        {
                          uint64_t v745 = v743;
                          if (v740)
                          {
                            do
                            {
                              *(void *)(v728 + 8 * v723++) = *(void *)&v727[2 * v724] + *(void *)(v726 + 8 * v725);
                              v725 += v741;
                              v724 += v742;
                              --v745;
                            }
                            while (v745);
                          }
                          v725 += v735 - v741 * v740;
                          v724 += v744;
                          ++v739;
                        }
                        while (v739 != v737);
                      }
                      v725 += v1524 - v735 * v734;
                      v724 += v738;
                      ++v733;
                    }
                    while (v733 != v732);
                  }
                  v725 += v1531;
                  v724 += v1551;
                  ++v722;
                }
                while (v722 != v1643);
              }
              break;
            default:
              uint64_t v1596 = v66[6];
              uint64_t v1642 = v70;
              if (v1596)
              {
                uint64_t v667 = 0;
                v1530 = v122[19];
                uint64_t v1550 = *(void *)(v67 + 152);
                uint64_t v1523 = v66[19];
                do
                {
                  uint64_t v668 = v1642;
                  if ((v1642 & 0x80000000) != 0)
                  {
                    LODWORD(v669) = 0;
                  }
                  else
                  {
                    uint64_t v669 = 0;
                    uint64_t v670 = *(void *)(v67 + 24);
                    int v671 = v667;
                    do
                    {
                      ldiv_t v672 = ldiv(v671, v68[v668]);
                      int v671 = v672.quot;
                      v669 += *(void *)(v670 + 8 * v668--) * v672.rem;
                    }
                    while (v668 != -1);
                  }
                  uint64_t v673 = 0;
                  if ((v125 & 0x80000000) == 0)
                  {
                    v674 = v122[3];
                    uint64_t v675 = v125;
                    int v676 = v667;
                    do
                    {
                      ldiv_t v677 = ldiv(v676, v123[v675]);
                      int v676 = v677.quot;
                      v673 += *(void *)&v674[2 * v675--] * v677.rem;
                    }
                    while (v675 != -1);
                  }
                  *(void *)(v1523 + 8 * v667++) = *(void *)&v1530[2 * (int)v673]
                                                  + *(void *)(v1550 + 8 * (int)v669);
                }
                while (v667 != v1596);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v13)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_16:
          uint64_t v14 = *(const int **)(*a1 + 152);
          uint64_t v15 = *a2;
          goto LABEL_18;
        case 2:
LABEL_17:
          uint64_t v15 = *a1;
          uint64_t v14 = *(const int **)(*a2 + 152);
LABEL_18:
          uint64_t v16 = *(int **)(*(void *)a3 + 152);
          uint64_t v17 = *(const int **)(v15 + 152);
          vDSP_Length v18 = *(void *)(v15 + 160);
          vDSP_vsaddi(v17, 1, v14, v16, 1, v18);
          return;
        case 3:
LABEL_21:
          uint64_t v19 = *(const int **)(*a1 + 152);
          int v20 = *(const int **)(*a2 + 152);
          uint64_t v21 = *(int **)(*(void *)a3 + 152);
          vDSP_Length v22 = *(void *)(*(void *)a3 + 48);
          vDSP_vaddi(v19, 1, v20, 1, v21, 1, v22);
          return;
        default:
          int64_t v75 = *(void **)a3;
          uint64_t v76 = *a1;
          uint64_t v77 = *(int **)*a1;
          uint64_t v78 = (*(void *)(*a1 + 8) - (void)v77) >> 2;
          uint64_t v79 = (v78 - 1);
          if ((int)v79 >= -1) {
            int v80 = -1;
          }
          else {
            int v80 = v78 - 1;
          }
          int v81 = v80 + 1;
          int v82 = v78 + 1;
          break;
      }
      while (1)
      {
        unsigned int v83 = v82 - 2;
        if (v82 - 2 < 0) {
          break;
        }
        --v82;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v83) != *(void *)(v75[3] + 8 * v83)) {
          goto LABEL_118;
        }
      }
      int v82 = v81;
LABEL_118:
      long long v130 = (int **)*a2;
      char v131 = *(int **)*a2;
      uint64_t v132 = (*(void *)(*a2 + 8) - (void)v131) >> 2;
      uint64_t v133 = (v132 - 1);
      if ((int)v133 >= -1) {
        int v134 = -1;
      }
      else {
        int v134 = v132 - 1;
      }
      int v135 = v134 + 1;
      int v136 = v132 + 1;
      while (1)
      {
        unsigned int v137 = v136 - 2;
        if (v136 - 2 < 0) {
          break;
        }
        --v136;
        if (*(void *)&v130[3][2 * v137] != *(void *)(v75[3] + 8 * v137)) {
          goto LABEL_156;
        }
      }
      int v136 = v135;
LABEL_156:
      int v150 = v78 + 1;
      while (1)
      {
        unsigned int v151 = v150 - 2;
        if (v150 - 2 < 0) {
          break;
        }
        --v150;
        if (*(void *)(*(void *)(v76 + 24) + 8 * v151)) {
          goto LABEL_191;
        }
      }
      int v150 = v81;
LABEL_191:
      int v164 = v132 + 1;
      while (1)
      {
        int v165 = v164 - 2;
        if (v164 - 2 < 0) {
          break;
        }
        --v164;
        if (*(void *)&v130[3][2 * v165]) {
          goto LABEL_406;
        }
      }
      int v164 = v135;
LABEL_406:
      unint64_t v277 = (uint64_t)(v75[1] - *v75) >> 2;
      if (v82 <= v136) {
        int v278 = v136;
      }
      else {
        int v278 = v82;
      }
      if (v82 <= v164) {
        int v82 = v164;
      }
      if (v150 > v136) {
        int v136 = v150;
      }
      if (v277 > v136) {
        int v279 = 1;
      }
      else {
        int v279 = 4;
      }
      if (v277 <= v136) {
        int v136 = (uint64_t)(v75[1] - *v75) >> 2;
      }
      if (v277 <= v82) {
        int v82 = v136;
      }
      else {
        int v279 = 2;
      }
      if (v277 <= v278)
      {
        int v280 = v82;
      }
      else
      {
        int v279 = 3;
        int v280 = v278;
      }
      if (!v280) {
        goto LABEL_435;
      }
      unint64_t v281 = *(void *)(v75[3] + 8 * (v280 - 1));
      if (v281 < 0x10) {
        goto LABEL_435;
      }
      switch(v279)
      {
        case 1:
          if (v280 == 2)
          {
            int v1463 = *v77;
            if (*v77)
            {
              uint64_t v1464 = 0;
              uint64_t v1465 = 0;
              uint64_t v1678 = *(void *)(v76 + 152);
              v1632 = v130[19];
              v1466 = (int *)v75[19];
              unint64_t v1544 = 0;
              vDSP_Length v1586 = (int)v281;
              uint64_t v1467 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1468 = 0;
                  do
                  {
                    vDSP_vsaddi(&v1632[v1464], 1, (const int *)(v1678 + 4 * v1465), v1466, 1, v1586);
                    uint64_t v76 = *a1;
                    v1469 = *(void **)(*a1 + 24);
                    uint64_t v1470 = v1469[1];
                    v1465 += v1470;
                    long long v130 = (int **)*a2;
                    v1471 = *(int **)(*a2 + 24);
                    uint64_t v1472 = *((void *)v1471 + 1);
                    v1464 += v1472;
                    ++v1468;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1473 = v77[1];
                    v1466 = (int *)((char *)v1466 + v1467);
                  }
                  while (v1468 < v1473);
                  int v1463 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1473 = 0;
                  v1469 = *(void **)(v76 + 24);
                  uint64_t v1470 = v1469[1];
                  v1471 = v130[3];
                  uint64_t v1472 = *((void *)v1471 + 1);
                }
                uint64_t v1465 = *v1469 + v1465 - v1473 * v1470;
                uint64_t v1464 = *(void *)v1471 + v1464 - v1472 * v131[1];
                ++v1544;
              }
              while (v1544 < v1463);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v916 = 0;
              uint64_t v917 = 0;
              uint64_t v918 = 0;
              uint64_t v919 = *(void *)(v76 + 152);
              v920 = v130[19];
              vDSP_Length v921 = (int)v281;
              uint64_t v922 = 4 * (int)v281;
              v923 = (int *)v75[19];
              do
              {
                vDSP_vsaddi(&v920[v917], 1, (const int *)(v919 + 4 * v918), v923, 1, v921);
                v918 += **(void **)(*a1 + 24);
                v917 += **(void **)(*a2 + 24);
                ++v916;
                v923 = (int *)((char *)v923 + v922);
              }
              while (v916 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1474 = 0;
            v1633 = v130[19];
            uint64_t v1679 = *(void *)(v76 + 152);
            vDSP_Length v1587 = (int)v281;
            v1475 = (int *)v75[19];
            do
            {
              uint64_t v1476 = *(void *)*a1;
              unint64_t v1477 = (unint64_t)(*(void *)(*a1 + 8) - v1476) >> 2;
              uint64_t v1478 = 0;
              uint64_t v1479 = (v1477 - 1);
              if ((int)v1477 - 1 >= 0)
              {
                uint64_t v1480 = *(void *)(*a1 + 24);
                int v1481 = v1474;
                do
                {
                  ldiv_t v1482 = ldiv(v1481, *(int *)(v1476 + 4 * v1479));
                  int v1481 = v1482.quot;
                  v1478 += *(void *)(v1480 + 8 * v1479--) * v1482.rem;
                }
                while (v1479 != -1);
              }
              uint64_t v1483 = *(void *)*a2;
              unint64_t v1484 = (unint64_t)(*(void *)(*a2 + 8) - v1483) >> 2;
              uint64_t v1485 = 0;
              uint64_t v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                uint64_t v1487 = *(void *)(*a2 + 24);
                int v1488 = v1474;
                do
                {
                  ldiv_t v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  int v1488 = v1489.quot;
                  v1485 += *(void *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              vDSP_vsaddi(&v1633[(int)v1485], 1, (const int *)(v1679 + 4 * (int)v1478), v1475, 1, v1587);
              v1475 += v1587;
              v1474 += v1587;
            }
            while (v1474 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v280 == 2)
          {
            int v1490 = *v77;
            if (*v77)
            {
              uint64_t v1491 = 0;
              uint64_t v1492 = 0;
              uint64_t v1680 = *(void *)(v76 + 152);
              v1634 = v130[19];
              v1493 = (int *)v75[19];
              unint64_t v1545 = 0;
              vDSP_Length v1588 = (int)v281;
              uint64_t v1494 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1495 = 0;
                  do
                  {
                    vDSP_vsaddi((const int *)(v1680 + 4 * v1492), 1, &v1634[v1491], v1493, 1, v1588);
                    uint64_t v76 = *a1;
                    v1496 = *(void **)(*a1 + 24);
                    uint64_t v1497 = v1496[1];
                    v1492 += v1497;
                    long long v130 = (int **)*a2;
                    v1498 = *(int **)(*a2 + 24);
                    uint64_t v1499 = *((void *)v1498 + 1);
                    v1491 += v1499;
                    ++v1495;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1500 = v77[1];
                    v1493 = (int *)((char *)v1493 + v1494);
                  }
                  while (v1495 < v1500);
                  int v1490 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1500 = 0;
                  v1496 = *(void **)(v76 + 24);
                  uint64_t v1497 = v1496[1];
                  v1498 = v130[3];
                  uint64_t v1499 = *((void *)v1498 + 1);
                }
                uint64_t v1492 = *v1496 + v1492 - v1500 * v1497;
                uint64_t v1491 = *(void *)v1498 + v1491 - v1499 * v131[1];
                ++v1545;
              }
              while (v1545 < v1490);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v924 = 0;
              uint64_t v925 = 0;
              uint64_t v926 = 0;
              uint64_t v927 = *(void *)(v76 + 152);
              v928 = v130[19];
              vDSP_Length v929 = (int)v281;
              uint64_t v930 = 4 * (int)v281;
              v931 = (int *)v75[19];
              do
              {
                vDSP_vsaddi((const int *)(v927 + 4 * v926), 1, &v928[v925], v931, 1, v929);
                v926 += **(void **)(*a1 + 24);
                v925 += **(void **)(*a2 + 24);
                ++v924;
                v931 = (int *)((char *)v931 + v930);
              }
              while (v924 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1501 = 0;
            v1635 = v130[19];
            uint64_t v1681 = *(void *)(v76 + 152);
            vDSP_Length v1589 = (int)v281;
            v1502 = (int *)v75[19];
            do
            {
              uint64_t v1503 = *(void *)*a1;
              unint64_t v1504 = (unint64_t)(*(void *)(*a1 + 8) - v1503) >> 2;
              uint64_t v1505 = 0;
              uint64_t v1506 = (v1504 - 1);
              if ((int)v1504 - 1 >= 0)
              {
                uint64_t v1507 = *(void *)(*a1 + 24);
                int v1508 = v1501;
                do
                {
                  ldiv_t v1509 = ldiv(v1508, *(int *)(v1503 + 4 * v1506));
                  int v1508 = v1509.quot;
                  v1505 += *(void *)(v1507 + 8 * v1506--) * v1509.rem;
                }
                while (v1506 != -1);
              }
              uint64_t v1510 = *(void *)*a2;
              unint64_t v1511 = (unint64_t)(*(void *)(*a2 + 8) - v1510) >> 2;
              uint64_t v1512 = 0;
              uint64_t v1513 = (v1511 - 1);
              if ((int)v1511 - 1 >= 0)
              {
                uint64_t v1514 = *(void *)(*a2 + 24);
                int v1515 = v1501;
                do
                {
                  ldiv_t v1516 = ldiv(v1515, *(int *)(v1510 + 4 * v1513));
                  int v1515 = v1516.quot;
                  v1512 += *(void *)(v1514 + 8 * v1513--) * v1516.rem;
                }
                while (v1513 != -1);
              }
              vDSP_vsaddi((const int *)(v1681 + 4 * (int)v1505), 1, &v1635[(int)v1512], v1502, 1, v1589);
              v1502 += v1589;
              v1501 += v1589;
            }
            while (v1501 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v280 == 2)
          {
            int v1100 = *v77;
            if (*v77)
            {
              uint64_t v1101 = 0;
              uint64_t v1102 = 0;
              uint64_t v1656 = *(void *)(v76 + 152);
              v1610 = v130[19];
              v1103 = (int *)v75[19];
              unint64_t v1537 = 0;
              vDSP_Length v1564 = (int)v281;
              uint64_t v1104 = 4 * (int)v281;
              do
              {
                if (v77[1])
                {
                  unint64_t v1105 = 0;
                  do
                  {
                    vDSP_vaddi((const int *)(v1656 + 4 * v1102), 1, &v1610[v1101], 1, v1103, 1, v1564);
                    uint64_t v76 = *a1;
                    v1106 = *(void **)(*a1 + 24);
                    uint64_t v1107 = v1106[1];
                    v1102 += v1107;
                    long long v130 = (int **)*a2;
                    v1108 = *(int **)(*a2 + 24);
                    uint64_t v1109 = *((void *)v1108 + 1);
                    v1101 += v1109;
                    ++v1105;
                    uint64_t v77 = *(int **)*a1;
                    unint64_t v1110 = v77[1];
                    v1103 = (int *)((char *)v1103 + v1104);
                  }
                  while (v1105 < v1110);
                  int v1100 = *v77;
                  char v131 = *v130;
                }
                else
                {
                  unint64_t v1110 = 0;
                  v1106 = *(void **)(v76 + 24);
                  uint64_t v1107 = v1106[1];
                  v1108 = v130[3];
                  uint64_t v1109 = *((void *)v1108 + 1);
                }
                uint64_t v1102 = *v1106 + v1102 - v1110 * v1107;
                uint64_t v1101 = *(void *)v1108 + v1101 - v1109 * v131[1];
                ++v1537;
              }
              while (v1537 < v1100);
            }
          }
          else if (v280 == 1)
          {
            if (*v77)
            {
              unint64_t v282 = 0;
              uint64_t v283 = 0;
              uint64_t v284 = 0;
              uint64_t v285 = *(void *)(v76 + 152);
              int v286 = v130[19];
              vDSP_Length v287 = (int)v281;
              uint64_t v288 = 4 * (int)v281;
              int v289 = (int *)v75[19];
              do
              {
                vDSP_vaddi((const int *)(v285 + 4 * v284), 1, &v286[v283], 1, v289, 1, v287);
                v284 += **(void **)(*a1 + 24);
                v283 += **(void **)(*a2 + 24);
                ++v282;
                int v289 = (int *)((char *)v289 + v288);
              }
              while (v282 < **(int **)*a1);
            }
          }
          else if (v75[6])
          {
            unint64_t v1111 = 0;
            v1611 = v130[19];
            uint64_t v1657 = *(void *)(v76 + 152);
            vDSP_Length v1565 = (int)v281;
            v1112 = (int *)v75[19];
            do
            {
              uint64_t v1113 = *(void *)*a1;
              unint64_t v1114 = (unint64_t)(*(void *)(*a1 + 8) - v1113) >> 2;
              uint64_t v1115 = 0;
              uint64_t v1116 = (v1114 - 1);
              if ((int)v1114 - 1 >= 0)
              {
                uint64_t v1117 = *(void *)(*a1 + 24);
                int v1118 = v1111;
                do
                {
                  ldiv_t v1119 = ldiv(v1118, *(int *)(v1113 + 4 * v1116));
                  int v1118 = v1119.quot;
                  v1115 += *(void *)(v1117 + 8 * v1116--) * v1119.rem;
                }
                while (v1116 != -1);
              }
              uint64_t v1120 = *(void *)*a2;
              unint64_t v1121 = (unint64_t)(*(void *)(*a2 + 8) - v1120) >> 2;
              uint64_t v1122 = 0;
              uint64_t v1123 = (v1121 - 1);
              if ((int)v1121 - 1 >= 0)
              {
                uint64_t v1124 = *(void *)(*a2 + 24);
                int v1125 = v1111;
                do
                {
                  ldiv_t v1126 = ldiv(v1125, *(int *)(v1120 + 4 * v1123));
                  int v1125 = v1126.quot;
                  v1122 += *(void *)(v1124 + 8 * v1123--) * v1126.rem;
                }
                while (v1123 != -1);
              }
              vDSP_vaddi((const int *)(v1657 + 4 * (int)v1115), 1, &v1611[(int)v1122], 1, v1112, 1, v1565);
              v1112 += v1565;
              v1111 += v1565;
            }
            while (v1111 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_435:
          switch(v277)
          {
            case 1uLL:
              uint64_t v290 = v75[6];
              if (v290)
              {
                uint64_t v291 = *(float **)(v76 + 152);
                uint64_t v292 = (float *)v130[19];
                v293 = (float *)v75[19];
                uint64_t v294 = 4 * *(void *)v130[3];
                uint64_t v295 = 4 * **(void **)(v76 + 24);
                do
                {
                  *v293++ = *v291 + *v292;
                  uint64_t v292 = (float *)((char *)v292 + v294);
                  uint64_t v291 = (float *)((char *)v291 + v295);
                  --v290;
                }
                while (v290);
              }
              break;
            case 2uLL:
              uint64_t v757 = *v77;
              if (v757)
              {
                uint64_t v758 = 0;
                uint64_t v759 = 0;
                uint64_t v760 = 0;
                uint64_t v761 = 0;
                uint64_t v762 = *(void *)(v76 + 152);
                v763 = v130[19];
                uint64_t v764 = v75[19];
                unint64_t v765 = v77[1];
                v766 = *(uint64_t **)(v76 + 24);
                uint64_t v767 = *v766;
                uint64_t v768 = v766[1];
                v769 = v130[3];
                uint64_t v770 = *(void *)v769;
                uint64_t v771 = *((void *)v769 + 1);
                uint64_t v772 = v770 - v771 * v131[1];
                if (v765 <= 1) {
                  uint64_t v773 = 1;
                }
                else {
                  uint64_t v773 = v77[1];
                }
                uint64_t v774 = v767 - v768 * v765;
                do
                {
                  if (v765)
                  {
                    uint64_t v775 = v759 + v773;
                    v776 = (float *)(v764 + 4 * v759);
                    uint64_t v777 = v773;
                    do
                    {
                      *v776++ = *(float *)(v762 + 4 * v761) + *(float *)&v763[v760];
                      v761 += v768;
                      v760 += v771;
                      --v777;
                    }
                    while (v777);
                    uint64_t v759 = v775;
                  }
                  v761 += v774;
                  v760 += v772;
                  ++v758;
                }
                while (v758 != v757);
              }
              break;
            case 3uLL:
              uint64_t v778 = *v77;
              if (v778)
              {
                uint64_t v779 = 0;
                uint64_t v780 = 0;
                uint64_t v781 = 0;
                uint64_t v782 = 0;
                uint64_t v783 = *(void *)(v76 + 152);
                v784 = v130[19];
                uint64_t v785 = v75[19];
                unint64_t v786 = v77[1];
                v787 = *(void **)(v76 + 24);
                uint64_t v788 = v787[1];
                v789 = v130[3];
                uint64_t v790 = *((void *)v789 + 1);
                uint64_t v791 = *(void *)v789 - v790 * v131[1];
                if (v786 <= 1) {
                  uint64_t v792 = 1;
                }
                else {
                  uint64_t v792 = v77[1];
                }
                unint64_t v793 = *v787 - v788 * v786;
                do
                {
                  if (v786)
                  {
                    uint64_t v794 = 0;
                    unint64_t v795 = v77[2];
                    uint64_t v796 = v787[2];
                    uint64_t v797 = *((void *)v789 + 2);
                    if (v795 <= 1) {
                      uint64_t v798 = 1;
                    }
                    else {
                      uint64_t v798 = v77[2];
                    }
                    uint64_t v799 = v790 - v797 * v131[2];
                    do
                    {
                      uint64_t v800 = v798;
                      if (v795)
                      {
                        do
                        {
                          *(float *)(v785 + 4 * v780++) = *(float *)(v783 + 4 * v782) + *(float *)&v784[v781];
                          v782 += v796;
                          v781 += v797;
                          --v800;
                        }
                        while (v800);
                      }
                      v782 += v788 - v796 * v795;
                      v781 += v799;
                      ++v794;
                    }
                    while (v794 != v792);
                  }
                  v782 += v793;
                  v781 += v791;
                  ++v779;
                }
                while (v779 != v778);
              }
              break;
            case 4uLL:
              uint64_t v1645 = *v77;
              if (v1645)
              {
                uint64_t v801 = 0;
                uint64_t v802 = 0;
                uint64_t v803 = 0;
                uint64_t v804 = 0;
                uint64_t v805 = *(void *)(v76 + 152);
                v806 = v130[19];
                uint64_t v807 = v75[19];
                unint64_t v808 = v77[1];
                v809 = *(void **)(v76 + 24);
                v810 = v130[3];
                uint64_t v1533 = *((void *)v810 + 1);
                uint64_t v1553 = v809[1];
                uint64_t v1599 = *(void *)v810 - v1533 * v131[1];
                if (v808 <= 1) {
                  uint64_t v811 = 1;
                }
                else {
                  uint64_t v811 = v77[1];
                }
                unint64_t v812 = *v809 - v809[1] * v808;
                do
                {
                  if (v808)
                  {
                    uint64_t v813 = 0;
                    unint64_t v814 = v77[2];
                    uint64_t v815 = v809[2];
                    uint64_t v816 = *((void *)v810 + 2);
                    if (v814 <= 1) {
                      uint64_t v817 = 1;
                    }
                    else {
                      uint64_t v817 = v77[2];
                    }
                    uint64_t v818 = v1533 - v816 * v131[2];
                    do
                    {
                      if (v814)
                      {
                        uint64_t v819 = 0;
                        unint64_t v820 = v77[3];
                        uint64_t v821 = v809[3];
                        uint64_t v822 = *((void *)v810 + 3);
                        if (v820 <= 1) {
                          uint64_t v823 = 1;
                        }
                        else {
                          uint64_t v823 = v77[3];
                        }
                        uint64_t v824 = v816 - v822 * v131[3];
                        do
                        {
                          uint64_t v825 = v823;
                          if (v820)
                          {
                            do
                            {
                              *(float *)(v807 + 4 * v802++) = *(float *)(v805 + 4 * v804) + *(float *)&v806[v803];
                              v804 += v821;
                              v803 += v822;
                              --v825;
                            }
                            while (v825);
                          }
                          v804 += v815 - v821 * v820;
                          v803 += v824;
                          ++v819;
                        }
                        while (v819 != v817);
                      }
                      v804 += v1553 - v815 * v814;
                      v803 += v818;
                      ++v813;
                    }
                    while (v813 != v811);
                  }
                  v804 += v812;
                  v803 += v1599;
                  ++v801;
                }
                while (v801 != v1645);
              }
              break;
            default:
              uint64_t v1598 = v75[6];
              uint64_t v1644 = v79;
              if (v1598)
              {
                uint64_t v746 = 0;
                v1532 = v130[19];
                uint64_t v1552 = *(void *)(v76 + 152);
                uint64_t v1525 = v75[19];
                do
                {
                  uint64_t v747 = v1644;
                  if ((v1644 & 0x80000000) != 0)
                  {
                    LODWORD(v748) = 0;
                  }
                  else
                  {
                    uint64_t v748 = 0;
                    uint64_t v749 = *(void *)(v76 + 24);
                    int v750 = v746;
                    do
                    {
                      ldiv_t v751 = ldiv(v750, v77[v747]);
                      int v750 = v751.quot;
                      v748 += *(void *)(v749 + 8 * v747--) * v751.rem;
                    }
                    while (v747 != -1);
                  }
                  uint64_t v752 = 0;
                  if ((v133 & 0x80000000) == 0)
                  {
                    v753 = v130[3];
                    uint64_t v754 = v133;
                    int v755 = v746;
                    do
                    {
                      ldiv_t v756 = ldiv(v755, v131[v754]);
                      int v755 = v756.quot;
                      v752 += *(void *)&v753[2 * v754--] * v756.rem;
                    }
                    while (v754 != -1);
                  }
                  *(float *)(v1525 + 4 * v746++) = *(float *)(v1552 + 4 * (int)v748) + *(float *)&v1532[(int)v752];
                }
                while (v746 != v1598);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Add::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_8>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned __int8 **)(*a2 + 152) != -**(unsigned char **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          int v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            int v36 = *(BOOL **)(*(void *)a3 + 152);
            int v37 = *(unsigned __int8 **)(*a2 + 152);
            int v38 = -**(unsigned __int8 **)(*a1 + 152);
            unsigned int v39 = v35 + 1;
            do
            {
              int v40 = *v37++;
              *v36++ = v40 != v38;
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          int v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            int v42 = **(unsigned __int8 **)(*a2 + 152);
            uint64_t v43 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v44 = *(char **)(*a1 + 152);
            unsigned int v45 = v41 + 1;
            do
            {
              char v46 = *v44++;
              *v43++ = v42 != -v46;
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            unsigned int v48 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v49 = *(unsigned __int8 **)(*a2 + 152);
            uint64_t v50 = *(char **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              char v53 = *v50++;
              char v52 = v53;
              int v54 = *v49++;
              *v48++ = v54 != -v52;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          uint64_t v26 = *(void **)a3;
          uint64_t v27 = (void *)*a1;
          int v28 = *(int **)*a1;
          uint64_t v29 = (v27[1] - (void)v28) >> 2;
          uint64_t v30 = (v29 - 1);
          if ((int)v30 >= -1) {
            int v31 = -1;
          }
          else {
            int v31 = v29 - 1;
          }
          int v32 = v31 + 1;
          int v33 = v29 + 1;
          break;
      }
      while (1)
      {
        unsigned int v34 = v33 - 2;
        if (v33 - 2 < 0) {
          break;
        }
        --v33;
        if (*(void *)(v27[3] + 8 * v34) != *(void *)(v26[3] + 8 * v34)) {
          goto LABEL_147;
        }
      }
      int v33 = v32;
LABEL_147:
      uint64_t v215 = (void *)*a2;
      int v216 = *(int **)*a2;
      uint64_t v217 = (v215[1] - (void)v216) >> 2;
      uint64_t v218 = (v217 - 1);
      if ((int)v218 >= -1) {
        int v219 = -1;
      }
      else {
        int v219 = v217 - 1;
      }
      int v220 = v219 + 1;
      int v221 = v217 + 1;
      while (1)
      {
        unsigned int v222 = v221 - 2;
        if (v221 - 2 < 0) {
          break;
        }
        --v221;
        if (*(void *)(v215[3] + 8 * v222) != *(void *)(v26[3] + 8 * v222)) {
          goto LABEL_201;
        }
      }
      int v221 = v220;
LABEL_201:
      int v269 = v29 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v27[3] + 8 * v270)) {
          goto LABEL_236;
        }
      }
      int v269 = v32;
LABEL_236:
      int v283 = v217 + 1;
      while (1)
      {
        unsigned int v284 = v283 - 2;
        if (v283 - 2 < 0) {
          break;
        }
        --v283;
        if (*(void *)(v215[3] + 8 * v284)) {
          goto LABEL_271;
        }
      }
      int v283 = v220;
LABEL_271:
      unint64_t v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221) {
        int v298 = v221;
      }
      else {
        int v298 = v33;
      }
      if (v33 <= v283) {
        int v33 = v283;
      }
      if (v269 > v221) {
        int v221 = v269;
      }
      if (v297 > v221)
      {
        int v299 = 1;
      }
      else
      {
        int v221 = (uint64_t)(v26[1] - *v26) >> 2;
        int v299 = 4;
      }
      if (v297 > v33)
      {
        int v300 = 2;
      }
      else
      {
        int v33 = v221;
        int v300 = v299;
      }
      if (v297 > v298)
      {
        int v33 = v298;
        int v300 = 3;
      }
      uint64_t v1944 = v218;
      uint64_t v1960 = v30;
      if (!v33) {
        goto LABEL_300;
      }
      unint64_t v301 = *(void *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10) {
        goto LABEL_300;
      }
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            uint64_t v1353 = *v28;
            if (v1353)
            {
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = 0;
              uint64_t v1357 = v27[19];
              uint64_t v1358 = v215[19];
              uint64_t v1359 = v26[19];
              unint64_t v1360 = v28[1];
              v1361 = (uint64_t *)v27[3];
              uint64_t v1362 = *v1361;
              uint64_t v1363 = v1361[1];
              uint64_t v1364 = (uint64_t *)v215[3];
              uint64_t v1366 = *v1364;
              uint64_t v1365 = v1364[1];
              if (v1360 <= 1) {
                uint64_t v1367 = 1;
              }
              else {
                uint64_t v1367 = v28[1];
              }
              uint64_t v1368 = v1362 - v1363 * v1360;
              uint64_t v1369 = v1366 - v1365 * v216[1];
              do
              {
                if (v1360)
                {
                  uint64_t v1370 = 0;
                  uint64_t v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1372 = 0;
                      int v1373 = -*(unsigned __int8 *)(v1357 + v1356);
                      unsigned int v1374 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1359 + v1372) = *(unsigned __int8 *)(v1371 + v1372) != v1373;
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v971 = *v28;
            if (v971)
            {
              uint64_t v972 = 0;
              uint64_t v973 = 0;
              uint64_t v974 = v27[19];
              uint64_t v975 = v215[19];
              uint64_t v976 = v26[19];
              uint64_t v977 = *(void *)v27[3];
              uint64_t v978 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v979 = 0;
                  int v980 = -*(unsigned __int8 *)(v974 + v973);
                  unsigned int v981 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v976 + v979) = *(unsigned __int8 *)(v975 + v979) != v980;
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            unint64_t v1901 = v26[6];
            if (v1901)
            {
              unint64_t v1930 = 0;
              uint64_t v1852 = v215[19];
              uint64_t v1867 = v27[19];
              uint64_t v1375 = v26[19];
              do
              {
                uint64_t v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1377 = v27[3];
                  int quot = v1930;
                  do
                  {
                    ldiv_t v1379 = ldiv(quot, v28[v30]);
                    int quot = v1379.quot;
                    v1376 += *(void *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  uint64_t v1381 = 0;
                  uint64_t v1382 = v215[3];
                  int v1383 = v1930;
                  do
                  {
                    ldiv_t v1384 = ldiv(v1383, v216[v1380]);
                    int v1383 = v1384.quot;
                    v1381 += *(void *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1385 = 0;
                  int v1386 = -*(unsigned __int8 *)(v1867 + (int)v1376);
                  unsigned int v1387 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1375 + v1385) = *(unsigned __int8 *)(v1852 + (int)v1381 + v1385) != v1386;
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            uint64_t v1388 = *v28;
            if (v1388)
            {
              uint64_t v1389 = 0;
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              uint64_t v1392 = v27[19];
              uint64_t v1393 = v215[19];
              uint64_t v1394 = v26[19];
              unint64_t v1395 = v28[1];
              unint64_t v1396 = (uint64_t *)v27[3];
              uint64_t v1397 = *v1396;
              uint64_t v1398 = v1396[1];
              uint64_t v1399 = (uint64_t *)v215[3];
              uint64_t v1401 = *v1399;
              uint64_t v1400 = v1399[1];
              if (v1395 <= 1) {
                uint64_t v1402 = 1;
              }
              else {
                uint64_t v1402 = v28[1];
              }
              uint64_t v1403 = v1397 - v1398 * v1395;
              uint64_t v1404 = v1401 - v1400 * v216[1];
              do
              {
                if (v1395)
                {
                  uint64_t v1405 = 0;
                  uint64_t v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1407 = 0;
                      int v1408 = *(unsigned __int8 *)(v1393 + v1390);
                      unsigned int v1409 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1394 + v1407) = v1408 != -*(unsigned char *)(v1406 + v1407);
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v982 = *v28;
            if (v982)
            {
              uint64_t v983 = 0;
              uint64_t v984 = 0;
              uint64_t v985 = v27[19];
              uint64_t v986 = v215[19];
              uint64_t v987 = v26[19];
              uint64_t v988 = *(void *)v27[3];
              uint64_t v989 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v990 = 0;
                  int v991 = *(unsigned __int8 *)(v986 + v984);
                  unsigned int v992 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v987 + v990) = v991 != -*(unsigned char *)(v985 + v990);
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            unint64_t v1902 = v26[6];
            if (v1902)
            {
              unint64_t v1931 = 0;
              uint64_t v1853 = v215[19];
              uint64_t v1868 = v27[19];
              uint64_t v1410 = v26[19];
              do
              {
                uint64_t v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1412 = v27[3];
                  int v1413 = v1931;
                  do
                  {
                    ldiv_t v1414 = ldiv(v1413, v28[v30]);
                    int v1413 = v1414.quot;
                    v1411 += *(void *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  uint64_t v1416 = 0;
                  uint64_t v1417 = v215[3];
                  int v1418 = v1931;
                  do
                  {
                    ldiv_t v1419 = ldiv(v1418, v216[v1415]);
                    int v1418 = v1419.quot;
                    v1416 += *(void *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1420 = 0;
                  int v1421 = *(unsigned __int8 *)(v1853 + (int)v1416);
                  unsigned int v1422 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1410 + v1420) = v1421 != -*(unsigned char *)(v1868 + (int)v1411 + v1420);
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            uint64_t v1121 = *v28;
            if (v1121)
            {
              uint64_t v1122 = 0;
              uint64_t v1123 = 0;
              uint64_t v1124 = 0;
              uint64_t v1125 = v27[19];
              uint64_t v1126 = v215[19];
              uint64_t v1127 = v26[19];
              unint64_t v1128 = v28[1];
              uint64_t v1129 = (uint64_t *)v27[3];
              uint64_t v1130 = *v1129;
              uint64_t v1131 = v1129[1];
              unint64_t v1132 = (uint64_t *)v215[3];
              uint64_t v1134 = *v1132;
              uint64_t v1133 = v1132[1];
              if (v1128 <= 1) {
                uint64_t v1135 = 1;
              }
              else {
                uint64_t v1135 = v28[1];
              }
              uint64_t v1136 = v1130 - v1131 * v1128;
              uint64_t v1137 = v1134 - v1133 * v216[1];
              do
              {
                if (v1128)
                {
                  uint64_t v1138 = 0;
                  uint64_t v1139 = v1126 + v1123;
                  uint64_t v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1141 = 0;
                      unsigned int v1142 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1127 + v1141) = *(unsigned __int8 *)(v1139 + v1141) != -*(unsigned char *)(v1140 + v1141);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v302 = *v28;
            if (v302)
            {
              uint64_t v303 = 0;
              uint64_t v304 = v27[19];
              uint64_t v305 = v215[19];
              uint64_t v306 = v26[19];
              uint64_t v307 = *(void *)v27[3];
              uint64_t v308 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v309 = 0;
                  unsigned int v310 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v306 + v309) = *(unsigned __int8 *)(v305 + v309) != -*(unsigned char *)(v304 + v309);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            unint64_t v1894 = v26[6];
            if (v1894)
            {
              unint64_t v1923 = 0;
              uint64_t v1847 = v215[19];
              uint64_t v1864 = v27[19];
              uint64_t v1143 = v26[19];
              do
              {
                uint64_t v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1145 = v27[3];
                  int v1146 = v1923;
                  do
                  {
                    ldiv_t v1147 = ldiv(v1146, v28[v30]);
                    int v1146 = v1147.quot;
                    v1144 += *(void *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  uint64_t v1149 = 0;
                  uint64_t v1150 = v215[3];
                  int v1151 = v1923;
                  do
                  {
                    ldiv_t v1152 = ldiv(v1151, v216[v1148]);
                    int v1151 = v1152.quot;
                    v1149 += *(void *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1153 = 0;
                  unsigned int v1154 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1143 + v1153) = *(unsigned __int8 *)(v1847 + (int)v1149 + v1153) != -*(unsigned char *)(v1864 + (int)v1144 + v1153);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              uint64_t v311 = v26[6];
              if (v311)
              {
                uint64_t v312 = (unsigned char *)v27[19];
                unsigned int v313 = (unsigned __int8 *)v215[19];
                uint64_t v314 = (BOOL *)v26[19];
                uint64_t v315 = *(void *)v27[3];
                uint64_t v316 = *(void *)v215[3];
                do
                {
                  *v314++ = *v313 != -*v312;
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              uint64_t v448 = *v28;
              if (v448)
              {
                uint64_t v449 = 0;
                uint64_t v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = v27[19];
                uint64_t v454 = v215[19];
                uint64_t v455 = v26[19];
                unint64_t v456 = v28[1];
                uint64_t v457 = (uint64_t *)v27[3];
                uint64_t v458 = *v457;
                uint64_t v459 = v457[1];
                v460 = (uint64_t *)v215[3];
                uint64_t v461 = *v460;
                uint64_t v462 = v460[1];
                uint64_t v463 = v461 - v462 * v216[1];
                if (v456 <= 1) {
                  uint64_t v464 = 1;
                }
                else {
                  uint64_t v464 = v28[1];
                }
                uint64_t v465 = v458 - v459 * v456;
                do
                {
                  if (v456)
                  {
                    uint64_t v466 = v450 + v464;
                    v467 = (BOOL *)(v455 + v450);
                    uint64_t v468 = v464;
                    do
                    {
                      *v467++ = *(unsigned __int8 *)(v454 + v451) != -*(unsigned char *)(v453 + v452);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    uint64_t v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              uint64_t v469 = *v28;
              if (v469)
              {
                uint64_t v470 = 0;
                uint64_t v471 = 0;
                uint64_t v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = v27[19];
                uint64_t v475 = v215[19];
                uint64_t v476 = v26[19];
                unint64_t v477 = v28[1];
                uint64_t v478 = (void *)v27[3];
                uint64_t v479 = v478[1];
                v480 = (void *)v215[3];
                uint64_t v481 = v480[1];
                uint64_t v482 = *v480 - v481 * v216[1];
                if (v477 <= 1) {
                  uint64_t v483 = 1;
                }
                else {
                  uint64_t v483 = v28[1];
                }
                unint64_t v484 = *v478 - v479 * v477;
                do
                {
                  if (v477)
                  {
                    uint64_t v485 = 0;
                    unint64_t v486 = v28[2];
                    uint64_t v487 = v478[2];
                    uint64_t v488 = v480[2];
                    if (v486 <= 1) {
                      uint64_t v489 = 1;
                    }
                    else {
                      uint64_t v489 = v28[2];
                    }
                    uint64_t v490 = v481 - v488 * v216[2];
                    do
                    {
                      uint64_t v491 = v489;
                      if (v486)
                      {
                        do
                        {
                          *(unsigned char *)(v476 + v471++) = *(unsigned __int8 *)(v475 + v472) != -*(unsigned char *)(v474 + v473);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              uint64_t v1967 = *v28;
              if (v1967)
              {
                uint64_t v492 = 0;
                uint64_t v493 = 0;
                uint64_t v494 = 0;
                uint64_t v495 = 0;
                uint64_t v496 = v27[19];
                uint64_t v497 = v215[19];
                uint64_t v498 = v26[19];
                unint64_t v499 = v28[1];
                v500 = (void *)v27[3];
                uint64_t v501 = (void *)v215[3];
                uint64_t v1862 = v501[1];
                uint64_t v1874 = v500[1];
                uint64_t v1916 = *v501 - v1862 * v216[1];
                int v1949 = v28[1];
                if (v499 <= 1) {
                  uint64_t v502 = 1;
                }
                else {
                  uint64_t v502 = v28[1];
                }
                unint64_t v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    uint64_t v503 = 0;
                    unint64_t v504 = v28[2];
                    uint64_t v505 = v500[2];
                    uint64_t v506 = v501[2];
                    if (v504 <= 1) {
                      uint64_t v507 = 1;
                    }
                    else {
                      uint64_t v507 = v28[2];
                    }
                    uint64_t v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if (v504)
                      {
                        uint64_t v509 = 0;
                        unint64_t v510 = v28[3];
                        uint64_t v511 = v500[3];
                        uint64_t v512 = v501[3];
                        if (v510 <= 1) {
                          uint64_t v513 = 1;
                        }
                        else {
                          uint64_t v513 = v28[3];
                        }
                        uint64_t v514 = v506 - v512 * v216[3];
                        do
                        {
                          uint64_t v515 = v513;
                          if (v510)
                          {
                            do
                            {
                              *(unsigned char *)(v498 + v493++) = *(unsigned __int8 *)(v497 + v494) != -*(unsigned char *)(v496 + v495);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              uint64_t v437 = v26[6];
              if (v437)
              {
                uint64_t v438 = 0;
                uint64_t v1886 = v215[19];
                uint64_t v1915 = v27[19];
                uint64_t v1873 = v26[19];
                do
                {
                  uint64_t v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    uint64_t v440 = v27[3];
                    int v441 = v438;
                    do
                    {
                      ldiv_t v442 = ldiv(v441, v28[v30]);
                      int v441 = v442.quot;
                      v439 += *(void *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  uint64_t v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    uint64_t v444 = 0;
                    uint64_t v445 = v215[3];
                    int v446 = v438;
                    do
                    {
                      ldiv_t v447 = ldiv(v446, v216[v443]);
                      int v446 = v447.quot;
                      v444 += *(void *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(unsigned char *)(v1873 + v438++) = *(unsigned __int8 *)(v1886 + (int)v444) != -*(unsigned char *)(v1915 + (int)v439);
                  uint64_t v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            char v10 = **(unsigned char **)(*a1 + 152);
            int v11 = *(unsigned char **)(*(void *)a3 + 152);
            int v12 = *(char **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              char v14 = *v12++;
              *v11++ = v14 + v10;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            char v64 = **(unsigned char **)(*a2 + 152);
            unsigned int v65 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v66 = *(char **)(*a1 + 152);
            unsigned int v67 = v63 + 1;
            do
            {
              char v68 = *v66++;
              *v65++ = v68 + v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          int v69 = *(_DWORD *)(*(void *)a3 + 48);
          if (v69 >= 1)
          {
            uint64_t v70 = *(unsigned char **)(*(void *)a3 + 152);
            int v71 = *(char **)(*a2 + 152);
            int v72 = *(char **)(*a1 + 152);
            unsigned int v73 = v69 + 1;
            do
            {
              char v75 = *v72++;
              char v74 = v75;
              char v76 = *v71++;
              *v70++ = v76 + v74;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          int v55 = *(void **)a3;
          uint64_t v56 = *a1;
          char v57 = *(int **)*a1;
          uint64_t v58 = (*(void *)(*a1 + 8) - (void)v57) >> 2;
          int v59 = v58 - 1;
          if ((int)v58 - 1 >= -1) {
            int v59 = -1;
          }
          int v60 = v59 + 1;
          int v61 = v58 + 1;
          break;
      }
      while (1)
      {
        unsigned int v62 = v61 - 2;
        if (v61 - 2 < 0) {
          break;
        }
        --v61;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v62) != *(void *)(v55[3] + 8 * v62)) {
          goto LABEL_155;
        }
      }
      int v61 = v60;
LABEL_155:
      int v223 = (int **)*a2;
      int v224 = *(int **)*a2;
      uint64_t v225 = (*(void *)(*a2 + 8) - (void)v224) >> 2;
      int v226 = v225 - 1;
      if ((int)v225 - 1 >= -1) {
        int v226 = -1;
      }
      int v227 = v226 + 1;
      int v228 = v225 + 1;
      while (1)
      {
        unsigned int v229 = v228 - 2;
        if (v228 - 2 < 0) {
          break;
        }
        --v228;
        if (*(void *)&v223[3][2 * v229] != *(void *)(v55[3] + 8 * v229)) {
          goto LABEL_206;
        }
      }
      int v228 = v227;
LABEL_206:
      int v271 = v58 + 1;
      while (1)
      {
        unsigned int v272 = v271 - 2;
        if (v271 - 2 < 0) {
          break;
        }
        --v271;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v272)) {
          goto LABEL_241;
        }
      }
      int v271 = v60;
LABEL_241:
      int v285 = v225 + 1;
      while (1)
      {
        int v286 = v285 - 2;
        if (v285 - 2 < 0) {
          break;
        }
        --v285;
        if (*(void *)&v223[3][2 * v286]) {
          goto LABEL_306;
        }
      }
      int v285 = v227;
LABEL_306:
      unint64_t v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228) {
        int v318 = v228;
      }
      else {
        int v318 = v61;
      }
      if (v61 <= v285) {
        int v61 = v285;
      }
      if (v271 > v228) {
        int v228 = v271;
      }
      if (v317 > v228)
      {
        int v319 = 1;
      }
      else
      {
        int v228 = (uint64_t)(v55[1] - *v55) >> 2;
        int v319 = 4;
      }
      if (v317 > v61)
      {
        int v320 = 2;
      }
      else
      {
        int v61 = v228;
        int v320 = v319;
      }
      if (v317 > v318)
      {
        int v61 = v318;
        int v320 = 3;
      }
      if (!v61) {
        goto LABEL_336;
      }
      unint64_t v321 = *(void *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10) {
        goto LABEL_336;
      }
      uint64_t v1961 = *(void *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            int v1423 = *v57;
            if (*v57)
            {
              unint64_t v1424 = 0;
              uint64_t v1425 = 0;
              uint64_t v1426 = 0;
              uint64_t v1427 = *(void *)(v56 + 152);
              ldiv_t v1428 = v223[19];
              uint64_t v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1431 = 0;
                      char v1432 = *(unsigned char *)(v1427 + v1426);
                      unsigned int v1433 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1429 + v1431) = *((unsigned char *)v1428 + v1425 + v1431) + v1432;
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      uint64_t v56 = *a1;
                      int v223 = (int **)*a2;
                      char v57 = *(int **)*a1;
                    }
                    int v1434 = *(void **)(v56 + 24);
                    uint64_t v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((void *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    unint64_t v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  int v1423 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1436 = 0;
                  int v1434 = *(void **)(v56 + 24);
                  uint64_t v1435 = v1434[1];
                }
                uint64_t v1426 = *v1434 + v1426 - v1436 * v1435;
                uint64_t v1425 = *(void *)v223[3] + v1425 - *((void *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            int v993 = *v57;
            if (*v57)
            {
              unint64_t v994 = 0;
              uint64_t v995 = 0;
              uint64_t v996 = 0;
              uint64_t v997 = *(void *)(v56 + 152);
              uint64_t v998 = v223[19];
              uint64_t v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1000 = 0;
                  char v1001 = *(unsigned char *)(v997 + v996);
                  unsigned int v1002 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v999 + v1000) = *((unsigned char *)v998 + v995 + v1000) + v1001;
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  uint64_t v56 = *a1;
                  int v223 = (int **)*a2;
                  int v993 = **(_DWORD **)*a1;
                }
                v996 += **(void **)(v56 + 24);
                v995 += *(void *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            v1882 = v223[19];
            uint64_t v1903 = *(void *)(v56 + 152);
            uint64_t v1932 = (int)v321;
            unint64_t v1956 = 0;
            unsigned int v1869 = v321 + 1;
            uint64_t v1437 = v55[19];
            do
            {
              uint64_t v1438 = *(void *)*a1;
              unint64_t v1439 = (unint64_t)(*(void *)(*a1 + 8) - v1438) >> 2;
              uint64_t v1440 = 0;
              uint64_t v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                uint64_t v1442 = *(void *)(*a1 + 24);
                int v1443 = v1956;
                do
                {
                  ldiv_t v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  int v1443 = v1444.quot;
                  v1440 += *(void *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              uint64_t v1445 = *(void *)*a2;
              unint64_t v1446 = (unint64_t)(*(void *)(*a2 + 8) - v1445) >> 2;
              uint64_t v1447 = 0;
              uint64_t v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                uint64_t v1449 = *(void *)(*a2 + 24);
                int v1450 = v1956;
                do
                {
                  ldiv_t v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  int v1450 = v1451.quot;
                  v1447 += *(void *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1452 = 0;
                char v1453 = *(unsigned char *)(v1903 + (int)v1440);
                unsigned int v1454 = v1869;
                do
                {
                  *(unsigned char *)(v1437 + v1452) = *((unsigned char *)v1882 + (int)v1447 + v1452) + v1453;
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                int v55 = *(void **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            int v1455 = *v57;
            if (*v57)
            {
              unint64_t v1456 = 0;
              uint64_t v1457 = 0;
              uint64_t v1458 = 0;
              uint64_t v1459 = *(void *)(v56 + 152);
              uint64_t v1460 = v223[19];
              uint64_t v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1463 = 0;
                      char v1464 = *((unsigned char *)v1460 + v1457);
                      unsigned int v1465 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1461 + v1463) = *(unsigned char *)(v1459 + v1458 + v1463) + v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      uint64_t v56 = *a1;
                      int v223 = (int **)*a2;
                      char v57 = *(int **)*a1;
                    }
                    v1466 = *(void **)(v56 + 24);
                    uint64_t v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((void *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    unint64_t v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  int v1455 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1468 = 0;
                  v1466 = *(void **)(v56 + 24);
                  uint64_t v1467 = v1466[1];
                }
                uint64_t v1458 = *v1466 + v1458 - v1468 * v1467;
                uint64_t v1457 = *(void *)v223[3] + v1457 - *((void *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            int v1003 = *v57;
            if (*v57)
            {
              unint64_t v1004 = 0;
              uint64_t v1005 = 0;
              uint64_t v1006 = 0;
              uint64_t v1007 = *(void *)(v56 + 152);
              ldiv_t v1008 = v223[19];
              uint64_t v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1010 = 0;
                  char v1011 = *((unsigned char *)v1008 + v1005);
                  unsigned int v1012 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v1009 + v1010) = *(unsigned char *)(v1007 + v1006 + v1010) + v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  uint64_t v56 = *a1;
                  int v223 = (int **)*a2;
                  int v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(void **)(v56 + 24);
                v1005 += *(void *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            v1883 = v223[19];
            uint64_t v1904 = *(void *)(v56 + 152);
            uint64_t v1933 = (int)v321;
            unint64_t v1957 = 0;
            unsigned int v1870 = v321 + 1;
            uint64_t v1469 = v55[19];
            do
            {
              uint64_t v1470 = *(void *)*a1;
              unint64_t v1471 = (unint64_t)(*(void *)(*a1 + 8) - v1470) >> 2;
              uint64_t v1472 = 0;
              uint64_t v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                uint64_t v1474 = *(void *)(*a1 + 24);
                int v1475 = v1957;
                do
                {
                  ldiv_t v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  int v1475 = v1476.quot;
                  v1472 += *(void *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              uint64_t v1477 = *(void *)*a2;
              unint64_t v1478 = (unint64_t)(*(void *)(*a2 + 8) - v1477) >> 2;
              uint64_t v1479 = 0;
              uint64_t v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                uint64_t v1481 = *(void *)(*a2 + 24);
                int v1482 = v1957;
                do
                {
                  ldiv_t v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  int v1482 = v1483.quot;
                  v1479 += *(void *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1484 = 0;
                char v1485 = *((unsigned char *)v1883 + (int)v1479);
                unsigned int v1486 = v1870;
                do
                {
                  *(unsigned char *)(v1469 + v1484) = *(unsigned char *)(v1904 + (int)v1472 + v1484) + v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                int v55 = *(void **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            int v1155 = *v57;
            if (*v57)
            {
              unint64_t v1156 = 0;
              uint64_t v1157 = 0;
              uint64_t v1158 = 0;
              uint64_t v1159 = *(void *)(v56 + 152);
              v1160 = v223[19];
              uint64_t v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1163 = 0;
                      unsigned int v1164 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1163) = *((unsigned char *)v1160 + v1157 + v1163)
                                                  + *(unsigned char *)(v1159 + v1158 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      uint64_t v56 = *a1;
                      int v223 = (int **)*a2;
                      char v57 = *(int **)*a1;
                    }
                    unint64_t v1165 = *(void **)(v56 + 24);
                    uint64_t v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((void *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    unint64_t v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  int v1155 = *v57;
                  int v224 = *v223;
                }
                else
                {
                  unint64_t v1167 = 0;
                  unint64_t v1165 = *(void **)(v56 + 24);
                  uint64_t v1166 = v1165[1];
                }
                uint64_t v1158 = *v1165 + v1158 - v1167 * v1166;
                uint64_t v1157 = *(void *)v223[3] + v1157 - *((void *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            int v322 = *v57;
            if (*v57)
            {
              unint64_t v323 = 0;
              uint64_t v324 = 0;
              uint64_t v325 = 0;
              uint64_t v326 = *(void *)(v56 + 152);
              uint64_t v327 = v223[19];
              uint64_t v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v329 = 0;
                  unsigned int v330 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v328 + v329) = *((unsigned char *)v327 + v324 + v329) + *(unsigned char *)(v326 + v325 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  uint64_t v56 = *a1;
                  int v223 = (int **)*a2;
                  int v322 = **(_DWORD **)*a1;
                }
                v325 += **(void **)(v56 + 24);
                v324 += *(void *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            v1880 = v223[19];
            uint64_t v1895 = *(void *)(v56 + 152);
            uint64_t v1924 = (int)v321;
            unint64_t v1954 = 0;
            unsigned int v1865 = v321 + 1;
            uint64_t v1168 = v55[19];
            do
            {
              uint64_t v1169 = *(void *)*a1;
              unint64_t v1170 = (unint64_t)(*(void *)(*a1 + 8) - v1169) >> 2;
              uint64_t v1171 = 0;
              uint64_t v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                uint64_t v1173 = *(void *)(*a1 + 24);
                int v1174 = v1954;
                do
                {
                  ldiv_t v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  int v1174 = v1175.quot;
                  v1171 += *(void *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              uint64_t v1176 = *(void *)*a2;
              unint64_t v1177 = (unint64_t)(*(void *)(*a2 + 8) - v1176) >> 2;
              uint64_t v1178 = 0;
              uint64_t v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                uint64_t v1180 = *(void *)(*a2 + 24);
                int v1181 = v1954;
                do
                {
                  ldiv_t v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  int v1181 = v1182.quot;
                  v1178 += *(void *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1183 = 0;
                unsigned int v1184 = v1865;
                do
                {
                  *(unsigned char *)(v1168 + v1183) = *((unsigned char *)v1880 + (int)v1178 + v1183)
                                            + *(unsigned char *)(v1895 + (int)v1171 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                int v55 = *(void **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                unint64_t v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = *(void *)(v56 + 152);
                uint64_t v335 = v223[19];
                uint64_t v336 = v55[19];
                do
                {
                  *(unsigned char *)(v336 + v331) = *((unsigned char *)v335 + v332) + *(unsigned char *)(v334 + v333);
                  v333 += **(void **)(*a1 + 24);
                  v332 += **(void **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v532 = *v57;
              if (*v57)
              {
                unint64_t v533 = 0;
                uint64_t v534 = 0;
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = *(void *)(v56 + 152);
                unint64_t v538 = v223[19];
                uint64_t v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v540 = 0;
                    do
                    {
                      *(unsigned char *)(v539 + v534 + v540) = *((unsigned char *)v538 + v535) + *(unsigned char *)(v537 + v536);
                      uint64_t v56 = *a1;
                      uint64_t v541 = *(void **)(*a1 + 24);
                      uint64_t v542 = v541[1];
                      v536 += v542;
                      int v223 = (int **)*a2;
                      v543 = *(int **)(*a2 + 24);
                      uint64_t v544 = *((void *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      char v57 = *(int **)*a1;
                      unint64_t v545 = v57[1];
                    }
                    while (v540 < v545);
                    int v532 = *v57;
                    int v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    unint64_t v545 = 0;
                    uint64_t v541 = *(void **)(v56 + 24);
                    uint64_t v542 = v541[1];
                    v543 = v223[3];
                    uint64_t v544 = *((void *)v543 + 1);
                  }
                  uint64_t v536 = *v541 + v536 - v545 * v542;
                  uint64_t v535 = *(void *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              int v546 = *v57;
              if (*v57)
              {
                unint64_t v547 = 0;
                uint64_t v548 = 0;
                uint64_t v549 = 0;
                uint64_t v550 = 0;
                uint64_t v551 = *(void *)(v56 + 152);
                unint64_t v552 = v223[19];
                uint64_t v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v555 = 0;
                        do
                        {
                          *(unsigned char *)(v553 + v548 + v555) = *((unsigned char *)v552 + v549) + *(unsigned char *)(v551 + v550);
                          uint64_t v56 = *a1;
                          uint64_t v556 = *(void **)(*a1 + 24);
                          uint64_t v557 = v556[2];
                          v550 += v557;
                          int v223 = (int **)*a2;
                          uint64_t v558 = *(int **)(*a2 + 24);
                          uint64_t v559 = *((void *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          char v57 = *(int **)*a1;
                          unint64_t v560 = v57[2];
                        }
                        while (v555 < v560);
                        int v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        unint64_t v560 = 0;
                        uint64_t v556 = *(void **)(v56 + 24);
                        uint64_t v557 = v556[2];
                        uint64_t v558 = v223[3];
                        uint64_t v559 = *((void *)v558 + 2);
                      }
                      uint64_t v561 = v556[1];
                      uint64_t v550 = v561 + v550 - v560 * v557;
                      uint64_t v549 = *((void *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      unint64_t v562 = v57[1];
                    }
                    while (v554 < v562);
                    int v546 = *v57;
                  }
                  else
                  {
                    unint64_t v562 = 0;
                    uint64_t v556 = *(void **)(v56 + 24);
                    uint64_t v561 = v556[1];
                  }
                  uint64_t v550 = *v556 + v550 - v562 * v561;
                  uint64_t v549 = *(void *)v223[3] + v549 - *((void *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              int v563 = *v57;
              if (*v57)
              {
                unint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = 0;
                uint64_t v568 = *(void *)(v56 + 152);
                unint64_t v569 = v223[19];
                uint64_t v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            unint64_t v573 = 0;
                            do
                            {
                              *(unsigned char *)(v570 + v565 + v573) = *((unsigned char *)v569 + v566) + *(unsigned char *)(v568 + v567);
                              uint64_t v56 = *a1;
                              v574 = *(void **)(*a1 + 24);
                              uint64_t v575 = v574[3];
                              v567 += v575;
                              int v223 = (int **)*a2;
                              unint64_t v576 = *(int **)(*a2 + 24);
                              uint64_t v577 = *((void *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              char v57 = *(int **)*a1;
                              unint64_t v578 = v57[3];
                            }
                            while (v573 < v578);
                            int v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            unint64_t v578 = 0;
                            v574 = *(void **)(v56 + 24);
                            uint64_t v575 = v574[3];
                            unint64_t v576 = v223[3];
                            uint64_t v577 = *((void *)v576 + 3);
                          }
                          uint64_t v579 = v574[2];
                          uint64_t v567 = v579 + v567 - v578 * v575;
                          uint64_t v566 = *((void *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          unint64_t v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        unint64_t v580 = 0;
                        v574 = *(void **)(v56 + 24);
                        uint64_t v579 = v574[2];
                      }
                      uint64_t v567 = v574[1] + v567 - v580 * v579;
                      uint64_t v566 = *((void *)v223[3] + 1) + v566 - *((void *)v223[3] + 2) * v224[2];
                      ++v571;
                      unint64_t v581 = v57[1];
                    }
                    while (v571 < v581);
                    int v563 = *v57;
                  }
                  else
                  {
                    unint64_t v581 = 0;
                  }
                  uint64_t v567 = **(void **)(v56 + 24) + v567 - *(void *)(*(void *)(v56 + 24) + 8) * v581;
                  uint64_t v566 = *(void *)v223[3] + v566 - *((void *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                unint64_t v516 = 0;
                v1950 = v223[19];
                uint64_t v1968 = *(void *)(v56 + 152);
                uint64_t v517 = v55[19];
                do
                {
                  uint64_t v518 = *(void *)*a1;
                  unint64_t v519 = (unint64_t)(*(void *)(*a1 + 8) - v518) >> 2;
                  uint64_t v520 = 0;
                  uint64_t v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    uint64_t v522 = *(void *)(*a1 + 24);
                    int v523 = v516;
                    do
                    {
                      ldiv_t v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      int v523 = v524.quot;
                      v520 += *(void *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  uint64_t v525 = *(void *)*a2;
                  unint64_t v526 = (unint64_t)(*(void *)(*a2 + 8) - v525) >> 2;
                  uint64_t v527 = 0;
                  uint64_t v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    uint64_t v529 = *(void *)(*a2 + 24);
                    int v530 = v516;
                    do
                    {
                      ldiv_t v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      int v530 = v531.quot;
                      v527 += *(void *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(unsigned char *)(v517 + v516++) = *((unsigned char *)v1950 + (int)v527) + *(unsigned char *)(v1968 + (int)v520);
                }
                while (v516 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            vDSP_Length v18 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = v21 + v17;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          int v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            int v87 = **(_DWORD **)(*a2 + 152);
            int v88 = *(_DWORD **)(*(void *)a3 + 152);
            int v89 = *(int **)(*a1 + 152);
            unsigned int v90 = v86 + 1;
            do
            {
              int v91 = *v89++;
              *v88++ = v91 + v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          int v92 = *(_DWORD *)(*(void *)a3 + 48);
          if (v92 >= 1)
          {
            uint64_t v93 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v94 = *(int **)(*a2 + 152);
            int v95 = *(int **)(*a1 + 152);
            unsigned int v96 = v92 + 1;
            do
            {
              int v98 = *v95++;
              int v97 = v98;
              int v99 = *v94++;
              *v93++ = v99 + v97;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          uint64_t v77 = *(void **)a3;
          uint64_t v78 = (void *)*a1;
          uint64_t v79 = *(int **)*a1;
          uint64_t v80 = (v78[1] - (void)v79) >> 2;
          uint64_t v81 = (v80 - 1);
          if ((int)v81 >= -1) {
            int v82 = -1;
          }
          else {
            int v82 = v80 - 1;
          }
          int v83 = v82 + 1;
          int v84 = v80 + 1;
          break;
      }
      while (1)
      {
        unsigned int v85 = v84 - 2;
        if (v84 - 2 < 0) {
          break;
        }
        --v84;
        if (*(void *)(v78[3] + 8 * v85) != *(void *)(v77[3] + 8 * v85)) {
          goto LABEL_162;
        }
      }
      int v84 = v83;
LABEL_162:
      v230 = (void *)*a2;
      vDSP_Length v231 = *(int **)*a2;
      uint64_t v232 = (v230[1] - (void)v231) >> 2;
      uint64_t v233 = (v232 - 1);
      if ((int)v233 >= -1) {
        int v234 = -1;
      }
      else {
        int v234 = v232 - 1;
      }
      int v235 = v234 + 1;
      int v236 = v232 + 1;
      while (1)
      {
        unsigned int v237 = v236 - 2;
        if (v236 - 2 < 0) {
          break;
        }
        --v236;
        if (*(void *)(v230[3] + 8 * v237) != *(void *)(v77[3] + 8 * v237)) {
          goto LABEL_211;
        }
      }
      int v236 = v235;
LABEL_211:
      int v273 = v80 + 1;
      while (1)
      {
        unsigned int v274 = v273 - 2;
        if (v273 - 2 < 0) {
          break;
        }
        --v273;
        if (*(void *)(v78[3] + 8 * v274)) {
          goto LABEL_246;
        }
      }
      int v273 = v83;
LABEL_246:
      int v287 = v232 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(v230[3] + 8 * v288)) {
          goto LABEL_342;
        }
      }
      int v287 = v235;
LABEL_342:
      unint64_t v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236) {
        int v338 = v236;
      }
      else {
        int v338 = v84;
      }
      if (v84 <= v287) {
        int v84 = v287;
      }
      if (v273 > v236) {
        int v236 = v273;
      }
      if (v337 > v236)
      {
        int v339 = 1;
      }
      else
      {
        int v236 = (uint64_t)(v77[1] - *v77) >> 2;
        int v339 = 4;
      }
      if (v337 > v84)
      {
        int v340 = 2;
      }
      else
      {
        int v84 = v236;
        int v340 = v339;
      }
      if (v337 > v338)
      {
        int v84 = v338;
        int v340 = 3;
      }
      uint64_t v1945 = v233;
      uint64_t v1962 = v81;
      if (!v84) {
        goto LABEL_372;
      }
      unint64_t v341 = *(void *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10) {
        goto LABEL_372;
      }
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            int v1487 = *v79;
            if (*v79)
            {
              unint64_t v1488 = 0;
              uint64_t v1489 = 0;
              uint64_t v1490 = 0;
              uint64_t v1491 = v78[19];
              uint64_t v1492 = v230[19];
              uint64_t v1493 = v77[19];
              uint64_t v1494 = (uint64_t *)v78[3];
              uint64_t v1495 = *v1494;
              uint64_t v1496 = v1494[1];
              uint64_t v1497 = (uint64_t *)v230[3];
              uint64_t v1498 = *v1497;
              uint64_t v1499 = v1497[1];
              int v1500 = v79[1];
              int v1501 = v1500;
              do
              {
                if (v1501)
                {
                  unint64_t v1502 = 0;
                  uint64_t v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1504 = 0;
                      int v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      unsigned int v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = *(_DWORD *)(v1503 + v1504) + v1505;
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      int v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  uint64_t v1507 = v1500;
                  int v1487 = *v79;
                  int v1501 = v1500;
                }
                else
                {
                  uint64_t v1507 = 0;
                }
                uint64_t v1490 = v1490 + v1495 - v1507 * v1496;
                uint64_t v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            int v1013 = *v79;
            if (*v79)
            {
              unint64_t v1014 = 0;
              uint64_t v1015 = 0;
              uint64_t v1016 = v78[19];
              uint64_t v1017 = v230[19];
              uint64_t v1018 = v77[19];
              uint64_t v1019 = *(void *)v78[3];
              uint64_t v1020 = 4 * *(void *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1021 = 0;
                  int v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  unsigned int v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = *(_DWORD *)(v1017 + v1021) + v1022;
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  int v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            unint64_t v1905 = v77[6];
            if (v1905)
            {
              unint64_t v1934 = 0;
              uint64_t v1839 = v230[19];
              uint64_t v1854 = v78[19];
              uint64_t v1508 = v77[19];
              do
              {
                uint64_t v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1510 = v78[3];
                  uint64_t v1511 = v81;
                  int v1512 = v1934;
                  do
                  {
                    ldiv_t v1513 = ldiv(v1512, v79[v1511]);
                    int v1512 = v1513.quot;
                    v1509 += *(void *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                uint64_t v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v230[3];
                  int v1517 = v1934;
                  do
                  {
                    ldiv_t v1518 = ldiv(v1517, v231[v1514]);
                    int v1517 = v1518.quot;
                    v1515 += *(void *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1519 = 0;
                  int v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  unsigned int v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519) + v1520;
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            int v1522 = *v79;
            if (*v79)
            {
              unint64_t v1523 = 0;
              uint64_t v1524 = 0;
              uint64_t v1525 = 0;
              uint64_t v1526 = v78[19];
              uint64_t v1527 = v230[19];
              uint64_t v1528 = v77[19];
              v1529 = (uint64_t *)v78[3];
              uint64_t v1530 = *v1529;
              uint64_t v1531 = v1529[1];
              v1532 = (uint64_t *)v230[3];
              uint64_t v1533 = *v1532;
              uint64_t v1534 = v1532[1];
              int v1535 = v79[1];
              int v1536 = v1535;
              do
              {
                if (v1536)
                {
                  unint64_t v1537 = 0;
                  uint64_t v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1539 = 0;
                      int v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      unsigned int v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) + v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      int v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  uint64_t v1542 = v1535;
                  int v1522 = *v79;
                  int v1536 = v1535;
                }
                else
                {
                  uint64_t v1542 = 0;
                }
                uint64_t v1525 = v1525 + v1530 - v1542 * v1531;
                uint64_t v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            int v1024 = *v79;
            if (*v79)
            {
              unint64_t v1025 = 0;
              uint64_t v1026 = 0;
              uint64_t v1027 = v78[19];
              uint64_t v1028 = v230[19];
              uint64_t v1029 = v77[19];
              uint64_t v1030 = *(void *)v230[3];
              uint64_t v1031 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1032 = 0;
                  int v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  unsigned int v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) + v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  int v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            unint64_t v1906 = v77[6];
            if (v1906)
            {
              unint64_t v1935 = 0;
              uint64_t v1840 = v230[19];
              uint64_t v1855 = v78[19];
              uint64_t v1543 = v77[19];
              do
              {
                uint64_t v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1545 = v78[3];
                  uint64_t v1546 = v81;
                  int v1547 = v1935;
                  do
                  {
                    ldiv_t v1548 = ldiv(v1547, v79[v1546]);
                    int v1547 = v1548.quot;
                    v1544 += *(void *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                uint64_t v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v230[3];
                  int v1552 = v1935;
                  do
                  {
                    ldiv_t v1553 = ldiv(v1552, v231[v1549]);
                    int v1552 = v1553.quot;
                    v1550 += *(void *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1554 = 0;
                  int v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  unsigned int v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) + v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            int v1185 = *v79;
            if (*v79)
            {
              unint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = 0;
              uint64_t v1189 = v78[19];
              uint64_t v1190 = v230[19];
              uint64_t v1191 = v77[19];
              v1192 = (uint64_t *)v78[3];
              uint64_t v1193 = *v1192;
              uint64_t v1194 = v1192[1];
              unint64_t v1195 = (uint64_t *)v230[3];
              uint64_t v1196 = *v1195;
              uint64_t v1197 = v1195[1];
              int v1198 = v79[1];
              int v1199 = v1198;
              do
              {
                if (v1199)
                {
                  unint64_t v1200 = 0;
                  uint64_t v1201 = v1190 + 4 * v1187;
                  uint64_t v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1203 = 0;
                      unsigned int v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1201 + v1203) + *(_DWORD *)(v1202 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      int v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  uint64_t v1205 = v1198;
                  int v1185 = *v79;
                  int v1199 = v1198;
                }
                else
                {
                  uint64_t v1205 = 0;
                }
                uint64_t v1188 = v1188 + v1193 - v1205 * v1194;
                uint64_t v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            int v342 = *v79;
            if (*v79)
            {
              unint64_t v343 = 0;
              uint64_t v344 = v78[19];
              uint64_t v345 = v230[19];
              uint64_t v346 = v77[19];
              uint64_t v347 = 4 * *(void *)v230[3];
              uint64_t v348 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v349 = 0;
                  unsigned int v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v345 + v349) + *(_DWORD *)(v344 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  int v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            unint64_t v1896 = v77[6];
            if (v1896)
            {
              unint64_t v1925 = 0;
              uint64_t v1835 = v230[19];
              uint64_t v1848 = v78[19];
              uint64_t v1206 = v77[19];
              do
              {
                uint64_t v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1208 = v78[3];
                  uint64_t v1209 = v81;
                  int v1210 = v1925;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v79[v1209]);
                    int v1210 = v1211.quot;
                    v1207 += *(void *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                uint64_t v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  uint64_t v1213 = 0;
                  uint64_t v1214 = v230[3];
                  int v1215 = v1925;
                  do
                  {
                    ldiv_t v1216 = ldiv(v1215, v231[v1212]);
                    int v1215 = v1216.quot;
                    v1213 += *(void *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1217 = 0;
                  unsigned int v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217)
                                               + *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              uint64_t v351 = v77[6];
              if (v351)
              {
                uint64_t v352 = (_DWORD *)v78[19];
                uint64_t v353 = (_DWORD *)v230[19];
                uint64_t v354 = (_DWORD *)v77[19];
                uint64_t v355 = 4 * *(void *)v230[3];
                uint64_t v356 = 4 * *(void *)v78[3];
                do
                {
                  *v354++ = *v353 + *v352;
                  uint64_t v353 = (_DWORD *)((char *)v353 + v355);
                  uint64_t v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              int v594 = *v79;
              if (*v79)
              {
                unint64_t v595 = 0;
                uint64_t v596 = 0;
                uint64_t v597 = 0;
                uint64_t v598 = 0;
                uint64_t v599 = v78[19];
                uint64_t v600 = v230[19];
                uint64_t v601 = v77[19];
                uint64_t v602 = (uint64_t *)v78[3];
                uint64_t v603 = *v602;
                uint64_t v604 = v602[1];
                uint64_t v605 = (uint64_t *)v230[3];
                uint64_t v607 = *v605;
                uint64_t v606 = v605[1];
                int v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (unint64_t i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v600 + 4 * v597) + *(_DWORD *)(v599 + 4 * v598);
                      v598 += v604;
                      v597 += v606;
                      int v608 = v79[1];
                    }
                    uint64_t v610 = v608;
                    int v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    uint64_t v610 = 0;
                  }
                  uint64_t v598 = v598 + v603 - v610 * v604;
                  uint64_t v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              int v611 = *v79;
              if (*v79)
              {
                unint64_t v612 = 0;
                uint64_t v613 = 0;
                uint64_t v614 = 0;
                uint64_t v615 = 0;
                uint64_t v616 = v78[19];
                uint64_t v617 = v230[19];
                uint64_t v618 = v77[19];
                uint64_t v619 = (uint64_t *)v78[3];
                uint64_t v620 = *v619;
                uint64_t v621 = v619[1];
                uint64_t v622 = (uint64_t *)v230[3];
                uint64_t v623 = *v622;
                uint64_t v624 = v622[1];
                int v625 = v79[1];
                int v626 = v625;
                do
                {
                  if (v626)
                  {
                    unint64_t v627 = 0;
                    uint64_t v628 = v619[2];
                    uint64_t v629 = v622[2];
                    int v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (unint64_t j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v617 + 4 * v614)
                                                               + *(_DWORD *)(v616 + 4 * v615);
                          v615 += v628;
                          v614 += v629;
                          int v630 = v79[2];
                        }
                        uint64_t v632 = v630;
                        int v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        uint64_t v632 = 0;
                      }
                      uint64_t v615 = v615 + v621 - v632 * v628;
                      uint64_t v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    uint64_t v633 = v625;
                    int v611 = *v79;
                    int v626 = v625;
                  }
                  else
                  {
                    uint64_t v633 = 0;
                  }
                  uint64_t v615 = v615 + v620 - v633 * v621;
                  uint64_t v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              int v634 = *v79;
              if (*v79)
              {
                unint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = v78[19];
                uint64_t v640 = v230[19];
                uint64_t v641 = v77[19];
                uint64_t v642 = (uint64_t *)v78[3];
                uint64_t v643 = *v642;
                uint64_t v644 = v642[1];
                uint64_t v645 = (uint64_t *)v230[3];
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                int v648 = v79[1];
                int v649 = v648;
                do
                {
                  if (v649)
                  {
                    unint64_t v650 = 0;
                    uint64_t v651 = v642[2];
                    uint64_t v652 = v645[2];
                    int v653 = v79[2];
                    int v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        unint64_t v655 = 0;
                        uint64_t v656 = v642[3];
                        uint64_t v657 = v645[3];
                        int v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (unint64_t k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v640 + 4 * v637)
                                                                   + *(_DWORD *)(v639 + 4 * v638);
                              v638 += v656;
                              v637 += v657;
                              int v658 = v79[3];
                            }
                            uint64_t v660 = v658;
                            int v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            uint64_t v660 = 0;
                          }
                          uint64_t v638 = v638 + v651 - v660 * v656;
                          uint64_t v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        uint64_t v661 = v653;
                        int v648 = v79[1];
                        int v654 = v653;
                      }
                      else
                      {
                        uint64_t v661 = 0;
                      }
                      uint64_t v638 = v638 + v644 - v661 * v651;
                      uint64_t v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    uint64_t v662 = v648;
                    int v634 = *v79;
                    int v649 = v648;
                  }
                  else
                  {
                    uint64_t v662 = 0;
                  }
                  uint64_t v638 = v638 + v643 - v662 * v644;
                  uint64_t v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              uint64_t v582 = v77[6];
              if (v582)
              {
                uint64_t v583 = 0;
                uint64_t v1888 = v230[19];
                uint64_t v1917 = v78[19];
                uint64_t v1875 = v77[19];
                do
                {
                  uint64_t v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    uint64_t v585 = v78[3];
                    uint64_t v586 = v81;
                    int v587 = v583;
                    do
                    {
                      ldiv_t v588 = ldiv(v587, v79[v586]);
                      int v587 = v588.quot;
                      v584 += *(void *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  uint64_t v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    uint64_t v590 = 0;
                    uint64_t v591 = v230[3];
                    int v592 = v583;
                    do
                    {
                      ldiv_t v593 = ldiv(v592, v231[v589]);
                      int v592 = v593.quot;
                      v590 += *(void *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1888 + 4 * (int)v590)
                                                  + *(_DWORD *)(v1917 + 4 * (int)v584);
                  uint64_t v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          char v7 = **(unsigned char **)(*a2 + 152) + **(unsigned char **)(*a1 + 152);
LABEL_16:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            char v109 = **(unsigned char **)(*a1 + 152);
            int v110 = *(unsigned char **)(*(void *)a3 + 152);
            int v111 = *(char **)(*a2 + 152);
            unsigned int v112 = v108 + 1;
            do
            {
              char v113 = *v111++;
              *v110++ = v113 + v109;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          int v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            char v115 = **(unsigned char **)(*a2 + 152);
            uint64_t v116 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v117 = *(char **)(*a1 + 152);
            unsigned int v118 = v114 + 1;
            do
            {
              char v119 = *v117++;
              *v116++ = v119 + v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          int v120 = *(_DWORD *)(*(void *)a3 + 48);
          if (v120 >= 1)
          {
            unsigned int v121 = *(unsigned char **)(*(void *)a3 + 152);
            unint64_t v122 = *(char **)(*a2 + 152);
            long long v123 = *(char **)(*a1 + 152);
            unsigned int v124 = v120 + 1;
            do
            {
              char v126 = *v123++;
              char v125 = v126;
              char v127 = *v122++;
              *v121++ = v127 + v125;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          int v100 = *(void **)a3;
          uint64_t v101 = *a1;
          uint64_t v102 = *(int **)*a1;
          uint64_t v103 = (*(void *)(*a1 + 8) - (void)v102) >> 2;
          int v104 = v103 - 1;
          if ((int)v103 - 1 >= -1) {
            int v104 = -1;
          }
          int v105 = v104 + 1;
          int v106 = v103 + 1;
          while (1)
          {
            unsigned int v107 = v106 - 2;
            if (v106 - 2 < 0) {
              break;
            }
            --v106;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v107) != *(void *)(v100[3] + 8 * v107)) {
              goto LABEL_170;
            }
          }
          int v106 = v105;
LABEL_170:
          uint64_t v238 = (int **)*a2;
          unint64_t v239 = *(int **)*a2;
          uint64_t v240 = (*(void *)(*a2 + 8) - (void)v239) >> 2;
          int v241 = v240 - 1;
          if ((int)v240 - 1 >= -1) {
            int v241 = -1;
          }
          int v242 = v241 + 1;
          int v243 = v240 + 1;
          while (1)
          {
            unsigned int v244 = v243 - 2;
            if (v243 - 2 < 0) {
              break;
            }
            --v243;
            if (*(void *)&v238[3][2 * v244] != *(void *)(v100[3] + 8 * v244)) {
              goto LABEL_216;
            }
          }
          int v243 = v242;
LABEL_216:
          int v275 = v103 + 1;
          while (1)
          {
            unsigned int v276 = v275 - 2;
            if (v275 - 2 < 0) {
              break;
            }
            --v275;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v276)) {
              goto LABEL_251;
            }
          }
          int v275 = v105;
LABEL_251:
          int v289 = v240 + 1;
          while (1)
          {
            int v290 = v289 - 2;
            if (v289 - 2 < 0) {
              break;
            }
            --v289;
            if (*(void *)&v238[3][2 * v290]) {
              goto LABEL_378;
            }
          }
          int v289 = v242;
LABEL_378:
          unint64_t v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243) {
            int v358 = v243;
          }
          else {
            int v358 = v106;
          }
          if (v106 <= v289) {
            int v106 = v289;
          }
          if (v275 > v243) {
            int v243 = v275;
          }
          if (v357 > v243)
          {
            int v359 = 1;
          }
          else
          {
            int v243 = (uint64_t)(v100[1] - *v100) >> 2;
            int v359 = 4;
          }
          if (v357 > v106)
          {
            int v360 = 2;
          }
          else
          {
            int v106 = v243;
            int v360 = v359;
          }
          if (v357 > v358)
          {
            int v106 = v358;
            int v360 = 3;
          }
          if (!v106) {
            goto LABEL_408;
          }
          unint64_t v361 = *(void *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10) {
            goto LABEL_408;
          }
          uint64_t v1963 = *(void *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                int v1557 = *v102;
                if (*v102)
                {
                  unint64_t v1558 = 0;
                  uint64_t v1559 = 0;
                  uint64_t v1560 = 0;
                  uint64_t v1561 = *(void *)(v101 + 152);
                  vDSP_Length v1562 = v238[19];
                  uint64_t v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1565 = 0;
                          char v1566 = *(unsigned char *)(v1561 + v1560);
                          unsigned int v1567 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1563 + v1565) = *((unsigned char *)v1562 + v1559 + v1565) + v1566;
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          uint64_t v102 = *(int **)*a1;
                        }
                        unint64_t v1568 = *(void **)(v101 + 24);
                        uint64_t v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((void *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        unint64_t v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      int v1557 = *v102;
                      unint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1570 = 0;
                      unint64_t v1568 = *(void **)(v101 + 24);
                      uint64_t v1569 = v1568[1];
                    }
                    uint64_t v1560 = *v1568 + v1560 - v1570 * v1569;
                    uint64_t v1559 = *(void *)v238[3] + v1559 - *((void *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                int v1035 = *v102;
                if (*v102)
                {
                  unint64_t v1036 = 0;
                  uint64_t v1037 = 0;
                  uint64_t v1038 = 0;
                  uint64_t v1039 = *(void *)(v101 + 152);
                  unint64_t v1040 = v238[19];
                  uint64_t v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1042 = 0;
                      char v1043 = *(unsigned char *)(v1039 + v1038);
                      unsigned int v1044 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1041 + v1042) = *((unsigned char *)v1040 + v1037 + v1042) + v1043;
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(void **)(v101 + 24);
                    v1037 += *(void *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                v1884 = v238[19];
                uint64_t v1907 = *(void *)(v101 + 152);
                uint64_t v1936 = (int)v361;
                unint64_t v1958 = 0;
                unsigned int v1871 = v361 + 1;
                uint64_t v1571 = v100[19];
                do
                {
                  uint64_t v1572 = *(void *)*a1;
                  unint64_t v1573 = (unint64_t)(*(void *)(*a1 + 8) - v1572) >> 2;
                  uint64_t v1574 = 0;
                  uint64_t v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    uint64_t v1576 = *(void *)(*a1 + 24);
                    int v1577 = v1958;
                    do
                    {
                      ldiv_t v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      int v1577 = v1578.quot;
                      v1574 += *(void *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  uint64_t v1579 = *(void *)*a2;
                  unint64_t v1580 = (unint64_t)(*(void *)(*a2 + 8) - v1579) >> 2;
                  uint64_t v1581 = 0;
                  uint64_t v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    uint64_t v1583 = *(void *)(*a2 + 24);
                    int v1584 = v1958;
                    do
                    {
                      ldiv_t v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      int v1584 = v1585.quot;
                      v1581 += *(void *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1586 = 0;
                    char v1587 = *(unsigned char *)(v1907 + (int)v1574);
                    unsigned int v1588 = v1871;
                    do
                    {
                      *(unsigned char *)(v1571 + v1586) = *((unsigned char *)v1884 + (int)v1581 + v1586) + v1587;
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                int v1589 = *v102;
                if (*v102)
                {
                  unint64_t v1590 = 0;
                  uint64_t v1591 = 0;
                  uint64_t v1592 = 0;
                  uint64_t v1593 = *(void *)(v101 + 152);
                  v1594 = v238[19];
                  uint64_t v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1597 = 0;
                          char v1598 = *((unsigned char *)v1594 + v1591);
                          unsigned int v1599 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1595 + v1597) = *(unsigned char *)(v1593 + v1592 + v1597) + v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          uint64_t v102 = *(int **)*a1;
                        }
                        uint64_t v1600 = *(void **)(v101 + 24);
                        uint64_t v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((void *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        unint64_t v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      int v1589 = *v102;
                      unint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1602 = 0;
                      uint64_t v1600 = *(void **)(v101 + 24);
                      uint64_t v1601 = v1600[1];
                    }
                    uint64_t v1592 = *v1600 + v1592 - v1602 * v1601;
                    uint64_t v1591 = *(void *)v238[3] + v1591 - *((void *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                int v1045 = *v102;
                if (*v102)
                {
                  unint64_t v1046 = 0;
                  uint64_t v1047 = 0;
                  uint64_t v1048 = 0;
                  uint64_t v1049 = *(void *)(v101 + 152);
                  uint64_t v1050 = v238[19];
                  uint64_t v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1052 = 0;
                      char v1053 = *((unsigned char *)v1050 + v1047);
                      unsigned int v1054 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1051 + v1052) = *(unsigned char *)(v1049 + v1048 + v1052) + v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(void **)(v101 + 24);
                    v1047 += *(void *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                v1885 = v238[19];
                uint64_t v1908 = *(void *)(v101 + 152);
                uint64_t v1937 = (int)v361;
                unint64_t v1959 = 0;
                unsigned int v1872 = v361 + 1;
                uint64_t v1603 = v100[19];
                do
                {
                  uint64_t v1604 = *(void *)*a1;
                  unint64_t v1605 = (unint64_t)(*(void *)(*a1 + 8) - v1604) >> 2;
                  uint64_t v1606 = 0;
                  uint64_t v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    uint64_t v1608 = *(void *)(*a1 + 24);
                    int v1609 = v1959;
                    do
                    {
                      ldiv_t v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      int v1609 = v1610.quot;
                      v1606 += *(void *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  uint64_t v1611 = *(void *)*a2;
                  unint64_t v1612 = (unint64_t)(*(void *)(*a2 + 8) - v1611) >> 2;
                  uint64_t v1613 = 0;
                  uint64_t v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    uint64_t v1615 = *(void *)(*a2 + 24);
                    int v1616 = v1959;
                    do
                    {
                      ldiv_t v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      int v1616 = v1617.quot;
                      v1613 += *(void *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1618 = 0;
                    char v1619 = *((unsigned char *)v1885 + (int)v1613);
                    unsigned int v1620 = v1872;
                    do
                    {
                      *(unsigned char *)(v1603 + v1618) = *(unsigned char *)(v1908 + (int)v1606 + v1618) + v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                int v1219 = *v102;
                if (*v102)
                {
                  unint64_t v1220 = 0;
                  uint64_t v1221 = 0;
                  uint64_t v1222 = 0;
                  uint64_t v1223 = *(void *)(v101 + 152);
                  unint64_t v1224 = v238[19];
                  uint64_t v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1227 = 0;
                          unsigned int v1228 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1225 + v1227) = *((unsigned char *)v1224 + v1221 + v1227)
                                                      + *(unsigned char *)(v1223 + v1222 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          uint64_t v101 = *a1;
                          uint64_t v238 = (int **)*a2;
                          uint64_t v102 = *(int **)*a1;
                        }
                        uint64_t v1229 = *(void **)(v101 + 24);
                        uint64_t v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((void *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        unint64_t v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      int v1219 = *v102;
                      unint64_t v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1231 = 0;
                      uint64_t v1229 = *(void **)(v101 + 24);
                      uint64_t v1230 = v1229[1];
                    }
                    uint64_t v1222 = *v1229 + v1222 - v1231 * v1230;
                    uint64_t v1221 = *(void *)v238[3] + v1221 - *((void *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                int v362 = *v102;
                if (*v102)
                {
                  unint64_t v363 = 0;
                  uint64_t v364 = 0;
                  uint64_t v365 = 0;
                  uint64_t v366 = *(void *)(v101 + 152);
                  uint64_t v367 = v238[19];
                  uint64_t v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v369 = 0;
                      unsigned int v370 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v368 + v369) = *((unsigned char *)v367 + v364 + v369) + *(unsigned char *)(v366 + v365 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      uint64_t v101 = *a1;
                      uint64_t v238 = (int **)*a2;
                      int v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(void **)(v101 + 24);
                    v364 += *(void *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                v1881 = v238[19];
                uint64_t v1897 = *(void *)(v101 + 152);
                uint64_t v1926 = (int)v361;
                unint64_t v1955 = 0;
                unsigned int v1866 = v361 + 1;
                uint64_t v1232 = v100[19];
                do
                {
                  uint64_t v1233 = *(void *)*a1;
                  unint64_t v1234 = (unint64_t)(*(void *)(*a1 + 8) - v1233) >> 2;
                  uint64_t v1235 = 0;
                  uint64_t v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    uint64_t v1237 = *(void *)(*a1 + 24);
                    int v1238 = v1955;
                    do
                    {
                      ldiv_t v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      int v1238 = v1239.quot;
                      v1235 += *(void *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  uint64_t v1240 = *(void *)*a2;
                  unint64_t v1241 = (unint64_t)(*(void *)(*a2 + 8) - v1240) >> 2;
                  uint64_t v1242 = 0;
                  uint64_t v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    uint64_t v1244 = *(void *)(*a2 + 24);
                    int v1245 = v1955;
                    do
                    {
                      ldiv_t v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      int v1245 = v1246.quot;
                      v1242 += *(void *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1247 = 0;
                    unsigned int v1248 = v1866;
                    do
                    {
                      *(unsigned char *)(v1232 + v1247) = *((unsigned char *)v1881 + (int)v1242 + v1247)
                                                + *(unsigned char *)(v1897 + (int)v1235 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    unint64_t v371 = 0;
                    uint64_t v372 = 0;
                    uint64_t v373 = 0;
                    uint64_t v374 = *(void *)(v101 + 152);
                    unint64_t v375 = v238[19];
                    uint64_t v376 = v100[19];
                    do
                    {
                      *(unsigned char *)(v376 + v371) = *((unsigned char *)v375 + v372) + *(unsigned char *)(v374 + v373);
                      v373 += **(void **)(*a1 + 24);
                      v372 += **(void **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v679 = *v102;
                  if (*v102)
                  {
                    unint64_t v680 = 0;
                    uint64_t v681 = 0;
                    uint64_t v682 = 0;
                    uint64_t v683 = 0;
                    uint64_t v684 = *(void *)(v101 + 152);
                    uint64_t v685 = v238[19];
                    uint64_t v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v687 = 0;
                        do
                        {
                          *(unsigned char *)(v686 + v681 + v687) = *((unsigned char *)v685 + v682) + *(unsigned char *)(v684 + v683);
                          uint64_t v101 = *a1;
                          uint64_t v688 = *(void **)(*a1 + 24);
                          uint64_t v689 = v688[1];
                          v683 += v689;
                          uint64_t v238 = (int **)*a2;
                          v690 = *(int **)(*a2 + 24);
                          uint64_t v691 = *((void *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          uint64_t v102 = *(int **)*a1;
                          unint64_t v692 = v102[1];
                        }
                        while (v687 < v692);
                        int v679 = *v102;
                        unint64_t v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        unint64_t v692 = 0;
                        uint64_t v688 = *(void **)(v101 + 24);
                        uint64_t v689 = v688[1];
                        v690 = v238[3];
                        uint64_t v691 = *((void *)v690 + 1);
                      }
                      uint64_t v683 = *v688 + v683 - v692 * v689;
                      uint64_t v682 = *(void *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  int v693 = *v102;
                  if (*v102)
                  {
                    unint64_t v694 = 0;
                    uint64_t v695 = 0;
                    uint64_t v696 = 0;
                    uint64_t v697 = 0;
                    uint64_t v698 = *(void *)(v101 + 152);
                    uint64_t v699 = v238[19];
                    uint64_t v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v702 = 0;
                            do
                            {
                              *(unsigned char *)(v700 + v695 + v702) = *((unsigned char *)v699 + v696) + *(unsigned char *)(v698 + v697);
                              uint64_t v101 = *a1;
                              uint64_t v703 = *(void **)(*a1 + 24);
                              uint64_t v704 = v703[2];
                              v697 += v704;
                              uint64_t v238 = (int **)*a2;
                              v705 = *(int **)(*a2 + 24);
                              uint64_t v706 = *((void *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              uint64_t v102 = *(int **)*a1;
                              unint64_t v707 = v102[2];
                            }
                            while (v702 < v707);
                            unint64_t v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            unint64_t v707 = 0;
                            uint64_t v703 = *(void **)(v101 + 24);
                            uint64_t v704 = v703[2];
                            v705 = v238[3];
                            uint64_t v706 = *((void *)v705 + 2);
                          }
                          uint64_t v708 = v703[1];
                          uint64_t v697 = v708 + v697 - v707 * v704;
                          uint64_t v696 = *((void *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          unint64_t v709 = v102[1];
                        }
                        while (v701 < v709);
                        int v693 = *v102;
                      }
                      else
                      {
                        unint64_t v709 = 0;
                        uint64_t v703 = *(void **)(v101 + 24);
                        uint64_t v708 = v703[1];
                      }
                      uint64_t v697 = *v703 + v697 - v709 * v708;
                      uint64_t v696 = *(void *)v238[3] + v696 - *((void *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  int v710 = *v102;
                  if (*v102)
                  {
                    unint64_t v711 = 0;
                    uint64_t v712 = 0;
                    uint64_t v713 = 0;
                    uint64_t v714 = 0;
                    uint64_t v715 = *(void *)(v101 + 152);
                    unint64_t v716 = v238[19];
                    uint64_t v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                unint64_t v720 = 0;
                                do
                                {
                                  *(unsigned char *)(v717 + v712 + v720) = *((unsigned char *)v716 + v713) + *(unsigned char *)(v715 + v714);
                                  uint64_t v101 = *a1;
                                  uint64_t v721 = *(void **)(*a1 + 24);
                                  uint64_t v722 = v721[3];
                                  v714 += v722;
                                  uint64_t v238 = (int **)*a2;
                                  uint64_t v723 = *(int **)(*a2 + 24);
                                  uint64_t v724 = *((void *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  uint64_t v102 = *(int **)*a1;
                                  unint64_t v725 = v102[3];
                                }
                                while (v720 < v725);
                                unint64_t v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                unint64_t v725 = 0;
                                uint64_t v721 = *(void **)(v101 + 24);
                                uint64_t v722 = v721[3];
                                uint64_t v723 = v238[3];
                                uint64_t v724 = *((void *)v723 + 3);
                              }
                              uint64_t v726 = v721[2];
                              uint64_t v714 = v726 + v714 - v725 * v722;
                              uint64_t v713 = *((void *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              unint64_t v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            unint64_t v727 = 0;
                            uint64_t v721 = *(void **)(v101 + 24);
                            uint64_t v726 = v721[2];
                          }
                          uint64_t v714 = v721[1] + v714 - v727 * v726;
                          uint64_t v713 = *((void *)v238[3] + 1) + v713 - *((void *)v238[3] + 2) * v239[2];
                          ++v718;
                          unint64_t v728 = v102[1];
                        }
                        while (v718 < v728);
                        int v710 = *v102;
                      }
                      else
                      {
                        unint64_t v728 = 0;
                      }
                      uint64_t v714 = **(void **)(v101 + 24) + v714 - *(void *)(*(void *)(v101 + 24) + 8) * v728;
                      uint64_t v713 = *(void *)v238[3] + v713 - *((void *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    unint64_t v663 = 0;
                    v1951 = v238[19];
                    uint64_t v1969 = *(void *)(v101 + 152);
                    uint64_t v664 = v100[19];
                    do
                    {
                      uint64_t v665 = *(void *)*a1;
                      unint64_t v666 = (unint64_t)(*(void *)(*a1 + 8) - v665) >> 2;
                      uint64_t v667 = 0;
                      uint64_t v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        uint64_t v669 = *(void *)(*a1 + 24);
                        int v670 = v663;
                        do
                        {
                          ldiv_t v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          int v670 = v671.quot;
                          v667 += *(void *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      uint64_t v672 = *(void *)*a2;
                      unint64_t v673 = (unint64_t)(*(void *)(*a2 + 8) - v672) >> 2;
                      uint64_t v674 = 0;
                      uint64_t v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        uint64_t v676 = *(void *)(*a2 + 24);
                        int v677 = v663;
                        do
                        {
                          ldiv_t v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          int v677 = v678.quot;
                          v674 += *(void *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(unsigned char *)(v664 + v663++) = *((unsigned char *)v1951 + (int)v674) + *(unsigned char *)(v1969 + (int)v667);
                    }
                    while (v663 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) + **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          int v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            int v138 = **(_DWORD **)(*a1 + 152);
            unsigned int v139 = *(_DWORD **)(*(void *)a3 + 152);
            int v140 = *(int **)(*a2 + 152);
            unsigned int v141 = v137 + 1;
            do
            {
              int v142 = *v140++;
              *v139++ = v142 + v138;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          int v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            int v144 = **(_DWORD **)(*a2 + 152);
            unsigned int v145 = *(_DWORD **)(*(void *)a3 + 152);
            int v146 = *(int **)(*a1 + 152);
            unsigned int v147 = v143 + 1;
            do
            {
              int v148 = *v146++;
              *v145++ = v148 + v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          int v149 = *(_DWORD *)(*(void *)a3 + 48);
          if (v149 >= 1)
          {
            int v150 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v151 = *(int **)(*a2 + 152);
            int v152 = *(int **)(*a1 + 152);
            unsigned int v153 = v149 + 1;
            do
            {
              int v155 = *v152++;
              int v154 = v155;
              int v156 = *v151++;
              *v150++ = v156 + v154;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          int v128 = *(void **)a3;
          unsigned int v129 = (void *)*a1;
          long long v130 = *(int **)*a1;
          uint64_t v131 = (v129[1] - (void)v130) >> 2;
          uint64_t v132 = (v131 - 1);
          if ((int)v132 >= -1) {
            int v133 = -1;
          }
          else {
            int v133 = v131 - 1;
          }
          int v134 = v133 + 1;
          int v135 = v131 + 1;
          while (1)
          {
            unsigned int v136 = v135 - 2;
            if (v135 - 2 < 0) {
              break;
            }
            --v135;
            if (*(void *)(v129[3] + 8 * v136) != *(void *)(v128[3] + 8 * v136)) {
              goto LABEL_177;
            }
          }
          int v135 = v134;
LABEL_177:
          uint64_t v245 = (void *)*a2;
          uint64_t v246 = *(int **)*a2;
          uint64_t v247 = (v245[1] - (void)v246) >> 2;
          uint64_t v248 = (v247 - 1);
          if ((int)v248 >= -1) {
            int v249 = -1;
          }
          else {
            int v249 = v247 - 1;
          }
          int v250 = v249 + 1;
          int v251 = v247 + 1;
          while (1)
          {
            unsigned int v252 = v251 - 2;
            if (v251 - 2 < 0) {
              break;
            }
            --v251;
            if (*(void *)(v245[3] + 8 * v252) != *(void *)(v128[3] + 8 * v252)) {
              goto LABEL_221;
            }
          }
          int v251 = v250;
LABEL_221:
          int v277 = v131 + 1;
          while (1)
          {
            unsigned int v278 = v277 - 2;
            if (v277 - 2 < 0) {
              break;
            }
            --v277;
            if (*(void *)(v129[3] + 8 * v278)) {
              goto LABEL_256;
            }
          }
          int v277 = v134;
LABEL_256:
          int v291 = v247 + 1;
          while (1)
          {
            unsigned int v292 = v291 - 2;
            if (v291 - 2 < 0) {
              break;
            }
            --v291;
            if (*(void *)(v245[3] + 8 * v292)) {
              goto LABEL_414;
            }
          }
          int v291 = v250;
LABEL_414:
          unint64_t v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251) {
            int v378 = v251;
          }
          else {
            int v378 = v135;
          }
          if (v135 <= v291) {
            int v135 = v291;
          }
          if (v277 > v251) {
            int v251 = v277;
          }
          if (v377 > v251)
          {
            int v379 = 1;
          }
          else
          {
            int v251 = (uint64_t)(v128[1] - *v128) >> 2;
            int v379 = 4;
          }
          if (v377 > v135)
          {
            int v380 = 2;
          }
          else
          {
            int v135 = v251;
            int v380 = v379;
          }
          if (v377 > v378)
          {
            int v135 = v378;
            int v380 = 3;
          }
          uint64_t v1946 = v248;
          uint64_t v1964 = v132;
          if (!v135) {
            goto LABEL_444;
          }
          unint64_t v381 = *(void *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10) {
            goto LABEL_444;
          }
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                int v1621 = *v130;
                if (*v130)
                {
                  unint64_t v1622 = 0;
                  uint64_t v1623 = 0;
                  uint64_t v1624 = 0;
                  uint64_t v1625 = v129[19];
                  uint64_t v1626 = v245[19];
                  uint64_t v1627 = v128[19];
                  v1628 = (uint64_t *)v129[3];
                  uint64_t v1629 = *v1628;
                  uint64_t v1630 = v1628[1];
                  v1631 = (uint64_t *)v245[3];
                  uint64_t v1632 = *v1631;
                  uint64_t v1633 = v1631[1];
                  int v1634 = v130[1];
                  int v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      unint64_t v1636 = 0;
                      uint64_t v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1638 = 0;
                          int v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          unsigned int v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = *(_DWORD *)(v1637 + v1638) + v1639;
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          int v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      uint64_t v1641 = v1634;
                      int v1621 = *v130;
                      int v1635 = v1634;
                    }
                    else
                    {
                      uint64_t v1641 = 0;
                    }
                    uint64_t v1624 = v1624 + v1629 - v1641 * v1630;
                    uint64_t v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                int v1055 = *v130;
                if (*v130)
                {
                  unint64_t v1056 = 0;
                  uint64_t v1057 = 0;
                  uint64_t v1058 = v129[19];
                  uint64_t v1059 = v245[19];
                  uint64_t v1060 = v128[19];
                  uint64_t v1061 = *(void *)v129[3];
                  uint64_t v1062 = 4 * *(void *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1063 = 0;
                      int v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      unsigned int v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = *(_DWORD *)(v1059 + v1063) + v1064;
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      int v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                unint64_t v1909 = v128[6];
                if (v1909)
                {
                  unint64_t v1938 = 0;
                  uint64_t v1841 = v245[19];
                  uint64_t v1856 = v129[19];
                  uint64_t v1642 = v128[19];
                  do
                  {
                    uint64_t v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1644 = v129[3];
                      uint64_t v1645 = v132;
                      int v1646 = v1938;
                      do
                      {
                        ldiv_t v1647 = ldiv(v1646, v130[v1645]);
                        int v1646 = v1647.quot;
                        v1643 += *(void *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    uint64_t v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      uint64_t v1649 = 0;
                      uint64_t v1650 = v245[3];
                      int v1651 = v1938;
                      do
                      {
                        ldiv_t v1652 = ldiv(v1651, v246[v1648]);
                        int v1651 = v1652.quot;
                        v1649 += *(void *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1653 = 0;
                      int v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      unsigned int v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653) + v1654;
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                int v1656 = *v130;
                if (*v130)
                {
                  unint64_t v1657 = 0;
                  uint64_t v1658 = 0;
                  uint64_t v1659 = 0;
                  uint64_t v1660 = v129[19];
                  uint64_t v1661 = v245[19];
                  uint64_t v1662 = v128[19];
                  uint64_t v1663 = (uint64_t *)v129[3];
                  uint64_t v1664 = *v1663;
                  uint64_t v1665 = v1663[1];
                  uint64_t v1666 = (uint64_t *)v245[3];
                  uint64_t v1667 = *v1666;
                  uint64_t v1668 = v1666[1];
                  int v1669 = v130[1];
                  int v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      unint64_t v1671 = 0;
                      uint64_t v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1673 = 0;
                          int v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          unsigned int v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) + v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          int v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      uint64_t v1676 = v1669;
                      int v1656 = *v130;
                      int v1670 = v1669;
                    }
                    else
                    {
                      uint64_t v1676 = 0;
                    }
                    uint64_t v1659 = v1659 + v1664 - v1676 * v1665;
                    uint64_t v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                int v1066 = *v130;
                if (*v130)
                {
                  unint64_t v1067 = 0;
                  uint64_t v1068 = 0;
                  uint64_t v1069 = v129[19];
                  uint64_t v1070 = v245[19];
                  uint64_t v1071 = v128[19];
                  uint64_t v1072 = *(void *)v245[3];
                  uint64_t v1073 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1074 = 0;
                      int v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      unsigned int v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) + v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      int v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                unint64_t v1910 = v128[6];
                if (v1910)
                {
                  unint64_t v1939 = 0;
                  uint64_t v1842 = v245[19];
                  uint64_t v1857 = v129[19];
                  uint64_t v1677 = v128[19];
                  do
                  {
                    uint64_t v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1679 = v129[3];
                      uint64_t v1680 = v132;
                      int v1681 = v1939;
                      do
                      {
                        ldiv_t v1682 = ldiv(v1681, v130[v1680]);
                        int v1681 = v1682.quot;
                        v1678 += *(void *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    uint64_t v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      uint64_t v1684 = 0;
                      uint64_t v1685 = v245[3];
                      int v1686 = v1939;
                      do
                      {
                        ldiv_t v1687 = ldiv(v1686, v246[v1683]);
                        int v1686 = v1687.quot;
                        v1684 += *(void *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1688 = 0;
                      int v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      unsigned int v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) + v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                int v1249 = *v130;
                if (*v130)
                {
                  unint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = 0;
                  uint64_t v1253 = v129[19];
                  uint64_t v1254 = v245[19];
                  uint64_t v1255 = v128[19];
                  uint64_t v1256 = (uint64_t *)v129[3];
                  uint64_t v1257 = *v1256;
                  uint64_t v1258 = v1256[1];
                  int v1259 = (uint64_t *)v245[3];
                  uint64_t v1260 = *v1259;
                  uint64_t v1261 = v1259[1];
                  int v1262 = v130[1];
                  int v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      unint64_t v1264 = 0;
                      uint64_t v1265 = v1254 + 4 * v1251;
                      uint64_t v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1267 = 0;
                          unsigned int v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1265 + v1267) + *(_DWORD *)(v1266 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          int v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      uint64_t v1269 = v1262;
                      int v1249 = *v130;
                      int v1263 = v1262;
                    }
                    else
                    {
                      uint64_t v1269 = 0;
                    }
                    uint64_t v1252 = v1252 + v1257 - v1269 * v1258;
                    uint64_t v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                int v382 = *v130;
                if (*v130)
                {
                  unint64_t v383 = 0;
                  uint64_t v384 = v129[19];
                  uint64_t v385 = v245[19];
                  uint64_t v386 = v128[19];
                  uint64_t v387 = 4 * *(void *)v245[3];
                  uint64_t v388 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v389 = 0;
                      unsigned int v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v385 + v389) + *(_DWORD *)(v384 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      int v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                unint64_t v1898 = v128[6];
                if (v1898)
                {
                  unint64_t v1927 = 0;
                  uint64_t v1836 = v245[19];
                  uint64_t v1849 = v129[19];
                  uint64_t v1270 = v128[19];
                  do
                  {
                    uint64_t v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1272 = v129[3];
                      uint64_t v1273 = v132;
                      int v1274 = v1927;
                      do
                      {
                        ldiv_t v1275 = ldiv(v1274, v130[v1273]);
                        int v1274 = v1275.quot;
                        v1271 += *(void *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    uint64_t v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      uint64_t v1277 = 0;
                      uint64_t v1278 = v245[3];
                      int v1279 = v1927;
                      do
                      {
                        ldiv_t v1280 = ldiv(v1279, v246[v1276]);
                        int v1279 = v1280.quot;
                        v1277 += *(void *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1281 = 0;
                      unsigned int v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281)
                                                   + *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  uint64_t v391 = v128[6];
                  if (v391)
                  {
                    unint64_t v392 = (_DWORD *)v129[19];
                    uint64_t v393 = (_DWORD *)v245[19];
                    uint64_t v394 = (_DWORD *)v128[19];
                    uint64_t v395 = 4 * *(void *)v245[3];
                    uint64_t v396 = 4 * *(void *)v129[3];
                    do
                    {
                      *v394++ = *v393 + *v392;
                      uint64_t v393 = (_DWORD *)((char *)v393 + v395);
                      unint64_t v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  int v741 = *v130;
                  if (*v130)
                  {
                    unint64_t v742 = 0;
                    uint64_t v743 = 0;
                    uint64_t v744 = 0;
                    uint64_t v745 = 0;
                    uint64_t v746 = v129[19];
                    uint64_t v747 = v245[19];
                    uint64_t v748 = v128[19];
                    uint64_t v749 = (uint64_t *)v129[3];
                    uint64_t v750 = *v749;
                    uint64_t v751 = v749[1];
                    uint64_t v752 = (uint64_t *)v245[3];
                    uint64_t v754 = *v752;
                    uint64_t v753 = v752[1];
                    int v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (unint64_t m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v747 + 4 * v744)
                                                               + *(_DWORD *)(v746 + 4 * v745);
                          v745 += v751;
                          v744 += v753;
                          int v755 = v130[1];
                        }
                        uint64_t v757 = v755;
                        int v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        uint64_t v757 = 0;
                      }
                      uint64_t v745 = v745 + v750 - v757 * v751;
                      uint64_t v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  int v758 = *v130;
                  if (*v130)
                  {
                    unint64_t v759 = 0;
                    uint64_t v760 = 0;
                    uint64_t v761 = 0;
                    uint64_t v762 = 0;
                    uint64_t v763 = v129[19];
                    uint64_t v764 = v245[19];
                    uint64_t v765 = v128[19];
                    v766 = (uint64_t *)v129[3];
                    uint64_t v767 = *v766;
                    uint64_t v768 = v766[1];
                    v769 = (uint64_t *)v245[3];
                    uint64_t v770 = *v769;
                    uint64_t v771 = v769[1];
                    int v772 = v130[1];
                    int v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        unint64_t v774 = 0;
                        uint64_t v775 = v766[2];
                        uint64_t v776 = v769[2];
                        int v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (unint64_t n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v764 + 4 * v761)
                                                                   + *(_DWORD *)(v763 + 4 * v762);
                              v762 += v775;
                              v761 += v776;
                              int v777 = v130[2];
                            }
                            uint64_t v779 = v777;
                            int v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            uint64_t v779 = 0;
                          }
                          uint64_t v762 = v762 + v768 - v779 * v775;
                          uint64_t v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        uint64_t v780 = v772;
                        int v758 = *v130;
                        int v773 = v772;
                      }
                      else
                      {
                        uint64_t v780 = 0;
                      }
                      uint64_t v762 = v762 + v767 - v780 * v768;
                      uint64_t v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  int v781 = *v130;
                  if (*v130)
                  {
                    unint64_t v782 = 0;
                    uint64_t v783 = 0;
                    uint64_t v784 = 0;
                    uint64_t v785 = 0;
                    uint64_t v786 = v129[19];
                    uint64_t v787 = v245[19];
                    uint64_t v788 = v128[19];
                    v789 = (uint64_t *)v129[3];
                    uint64_t v790 = *v789;
                    uint64_t v791 = v789[1];
                    uint64_t v792 = (uint64_t *)v245[3];
                    uint64_t v793 = *v792;
                    uint64_t v794 = v792[1];
                    int v795 = v130[1];
                    int v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        unint64_t v797 = 0;
                        uint64_t v798 = v789[2];
                        uint64_t v799 = v792[2];
                        int v800 = v130[2];
                        int v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            unint64_t v802 = 0;
                            uint64_t v803 = v789[3];
                            uint64_t v804 = v792[3];
                            int v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (iunint64_t i = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v787 + 4 * v784)
                                                                        + *(_DWORD *)(v786 + 4 * v785);
                                  v785 += v803;
                                  v784 += v804;
                                  int v805 = v130[3];
                                }
                                uint64_t v807 = v805;
                                int v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                uint64_t v807 = 0;
                              }
                              uint64_t v785 = v785 + v798 - v807 * v803;
                              uint64_t v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            uint64_t v808 = v800;
                            int v795 = v130[1];
                            int v801 = v800;
                          }
                          else
                          {
                            uint64_t v808 = 0;
                          }
                          uint64_t v785 = v785 + v791 - v808 * v798;
                          uint64_t v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        uint64_t v809 = v795;
                        int v781 = *v130;
                        int v796 = v795;
                      }
                      else
                      {
                        uint64_t v809 = 0;
                      }
                      uint64_t v785 = v785 + v790 - v809 * v791;
                      uint64_t v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  uint64_t v729 = v128[6];
                  if (v729)
                  {
                    uint64_t v730 = 0;
                    uint64_t v1889 = v245[19];
                    uint64_t v1918 = v129[19];
                    uint64_t v1876 = v128[19];
                    do
                    {
                      uint64_t v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        uint64_t v732 = v129[3];
                        uint64_t v733 = v132;
                        int v734 = v730;
                        do
                        {
                          ldiv_t v735 = ldiv(v734, v130[v733]);
                          int v734 = v735.quot;
                          v731 += *(void *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      uint64_t v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        uint64_t v737 = 0;
                        uint64_t v738 = v245[3];
                        int v739 = v730;
                        do
                        {
                          ldiv_t v740 = ldiv(v739, v246[v736]);
                          int v739 = v740.quot;
                          v737 += *(void *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1889 + 4 * (int)v737)
                                                      + *(_DWORD *)(v1918 + 4 * (int)v731);
                      uint64_t v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) + **(void **)(*a1 + 152);
          return;
        case 1:
          int v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            uint64_t v167 = **(void **)(*a1 + 152);
            int v168 = *(void **)(*(void *)a3 + 152);
            int v169 = *(uint64_t **)(*a2 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              uint64_t v171 = *v169++;
              *v168++ = v171 + v167;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          int v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            uint64_t v173 = **(void **)(*a2 + 152);
            uint64_t v174 = *(void **)(*(void *)a3 + 152);
            char v175 = *(uint64_t **)(*a1 + 152);
            unsigned int v176 = v172 + 1;
            do
            {
              uint64_t v177 = *v175++;
              *v174++ = v177 + v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          int v178 = *(_DWORD *)(*(void *)a3 + 48);
          if (v178 >= 1)
          {
            v179 = *(void **)(*(void *)a3 + 152);
            unint64_t v180 = *(uint64_t **)(*a2 + 152);
            BOOL v181 = *(uint64_t **)(*a1 + 152);
            unsigned int v182 = v178 + 1;
            do
            {
              uint64_t v184 = *v181++;
              uint64_t v183 = v184;
              uint64_t v185 = *v180++;
              *v179++ = v185 + v183;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          int v157 = *(void **)a3;
          int v158 = (void *)*a1;
          int v159 = *(int **)*a1;
          uint64_t v160 = (v158[1] - (void)v159) >> 2;
          uint64_t v161 = (v160 - 1);
          if ((int)v161 >= -1) {
            int v162 = -1;
          }
          else {
            int v162 = v160 - 1;
          }
          int v163 = v162 + 1;
          int v164 = v160 + 1;
          while (1)
          {
            unsigned int v165 = v164 - 2;
            if (v164 - 2 < 0) {
              break;
            }
            --v164;
            if (*(void *)(v158[3] + 8 * v165) != *(void *)(v157[3] + 8 * v165)) {
              goto LABEL_185;
            }
          }
          int v164 = v163;
LABEL_185:
          unint64_t v253 = (void *)*a2;
          uint64_t v254 = *(int **)*a2;
          uint64_t v255 = (v253[1] - (void)v254) >> 2;
          uint64_t v256 = (v255 - 1);
          if ((int)v256 >= -1) {
            int v257 = -1;
          }
          else {
            int v257 = v255 - 1;
          }
          int v258 = v257 + 1;
          int v259 = v255 + 1;
          while (1)
          {
            unsigned int v260 = v259 - 2;
            if (v259 - 2 < 0) {
              break;
            }
            --v259;
            if (*(void *)(v253[3] + 8 * v260) != *(void *)(v157[3] + 8 * v260)) {
              goto LABEL_226;
            }
          }
          int v259 = v258;
LABEL_226:
          int v279 = v160 + 1;
          while (1)
          {
            unsigned int v280 = v279 - 2;
            if (v279 - 2 < 0) {
              break;
            }
            --v279;
            if (*(void *)(v158[3] + 8 * v280)) {
              goto LABEL_261;
            }
          }
          int v279 = v163;
LABEL_261:
          int v293 = v255 + 1;
          while (1)
          {
            unsigned int v294 = v293 - 2;
            if (v293 - 2 < 0) {
              break;
            }
            --v293;
            if (*(void *)(v253[3] + 8 * v294)) {
              goto LABEL_450;
            }
          }
          int v293 = v258;
LABEL_450:
          unint64_t v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259) {
            int v398 = v259;
          }
          else {
            int v398 = v164;
          }
          if (v164 <= v293) {
            int v164 = v293;
          }
          if (v279 > v259) {
            int v259 = v279;
          }
          if (v397 > v259)
          {
            int v399 = 1;
          }
          else
          {
            int v259 = (uint64_t)(v157[1] - *v157) >> 2;
            int v399 = 4;
          }
          if (v397 > v164)
          {
            int v400 = 2;
          }
          else
          {
            int v164 = v259;
            int v400 = v399;
          }
          if (v397 > v398)
          {
            int v164 = v398;
            int v400 = 3;
          }
          uint64_t v1947 = v256;
          uint64_t v1965 = v161;
          if (!v164) {
            goto LABEL_479;
          }
          unint64_t v401 = *(void *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10) {
            goto LABEL_479;
          }
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                uint64_t v1691 = *v159;
                if (v1691)
                {
                  uint64_t v1692 = 0;
                  uint64_t v1693 = 0;
                  uint64_t v1694 = 0;
                  uint64_t v1695 = v158[19];
                  uint64_t v1696 = v253[19];
                  uint64_t v1697 = v157[19];
                  unint64_t v1698 = v159[1];
                  v1699 = (uint64_t *)v158[3];
                  uint64_t v1700 = *v1699;
                  uint64_t v1701 = v1699[1];
                  v1702 = (uint64_t *)v253[3];
                  uint64_t v1703 = *v1702;
                  uint64_t v1704 = v1702[1];
                  if (v1698 <= 1) {
                    uint64_t v1705 = 1;
                  }
                  else {
                    uint64_t v1705 = v159[1];
                  }
                  uint64_t v1706 = v1700 - v1701 * v1698;
                  uint64_t v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if (v1698)
                    {
                      uint64_t v1708 = 0;
                      uint64_t v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1710 = 0;
                          uint64_t v1711 = *(void *)(v1695 + 8 * v1694);
                          unsigned int v1712 = v401 + 1;
                          do
                          {
                            *(void *)(v1697 + v1710) = *(void *)(v1709 + v1710) + v1711;
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1077 = *v159;
                if (v1077)
                {
                  uint64_t v1078 = 0;
                  uint64_t v1079 = 0;
                  uint64_t v1080 = v158[19];
                  uint64_t v1081 = v253[19];
                  uint64_t v1082 = v157[19];
                  uint64_t v1083 = *(void *)v158[3];
                  uint64_t v1084 = 8 * *(void *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1085 = 0;
                      uint64_t v1086 = *(void *)(v1080 + 8 * v1079);
                      unsigned int v1087 = v401 + 1;
                      do
                      {
                        *(void *)(v1082 + v1085) = *(void *)(v1081 + v1085) + v1086;
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                unint64_t v1911 = v157[6];
                if (v1911)
                {
                  unint64_t v1940 = 0;
                  uint64_t v1843 = v253[19];
                  uint64_t v1858 = v158[19];
                  uint64_t v1713 = v157[19];
                  do
                  {
                    uint64_t v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1715 = v158[3];
                      uint64_t v1716 = v161;
                      int v1717 = v1940;
                      do
                      {
                        ldiv_t v1718 = ldiv(v1717, v159[v1716]);
                        int v1717 = v1718.quot;
                        v1714 += *(void *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    uint64_t v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      uint64_t v1720 = 0;
                      uint64_t v1721 = v253[3];
                      int v1722 = v1940;
                      do
                      {
                        ldiv_t v1723 = ldiv(v1722, v254[v1719]);
                        int v1722 = v1723.quot;
                        v1720 += *(void *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1724 = 0;
                      uint64_t v1725 = *(void *)(v1858 + 8 * (int)v1714);
                      unsigned int v1726 = v401 + 1;
                      do
                      {
                        *(void *)(v1713 + v1724) = *(void *)(v1843 + 8 * (int)v1720 + v1724) + v1725;
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                uint64_t v1727 = *v159;
                if (v1727)
                {
                  uint64_t v1728 = 0;
                  uint64_t v1729 = 0;
                  uint64_t v1730 = 0;
                  uint64_t v1731 = v158[19];
                  uint64_t v1732 = v253[19];
                  uint64_t v1733 = v157[19];
                  unint64_t v1734 = v159[1];
                  v1735 = (uint64_t *)v158[3];
                  uint64_t v1736 = *v1735;
                  uint64_t v1737 = v1735[1];
                  v1738 = (uint64_t *)v253[3];
                  uint64_t v1739 = *v1738;
                  uint64_t v1740 = v1738[1];
                  if (v1734 <= 1) {
                    uint64_t v1741 = 1;
                  }
                  else {
                    uint64_t v1741 = v159[1];
                  }
                  uint64_t v1742 = v1736 - v1737 * v1734;
                  uint64_t v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if (v1734)
                    {
                      uint64_t v1744 = 0;
                      uint64_t v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1746 = 0;
                          uint64_t v1747 = *(void *)(v1732 + 8 * v1729);
                          unsigned int v1748 = v401 + 1;
                          do
                          {
                            *(void *)(v1733 + v1746) = *(void *)(v1745 + v1746) + v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1088 = *v159;
                if (v1088)
                {
                  uint64_t v1089 = 0;
                  uint64_t v1090 = 0;
                  uint64_t v1091 = v158[19];
                  uint64_t v1092 = v253[19];
                  uint64_t v1093 = v157[19];
                  uint64_t v1094 = *(void *)v253[3];
                  uint64_t v1095 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1096 = 0;
                      uint64_t v1097 = *(void *)(v1092 + 8 * v1090);
                      unsigned int v1098 = v401 + 1;
                      do
                      {
                        *(void *)(v1093 + v1096) = *(void *)(v1091 + v1096) + v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                unint64_t v1912 = v157[6];
                if (v1912)
                {
                  unint64_t v1941 = 0;
                  uint64_t v1844 = v253[19];
                  uint64_t v1859 = v158[19];
                  uint64_t v1749 = v157[19];
                  do
                  {
                    uint64_t v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1751 = v158[3];
                      uint64_t v1752 = v161;
                      int v1753 = v1941;
                      do
                      {
                        ldiv_t v1754 = ldiv(v1753, v159[v1752]);
                        int v1753 = v1754.quot;
                        v1750 += *(void *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    uint64_t v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      uint64_t v1756 = 0;
                      uint64_t v1757 = v253[3];
                      int v1758 = v1941;
                      do
                      {
                        ldiv_t v1759 = ldiv(v1758, v254[v1755]);
                        int v1758 = v1759.quot;
                        v1756 += *(void *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1760 = 0;
                      uint64_t v1761 = *(void *)(v1844 + 8 * (int)v1756);
                      unsigned int v1762 = v401 + 1;
                      do
                      {
                        *(void *)(v1749 + v1760) = *(void *)(v1859 + 8 * (int)v1750 + v1760) + v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                uint64_t v1283 = *v159;
                if (v1283)
                {
                  uint64_t v1284 = 0;
                  uint64_t v1285 = 0;
                  uint64_t v1286 = 0;
                  uint64_t v1287 = v158[19];
                  uint64_t v1288 = v253[19];
                  uint64_t v1289 = v157[19];
                  unint64_t v1290 = v159[1];
                  uint64_t v1291 = (uint64_t *)v158[3];
                  uint64_t v1292 = *v1291;
                  uint64_t v1293 = v1291[1];
                  ldiv_t v1294 = (uint64_t *)v253[3];
                  uint64_t v1295 = *v1294;
                  uint64_t v1296 = v1294[1];
                  if (v1290 <= 1) {
                    uint64_t v1297 = 1;
                  }
                  else {
                    uint64_t v1297 = v159[1];
                  }
                  uint64_t v1298 = v1292 - v1293 * v1290;
                  uint64_t v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if (v1290)
                    {
                      uint64_t v1300 = 0;
                      uint64_t v1301 = v1288 + 8 * v1285;
                      uint64_t v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1303 = 0;
                          unsigned int v1304 = v401 + 1;
                          do
                          {
                            *(void *)(v1289 + v1303) = *(void *)(v1301 + v1303) + *(void *)(v1302 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v402 = *v159;
                if (v402)
                {
                  uint64_t v403 = 0;
                  uint64_t v404 = v158[19];
                  uint64_t v405 = v253[19];
                  uint64_t v406 = v157[19];
                  uint64_t v407 = 8 * *(void *)v253[3];
                  uint64_t v408 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v409 = 0;
                      unsigned int v410 = v401 + 1;
                      do
                      {
                        *(void *)(v406 + v409) = *(void *)(v405 + v409) + *(void *)(v404 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                unint64_t v1899 = v157[6];
                if (v1899)
                {
                  unint64_t v1928 = 0;
                  uint64_t v1837 = v253[19];
                  uint64_t v1850 = v158[19];
                  uint64_t v1305 = v157[19];
                  do
                  {
                    uint64_t v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1307 = v158[3];
                      uint64_t v1308 = v161;
                      int v1309 = v1928;
                      do
                      {
                        ldiv_t v1310 = ldiv(v1309, v159[v1308]);
                        int v1309 = v1310.quot;
                        v1306 += *(void *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    uint64_t v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      uint64_t v1312 = 0;
                      uint64_t v1313 = v253[3];
                      int v1314 = v1928;
                      do
                      {
                        ldiv_t v1315 = ldiv(v1314, v254[v1311]);
                        int v1314 = v1315.quot;
                        v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1316 = 0;
                      unsigned int v1317 = v401 + 1;
                      do
                      {
                        *(void *)(v1305 + v1316) = *(void *)(v1837 + 8 * (int)v1312 + v1316)
                                                   + *(void *)(v1850 + 8 * (int)v1306 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  uint64_t v411 = v157[6];
                  if (v411)
                  {
                    uint64_t v412 = (void *)v158[19];
                    unint64_t v413 = (void *)v253[19];
                    unint64_t v414 = (void *)v157[19];
                    uint64_t v415 = 8 * *(void *)v253[3];
                    uint64_t v416 = 8 * *(void *)v158[3];
                    do
                    {
                      *v414++ = *v413 + *v412;
                      unint64_t v413 = (void *)((char *)v413 + v415);
                      uint64_t v412 = (void *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  uint64_t v822 = *v159;
                  if (v822)
                  {
                    uint64_t v823 = 0;
                    uint64_t v824 = 0;
                    uint64_t v825 = 0;
                    uint64_t v826 = 0;
                    uint64_t v827 = v158[19];
                    uint64_t v828 = v253[19];
                    uint64_t v829 = v157[19];
                    unint64_t v830 = v159[1];
                    vDSP_Length v831 = (uint64_t *)v158[3];
                    uint64_t v832 = *v831;
                    uint64_t v833 = v831[1];
                    uint64_t v834 = (uint64_t *)v253[3];
                    uint64_t v835 = *v834;
                    uint64_t v836 = v834[1];
                    uint64_t v837 = v835 - v836 * v254[1];
                    if (v830 <= 1) {
                      uint64_t v838 = 1;
                    }
                    else {
                      uint64_t v838 = v159[1];
                    }
                    uint64_t v839 = v832 - v833 * v830;
                    do
                    {
                      if (v830)
                      {
                        uint64_t v840 = v824 + v838;
                        uint64_t v841 = (void *)(v829 + 8 * v824);
                        uint64_t v842 = v838;
                        do
                        {
                          *v841++ = *(void *)(v828 + 8 * v825) + *(void *)(v827 + 8 * v826);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        uint64_t v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  uint64_t v843 = *v159;
                  if (v843)
                  {
                    uint64_t v844 = 0;
                    uint64_t v845 = 0;
                    uint64_t v846 = 0;
                    uint64_t v847 = 0;
                    uint64_t v848 = v158[19];
                    uint64_t v849 = v253[19];
                    uint64_t v850 = v157[19];
                    unint64_t v851 = v159[1];
                    vDSP_Length v852 = (void *)v158[3];
                    uint64_t v853 = v852[1];
                    unint64_t v854 = (void *)v253[3];
                    uint64_t v855 = v854[1];
                    uint64_t v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1) {
                      uint64_t v857 = 1;
                    }
                    else {
                      uint64_t v857 = v159[1];
                    }
                    unint64_t v858 = *v852 - v853 * v851;
                    do
                    {
                      if (v851)
                      {
                        uint64_t v859 = 0;
                        unint64_t v860 = v159[2];
                        uint64_t v861 = v852[2];
                        uint64_t v862 = v854[2];
                        if (v860 <= 1) {
                          uint64_t v863 = 1;
                        }
                        else {
                          uint64_t v863 = v159[2];
                        }
                        uint64_t v864 = v855 - v862 * v254[2];
                        do
                        {
                          uint64_t v865 = v863;
                          if (v860)
                          {
                            do
                            {
                              *(void *)(v850 + 8 * v845++) = *(void *)(v849 + 8 * v846)
                                                             + *(void *)(v848 + 8 * v847);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  uint64_t v1970 = *v159;
                  if (v1970)
                  {
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = 0;
                    uint64_t v869 = 0;
                    uint64_t v870 = v158[19];
                    uint64_t v871 = v253[19];
                    uint64_t v872 = v157[19];
                    unint64_t v873 = v159[1];
                    v874 = (void *)v158[3];
                    vDSP_Length v875 = (void *)v253[3];
                    uint64_t v1863 = v875[1];
                    uint64_t v1878 = v874[1];
                    uint64_t v1920 = *v875 - v1863 * v254[1];
                    int v1952 = v159[1];
                    if (v873 <= 1) {
                      uint64_t v876 = 1;
                    }
                    else {
                      uint64_t v876 = v159[1];
                    }
                    unint64_t v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        uint64_t v877 = 0;
                        unint64_t v878 = v159[2];
                        uint64_t v879 = v874[2];
                        uint64_t v880 = v875[2];
                        if (v878 <= 1) {
                          uint64_t v881 = 1;
                        }
                        else {
                          uint64_t v881 = v159[2];
                        }
                        uint64_t v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if (v878)
                          {
                            uint64_t v883 = 0;
                            unint64_t v884 = v159[3];
                            uint64_t v885 = v874[3];
                            uint64_t v886 = v875[3];
                            if (v884 <= 1) {
                              uint64_t v887 = 1;
                            }
                            else {
                              uint64_t v887 = v159[3];
                            }
                            uint64_t v888 = v880 - v886 * v254[3];
                            do
                            {
                              uint64_t v889 = v887;
                              if (v884)
                              {
                                do
                                {
                                  *(void *)(v872 + 8 * v867++) = *(void *)(v871 + 8 * v868)
                                                                 + *(void *)(v870 + 8 * v869);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  uint64_t v810 = v157[6];
                  if (v810)
                  {
                    uint64_t v811 = 0;
                    uint64_t v1890 = v253[19];
                    uint64_t v1919 = v158[19];
                    uint64_t v1877 = v157[19];
                    do
                    {
                      uint64_t v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        uint64_t v813 = v158[3];
                        uint64_t v814 = v161;
                        int v815 = v811;
                        do
                        {
                          ldiv_t v816 = ldiv(v815, v159[v814]);
                          int v815 = v816.quot;
                          v812 += *(void *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      uint64_t v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        uint64_t v818 = 0;
                        uint64_t v819 = v253[3];
                        int v820 = v811;
                        do
                        {
                          ldiv_t v821 = ldiv(v820, v254[v817]);
                          int v820 = v821.quot;
                          v818 += *(void *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(void *)(v1877 + 8 * v811++) = *(void *)(v1890 + 8 * (int)v818)
                                                      + *(void *)(v1919 + 8 * (int)v812);
                      uint64_t v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) + **(float **)(*a2 + 152);
          return;
        case 1:
          int v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            float v196 = **(float **)(*a1 + 152);
            uint64_t v197 = *(float **)(*(void *)a3 + 152);
            uint64_t v198 = *(float **)(*a2 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              float v200 = *v198++;
              *v197++ = v196 + v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          int v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            float v202 = **(float **)(*a2 + 152);
            int v203 = *(float **)(*(void *)a3 + 152);
            int v204 = *(float **)(*a1 + 152);
            unsigned int v205 = v201 + 1;
            do
            {
              float v206 = *v204++;
              *v203++ = v202 + v206;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          int v207 = *(_DWORD *)(*(void *)a3 + 48);
          if (v207 >= 1)
          {
            uint64_t v208 = *(float **)(*(void *)a3 + 152);
            uint64_t v209 = *(float **)(*a2 + 152);
            uint64_t v210 = *(float **)(*a1 + 152);
            unsigned int v211 = v207 + 1;
            do
            {
              float v212 = *v210++;
              float v213 = v212;
              float v214 = *v209++;
              *v208++ = v213 + v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          int v186 = *(void **)a3;
          int v187 = (void *)*a1;
          unint64_t v188 = *(int **)*a1;
          uint64_t v189 = (v187[1] - (void)v188) >> 2;
          uint64_t v190 = (v189 - 1);
          if ((int)v190 >= -1) {
            int v191 = -1;
          }
          else {
            int v191 = v189 - 1;
          }
          int v192 = v191 + 1;
          int v193 = v189 + 1;
          while (1)
          {
            unsigned int v194 = v193 - 2;
            if (v193 - 2 < 0) {
              break;
            }
            --v193;
            if (*(void *)(v187[3] + 8 * v194) != *(void *)(v186[3] + 8 * v194)) {
              goto LABEL_193;
            }
          }
          int v193 = v192;
LABEL_193:
          int v261 = (void *)*a2;
          unint64_t v262 = *(int **)*a2;
          uint64_t v263 = (v261[1] - (void)v262) >> 2;
          uint64_t v264 = (v263 - 1);
          if ((int)v264 >= -1) {
            int v265 = -1;
          }
          else {
            int v265 = v263 - 1;
          }
          int v266 = v265 + 1;
          int v267 = v263 + 1;
          while (1)
          {
            unsigned int v268 = v267 - 2;
            if (v267 - 2 < 0) {
              break;
            }
            --v267;
            if (*(void *)(v261[3] + 8 * v268) != *(void *)(v186[3] + 8 * v268)) {
              goto LABEL_231;
            }
          }
          int v267 = v266;
LABEL_231:
          int v281 = v189 + 1;
          while (1)
          {
            unsigned int v282 = v281 - 2;
            if (v281 - 2 < 0) {
              break;
            }
            --v281;
            if (*(void *)(v187[3] + 8 * v282)) {
              goto LABEL_266;
            }
          }
          int v281 = v192;
LABEL_266:
          int v295 = v263 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)(v261[3] + 8 * v296)) {
              goto LABEL_485;
            }
          }
          int v295 = v266;
LABEL_485:
          unint64_t v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267) {
            int v418 = v267;
          }
          else {
            int v418 = v193;
          }
          if (v193 <= v295) {
            int v193 = v295;
          }
          if (v281 > v267) {
            int v267 = v281;
          }
          if (v417 > v267)
          {
            int v419 = 1;
          }
          else
          {
            int v267 = (uint64_t)(v186[1] - *v186) >> 2;
            int v419 = v25;
          }
          if (v417 > v193)
          {
            int v420 = 2;
          }
          else
          {
            int v193 = v267;
            int v420 = v419;
          }
          if (v417 > v418)
          {
            int v193 = v418;
            int v420 = 3;
          }
          uint64_t v1948 = v264;
          uint64_t v1966 = v190;
          if (!v193) {
            goto LABEL_514;
          }
          unint64_t v421 = *(void *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10) {
            goto LABEL_514;
          }
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                uint64_t v1763 = *v188;
                if (v1763)
                {
                  uint64_t v1764 = 0;
                  uint64_t v1765 = 0;
                  uint64_t v1766 = 0;
                  uint64_t v1767 = v187[19];
                  uint64_t v1768 = v261[19];
                  uint64_t v1769 = v186[19];
                  unint64_t v1770 = v188[1];
                  v1771 = (uint64_t *)v187[3];
                  uint64_t v1772 = *v1771;
                  uint64_t v1773 = v1771[1];
                  v1774 = (uint64_t *)v261[3];
                  uint64_t v1775 = *v1774;
                  uint64_t v1776 = v1774[1];
                  if (v1770 <= 1) {
                    uint64_t v1777 = 1;
                  }
                  else {
                    uint64_t v1777 = v188[1];
                  }
                  uint64_t v1778 = v1772 - v1773 * v1770;
                  uint64_t v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if (v1770)
                    {
                      uint64_t v1780 = 0;
                      uint64_t v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1782 = 0;
                          float v1783 = *(float *)(v1767 + 4 * v1766);
                          unsigned int v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 + *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1099 = *v188;
                if (v1099)
                {
                  uint64_t v1100 = 0;
                  uint64_t v1101 = 0;
                  uint64_t v1102 = v187[19];
                  uint64_t v1103 = v261[19];
                  uint64_t v1104 = v186[19];
                  uint64_t v1105 = *(void *)v187[3];
                  uint64_t v1106 = 4 * *(void *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1107 = 0;
                      float v1108 = *(float *)(v1102 + 4 * v1101);
                      unsigned int v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 + *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                unint64_t v1913 = v186[6];
                if (v1913)
                {
                  unint64_t v1942 = 0;
                  uint64_t v1845 = v261[19];
                  uint64_t v1860 = v187[19];
                  uint64_t v1785 = v186[19];
                  do
                  {
                    uint64_t v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1787 = v187[3];
                      uint64_t v1788 = v190;
                      int v1789 = v1942;
                      do
                      {
                        ldiv_t v1790 = ldiv(v1789, v188[v1788]);
                        int v1789 = v1790.quot;
                        v1786 += *(void *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    uint64_t v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      uint64_t v1792 = 0;
                      uint64_t v1793 = v261[3];
                      int v1794 = v1942;
                      do
                      {
                        ldiv_t v1795 = ldiv(v1794, v262[v1791]);
                        int v1794 = v1795.quot;
                        v1792 += *(void *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1796 = 0;
                      float v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      unsigned int v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 + *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                uint64_t v1799 = *v188;
                if (v1799)
                {
                  uint64_t v1800 = 0;
                  uint64_t v1801 = 0;
                  uint64_t v1802 = 0;
                  uint64_t v1803 = v187[19];
                  uint64_t v1804 = v261[19];
                  uint64_t v1805 = v186[19];
                  unint64_t v1806 = v188[1];
                  v1807 = (uint64_t *)v187[3];
                  uint64_t v1808 = *v1807;
                  uint64_t v1809 = v1807[1];
                  v1810 = (uint64_t *)v261[3];
                  uint64_t v1811 = *v1810;
                  uint64_t v1812 = v1810[1];
                  if (v1806 <= 1) {
                    uint64_t v1813 = 1;
                  }
                  else {
                    uint64_t v1813 = v188[1];
                  }
                  uint64_t v1814 = v1808 - v1809 * v1806;
                  uint64_t v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if (v1806)
                    {
                      uint64_t v1816 = 0;
                      uint64_t v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1818 = 0;
                          float v1819 = *(float *)(v1804 + 4 * v1801);
                          unsigned int v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = v1819 + *(float *)(v1817 + v1818);
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1110 = *v188;
                if (v1110)
                {
                  uint64_t v1111 = 0;
                  uint64_t v1112 = 0;
                  uint64_t v1113 = v187[19];
                  uint64_t v1114 = v261[19];
                  uint64_t v1115 = v186[19];
                  uint64_t v1116 = *(void *)v261[3];
                  uint64_t v1117 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1118 = 0;
                      float v1119 = *(float *)(v1114 + 4 * v1112);
                      unsigned int v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = v1119 + *(float *)(v1113 + v1118);
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                unint64_t v1914 = v186[6];
                if (v1914)
                {
                  unint64_t v1943 = 0;
                  uint64_t v1846 = v261[19];
                  uint64_t v1861 = v187[19];
                  uint64_t v1821 = v186[19];
                  do
                  {
                    uint64_t v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1823 = v187[3];
                      uint64_t v1824 = v190;
                      int v1825 = v1943;
                      do
                      {
                        ldiv_t v1826 = ldiv(v1825, v188[v1824]);
                        int v1825 = v1826.quot;
                        v1822 += *(void *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    uint64_t v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      uint64_t v1828 = 0;
                      uint64_t v1829 = v261[3];
                      int v1830 = v1943;
                      do
                      {
                        ldiv_t v1831 = ldiv(v1830, v262[v1827]);
                        int v1830 = v1831.quot;
                        v1828 += *(void *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1832 = 0;
                      float v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      unsigned int v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = v1833 + *(float *)(v1861 + 4 * (int)v1822 + v1832);
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                uint64_t v1318 = *v188;
                if (v1318)
                {
                  uint64_t v1319 = 0;
                  uint64_t v1320 = 0;
                  uint64_t v1321 = 0;
                  uint64_t v1322 = v187[19];
                  uint64_t v1323 = v261[19];
                  uint64_t v1324 = v186[19];
                  unint64_t v1325 = v188[1];
                  unint64_t v1326 = (uint64_t *)v187[3];
                  uint64_t v1327 = *v1326;
                  uint64_t v1328 = v1326[1];
                  uint64_t v1329 = (uint64_t *)v261[3];
                  uint64_t v1330 = *v1329;
                  uint64_t v1331 = v1329[1];
                  if (v1325 <= 1) {
                    uint64_t v1332 = 1;
                  }
                  else {
                    uint64_t v1332 = v188[1];
                  }
                  uint64_t v1333 = v1327 - v1328 * v1325;
                  uint64_t v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if (v1325)
                    {
                      uint64_t v1335 = 0;
                      uint64_t v1336 = v1323 + 4 * v1320;
                      uint64_t v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1338 = 0;
                          unsigned int v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) + *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v422 = *v188;
                if (v422)
                {
                  uint64_t v423 = 0;
                  uint64_t v424 = v187[19];
                  uint64_t v425 = v261[19];
                  uint64_t v426 = v186[19];
                  uint64_t v427 = 4 * *(void *)v261[3];
                  uint64_t v428 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v429 = 0;
                      unsigned int v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) + *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                unint64_t v1900 = v186[6];
                if (v1900)
                {
                  unint64_t v1929 = 0;
                  uint64_t v1838 = v261[19];
                  uint64_t v1851 = v187[19];
                  uint64_t v1340 = v186[19];
                  do
                  {
                    uint64_t v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1342 = v187[3];
                      uint64_t v1343 = v190;
                      int v1344 = v1929;
                      do
                      {
                        ldiv_t v1345 = ldiv(v1344, v188[v1343]);
                        int v1344 = v1345.quot;
                        v1341 += *(void *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    uint64_t v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      uint64_t v1347 = 0;
                      uint64_t v1348 = v261[3];
                      int v1349 = v1929;
                      do
                      {
                        ldiv_t v1350 = ldiv(v1349, v262[v1346]);
                        int v1349 = v1350.quot;
                        v1347 += *(void *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1351 = 0;
                      unsigned int v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  + *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  uint64_t v431 = v186[6];
                  if (v431)
                  {
                    unint64_t v432 = (float *)v187[19];
                    v433 = (float *)v261[19];
                    uint64_t v434 = (float *)v186[19];
                    uint64_t v435 = 4 * *(void *)v261[3];
                    uint64_t v436 = 4 * *(void *)v187[3];
                    do
                    {
                      *v434++ = *v432 + *v433;
                      v433 = (float *)((char *)v433 + v435);
                      unint64_t v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  uint64_t v902 = *v188;
                  if (v902)
                  {
                    uint64_t v903 = 0;
                    uint64_t v904 = 0;
                    uint64_t v905 = 0;
                    uint64_t v906 = 0;
                    uint64_t v907 = v187[19];
                    uint64_t v908 = v261[19];
                    uint64_t v909 = v186[19];
                    unint64_t v910 = v188[1];
                    uint64_t v911 = (uint64_t *)v187[3];
                    uint64_t v912 = *v911;
                    uint64_t v913 = v911[1];
                    uint64_t v914 = (uint64_t *)v261[3];
                    uint64_t v915 = *v914;
                    uint64_t v916 = v914[1];
                    uint64_t v917 = v915 - v916 * v262[1];
                    if (v910 <= 1) {
                      uint64_t v918 = 1;
                    }
                    else {
                      uint64_t v918 = v188[1];
                    }
                    uint64_t v919 = v912 - v913 * v910;
                    do
                    {
                      if (v910)
                      {
                        uint64_t v920 = v904 + v918;
                        vDSP_Length v921 = (float *)(v909 + 4 * v904);
                        uint64_t v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) + *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        uint64_t v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  uint64_t v923 = *v188;
                  if (v923)
                  {
                    uint64_t v924 = 0;
                    uint64_t v925 = 0;
                    uint64_t v926 = 0;
                    uint64_t v927 = 0;
                    uint64_t v928 = v187[19];
                    uint64_t v929 = v261[19];
                    uint64_t v930 = v186[19];
                    unint64_t v931 = v188[1];
                    int v932 = (void *)v187[3];
                    uint64_t v933 = v932[1];
                    uint64_t v934 = (void *)v261[3];
                    uint64_t v935 = v934[1];
                    uint64_t v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1) {
                      uint64_t v937 = 1;
                    }
                    else {
                      uint64_t v937 = v188[1];
                    }
                    unint64_t v938 = *v932 - v933 * v931;
                    do
                    {
                      if (v931)
                      {
                        uint64_t v939 = 0;
                        unint64_t v940 = v188[2];
                        uint64_t v941 = v932[2];
                        uint64_t v942 = v934[2];
                        if (v940 <= 1) {
                          uint64_t v943 = 1;
                        }
                        else {
                          uint64_t v943 = v188[2];
                        }
                        uint64_t v944 = v935 - v942 * v262[2];
                        do
                        {
                          uint64_t v945 = v943;
                          if (v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) + *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  uint64_t v1971 = *v188;
                  if (v1971)
                  {
                    uint64_t v946 = 0;
                    uint64_t v947 = 0;
                    uint64_t v948 = 0;
                    uint64_t v949 = 0;
                    uint64_t v950 = v187[19];
                    uint64_t v951 = v261[19];
                    uint64_t v952 = v186[19];
                    unint64_t v953 = v188[1];
                    uint64_t v954 = (void *)v187[3];
                    uint64_t v955 = (void *)v261[3];
                    uint64_t v1893 = v955[1];
                    uint64_t v1922 = v954[1];
                    uint64_t v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1) {
                      uint64_t v956 = 1;
                    }
                    else {
                      uint64_t v956 = v188[1];
                    }
                    unint64_t v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if (v953)
                      {
                        uint64_t v958 = 0;
                        unint64_t v959 = v188[2];
                        uint64_t v960 = v954[2];
                        uint64_t v961 = v955[2];
                        if (v959 <= 1) {
                          uint64_t v962 = 1;
                        }
                        else {
                          uint64_t v962 = v188[2];
                        }
                        uint64_t v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if (v959)
                          {
                            uint64_t v964 = 0;
                            unint64_t v965 = v188[3];
                            uint64_t v966 = v954[3];
                            uint64_t v967 = v955[3];
                            if (v965 <= 1) {
                              uint64_t v968 = 1;
                            }
                            else {
                              uint64_t v968 = v188[3];
                            }
                            uint64_t v969 = v961 - v967 * v262[3];
                            do
                            {
                              uint64_t v970 = v968;
                              if (v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                + *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  uint64_t v890 = v186[6];
                  if (v890)
                  {
                    uint64_t v891 = 0;
                    uint64_t v1892 = v261[19];
                    uint64_t v1921 = v187[19];
                    uint64_t v1879 = v186[19];
                    do
                    {
                      uint64_t v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        uint64_t v893 = v187[3];
                        uint64_t v894 = v190;
                        int v895 = v891;
                        do
                        {
                          ldiv_t v896 = ldiv(v895, v188[v894]);
                          int v895 = v896.quot;
                          v892 += *(void *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      uint64_t v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        uint64_t v898 = 0;
                        uint64_t v899 = v261[3];
                        int v900 = v891;
                        do
                        {
                          ldiv_t v901 = ldiv(v900, v262[v897]);
                          int v900 = v901.quot;
                          v898 += *(void *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     + *(float *)(v1892 + 4 * (int)v898);
                      uint64_t v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::ArcCos::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCos::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvacosf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcCos::eval(a1, a2, a3);
  }
}

void mlx::core::ArcCosh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcCosh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvacoshf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcCosh::eval(a1, a2, a3);
  }
}

void mlx::core::ArcSin::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSin::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvasinf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcSin::eval(a1, a2, a3);
  }
}

void mlx::core::ArcSinh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcSinh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvasinhf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcSinh::eval(a1, a2, a3);
  }
}

void mlx::core::ArcTan::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTan::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvatanf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcTan::eval(a1, a2, a3);
  }
}

void mlx::core::ArcTan2::eval_cpu(uint64_t a1, const mlx::core::array **a2, int ***this)
{
  unsigned int v17[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 32) {
    mlx::core::ArcTan2::eval_cpu();
  }
  int v6 = (*this)[7];
  if (v6 == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 2) != 0)
  {
    char v7 = (const mlx::core::array *)((char *)v3 + 16);
    uint64_t v8 = *((void *)v3 + 2);
    if ((*(unsigned char *)(v8 + 168) & 2) != 0)
    {
      uint64_t v9 = *((void *)v3 + 1);
      if (!v9 || *(void *)(v9 + 8) || (uint64_t v13 = *(void *)(*(void *)v3 + 144)) == 0 || *(void *)(v13 + 8))
      {
        uint64_t v10 = *((void *)v3 + 3);
        if (!v10 || *(void *)(v10 + 8) || (uint64_t v15 = *(void *)(v8 + 144)) == 0 || *(void *)(v15 + 8))
        {
          int v11 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)(*this)[6] * BYTE4(v6)));
          v17[0] = &unk_27062AEC8;
          v17[1] = mlx::core::allocator::free;
          void v17[3] = v17;
          mlx::core::array::set_data(this, (uint64_t)v11, (uint64_t)v17);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v17);
LABEL_13:
          int v12 = *(const float **)(*(void *)v3 + 152);
          int v16 = *(void *)(*(void *)v3 + 160);
          vvatan2f((float *)(*this)[19], v12, *(const float **)(*((void *)v3 + 2) + 152), &v16);
          return;
        }
        char v14 = (mlx::core::array *)this;
      }
      else
      {
        char v14 = (mlx::core::array *)this;
        char v7 = v3;
      }
      mlx::core::array::copy_shared_buffer(v14, v7);
      goto LABEL_13;
    }
  }
  mlx::core::ArcTan2::eval(a1, (uint64_t)a2, (mlx::core::array *)this);
}

void sub_256F54F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::ArcTanh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvatanhf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::ArcTanh::eval(a1, a2, a3);
  }
}

void mlx::core::AsType::eval_cpu(int a1, uint64_t a2, mlx::core::array *this, float a4)
{
  uint64_t v4 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::AsType::eval_cpu();
  }
  if ((*(unsigned char *)(*(void *)v4 + 168) & 1) == 0) {
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(*(void *)v4 + 56);
  switch(v6)
  {
    case 2:
      if (*(_DWORD *)(*(void *)this + 56) != 6) {
        goto LABEL_3;
      }
      int v11 = *(float **)(*(void *)this + 152);
      int v12 = *(const unsigned int **)(*(void *)v4 + 152);
      vDSP_Length v13 = *(void *)(*(void *)v4 + 160);
      vDSP_vfltu32(v12, 1, v11, 1, v13);
      break;
    case 4:
      if (*(_DWORD *)(*(void *)this + 56) != 6) {
        goto LABEL_3;
      }
      char v14 = *(float **)(*(void *)this + 152);
      uint64_t v15 = *(const int **)(*(void *)v4 + 152);
      vDSP_Length v16 = *(void *)(*(void *)v4 + 160);
      vDSP_vflt32(v15, 1, v14, 1, v16);
      break;
    case 6:
      int v7 = *(_DWORD *)(*(void *)this + 56);
      if (v7 != 4)
      {
        if (v7 == 2)
        {
          uint64_t v8 = *(unsigned int **)(*(void *)this + 152);
          uint64_t v9 = *(const float **)(*(void *)v4 + 152);
          vDSP_Length v10 = *(void *)(*(void *)v4 + 160);
          vDSP_vfixu32(v9, 1, v8, 1, v10);
          return;
        }
LABEL_3:
        mlx::core::AsType::eval(a1, a2, (int ***)this, a4);
        return;
      }
      int v17 = *(int **)(*(void *)this + 152);
      vDSP_Length v18 = *(const float **)(*(void *)v4 + 152);
      vDSP_Length v19 = *(void *)(*(void *)v4 + 160);
      vDSP_vfix32(v18, 1, v17, 1, v19);
      break;
    default:
      goto LABEL_3;
  }
}

void mlx::core::Cos::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cos::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvcosf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Cos::eval(a1, a2, a3);
  }
}

void mlx::core::Cosh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Cosh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvcoshf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Cosh::eval(a1, a2, a3);
  }
}

void mlx::core::Divide::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Divide::eval_cpu();
  }
  uint64_t v4 = v3 + 2;
  int v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 6)
  {
  }
  else if (v5 == 4)
  {
  }
  else
  {
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::anonymous namespace'::UseDefaultBinaryOp,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned char **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          uint64_t v32 = *(void *)(*a2 + 160);
          if ((int)v32 >= 1)
          {
            int v33 = *(void **)(*(void *)a3 + 152);
            int v34 = **(unsigned __int8 **)(*a1 + 152);
            memset(v33, v34, v32);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          int v23 = *(void **)a3;
          uint64_t v24 = *a1;
          int v25 = *(int **)*a1;
          uint64_t v26 = (*(void *)(*a1 + 8) - (void)v25) >> 2;
          uint64_t v27 = (v26 - 1);
          if ((int)v27 >= -1) {
            int v28 = -1;
          }
          else {
            int v28 = v26 - 1;
          }
          int v29 = v28 + 1;
          int v30 = v26 + 1;
          break;
      }
      while (1)
      {
        unsigned int v31 = v30 - 2;
        if (v30 - 2 < 0) {
          break;
        }
        --v30;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v31) != *(void *)(v23[3] + 8 * v31)) {
          goto LABEL_100;
        }
      }
      int v30 = v29;
LABEL_100:
      long long v123 = (uint64_t *)*a2;
      uint64_t v124 = *(void *)*a2;
      unint64_t v125 = (unint64_t)(*(void *)(*a2 + 8) - v124) >> 2;
      int v126 = v125 - 1;
      if ((int)v125 - 1 >= -1) {
        int v126 = -1;
      }
      int v127 = v126 + 1;
      int v128 = v125 + 1;
      while (1)
      {
        unsigned int v129 = v128 - 2;
        if (v128 - 2 < 0) {
          break;
        }
        --v128;
        if (*(void *)(v123[3] + 8 * v129) != *(void *)(v23[3] + 8 * v129)) {
          goto LABEL_153;
        }
      }
      int v128 = v127;
LABEL_153:
      int v176 = v26 + 1;
      while (1)
      {
        unsigned int v177 = v176 - 2;
        if (v176 - 2 < 0) {
          break;
        }
        --v176;
        if (*(void *)(*(void *)(v24 + 24) + 8 * v177)) {
          goto LABEL_188;
        }
      }
      int v176 = v29;
LABEL_188:
      int v190 = v125 + 1;
      while (1)
      {
        unsigned int v191 = v190 - 2;
        if (v190 - 2 < 0) {
          break;
        }
        --v190;
        if (*(void *)(v123[3] + 8 * v191)) {
          goto LABEL_223;
        }
      }
      int v190 = v127;
LABEL_223:
      unint64_t v204 = (uint64_t)(v23[1] - *v23) >> 2;
      if (v30 <= v128) {
        int v205 = v128;
      }
      else {
        int v205 = v30;
      }
      if (v30 <= v190) {
        int v30 = v190;
      }
      if (v176 > v128) {
        int v128 = v176;
      }
      if (v204 > v128)
      {
        int v206 = 1;
      }
      else
      {
        int v128 = (uint64_t)(v23[1] - *v23) >> 2;
        int v206 = 4;
      }
      if (v204 > v30)
      {
        int v207 = 2;
      }
      else
      {
        int v30 = v128;
        int v207 = v206;
      }
      if (v204 > v205)
      {
        int v30 = v205;
        int v207 = 3;
      }
      if (!v30) {
        goto LABEL_249;
      }
      unint64_t v208 = *(void *)(v23[3] + 8 * (v30 - 1));
      if (v208 < 0x10) {
        goto LABEL_249;
      }
      switch(v207)
      {
        case 1:
          if (v30 == 2)
          {
            vDSP_Length __Nt = *v25;
            if (__Nt)
            {
              uint64_t v1158 = 0;
              uint64_t v1159 = 0;
              uint64_t v1160 = *(void *)(v24 + 152);
              uint64_t v1161 = (char *)v23[19];
              unint64_t v1162 = v25[1];
              uint64_t v1163 = *(uint64_t **)(v24 + 24);
              uint64_t v1164 = *v1163;
              uint64_t v1165 = v1163[1];
              if (v1162 <= 1) {
                uint64_t v1166 = 1;
              }
              else {
                uint64_t v1166 = v25[1];
              }
              vDSP_Length v1637 = v1166;
              int v1667 = v25[1];
              uint64_t v1167 = v1164 - v1165 * v1162;
              do
              {
                vDSP_Length v1168 = v1637;
                if (v1667)
                {
                  do
                  {
                    if ((int)v208 >= 1) {
                      memset(v1161, *(unsigned __int8 *)(v1160 + v1159), v208);
                    }
                    v1159 += v1165;
                    v1161 += (int)v208;
                    --v1168;
                  }
                  while (v1168);
                }
                v1159 += v1167;
                ++v1158;
              }
              while (v1158 != __Nt);
            }
          }
          else if (v30 == 1)
          {
            uint64_t v845 = *v25;
            if (v845)
            {
              uint64_t v846 = *(unsigned __int8 **)(v24 + 152);
              uint64_t v847 = (char *)v23[19];
              uint64_t v848 = **(void **)(v24 + 24);
              do
              {
                if ((int)v208 >= 1) {
                  memset(v847, *v846, v208);
                }
                v847 += (int)v208;
                v846 += v848;
                --v845;
              }
              while (v845);
            }
          }
          else
          {
            vDSP_Length __Nu = v23[6];
            if (__Nu)
            {
              vDSP_Length v1169 = 0;
              unint64_t v1170 = (char *)v23[19];
              uint64_t v1668 = *(void *)(v24 + 152);
              do
              {
                uint64_t v1171 = 0;
                if ((v27 & 0x80000000) == 0)
                {
                  uint64_t v1172 = *(void *)(v24 + 24);
                  uint64_t v1173 = v27;
                  int quot = v1169;
                  do
                  {
                    ldiv_t v1175 = ldiv(quot, v25[v1173]);
                    int quot = v1175.quot;
                    v1171 += *(void *)(v1172 + 8 * v1173--) * v1175.rem;
                  }
                  while (v1173 != -1);
                }
                if ((int)v208 >= 1) {
                  memset(v1170, *(unsigned __int8 *)(v1668 + (int)v1171), v208);
                }
                v1170 += (int)v208;
                v1169 += (int)v208;
              }
              while (v1169 < __Nu);
            }
          }
          break;
        case 2:
          if (v30 == 2)
          {
            int v1176 = *v25;
            if (*v25)
            {
              uint64_t v1177 = 0;
              uint64_t v1178 = 0;
              unint64_t v1669 = 0;
              vDSP_Length __Nv = (int)v208;
              uint64_t v1179 = (int *)v23[19];
              uint64_t v1180 = v123[19];
              uint64_t v1181 = *(void *)(v24 + 152);
              do
              {
                if (v25[1])
                {
                  unint64_t v1182 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1181 + v1178), 1, (const int *)(v1180 + v1177), v1179, 1, __Nv);
                    uint64_t v24 = *a1;
                    uint64_t v1183 = *(void **)(*a1 + 24);
                    uint64_t v1184 = v1183[1];
                    v1178 += v1184;
                    long long v123 = (uint64_t *)*a2;
                    int v1185 = *(void **)(*a2 + 24);
                    uint64_t v1186 = v1185[1];
                    v1177 += v1186;
                    uint64_t v1179 = (int *)((char *)v1179 + __Nv);
                    ++v1182;
                    int v25 = *(int **)*a1;
                    unint64_t v1187 = v25[1];
                  }
                  while (v1182 < v1187);
                  int v1176 = *v25;
                  uint64_t v124 = *v123;
                }
                else
                {
                  unint64_t v1187 = 0;
                  uint64_t v1183 = *(void **)(v24 + 24);
                  uint64_t v1184 = v1183[1];
                  int v1185 = (void *)v123[3];
                  uint64_t v1186 = v1185[1];
                }
                uint64_t v1178 = *v1183 + v1178 - v1187 * v1184;
                uint64_t v1177 = *v1185 + v1177 - v1186 * *(int *)(v124 + 4);
                ++v1669;
              }
              while (v1669 < v1176);
            }
          }
          else if (v30 == 1)
          {
            if (*v25)
            {
              unint64_t v849 = 0;
              uint64_t v850 = 0;
              uint64_t v851 = 0;
              uint64_t v852 = *(void *)(v24 + 152);
              uint64_t v853 = v123[19];
              vDSP_Length v854 = (int)v208;
              uint64_t v855 = (int *)v23[19];
              do
              {
                vDSP_vsdivi((const int *)(v852 + v851), 1, (const int *)(v853 + v850), v855, 1, v854);
                v851 += **(void **)(*a1 + 24);
                v850 += **(void **)(*a2 + 24);
                uint64_t v855 = (int *)((char *)v855 + v854);
                ++v849;
              }
              while (v849 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v1188 = 0;
            uint64_t v1670 = v123[19];
            vDSP_Length __Nw = *(void *)(v24 + 152);
            vDSP_Length v1638 = (int)v208;
            uint64_t v1189 = (int *)v23[19];
            do
            {
              uint64_t v1190 = *(void *)*a1;
              unint64_t v1191 = (unint64_t)(*(void *)(*a1 + 8) - v1190) >> 2;
              uint64_t v1192 = 0;
              uint64_t v1193 = (v1191 - 1);
              if ((int)v1191 - 1 >= 0)
              {
                uint64_t v1194 = *(void *)(*a1 + 24);
                int v1195 = v1188;
                do
                {
                  ldiv_t v1196 = ldiv(v1195, *(int *)(v1190 + 4 * v1193));
                  int v1195 = v1196.quot;
                  v1192 += *(void *)(v1194 + 8 * v1193--) * v1196.rem;
                }
                while (v1193 != -1);
              }
              uint64_t v1197 = *(void *)*a2;
              unint64_t v1198 = (unint64_t)(*(void *)(*a2 + 8) - v1197) >> 2;
              uint64_t v1199 = 0;
              uint64_t v1200 = (v1198 - 1);
              if ((int)v1198 - 1 >= 0)
              {
                uint64_t v1201 = *(void *)(*a2 + 24);
                int v1202 = v1188;
                do
                {
                  ldiv_t v1203 = ldiv(v1202, *(int *)(v1197 + 4 * v1200));
                  int v1202 = v1203.quot;
                  v1199 += *(void *)(v1201 + 8 * v1200--) * v1203.rem;
                }
                while (v1200 != -1);
              }
              vDSP_vsdivi((const int *)(__Nw + (int)v1192), 1, (const int *)(v1670 + (int)v1199), v1189, 1, v1638);
              uint64_t v1189 = (int *)((char *)v1189 + v1638);
              v1188 += v1638;
            }
            while (v1188 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v30 == 2)
          {
            int v962 = *v25;
            if (*v25)
            {
              uint64_t v963 = 0;
              uint64_t v964 = 0;
              unint64_t v1655 = 0;
              vDSP_Length __Nh = (int)v208;
              unint64_t v965 = (int *)v23[19];
              uint64_t v966 = v123[19];
              uint64_t v967 = *(void *)(v24 + 152);
              do
              {
                if (v25[1])
                {
                  unint64_t v968 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v966 + v963), 1, (const int *)(v967 + v964), 1, v965, 1, __Nh);
                    uint64_t v24 = *a1;
                    uint64_t v969 = *(void **)(*a1 + 24);
                    uint64_t v970 = v969[1];
                    v964 += v970;
                    long long v123 = (uint64_t *)*a2;
                    uint64_t v971 = *(void **)(*a2 + 24);
                    uint64_t v972 = v971[1];
                    v963 += v972;
                    unint64_t v965 = (int *)((char *)v965 + __Nh);
                    ++v968;
                    int v25 = *(int **)*a1;
                    unint64_t v973 = v25[1];
                  }
                  while (v968 < v973);
                  int v962 = *v25;
                  uint64_t v124 = *v123;
                }
                else
                {
                  unint64_t v973 = 0;
                  uint64_t v969 = *(void **)(v24 + 24);
                  uint64_t v970 = v969[1];
                  uint64_t v971 = (void *)v123[3];
                  uint64_t v972 = v971[1];
                }
                uint64_t v964 = *v969 + v964 - v973 * v970;
                uint64_t v963 = *v971 + v963 - v972 * *(int *)(v124 + 4);
                ++v1655;
              }
              while (v1655 < v962);
            }
          }
          else if (v30 == 1)
          {
            if (*v25)
            {
              unint64_t v209 = 0;
              uint64_t v210 = 0;
              uint64_t v211 = 0;
              uint64_t v212 = *(void *)(v24 + 152);
              uint64_t v213 = v123[19];
              vDSP_Length v214 = (int)v208;
              uint64_t v215 = (int *)v23[19];
              do
              {
                vDSP_vdivi((const int *)(v213 + v210), 1, (const int *)(v212 + v211), 1, v215, 1, v214);
                v211 += **(void **)(*a1 + 24);
                v210 += **(void **)(*a2 + 24);
                uint64_t v215 = (int *)((char *)v215 + v214);
                ++v209;
              }
              while (v209 < **(int **)*a1);
            }
          }
          else if (v23[6])
          {
            unint64_t v974 = 0;
            uint64_t v1656 = v123[19];
            __Nunint64_t i = *(void *)(v24 + 152);
            vDSP_Length v1630 = (int)v208;
            uint64_t v975 = (int *)v23[19];
            do
            {
              uint64_t v976 = *(void *)*a1;
              unint64_t v977 = (unint64_t)(*(void *)(*a1 + 8) - v976) >> 2;
              uint64_t v978 = 0;
              uint64_t v979 = (v977 - 1);
              if ((int)v977 - 1 >= 0)
              {
                uint64_t v980 = *(void *)(*a1 + 24);
                int v981 = v974;
                do
                {
                  ldiv_t v982 = ldiv(v981, *(int *)(v976 + 4 * v979));
                  int v981 = v982.quot;
                  v978 += *(void *)(v980 + 8 * v979--) * v982.rem;
                }
                while (v979 != -1);
              }
              uint64_t v983 = *(void *)*a2;
              unint64_t v984 = (unint64_t)(*(void *)(*a2 + 8) - v983) >> 2;
              uint64_t v985 = 0;
              uint64_t v986 = (v984 - 1);
              if ((int)v984 - 1 >= 0)
              {
                uint64_t v987 = *(void *)(*a2 + 24);
                int v988 = v974;
                do
                {
                  ldiv_t v989 = ldiv(v988, *(int *)(v983 + 4 * v986));
                  int v988 = v989.quot;
                  v985 += *(void *)(v987 + 8 * v986--) * v989.rem;
                }
                while (v986 != -1);
              }
              vDSP_vdivi((const int *)(v1656 + (int)v985), 1, (const int *)(__Ni + (int)v978), 1, v975, 1, v1630);
              uint64_t v975 = (int *)((char *)v975 + v1630);
              v974 += v1630;
            }
            while (v974 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_249:
          switch(v204)
          {
            case 1uLL:
              uint64_t v216 = v23[6];
              if (v216)
              {
                uint64_t v217 = *(unsigned char **)(v24 + 152);
                uint64_t v218 = (unsigned char *)v23[19];
                uint64_t v219 = **(void **)(v24 + 24);
                do
                {
                  *v218++ = *v217;
                  v217 += v219;
                  --v216;
                }
                while (v216);
              }
              break;
            case 2uLL:
              uint64_t v335 = *v25;
              if (v335)
              {
                uint64_t v336 = 0;
                uint64_t v337 = 0;
                uint64_t v338 = 0;
                uint64_t v339 = *(void *)(v24 + 152);
                uint64_t v340 = v23[19];
                unint64_t v341 = v25[1];
                int v342 = *(uint64_t **)(v24 + 24);
                uint64_t v344 = *v342;
                uint64_t v343 = v342[1];
                if (v341 <= 1) {
                  uint64_t v345 = 1;
                }
                else {
                  uint64_t v345 = v25[1];
                }
                uint64_t v346 = v344 - v343 * v341;
                do
                {
                  if (v341)
                  {
                    uint64_t v347 = v337 + v345;
                    uint64_t v348 = (unsigned char *)(v340 + v337);
                    uint64_t v349 = v345;
                    do
                    {
                      *v348++ = *(unsigned char *)(v339 + v338);
                      v338 += v343;
                      --v349;
                    }
                    while (v349);
                    uint64_t v337 = v347;
                  }
                  v338 += v346;
                  ++v336;
                }
                while (v336 != v335);
              }
              break;
            case 3uLL:
              uint64_t v350 = *v25;
              if (v350)
              {
                uint64_t v351 = 0;
                uint64_t v352 = 0;
                uint64_t v353 = 0;
                uint64_t v354 = *(void *)(v24 + 152);
                uint64_t v355 = v23[19];
                unint64_t v356 = v25[1];
                unint64_t v357 = *(void **)(v24 + 24);
                uint64_t v358 = v357[1];
                if (v356 <= 1) {
                  uint64_t v359 = 1;
                }
                else {
                  uint64_t v359 = v25[1];
                }
                unint64_t v360 = *v357 - v358 * v356;
                do
                {
                  if (v356)
                  {
                    uint64_t v361 = 0;
                    unint64_t v362 = v25[2];
                    uint64_t v363 = v357[2];
                    if (v362 <= 1) {
                      uint64_t v364 = 1;
                    }
                    else {
                      uint64_t v364 = v25[2];
                    }
                    do
                    {
                      uint64_t v365 = v364;
                      if (v362)
                      {
                        do
                        {
                          *(unsigned char *)(v355 + v352++) = *(unsigned char *)(v354 + v353);
                          v353 += v363;
                          --v365;
                        }
                        while (v365);
                      }
                      v353 += v358 - v363 * v362;
                      ++v361;
                    }
                    while (v361 != v359);
                  }
                  v353 += v360;
                  ++v351;
                }
                while (v351 != v350);
              }
              break;
            case 4uLL:
              uint64_t v366 = *v25;
              if (v366)
              {
                uint64_t v367 = 0;
                uint64_t v368 = 0;
                uint64_t v369 = 0;
                uint64_t v370 = *(void *)(v24 + 152);
                uint64_t v371 = v23[19];
                unint64_t v372 = v25[1];
                uint64_t v373 = *(void **)(v24 + 24);
                uint64_t v374 = v373[1];
                if (v372 <= 1) {
                  uint64_t v375 = 1;
                }
                else {
                  uint64_t v375 = v25[1];
                }
                unint64_t v376 = *v373 - v374 * v372;
                do
                {
                  if (v372)
                  {
                    uint64_t v377 = 0;
                    unint64_t v378 = v25[2];
                    uint64_t v379 = v373[2];
                    if (v378 <= 1) {
                      uint64_t v380 = 1;
                    }
                    else {
                      uint64_t v380 = v25[2];
                    }
                    do
                    {
                      if (v378)
                      {
                        uint64_t v381 = 0;
                        unint64_t v382 = v25[3];
                        uint64_t v383 = v373[3];
                        if (v382 <= 1) {
                          uint64_t v384 = 1;
                        }
                        else {
                          uint64_t v384 = v25[3];
                        }
                        do
                        {
                          uint64_t v385 = v384;
                          if (v382)
                          {
                            do
                            {
                              *(unsigned char *)(v371 + v368++) = *(unsigned char *)(v370 + v369);
                              v369 += v383;
                              --v385;
                            }
                            while (v385);
                          }
                          v369 += v379 - v383 * v382;
                          ++v381;
                        }
                        while (v381 != v380);
                      }
                      v369 += v374 - v379 * v378;
                      ++v377;
                    }
                    while (v377 != v375);
                  }
                  v369 += v376;
                  ++v367;
                }
                while (v367 != v366);
              }
              break;
            default:
              uint64_t v326 = v23[6];
              if (v326)
              {
                uint64_t v327 = 0;
                uint64_t v328 = *(void *)(v24 + 152);
                uint64_t v329 = v23[19];
                do
                {
                  uint64_t v330 = 0;
                  if ((v27 & 0x80000000) == 0)
                  {
                    uint64_t v331 = *(void *)(v24 + 24);
                    uint64_t v332 = v27;
                    int v333 = v327;
                    do
                    {
                      ldiv_t v334 = ldiv(v333, v25[v332]);
                      int v333 = v334.quot;
                      v330 += *(void *)(v331 + 8 * v332--) * v334.rem;
                    }
                    while (v332 != -1);
                  }
                  *(unsigned char *)(v329 + v327++) = *(unsigned char *)(v328 + (int)v330);
                }
                while (v327 != v326);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          char v7 = **(unsigned char **)(*a1 + 152) / **(unsigned char **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          int v43 = *(_DWORD *)(*a2 + 160);
          if (v43 >= 1)
          {
            unsigned int v44 = **(unsigned __int8 **)(*a1 + 152);
            unsigned int v45 = *(unsigned char **)(*(void *)a3 + 152);
            char v46 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v47 = v43 + 1;
            do
            {
              unsigned int v48 = *v46++;
              *v45++ = v44 / v48;
              --v47;
            }
            while (v47 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          int v35 = *(void **)a3;
          uint64_t v36 = *a1;
          int v37 = *(int **)*a1;
          uint64_t v38 = (*(void *)(*a1 + 8) - (void)v37) >> 2;
          int v39 = v38 - 1;
          if ((int)v38 - 1 >= -1) {
            int v39 = -1;
          }
          int v40 = v39 + 1;
          int v41 = v38 + 1;
          break;
      }
      while (1)
      {
        unsigned int v42 = v41 - 2;
        if (v41 - 2 < 0) {
          break;
        }
        --v41;
        if (*(void *)(*(void *)(v36 + 24) + 8 * v42) != *(void *)(v35[3] + 8 * v42)) {
          goto LABEL_107;
        }
      }
      int v41 = v40;
LABEL_107:
      long long v130 = (int **)*a2;
      uint64_t v131 = *(int **)*a2;
      uint64_t v132 = (*(void *)(*a2 + 8) - (void)v131) >> 2;
      int v133 = v132 - 1;
      if ((int)v132 - 1 >= -1) {
        int v133 = -1;
      }
      int v134 = v133 + 1;
      int v135 = v132 + 1;
      while (1)
      {
        unsigned int v136 = v135 - 2;
        if (v135 - 2 < 0) {
          break;
        }
        --v135;
        if (*(void *)&v130[3][2 * v136] != *(void *)(v35[3] + 8 * v136)) {
          goto LABEL_158;
        }
      }
      int v135 = v134;
LABEL_158:
      int v178 = v38 + 1;
      while (1)
      {
        unsigned int v179 = v178 - 2;
        if (v178 - 2 < 0) {
          break;
        }
        --v178;
        if (*(void *)(*(void *)(v36 + 24) + 8 * v179)) {
          goto LABEL_193;
        }
      }
      int v178 = v40;
LABEL_193:
      int v192 = v132 + 1;
      while (1)
      {
        int v193 = v192 - 2;
        if (v192 - 2 < 0) {
          break;
        }
        --v192;
        if (*(void *)&v130[3][2 * v193]) {
          goto LABEL_255;
        }
      }
      int v192 = v134;
LABEL_255:
      unint64_t v220 = (uint64_t)(v35[1] - *v35) >> 2;
      if (v41 <= v135) {
        int v221 = v135;
      }
      else {
        int v221 = v41;
      }
      if (v41 <= v192) {
        int v41 = v192;
      }
      if (v178 > v135) {
        int v135 = v178;
      }
      if (v220 > v135)
      {
        int v222 = 1;
      }
      else
      {
        int v135 = (uint64_t)(v35[1] - *v35) >> 2;
        int v222 = 4;
      }
      if (v220 > v41)
      {
        int v223 = 2;
      }
      else
      {
        int v41 = v135;
        int v223 = v222;
      }
      if (v220 > v221)
      {
        int v41 = v221;
        int v223 = 3;
      }
      if (!v41) {
        goto LABEL_281;
      }
      unint64_t v224 = *(void *)(v35[3] + 8 * (v41 - 1));
      if (v224 < 0x10) {
        goto LABEL_281;
      }
      switch(v223)
      {
        case 1:
          if (v41 == 2)
          {
            int v1204 = *v37;
            if (*v37)
            {
              unint64_t v1205 = 0;
              uint64_t v1206 = 0;
              uint64_t v1207 = 0;
              uint64_t v1208 = *(void *)(v36 + 152);
              uint64_t v1209 = v130[19];
              uint64_t v1210 = v35[19];
              do
              {
                if (v37[1])
                {
                  unint64_t v1211 = 0;
                  do
                  {
                    if ((int)v224 >= 1)
                    {
                      uint64_t v1212 = 0;
                      unsigned int v1213 = *(unsigned __int8 *)(v1208 + v1207);
                      unsigned int v1214 = v224 + 1;
                      do
                      {
                        *(unsigned char *)(v1210 + v1212) = v1213 / *((unsigned __int8 *)v1209 + v1206 + v1212);
                        --v1214;
                        ++v1212;
                      }
                      while (v1214 > 1);
                      uint64_t v36 = *a1;
                      long long v130 = (int **)*a2;
                      int v37 = *(int **)*a1;
                    }
                    int v1215 = *(void **)(v36 + 24);
                    uint64_t v1216 = v1215[1];
                    v1207 += v1216;
                    v1206 += *((void *)v130[3] + 1);
                    v1210 += (int)v224;
                    ++v1211;
                    unint64_t v1217 = v37[1];
                  }
                  while (v1211 < v1217);
                  int v1204 = *v37;
                  uint64_t v131 = *v130;
                }
                else
                {
                  unint64_t v1217 = 0;
                  int v1215 = *(void **)(v36 + 24);
                  uint64_t v1216 = v1215[1];
                }
                uint64_t v1207 = *v1215 + v1207 - v1217 * v1216;
                uint64_t v1206 = *(void *)v130[3] + v1206 - *((void *)v130[3] + 1) * v131[1];
                ++v1205;
              }
              while (v1205 < v1204);
            }
          }
          else if (v41 == 1)
          {
            int v856 = *v37;
            if (*v37)
            {
              unint64_t v857 = 0;
              uint64_t v858 = 0;
              uint64_t v859 = 0;
              uint64_t v860 = *(void *)(v36 + 152);
              uint64_t v861 = v130[19];
              uint64_t v862 = v35[19];
              do
              {
                if ((int)v224 >= 1)
                {
                  uint64_t v863 = 0;
                  unsigned int v864 = *(unsigned __int8 *)(v860 + v859);
                  unsigned int v865 = v224 + 1;
                  do
                  {
                    *(unsigned char *)(v862 + v863) = v864 / *((unsigned __int8 *)v861 + v858 + v863);
                    --v865;
                    ++v863;
                  }
                  while (v865 > 1);
                  uint64_t v36 = *a1;
                  long long v130 = (int **)*a2;
                  int v856 = **(_DWORD **)*a1;
                }
                v859 += **(void **)(v36 + 24);
                v858 += *(void *)v130[3];
                v862 += (int)v224;
                ++v857;
              }
              while (v857 < v856);
            }
          }
          else if (v35[6])
          {
            uint64_t v1671 = *(void *)(v35[3] + 8 * (v41 - 1));
            vDSP_Length __Nx = 0;
            vDSP_Length v1606 = (vDSP_Length)v130[19];
            vDSP_Length v1618 = *(void *)(v36 + 152);
            vDSP_Length v1639 = (int)v224;
            unsigned int v1595 = v224 + 1;
            uint64_t v1218 = v35[19];
            do
            {
              uint64_t v1219 = *(void *)*a1;
              unint64_t v1220 = (unint64_t)(*(void *)(*a1 + 8) - v1219) >> 2;
              uint64_t v1221 = 0;
              uint64_t v1222 = (v1220 - 1);
              if ((int)v1220 - 1 >= 0)
              {
                uint64_t v1223 = *(void *)(*a1 + 24);
                int v1224 = __Nx;
                do
                {
                  ldiv_t v1225 = ldiv(v1224, *(int *)(v1219 + 4 * v1222));
                  int v1224 = v1225.quot;
                  v1221 += *(void *)(v1223 + 8 * v1222--) * v1225.rem;
                }
                while (v1222 != -1);
              }
              uint64_t v1226 = *(void *)*a2;
              unint64_t v1227 = (unint64_t)(*(void *)(*a2 + 8) - v1226) >> 2;
              uint64_t v1228 = 0;
              uint64_t v1229 = (v1227 - 1);
              if ((int)v1227 - 1 >= 0)
              {
                uint64_t v1230 = *(void *)(*a2 + 24);
                int v1231 = __Nx;
                do
                {
                  ldiv_t v1232 = ldiv(v1231, *(int *)(v1226 + 4 * v1229));
                  int v1231 = v1232.quot;
                  v1228 += *(void *)(v1230 + 8 * v1229--) * v1232.rem;
                }
                while (v1229 != -1);
              }
              if ((int)v1671 >= 1)
              {
                uint64_t v1233 = 0;
                unsigned int v1234 = *(unsigned __int8 *)(v1618 + (int)v1221);
                unsigned int v1235 = v1595;
                do
                {
                  *(unsigned char *)(v1218 + v1233) = v1234 / *(unsigned __int8 *)(v1606 + (int)v1228 + v1233);
                  --v1235;
                  ++v1233;
                }
                while (v1235 > 1);
                int v35 = *(void **)a3;
              }
              v1218 += v1639;
              __Nx += v1639;
            }
            while (__Nx < v35[6]);
          }
          break;
        case 2:
          if (v41 == 2)
          {
            int v1236 = *v37;
            if (*v37)
            {
              unint64_t v1237 = 0;
              uint64_t v1238 = 0;
              uint64_t v1239 = 0;
              uint64_t v1240 = *(void *)(v36 + 152);
              unint64_t v1241 = v130[19];
              vDSP_Length v1242 = (int)v224;
              uint64_t v1243 = (int *)v35[19];
              do
              {
                if (v37[1])
                {
                  unint64_t v1244 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1240 + v1239), 1, (int *)((char *)v1241 + v1238), v1243, 1, v1242);
                    uint64_t v36 = *a1;
                    int v1245 = *(void **)(*a1 + 24);
                    uint64_t v1246 = v1245[1];
                    v1239 += v1246;
                    long long v130 = (int **)*a2;
                    uint64_t v1247 = *(int **)(*a2 + 24);
                    uint64_t v1248 = *((void *)v1247 + 1);
                    v1238 += v1248;
                    uint64_t v1243 = (int *)((char *)v1243 + v1242);
                    ++v1244;
                    int v37 = *(int **)*a1;
                    unint64_t v1249 = v37[1];
                  }
                  while (v1244 < v1249);
                  int v1236 = *v37;
                  uint64_t v131 = *v130;
                }
                else
                {
                  unint64_t v1249 = 0;
                  int v1245 = *(void **)(v36 + 24);
                  uint64_t v1246 = v1245[1];
                  uint64_t v1247 = v130[3];
                  uint64_t v1248 = *((void *)v1247 + 1);
                }
                uint64_t v1239 = *v1245 + v1239 - v1249 * v1246;
                uint64_t v1238 = *(void *)v1247 + v1238 - v1248 * v131[1];
                ++v1237;
              }
              while (v1237 < v1236);
            }
          }
          else if (v41 == 1)
          {
            if (*v37)
            {
              unint64_t v866 = 0;
              uint64_t v867 = 0;
              uint64_t v868 = 0;
              uint64_t v869 = *(void *)(v36 + 152);
              uint64_t v870 = v130[19];
              vDSP_Length v871 = (int)v224;
              uint64_t v872 = (int *)v35[19];
              do
              {
                vDSP_vsdivi((const int *)(v869 + v868), 1, (int *)((char *)v870 + v867), v872, 1, v871);
                v868 += **(void **)(*a1 + 24);
                v867 += **(void **)(*a2 + 24);
                uint64_t v872 = (int *)((char *)v872 + v871);
                ++v866;
              }
              while (v866 < **(int **)*a1);
            }
          }
          else if (v35[6])
          {
            unint64_t v1250 = 0;
            uint64_t v1672 = v130[19];
            vDSP_Length __Ny = *(void *)(v36 + 152);
            vDSP_Length v1640 = (int)v224;
            uint64_t v1251 = (int *)v35[19];
            do
            {
              uint64_t v1252 = *(void *)*a1;
              unint64_t v1253 = (unint64_t)(*(void *)(*a1 + 8) - v1252) >> 2;
              uint64_t v1254 = 0;
              uint64_t v1255 = (v1253 - 1);
              if ((int)v1253 - 1 >= 0)
              {
                uint64_t v1256 = *(void *)(*a1 + 24);
                int v1257 = v1250;
                do
                {
                  ldiv_t v1258 = ldiv(v1257, *(int *)(v1252 + 4 * v1255));
                  int v1257 = v1258.quot;
                  v1254 += *(void *)(v1256 + 8 * v1255--) * v1258.rem;
                }
                while (v1255 != -1);
              }
              uint64_t v1259 = *(void *)*a2;
              unint64_t v1260 = (unint64_t)(*(void *)(*a2 + 8) - v1259) >> 2;
              uint64_t v1261 = 0;
              uint64_t v1262 = (v1260 - 1);
              if ((int)v1260 - 1 >= 0)
              {
                uint64_t v1263 = *(void *)(*a2 + 24);
                int v1264 = v1250;
                do
                {
                  ldiv_t v1265 = ldiv(v1264, *(int *)(v1259 + 4 * v1262));
                  int v1264 = v1265.quot;
                  v1261 += *(void *)(v1263 + 8 * v1262--) * v1265.rem;
                }
                while (v1262 != -1);
              }
              vDSP_vsdivi((const int *)(__Ny + (int)v1254), 1, (int *)((char *)v1672 + (int)v1261), v1251, 1, v1640);
              uint64_t v1251 = (int *)((char *)v1251 + v1640);
              v1250 += v1640;
            }
            while (v1250 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v41 == 2)
          {
            int v990 = *v37;
            if (*v37)
            {
              unint64_t v991 = 0;
              uint64_t v992 = 0;
              uint64_t v993 = 0;
              uint64_t v994 = *(void *)(v36 + 152);
              uint64_t v995 = v130[19];
              vDSP_Length v996 = (int)v224;
              uint64_t v997 = (int *)v35[19];
              do
              {
                if (v37[1])
                {
                  unint64_t v998 = 0;
                  do
                  {
                    vDSP_vdivi((int *)((char *)v995 + v992), 1, (const int *)(v994 + v993), 1, v997, 1, v996);
                    uint64_t v36 = *a1;
                    uint64_t v999 = *(void **)(*a1 + 24);
                    uint64_t v1000 = v999[1];
                    v993 += v1000;
                    long long v130 = (int **)*a2;
                    char v1001 = *(int **)(*a2 + 24);
                    uint64_t v1002 = *((void *)v1001 + 1);
                    v992 += v1002;
                    uint64_t v997 = (int *)((char *)v997 + v996);
                    ++v998;
                    int v37 = *(int **)*a1;
                    unint64_t v1003 = v37[1];
                  }
                  while (v998 < v1003);
                  int v990 = *v37;
                  uint64_t v131 = *v130;
                }
                else
                {
                  unint64_t v1003 = 0;
                  uint64_t v999 = *(void **)(v36 + 24);
                  uint64_t v1000 = v999[1];
                  char v1001 = v130[3];
                  uint64_t v1002 = *((void *)v1001 + 1);
                }
                uint64_t v993 = *v999 + v993 - v1003 * v1000;
                uint64_t v992 = *(void *)v1001 + v992 - v1002 * v131[1];
                ++v991;
              }
              while (v991 < v990);
            }
          }
          else if (v41 == 1)
          {
            if (*v37)
            {
              unint64_t v225 = 0;
              uint64_t v226 = 0;
              uint64_t v227 = 0;
              uint64_t v228 = *(void *)(v36 + 152);
              unsigned int v229 = v130[19];
              vDSP_Length v230 = (int)v224;
              vDSP_Length v231 = (int *)v35[19];
              do
              {
                vDSP_vdivi((int *)((char *)v229 + v226), 1, (const int *)(v228 + v227), 1, v231, 1, v230);
                v227 += **(void **)(*a1 + 24);
                v226 += **(void **)(*a2 + 24);
                vDSP_Length v231 = (int *)((char *)v231 + v230);
                ++v225;
              }
              while (v225 < **(int **)*a1);
            }
          }
          else if (v35[6])
          {
            unint64_t v1004 = 0;
            unint64_t v1657 = v130[19];
            __Nunint64_t j = *(void *)(v36 + 152);
            vDSP_Length v1631 = (int)v224;
            uint64_t v1005 = (int *)v35[19];
            do
            {
              uint64_t v1006 = *(void *)*a1;
              unint64_t v1007 = (unint64_t)(*(void *)(*a1 + 8) - v1006) >> 2;
              uint64_t v1008 = 0;
              uint64_t v1009 = (v1007 - 1);
              if ((int)v1007 - 1 >= 0)
              {
                uint64_t v1010 = *(void *)(*a1 + 24);
                int v1011 = v1004;
                do
                {
                  ldiv_t v1012 = ldiv(v1011, *(int *)(v1006 + 4 * v1009));
                  int v1011 = v1012.quot;
                  v1008 += *(void *)(v1010 + 8 * v1009--) * v1012.rem;
                }
                while (v1009 != -1);
              }
              uint64_t v1013 = *(void *)*a2;
              unint64_t v1014 = (unint64_t)(*(void *)(*a2 + 8) - v1013) >> 2;
              uint64_t v1015 = 0;
              uint64_t v1016 = (v1014 - 1);
              if ((int)v1014 - 1 >= 0)
              {
                uint64_t v1017 = *(void *)(*a2 + 24);
                int v1018 = v1004;
                do
                {
                  ldiv_t v1019 = ldiv(v1018, *(int *)(v1013 + 4 * v1016));
                  int v1018 = v1019.quot;
                  v1015 += *(void *)(v1017 + 8 * v1016--) * v1019.rem;
                }
                while (v1016 != -1);
              }
              vDSP_vdivi((int *)((char *)v1657 + (int)v1015), 1, (const int *)(__Nj + (int)v1008), 1, v1005, 1, v1631);
              uint64_t v1005 = (int *)((char *)v1005 + v1631);
              v1004 += v1631;
            }
            while (v1004 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_281:
          switch(v220)
          {
            case 1uLL:
              if (v35[6])
              {
                unint64_t v232 = 0;
                uint64_t v233 = 0;
                uint64_t v234 = 0;
                uint64_t v235 = *(void *)(v36 + 152);
                int v236 = v130[19];
                uint64_t v237 = v35[19];
                do
                {
                  *(unsigned char *)(v237 + v232) = *(unsigned char *)(v235 + v234) / *((unsigned char *)v236 + v233);
                  v234 += **(void **)(*a1 + 24);
                  v233 += **(void **)(*a2 + 24);
                  ++v232;
                }
                while (v232 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v402 = *v37;
              if (*v37)
              {
                unint64_t v403 = 0;
                uint64_t v404 = 0;
                uint64_t v405 = 0;
                uint64_t v406 = 0;
                uint64_t v407 = *(void *)(v36 + 152);
                uint64_t v408 = v130[19];
                uint64_t v409 = v35[19];
                do
                {
                  if (v37[1])
                  {
                    unint64_t v410 = 0;
                    do
                    {
                      *(unsigned char *)(v409 + v404 + v410) = *(unsigned char *)(v407 + v406) / *((unsigned char *)v408 + v405);
                      uint64_t v36 = *a1;
                      uint64_t v411 = *(void **)(*a1 + 24);
                      uint64_t v412 = v411[1];
                      v406 += v412;
                      long long v130 = (int **)*a2;
                      unint64_t v413 = *(int **)(*a2 + 24);
                      uint64_t v414 = *((void *)v413 + 1);
                      v405 += v414;
                      ++v410;
                      int v37 = *(int **)*a1;
                      unint64_t v415 = v37[1];
                    }
                    while (v410 < v415);
                    int v402 = *v37;
                    uint64_t v131 = *v130;
                    v404 += v410;
                  }
                  else
                  {
                    unint64_t v415 = 0;
                    uint64_t v411 = *(void **)(v36 + 24);
                    uint64_t v412 = v411[1];
                    unint64_t v413 = v130[3];
                    uint64_t v414 = *((void *)v413 + 1);
                  }
                  uint64_t v406 = *v411 + v406 - v415 * v412;
                  uint64_t v405 = *(void *)v413 + v405 - v414 * v131[1];
                  ++v403;
                }
                while (v403 < v402);
              }
              break;
            case 3uLL:
              int v416 = *v37;
              if (*v37)
              {
                unint64_t v417 = 0;
                uint64_t v418 = 0;
                uint64_t v419 = 0;
                uint64_t v420 = 0;
                uint64_t v421 = *(void *)(v36 + 152);
                uint64_t v422 = v130[19];
                uint64_t v423 = v35[19];
                do
                {
                  if (v37[1])
                  {
                    unint64_t v424 = 0;
                    do
                    {
                      if (v37[2])
                      {
                        unint64_t v425 = 0;
                        do
                        {
                          *(unsigned char *)(v423 + v418 + v425) = *(unsigned char *)(v421 + v420) / *((unsigned char *)v422 + v419);
                          uint64_t v36 = *a1;
                          uint64_t v426 = *(void **)(*a1 + 24);
                          uint64_t v427 = v426[2];
                          v420 += v427;
                          long long v130 = (int **)*a2;
                          uint64_t v428 = *(int **)(*a2 + 24);
                          uint64_t v429 = *((void *)v428 + 2);
                          v419 += v429;
                          ++v425;
                          int v37 = *(int **)*a1;
                          unint64_t v430 = v37[2];
                        }
                        while (v425 < v430);
                        uint64_t v131 = *v130;
                        v418 += v425;
                      }
                      else
                      {
                        unint64_t v430 = 0;
                        uint64_t v426 = *(void **)(v36 + 24);
                        uint64_t v427 = v426[2];
                        uint64_t v428 = v130[3];
                        uint64_t v429 = *((void *)v428 + 2);
                      }
                      uint64_t v431 = v426[1];
                      uint64_t v420 = v431 + v420 - v430 * v427;
                      uint64_t v419 = *((void *)v428 + 1) + v419 - v429 * v131[2];
                      ++v424;
                      unint64_t v432 = v37[1];
                    }
                    while (v424 < v432);
                    int v416 = *v37;
                  }
                  else
                  {
                    unint64_t v432 = 0;
                    uint64_t v426 = *(void **)(v36 + 24);
                    uint64_t v431 = v426[1];
                  }
                  uint64_t v420 = *v426 + v420 - v432 * v431;
                  uint64_t v419 = *(void *)v130[3] + v419 - *((void *)v130[3] + 1) * v131[1];
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            case 4uLL:
              int v433 = *v37;
              if (*v37)
              {
                unint64_t v434 = 0;
                uint64_t v435 = 0;
                uint64_t v436 = 0;
                uint64_t v437 = 0;
                uint64_t v438 = *(void *)(v36 + 152);
                uint64_t v439 = v130[19];
                uint64_t v440 = v35[19];
                do
                {
                  if (v37[1])
                  {
                    unint64_t v441 = 0;
                    do
                    {
                      if (v37[2])
                      {
                        unint64_t v442 = 0;
                        do
                        {
                          if (v37[3])
                          {
                            unint64_t v443 = 0;
                            do
                            {
                              *(unsigned char *)(v440 + v435 + v443) = *(unsigned char *)(v438 + v437) / *((unsigned char *)v439 + v436);
                              uint64_t v36 = *a1;
                              uint64_t v444 = *(void **)(*a1 + 24);
                              uint64_t v445 = v444[3];
                              v437 += v445;
                              long long v130 = (int **)*a2;
                              int v446 = *(int **)(*a2 + 24);
                              uint64_t v447 = *((void *)v446 + 3);
                              v436 += v447;
                              ++v443;
                              int v37 = *(int **)*a1;
                              unint64_t v448 = v37[3];
                            }
                            while (v443 < v448);
                            uint64_t v131 = *v130;
                            v435 += v443;
                          }
                          else
                          {
                            unint64_t v448 = 0;
                            uint64_t v444 = *(void **)(v36 + 24);
                            uint64_t v445 = v444[3];
                            int v446 = v130[3];
                            uint64_t v447 = *((void *)v446 + 3);
                          }
                          uint64_t v449 = v444[2];
                          uint64_t v437 = v449 + v437 - v448 * v445;
                          uint64_t v436 = *((void *)v446 + 2) + v436 - v447 * v131[3];
                          ++v442;
                          unint64_t v450 = v37[2];
                        }
                        while (v442 < v450);
                      }
                      else
                      {
                        unint64_t v450 = 0;
                        uint64_t v444 = *(void **)(v36 + 24);
                        uint64_t v449 = v444[2];
                      }
                      uint64_t v437 = v444[1] + v437 - v450 * v449;
                      uint64_t v436 = *((void *)v130[3] + 1) + v436 - *((void *)v130[3] + 2) * v131[2];
                      ++v441;
                      unint64_t v451 = v37[1];
                    }
                    while (v441 < v451);
                    int v433 = *v37;
                  }
                  else
                  {
                    unint64_t v451 = 0;
                  }
                  uint64_t v437 = **(void **)(v36 + 24) + v437 - *(void *)(*(void *)(v36 + 24) + 8) * v451;
                  uint64_t v436 = *(void *)v130[3] + v436 - *((void *)v130[3] + 1) * v131[1];
                  ++v434;
                }
                while (v434 < v433);
              }
              break;
            default:
              if (v35[6])
              {
                unint64_t v386 = 0;
                int v1651 = v130[19];
                vDSP_Length __Nd = *(void *)(v36 + 152);
                uint64_t v387 = v35[19];
                do
                {
                  uint64_t v388 = *(void *)*a1;
                  unint64_t v389 = (unint64_t)(*(void *)(*a1 + 8) - v388) >> 2;
                  uint64_t v390 = 0;
                  uint64_t v391 = (v389 - 1);
                  if ((int)v389 - 1 >= 0)
                  {
                    uint64_t v392 = *(void *)(*a1 + 24);
                    int v393 = v386;
                    do
                    {
                      ldiv_t v394 = ldiv(v393, *(int *)(v388 + 4 * v391));
                      int v393 = v394.quot;
                      v390 += *(void *)(v392 + 8 * v391--) * v394.rem;
                    }
                    while (v391 != -1);
                  }
                  uint64_t v395 = *(void *)*a2;
                  unint64_t v396 = (unint64_t)(*(void *)(*a2 + 8) - v395) >> 2;
                  uint64_t v397 = 0;
                  uint64_t v398 = (v396 - 1);
                  if ((int)v396 - 1 >= 0)
                  {
                    uint64_t v399 = *(void *)(*a2 + 24);
                    int v400 = v386;
                    do
                    {
                      ldiv_t v401 = ldiv(v400, *(int *)(v395 + 4 * v398));
                      int v400 = v401.quot;
                      v397 += *(void *)(v399 + 8 * v398--) * v401.rem;
                    }
                    while (v398 != -1);
                  }
                  *(unsigned char *)(v387 + v386++) = *(unsigned char *)(__Nd + (int)v390) / *((unsigned char *)v1651 + (int)v397);
                }
                while (v386 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          int v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v58 = *(_DWORD *)(*a2 + 160);
          if (v58 >= 1)
          {
            unsigned int v59 = **(_DWORD **)(*a1 + 152);
            int v60 = *(int **)(*(void *)a3 + 152);
            int v61 = *(unsigned int **)(*a2 + 152);
            unsigned int v62 = v58 + 1;
            do
            {
              unsigned int v63 = *v61++;
              *v60++ = v59 / v63;
              --v62;
            }
            while (v62 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v49 = *(void **)a3;
          uint64_t v50 = *a1;
          unsigned int v51 = *(int **)*a1;
          uint64_t v52 = (*(void *)(*a1 + 8) - (void)v51) >> 2;
          vDSP_Length v53 = (v52 - 1);
          if ((int)v53 >= -1) {
            int v54 = -1;
          }
          else {
            int v54 = v52 - 1;
          }
          int v55 = v54 + 1;
          int v56 = v52 + 1;
          break;
      }
      while (1)
      {
        unsigned int v57 = v56 - 2;
        if (v56 - 2 < 0) {
          break;
        }
        --v56;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v57) != *(void *)(v49[3] + 8 * v57)) {
          goto LABEL_114;
        }
      }
      int v56 = v55;
LABEL_114:
      uint64_t v137 = *a2;
      int v138 = *(int **)*a2;
      uint64_t v139 = (*(void *)(*a2 + 8) - (void)v138) >> 2;
      uint64_t v140 = (v139 - 1);
      if ((int)v140 >= -1) {
        int v141 = -1;
      }
      else {
        int v141 = v139 - 1;
      }
      int v142 = v141 + 1;
      int v143 = v139 + 1;
      while (1)
      {
        unsigned int v144 = v143 - 2;
        if (v143 - 2 < 0) {
          break;
        }
        --v143;
        if (*(void *)(*(void *)(v137 + 24) + 8 * v144) != *(void *)(v49[3] + 8 * v144)) {
          goto LABEL_163;
        }
      }
      int v143 = v142;
LABEL_163:
      int v180 = v52 + 1;
      while (1)
      {
        unsigned int v181 = v180 - 2;
        if (v180 - 2 < 0) {
          break;
        }
        --v180;
        if (*(void *)(*(void *)(v50 + 24) + 8 * v181)) {
          goto LABEL_198;
        }
      }
      int v180 = v55;
LABEL_198:
      int v194 = v139 + 1;
      while (1)
      {
        unsigned int v195 = v194 - 2;
        if (v194 - 2 < 0) {
          break;
        }
        --v194;
        if (*(void *)(*(void *)(v137 + 24) + 8 * v195)) {
          goto LABEL_287;
        }
      }
      int v194 = v142;
LABEL_287:
      unint64_t v238 = (uint64_t)(v49[1] - *v49) >> 2;
      if (v56 <= v143) {
        int v239 = v143;
      }
      else {
        int v239 = v56;
      }
      if (v56 <= v194) {
        int v56 = v194;
      }
      if (v180 > v143) {
        int v143 = v180;
      }
      if (v238 > v143)
      {
        int v240 = 1;
      }
      else
      {
        int v143 = (uint64_t)(v49[1] - *v49) >> 2;
        int v240 = 4;
      }
      if (v238 > v56)
      {
        int v241 = 2;
      }
      else
      {
        int v56 = v143;
        int v241 = v240;
      }
      if (v238 > v239)
      {
        int v56 = v239;
        int v241 = 3;
      }
      uint64_t v1647 = v140;
      vDSP_Length __N = v53;
      if (!v56 || *(void *)(v49[3] + 8 * (v56 - 1)) < 0x10uLL) {
        goto LABEL_313;
      }
      vDSP_Length v1622 = *(void *)(v49[3] + 8 * (v56 - 1));
      switch(v241)
      {
        case 1:
          if (v56 == 2)
          {
            int v1266 = *v51;
            if (*v51)
            {
              unint64_t v1267 = 0;
              uint64_t v1268 = 0;
              uint64_t v1269 = 0;
              uint64_t v1270 = *(void *)(v50 + 152);
              uint64_t v1271 = *(void *)(v137 + 152);
              uint64_t v1272 = v49[19];
              uint64_t v1273 = *(uint64_t **)(v50 + 24);
              uint64_t v1274 = *v1273;
              uint64_t v1275 = v1273[1];
              uint64_t v1276 = *(uint64_t **)(v137 + 24);
              uint64_t v1277 = *v1276;
              uint64_t v1278 = v1276[1];
              int v1279 = v51[1];
              int v1280 = v1279;
              do
              {
                if (v1280)
                {
                  unint64_t v1281 = 0;
                  uint64_t v1282 = v1271 + 4 * v1268;
                  do
                  {
                    if ((int)v1622 >= 1)
                    {
                      uint64_t v1283 = 0;
                      unsigned int v1284 = *(_DWORD *)(v1270 + 4 * v1269);
                      unsigned int v1285 = v1622 + 1;
                      do
                      {
                        *(_DWORD *)(v1272 + v1283) = v1284 / *(_DWORD *)(v1282 + v1283);
                        --v1285;
                        v1283 += 4;
                      }
                      while (v1285 > 1);
                      int v1279 = v51[1];
                    }
                    v1269 += v1275;
                    v1268 += v1278;
                    v1272 += 4 * (int)v1622;
                    ++v1281;
                    v1282 += 4 * v1278;
                  }
                  while (v1281 < v1279);
                  uint64_t v1286 = v1279;
                  int v1266 = *v51;
                  int v1280 = v1279;
                }
                else
                {
                  uint64_t v1286 = 0;
                }
                uint64_t v1269 = v1269 + v1274 - v1286 * v1275;
                uint64_t v1268 = v1268 + v1277 - v1278 * v138[1];
                ++v1267;
              }
              while (v1267 < v1266);
            }
          }
          else
          {
            uint64_t v1593 = *a2;
            vDSP_Length v1602 = *a1;
            if (v56 == 1)
            {
              int v873 = *v51;
              if (*v51)
              {
                unint64_t v874 = 0;
                uint64_t v875 = 0;
                uint64_t v876 = *(void *)(v50 + 152);
                uint64_t v877 = *(void *)(v137 + 152);
                uint64_t v878 = v49[19];
                uint64_t v879 = **(void **)(v50 + 24);
                uint64_t v880 = 4 * **(void **)(v137 + 24);
                do
                {
                  if ((int)v1622 >= 1)
                  {
                    uint64_t v881 = 0;
                    unsigned int v882 = *(_DWORD *)(v876 + 4 * v875);
                    unsigned int v883 = v1622 + 1;
                    do
                    {
                      *(_DWORD *)(v878 + v881) = v882 / *(_DWORD *)(v877 + v881);
                      --v883;
                      v881 += 4;
                    }
                    while (v883 > 1);
                    int v873 = *v51;
                  }
                  v875 += v879;
                  ++v874;
                  v878 += 4 * (int)v1622;
                  v877 += v880;
                }
                while (v874 < v873);
              }
            }
            else if (v49[6])
            {
              unint64_t v1287 = v49[6];
              unint64_t v1288 = 0;
              uint64_t v1584 = *(void *)(v1593 + 152);
              uint64_t v1588 = *(void *)(v50 + 152);
              uint64_t v1289 = v49[19];
              do
              {
                vDSP_Length v1290 = __N;
                if ((__N & 0x80000000) != 0)
                {
                  LODWORD(v1291) = 0;
                }
                else
                {
                  uint64_t v1291 = 0;
                  uint64_t v1292 = *(void *)(v1602 + 24);
                  int v1293 = v1288;
                  do
                  {
                    ldiv_t v1294 = ldiv(v1293, v51[v1290]);
                    int v1293 = v1294.quot;
                    v1291 += *(void *)(v1292 + 8 * v1290--) * v1294.rem;
                  }
                  while (v1290 != -1);
                }
                uint64_t v1295 = v1647;
                if ((v1647 & 0x80000000) != 0)
                {
                  LODWORD(v1296) = 0;
                }
                else
                {
                  uint64_t v1296 = 0;
                  uint64_t v1297 = *(void *)(v1593 + 24);
                  int v1298 = v1288;
                  do
                  {
                    ldiv_t v1299 = ldiv(v1298, v138[v1295]);
                    int v1298 = v1299.quot;
                    v1296 += *(void *)(v1297 + 8 * v1295--) * v1299.rem;
                  }
                  while (v1295 != -1);
                }
                if ((int)v1622 >= 1)
                {
                  uint64_t v1300 = 0;
                  unsigned int v1301 = *(_DWORD *)(v1588 + 4 * (int)v1291);
                  unsigned int v1302 = v1622 + 1;
                  do
                  {
                    *(_DWORD *)(v1289 + v1300) = v1301 / *(_DWORD *)(v1584 + 4 * (int)v1296 + v1300);
                    --v1302;
                    v1300 += 4;
                  }
                  while (v1302 > 1);
                }
                v1288 += (int)v1622;
                v1289 += 4 * (int)v1622;
              }
              while (v1288 < v1287);
            }
          }
          break;
        case 2:
          if (v56 == 2)
          {
            int v1303 = *v51;
            if (*v51)
            {
              uint64_t v1304 = 0;
              uint64_t v1305 = 0;
              unint64_t v1673 = 0;
              vDSP_Length __Nz = *(void *)(v50 + 152);
              uint64_t v1306 = (int *)v49[19];
              uint64_t v1307 = *(void *)(v137 + 152);
              do
              {
                if (v51[1])
                {
                  unint64_t v1308 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nz + 4 * v1305), 1, (const int *)(v1307 + 4 * v1304), v1306, 1, (int)v1622);
                    uint64_t v50 = *a1;
                    int v1309 = *(void **)(*a1 + 24);
                    uint64_t v1310 = v1309[1];
                    v1305 += v1310;
                    uint64_t v1311 = *(void **)(*a2 + 24);
                    uint64_t v1312 = v1311[1];
                    v1304 += v1312;
                    ++v1308;
                    unsigned int v51 = *(int **)*a1;
                    unint64_t v1313 = v51[1];
                    v1306 += (int)v1622;
                  }
                  while (v1308 < v1313);
                  int v1303 = *v51;
                  uint64_t v137 = *a2;
                  int v138 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1313 = 0;
                  int v1309 = *(void **)(v50 + 24);
                  uint64_t v1310 = v1309[1];
                  uint64_t v1311 = *(void **)(v137 + 24);
                  uint64_t v1312 = v1311[1];
                }
                uint64_t v1305 = *v1309 + v1305 - v1313 * v1310;
                uint64_t v1304 = *v1311 + v1304 - v1312 * v138[1];
                ++v1673;
              }
              while (v1673 < v1303);
            }
          }
          else if (v56 == 1)
          {
            if (*v51)
            {
              unint64_t v884 = 0;
              uint64_t v885 = 0;
              uint64_t v886 = 0;
              uint64_t v887 = *(void *)(v50 + 152);
              uint64_t v888 = *(void *)(v137 + 152);
              uint64_t v889 = (int *)v49[19];
              do
              {
                vDSP_vsdivi((const int *)(v887 + 4 * v886), 1, (const int *)(v888 + 4 * v885), v889, 1, (int)v1622);
                v886 += **(void **)(*a1 + 24);
                v885 += **(void **)(*a2 + 24);
                ++v884;
                v889 += (int)v1622;
              }
              while (v884 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1314 = 0;
            uint64_t v1674 = *(void *)(v137 + 152);
            vDSP_Length __Nba = *(void *)(v50 + 152);
            ldiv_t v1315 = (int *)v49[19];
            do
            {
              uint64_t v1316 = *(void *)*a1;
              unint64_t v1317 = (unint64_t)(*(void *)(*a1 + 8) - v1316) >> 2;
              uint64_t v1318 = 0;
              uint64_t v1319 = (v1317 - 1);
              if ((int)v1317 - 1 >= 0)
              {
                uint64_t v1320 = *(void *)(*a1 + 24);
                int v1321 = v1314;
                do
                {
                  ldiv_t v1322 = ldiv(v1321, *(int *)(v1316 + 4 * v1319));
                  int v1321 = v1322.quot;
                  v1318 += *(void *)(v1320 + 8 * v1319--) * v1322.rem;
                }
                while (v1319 != -1);
              }
              uint64_t v1323 = *(void *)*a2;
              unint64_t v1324 = (unint64_t)(*(void *)(*a2 + 8) - v1323) >> 2;
              uint64_t v1325 = 0;
              uint64_t v1326 = (v1324 - 1);
              if ((int)v1324 - 1 >= 0)
              {
                uint64_t v1327 = *(void *)(*a2 + 24);
                int v1328 = v1314;
                do
                {
                  ldiv_t v1329 = ldiv(v1328, *(int *)(v1323 + 4 * v1326));
                  int v1328 = v1329.quot;
                  v1325 += *(void *)(v1327 + 8 * v1326--) * v1329.rem;
                }
                while (v1326 != -1);
              }
              vDSP_vsdivi((const int *)(__Nba + 4 * (int)v1318), 1, (const int *)(v1674 + 4 * (int)v1325), v1315, 1, (int)v1622);
              v1315 += (int)v1622;
              v1314 += (int)v1622;
            }
            while (v1314 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v56 == 2)
          {
            int v1020 = *v51;
            if (*v51)
            {
              uint64_t v1021 = 0;
              uint64_t v1022 = 0;
              unint64_t v1658 = 0;
              __Nunint64_t k = *(void *)(v50 + 152);
              unsigned int v1023 = (int *)v49[19];
              vDSP_Length v1616 = *(void *)(v137 + 152);
              do
              {
                if (v51[1])
                {
                  unint64_t v1024 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1616 + 4 * v1021), 1, (const int *)(__Nk + 4 * v1022), 1, v1023, 1, (int)v1622);
                    uint64_t v50 = *a1;
                    unint64_t v1025 = *(void **)(*a1 + 24);
                    uint64_t v1026 = v1025[1];
                    v1022 += v1026;
                    uint64_t v1027 = *(void **)(*a2 + 24);
                    uint64_t v1028 = v1027[1];
                    v1021 += v1028;
                    ++v1024;
                    unsigned int v51 = *(int **)*a1;
                    unint64_t v1029 = v51[1];
                    v1023 += (int)v1622;
                  }
                  while (v1024 < v1029);
                  int v1020 = *v51;
                  uint64_t v137 = *a2;
                  int v138 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1029 = 0;
                  unint64_t v1025 = *(void **)(v50 + 24);
                  uint64_t v1026 = v1025[1];
                  uint64_t v1027 = *(void **)(v137 + 24);
                  uint64_t v1028 = v1027[1];
                }
                uint64_t v1022 = *v1025 + v1022 - v1029 * v1026;
                uint64_t v1021 = *v1027 + v1021 - v1028 * v138[1];
                ++v1658;
              }
              while (v1658 < v1020);
            }
          }
          else if (v56 == 1)
          {
            if (*v51)
            {
              unint64_t v242 = 0;
              uint64_t v243 = 0;
              uint64_t v244 = 0;
              uint64_t v245 = *(void *)(v50 + 152);
              uint64_t v246 = *(void *)(v137 + 152);
              uint64_t v247 = (int *)v49[19];
              do
              {
                vDSP_vdivi((const int *)(v246 + 4 * v243), 1, (const int *)(v245 + 4 * v244), 1, v247, 1, (int)v1622);
                v244 += **(void **)(*a1 + 24);
                v243 += **(void **)(*a2 + 24);
                ++v242;
                v247 += (int)v1622;
              }
              while (v242 < **(int **)*a1);
            }
          }
          else if (v49[6])
          {
            unint64_t v1030 = 0;
            uint64_t v1659 = *(void *)(v137 + 152);
            vDSP_Length __Nl = *(void *)(v50 + 152);
            uint64_t v1031 = (int *)v49[19];
            do
            {
              uint64_t v1032 = *(void *)*a1;
              unint64_t v1033 = (unint64_t)(*(void *)(*a1 + 8) - v1032) >> 2;
              uint64_t v1034 = 0;
              uint64_t v1035 = (v1033 - 1);
              if ((int)v1033 - 1 >= 0)
              {
                uint64_t v1036 = *(void *)(*a1 + 24);
                int v1037 = v1030;
                do
                {
                  ldiv_t v1038 = ldiv(v1037, *(int *)(v1032 + 4 * v1035));
                  int v1037 = v1038.quot;
                  v1034 += *(void *)(v1036 + 8 * v1035--) * v1038.rem;
                }
                while (v1035 != -1);
              }
              uint64_t v1039 = *(void *)*a2;
              unint64_t v1040 = (unint64_t)(*(void *)(*a2 + 8) - v1039) >> 2;
              uint64_t v1041 = 0;
              uint64_t v1042 = (v1040 - 1);
              if ((int)v1040 - 1 >= 0)
              {
                uint64_t v1043 = *(void *)(*a2 + 24);
                int v1044 = v1030;
                do
                {
                  ldiv_t v1045 = ldiv(v1044, *(int *)(v1039 + 4 * v1042));
                  int v1044 = v1045.quot;
                  v1041 += *(void *)(v1043 + 8 * v1042--) * v1045.rem;
                }
                while (v1042 != -1);
              }
              vDSP_vdivi((const int *)(v1659 + 4 * (int)v1041), 1, (const int *)(__Nl + 4 * (int)v1034), 1, v1031, 1, (int)v1622);
              v1031 += (int)v1622;
              v1030 += (int)v1622;
            }
            while (v1030 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_313:
          switch(v238)
          {
            case 1uLL:
              uint64_t v248 = v49[6];
              if (v248)
              {
                int v249 = *(_DWORD **)(v50 + 152);
                int v250 = *(_DWORD **)(v137 + 152);
                int v251 = (int *)v49[19];
                uint64_t v252 = 4 * **(void **)(v137 + 24);
                uint64_t v253 = 4 * **(void **)(v50 + 24);
                do
                {
                  *v251++ = *v249 / *v250;
                  int v250 = (_DWORD *)((char *)v250 + v252);
                  int v249 = (_DWORD *)((char *)v249 + v253);
                  --v248;
                }
                while (v248);
              }
              break;
            case 2uLL:
              int v465 = *v51;
              if (*v51)
              {
                unint64_t v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = 0;
                uint64_t v469 = 0;
                uint64_t v470 = *(void *)(v50 + 152);
                uint64_t v471 = *(void *)(v137 + 152);
                uint64_t v472 = v49[19];
                uint64_t v473 = *(uint64_t **)(v50 + 24);
                uint64_t v474 = *v473;
                uint64_t v475 = v473[1];
                uint64_t v476 = *(uint64_t **)(v137 + 24);
                uint64_t v478 = *v476;
                uint64_t v477 = v476[1];
                int v479 = v51[1];
                do
                {
                  if (v479)
                  {
                    for (unint64_t i = 0; i < v479; ++i)
                    {
                      *(_DWORD *)(v472 + 4 * v467 + 4 * i) = *(_DWORD *)(v470 + 4 * v469) / *(_DWORD *)(v471 + 4 * v468);
                      v469 += v475;
                      v468 += v477;
                      int v479 = v51[1];
                    }
                    uint64_t v481 = v479;
                    int v465 = *v51;
                    v467 += i;
                  }
                  else
                  {
                    uint64_t v481 = 0;
                  }
                  uint64_t v469 = v469 + v474 - v481 * v475;
                  uint64_t v468 = v468 + v478 - v477 * v138[1];
                  ++v466;
                }
                while (v466 < v465);
              }
              break;
            case 3uLL:
              int v482 = *v51;
              if (*v51)
              {
                unint64_t v483 = 0;
                uint64_t v484 = 0;
                uint64_t v485 = 0;
                uint64_t v486 = 0;
                uint64_t v487 = *(void *)(v50 + 152);
                uint64_t v488 = *(void *)(v137 + 152);
                uint64_t v489 = v49[19];
                uint64_t v490 = *(uint64_t **)(v50 + 24);
                uint64_t v491 = *v490;
                uint64_t v492 = v490[1];
                uint64_t v493 = *(uint64_t **)(v137 + 24);
                uint64_t v494 = *v493;
                uint64_t v495 = v493[1];
                int v496 = v51[1];
                int v497 = v496;
                do
                {
                  if (v497)
                  {
                    unint64_t v498 = 0;
                    uint64_t v499 = v490[2];
                    uint64_t v500 = v493[2];
                    int v501 = v51[2];
                    do
                    {
                      if (v501)
                      {
                        for (unint64_t j = 0; j < v501; ++j)
                        {
                          *(_DWORD *)(v489 + 4 * v484 + 4 * j) = *(_DWORD *)(v487 + 4 * v486)
                                                               / *(_DWORD *)(v488 + 4 * v485);
                          v486 += v499;
                          v485 += v500;
                          int v501 = v51[2];
                        }
                        uint64_t v503 = v501;
                        int v496 = v51[1];
                        v484 += j;
                      }
                      else
                      {
                        uint64_t v503 = 0;
                      }
                      uint64_t v486 = v486 + v492 - v503 * v499;
                      uint64_t v485 = v485 + v495 - v500 * v138[2];
                      ++v498;
                    }
                    while (v498 < v496);
                    uint64_t v504 = v496;
                    int v482 = *v51;
                    int v497 = v496;
                  }
                  else
                  {
                    uint64_t v504 = 0;
                  }
                  uint64_t v486 = v486 + v491 - v504 * v492;
                  uint64_t v485 = v485 + v494 - v495 * v138[1];
                  ++v483;
                }
                while (v483 < v482);
              }
              break;
            case 4uLL:
              int v505 = *v51;
              if (*v51)
              {
                unint64_t v506 = 0;
                uint64_t v507 = 0;
                uint64_t v508 = 0;
                uint64_t v509 = 0;
                uint64_t v510 = *(void *)(v50 + 152);
                uint64_t v511 = *(void *)(v137 + 152);
                uint64_t v512 = v49[19];
                uint64_t v513 = *(uint64_t **)(v50 + 24);
                uint64_t v514 = *v513;
                uint64_t v515 = v513[1];
                unint64_t v516 = *(uint64_t **)(v137 + 24);
                uint64_t v517 = *v516;
                uint64_t v518 = v516[1];
                int v519 = v51[1];
                int v520 = v519;
                do
                {
                  if (v520)
                  {
                    unint64_t v521 = 0;
                    uint64_t v522 = v513[2];
                    uint64_t v523 = v516[2];
                    int v524 = v51[2];
                    int v525 = v524;
                    do
                    {
                      if (v525)
                      {
                        unint64_t v526 = 0;
                        uint64_t v527 = v513[3];
                        uint64_t v528 = v516[3];
                        int v529 = v51[3];
                        do
                        {
                          if (v529)
                          {
                            for (unint64_t k = 0; k < v529; ++k)
                            {
                              *(_DWORD *)(v512 + 4 * v507 + 4 * k) = *(_DWORD *)(v510 + 4 * v509)
                                                                   / *(_DWORD *)(v511 + 4 * v508);
                              v509 += v527;
                              v508 += v528;
                              int v529 = v51[3];
                            }
                            uint64_t v531 = v529;
                            int v524 = v51[2];
                            v507 += k;
                          }
                          else
                          {
                            uint64_t v531 = 0;
                          }
                          uint64_t v509 = v509 + v522 - v531 * v527;
                          uint64_t v508 = v508 + v523 - v528 * v138[3];
                          ++v526;
                        }
                        while (v526 < v524);
                        uint64_t v532 = v524;
                        int v519 = v51[1];
                        int v525 = v524;
                      }
                      else
                      {
                        uint64_t v532 = 0;
                      }
                      uint64_t v509 = v509 + v515 - v532 * v522;
                      uint64_t v508 = v508 + v518 - v523 * v138[2];
                      ++v521;
                    }
                    while (v521 < v519);
                    uint64_t v533 = v519;
                    int v505 = *v51;
                    int v520 = v519;
                  }
                  else
                  {
                    uint64_t v533 = 0;
                  }
                  uint64_t v509 = v509 + v514 - v533 * v515;
                  uint64_t v508 = v508 + v517 - v518 * v138[1];
                  ++v506;
                }
                while (v506 < v505);
              }
              break;
            default:
              uint64_t v452 = v49[6];
              if (v452)
              {
                uint64_t v453 = v50;
                uint64_t v454 = 0;
                vDSP_Length v1610 = *(void *)(v137 + 152);
                vDSP_Length v1624 = *(void *)(v50 + 152);
                vDSP_Length v1597 = v49[19];
                do
                {
                  vDSP_Length v455 = __N;
                  if ((__N & 0x80000000) != 0)
                  {
                    LODWORD(v456) = 0;
                  }
                  else
                  {
                    uint64_t v456 = 0;
                    uint64_t v457 = *(void *)(v453 + 24);
                    int v458 = v454;
                    do
                    {
                      ldiv_t v459 = ldiv(v458, v51[v455]);
                      int v458 = v459.quot;
                      v456 += *(void *)(v457 + 8 * v455--) * v459.rem;
                    }
                    while (v455 != -1);
                  }
                  uint64_t v460 = v1647;
                  if ((v1647 & 0x80000000) != 0)
                  {
                    LODWORD(v461) = 0;
                  }
                  else
                  {
                    uint64_t v461 = 0;
                    uint64_t v462 = *(void *)(v137 + 24);
                    int v463 = v454;
                    do
                    {
                      ldiv_t v464 = ldiv(v463, v138[v460]);
                      int v463 = v464.quot;
                      v461 += *(void *)(v462 + 8 * v460--) * v464.rem;
                    }
                    while (v460 != -1);
                  }
                  *(_DWORD *)(v1597 + 4 * v454++) = *(_DWORD *)(v1624 + 4 * (int)v456)
                                                  / *(_DWORD *)(v1610 + 4 * (int)v461);
                }
                while (v454 != v452);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
          char v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v72 = *(_DWORD *)(*a2 + 160);
          if (v72 >= 1)
          {
            unsigned int v73 = *(unsigned char **)(*(void *)a3 + 152);
            char v74 = *(char **)(*a2 + 152);
            int v75 = **(char **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              int v77 = *v74++;
              *v73++ = v75 / v77;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          char v64 = *(void **)a3;
          uint64_t v65 = *a1;
          uint64_t v66 = *(int **)*a1;
          uint64_t v67 = (*(void *)(*a1 + 8) - (void)v66) >> 2;
          int v68 = v67 - 1;
          if ((int)v67 - 1 >= -1) {
            int v68 = -1;
          }
          int v69 = v68 + 1;
          int v70 = v67 + 1;
          break;
      }
      while (1)
      {
        unsigned int v71 = v70 - 2;
        if (v70 - 2 < 0) {
          break;
        }
        --v70;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v71) != *(void *)(v64[3] + 8 * v71)) {
          goto LABEL_122;
        }
      }
      int v70 = v69;
LABEL_122:
      unsigned int v145 = (int **)*a2;
      int v146 = *(int **)*a2;
      uint64_t v147 = (*(void *)(*a2 + 8) - (void)v146) >> 2;
      int v148 = v147 - 1;
      if ((int)v147 - 1 >= -1) {
        int v148 = -1;
      }
      int v149 = v148 + 1;
      int v150 = v147 + 1;
      while (1)
      {
        unsigned int v151 = v150 - 2;
        if (v150 - 2 < 0) {
          break;
        }
        --v150;
        if (*(void *)&v145[3][2 * v151] != *(void *)(v64[3] + 8 * v151)) {
          goto LABEL_168;
        }
      }
      int v150 = v149;
LABEL_168:
      int v182 = v67 + 1;
      while (1)
      {
        unsigned int v183 = v182 - 2;
        if (v182 - 2 < 0) {
          break;
        }
        --v182;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v183)) {
          goto LABEL_203;
        }
      }
      int v182 = v69;
LABEL_203:
      int v196 = v147 + 1;
      while (1)
      {
        int v197 = v196 - 2;
        if (v196 - 2 < 0) {
          break;
        }
        --v196;
        if (*(void *)&v145[3][2 * v197]) {
          goto LABEL_319;
        }
      }
      int v196 = v149;
LABEL_319:
      unint64_t v254 = (uint64_t)(v64[1] - *v64) >> 2;
      if (v70 <= v150) {
        int v255 = v150;
      }
      else {
        int v255 = v70;
      }
      if (v70 <= v196) {
        int v70 = v196;
      }
      if (v182 > v150) {
        int v150 = v182;
      }
      if (v254 > v150)
      {
        int v256 = 1;
      }
      else
      {
        int v150 = (uint64_t)(v64[1] - *v64) >> 2;
        int v256 = 4;
      }
      if (v254 > v70)
      {
        int v257 = 2;
      }
      else
      {
        int v70 = v150;
        int v257 = v256;
      }
      if (v254 > v255)
      {
        int v70 = v255;
        int v257 = 3;
      }
      if (!v70) {
        goto LABEL_345;
      }
      unint64_t v258 = *(void *)(v64[3] + 8 * (v70 - 1));
      if (v258 < 0x10) {
        goto LABEL_345;
      }
      switch(v257)
      {
        case 1:
          if (v70 == 2)
          {
            int v1330 = *v66;
            if (*v66)
            {
              unint64_t v1331 = 0;
              uint64_t v1332 = 0;
              uint64_t v1333 = 0;
              uint64_t v1334 = *(void *)(v65 + 152);
              uint64_t v1335 = v145[19];
              uint64_t v1336 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1337 = 0;
                  do
                  {
                    if ((int)v258 >= 1)
                    {
                      uint64_t v1338 = 0;
                      int v1339 = *(char *)(v1334 + v1333);
                      unsigned int v1340 = v258 + 1;
                      do
                      {
                        *(unsigned char *)(v1336 + v1338) = v1339 / *((char *)v1335 + v1332 + v1338);
                        --v1340;
                        ++v1338;
                      }
                      while (v1340 > 1);
                      uint64_t v65 = *a1;
                      unsigned int v145 = (int **)*a2;
                      uint64_t v66 = *(int **)*a1;
                    }
                    uint64_t v1341 = *(void **)(v65 + 24);
                    uint64_t v1342 = v1341[1];
                    v1333 += v1342;
                    v1332 += *((void *)v145[3] + 1);
                    v1336 += (int)v258;
                    ++v1337;
                    unint64_t v1343 = v66[1];
                  }
                  while (v1337 < v1343);
                  int v1330 = *v66;
                  int v146 = *v145;
                }
                else
                {
                  unint64_t v1343 = 0;
                  uint64_t v1341 = *(void **)(v65 + 24);
                  uint64_t v1342 = v1341[1];
                }
                uint64_t v1333 = *v1341 + v1333 - v1343 * v1342;
                uint64_t v1332 = *(void *)v145[3] + v1332 - *((void *)v145[3] + 1) * v146[1];
                ++v1331;
              }
              while (v1331 < v1330);
            }
          }
          else if (v70 == 1)
          {
            int v890 = *v66;
            if (*v66)
            {
              unint64_t v891 = 0;
              uint64_t v892 = 0;
              uint64_t v893 = 0;
              uint64_t v894 = *(void *)(v65 + 152);
              int v895 = v145[19];
              uint64_t v896 = v64[19];
              do
              {
                if ((int)v258 >= 1)
                {
                  uint64_t v897 = 0;
                  int v898 = *(char *)(v894 + v893);
                  unsigned int v899 = v258 + 1;
                  do
                  {
                    *(unsigned char *)(v896 + v897) = v898 / *((char *)v895 + v892 + v897);
                    --v899;
                    ++v897;
                  }
                  while (v899 > 1);
                  uint64_t v65 = *a1;
                  unsigned int v145 = (int **)*a2;
                  int v890 = **(_DWORD **)*a1;
                }
                v893 += **(void **)(v65 + 24);
                v892 += *(void *)v145[3];
                v896 += (int)v258;
                ++v891;
              }
              while (v891 < v890);
            }
          }
          else if (v64[6])
          {
            uint64_t v1675 = *(void *)(v64[3] + 8 * (v70 - 1));
            vDSP_Length __Nbb = 0;
            vDSP_Length v1607 = (vDSP_Length)v145[19];
            vDSP_Length v1619 = *(void *)(v65 + 152);
            vDSP_Length v1641 = (int)v258;
            unsigned int v1596 = v258 + 1;
            uint64_t v1344 = v64[19];
            do
            {
              uint64_t v1345 = *(void *)*a1;
              unint64_t v1346 = (unint64_t)(*(void *)(*a1 + 8) - v1345) >> 2;
              uint64_t v1347 = 0;
              uint64_t v1348 = (v1346 - 1);
              if ((int)v1346 - 1 >= 0)
              {
                uint64_t v1349 = *(void *)(*a1 + 24);
                int v1350 = __Nbb;
                do
                {
                  ldiv_t v1351 = ldiv(v1350, *(int *)(v1345 + 4 * v1348));
                  int v1350 = v1351.quot;
                  v1347 += *(void *)(v1349 + 8 * v1348--) * v1351.rem;
                }
                while (v1348 != -1);
              }
              uint64_t v1352 = *(void *)*a2;
              unint64_t v1353 = (unint64_t)(*(void *)(*a2 + 8) - v1352) >> 2;
              uint64_t v1354 = 0;
              uint64_t v1355 = (v1353 - 1);
              if ((int)v1353 - 1 >= 0)
              {
                uint64_t v1356 = *(void *)(*a2 + 24);
                int v1357 = __Nbb;
                do
                {
                  ldiv_t v1358 = ldiv(v1357, *(int *)(v1352 + 4 * v1355));
                  int v1357 = v1358.quot;
                  v1354 += *(void *)(v1356 + 8 * v1355--) * v1358.rem;
                }
                while (v1355 != -1);
              }
              if ((int)v1675 >= 1)
              {
                uint64_t v1359 = 0;
                int v1360 = *(char *)(v1619 + (int)v1347);
                unsigned int v1361 = v1596;
                do
                {
                  *(unsigned char *)(v1344 + v1359) = v1360 / *(char *)(v1607 + (int)v1354 + v1359);
                  --v1361;
                  ++v1359;
                }
                while (v1361 > 1);
                char v64 = *(void **)a3;
              }
              v1344 += v1641;
              __Nbb += v1641;
            }
            while (__Nbb < v64[6]);
          }
          break;
        case 2:
          if (v70 == 2)
          {
            int v1362 = *v66;
            if (*v66)
            {
              unint64_t v1363 = 0;
              uint64_t v1364 = 0;
              uint64_t v1365 = 0;
              uint64_t v1366 = *(void *)(v65 + 152);
              uint64_t v1367 = v145[19];
              vDSP_Length v1368 = (int)v258;
              uint64_t v1369 = (int *)v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1370 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(v1366 + v1365), 1, (int *)((char *)v1367 + v1364), v1369, 1, v1368);
                    uint64_t v65 = *a1;
                    uint64_t v1371 = *(void **)(*a1 + 24);
                    uint64_t v1372 = v1371[1];
                    v1365 += v1372;
                    unsigned int v145 = (int **)*a2;
                    int v1373 = *(int **)(*a2 + 24);
                    uint64_t v1374 = *((void *)v1373 + 1);
                    v1364 += v1374;
                    uint64_t v1369 = (int *)((char *)v1369 + v1368);
                    ++v1370;
                    uint64_t v66 = *(int **)*a1;
                    unint64_t v1375 = v66[1];
                  }
                  while (v1370 < v1375);
                  int v1362 = *v66;
                  int v146 = *v145;
                }
                else
                {
                  unint64_t v1375 = 0;
                  uint64_t v1371 = *(void **)(v65 + 24);
                  uint64_t v1372 = v1371[1];
                  int v1373 = v145[3];
                  uint64_t v1374 = *((void *)v1373 + 1);
                }
                uint64_t v1365 = *v1371 + v1365 - v1375 * v1372;
                uint64_t v1364 = *(void *)v1373 + v1364 - v1374 * v146[1];
                ++v1363;
              }
              while (v1363 < v1362);
            }
          }
          else if (v70 == 1)
          {
            if (*v66)
            {
              unint64_t v900 = 0;
              uint64_t v901 = 0;
              uint64_t v902 = 0;
              uint64_t v903 = *(void *)(v65 + 152);
              uint64_t v904 = v145[19];
              vDSP_Length v905 = (int)v258;
              uint64_t v906 = (int *)v64[19];
              do
              {
                vDSP_vsdivi((const int *)(v903 + v902), 1, (int *)((char *)v904 + v901), v906, 1, v905);
                v902 += **(void **)(*a1 + 24);
                v901 += **(void **)(*a2 + 24);
                uint64_t v906 = (int *)((char *)v906 + v905);
                ++v900;
              }
              while (v900 < **(int **)*a1);
            }
          }
          else if (v64[6])
          {
            unint64_t v1376 = 0;
            uint64_t v1676 = v145[19];
            vDSP_Length __Nbc = *(void *)(v65 + 152);
            vDSP_Length v1642 = (int)v258;
            uint64_t v1377 = (int *)v64[19];
            do
            {
              uint64_t v1378 = *(void *)*a1;
              unint64_t v1379 = (unint64_t)(*(void *)(*a1 + 8) - v1378) >> 2;
              uint64_t v1380 = 0;
              uint64_t v1381 = (v1379 - 1);
              if ((int)v1379 - 1 >= 0)
              {
                uint64_t v1382 = *(void *)(*a1 + 24);
                int v1383 = v1376;
                do
                {
                  ldiv_t v1384 = ldiv(v1383, *(int *)(v1378 + 4 * v1381));
                  int v1383 = v1384.quot;
                  v1380 += *(void *)(v1382 + 8 * v1381--) * v1384.rem;
                }
                while (v1381 != -1);
              }
              uint64_t v1385 = *(void *)*a2;
              unint64_t v1386 = (unint64_t)(*(void *)(*a2 + 8) - v1385) >> 2;
              uint64_t v1387 = 0;
              uint64_t v1388 = (v1386 - 1);
              if ((int)v1386 - 1 >= 0)
              {
                uint64_t v1389 = *(void *)(*a2 + 24);
                int v1390 = v1376;
                do
                {
                  ldiv_t v1391 = ldiv(v1390, *(int *)(v1385 + 4 * v1388));
                  int v1390 = v1391.quot;
                  v1387 += *(void *)(v1389 + 8 * v1388--) * v1391.rem;
                }
                while (v1388 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbc + (int)v1380), 1, (int *)((char *)v1676 + (int)v1387), v1377, 1, v1642);
              uint64_t v1377 = (int *)((char *)v1377 + v1642);
              v1376 += v1642;
            }
            while (v1376 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v70 == 2)
          {
            int v1046 = *v66;
            if (*v66)
            {
              unint64_t v1047 = 0;
              uint64_t v1048 = 0;
              uint64_t v1049 = 0;
              uint64_t v1050 = *(void *)(v65 + 152);
              uint64_t v1051 = v145[19];
              vDSP_Length v1052 = (int)v258;
              char v1053 = (int *)v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1054 = 0;
                  do
                  {
                    vDSP_vdivi((int *)((char *)v1051 + v1048), 1, (const int *)(v1050 + v1049), 1, v1053, 1, v1052);
                    uint64_t v65 = *a1;
                    int v1055 = *(void **)(*a1 + 24);
                    uint64_t v1056 = v1055[1];
                    v1049 += v1056;
                    unsigned int v145 = (int **)*a2;
                    uint64_t v1057 = *(int **)(*a2 + 24);
                    uint64_t v1058 = *((void *)v1057 + 1);
                    v1048 += v1058;
                    char v1053 = (int *)((char *)v1053 + v1052);
                    ++v1054;
                    uint64_t v66 = *(int **)*a1;
                    unint64_t v1059 = v66[1];
                  }
                  while (v1054 < v1059);
                  int v1046 = *v66;
                  int v146 = *v145;
                }
                else
                {
                  unint64_t v1059 = 0;
                  int v1055 = *(void **)(v65 + 24);
                  uint64_t v1056 = v1055[1];
                  uint64_t v1057 = v145[3];
                  uint64_t v1058 = *((void *)v1057 + 1);
                }
                uint64_t v1049 = *v1055 + v1049 - v1059 * v1056;
                uint64_t v1048 = *(void *)v1057 + v1048 - v1058 * v146[1];
                ++v1047;
              }
              while (v1047 < v1046);
            }
          }
          else if (v70 == 1)
          {
            if (*v66)
            {
              unint64_t v259 = 0;
              uint64_t v260 = 0;
              uint64_t v261 = 0;
              uint64_t v262 = *(void *)(v65 + 152);
              uint64_t v263 = v145[19];
              vDSP_Length v264 = (int)v258;
              int v265 = (int *)v64[19];
              do
              {
                vDSP_vdivi((int *)((char *)v263 + v260), 1, (const int *)(v262 + v261), 1, v265, 1, v264);
                v261 += **(void **)(*a1 + 24);
                v260 += **(void **)(*a2 + 24);
                int v265 = (int *)((char *)v265 + v264);
                ++v259;
              }
              while (v259 < **(int **)*a1);
            }
          }
          else if (v64[6])
          {
            unint64_t v1060 = 0;
            uint64_t v1660 = v145[19];
            __Nunint64_t m = *(void *)(v65 + 152);
            vDSP_Length v1632 = (int)v258;
            uint64_t v1061 = (int *)v64[19];
            do
            {
              uint64_t v1062 = *(void *)*a1;
              unint64_t v1063 = (unint64_t)(*(void *)(*a1 + 8) - v1062) >> 2;
              uint64_t v1064 = 0;
              uint64_t v1065 = (v1063 - 1);
              if ((int)v1063 - 1 >= 0)
              {
                uint64_t v1066 = *(void *)(*a1 + 24);
                int v1067 = v1060;
                do
                {
                  ldiv_t v1068 = ldiv(v1067, *(int *)(v1062 + 4 * v1065));
                  int v1067 = v1068.quot;
                  v1064 += *(void *)(v1066 + 8 * v1065--) * v1068.rem;
                }
                while (v1065 != -1);
              }
              uint64_t v1069 = *(void *)*a2;
              unint64_t v1070 = (unint64_t)(*(void *)(*a2 + 8) - v1069) >> 2;
              uint64_t v1071 = 0;
              uint64_t v1072 = (v1070 - 1);
              if ((int)v1070 - 1 >= 0)
              {
                uint64_t v1073 = *(void *)(*a2 + 24);
                int v1074 = v1060;
                do
                {
                  ldiv_t v1075 = ldiv(v1074, *(int *)(v1069 + 4 * v1072));
                  int v1074 = v1075.quot;
                  v1071 += *(void *)(v1073 + 8 * v1072--) * v1075.rem;
                }
                while (v1072 != -1);
              }
              vDSP_vdivi((int *)((char *)v1660 + (int)v1071), 1, (const int *)(__Nm + (int)v1064), 1, v1061, 1, v1632);
              uint64_t v1061 = (int *)((char *)v1061 + v1632);
              v1060 += v1632;
            }
            while (v1060 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_345:
          switch(v254)
          {
            case 1uLL:
              if (v64[6])
              {
                unint64_t v266 = 0;
                uint64_t v267 = 0;
                uint64_t v268 = 0;
                uint64_t v269 = *(void *)(v65 + 152);
                unsigned int v270 = v145[19];
                uint64_t v271 = v64[19];
                do
                {
                  *(unsigned char *)(v271 + v266) = *(char *)(v269 + v268) / *((char *)v270 + v267);
                  v268 += **(void **)(*a1 + 24);
                  v267 += **(void **)(*a2 + 24);
                  ++v266;
                }
                while (v266 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v550 = *v66;
              if (*v66)
              {
                unint64_t v551 = 0;
                uint64_t v552 = 0;
                uint64_t v553 = 0;
                uint64_t v554 = 0;
                uint64_t v555 = *(void *)(v65 + 152);
                uint64_t v556 = v145[19];
                uint64_t v557 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v558 = 0;
                    do
                    {
                      *(unsigned char *)(v557 + v552 + v558) = *(char *)(v555 + v554) / *((char *)v556 + v553);
                      uint64_t v65 = *a1;
                      uint64_t v559 = *(void **)(*a1 + 24);
                      uint64_t v560 = v559[1];
                      v554 += v560;
                      unsigned int v145 = (int **)*a2;
                      uint64_t v561 = *(int **)(*a2 + 24);
                      uint64_t v562 = *((void *)v561 + 1);
                      v553 += v562;
                      ++v558;
                      uint64_t v66 = *(int **)*a1;
                      unint64_t v563 = v66[1];
                    }
                    while (v558 < v563);
                    int v550 = *v66;
                    int v146 = *v145;
                    v552 += v558;
                  }
                  else
                  {
                    unint64_t v563 = 0;
                    uint64_t v559 = *(void **)(v65 + 24);
                    uint64_t v560 = v559[1];
                    uint64_t v561 = v145[3];
                    uint64_t v562 = *((void *)v561 + 1);
                  }
                  uint64_t v554 = *v559 + v554 - v563 * v560;
                  uint64_t v553 = *(void *)v561 + v553 - v562 * v146[1];
                  ++v551;
                }
                while (v551 < v550);
              }
              break;
            case 3uLL:
              int v564 = *v66;
              if (*v66)
              {
                unint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = 0;
                uint64_t v568 = 0;
                uint64_t v569 = *(void *)(v65 + 152);
                uint64_t v570 = v145[19];
                uint64_t v571 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v572 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v573 = 0;
                        do
                        {
                          *(unsigned char *)(v571 + v566 + v573) = *(char *)(v569 + v568) / *((char *)v570 + v567);
                          uint64_t v65 = *a1;
                          v574 = *(void **)(*a1 + 24);
                          uint64_t v575 = v574[2];
                          v568 += v575;
                          unsigned int v145 = (int **)*a2;
                          unint64_t v576 = *(int **)(*a2 + 24);
                          uint64_t v577 = *((void *)v576 + 2);
                          v567 += v577;
                          ++v573;
                          uint64_t v66 = *(int **)*a1;
                          unint64_t v578 = v66[2];
                        }
                        while (v573 < v578);
                        int v146 = *v145;
                        v566 += v573;
                      }
                      else
                      {
                        unint64_t v578 = 0;
                        v574 = *(void **)(v65 + 24);
                        uint64_t v575 = v574[2];
                        unint64_t v576 = v145[3];
                        uint64_t v577 = *((void *)v576 + 2);
                      }
                      uint64_t v579 = v574[1];
                      uint64_t v568 = v579 + v568 - v578 * v575;
                      uint64_t v567 = *((void *)v576 + 1) + v567 - v577 * v146[2];
                      ++v572;
                      unint64_t v580 = v66[1];
                    }
                    while (v572 < v580);
                    int v564 = *v66;
                  }
                  else
                  {
                    unint64_t v580 = 0;
                    v574 = *(void **)(v65 + 24);
                    uint64_t v579 = v574[1];
                  }
                  uint64_t v568 = *v574 + v568 - v580 * v579;
                  uint64_t v567 = *(void *)v145[3] + v567 - *((void *)v145[3] + 1) * v146[1];
                  ++v565;
                }
                while (v565 < v564);
              }
              break;
            case 4uLL:
              int v581 = *v66;
              if (*v66)
              {
                unint64_t v582 = 0;
                uint64_t v583 = 0;
                uint64_t v584 = 0;
                uint64_t v585 = 0;
                uint64_t v586 = *(void *)(v65 + 152);
                int v587 = v145[19];
                uint64_t v588 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v589 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v590 = 0;
                        do
                        {
                          if (v66[3])
                          {
                            unint64_t v591 = 0;
                            do
                            {
                              *(unsigned char *)(v588 + v583 + v591) = *(char *)(v586 + v585) / *((char *)v587 + v584);
                              uint64_t v65 = *a1;
                              int v592 = *(void **)(*a1 + 24);
                              uint64_t v593 = v592[3];
                              v585 += v593;
                              unsigned int v145 = (int **)*a2;
                              int v594 = *(int **)(*a2 + 24);
                              uint64_t v595 = *((void *)v594 + 3);
                              v584 += v595;
                              ++v591;
                              uint64_t v66 = *(int **)*a1;
                              unint64_t v596 = v66[3];
                            }
                            while (v591 < v596);
                            int v146 = *v145;
                            v583 += v591;
                          }
                          else
                          {
                            unint64_t v596 = 0;
                            int v592 = *(void **)(v65 + 24);
                            uint64_t v593 = v592[3];
                            int v594 = v145[3];
                            uint64_t v595 = *((void *)v594 + 3);
                          }
                          uint64_t v597 = v592[2];
                          uint64_t v585 = v597 + v585 - v596 * v593;
                          uint64_t v584 = *((void *)v594 + 2) + v584 - v595 * v146[3];
                          ++v590;
                          unint64_t v598 = v66[2];
                        }
                        while (v590 < v598);
                      }
                      else
                      {
                        unint64_t v598 = 0;
                        int v592 = *(void **)(v65 + 24);
                        uint64_t v597 = v592[2];
                      }
                      uint64_t v585 = v592[1] + v585 - v598 * v597;
                      uint64_t v584 = *((void *)v145[3] + 1) + v584 - *((void *)v145[3] + 2) * v146[2];
                      ++v589;
                      unint64_t v599 = v66[1];
                    }
                    while (v589 < v599);
                    int v581 = *v66;
                  }
                  else
                  {
                    unint64_t v599 = 0;
                  }
                  uint64_t v585 = **(void **)(v65 + 24) + v585 - *(void *)(*(void *)(v65 + 24) + 8) * v599;
                  uint64_t v584 = *(void *)v145[3] + v584 - *((void *)v145[3] + 1) * v146[1];
                  ++v582;
                }
                while (v582 < v581);
              }
              break;
            default:
              if (v64[6])
              {
                unint64_t v534 = 0;
                ldiv_t v1652 = v145[19];
                vDSP_Length __Ne = *(void *)(v65 + 152);
                uint64_t v535 = v64[19];
                do
                {
                  uint64_t v536 = *(void *)*a1;
                  unint64_t v537 = (unint64_t)(*(void *)(*a1 + 8) - v536) >> 2;
                  uint64_t v538 = 0;
                  uint64_t v539 = (v537 - 1);
                  if ((int)v537 - 1 >= 0)
                  {
                    uint64_t v540 = *(void *)(*a1 + 24);
                    int v541 = v534;
                    do
                    {
                      ldiv_t v542 = ldiv(v541, *(int *)(v536 + 4 * v539));
                      int v541 = v542.quot;
                      v538 += *(void *)(v540 + 8 * v539--) * v542.rem;
                    }
                    while (v539 != -1);
                  }
                  uint64_t v543 = *(void *)*a2;
                  unint64_t v544 = (unint64_t)(*(void *)(*a2 + 8) - v543) >> 2;
                  uint64_t v545 = 0;
                  uint64_t v546 = (v544 - 1);
                  if ((int)v544 - 1 >= 0)
                  {
                    uint64_t v547 = *(void *)(*a2 + 24);
                    int v548 = v534;
                    do
                    {
                      ldiv_t v549 = ldiv(v548, *(int *)(v543 + 4 * v546));
                      int v548 = v549.quot;
                      v545 += *(void *)(v547 + 8 * v546--) * v549.rem;
                    }
                    while (v546 != -1);
                  }
                  *(unsigned char *)(v535 + v534++) = *(char *)(__Ne + (int)v538) / *((char *)v1652 + (int)v545);
                }
                while (v534 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
          int v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(void *)a3 + 152) = v10;
          return;
        case 1:
          int v87 = *(_DWORD *)(*a2 + 160);
          if (v87 >= 1)
          {
            int v88 = **(_DWORD **)(*a1 + 152);
            int v89 = *(int **)(*(void *)a3 + 152);
            unsigned int v90 = *(int **)(*a2 + 152);
            unsigned int v91 = v87 + 1;
            do
            {
              int v92 = *v90++;
              *v89++ = v88 / v92;
              --v91;
            }
            while (v91 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v78 = *(void **)a3;
          uint64_t v79 = *a1;
          uint64_t v80 = *(int **)*a1;
          uint64_t v81 = (*(void *)(*a1 + 8) - (void)v80) >> 2;
          vDSP_Length v82 = (v81 - 1);
          if ((int)v82 >= -1) {
            int v83 = -1;
          }
          else {
            int v83 = v81 - 1;
          }
          int v84 = v83 + 1;
          int v85 = v81 + 1;
          break;
      }
      while (1)
      {
        unsigned int v86 = v85 - 2;
        if (v85 - 2 < 0) {
          break;
        }
        --v85;
        if (*(void *)(*(void *)(v79 + 24) + 8 * v86) != *(void *)(v78[3] + 8 * v86)) {
          goto LABEL_129;
        }
      }
      int v85 = v84;
LABEL_129:
      uint64_t v152 = *a2;
      unsigned int v153 = *(int **)*a2;
      uint64_t v154 = (*(void *)(*a2 + 8) - (void)v153) >> 2;
      uint64_t v155 = (v154 - 1);
      if ((int)v155 >= -1) {
        int v156 = -1;
      }
      else {
        int v156 = v154 - 1;
      }
      int v157 = v156 + 1;
      int v158 = v154 + 1;
      while (1)
      {
        unsigned int v159 = v158 - 2;
        if (v158 - 2 < 0) {
          break;
        }
        --v158;
        if (*(void *)(*(void *)(v152 + 24) + 8 * v159) != *(void *)(v78[3] + 8 * v159)) {
          goto LABEL_173;
        }
      }
      int v158 = v157;
LABEL_173:
      int v184 = v81 + 1;
      while (1)
      {
        unsigned int v185 = v184 - 2;
        if (v184 - 2 < 0) {
          break;
        }
        --v184;
        if (*(void *)(*(void *)(v79 + 24) + 8 * v185)) {
          goto LABEL_208;
        }
      }
      int v184 = v84;
LABEL_208:
      int v198 = v154 + 1;
      while (1)
      {
        unsigned int v199 = v198 - 2;
        if (v198 - 2 < 0) {
          break;
        }
        --v198;
        if (*(void *)(*(void *)(v152 + 24) + 8 * v199)) {
          goto LABEL_351;
        }
      }
      int v198 = v157;
LABEL_351:
      unint64_t v272 = (uint64_t)(v78[1] - *v78) >> 2;
      if (v85 <= v158) {
        int v273 = v158;
      }
      else {
        int v273 = v85;
      }
      if (v85 <= v198) {
        int v85 = v198;
      }
      if (v184 > v158) {
        int v158 = v184;
      }
      if (v272 > v158)
      {
        int v274 = 1;
      }
      else
      {
        int v158 = (uint64_t)(v78[1] - *v78) >> 2;
        int v274 = 4;
      }
      if (v272 > v85)
      {
        int v275 = 2;
      }
      else
      {
        int v85 = v158;
        int v275 = v274;
      }
      if (v272 > v273)
      {
        int v85 = v273;
        int v275 = 3;
      }
      uint64_t v1648 = v155;
      vDSP_Length __Na = v82;
      if (!v85 || *(void *)(v78[3] + 8 * (v85 - 1)) < 0x10uLL) {
        goto LABEL_377;
      }
      vDSP_Length v1623 = *(void *)(v78[3] + 8 * (v85 - 1));
      switch(v275)
      {
        case 1:
          if (v85 == 2)
          {
            int v1392 = *v80;
            if (*v80)
            {
              unint64_t v1393 = 0;
              uint64_t v1394 = 0;
              uint64_t v1395 = 0;
              uint64_t v1396 = *(void *)(v79 + 152);
              uint64_t v1397 = *(void *)(v152 + 152);
              uint64_t v1398 = v78[19];
              uint64_t v1399 = *(uint64_t **)(v79 + 24);
              uint64_t v1400 = *v1399;
              uint64_t v1401 = v1399[1];
              uint64_t v1402 = *(uint64_t **)(v152 + 24);
              uint64_t v1403 = *v1402;
              uint64_t v1404 = v1402[1];
              int v1405 = v80[1];
              int v1406 = v1405;
              do
              {
                if (v1406)
                {
                  unint64_t v1407 = 0;
                  uint64_t v1408 = v1397 + 4 * v1394;
                  do
                  {
                    if ((int)v1623 >= 1)
                    {
                      uint64_t v1409 = 0;
                      int v1410 = *(_DWORD *)(v1396 + 4 * v1395);
                      unsigned int v1411 = v1623 + 1;
                      do
                      {
                        *(_DWORD *)(v1398 + v1409) = v1410 / *(_DWORD *)(v1408 + v1409);
                        --v1411;
                        v1409 += 4;
                      }
                      while (v1411 > 1);
                      int v1405 = v80[1];
                    }
                    v1395 += v1401;
                    v1394 += v1404;
                    v1398 += 4 * (int)v1623;
                    ++v1407;
                    v1408 += 4 * v1404;
                  }
                  while (v1407 < v1405);
                  uint64_t v1412 = v1405;
                  int v1392 = *v80;
                  int v1406 = v1405;
                }
                else
                {
                  uint64_t v1412 = 0;
                }
                uint64_t v1395 = v1395 + v1400 - v1412 * v1401;
                uint64_t v1394 = v1394 + v1403 - v1404 * v153[1];
                ++v1393;
              }
              while (v1393 < v1392);
            }
          }
          else
          {
            uint64_t v1594 = *a2;
            vDSP_Length v1603 = *a1;
            if (v85 == 1)
            {
              int v907 = *v80;
              if (*v80)
              {
                unint64_t v908 = 0;
                uint64_t v909 = 0;
                uint64_t v910 = *(void *)(v79 + 152);
                uint64_t v911 = *(void *)(v152 + 152);
                uint64_t v912 = v78[19];
                uint64_t v913 = **(void **)(v79 + 24);
                uint64_t v914 = 4 * **(void **)(v152 + 24);
                do
                {
                  if ((int)v1623 >= 1)
                  {
                    uint64_t v915 = 0;
                    int v916 = *(_DWORD *)(v910 + 4 * v909);
                    unsigned int v917 = v1623 + 1;
                    do
                    {
                      *(_DWORD *)(v912 + v915) = v916 / *(_DWORD *)(v911 + v915);
                      --v917;
                      v915 += 4;
                    }
                    while (v917 > 1);
                    int v907 = *v80;
                  }
                  v909 += v913;
                  ++v908;
                  v912 += 4 * (int)v1623;
                  v911 += v914;
                }
                while (v908 < v907);
              }
            }
            else if (v78[6])
            {
              unint64_t v1413 = v78[6];
              unint64_t v1414 = 0;
              uint64_t v1585 = *(void *)(v1594 + 152);
              uint64_t v1589 = *(void *)(v79 + 152);
              uint64_t v1415 = v78[19];
              do
              {
                vDSP_Length v1416 = __Na;
                if ((__Na & 0x80000000) != 0)
                {
                  LODWORD(v1417) = 0;
                }
                else
                {
                  uint64_t v1417 = 0;
                  uint64_t v1418 = *(void *)(v1603 + 24);
                  int v1419 = v1414;
                  do
                  {
                    ldiv_t v1420 = ldiv(v1419, v80[v1416]);
                    int v1419 = v1420.quot;
                    v1417 += *(void *)(v1418 + 8 * v1416--) * v1420.rem;
                  }
                  while (v1416 != -1);
                }
                uint64_t v1421 = v1648;
                if ((v1648 & 0x80000000) != 0)
                {
                  LODWORD(v1422) = 0;
                }
                else
                {
                  uint64_t v1422 = 0;
                  uint64_t v1423 = *(void *)(v1594 + 24);
                  int v1424 = v1414;
                  do
                  {
                    ldiv_t v1425 = ldiv(v1424, v153[v1421]);
                    int v1424 = v1425.quot;
                    v1422 += *(void *)(v1423 + 8 * v1421--) * v1425.rem;
                  }
                  while (v1421 != -1);
                }
                if ((int)v1623 >= 1)
                {
                  uint64_t v1426 = 0;
                  int v1427 = *(_DWORD *)(v1589 + 4 * (int)v1417);
                  unsigned int v1428 = v1623 + 1;
                  do
                  {
                    *(_DWORD *)(v1415 + v1426) = v1427 / *(_DWORD *)(v1585 + 4 * (int)v1422 + v1426);
                    --v1428;
                    v1426 += 4;
                  }
                  while (v1428 > 1);
                }
                v1414 += (int)v1623;
                v1415 += 4 * (int)v1623;
              }
              while (v1414 < v1413);
            }
          }
          break;
        case 2:
          if (v85 == 2)
          {
            int v1429 = *v80;
            if (*v80)
            {
              uint64_t v1430 = 0;
              uint64_t v1431 = 0;
              unint64_t v1677 = 0;
              vDSP_Length __Nbd = *(void *)(v79 + 152);
              char v1432 = (int *)v78[19];
              uint64_t v1433 = *(void *)(v152 + 152);
              do
              {
                if (v80[1])
                {
                  unint64_t v1434 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nbd + 4 * v1431), 1, (const int *)(v1433 + 4 * v1430), v1432, 1, (int)v1623);
                    uint64_t v79 = *a1;
                    uint64_t v1435 = *(void **)(*a1 + 24);
                    uint64_t v1436 = v1435[1];
                    v1431 += v1436;
                    uint64_t v1437 = *(void **)(*a2 + 24);
                    uint64_t v1438 = v1437[1];
                    v1430 += v1438;
                    ++v1434;
                    uint64_t v80 = *(int **)*a1;
                    unint64_t v1439 = v80[1];
                    v1432 += (int)v1623;
                  }
                  while (v1434 < v1439);
                  int v1429 = *v80;
                  uint64_t v152 = *a2;
                  unsigned int v153 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1439 = 0;
                  uint64_t v1435 = *(void **)(v79 + 24);
                  uint64_t v1436 = v1435[1];
                  uint64_t v1437 = *(void **)(v152 + 24);
                  uint64_t v1438 = v1437[1];
                }
                uint64_t v1431 = *v1435 + v1431 - v1439 * v1436;
                uint64_t v1430 = *v1437 + v1430 - v1438 * v153[1];
                ++v1677;
              }
              while (v1677 < v1429);
            }
          }
          else if (v85 == 1)
          {
            if (*v80)
            {
              unint64_t v918 = 0;
              uint64_t v919 = 0;
              uint64_t v920 = 0;
              uint64_t v921 = *(void *)(v79 + 152);
              uint64_t v922 = *(void *)(v152 + 152);
              uint64_t v923 = (int *)v78[19];
              do
              {
                vDSP_vsdivi((const int *)(v921 + 4 * v920), 1, (const int *)(v922 + 4 * v919), v923, 1, (int)v1623);
                v920 += **(void **)(*a1 + 24);
                v919 += **(void **)(*a2 + 24);
                ++v918;
                v923 += (int)v1623;
              }
              while (v918 < **(int **)*a1);
            }
          }
          else if (v78[6])
          {
            unint64_t v1440 = 0;
            uint64_t v1678 = *(void *)(v152 + 152);
            vDSP_Length __Nbe = *(void *)(v79 + 152);
            uint64_t v1441 = (int *)v78[19];
            do
            {
              uint64_t v1442 = *(void *)*a1;
              unint64_t v1443 = (unint64_t)(*(void *)(*a1 + 8) - v1442) >> 2;
              uint64_t v1444 = 0;
              uint64_t v1445 = (v1443 - 1);
              if ((int)v1443 - 1 >= 0)
              {
                uint64_t v1446 = *(void *)(*a1 + 24);
                int v1447 = v1440;
                do
                {
                  ldiv_t v1448 = ldiv(v1447, *(int *)(v1442 + 4 * v1445));
                  int v1447 = v1448.quot;
                  v1444 += *(void *)(v1446 + 8 * v1445--) * v1448.rem;
                }
                while (v1445 != -1);
              }
              uint64_t v1449 = *(void *)*a2;
              unint64_t v1450 = (unint64_t)(*(void *)(*a2 + 8) - v1449) >> 2;
              uint64_t v1451 = 0;
              uint64_t v1452 = (v1450 - 1);
              if ((int)v1450 - 1 >= 0)
              {
                uint64_t v1453 = *(void *)(*a2 + 24);
                int v1454 = v1440;
                do
                {
                  ldiv_t v1455 = ldiv(v1454, *(int *)(v1449 + 4 * v1452));
                  int v1454 = v1455.quot;
                  v1451 += *(void *)(v1453 + 8 * v1452--) * v1455.rem;
                }
                while (v1452 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbe + 4 * (int)v1444), 1, (const int *)(v1678 + 4 * (int)v1451), v1441, 1, (int)v1623);
              v1441 += (int)v1623;
              v1440 += (int)v1623;
            }
            while (v1440 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v85 == 2)
          {
            int v1076 = *v80;
            if (*v80)
            {
              uint64_t v1077 = 0;
              uint64_t v1078 = 0;
              unint64_t v1661 = 0;
              __Nunint64_t n = *(void *)(v79 + 152);
              uint64_t v1079 = (int *)v78[19];
              vDSP_Length v1617 = *(void *)(v152 + 152);
              do
              {
                if (v80[1])
                {
                  unint64_t v1080 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1617 + 4 * v1077), 1, (const int *)(__Nn + 4 * v1078), 1, v1079, 1, (int)v1623);
                    uint64_t v79 = *a1;
                    uint64_t v1081 = *(void **)(*a1 + 24);
                    uint64_t v1082 = v1081[1];
                    v1078 += v1082;
                    uint64_t v1083 = *(void **)(*a2 + 24);
                    uint64_t v1084 = v1083[1];
                    v1077 += v1084;
                    ++v1080;
                    uint64_t v80 = *(int **)*a1;
                    unint64_t v1085 = v80[1];
                    v1079 += (int)v1623;
                  }
                  while (v1080 < v1085);
                  int v1076 = *v80;
                  uint64_t v152 = *a2;
                  unsigned int v153 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1085 = 0;
                  uint64_t v1081 = *(void **)(v79 + 24);
                  uint64_t v1082 = v1081[1];
                  uint64_t v1083 = *(void **)(v152 + 24);
                  uint64_t v1084 = v1083[1];
                }
                uint64_t v1078 = *v1081 + v1078 - v1085 * v1082;
                uint64_t v1077 = *v1083 + v1077 - v1084 * v153[1];
                ++v1661;
              }
              while (v1661 < v1076);
            }
          }
          else if (v85 == 1)
          {
            if (*v80)
            {
              unint64_t v276 = 0;
              uint64_t v277 = 0;
              uint64_t v278 = 0;
              uint64_t v279 = *(void *)(v79 + 152);
              uint64_t v280 = *(void *)(v152 + 152);
              int v281 = (int *)v78[19];
              do
              {
                vDSP_vdivi((const int *)(v280 + 4 * v277), 1, (const int *)(v279 + 4 * v278), 1, v281, 1, (int)v1623);
                v278 += **(void **)(*a1 + 24);
                v277 += **(void **)(*a2 + 24);
                ++v276;
                v281 += (int)v1623;
              }
              while (v276 < **(int **)*a1);
            }
          }
          else if (v78[6])
          {
            unint64_t v1086 = 0;
            uint64_t v1662 = *(void *)(v152 + 152);
            vDSP_Length __No = *(void *)(v79 + 152);
            unsigned int v1087 = (int *)v78[19];
            do
            {
              uint64_t v1088 = *(void *)*a1;
              unint64_t v1089 = (unint64_t)(*(void *)(*a1 + 8) - v1088) >> 2;
              uint64_t v1090 = 0;
              uint64_t v1091 = (v1089 - 1);
              if ((int)v1089 - 1 >= 0)
              {
                uint64_t v1092 = *(void *)(*a1 + 24);
                int v1093 = v1086;
                do
                {
                  ldiv_t v1094 = ldiv(v1093, *(int *)(v1088 + 4 * v1091));
                  int v1093 = v1094.quot;
                  v1090 += *(void *)(v1092 + 8 * v1091--) * v1094.rem;
                }
                while (v1091 != -1);
              }
              uint64_t v1095 = *(void *)*a2;
              unint64_t v1096 = (unint64_t)(*(void *)(*a2 + 8) - v1095) >> 2;
              uint64_t v1097 = 0;
              uint64_t v1098 = (v1096 - 1);
              if ((int)v1096 - 1 >= 0)
              {
                uint64_t v1099 = *(void *)(*a2 + 24);
                int v1100 = v1086;
                do
                {
                  ldiv_t v1101 = ldiv(v1100, *(int *)(v1095 + 4 * v1098));
                  int v1100 = v1101.quot;
                  v1097 += *(void *)(v1099 + 8 * v1098--) * v1101.rem;
                }
                while (v1098 != -1);
              }
              vDSP_vdivi((const int *)(v1662 + 4 * (int)v1097), 1, (const int *)(__No + 4 * (int)v1090), 1, v1087, 1, (int)v1623);
              v1087 += (int)v1623;
              v1086 += (int)v1623;
            }
            while (v1086 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_377:
          switch(v272)
          {
            case 1uLL:
              uint64_t v282 = v78[6];
              if (v282)
              {
                int v283 = *(_DWORD **)(v79 + 152);
                unsigned int v284 = *(_DWORD **)(v152 + 152);
                int v285 = (int *)v78[19];
                uint64_t v286 = 4 * **(void **)(v152 + 24);
                uint64_t v287 = 4 * **(void **)(v79 + 24);
                do
                {
                  *v285++ = *v283 / *v284;
                  unsigned int v284 = (_DWORD *)((char *)v284 + v286);
                  int v283 = (_DWORD *)((char *)v283 + v287);
                  --v282;
                }
                while (v282);
              }
              break;
            case 2uLL:
              int v613 = *v80;
              if (*v80)
              {
                unint64_t v614 = 0;
                uint64_t v615 = 0;
                uint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = *(void *)(v79 + 152);
                uint64_t v619 = *(void *)(v152 + 152);
                uint64_t v620 = v78[19];
                uint64_t v621 = *(uint64_t **)(v79 + 24);
                uint64_t v622 = *v621;
                uint64_t v623 = v621[1];
                uint64_t v624 = *(uint64_t **)(v152 + 24);
                uint64_t v626 = *v624;
                uint64_t v625 = v624[1];
                int v627 = v80[1];
                do
                {
                  if (v627)
                  {
                    for (unint64_t m = 0; m < v627; ++m)
                    {
                      *(_DWORD *)(v620 + 4 * v615 + 4 * m) = *(_DWORD *)(v618 + 4 * v617) / *(_DWORD *)(v619 + 4 * v616);
                      v617 += v623;
                      v616 += v625;
                      int v627 = v80[1];
                    }
                    uint64_t v629 = v627;
                    int v613 = *v80;
                    v615 += m;
                  }
                  else
                  {
                    uint64_t v629 = 0;
                  }
                  uint64_t v617 = v617 + v622 - v629 * v623;
                  uint64_t v616 = v616 + v626 - v625 * v153[1];
                  ++v614;
                }
                while (v614 < v613);
              }
              break;
            case 3uLL:
              int v630 = *v80;
              if (*v80)
              {
                unint64_t v631 = 0;
                uint64_t v632 = 0;
                uint64_t v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = *(void *)(v79 + 152);
                uint64_t v636 = *(void *)(v152 + 152);
                uint64_t v637 = v78[19];
                uint64_t v638 = *(uint64_t **)(v79 + 24);
                uint64_t v639 = *v638;
                uint64_t v640 = v638[1];
                uint64_t v641 = *(uint64_t **)(v152 + 24);
                uint64_t v642 = *v641;
                uint64_t v643 = v641[1];
                int v644 = v80[1];
                int v645 = v644;
                do
                {
                  if (v645)
                  {
                    unint64_t v646 = 0;
                    uint64_t v647 = v638[2];
                    uint64_t v648 = v641[2];
                    int v649 = v80[2];
                    do
                    {
                      if (v649)
                      {
                        for (unint64_t n = 0; n < v649; ++n)
                        {
                          *(_DWORD *)(v637 + 4 * v632 + 4 * n) = *(_DWORD *)(v635 + 4 * v634)
                                                               / *(_DWORD *)(v636 + 4 * v633);
                          v634 += v647;
                          v633 += v648;
                          int v649 = v80[2];
                        }
                        uint64_t v651 = v649;
                        int v644 = v80[1];
                        v632 += n;
                      }
                      else
                      {
                        uint64_t v651 = 0;
                      }
                      uint64_t v634 = v634 + v640 - v651 * v647;
                      uint64_t v633 = v633 + v643 - v648 * v153[2];
                      ++v646;
                    }
                    while (v646 < v644);
                    uint64_t v652 = v644;
                    int v630 = *v80;
                    int v645 = v644;
                  }
                  else
                  {
                    uint64_t v652 = 0;
                  }
                  uint64_t v634 = v634 + v639 - v652 * v640;
                  uint64_t v633 = v633 + v642 - v643 * v153[1];
                  ++v631;
                }
                while (v631 < v630);
              }
              break;
            case 4uLL:
              int v653 = *v80;
              if (*v80)
              {
                unint64_t v654 = 0;
                uint64_t v655 = 0;
                uint64_t v656 = 0;
                uint64_t v657 = 0;
                uint64_t v658 = *(void *)(v79 + 152);
                uint64_t v659 = *(void *)(v152 + 152);
                uint64_t v660 = v78[19];
                uint64_t v661 = *(uint64_t **)(v79 + 24);
                uint64_t v662 = *v661;
                uint64_t v663 = v661[1];
                uint64_t v664 = *(uint64_t **)(v152 + 24);
                uint64_t v665 = *v664;
                uint64_t v666 = v664[1];
                int v667 = v80[1];
                int v668 = v667;
                do
                {
                  if (v668)
                  {
                    unint64_t v669 = 0;
                    uint64_t v670 = v661[2];
                    uint64_t v671 = v664[2];
                    int v672 = v80[2];
                    int v673 = v672;
                    do
                    {
                      if (v673)
                      {
                        unint64_t v674 = 0;
                        uint64_t v675 = v661[3];
                        uint64_t v676 = v664[3];
                        int v677 = v80[3];
                        do
                        {
                          if (v677)
                          {
                            for (iunint64_t i = 0; ii < v677; ++ii)
                            {
                              *(_DWORD *)(v660 + 4 * v655 + 4 * ii) = *(_DWORD *)(v658 + 4 * v657)
                                                                    / *(_DWORD *)(v659 + 4 * v656);
                              v657 += v675;
                              v656 += v676;
                              int v677 = v80[3];
                            }
                            uint64_t v679 = v677;
                            int v672 = v80[2];
                            v655 += ii;
                          }
                          else
                          {
                            uint64_t v679 = 0;
                          }
                          uint64_t v657 = v657 + v670 - v679 * v675;
                          uint64_t v656 = v656 + v671 - v676 * v153[3];
                          ++v674;
                        }
                        while (v674 < v672);
                        uint64_t v680 = v672;
                        int v667 = v80[1];
                        int v673 = v672;
                      }
                      else
                      {
                        uint64_t v680 = 0;
                      }
                      uint64_t v657 = v657 + v663 - v680 * v670;
                      uint64_t v656 = v656 + v666 - v671 * v153[2];
                      ++v669;
                    }
                    while (v669 < v667);
                    uint64_t v681 = v667;
                    int v653 = *v80;
                    int v668 = v667;
                  }
                  else
                  {
                    uint64_t v681 = 0;
                  }
                  uint64_t v657 = v657 + v662 - v681 * v663;
                  uint64_t v656 = v656 + v665 - v666 * v153[1];
                  ++v654;
                }
                while (v654 < v653);
              }
              break;
            default:
              uint64_t v600 = v78[6];
              if (v600)
              {
                uint64_t v601 = v79;
                uint64_t v602 = 0;
                vDSP_Length v1611 = *(void *)(v152 + 152);
                vDSP_Length v1625 = *(void *)(v79 + 152);
                vDSP_Length v1598 = v78[19];
                do
                {
                  vDSP_Length v603 = __Na;
                  if ((__Na & 0x80000000) != 0)
                  {
                    LODWORD(v604) = 0;
                  }
                  else
                  {
                    uint64_t v604 = 0;
                    uint64_t v605 = *(void *)(v601 + 24);
                    int v606 = v602;
                    do
                    {
                      ldiv_t v607 = ldiv(v606, v80[v603]);
                      int v606 = v607.quot;
                      v604 += *(void *)(v605 + 8 * v603--) * v607.rem;
                    }
                    while (v603 != -1);
                  }
                  uint64_t v608 = v1648;
                  if ((v1648 & 0x80000000) != 0)
                  {
                    LODWORD(v609) = 0;
                  }
                  else
                  {
                    uint64_t v609 = 0;
                    uint64_t v610 = *(void *)(v152 + 24);
                    int v611 = v602;
                    do
                    {
                      ldiv_t v612 = ldiv(v611, v153[v608]);
                      int v611 = v612.quot;
                      v609 += *(void *)(v610 + 8 * v608--) * v612.rem;
                    }
                    while (v608 != -1);
                  }
                  *(_DWORD *)(v1598 + 4 * v602++) = *(_DWORD *)(v1625 + 4 * (int)v604)
                                                  / *(_DWORD *)(v1611 + 4 * (int)v609);
                }
                while (v602 != v600);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          int v102 = *(_DWORD *)(*a2 + 160);
          if (v102 >= 1)
          {
            uint64_t v103 = **(void **)(*a1 + 152);
            int v104 = *(uint64_t **)(*(void *)a3 + 152);
            int v105 = *(uint64_t **)(*a2 + 152);
            unsigned int v106 = v102 + 1;
            do
            {
              uint64_t v107 = *v105++;
              *v104++ = v103 / v107;
              --v106;
            }
            while (v106 > 1);
          }
          return;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_21;
        default:
          uint64_t v93 = *(void **)a3;
          uint64_t v94 = *a1;
          int v95 = *(int **)*a1;
          uint64_t v96 = (*(void *)(*a1 + 8) - (void)v95) >> 2;
          vDSP_Length v97 = (v96 - 1);
          if ((int)v97 >= -1) {
            int v98 = -1;
          }
          else {
            int v98 = v96 - 1;
          }
          int v99 = v98 + 1;
          int v100 = v96 + 1;
          break;
      }
      while (1)
      {
        unsigned int v101 = v100 - 2;
        if (v100 - 2 < 0) {
          break;
        }
        --v100;
        if (*(void *)(*(void *)(v94 + 24) + 8 * v101) != *(void *)(v93[3] + 8 * v101)) {
          goto LABEL_137;
        }
      }
      int v100 = v99;
LABEL_137:
      uint64_t v160 = *a2;
      uint64_t v161 = *(int **)*a2;
      uint64_t v162 = (*(void *)(*a2 + 8) - (void)v161) >> 2;
      uint64_t v163 = (v162 - 1);
      if ((int)v163 >= -1) {
        int v164 = -1;
      }
      else {
        int v164 = v162 - 1;
      }
      int v165 = v164 + 1;
      int v166 = v162 + 1;
      while (1)
      {
        unsigned int v167 = v166 - 2;
        if (v166 - 2 < 0) {
          break;
        }
        --v166;
        if (*(void *)(*(void *)(v160 + 24) + 8 * v167) != *(void *)(v93[3] + 8 * v167)) {
          goto LABEL_178;
        }
      }
      int v166 = v165;
LABEL_178:
      int v186 = v96 + 1;
      while (1)
      {
        unsigned int v187 = v186 - 2;
        if (v186 - 2 < 0) {
          break;
        }
        --v186;
        if (*(void *)(*(void *)(v94 + 24) + 8 * v187)) {
          goto LABEL_213;
        }
      }
      int v186 = v99;
LABEL_213:
      int v200 = v162 + 1;
      while (1)
      {
        unsigned int v201 = v200 - 2;
        if (v200 - 2 < 0) {
          break;
        }
        --v200;
        if (*(void *)(*(void *)(v160 + 24) + 8 * v201)) {
          goto LABEL_383;
        }
      }
      int v200 = v165;
LABEL_383:
      unint64_t v288 = (uint64_t)(v93[1] - *v93) >> 2;
      if (v100 <= v166) {
        int v289 = v166;
      }
      else {
        int v289 = v100;
      }
      if (v100 <= v200) {
        int v100 = v200;
      }
      if (v186 > v166) {
        int v166 = v186;
      }
      if (v288 > v166)
      {
        int v290 = 1;
      }
      else
      {
        int v166 = (uint64_t)(v93[1] - *v93) >> 2;
        int v290 = 4;
      }
      if (v288 > v100)
      {
        int v291 = 2;
      }
      else
      {
        int v100 = v166;
        int v291 = v290;
      }
      if (v288 > v289)
      {
        int v100 = v289;
        int v291 = 3;
      }
      uint64_t v1649 = v163;
      vDSP_Length __Nb = v97;
      if (!v100) {
        goto LABEL_409;
      }
      unint64_t v292 = *(void *)(v93[3] + 8 * (v100 - 1));
      if (v292 < 0x10) {
        goto LABEL_409;
      }
      switch(v291)
      {
        case 1:
          if (v100 == 2)
          {
            uint64_t v1456 = *v95;
            if (v1456)
            {
              uint64_t v1457 = 0;
              uint64_t v1458 = 0;
              uint64_t v1459 = 0;
              uint64_t v1460 = *(void *)(v94 + 152);
              uint64_t v1461 = *(void *)(v160 + 152);
              uint64_t v1462 = v93[19];
              unint64_t v1463 = v95[1];
              char v1464 = *(uint64_t **)(v94 + 24);
              uint64_t v1465 = *v1464;
              uint64_t v1466 = v1464[1];
              uint64_t v1467 = *(uint64_t **)(v160 + 24);
              uint64_t v1468 = *v1467;
              uint64_t v1469 = v1467[1];
              if (v1463 <= 1) {
                uint64_t v1470 = 1;
              }
              else {
                uint64_t v1470 = v95[1];
              }
              uint64_t v1471 = v1465 - v1466 * v1463;
              uint64_t v1472 = v1468 - v1469 * v161[1];
              do
              {
                if (v1463)
                {
                  uint64_t v1473 = 0;
                  uint64_t v1474 = v1461 + 8 * v1458;
                  do
                  {
                    if ((int)v292 >= 1)
                    {
                      uint64_t v1475 = 0;
                      uint64_t v1476 = *(void *)(v1460 + 8 * v1459);
                      unsigned int v1477 = v292 + 1;
                      do
                      {
                        *(void *)(v1462 + v1475) = v1476 / *(void *)(v1474 + v1475);
                        --v1477;
                        v1475 += 8;
                      }
                      while (v1477 > 1);
                    }
                    v1459 += v1466;
                    v1458 += v1469;
                    v1462 += 8 * (int)v292;
                    ++v1473;
                    v1474 += 8 * v1469;
                  }
                  while (v1473 != v1470);
                }
                v1459 += v1471;
                v1458 += v1472;
                ++v1457;
              }
              while (v1457 != v1456);
            }
          }
          else
          {
            vDSP_Length v1604 = *a1;
            if (v100 == 1)
            {
              uint64_t v924 = *v95;
              if (v924)
              {
                uint64_t v925 = 0;
                uint64_t v926 = 0;
                uint64_t v927 = *(void *)(v94 + 152);
                uint64_t v928 = *(void *)(v160 + 152);
                uint64_t v929 = v93[19];
                uint64_t v930 = **(void **)(v94 + 24);
                uint64_t v931 = 8 * **(void **)(v160 + 24);
                do
                {
                  if ((int)v292 >= 1)
                  {
                    uint64_t v932 = 0;
                    uint64_t v933 = *(void *)(v927 + 8 * v926);
                    unsigned int v934 = v292 + 1;
                    do
                    {
                      *(void *)(v929 + v932) = v933 / *(void *)(v928 + v932);
                      --v934;
                      v932 += 8;
                    }
                    while (v934 > 1);
                  }
                  v926 += v930;
                  ++v925;
                  v929 += 8 * (int)v292;
                  v928 += v931;
                }
                while (v925 != v924);
              }
            }
            else
            {
              vDSP_Length v1643 = v93[6];
              if (v1643)
              {
                vDSP_Length v1478 = 0;
                uint64_t v1586 = *(void *)(v160 + 152);
                uint64_t v1590 = *(void *)(v94 + 152);
                uint64_t v1479 = v93[19];
                do
                {
                  vDSP_Length v1480 = __Nb;
                  if ((__Nb & 0x80000000) != 0)
                  {
                    LODWORD(v1481) = 0;
                  }
                  else
                  {
                    uint64_t v1481 = 0;
                    uint64_t v1482 = *(void *)(v1604 + 24);
                    int v1483 = v1478;
                    do
                    {
                      ldiv_t v1484 = ldiv(v1483, v95[v1480]);
                      int v1483 = v1484.quot;
                      v1481 += *(void *)(v1482 + 8 * v1480--) * v1484.rem;
                    }
                    while (v1480 != -1);
                  }
                  uint64_t v1485 = v1649;
                  if ((v1649 & 0x80000000) != 0)
                  {
                    LODWORD(v1486) = 0;
                  }
                  else
                  {
                    uint64_t v1486 = 0;
                    uint64_t v1487 = *(void *)(v160 + 24);
                    int v1488 = v1478;
                    do
                    {
                      ldiv_t v1489 = ldiv(v1488, v161[v1485]);
                      int v1488 = v1489.quot;
                      v1486 += *(void *)(v1487 + 8 * v1485--) * v1489.rem;
                    }
                    while (v1485 != -1);
                  }
                  if ((int)v292 >= 1)
                  {
                    uint64_t v1490 = 0;
                    uint64_t v1491 = *(void *)(v1590 + 8 * (int)v1481);
                    unsigned int v1492 = v292 + 1;
                    do
                    {
                      *(void *)(v1479 + v1490) = v1491 / *(void *)(v1586 + 8 * (int)v1486 + v1490);
                      --v1492;
                      v1490 += 8;
                    }
                    while (v1492 > 1);
                  }
                  v1479 += 8 * (int)v292;
                  v1478 += (int)v292;
                }
                while (v1478 < v1643);
              }
            }
          }
          break;
        case 2:
          if (v100 == 2)
          {
            int v1493 = *v95;
            if (*v95)
            {
              uint64_t v1494 = 0;
              uint64_t v1495 = 0;
              unint64_t v1679 = 0;
              vDSP_Length __Nbf = *(void *)(v94 + 152);
              uint64_t v1496 = (int *)v93[19];
              vDSP_Length v1608 = (int)v292;
              vDSP_Length v1620 = 8 * (int)v292;
              uint64_t v1497 = *(void *)(v160 + 152);
              do
              {
                if (v95[1])
                {
                  unint64_t v1498 = 0;
                  do
                  {
                    vDSP_vsdivi((const int *)(__Nbf + 8 * v1495), 1, (const int *)(v1497 + 8 * v1494), v1496, 1, v1608);
                    uint64_t v94 = *a1;
                    uint64_t v1499 = *(void **)(*a1 + 24);
                    uint64_t v1500 = v1499[1];
                    v1495 += v1500;
                    int v1501 = *(void **)(*a2 + 24);
                    uint64_t v1502 = v1501[1];
                    v1494 += v1502;
                    ++v1498;
                    int v95 = *(int **)*a1;
                    unint64_t v1503 = v95[1];
                    uint64_t v1496 = (int *)((char *)v1496 + v1620);
                  }
                  while (v1498 < v1503);
                  int v1493 = *v95;
                  uint64_t v160 = *a2;
                  uint64_t v161 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1503 = 0;
                  uint64_t v1499 = *(void **)(v94 + 24);
                  uint64_t v1500 = v1499[1];
                  int v1501 = *(void **)(v160 + 24);
                  uint64_t v1502 = v1501[1];
                }
                uint64_t v1495 = *v1499 + v1495 - v1503 * v1500;
                uint64_t v1494 = *v1501 + v1494 - v1502 * v161[1];
                ++v1679;
              }
              while (v1679 < v1493);
            }
          }
          else if (v100 == 1)
          {
            if (*v95)
            {
              unint64_t v935 = 0;
              uint64_t v936 = 0;
              uint64_t v937 = 0;
              uint64_t v938 = *(void *)(v94 + 152);
              uint64_t v939 = *(void *)(v160 + 152);
              vDSP_Length v940 = (int)v292;
              uint64_t v941 = 8 * (int)v292;
              uint64_t v942 = (int *)v93[19];
              do
              {
                vDSP_vsdivi((const int *)(v938 + 8 * v937), 1, (const int *)(v939 + 8 * v936), v942, 1, v940);
                v937 += **(void **)(*a1 + 24);
                v936 += **(void **)(*a2 + 24);
                ++v935;
                uint64_t v942 = (int *)((char *)v942 + v941);
              }
              while (v935 < **(int **)*a1);
            }
          }
          else if (v93[6])
          {
            unint64_t v1504 = 0;
            uint64_t v1680 = *(void *)(v160 + 152);
            vDSP_Length __Nbg = *(void *)(v94 + 152);
            vDSP_Length v1644 = (int)v292;
            int v1505 = (int *)v93[19];
            do
            {
              uint64_t v1506 = *(void *)*a1;
              unint64_t v1507 = (unint64_t)(*(void *)(*a1 + 8) - v1506) >> 2;
              uint64_t v1508 = 0;
              uint64_t v1509 = (v1507 - 1);
              if ((int)v1507 - 1 >= 0)
              {
                uint64_t v1510 = *(void *)(*a1 + 24);
                int v1511 = v1504;
                do
                {
                  ldiv_t v1512 = ldiv(v1511, *(int *)(v1506 + 4 * v1509));
                  int v1511 = v1512.quot;
                  v1508 += *(void *)(v1510 + 8 * v1509--) * v1512.rem;
                }
                while (v1509 != -1);
              }
              uint64_t v1513 = *(void *)*a2;
              unint64_t v1514 = (unint64_t)(*(void *)(*a2 + 8) - v1513) >> 2;
              uint64_t v1515 = 0;
              uint64_t v1516 = (v1514 - 1);
              if ((int)v1514 - 1 >= 0)
              {
                uint64_t v1517 = *(void *)(*a2 + 24);
                int v1518 = v1504;
                do
                {
                  ldiv_t v1519 = ldiv(v1518, *(int *)(v1513 + 4 * v1516));
                  int v1518 = v1519.quot;
                  v1515 += *(void *)(v1517 + 8 * v1516--) * v1519.rem;
                }
                while (v1516 != -1);
              }
              vDSP_vsdivi((const int *)(__Nbg + 8 * (int)v1508), 1, (const int *)(v1680 + 8 * (int)v1515), v1505, 1, v1644);
              v1505 += 2 * v1644;
              v1504 += v1644;
            }
            while (v1504 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v100 == 2)
          {
            int v1102 = *v95;
            if (*v95)
            {
              uint64_t v1103 = 0;
              uint64_t v1104 = 0;
              unint64_t v1663 = 0;
              vDSP_Length __Np = *(void *)(v94 + 152);
              uint64_t v1105 = (int *)v93[19];
              vDSP_Length v1633 = *(void *)(v160 + 152);
              vDSP_Length v1106 = (int)v292;
              uint64_t v1107 = 8 * (int)v292;
              do
              {
                if (v95[1])
                {
                  unint64_t v1108 = 0;
                  do
                  {
                    vDSP_vdivi((const int *)(v1633 + 8 * v1103), 1, (const int *)(__Np + 8 * v1104), 1, v1105, 1, v1106);
                    uint64_t v94 = *a1;
                    unsigned int v1109 = *(void **)(*a1 + 24);
                    uint64_t v1110 = v1109[1];
                    v1104 += v1110;
                    uint64_t v1111 = *(void **)(*a2 + 24);
                    uint64_t v1112 = v1111[1];
                    v1103 += v1112;
                    ++v1108;
                    int v95 = *(int **)*a1;
                    unint64_t v1113 = v95[1];
                    uint64_t v1105 = (int *)((char *)v1105 + v1107);
                  }
                  while (v1108 < v1113);
                  int v1102 = *v95;
                  uint64_t v160 = *a2;
                  uint64_t v161 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1113 = 0;
                  unsigned int v1109 = *(void **)(v94 + 24);
                  uint64_t v1110 = v1109[1];
                  uint64_t v1111 = *(void **)(v160 + 24);
                  uint64_t v1112 = v1111[1];
                }
                uint64_t v1104 = *v1109 + v1104 - v1113 * v1110;
                uint64_t v1103 = *v1111 + v1103 - v1112 * v161[1];
                ++v1663;
              }
              while (v1663 < v1102);
            }
          }
          else if (v100 == 1)
          {
            if (*v95)
            {
              unint64_t v293 = 0;
              uint64_t v294 = 0;
              uint64_t v295 = 0;
              uint64_t v296 = *(void *)(v94 + 152);
              uint64_t v297 = *(void *)(v160 + 152);
              vDSP_Length v298 = (int)v292;
              uint64_t v299 = 8 * (int)v292;
              int v300 = (int *)v93[19];
              do
              {
                vDSP_vdivi((const int *)(v297 + 8 * v294), 1, (const int *)(v296 + 8 * v295), 1, v300, 1, v298);
                v295 += **(void **)(*a1 + 24);
                v294 += **(void **)(*a2 + 24);
                ++v293;
                int v300 = (int *)((char *)v300 + v299);
              }
              while (v293 < **(int **)*a1);
            }
          }
          else if (v93[6])
          {
            unint64_t v1114 = 0;
            uint64_t v1664 = *(void *)(v160 + 152);
            vDSP_Length __Nq = *(void *)(v94 + 152);
            vDSP_Length v1634 = (int)v292;
            uint64_t v1115 = (int *)v93[19];
            do
            {
              uint64_t v1116 = *(void *)*a1;
              unint64_t v1117 = (unint64_t)(*(void *)(*a1 + 8) - v1116) >> 2;
              uint64_t v1118 = 0;
              uint64_t v1119 = (v1117 - 1);
              if ((int)v1117 - 1 >= 0)
              {
                uint64_t v1120 = *(void *)(*a1 + 24);
                int v1121 = v1114;
                do
                {
                  ldiv_t v1122 = ldiv(v1121, *(int *)(v1116 + 4 * v1119));
                  int v1121 = v1122.quot;
                  v1118 += *(void *)(v1120 + 8 * v1119--) * v1122.rem;
                }
                while (v1119 != -1);
              }
              uint64_t v1123 = *(void *)*a2;
              unint64_t v1124 = (unint64_t)(*(void *)(*a2 + 8) - v1123) >> 2;
              uint64_t v1125 = 0;
              uint64_t v1126 = (v1124 - 1);
              if ((int)v1124 - 1 >= 0)
              {
                uint64_t v1127 = *(void *)(*a2 + 24);
                int v1128 = v1114;
                do
                {
                  ldiv_t v1129 = ldiv(v1128, *(int *)(v1123 + 4 * v1126));
                  int v1128 = v1129.quot;
                  v1125 += *(void *)(v1127 + 8 * v1126--) * v1129.rem;
                }
                while (v1126 != -1);
              }
              vDSP_vdivi((const int *)(v1664 + 8 * (int)v1125), 1, (const int *)(__Nq + 8 * (int)v1118), 1, v1115, 1, v1634);
              v1115 += 2 * v1634;
              v1114 += v1634;
            }
            while (v1114 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_409:
          switch(v288)
          {
            case 1uLL:
              uint64_t v301 = v93[6];
              if (v301)
              {
                uint64_t v302 = *(void **)(v94 + 152);
                uint64_t v303 = *(uint64_t **)(v160 + 152);
                uint64_t v304 = (uint64_t *)v93[19];
                uint64_t v305 = 8 * **(void **)(v160 + 24);
                uint64_t v306 = 8 * **(void **)(v94 + 24);
                do
                {
                  *v304++ = *v302 / *v303;
                  uint64_t v303 = (uint64_t *)((char *)v303 + v305);
                  uint64_t v302 = (void *)((char *)v302 + v306);
                  --v301;
                }
                while (v301);
              }
              break;
            case 2uLL:
              uint64_t v695 = *v95;
              if (v695)
              {
                uint64_t v696 = 0;
                uint64_t v697 = 0;
                uint64_t v698 = 0;
                uint64_t v699 = 0;
                uint64_t v700 = *(void *)(v94 + 152);
                uint64_t v701 = *(void *)(v160 + 152);
                uint64_t v702 = v93[19];
                unint64_t v703 = v95[1];
                uint64_t v704 = *(uint64_t **)(v94 + 24);
                uint64_t v705 = *v704;
                uint64_t v706 = v704[1];
                unint64_t v707 = *(uint64_t **)(v160 + 24);
                uint64_t v708 = *v707;
                uint64_t v709 = v707[1];
                uint64_t v710 = v708 - v709 * v161[1];
                if (v703 <= 1) {
                  uint64_t v711 = 1;
                }
                else {
                  uint64_t v711 = v95[1];
                }
                uint64_t v712 = v705 - v706 * v703;
                do
                {
                  if (v703)
                  {
                    uint64_t v713 = v697 + v711;
                    uint64_t v714 = (uint64_t *)(v702 + 8 * v697);
                    uint64_t v715 = v711;
                    do
                    {
                      *v714++ = *(void *)(v700 + 8 * v699) / *(uint64_t *)(v701 + 8 * v698);
                      v699 += v706;
                      v698 += v709;
                      --v715;
                    }
                    while (v715);
                    uint64_t v697 = v713;
                  }
                  v699 += v712;
                  v698 += v710;
                  ++v696;
                }
                while (v696 != v695);
              }
              break;
            case 3uLL:
              uint64_t v716 = *v95;
              if (v716)
              {
                uint64_t v717 = 0;
                uint64_t v718 = 0;
                uint64_t v719 = 0;
                uint64_t v720 = 0;
                uint64_t v721 = *(void *)(v94 + 152);
                uint64_t v722 = *(void *)(v160 + 152);
                uint64_t v723 = v93[19];
                unint64_t v724 = v95[1];
                unint64_t v725 = *(void **)(v94 + 24);
                uint64_t v726 = v725[1];
                unint64_t v727 = *(void **)(v160 + 24);
                uint64_t v728 = v727[1];
                uint64_t v729 = *v727 - v728 * v161[1];
                if (v724 <= 1) {
                  uint64_t v730 = 1;
                }
                else {
                  uint64_t v730 = v95[1];
                }
                unint64_t v731 = *v725 - v726 * v724;
                do
                {
                  if (v724)
                  {
                    uint64_t v732 = 0;
                    unint64_t v733 = v95[2];
                    uint64_t v734 = v725[2];
                    uint64_t v735 = v727[2];
                    if (v733 <= 1) {
                      uint64_t v736 = 1;
                    }
                    else {
                      uint64_t v736 = v95[2];
                    }
                    uint64_t v737 = v728 - v735 * v161[2];
                    do
                    {
                      uint64_t v738 = v736;
                      if (v733)
                      {
                        do
                        {
                          *(void *)(v723 + 8 * v718++) = *(void *)(v721 + 8 * v720) / *(uint64_t *)(v722 + 8 * v719);
                          v720 += v734;
                          v719 += v735;
                          --v738;
                        }
                        while (v738);
                      }
                      v720 += v726 - v734 * v733;
                      v719 += v737;
                      ++v732;
                    }
                    while (v732 != v730);
                  }
                  v720 += v731;
                  v719 += v729;
                  ++v717;
                }
                while (v717 != v716);
              }
              break;
            case 4uLL:
              vDSP_Length __Nf = *v95;
              if (__Nf)
              {
                uint64_t v739 = 0;
                uint64_t v740 = 0;
                uint64_t v741 = 0;
                uint64_t v742 = 0;
                uint64_t v743 = *(void *)(v94 + 152);
                uint64_t v744 = *(void *)(v160 + 152);
                uint64_t v745 = v93[19];
                unint64_t v746 = v95[1];
                uint64_t v747 = *(void **)(v94 + 24);
                uint64_t v748 = *(void **)(v160 + 24);
                uint64_t v1592 = v748[1];
                vDSP_Length v1600 = v747[1];
                vDSP_Length v1627 = *v748 - v1592 * v161[1];
                int v1653 = v95[1];
                if (v746 <= 1) {
                  uint64_t v749 = 1;
                }
                else {
                  uint64_t v749 = v95[1];
                }
                vDSP_Length v1613 = *v747 - v747[1] * v746;
                do
                {
                  if (v1653)
                  {
                    uint64_t v750 = 0;
                    unint64_t v751 = v95[2];
                    uint64_t v752 = v747[2];
                    uint64_t v753 = v748[2];
                    if (v751 <= 1) {
                      uint64_t v754 = 1;
                    }
                    else {
                      uint64_t v754 = v95[2];
                    }
                    uint64_t v755 = v1592 - v753 * v161[2];
                    do
                    {
                      if (v751)
                      {
                        uint64_t v756 = 0;
                        unint64_t v757 = v95[3];
                        uint64_t v758 = v747[3];
                        uint64_t v759 = v748[3];
                        if (v757 <= 1) {
                          uint64_t v760 = 1;
                        }
                        else {
                          uint64_t v760 = v95[3];
                        }
                        uint64_t v761 = v753 - v759 * v161[3];
                        do
                        {
                          uint64_t v762 = v760;
                          if (v757)
                          {
                            do
                            {
                              *(void *)(v745 + 8 * v740++) = *(void *)(v743 + 8 * v742)
                                                             / *(uint64_t *)(v744 + 8 * v741);
                              v742 += v758;
                              v741 += v759;
                              --v762;
                            }
                            while (v762);
                          }
                          v742 += v752 - v758 * v757;
                          v741 += v761;
                          ++v756;
                        }
                        while (v756 != v754);
                      }
                      v742 += v1600 - v752 * v751;
                      v741 += v755;
                      ++v750;
                    }
                    while (v750 != v749);
                  }
                  v742 += v1613;
                  v741 += v1627;
                  ++v739;
                }
                while (v739 != __Nf);
              }
              break;
            default:
              uint64_t v682 = v93[6];
              if (v682)
              {
                uint64_t v683 = v94;
                uint64_t v684 = 0;
                vDSP_Length v1612 = *(void *)(v160 + 152);
                vDSP_Length v1626 = *(void *)(v94 + 152);
                vDSP_Length v1599 = v93[19];
                do
                {
                  vDSP_Length v685 = __Nb;
                  if ((__Nb & 0x80000000) != 0)
                  {
                    LODWORD(v686) = 0;
                  }
                  else
                  {
                    uint64_t v686 = 0;
                    uint64_t v687 = *(void *)(v683 + 24);
                    int v688 = v684;
                    do
                    {
                      ldiv_t v689 = ldiv(v688, v95[v685]);
                      int v688 = v689.quot;
                      v686 += *(void *)(v687 + 8 * v685--) * v689.rem;
                    }
                    while (v685 != -1);
                  }
                  uint64_t v690 = v1649;
                  if ((v1649 & 0x80000000) != 0)
                  {
                    LODWORD(v691) = 0;
                  }
                  else
                  {
                    uint64_t v691 = 0;
                    uint64_t v692 = *(void *)(v160 + 24);
                    int v693 = v684;
                    do
                    {
                      ldiv_t v694 = ldiv(v693, v161[v690]);
                      int v693 = v694.quot;
                      v691 += *(void *)(v692 + 8 * v690--) * v694.rem;
                    }
                    while (v690 != -1);
                  }
                  *(void *)(v1599 + 8 * v684++) = *(void *)(v1626 + 8 * (int)v686)
                                                  / *(uint64_t *)(v1612 + 8 * (int)v691);
                }
                while (v684 != v682);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
          int v117 = *(_DWORD *)(*a2 + 160);
          if (v117 >= 1)
          {
            float v118 = **(float **)(*a1 + 152);
            char v119 = *(float **)(*(void *)a3 + 152);
            int v120 = *(float **)(*a2 + 152);
            unsigned int v121 = v117 + 1;
            do
            {
              float v122 = *v120++;
              *v119++ = v118 / v122;
              --v121;
            }
            while (v121 > 1);
          }
          return;
        case 2:
LABEL_18:
          uint64_t v15 = *(const int **)(*a2 + 152);
          vDSP_Length v16 = *(int **)(*(void *)a3 + 152);
          int v17 = *(const int **)(*a1 + 152);
          vDSP_Length v18 = *(void *)(*a1 + 160);
          vDSP_vsdivi(v17, 1, v15, v16, 1, v18);
          return;
        case 3:
LABEL_21:
          vDSP_Length v19 = *(const int **)(*a1 + 152);
          unsigned int v20 = *(const int **)(*a2 + 152);
          int v21 = *(int **)(*(void *)a3 + 152);
          vDSP_Length v22 = *(void *)(*(void *)a3 + 48);
          vDSP_vdivi(v20, 1, v19, 1, v21, 1, v22);
          return;
        default:
          int v108 = *(void **)a3;
          uint64_t v109 = *a1;
          int v110 = *(int **)*a1;
          uint64_t v111 = (*(void *)(*a1 + 8) - (void)v110) >> 2;
          vDSP_Length v112 = (v111 - 1);
          if ((int)v112 >= -1) {
            int v113 = -1;
          }
          else {
            int v113 = v111 - 1;
          }
          int v114 = v113 + 1;
          int v115 = v111 + 1;
          while (1)
          {
            unsigned int v116 = v115 - 2;
            if (v115 - 2 < 0) {
              break;
            }
            --v115;
            if (*(void *)(*(void *)(v109 + 24) + 8 * v116) != *(void *)(v108[3] + 8 * v116)) {
              goto LABEL_145;
            }
          }
          int v115 = v114;
LABEL_145:
          uint64_t v168 = *a2;
          int v169 = *(int **)*a2;
          uint64_t v170 = (*(void *)(*a2 + 8) - (void)v169) >> 2;
          uint64_t v171 = (v170 - 1);
          if ((int)v171 >= -1) {
            int v172 = -1;
          }
          else {
            int v172 = v170 - 1;
          }
          int v173 = v172 + 1;
          int v174 = v170 + 1;
          while (1)
          {
            unsigned int v175 = v174 - 2;
            if (v174 - 2 < 0) {
              break;
            }
            --v174;
            if (*(void *)(*(void *)(v168 + 24) + 8 * v175) != *(void *)(v108[3] + 8 * v175)) {
              goto LABEL_183;
            }
          }
          int v174 = v173;
LABEL_183:
          int v188 = v111 + 1;
          while (1)
          {
            unsigned int v189 = v188 - 2;
            if (v188 - 2 < 0) {
              break;
            }
            --v188;
            if (*(void *)(*(void *)(v109 + 24) + 8 * v189)) {
              goto LABEL_218;
            }
          }
          int v188 = v114;
LABEL_218:
          int v202 = v170 + 1;
          while (1)
          {
            unsigned int v203 = v202 - 2;
            if (v202 - 2 < 0) {
              break;
            }
            --v202;
            if (*(void *)(*(void *)(v168 + 24) + 8 * v203)) {
              goto LABEL_415;
            }
          }
          int v202 = v173;
LABEL_415:
          unint64_t v307 = (uint64_t)(v108[1] - *v108) >> 2;
          if (v115 <= v174) {
            int v308 = v174;
          }
          else {
            int v308 = v115;
          }
          if (v115 <= v202) {
            int v115 = v202;
          }
          if (v188 > v174) {
            int v174 = v188;
          }
          if (v307 > v174)
          {
            int v309 = 1;
          }
          else
          {
            int v174 = (uint64_t)(v108[1] - *v108) >> 2;
            int v309 = 4;
          }
          if (v307 > v115)
          {
            int v310 = 2;
          }
          else
          {
            int v115 = v174;
            int v310 = v309;
          }
          if (v307 > v308)
          {
            int v115 = v308;
            int v310 = 3;
          }
          uint64_t v1650 = v171;
          vDSP_Length __Nc = v112;
          if (!v115) {
            goto LABEL_441;
          }
          unint64_t v311 = *(void *)(v108[3] + 8 * (v115 - 1));
          if (v311 < 0x10) {
            goto LABEL_441;
          }
          switch(v310)
          {
            case 1:
              if (v115 == 2)
              {
                uint64_t v1520 = *v110;
                if (v1520)
                {
                  uint64_t v1521 = 0;
                  uint64_t v1522 = 0;
                  uint64_t v1523 = 0;
                  uint64_t v1524 = *(void *)(v109 + 152);
                  uint64_t v1525 = *(void *)(v168 + 152);
                  uint64_t v1526 = v108[19];
                  unint64_t v1527 = v110[1];
                  uint64_t v1528 = *(uint64_t **)(v109 + 24);
                  uint64_t v1529 = *v1528;
                  uint64_t v1530 = v1528[1];
                  uint64_t v1531 = *(uint64_t **)(v168 + 24);
                  uint64_t v1532 = *v1531;
                  uint64_t v1533 = v1531[1];
                  if (v1527 <= 1) {
                    uint64_t v1534 = 1;
                  }
                  else {
                    uint64_t v1534 = v110[1];
                  }
                  uint64_t v1535 = v1529 - v1530 * v1527;
                  uint64_t v1536 = v1532 - v1533 * v169[1];
                  do
                  {
                    if (v1527)
                    {
                      uint64_t v1537 = 0;
                      uint64_t v1538 = v1525 + 4 * v1522;
                      do
                      {
                        if ((int)v311 >= 1)
                        {
                          uint64_t v1539 = 0;
                          float v1540 = *(float *)(v1524 + 4 * v1523);
                          unsigned int v1541 = v311 + 1;
                          do
                          {
                            *(float *)(v1526 + v1539) = v1540 / *(float *)(v1538 + v1539);
                            --v1541;
                            v1539 += 4;
                          }
                          while (v1541 > 1);
                        }
                        v1523 += v1530;
                        v1522 += v1533;
                        v1526 += 4 * (int)v311;
                        ++v1537;
                        v1538 += 4 * v1533;
                      }
                      while (v1537 != v1534);
                    }
                    v1523 += v1535;
                    v1522 += v1536;
                    ++v1521;
                  }
                  while (v1521 != v1520);
                }
              }
              else
              {
                vDSP_Length v1605 = *a1;
                if (v115 == 1)
                {
                  uint64_t v943 = *v110;
                  if (v943)
                  {
                    uint64_t v944 = 0;
                    uint64_t v945 = 0;
                    uint64_t v946 = *(void *)(v109 + 152);
                    uint64_t v947 = *(void *)(v168 + 152);
                    uint64_t v948 = v108[19];
                    uint64_t v949 = **(void **)(v109 + 24);
                    uint64_t v950 = 4 * **(void **)(v168 + 24);
                    do
                    {
                      if ((int)v311 >= 1)
                      {
                        uint64_t v951 = 0;
                        float v952 = *(float *)(v946 + 4 * v945);
                        unsigned int v953 = v311 + 1;
                        do
                        {
                          *(float *)(v948 + v951) = v952 / *(float *)(v947 + v951);
                          --v953;
                          v951 += 4;
                        }
                        while (v953 > 1);
                      }
                      v945 += v949;
                      ++v944;
                      v948 += 4 * (int)v311;
                      v947 += v950;
                    }
                    while (v944 != v943);
                  }
                }
                else
                {
                  vDSP_Length v1645 = v108[6];
                  if (v1645)
                  {
                    vDSP_Length v1542 = 0;
                    uint64_t v1587 = *(void *)(v168 + 152);
                    uint64_t v1591 = *(void *)(v109 + 152);
                    uint64_t v1543 = v108[19];
                    do
                    {
                      vDSP_Length v1544 = __Nc;
                      if ((__Nc & 0x80000000) != 0)
                      {
                        LODWORD(v1545) = 0;
                      }
                      else
                      {
                        uint64_t v1545 = 0;
                        uint64_t v1546 = *(void *)(v1605 + 24);
                        int v1547 = v1542;
                        do
                        {
                          ldiv_t v1548 = ldiv(v1547, v110[v1544]);
                          int v1547 = v1548.quot;
                          v1545 += *(void *)(v1546 + 8 * v1544--) * v1548.rem;
                        }
                        while (v1544 != -1);
                      }
                      uint64_t v1549 = v1650;
                      if ((v1650 & 0x80000000) != 0)
                      {
                        LODWORD(v1550) = 0;
                      }
                      else
                      {
                        uint64_t v1550 = 0;
                        uint64_t v1551 = *(void *)(v168 + 24);
                        int v1552 = v1542;
                        do
                        {
                          ldiv_t v1553 = ldiv(v1552, v169[v1549]);
                          int v1552 = v1553.quot;
                          v1550 += *(void *)(v1551 + 8 * v1549--) * v1553.rem;
                        }
                        while (v1549 != -1);
                      }
                      if ((int)v311 >= 1)
                      {
                        uint64_t v1554 = 0;
                        float v1555 = *(float *)(v1591 + 4 * (int)v1545);
                        unsigned int v1556 = v311 + 1;
                        do
                        {
                          *(float *)(v1543 + v1554) = v1555 / *(float *)(v1587 + 4 * (int)v1550 + v1554);
                          --v1556;
                          v1554 += 4;
                        }
                        while (v1556 > 1);
                      }
                      v1543 += 4 * (int)v311;
                      v1542 += (int)v311;
                    }
                    while (v1542 < v1645);
                  }
                }
              }
              break;
            case 2:
              if (v115 == 2)
              {
                int v1557 = *v110;
                if (*v110)
                {
                  uint64_t v1558 = 0;
                  uint64_t v1559 = 0;
                  unint64_t v1681 = 0;
                  vDSP_Length __Nbh = *(void *)(v109 + 152);
                  uint64_t v1560 = (int *)v108[19];
                  vDSP_Length v1609 = (int)v311;
                  vDSP_Length v1621 = 4 * (int)v311;
                  uint64_t v1561 = *(void *)(v168 + 152);
                  do
                  {
                    if (v110[1])
                    {
                      unint64_t v1562 = 0;
                      do
                      {
                        vDSP_vsdivi((const int *)(__Nbh + 4 * v1559), 1, (const int *)(v1561 + 4 * v1558), v1560, 1, v1609);
                        uint64_t v109 = *a1;
                        uint64_t v1563 = *(void **)(*a1 + 24);
                        uint64_t v1564 = v1563[1];
                        v1559 += v1564;
                        uint64_t v1565 = *(void **)(*a2 + 24);
                        uint64_t v1566 = v1565[1];
                        v1558 += v1566;
                        ++v1562;
                        int v110 = *(int **)*a1;
                        unint64_t v1567 = v110[1];
                        uint64_t v1560 = (int *)((char *)v1560 + v1621);
                      }
                      while (v1562 < v1567);
                      int v1557 = *v110;
                      uint64_t v168 = *a2;
                      int v169 = *(int **)*a2;
                    }
                    else
                    {
                      unint64_t v1567 = 0;
                      uint64_t v1563 = *(void **)(v109 + 24);
                      uint64_t v1564 = v1563[1];
                      uint64_t v1565 = *(void **)(v168 + 24);
                      uint64_t v1566 = v1565[1];
                    }
                    uint64_t v1559 = *v1563 + v1559 - v1567 * v1564;
                    uint64_t v1558 = *v1565 + v1558 - v1566 * v169[1];
                    ++v1681;
                  }
                  while (v1681 < v1557);
                }
              }
              else if (v115 == 1)
              {
                if (*v110)
                {
                  unint64_t v954 = 0;
                  uint64_t v955 = 0;
                  uint64_t v956 = 0;
                  uint64_t v957 = *(void *)(v109 + 152);
                  uint64_t v958 = *(void *)(v168 + 152);
                  vDSP_Length v959 = (int)v311;
                  uint64_t v960 = 4 * (int)v311;
                  uint64_t v961 = (int *)v108[19];
                  do
                  {
                    vDSP_vsdivi((const int *)(v957 + 4 * v956), 1, (const int *)(v958 + 4 * v955), v961, 1, v959);
                    v956 += **(void **)(*a1 + 24);
                    v955 += **(void **)(*a2 + 24);
                    ++v954;
                    uint64_t v961 = (int *)((char *)v961 + v960);
                  }
                  while (v954 < **(int **)*a1);
                }
              }
              else if (v108[6])
              {
                unint64_t v1568 = 0;
                uint64_t v1682 = *(void *)(v168 + 152);
                __Nbunint64_t i = *(void *)(v109 + 152);
                vDSP_Length v1646 = (int)v311;
                uint64_t v1569 = (int *)v108[19];
                do
                {
                  uint64_t v1570 = *(void *)*a1;
                  unint64_t v1571 = (unint64_t)(*(void *)(*a1 + 8) - v1570) >> 2;
                  uint64_t v1572 = 0;
                  uint64_t v1573 = (v1571 - 1);
                  if ((int)v1571 - 1 >= 0)
                  {
                    uint64_t v1574 = *(void *)(*a1 + 24);
                    int v1575 = v1568;
                    do
                    {
                      ldiv_t v1576 = ldiv(v1575, *(int *)(v1570 + 4 * v1573));
                      int v1575 = v1576.quot;
                      v1572 += *(void *)(v1574 + 8 * v1573--) * v1576.rem;
                    }
                    while (v1573 != -1);
                  }
                  uint64_t v1577 = *(void *)*a2;
                  unint64_t v1578 = (unint64_t)(*(void *)(*a2 + 8) - v1577) >> 2;
                  uint64_t v1579 = 0;
                  uint64_t v1580 = (v1578 - 1);
                  if ((int)v1578 - 1 >= 0)
                  {
                    uint64_t v1581 = *(void *)(*a2 + 24);
                    int v1582 = v1568;
                    do
                    {
                      ldiv_t v1583 = ldiv(v1582, *(int *)(v1577 + 4 * v1580));
                      int v1582 = v1583.quot;
                      v1579 += *(void *)(v1581 + 8 * v1580--) * v1583.rem;
                    }
                    while (v1580 != -1);
                  }
                  vDSP_vsdivi((const int *)(__Nbi + 4 * (int)v1572), 1, (const int *)(v1682 + 4 * (int)v1579), v1569, 1, v1646);
                  v1569 += v1646;
                  v1568 += v1646;
                }
                while (v1568 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 3:
              if (v115 == 2)
              {
                int v1130 = *v110;
                if (*v110)
                {
                  uint64_t v1131 = 0;
                  uint64_t v1132 = 0;
                  unint64_t v1665 = 0;
                  vDSP_Length __Nr = *(void *)(v109 + 152);
                  uint64_t v1133 = (int *)v108[19];
                  vDSP_Length v1635 = *(void *)(v168 + 152);
                  vDSP_Length v1134 = (int)v311;
                  uint64_t v1135 = 4 * (int)v311;
                  do
                  {
                    if (v110[1])
                    {
                      unint64_t v1136 = 0;
                      do
                      {
                        vDSP_vdivi((const int *)(v1635 + 4 * v1131), 1, (const int *)(__Nr + 4 * v1132), 1, v1133, 1, v1134);
                        uint64_t v109 = *a1;
                        uint64_t v1137 = *(void **)(*a1 + 24);
                        uint64_t v1138 = v1137[1];
                        v1132 += v1138;
                        uint64_t v1139 = *(void **)(*a2 + 24);
                        uint64_t v1140 = v1139[1];
                        v1131 += v1140;
                        ++v1136;
                        int v110 = *(int **)*a1;
                        unint64_t v1141 = v110[1];
                        uint64_t v1133 = (int *)((char *)v1133 + v1135);
                      }
                      while (v1136 < v1141);
                      int v1130 = *v110;
                      uint64_t v168 = *a2;
                      int v169 = *(int **)*a2;
                    }
                    else
                    {
                      unint64_t v1141 = 0;
                      uint64_t v1137 = *(void **)(v109 + 24);
                      uint64_t v1138 = v1137[1];
                      uint64_t v1139 = *(void **)(v168 + 24);
                      uint64_t v1140 = v1139[1];
                    }
                    uint64_t v1132 = *v1137 + v1132 - v1141 * v1138;
                    uint64_t v1131 = *v1139 + v1131 - v1140 * v169[1];
                    ++v1665;
                  }
                  while (v1665 < v1130);
                }
              }
              else if (v115 == 1)
              {
                if (*v110)
                {
                  unint64_t v312 = 0;
                  uint64_t v313 = 0;
                  uint64_t v314 = 0;
                  uint64_t v315 = *(void *)(v109 + 152);
                  uint64_t v316 = *(void *)(v168 + 152);
                  vDSP_Length v317 = (int)v311;
                  uint64_t v318 = 4 * (int)v311;
                  int v319 = (int *)v108[19];
                  do
                  {
                    vDSP_vdivi((const int *)(v316 + 4 * v313), 1, (const int *)(v315 + 4 * v314), 1, v319, 1, v317);
                    v314 += **(void **)(*a1 + 24);
                    v313 += **(void **)(*a2 + 24);
                    ++v312;
                    int v319 = (int *)((char *)v319 + v318);
                  }
                  while (v312 < **(int **)*a1);
                }
              }
              else if (v108[6])
              {
                unint64_t v1142 = 0;
                uint64_t v1666 = *(void *)(v168 + 152);
                vDSP_Length __Ns = *(void *)(v109 + 152);
                vDSP_Length v1636 = (int)v311;
                uint64_t v1143 = (int *)v108[19];
                do
                {
                  uint64_t v1144 = *(void *)*a1;
                  unint64_t v1145 = (unint64_t)(*(void *)(*a1 + 8) - v1144) >> 2;
                  uint64_t v1146 = 0;
                  uint64_t v1147 = (v1145 - 1);
                  if ((int)v1145 - 1 >= 0)
                  {
                    uint64_t v1148 = *(void *)(*a1 + 24);
                    int v1149 = v1142;
                    do
                    {
                      ldiv_t v1150 = ldiv(v1149, *(int *)(v1144 + 4 * v1147));
                      int v1149 = v1150.quot;
                      v1146 += *(void *)(v1148 + 8 * v1147--) * v1150.rem;
                    }
                    while (v1147 != -1);
                  }
                  uint64_t v1151 = *(void *)*a2;
                  unint64_t v1152 = (unint64_t)(*(void *)(*a2 + 8) - v1151) >> 2;
                  uint64_t v1153 = 0;
                  uint64_t v1154 = (v1152 - 1);
                  if ((int)v1152 - 1 >= 0)
                  {
                    uint64_t v1155 = *(void *)(*a2 + 24);
                    int v1156 = v1142;
                    do
                    {
                      ldiv_t v1157 = ldiv(v1156, *(int *)(v1151 + 4 * v1154));
                      int v1156 = v1157.quot;
                      v1153 += *(void *)(v1155 + 8 * v1154--) * v1157.rem;
                    }
                    while (v1154 != -1);
                  }
                  vDSP_vdivi((const int *)(v1666 + 4 * (int)v1153), 1, (const int *)(__Ns + 4 * (int)v1146), 1, v1143, 1, v1636);
                  v1143 += v1636;
                  v1142 += v1636;
                }
                while (v1142 < *(void *)(*(void *)a3 + 48));
              }
              break;
            default:
LABEL_441:
              switch(v307)
              {
                case 1uLL:
                  uint64_t v320 = v108[6];
                  if (v320)
                  {
                    unint64_t v321 = *(float **)(v109 + 152);
                    int v322 = *(float **)(v168 + 152);
                    unint64_t v323 = (float *)v108[19];
                    uint64_t v324 = 4 * **(void **)(v168 + 24);
                    uint64_t v325 = 4 * **(void **)(v109 + 24);
                    do
                    {
                      *v323++ = *v321 / *v322;
                      int v322 = (float *)((char *)v322 + v324);
                      unint64_t v321 = (float *)((char *)v321 + v325);
                      --v320;
                    }
                    while (v320);
                  }
                  break;
                case 2uLL:
                  uint64_t v776 = *v110;
                  if (v776)
                  {
                    uint64_t v777 = 0;
                    uint64_t v778 = 0;
                    uint64_t v779 = 0;
                    uint64_t v780 = 0;
                    uint64_t v781 = *(void *)(v109 + 152);
                    uint64_t v782 = *(void *)(v168 + 152);
                    uint64_t v783 = v108[19];
                    unint64_t v784 = v110[1];
                    uint64_t v785 = *(uint64_t **)(v109 + 24);
                    uint64_t v786 = *v785;
                    uint64_t v787 = v785[1];
                    uint64_t v788 = *(uint64_t **)(v168 + 24);
                    uint64_t v789 = *v788;
                    uint64_t v790 = v788[1];
                    uint64_t v791 = v789 - v790 * v169[1];
                    if (v784 <= 1) {
                      uint64_t v792 = 1;
                    }
                    else {
                      uint64_t v792 = v110[1];
                    }
                    uint64_t v793 = v786 - v787 * v784;
                    do
                    {
                      if (v784)
                      {
                        uint64_t v794 = v778 + v792;
                        int v795 = (float *)(v783 + 4 * v778);
                        uint64_t v796 = v792;
                        do
                        {
                          *v795++ = *(float *)(v781 + 4 * v780) / *(float *)(v782 + 4 * v779);
                          v780 += v787;
                          v779 += v790;
                          --v796;
                        }
                        while (v796);
                        uint64_t v778 = v794;
                      }
                      v780 += v793;
                      v779 += v791;
                      ++v777;
                    }
                    while (v777 != v776);
                  }
                  break;
                case 3uLL:
                  uint64_t v797 = *v110;
                  if (v797)
                  {
                    uint64_t v798 = 0;
                    uint64_t v799 = 0;
                    uint64_t v800 = 0;
                    uint64_t v801 = 0;
                    uint64_t v802 = *(void *)(v109 + 152);
                    uint64_t v803 = *(void *)(v168 + 152);
                    uint64_t v804 = v108[19];
                    unint64_t v805 = v110[1];
                    v806 = *(void **)(v109 + 24);
                    uint64_t v807 = v806[1];
                    uint64_t v808 = *(void **)(v168 + 24);
                    uint64_t v809 = v808[1];
                    uint64_t v810 = *v808 - v809 * v169[1];
                    if (v805 <= 1) {
                      uint64_t v811 = 1;
                    }
                    else {
                      uint64_t v811 = v110[1];
                    }
                    unint64_t v812 = *v806 - v807 * v805;
                    do
                    {
                      if (v805)
                      {
                        uint64_t v813 = 0;
                        unint64_t v814 = v110[2];
                        uint64_t v815 = v806[2];
                        uint64_t v816 = v808[2];
                        if (v814 <= 1) {
                          uint64_t v817 = 1;
                        }
                        else {
                          uint64_t v817 = v110[2];
                        }
                        uint64_t v818 = v809 - v816 * v169[2];
                        do
                        {
                          uint64_t v819 = v817;
                          if (v814)
                          {
                            do
                            {
                              *(float *)(v804 + 4 * v799++) = *(float *)(v802 + 4 * v801) / *(float *)(v803 + 4 * v800);
                              v801 += v815;
                              v800 += v816;
                              --v819;
                            }
                            while (v819);
                          }
                          v801 += v807 - v815 * v814;
                          v800 += v818;
                          ++v813;
                        }
                        while (v813 != v811);
                      }
                      v801 += v812;
                      v800 += v810;
                      ++v798;
                    }
                    while (v798 != v797);
                  }
                  break;
                case 4uLL:
                  vDSP_Length __Ng = *v110;
                  if (__Ng)
                  {
                    uint64_t v820 = 0;
                    uint64_t v821 = 0;
                    uint64_t v822 = 0;
                    uint64_t v823 = 0;
                    uint64_t v824 = *(void *)(v109 + 152);
                    uint64_t v825 = *(void *)(v168 + 152);
                    uint64_t v826 = v108[19];
                    unint64_t v827 = v110[1];
                    uint64_t v828 = *(void **)(v109 + 24);
                    uint64_t v829 = *(void **)(v168 + 24);
                    vDSP_Length v1615 = v829[1];
                    vDSP_Length v1629 = v828[1];
                    vDSP_Length v1654 = *v829 - v1615 * v169[1];
                    if (v827 <= 1) {
                      uint64_t v830 = 1;
                    }
                    else {
                      uint64_t v830 = v110[1];
                    }
                    unint64_t v831 = *v828 - v828[1] * v827;
                    do
                    {
                      if (v827)
                      {
                        uint64_t v832 = 0;
                        unint64_t v833 = v110[2];
                        uint64_t v834 = v828[2];
                        uint64_t v835 = v829[2];
                        if (v833 <= 1) {
                          uint64_t v836 = 1;
                        }
                        else {
                          uint64_t v836 = v110[2];
                        }
                        vDSP_Length v837 = v1615 - v835 * v169[2];
                        do
                        {
                          if (v833)
                          {
                            uint64_t v838 = 0;
                            unint64_t v839 = v110[3];
                            uint64_t v840 = v828[3];
                            uint64_t v841 = v829[3];
                            if (v839 <= 1) {
                              uint64_t v842 = 1;
                            }
                            else {
                              uint64_t v842 = v110[3];
                            }
                            uint64_t v843 = v835 - v841 * v169[3];
                            do
                            {
                              uint64_t v844 = v842;
                              if (v839)
                              {
                                do
                                {
                                  *(float *)(v826 + 4 * v821++) = *(float *)(v824 + 4 * v823)
                                                                / *(float *)(v825 + 4 * v822);
                                  v823 += v840;
                                  v822 += v841;
                                  --v844;
                                }
                                while (v844);
                              }
                              v823 += v834 - v840 * v839;
                              v822 += v843;
                              ++v838;
                            }
                            while (v838 != v836);
                          }
                          v823 += v1629 - v834 * v833;
                          v822 += v837;
                          ++v832;
                        }
                        while (v832 != v830);
                      }
                      v823 += v831;
                      v822 += v1654;
                      ++v820;
                    }
                    while (v820 != __Ng);
                  }
                  break;
                default:
                  uint64_t v763 = v108[6];
                  if (v763)
                  {
                    uint64_t v764 = v109;
                    uint64_t v765 = 0;
                    vDSP_Length v1614 = *(void *)(v168 + 152);
                    vDSP_Length v1628 = *(void *)(v109 + 152);
                    vDSP_Length v1601 = v108[19];
                    do
                    {
                      vDSP_Length v766 = __Nc;
                      if ((__Nc & 0x80000000) != 0)
                      {
                        LODWORD(v767) = 0;
                      }
                      else
                      {
                        uint64_t v767 = 0;
                        uint64_t v768 = *(void *)(v764 + 24);
                        int v769 = v765;
                        do
                        {
                          ldiv_t v770 = ldiv(v769, v110[v766]);
                          int v769 = v770.quot;
                          v767 += *(void *)(v768 + 8 * v766--) * v770.rem;
                        }
                        while (v766 != -1);
                      }
                      uint64_t v771 = v1650;
                      if ((v1650 & 0x80000000) != 0)
                      {
                        LODWORD(v772) = 0;
                      }
                      else
                      {
                        uint64_t v772 = 0;
                        uint64_t v773 = *(void *)(v168 + 24);
                        int v774 = v765;
                        do
                        {
                          ldiv_t v775 = ldiv(v774, v169[v771]);
                          int v774 = v775.quot;
                          v772 += *(void *)(v773 + 8 * v771--) * v775.rem;
                        }
                        while (v771 != -1);
                      }
                      *(float *)(v1601 + 4 * v765++) = *(float *)(v1628 + 4 * (int)v767)
                                                     / *(float *)(v1614 + 4 * (int)v772);
                    }
                    while (v765 != v763);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}