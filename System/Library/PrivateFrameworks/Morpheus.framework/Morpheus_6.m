void mlx::core::anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const float *v15;
  float *v16;
  const float *v17;
  vDSP_Length v18;
  const float *v19;
  float *v20;
  const float *v21;
  vDSP_Length v22;
  const float *v23;
  const float *v24;
  float *v25;
  vDSP_Length v26;
  void *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  vDSP_Length v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  vDSP_Length v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  vDSP_Length v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  void *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  vDSP_Length v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int **v95;
  int *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int **v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int **v110;
  int *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int **v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  int **v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int **v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unint64_t v169;
  int v170;
  int v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  vDSP_Length v179;
  float *v180;
  uint64_t v181;
  unsigned char *v182;
  unsigned char *v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int *v194;
  vDSP_Length v195;
  float *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  int v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  vDSP_Length v213;
  uint64_t v214;
  float *v215;
  uint64_t v216;
  _DWORD *v217;
  int *v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int *v231;
  vDSP_Length v232;
  float *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  uint64_t v239;
  unint64_t v240;
  int v241;
  int v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  vDSP_Length v250;
  uint64_t v251;
  float *v252;
  uint64_t v253;
  _DWORD *v254;
  int *v255;
  int *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int *v268;
  vDSP_Length v269;
  uint64_t v270;
  float *v271;
  uint64_t v272;
  void *v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  int v280;
  int v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int *v287;
  vDSP_Length v288;
  uint64_t v289;
  float *v290;
  uint64_t v291;
  float *v292;
  float *v293;
  float *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  ldiv_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  ldiv_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  ldiv_t v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  unint64_t v386;
  int v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  int *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  int v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  int *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  vDSP_Length v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  ldiv_t v428;
  uint64_t v429;
  int *v430;
  uint64_t v431;
  int v432;
  ldiv_t v433;
  int v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unint64_t i;
  uint64_t v450;
  int v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int *v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  int *v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  int v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  unint64_t j;
  uint64_t v472;
  uint64_t v473;
  int v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  int *v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  int v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  int v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  unint64_t k;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  ldiv_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  ldiv_t v518;
  int v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int *v525;
  uint64_t v526;
  unint64_t v527;
  void *v528;
  uint64_t v529;
  int *v530;
  uint64_t v531;
  unint64_t v532;
  int v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int *v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  void *v543;
  uint64_t v544;
  int *v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  unint64_t v549;
  int v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int *v556;
  uint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  int *v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t v569;
  vDSP_Length v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  ldiv_t v574;
  uint64_t v575;
  int *v576;
  uint64_t v577;
  int v578;
  ldiv_t v579;
  int v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int *v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  int *v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  unint64_t m;
  uint64_t v596;
  int v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int *v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  int *v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  int v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  unint64_t n;
  uint64_t v618;
  uint64_t v619;
  int v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int *v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  int *v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  int v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  int v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  unint64_t ii;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  vDSP_Length v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  ldiv_t v654;
  uint64_t v655;
  int *v656;
  uint64_t v657;
  int v658;
  ldiv_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int *v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t *v669;
  uint64_t v670;
  uint64_t v671;
  int *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int *v687;
  uint64_t v688;
  unint64_t v689;
  void *v690;
  uint64_t v691;
  int *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int *v709;
  uint64_t v710;
  unint64_t v711;
  void *v712;
  int *v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  vDSP_Length v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  ldiv_t v733;
  uint64_t v734;
  int *v735;
  uint64_t v736;
  int v737;
  ldiv_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int *v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t *v748;
  uint64_t v749;
  uint64_t v750;
  int *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  float *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  int *v766;
  uint64_t v767;
  unint64_t v768;
  void *v769;
  uint64_t v770;
  int *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int *v788;
  uint64_t v789;
  unint64_t v790;
  void *v791;
  int *v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  vDSP_Length v813;
  float *v814;
  unint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  vDSP_Length v820;
  float *v821;
  unint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int *v826;
  vDSP_Length v827;
  float *v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  int *v833;
  vDSP_Length v834;
  float *v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  int *v840;
  vDSP_Length v841;
  uint64_t v842;
  float *v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int *v848;
  vDSP_Length v849;
  uint64_t v850;
  float *v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int *v856;
  vDSP_Length v857;
  float *v858;
  unint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int *v863;
  vDSP_Length v864;
  float *v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int *v870;
  vDSP_Length v871;
  uint64_t v872;
  float *v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int *v878;
  vDSP_Length v879;
  uint64_t v880;
  float *v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int *v886;
  vDSP_Length v887;
  uint64_t v888;
  float *v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  int *v894;
  vDSP_Length v895;
  uint64_t v896;
  float *v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int *v902;
  vDSP_Length v903;
  uint64_t v904;
  float *v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int *v910;
  vDSP_Length v911;
  uint64_t v912;
  float *v913;
  int v914;
  uint64_t v915;
  uint64_t v916;
  float *v917;
  uint64_t v918;
  uint64_t v919;
  unint64_t v920;
  void *v921;
  uint64_t v922;
  void *v923;
  uint64_t v924;
  unint64_t v925;
  unint64_t v926;
  float *v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  ldiv_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  ldiv_t v941;
  int v942;
  unint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  int *v947;
  vDSP_Length v948;
  float *v949;
  unint64_t v950;
  void *v951;
  uint64_t v952;
  int *v953;
  uint64_t v954;
  unint64_t v955;
  unint64_t v956;
  float *v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  int v963;
  ldiv_t v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  int v970;
  ldiv_t v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  float *v975;
  uint64_t v976;
  unint64_t v977;
  void *v978;
  uint64_t v979;
  int *v980;
  uint64_t v981;
  unint64_t v982;
  unint64_t v983;
  float *v984;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  int v990;
  ldiv_t v991;
  uint64_t v992;
  unint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  int v997;
  ldiv_t v998;
  int v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  int *v1004;
  vDSP_Length v1005;
  float *v1006;
  unint64_t v1007;
  void *v1008;
  uint64_t v1009;
  int *v1010;
  uint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  float *v1014;
  uint64_t v1015;
  unint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  ldiv_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  int v1027;
  ldiv_t v1028;
  int v1029;
  uint64_t v1030;
  uint64_t v1031;
  float *v1032;
  uint64_t v1033;
  unint64_t v1034;
  void *v1035;
  uint64_t v1036;
  int *v1037;
  uint64_t v1038;
  unint64_t v1039;
  unint64_t v1040;
  float *v1041;
  uint64_t v1042;
  unint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  int v1047;
  ldiv_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  int v1054;
  ldiv_t v1055;
  int v1056;
  uint64_t v1057;
  uint64_t v1058;
  float *v1059;
  uint64_t v1060;
  unint64_t v1061;
  void *v1062;
  uint64_t v1063;
  int *v1064;
  uint64_t v1065;
  unint64_t v1066;
  unint64_t v1067;
  float *v1068;
  uint64_t v1069;
  unint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  int v1074;
  ldiv_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  ldiv_t v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  float *v1086;
  uint64_t v1087;
  unint64_t v1088;
  void *v1089;
  uint64_t v1090;
  int *v1091;
  uint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  float *v1095;
  uint64_t v1096;
  unint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  int v1101;
  ldiv_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  int v1108;
  ldiv_t v1109;
  int v1110;
  uint64_t v1111;
  uint64_t v1112;
  float *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  void *v1117;
  uint64_t v1118;
  void *v1119;
  uint64_t v1120;
  unint64_t v1121;
  unint64_t v1122;
  float *v1123;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int quot;
  ldiv_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  ldiv_t v1137;
  int v1138;
  uint64_t v1139;
  uint64_t v1140;
  float *v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  void *v1145;
  uint64_t v1146;
  void *v1147;
  uint64_t v1148;
  unint64_t v1149;
  unint64_t v1150;
  float *v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  int v1157;
  ldiv_t v1158;
  uint64_t v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  int v1164;
  ldiv_t v1165;
  int v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  int *v1171;
  vDSP_Length v1172;
  float *v1173;
  unint64_t v1174;
  void *v1175;
  uint64_t v1176;
  int *v1177;
  uint64_t v1178;
  unint64_t v1179;
  unint64_t v1180;
  float *v1181;
  uint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  int v1187;
  ldiv_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  int v1194;
  ldiv_t v1195;
  int v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  int *v1201;
  vDSP_Length v1202;
  float *v1203;
  unint64_t v1204;
  void *v1205;
  uint64_t v1206;
  int *v1207;
  uint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  float *v1211;
  uint64_t v1212;
  unint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  int v1217;
  ldiv_t v1218;
  uint64_t v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  int v1224;
  ldiv_t v1225;
  int v1226;
  uint64_t v1227;
  uint64_t v1228;
  float *v1229;
  uint64_t v1230;
  unint64_t v1231;
  void *v1232;
  uint64_t v1233;
  int *v1234;
  uint64_t v1235;
  unint64_t v1236;
  unint64_t v1237;
  float *v1238;
  uint64_t v1239;
  unint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  int v1244;
  ldiv_t v1245;
  uint64_t v1246;
  unint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  int v1251;
  ldiv_t v1252;
  int v1253;
  uint64_t v1254;
  uint64_t v1255;
  float *v1256;
  uint64_t v1257;
  unint64_t v1258;
  void *v1259;
  uint64_t v1260;
  int *v1261;
  uint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  float *v1265;
  uint64_t v1266;
  unint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  int v1271;
  ldiv_t v1272;
  uint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  int v1278;
  ldiv_t v1279;
  int v1280;
  unint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int *v1285;
  vDSP_Length v1286;
  float *v1287;
  unint64_t v1288;
  void *v1289;
  uint64_t v1290;
  int *v1291;
  uint64_t v1292;
  unint64_t v1293;
  unint64_t v1294;
  float *v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  int v1301;
  ldiv_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  int v1308;
  ldiv_t v1309;
  int v1310;
  unint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  int *v1315;
  vDSP_Length v1316;
  float *v1317;
  unint64_t v1318;
  void *v1319;
  uint64_t v1320;
  int *v1321;
  uint64_t v1322;
  unint64_t v1323;
  unint64_t v1324;
  float *v1325;
  uint64_t v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  int v1331;
  ldiv_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  ldiv_t v1339;
  int v1340;
  uint64_t v1341;
  uint64_t v1342;
  float *v1343;
  uint64_t v1344;
  unint64_t v1345;
  void *v1346;
  uint64_t v1347;
  int *v1348;
  uint64_t v1349;
  unint64_t v1350;
  unint64_t v1351;
  float *v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  ldiv_t v1359;
  uint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  int v1365;
  ldiv_t v1366;
  int v1367;
  uint64_t v1368;
  uint64_t v1369;
  float *v1370;
  uint64_t v1371;
  unint64_t v1372;
  void *v1373;
  uint64_t v1374;
  int *v1375;
  uint64_t v1376;
  unint64_t v1377;
  unint64_t v1378;
  float *v1379;
  uint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  int v1385;
  ldiv_t v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  int v1392;
  ldiv_t v1393;
  int v1394;
  uint64_t v1395;
  uint64_t v1396;
  float *v1397;
  uint64_t v1398;
  unint64_t v1399;
  void *v1400;
  uint64_t v1401;
  int *v1402;
  uint64_t v1403;
  unint64_t v1404;
  unint64_t v1405;
  float *v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  int v1412;
  ldiv_t v1413;
  uint64_t v1414;
  unint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  int v1419;
  ldiv_t v1420;
  int v1421;
  uint64_t v1422;
  uint64_t v1423;
  float *v1424;
  uint64_t v1425;
  unint64_t v1426;
  void *v1427;
  uint64_t v1428;
  int *v1429;
  uint64_t v1430;
  unint64_t v1431;
  unint64_t v1432;
  float *v1433;
  uint64_t v1434;
  unint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  int v1439;
  ldiv_t v1440;
  uint64_t v1441;
  unint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  int v1446;
  ldiv_t v1447;
  int v1448;
  uint64_t v1449;
  uint64_t v1450;
  float *v1451;
  uint64_t v1452;
  unint64_t v1453;
  void *v1454;
  uint64_t v1455;
  int *v1456;
  uint64_t v1457;
  unint64_t v1458;
  unint64_t v1459;
  float *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  int v1466;
  ldiv_t v1467;
  uint64_t v1468;
  unint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  ldiv_t v1474;
  int v1475;
  uint64_t v1476;
  uint64_t v1477;
  float *v1478;
  uint64_t v1479;
  unint64_t v1480;
  void *v1481;
  uint64_t v1482;
  int *v1483;
  uint64_t v1484;
  unint64_t v1485;
  unint64_t v1486;
  float *v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  int v1493;
  ldiv_t v1494;
  uint64_t v1495;
  unint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  ldiv_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  int *v1508;
  int *v1509;
  int *v1510;
  unint64_t v1511;
  int *v1512;
  uint64_t v1513;
  unint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  unint64_t v1520;
  unint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  unint64_t v1524;
  unint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  vDSP_Length v1532;
  vDSP_Length v1533;
  vDSP_Length v1534;
  vDSP_Length v1535;
  vDSP_Length v1536;
  vDSP_Length v1537;
  vDSP_Length v1538;
  vDSP_Length v1539;
  vDSP_Length v1540;
  vDSP_Length v1541;
  vDSP_Length v1542;
  vDSP_Length v1543;
  vDSP_Length v1544;
  vDSP_Length v1545;
  vDSP_Length v1546;
  vDSP_Length v1547;
  vDSP_Length v1548;
  vDSP_Length v1549;
  vDSP_Length v1550;
  vDSP_Length v1551;
  vDSP_Length v1552;
  vDSP_Length v1553;
  vDSP_Length v1554;
  vDSP_Length v1555;
  vDSP_Length v1556;
  vDSP_Length v1557;
  vDSP_Length v1558;
  vDSP_Length v1559;
  vDSP_Length v1560;
  vDSP_Length v1561;
  vDSP_Length v1562;
  vDSP_Length v1563;
  vDSP_Length v1564;
  int *v1565;
  uint64_t v1566;
  int *v1567;
  uint64_t v1568;
  uint64_t v1569;
  int v1570;
  uint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  int *v1575;
  int *v1576;
  int *v1577;
  int *v1578;
  int *v1579;
  int *v1580;
  int *v1581;
  int *v1582;
  int *v1583;
  int *v1584;
  unint64_t v1585;
  uint64_t v1586;
  unint64_t v1587;
  uint64_t v1588;
  int *v1589;
  int *v1590;
  int *v1591;
  int *v1592;
  int *v1593;
  int *v1594;
  int *v1595;
  int *v1596;
  int *v1597;
  int *v1598;
  int *v1599;
  int *v1600;
  int *v1601;
  int *v1602;
  int *v1603;
  int *v1604;
  int *v1605;
  int *v1606;
  int *v1607;
  int *v1608;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  vDSP_Length __Nd;
  vDSP_Length __Ne;
  vDSP_Length __Nf;
  vDSP_Length __Ng;
  vDSP_Length __Nh;
  vDSP_Length __Ni;
  vDSP_Length __Nj;
  vDSP_Length __Nk;
  vDSP_Length __Nl;
  vDSP_Length __Nm;
  vDSP_Length __Nn;
  vDSP_Length __No;
  vDSP_Length __Np;
  vDSP_Length __Nq;
  vDSP_Length __Nr;
  vDSP_Length __Ns;
  vDSP_Length __Nt;
  vDSP_Length __Nu;
  vDSP_Length __Nv;
  vDSP_Length __Nw;
  vDSP_Length __Nx;
  vDSP_Length __Ny;
  vDSP_Length __Nz;
  vDSP_Length __Nba;
  vDSP_Length __Nbb;
  vDSP_Length __Nbc;
  vDSP_Length __Nbd;
  vDSP_Length __Nbe;
  vDSP_Length __Nbf;
  vDSP_Length __Nbg;
  vDSP_Length __Nbh;
  vDSP_Length __Nbi;
  vDSP_Length __Nbj;
  vDSP_Length __Nbk;
  vDSP_Length __Nbl;
  vDSP_Length __Nbm;
  vDSP_Length __Nbn;
  vDSP_Length __Nbo;
  vDSP_Length __Nbp;
  vDSP_Length __Nbq;
  uint64_t vars8;

  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(unsigned char **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v27 = *(void **)a3;
          v28 = *a1;
          v29 = *(int **)*a1;
          v30 = (*(void *)(*a1 + 8) - (void)v29) >> 2;
          v31 = (v30 - 1);
          if ((int)v31 >= -1) {
            v32 = -1;
          }
          else {
            v32 = v30 - 1;
          }
          v33 = v32 + 1;
          v34 = v30 + 1;
          break;
      }
      while (1)
      {
        v35 = v34 - 2;
        if (v34 - 2 < 0) {
          break;
        }
        --v34;
        if (*(void *)(*(void *)(v28 + 24) + 8 * v35) != *(void *)(v27[3] + 8 * v35)) {
          goto LABEL_76;
        }
      }
      v34 = v33;
LABEL_76:
      v88 = (uint64_t *)*a2;
      v89 = *(void *)*a2;
      v90 = (unint64_t)(*(void *)(*a2 + 8) - v89) >> 2;
      v91 = v90 - 1;
      if ((int)v90 - 1 >= -1) {
        v91 = -1;
      }
      v92 = v91 + 1;
      v93 = v90 + 1;
      while (1)
      {
        v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(v88[3] + 8 * v94) != *(void *)(v27[3] + 8 * v94)) {
          goto LABEL_129;
        }
      }
      v93 = v92;
LABEL_129:
      v141 = v30 + 1;
      while (1)
      {
        v142 = v141 - 2;
        if (v141 - 2 < 0) {
          break;
        }
        --v141;
        if (*(void *)(*(void *)(v28 + 24) + 8 * v142)) {
          goto LABEL_164;
        }
      }
      v141 = v33;
LABEL_164:
      v155 = v90 + 1;
      while (1)
      {
        v156 = v155 - 2;
        if (v155 - 2 < 0) {
          break;
        }
        --v155;
        if (*(void *)(v88[3] + 8 * v156)) {
          goto LABEL_199;
        }
      }
      v155 = v92;
LABEL_199:
      v169 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v93) {
        v170 = v93;
      }
      else {
        v170 = v34;
      }
      if (v34 <= v155) {
        v34 = v155;
      }
      if (v141 > v93) {
        v93 = v141;
      }
      if (v169 > v93) {
        v171 = 1;
      }
      else {
        v171 = 4;
      }
      if (v169 <= v93) {
        v93 = (uint64_t)(v27[1] - *v27) >> 2;
      }
      if (v169 <= v34) {
        v34 = v93;
      }
      else {
        v171 = 2;
      }
      if (v169 <= v170)
      {
        v172 = v34;
      }
      else
      {
        v171 = 3;
        v172 = v170;
      }
      if (!v172) {
        goto LABEL_228;
      }
      v173 = *(void *)(v27[3] + 8 * (v172 - 1));
      if (v173 < 0x10) {
        goto LABEL_228;
      }
      switch(v171)
      {
        case 1:
          if (v172 == 2)
          {
            v1110 = *v29;
            if (*v29)
            {
              v1111 = 0;
              v1112 = 0;
              v1585 = 0;
              __Nt = (int)v173;
              v1113 = (float *)v27[19];
              v1114 = *(void *)(v28 + 152);
              v1115 = v88[19];
              do
              {
                if (v29[1])
                {
                  v1116 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1114 + v1112), (const float *)(v1115 + v1111), 1, v1113, 1, __Nt);
                    v28 = *a1;
                    v1117 = *(void **)(*a1 + 24);
                    v1118 = v1117[1];
                    v1112 += v1118;
                    v88 = (uint64_t *)*a2;
                    v1119 = *(void **)(*a2 + 24);
                    v1120 = v1119[1];
                    v1111 += v1120;
                    v1113 = (float *)((char *)v1113 + __Nt);
                    ++v1116;
                    v29 = *(int **)*a1;
                    v1121 = v29[1];
                  }
                  while (v1116 < v1121);
                  v1110 = *v29;
                  v89 = *v88;
                }
                else
                {
                  v1121 = 0;
                  v1117 = *(void **)(v28 + 24);
                  v1118 = v1117[1];
                  v1119 = (void *)v88[3];
                  v1120 = v1119[1];
                }
                v1112 = *v1117 + v1112 - v1121 * v1118;
                v1111 = *v1119 + v1111 - v1120 * *(int *)(v89 + 4);
                ++v1585;
              }
              while (v1585 < v1110);
            }
          }
          else if (v172 == 1)
          {
            if (*v29)
            {
              v808 = 0;
              v809 = 0;
              v810 = 0;
              v811 = *(void *)(v28 + 152);
              v812 = v88[19];
              v813 = (int)v173;
              v814 = (float *)v27[19];
              do
              {
                vDSP_svdiv((const float *)(v811 + v810), (const float *)(v812 + v809), 1, v814, 1, v813);
                v810 += **(void **)(*a1 + 24);
                v809 += **(void **)(*a2 + 24);
                v814 = (float *)((char *)v814 + v813);
                ++v808;
              }
              while (v808 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            v1122 = 0;
            v1586 = v88[19];
            __Nu = *(void *)(v28 + 152);
            v1543 = (int)v173;
            v1123 = (float *)v27[19];
            do
            {
              v1124 = *(void *)*a1;
              v1125 = (unint64_t)(*(void *)(*a1 + 8) - v1124) >> 2;
              v1126 = 0;
              v1127 = (v1125 - 1);
              if ((int)v1125 - 1 >= 0)
              {
                v1128 = *(void *)(*a1 + 24);
                quot = v1122;
                do
                {
                  v1130 = ldiv(quot, *(int *)(v1124 + 4 * v1127));
                  quot = v1130.quot;
                  v1126 += *(void *)(v1128 + 8 * v1127--) * v1130.rem;
                }
                while (v1127 != -1);
              }
              v1131 = *(void *)*a2;
              v1132 = (unint64_t)(*(void *)(*a2 + 8) - v1131) >> 2;
              v1133 = 0;
              v1134 = (v1132 - 1);
              if ((int)v1132 - 1 >= 0)
              {
                v1135 = *(void *)(*a2 + 24);
                v1136 = v1122;
                do
                {
                  v1137 = ldiv(v1136, *(int *)(v1131 + 4 * v1134));
                  v1136 = v1137.quot;
                  v1133 += *(void *)(v1135 + 8 * v1134--) * v1137.rem;
                }
                while (v1134 != -1);
              }
              vDSP_svdiv((const float *)(__Nu + (int)v1126), (const float *)(v1586 + (int)v1133), 1, v1123, 1, v1543);
              v1123 = (float *)((char *)v1123 + v1543);
              v1122 += v1543;
            }
            while (v1122 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v172 == 2)
          {
            v1138 = *v29;
            if (*v29)
            {
              v1139 = 0;
              v1140 = 0;
              v1587 = 0;
              __Nv = (int)v173;
              v1141 = (float *)v27[19];
              v1142 = *(void *)(v28 + 152);
              v1143 = v88[19];
              do
              {
                if (v29[1])
                {
                  v1144 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1142 + v1140), 1, (const float *)(v1143 + v1139), v1141, 1, __Nv);
                    v28 = *a1;
                    v1145 = *(void **)(*a1 + 24);
                    v1146 = v1145[1];
                    v1140 += v1146;
                    v88 = (uint64_t *)*a2;
                    v1147 = *(void **)(*a2 + 24);
                    v1148 = v1147[1];
                    v1139 += v1148;
                    v1141 = (float *)((char *)v1141 + __Nv);
                    ++v1144;
                    v29 = *(int **)*a1;
                    v1149 = v29[1];
                  }
                  while (v1144 < v1149);
                  v1138 = *v29;
                  v89 = *v88;
                }
                else
                {
                  v1149 = 0;
                  v1145 = *(void **)(v28 + 24);
                  v1146 = v1145[1];
                  v1147 = (void *)v88[3];
                  v1148 = v1147[1];
                }
                v1140 = *v1145 + v1140 - v1149 * v1146;
                v1139 = *v1147 + v1139 - v1148 * *(int *)(v89 + 4);
                ++v1587;
              }
              while (v1587 < v1138);
            }
          }
          else if (v172 == 1)
          {
            if (*v29)
            {
              v815 = 0;
              v816 = 0;
              v817 = 0;
              v818 = *(void *)(v28 + 152);
              v819 = v88[19];
              v820 = (int)v173;
              v821 = (float *)v27[19];
              do
              {
                vDSP_vsdiv((const float *)(v818 + v817), 1, (const float *)(v819 + v816), v821, 1, v820);
                v817 += **(void **)(*a1 + 24);
                v816 += **(void **)(*a2 + 24);
                v821 = (float *)((char *)v821 + v820);
                ++v815;
              }
              while (v815 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            v1150 = 0;
            v1588 = v88[19];
            __Nw = *(void *)(v28 + 152);
            v1544 = (int)v173;
            v1151 = (float *)v27[19];
            do
            {
              v1152 = *(void *)*a1;
              v1153 = (unint64_t)(*(void *)(*a1 + 8) - v1152) >> 2;
              v1154 = 0;
              v1155 = (v1153 - 1);
              if ((int)v1153 - 1 >= 0)
              {
                v1156 = *(void *)(*a1 + 24);
                v1157 = v1150;
                do
                {
                  v1158 = ldiv(v1157, *(int *)(v1152 + 4 * v1155));
                  v1157 = v1158.quot;
                  v1154 += *(void *)(v1156 + 8 * v1155--) * v1158.rem;
                }
                while (v1155 != -1);
              }
              v1159 = *(void *)*a2;
              v1160 = (unint64_t)(*(void *)(*a2 + 8) - v1159) >> 2;
              v1161 = 0;
              v1162 = (v1160 - 1);
              if ((int)v1160 - 1 >= 0)
              {
                v1163 = *(void *)(*a2 + 24);
                v1164 = v1150;
                do
                {
                  v1165 = ldiv(v1164, *(int *)(v1159 + 4 * v1162));
                  v1164 = v1165.quot;
                  v1161 += *(void *)(v1163 + 8 * v1162--) * v1165.rem;
                }
                while (v1162 != -1);
              }
              vDSP_vsdiv((const float *)(__Nw + (int)v1154), 1, (const float *)(v1588 + (int)v1161), v1151, 1, v1544);
              v1151 = (float *)((char *)v1151 + v1544);
              v1150 += v1544;
            }
            while (v1150 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v172 == 2)
          {
            v914 = *v29;
            if (*v29)
            {
              v915 = 0;
              v916 = 0;
              v1573 = 0;
              __Nh = (int)v173;
              v917 = (float *)v27[19];
              v918 = *(void *)(v28 + 152);
              v919 = v88[19];
              do
              {
                if (v29[1])
                {
                  v920 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)(v919 + v915), 1, (const float *)(v918 + v916), 1, v917, 1, __Nh);
                    v28 = *a1;
                    v921 = *(void **)(*a1 + 24);
                    v922 = v921[1];
                    v916 += v922;
                    v88 = (uint64_t *)*a2;
                    v923 = *(void **)(*a2 + 24);
                    v924 = v923[1];
                    v915 += v924;
                    v917 = (float *)((char *)v917 + __Nh);
                    ++v920;
                    v29 = *(int **)*a1;
                    v925 = v29[1];
                  }
                  while (v920 < v925);
                  v914 = *v29;
                  v89 = *v88;
                }
                else
                {
                  v925 = 0;
                  v921 = *(void **)(v28 + 24);
                  v922 = v921[1];
                  v923 = (void *)v88[3];
                  v924 = v923[1];
                }
                v916 = *v921 + v916 - v925 * v922;
                v915 = *v923 + v915 - v924 * *(int *)(v89 + 4);
                ++v1573;
              }
              while (v1573 < v914);
            }
          }
          else if (v172 == 1)
          {
            if (*v29)
            {
              v174 = 0;
              v175 = 0;
              v176 = 0;
              v177 = *(void *)(v28 + 152);
              v178 = v88[19];
              v179 = (int)v173;
              v180 = (float *)v27[19];
              do
              {
                vDSP_vdiv((const float *)(v178 + v175), 1, (const float *)(v177 + v176), 1, v180, 1, v179);
                v176 += **(void **)(*a1 + 24);
                v175 += **(void **)(*a2 + 24);
                v180 = (float *)((char *)v180 + v179);
                ++v174;
              }
              while (v174 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            v926 = 0;
            v1574 = v88[19];
            __Ni = *(void *)(v28 + 152);
            v1532 = (int)v173;
            v927 = (float *)v27[19];
            do
            {
              v928 = *(void *)*a1;
              v929 = (unint64_t)(*(void *)(*a1 + 8) - v928) >> 2;
              v930 = 0;
              v931 = (v929 - 1);
              if ((int)v929 - 1 >= 0)
              {
                v932 = *(void *)(*a1 + 24);
                v933 = v926;
                do
                {
                  v934 = ldiv(v933, *(int *)(v928 + 4 * v931));
                  v933 = v934.quot;
                  v930 += *(void *)(v932 + 8 * v931--) * v934.rem;
                }
                while (v931 != -1);
              }
              v935 = *(void *)*a2;
              v936 = (unint64_t)(*(void *)(*a2 + 8) - v935) >> 2;
              v937 = 0;
              v938 = (v936 - 1);
              if ((int)v936 - 1 >= 0)
              {
                v939 = *(void *)(*a2 + 24);
                v940 = v926;
                do
                {
                  v941 = ldiv(v940, *(int *)(v935 + 4 * v938));
                  v940 = v941.quot;
                  v937 += *(void *)(v939 + 8 * v938--) * v941.rem;
                }
                while (v938 != -1);
              }
              vDSP_vdiv((const float *)(v1574 + (int)v937), 1, (const float *)(__Ni + (int)v930), 1, v927, 1, v1532);
              v927 = (float *)((char *)v927 + v1532);
              v926 += v1532;
            }
            while (v926 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_228:
          switch(v169)
          {
            case 1uLL:
              v181 = v27[6];
              if (v181)
              {
                v182 = *(unsigned char **)(v28 + 152);
                v183 = (unsigned char *)v27[19];
                v184 = **(void **)(v28 + 24);
                do
                {
                  *v183++ = *v182;
                  v182 += v184;
                  --v181;
                }
                while (v181);
              }
              break;
            case 2uLL:
              v306 = *v29;
              if (v306)
              {
                v307 = 0;
                v308 = 0;
                v309 = 0;
                v310 = *(void *)(v28 + 152);
                v311 = v27[19];
                v312 = v29[1];
                v313 = *(uint64_t **)(v28 + 24);
                v315 = *v313;
                v314 = v313[1];
                if (v312 <= 1) {
                  v316 = 1;
                }
                else {
                  v316 = v29[1];
                }
                v317 = v315 - v314 * v312;
                do
                {
                  if (v312)
                  {
                    v318 = v308 + v316;
                    v319 = (unsigned char *)(v311 + v308);
                    v320 = v316;
                    do
                    {
                      *v319++ = *(unsigned char *)(v310 + v309);
                      v309 += v314;
                      --v320;
                    }
                    while (v320);
                    v308 = v318;
                  }
                  v309 += v317;
                  ++v307;
                }
                while (v307 != v306);
              }
              break;
            case 3uLL:
              v321 = *v29;
              if (v321)
              {
                v322 = 0;
                v323 = 0;
                v324 = 0;
                v325 = *(void *)(v28 + 152);
                v326 = v27[19];
                v327 = v29[1];
                v328 = *(void **)(v28 + 24);
                v329 = v328[1];
                if (v327 <= 1) {
                  v330 = 1;
                }
                else {
                  v330 = v29[1];
                }
                v331 = *v328 - v329 * v327;
                do
                {
                  if (v327)
                  {
                    v332 = 0;
                    v333 = v29[2];
                    v334 = v328[2];
                    if (v333 <= 1) {
                      v335 = 1;
                    }
                    else {
                      v335 = v29[2];
                    }
                    do
                    {
                      v336 = v335;
                      if (v333)
                      {
                        do
                        {
                          *(unsigned char *)(v326 + v323++) = *(unsigned char *)(v325 + v324);
                          v324 += v334;
                          --v336;
                        }
                        while (v336);
                      }
                      v324 += v329 - v334 * v333;
                      ++v332;
                    }
                    while (v332 != v330);
                  }
                  v324 += v331;
                  ++v322;
                }
                while (v322 != v321);
              }
              break;
            case 4uLL:
              v337 = *v29;
              if (v337)
              {
                v338 = 0;
                v339 = 0;
                v340 = 0;
                v341 = *(void *)(v28 + 152);
                v342 = v27[19];
                v343 = v29[1];
                v344 = *(void **)(v28 + 24);
                v345 = v344[1];
                if (v343 <= 1) {
                  v346 = 1;
                }
                else {
                  v346 = v29[1];
                }
                v347 = *v344 - v345 * v343;
                do
                {
                  if (v343)
                  {
                    v348 = 0;
                    v349 = v29[2];
                    v350 = v344[2];
                    if (v349 <= 1) {
                      v351 = 1;
                    }
                    else {
                      v351 = v29[2];
                    }
                    do
                    {
                      if (v349)
                      {
                        v352 = 0;
                        v353 = v29[3];
                        v354 = v344[3];
                        if (v353 <= 1) {
                          v355 = 1;
                        }
                        else {
                          v355 = v29[3];
                        }
                        do
                        {
                          v356 = v355;
                          if (v353)
                          {
                            do
                            {
                              *(unsigned char *)(v342 + v339++) = *(unsigned char *)(v341 + v340);
                              v340 += v354;
                              --v356;
                            }
                            while (v356);
                          }
                          v340 += v350 - v354 * v353;
                          ++v352;
                        }
                        while (v352 != v351);
                      }
                      v340 += v345 - v350 * v349;
                      ++v348;
                    }
                    while (v348 != v346);
                  }
                  v340 += v347;
                  ++v338;
                }
                while (v338 != v337);
              }
              break;
            default:
              v297 = v27[6];
              if (v297)
              {
                v298 = 0;
                v299 = *(void *)(v28 + 152);
                v300 = v27[19];
                do
                {
                  v301 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    v302 = *(void *)(v28 + 24);
                    v303 = v31;
                    v304 = v298;
                    do
                    {
                      v305 = ldiv(v304, v29[v303]);
                      v304 = v305.quot;
                      v301 += *(void *)(v302 + 8 * v303--) * v305.rem;
                    }
                    while (v303 != -1);
                  }
                  *(unsigned char *)(v300 + v298++) = *(unsigned char *)(v299 + (int)v301);
                }
                while (v298 != v297);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          v7 = **(unsigned char **)(*a1 + 152) / **(unsigned char **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v36 = *(void **)a3;
          v37 = *a1;
          v38 = *(int **)*a1;
          v39 = (*(void *)(*a1 + 8) - (void)v38) >> 2;
          v40 = v39 - 1;
          if ((int)v39 - 1 >= -1) {
            v40 = -1;
          }
          v41 = v40 + 1;
          v42 = v39 + 1;
          break;
      }
      while (1)
      {
        v43 = v42 - 2;
        if (v42 - 2 < 0) {
          break;
        }
        --v42;
        if (*(void *)(*(void *)(v37 + 24) + 8 * v43) != *(void *)(v36[3] + 8 * v43)) {
          goto LABEL_83;
        }
      }
      v42 = v41;
LABEL_83:
      v95 = (int **)*a2;
      v96 = *(int **)*a2;
      v97 = (*(void *)(*a2 + 8) - (void)v96) >> 2;
      v98 = v97 - 1;
      if ((int)v97 - 1 >= -1) {
        v98 = -1;
      }
      v99 = v98 + 1;
      v100 = v97 + 1;
      while (1)
      {
        v101 = v100 - 2;
        if (v100 - 2 < 0) {
          break;
        }
        --v100;
        if (*(void *)&v95[3][2 * v101] != *(void *)(v36[3] + 8 * v101)) {
          goto LABEL_134;
        }
      }
      v100 = v99;
LABEL_134:
      v143 = v39 + 1;
      while (1)
      {
        v144 = v143 - 2;
        if (v143 - 2 < 0) {
          break;
        }
        --v143;
        if (*(void *)(*(void *)(v37 + 24) + 8 * v144)) {
          goto LABEL_169;
        }
      }
      v143 = v41;
LABEL_169:
      v157 = v97 + 1;
      while (1)
      {
        v158 = v157 - 2;
        if (v157 - 2 < 0) {
          break;
        }
        --v157;
        if (*(void *)&v95[3][2 * v158]) {
          goto LABEL_234;
        }
      }
      v157 = v99;
LABEL_234:
      v185 = (uint64_t)(v36[1] - *v36) >> 2;
      if (v42 <= v100) {
        v186 = v100;
      }
      else {
        v186 = v42;
      }
      if (v42 <= v157) {
        v42 = v157;
      }
      if (v143 > v100) {
        v100 = v143;
      }
      if (v185 > v100) {
        v187 = 1;
      }
      else {
        v187 = 4;
      }
      if (v185 <= v100) {
        v100 = (uint64_t)(v36[1] - *v36) >> 2;
      }
      if (v185 <= v42) {
        v42 = v100;
      }
      else {
        v187 = 2;
      }
      if (v185 <= v186)
      {
        v188 = v42;
      }
      else
      {
        v187 = 3;
        v188 = v186;
      }
      if (!v188) {
        goto LABEL_263;
      }
      v189 = *(void *)(v36[3] + 8 * (v188 - 1));
      if (v189 < 0x10) {
        goto LABEL_263;
      }
      switch(v187)
      {
        case 1:
          if (v188 == 2)
          {
            v1166 = *v38;
            if (*v38)
            {
              v1167 = 0;
              v1168 = 0;
              v1169 = 0;
              v1170 = *(void *)(v37 + 152);
              v1171 = v95[19];
              v1172 = (int)v189;
              v1173 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  v1174 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1170 + v1169), (const float *)((char *)v1171 + v1168), 1, v1173, 1, v1172);
                    v37 = *a1;
                    v1175 = *(void **)(*a1 + 24);
                    v1176 = v1175[1];
                    v1169 += v1176;
                    v95 = (int **)*a2;
                    v1177 = *(int **)(*a2 + 24);
                    v1178 = *((void *)v1177 + 1);
                    v1168 += v1178;
                    v1173 = (float *)((char *)v1173 + v1172);
                    ++v1174;
                    v38 = *(int **)*a1;
                    v1179 = v38[1];
                  }
                  while (v1174 < v1179);
                  v1166 = *v38;
                  v96 = *v95;
                }
                else
                {
                  v1179 = 0;
                  v1175 = *(void **)(v37 + 24);
                  v1176 = v1175[1];
                  v1177 = v95[3];
                  v1178 = *((void *)v1177 + 1);
                }
                v1169 = *v1175 + v1169 - v1179 * v1176;
                v1168 = *(void *)v1177 + v1168 - v1178 * v96[1];
                ++v1167;
              }
              while (v1167 < v1166);
            }
          }
          else if (v188 == 1)
          {
            if (*v38)
            {
              v822 = 0;
              v823 = 0;
              v824 = 0;
              v825 = *(void *)(v37 + 152);
              v826 = v95[19];
              v827 = (int)v189;
              v828 = (float *)v36[19];
              do
              {
                vDSP_svdiv((const float *)(v825 + v824), (const float *)((char *)v826 + v823), 1, v828, 1, v827);
                v824 += **(void **)(*a1 + 24);
                v823 += **(void **)(*a2 + 24);
                v828 = (float *)((char *)v828 + v827);
                ++v822;
              }
              while (v822 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            v1180 = 0;
            v1589 = v95[19];
            __Nx = *(void *)(v37 + 152);
            v1545 = (int)v189;
            v1181 = (float *)v36[19];
            do
            {
              v1182 = *(void *)*a1;
              v1183 = (unint64_t)(*(void *)(*a1 + 8) - v1182) >> 2;
              v1184 = 0;
              v1185 = (v1183 - 1);
              if ((int)v1183 - 1 >= 0)
              {
                v1186 = *(void *)(*a1 + 24);
                v1187 = v1180;
                do
                {
                  v1188 = ldiv(v1187, *(int *)(v1182 + 4 * v1185));
                  v1187 = v1188.quot;
                  v1184 += *(void *)(v1186 + 8 * v1185--) * v1188.rem;
                }
                while (v1185 != -1);
              }
              v1189 = *(void *)*a2;
              v1190 = (unint64_t)(*(void *)(*a2 + 8) - v1189) >> 2;
              v1191 = 0;
              v1192 = (v1190 - 1);
              if ((int)v1190 - 1 >= 0)
              {
                v1193 = *(void *)(*a2 + 24);
                v1194 = v1180;
                do
                {
                  v1195 = ldiv(v1194, *(int *)(v1189 + 4 * v1192));
                  v1194 = v1195.quot;
                  v1191 += *(void *)(v1193 + 8 * v1192--) * v1195.rem;
                }
                while (v1192 != -1);
              }
              vDSP_svdiv((const float *)(__Nx + (int)v1184), (const float *)((char *)v1589 + (int)v1191), 1, v1181, 1, v1545);
              v1181 = (float *)((char *)v1181 + v1545);
              v1180 += v1545;
            }
            while (v1180 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v188 == 2)
          {
            v1196 = *v38;
            if (*v38)
            {
              v1197 = 0;
              v1198 = 0;
              v1199 = 0;
              v1200 = *(void *)(v37 + 152);
              v1201 = v95[19];
              v1202 = (int)v189;
              v1203 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  v1204 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1200 + v1199), 1, (const float *)((char *)v1201 + v1198), v1203, 1, v1202);
                    v37 = *a1;
                    v1205 = *(void **)(*a1 + 24);
                    v1206 = v1205[1];
                    v1199 += v1206;
                    v95 = (int **)*a2;
                    v1207 = *(int **)(*a2 + 24);
                    v1208 = *((void *)v1207 + 1);
                    v1198 += v1208;
                    v1203 = (float *)((char *)v1203 + v1202);
                    ++v1204;
                    v38 = *(int **)*a1;
                    v1209 = v38[1];
                  }
                  while (v1204 < v1209);
                  v1196 = *v38;
                  v96 = *v95;
                }
                else
                {
                  v1209 = 0;
                  v1205 = *(void **)(v37 + 24);
                  v1206 = v1205[1];
                  v1207 = v95[3];
                  v1208 = *((void *)v1207 + 1);
                }
                v1199 = *v1205 + v1199 - v1209 * v1206;
                v1198 = *(void *)v1207 + v1198 - v1208 * v96[1];
                ++v1197;
              }
              while (v1197 < v1196);
            }
          }
          else if (v188 == 1)
          {
            if (*v38)
            {
              v829 = 0;
              v830 = 0;
              v831 = 0;
              v832 = *(void *)(v37 + 152);
              v833 = v95[19];
              v834 = (int)v189;
              v835 = (float *)v36[19];
              do
              {
                vDSP_vsdiv((const float *)(v832 + v831), 1, (const float *)((char *)v833 + v830), v835, 1, v834);
                v831 += **(void **)(*a1 + 24);
                v830 += **(void **)(*a2 + 24);
                v835 = (float *)((char *)v835 + v834);
                ++v829;
              }
              while (v829 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            v1210 = 0;
            v1590 = v95[19];
            __Ny = *(void *)(v37 + 152);
            v1546 = (int)v189;
            v1211 = (float *)v36[19];
            do
            {
              v1212 = *(void *)*a1;
              v1213 = (unint64_t)(*(void *)(*a1 + 8) - v1212) >> 2;
              v1214 = 0;
              v1215 = (v1213 - 1);
              if ((int)v1213 - 1 >= 0)
              {
                v1216 = *(void *)(*a1 + 24);
                v1217 = v1210;
                do
                {
                  v1218 = ldiv(v1217, *(int *)(v1212 + 4 * v1215));
                  v1217 = v1218.quot;
                  v1214 += *(void *)(v1216 + 8 * v1215--) * v1218.rem;
                }
                while (v1215 != -1);
              }
              v1219 = *(void *)*a2;
              v1220 = (unint64_t)(*(void *)(*a2 + 8) - v1219) >> 2;
              v1221 = 0;
              v1222 = (v1220 - 1);
              if ((int)v1220 - 1 >= 0)
              {
                v1223 = *(void *)(*a2 + 24);
                v1224 = v1210;
                do
                {
                  v1225 = ldiv(v1224, *(int *)(v1219 + 4 * v1222));
                  v1224 = v1225.quot;
                  v1221 += *(void *)(v1223 + 8 * v1222--) * v1225.rem;
                }
                while (v1222 != -1);
              }
              vDSP_vsdiv((const float *)(__Ny + (int)v1214), 1, (const float *)((char *)v1590 + (int)v1221), v1211, 1, v1546);
              v1211 = (float *)((char *)v1211 + v1546);
              v1210 += v1546;
            }
            while (v1210 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v188 == 2)
          {
            v942 = *v38;
            if (*v38)
            {
              v943 = 0;
              v944 = 0;
              v945 = 0;
              v946 = *(void *)(v37 + 152);
              v947 = v95[19];
              v948 = (int)v189;
              v949 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  v950 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)((char *)v947 + v944), 1, (const float *)(v946 + v945), 1, v949, 1, v948);
                    v37 = *a1;
                    v951 = *(void **)(*a1 + 24);
                    v952 = v951[1];
                    v945 += v952;
                    v95 = (int **)*a2;
                    v953 = *(int **)(*a2 + 24);
                    v954 = *((void *)v953 + 1);
                    v944 += v954;
                    v949 = (float *)((char *)v949 + v948);
                    ++v950;
                    v38 = *(int **)*a1;
                    v955 = v38[1];
                  }
                  while (v950 < v955);
                  v942 = *v38;
                  v96 = *v95;
                }
                else
                {
                  v955 = 0;
                  v951 = *(void **)(v37 + 24);
                  v952 = v951[1];
                  v953 = v95[3];
                  v954 = *((void *)v953 + 1);
                }
                v945 = *v951 + v945 - v955 * v952;
                v944 = *(void *)v953 + v944 - v954 * v96[1];
                ++v943;
              }
              while (v943 < v942);
            }
          }
          else if (v188 == 1)
          {
            if (*v38)
            {
              v190 = 0;
              v191 = 0;
              v192 = 0;
              v193 = *(void *)(v37 + 152);
              v194 = v95[19];
              v195 = (int)v189;
              v196 = (float *)v36[19];
              do
              {
                vDSP_vdiv((const float *)((char *)v194 + v191), 1, (const float *)(v193 + v192), 1, v196, 1, v195);
                v192 += **(void **)(*a1 + 24);
                v191 += **(void **)(*a2 + 24);
                v196 = (float *)((char *)v196 + v195);
                ++v190;
              }
              while (v190 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            v956 = 0;
            v1575 = v95[19];
            __Nj = *(void *)(v37 + 152);
            v1533 = (int)v189;
            v957 = (float *)v36[19];
            do
            {
              v958 = *(void *)*a1;
              v959 = (unint64_t)(*(void *)(*a1 + 8) - v958) >> 2;
              v960 = 0;
              v961 = (v959 - 1);
              if ((int)v959 - 1 >= 0)
              {
                v962 = *(void *)(*a1 + 24);
                v963 = v956;
                do
                {
                  v964 = ldiv(v963, *(int *)(v958 + 4 * v961));
                  v963 = v964.quot;
                  v960 += *(void *)(v962 + 8 * v961--) * v964.rem;
                }
                while (v961 != -1);
              }
              v965 = *(void *)*a2;
              v966 = (unint64_t)(*(void *)(*a2 + 8) - v965) >> 2;
              v967 = 0;
              v968 = (v966 - 1);
              if ((int)v966 - 1 >= 0)
              {
                v969 = *(void *)(*a2 + 24);
                v970 = v956;
                do
                {
                  v971 = ldiv(v970, *(int *)(v965 + 4 * v968));
                  v970 = v971.quot;
                  v967 += *(void *)(v969 + 8 * v968--) * v971.rem;
                }
                while (v968 != -1);
              }
              vDSP_vdiv((const float *)((char *)v1575 + (int)v967), 1, (const float *)(__Nj + (int)v960), 1, v957, 1, v1533);
              v957 = (float *)((char *)v957 + v1533);
              v956 += v1533;
            }
            while (v956 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_263:
          switch(v185)
          {
            case 1uLL:
              if (v36[6])
              {
                v197 = 0;
                v198 = 0;
                v199 = 0;
                v200 = *(void *)(v37 + 152);
                v201 = v95[19];
                v202 = v36[19];
                do
                {
                  *(unsigned char *)(v202 + v197) = *(unsigned char *)(v200 + v199) / *((unsigned char *)v201 + v198);
                  v199 += **(void **)(*a1 + 24);
                  v198 += **(void **)(*a2 + 24);
                  ++v197;
                }
                while (v197 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              v373 = *v38;
              if (*v38)
              {
                v374 = 0;
                v375 = 0;
                v376 = 0;
                v377 = 0;
                v378 = *(void *)(v37 + 152);
                v379 = v95[19];
                v380 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    v381 = 0;
                    do
                    {
                      *(unsigned char *)(v380 + v375 + v381) = *(unsigned char *)(v378 + v377) / *((unsigned char *)v379 + v376);
                      v37 = *a1;
                      v382 = *(void **)(*a1 + 24);
                      v383 = v382[1];
                      v377 += v383;
                      v95 = (int **)*a2;
                      v384 = *(int **)(*a2 + 24);
                      v385 = *((void *)v384 + 1);
                      v376 += v385;
                      ++v381;
                      v38 = *(int **)*a1;
                      v386 = v38[1];
                    }
                    while (v381 < v386);
                    v373 = *v38;
                    v96 = *v95;
                    v375 += v381;
                  }
                  else
                  {
                    v386 = 0;
                    v382 = *(void **)(v37 + 24);
                    v383 = v382[1];
                    v384 = v95[3];
                    v385 = *((void *)v384 + 1);
                  }
                  v377 = *v382 + v377 - v386 * v383;
                  v376 = *(void *)v384 + v376 - v385 * v96[1];
                  ++v374;
                }
                while (v374 < v373);
              }
              break;
            case 3uLL:
              v387 = *v38;
              if (*v38)
              {
                v388 = 0;
                v389 = 0;
                v390 = 0;
                v391 = 0;
                v392 = *(void *)(v37 + 152);
                v393 = v95[19];
                v394 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    v395 = 0;
                    do
                    {
                      if (v38[2])
                      {
                        v396 = 0;
                        do
                        {
                          *(unsigned char *)(v394 + v389 + v396) = *(unsigned char *)(v392 + v391) / *((unsigned char *)v393 + v390);
                          v37 = *a1;
                          v397 = *(void **)(*a1 + 24);
                          v398 = v397[2];
                          v391 += v398;
                          v95 = (int **)*a2;
                          v399 = *(int **)(*a2 + 24);
                          v400 = *((void *)v399 + 2);
                          v390 += v400;
                          ++v396;
                          v38 = *(int **)*a1;
                          v401 = v38[2];
                        }
                        while (v396 < v401);
                        v96 = *v95;
                        v389 += v396;
                      }
                      else
                      {
                        v401 = 0;
                        v397 = *(void **)(v37 + 24);
                        v398 = v397[2];
                        v399 = v95[3];
                        v400 = *((void *)v399 + 2);
                      }
                      v402 = v397[1];
                      v391 = v402 + v391 - v401 * v398;
                      v390 = *((void *)v399 + 1) + v390 - v400 * v96[2];
                      ++v395;
                      v403 = v38[1];
                    }
                    while (v395 < v403);
                    v387 = *v38;
                  }
                  else
                  {
                    v403 = 0;
                    v397 = *(void **)(v37 + 24);
                    v402 = v397[1];
                  }
                  v391 = *v397 + v391 - v403 * v402;
                  v390 = *(void *)v95[3] + v390 - *((void *)v95[3] + 1) * v96[1];
                  ++v388;
                }
                while (v388 < v387);
              }
              break;
            case 4uLL:
              v404 = *v38;
              if (*v38)
              {
                v405 = 0;
                v406 = 0;
                v407 = 0;
                v408 = 0;
                v409 = *(void *)(v37 + 152);
                v410 = v95[19];
                v411 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    v412 = 0;
                    do
                    {
                      if (v38[2])
                      {
                        v413 = 0;
                        do
                        {
                          if (v38[3])
                          {
                            v414 = 0;
                            do
                            {
                              *(unsigned char *)(v411 + v406 + v414) = *(unsigned char *)(v409 + v408) / *((unsigned char *)v410 + v407);
                              v37 = *a1;
                              v415 = *(void **)(*a1 + 24);
                              v416 = v415[3];
                              v408 += v416;
                              v95 = (int **)*a2;
                              v417 = *(int **)(*a2 + 24);
                              v418 = *((void *)v417 + 3);
                              v407 += v418;
                              ++v414;
                              v38 = *(int **)*a1;
                              v419 = v38[3];
                            }
                            while (v414 < v419);
                            v96 = *v95;
                            v406 += v414;
                          }
                          else
                          {
                            v419 = 0;
                            v415 = *(void **)(v37 + 24);
                            v416 = v415[3];
                            v417 = v95[3];
                            v418 = *((void *)v417 + 3);
                          }
                          v420 = v415[2];
                          v408 = v420 + v408 - v419 * v416;
                          v407 = *((void *)v417 + 2) + v407 - v418 * v96[3];
                          ++v413;
                          v421 = v38[2];
                        }
                        while (v413 < v421);
                      }
                      else
                      {
                        v421 = 0;
                        v415 = *(void **)(v37 + 24);
                        v420 = v415[2];
                      }
                      v408 = v415[1] + v408 - v421 * v420;
                      v407 = *((void *)v95[3] + 1) + v407 - *((void *)v95[3] + 2) * v96[2];
                      ++v412;
                      v422 = v38[1];
                    }
                    while (v412 < v422);
                    v404 = *v38;
                  }
                  else
                  {
                    v422 = 0;
                  }
                  v408 = **(void **)(v37 + 24) + v408 - *(void *)(*(void *)(v37 + 24) + 8) * v422;
                  v407 = *(void *)v95[3] + v407 - *((void *)v95[3] + 1) * v96[1];
                  ++v405;
                }
                while (v405 < v404);
              }
              break;
            default:
              if (v36[6])
              {
                v357 = 0;
                v1565 = v95[19];
                __N = *(void *)(v37 + 152);
                v358 = v36[19];
                do
                {
                  v359 = *(void *)*a1;
                  v360 = (unint64_t)(*(void *)(*a1 + 8) - v359) >> 2;
                  v361 = 0;
                  v362 = (v360 - 1);
                  if ((int)v360 - 1 >= 0)
                  {
                    v363 = *(void *)(*a1 + 24);
                    v364 = v357;
                    do
                    {
                      v365 = ldiv(v364, *(int *)(v359 + 4 * v362));
                      v364 = v365.quot;
                      v361 += *(void *)(v363 + 8 * v362--) * v365.rem;
                    }
                    while (v362 != -1);
                  }
                  v366 = *(void *)*a2;
                  v367 = (unint64_t)(*(void *)(*a2 + 8) - v366) >> 2;
                  v368 = 0;
                  v369 = (v367 - 1);
                  if ((int)v367 - 1 >= 0)
                  {
                    v370 = *(void *)(*a2 + 24);
                    v371 = v357;
                    do
                    {
                      v372 = ldiv(v371, *(int *)(v366 + 4 * v369));
                      v371 = v372.quot;
                      v368 += *(void *)(v370 + 8 * v369--) * v372.rem;
                    }
                    while (v369 != -1);
                  }
                  *(unsigned char *)(v358 + v357++) = *(unsigned char *)(__N + (int)v361) / *((unsigned char *)v1565 + (int)v368);
                }
                while (v357 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v9)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v44 = *(void **)a3;
          v45 = *a1;
          v46 = *(int **)*a1;
          v47 = (*(void *)(*a1 + 8) - (void)v46) >> 2;
          v48 = (v47 - 1);
          if ((int)v48 >= -1) {
            v49 = -1;
          }
          else {
            v49 = v47 - 1;
          }
          v50 = v49 + 1;
          v51 = v47 + 1;
          break;
      }
      while (1)
      {
        v52 = v51 - 2;
        if (v51 - 2 < 0) {
          break;
        }
        --v51;
        if (*(void *)(*(void *)(v45 + 24) + 8 * v52) != *(void *)(v44[3] + 8 * v52)) {
          goto LABEL_90;
        }
      }
      v51 = v50;
LABEL_90:
      v102 = (int **)*a2;
      v103 = *(int **)*a2;
      v104 = (*(void *)(*a2 + 8) - (void)v103) >> 2;
      v105 = (v104 - 1);
      if ((int)v105 >= -1) {
        v106 = -1;
      }
      else {
        v106 = v104 - 1;
      }
      v107 = v106 + 1;
      v108 = v104 + 1;
      while (1)
      {
        v109 = v108 - 2;
        if (v108 - 2 < 0) {
          break;
        }
        --v108;
        if (*(void *)&v102[3][2 * v109] != *(void *)(v44[3] + 8 * v109)) {
          goto LABEL_139;
        }
      }
      v108 = v107;
LABEL_139:
      v145 = v47 + 1;
      while (1)
      {
        v146 = v145 - 2;
        if (v145 - 2 < 0) {
          break;
        }
        --v145;
        if (*(void *)(*(void *)(v45 + 24) + 8 * v146)) {
          goto LABEL_174;
        }
      }
      v145 = v50;
LABEL_174:
      v159 = v104 + 1;
      while (1)
      {
        v160 = v159 - 2;
        if (v159 - 2 < 0) {
          break;
        }
        --v159;
        if (*(void *)&v102[3][2 * v160]) {
          goto LABEL_269;
        }
      }
      v159 = v107;
LABEL_269:
      v203 = (uint64_t)(v44[1] - *v44) >> 2;
      if (v51 <= v108) {
        v204 = v108;
      }
      else {
        v204 = v51;
      }
      if (v51 <= v159) {
        v51 = v159;
      }
      if (v145 > v108) {
        v108 = v145;
      }
      if (v203 > v108) {
        v205 = 1;
      }
      else {
        v205 = 4;
      }
      if (v203 <= v108) {
        v108 = (uint64_t)(v44[1] - *v44) >> 2;
      }
      if (v203 <= v51) {
        v51 = v108;
      }
      else {
        v205 = 2;
      }
      if (v203 <= v204)
      {
        v206 = v51;
      }
      else
      {
        v205 = 3;
        v206 = v204;
      }
      if (!v206) {
        goto LABEL_298;
      }
      v207 = *(void *)(v44[3] + 8 * (v206 - 1));
      if (v207 < 0x10) {
        goto LABEL_298;
      }
      switch(v205)
      {
        case 1:
          if (v206 == 2)
          {
            v1226 = *v46;
            if (*v46)
            {
              v1227 = 0;
              v1228 = 0;
              __Nz = *(void *)(v45 + 152);
              v1591 = v102[19];
              v1229 = (float *)v44[19];
              v1518 = 0;
              v1547 = (int)v207;
              v1230 = 4 * (int)v207;
              do
              {
                if (v46[1])
                {
                  v1231 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nz + 4 * v1228), (const float *)&v1591[v1227], 1, v1229, 1, v1547);
                    v45 = *a1;
                    v1232 = *(void **)(*a1 + 24);
                    v1233 = v1232[1];
                    v1228 += v1233;
                    v102 = (int **)*a2;
                    v1234 = *(int **)(*a2 + 24);
                    v1235 = *((void *)v1234 + 1);
                    v1227 += v1235;
                    ++v1231;
                    v46 = *(int **)*a1;
                    v1236 = v46[1];
                    v1229 = (float *)((char *)v1229 + v1230);
                  }
                  while (v1231 < v1236);
                  v1226 = *v46;
                  v103 = *v102;
                }
                else
                {
                  v1236 = 0;
                  v1232 = *(void **)(v45 + 24);
                  v1233 = v1232[1];
                  v1234 = v102[3];
                  v1235 = *((void *)v1234 + 1);
                }
                v1228 = *v1232 + v1228 - v1236 * v1233;
                v1227 = *(void *)v1234 + v1227 - v1235 * v103[1];
                ++v1518;
              }
              while (v1518 < v1226);
            }
          }
          else if (v206 == 1)
          {
            if (*v46)
            {
              v836 = 0;
              v837 = 0;
              v838 = 0;
              v839 = *(void *)(v45 + 152);
              v840 = v102[19];
              v841 = (int)v207;
              v842 = 4 * (int)v207;
              v843 = (float *)v44[19];
              do
              {
                vDSP_svdiv((const float *)(v839 + 4 * v838), (const float *)&v840[v837], 1, v843, 1, v841);
                v838 += **(void **)(*a1 + 24);
                v837 += **(void **)(*a2 + 24);
                ++v836;
                v843 = (float *)((char *)v843 + v842);
              }
              while (v836 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            v1237 = 0;
            v1592 = v102[19];
            __Nba = *(void *)(v45 + 152);
            v1548 = (int)v207;
            v1238 = (float *)v44[19];
            do
            {
              v1239 = *(void *)*a1;
              v1240 = (unint64_t)(*(void *)(*a1 + 8) - v1239) >> 2;
              v1241 = 0;
              v1242 = (v1240 - 1);
              if ((int)v1240 - 1 >= 0)
              {
                v1243 = *(void *)(*a1 + 24);
                v1244 = v1237;
                do
                {
                  v1245 = ldiv(v1244, *(int *)(v1239 + 4 * v1242));
                  v1244 = v1245.quot;
                  v1241 += *(void *)(v1243 + 8 * v1242--) * v1245.rem;
                }
                while (v1242 != -1);
              }
              v1246 = *(void *)*a2;
              v1247 = (unint64_t)(*(void *)(*a2 + 8) - v1246) >> 2;
              v1248 = 0;
              v1249 = (v1247 - 1);
              if ((int)v1247 - 1 >= 0)
              {
                v1250 = *(void *)(*a2 + 24);
                v1251 = v1237;
                do
                {
                  v1252 = ldiv(v1251, *(int *)(v1246 + 4 * v1249));
                  v1251 = v1252.quot;
                  v1248 += *(void *)(v1250 + 8 * v1249--) * v1252.rem;
                }
                while (v1249 != -1);
              }
              vDSP_svdiv((const float *)(__Nba + 4 * (int)v1241), (const float *)&v1592[(int)v1248], 1, v1238, 1, v1548);
              v1238 += v1548;
              v1237 += v1548;
            }
            while (v1237 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v206 == 2)
          {
            v1253 = *v46;
            if (*v46)
            {
              v1254 = 0;
              v1255 = 0;
              __Nbb = *(void *)(v45 + 152);
              v1593 = v102[19];
              v1256 = (float *)v44[19];
              v1519 = 0;
              v1549 = (int)v207;
              v1257 = 4 * (int)v207;
              do
              {
                if (v46[1])
                {
                  v1258 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbb + 4 * v1255), 1, (const float *)&v1593[v1254], v1256, 1, v1549);
                    v45 = *a1;
                    v1259 = *(void **)(*a1 + 24);
                    v1260 = v1259[1];
                    v1255 += v1260;
                    v102 = (int **)*a2;
                    v1261 = *(int **)(*a2 + 24);
                    v1262 = *((void *)v1261 + 1);
                    v1254 += v1262;
                    ++v1258;
                    v46 = *(int **)*a1;
                    v1263 = v46[1];
                    v1256 = (float *)((char *)v1256 + v1257);
                  }
                  while (v1258 < v1263);
                  v1253 = *v46;
                  v103 = *v102;
                }
                else
                {
                  v1263 = 0;
                  v1259 = *(void **)(v45 + 24);
                  v1260 = v1259[1];
                  v1261 = v102[3];
                  v1262 = *((void *)v1261 + 1);
                }
                v1255 = *v1259 + v1255 - v1263 * v1260;
                v1254 = *(void *)v1261 + v1254 - v1262 * v103[1];
                ++v1519;
              }
              while (v1519 < v1253);
            }
          }
          else if (v206 == 1)
          {
            if (*v46)
            {
              v844 = 0;
              v845 = 0;
              v846 = 0;
              v847 = *(void *)(v45 + 152);
              v848 = v102[19];
              v849 = (int)v207;
              v850 = 4 * (int)v207;
              v851 = (float *)v44[19];
              do
              {
                vDSP_vsdiv((const float *)(v847 + 4 * v846), 1, (const float *)&v848[v845], v851, 1, v849);
                v846 += **(void **)(*a1 + 24);
                v845 += **(void **)(*a2 + 24);
                ++v844;
                v851 = (float *)((char *)v851 + v850);
              }
              while (v844 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            v1264 = 0;
            v1594 = v102[19];
            __Nbc = *(void *)(v45 + 152);
            v1550 = (int)v207;
            v1265 = (float *)v44[19];
            do
            {
              v1266 = *(void *)*a1;
              v1267 = (unint64_t)(*(void *)(*a1 + 8) - v1266) >> 2;
              v1268 = 0;
              v1269 = (v1267 - 1);
              if ((int)v1267 - 1 >= 0)
              {
                v1270 = *(void *)(*a1 + 24);
                v1271 = v1264;
                do
                {
                  v1272 = ldiv(v1271, *(int *)(v1266 + 4 * v1269));
                  v1271 = v1272.quot;
                  v1268 += *(void *)(v1270 + 8 * v1269--) * v1272.rem;
                }
                while (v1269 != -1);
              }
              v1273 = *(void *)*a2;
              v1274 = (unint64_t)(*(void *)(*a2 + 8) - v1273) >> 2;
              v1275 = 0;
              v1276 = (v1274 - 1);
              if ((int)v1274 - 1 >= 0)
              {
                v1277 = *(void *)(*a2 + 24);
                v1278 = v1264;
                do
                {
                  v1279 = ldiv(v1278, *(int *)(v1273 + 4 * v1276));
                  v1278 = v1279.quot;
                  v1275 += *(void *)(v1277 + 8 * v1276--) * v1279.rem;
                }
                while (v1276 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbc + 4 * (int)v1268), 1, (const float *)&v1594[(int)v1275], v1265, 1, v1550);
              v1265 += v1550;
              v1264 += v1550;
            }
            while (v1264 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v206 == 2)
          {
            v972 = *v46;
            if (*v46)
            {
              v973 = 0;
              v974 = 0;
              __Nk = *(void *)(v45 + 152);
              v1576 = v102[19];
              v975 = (float *)v44[19];
              v1514 = 0;
              v1534 = (int)v207;
              v976 = 4 * (int)v207;
              do
              {
                if (v46[1])
                {
                  v977 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1576[v973], 1, (const float *)(__Nk + 4 * v974), 1, v975, 1, v1534);
                    v45 = *a1;
                    v978 = *(void **)(*a1 + 24);
                    v979 = v978[1];
                    v974 += v979;
                    v102 = (int **)*a2;
                    v980 = *(int **)(*a2 + 24);
                    v981 = *((void *)v980 + 1);
                    v973 += v981;
                    ++v977;
                    v46 = *(int **)*a1;
                    v982 = v46[1];
                    v975 = (float *)((char *)v975 + v976);
                  }
                  while (v977 < v982);
                  v972 = *v46;
                  v103 = *v102;
                }
                else
                {
                  v982 = 0;
                  v978 = *(void **)(v45 + 24);
                  v979 = v978[1];
                  v980 = v102[3];
                  v981 = *((void *)v980 + 1);
                }
                v974 = *v978 + v974 - v982 * v979;
                v973 = *(void *)v980 + v973 - v981 * v103[1];
                ++v1514;
              }
              while (v1514 < v972);
            }
          }
          else if (v206 == 1)
          {
            if (*v46)
            {
              v208 = 0;
              v209 = 0;
              v210 = 0;
              v211 = *(void *)(v45 + 152);
              v212 = v102[19];
              v213 = (int)v207;
              v214 = 4 * (int)v207;
              v215 = (float *)v44[19];
              do
              {
                vDSP_vdiv((const float *)&v212[v209], 1, (const float *)(v211 + 4 * v210), 1, v215, 1, v213);
                v210 += **(void **)(*a1 + 24);
                v209 += **(void **)(*a2 + 24);
                ++v208;
                v215 = (float *)((char *)v215 + v214);
              }
              while (v208 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            v983 = 0;
            v1577 = v102[19];
            __Nl = *(void *)(v45 + 152);
            v1535 = (int)v207;
            v984 = (float *)v44[19];
            do
            {
              v985 = *(void *)*a1;
              v986 = (unint64_t)(*(void *)(*a1 + 8) - v985) >> 2;
              v987 = 0;
              v988 = (v986 - 1);
              if ((int)v986 - 1 >= 0)
              {
                v989 = *(void *)(*a1 + 24);
                v990 = v983;
                do
                {
                  v991 = ldiv(v990, *(int *)(v985 + 4 * v988));
                  v990 = v991.quot;
                  v987 += *(void *)(v989 + 8 * v988--) * v991.rem;
                }
                while (v988 != -1);
              }
              v992 = *(void *)*a2;
              v993 = (unint64_t)(*(void *)(*a2 + 8) - v992) >> 2;
              v994 = 0;
              v995 = (v993 - 1);
              if ((int)v993 - 1 >= 0)
              {
                v996 = *(void *)(*a2 + 24);
                v997 = v983;
                do
                {
                  v998 = ldiv(v997, *(int *)(v992 + 4 * v995));
                  v997 = v998.quot;
                  v994 += *(void *)(v996 + 8 * v995--) * v998.rem;
                }
                while (v995 != -1);
              }
              vDSP_vdiv((const float *)&v1577[(int)v994], 1, (const float *)(__Nl + 4 * (int)v987), 1, v984, 1, v1535);
              v984 += v1535;
              v983 += v1535;
            }
            while (v983 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_298:
          switch(v203)
          {
            case 1uLL:
              v216 = v44[6];
              if (v216)
              {
                v217 = *(_DWORD **)(v45 + 152);
                v218 = v102[19];
                v219 = (int *)v44[19];
                v220 = 4 * *(void *)v102[3];
                v221 = 4 * **(void **)(v45 + 24);
                do
                {
                  *v219++ = *v217 / *v218;
                  v218 = (int *)((char *)v218 + v220);
                  v217 = (_DWORD *)((char *)v217 + v221);
                  --v216;
                }
                while (v216);
              }
              break;
            case 2uLL:
              v434 = *v46;
              if (*v46)
              {
                v435 = 0;
                v436 = 0;
                v437 = 0;
                v438 = 0;
                v439 = *(void *)(v45 + 152);
                v440 = v102[19];
                v441 = v44[19];
                v442 = *(uint64_t **)(v45 + 24);
                v443 = *v442;
                v444 = v442[1];
                v445 = v102[3];
                v447 = *(void *)v445;
                v446 = *((void *)v445 + 1);
                v448 = v46[1];
                do
                {
                  if (v448)
                  {
                    for (i = 0; i < v448; ++i)
                    {
                      *(_DWORD *)(v441 + 4 * v436 + 4 * i) = *(_DWORD *)(v439 + 4 * v438) / v440[v437];
                      v438 += v444;
                      v437 += v446;
                      v448 = v46[1];
                    }
                    v450 = v448;
                    v434 = *v46;
                    v436 += i;
                  }
                  else
                  {
                    v450 = 0;
                  }
                  v438 = v438 + v443 - v450 * v444;
                  v437 = v437 + v447 - v446 * v103[1];
                  ++v435;
                }
                while (v435 < v434);
              }
              break;
            case 3uLL:
              v451 = *v46;
              if (*v46)
              {
                v452 = 0;
                v453 = 0;
                v454 = 0;
                v455 = 0;
                v456 = *(void *)(v45 + 152);
                v457 = v102[19];
                v458 = v44[19];
                v459 = *(uint64_t **)(v45 + 24);
                v460 = *v459;
                v461 = v459[1];
                v462 = v102[3];
                v463 = *(void *)v462;
                v464 = *((void *)v462 + 1);
                v465 = v46[1];
                v466 = v465;
                do
                {
                  if (v466)
                  {
                    v467 = 0;
                    v468 = v459[2];
                    v469 = *((void *)v462 + 2);
                    v470 = v46[2];
                    do
                    {
                      if (v470)
                      {
                        for (j = 0; j < v470; ++j)
                        {
                          *(_DWORD *)(v458 + 4 * v453 + 4 * j) = *(_DWORD *)(v456 + 4 * v455) / v457[v454];
                          v455 += v468;
                          v454 += v469;
                          v470 = v46[2];
                        }
                        v472 = v470;
                        v465 = v46[1];
                        v453 += j;
                      }
                      else
                      {
                        v472 = 0;
                      }
                      v455 = v455 + v461 - v472 * v468;
                      v454 = v454 + v464 - v469 * v103[2];
                      ++v467;
                    }
                    while (v467 < v465);
                    v473 = v465;
                    v451 = *v46;
                    v466 = v465;
                  }
                  else
                  {
                    v473 = 0;
                  }
                  v455 = v455 + v460 - v473 * v461;
                  v454 = v454 + v463 - v464 * v103[1];
                  ++v452;
                }
                while (v452 < v451);
              }
              break;
            case 4uLL:
              v474 = *v46;
              if (*v46)
              {
                v475 = 0;
                v476 = 0;
                v477 = 0;
                v478 = 0;
                v479 = *(void *)(v45 + 152);
                v480 = v102[19];
                v481 = v44[19];
                v482 = *(uint64_t **)(v45 + 24);
                v483 = *v482;
                v484 = v482[1];
                v485 = v102[3];
                v486 = *(void *)v485;
                v487 = *((void *)v485 + 1);
                v488 = v46[1];
                v489 = v488;
                do
                {
                  if (v489)
                  {
                    v490 = 0;
                    v491 = v482[2];
                    v492 = *((void *)v485 + 2);
                    v493 = v46[2];
                    v494 = v493;
                    do
                    {
                      if (v494)
                      {
                        v495 = 0;
                        v496 = v482[3];
                        v497 = *((void *)v485 + 3);
                        v498 = v46[3];
                        do
                        {
                          if (v498)
                          {
                            for (k = 0; k < v498; ++k)
                            {
                              *(_DWORD *)(v481 + 4 * v476 + 4 * k) = *(_DWORD *)(v479 + 4 * v478)
                                                                   / v480[v477];
                              v478 += v496;
                              v477 += v497;
                              v498 = v46[3];
                            }
                            v500 = v498;
                            v493 = v46[2];
                            v476 += k;
                          }
                          else
                          {
                            v500 = 0;
                          }
                          v478 = v478 + v491 - v500 * v496;
                          v477 = v477 + v492 - v497 * v103[3];
                          ++v495;
                        }
                        while (v495 < v493);
                        v501 = v493;
                        v488 = v46[1];
                        v494 = v493;
                      }
                      else
                      {
                        v501 = 0;
                      }
                      v478 = v478 + v484 - v501 * v491;
                      v477 = v477 + v487 - v492 * v103[2];
                      ++v490;
                    }
                    while (v490 < v488);
                    v502 = v488;
                    v474 = *v46;
                    v489 = v488;
                  }
                  else
                  {
                    v502 = 0;
                  }
                  v478 = v478 + v483 - v502 * v484;
                  v477 = v477 + v486 - v487 * v103[1];
                  ++v475;
                }
                while (v475 < v474);
              }
              break;
            default:
              v1566 = v44[6];
              __Na = v48;
              if (v1566)
              {
                v423 = 0;
                v1508 = v102[19];
                v1526 = *(void *)(v45 + 152);
                v1503 = v44[19];
                do
                {
                  v424 = __Na;
                  if ((__Na & 0x80000000) != 0)
                  {
                    LODWORD(v425) = 0;
                  }
                  else
                  {
                    v425 = 0;
                    v426 = *(void *)(v45 + 24);
                    v427 = v423;
                    do
                    {
                      v428 = ldiv(v427, v46[v424]);
                      v427 = v428.quot;
                      v425 += *(void *)(v426 + 8 * v424--) * v428.rem;
                    }
                    while (v424 != -1);
                  }
                  v429 = 0;
                  if ((v105 & 0x80000000) == 0)
                  {
                    v430 = v102[3];
                    v431 = v105;
                    v432 = v423;
                    do
                    {
                      v433 = ldiv(v432, v103[v431]);
                      v432 = v433.quot;
                      v429 += *(void *)&v430[2 * v431--] * v433.rem;
                    }
                    while (v431 != -1);
                  }
                  *(_DWORD *)(v1503 + 4 * v423++) = *(_DWORD *)(v1526 + 4 * (int)v425)
                                                  / v1508[(int)v429];
                }
                while (v423 != v1566);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
          v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v53 = *(void **)a3;
          v54 = *a1;
          v55 = *(int **)*a1;
          v56 = (*(void *)(*a1 + 8) - (void)v55) >> 2;
          v57 = v56 - 1;
          if ((int)v56 - 1 >= -1) {
            v57 = -1;
          }
          v58 = v57 + 1;
          v59 = v56 + 1;
          break;
      }
      while (1)
      {
        v60 = v59 - 2;
        if (v59 - 2 < 0) {
          break;
        }
        --v59;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v60) != *(void *)(v53[3] + 8 * v60)) {
          goto LABEL_98;
        }
      }
      v59 = v58;
LABEL_98:
      v110 = (int **)*a2;
      v111 = *(int **)*a2;
      v112 = (*(void *)(*a2 + 8) - (void)v111) >> 2;
      v113 = v112 - 1;
      if ((int)v112 - 1 >= -1) {
        v113 = -1;
      }
      v114 = v113 + 1;
      v115 = v112 + 1;
      while (1)
      {
        v116 = v115 - 2;
        if (v115 - 2 < 0) {
          break;
        }
        --v115;
        if (*(void *)&v110[3][2 * v116] != *(void *)(v53[3] + 8 * v116)) {
          goto LABEL_144;
        }
      }
      v115 = v114;
LABEL_144:
      v147 = v56 + 1;
      while (1)
      {
        v148 = v147 - 2;
        if (v147 - 2 < 0) {
          break;
        }
        --v147;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v148)) {
          goto LABEL_179;
        }
      }
      v147 = v58;
LABEL_179:
      v161 = v112 + 1;
      while (1)
      {
        v162 = v161 - 2;
        if (v161 - 2 < 0) {
          break;
        }
        --v161;
        if (*(void *)&v110[3][2 * v162]) {
          goto LABEL_304;
        }
      }
      v161 = v114;
LABEL_304:
      v222 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v115) {
        v223 = v115;
      }
      else {
        v223 = v59;
      }
      if (v59 <= v161) {
        v59 = v161;
      }
      if (v147 > v115) {
        v115 = v147;
      }
      if (v222 > v115) {
        v224 = 1;
      }
      else {
        v224 = 4;
      }
      if (v222 <= v115) {
        v115 = (uint64_t)(v53[1] - *v53) >> 2;
      }
      if (v222 <= v59) {
        v59 = v115;
      }
      else {
        v224 = 2;
      }
      if (v222 <= v223)
      {
        v225 = v59;
      }
      else
      {
        v224 = 3;
        v225 = v223;
      }
      if (!v225) {
        goto LABEL_333;
      }
      v226 = *(void *)(v53[3] + 8 * (v225 - 1));
      if (v226 < 0x10) {
        goto LABEL_333;
      }
      switch(v224)
      {
        case 1:
          if (v225 == 2)
          {
            v1280 = *v55;
            if (*v55)
            {
              v1281 = 0;
              v1282 = 0;
              v1283 = 0;
              v1284 = *(void *)(v54 + 152);
              v1285 = v110[19];
              v1286 = (int)v226;
              v1287 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1288 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(v1284 + v1283), (const float *)((char *)v1285 + v1282), 1, v1287, 1, v1286);
                    v54 = *a1;
                    v1289 = *(void **)(*a1 + 24);
                    v1290 = v1289[1];
                    v1283 += v1290;
                    v110 = (int **)*a2;
                    v1291 = *(int **)(*a2 + 24);
                    v1292 = *((void *)v1291 + 1);
                    v1282 += v1292;
                    v1287 = (float *)((char *)v1287 + v1286);
                    ++v1288;
                    v55 = *(int **)*a1;
                    v1293 = v55[1];
                  }
                  while (v1288 < v1293);
                  v1280 = *v55;
                  v111 = *v110;
                }
                else
                {
                  v1293 = 0;
                  v1289 = *(void **)(v54 + 24);
                  v1290 = v1289[1];
                  v1291 = v110[3];
                  v1292 = *((void *)v1291 + 1);
                }
                v1283 = *v1289 + v1283 - v1293 * v1290;
                v1282 = *(void *)v1291 + v1282 - v1292 * v111[1];
                ++v1281;
              }
              while (v1281 < v1280);
            }
          }
          else if (v225 == 1)
          {
            if (*v55)
            {
              v852 = 0;
              v853 = 0;
              v854 = 0;
              v855 = *(void *)(v54 + 152);
              v856 = v110[19];
              v857 = (int)v226;
              v858 = (float *)v53[19];
              do
              {
                vDSP_svdiv((const float *)(v855 + v854), (const float *)((char *)v856 + v853), 1, v858, 1, v857);
                v854 += **(void **)(*a1 + 24);
                v853 += **(void **)(*a2 + 24);
                v858 = (float *)((char *)v858 + v857);
                ++v852;
              }
              while (v852 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1294 = 0;
            v1595 = v110[19];
            __Nbd = *(void *)(v54 + 152);
            v1551 = (int)v226;
            v1295 = (float *)v53[19];
            do
            {
              v1296 = *(void *)*a1;
              v1297 = (unint64_t)(*(void *)(*a1 + 8) - v1296) >> 2;
              v1298 = 0;
              v1299 = (v1297 - 1);
              if ((int)v1297 - 1 >= 0)
              {
                v1300 = *(void *)(*a1 + 24);
                v1301 = v1294;
                do
                {
                  v1302 = ldiv(v1301, *(int *)(v1296 + 4 * v1299));
                  v1301 = v1302.quot;
                  v1298 += *(void *)(v1300 + 8 * v1299--) * v1302.rem;
                }
                while (v1299 != -1);
              }
              v1303 = *(void *)*a2;
              v1304 = (unint64_t)(*(void *)(*a2 + 8) - v1303) >> 2;
              v1305 = 0;
              v1306 = (v1304 - 1);
              if ((int)v1304 - 1 >= 0)
              {
                v1307 = *(void *)(*a2 + 24);
                v1308 = v1294;
                do
                {
                  v1309 = ldiv(v1308, *(int *)(v1303 + 4 * v1306));
                  v1308 = v1309.quot;
                  v1305 += *(void *)(v1307 + 8 * v1306--) * v1309.rem;
                }
                while (v1306 != -1);
              }
              vDSP_svdiv((const float *)(__Nbd + (int)v1298), (const float *)((char *)v1595 + (int)v1305), 1, v1295, 1, v1551);
              v1295 = (float *)((char *)v1295 + v1551);
              v1294 += v1551;
            }
            while (v1294 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v225 == 2)
          {
            v1310 = *v55;
            if (*v55)
            {
              v1311 = 0;
              v1312 = 0;
              v1313 = 0;
              v1314 = *(void *)(v54 + 152);
              v1315 = v110[19];
              v1316 = (int)v226;
              v1317 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1318 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(v1314 + v1313), 1, (const float *)((char *)v1315 + v1312), v1317, 1, v1316);
                    v54 = *a1;
                    v1319 = *(void **)(*a1 + 24);
                    v1320 = v1319[1];
                    v1313 += v1320;
                    v110 = (int **)*a2;
                    v1321 = *(int **)(*a2 + 24);
                    v1322 = *((void *)v1321 + 1);
                    v1312 += v1322;
                    v1317 = (float *)((char *)v1317 + v1316);
                    ++v1318;
                    v55 = *(int **)*a1;
                    v1323 = v55[1];
                  }
                  while (v1318 < v1323);
                  v1310 = *v55;
                  v111 = *v110;
                }
                else
                {
                  v1323 = 0;
                  v1319 = *(void **)(v54 + 24);
                  v1320 = v1319[1];
                  v1321 = v110[3];
                  v1322 = *((void *)v1321 + 1);
                }
                v1313 = *v1319 + v1313 - v1323 * v1320;
                v1312 = *(void *)v1321 + v1312 - v1322 * v111[1];
                ++v1311;
              }
              while (v1311 < v1310);
            }
          }
          else if (v225 == 1)
          {
            if (*v55)
            {
              v859 = 0;
              v860 = 0;
              v861 = 0;
              v862 = *(void *)(v54 + 152);
              v863 = v110[19];
              v864 = (int)v226;
              v865 = (float *)v53[19];
              do
              {
                vDSP_vsdiv((const float *)(v862 + v861), 1, (const float *)((char *)v863 + v860), v865, 1, v864);
                v861 += **(void **)(*a1 + 24);
                v860 += **(void **)(*a2 + 24);
                v865 = (float *)((char *)v865 + v864);
                ++v859;
              }
              while (v859 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1324 = 0;
            v1596 = v110[19];
            __Nbe = *(void *)(v54 + 152);
            v1552 = (int)v226;
            v1325 = (float *)v53[19];
            do
            {
              v1326 = *(void *)*a1;
              v1327 = (unint64_t)(*(void *)(*a1 + 8) - v1326) >> 2;
              v1328 = 0;
              v1329 = (v1327 - 1);
              if ((int)v1327 - 1 >= 0)
              {
                v1330 = *(void *)(*a1 + 24);
                v1331 = v1324;
                do
                {
                  v1332 = ldiv(v1331, *(int *)(v1326 + 4 * v1329));
                  v1331 = v1332.quot;
                  v1328 += *(void *)(v1330 + 8 * v1329--) * v1332.rem;
                }
                while (v1329 != -1);
              }
              v1333 = *(void *)*a2;
              v1334 = (unint64_t)(*(void *)(*a2 + 8) - v1333) >> 2;
              v1335 = 0;
              v1336 = (v1334 - 1);
              if ((int)v1334 - 1 >= 0)
              {
                v1337 = *(void *)(*a2 + 24);
                v1338 = v1324;
                do
                {
                  v1339 = ldiv(v1338, *(int *)(v1333 + 4 * v1336));
                  v1338 = v1339.quot;
                  v1335 += *(void *)(v1337 + 8 * v1336--) * v1339.rem;
                }
                while (v1336 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbe + (int)v1328), 1, (const float *)((char *)v1596 + (int)v1335), v1325, 1, v1552);
              v1325 = (float *)((char *)v1325 + v1552);
              v1324 += v1552;
            }
            while (v1324 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v225 == 2)
          {
            v999 = *v55;
            if (*v55)
            {
              v1000 = 0;
              v1001 = 0;
              v1002 = 0;
              v1003 = *(void *)(v54 + 152);
              v1004 = v110[19];
              v1005 = (int)v226;
              v1006 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  v1007 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)((char *)v1004 + v1001), 1, (const float *)(v1003 + v1002), 1, v1006, 1, v1005);
                    v54 = *a1;
                    v1008 = *(void **)(*a1 + 24);
                    v1009 = v1008[1];
                    v1002 += v1009;
                    v110 = (int **)*a2;
                    v1010 = *(int **)(*a2 + 24);
                    v1011 = *((void *)v1010 + 1);
                    v1001 += v1011;
                    v1006 = (float *)((char *)v1006 + v1005);
                    ++v1007;
                    v55 = *(int **)*a1;
                    v1012 = v55[1];
                  }
                  while (v1007 < v1012);
                  v999 = *v55;
                  v111 = *v110;
                }
                else
                {
                  v1012 = 0;
                  v1008 = *(void **)(v54 + 24);
                  v1009 = v1008[1];
                  v1010 = v110[3];
                  v1011 = *((void *)v1010 + 1);
                }
                v1002 = *v1008 + v1002 - v1012 * v1009;
                v1001 = *(void *)v1010 + v1001 - v1011 * v111[1];
                ++v1000;
              }
              while (v1000 < v999);
            }
          }
          else if (v225 == 1)
          {
            if (*v55)
            {
              v227 = 0;
              v228 = 0;
              v229 = 0;
              v230 = *(void *)(v54 + 152);
              v231 = v110[19];
              v232 = (int)v226;
              v233 = (float *)v53[19];
              do
              {
                vDSP_vdiv((const float *)((char *)v231 + v228), 1, (const float *)(v230 + v229), 1, v233, 1, v232);
                v229 += **(void **)(*a1 + 24);
                v228 += **(void **)(*a2 + 24);
                v233 = (float *)((char *)v233 + v232);
                ++v227;
              }
              while (v227 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            v1013 = 0;
            v1578 = v110[19];
            __Nm = *(void *)(v54 + 152);
            v1536 = (int)v226;
            v1014 = (float *)v53[19];
            do
            {
              v1015 = *(void *)*a1;
              v1016 = (unint64_t)(*(void *)(*a1 + 8) - v1015) >> 2;
              v1017 = 0;
              v1018 = (v1016 - 1);
              if ((int)v1016 - 1 >= 0)
              {
                v1019 = *(void *)(*a1 + 24);
                v1020 = v1013;
                do
                {
                  v1021 = ldiv(v1020, *(int *)(v1015 + 4 * v1018));
                  v1020 = v1021.quot;
                  v1017 += *(void *)(v1019 + 8 * v1018--) * v1021.rem;
                }
                while (v1018 != -1);
              }
              v1022 = *(void *)*a2;
              v1023 = (unint64_t)(*(void *)(*a2 + 8) - v1022) >> 2;
              v1024 = 0;
              v1025 = (v1023 - 1);
              if ((int)v1023 - 1 >= 0)
              {
                v1026 = *(void *)(*a2 + 24);
                v1027 = v1013;
                do
                {
                  v1028 = ldiv(v1027, *(int *)(v1022 + 4 * v1025));
                  v1027 = v1028.quot;
                  v1024 += *(void *)(v1026 + 8 * v1025--) * v1028.rem;
                }
                while (v1025 != -1);
              }
              vDSP_vdiv((const float *)((char *)v1578 + (int)v1024), 1, (const float *)(__Nm + (int)v1017), 1, v1014, 1, v1536);
              v1014 = (float *)((char *)v1014 + v1536);
              v1013 += v1536;
            }
            while (v1013 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_333:
          switch(v222)
          {
            case 1uLL:
              if (v53[6])
              {
                v234 = 0;
                v235 = 0;
                v236 = 0;
                v237 = *(void *)(v54 + 152);
                v238 = v110[19];
                v239 = v53[19];
                do
                {
                  *(unsigned char *)(v239 + v234) = *(char *)(v237 + v236) / *((char *)v238 + v235);
                  v236 += **(void **)(*a1 + 24);
                  v235 += **(void **)(*a2 + 24);
                  ++v234;
                }
                while (v234 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              v519 = *v55;
              if (*v55)
              {
                v520 = 0;
                v521 = 0;
                v522 = 0;
                v523 = 0;
                v524 = *(void *)(v54 + 152);
                v525 = v110[19];
                v526 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v527 = 0;
                    do
                    {
                      *(unsigned char *)(v526 + v521 + v527) = *(char *)(v524 + v523) / *((char *)v525 + v522);
                      v54 = *a1;
                      v528 = *(void **)(*a1 + 24);
                      v529 = v528[1];
                      v523 += v529;
                      v110 = (int **)*a2;
                      v530 = *(int **)(*a2 + 24);
                      v531 = *((void *)v530 + 1);
                      v522 += v531;
                      ++v527;
                      v55 = *(int **)*a1;
                      v532 = v55[1];
                    }
                    while (v527 < v532);
                    v519 = *v55;
                    v111 = *v110;
                    v521 += v527;
                  }
                  else
                  {
                    v532 = 0;
                    v528 = *(void **)(v54 + 24);
                    v529 = v528[1];
                    v530 = v110[3];
                    v531 = *((void *)v530 + 1);
                  }
                  v523 = *v528 + v523 - v532 * v529;
                  v522 = *(void *)v530 + v522 - v531 * v111[1];
                  ++v520;
                }
                while (v520 < v519);
              }
              break;
            case 3uLL:
              v533 = *v55;
              if (*v55)
              {
                v534 = 0;
                v535 = 0;
                v536 = 0;
                v537 = 0;
                v538 = *(void *)(v54 + 152);
                v539 = v110[19];
                v540 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v541 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v542 = 0;
                        do
                        {
                          *(unsigned char *)(v540 + v535 + v542) = *(char *)(v538 + v537) / *((char *)v539 + v536);
                          v54 = *a1;
                          v543 = *(void **)(*a1 + 24);
                          v544 = v543[2];
                          v537 += v544;
                          v110 = (int **)*a2;
                          v545 = *(int **)(*a2 + 24);
                          v546 = *((void *)v545 + 2);
                          v536 += v546;
                          ++v542;
                          v55 = *(int **)*a1;
                          v547 = v55[2];
                        }
                        while (v542 < v547);
                        v111 = *v110;
                        v535 += v542;
                      }
                      else
                      {
                        v547 = 0;
                        v543 = *(void **)(v54 + 24);
                        v544 = v543[2];
                        v545 = v110[3];
                        v546 = *((void *)v545 + 2);
                      }
                      v548 = v543[1];
                      v537 = v548 + v537 - v547 * v544;
                      v536 = *((void *)v545 + 1) + v536 - v546 * v111[2];
                      ++v541;
                      v549 = v55[1];
                    }
                    while (v541 < v549);
                    v533 = *v55;
                  }
                  else
                  {
                    v549 = 0;
                    v543 = *(void **)(v54 + 24);
                    v548 = v543[1];
                  }
                  v537 = *v543 + v537 - v549 * v548;
                  v536 = *(void *)v110[3] + v536 - *((void *)v110[3] + 1) * v111[1];
                  ++v534;
                }
                while (v534 < v533);
              }
              break;
            case 4uLL:
              v550 = *v55;
              if (*v55)
              {
                v551 = 0;
                v552 = 0;
                v553 = 0;
                v554 = 0;
                v555 = *(void *)(v54 + 152);
                v556 = v110[19];
                v557 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    v558 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        v559 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            v560 = 0;
                            do
                            {
                              *(unsigned char *)(v557 + v552 + v560) = *(char *)(v555 + v554) / *((char *)v556 + v553);
                              v54 = *a1;
                              v561 = *(void **)(*a1 + 24);
                              v562 = v561[3];
                              v554 += v562;
                              v110 = (int **)*a2;
                              v563 = *(int **)(*a2 + 24);
                              v564 = *((void *)v563 + 3);
                              v553 += v564;
                              ++v560;
                              v55 = *(int **)*a1;
                              v565 = v55[3];
                            }
                            while (v560 < v565);
                            v111 = *v110;
                            v552 += v560;
                          }
                          else
                          {
                            v565 = 0;
                            v561 = *(void **)(v54 + 24);
                            v562 = v561[3];
                            v563 = v110[3];
                            v564 = *((void *)v563 + 3);
                          }
                          v566 = v561[2];
                          v554 = v566 + v554 - v565 * v562;
                          v553 = *((void *)v563 + 2) + v553 - v564 * v111[3];
                          ++v559;
                          v567 = v55[2];
                        }
                        while (v559 < v567);
                      }
                      else
                      {
                        v567 = 0;
                        v561 = *(void **)(v54 + 24);
                        v566 = v561[2];
                      }
                      v554 = v561[1] + v554 - v567 * v566;
                      v553 = *((void *)v110[3] + 1) + v553 - *((void *)v110[3] + 2) * v111[2];
                      ++v558;
                      v568 = v55[1];
                    }
                    while (v558 < v568);
                    v550 = *v55;
                  }
                  else
                  {
                    v568 = 0;
                  }
                  v554 = **(void **)(v54 + 24) + v554 - *(void *)(*(void *)(v54 + 24) + 8) * v568;
                  v553 = *(void *)v110[3] + v553 - *((void *)v110[3] + 1) * v111[1];
                  ++v551;
                }
                while (v551 < v550);
              }
              break;
            default:
              if (v53[6])
              {
                v503 = 0;
                v1567 = v110[19];
                __Nb = *(void *)(v54 + 152);
                v504 = v53[19];
                do
                {
                  v505 = *(void *)*a1;
                  v506 = (unint64_t)(*(void *)(*a1 + 8) - v505) >> 2;
                  v507 = 0;
                  v508 = (v506 - 1);
                  if ((int)v506 - 1 >= 0)
                  {
                    v509 = *(void *)(*a1 + 24);
                    v510 = v503;
                    do
                    {
                      v511 = ldiv(v510, *(int *)(v505 + 4 * v508));
                      v510 = v511.quot;
                      v507 += *(void *)(v509 + 8 * v508--) * v511.rem;
                    }
                    while (v508 != -1);
                  }
                  v512 = *(void *)*a2;
                  v513 = (unint64_t)(*(void *)(*a2 + 8) - v512) >> 2;
                  v514 = 0;
                  v515 = (v513 - 1);
                  if ((int)v513 - 1 >= 0)
                  {
                    v516 = *(void *)(*a2 + 24);
                    v517 = v503;
                    do
                    {
                      v518 = ldiv(v517, *(int *)(v512 + 4 * v515));
                      v517 = v518.quot;
                      v514 += *(void *)(v516 + 8 * v515--) * v518.rem;
                    }
                    while (v515 != -1);
                  }
                  *(unsigned char *)(v504 + v503++) = *(char *)(__Nb + (int)v507) / *((char *)v1567 + (int)v514);
                }
                while (v503 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
          v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(void *)a3 + 152) = v10;
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v61 = *(void **)a3;
          v62 = *a1;
          v63 = *(int **)*a1;
          v64 = (*(void *)(*a1 + 8) - (void)v63) >> 2;
          v65 = (v64 - 1);
          if ((int)v65 >= -1) {
            v66 = -1;
          }
          else {
            v66 = v64 - 1;
          }
          v67 = v66 + 1;
          v68 = v64 + 1;
          break;
      }
      while (1)
      {
        v69 = v68 - 2;
        if (v68 - 2 < 0) {
          break;
        }
        --v68;
        if (*(void *)(*(void *)(v62 + 24) + 8 * v69) != *(void *)(v61[3] + 8 * v69)) {
          goto LABEL_105;
        }
      }
      v68 = v67;
LABEL_105:
      v117 = (int **)*a2;
      v118 = *(int **)*a2;
      v119 = (*(void *)(*a2 + 8) - (void)v118) >> 2;
      v120 = (v119 - 1);
      if ((int)v120 >= -1) {
        v121 = -1;
      }
      else {
        v121 = v119 - 1;
      }
      v122 = v121 + 1;
      v123 = v119 + 1;
      while (1)
      {
        v124 = v123 - 2;
        if (v123 - 2 < 0) {
          break;
        }
        --v123;
        if (*(void *)&v117[3][2 * v124] != *(void *)(v61[3] + 8 * v124)) {
          goto LABEL_149;
        }
      }
      v123 = v122;
LABEL_149:
      v149 = v64 + 1;
      while (1)
      {
        v150 = v149 - 2;
        if (v149 - 2 < 0) {
          break;
        }
        --v149;
        if (*(void *)(*(void *)(v62 + 24) + 8 * v150)) {
          goto LABEL_184;
        }
      }
      v149 = v67;
LABEL_184:
      v163 = v119 + 1;
      while (1)
      {
        v164 = v163 - 2;
        if (v163 - 2 < 0) {
          break;
        }
        --v163;
        if (*(void *)&v117[3][2 * v164]) {
          goto LABEL_339;
        }
      }
      v163 = v122;
LABEL_339:
      v240 = (uint64_t)(v61[1] - *v61) >> 2;
      if (v68 <= v123) {
        v241 = v123;
      }
      else {
        v241 = v68;
      }
      if (v68 <= v163) {
        v68 = v163;
      }
      if (v149 > v123) {
        v123 = v149;
      }
      if (v240 > v123) {
        v242 = 1;
      }
      else {
        v242 = 4;
      }
      if (v240 <= v123) {
        v123 = (uint64_t)(v61[1] - *v61) >> 2;
      }
      if (v240 <= v68) {
        v68 = v123;
      }
      else {
        v242 = 2;
      }
      if (v240 <= v241)
      {
        v243 = v68;
      }
      else
      {
        v242 = 3;
        v243 = v241;
      }
      if (!v243) {
        goto LABEL_368;
      }
      v244 = *(void *)(v61[3] + 8 * (v243 - 1));
      if (v244 < 0x10) {
        goto LABEL_368;
      }
      switch(v242)
      {
        case 1:
          if (v243 == 2)
          {
            v1340 = *v63;
            if (*v63)
            {
              v1341 = 0;
              v1342 = 0;
              __Nbf = *(void *)(v62 + 152);
              v1597 = v117[19];
              v1343 = (float *)v61[19];
              v1520 = 0;
              v1553 = (int)v244;
              v1344 = 4 * (int)v244;
              do
              {
                if (v63[1])
                {
                  v1345 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nbf + 4 * v1342), (const float *)&v1597[v1341], 1, v1343, 1, v1553);
                    v62 = *a1;
                    v1346 = *(void **)(*a1 + 24);
                    v1347 = v1346[1];
                    v1342 += v1347;
                    v117 = (int **)*a2;
                    v1348 = *(int **)(*a2 + 24);
                    v1349 = *((void *)v1348 + 1);
                    v1341 += v1349;
                    ++v1345;
                    v63 = *(int **)*a1;
                    v1350 = v63[1];
                    v1343 = (float *)((char *)v1343 + v1344);
                  }
                  while (v1345 < v1350);
                  v1340 = *v63;
                  v118 = *v117;
                }
                else
                {
                  v1350 = 0;
                  v1346 = *(void **)(v62 + 24);
                  v1347 = v1346[1];
                  v1348 = v117[3];
                  v1349 = *((void *)v1348 + 1);
                }
                v1342 = *v1346 + v1342 - v1350 * v1347;
                v1341 = *(void *)v1348 + v1341 - v1349 * v118[1];
                ++v1520;
              }
              while (v1520 < v1340);
            }
          }
          else if (v243 == 1)
          {
            if (*v63)
            {
              v866 = 0;
              v867 = 0;
              v868 = 0;
              v869 = *(void *)(v62 + 152);
              v870 = v117[19];
              v871 = (int)v244;
              v872 = 4 * (int)v244;
              v873 = (float *)v61[19];
              do
              {
                vDSP_svdiv((const float *)(v869 + 4 * v868), (const float *)&v870[v867], 1, v873, 1, v871);
                v868 += **(void **)(*a1 + 24);
                v867 += **(void **)(*a2 + 24);
                ++v866;
                v873 = (float *)((char *)v873 + v872);
              }
              while (v866 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            v1351 = 0;
            v1598 = v117[19];
            __Nbg = *(void *)(v62 + 152);
            v1554 = (int)v244;
            v1352 = (float *)v61[19];
            do
            {
              v1353 = *(void *)*a1;
              v1354 = (unint64_t)(*(void *)(*a1 + 8) - v1353) >> 2;
              v1355 = 0;
              v1356 = (v1354 - 1);
              if ((int)v1354 - 1 >= 0)
              {
                v1357 = *(void *)(*a1 + 24);
                v1358 = v1351;
                do
                {
                  v1359 = ldiv(v1358, *(int *)(v1353 + 4 * v1356));
                  v1358 = v1359.quot;
                  v1355 += *(void *)(v1357 + 8 * v1356--) * v1359.rem;
                }
                while (v1356 != -1);
              }
              v1360 = *(void *)*a2;
              v1361 = (unint64_t)(*(void *)(*a2 + 8) - v1360) >> 2;
              v1362 = 0;
              v1363 = (v1361 - 1);
              if ((int)v1361 - 1 >= 0)
              {
                v1364 = *(void *)(*a2 + 24);
                v1365 = v1351;
                do
                {
                  v1366 = ldiv(v1365, *(int *)(v1360 + 4 * v1363));
                  v1365 = v1366.quot;
                  v1362 += *(void *)(v1364 + 8 * v1363--) * v1366.rem;
                }
                while (v1363 != -1);
              }
              vDSP_svdiv((const float *)(__Nbg + 4 * (int)v1355), (const float *)&v1598[(int)v1362], 1, v1352, 1, v1554);
              v1352 += v1554;
              v1351 += v1554;
            }
            while (v1351 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v243 == 2)
          {
            v1367 = *v63;
            if (*v63)
            {
              v1368 = 0;
              v1369 = 0;
              __Nbh = *(void *)(v62 + 152);
              v1599 = v117[19];
              v1370 = (float *)v61[19];
              v1521 = 0;
              v1555 = (int)v244;
              v1371 = 4 * (int)v244;
              do
              {
                if (v63[1])
                {
                  v1372 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbh + 4 * v1369), 1, (const float *)&v1599[v1368], v1370, 1, v1555);
                    v62 = *a1;
                    v1373 = *(void **)(*a1 + 24);
                    v1374 = v1373[1];
                    v1369 += v1374;
                    v117 = (int **)*a2;
                    v1375 = *(int **)(*a2 + 24);
                    v1376 = *((void *)v1375 + 1);
                    v1368 += v1376;
                    ++v1372;
                    v63 = *(int **)*a1;
                    v1377 = v63[1];
                    v1370 = (float *)((char *)v1370 + v1371);
                  }
                  while (v1372 < v1377);
                  v1367 = *v63;
                  v118 = *v117;
                }
                else
                {
                  v1377 = 0;
                  v1373 = *(void **)(v62 + 24);
                  v1374 = v1373[1];
                  v1375 = v117[3];
                  v1376 = *((void *)v1375 + 1);
                }
                v1369 = *v1373 + v1369 - v1377 * v1374;
                v1368 = *(void *)v1375 + v1368 - v1376 * v118[1];
                ++v1521;
              }
              while (v1521 < v1367);
            }
          }
          else if (v243 == 1)
          {
            if (*v63)
            {
              v874 = 0;
              v875 = 0;
              v876 = 0;
              v877 = *(void *)(v62 + 152);
              v878 = v117[19];
              v879 = (int)v244;
              v880 = 4 * (int)v244;
              v881 = (float *)v61[19];
              do
              {
                vDSP_vsdiv((const float *)(v877 + 4 * v876), 1, (const float *)&v878[v875], v881, 1, v879);
                v876 += **(void **)(*a1 + 24);
                v875 += **(void **)(*a2 + 24);
                ++v874;
                v881 = (float *)((char *)v881 + v880);
              }
              while (v874 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            v1378 = 0;
            v1600 = v117[19];
            __Nbi = *(void *)(v62 + 152);
            v1556 = (int)v244;
            v1379 = (float *)v61[19];
            do
            {
              v1380 = *(void *)*a1;
              v1381 = (unint64_t)(*(void *)(*a1 + 8) - v1380) >> 2;
              v1382 = 0;
              v1383 = (v1381 - 1);
              if ((int)v1381 - 1 >= 0)
              {
                v1384 = *(void *)(*a1 + 24);
                v1385 = v1378;
                do
                {
                  v1386 = ldiv(v1385, *(int *)(v1380 + 4 * v1383));
                  v1385 = v1386.quot;
                  v1382 += *(void *)(v1384 + 8 * v1383--) * v1386.rem;
                }
                while (v1383 != -1);
              }
              v1387 = *(void *)*a2;
              v1388 = (unint64_t)(*(void *)(*a2 + 8) - v1387) >> 2;
              v1389 = 0;
              v1390 = (v1388 - 1);
              if ((int)v1388 - 1 >= 0)
              {
                v1391 = *(void *)(*a2 + 24);
                v1392 = v1378;
                do
                {
                  v1393 = ldiv(v1392, *(int *)(v1387 + 4 * v1390));
                  v1392 = v1393.quot;
                  v1389 += *(void *)(v1391 + 8 * v1390--) * v1393.rem;
                }
                while (v1390 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbi + 4 * (int)v1382), 1, (const float *)&v1600[(int)v1389], v1379, 1, v1556);
              v1379 += v1556;
              v1378 += v1556;
            }
            while (v1378 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v243 == 2)
          {
            v1029 = *v63;
            if (*v63)
            {
              v1030 = 0;
              v1031 = 0;
              __Nn = *(void *)(v62 + 152);
              v1579 = v117[19];
              v1032 = (float *)v61[19];
              v1515 = 0;
              v1537 = (int)v244;
              v1033 = 4 * (int)v244;
              do
              {
                if (v63[1])
                {
                  v1034 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1579[v1030], 1, (const float *)(__Nn + 4 * v1031), 1, v1032, 1, v1537);
                    v62 = *a1;
                    v1035 = *(void **)(*a1 + 24);
                    v1036 = v1035[1];
                    v1031 += v1036;
                    v117 = (int **)*a2;
                    v1037 = *(int **)(*a2 + 24);
                    v1038 = *((void *)v1037 + 1);
                    v1030 += v1038;
                    ++v1034;
                    v63 = *(int **)*a1;
                    v1039 = v63[1];
                    v1032 = (float *)((char *)v1032 + v1033);
                  }
                  while (v1034 < v1039);
                  v1029 = *v63;
                  v118 = *v117;
                }
                else
                {
                  v1039 = 0;
                  v1035 = *(void **)(v62 + 24);
                  v1036 = v1035[1];
                  v1037 = v117[3];
                  v1038 = *((void *)v1037 + 1);
                }
                v1031 = *v1035 + v1031 - v1039 * v1036;
                v1030 = *(void *)v1037 + v1030 - v1038 * v118[1];
                ++v1515;
              }
              while (v1515 < v1029);
            }
          }
          else if (v243 == 1)
          {
            if (*v63)
            {
              v245 = 0;
              v246 = 0;
              v247 = 0;
              v248 = *(void *)(v62 + 152);
              v249 = v117[19];
              v250 = (int)v244;
              v251 = 4 * (int)v244;
              v252 = (float *)v61[19];
              do
              {
                vDSP_vdiv((const float *)&v249[v246], 1, (const float *)(v248 + 4 * v247), 1, v252, 1, v250);
                v247 += **(void **)(*a1 + 24);
                v246 += **(void **)(*a2 + 24);
                ++v245;
                v252 = (float *)((char *)v252 + v251);
              }
              while (v245 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            v1040 = 0;
            v1580 = v117[19];
            __No = *(void *)(v62 + 152);
            v1538 = (int)v244;
            v1041 = (float *)v61[19];
            do
            {
              v1042 = *(void *)*a1;
              v1043 = (unint64_t)(*(void *)(*a1 + 8) - v1042) >> 2;
              v1044 = 0;
              v1045 = (v1043 - 1);
              if ((int)v1043 - 1 >= 0)
              {
                v1046 = *(void *)(*a1 + 24);
                v1047 = v1040;
                do
                {
                  v1048 = ldiv(v1047, *(int *)(v1042 + 4 * v1045));
                  v1047 = v1048.quot;
                  v1044 += *(void *)(v1046 + 8 * v1045--) * v1048.rem;
                }
                while (v1045 != -1);
              }
              v1049 = *(void *)*a2;
              v1050 = (unint64_t)(*(void *)(*a2 + 8) - v1049) >> 2;
              v1051 = 0;
              v1052 = (v1050 - 1);
              if ((int)v1050 - 1 >= 0)
              {
                v1053 = *(void *)(*a2 + 24);
                v1054 = v1040;
                do
                {
                  v1055 = ldiv(v1054, *(int *)(v1049 + 4 * v1052));
                  v1054 = v1055.quot;
                  v1051 += *(void *)(v1053 + 8 * v1052--) * v1055.rem;
                }
                while (v1052 != -1);
              }
              vDSP_vdiv((const float *)&v1580[(int)v1051], 1, (const float *)(__No + 4 * (int)v1044), 1, v1041, 1, v1538);
              v1041 += v1538;
              v1040 += v1538;
            }
            while (v1040 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_368:
          switch(v240)
          {
            case 1uLL:
              v253 = v61[6];
              if (v253)
              {
                v254 = *(_DWORD **)(v62 + 152);
                v255 = v117[19];
                v256 = (int *)v61[19];
                v257 = 4 * *(void *)v117[3];
                v258 = 4 * **(void **)(v62 + 24);
                do
                {
                  *v256++ = *v254 / *v255;
                  v255 = (int *)((char *)v255 + v257);
                  v254 = (_DWORD *)((char *)v254 + v258);
                  --v253;
                }
                while (v253);
              }
              break;
            case 2uLL:
              v580 = *v63;
              if (*v63)
              {
                v581 = 0;
                v582 = 0;
                v583 = 0;
                v584 = 0;
                v585 = *(void *)(v62 + 152);
                v586 = v117[19];
                v587 = v61[19];
                v588 = *(uint64_t **)(v62 + 24);
                v589 = *v588;
                v590 = v588[1];
                v591 = v117[3];
                v593 = *(void *)v591;
                v592 = *((void *)v591 + 1);
                v594 = v63[1];
                do
                {
                  if (v594)
                  {
                    for (m = 0; m < v594; ++m)
                    {
                      *(_DWORD *)(v587 + 4 * v582 + 4 * m) = *(_DWORD *)(v585 + 4 * v584) / v586[v583];
                      v584 += v590;
                      v583 += v592;
                      v594 = v63[1];
                    }
                    v596 = v594;
                    v580 = *v63;
                    v582 += m;
                  }
                  else
                  {
                    v596 = 0;
                  }
                  v584 = v584 + v589 - v596 * v590;
                  v583 = v583 + v593 - v592 * v118[1];
                  ++v581;
                }
                while (v581 < v580);
              }
              break;
            case 3uLL:
              v597 = *v63;
              if (*v63)
              {
                v598 = 0;
                v599 = 0;
                v600 = 0;
                v601 = 0;
                v602 = *(void *)(v62 + 152);
                v603 = v117[19];
                v604 = v61[19];
                v605 = *(uint64_t **)(v62 + 24);
                v606 = *v605;
                v607 = v605[1];
                v608 = v117[3];
                v609 = *(void *)v608;
                v610 = *((void *)v608 + 1);
                v611 = v63[1];
                v612 = v611;
                do
                {
                  if (v612)
                  {
                    v613 = 0;
                    v614 = v605[2];
                    v615 = *((void *)v608 + 2);
                    v616 = v63[2];
                    do
                    {
                      if (v616)
                      {
                        for (n = 0; n < v616; ++n)
                        {
                          *(_DWORD *)(v604 + 4 * v599 + 4 * n) = *(_DWORD *)(v602 + 4 * v601) / v603[v600];
                          v601 += v614;
                          v600 += v615;
                          v616 = v63[2];
                        }
                        v618 = v616;
                        v611 = v63[1];
                        v599 += n;
                      }
                      else
                      {
                        v618 = 0;
                      }
                      v601 = v601 + v607 - v618 * v614;
                      v600 = v600 + v610 - v615 * v118[2];
                      ++v613;
                    }
                    while (v613 < v611);
                    v619 = v611;
                    v597 = *v63;
                    v612 = v611;
                  }
                  else
                  {
                    v619 = 0;
                  }
                  v601 = v601 + v606 - v619 * v607;
                  v600 = v600 + v609 - v610 * v118[1];
                  ++v598;
                }
                while (v598 < v597);
              }
              break;
            case 4uLL:
              v620 = *v63;
              if (*v63)
              {
                v621 = 0;
                v622 = 0;
                v623 = 0;
                v624 = 0;
                v625 = *(void *)(v62 + 152);
                v626 = v117[19];
                v627 = v61[19];
                v628 = *(uint64_t **)(v62 + 24);
                v629 = *v628;
                v630 = v628[1];
                v631 = v117[3];
                v632 = *(void *)v631;
                v633 = *((void *)v631 + 1);
                v634 = v63[1];
                v635 = v634;
                do
                {
                  if (v635)
                  {
                    v636 = 0;
                    v637 = v628[2];
                    v638 = *((void *)v631 + 2);
                    v639 = v63[2];
                    v640 = v639;
                    do
                    {
                      if (v640)
                      {
                        v641 = 0;
                        v642 = v628[3];
                        v643 = *((void *)v631 + 3);
                        v644 = v63[3];
                        do
                        {
                          if (v644)
                          {
                            for (ii = 0; ii < v644; ++ii)
                            {
                              *(_DWORD *)(v627 + 4 * v622 + 4 * ii) = *(_DWORD *)(v625 + 4 * v624) / v626[v623];
                              v624 += v642;
                              v623 += v643;
                              v644 = v63[3];
                            }
                            v646 = v644;
                            v639 = v63[2];
                            v622 += ii;
                          }
                          else
                          {
                            v646 = 0;
                          }
                          v624 = v624 + v637 - v646 * v642;
                          v623 = v623 + v638 - v643 * v118[3];
                          ++v641;
                        }
                        while (v641 < v639);
                        v647 = v639;
                        v634 = v63[1];
                        v640 = v639;
                      }
                      else
                      {
                        v647 = 0;
                      }
                      v624 = v624 + v630 - v647 * v637;
                      v623 = v623 + v633 - v638 * v118[2];
                      ++v636;
                    }
                    while (v636 < v634);
                    v648 = v634;
                    v620 = *v63;
                    v635 = v634;
                  }
                  else
                  {
                    v648 = 0;
                  }
                  v624 = v624 + v629 - v648 * v630;
                  v623 = v623 + v632 - v633 * v118[1];
                  ++v621;
                }
                while (v621 < v620);
              }
              break;
            default:
              v1568 = v61[6];
              __Nc = v65;
              if (v1568)
              {
                v569 = 0;
                v1509 = v117[19];
                v1527 = *(void *)(v62 + 152);
                v1504 = v61[19];
                do
                {
                  v570 = __Nc;
                  if ((__Nc & 0x80000000) != 0)
                  {
                    LODWORD(v571) = 0;
                  }
                  else
                  {
                    v571 = 0;
                    v572 = *(void *)(v62 + 24);
                    v573 = v569;
                    do
                    {
                      v574 = ldiv(v573, v63[v570]);
                      v573 = v574.quot;
                      v571 += *(void *)(v572 + 8 * v570--) * v574.rem;
                    }
                    while (v570 != -1);
                  }
                  v575 = 0;
                  if ((v120 & 0x80000000) == 0)
                  {
                    v576 = v117[3];
                    v577 = v120;
                    v578 = v569;
                    do
                    {
                      v579 = ldiv(v578, v118[v577]);
                      v578 = v579.quot;
                      v575 += *(void *)&v576[2 * v577--] * v579.rem;
                    }
                    while (v577 != -1);
                  }
                  *(_DWORD *)(v1504 + 4 * v569++) = *(_DWORD *)(v1527 + 4 * (int)v571) / v1509[(int)v575];
                }
                while (v569 != v1568);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_19;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_25;
        default:
          v70 = *(void **)a3;
          v71 = *a1;
          v72 = *(int **)*a1;
          v73 = (*(void *)(*a1 + 8) - (void)v72) >> 2;
          v74 = (v73 - 1);
          if ((int)v74 >= -1) {
            v75 = -1;
          }
          else {
            v75 = v73 - 1;
          }
          v76 = v75 + 1;
          v77 = v73 + 1;
          break;
      }
      while (1)
      {
        v78 = v77 - 2;
        if (v77 - 2 < 0) {
          break;
        }
        --v77;
        if (*(void *)(*(void *)(v71 + 24) + 8 * v78) != *(void *)(v70[3] + 8 * v78)) {
          goto LABEL_113;
        }
      }
      v77 = v76;
LABEL_113:
      v125 = (int **)*a2;
      v126 = *(int **)*a2;
      v127 = (*(void *)(*a2 + 8) - (void)v126) >> 2;
      v128 = (v127 - 1);
      if ((int)v128 >= -1) {
        v129 = -1;
      }
      else {
        v129 = v127 - 1;
      }
      v130 = v129 + 1;
      v131 = v127 + 1;
      while (1)
      {
        v132 = v131 - 2;
        if (v131 - 2 < 0) {
          break;
        }
        --v131;
        if (*(void *)&v125[3][2 * v132] != *(void *)(v70[3] + 8 * v132)) {
          goto LABEL_154;
        }
      }
      v131 = v130;
LABEL_154:
      v151 = v73 + 1;
      while (1)
      {
        v152 = v151 - 2;
        if (v151 - 2 < 0) {
          break;
        }
        --v151;
        if (*(void *)(*(void *)(v71 + 24) + 8 * v152)) {
          goto LABEL_189;
        }
      }
      v151 = v76;
LABEL_189:
      v165 = v127 + 1;
      while (1)
      {
        v166 = v165 - 2;
        if (v165 - 2 < 0) {
          break;
        }
        --v165;
        if (*(void *)&v125[3][2 * v166]) {
          goto LABEL_374;
        }
      }
      v165 = v130;
LABEL_374:
      v259 = (uint64_t)(v70[1] - *v70) >> 2;
      if (v77 <= v131) {
        v260 = v131;
      }
      else {
        v260 = v77;
      }
      if (v77 <= v165) {
        v77 = v165;
      }
      if (v151 > v131) {
        v131 = v151;
      }
      if (v259 > v131) {
        v261 = 1;
      }
      else {
        v261 = 4;
      }
      if (v259 <= v131) {
        v131 = (uint64_t)(v70[1] - *v70) >> 2;
      }
      if (v259 <= v77) {
        v77 = v131;
      }
      else {
        v261 = 2;
      }
      if (v259 <= v260)
      {
        v262 = v77;
      }
      else
      {
        v261 = 3;
        v262 = v260;
      }
      if (!v262) {
        goto LABEL_403;
      }
      v263 = *(void *)(v70[3] + 8 * (v262 - 1));
      if (v263 < 0x10) {
        goto LABEL_403;
      }
      switch(v261)
      {
        case 1:
          if (v262 == 2)
          {
            v1394 = *v72;
            if (*v72)
            {
              v1395 = 0;
              v1396 = 0;
              __Nbj = *(void *)(v71 + 152);
              v1601 = v125[19];
              v1397 = (float *)v70[19];
              v1522 = 0;
              v1557 = (int)v263;
              v1398 = 8 * (int)v263;
              do
              {
                if (v72[1])
                {
                  v1399 = 0;
                  do
                  {
                    vDSP_svdiv((const float *)(__Nbj + 8 * v1396), (const float *)&v1601[2 * v1395], 1, v1397, 1, v1557);
                    v71 = *a1;
                    v1400 = *(void **)(*a1 + 24);
                    v1401 = v1400[1];
                    v1396 += v1401;
                    v125 = (int **)*a2;
                    v1402 = *(int **)(*a2 + 24);
                    v1403 = *((void *)v1402 + 1);
                    v1395 += v1403;
                    ++v1399;
                    v72 = *(int **)*a1;
                    v1404 = v72[1];
                    v1397 = (float *)((char *)v1397 + v1398);
                  }
                  while (v1399 < v1404);
                  v1394 = *v72;
                  v126 = *v125;
                }
                else
                {
                  v1404 = 0;
                  v1400 = *(void **)(v71 + 24);
                  v1401 = v1400[1];
                  v1402 = v125[3];
                  v1403 = *((void *)v1402 + 1);
                }
                v1396 = *v1400 + v1396 - v1404 * v1401;
                v1395 = *(void *)v1402 + v1395 - v1403 * v126[1];
                ++v1522;
              }
              while (v1522 < v1394);
            }
          }
          else if (v262 == 1)
          {
            if (*v72)
            {
              v882 = 0;
              v883 = 0;
              v884 = 0;
              v885 = *(void *)(v71 + 152);
              v886 = v125[19];
              v887 = (int)v263;
              v888 = 8 * (int)v263;
              v889 = (float *)v70[19];
              do
              {
                vDSP_svdiv((const float *)(v885 + 8 * v884), (const float *)&v886[2 * v883], 1, v889, 1, v887);
                v884 += **(void **)(*a1 + 24);
                v883 += **(void **)(*a2 + 24);
                ++v882;
                v889 = (float *)((char *)v889 + v888);
              }
              while (v882 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            v1405 = 0;
            v1602 = v125[19];
            __Nbk = *(void *)(v71 + 152);
            v1558 = (int)v263;
            v1406 = (float *)v70[19];
            do
            {
              v1407 = *(void *)*a1;
              v1408 = (unint64_t)(*(void *)(*a1 + 8) - v1407) >> 2;
              v1409 = 0;
              v1410 = (v1408 - 1);
              if ((int)v1408 - 1 >= 0)
              {
                v1411 = *(void *)(*a1 + 24);
                v1412 = v1405;
                do
                {
                  v1413 = ldiv(v1412, *(int *)(v1407 + 4 * v1410));
                  v1412 = v1413.quot;
                  v1409 += *(void *)(v1411 + 8 * v1410--) * v1413.rem;
                }
                while (v1410 != -1);
              }
              v1414 = *(void *)*a2;
              v1415 = (unint64_t)(*(void *)(*a2 + 8) - v1414) >> 2;
              v1416 = 0;
              v1417 = (v1415 - 1);
              if ((int)v1415 - 1 >= 0)
              {
                v1418 = *(void *)(*a2 + 24);
                v1419 = v1405;
                do
                {
                  v1420 = ldiv(v1419, *(int *)(v1414 + 4 * v1417));
                  v1419 = v1420.quot;
                  v1416 += *(void *)(v1418 + 8 * v1417--) * v1420.rem;
                }
                while (v1417 != -1);
              }
              vDSP_svdiv((const float *)(__Nbk + 8 * (int)v1409), (const float *)&v1602[2 * (int)v1416], 1, v1406, 1, v1558);
              v1406 += 2 * v1558;
              v1405 += v1558;
            }
            while (v1405 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v262 == 2)
          {
            v1421 = *v72;
            if (*v72)
            {
              v1422 = 0;
              v1423 = 0;
              __Nbl = *(void *)(v71 + 152);
              v1603 = v125[19];
              v1424 = (float *)v70[19];
              v1523 = 0;
              v1559 = (int)v263;
              v1425 = 8 * (int)v263;
              do
              {
                if (v72[1])
                {
                  v1426 = 0;
                  do
                  {
                    vDSP_vsdiv((const float *)(__Nbl + 8 * v1423), 1, (const float *)&v1603[2 * v1422], v1424, 1, v1559);
                    v71 = *a1;
                    v1427 = *(void **)(*a1 + 24);
                    v1428 = v1427[1];
                    v1423 += v1428;
                    v125 = (int **)*a2;
                    v1429 = *(int **)(*a2 + 24);
                    v1430 = *((void *)v1429 + 1);
                    v1422 += v1430;
                    ++v1426;
                    v72 = *(int **)*a1;
                    v1431 = v72[1];
                    v1424 = (float *)((char *)v1424 + v1425);
                  }
                  while (v1426 < v1431);
                  v1421 = *v72;
                  v126 = *v125;
                }
                else
                {
                  v1431 = 0;
                  v1427 = *(void **)(v71 + 24);
                  v1428 = v1427[1];
                  v1429 = v125[3];
                  v1430 = *((void *)v1429 + 1);
                }
                v1423 = *v1427 + v1423 - v1431 * v1428;
                v1422 = *(void *)v1429 + v1422 - v1430 * v126[1];
                ++v1523;
              }
              while (v1523 < v1421);
            }
          }
          else if (v262 == 1)
          {
            if (*v72)
            {
              v890 = 0;
              v891 = 0;
              v892 = 0;
              v893 = *(void *)(v71 + 152);
              v894 = v125[19];
              v895 = (int)v263;
              v896 = 8 * (int)v263;
              v897 = (float *)v70[19];
              do
              {
                vDSP_vsdiv((const float *)(v893 + 8 * v892), 1, (const float *)&v894[2 * v891], v897, 1, v895);
                v892 += **(void **)(*a1 + 24);
                v891 += **(void **)(*a2 + 24);
                ++v890;
                v897 = (float *)((char *)v897 + v896);
              }
              while (v890 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            v1432 = 0;
            v1604 = v125[19];
            __Nbm = *(void *)(v71 + 152);
            v1560 = (int)v263;
            v1433 = (float *)v70[19];
            do
            {
              v1434 = *(void *)*a1;
              v1435 = (unint64_t)(*(void *)(*a1 + 8) - v1434) >> 2;
              v1436 = 0;
              v1437 = (v1435 - 1);
              if ((int)v1435 - 1 >= 0)
              {
                v1438 = *(void *)(*a1 + 24);
                v1439 = v1432;
                do
                {
                  v1440 = ldiv(v1439, *(int *)(v1434 + 4 * v1437));
                  v1439 = v1440.quot;
                  v1436 += *(void *)(v1438 + 8 * v1437--) * v1440.rem;
                }
                while (v1437 != -1);
              }
              v1441 = *(void *)*a2;
              v1442 = (unint64_t)(*(void *)(*a2 + 8) - v1441) >> 2;
              v1443 = 0;
              v1444 = (v1442 - 1);
              if ((int)v1442 - 1 >= 0)
              {
                v1445 = *(void *)(*a2 + 24);
                v1446 = v1432;
                do
                {
                  v1447 = ldiv(v1446, *(int *)(v1441 + 4 * v1444));
                  v1446 = v1447.quot;
                  v1443 += *(void *)(v1445 + 8 * v1444--) * v1447.rem;
                }
                while (v1444 != -1);
              }
              vDSP_vsdiv((const float *)(__Nbm + 8 * (int)v1436), 1, (const float *)&v1604[2 * (int)v1443], v1433, 1, v1560);
              v1433 += 2 * v1560;
              v1432 += v1560;
            }
            while (v1432 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v262 == 2)
          {
            v1056 = *v72;
            if (*v72)
            {
              v1057 = 0;
              v1058 = 0;
              __Np = *(void *)(v71 + 152);
              v1581 = v125[19];
              v1059 = (float *)v70[19];
              v1516 = 0;
              v1539 = (int)v263;
              v1060 = 8 * (int)v263;
              do
              {
                if (v72[1])
                {
                  v1061 = 0;
                  do
                  {
                    vDSP_vdiv((const float *)&v1581[2 * v1057], 1, (const float *)(__Np + 8 * v1058), 1, v1059, 1, v1539);
                    v71 = *a1;
                    v1062 = *(void **)(*a1 + 24);
                    v1063 = v1062[1];
                    v1058 += v1063;
                    v125 = (int **)*a2;
                    v1064 = *(int **)(*a2 + 24);
                    v1065 = *((void *)v1064 + 1);
                    v1057 += v1065;
                    ++v1061;
                    v72 = *(int **)*a1;
                    v1066 = v72[1];
                    v1059 = (float *)((char *)v1059 + v1060);
                  }
                  while (v1061 < v1066);
                  v1056 = *v72;
                  v126 = *v125;
                }
                else
                {
                  v1066 = 0;
                  v1062 = *(void **)(v71 + 24);
                  v1063 = v1062[1];
                  v1064 = v125[3];
                  v1065 = *((void *)v1064 + 1);
                }
                v1058 = *v1062 + v1058 - v1066 * v1063;
                v1057 = *(void *)v1064 + v1057 - v1065 * v126[1];
                ++v1516;
              }
              while (v1516 < v1056);
            }
          }
          else if (v262 == 1)
          {
            if (*v72)
            {
              v264 = 0;
              v265 = 0;
              v266 = 0;
              v267 = *(void *)(v71 + 152);
              v268 = v125[19];
              v269 = (int)v263;
              v270 = 8 * (int)v263;
              v271 = (float *)v70[19];
              do
              {
                vDSP_vdiv((const float *)&v268[2 * v265], 1, (const float *)(v267 + 8 * v266), 1, v271, 1, v269);
                v266 += **(void **)(*a1 + 24);
                v265 += **(void **)(*a2 + 24);
                ++v264;
                v271 = (float *)((char *)v271 + v270);
              }
              while (v264 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            v1067 = 0;
            v1582 = v125[19];
            __Nq = *(void *)(v71 + 152);
            v1540 = (int)v263;
            v1068 = (float *)v70[19];
            do
            {
              v1069 = *(void *)*a1;
              v1070 = (unint64_t)(*(void *)(*a1 + 8) - v1069) >> 2;
              v1071 = 0;
              v1072 = (v1070 - 1);
              if ((int)v1070 - 1 >= 0)
              {
                v1073 = *(void *)(*a1 + 24);
                v1074 = v1067;
                do
                {
                  v1075 = ldiv(v1074, *(int *)(v1069 + 4 * v1072));
                  v1074 = v1075.quot;
                  v1071 += *(void *)(v1073 + 8 * v1072--) * v1075.rem;
                }
                while (v1072 != -1);
              }
              v1076 = *(void *)*a2;
              v1077 = (unint64_t)(*(void *)(*a2 + 8) - v1076) >> 2;
              v1078 = 0;
              v1079 = (v1077 - 1);
              if ((int)v1077 - 1 >= 0)
              {
                v1080 = *(void *)(*a2 + 24);
                v1081 = v1067;
                do
                {
                  v1082 = ldiv(v1081, *(int *)(v1076 + 4 * v1079));
                  v1081 = v1082.quot;
                  v1078 += *(void *)(v1080 + 8 * v1079--) * v1082.rem;
                }
                while (v1079 != -1);
              }
              vDSP_vdiv((const float *)&v1582[2 * (int)v1078], 1, (const float *)(__Nq + 8 * (int)v1071), 1, v1068, 1, v1540);
              v1068 += 2 * v1540;
              v1067 += v1540;
            }
            while (v1067 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_403:
          switch(v259)
          {
            case 1uLL:
              v272 = v70[6];
              if (v272)
              {
                v273 = *(void **)(v71 + 152);
                v274 = (uint64_t *)v125[19];
                v275 = (uint64_t *)v70[19];
                v276 = 8 * *(void *)v125[3];
                v277 = 8 * **(void **)(v71 + 24);
                do
                {
                  *v275++ = *v273 / *v274;
                  v274 = (uint64_t *)((char *)v274 + v276);
                  v273 = (void *)((char *)v273 + v277);
                  --v272;
                }
                while (v272);
              }
              break;
            case 2uLL:
              v660 = *v72;
              if (v660)
              {
                v661 = 0;
                v662 = 0;
                v663 = 0;
                v664 = 0;
                v665 = *(void *)(v71 + 152);
                v666 = v125[19];
                v667 = v70[19];
                v668 = v72[1];
                v669 = *(uint64_t **)(v71 + 24);
                v670 = *v669;
                v671 = v669[1];
                v672 = v125[3];
                v673 = *(void *)v672;
                v674 = *((void *)v672 + 1);
                v675 = v673 - v674 * v126[1];
                if (v668 <= 1) {
                  v676 = 1;
                }
                else {
                  v676 = v72[1];
                }
                v677 = v670 - v671 * v668;
                do
                {
                  if (v668)
                  {
                    v678 = v662 + v676;
                    v679 = (uint64_t *)(v667 + 8 * v662);
                    v680 = v676;
                    do
                    {
                      *v679++ = *(void *)(v665 + 8 * v664) / *(uint64_t *)&v666[2 * v663];
                      v664 += v671;
                      v663 += v674;
                      --v680;
                    }
                    while (v680);
                    v662 = v678;
                  }
                  v664 += v677;
                  v663 += v675;
                  ++v661;
                }
                while (v661 != v660);
              }
              break;
            case 3uLL:
              v681 = *v72;
              if (v681)
              {
                v682 = 0;
                v683 = 0;
                v684 = 0;
                v685 = 0;
                v686 = *(void *)(v71 + 152);
                v687 = v125[19];
                v688 = v70[19];
                v689 = v72[1];
                v690 = *(void **)(v71 + 24);
                v691 = v690[1];
                v692 = v125[3];
                v693 = *((void *)v692 + 1);
                v694 = *(void *)v692 - v693 * v126[1];
                if (v689 <= 1) {
                  v695 = 1;
                }
                else {
                  v695 = v72[1];
                }
                v696 = *v690 - v691 * v689;
                do
                {
                  if (v689)
                  {
                    v697 = 0;
                    v698 = v72[2];
                    v699 = v690[2];
                    v700 = *((void *)v692 + 2);
                    if (v698 <= 1) {
                      v701 = 1;
                    }
                    else {
                      v701 = v72[2];
                    }
                    v702 = v693 - v700 * v126[2];
                    do
                    {
                      v703 = v701;
                      if (v698)
                      {
                        do
                        {
                          *(void *)(v688 + 8 * v683++) = *(void *)(v686 + 8 * v685) / *(uint64_t *)&v687[2 * v684];
                          v685 += v699;
                          v684 += v700;
                          --v703;
                        }
                        while (v703);
                      }
                      v685 += v691 - v699 * v698;
                      v684 += v702;
                      ++v697;
                    }
                    while (v697 != v695);
                  }
                  v685 += v696;
                  v684 += v694;
                  ++v682;
                }
                while (v682 != v681);
              }
              break;
            case 4uLL:
              __Ne = *v72;
              if (__Ne)
              {
                v704 = 0;
                v705 = 0;
                v706 = 0;
                v707 = 0;
                v708 = *(void *)(v71 + 152);
                v709 = v125[19];
                v710 = v70[19];
                v711 = v72[1];
                v712 = *(void **)(v71 + 24);
                v713 = v125[3];
                v1502 = *((void *)v713 + 1);
                v1506 = v712[1];
                v1529 = *(void *)v713 - v1502 * v126[1];
                v1570 = v72[1];
                if (v711 <= 1) {
                  v714 = 1;
                }
                else {
                  v714 = v72[1];
                }
                v1511 = *v712 - v712[1] * v711;
                do
                {
                  if (v1570)
                  {
                    v715 = 0;
                    v716 = v72[2];
                    v717 = v712[2];
                    v718 = *((void *)v713 + 2);
                    if (v716 <= 1) {
                      v719 = 1;
                    }
                    else {
                      v719 = v72[2];
                    }
                    v720 = v1502 - v718 * v126[2];
                    do
                    {
                      if (v716)
                      {
                        v721 = 0;
                        v722 = v72[3];
                        v723 = v712[3];
                        v724 = *((void *)v713 + 3);
                        if (v722 <= 1) {
                          v725 = 1;
                        }
                        else {
                          v725 = v72[3];
                        }
                        v726 = v718 - v724 * v126[3];
                        do
                        {
                          v727 = v725;
                          if (v722)
                          {
                            do
                            {
                              *(void *)(v710 + 8 * v705++) = *(void *)(v708 + 8 * v707)
                                                             / *(uint64_t *)&v709[2 * v706];
                              v707 += v723;
                              v706 += v724;
                              --v727;
                            }
                            while (v727);
                          }
                          v707 += v717 - v723 * v722;
                          v706 += v726;
                          ++v721;
                        }
                        while (v721 != v719);
                      }
                      v707 += v1506 - v717 * v716;
                      v706 += v720;
                      ++v715;
                    }
                    while (v715 != v714);
                  }
                  v707 += v1511;
                  v706 += v1529;
                  ++v704;
                }
                while (v704 != __Ne);
              }
              break;
            default:
              v1569 = v70[6];
              __Nd = v74;
              if (v1569)
              {
                v649 = 0;
                v1510 = v125[19];
                v1528 = *(void *)(v71 + 152);
                v1505 = v70[19];
                do
                {
                  v650 = __Nd;
                  if ((__Nd & 0x80000000) != 0)
                  {
                    LODWORD(v651) = 0;
                  }
                  else
                  {
                    v651 = 0;
                    v652 = *(void *)(v71 + 24);
                    v653 = v649;
                    do
                    {
                      v654 = ldiv(v653, v72[v650]);
                      v653 = v654.quot;
                      v651 += *(void *)(v652 + 8 * v650--) * v654.rem;
                    }
                    while (v650 != -1);
                  }
                  v655 = 0;
                  if ((v128 & 0x80000000) == 0)
                  {
                    v656 = v125[3];
                    v657 = v128;
                    v658 = v649;
                    do
                    {
                      v659 = ldiv(v658, v126[v657]);
                      v658 = v659.quot;
                      v655 += *(void *)&v656[2 * v657--] * v659.rem;
                    }
                    while (v657 != -1);
                  }
                  *(void *)(v1505 + 8 * v649++) = *(void *)(v1528 + 8 * (int)v651)
                                                  / *(uint64_t *)&v1510[2 * (int)v655];
                }
                while (v649 != v1569);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_19:
          v15 = *(const float **)(*a1 + 152);
          v16 = *(float **)(*(void *)a3 + 152);
          v17 = *(const float **)(*a2 + 152);
          v18 = *(void *)(*a2 + 160);
          vDSP_svdiv(v15, v17, 1, v16, 1, v18);
          return;
        case 2:
LABEL_22:
          v19 = *(const float **)(*a2 + 152);
          v20 = *(float **)(*(void *)a3 + 152);
          v21 = *(const float **)(*a1 + 152);
          v22 = *(void *)(*a1 + 160);
          vDSP_vsdiv(v21, 1, v19, v20, 1, v22);
          return;
        case 3:
LABEL_25:
          v23 = *(const float **)(*a1 + 152);
          v24 = *(const float **)(*a2 + 152);
          v25 = *(float **)(*(void *)a3 + 152);
          v26 = *(void *)(*(void *)a3 + 48);
          vDSP_vdiv(v24, 1, v23, 1, v25, 1, v26);
          return;
        default:
          v79 = *(void **)a3;
          v80 = *a1;
          v81 = *(int **)*a1;
          v82 = (*(void *)(*a1 + 8) - (void)v81) >> 2;
          v83 = (v82 - 1);
          if ((int)v83 >= -1) {
            v84 = -1;
          }
          else {
            v84 = v82 - 1;
          }
          v85 = v84 + 1;
          v86 = v82 + 1;
          while (1)
          {
            v87 = v86 - 2;
            if (v86 - 2 < 0) {
              break;
            }
            --v86;
            if (*(void *)(*(void *)(v80 + 24) + 8 * v87) != *(void *)(v79[3] + 8 * v87)) {
              goto LABEL_121;
            }
          }
          v86 = v85;
LABEL_121:
          v133 = (int **)*a2;
          v134 = *(int **)*a2;
          v135 = (*(void *)(*a2 + 8) - (void)v134) >> 2;
          v136 = (v135 - 1);
          if ((int)v136 >= -1) {
            v137 = -1;
          }
          else {
            v137 = v135 - 1;
          }
          v138 = v137 + 1;
          v139 = v135 + 1;
          while (1)
          {
            v140 = v139 - 2;
            if (v139 - 2 < 0) {
              break;
            }
            --v139;
            if (*(void *)&v133[3][2 * v140] != *(void *)(v79[3] + 8 * v140)) {
              goto LABEL_159;
            }
          }
          v139 = v138;
LABEL_159:
          v153 = v82 + 1;
          while (1)
          {
            v154 = v153 - 2;
            if (v153 - 2 < 0) {
              break;
            }
            --v153;
            if (*(void *)(*(void *)(v80 + 24) + 8 * v154)) {
              goto LABEL_194;
            }
          }
          v153 = v85;
LABEL_194:
          v167 = v135 + 1;
          while (1)
          {
            v168 = v167 - 2;
            if (v167 - 2 < 0) {
              break;
            }
            --v167;
            if (*(void *)&v133[3][2 * v168]) {
              goto LABEL_409;
            }
          }
          v167 = v138;
LABEL_409:
          v278 = (uint64_t)(v79[1] - *v79) >> 2;
          if (v86 <= v139) {
            v279 = v139;
          }
          else {
            v279 = v86;
          }
          if (v86 <= v167) {
            v86 = v167;
          }
          if (v153 > v139) {
            v139 = v153;
          }
          if (v278 > v139) {
            v280 = 1;
          }
          else {
            v280 = 4;
          }
          if (v278 <= v139) {
            v139 = (uint64_t)(v79[1] - *v79) >> 2;
          }
          if (v278 <= v86) {
            v86 = v139;
          }
          else {
            v280 = 2;
          }
          if (v278 <= v279)
          {
            v281 = v86;
          }
          else
          {
            v280 = 3;
            v281 = v279;
          }
          if (!v281) {
            goto LABEL_438;
          }
          v282 = *(void *)(v79[3] + 8 * (v281 - 1));
          if (v282 < 0x10) {
            goto LABEL_438;
          }
          switch(v280)
          {
            case 1:
              if (v281 == 2)
              {
                v1448 = *v81;
                if (*v81)
                {
                  v1449 = 0;
                  v1450 = 0;
                  __Nbn = *(void *)(v80 + 152);
                  v1605 = v133[19];
                  v1451 = (float *)v79[19];
                  v1524 = 0;
                  v1561 = (int)v282;
                  v1452 = 4 * (int)v282;
                  do
                  {
                    if (v81[1])
                    {
                      v1453 = 0;
                      do
                      {
                        vDSP_svdiv((const float *)(__Nbn + 4 * v1450), (const float *)&v1605[v1449], 1, v1451, 1, v1561);
                        v80 = *a1;
                        v1454 = *(void **)(*a1 + 24);
                        v1455 = v1454[1];
                        v1450 += v1455;
                        v133 = (int **)*a2;
                        v1456 = *(int **)(*a2 + 24);
                        v1457 = *((void *)v1456 + 1);
                        v1449 += v1457;
                        ++v1453;
                        v81 = *(int **)*a1;
                        v1458 = v81[1];
                        v1451 = (float *)((char *)v1451 + v1452);
                      }
                      while (v1453 < v1458);
                      v1448 = *v81;
                      v134 = *v133;
                    }
                    else
                    {
                      v1458 = 0;
                      v1454 = *(void **)(v80 + 24);
                      v1455 = v1454[1];
                      v1456 = v133[3];
                      v1457 = *((void *)v1456 + 1);
                    }
                    v1450 = *v1454 + v1450 - v1458 * v1455;
                    v1449 = *(void *)v1456 + v1449 - v1457 * v134[1];
                    ++v1524;
                  }
                  while (v1524 < v1448);
                }
              }
              else if (v281 == 1)
              {
                if (*v81)
                {
                  v898 = 0;
                  v899 = 0;
                  v900 = 0;
                  v901 = *(void *)(v80 + 152);
                  v902 = v133[19];
                  v903 = (int)v282;
                  v904 = 4 * (int)v282;
                  v905 = (float *)v79[19];
                  do
                  {
                    vDSP_svdiv((const float *)(v901 + 4 * v900), (const float *)&v902[v899], 1, v905, 1, v903);
                    v900 += **(void **)(*a1 + 24);
                    v899 += **(void **)(*a2 + 24);
                    ++v898;
                    v905 = (float *)((char *)v905 + v904);
                  }
                  while (v898 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                v1459 = 0;
                v1606 = v133[19];
                __Nbo = *(void *)(v80 + 152);
                v1562 = (int)v282;
                v1460 = (float *)v79[19];
                do
                {
                  v1461 = *(void *)*a1;
                  v1462 = (unint64_t)(*(void *)(*a1 + 8) - v1461) >> 2;
                  v1463 = 0;
                  v1464 = (v1462 - 1);
                  if ((int)v1462 - 1 >= 0)
                  {
                    v1465 = *(void *)(*a1 + 24);
                    v1466 = v1459;
                    do
                    {
                      v1467 = ldiv(v1466, *(int *)(v1461 + 4 * v1464));
                      v1466 = v1467.quot;
                      v1463 += *(void *)(v1465 + 8 * v1464--) * v1467.rem;
                    }
                    while (v1464 != -1);
                  }
                  v1468 = *(void *)*a2;
                  v1469 = (unint64_t)(*(void *)(*a2 + 8) - v1468) >> 2;
                  v1470 = 0;
                  v1471 = (v1469 - 1);
                  if ((int)v1469 - 1 >= 0)
                  {
                    v1472 = *(void *)(*a2 + 24);
                    v1473 = v1459;
                    do
                    {
                      v1474 = ldiv(v1473, *(int *)(v1468 + 4 * v1471));
                      v1473 = v1474.quot;
                      v1470 += *(void *)(v1472 + 8 * v1471--) * v1474.rem;
                    }
                    while (v1471 != -1);
                  }
                  vDSP_svdiv((const float *)(__Nbo + 4 * (int)v1463), (const float *)&v1606[(int)v1470], 1, v1460, 1, v1562);
                  v1460 += v1562;
                  v1459 += v1562;
                }
                while (v1459 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2:
              if (v281 == 2)
              {
                v1475 = *v81;
                if (*v81)
                {
                  v1476 = 0;
                  v1477 = 0;
                  __Nbp = *(void *)(v80 + 152);
                  v1607 = v133[19];
                  v1478 = (float *)v79[19];
                  v1525 = 0;
                  v1563 = (int)v282;
                  v1479 = 4 * (int)v282;
                  do
                  {
                    if (v81[1])
                    {
                      v1480 = 0;
                      do
                      {
                        vDSP_vsdiv((const float *)(__Nbp + 4 * v1477), 1, (const float *)&v1607[v1476], v1478, 1, v1563);
                        v80 = *a1;
                        v1481 = *(void **)(*a1 + 24);
                        v1482 = v1481[1];
                        v1477 += v1482;
                        v133 = (int **)*a2;
                        v1483 = *(int **)(*a2 + 24);
                        v1484 = *((void *)v1483 + 1);
                        v1476 += v1484;
                        ++v1480;
                        v81 = *(int **)*a1;
                        v1485 = v81[1];
                        v1478 = (float *)((char *)v1478 + v1479);
                      }
                      while (v1480 < v1485);
                      v1475 = *v81;
                      v134 = *v133;
                    }
                    else
                    {
                      v1485 = 0;
                      v1481 = *(void **)(v80 + 24);
                      v1482 = v1481[1];
                      v1483 = v133[3];
                      v1484 = *((void *)v1483 + 1);
                    }
                    v1477 = *v1481 + v1477 - v1485 * v1482;
                    v1476 = *(void *)v1483 + v1476 - v1484 * v134[1];
                    ++v1525;
                  }
                  while (v1525 < v1475);
                }
              }
              else if (v281 == 1)
              {
                if (*v81)
                {
                  v906 = 0;
                  v907 = 0;
                  v908 = 0;
                  v909 = *(void *)(v80 + 152);
                  v910 = v133[19];
                  v911 = (int)v282;
                  v912 = 4 * (int)v282;
                  v913 = (float *)v79[19];
                  do
                  {
                    vDSP_vsdiv((const float *)(v909 + 4 * v908), 1, (const float *)&v910[v907], v913, 1, v911);
                    v908 += **(void **)(*a1 + 24);
                    v907 += **(void **)(*a2 + 24);
                    ++v906;
                    v913 = (float *)((char *)v913 + v912);
                  }
                  while (v906 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                v1486 = 0;
                v1608 = v133[19];
                __Nbq = *(void *)(v80 + 152);
                v1564 = (int)v282;
                v1487 = (float *)v79[19];
                do
                {
                  v1488 = *(void *)*a1;
                  v1489 = (unint64_t)(*(void *)(*a1 + 8) - v1488) >> 2;
                  v1490 = 0;
                  v1491 = (v1489 - 1);
                  if ((int)v1489 - 1 >= 0)
                  {
                    v1492 = *(void *)(*a1 + 24);
                    v1493 = v1486;
                    do
                    {
                      v1494 = ldiv(v1493, *(int *)(v1488 + 4 * v1491));
                      v1493 = v1494.quot;
                      v1490 += *(void *)(v1492 + 8 * v1491--) * v1494.rem;
                    }
                    while (v1491 != -1);
                  }
                  v1495 = *(void *)*a2;
                  v1496 = (unint64_t)(*(void *)(*a2 + 8) - v1495) >> 2;
                  v1497 = 0;
                  v1498 = (v1496 - 1);
                  if ((int)v1496 - 1 >= 0)
                  {
                    v1499 = *(void *)(*a2 + 24);
                    v1500 = v1486;
                    do
                    {
                      v1501 = ldiv(v1500, *(int *)(v1495 + 4 * v1498));
                      v1500 = v1501.quot;
                      v1497 += *(void *)(v1499 + 8 * v1498--) * v1501.rem;
                    }
                    while (v1498 != -1);
                  }
                  vDSP_vsdiv((const float *)(__Nbq + 4 * (int)v1490), 1, (const float *)&v1608[(int)v1497], v1487, 1, v1564);
                  v1487 += v1564;
                  v1486 += v1564;
                }
                while (v1486 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 3:
              if (v281 == 2)
              {
                v1083 = *v81;
                if (*v81)
                {
                  v1084 = 0;
                  v1085 = 0;
                  __Nr = *(void *)(v80 + 152);
                  v1583 = v133[19];
                  v1086 = (float *)v79[19];
                  v1517 = 0;
                  v1541 = (int)v282;
                  v1087 = 4 * (int)v282;
                  do
                  {
                    if (v81[1])
                    {
                      v1088 = 0;
                      do
                      {
                        vDSP_vdiv((const float *)&v1583[v1084], 1, (const float *)(__Nr + 4 * v1085), 1, v1086, 1, v1541);
                        v80 = *a1;
                        v1089 = *(void **)(*a1 + 24);
                        v1090 = v1089[1];
                        v1085 += v1090;
                        v133 = (int **)*a2;
                        v1091 = *(int **)(*a2 + 24);
                        v1092 = *((void *)v1091 + 1);
                        v1084 += v1092;
                        ++v1088;
                        v81 = *(int **)*a1;
                        v1093 = v81[1];
                        v1086 = (float *)((char *)v1086 + v1087);
                      }
                      while (v1088 < v1093);
                      v1083 = *v81;
                      v134 = *v133;
                    }
                    else
                    {
                      v1093 = 0;
                      v1089 = *(void **)(v80 + 24);
                      v1090 = v1089[1];
                      v1091 = v133[3];
                      v1092 = *((void *)v1091 + 1);
                    }
                    v1085 = *v1089 + v1085 - v1093 * v1090;
                    v1084 = *(void *)v1091 + v1084 - v1092 * v134[1];
                    ++v1517;
                  }
                  while (v1517 < v1083);
                }
              }
              else if (v281 == 1)
              {
                if (*v81)
                {
                  v283 = 0;
                  v284 = 0;
                  v285 = 0;
                  v286 = *(void *)(v80 + 152);
                  v287 = v133[19];
                  v288 = (int)v282;
                  v289 = 4 * (int)v282;
                  v290 = (float *)v79[19];
                  do
                  {
                    vDSP_vdiv((const float *)&v287[v284], 1, (const float *)(v286 + 4 * v285), 1, v290, 1, v288);
                    v285 += **(void **)(*a1 + 24);
                    v284 += **(void **)(*a2 + 24);
                    ++v283;
                    v290 = (float *)((char *)v290 + v289);
                  }
                  while (v283 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                v1094 = 0;
                v1584 = v133[19];
                __Ns = *(void *)(v80 + 152);
                v1542 = (int)v282;
                v1095 = (float *)v79[19];
                do
                {
                  v1096 = *(void *)*a1;
                  v1097 = (unint64_t)(*(void *)(*a1 + 8) - v1096) >> 2;
                  v1098 = 0;
                  v1099 = (v1097 - 1);
                  if ((int)v1097 - 1 >= 0)
                  {
                    v1100 = *(void *)(*a1 + 24);
                    v1101 = v1094;
                    do
                    {
                      v1102 = ldiv(v1101, *(int *)(v1096 + 4 * v1099));
                      v1101 = v1102.quot;
                      v1098 += *(void *)(v1100 + 8 * v1099--) * v1102.rem;
                    }
                    while (v1099 != -1);
                  }
                  v1103 = *(void *)*a2;
                  v1104 = (unint64_t)(*(void *)(*a2 + 8) - v1103) >> 2;
                  v1105 = 0;
                  v1106 = (v1104 - 1);
                  if ((int)v1104 - 1 >= 0)
                  {
                    v1107 = *(void *)(*a2 + 24);
                    v1108 = v1094;
                    do
                    {
                      v1109 = ldiv(v1108, *(int *)(v1103 + 4 * v1106));
                      v1108 = v1109.quot;
                      v1105 += *(void *)(v1107 + 8 * v1106--) * v1109.rem;
                    }
                    while (v1106 != -1);
                  }
                  vDSP_vdiv((const float *)&v1584[(int)v1105], 1, (const float *)(__Ns + 4 * (int)v1098), 1, v1095, 1, v1542);
                  v1095 += v1542;
                  v1094 += v1542;
                }
                while (v1094 < *(void *)(*(void *)a3 + 48));
              }
              break;
            default:
LABEL_438:
              switch(v278)
              {
                case 1uLL:
                  v291 = v79[6];
                  if (v291)
                  {
                    v292 = *(float **)(v80 + 152);
                    v293 = (float *)v133[19];
                    v294 = (float *)v79[19];
                    v295 = 4 * *(void *)v133[3];
                    v296 = 4 * **(void **)(v80 + 24);
                    do
                    {
                      *v294++ = *v292 / *v293;
                      v293 = (float *)((char *)v293 + v295);
                      v292 = (float *)((char *)v292 + v296);
                      --v291;
                    }
                    while (v291);
                  }
                  break;
                case 2uLL:
                  v739 = *v81;
                  if (v739)
                  {
                    v740 = 0;
                    v741 = 0;
                    v742 = 0;
                    v743 = 0;
                    v744 = *(void *)(v80 + 152);
                    v745 = v133[19];
                    v746 = v79[19];
                    v747 = v81[1];
                    v748 = *(uint64_t **)(v80 + 24);
                    v749 = *v748;
                    v750 = v748[1];
                    v751 = v133[3];
                    v752 = *(void *)v751;
                    v753 = *((void *)v751 + 1);
                    v754 = v752 - v753 * v134[1];
                    if (v747 <= 1) {
                      v755 = 1;
                    }
                    else {
                      v755 = v81[1];
                    }
                    v756 = v749 - v750 * v747;
                    do
                    {
                      if (v747)
                      {
                        v757 = v741 + v755;
                        v758 = (float *)(v746 + 4 * v741);
                        v759 = v755;
                        do
                        {
                          *v758++ = *(float *)(v744 + 4 * v743) / *(float *)&v745[v742];
                          v743 += v750;
                          v742 += v753;
                          --v759;
                        }
                        while (v759);
                        v741 = v757;
                      }
                      v743 += v756;
                      v742 += v754;
                      ++v740;
                    }
                    while (v740 != v739);
                  }
                  break;
                case 3uLL:
                  v760 = *v81;
                  if (v760)
                  {
                    v761 = 0;
                    v762 = 0;
                    v763 = 0;
                    v764 = 0;
                    v765 = *(void *)(v80 + 152);
                    v766 = v133[19];
                    v767 = v79[19];
                    v768 = v81[1];
                    v769 = *(void **)(v80 + 24);
                    v770 = v769[1];
                    v771 = v133[3];
                    v772 = *((void *)v771 + 1);
                    v773 = *(void *)v771 - v772 * v134[1];
                    if (v768 <= 1) {
                      v774 = 1;
                    }
                    else {
                      v774 = v81[1];
                    }
                    v775 = *v769 - v770 * v768;
                    do
                    {
                      if (v768)
                      {
                        v776 = 0;
                        v777 = v81[2];
                        v778 = v769[2];
                        v779 = *((void *)v771 + 2);
                        if (v777 <= 1) {
                          v780 = 1;
                        }
                        else {
                          v780 = v81[2];
                        }
                        v781 = v772 - v779 * v134[2];
                        do
                        {
                          v782 = v780;
                          if (v777)
                          {
                            do
                            {
                              *(float *)(v767 + 4 * v762++) = *(float *)(v765 + 4 * v764) / *(float *)&v766[v763];
                              v764 += v778;
                              v763 += v779;
                              --v782;
                            }
                            while (v782);
                          }
                          v764 += v770 - v778 * v777;
                          v763 += v781;
                          ++v776;
                        }
                        while (v776 != v774);
                      }
                      v764 += v775;
                      v763 += v773;
                      ++v761;
                    }
                    while (v761 != v760);
                  }
                  break;
                case 4uLL:
                  __Ng = *v81;
                  if (__Ng)
                  {
                    v783 = 0;
                    v784 = 0;
                    v785 = 0;
                    v786 = 0;
                    v787 = *(void *)(v80 + 152);
                    v788 = v133[19];
                    v789 = v79[19];
                    v790 = v81[1];
                    v791 = *(void **)(v80 + 24);
                    v792 = v133[3];
                    v1513 = *((void *)v792 + 1);
                    v1531 = v791[1];
                    v1572 = *(void *)v792 - v1513 * v134[1];
                    if (v790 <= 1) {
                      v793 = 1;
                    }
                    else {
                      v793 = v81[1];
                    }
                    v794 = *v791 - v791[1] * v790;
                    do
                    {
                      if (v790)
                      {
                        v795 = 0;
                        v796 = v81[2];
                        v797 = v791[2];
                        v798 = *((void *)v792 + 2);
                        if (v796 <= 1) {
                          v799 = 1;
                        }
                        else {
                          v799 = v81[2];
                        }
                        v800 = v1513 - v798 * v134[2];
                        do
                        {
                          if (v796)
                          {
                            v801 = 0;
                            v802 = v81[3];
                            v803 = v791[3];
                            v804 = *((void *)v792 + 3);
                            if (v802 <= 1) {
                              v805 = 1;
                            }
                            else {
                              v805 = v81[3];
                            }
                            v806 = v798 - v804 * v134[3];
                            do
                            {
                              v807 = v805;
                              if (v802)
                              {
                                do
                                {
                                  *(float *)(v789 + 4 * v784++) = *(float *)(v787 + 4 * v786) / *(float *)&v788[v785];
                                  v786 += v803;
                                  v785 += v804;
                                  --v807;
                                }
                                while (v807);
                              }
                              v786 += v797 - v803 * v802;
                              v785 += v806;
                              ++v801;
                            }
                            while (v801 != v799);
                          }
                          v786 += v1531 - v797 * v796;
                          v785 += v800;
                          ++v795;
                        }
                        while (v795 != v793);
                      }
                      v786 += v794;
                      v785 += v1572;
                      ++v783;
                    }
                    while (v783 != __Ng);
                  }
                  break;
                default:
                  v1571 = v79[6];
                  __Nf = v83;
                  if (v1571)
                  {
                    v728 = 0;
                    v1512 = v133[19];
                    v1530 = *(void *)(v80 + 152);
                    v1507 = v79[19];
                    do
                    {
                      v729 = __Nf;
                      if ((__Nf & 0x80000000) != 0)
                      {
                        LODWORD(v730) = 0;
                      }
                      else
                      {
                        v730 = 0;
                        v731 = *(void *)(v80 + 24);
                        v732 = v728;
                        do
                        {
                          v733 = ldiv(v732, v81[v729]);
                          v732 = v733.quot;
                          v730 += *(void *)(v731 + 8 * v729--) * v733.rem;
                        }
                        while (v729 != -1);
                      }
                      v734 = 0;
                      if ((v136 & 0x80000000) == 0)
                      {
                        v735 = v133[3];
                        v736 = v136;
                        v737 = v728;
                        do
                        {
                          v738 = ldiv(v737, v134[v736]);
                          v737 = v738.quot;
                          v734 += *(void *)&v735[2 * v736--] * v738.rem;
                        }
                        while (v736 != -1);
                      }
                      *(float *)(v1507 + 4 * v728++) = *(float *)(v1530 + 4 * (int)v730) / *(float *)&v1512[(int)v734];
                    }
                    while (v728 != v1571);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Divide::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_7>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(unsigned char **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          uint64_t v24 = *(void *)(*a2 + 160);
          if ((int)v24 >= 1)
          {
            v25 = *(void **)(*(void *)a3 + 152);
            int v26 = **(unsigned __int8 **)(*a1 + 152);
            memset(v25, v26, v24);
          }
          return;
        case 2:
          int v27 = *(_DWORD *)(*a1 + 160);
          if (v27 >= 1)
          {
            v28 = *(unsigned char **)(*(void *)a3 + 152);
            v29 = *(char **)(*a1 + 152);
            unsigned int v30 = v27 + 1;
            do
            {
              char v31 = *v29++;
              *v28++ = v31;
              --v30;
            }
            while (v30 > 1);
          }
          return;
        case 3:
          int v32 = *(_DWORD *)(*(void *)a3 + 48);
          if (v32 >= 1)
          {
            v33 = *(unsigned char **)(*(void *)a3 + 152);
            v34 = *(char **)(*a1 + 152);
            unsigned int v35 = v32 + 1;
            do
            {
              char v36 = *v34++;
              *v33++ = v36;
              --v35;
            }
            while (v35 > 1);
          }
          return;
        default:
          v15 = *(void **)a3;
          uint64_t v16 = *a1;
          v17 = *(int **)*a1;
          uint64_t v18 = (*(void *)(*a1 + 8) - (void)v17) >> 2;
          uint64_t v19 = (v18 - 1);
          if ((int)v19 >= -1) {
            int v20 = -1;
          }
          else {
            int v20 = v18 - 1;
          }
          int v21 = v20 + 1;
          int v22 = v18 + 1;
          break;
      }
      while (1)
      {
        unsigned int v23 = v22 - 2;
        if (v22 - 2 < 0) {
          break;
        }
        --v22;
        if (*(void *)(*(void *)(v16 + 24) + 8 * v23) != *(void *)(v15[3] + 8 * v23)) {
          goto LABEL_150;
        }
      }
      int v22 = v21;
LABEL_150:
      uint64_t v209 = *a2;
      uint64_t v210 = (*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
      int v211 = v210 - 1;
      if ((int)v210 - 1 >= -1) {
        int v211 = -1;
      }
      int v212 = v211 + 1;
      int v213 = v210 + 1;
      while (1)
      {
        unsigned int v214 = v213 - 2;
        if (v213 - 2 < 0) {
          break;
        }
        --v213;
        if (*(void *)(*(void *)(v209 + 24) + 8 * v214) != *(void *)(v15[3] + 8 * v214)) {
          goto LABEL_203;
        }
      }
      int v213 = v212;
LABEL_203:
      int v261 = v18 + 1;
      while (1)
      {
        unsigned int v262 = v261 - 2;
        if (v261 - 2 < 0) {
          break;
        }
        --v261;
        if (*(void *)(*(void *)(v16 + 24) + 8 * v262)) {
          goto LABEL_238;
        }
      }
      int v261 = v21;
LABEL_238:
      int v275 = v210 + 1;
      while (1)
      {
        unsigned int v276 = v275 - 2;
        if (v275 - 2 < 0) {
          break;
        }
        --v275;
        if (*(void *)(*(void *)(v209 + 24) + 8 * v276)) {
          goto LABEL_273;
        }
      }
      int v275 = v212;
LABEL_273:
      unint64_t v289 = (uint64_t)(v15[1] - *v15) >> 2;
      if (v22 <= v213) {
        int v290 = v213;
      }
      else {
        int v290 = v22;
      }
      if (v22 <= v275) {
        int v22 = v275;
      }
      if (v261 > v213) {
        int v213 = v261;
      }
      if (v289 > v213)
      {
        int v291 = 1;
      }
      else
      {
        int v213 = (uint64_t)(v15[1] - *v15) >> 2;
        int v291 = 4;
      }
      if (v289 > v22)
      {
        int v292 = 2;
      }
      else
      {
        int v22 = v213;
        int v292 = v291;
      }
      if (v289 > v290)
      {
        int v22 = v290;
        int v292 = 3;
      }
      uint64_t v1867 = v19;
      if (!v22) {
        goto LABEL_302;
      }
      unint64_t v293 = *(void *)(v15[3] + 8 * (v22 - 1));
      if (v293 < 0x10) {
        goto LABEL_302;
      }
      switch(v292)
      {
        case 1:
          if (v22 == 2)
          {
            uint64_t v1878 = *v17;
            if (v1878)
            {
              uint64_t v1302 = 0;
              uint64_t v1303 = 0;
              uint64_t v1304 = *(void *)(v16 + 152);
              v1305 = (char *)v15[19];
              unint64_t v1306 = v17[1];
              v1307 = *(uint64_t **)(v16 + 24);
              uint64_t v1308 = *v1307;
              uint64_t v1309 = v1307[1];
              if (v1306 <= 1) {
                uint64_t v1310 = 1;
              }
              else {
                uint64_t v1310 = v17[1];
              }
              uint64_t v1836 = v1310;
              int v1860 = v17[1];
              uint64_t v1311 = v1308 - v1309 * v1306;
              do
              {
                uint64_t v1312 = v1836;
                if (v1860)
                {
                  do
                  {
                    if ((int)v293 >= 1) {
                      memset(v1305, *(unsigned __int8 *)(v1304 + v1303), v293);
                    }
                    v1303 += v1309;
                    v1305 += (int)v293;
                    --v1312;
                  }
                  while (v1312);
                }
                v1303 += v1311;
                ++v1302;
              }
              while (v1302 != v1878);
            }
          }
          else if (v22 == 1)
          {
            uint64_t v940 = *v17;
            if (v940)
            {
              v941 = *(unsigned __int8 **)(v16 + 152);
              v942 = (char *)v15[19];
              uint64_t v943 = **(void **)(v16 + 24);
              do
              {
                if ((int)v293 >= 1) {
                  memset(v942, *v941, v293);
                }
                v942 += (int)v293;
                v941 += v943;
                --v940;
              }
              while (v940);
            }
          }
          else
          {
            unint64_t v1313 = v15[6];
            if (v1313)
            {
              unint64_t v1314 = 0;
              v1315 = (char *)v15[19];
              uint64_t v1861 = *(void *)(v16 + 152);
              do
              {
                uint64_t v1316 = v1867;
                if ((v1867 & 0x80000000) != 0)
                {
                  LODWORD(v1317) = 0;
                }
                else
                {
                  uint64_t v1317 = 0;
                  uint64_t v1318 = *(void *)(v16 + 24);
                  int quot = v1314;
                  do
                  {
                    ldiv_t v1320 = ldiv(quot, v17[v1316]);
                    int quot = v1320.quot;
                    v1317 += *(void *)(v1318 + 8 * v1316--) * v1320.rem;
                  }
                  while (v1316 != -1);
                }
                if ((int)v293 >= 1) {
                  memset(v1315, *(unsigned __int8 *)(v1861 + (int)v1317), v293);
                }
                v1315 += (int)v293;
                v1314 += (int)v293;
              }
              while (v1314 < v1313);
            }
          }
          break;
        case 2:
          if (v22 == 2)
          {
            uint64_t v1321 = *v17;
            if (v1321)
            {
              uint64_t v1322 = 0;
              uint64_t v1323 = 0;
              uint64_t v1324 = *(void *)(v16 + 152);
              uint64_t v1325 = v15[19];
              unint64_t v1326 = v17[1];
              v1327 = *(uint64_t **)(v16 + 24);
              uint64_t v1329 = *v1327;
              uint64_t v1328 = v1327[1];
              if (v1326 <= 1) {
                uint64_t v1330 = 1;
              }
              else {
                uint64_t v1330 = v17[1];
              }
              uint64_t v1331 = v1329 - v1328 * v1326;
              do
              {
                if (v1326)
                {
                  uint64_t v1332 = 0;
                  uint64_t v1333 = v1324 + v1323;
                  do
                  {
                    if ((int)v293 >= 1)
                    {
                      uint64_t v1334 = 0;
                      unsigned int v1335 = v293 + 1;
                      do
                      {
                        *(unsigned char *)(v1325 + v1334) = *(unsigned char *)(v1333 + v1334);
                        --v1335;
                        ++v1334;
                      }
                      while (v1335 > 1);
                    }
                    v1323 += v1328;
                    v1325 += (int)v293;
                    ++v1332;
                    v1333 += v1328;
                  }
                  while (v1332 != v1330);
                }
                v1323 += v1331;
                ++v1322;
              }
              while (v1322 != v1321);
            }
          }
          else if (v22 == 1)
          {
            uint64_t v944 = *v17;
            if (v944)
            {
              uint64_t v945 = 0;
              uint64_t v946 = *(void *)(v16 + 152);
              uint64_t v947 = v15[19];
              uint64_t v948 = **(void **)(v16 + 24);
              do
              {
                if ((int)v293 >= 1)
                {
                  uint64_t v949 = 0;
                  unsigned int v950 = v293 + 1;
                  do
                  {
                    *(unsigned char *)(v947 + v949) = *(unsigned char *)(v946 + v949);
                    --v950;
                    ++v949;
                  }
                  while (v950 > 1);
                }
                v947 += (int)v293;
                ++v945;
                v946 += v948;
              }
              while (v945 != v944);
            }
          }
          else
          {
            unint64_t v1336 = v15[6];
            if (v1336)
            {
              unint64_t v1337 = 0;
              uint64_t v1862 = *(void *)(v16 + 152);
              uint64_t v1338 = v15[19];
              do
              {
                uint64_t v1339 = v1867;
                if ((v1867 & 0x80000000) != 0)
                {
                  LODWORD(v1340) = 0;
                }
                else
                {
                  uint64_t v1340 = 0;
                  uint64_t v1341 = *(void *)(v16 + 24);
                  int v1342 = v1337;
                  do
                  {
                    ldiv_t v1343 = ldiv(v1342, v17[v1339]);
                    int v1342 = v1343.quot;
                    v1340 += *(void *)(v1341 + 8 * v1339--) * v1343.rem;
                  }
                  while (v1339 != -1);
                }
                if ((int)v293 >= 1)
                {
                  uint64_t v1344 = 0;
                  unsigned int v1345 = v293 + 1;
                  do
                  {
                    *(unsigned char *)(v1338 + v1344) = *(unsigned char *)(v1862 + (int)v1340 + v1344);
                    --v1345;
                    ++v1344;
                  }
                  while (v1345 > 1);
                }
                v1338 += (int)v293;
                v1337 += (int)v293;
              }
              while (v1337 < v1336);
            }
          }
          break;
        case 3:
          if (v22 == 2)
          {
            uint64_t v1079 = *v17;
            if (v1079)
            {
              uint64_t v1080 = 0;
              uint64_t v1081 = 0;
              uint64_t v1082 = *(void *)(v16 + 152);
              uint64_t v1083 = v15[19];
              unint64_t v1084 = v17[1];
              v1085 = *(uint64_t **)(v16 + 24);
              uint64_t v1087 = *v1085;
              uint64_t v1086 = v1085[1];
              if (v1084 <= 1) {
                uint64_t v1088 = 1;
              }
              else {
                uint64_t v1088 = v17[1];
              }
              uint64_t v1089 = v1087 - v1086 * v1084;
              do
              {
                if (v1084)
                {
                  uint64_t v1090 = 0;
                  uint64_t v1091 = v1082 + v1081;
                  do
                  {
                    if ((int)v293 >= 1)
                    {
                      uint64_t v1092 = 0;
                      unsigned int v1093 = v293 + 1;
                      do
                      {
                        *(unsigned char *)(v1083 + v1092) = *(unsigned char *)(v1091 + v1092);
                        --v1093;
                        ++v1092;
                      }
                      while (v1093 > 1);
                    }
                    v1081 += v1086;
                    v1083 += (int)v293;
                    ++v1090;
                    v1091 += v1086;
                  }
                  while (v1090 != v1088);
                }
                v1081 += v1089;
                ++v1080;
              }
              while (v1080 != v1079);
            }
          }
          else if (v22 == 1)
          {
            uint64_t v294 = *v17;
            if (v294)
            {
              uint64_t v295 = 0;
              uint64_t v296 = *(void *)(v16 + 152);
              uint64_t v297 = v15[19];
              uint64_t v298 = **(void **)(v16 + 24);
              do
              {
                if ((int)v293 >= 1)
                {
                  uint64_t v299 = 0;
                  unsigned int v300 = v293 + 1;
                  do
                  {
                    *(unsigned char *)(v297 + v299) = *(unsigned char *)(v296 + v299);
                    --v300;
                    ++v299;
                  }
                  while (v300 > 1);
                }
                v297 += (int)v293;
                ++v295;
                v296 += v298;
              }
              while (v295 != v294);
            }
          }
          else
          {
            unint64_t v1094 = v15[6];
            if (v1094)
            {
              unint64_t v1095 = 0;
              uint64_t v1857 = *(void *)(v16 + 152);
              uint64_t v1096 = v15[19];
              do
              {
                uint64_t v1097 = v1867;
                if ((v1867 & 0x80000000) != 0)
                {
                  LODWORD(v1098) = 0;
                }
                else
                {
                  uint64_t v1098 = 0;
                  uint64_t v1099 = *(void *)(v16 + 24);
                  int v1100 = v1095;
                  do
                  {
                    ldiv_t v1101 = ldiv(v1100, v17[v1097]);
                    int v1100 = v1101.quot;
                    v1098 += *(void *)(v1099 + 8 * v1097--) * v1101.rem;
                  }
                  while (v1097 != -1);
                }
                if ((int)v293 >= 1)
                {
                  uint64_t v1102 = 0;
                  unsigned int v1103 = v293 + 1;
                  do
                  {
                    *(unsigned char *)(v1096 + v1102) = *(unsigned char *)(v1857 + (int)v1098 + v1102);
                    --v1103;
                    ++v1102;
                  }
                  while (v1103 > 1);
                }
                v1096 += (int)v293;
                v1095 += (int)v293;
              }
              while (v1095 < v1094);
            }
          }
          break;
        default:
LABEL_302:
          switch(v289)
          {
            case 1uLL:
              uint64_t v301 = v15[6];
              if (v301)
              {
                v302 = *(unsigned char **)(v16 + 152);
                v303 = (unsigned char *)v15[19];
                uint64_t v304 = **(void **)(v16 + 24);
                do
                {
                  *v303++ = *v302;
                  v302 += v304;
                  --v301;
                }
                while (v301);
              }
              break;
            case 2uLL:
              uint64_t v434 = *v17;
              if (v434)
              {
                uint64_t v435 = 0;
                uint64_t v436 = 0;
                uint64_t v437 = 0;
                uint64_t v438 = *(void *)(v16 + 152);
                uint64_t v439 = v15[19];
                unint64_t v440 = v17[1];
                v441 = *(uint64_t **)(v16 + 24);
                uint64_t v443 = *v441;
                uint64_t v442 = v441[1];
                if (v440 <= 1) {
                  uint64_t v444 = 1;
                }
                else {
                  uint64_t v444 = v17[1];
                }
                uint64_t v445 = v443 - v442 * v440;
                do
                {
                  if (v440)
                  {
                    uint64_t v446 = v436 + v444;
                    v447 = (unsigned char *)(v439 + v436);
                    uint64_t v448 = v444;
                    do
                    {
                      *v447++ = *(unsigned char *)(v438 + v437);
                      v437 += v442;
                      --v448;
                    }
                    while (v448);
                    uint64_t v436 = v446;
                  }
                  v437 += v445;
                  ++v435;
                }
                while (v435 != v434);
              }
              break;
            case 3uLL:
              uint64_t v449 = *v17;
              if (v449)
              {
                uint64_t v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = *(void *)(v16 + 152);
                uint64_t v454 = v15[19];
                unint64_t v455 = v17[1];
                v456 = *(void **)(v16 + 24);
                uint64_t v457 = v456[1];
                if (v455 <= 1) {
                  uint64_t v458 = 1;
                }
                else {
                  uint64_t v458 = v17[1];
                }
                unint64_t v459 = *v456 - v457 * v455;
                do
                {
                  if (v455)
                  {
                    uint64_t v460 = 0;
                    unint64_t v461 = v17[2];
                    uint64_t v462 = v456[2];
                    if (v461 <= 1) {
                      uint64_t v463 = 1;
                    }
                    else {
                      uint64_t v463 = v17[2];
                    }
                    do
                    {
                      uint64_t v464 = v463;
                      if (v461)
                      {
                        do
                        {
                          *(unsigned char *)(v454 + v451++) = *(unsigned char *)(v453 + v452);
                          v452 += v462;
                          --v464;
                        }
                        while (v464);
                      }
                      v452 += v457 - v462 * v461;
                      ++v460;
                    }
                    while (v460 != v458);
                  }
                  v452 += v459;
                  ++v450;
                }
                while (v450 != v449);
              }
              break;
            case 4uLL:
              uint64_t v465 = *v17;
              if (v465)
              {
                uint64_t v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = 0;
                uint64_t v469 = *(void *)(v16 + 152);
                uint64_t v470 = v15[19];
                unint64_t v471 = v17[1];
                v472 = *(void **)(v16 + 24);
                uint64_t v473 = v472[1];
                if (v471 <= 1) {
                  uint64_t v474 = 1;
                }
                else {
                  uint64_t v474 = v17[1];
                }
                unint64_t v475 = *v472 - v473 * v471;
                do
                {
                  if (v471)
                  {
                    uint64_t v476 = 0;
                    unint64_t v477 = v17[2];
                    uint64_t v478 = v472[2];
                    if (v477 <= 1) {
                      uint64_t v479 = 1;
                    }
                    else {
                      uint64_t v479 = v17[2];
                    }
                    do
                    {
                      if (v477)
                      {
                        uint64_t v480 = 0;
                        unint64_t v481 = v17[3];
                        uint64_t v482 = v472[3];
                        if (v481 <= 1) {
                          uint64_t v483 = 1;
                        }
                        else {
                          uint64_t v483 = v17[3];
                        }
                        do
                        {
                          uint64_t v484 = v483;
                          if (v481)
                          {
                            do
                            {
                              *(unsigned char *)(v470 + v467++) = *(unsigned char *)(v469 + v468);
                              v468 += v482;
                              --v484;
                            }
                            while (v484);
                          }
                          v468 += v478 - v482 * v481;
                          ++v480;
                        }
                        while (v480 != v479);
                      }
                      v468 += v473 - v478 * v477;
                      ++v476;
                    }
                    while (v476 != v474);
                  }
                  v468 += v475;
                  ++v466;
                }
                while (v466 != v465);
              }
              break;
            default:
              uint64_t v425 = v15[6];
              if (v425)
              {
                uint64_t v426 = 0;
                uint64_t v427 = *(void *)(v16 + 152);
                uint64_t v428 = v15[19];
                do
                {
                  uint64_t v429 = v1867;
                  if ((v1867 & 0x80000000) != 0)
                  {
                    LODWORD(v430) = 0;
                  }
                  else
                  {
                    uint64_t v430 = 0;
                    uint64_t v431 = *(void *)(v16 + 24);
                    int v432 = v426;
                    do
                    {
                      ldiv_t v433 = ldiv(v432, v17[v429]);
                      int v432 = v433.quot;
                      v430 += *(void *)(v431 + 8 * v429--) * v433.rem;
                    }
                    while (v429 != -1);
                  }
                  *(unsigned char *)(v428 + v426++) = *(unsigned char *)(v427 + (int)v430);
                }
                while (v426 != v425);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          char v7 = **(unsigned char **)(*a1 + 152) / **(unsigned char **)(*a2 + 152);
          goto LABEL_10;
        case 1:
          int v45 = *(_DWORD *)(*a2 + 160);
          if (v45 >= 1)
          {
            unsigned int v46 = **(unsigned __int8 **)(*a1 + 152);
            v47 = *(unsigned char **)(*(void *)a3 + 152);
            v48 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v49 = v45 + 1;
            do
            {
              unsigned int v50 = *v48++;
              *v47++ = v46 / v50;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        case 2:
          int v51 = *(_DWORD *)(*a1 + 160);
          if (v51 >= 1)
          {
            unsigned int v52 = **(unsigned __int8 **)(*a2 + 152);
            v53 = *(unsigned char **)(*(void *)a3 + 152);
            v54 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v55 = v51 + 1;
            do
            {
              unsigned int v56 = *v54++;
              *v53++ = v56 / v52;
              --v55;
            }
            while (v55 > 1);
          }
          return;
        case 3:
          int v57 = *(_DWORD *)(*(void *)a3 + 48);
          if (v57 >= 1)
          {
            v58 = *(unsigned char **)(*(void *)a3 + 152);
            v59 = *(unsigned __int8 **)(*a2 + 152);
            v60 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v61 = v57 + 1;
            do
            {
              unsigned int v63 = *v60++;
              unsigned int v62 = v63;
              unsigned int v64 = *v59++;
              *v58++ = v62 / v64;
              --v61;
            }
            while (v61 > 1);
          }
          return;
        default:
          v37 = *(void **)a3;
          uint64_t v38 = *a1;
          v39 = *(int **)*a1;
          uint64_t v40 = (*(void *)(*a1 + 8) - (void)v39) >> 2;
          int v41 = v40 - 1;
          if ((int)v40 - 1 >= -1) {
            int v41 = -1;
          }
          int v42 = v41 + 1;
          int v43 = v40 + 1;
          break;
      }
      while (1)
      {
        unsigned int v44 = v43 - 2;
        if (v43 - 2 < 0) {
          break;
        }
        --v43;
        if (*(void *)(*(void *)(v38 + 24) + 8 * v44) != *(void *)(v37[3] + 8 * v44)) {
          goto LABEL_157;
        }
      }
      int v43 = v42;
LABEL_157:
      v215 = (int **)*a2;
      v216 = *(int **)*a2;
      uint64_t v217 = (*(void *)(*a2 + 8) - (void)v216) >> 2;
      int v218 = v217 - 1;
      if ((int)v217 - 1 >= -1) {
        int v218 = -1;
      }
      int v219 = v218 + 1;
      int v220 = v217 + 1;
      while (1)
      {
        unsigned int v221 = v220 - 2;
        if (v220 - 2 < 0) {
          break;
        }
        --v220;
        if (*(void *)&v215[3][2 * v221] != *(void *)(v37[3] + 8 * v221)) {
          goto LABEL_208;
        }
      }
      int v220 = v219;
LABEL_208:
      int v263 = v40 + 1;
      while (1)
      {
        unsigned int v264 = v263 - 2;
        if (v263 - 2 < 0) {
          break;
        }
        --v263;
        if (*(void *)(*(void *)(v38 + 24) + 8 * v264)) {
          goto LABEL_243;
        }
      }
      int v263 = v42;
LABEL_243:
      int v277 = v217 + 1;
      while (1)
      {
        int v278 = v277 - 2;
        if (v277 - 2 < 0) {
          break;
        }
        --v277;
        if (*(void *)&v215[3][2 * v278]) {
          goto LABEL_308;
        }
      }
      int v277 = v219;
LABEL_308:
      unint64_t v305 = (uint64_t)(v37[1] - *v37) >> 2;
      if (v43 <= v220) {
        int v306 = v220;
      }
      else {
        int v306 = v43;
      }
      if (v43 <= v277) {
        int v43 = v277;
      }
      if (v263 > v220) {
        int v220 = v263;
      }
      if (v305 > v220)
      {
        int v307 = 1;
      }
      else
      {
        int v220 = (uint64_t)(v37[1] - *v37) >> 2;
        int v307 = 4;
      }
      if (v305 > v43)
      {
        int v308 = 2;
      }
      else
      {
        int v43 = v220;
        int v308 = v307;
      }
      if (v305 > v306)
      {
        int v43 = v306;
        int v308 = 3;
      }
      if (!v43) {
        goto LABEL_338;
      }
      unint64_t v309 = *(void *)(v37[3] + 8 * (v43 - 1));
      if (v309 < 0x10) {
        goto LABEL_338;
      }
      uint64_t v1868 = *(void *)(v37[3] + 8 * (v43 - 1));
      switch(v308)
      {
        case 1:
          if (v43 == 2)
          {
            int v1346 = *v39;
            if (*v39)
            {
              unint64_t v1347 = 0;
              uint64_t v1348 = 0;
              uint64_t v1349 = 0;
              uint64_t v1350 = *(void *)(v38 + 152);
              v1351 = v215[19];
              uint64_t v1352 = v37[19];
              do
              {
                if (v39[1])
                {
                  unint64_t v1353 = 0;
                  do
                  {
                    if ((int)v309 >= 1)
                    {
                      uint64_t v1354 = 0;
                      unsigned int v1355 = *(unsigned __int8 *)(v1350 + v1349);
                      unsigned int v1356 = v309 + 1;
                      do
                      {
                        *(unsigned char *)(v1352 + v1354) = v1355 / *((unsigned __int8 *)v1351 + v1348 + v1354);
                        --v1356;
                        ++v1354;
                      }
                      while (v1356 > 1);
                      uint64_t v38 = *a1;
                      v215 = (int **)*a2;
                      v39 = *(int **)*a1;
                    }
                    v1357 = *(void **)(v38 + 24);
                    uint64_t v1358 = v1357[1];
                    v1349 += v1358;
                    v1348 += *((void *)v215[3] + 1);
                    v1352 += (int)v309;
                    ++v1353;
                    unint64_t v1359 = v39[1];
                  }
                  while (v1353 < v1359);
                  int v1346 = *v39;
                  v216 = *v215;
                }
                else
                {
                  unint64_t v1359 = 0;
                  v1357 = *(void **)(v38 + 24);
                  uint64_t v1358 = v1357[1];
                }
                uint64_t v1349 = *v1357 + v1349 - v1359 * v1358;
                uint64_t v1348 = *(void *)v215[3] + v1348 - *((void *)v215[3] + 1) * v216[1];
                ++v1347;
              }
              while (v1347 < v1346);
            }
          }
          else if (v43 == 1)
          {
            int v951 = *v39;
            if (*v39)
            {
              unint64_t v952 = 0;
              uint64_t v953 = 0;
              uint64_t v954 = 0;
              uint64_t v955 = *(void *)(v38 + 152);
              v956 = v215[19];
              uint64_t v957 = v37[19];
              do
              {
                if ((int)v309 >= 1)
                {
                  uint64_t v958 = 0;
                  unsigned int v959 = *(unsigned __int8 *)(v955 + v954);
                  unsigned int v960 = v309 + 1;
                  do
                  {
                    *(unsigned char *)(v957 + v958) = v959 / *((unsigned __int8 *)v956 + v953 + v958);
                    --v960;
                    ++v958;
                  }
                  while (v960 > 1);
                  uint64_t v38 = *a1;
                  v215 = (int **)*a2;
                  int v951 = **(_DWORD **)*a1;
                }
                v954 += **(void **)(v38 + 24);
                v953 += *(void *)v215[3];
                v957 += (int)v309;
                ++v952;
              }
              while (v952 < v951);
            }
          }
          else if (v37[6])
          {
            v1796 = v215[19];
            uint64_t v1812 = *(void *)(v38 + 152);
            uint64_t v1837 = (int)v309;
            unint64_t v1863 = 0;
            unsigned int v1785 = v309 + 1;
            uint64_t v1360 = v37[19];
            do
            {
              uint64_t v1361 = *(void *)*a1;
              unint64_t v1362 = (unint64_t)(*(void *)(*a1 + 8) - v1361) >> 2;
              uint64_t v1363 = 0;
              uint64_t v1364 = (v1362 - 1);
              if ((int)v1362 - 1 >= 0)
              {
                uint64_t v1365 = *(void *)(*a1 + 24);
                int v1366 = v1863;
                do
                {
                  ldiv_t v1367 = ldiv(v1366, *(int *)(v1361 + 4 * v1364));
                  int v1366 = v1367.quot;
                  v1363 += *(void *)(v1365 + 8 * v1364--) * v1367.rem;
                }
                while (v1364 != -1);
              }
              uint64_t v1368 = *(void *)*a2;
              unint64_t v1369 = (unint64_t)(*(void *)(*a2 + 8) - v1368) >> 2;
              uint64_t v1370 = 0;
              uint64_t v1371 = (v1369 - 1);
              if ((int)v1369 - 1 >= 0)
              {
                uint64_t v1372 = *(void *)(*a2 + 24);
                int v1373 = v1863;
                do
                {
                  ldiv_t v1374 = ldiv(v1373, *(int *)(v1368 + 4 * v1371));
                  int v1373 = v1374.quot;
                  v1370 += *(void *)(v1372 + 8 * v1371--) * v1374.rem;
                }
                while (v1371 != -1);
              }
              if ((int)v1868 >= 1)
              {
                uint64_t v1375 = 0;
                unsigned int v1376 = *(unsigned __int8 *)(v1812 + (int)v1363);
                unsigned int v1377 = v1785;
                do
                {
                  *(unsigned char *)(v1360 + v1375) = v1376 / *((unsigned __int8 *)v1796 + (int)v1370 + v1375);
                  --v1377;
                  ++v1375;
                }
                while (v1377 > 1);
                v37 = *(void **)a3;
              }
              v1360 += v1837;
              v1863 += v1837;
            }
            while (v1863 < v37[6]);
          }
          break;
        case 2:
          if (v43 == 2)
          {
            int v1378 = *v39;
            if (*v39)
            {
              unint64_t v1379 = 0;
              uint64_t v1380 = 0;
              uint64_t v1381 = 0;
              uint64_t v1382 = *(void *)(v38 + 152);
              v1383 = v215[19];
              uint64_t v1384 = v37[19];
              do
              {
                if (v39[1])
                {
                  unint64_t v1385 = 0;
                  do
                  {
                    if ((int)v309 >= 1)
                    {
                      uint64_t v1386 = 0;
                      unsigned int v1387 = *((unsigned __int8 *)v1383 + v1380);
                      unsigned int v1388 = v309 + 1;
                      do
                      {
                        *(unsigned char *)(v1384 + v1386) = *(unsigned __int8 *)(v1382 + v1381 + v1386) / v1387;
                        --v1388;
                        ++v1386;
                      }
                      while (v1388 > 1);
                      uint64_t v38 = *a1;
                      v215 = (int **)*a2;
                      v39 = *(int **)*a1;
                    }
                    v1389 = *(void **)(v38 + 24);
                    uint64_t v1390 = v1389[1];
                    v1381 += v1390;
                    v1380 += *((void *)v215[3] + 1);
                    v1384 += (int)v309;
                    ++v1385;
                    unint64_t v1391 = v39[1];
                  }
                  while (v1385 < v1391);
                  int v1378 = *v39;
                  v216 = *v215;
                }
                else
                {
                  unint64_t v1391 = 0;
                  v1389 = *(void **)(v38 + 24);
                  uint64_t v1390 = v1389[1];
                }
                uint64_t v1381 = *v1389 + v1381 - v1391 * v1390;
                uint64_t v1380 = *(void *)v215[3] + v1380 - *((void *)v215[3] + 1) * v216[1];
                ++v1379;
              }
              while (v1379 < v1378);
            }
          }
          else if (v43 == 1)
          {
            int v961 = *v39;
            if (*v39)
            {
              unint64_t v962 = 0;
              uint64_t v963 = 0;
              uint64_t v964 = 0;
              uint64_t v965 = *(void *)(v38 + 152);
              v966 = v215[19];
              uint64_t v967 = v37[19];
              do
              {
                if ((int)v309 >= 1)
                {
                  uint64_t v968 = 0;
                  unsigned int v969 = *((unsigned __int8 *)v966 + v963);
                  unsigned int v970 = v309 + 1;
                  do
                  {
                    *(unsigned char *)(v967 + v968) = *(unsigned __int8 *)(v965 + v964 + v968) / v969;
                    --v970;
                    ++v968;
                  }
                  while (v970 > 1);
                  uint64_t v38 = *a1;
                  v215 = (int **)*a2;
                  int v961 = **(_DWORD **)*a1;
                }
                v964 += **(void **)(v38 + 24);
                v963 += *(void *)v215[3];
                v967 += (int)v309;
                ++v962;
              }
              while (v962 < v961);
            }
          }
          else if (v37[6])
          {
            v1797 = v215[19];
            uint64_t v1813 = *(void *)(v38 + 152);
            uint64_t v1838 = (int)v309;
            unint64_t v1864 = 0;
            unsigned int v1786 = v309 + 1;
            uint64_t v1392 = v37[19];
            do
            {
              uint64_t v1393 = *(void *)*a1;
              unint64_t v1394 = (unint64_t)(*(void *)(*a1 + 8) - v1393) >> 2;
              uint64_t v1395 = 0;
              uint64_t v1396 = (v1394 - 1);
              if ((int)v1394 - 1 >= 0)
              {
                uint64_t v1397 = *(void *)(*a1 + 24);
                int v1398 = v1864;
                do
                {
                  ldiv_t v1399 = ldiv(v1398, *(int *)(v1393 + 4 * v1396));
                  int v1398 = v1399.quot;
                  v1395 += *(void *)(v1397 + 8 * v1396--) * v1399.rem;
                }
                while (v1396 != -1);
              }
              uint64_t v1400 = *(void *)*a2;
              unint64_t v1401 = (unint64_t)(*(void *)(*a2 + 8) - v1400) >> 2;
              uint64_t v1402 = 0;
              uint64_t v1403 = (v1401 - 1);
              if ((int)v1401 - 1 >= 0)
              {
                uint64_t v1404 = *(void *)(*a2 + 24);
                int v1405 = v1864;
                do
                {
                  ldiv_t v1406 = ldiv(v1405, *(int *)(v1400 + 4 * v1403));
                  int v1405 = v1406.quot;
                  v1402 += *(void *)(v1404 + 8 * v1403--) * v1406.rem;
                }
                while (v1403 != -1);
              }
              if ((int)v1868 >= 1)
              {
                uint64_t v1407 = 0;
                unsigned int v1408 = *((unsigned __int8 *)v1797 + (int)v1402);
                unsigned int v1409 = v1786;
                do
                {
                  *(unsigned char *)(v1392 + v1407) = *(unsigned __int8 *)(v1813 + (int)v1395 + v1407) / v1408;
                  --v1409;
                  ++v1407;
                }
                while (v1409 > 1);
                v37 = *(void **)a3;
              }
              v1392 += v1838;
              v1864 += v1838;
            }
            while (v1864 < v37[6]);
          }
          break;
        case 3:
          if (v43 == 2)
          {
            int v1104 = *v39;
            if (*v39)
            {
              unint64_t v1105 = 0;
              uint64_t v1106 = 0;
              uint64_t v1107 = 0;
              uint64_t v1108 = *(void *)(v38 + 152);
              v1109 = v215[19];
              uint64_t v1110 = v37[19];
              do
              {
                if (v39[1])
                {
                  unint64_t v1111 = 0;
                  do
                  {
                    if ((int)v309 >= 1)
                    {
                      uint64_t v1112 = 0;
                      unsigned int v1113 = v309 + 1;
                      do
                      {
                        *(unsigned char *)(v1110 + v1112) = *(unsigned char *)(v1108 + v1107 + v1112)
                                                  / *((unsigned char *)v1109 + v1106 + v1112);
                        --v1113;
                        ++v1112;
                      }
                      while (v1113 > 1);
                      uint64_t v38 = *a1;
                      v215 = (int **)*a2;
                      v39 = *(int **)*a1;
                    }
                    v1114 = *(void **)(v38 + 24);
                    uint64_t v1115 = v1114[1];
                    v1107 += v1115;
                    v1106 += *((void *)v215[3] + 1);
                    v1110 += (int)v309;
                    ++v1111;
                    unint64_t v1116 = v39[1];
                  }
                  while (v1111 < v1116);
                  int v1104 = *v39;
                  v216 = *v215;
                }
                else
                {
                  unint64_t v1116 = 0;
                  v1114 = *(void **)(v38 + 24);
                  uint64_t v1115 = v1114[1];
                }
                uint64_t v1107 = *v1114 + v1107 - v1116 * v1115;
                uint64_t v1106 = *(void *)v215[3] + v1106 - *((void *)v215[3] + 1) * v216[1];
                ++v1105;
              }
              while (v1105 < v1104);
            }
          }
          else if (v43 == 1)
          {
            int v310 = *v39;
            if (*v39)
            {
              unint64_t v311 = 0;
              uint64_t v312 = 0;
              uint64_t v313 = 0;
              uint64_t v314 = *(void *)(v38 + 152);
              v315 = v215[19];
              uint64_t v316 = v37[19];
              do
              {
                if ((int)v309 >= 1)
                {
                  uint64_t v317 = 0;
                  unsigned int v318 = v309 + 1;
                  do
                  {
                    *(unsigned char *)(v316 + v317) = *(unsigned char *)(v314 + v313 + v317) / *((unsigned char *)v315 + v312 + v317);
                    --v318;
                    ++v317;
                  }
                  while (v318 > 1);
                  uint64_t v38 = *a1;
                  v215 = (int **)*a2;
                  int v310 = **(_DWORD **)*a1;
                }
                v313 += **(void **)(v38 + 24);
                v312 += *(void *)v215[3];
                v316 += (int)v309;
                ++v311;
              }
              while (v311 < v310);
            }
          }
          else if (v37[6])
          {
            v1794 = v215[19];
            uint64_t v1806 = *(void *)(v38 + 152);
            uint64_t v1830 = (int)v309;
            unint64_t v1858 = 0;
            unsigned int v1783 = v309 + 1;
            uint64_t v1117 = v37[19];
            do
            {
              uint64_t v1118 = *(void *)*a1;
              unint64_t v1119 = (unint64_t)(*(void *)(*a1 + 8) - v1118) >> 2;
              uint64_t v1120 = 0;
              uint64_t v1121 = (v1119 - 1);
              if ((int)v1119 - 1 >= 0)
              {
                uint64_t v1122 = *(void *)(*a1 + 24);
                int v1123 = v1858;
                do
                {
                  ldiv_t v1124 = ldiv(v1123, *(int *)(v1118 + 4 * v1121));
                  int v1123 = v1124.quot;
                  v1120 += *(void *)(v1122 + 8 * v1121--) * v1124.rem;
                }
                while (v1121 != -1);
              }
              uint64_t v1125 = *(void *)*a2;
              unint64_t v1126 = (unint64_t)(*(void *)(*a2 + 8) - v1125) >> 2;
              uint64_t v1127 = 0;
              uint64_t v1128 = (v1126 - 1);
              if ((int)v1126 - 1 >= 0)
              {
                uint64_t v1129 = *(void *)(*a2 + 24);
                int v1130 = v1858;
                do
                {
                  ldiv_t v1131 = ldiv(v1130, *(int *)(v1125 + 4 * v1128));
                  int v1130 = v1131.quot;
                  v1127 += *(void *)(v1129 + 8 * v1128--) * v1131.rem;
                }
                while (v1128 != -1);
              }
              if ((int)v1868 >= 1)
              {
                uint64_t v1132 = 0;
                unsigned int v1133 = v1783;
                do
                {
                  *(unsigned char *)(v1117 + v1132) = *(unsigned char *)(v1806 + (int)v1120 + v1132)
                                            / *((unsigned char *)v1794 + (int)v1127 + v1132);
                  --v1133;
                  ++v1132;
                }
                while (v1133 > 1);
                v37 = *(void **)a3;
              }
              v1117 += v1830;
              v1858 += v1830;
            }
            while (v1858 < v37[6]);
          }
          break;
        default:
LABEL_338:
          switch(v305)
          {
            case 1uLL:
              if (v37[6])
              {
                unint64_t v319 = 0;
                uint64_t v320 = 0;
                uint64_t v321 = 0;
                uint64_t v322 = *(void *)(v38 + 152);
                v323 = v215[19];
                uint64_t v324 = v37[19];
                do
                {
                  *(unsigned char *)(v324 + v319) = *(unsigned char *)(v322 + v321) / *((unsigned char *)v323 + v320);
                  v321 += **(void **)(*a1 + 24);
                  v320 += **(void **)(*a2 + 24);
                  ++v319;
                }
                while (v319 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v501 = *v39;
              if (*v39)
              {
                unint64_t v502 = 0;
                uint64_t v503 = 0;
                uint64_t v504 = 0;
                uint64_t v505 = 0;
                uint64_t v506 = *(void *)(v38 + 152);
                v507 = v215[19];
                uint64_t v508 = v37[19];
                do
                {
                  if (v39[1])
                  {
                    unint64_t v509 = 0;
                    do
                    {
                      *(unsigned char *)(v508 + v503 + v509) = *(unsigned char *)(v506 + v505) / *((unsigned char *)v507 + v504);
                      uint64_t v38 = *a1;
                      v510 = *(void **)(*a1 + 24);
                      uint64_t v511 = v510[1];
                      v505 += v511;
                      v215 = (int **)*a2;
                      v512 = *(int **)(*a2 + 24);
                      uint64_t v513 = *((void *)v512 + 1);
                      v504 += v513;
                      ++v509;
                      v39 = *(int **)*a1;
                      unint64_t v514 = v39[1];
                    }
                    while (v509 < v514);
                    int v501 = *v39;
                    v216 = *v215;
                    v503 += v509;
                  }
                  else
                  {
                    unint64_t v514 = 0;
                    v510 = *(void **)(v38 + 24);
                    uint64_t v511 = v510[1];
                    v512 = v215[3];
                    uint64_t v513 = *((void *)v512 + 1);
                  }
                  uint64_t v505 = *v510 + v505 - v514 * v511;
                  uint64_t v504 = *(void *)v512 + v504 - v513 * v216[1];
                  ++v502;
                }
                while (v502 < v501);
              }
              break;
            case 3uLL:
              int v515 = *v39;
              if (*v39)
              {
                unint64_t v516 = 0;
                uint64_t v517 = 0;
                uint64_t v518 = 0;
                uint64_t v519 = 0;
                uint64_t v520 = *(void *)(v38 + 152);
                v521 = v215[19];
                uint64_t v522 = v37[19];
                do
                {
                  if (v39[1])
                  {
                    unint64_t v523 = 0;
                    do
                    {
                      if (v39[2])
                      {
                        unint64_t v524 = 0;
                        do
                        {
                          *(unsigned char *)(v522 + v517 + v524) = *(unsigned char *)(v520 + v519) / *((unsigned char *)v521 + v518);
                          uint64_t v38 = *a1;
                          v525 = *(void **)(*a1 + 24);
                          uint64_t v526 = v525[2];
                          v519 += v526;
                          v215 = (int **)*a2;
                          v527 = *(int **)(*a2 + 24);
                          uint64_t v528 = *((void *)v527 + 2);
                          v518 += v528;
                          ++v524;
                          v39 = *(int **)*a1;
                          unint64_t v529 = v39[2];
                        }
                        while (v524 < v529);
                        v216 = *v215;
                        v517 += v524;
                      }
                      else
                      {
                        unint64_t v529 = 0;
                        v525 = *(void **)(v38 + 24);
                        uint64_t v526 = v525[2];
                        v527 = v215[3];
                        uint64_t v528 = *((void *)v527 + 2);
                      }
                      uint64_t v530 = v525[1];
                      uint64_t v519 = v530 + v519 - v529 * v526;
                      uint64_t v518 = *((void *)v527 + 1) + v518 - v528 * v216[2];
                      ++v523;
                      unint64_t v531 = v39[1];
                    }
                    while (v523 < v531);
                    int v515 = *v39;
                  }
                  else
                  {
                    unint64_t v531 = 0;
                    v525 = *(void **)(v38 + 24);
                    uint64_t v530 = v525[1];
                  }
                  uint64_t v519 = *v525 + v519 - v531 * v530;
                  uint64_t v518 = *(void *)v215[3] + v518 - *((void *)v215[3] + 1) * v216[1];
                  ++v516;
                }
                while (v516 < v515);
              }
              break;
            case 4uLL:
              int v532 = *v39;
              if (*v39)
              {
                unint64_t v533 = 0;
                uint64_t v534 = 0;
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = *(void *)(v38 + 152);
                v538 = v215[19];
                uint64_t v539 = v37[19];
                do
                {
                  if (v39[1])
                  {
                    unint64_t v540 = 0;
                    do
                    {
                      if (v39[2])
                      {
                        unint64_t v541 = 0;
                        do
                        {
                          if (v39[3])
                          {
                            unint64_t v542 = 0;
                            do
                            {
                              *(unsigned char *)(v539 + v534 + v542) = *(unsigned char *)(v537 + v536) / *((unsigned char *)v538 + v535);
                              uint64_t v38 = *a1;
                              v543 = *(void **)(*a1 + 24);
                              uint64_t v544 = v543[3];
                              v536 += v544;
                              v215 = (int **)*a2;
                              v545 = *(int **)(*a2 + 24);
                              uint64_t v546 = *((void *)v545 + 3);
                              v535 += v546;
                              ++v542;
                              v39 = *(int **)*a1;
                              unint64_t v547 = v39[3];
                            }
                            while (v542 < v547);
                            v216 = *v215;
                            v534 += v542;
                          }
                          else
                          {
                            unint64_t v547 = 0;
                            v543 = *(void **)(v38 + 24);
                            uint64_t v544 = v543[3];
                            v545 = v215[3];
                            uint64_t v546 = *((void *)v545 + 3);
                          }
                          uint64_t v548 = v543[2];
                          uint64_t v536 = v548 + v536 - v547 * v544;
                          uint64_t v535 = *((void *)v545 + 2) + v535 - v546 * v216[3];
                          ++v541;
                          unint64_t v549 = v39[2];
                        }
                        while (v541 < v549);
                      }
                      else
                      {
                        unint64_t v549 = 0;
                        v543 = *(void **)(v38 + 24);
                        uint64_t v548 = v543[2];
                      }
                      uint64_t v536 = v543[1] + v536 - v549 * v548;
                      uint64_t v535 = *((void *)v215[3] + 1) + v535 - *((void *)v215[3] + 2) * v216[2];
                      ++v540;
                      unint64_t v550 = v39[1];
                    }
                    while (v540 < v550);
                    int v532 = *v39;
                  }
                  else
                  {
                    unint64_t v550 = 0;
                  }
                  uint64_t v536 = **(void **)(v38 + 24) + v536 - *(void *)(*(void *)(v38 + 24) + 8) * v550;
                  uint64_t v535 = *(void *)v215[3] + v535 - *((void *)v215[3] + 1) * v216[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            default:
              if (v37[6])
              {
                unint64_t v485 = 0;
                v1853 = v215[19];
                uint64_t v1874 = *(void *)(v38 + 152);
                uint64_t v486 = v37[19];
                do
                {
                  uint64_t v487 = *(void *)*a1;
                  unint64_t v488 = (unint64_t)(*(void *)(*a1 + 8) - v487) >> 2;
                  uint64_t v489 = 0;
                  uint64_t v490 = (v488 - 1);
                  if ((int)v488 - 1 >= 0)
                  {
                    uint64_t v491 = *(void *)(*a1 + 24);
                    int v492 = v485;
                    do
                    {
                      ldiv_t v493 = ldiv(v492, *(int *)(v487 + 4 * v490));
                      int v492 = v493.quot;
                      v489 += *(void *)(v491 + 8 * v490--) * v493.rem;
                    }
                    while (v490 != -1);
                  }
                  uint64_t v494 = *(void *)*a2;
                  unint64_t v495 = (unint64_t)(*(void *)(*a2 + 8) - v494) >> 2;
                  uint64_t v496 = 0;
                  uint64_t v497 = (v495 - 1);
                  if ((int)v495 - 1 >= 0)
                  {
                    uint64_t v498 = *(void *)(*a2 + 24);
                    int v499 = v485;
                    do
                    {
                      ldiv_t v500 = ldiv(v499, *(int *)(v494 + 4 * v497));
                      int v499 = v500.quot;
                      v496 += *(void *)(v498 + 8 * v497--) * v500.rem;
                    }
                    while (v497 != -1);
                  }
                  *(unsigned char *)(v486 + v485++) = *(unsigned char *)(v1874 + (int)v489) / *((unsigned char *)v1853 + (int)v496);
                }
                while (v485 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v9)
      {
        case 0:
          int v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
          goto LABEL_13;
        case 1:
          int v74 = *(_DWORD *)(*a2 + 160);
          if (v74 >= 1)
          {
            unsigned int v75 = **(_DWORD **)(*a1 + 152);
            v76 = *(int **)(*(void *)a3 + 152);
            v77 = *(unsigned int **)(*a2 + 152);
            unsigned int v78 = v74 + 1;
            do
            {
              unsigned int v79 = *v77++;
              *v76++ = v75 / v79;
              --v78;
            }
            while (v78 > 1);
          }
          return;
        case 2:
          int v80 = *(_DWORD *)(*a1 + 160);
          if (v80 >= 1)
          {
            unsigned int v81 = **(_DWORD **)(*a2 + 152);
            v82 = *(int **)(*(void *)a3 + 152);
            v83 = *(unsigned int **)(*a1 + 152);
            unsigned int v84 = v80 + 1;
            do
            {
              unsigned int v85 = *v83++;
              *v82++ = v85 / v81;
              --v84;
            }
            while (v84 > 1);
          }
          return;
        case 3:
          int v86 = *(_DWORD *)(*(void *)a3 + 48);
          if (v86 >= 1)
          {
            v87 = *(int **)(*(void *)a3 + 152);
            v88 = *(unsigned int **)(*a2 + 152);
            v89 = *(int **)(*a1 + 152);
            unsigned int v90 = v86 + 1;
            do
            {
              unsigned int v92 = *v89++;
              unsigned int v91 = v92;
              unsigned int v93 = *v88++;
              *v87++ = v91 / v93;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        default:
          v65 = *(void **)a3;
          v66 = (void *)*a1;
          v67 = *(int **)*a1;
          uint64_t v68 = (v66[1] - (void)v67) >> 2;
          uint64_t v69 = (v68 - 1);
          if ((int)v69 >= -1) {
            int v70 = -1;
          }
          else {
            int v70 = v68 - 1;
          }
          int v71 = v70 + 1;
          int v72 = v68 + 1;
          break;
      }
      while (1)
      {
        unsigned int v73 = v72 - 2;
        if (v72 - 2 < 0) {
          break;
        }
        --v72;
        if (*(void *)(v66[3] + 8 * v73) != *(void *)(v65[3] + 8 * v73)) {
          goto LABEL_164;
        }
      }
      int v72 = v71;
LABEL_164:
      v222 = (void *)*a2;
      v223 = *(int **)*a2;
      uint64_t v224 = (v222[1] - (void)v223) >> 2;
      uint64_t v225 = (v224 - 1);
      if ((int)v225 >= -1) {
        int v226 = -1;
      }
      else {
        int v226 = v224 - 1;
      }
      int v227 = v226 + 1;
      int v228 = v224 + 1;
      while (1)
      {
        unsigned int v229 = v228 - 2;
        if (v228 - 2 < 0) {
          break;
        }
        --v228;
        if (*(void *)(v222[3] + 8 * v229) != *(void *)(v65[3] + 8 * v229)) {
          goto LABEL_213;
        }
      }
      int v228 = v227;
LABEL_213:
      int v265 = v68 + 1;
      while (1)
      {
        unsigned int v266 = v265 - 2;
        if (v265 - 2 < 0) {
          break;
        }
        --v265;
        if (*(void *)(v66[3] + 8 * v266)) {
          goto LABEL_248;
        }
      }
      int v265 = v71;
LABEL_248:
      int v279 = v224 + 1;
      while (1)
      {
        unsigned int v280 = v279 - 2;
        if (v279 - 2 < 0) {
          break;
        }
        --v279;
        if (*(void *)(v222[3] + 8 * v280)) {
          goto LABEL_344;
        }
      }
      int v279 = v227;
LABEL_344:
      unint64_t v325 = (uint64_t)(v65[1] - *v65) >> 2;
      if (v72 <= v228) {
        int v326 = v228;
      }
      else {
        int v326 = v72;
      }
      if (v72 <= v279) {
        int v72 = v279;
      }
      if (v265 > v228) {
        int v228 = v265;
      }
      if (v325 > v228)
      {
        int v327 = 1;
      }
      else
      {
        int v228 = (uint64_t)(v65[1] - *v65) >> 2;
        int v327 = 4;
      }
      if (v325 > v72)
      {
        int v328 = 2;
      }
      else
      {
        int v72 = v228;
        int v328 = v327;
      }
      if (v325 > v326)
      {
        int v72 = v326;
        int v328 = 3;
      }
      uint64_t v1849 = v225;
      uint64_t v1869 = v69;
      if (!v72) {
        goto LABEL_374;
      }
      unint64_t v329 = *(void *)(v65[3] + 8 * (v72 - 1));
      if (v329 < 0x10) {
        goto LABEL_374;
      }
      switch(v328)
      {
        case 1:
          if (v72 == 2)
          {
            int v1410 = *v67;
            if (*v67)
            {
              unint64_t v1411 = 0;
              uint64_t v1412 = 0;
              uint64_t v1413 = 0;
              uint64_t v1414 = v66[19];
              uint64_t v1415 = v222[19];
              uint64_t v1416 = v65[19];
              v1417 = (uint64_t *)v66[3];
              uint64_t v1418 = *v1417;
              uint64_t v1419 = v1417[1];
              v1420 = (uint64_t *)v222[3];
              uint64_t v1421 = *v1420;
              uint64_t v1422 = v1420[1];
              int v1423 = v67[1];
              int v1424 = v1423;
              do
              {
                if (v1424)
                {
                  unint64_t v1425 = 0;
                  uint64_t v1426 = v1415 + 4 * v1412;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1427 = 0;
                      unsigned int v1428 = *(_DWORD *)(v1414 + 4 * v1413);
                      unsigned int v1429 = v329 + 1;
                      do
                      {
                        *(_DWORD *)(v1416 + v1427) = v1428 / *(_DWORD *)(v1426 + v1427);
                        --v1429;
                        v1427 += 4;
                      }
                      while (v1429 > 1);
                      int v1423 = v67[1];
                    }
                    v1413 += v1419;
                    v1412 += v1422;
                    v1416 += 4 * (int)v329;
                    ++v1425;
                    v1426 += 4 * v1422;
                  }
                  while (v1425 < v1423);
                  uint64_t v1430 = v1423;
                  int v1410 = *v67;
                  int v1424 = v1423;
                }
                else
                {
                  uint64_t v1430 = 0;
                }
                uint64_t v1413 = v1413 + v1418 - v1430 * v1419;
                uint64_t v1412 = v1412 + v1421 - v1422 * v223[1];
                ++v1411;
              }
              while (v1411 < v1410);
            }
          }
          else if (v72 == 1)
          {
            int v971 = *v67;
            if (*v67)
            {
              unint64_t v972 = 0;
              uint64_t v973 = 0;
              uint64_t v974 = v66[19];
              uint64_t v975 = v222[19];
              uint64_t v976 = v65[19];
              uint64_t v977 = *(void *)v66[3];
              uint64_t v978 = 4 * *(void *)v222[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v979 = 0;
                  unsigned int v980 = *(_DWORD *)(v974 + 4 * v973);
                  unsigned int v981 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v976 + v979) = v980 / *(_DWORD *)(v975 + v979);
                    --v981;
                    v979 += 4;
                  }
                  while (v981 > 1);
                  int v971 = *v67;
                }
                v973 += v977;
                ++v972;
                v976 += 4 * (int)v329;
                v975 += v978;
              }
              while (v972 < v971);
            }
          }
          else
          {
            unint64_t v1814 = v65[6];
            if (v1814)
            {
              unint64_t v1839 = 0;
              uint64_t v1762 = v222[19];
              uint64_t v1774 = v66[19];
              uint64_t v1431 = v65[19];
              do
              {
                uint64_t v1432 = 0;
                if ((v69 & 0x80000000) == 0)
                {
                  uint64_t v1433 = v66[3];
                  uint64_t v1434 = v69;
                  int v1435 = v1839;
                  do
                  {
                    ldiv_t v1436 = ldiv(v1435, v67[v1434]);
                    int v1435 = v1436.quot;
                    v1432 += *(void *)(v1433 + 8 * v1434--) * v1436.rem;
                  }
                  while (v1434 != -1);
                }
                uint64_t v1437 = v1849;
                if ((v1849 & 0x80000000) != 0)
                {
                  LODWORD(v1438) = 0;
                }
                else
                {
                  uint64_t v1438 = 0;
                  uint64_t v1439 = v222[3];
                  int v1440 = v1839;
                  do
                  {
                    ldiv_t v1441 = ldiv(v1440, v223[v1437]);
                    int v1440 = v1441.quot;
                    v1438 += *(void *)(v1439 + 8 * v1437--) * v1441.rem;
                  }
                  while (v1437 != -1);
                }
                uint64_t v69 = v1869;
                if ((int)v329 >= 1)
                {
                  uint64_t v1442 = 0;
                  unsigned int v1443 = *(_DWORD *)(v1774 + 4 * (int)v1432);
                  unsigned int v1444 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v1431 + v1442) = v1443 / *(_DWORD *)(v1762 + 4 * (int)v1438 + v1442);
                    --v1444;
                    v1442 += 4;
                  }
                  while (v1444 > 1);
                }
                v1431 += 4 * (int)v329;
                v1839 += (int)v329;
              }
              while (v1839 < v1814);
            }
          }
          break;
        case 2:
          if (v72 == 2)
          {
            int v1445 = *v67;
            if (*v67)
            {
              unint64_t v1446 = 0;
              uint64_t v1447 = 0;
              uint64_t v1448 = 0;
              uint64_t v1449 = v66[19];
              uint64_t v1450 = v222[19];
              uint64_t v1451 = v65[19];
              v1452 = (uint64_t *)v66[3];
              uint64_t v1453 = *v1452;
              uint64_t v1454 = v1452[1];
              v1455 = (uint64_t *)v222[3];
              uint64_t v1456 = *v1455;
              uint64_t v1457 = v1455[1];
              int v1458 = v67[1];
              int v1459 = v1458;
              do
              {
                if (v1459)
                {
                  unint64_t v1460 = 0;
                  uint64_t v1461 = v1449 + 4 * v1448;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1462 = 0;
                      unsigned int v1463 = *(_DWORD *)(v1450 + 4 * v1447);
                      unsigned int v1464 = v329 + 1;
                      do
                      {
                        *(_DWORD *)(v1451 + v1462) = *(_DWORD *)(v1461 + v1462) / v1463;
                        --v1464;
                        v1462 += 4;
                      }
                      while (v1464 > 1);
                      int v1458 = v67[1];
                    }
                    v1448 += v1454;
                    v1447 += v1457;
                    v1451 += 4 * (int)v329;
                    ++v1460;
                    v1461 += 4 * v1454;
                  }
                  while (v1460 < v1458);
                  uint64_t v1465 = v1458;
                  int v1445 = *v67;
                  int v1459 = v1458;
                }
                else
                {
                  uint64_t v1465 = 0;
                }
                uint64_t v1448 = v1448 + v1453 - v1465 * v1454;
                uint64_t v1447 = v1447 + v1456 - v1457 * v223[1];
                ++v1446;
              }
              while (v1446 < v1445);
            }
          }
          else if (v72 == 1)
          {
            int v982 = *v67;
            if (*v67)
            {
              unint64_t v983 = 0;
              uint64_t v984 = 0;
              uint64_t v985 = v66[19];
              uint64_t v986 = v222[19];
              uint64_t v987 = v65[19];
              uint64_t v988 = *(void *)v222[3];
              uint64_t v989 = 4 * *(void *)v66[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v990 = 0;
                  unsigned int v991 = *(_DWORD *)(v986 + 4 * v984);
                  unsigned int v992 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v987 + v990) = *(_DWORD *)(v985 + v990) / v991;
                    --v992;
                    v990 += 4;
                  }
                  while (v992 > 1);
                  int v982 = *v67;
                }
                v984 += v988;
                ++v983;
                v987 += 4 * (int)v329;
                v985 += v989;
              }
              while (v983 < v982);
            }
          }
          else
          {
            unint64_t v1815 = v65[6];
            if (v1815)
            {
              unint64_t v1840 = 0;
              uint64_t v1763 = v222[19];
              uint64_t v1775 = v66[19];
              uint64_t v1466 = v65[19];
              do
              {
                uint64_t v1467 = 0;
                if ((v69 & 0x80000000) == 0)
                {
                  uint64_t v1468 = v66[3];
                  uint64_t v1469 = v69;
                  int v1470 = v1840;
                  do
                  {
                    ldiv_t v1471 = ldiv(v1470, v67[v1469]);
                    int v1470 = v1471.quot;
                    v1467 += *(void *)(v1468 + 8 * v1469--) * v1471.rem;
                  }
                  while (v1469 != -1);
                }
                uint64_t v1472 = v1849;
                if ((v1849 & 0x80000000) != 0)
                {
                  LODWORD(v1473) = 0;
                }
                else
                {
                  uint64_t v1473 = 0;
                  uint64_t v1474 = v222[3];
                  int v1475 = v1840;
                  do
                  {
                    ldiv_t v1476 = ldiv(v1475, v223[v1472]);
                    int v1475 = v1476.quot;
                    v1473 += *(void *)(v1474 + 8 * v1472--) * v1476.rem;
                  }
                  while (v1472 != -1);
                }
                uint64_t v69 = v1869;
                if ((int)v329 >= 1)
                {
                  uint64_t v1477 = 0;
                  unsigned int v1478 = *(_DWORD *)(v1763 + 4 * (int)v1473);
                  unsigned int v1479 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v1466 + v1477) = *(_DWORD *)(v1775 + 4 * (int)v1467 + v1477) / v1478;
                    --v1479;
                    v1477 += 4;
                  }
                  while (v1479 > 1);
                }
                v1466 += 4 * (int)v329;
                v1840 += (int)v329;
              }
              while (v1840 < v1815);
            }
          }
          break;
        case 3:
          if (v72 == 2)
          {
            int v1134 = *v67;
            if (*v67)
            {
              unint64_t v1135 = 0;
              uint64_t v1136 = 0;
              uint64_t v1137 = 0;
              uint64_t v1138 = v66[19];
              uint64_t v1139 = v222[19];
              uint64_t v1140 = v65[19];
              v1141 = (uint64_t *)v66[3];
              uint64_t v1142 = *v1141;
              uint64_t v1143 = v1141[1];
              v1144 = (uint64_t *)v222[3];
              uint64_t v1145 = *v1144;
              uint64_t v1146 = v1144[1];
              int v1147 = v67[1];
              int v1148 = v1147;
              do
              {
                if (v1148)
                {
                  unint64_t v1149 = 0;
                  uint64_t v1150 = v1139 + 4 * v1136;
                  uint64_t v1151 = v1138 + 4 * v1137;
                  do
                  {
                    if ((int)v329 >= 1)
                    {
                      uint64_t v1152 = 0;
                      unsigned int v1153 = v329 + 1;
                      do
                      {
                        *(_DWORD *)(v1140 + v1152) = *(_DWORD *)(v1151 + v1152) / *(_DWORD *)(v1150 + v1152);
                        --v1153;
                        v1152 += 4;
                      }
                      while (v1153 > 1);
                      int v1147 = v67[1];
                    }
                    v1137 += v1143;
                    v1136 += v1146;
                    v1140 += 4 * (int)v329;
                    ++v1149;
                    v1150 += 4 * v1146;
                    v1151 += 4 * v1143;
                  }
                  while (v1149 < v1147);
                  uint64_t v1154 = v1147;
                  int v1134 = *v67;
                  int v1148 = v1147;
                }
                else
                {
                  uint64_t v1154 = 0;
                }
                uint64_t v1137 = v1137 + v1142 - v1154 * v1143;
                uint64_t v1136 = v1136 + v1145 - v1146 * v223[1];
                ++v1135;
              }
              while (v1135 < v1134);
            }
          }
          else if (v72 == 1)
          {
            int v330 = *v67;
            if (*v67)
            {
              unint64_t v331 = 0;
              uint64_t v332 = v66[19];
              uint64_t v333 = v222[19];
              uint64_t v334 = v65[19];
              uint64_t v335 = 4 * *(void *)v222[3];
              uint64_t v336 = 4 * *(void *)v66[3];
              do
              {
                if ((int)v329 >= 1)
                {
                  uint64_t v337 = 0;
                  unsigned int v338 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v334 + v337) = *(_DWORD *)(v332 + v337) / *(_DWORD *)(v333 + v337);
                    --v338;
                    v337 += 4;
                  }
                  while (v338 > 1);
                  int v330 = *v67;
                }
                ++v331;
                v334 += 4 * (int)v329;
                v333 += v335;
                v332 += v336;
              }
              while (v331 < v330);
            }
          }
          else
          {
            unint64_t v1807 = v65[6];
            if (v1807)
            {
              unint64_t v1831 = 0;
              uint64_t v1758 = v222[19];
              uint64_t v1770 = v66[19];
              uint64_t v1155 = v65[19];
              do
              {
                uint64_t v1156 = 0;
                if ((v69 & 0x80000000) == 0)
                {
                  uint64_t v1157 = v66[3];
                  uint64_t v1158 = v69;
                  int v1159 = v1831;
                  do
                  {
                    ldiv_t v1160 = ldiv(v1159, v67[v1158]);
                    int v1159 = v1160.quot;
                    v1156 += *(void *)(v1157 + 8 * v1158--) * v1160.rem;
                  }
                  while (v1158 != -1);
                }
                uint64_t v1161 = v1849;
                if ((v1849 & 0x80000000) != 0)
                {
                  LODWORD(v1162) = 0;
                }
                else
                {
                  uint64_t v1162 = 0;
                  uint64_t v1163 = v222[3];
                  int v1164 = v1831;
                  do
                  {
                    ldiv_t v1165 = ldiv(v1164, v223[v1161]);
                    int v1164 = v1165.quot;
                    v1162 += *(void *)(v1163 + 8 * v1161--) * v1165.rem;
                  }
                  while (v1161 != -1);
                }
                uint64_t v69 = v1869;
                if ((int)v329 >= 1)
                {
                  uint64_t v1166 = 0;
                  unsigned int v1167 = v329 + 1;
                  do
                  {
                    *(_DWORD *)(v1155 + v1166) = *(_DWORD *)(v1770 + 4 * (int)v1156 + v1166)
                                               / *(_DWORD *)(v1758 + 4 * (int)v1162 + v1166);
                    --v1167;
                    v1166 += 4;
                  }
                  while (v1167 > 1);
                }
                v1155 += 4 * (int)v329;
                v1831 += (int)v329;
              }
              while (v1831 < v1807);
            }
          }
          break;
        default:
LABEL_374:
          switch(v325)
          {
            case 1uLL:
              uint64_t v339 = v65[6];
              if (v339)
              {
                v340 = (_DWORD *)v66[19];
                v341 = (_DWORD *)v222[19];
                v342 = (int *)v65[19];
                uint64_t v343 = 4 * *(void *)v222[3];
                uint64_t v344 = 4 * *(void *)v66[3];
                do
                {
                  *v342++ = *v340 / *v341;
                  v341 = (_DWORD *)((char *)v341 + v343);
                  v340 = (_DWORD *)((char *)v340 + v344);
                  --v339;
                }
                while (v339);
              }
              break;
            case 2uLL:
              int v563 = *v67;
              if (*v67)
              {
                unint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = 0;
                uint64_t v568 = v66[19];
                uint64_t v569 = v222[19];
                uint64_t v570 = v65[19];
                v571 = (uint64_t *)v66[3];
                uint64_t v572 = *v571;
                uint64_t v573 = v571[1];
                v574 = (uint64_t *)v222[3];
                uint64_t v576 = *v574;
                uint64_t v575 = v574[1];
                int v577 = v67[1];
                do
                {
                  if (v577)
                  {
                    for (unint64_t i = 0; i < v577; ++i)
                    {
                      *(_DWORD *)(v570 + 4 * v565 + 4 * i) = *(_DWORD *)(v568 + 4 * v567) / *(_DWORD *)(v569 + 4 * v566);
                      v567 += v573;
                      v566 += v575;
                      int v577 = v67[1];
                    }
                    uint64_t v579 = v577;
                    int v563 = *v67;
                    v565 += i;
                  }
                  else
                  {
                    uint64_t v579 = 0;
                  }
                  uint64_t v567 = v567 + v572 - v579 * v573;
                  uint64_t v566 = v566 + v576 - v575 * v223[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            case 3uLL:
              int v580 = *v67;
              if (*v67)
              {
                unint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = 0;
                uint64_t v584 = 0;
                uint64_t v585 = v66[19];
                uint64_t v586 = v222[19];
                uint64_t v587 = v65[19];
                v588 = (uint64_t *)v66[3];
                uint64_t v589 = *v588;
                uint64_t v590 = v588[1];
                v591 = (uint64_t *)v222[3];
                uint64_t v592 = *v591;
                uint64_t v593 = v591[1];
                int v594 = v67[1];
                int v595 = v594;
                do
                {
                  if (v595)
                  {
                    unint64_t v596 = 0;
                    uint64_t v597 = v588[2];
                    uint64_t v598 = v591[2];
                    int v599 = v67[2];
                    do
                    {
                      if (v599)
                      {
                        for (unint64_t j = 0; j < v599; ++j)
                        {
                          *(_DWORD *)(v587 + 4 * v582 + 4 * j) = *(_DWORD *)(v585 + 4 * v584)
                                                               / *(_DWORD *)(v586 + 4 * v583);
                          v584 += v597;
                          v583 += v598;
                          int v599 = v67[2];
                        }
                        uint64_t v601 = v599;
                        int v594 = v67[1];
                        v582 += j;
                      }
                      else
                      {
                        uint64_t v601 = 0;
                      }
                      uint64_t v584 = v584 + v590 - v601 * v597;
                      uint64_t v583 = v583 + v593 - v598 * v223[2];
                      ++v596;
                    }
                    while (v596 < v594);
                    uint64_t v602 = v594;
                    int v580 = *v67;
                    int v595 = v594;
                  }
                  else
                  {
                    uint64_t v602 = 0;
                  }
                  uint64_t v584 = v584 + v589 - v602 * v590;
                  uint64_t v583 = v583 + v592 - v593 * v223[1];
                  ++v581;
                }
                while (v581 < v580);
              }
              break;
            case 4uLL:
              int v603 = *v67;
              if (*v67)
              {
                unint64_t v604 = 0;
                uint64_t v605 = 0;
                uint64_t v606 = 0;
                uint64_t v607 = 0;
                uint64_t v608 = v66[19];
                uint64_t v609 = v222[19];
                uint64_t v610 = v65[19];
                v611 = (uint64_t *)v66[3];
                uint64_t v612 = *v611;
                uint64_t v613 = v611[1];
                v614 = (uint64_t *)v222[3];
                uint64_t v615 = *v614;
                uint64_t v616 = v614[1];
                int v617 = v67[1];
                int v618 = v617;
                do
                {
                  if (v618)
                  {
                    unint64_t v619 = 0;
                    uint64_t v620 = v611[2];
                    uint64_t v621 = v614[2];
                    int v622 = v67[2];
                    int v623 = v622;
                    do
                    {
                      if (v623)
                      {
                        unint64_t v624 = 0;
                        uint64_t v625 = v611[3];
                        uint64_t v626 = v614[3];
                        int v627 = v67[3];
                        do
                        {
                          if (v627)
                          {
                            for (unint64_t k = 0; k < v627; ++k)
                            {
                              *(_DWORD *)(v610 + 4 * v605 + 4 * k) = *(_DWORD *)(v608 + 4 * v607)
                                                                   / *(_DWORD *)(v609 + 4 * v606);
                              v607 += v625;
                              v606 += v626;
                              int v627 = v67[3];
                            }
                            uint64_t v629 = v627;
                            int v622 = v67[2];
                            v605 += k;
                          }
                          else
                          {
                            uint64_t v629 = 0;
                          }
                          uint64_t v607 = v607 + v620 - v629 * v625;
                          uint64_t v606 = v606 + v621 - v626 * v223[3];
                          ++v624;
                        }
                        while (v624 < v622);
                        uint64_t v630 = v622;
                        int v617 = v67[1];
                        int v623 = v622;
                      }
                      else
                      {
                        uint64_t v630 = 0;
                      }
                      uint64_t v607 = v607 + v613 - v630 * v620;
                      uint64_t v606 = v606 + v616 - v621 * v223[2];
                      ++v619;
                    }
                    while (v619 < v617);
                    uint64_t v631 = v617;
                    int v603 = *v67;
                    int v618 = v617;
                  }
                  else
                  {
                    uint64_t v631 = 0;
                  }
                  uint64_t v607 = v607 + v612 - v631 * v613;
                  uint64_t v606 = v606 + v615 - v616 * v223[1];
                  ++v604;
                }
                while (v604 < v603);
              }
              break;
            default:
              uint64_t v551 = v65[6];
              if (v551)
              {
                uint64_t v552 = 0;
                uint64_t v1800 = v222[19];
                uint64_t v1824 = v66[19];
                uint64_t v1789 = v65[19];
                do
                {
                  uint64_t v553 = 0;
                  if ((v69 & 0x80000000) == 0)
                  {
                    uint64_t v554 = v66[3];
                    uint64_t v555 = v69;
                    int v556 = v552;
                    do
                    {
                      ldiv_t v557 = ldiv(v556, v67[v555]);
                      int v556 = v557.quot;
                      v553 += *(void *)(v554 + 8 * v555--) * v557.rem;
                    }
                    while (v555 != -1);
                  }
                  uint64_t v558 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v559) = 0;
                  }
                  else
                  {
                    uint64_t v559 = 0;
                    uint64_t v560 = v222[3];
                    int v561 = v552;
                    do
                    {
                      ldiv_t v562 = ldiv(v561, v223[v558]);
                      int v561 = v562.quot;
                      v559 += *(void *)(v560 + 8 * v558--) * v562.rem;
                    }
                    while (v558 != -1);
                  }
                  *(_DWORD *)(v1789 + 4 * v552++) = *(_DWORD *)(v1824 + 4 * (int)v553)
                                                  / *(_DWORD *)(v1800 + 4 * (int)v559);
                  uint64_t v69 = v1869;
                }
                while (v552 != v551);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v11)
      {
        case 0:
          char v7 = **(char **)(*a1 + 152) / **(char **)(*a2 + 152);
LABEL_10:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v102 = *(_DWORD *)(*a2 + 160);
          if (v102 >= 1)
          {
            v103 = *(unsigned char **)(*(void *)a3 + 152);
            v104 = *(char **)(*a2 + 152);
            int v105 = **(char **)(*a1 + 152);
            unsigned int v106 = v102 + 1;
            do
            {
              int v107 = *v104++;
              *v103++ = v105 / v107;
              --v106;
            }
            while (v106 > 1);
          }
          return;
        case 2:
          int v108 = *(_DWORD *)(*a1 + 160);
          if (v108 >= 1)
          {
            v109 = *(unsigned char **)(*(void *)a3 + 152);
            v110 = *(char **)(*a1 + 152);
            int v111 = **(char **)(*a2 + 152);
            unsigned int v112 = v108 + 1;
            do
            {
              int v113 = *v110++;
              *v109++ = v113 / v111;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 3:
          int v114 = *(_DWORD *)(*(void *)a3 + 48);
          if (v114 >= 1)
          {
            v115 = *(unsigned char **)(*(void *)a3 + 152);
            v116 = *(char **)(*a2 + 152);
            v117 = *(char **)(*a1 + 152);
            unsigned int v118 = v114 + 1;
            do
            {
              int v120 = *v117++;
              int v119 = v120;
              int v121 = *v116++;
              *v115++ = v119 / v121;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        default:
          v94 = *(void **)a3;
          uint64_t v95 = *a1;
          v96 = *(int **)*a1;
          uint64_t v97 = (*(void *)(*a1 + 8) - (void)v96) >> 2;
          int v98 = v97 - 1;
          if ((int)v97 - 1 >= -1) {
            int v98 = -1;
          }
          int v99 = v98 + 1;
          int v100 = v97 + 1;
          while (1)
          {
            unsigned int v101 = v100 - 2;
            if (v100 - 2 < 0) {
              break;
            }
            --v100;
            if (*(void *)(*(void *)(v95 + 24) + 8 * v101) != *(void *)(v94[3] + 8 * v101)) {
              goto LABEL_172;
            }
          }
          int v100 = v99;
LABEL_172:
          v230 = (int **)*a2;
          v231 = *(int **)*a2;
          uint64_t v232 = (*(void *)(*a2 + 8) - (void)v231) >> 2;
          int v233 = v232 - 1;
          if ((int)v232 - 1 >= -1) {
            int v233 = -1;
          }
          int v234 = v233 + 1;
          int v235 = v232 + 1;
          while (1)
          {
            unsigned int v236 = v235 - 2;
            if (v235 - 2 < 0) {
              break;
            }
            --v235;
            if (*(void *)&v230[3][2 * v236] != *(void *)(v94[3] + 8 * v236)) {
              goto LABEL_218;
            }
          }
          int v235 = v234;
LABEL_218:
          int v267 = v97 + 1;
          while (1)
          {
            unsigned int v268 = v267 - 2;
            if (v267 - 2 < 0) {
              break;
            }
            --v267;
            if (*(void *)(*(void *)(v95 + 24) + 8 * v268)) {
              goto LABEL_253;
            }
          }
          int v267 = v99;
LABEL_253:
          int v281 = v232 + 1;
          while (1)
          {
            int v282 = v281 - 2;
            if (v281 - 2 < 0) {
              break;
            }
            --v281;
            if (*(void *)&v230[3][2 * v282]) {
              goto LABEL_380;
            }
          }
          int v281 = v234;
LABEL_380:
          unint64_t v345 = (uint64_t)(v94[1] - *v94) >> 2;
          if (v100 <= v235) {
            int v346 = v235;
          }
          else {
            int v346 = v100;
          }
          if (v100 <= v281) {
            int v100 = v281;
          }
          if (v267 > v235) {
            int v235 = v267;
          }
          if (v345 > v235)
          {
            int v347 = 1;
          }
          else
          {
            int v235 = (uint64_t)(v94[1] - *v94) >> 2;
            int v347 = 4;
          }
          if (v345 > v100)
          {
            int v348 = 2;
          }
          else
          {
            int v100 = v235;
            int v348 = v347;
          }
          if (v345 > v346)
          {
            int v100 = v346;
            int v348 = 3;
          }
          if (!v100) {
            goto LABEL_410;
          }
          unint64_t v349 = *(void *)(v94[3] + 8 * (v100 - 1));
          if (v349 < 0x10) {
            goto LABEL_410;
          }
          uint64_t v1870 = *(void *)(v94[3] + 8 * (v100 - 1));
          switch(v348)
          {
            case 1:
              if (v100 == 2)
              {
                int v1480 = *v96;
                if (*v96)
                {
                  unint64_t v1481 = 0;
                  uint64_t v1482 = 0;
                  uint64_t v1483 = 0;
                  uint64_t v1484 = *(void *)(v95 + 152);
                  v1485 = v230[19];
                  uint64_t v1486 = v94[19];
                  do
                  {
                    if (v96[1])
                    {
                      unint64_t v1487 = 0;
                      do
                      {
                        if ((int)v349 >= 1)
                        {
                          uint64_t v1488 = 0;
                          int v1489 = *(char *)(v1484 + v1483);
                          unsigned int v1490 = v349 + 1;
                          do
                          {
                            *(unsigned char *)(v1486 + v1488) = v1489 / *((char *)v1485 + v1482 + v1488);
                            --v1490;
                            ++v1488;
                          }
                          while (v1490 > 1);
                          uint64_t v95 = *a1;
                          v230 = (int **)*a2;
                          v96 = *(int **)*a1;
                        }
                        v1491 = *(void **)(v95 + 24);
                        uint64_t v1492 = v1491[1];
                        v1483 += v1492;
                        v1482 += *((void *)v230[3] + 1);
                        v1486 += (int)v349;
                        ++v1487;
                        unint64_t v1493 = v96[1];
                      }
                      while (v1487 < v1493);
                      int v1480 = *v96;
                      v231 = *v230;
                    }
                    else
                    {
                      unint64_t v1493 = 0;
                      v1491 = *(void **)(v95 + 24);
                      uint64_t v1492 = v1491[1];
                    }
                    uint64_t v1483 = *v1491 + v1483 - v1493 * v1492;
                    uint64_t v1482 = *(void *)v230[3] + v1482 - *((void *)v230[3] + 1) * v231[1];
                    ++v1481;
                  }
                  while (v1481 < v1480);
                }
              }
              else if (v100 == 1)
              {
                int v993 = *v96;
                if (*v96)
                {
                  unint64_t v994 = 0;
                  uint64_t v995 = 0;
                  uint64_t v996 = 0;
                  uint64_t v997 = *(void *)(v95 + 152);
                  v998 = v230[19];
                  uint64_t v999 = v94[19];
                  do
                  {
                    if ((int)v349 >= 1)
                    {
                      uint64_t v1000 = 0;
                      int v1001 = *(char *)(v997 + v996);
                      unsigned int v1002 = v349 + 1;
                      do
                      {
                        *(unsigned char *)(v999 + v1000) = v1001 / *((char *)v998 + v995 + v1000);
                        --v1002;
                        ++v1000;
                      }
                      while (v1002 > 1);
                      uint64_t v95 = *a1;
                      v230 = (int **)*a2;
                      int v993 = **(_DWORD **)*a1;
                    }
                    v996 += **(void **)(v95 + 24);
                    v995 += *(void *)v230[3];
                    v999 += (int)v349;
                    ++v994;
                  }
                  while (v994 < v993);
                }
              }
              else if (v94[6])
              {
                v1798 = v230[19];
                uint64_t v1816 = *(void *)(v95 + 152);
                uint64_t v1841 = (int)v349;
                unint64_t v1865 = 0;
                unsigned int v1787 = v349 + 1;
                uint64_t v1494 = v94[19];
                do
                {
                  uint64_t v1495 = *(void *)*a1;
                  unint64_t v1496 = (unint64_t)(*(void *)(*a1 + 8) - v1495) >> 2;
                  uint64_t v1497 = 0;
                  uint64_t v1498 = (v1496 - 1);
                  if ((int)v1496 - 1 >= 0)
                  {
                    uint64_t v1499 = *(void *)(*a1 + 24);
                    int v1500 = v1865;
                    do
                    {
                      ldiv_t v1501 = ldiv(v1500, *(int *)(v1495 + 4 * v1498));
                      int v1500 = v1501.quot;
                      v1497 += *(void *)(v1499 + 8 * v1498--) * v1501.rem;
                    }
                    while (v1498 != -1);
                  }
                  uint64_t v1502 = *(void *)*a2;
                  unint64_t v1503 = (unint64_t)(*(void *)(*a2 + 8) - v1502) >> 2;
                  uint64_t v1504 = 0;
                  uint64_t v1505 = (v1503 - 1);
                  if ((int)v1503 - 1 >= 0)
                  {
                    uint64_t v1506 = *(void *)(*a2 + 24);
                    int v1507 = v1865;
                    do
                    {
                      ldiv_t v1508 = ldiv(v1507, *(int *)(v1502 + 4 * v1505));
                      int v1507 = v1508.quot;
                      v1504 += *(void *)(v1506 + 8 * v1505--) * v1508.rem;
                    }
                    while (v1505 != -1);
                  }
                  if ((int)v1870 >= 1)
                  {
                    uint64_t v1509 = 0;
                    int v1510 = *(char *)(v1816 + (int)v1497);
                    unsigned int v1511 = v1787;
                    do
                    {
                      *(unsigned char *)(v1494 + v1509) = v1510 / *((char *)v1798 + (int)v1504 + v1509);
                      --v1511;
                      ++v1509;
                    }
                    while (v1511 > 1);
                    v94 = *(void **)a3;
                  }
                  v1494 += v1841;
                  v1865 += v1841;
                }
                while (v1865 < v94[6]);
              }
              break;
            case 2:
              if (v100 == 2)
              {
                int v1512 = *v96;
                if (*v96)
                {
                  unint64_t v1513 = 0;
                  uint64_t v1514 = 0;
                  uint64_t v1515 = 0;
                  uint64_t v1516 = *(void *)(v95 + 152);
                  v1517 = v230[19];
                  uint64_t v1518 = v94[19];
                  do
                  {
                    if (v96[1])
                    {
                      unint64_t v1519 = 0;
                      do
                      {
                        if ((int)v349 >= 1)
                        {
                          uint64_t v1520 = 0;
                          int v1521 = *((char *)v1517 + v1514);
                          unsigned int v1522 = v349 + 1;
                          do
                          {
                            *(unsigned char *)(v1518 + v1520) = *(char *)(v1516 + v1515 + v1520) / v1521;
                            --v1522;
                            ++v1520;
                          }
                          while (v1522 > 1);
                          uint64_t v95 = *a1;
                          v230 = (int **)*a2;
                          v96 = *(int **)*a1;
                        }
                        v1523 = *(void **)(v95 + 24);
                        uint64_t v1524 = v1523[1];
                        v1515 += v1524;
                        v1514 += *((void *)v230[3] + 1);
                        v1518 += (int)v349;
                        ++v1519;
                        unint64_t v1525 = v96[1];
                      }
                      while (v1519 < v1525);
                      int v1512 = *v96;
                      v231 = *v230;
                    }
                    else
                    {
                      unint64_t v1525 = 0;
                      v1523 = *(void **)(v95 + 24);
                      uint64_t v1524 = v1523[1];
                    }
                    uint64_t v1515 = *v1523 + v1515 - v1525 * v1524;
                    uint64_t v1514 = *(void *)v230[3] + v1514 - *((void *)v230[3] + 1) * v231[1];
                    ++v1513;
                  }
                  while (v1513 < v1512);
                }
              }
              else if (v100 == 1)
              {
                int v1003 = *v96;
                if (*v96)
                {
                  unint64_t v1004 = 0;
                  uint64_t v1005 = 0;
                  uint64_t v1006 = 0;
                  uint64_t v1007 = *(void *)(v95 + 152);
                  v1008 = v230[19];
                  uint64_t v1009 = v94[19];
                  do
                  {
                    if ((int)v349 >= 1)
                    {
                      uint64_t v1010 = 0;
                      int v1011 = *((char *)v1008 + v1005);
                      unsigned int v1012 = v349 + 1;
                      do
                      {
                        *(unsigned char *)(v1009 + v1010) = *(char *)(v1007 + v1006 + v1010) / v1011;
                        --v1012;
                        ++v1010;
                      }
                      while (v1012 > 1);
                      uint64_t v95 = *a1;
                      v230 = (int **)*a2;
                      int v1003 = **(_DWORD **)*a1;
                    }
                    v1006 += **(void **)(v95 + 24);
                    v1005 += *(void *)v230[3];
                    v1009 += (int)v349;
                    ++v1004;
                  }
                  while (v1004 < v1003);
                }
              }
              else if (v94[6])
              {
                v1799 = v230[19];
                uint64_t v1817 = *(void *)(v95 + 152);
                uint64_t v1842 = (int)v349;
                unint64_t v1866 = 0;
                unsigned int v1788 = v349 + 1;
                uint64_t v1526 = v94[19];
                do
                {
                  uint64_t v1527 = *(void *)*a1;
                  unint64_t v1528 = (unint64_t)(*(void *)(*a1 + 8) - v1527) >> 2;
                  uint64_t v1529 = 0;
                  uint64_t v1530 = (v1528 - 1);
                  if ((int)v1528 - 1 >= 0)
                  {
                    uint64_t v1531 = *(void *)(*a1 + 24);
                    int v1532 = v1866;
                    do
                    {
                      ldiv_t v1533 = ldiv(v1532, *(int *)(v1527 + 4 * v1530));
                      int v1532 = v1533.quot;
                      v1529 += *(void *)(v1531 + 8 * v1530--) * v1533.rem;
                    }
                    while (v1530 != -1);
                  }
                  uint64_t v1534 = *(void *)*a2;
                  unint64_t v1535 = (unint64_t)(*(void *)(*a2 + 8) - v1534) >> 2;
                  uint64_t v1536 = 0;
                  uint64_t v1537 = (v1535 - 1);
                  if ((int)v1535 - 1 >= 0)
                  {
                    uint64_t v1538 = *(void *)(*a2 + 24);
                    int v1539 = v1866;
                    do
                    {
                      ldiv_t v1540 = ldiv(v1539, *(int *)(v1534 + 4 * v1537));
                      int v1539 = v1540.quot;
                      v1536 += *(void *)(v1538 + 8 * v1537--) * v1540.rem;
                    }
                    while (v1537 != -1);
                  }
                  if ((int)v1870 >= 1)
                  {
                    uint64_t v1541 = 0;
                    int v1542 = *((char *)v1799 + (int)v1536);
                    unsigned int v1543 = v1788;
                    do
                    {
                      *(unsigned char *)(v1526 + v1541) = *(char *)(v1817 + (int)v1529 + v1541) / v1542;
                      --v1543;
                      ++v1541;
                    }
                    while (v1543 > 1);
                    v94 = *(void **)a3;
                  }
                  v1526 += v1842;
                  v1866 += v1842;
                }
                while (v1866 < v94[6]);
              }
              break;
            case 3:
              if (v100 == 2)
              {
                int v1168 = *v96;
                if (*v96)
                {
                  unint64_t v1169 = 0;
                  uint64_t v1170 = 0;
                  uint64_t v1171 = 0;
                  uint64_t v1172 = *(void *)(v95 + 152);
                  v1173 = v230[19];
                  uint64_t v1174 = v94[19];
                  do
                  {
                    if (v96[1])
                    {
                      unint64_t v1175 = 0;
                      do
                      {
                        if ((int)v349 >= 1)
                        {
                          uint64_t v1176 = 0;
                          unsigned int v1177 = v349 + 1;
                          do
                          {
                            *(unsigned char *)(v1174 + v1176) = *(char *)(v1172 + v1171 + v1176)
                                                      / *((char *)v1173 + v1170 + v1176);
                            --v1177;
                            ++v1176;
                          }
                          while (v1177 > 1);
                          uint64_t v95 = *a1;
                          v230 = (int **)*a2;
                          v96 = *(int **)*a1;
                        }
                        v1178 = *(void **)(v95 + 24);
                        uint64_t v1179 = v1178[1];
                        v1171 += v1179;
                        v1170 += *((void *)v230[3] + 1);
                        v1174 += (int)v349;
                        ++v1175;
                        unint64_t v1180 = v96[1];
                      }
                      while (v1175 < v1180);
                      int v1168 = *v96;
                      v231 = *v230;
                    }
                    else
                    {
                      unint64_t v1180 = 0;
                      v1178 = *(void **)(v95 + 24);
                      uint64_t v1179 = v1178[1];
                    }
                    uint64_t v1171 = *v1178 + v1171 - v1180 * v1179;
                    uint64_t v1170 = *(void *)v230[3] + v1170 - *((void *)v230[3] + 1) * v231[1];
                    ++v1169;
                  }
                  while (v1169 < v1168);
                }
              }
              else if (v100 == 1)
              {
                int v350 = *v96;
                if (*v96)
                {
                  unint64_t v351 = 0;
                  uint64_t v352 = 0;
                  uint64_t v353 = 0;
                  uint64_t v354 = *(void *)(v95 + 152);
                  v355 = v230[19];
                  uint64_t v356 = v94[19];
                  do
                  {
                    if ((int)v349 >= 1)
                    {
                      uint64_t v357 = 0;
                      unsigned int v358 = v349 + 1;
                      do
                      {
                        *(unsigned char *)(v356 + v357) = *(char *)(v354 + v353 + v357) / *((char *)v355 + v352 + v357);
                        --v358;
                        ++v357;
                      }
                      while (v358 > 1);
                      uint64_t v95 = *a1;
                      v230 = (int **)*a2;
                      int v350 = **(_DWORD **)*a1;
                    }
                    v353 += **(void **)(v95 + 24);
                    v352 += *(void *)v230[3];
                    v356 += (int)v349;
                    ++v351;
                  }
                  while (v351 < v350);
                }
              }
              else if (v94[6])
              {
                v1795 = v230[19];
                uint64_t v1808 = *(void *)(v95 + 152);
                uint64_t v1832 = (int)v349;
                unint64_t v1859 = 0;
                unsigned int v1784 = v349 + 1;
                uint64_t v1181 = v94[19];
                do
                {
                  uint64_t v1182 = *(void *)*a1;
                  unint64_t v1183 = (unint64_t)(*(void *)(*a1 + 8) - v1182) >> 2;
                  uint64_t v1184 = 0;
                  uint64_t v1185 = (v1183 - 1);
                  if ((int)v1183 - 1 >= 0)
                  {
                    uint64_t v1186 = *(void *)(*a1 + 24);
                    int v1187 = v1859;
                    do
                    {
                      ldiv_t v1188 = ldiv(v1187, *(int *)(v1182 + 4 * v1185));
                      int v1187 = v1188.quot;
                      v1184 += *(void *)(v1186 + 8 * v1185--) * v1188.rem;
                    }
                    while (v1185 != -1);
                  }
                  uint64_t v1189 = *(void *)*a2;
                  unint64_t v1190 = (unint64_t)(*(void *)(*a2 + 8) - v1189) >> 2;
                  uint64_t v1191 = 0;
                  uint64_t v1192 = (v1190 - 1);
                  if ((int)v1190 - 1 >= 0)
                  {
                    uint64_t v1193 = *(void *)(*a2 + 24);
                    int v1194 = v1859;
                    do
                    {
                      ldiv_t v1195 = ldiv(v1194, *(int *)(v1189 + 4 * v1192));
                      int v1194 = v1195.quot;
                      v1191 += *(void *)(v1193 + 8 * v1192--) * v1195.rem;
                    }
                    while (v1192 != -1);
                  }
                  if ((int)v1870 >= 1)
                  {
                    uint64_t v1196 = 0;
                    unsigned int v1197 = v1784;
                    do
                    {
                      *(unsigned char *)(v1181 + v1196) = *(char *)(v1808 + (int)v1184 + v1196)
                                                / *((char *)v1795 + (int)v1191 + v1196);
                      --v1197;
                      ++v1196;
                    }
                    while (v1197 > 1);
                    v94 = *(void **)a3;
                  }
                  v1181 += v1832;
                  v1859 += v1832;
                }
                while (v1859 < v94[6]);
              }
              break;
            default:
LABEL_410:
              switch(v345)
              {
                case 1uLL:
                  if (v94[6])
                  {
                    unint64_t v359 = 0;
                    uint64_t v360 = 0;
                    uint64_t v361 = 0;
                    uint64_t v362 = *(void *)(v95 + 152);
                    v363 = v230[19];
                    uint64_t v364 = v94[19];
                    do
                    {
                      *(unsigned char *)(v364 + v359) = *(char *)(v362 + v361) / *((char *)v363 + v360);
                      v361 += **(void **)(*a1 + 24);
                      v360 += **(void **)(*a2 + 24);
                      ++v359;
                    }
                    while (v359 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v648 = *v96;
                  if (*v96)
                  {
                    unint64_t v649 = 0;
                    uint64_t v650 = 0;
                    uint64_t v651 = 0;
                    uint64_t v652 = 0;
                    uint64_t v653 = *(void *)(v95 + 152);
                    v654 = v230[19];
                    uint64_t v655 = v94[19];
                    do
                    {
                      if (v96[1])
                      {
                        unint64_t v656 = 0;
                        do
                        {
                          *(unsigned char *)(v655 + v650 + v656) = *(char *)(v653 + v652) / *((char *)v654 + v651);
                          uint64_t v95 = *a1;
                          v657 = *(void **)(*a1 + 24);
                          uint64_t v658 = v657[1];
                          v652 += v658;
                          v230 = (int **)*a2;
                          v659 = *(int **)(*a2 + 24);
                          uint64_t v660 = *((void *)v659 + 1);
                          v651 += v660;
                          ++v656;
                          v96 = *(int **)*a1;
                          unint64_t v661 = v96[1];
                        }
                        while (v656 < v661);
                        int v648 = *v96;
                        v231 = *v230;
                        v650 += v656;
                      }
                      else
                      {
                        unint64_t v661 = 0;
                        v657 = *(void **)(v95 + 24);
                        uint64_t v658 = v657[1];
                        v659 = v230[3];
                        uint64_t v660 = *((void *)v659 + 1);
                      }
                      uint64_t v652 = *v657 + v652 - v661 * v658;
                      uint64_t v651 = *(void *)v659 + v651 - v660 * v231[1];
                      ++v649;
                    }
                    while (v649 < v648);
                  }
                  break;
                case 3uLL:
                  int v662 = *v96;
                  if (*v96)
                  {
                    unint64_t v663 = 0;
                    uint64_t v664 = 0;
                    uint64_t v665 = 0;
                    uint64_t v666 = 0;
                    uint64_t v667 = *(void *)(v95 + 152);
                    v668 = v230[19];
                    uint64_t v669 = v94[19];
                    do
                    {
                      if (v96[1])
                      {
                        unint64_t v670 = 0;
                        do
                        {
                          if (v96[2])
                          {
                            unint64_t v671 = 0;
                            do
                            {
                              *(unsigned char *)(v669 + v664 + v671) = *(char *)(v667 + v666) / *((char *)v668 + v665);
                              uint64_t v95 = *a1;
                              v672 = *(void **)(*a1 + 24);
                              uint64_t v673 = v672[2];
                              v666 += v673;
                              v230 = (int **)*a2;
                              v674 = *(int **)(*a2 + 24);
                              uint64_t v675 = *((void *)v674 + 2);
                              v665 += v675;
                              ++v671;
                              v96 = *(int **)*a1;
                              unint64_t v676 = v96[2];
                            }
                            while (v671 < v676);
                            v231 = *v230;
                            v664 += v671;
                          }
                          else
                          {
                            unint64_t v676 = 0;
                            v672 = *(void **)(v95 + 24);
                            uint64_t v673 = v672[2];
                            v674 = v230[3];
                            uint64_t v675 = *((void *)v674 + 2);
                          }
                          uint64_t v677 = v672[1];
                          uint64_t v666 = v677 + v666 - v676 * v673;
                          uint64_t v665 = *((void *)v674 + 1) + v665 - v675 * v231[2];
                          ++v670;
                          unint64_t v678 = v96[1];
                        }
                        while (v670 < v678);
                        int v662 = *v96;
                      }
                      else
                      {
                        unint64_t v678 = 0;
                        v672 = *(void **)(v95 + 24);
                        uint64_t v677 = v672[1];
                      }
                      uint64_t v666 = *v672 + v666 - v678 * v677;
                      uint64_t v665 = *(void *)v230[3] + v665 - *((void *)v230[3] + 1) * v231[1];
                      ++v663;
                    }
                    while (v663 < v662);
                  }
                  break;
                case 4uLL:
                  int v679 = *v96;
                  if (*v96)
                  {
                    unint64_t v680 = 0;
                    uint64_t v681 = 0;
                    uint64_t v682 = 0;
                    uint64_t v683 = 0;
                    uint64_t v684 = *(void *)(v95 + 152);
                    v685 = v230[19];
                    uint64_t v686 = v94[19];
                    do
                    {
                      if (v96[1])
                      {
                        unint64_t v687 = 0;
                        do
                        {
                          if (v96[2])
                          {
                            unint64_t v688 = 0;
                            do
                            {
                              if (v96[3])
                              {
                                unint64_t v689 = 0;
                                do
                                {
                                  *(unsigned char *)(v686 + v681 + v689) = *(char *)(v684 + v683) / *((char *)v685 + v682);
                                  uint64_t v95 = *a1;
                                  v690 = *(void **)(*a1 + 24);
                                  uint64_t v691 = v690[3];
                                  v683 += v691;
                                  v230 = (int **)*a2;
                                  v692 = *(int **)(*a2 + 24);
                                  uint64_t v693 = *((void *)v692 + 3);
                                  v682 += v693;
                                  ++v689;
                                  v96 = *(int **)*a1;
                                  unint64_t v694 = v96[3];
                                }
                                while (v689 < v694);
                                v231 = *v230;
                                v681 += v689;
                              }
                              else
                              {
                                unint64_t v694 = 0;
                                v690 = *(void **)(v95 + 24);
                                uint64_t v691 = v690[3];
                                v692 = v230[3];
                                uint64_t v693 = *((void *)v692 + 3);
                              }
                              uint64_t v695 = v690[2];
                              uint64_t v683 = v695 + v683 - v694 * v691;
                              uint64_t v682 = *((void *)v692 + 2) + v682 - v693 * v231[3];
                              ++v688;
                              unint64_t v696 = v96[2];
                            }
                            while (v688 < v696);
                          }
                          else
                          {
                            unint64_t v696 = 0;
                            v690 = *(void **)(v95 + 24);
                            uint64_t v695 = v690[2];
                          }
                          uint64_t v683 = v690[1] + v683 - v696 * v695;
                          uint64_t v682 = *((void *)v230[3] + 1) + v682 - *((void *)v230[3] + 2) * v231[2];
                          ++v687;
                          unint64_t v697 = v96[1];
                        }
                        while (v687 < v697);
                        int v679 = *v96;
                      }
                      else
                      {
                        unint64_t v697 = 0;
                      }
                      uint64_t v683 = **(void **)(v95 + 24) + v683 - *(void *)(*(void *)(v95 + 24) + 8) * v697;
                      uint64_t v682 = *(void *)v230[3] + v682 - *((void *)v230[3] + 1) * v231[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                default:
                  if (v94[6])
                  {
                    unint64_t v632 = 0;
                    v1854 = v230[19];
                    uint64_t v1875 = *(void *)(v95 + 152);
                    uint64_t v633 = v94[19];
                    do
                    {
                      uint64_t v634 = *(void *)*a1;
                      unint64_t v635 = (unint64_t)(*(void *)(*a1 + 8) - v634) >> 2;
                      uint64_t v636 = 0;
                      uint64_t v637 = (v635 - 1);
                      if ((int)v635 - 1 >= 0)
                      {
                        uint64_t v638 = *(void *)(*a1 + 24);
                        int v639 = v632;
                        do
                        {
                          ldiv_t v640 = ldiv(v639, *(int *)(v634 + 4 * v637));
                          int v639 = v640.quot;
                          v636 += *(void *)(v638 + 8 * v637--) * v640.rem;
                        }
                        while (v637 != -1);
                      }
                      uint64_t v641 = *(void *)*a2;
                      unint64_t v642 = (unint64_t)(*(void *)(*a2 + 8) - v641) >> 2;
                      uint64_t v643 = 0;
                      uint64_t v644 = (v642 - 1);
                      if ((int)v642 - 1 >= 0)
                      {
                        uint64_t v645 = *(void *)(*a2 + 24);
                        int v646 = v632;
                        do
                        {
                          ldiv_t v647 = ldiv(v646, *(int *)(v641 + 4 * v644));
                          int v646 = v647.quot;
                          v643 += *(void *)(v645 + 8 * v644--) * v647.rem;
                        }
                        while (v644 != -1);
                      }
                      *(unsigned char *)(v633 + v632++) = *(char *)(v1875 + (int)v636) / *((char *)v1854 + (int)v643);
                    }
                    while (v632 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v12)
      {
        case 0:
          int v10 = **(_DWORD **)(*a1 + 152) / **(_DWORD **)(*a2 + 152);
LABEL_13:
          **(_DWORD **)(*(void *)a3 + 152) = v10;
          return;
        case 1:
          int v131 = *(_DWORD *)(*a2 + 160);
          if (v131 >= 1)
          {
            int v132 = **(_DWORD **)(*a1 + 152);
            v133 = *(int **)(*(void *)a3 + 152);
            v134 = *(int **)(*a2 + 152);
            unsigned int v135 = v131 + 1;
            do
            {
              int v136 = *v134++;
              *v133++ = v132 / v136;
              --v135;
            }
            while (v135 > 1);
          }
          return;
        case 2:
          int v137 = *(_DWORD *)(*a1 + 160);
          if (v137 >= 1)
          {
            int v138 = **(_DWORD **)(*a2 + 152);
            v139 = *(int **)(*(void *)a3 + 152);
            v140 = *(int **)(*a1 + 152);
            unsigned int v141 = v137 + 1;
            do
            {
              int v142 = *v140++;
              *v139++ = v142 / v138;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 3:
          int v143 = *(_DWORD *)(*(void *)a3 + 48);
          if (v143 >= 1)
          {
            v144 = *(int **)(*(void *)a3 + 152);
            v145 = *(int **)(*a2 + 152);
            v146 = *(int **)(*a1 + 152);
            unsigned int v147 = v143 + 1;
            do
            {
              int v149 = *v146++;
              int v148 = v149;
              int v150 = *v145++;
              *v144++ = v148 / v150;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        default:
          v122 = *(void **)a3;
          v123 = (void *)*a1;
          v124 = *(int **)*a1;
          uint64_t v125 = (v123[1] - (void)v124) >> 2;
          uint64_t v126 = (v125 - 1);
          if ((int)v126 >= -1) {
            int v127 = -1;
          }
          else {
            int v127 = v125 - 1;
          }
          int v128 = v127 + 1;
          int v129 = v125 + 1;
          while (1)
          {
            unsigned int v130 = v129 - 2;
            if (v129 - 2 < 0) {
              break;
            }
            --v129;
            if (*(void *)(v123[3] + 8 * v130) != *(void *)(v122[3] + 8 * v130)) {
              goto LABEL_179;
            }
          }
          int v129 = v128;
LABEL_179:
          v237 = (void *)*a2;
          v238 = *(int **)*a2;
          uint64_t v239 = (v237[1] - (void)v238) >> 2;
          uint64_t v240 = (v239 - 1);
          if ((int)v240 >= -1) {
            int v241 = -1;
          }
          else {
            int v241 = v239 - 1;
          }
          int v242 = v241 + 1;
          int v243 = v239 + 1;
          while (1)
          {
            unsigned int v244 = v243 - 2;
            if (v243 - 2 < 0) {
              break;
            }
            --v243;
            if (*(void *)(v237[3] + 8 * v244) != *(void *)(v122[3] + 8 * v244)) {
              goto LABEL_223;
            }
          }
          int v243 = v242;
LABEL_223:
          int v269 = v125 + 1;
          while (1)
          {
            unsigned int v270 = v269 - 2;
            if (v269 - 2 < 0) {
              break;
            }
            --v269;
            if (*(void *)(v123[3] + 8 * v270)) {
              goto LABEL_258;
            }
          }
          int v269 = v128;
LABEL_258:
          int v283 = v239 + 1;
          while (1)
          {
            unsigned int v284 = v283 - 2;
            if (v283 - 2 < 0) {
              break;
            }
            --v283;
            if (*(void *)(v237[3] + 8 * v284)) {
              goto LABEL_416;
            }
          }
          int v283 = v242;
LABEL_416:
          unint64_t v365 = (uint64_t)(v122[1] - *v122) >> 2;
          if (v129 <= v243) {
            int v366 = v243;
          }
          else {
            int v366 = v129;
          }
          if (v129 <= v283) {
            int v129 = v283;
          }
          if (v269 > v243) {
            int v243 = v269;
          }
          if (v365 > v243)
          {
            int v367 = 1;
          }
          else
          {
            int v243 = (uint64_t)(v122[1] - *v122) >> 2;
            int v367 = 4;
          }
          if (v365 > v129)
          {
            int v368 = 2;
          }
          else
          {
            int v129 = v243;
            int v368 = v367;
          }
          if (v365 > v366)
          {
            int v129 = v366;
            int v368 = 3;
          }
          uint64_t v1850 = v240;
          uint64_t v1871 = v126;
          if (!v129) {
            goto LABEL_446;
          }
          unint64_t v369 = *(void *)(v122[3] + 8 * (v129 - 1));
          if (v369 < 0x10) {
            goto LABEL_446;
          }
          switch(v368)
          {
            case 1:
              if (v129 == 2)
              {
                int v1544 = *v124;
                if (*v124)
                {
                  unint64_t v1545 = 0;
                  uint64_t v1546 = 0;
                  uint64_t v1547 = 0;
                  uint64_t v1548 = v123[19];
                  uint64_t v1549 = v237[19];
                  uint64_t v1550 = v122[19];
                  v1551 = (uint64_t *)v123[3];
                  uint64_t v1552 = *v1551;
                  uint64_t v1553 = v1551[1];
                  v1554 = (uint64_t *)v237[3];
                  uint64_t v1555 = *v1554;
                  uint64_t v1556 = v1554[1];
                  int v1557 = v124[1];
                  int v1558 = v1557;
                  do
                  {
                    if (v1558)
                    {
                      unint64_t v1559 = 0;
                      uint64_t v1560 = v1549 + 4 * v1546;
                      do
                      {
                        if ((int)v369 >= 1)
                        {
                          uint64_t v1561 = 0;
                          int v1562 = *(_DWORD *)(v1548 + 4 * v1547);
                          unsigned int v1563 = v369 + 1;
                          do
                          {
                            *(_DWORD *)(v1550 + v1561) = v1562 / *(_DWORD *)(v1560 + v1561);
                            --v1563;
                            v1561 += 4;
                          }
                          while (v1563 > 1);
                          int v1557 = v124[1];
                        }
                        v1547 += v1553;
                        v1546 += v1556;
                        v1550 += 4 * (int)v369;
                        ++v1559;
                        v1560 += 4 * v1556;
                      }
                      while (v1559 < v1557);
                      uint64_t v1564 = v1557;
                      int v1544 = *v124;
                      int v1558 = v1557;
                    }
                    else
                    {
                      uint64_t v1564 = 0;
                    }
                    uint64_t v1547 = v1547 + v1552 - v1564 * v1553;
                    uint64_t v1546 = v1546 + v1555 - v1556 * v238[1];
                    ++v1545;
                  }
                  while (v1545 < v1544);
                }
              }
              else if (v129 == 1)
              {
                int v1013 = *v124;
                if (*v124)
                {
                  unint64_t v1014 = 0;
                  uint64_t v1015 = 0;
                  uint64_t v1016 = v123[19];
                  uint64_t v1017 = v237[19];
                  uint64_t v1018 = v122[19];
                  uint64_t v1019 = *(void *)v123[3];
                  uint64_t v1020 = 4 * *(void *)v237[3];
                  do
                  {
                    if ((int)v369 >= 1)
                    {
                      uint64_t v1021 = 0;
                      int v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                      unsigned int v1023 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v1018 + v1021) = v1022 / *(_DWORD *)(v1017 + v1021);
                        --v1023;
                        v1021 += 4;
                      }
                      while (v1023 > 1);
                      int v1013 = *v124;
                    }
                    v1015 += v1019;
                    ++v1014;
                    v1018 += 4 * (int)v369;
                    v1017 += v1020;
                  }
                  while (v1014 < v1013);
                }
              }
              else
              {
                unint64_t v1818 = v122[6];
                if (v1818)
                {
                  unint64_t v1843 = 0;
                  uint64_t v1764 = v237[19];
                  uint64_t v1776 = v123[19];
                  uint64_t v1565 = v122[19];
                  do
                  {
                    uint64_t v1566 = 0;
                    if ((v126 & 0x80000000) == 0)
                    {
                      uint64_t v1567 = v123[3];
                      uint64_t v1568 = v126;
                      int v1569 = v1843;
                      do
                      {
                        ldiv_t v1570 = ldiv(v1569, v124[v1568]);
                        int v1569 = v1570.quot;
                        v1566 += *(void *)(v1567 + 8 * v1568--) * v1570.rem;
                      }
                      while (v1568 != -1);
                    }
                    uint64_t v1571 = v1850;
                    if ((v1850 & 0x80000000) != 0)
                    {
                      LODWORD(v1572) = 0;
                    }
                    else
                    {
                      uint64_t v1572 = 0;
                      uint64_t v1573 = v237[3];
                      int v1574 = v1843;
                      do
                      {
                        ldiv_t v1575 = ldiv(v1574, v238[v1571]);
                        int v1574 = v1575.quot;
                        v1572 += *(void *)(v1573 + 8 * v1571--) * v1575.rem;
                      }
                      while (v1571 != -1);
                    }
                    uint64_t v126 = v1871;
                    if ((int)v369 >= 1)
                    {
                      uint64_t v1576 = 0;
                      int v1577 = *(_DWORD *)(v1776 + 4 * (int)v1566);
                      unsigned int v1578 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = v1577 / *(_DWORD *)(v1764 + 4 * (int)v1572 + v1576);
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                    }
                    v1565 += 4 * (int)v369;
                    v1843 += (int)v369;
                  }
                  while (v1843 < v1818);
                }
              }
              break;
            case 2:
              if (v129 == 2)
              {
                int v1579 = *v124;
                if (*v124)
                {
                  unint64_t v1580 = 0;
                  uint64_t v1581 = 0;
                  uint64_t v1582 = 0;
                  uint64_t v1583 = v123[19];
                  uint64_t v1584 = v237[19];
                  uint64_t v1585 = v122[19];
                  v1586 = (uint64_t *)v123[3];
                  uint64_t v1587 = *v1586;
                  uint64_t v1588 = v1586[1];
                  v1589 = (uint64_t *)v237[3];
                  uint64_t v1590 = *v1589;
                  uint64_t v1591 = v1589[1];
                  int v1592 = v124[1];
                  int v1593 = v1592;
                  do
                  {
                    if (v1593)
                    {
                      unint64_t v1594 = 0;
                      uint64_t v1595 = v1583 + 4 * v1582;
                      do
                      {
                        if ((int)v369 >= 1)
                        {
                          uint64_t v1596 = 0;
                          int v1597 = *(_DWORD *)(v1584 + 4 * v1581);
                          unsigned int v1598 = v369 + 1;
                          do
                          {
                            *(_DWORD *)(v1585 + v1596) = *(_DWORD *)(v1595 + v1596) / v1597;
                            --v1598;
                            v1596 += 4;
                          }
                          while (v1598 > 1);
                          int v1592 = v124[1];
                        }
                        v1582 += v1588;
                        v1581 += v1591;
                        v1585 += 4 * (int)v369;
                        ++v1594;
                        v1595 += 4 * v1588;
                      }
                      while (v1594 < v1592);
                      uint64_t v1599 = v1592;
                      int v1579 = *v124;
                      int v1593 = v1592;
                    }
                    else
                    {
                      uint64_t v1599 = 0;
                    }
                    uint64_t v1582 = v1582 + v1587 - v1599 * v1588;
                    uint64_t v1581 = v1581 + v1590 - v1591 * v238[1];
                    ++v1580;
                  }
                  while (v1580 < v1579);
                }
              }
              else if (v129 == 1)
              {
                int v1024 = *v124;
                if (*v124)
                {
                  unint64_t v1025 = 0;
                  uint64_t v1026 = 0;
                  uint64_t v1027 = v123[19];
                  uint64_t v1028 = v237[19];
                  uint64_t v1029 = v122[19];
                  uint64_t v1030 = *(void *)v237[3];
                  uint64_t v1031 = 4 * *(void *)v123[3];
                  do
                  {
                    if ((int)v369 >= 1)
                    {
                      uint64_t v1032 = 0;
                      int v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                      unsigned int v1034 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) / v1033;
                        --v1034;
                        v1032 += 4;
                      }
                      while (v1034 > 1);
                      int v1024 = *v124;
                    }
                    v1026 += v1030;
                    ++v1025;
                    v1029 += 4 * (int)v369;
                    v1027 += v1031;
                  }
                  while (v1025 < v1024);
                }
              }
              else
              {
                unint64_t v1819 = v122[6];
                if (v1819)
                {
                  unint64_t v1844 = 0;
                  uint64_t v1765 = v237[19];
                  uint64_t v1777 = v123[19];
                  uint64_t v1600 = v122[19];
                  do
                  {
                    uint64_t v1601 = 0;
                    if ((v126 & 0x80000000) == 0)
                    {
                      uint64_t v1602 = v123[3];
                      uint64_t v1603 = v126;
                      int v1604 = v1844;
                      do
                      {
                        ldiv_t v1605 = ldiv(v1604, v124[v1603]);
                        int v1604 = v1605.quot;
                        v1601 += *(void *)(v1602 + 8 * v1603--) * v1605.rem;
                      }
                      while (v1603 != -1);
                    }
                    uint64_t v1606 = v1850;
                    if ((v1850 & 0x80000000) != 0)
                    {
                      LODWORD(v1607) = 0;
                    }
                    else
                    {
                      uint64_t v1607 = 0;
                      uint64_t v1608 = v237[3];
                      int v1609 = v1844;
                      do
                      {
                        ldiv_t v1610 = ldiv(v1609, v238[v1606]);
                        int v1609 = v1610.quot;
                        v1607 += *(void *)(v1608 + 8 * v1606--) * v1610.rem;
                      }
                      while (v1606 != -1);
                    }
                    uint64_t v126 = v1871;
                    if ((int)v369 >= 1)
                    {
                      uint64_t v1611 = 0;
                      int v1612 = *(_DWORD *)(v1765 + 4 * (int)v1607);
                      unsigned int v1613 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v1600 + v1611) = *(_DWORD *)(v1777 + 4 * (int)v1601 + v1611) / v1612;
                        --v1613;
                        v1611 += 4;
                      }
                      while (v1613 > 1);
                    }
                    v1600 += 4 * (int)v369;
                    v1844 += (int)v369;
                  }
                  while (v1844 < v1819);
                }
              }
              break;
            case 3:
              if (v129 == 2)
              {
                int v1198 = *v124;
                if (*v124)
                {
                  unint64_t v1199 = 0;
                  uint64_t v1200 = 0;
                  uint64_t v1201 = 0;
                  uint64_t v1202 = v123[19];
                  uint64_t v1203 = v237[19];
                  uint64_t v1204 = v122[19];
                  v1205 = (uint64_t *)v123[3];
                  uint64_t v1206 = *v1205;
                  uint64_t v1207 = v1205[1];
                  v1208 = (uint64_t *)v237[3];
                  uint64_t v1209 = *v1208;
                  uint64_t v1210 = v1208[1];
                  int v1211 = v124[1];
                  int v1212 = v1211;
                  do
                  {
                    if (v1212)
                    {
                      unint64_t v1213 = 0;
                      uint64_t v1214 = v1203 + 4 * v1200;
                      uint64_t v1215 = v1202 + 4 * v1201;
                      do
                      {
                        if ((int)v369 >= 1)
                        {
                          uint64_t v1216 = 0;
                          unsigned int v1217 = v369 + 1;
                          do
                          {
                            *(_DWORD *)(v1204 + v1216) = *(_DWORD *)(v1215 + v1216) / *(_DWORD *)(v1214 + v1216);
                            --v1217;
                            v1216 += 4;
                          }
                          while (v1217 > 1);
                          int v1211 = v124[1];
                        }
                        v1201 += v1207;
                        v1200 += v1210;
                        v1204 += 4 * (int)v369;
                        ++v1213;
                        v1214 += 4 * v1210;
                        v1215 += 4 * v1207;
                      }
                      while (v1213 < v1211);
                      uint64_t v1218 = v1211;
                      int v1198 = *v124;
                      int v1212 = v1211;
                    }
                    else
                    {
                      uint64_t v1218 = 0;
                    }
                    uint64_t v1201 = v1201 + v1206 - v1218 * v1207;
                    uint64_t v1200 = v1200 + v1209 - v1210 * v238[1];
                    ++v1199;
                  }
                  while (v1199 < v1198);
                }
              }
              else if (v129 == 1)
              {
                int v370 = *v124;
                if (*v124)
                {
                  unint64_t v371 = 0;
                  uint64_t v372 = v123[19];
                  uint64_t v373 = v237[19];
                  uint64_t v374 = v122[19];
                  uint64_t v375 = 4 * *(void *)v237[3];
                  uint64_t v376 = 4 * *(void *)v123[3];
                  do
                  {
                    if ((int)v369 >= 1)
                    {
                      uint64_t v377 = 0;
                      unsigned int v378 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v374 + v377) = *(_DWORD *)(v372 + v377) / *(_DWORD *)(v373 + v377);
                        --v378;
                        v377 += 4;
                      }
                      while (v378 > 1);
                      int v370 = *v124;
                    }
                    ++v371;
                    v374 += 4 * (int)v369;
                    v373 += v375;
                    v372 += v376;
                  }
                  while (v371 < v370);
                }
              }
              else
              {
                unint64_t v1809 = v122[6];
                if (v1809)
                {
                  unint64_t v1833 = 0;
                  uint64_t v1759 = v237[19];
                  uint64_t v1771 = v123[19];
                  uint64_t v1219 = v122[19];
                  do
                  {
                    uint64_t v1220 = 0;
                    if ((v126 & 0x80000000) == 0)
                    {
                      uint64_t v1221 = v123[3];
                      uint64_t v1222 = v126;
                      int v1223 = v1833;
                      do
                      {
                        ldiv_t v1224 = ldiv(v1223, v124[v1222]);
                        int v1223 = v1224.quot;
                        v1220 += *(void *)(v1221 + 8 * v1222--) * v1224.rem;
                      }
                      while (v1222 != -1);
                    }
                    uint64_t v1225 = v1850;
                    if ((v1850 & 0x80000000) != 0)
                    {
                      LODWORD(v1226) = 0;
                    }
                    else
                    {
                      uint64_t v1226 = 0;
                      uint64_t v1227 = v237[3];
                      int v1228 = v1833;
                      do
                      {
                        ldiv_t v1229 = ldiv(v1228, v238[v1225]);
                        int v1228 = v1229.quot;
                        v1226 += *(void *)(v1227 + 8 * v1225--) * v1229.rem;
                      }
                      while (v1225 != -1);
                    }
                    uint64_t v126 = v1871;
                    if ((int)v369 >= 1)
                    {
                      uint64_t v1230 = 0;
                      unsigned int v1231 = v369 + 1;
                      do
                      {
                        *(_DWORD *)(v1219 + v1230) = *(_DWORD *)(v1771 + 4 * (int)v1220 + v1230)
                                                   / *(_DWORD *)(v1759 + 4 * (int)v1226 + v1230);
                        --v1231;
                        v1230 += 4;
                      }
                      while (v1231 > 1);
                    }
                    v1219 += 4 * (int)v369;
                    v1833 += (int)v369;
                  }
                  while (v1833 < v1809);
                }
              }
              break;
            default:
LABEL_446:
              switch(v365)
              {
                case 1uLL:
                  uint64_t v379 = v122[6];
                  if (v379)
                  {
                    v380 = (_DWORD *)v123[19];
                    v381 = (_DWORD *)v237[19];
                    v382 = (int *)v122[19];
                    uint64_t v383 = 4 * *(void *)v237[3];
                    uint64_t v384 = 4 * *(void *)v123[3];
                    do
                    {
                      *v382++ = *v380 / *v381;
                      v381 = (_DWORD *)((char *)v381 + v383);
                      v380 = (_DWORD *)((char *)v380 + v384);
                      --v379;
                    }
                    while (v379);
                  }
                  break;
                case 2uLL:
                  int v710 = *v124;
                  if (*v124)
                  {
                    unint64_t v711 = 0;
                    uint64_t v712 = 0;
                    uint64_t v713 = 0;
                    uint64_t v714 = 0;
                    uint64_t v715 = v123[19];
                    uint64_t v716 = v237[19];
                    uint64_t v717 = v122[19];
                    v718 = (uint64_t *)v123[3];
                    uint64_t v719 = *v718;
                    uint64_t v720 = v718[1];
                    v721 = (uint64_t *)v237[3];
                    uint64_t v723 = *v721;
                    uint64_t v722 = v721[1];
                    int v724 = v124[1];
                    do
                    {
                      if (v724)
                      {
                        for (unint64_t m = 0; m < v724; ++m)
                        {
                          *(_DWORD *)(v717 + 4 * v712 + 4 * m) = *(_DWORD *)(v715 + 4 * v714)
                                                               / *(_DWORD *)(v716 + 4 * v713);
                          v714 += v720;
                          v713 += v722;
                          int v724 = v124[1];
                        }
                        uint64_t v726 = v724;
                        int v710 = *v124;
                        v712 += m;
                      }
                      else
                      {
                        uint64_t v726 = 0;
                      }
                      uint64_t v714 = v714 + v719 - v726 * v720;
                      uint64_t v713 = v713 + v723 - v722 * v238[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                case 3uLL:
                  int v727 = *v124;
                  if (*v124)
                  {
                    unint64_t v728 = 0;
                    uint64_t v729 = 0;
                    uint64_t v730 = 0;
                    uint64_t v731 = 0;
                    uint64_t v732 = v123[19];
                    uint64_t v733 = v237[19];
                    uint64_t v734 = v122[19];
                    v735 = (uint64_t *)v123[3];
                    uint64_t v736 = *v735;
                    uint64_t v737 = v735[1];
                    v738 = (uint64_t *)v237[3];
                    uint64_t v739 = *v738;
                    uint64_t v740 = v738[1];
                    int v741 = v124[1];
                    int v742 = v741;
                    do
                    {
                      if (v742)
                      {
                        unint64_t v743 = 0;
                        uint64_t v744 = v735[2];
                        uint64_t v745 = v738[2];
                        int v746 = v124[2];
                        do
                        {
                          if (v746)
                          {
                            for (unint64_t n = 0; n < v746; ++n)
                            {
                              *(_DWORD *)(v734 + 4 * v729 + 4 * n) = *(_DWORD *)(v732 + 4 * v731)
                                                                   / *(_DWORD *)(v733 + 4 * v730);
                              v731 += v744;
                              v730 += v745;
                              int v746 = v124[2];
                            }
                            uint64_t v748 = v746;
                            int v741 = v124[1];
                            v729 += n;
                          }
                          else
                          {
                            uint64_t v748 = 0;
                          }
                          uint64_t v731 = v731 + v737 - v748 * v744;
                          uint64_t v730 = v730 + v740 - v745 * v238[2];
                          ++v743;
                        }
                        while (v743 < v741);
                        uint64_t v749 = v741;
                        int v727 = *v124;
                        int v742 = v741;
                      }
                      else
                      {
                        uint64_t v749 = 0;
                      }
                      uint64_t v731 = v731 + v736 - v749 * v737;
                      uint64_t v730 = v730 + v739 - v740 * v238[1];
                      ++v728;
                    }
                    while (v728 < v727);
                  }
                  break;
                case 4uLL:
                  int v750 = *v124;
                  if (*v124)
                  {
                    unint64_t v751 = 0;
                    uint64_t v752 = 0;
                    uint64_t v753 = 0;
                    uint64_t v754 = 0;
                    uint64_t v755 = v123[19];
                    uint64_t v756 = v237[19];
                    uint64_t v757 = v122[19];
                    v758 = (uint64_t *)v123[3];
                    uint64_t v759 = *v758;
                    uint64_t v760 = v758[1];
                    v761 = (uint64_t *)v237[3];
                    uint64_t v762 = *v761;
                    uint64_t v763 = v761[1];
                    int v764 = v124[1];
                    int v765 = v764;
                    do
                    {
                      if (v765)
                      {
                        unint64_t v766 = 0;
                        uint64_t v767 = v758[2];
                        uint64_t v768 = v761[2];
                        int v769 = v124[2];
                        int v770 = v769;
                        do
                        {
                          if (v770)
                          {
                            unint64_t v771 = 0;
                            uint64_t v772 = v758[3];
                            uint64_t v773 = v761[3];
                            int v774 = v124[3];
                            do
                            {
                              if (v774)
                              {
                                for (iunint64_t i = 0; ii < v774; ++ii)
                                {
                                  *(_DWORD *)(v757 + 4 * v752 + 4 * ii) = *(_DWORD *)(v755 + 4 * v754)
                                                                        / *(_DWORD *)(v756 + 4 * v753);
                                  v754 += v772;
                                  v753 += v773;
                                  int v774 = v124[3];
                                }
                                uint64_t v776 = v774;
                                int v769 = v124[2];
                                v752 += ii;
                              }
                              else
                              {
                                uint64_t v776 = 0;
                              }
                              uint64_t v754 = v754 + v767 - v776 * v772;
                              uint64_t v753 = v753 + v768 - v773 * v238[3];
                              ++v771;
                            }
                            while (v771 < v769);
                            uint64_t v777 = v769;
                            int v764 = v124[1];
                            int v770 = v769;
                          }
                          else
                          {
                            uint64_t v777 = 0;
                          }
                          uint64_t v754 = v754 + v760 - v777 * v767;
                          uint64_t v753 = v753 + v763 - v768 * v238[2];
                          ++v766;
                        }
                        while (v766 < v764);
                        uint64_t v778 = v764;
                        int v750 = *v124;
                        int v765 = v764;
                      }
                      else
                      {
                        uint64_t v778 = 0;
                      }
                      uint64_t v754 = v754 + v759 - v778 * v760;
                      uint64_t v753 = v753 + v762 - v763 * v238[1];
                      ++v751;
                    }
                    while (v751 < v750);
                  }
                  break;
                default:
                  uint64_t v698 = v122[6];
                  if (v698)
                  {
                    uint64_t v699 = 0;
                    uint64_t v1801 = v237[19];
                    uint64_t v1825 = v123[19];
                    uint64_t v1790 = v122[19];
                    do
                    {
                      uint64_t v700 = 0;
                      if ((v126 & 0x80000000) == 0)
                      {
                        uint64_t v701 = v123[3];
                        uint64_t v702 = v126;
                        int v703 = v699;
                        do
                        {
                          ldiv_t v704 = ldiv(v703, v124[v702]);
                          int v703 = v704.quot;
                          v700 += *(void *)(v701 + 8 * v702--) * v704.rem;
                        }
                        while (v702 != -1);
                      }
                      uint64_t v705 = v1850;
                      if ((v1850 & 0x80000000) != 0)
                      {
                        LODWORD(v706) = 0;
                      }
                      else
                      {
                        uint64_t v706 = 0;
                        uint64_t v707 = v237[3];
                        int v708 = v699;
                        do
                        {
                          ldiv_t v709 = ldiv(v708, v238[v705]);
                          int v708 = v709.quot;
                          v706 += *(void *)(v707 + 8 * v705--) * v709.rem;
                        }
                        while (v705 != -1);
                      }
                      *(_DWORD *)(v1790 + 4 * v699++) = *(_DWORD *)(v1825 + 4 * (int)v700)
                                                      / *(_DWORD *)(v1801 + 4 * (int)v706);
                      uint64_t v126 = v1871;
                    }
                    while (v699 != v698);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v13)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) / **(uint64_t **)(*a2 + 152);
          return;
        case 1:
          int v160 = *(_DWORD *)(*a2 + 160);
          if (v160 >= 1)
          {
            uint64_t v161 = **(void **)(*a1 + 152);
            v162 = *(uint64_t **)(*(void *)a3 + 152);
            v163 = *(uint64_t **)(*a2 + 152);
            unsigned int v164 = v160 + 1;
            do
            {
              uint64_t v165 = *v163++;
              *v162++ = v161 / v165;
              --v164;
            }
            while (v164 > 1);
          }
          return;
        case 2:
          int v166 = *(_DWORD *)(*a1 + 160);
          if (v166 >= 1)
          {
            uint64_t v167 = **(void **)(*a2 + 152);
            v168 = *(uint64_t **)(*(void *)a3 + 152);
            v169 = *(uint64_t **)(*a1 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              uint64_t v171 = *v169++;
              *v168++ = v171 / v167;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 3:
          int v172 = *(_DWORD *)(*(void *)a3 + 48);
          if (v172 >= 1)
          {
            v173 = *(uint64_t **)(*(void *)a3 + 152);
            v174 = *(uint64_t **)(*a2 + 152);
            v175 = *(uint64_t **)(*a1 + 152);
            unsigned int v176 = v172 + 1;
            do
            {
              uint64_t v178 = *v175++;
              uint64_t v177 = v178;
              uint64_t v179 = *v174++;
              *v173++ = v177 / v179;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        default:
          v151 = *(void **)a3;
          v152 = (void *)*a1;
          v153 = *(int **)*a1;
          uint64_t v154 = (v152[1] - (void)v153) >> 2;
          uint64_t v155 = (v154 - 1);
          if ((int)v155 >= -1) {
            int v156 = -1;
          }
          else {
            int v156 = v154 - 1;
          }
          int v157 = v156 + 1;
          int v158 = v154 + 1;
          while (1)
          {
            unsigned int v159 = v158 - 2;
            if (v158 - 2 < 0) {
              break;
            }
            --v158;
            if (*(void *)(v152[3] + 8 * v159) != *(void *)(v151[3] + 8 * v159)) {
              goto LABEL_187;
            }
          }
          int v158 = v157;
LABEL_187:
          v245 = (void *)*a2;
          v246 = *(int **)*a2;
          uint64_t v247 = (v245[1] - (void)v246) >> 2;
          uint64_t v248 = (v247 - 1);
          if ((int)v248 >= -1) {
            int v249 = -1;
          }
          else {
            int v249 = v247 - 1;
          }
          int v250 = v249 + 1;
          int v251 = v247 + 1;
          while (1)
          {
            unsigned int v252 = v251 - 2;
            if (v251 - 2 < 0) {
              break;
            }
            --v251;
            if (*(void *)(v245[3] + 8 * v252) != *(void *)(v151[3] + 8 * v252)) {
              goto LABEL_228;
            }
          }
          int v251 = v250;
LABEL_228:
          int v271 = v154 + 1;
          while (1)
          {
            unsigned int v272 = v271 - 2;
            if (v271 - 2 < 0) {
              break;
            }
            --v271;
            if (*(void *)(v152[3] + 8 * v272)) {
              goto LABEL_263;
            }
          }
          int v271 = v157;
LABEL_263:
          int v285 = v247 + 1;
          while (1)
          {
            unsigned int v286 = v285 - 2;
            if (v285 - 2 < 0) {
              break;
            }
            --v285;
            if (*(void *)(v245[3] + 8 * v286)) {
              goto LABEL_452;
            }
          }
          int v285 = v250;
LABEL_452:
          unint64_t v385 = (uint64_t)(v151[1] - *v151) >> 2;
          if (v158 <= v251) {
            int v386 = v251;
          }
          else {
            int v386 = v158;
          }
          if (v158 <= v285) {
            int v158 = v285;
          }
          if (v271 > v251) {
            int v251 = v271;
          }
          if (v385 > v251)
          {
            int v387 = 1;
          }
          else
          {
            int v251 = (uint64_t)(v151[1] - *v151) >> 2;
            int v387 = 4;
          }
          if (v385 > v158)
          {
            int v388 = 2;
          }
          else
          {
            int v158 = v251;
            int v388 = v387;
          }
          if (v385 > v386)
          {
            int v158 = v386;
            int v388 = 3;
          }
          uint64_t v1851 = v248;
          uint64_t v1872 = v155;
          if (!v158) {
            goto LABEL_481;
          }
          unint64_t v389 = *(void *)(v151[3] + 8 * (v158 - 1));
          if (v389 < 0x10) {
            goto LABEL_481;
          }
          switch(v388)
          {
            case 1:
              if (v158 == 2)
              {
                uint64_t v1614 = *v153;
                if (v1614)
                {
                  uint64_t v1615 = 0;
                  uint64_t v1616 = 0;
                  uint64_t v1617 = 0;
                  uint64_t v1618 = v152[19];
                  uint64_t v1619 = v245[19];
                  uint64_t v1620 = v151[19];
                  unint64_t v1621 = v153[1];
                  v1622 = (uint64_t *)v152[3];
                  uint64_t v1623 = *v1622;
                  uint64_t v1624 = v1622[1];
                  v1625 = (uint64_t *)v245[3];
                  uint64_t v1626 = *v1625;
                  uint64_t v1627 = v1625[1];
                  if (v1621 <= 1) {
                    uint64_t v1628 = 1;
                  }
                  else {
                    uint64_t v1628 = v153[1];
                  }
                  uint64_t v1629 = v1623 - v1624 * v1621;
                  uint64_t v1630 = v1626 - v1627 * v246[1];
                  do
                  {
                    if (v1621)
                    {
                      uint64_t v1631 = 0;
                      uint64_t v1632 = v1619 + 8 * v1616;
                      do
                      {
                        if ((int)v389 >= 1)
                        {
                          uint64_t v1633 = 0;
                          uint64_t v1634 = *(void *)(v1618 + 8 * v1617);
                          unsigned int v1635 = v389 + 1;
                          do
                          {
                            *(void *)(v1620 + v1633) = v1634 / *(void *)(v1632 + v1633);
                            --v1635;
                            v1633 += 8;
                          }
                          while (v1635 > 1);
                        }
                        v1617 += v1624;
                        v1616 += v1627;
                        v1620 += 8 * (int)v389;
                        ++v1631;
                        v1632 += 8 * v1627;
                      }
                      while (v1631 != v1628);
                    }
                    v1617 += v1629;
                    v1616 += v1630;
                    ++v1615;
                  }
                  while (v1615 != v1614);
                }
              }
              else if (v158 == 1)
              {
                uint64_t v1035 = *v153;
                if (v1035)
                {
                  uint64_t v1036 = 0;
                  uint64_t v1037 = 0;
                  uint64_t v1038 = v152[19];
                  uint64_t v1039 = v245[19];
                  uint64_t v1040 = v151[19];
                  uint64_t v1041 = *(void *)v152[3];
                  uint64_t v1042 = 8 * *(void *)v245[3];
                  do
                  {
                    if ((int)v389 >= 1)
                    {
                      uint64_t v1043 = 0;
                      uint64_t v1044 = *(void *)(v1038 + 8 * v1037);
                      unsigned int v1045 = v389 + 1;
                      do
                      {
                        *(void *)(v1040 + v1043) = v1044 / *(void *)(v1039 + v1043);
                        --v1045;
                        v1043 += 8;
                      }
                      while (v1045 > 1);
                    }
                    v1037 += v1041;
                    ++v1036;
                    v1040 += 8 * (int)v389;
                    v1039 += v1042;
                  }
                  while (v1036 != v1035);
                }
              }
              else
              {
                unint64_t v1820 = v151[6];
                if (v1820)
                {
                  unint64_t v1845 = 0;
                  uint64_t v1766 = v245[19];
                  uint64_t v1778 = v152[19];
                  uint64_t v1636 = v151[19];
                  do
                  {
                    uint64_t v1637 = 0;
                    if ((v155 & 0x80000000) == 0)
                    {
                      uint64_t v1638 = v152[3];
                      uint64_t v1639 = v155;
                      int v1640 = v1845;
                      do
                      {
                        ldiv_t v1641 = ldiv(v1640, v153[v1639]);
                        int v1640 = v1641.quot;
                        v1637 += *(void *)(v1638 + 8 * v1639--) * v1641.rem;
                      }
                      while (v1639 != -1);
                    }
                    uint64_t v1642 = v1851;
                    if ((v1851 & 0x80000000) != 0)
                    {
                      LODWORD(v1643) = 0;
                    }
                    else
                    {
                      uint64_t v1643 = 0;
                      uint64_t v1644 = v245[3];
                      int v1645 = v1845;
                      do
                      {
                        ldiv_t v1646 = ldiv(v1645, v246[v1642]);
                        int v1645 = v1646.quot;
                        v1643 += *(void *)(v1644 + 8 * v1642--) * v1646.rem;
                      }
                      while (v1642 != -1);
                    }
                    uint64_t v155 = v1872;
                    if ((int)v389 >= 1)
                    {
                      uint64_t v1647 = 0;
                      uint64_t v1648 = *(void *)(v1778 + 8 * (int)v1637);
                      unsigned int v1649 = v389 + 1;
                      do
                      {
                        *(void *)(v1636 + v1647) = v1648 / *(void *)(v1766 + 8 * (int)v1643 + v1647);
                        --v1649;
                        v1647 += 8;
                      }
                      while (v1649 > 1);
                    }
                    v1636 += 8 * (int)v389;
                    v1845 += (int)v389;
                  }
                  while (v1845 < v1820);
                }
              }
              break;
            case 2:
              if (v158 == 2)
              {
                uint64_t v1650 = *v153;
                if (v1650)
                {
                  uint64_t v1651 = 0;
                  uint64_t v1652 = 0;
                  uint64_t v1653 = 0;
                  uint64_t v1654 = v152[19];
                  uint64_t v1655 = v245[19];
                  uint64_t v1656 = v151[19];
                  unint64_t v1657 = v153[1];
                  v1658 = (uint64_t *)v152[3];
                  uint64_t v1659 = *v1658;
                  uint64_t v1660 = v1658[1];
                  v1661 = (uint64_t *)v245[3];
                  uint64_t v1662 = *v1661;
                  uint64_t v1663 = v1661[1];
                  if (v1657 <= 1) {
                    uint64_t v1664 = 1;
                  }
                  else {
                    uint64_t v1664 = v153[1];
                  }
                  uint64_t v1665 = v1659 - v1660 * v1657;
                  uint64_t v1666 = v1662 - v1663 * v246[1];
                  do
                  {
                    if (v1657)
                    {
                      uint64_t v1667 = 0;
                      uint64_t v1668 = v1654 + 8 * v1653;
                      do
                      {
                        if ((int)v389 >= 1)
                        {
                          uint64_t v1669 = 0;
                          uint64_t v1670 = *(void *)(v1655 + 8 * v1652);
                          unsigned int v1671 = v389 + 1;
                          do
                          {
                            *(void *)(v1656 + v1669) = *(void *)(v1668 + v1669) / v1670;
                            --v1671;
                            v1669 += 8;
                          }
                          while (v1671 > 1);
                        }
                        v1653 += v1660;
                        v1652 += v1663;
                        v1656 += 8 * (int)v389;
                        ++v1667;
                        v1668 += 8 * v1660;
                      }
                      while (v1667 != v1664);
                    }
                    v1653 += v1665;
                    v1652 += v1666;
                    ++v1651;
                  }
                  while (v1651 != v1650);
                }
              }
              else if (v158 == 1)
              {
                uint64_t v1046 = *v153;
                if (v1046)
                {
                  uint64_t v1047 = 0;
                  uint64_t v1048 = 0;
                  uint64_t v1049 = v152[19];
                  uint64_t v1050 = v245[19];
                  uint64_t v1051 = v151[19];
                  uint64_t v1052 = *(void *)v245[3];
                  uint64_t v1053 = 8 * *(void *)v152[3];
                  do
                  {
                    if ((int)v389 >= 1)
                    {
                      uint64_t v1054 = 0;
                      uint64_t v1055 = *(void *)(v1050 + 8 * v1048);
                      unsigned int v1056 = v389 + 1;
                      do
                      {
                        *(void *)(v1051 + v1054) = *(void *)(v1049 + v1054) / v1055;
                        --v1056;
                        v1054 += 8;
                      }
                      while (v1056 > 1);
                    }
                    v1048 += v1052;
                    ++v1047;
                    v1051 += 8 * (int)v389;
                    v1049 += v1053;
                  }
                  while (v1047 != v1046);
                }
              }
              else
              {
                unint64_t v1821 = v151[6];
                if (v1821)
                {
                  unint64_t v1846 = 0;
                  uint64_t v1767 = v245[19];
                  uint64_t v1779 = v152[19];
                  uint64_t v1672 = v151[19];
                  do
                  {
                    uint64_t v1673 = 0;
                    if ((v155 & 0x80000000) == 0)
                    {
                      uint64_t v1674 = v152[3];
                      uint64_t v1675 = v155;
                      int v1676 = v1846;
                      do
                      {
                        ldiv_t v1677 = ldiv(v1676, v153[v1675]);
                        int v1676 = v1677.quot;
                        v1673 += *(void *)(v1674 + 8 * v1675--) * v1677.rem;
                      }
                      while (v1675 != -1);
                    }
                    uint64_t v1678 = v1851;
                    if ((v1851 & 0x80000000) != 0)
                    {
                      LODWORD(v1679) = 0;
                    }
                    else
                    {
                      uint64_t v1679 = 0;
                      uint64_t v1680 = v245[3];
                      int v1681 = v1846;
                      do
                      {
                        ldiv_t v1682 = ldiv(v1681, v246[v1678]);
                        int v1681 = v1682.quot;
                        v1679 += *(void *)(v1680 + 8 * v1678--) * v1682.rem;
                      }
                      while (v1678 != -1);
                    }
                    uint64_t v155 = v1872;
                    if ((int)v389 >= 1)
                    {
                      uint64_t v1683 = 0;
                      uint64_t v1684 = *(void *)(v1767 + 8 * (int)v1679);
                      unsigned int v1685 = v389 + 1;
                      do
                      {
                        *(void *)(v1672 + v1683) = *(void *)(v1779 + 8 * (int)v1673 + v1683) / v1684;
                        --v1685;
                        v1683 += 8;
                      }
                      while (v1685 > 1);
                    }
                    v1672 += 8 * (int)v389;
                    v1846 += (int)v389;
                  }
                  while (v1846 < v1821);
                }
              }
              break;
            case 3:
              if (v158 == 2)
              {
                uint64_t v1232 = *v153;
                if (v1232)
                {
                  uint64_t v1233 = 0;
                  uint64_t v1234 = 0;
                  uint64_t v1235 = 0;
                  uint64_t v1236 = v152[19];
                  uint64_t v1237 = v245[19];
                  uint64_t v1238 = v151[19];
                  unint64_t v1239 = v153[1];
                  v1240 = (uint64_t *)v152[3];
                  uint64_t v1241 = *v1240;
                  uint64_t v1242 = v1240[1];
                  v1243 = (uint64_t *)v245[3];
                  uint64_t v1244 = *v1243;
                  uint64_t v1245 = v1243[1];
                  if (v1239 <= 1) {
                    uint64_t v1246 = 1;
                  }
                  else {
                    uint64_t v1246 = v153[1];
                  }
                  uint64_t v1247 = v1241 - v1242 * v1239;
                  uint64_t v1248 = v1244 - v1245 * v246[1];
                  do
                  {
                    if (v1239)
                    {
                      uint64_t v1249 = 0;
                      uint64_t v1250 = v1237 + 8 * v1234;
                      uint64_t v1251 = v1236 + 8 * v1235;
                      do
                      {
                        if ((int)v389 >= 1)
                        {
                          uint64_t v1252 = 0;
                          unsigned int v1253 = v389 + 1;
                          do
                          {
                            *(void *)(v1238 + v1252) = *(void *)(v1251 + v1252) / *(uint64_t *)(v1250 + v1252);
                            --v1253;
                            v1252 += 8;
                          }
                          while (v1253 > 1);
                        }
                        v1235 += v1242;
                        v1234 += v1245;
                        v1238 += 8 * (int)v389;
                        ++v1249;
                        v1250 += 8 * v1245;
                        v1251 += 8 * v1242;
                      }
                      while (v1249 != v1246);
                    }
                    v1235 += v1247;
                    v1234 += v1248;
                    ++v1233;
                  }
                  while (v1233 != v1232);
                }
              }
              else if (v158 == 1)
              {
                uint64_t v390 = *v153;
                if (v390)
                {
                  uint64_t v391 = 0;
                  uint64_t v392 = v152[19];
                  uint64_t v393 = v245[19];
                  uint64_t v394 = v151[19];
                  uint64_t v395 = 8 * *(void *)v245[3];
                  uint64_t v396 = 8 * *(void *)v152[3];
                  do
                  {
                    if ((int)v389 >= 1)
                    {
                      uint64_t v397 = 0;
                      unsigned int v398 = v389 + 1;
                      do
                      {
                        *(void *)(v394 + v397) = *(void *)(v392 + v397) / *(uint64_t *)(v393 + v397);
                        --v398;
                        v397 += 8;
                      }
                      while (v398 > 1);
                    }
                    ++v391;
                    v394 += 8 * (int)v389;
                    v393 += v395;
                    v392 += v396;
                  }
                  while (v391 != v390);
                }
              }
              else
              {
                unint64_t v1810 = v151[6];
                if (v1810)
                {
                  unint64_t v1834 = 0;
                  uint64_t v1760 = v245[19];
                  uint64_t v1772 = v152[19];
                  uint64_t v1254 = v151[19];
                  do
                  {
                    uint64_t v1255 = 0;
                    if ((v155 & 0x80000000) == 0)
                    {
                      uint64_t v1256 = v152[3];
                      uint64_t v1257 = v155;
                      int v1258 = v1834;
                      do
                      {
                        ldiv_t v1259 = ldiv(v1258, v153[v1257]);
                        int v1258 = v1259.quot;
                        v1255 += *(void *)(v1256 + 8 * v1257--) * v1259.rem;
                      }
                      while (v1257 != -1);
                    }
                    uint64_t v1260 = v1851;
                    if ((v1851 & 0x80000000) != 0)
                    {
                      LODWORD(v1261) = 0;
                    }
                    else
                    {
                      uint64_t v1261 = 0;
                      uint64_t v1262 = v245[3];
                      int v1263 = v1834;
                      do
                      {
                        ldiv_t v1264 = ldiv(v1263, v246[v1260]);
                        int v1263 = v1264.quot;
                        v1261 += *(void *)(v1262 + 8 * v1260--) * v1264.rem;
                      }
                      while (v1260 != -1);
                    }
                    uint64_t v155 = v1872;
                    if ((int)v389 >= 1)
                    {
                      uint64_t v1265 = 0;
                      unsigned int v1266 = v389 + 1;
                      do
                      {
                        *(void *)(v1254 + v1265) = *(void *)(v1772 + 8 * (int)v1255 + v1265)
                                                   / *(uint64_t *)(v1760 + 8 * (int)v1261 + v1265);
                        --v1266;
                        v1265 += 8;
                      }
                      while (v1266 > 1);
                    }
                    v1254 += 8 * (int)v389;
                    v1834 += (int)v389;
                  }
                  while (v1834 < v1810);
                }
              }
              break;
            default:
LABEL_481:
              switch(v385)
              {
                case 1uLL:
                  uint64_t v399 = v151[6];
                  if (v399)
                  {
                    v400 = (void *)v152[19];
                    v401 = (uint64_t *)v245[19];
                    v402 = (uint64_t *)v151[19];
                    uint64_t v403 = 8 * *(void *)v245[3];
                    uint64_t v404 = 8 * *(void *)v152[3];
                    do
                    {
                      *v402++ = *v400 / *v401;
                      v401 = (uint64_t *)((char *)v401 + v403);
                      v400 = (void *)((char *)v400 + v404);
                      --v399;
                    }
                    while (v399);
                  }
                  break;
                case 2uLL:
                  uint64_t v791 = *v153;
                  if (v791)
                  {
                    uint64_t v792 = 0;
                    uint64_t v793 = 0;
                    uint64_t v794 = 0;
                    uint64_t v795 = 0;
                    uint64_t v796 = v152[19];
                    uint64_t v797 = v245[19];
                    uint64_t v798 = v151[19];
                    unint64_t v799 = v153[1];
                    v800 = (uint64_t *)v152[3];
                    uint64_t v801 = *v800;
                    uint64_t v802 = v800[1];
                    v803 = (uint64_t *)v245[3];
                    uint64_t v804 = *v803;
                    uint64_t v805 = v803[1];
                    uint64_t v806 = v804 - v805 * v246[1];
                    if (v799 <= 1) {
                      uint64_t v807 = 1;
                    }
                    else {
                      uint64_t v807 = v153[1];
                    }
                    uint64_t v808 = v801 - v802 * v799;
                    do
                    {
                      if (v799)
                      {
                        uint64_t v809 = v793 + v807;
                        v810 = (uint64_t *)(v798 + 8 * v793);
                        uint64_t v811 = v807;
                        do
                        {
                          *v810++ = *(void *)(v796 + 8 * v795) / *(uint64_t *)(v797 + 8 * v794);
                          v795 += v802;
                          v794 += v805;
                          --v811;
                        }
                        while (v811);
                        uint64_t v793 = v809;
                      }
                      v795 += v808;
                      v794 += v806;
                      ++v792;
                    }
                    while (v792 != v791);
                  }
                  break;
                case 3uLL:
                  uint64_t v812 = *v153;
                  if (v812)
                  {
                    uint64_t v813 = 0;
                    uint64_t v814 = 0;
                    uint64_t v815 = 0;
                    uint64_t v816 = 0;
                    uint64_t v817 = v152[19];
                    uint64_t v818 = v245[19];
                    uint64_t v819 = v151[19];
                    unint64_t v820 = v153[1];
                    v821 = (void *)v152[3];
                    uint64_t v822 = v821[1];
                    v823 = (void *)v245[3];
                    uint64_t v824 = v823[1];
                    uint64_t v825 = *v823 - v824 * v246[1];
                    if (v820 <= 1) {
                      uint64_t v826 = 1;
                    }
                    else {
                      uint64_t v826 = v153[1];
                    }
                    unint64_t v827 = *v821 - v822 * v820;
                    do
                    {
                      if (v820)
                      {
                        uint64_t v828 = 0;
                        unint64_t v829 = v153[2];
                        uint64_t v830 = v821[2];
                        uint64_t v831 = v823[2];
                        if (v829 <= 1) {
                          uint64_t v832 = 1;
                        }
                        else {
                          uint64_t v832 = v153[2];
                        }
                        uint64_t v833 = v824 - v831 * v246[2];
                        do
                        {
                          uint64_t v834 = v832;
                          if (v829)
                          {
                            do
                            {
                              *(void *)(v819 + 8 * v814++) = *(void *)(v817 + 8 * v816)
                                                             / *(uint64_t *)(v818 + 8 * v815);
                              v816 += v830;
                              v815 += v831;
                              --v834;
                            }
                            while (v834);
                          }
                          v816 += v822 - v830 * v829;
                          v815 += v833;
                          ++v828;
                        }
                        while (v828 != v826);
                      }
                      v816 += v827;
                      v815 += v825;
                      ++v813;
                    }
                    while (v813 != v812);
                  }
                  break;
                case 4uLL:
                  uint64_t v1876 = *v153;
                  if (v1876)
                  {
                    uint64_t v835 = 0;
                    uint64_t v836 = 0;
                    uint64_t v837 = 0;
                    uint64_t v838 = 0;
                    uint64_t v839 = v152[19];
                    uint64_t v840 = v245[19];
                    uint64_t v841 = v151[19];
                    unint64_t v842 = v153[1];
                    v843 = (void *)v152[3];
                    v844 = (void *)v245[3];
                    uint64_t v1782 = v844[1];
                    uint64_t v1792 = v843[1];
                    uint64_t v1827 = *v844 - v1782 * v246[1];
                    int v1855 = v153[1];
                    if (v842 <= 1) {
                      uint64_t v845 = 1;
                    }
                    else {
                      uint64_t v845 = v153[1];
                    }
                    unint64_t v1803 = *v843 - v843[1] * v842;
                    do
                    {
                      if (v1855)
                      {
                        uint64_t v846 = 0;
                        unint64_t v847 = v153[2];
                        uint64_t v848 = v843[2];
                        uint64_t v849 = v844[2];
                        if (v847 <= 1) {
                          uint64_t v850 = 1;
                        }
                        else {
                          uint64_t v850 = v153[2];
                        }
                        uint64_t v851 = v1782 - v849 * v246[2];
                        do
                        {
                          if (v847)
                          {
                            uint64_t v852 = 0;
                            unint64_t v853 = v153[3];
                            uint64_t v854 = v843[3];
                            uint64_t v855 = v844[3];
                            if (v853 <= 1) {
                              uint64_t v856 = 1;
                            }
                            else {
                              uint64_t v856 = v153[3];
                            }
                            uint64_t v857 = v849 - v855 * v246[3];
                            do
                            {
                              uint64_t v858 = v856;
                              if (v853)
                              {
                                do
                                {
                                  *(void *)(v841 + 8 * v836++) = *(void *)(v839 + 8 * v838)
                                                                 / *(uint64_t *)(v840 + 8 * v837);
                                  v838 += v854;
                                  v837 += v855;
                                  --v858;
                                }
                                while (v858);
                              }
                              v838 += v848 - v854 * v853;
                              v837 += v857;
                              ++v852;
                            }
                            while (v852 != v850);
                          }
                          v838 += v1792 - v848 * v847;
                          v837 += v851;
                          ++v846;
                        }
                        while (v846 != v845);
                      }
                      v838 += v1803;
                      v837 += v1827;
                      ++v835;
                    }
                    while (v835 != v1876);
                  }
                  break;
                default:
                  uint64_t v779 = v151[6];
                  if (v779)
                  {
                    uint64_t v780 = 0;
                    uint64_t v1802 = v245[19];
                    uint64_t v1826 = v152[19];
                    uint64_t v1791 = v151[19];
                    do
                    {
                      uint64_t v781 = 0;
                      if ((v155 & 0x80000000) == 0)
                      {
                        uint64_t v782 = v152[3];
                        uint64_t v783 = v155;
                        int v784 = v780;
                        do
                        {
                          ldiv_t v785 = ldiv(v784, v153[v783]);
                          int v784 = v785.quot;
                          v781 += *(void *)(v782 + 8 * v783--) * v785.rem;
                        }
                        while (v783 != -1);
                      }
                      uint64_t v786 = v1851;
                      if ((v1851 & 0x80000000) != 0)
                      {
                        LODWORD(v787) = 0;
                      }
                      else
                      {
                        uint64_t v787 = 0;
                        uint64_t v788 = v245[3];
                        int v789 = v780;
                        do
                        {
                          ldiv_t v790 = ldiv(v789, v246[v786]);
                          int v789 = v790.quot;
                          v787 += *(void *)(v788 + 8 * v786--) * v790.rem;
                        }
                        while (v786 != -1);
                      }
                      *(void *)(v1791 + 8 * v780++) = *(void *)(v1826 + 8 * (int)v781)
                                                      / *(uint64_t *)(v1802 + 8 * (int)v787);
                      uint64_t v155 = v1872;
                    }
                    while (v780 != v779);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) / **(float **)(*a2 + 152);
          return;
        case 1:
          int v189 = *(_DWORD *)(*a2 + 160);
          if (v189 >= 1)
          {
            float v190 = **(float **)(*a1 + 152);
            v191 = *(float **)(*(void *)a3 + 152);
            v192 = *(float **)(*a2 + 152);
            unsigned int v193 = v189 + 1;
            do
            {
              float v194 = *v192++;
              *v191++ = v190 / v194;
              --v193;
            }
            while (v193 > 1);
          }
          return;
        case 2:
          int v195 = *(_DWORD *)(*a1 + 160);
          if (v195 >= 1)
          {
            float v196 = **(float **)(*a2 + 152);
            v197 = *(float **)(*(void *)a3 + 152);
            v198 = *(float **)(*a1 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              float v200 = *v198++;
              *v197++ = v200 / v196;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 3:
          int v201 = *(_DWORD *)(*(void *)a3 + 48);
          if (v201 >= 1)
          {
            v202 = *(float **)(*(void *)a3 + 152);
            v203 = *(float **)(*a2 + 152);
            v204 = *(float **)(*a1 + 152);
            unsigned int v205 = v201 + 1;
            do
            {
              float v206 = *v204++;
              float v207 = v206;
              float v208 = *v203++;
              *v202++ = v207 / v208;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        default:
          v180 = *(void **)a3;
          v181 = (void *)*a1;
          v182 = *(int **)*a1;
          uint64_t v183 = (v181[1] - (void)v182) >> 2;
          uint64_t v184 = (v183 - 1);
          if ((int)v184 >= -1) {
            int v185 = -1;
          }
          else {
            int v185 = v183 - 1;
          }
          int v186 = v185 + 1;
          int v187 = v183 + 1;
          while (1)
          {
            unsigned int v188 = v187 - 2;
            if (v187 - 2 < 0) {
              break;
            }
            --v187;
            if (*(void *)(v181[3] + 8 * v188) != *(void *)(v180[3] + 8 * v188)) {
              goto LABEL_195;
            }
          }
          int v187 = v186;
LABEL_195:
          v253 = (void *)*a2;
          v254 = *(int **)*a2;
          uint64_t v255 = (v253[1] - (void)v254) >> 2;
          uint64_t v256 = (v255 - 1);
          if ((int)v256 >= -1) {
            int v257 = -1;
          }
          else {
            int v257 = v255 - 1;
          }
          int v258 = v257 + 1;
          int v259 = v255 + 1;
          while (1)
          {
            unsigned int v260 = v259 - 2;
            if (v259 - 2 < 0) {
              break;
            }
            --v259;
            if (*(void *)(v253[3] + 8 * v260) != *(void *)(v180[3] + 8 * v260)) {
              goto LABEL_233;
            }
          }
          int v259 = v258;
LABEL_233:
          int v273 = v183 + 1;
          while (1)
          {
            unsigned int v274 = v273 - 2;
            if (v273 - 2 < 0) {
              break;
            }
            --v273;
            if (*(void *)(v181[3] + 8 * v274)) {
              goto LABEL_268;
            }
          }
          int v273 = v186;
LABEL_268:
          int v287 = v255 + 1;
          while (1)
          {
            unsigned int v288 = v287 - 2;
            if (v287 - 2 < 0) {
              break;
            }
            --v287;
            if (*(void *)(v253[3] + 8 * v288)) {
              goto LABEL_487;
            }
          }
          int v287 = v258;
LABEL_487:
          unint64_t v405 = (uint64_t)(v180[1] - *v180) >> 2;
          if (v187 <= v259) {
            int v406 = v259;
          }
          else {
            int v406 = v187;
          }
          if (v187 <= v287) {
            int v187 = v287;
          }
          if (v273 > v259) {
            int v259 = v273;
          }
          if (v405 > v259)
          {
            int v407 = 1;
          }
          else
          {
            int v259 = (uint64_t)(v180[1] - *v180) >> 2;
            int v407 = 4;
          }
          if (v405 > v187)
          {
            int v408 = 2;
          }
          else
          {
            int v187 = v259;
            int v408 = v407;
          }
          if (v405 > v406)
          {
            int v187 = v406;
            int v408 = 3;
          }
          uint64_t v1852 = v256;
          uint64_t v1873 = v184;
          if (!v187) {
            goto LABEL_516;
          }
          unint64_t v409 = *(void *)(v180[3] + 8 * (v187 - 1));
          if (v409 < 0x10) {
            goto LABEL_516;
          }
          switch(v408)
          {
            case 1:
              if (v187 == 2)
              {
                uint64_t v1686 = *v182;
                if (v1686)
                {
                  uint64_t v1687 = 0;
                  uint64_t v1688 = 0;
                  uint64_t v1689 = 0;
                  uint64_t v1690 = v181[19];
                  uint64_t v1691 = v253[19];
                  uint64_t v1692 = v180[19];
                  unint64_t v1693 = v182[1];
                  v1694 = (uint64_t *)v181[3];
                  uint64_t v1695 = *v1694;
                  uint64_t v1696 = v1694[1];
                  v1697 = (uint64_t *)v253[3];
                  uint64_t v1698 = *v1697;
                  uint64_t v1699 = v1697[1];
                  if (v1693 <= 1) {
                    uint64_t v1700 = 1;
                  }
                  else {
                    uint64_t v1700 = v182[1];
                  }
                  uint64_t v1701 = v1695 - v1696 * v1693;
                  uint64_t v1702 = v1698 - v1699 * v254[1];
                  do
                  {
                    if (v1693)
                    {
                      uint64_t v1703 = 0;
                      uint64_t v1704 = v1691 + 4 * v1688;
                      do
                      {
                        if ((int)v409 >= 1)
                        {
                          uint64_t v1705 = 0;
                          float v1706 = *(float *)(v1690 + 4 * v1689);
                          unsigned int v1707 = v409 + 1;
                          do
                          {
                            *(float *)(v1692 + v1705) = v1706 / *(float *)(v1704 + v1705);
                            --v1707;
                            v1705 += 4;
                          }
                          while (v1707 > 1);
                        }
                        v1689 += v1696;
                        v1688 += v1699;
                        v1692 += 4 * (int)v409;
                        ++v1703;
                        v1704 += 4 * v1699;
                      }
                      while (v1703 != v1700);
                    }
                    v1689 += v1701;
                    v1688 += v1702;
                    ++v1687;
                  }
                  while (v1687 != v1686);
                }
              }
              else if (v187 == 1)
              {
                uint64_t v1057 = *v182;
                if (v1057)
                {
                  uint64_t v1058 = 0;
                  uint64_t v1059 = 0;
                  uint64_t v1060 = v181[19];
                  uint64_t v1061 = v253[19];
                  uint64_t v1062 = v180[19];
                  uint64_t v1063 = *(void *)v181[3];
                  uint64_t v1064 = 4 * *(void *)v253[3];
                  do
                  {
                    if ((int)v409 >= 1)
                    {
                      uint64_t v1065 = 0;
                      float v1066 = *(float *)(v1060 + 4 * v1059);
                      unsigned int v1067 = v409 + 1;
                      do
                      {
                        *(float *)(v1062 + v1065) = v1066 / *(float *)(v1061 + v1065);
                        --v1067;
                        v1065 += 4;
                      }
                      while (v1067 > 1);
                    }
                    v1059 += v1063;
                    ++v1058;
                    v1062 += 4 * (int)v409;
                    v1061 += v1064;
                  }
                  while (v1058 != v1057);
                }
              }
              else
              {
                unint64_t v1822 = v180[6];
                if (v1822)
                {
                  unint64_t v1847 = 0;
                  uint64_t v1768 = v253[19];
                  uint64_t v1780 = v181[19];
                  uint64_t v1708 = v180[19];
                  do
                  {
                    uint64_t v1709 = 0;
                    if ((v184 & 0x80000000) == 0)
                    {
                      uint64_t v1710 = v181[3];
                      uint64_t v1711 = v184;
                      int v1712 = v1847;
                      do
                      {
                        ldiv_t v1713 = ldiv(v1712, v182[v1711]);
                        int v1712 = v1713.quot;
                        v1709 += *(void *)(v1710 + 8 * v1711--) * v1713.rem;
                      }
                      while (v1711 != -1);
                    }
                    uint64_t v1714 = v1852;
                    if ((v1852 & 0x80000000) != 0)
                    {
                      LODWORD(v1715) = 0;
                    }
                    else
                    {
                      uint64_t v1715 = 0;
                      uint64_t v1716 = v253[3];
                      int v1717 = v1847;
                      do
                      {
                        ldiv_t v1718 = ldiv(v1717, v254[v1714]);
                        int v1717 = v1718.quot;
                        v1715 += *(void *)(v1716 + 8 * v1714--) * v1718.rem;
                      }
                      while (v1714 != -1);
                    }
                    uint64_t v184 = v1873;
                    if ((int)v409 >= 1)
                    {
                      uint64_t v1719 = 0;
                      float v1720 = *(float *)(v1780 + 4 * (int)v1709);
                      unsigned int v1721 = v409 + 1;
                      do
                      {
                        *(float *)(v1708 + v1719) = v1720 / *(float *)(v1768 + 4 * (int)v1715 + v1719);
                        --v1721;
                        v1719 += 4;
                      }
                      while (v1721 > 1);
                    }
                    v1708 += 4 * (int)v409;
                    v1847 += (int)v409;
                  }
                  while (v1847 < v1822);
                }
              }
              break;
            case 2:
              if (v187 == 2)
              {
                uint64_t v1722 = *v182;
                if (v1722)
                {
                  uint64_t v1723 = 0;
                  uint64_t v1724 = 0;
                  uint64_t v1725 = 0;
                  uint64_t v1726 = v181[19];
                  uint64_t v1727 = v253[19];
                  uint64_t v1728 = v180[19];
                  unint64_t v1729 = v182[1];
                  v1730 = (uint64_t *)v181[3];
                  uint64_t v1731 = *v1730;
                  uint64_t v1732 = v1730[1];
                  v1733 = (uint64_t *)v253[3];
                  uint64_t v1734 = *v1733;
                  uint64_t v1735 = v1733[1];
                  if (v1729 <= 1) {
                    uint64_t v1736 = 1;
                  }
                  else {
                    uint64_t v1736 = v182[1];
                  }
                  uint64_t v1737 = v1731 - v1732 * v1729;
                  uint64_t v1738 = v1734 - v1735 * v254[1];
                  do
                  {
                    if (v1729)
                    {
                      uint64_t v1739 = 0;
                      uint64_t v1740 = v1726 + 4 * v1725;
                      do
                      {
                        if ((int)v409 >= 1)
                        {
                          uint64_t v1741 = 0;
                          float v1742 = *(float *)(v1727 + 4 * v1724);
                          unsigned int v1743 = v409 + 1;
                          do
                          {
                            *(float *)(v1728 + v1741) = *(float *)(v1740 + v1741) / v1742;
                            --v1743;
                            v1741 += 4;
                          }
                          while (v1743 > 1);
                        }
                        v1725 += v1732;
                        v1724 += v1735;
                        v1728 += 4 * (int)v409;
                        ++v1739;
                        v1740 += 4 * v1732;
                      }
                      while (v1739 != v1736);
                    }
                    v1725 += v1737;
                    v1724 += v1738;
                    ++v1723;
                  }
                  while (v1723 != v1722);
                }
              }
              else if (v187 == 1)
              {
                uint64_t v1068 = *v182;
                if (v1068)
                {
                  uint64_t v1069 = 0;
                  uint64_t v1070 = 0;
                  uint64_t v1071 = v181[19];
                  uint64_t v1072 = v253[19];
                  uint64_t v1073 = v180[19];
                  uint64_t v1074 = *(void *)v253[3];
                  uint64_t v1075 = 4 * *(void *)v181[3];
                  do
                  {
                    if ((int)v409 >= 1)
                    {
                      uint64_t v1076 = 0;
                      float v1077 = *(float *)(v1072 + 4 * v1070);
                      unsigned int v1078 = v409 + 1;
                      do
                      {
                        *(float *)(v1073 + v1076) = *(float *)(v1071 + v1076) / v1077;
                        --v1078;
                        v1076 += 4;
                      }
                      while (v1078 > 1);
                    }
                    v1070 += v1074;
                    ++v1069;
                    v1073 += 4 * (int)v409;
                    v1071 += v1075;
                  }
                  while (v1069 != v1068);
                }
              }
              else
              {
                unint64_t v1823 = v180[6];
                if (v1823)
                {
                  unint64_t v1848 = 0;
                  uint64_t v1769 = v253[19];
                  uint64_t v1781 = v181[19];
                  uint64_t v1744 = v180[19];
                  do
                  {
                    uint64_t v1745 = 0;
                    if ((v184 & 0x80000000) == 0)
                    {
                      uint64_t v1746 = v181[3];
                      uint64_t v1747 = v184;
                      int v1748 = v1848;
                      do
                      {
                        ldiv_t v1749 = ldiv(v1748, v182[v1747]);
                        int v1748 = v1749.quot;
                        v1745 += *(void *)(v1746 + 8 * v1747--) * v1749.rem;
                      }
                      while (v1747 != -1);
                    }
                    uint64_t v1750 = v1852;
                    if ((v1852 & 0x80000000) != 0)
                    {
                      LODWORD(v1751) = 0;
                    }
                    else
                    {
                      uint64_t v1751 = 0;
                      uint64_t v1752 = v253[3];
                      int v1753 = v1848;
                      do
                      {
                        ldiv_t v1754 = ldiv(v1753, v254[v1750]);
                        int v1753 = v1754.quot;
                        v1751 += *(void *)(v1752 + 8 * v1750--) * v1754.rem;
                      }
                      while (v1750 != -1);
                    }
                    uint64_t v184 = v1873;
                    if ((int)v409 >= 1)
                    {
                      uint64_t v1755 = 0;
                      float v1756 = *(float *)(v1769 + 4 * (int)v1751);
                      unsigned int v1757 = v409 + 1;
                      do
                      {
                        *(float *)(v1744 + v1755) = *(float *)(v1781 + 4 * (int)v1745 + v1755) / v1756;
                        --v1757;
                        v1755 += 4;
                      }
                      while (v1757 > 1);
                    }
                    v1744 += 4 * (int)v409;
                    v1848 += (int)v409;
                  }
                  while (v1848 < v1823);
                }
              }
              break;
            case 3:
              if (v187 == 2)
              {
                uint64_t v1267 = *v182;
                if (v1267)
                {
                  uint64_t v1268 = 0;
                  uint64_t v1269 = 0;
                  uint64_t v1270 = 0;
                  uint64_t v1271 = v181[19];
                  uint64_t v1272 = v253[19];
                  uint64_t v1273 = v180[19];
                  unint64_t v1274 = v182[1];
                  v1275 = (uint64_t *)v181[3];
                  uint64_t v1276 = *v1275;
                  uint64_t v1277 = v1275[1];
                  v1278 = (uint64_t *)v253[3];
                  uint64_t v1279 = *v1278;
                  uint64_t v1280 = v1278[1];
                  if (v1274 <= 1) {
                    uint64_t v1281 = 1;
                  }
                  else {
                    uint64_t v1281 = v182[1];
                  }
                  uint64_t v1282 = v1276 - v1277 * v1274;
                  uint64_t v1283 = v1279 - v1280 * v254[1];
                  do
                  {
                    if (v1274)
                    {
                      uint64_t v1284 = 0;
                      uint64_t v1285 = v1272 + 4 * v1269;
                      uint64_t v1286 = v1271 + 4 * v1270;
                      do
                      {
                        if ((int)v409 >= 1)
                        {
                          uint64_t v1287 = 0;
                          unsigned int v1288 = v409 + 1;
                          do
                          {
                            *(float *)(v1273 + v1287) = *(float *)(v1286 + v1287) / *(float *)(v1285 + v1287);
                            --v1288;
                            v1287 += 4;
                          }
                          while (v1288 > 1);
                        }
                        v1270 += v1277;
                        v1269 += v1280;
                        v1273 += 4 * (int)v409;
                        ++v1284;
                        v1285 += 4 * v1280;
                        v1286 += 4 * v1277;
                      }
                      while (v1284 != v1281);
                    }
                    v1270 += v1282;
                    v1269 += v1283;
                    ++v1268;
                  }
                  while (v1268 != v1267);
                }
              }
              else if (v187 == 1)
              {
                uint64_t v410 = *v182;
                if (v410)
                {
                  uint64_t v411 = 0;
                  uint64_t v412 = v181[19];
                  uint64_t v413 = v253[19];
                  uint64_t v414 = v180[19];
                  uint64_t v415 = 4 * *(void *)v253[3];
                  uint64_t v416 = 4 * *(void *)v181[3];
                  do
                  {
                    if ((int)v409 >= 1)
                    {
                      uint64_t v417 = 0;
                      unsigned int v418 = v409 + 1;
                      do
                      {
                        *(float *)(v414 + v417) = *(float *)(v412 + v417) / *(float *)(v413 + v417);
                        --v418;
                        v417 += 4;
                      }
                      while (v418 > 1);
                    }
                    ++v411;
                    v414 += 4 * (int)v409;
                    v413 += v415;
                    v412 += v416;
                  }
                  while (v411 != v410);
                }
              }
              else
              {
                unint64_t v1811 = v180[6];
                if (v1811)
                {
                  unint64_t v1835 = 0;
                  uint64_t v1761 = v253[19];
                  uint64_t v1773 = v181[19];
                  uint64_t v1289 = v180[19];
                  do
                  {
                    uint64_t v1290 = 0;
                    if ((v184 & 0x80000000) == 0)
                    {
                      uint64_t v1291 = v181[3];
                      uint64_t v1292 = v184;
                      int v1293 = v1835;
                      do
                      {
                        ldiv_t v1294 = ldiv(v1293, v182[v1292]);
                        int v1293 = v1294.quot;
                        v1290 += *(void *)(v1291 + 8 * v1292--) * v1294.rem;
                      }
                      while (v1292 != -1);
                    }
                    uint64_t v1295 = v1852;
                    if ((v1852 & 0x80000000) != 0)
                    {
                      LODWORD(v1296) = 0;
                    }
                    else
                    {
                      uint64_t v1296 = 0;
                      uint64_t v1297 = v253[3];
                      int v1298 = v1835;
                      do
                      {
                        ldiv_t v1299 = ldiv(v1298, v254[v1295]);
                        int v1298 = v1299.quot;
                        v1296 += *(void *)(v1297 + 8 * v1295--) * v1299.rem;
                      }
                      while (v1295 != -1);
                    }
                    uint64_t v184 = v1873;
                    if ((int)v409 >= 1)
                    {
                      uint64_t v1300 = 0;
                      unsigned int v1301 = v409 + 1;
                      do
                      {
                        *(float *)(v1289 + v1300) = *(float *)(v1773 + 4 * (int)v1290 + v1300)
                                                  / *(float *)(v1761 + 4 * (int)v1296 + v1300);
                        --v1301;
                        v1300 += 4;
                      }
                      while (v1301 > 1);
                    }
                    v1289 += 4 * (int)v409;
                    v1835 += (int)v409;
                  }
                  while (v1835 < v1811);
                }
              }
              break;
            default:
LABEL_516:
              switch(v405)
              {
                case 1uLL:
                  uint64_t v419 = v180[6];
                  if (v419)
                  {
                    v420 = (float *)v181[19];
                    v421 = (float *)v253[19];
                    v422 = (float *)v180[19];
                    uint64_t v423 = 4 * *(void *)v253[3];
                    uint64_t v424 = 4 * *(void *)v181[3];
                    do
                    {
                      *v422++ = *v420 / *v421;
                      v421 = (float *)((char *)v421 + v423);
                      v420 = (float *)((char *)v420 + v424);
                      --v419;
                    }
                    while (v419);
                  }
                  break;
                case 2uLL:
                  uint64_t v871 = *v182;
                  if (v871)
                  {
                    uint64_t v872 = 0;
                    uint64_t v873 = 0;
                    uint64_t v874 = 0;
                    uint64_t v875 = 0;
                    uint64_t v876 = v181[19];
                    uint64_t v877 = v253[19];
                    uint64_t v878 = v180[19];
                    unint64_t v879 = v182[1];
                    v880 = (uint64_t *)v181[3];
                    uint64_t v881 = *v880;
                    uint64_t v882 = v880[1];
                    v883 = (uint64_t *)v253[3];
                    uint64_t v884 = *v883;
                    uint64_t v885 = v883[1];
                    uint64_t v886 = v884 - v885 * v254[1];
                    if (v879 <= 1) {
                      uint64_t v887 = 1;
                    }
                    else {
                      uint64_t v887 = v182[1];
                    }
                    uint64_t v888 = v881 - v882 * v879;
                    do
                    {
                      if (v879)
                      {
                        uint64_t v889 = v873 + v887;
                        v890 = (float *)(v878 + 4 * v873);
                        uint64_t v891 = v887;
                        do
                        {
                          *v890++ = *(float *)(v876 + 4 * v875) / *(float *)(v877 + 4 * v874);
                          v875 += v882;
                          v874 += v885;
                          --v891;
                        }
                        while (v891);
                        uint64_t v873 = v889;
                      }
                      v875 += v888;
                      v874 += v886;
                      ++v872;
                    }
                    while (v872 != v871);
                  }
                  break;
                case 3uLL:
                  uint64_t v892 = *v182;
                  if (v892)
                  {
                    uint64_t v893 = 0;
                    uint64_t v894 = 0;
                    uint64_t v895 = 0;
                    uint64_t v896 = 0;
                    uint64_t v897 = v181[19];
                    uint64_t v898 = v253[19];
                    uint64_t v899 = v180[19];
                    unint64_t v900 = v182[1];
                    v901 = (void *)v181[3];
                    uint64_t v902 = v901[1];
                    v903 = (void *)v253[3];
                    uint64_t v904 = v903[1];
                    uint64_t v905 = *v903 - v904 * v254[1];
                    if (v900 <= 1) {
                      uint64_t v906 = 1;
                    }
                    else {
                      uint64_t v906 = v182[1];
                    }
                    unint64_t v907 = *v901 - v902 * v900;
                    do
                    {
                      if (v900)
                      {
                        uint64_t v908 = 0;
                        unint64_t v909 = v182[2];
                        uint64_t v910 = v901[2];
                        uint64_t v911 = v903[2];
                        if (v909 <= 1) {
                          uint64_t v912 = 1;
                        }
                        else {
                          uint64_t v912 = v182[2];
                        }
                        uint64_t v913 = v904 - v911 * v254[2];
                        do
                        {
                          uint64_t v914 = v912;
                          if (v909)
                          {
                            do
                            {
                              *(float *)(v899 + 4 * v894++) = *(float *)(v897 + 4 * v896) / *(float *)(v898 + 4 * v895);
                              v896 += v910;
                              v895 += v911;
                              --v914;
                            }
                            while (v914);
                          }
                          v896 += v902 - v910 * v909;
                          v895 += v913;
                          ++v908;
                        }
                        while (v908 != v906);
                      }
                      v896 += v907;
                      v895 += v905;
                      ++v893;
                    }
                    while (v893 != v892);
                  }
                  break;
                case 4uLL:
                  uint64_t v1877 = *v182;
                  if (v1877)
                  {
                    uint64_t v915 = 0;
                    uint64_t v916 = 0;
                    uint64_t v917 = 0;
                    uint64_t v918 = 0;
                    uint64_t v919 = v181[19];
                    uint64_t v920 = v253[19];
                    uint64_t v921 = v180[19];
                    unint64_t v922 = v182[1];
                    v923 = (void *)v181[3];
                    v924 = (void *)v253[3];
                    uint64_t v1805 = v924[1];
                    uint64_t v1829 = v923[1];
                    uint64_t v1856 = *v924 - v1805 * v254[1];
                    if (v922 <= 1) {
                      uint64_t v925 = 1;
                    }
                    else {
                      uint64_t v925 = v182[1];
                    }
                    unint64_t v926 = *v923 - v923[1] * v922;
                    do
                    {
                      if (v922)
                      {
                        uint64_t v927 = 0;
                        unint64_t v928 = v182[2];
                        uint64_t v929 = v923[2];
                        uint64_t v930 = v924[2];
                        if (v928 <= 1) {
                          uint64_t v931 = 1;
                        }
                        else {
                          uint64_t v931 = v182[2];
                        }
                        uint64_t v932 = v1805 - v930 * v254[2];
                        do
                        {
                          if (v928)
                          {
                            uint64_t v933 = 0;
                            unint64_t v934 = v182[3];
                            uint64_t v935 = v923[3];
                            uint64_t v936 = v924[3];
                            if (v934 <= 1) {
                              uint64_t v937 = 1;
                            }
                            else {
                              uint64_t v937 = v182[3];
                            }
                            uint64_t v938 = v930 - v936 * v254[3];
                            do
                            {
                              uint64_t v939 = v937;
                              if (v934)
                              {
                                do
                                {
                                  *(float *)(v921 + 4 * v916++) = *(float *)(v919 + 4 * v918)
                                                                / *(float *)(v920 + 4 * v917);
                                  v918 += v935;
                                  v917 += v936;
                                  --v939;
                                }
                                while (v939);
                              }
                              v918 += v929 - v935 * v934;
                              v917 += v938;
                              ++v933;
                            }
                            while (v933 != v931);
                          }
                          v918 += v1829 - v929 * v928;
                          v917 += v932;
                          ++v927;
                        }
                        while (v927 != v925);
                      }
                      v918 += v926;
                      v917 += v1856;
                      ++v915;
                    }
                    while (v915 != v1877);
                  }
                  break;
                default:
                  uint64_t v859 = v180[6];
                  if (v859)
                  {
                    uint64_t v860 = 0;
                    uint64_t v1804 = v253[19];
                    uint64_t v1828 = v181[19];
                    uint64_t v1793 = v180[19];
                    do
                    {
                      uint64_t v861 = 0;
                      if ((v184 & 0x80000000) == 0)
                      {
                        uint64_t v862 = v181[3];
                        uint64_t v863 = v184;
                        int v864 = v860;
                        do
                        {
                          ldiv_t v865 = ldiv(v864, v182[v863]);
                          int v864 = v865.quot;
                          v861 += *(void *)(v862 + 8 * v863--) * v865.rem;
                        }
                        while (v863 != -1);
                      }
                      uint64_t v866 = v1852;
                      if ((v1852 & 0x80000000) != 0)
                      {
                        LODWORD(v867) = 0;
                      }
                      else
                      {
                        uint64_t v867 = 0;
                        uint64_t v868 = v253[3];
                        int v869 = v860;
                        do
                        {
                          ldiv_t v870 = ldiv(v869, v254[v866]);
                          int v869 = v870.quot;
                          v867 += *(void *)(v868 + 8 * v866--) * v870.rem;
                        }
                        while (v866 != -1);
                      }
                      *(float *)(v1793 + 4 * v860++) = *(float *)(v1828 + 4 * (int)v861)
                                                     / *(float *)(v1804 + 4 * (int)v867);
                      uint64_t v184 = v1873;
                    }
                    while (v860 != v859);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::Exp::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  v30[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Exp::eval_cpu();
  }
  if *(void *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v24 = *(const float **)(*(void *)v3 + 152);
    *(void *)v29 = *(void *)(*(void *)v3 + 160);
    vvexpf(*(float **)(*(void *)a3 + 152), v24, v29);
  }
  else
  {
    *(void *)v29 = *(void *)(*(void *)a3 + 56);
    if (!mlx::core::issubdtype((unsigned int *)v29, &mlx::core::inexact))
    {
      exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[exp] Cannot exponentiate elements in array with non floating point type.");
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    uint64_t v6 = *(void *)(*(void *)a3 + 56);
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"[unary_fp] Does not support ", 28);
      v28[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v26, v28);
      int v27 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v30, v28);
      MEMORY[0x25A2B1480](v27, v28);
      __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    char v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v21 = *(void *)(*(void *)v3 + 160);
      if (v21)
      {
        int v22 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v23 = *v7++;
          *v22++ = expf(v23);
          --v21;
        }
        while (v21);
      }
    }
    else
    {
      int v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
      *(void *)v29 = &unk_27062AEC8;
      v30[0] = mlx::core::allocator::free;
      v30[2] = v29;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)v29);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v29);
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = *(void *)(*(void *)a3 + 48);
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(v9 + 152);
        int v13 = *(uint64_t **)v3;
        uint64_t v14 = *v13;
        uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
        do
        {
          uint64_t v16 = 0;
          if ((v15 & 0x80000000) == 0)
          {
            uint64_t v17 = v13[3];
            uint64_t v18 = v15;
            int quot = v11;
            do
            {
              ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
              int quot = v20.quot;
              v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
            }
            while (v18 != -1);
          }
          *(float *)(v12 + 4 * v11++) = expf(v7[(int)v16]);
        }
        while (v11 != v10);
      }
    }
  }
}

void sub_256F677A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Expm1::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Expm1::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(void *)v3 + 152);
    *(void *)uint64_t v6 = *(void *)(*(void *)v3 + 160);
    vvexpm1f(*(float **)(*(void *)a3 + 152), v5, v6);
  }
  else
  {
    mlx::core::Expm1::eval(a1, a2, a3);
  }
}

void mlx::core::Full::eval_cpu(int a1, uint64_t *a2, int ***this, float a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (a2[1] - *a2 != 16) {
    mlx::core::Full::eval_cpu();
  }
  int v6 = *(_DWORD *)(*(void *)v4 + 56);
  char v7 = (*this)[7];
  if (v6 != v7) {
    mlx::core::Full::eval_cpu();
  }
  if (v6 == 6 && *(void *)(*(void *)v4 + 160) == 1)
  {
    uint64_t v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)(*this)[6] * BYTE4(v7)));
    v10[0] = &unk_27062AEC8;
    v10[1] = mlx::core::allocator::free;
    v10[3] = v10;
    mlx::core::array::set_data(this, (uint64_t)v9, (uint64_t)v10);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v10);
    vDSP_vfill(*(const float **)(*(void *)v4 + 152), (float *)(*this)[19], 1, (vDSP_Length)(*this)[6]);
  }
  else
  {
    mlx::core::Full::eval(a1, (uint64_t)a2, this, a4);
  }
}

void sub_256F67A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Log::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    uint64_t v6 = *(void *)v3;
    *(void *)int v8 = *(void *)(*(void *)v3 + 160);
    int v7 = *(_DWORD *)(a1 + 20);
    if (v7)
    {
      if (v7 == 1)
      {
        vvlog10f(*(float **)(*(void *)a3 + 152), *(const float **)(v6 + 152), v8);
      }
      else if (v7 == 2)
      {
        vvlogf(*(float **)(*(void *)a3 + 152), *(const float **)(v6 + 152), v8);
      }
    }
    else
    {
      vvlog2f(*(float **)(*(void *)a3 + 152), *(const float **)(v6 + 152), v8);
    }
  }
  else
  {
    mlx::core::Log::eval(a1, a2, a3);
  }
}

void mlx::core::Log1p::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  v30[32] = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Log1p::eval_cpu();
  }
  if *(void *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168))
  {
    uint64_t v24 = *(const float **)(*(void *)v3 + 152);
    *(void *)v29 = *(void *)(*(void *)v3 + 160);
    vvlog1pf(*(float **)(*(void *)a3 + 152), v24, v29);
  }
  else
  {
    *(void *)v29 = *(void *)(*(void *)a3 + 56);
    if (!mlx::core::issubdtype((unsigned int *)v29, &mlx::core::inexact))
    {
      exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log1p] Cannot compute log of elements in array with non floating point type.");
      __cxa_throw(exception, (struct type_info *)off_265426358, MEMORY[0x263F8C080]);
    }
    uint64_t v6 = *(void *)(*(void *)a3 + 56);
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"[unary_fp] Does not support ", 28);
      v28[0] = *(void *)(*(void *)a3 + 56);
      mlx::core::operator<<(v26, v28);
      int v27 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v30, v28);
      MEMORY[0x25A2B1480](v27, v28);
      __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    int v7 = *(float **)(*(void *)v3 + 152);
    if (*(unsigned char *)(*(void *)v3 + 168))
    {
      uint64_t v21 = *(void *)(*(void *)v3 + 160);
      if (v21)
      {
        int v22 = *(float **)(*(void *)a3 + 152);
        do
        {
          float v23 = *v7++;
          *v22++ = log1pf(v23);
          --v21;
        }
        while (v21);
      }
    }
    else
    {
      int v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(*(void *)a3 + 48) * BYTE4(v6)));
      *(void *)v29 = &unk_27062AEC8;
      v30[0] = mlx::core::allocator::free;
      v30[2] = v29;
      mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)v29);
      std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v29);
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = *(void *)(*(void *)a3 + 48);
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(v9 + 152);
        int v13 = *(uint64_t **)v3;
        uint64_t v14 = *v13;
        uint64_t v15 = ((unint64_t)(v13[1] - *v13) >> 2) - 1;
        do
        {
          uint64_t v16 = 0;
          if ((v15 & 0x80000000) == 0)
          {
            uint64_t v17 = v13[3];
            uint64_t v18 = v15;
            int quot = v11;
            do
            {
              ldiv_t v20 = ldiv(quot, *(int *)(v14 + 4 * v18));
              int quot = v20.quot;
              v16 += *(void *)(v17 + 8 * v18--) * v20.rem;
            }
            while (v18 != -1);
          }
          *(float *)(v12 + 4 * v11++) = log1pf(v7[(int)v16]);
        }
        while (v11 != v10);
      }
    }
  }
}

void sub_256F67E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void mlx::core::Multiply::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Multiply::eval_cpu();
  }
  uint64_t v4 = v3 + 2;
  if (*(_DWORD *)(*v3 + 56) == 6)
  {
  }
  else
  {
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          char v8 = !v7;
          goto LABEL_13;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          uint64_t v24 = *(void **)a3;
          uint64_t v25 = *a1;
          int v26 = *(int **)*a1;
          uint64_t v27 = (*(void *)(*a1 + 8) - (void)v26) >> 2;
          uint64_t v28 = (v27 - 1);
          if ((int)v28 >= -1) {
            int v29 = -1;
          }
          else {
            int v29 = v27 - 1;
          }
          int v30 = v29 + 1;
          int v31 = v27 + 1;
          break;
      }
      while (1)
      {
        unsigned int v32 = v31 - 2;
        if (v31 - 2 < 0) {
          break;
        }
        --v31;
        if (*(void *)(*(void *)(v25 + 24) + 8 * v32) != *(void *)(v24[3] + 8 * v32)) {
          goto LABEL_77;
        }
      }
      int v31 = v30;
LABEL_77:
      unsigned int v85 = (int **)*a2;
      int v86 = *(int **)*a2;
      uint64_t v87 = (*(void *)(*a2 + 8) - (void)v86) >> 2;
      uint64_t v88 = (v87 - 1);
      if ((int)v88 >= -1) {
        int v89 = -1;
      }
      else {
        int v89 = v87 - 1;
      }
      int v90 = v89 + 1;
      int v91 = v87 + 1;
      while (1)
      {
        unsigned int v92 = v91 - 2;
        if (v91 - 2 < 0) {
          break;
        }
        --v91;
        if (*(void *)&v85[3][2 * v92] != *(void *)(v24[3] + 8 * v92)) {
          goto LABEL_131;
        }
      }
      int v91 = v90;
LABEL_131:
      int v139 = v27 + 1;
      while (1)
      {
        unsigned int v140 = v139 - 2;
        if (v139 - 2 < 0) {
          break;
        }
        --v139;
        if (*(void *)(*(void *)(v25 + 24) + 8 * v140)) {
          goto LABEL_166;
        }
      }
      int v139 = v30;
LABEL_166:
      int v153 = v87 + 1;
      while (1)
      {
        int v154 = v153 - 2;
        if (v153 - 2 < 0) {
          break;
        }
        --v153;
        if (*(void *)&v85[3][2 * v154]) {
          goto LABEL_201;
        }
      }
      int v153 = v90;
LABEL_201:
      unint64_t v167 = (uint64_t)(v24[1] - *v24) >> 2;
      if (v31 <= v91) {
        int v168 = v91;
      }
      else {
        int v168 = v31;
      }
      if (v31 <= v153) {
        int v31 = v153;
      }
      if (v139 > v91) {
        int v91 = v139;
      }
      if (v167 > v91) {
        int v169 = 1;
      }
      else {
        int v169 = 4;
      }
      if (v167 <= v91) {
        int v91 = (uint64_t)(v24[1] - *v24) >> 2;
      }
      if (v167 <= v31) {
        int v31 = v91;
      }
      else {
        int v169 = 2;
      }
      if (v167 <= v168)
      {
        int v170 = v31;
      }
      else
      {
        int v169 = 3;
        int v170 = v168;
      }
      if (!v170) {
        goto LABEL_230;
      }
      unint64_t v171 = *(void *)(v24[3] + 8 * (v170 - 1));
      if (v171 < 0x10) {
        goto LABEL_230;
      }
      switch(v169)
      {
        case 1:
          if (v170 == 2)
          {
            int v1138 = *v26;
            if (*v26)
            {
              uint64_t v1139 = 0;
              uint64_t v1140 = 0;
              unint64_t v1576 = 0;
              uint64_t v1622 = *(void *)(v25 + 152);
              vDSP_Length v1668 = (int)v171;
              v1141 = (float *)v24[19];
              uint64_t v1142 = v85[19];
              do
              {
                if (v26[1])
                {
                  unint64_t v1143 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1142 + v1139), 1, (const float *)(v1622 + v1140), v1141, 1, v1668);
                    uint64_t v25 = *a1;
                    v1144 = *(void **)(*a1 + 24);
                    uint64_t v1145 = v1144[1];
                    v1140 += v1145;
                    unsigned int v85 = (int **)*a2;
                    uint64_t v1146 = *(int **)(*a2 + 24);
                    uint64_t v1147 = *((void *)v1146 + 1);
                    v1139 += v1147;
                    v1141 = (float *)((char *)v1141 + v1668);
                    ++v1143;
                    int v26 = *(int **)*a1;
                    unint64_t v1148 = v26[1];
                  }
                  while (v1143 < v1148);
                  int v1138 = *v26;
                  int v86 = *v85;
                }
                else
                {
                  unint64_t v1148 = 0;
                  v1144 = *(void **)(v25 + 24);
                  uint64_t v1145 = v1144[1];
                  uint64_t v1146 = v85[3];
                  uint64_t v1147 = *((void *)v1146 + 1);
                }
                uint64_t v1140 = *v1144 + v1140 - v1148 * v1145;
                uint64_t v1139 = *(void *)v1146 + v1139 - v1147 * v86[1];
                ++v1576;
              }
              while (v1576 < v1138);
            }
          }
          else if (v170 == 1)
          {
            if (*v26)
            {
              unint64_t v837 = 0;
              uint64_t v838 = 0;
              uint64_t v839 = 0;
              uint64_t v840 = *(void *)(v25 + 152);
              uint64_t v841 = v85[19];
              vDSP_Length v842 = (int)v171;
              v843 = (float *)v24[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v841 + v838), 1, (const float *)(v840 + v839), v843, 1, v842);
                v839 += **(void **)(*a1 + 24);
                v838 += **(void **)(*a2 + 24);
                v843 = (float *)((char *)v843 + v842);
                ++v837;
              }
              while (v837 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            unint64_t v1149 = 0;
            uint64_t v1623 = v85[19];
            uint64_t v1669 = *(void *)(v25 + 152);
            vDSP_Length v1577 = (int)v171;
            uint64_t v1150 = (float *)v24[19];
            do
            {
              uint64_t v1151 = *(void *)*a1;
              unint64_t v1152 = (unint64_t)(*(void *)(*a1 + 8) - v1151) >> 2;
              uint64_t v1153 = 0;
              uint64_t v1154 = (v1152 - 1);
              if ((int)v1152 - 1 >= 0)
              {
                uint64_t v1155 = *(void *)(*a1 + 24);
                int quot = v1149;
                do
                {
                  ldiv_t v1157 = ldiv(quot, *(int *)(v1151 + 4 * v1154));
                  int quot = v1157.quot;
                  v1153 += *(void *)(v1155 + 8 * v1154--) * v1157.rem;
                }
                while (v1154 != -1);
              }
              uint64_t v1158 = *(void *)*a2;
              unint64_t v1159 = (unint64_t)(*(void *)(*a2 + 8) - v1158) >> 2;
              uint64_t v1160 = 0;
              uint64_t v1161 = (v1159 - 1);
              if ((int)v1159 - 1 >= 0)
              {
                uint64_t v1162 = *(void *)(*a2 + 24);
                int v1163 = v1149;
                do
                {
                  ldiv_t v1164 = ldiv(v1163, *(int *)(v1158 + 4 * v1161));
                  int v1163 = v1164.quot;
                  v1160 += *(void *)(v1162 + 8 * v1161--) * v1164.rem;
                }
                while (v1161 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1623 + (int)v1160), 1, (const float *)(v1669 + (int)v1153), v1150, 1, v1577);
              uint64_t v1150 = (float *)((char *)v1150 + v1577);
              v1149 += v1577;
            }
            while (v1149 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v170 == 2)
          {
            int v1165 = *v26;
            if (*v26)
            {
              uint64_t v1166 = 0;
              uint64_t v1167 = 0;
              unint64_t v1578 = 0;
              uint64_t v1624 = *(void *)(v25 + 152);
              vDSP_Length v1670 = (int)v171;
              int v1168 = (float *)v24[19];
              unint64_t v1169 = v85[19];
              do
              {
                if (v26[1])
                {
                  unint64_t v1170 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1624 + v1167), 1, (const float *)((char *)v1169 + v1166), v1168, 1, v1670);
                    uint64_t v25 = *a1;
                    uint64_t v1171 = *(void **)(*a1 + 24);
                    uint64_t v1172 = v1171[1];
                    v1167 += v1172;
                    unsigned int v85 = (int **)*a2;
                    v1173 = *(int **)(*a2 + 24);
                    uint64_t v1174 = *((void *)v1173 + 1);
                    v1166 += v1174;
                    int v1168 = (float *)((char *)v1168 + v1670);
                    ++v1170;
                    int v26 = *(int **)*a1;
                    unint64_t v1175 = v26[1];
                  }
                  while (v1170 < v1175);
                  int v1165 = *v26;
                  int v86 = *v85;
                }
                else
                {
                  unint64_t v1175 = 0;
                  uint64_t v1171 = *(void **)(v25 + 24);
                  uint64_t v1172 = v1171[1];
                  v1173 = v85[3];
                  uint64_t v1174 = *((void *)v1173 + 1);
                }
                uint64_t v1167 = *v1171 + v1167 - v1175 * v1172;
                uint64_t v1166 = *(void *)v1173 + v1166 - v1174 * v86[1];
                ++v1578;
              }
              while (v1578 < v1165);
            }
          }
          else if (v170 == 1)
          {
            if (*v26)
            {
              unint64_t v844 = 0;
              uint64_t v845 = 0;
              uint64_t v846 = 0;
              uint64_t v847 = *(void *)(v25 + 152);
              uint64_t v848 = v85[19];
              vDSP_Length v849 = (int)v171;
              uint64_t v850 = (float *)v24[19];
              do
              {
                vDSP_vsmul((const float *)(v847 + v846), 1, (const float *)((char *)v848 + v845), v850, 1, v849);
                v846 += **(void **)(*a1 + 24);
                v845 += **(void **)(*a2 + 24);
                uint64_t v850 = (float *)((char *)v850 + v849);
                ++v844;
              }
              while (v844 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            unint64_t v1176 = 0;
            v1625 = v85[19];
            uint64_t v1671 = *(void *)(v25 + 152);
            vDSP_Length v1579 = (int)v171;
            unsigned int v1177 = (float *)v24[19];
            do
            {
              uint64_t v1178 = *(void *)*a1;
              unint64_t v1179 = (unint64_t)(*(void *)(*a1 + 8) - v1178) >> 2;
              uint64_t v1180 = 0;
              uint64_t v1181 = (v1179 - 1);
              if ((int)v1179 - 1 >= 0)
              {
                uint64_t v1182 = *(void *)(*a1 + 24);
                int v1183 = v1176;
                do
                {
                  ldiv_t v1184 = ldiv(v1183, *(int *)(v1178 + 4 * v1181));
                  int v1183 = v1184.quot;
                  v1180 += *(void *)(v1182 + 8 * v1181--) * v1184.rem;
                }
                while (v1181 != -1);
              }
              uint64_t v1185 = *(void *)*a2;
              unint64_t v1186 = (unint64_t)(*(void *)(*a2 + 8) - v1185) >> 2;
              uint64_t v1187 = 0;
              uint64_t v1188 = (v1186 - 1);
              if ((int)v1186 - 1 >= 0)
              {
                uint64_t v1189 = *(void *)(*a2 + 24);
                int v1190 = v1176;
                do
                {
                  ldiv_t v1191 = ldiv(v1190, *(int *)(v1185 + 4 * v1188));
                  int v1190 = v1191.quot;
                  v1187 += *(void *)(v1189 + 8 * v1188--) * v1191.rem;
                }
                while (v1188 != -1);
              }
              vDSP_vsmul((const float *)(v1671 + (int)v1180), 1, (const float *)((char *)v1625 + (int)v1187), v1177, 1, v1579);
              unsigned int v1177 = (float *)((char *)v1177 + v1579);
              v1176 += v1579;
            }
            while (v1176 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v170 == 2)
          {
            int v943 = *v26;
            if (*v26)
            {
              uint64_t v944 = 0;
              uint64_t v945 = 0;
              unint64_t v1564 = 0;
              uint64_t v1610 = *(void *)(v25 + 152);
              vDSP_Length v1656 = (int)v171;
              uint64_t v946 = (float *)v24[19];
              uint64_t v947 = v85[19];
              do
              {
                if (v26[1])
                {
                  unint64_t v948 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1610 + v945), 1, (const float *)((char *)v947 + v944), 1, v946, 1, v1656);
                    uint64_t v25 = *a1;
                    uint64_t v949 = *(void **)(*a1 + 24);
                    uint64_t v950 = v949[1];
                    v945 += v950;
                    unsigned int v85 = (int **)*a2;
                    int v951 = *(int **)(*a2 + 24);
                    uint64_t v952 = *((void *)v951 + 1);
                    v944 += v952;
                    uint64_t v946 = (float *)((char *)v946 + v1656);
                    ++v948;
                    int v26 = *(int **)*a1;
                    unint64_t v953 = v26[1];
                  }
                  while (v948 < v953);
                  int v943 = *v26;
                  int v86 = *v85;
                }
                else
                {
                  unint64_t v953 = 0;
                  uint64_t v949 = *(void **)(v25 + 24);
                  uint64_t v950 = v949[1];
                  int v951 = v85[3];
                  uint64_t v952 = *((void *)v951 + 1);
                }
                uint64_t v945 = *v949 + v945 - v953 * v950;
                uint64_t v944 = *(void *)v951 + v944 - v952 * v86[1];
                ++v1564;
              }
              while (v1564 < v943);
            }
          }
          else if (v170 == 1)
          {
            if (*v26)
            {
              unint64_t v172 = 0;
              uint64_t v173 = 0;
              uint64_t v174 = 0;
              uint64_t v175 = *(void *)(v25 + 152);
              unsigned int v176 = v85[19];
              vDSP_Length v177 = (int)v171;
              uint64_t v178 = (float *)v24[19];
              do
              {
                vDSP_vmul((const float *)(v175 + v174), 1, (const float *)((char *)v176 + v173), 1, v178, 1, v177);
                v174 += **(void **)(*a1 + 24);
                v173 += **(void **)(*a2 + 24);
                uint64_t v178 = (float *)((char *)v178 + v177);
                ++v172;
              }
              while (v172 < **(int **)*a1);
            }
          }
          else if (v24[6])
          {
            unint64_t v954 = 0;
            uint64_t v1611 = v85[19];
            uint64_t v1657 = *(void *)(v25 + 152);
            vDSP_Length v1565 = (int)v171;
            uint64_t v955 = (float *)v24[19];
            do
            {
              uint64_t v956 = *(void *)*a1;
              unint64_t v957 = (unint64_t)(*(void *)(*a1 + 8) - v956) >> 2;
              uint64_t v958 = 0;
              uint64_t v959 = (v957 - 1);
              if ((int)v957 - 1 >= 0)
              {
                uint64_t v960 = *(void *)(*a1 + 24);
                int v961 = v954;
                do
                {
                  ldiv_t v962 = ldiv(v961, *(int *)(v956 + 4 * v959));
                  int v961 = v962.quot;
                  v958 += *(void *)(v960 + 8 * v959--) * v962.rem;
                }
                while (v959 != -1);
              }
              uint64_t v963 = *(void *)*a2;
              unint64_t v964 = (unint64_t)(*(void *)(*a2 + 8) - v963) >> 2;
              uint64_t v965 = 0;
              uint64_t v966 = (v964 - 1);
              if ((int)v964 - 1 >= 0)
              {
                uint64_t v967 = *(void *)(*a2 + 24);
                int v968 = v954;
                do
                {
                  ldiv_t v969 = ldiv(v968, *(int *)(v963 + 4 * v966));
                  int v968 = v969.quot;
                  v965 += *(void *)(v967 + 8 * v966--) * v969.rem;
                }
                while (v966 != -1);
              }
              vDSP_vmul((const float *)(v1657 + (int)v958), 1, (const float *)((char *)v1611 + (int)v965), 1, v955, 1, v1565);
              uint64_t v955 = (float *)((char *)v955 + v1565);
              v954 += v1565;
            }
            while (v954 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_230:
          switch(v167)
          {
            case 1uLL:
              uint64_t v179 = v24[6];
              if (v179)
              {
                v180 = *(unsigned char **)(v25 + 152);
                v181 = v85[19];
                v182 = (char *)v24[19];
                uint64_t v183 = **(void **)(v25 + 24);
                uint64_t v184 = *(void *)v85[3];
                do
                {
                  if (*v180) {
                    BOOL v185 = *(unsigned char *)v181 == 0;
                  }
                  else {
                    BOOL v185 = 1;
                  }
                  char v186 = !v185;
                  *v182++ = v186;
                  v181 = (int *)((char *)v181 + v184);
                  v180 += v183;
                  --v179;
                }
                while (v179);
              }
              break;
            case 2uLL:
              uint64_t v312 = *v26;
              if (v312)
              {
                uint64_t v313 = 0;
                uint64_t v314 = 0;
                uint64_t v315 = 0;
                uint64_t v316 = 0;
                uint64_t v317 = *(void *)(v25 + 152);
                unsigned int v318 = v85[19];
                uint64_t v319 = v24[19];
                unint64_t v320 = v26[1];
                uint64_t v321 = *(uint64_t **)(v25 + 24);
                uint64_t v322 = *v321;
                uint64_t v323 = v321[1];
                uint64_t v324 = v85[3];
                uint64_t v325 = *(void *)v324;
                uint64_t v326 = *((void *)v324 + 1);
                uint64_t v327 = v325 - v326 * v86[1];
                if (v320 <= 1) {
                  uint64_t v328 = 1;
                }
                else {
                  uint64_t v328 = v26[1];
                }
                uint64_t v329 = v322 - v323 * v320;
                do
                {
                  if (v320)
                  {
                    uint64_t v330 = v314 + v328;
                    unint64_t v331 = (char *)(v319 + v314);
                    uint64_t v332 = v328;
                    do
                    {
                      if (*(unsigned char *)(v317 + v316)) {
                        BOOL v333 = *((unsigned char *)v318 + v315) == 0;
                      }
                      else {
                        BOOL v333 = 1;
                      }
                      char v334 = !v333;
                      *v331++ = v334;
                      v316 += v323;
                      v315 += v326;
                      --v332;
                    }
                    while (v332);
                    uint64_t v314 = v330;
                  }
                  v316 += v329;
                  v315 += v327;
                  ++v313;
                }
                while (v313 != v312);
              }
              break;
            case 3uLL:
              uint64_t v335 = *v26;
              if (v335)
              {
                uint64_t v336 = 0;
                uint64_t v337 = 0;
                uint64_t v338 = 0;
                uint64_t v339 = 0;
                uint64_t v340 = *(void *)(v25 + 152);
                v341 = v85[19];
                uint64_t v342 = v24[19];
                unint64_t v343 = v26[1];
                uint64_t v344 = *(void **)(v25 + 24);
                uint64_t v345 = v344[1];
                int v346 = v85[3];
                uint64_t v347 = *((void *)v346 + 1);
                uint64_t v348 = *(void *)v346 - v347 * v86[1];
                if (v343 <= 1) {
                  uint64_t v349 = 1;
                }
                else {
                  uint64_t v349 = v26[1];
                }
                unint64_t v350 = *v344 - v345 * v343;
                do
                {
                  if (v343)
                  {
                    uint64_t v351 = 0;
                    unint64_t v352 = v26[2];
                    uint64_t v353 = v344[2];
                    uint64_t v354 = *((void *)v346 + 2);
                    if (v352 <= 1) {
                      uint64_t v355 = 1;
                    }
                    else {
                      uint64_t v355 = v26[2];
                    }
                    uint64_t v356 = v347 - v354 * v86[2];
                    do
                    {
                      uint64_t v357 = v355;
                      if (v352)
                      {
                        do
                        {
                          if (*(unsigned char *)(v340 + v339)) {
                            BOOL v358 = *((unsigned char *)v341 + v338) == 0;
                          }
                          else {
                            BOOL v358 = 1;
                          }
                          char v359 = !v358;
                          *(unsigned char *)(v342 + v337++) = v359;
                          v339 += v353;
                          v338 += v354;
                          --v357;
                        }
                        while (v357);
                      }
                      v339 += v345 - v353 * v352;
                      v338 += v356;
                      ++v351;
                    }
                    while (v351 != v349);
                  }
                  v339 += v350;
                  v338 += v348;
                  ++v336;
                }
                while (v336 != v335);
              }
              break;
            case 4uLL:
              uint64_t v1647 = *v26;
              if (v1647)
              {
                uint64_t v360 = 0;
                uint64_t v361 = 0;
                uint64_t v362 = 0;
                uint64_t v363 = 0;
                uint64_t v364 = *(void *)(v25 + 152);
                unint64_t v365 = v85[19];
                uint64_t v366 = v24[19];
                unint64_t v367 = v26[1];
                int v368 = *(void **)(v25 + 24);
                unint64_t v369 = v85[3];
                uint64_t v1530 = *((void *)v369 + 1);
                uint64_t v1537 = v368[1];
                if (v367 <= 1) {
                  uint64_t v370 = 1;
                }
                else {
                  uint64_t v370 = v26[1];
                }
                unint64_t v1557 = *v368 - v368[1] * v367;
                uint64_t v1601 = *(void *)v369 - v1530 * v86[1];
                do
                {
                  if (v367)
                  {
                    uint64_t v371 = 0;
                    unint64_t v372 = v26[2];
                    uint64_t v373 = v368[2];
                    uint64_t v374 = *((void *)v369 + 2);
                    if (v372 <= 1) {
                      uint64_t v375 = 1;
                    }
                    else {
                      uint64_t v375 = v26[2];
                    }
                    uint64_t v376 = v1530 - v374 * v86[2];
                    do
                    {
                      if (v372)
                      {
                        uint64_t v377 = 0;
                        unint64_t v378 = v26[3];
                        uint64_t v379 = v368[3];
                        uint64_t v380 = *((void *)v369 + 3);
                        if (v378 <= 1) {
                          uint64_t v381 = 1;
                        }
                        else {
                          uint64_t v381 = v26[3];
                        }
                        uint64_t v382 = v374 - v380 * v86[3];
                        do
                        {
                          uint64_t v383 = v381;
                          if (v378)
                          {
                            do
                            {
                              if (*(unsigned char *)(v364 + v363)) {
                                BOOL v384 = *((unsigned char *)v365 + v362) == 0;
                              }
                              else {
                                BOOL v384 = 1;
                              }
                              char v385 = !v384;
                              *(unsigned char *)(v366 + v361++) = v385;
                              v363 += v379;
                              v362 += v380;
                              --v383;
                            }
                            while (v383);
                          }
                          v363 += v373 - v379 * v378;
                          v362 += v382;
                          ++v377;
                        }
                        while (v377 != v375);
                      }
                      v363 += v1537 - v373 * v372;
                      v362 += v376;
                      ++v371;
                    }
                    while (v371 != v370);
                  }
                  v363 += v1557;
                  v362 += v1601;
                  ++v360;
                }
                while (v360 != v1647);
              }
              break;
            default:
              uint64_t v1600 = v24[6];
              uint64_t v1646 = v28;
              if (v1600)
              {
                uint64_t v299 = 0;
                uint64_t v1536 = v85[19];
                uint64_t v1556 = *(void *)(v25 + 152);
                uint64_t v1529 = v24[19];
                do
                {
                  uint64_t v300 = v1646;
                  if ((v1646 & 0x80000000) != 0)
                  {
                    LODWORD(v301) = 0;
                  }
                  else
                  {
                    uint64_t v301 = 0;
                    uint64_t v302 = *(void *)(v25 + 24);
                    int v303 = v299;
                    do
                    {
                      ldiv_t v304 = ldiv(v303, v26[v300]);
                      int v303 = v304.quot;
                      v301 += *(void *)(v302 + 8 * v300--) * v304.rem;
                    }
                    while (v300 != -1);
                  }
                  uint64_t v305 = 0;
                  if ((v88 & 0x80000000) == 0)
                  {
                    int v306 = v85[3];
                    uint64_t v307 = v88;
                    int v308 = v299;
                    do
                    {
                      ldiv_t v309 = ldiv(v308, v86[v307]);
                      int v308 = v309.quot;
                      v305 += *(void *)&v306[2 * v307--] * v309.rem;
                    }
                    while (v307 != -1);
                  }
                  if (*(unsigned char *)(v1556 + (int)v301)) {
                    BOOL v310 = *((unsigned char *)v1536 + (int)v305) == 0;
                  }
                  else {
                    BOOL v310 = 1;
                  }
                  char v311 = !v310;
                  *(unsigned char *)(v1529 + v299++) = v311;
                }
                while (v299 != v1600);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v9)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          v33 = *(void **)a3;
          uint64_t v34 = *a1;
          unsigned int v35 = *(int **)*a1;
          uint64_t v36 = (*(void *)(*a1 + 8) - (void)v35) >> 2;
          int v37 = v36 - 1;
          if ((int)v36 - 1 >= -1) {
            int v37 = -1;
          }
          int v38 = v37 + 1;
          int v39 = v36 + 1;
          break;
      }
      while (1)
      {
        unsigned int v40 = v39 - 2;
        if (v39 - 2 < 0) {
          break;
        }
        --v39;
        if (*(void *)(*(void *)(v34 + 24) + 8 * v40) != *(void *)(v33[3] + 8 * v40)) {
          goto LABEL_85;
        }
      }
      int v39 = v38;
LABEL_85:
      unsigned int v93 = (int **)*a2;
      v94 = *(int **)*a2;
      uint64_t v95 = (*(void *)(*a2 + 8) - (void)v94) >> 2;
      int v96 = v95 - 1;
      if ((int)v95 - 1 >= -1) {
        int v96 = -1;
      }
      int v97 = v96 + 1;
      int v98 = v95 + 1;
      while (1)
      {
        unsigned int v99 = v98 - 2;
        if (v98 - 2 < 0) {
          break;
        }
        --v98;
        if (*(void *)&v93[3][2 * v99] != *(void *)(v33[3] + 8 * v99)) {
          goto LABEL_136;
        }
      }
      int v98 = v97;
LABEL_136:
      int v141 = v36 + 1;
      while (1)
      {
        unsigned int v142 = v141 - 2;
        if (v141 - 2 < 0) {
          break;
        }
        --v141;
        if (*(void *)(*(void *)(v34 + 24) + 8 * v142)) {
          goto LABEL_171;
        }
      }
      int v141 = v38;
LABEL_171:
      int v155 = v95 + 1;
      while (1)
      {
        int v156 = v155 - 2;
        if (v155 - 2 < 0) {
          break;
        }
        --v155;
        if (*(void *)&v93[3][2 * v156]) {
          goto LABEL_242;
        }
      }
      int v155 = v97;
LABEL_242:
      unint64_t v187 = (uint64_t)(v33[1] - *v33) >> 2;
      if (v39 <= v98) {
        int v188 = v98;
      }
      else {
        int v188 = v39;
      }
      if (v39 <= v155) {
        int v39 = v155;
      }
      if (v141 > v98) {
        int v98 = v141;
      }
      if (v187 > v98) {
        int v189 = 1;
      }
      else {
        int v189 = 4;
      }
      if (v187 <= v98) {
        int v98 = (uint64_t)(v33[1] - *v33) >> 2;
      }
      if (v187 <= v39) {
        int v39 = v98;
      }
      else {
        int v189 = 2;
      }
      if (v187 <= v188)
      {
        int v190 = v39;
      }
      else
      {
        int v189 = 3;
        int v190 = v188;
      }
      if (!v190) {
        goto LABEL_271;
      }
      unint64_t v191 = *(void *)(v33[3] + 8 * (v190 - 1));
      if (v191 < 0x10) {
        goto LABEL_271;
      }
      switch(v189)
      {
        case 1:
          if (v190 == 2)
          {
            int v1192 = *v35;
            if (*v35)
            {
              unint64_t v1193 = 0;
              uint64_t v1194 = 0;
              uint64_t v1195 = 0;
              uint64_t v1196 = *(void *)(v34 + 152);
              unsigned int v1197 = v93[19];
              vDSP_Length v1198 = (int)v191;
              unint64_t v1199 = (float *)v33[19];
              do
              {
                if (v35[1])
                {
                  unint64_t v1200 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1197 + v1194), 1, (const float *)(v1196 + v1195), v1199, 1, v1198);
                    uint64_t v34 = *a1;
                    uint64_t v1201 = *(void **)(*a1 + 24);
                    uint64_t v1202 = v1201[1];
                    v1195 += v1202;
                    unsigned int v93 = (int **)*a2;
                    uint64_t v1203 = *(int **)(*a2 + 24);
                    uint64_t v1204 = *((void *)v1203 + 1);
                    v1194 += v1204;
                    unint64_t v1199 = (float *)((char *)v1199 + v1198);
                    ++v1200;
                    unsigned int v35 = *(int **)*a1;
                    unint64_t v1205 = v35[1];
                  }
                  while (v1200 < v1205);
                  int v1192 = *v35;
                  v94 = *v93;
                }
                else
                {
                  unint64_t v1205 = 0;
                  uint64_t v1201 = *(void **)(v34 + 24);
                  uint64_t v1202 = v1201[1];
                  uint64_t v1203 = v93[3];
                  uint64_t v1204 = *((void *)v1203 + 1);
                }
                uint64_t v1195 = *v1201 + v1195 - v1205 * v1202;
                uint64_t v1194 = *(void *)v1203 + v1194 - v1204 * v94[1];
                ++v1193;
              }
              while (v1193 < v1192);
            }
          }
          else if (v190 == 1)
          {
            if (*v35)
            {
              unint64_t v851 = 0;
              uint64_t v852 = 0;
              uint64_t v853 = 0;
              uint64_t v854 = *(void *)(v34 + 152);
              uint64_t v855 = v93[19];
              vDSP_Length v856 = (int)v191;
              uint64_t v857 = (float *)v33[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v855 + v852), 1, (const float *)(v854 + v853), v857, 1, v856);
                v853 += **(void **)(*a1 + 24);
                v852 += **(void **)(*a2 + 24);
                uint64_t v857 = (float *)((char *)v857 + v856);
                ++v851;
              }
              while (v851 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            unint64_t v1206 = 0;
            uint64_t v1626 = v93[19];
            uint64_t v1672 = *(void *)(v34 + 152);
            vDSP_Length v1580 = (int)v191;
            uint64_t v1207 = (float *)v33[19];
            do
            {
              uint64_t v1208 = *(void *)*a1;
              unint64_t v1209 = (unint64_t)(*(void *)(*a1 + 8) - v1208) >> 2;
              uint64_t v1210 = 0;
              uint64_t v1211 = (v1209 - 1);
              if ((int)v1209 - 1 >= 0)
              {
                uint64_t v1212 = *(void *)(*a1 + 24);
                int v1213 = v1206;
                do
                {
                  ldiv_t v1214 = ldiv(v1213, *(int *)(v1208 + 4 * v1211));
                  int v1213 = v1214.quot;
                  v1210 += *(void *)(v1212 + 8 * v1211--) * v1214.rem;
                }
                while (v1211 != -1);
              }
              uint64_t v1215 = *(void *)*a2;
              unint64_t v1216 = (unint64_t)(*(void *)(*a2 + 8) - v1215) >> 2;
              uint64_t v1217 = 0;
              uint64_t v1218 = (v1216 - 1);
              if ((int)v1216 - 1 >= 0)
              {
                uint64_t v1219 = *(void *)(*a2 + 24);
                int v1220 = v1206;
                do
                {
                  ldiv_t v1221 = ldiv(v1220, *(int *)(v1215 + 4 * v1218));
                  int v1220 = v1221.quot;
                  v1217 += *(void *)(v1219 + 8 * v1218--) * v1221.rem;
                }
                while (v1218 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1626 + (int)v1217), 1, (const float *)(v1672 + (int)v1210), v1207, 1, v1580);
              uint64_t v1207 = (float *)((char *)v1207 + v1580);
              v1206 += v1580;
            }
            while (v1206 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v190 == 2)
          {
            int v1222 = *v35;
            if (*v35)
            {
              unint64_t v1223 = 0;
              uint64_t v1224 = 0;
              uint64_t v1225 = 0;
              uint64_t v1226 = *(void *)(v34 + 152);
              uint64_t v1227 = v93[19];
              vDSP_Length v1228 = (int)v191;
              ldiv_t v1229 = (float *)v33[19];
              do
              {
                if (v35[1])
                {
                  unint64_t v1230 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1226 + v1225), 1, (const float *)((char *)v1227 + v1224), v1229, 1, v1228);
                    uint64_t v34 = *a1;
                    unsigned int v1231 = *(void **)(*a1 + 24);
                    uint64_t v1232 = v1231[1];
                    v1225 += v1232;
                    unsigned int v93 = (int **)*a2;
                    uint64_t v1233 = *(int **)(*a2 + 24);
                    uint64_t v1234 = *((void *)v1233 + 1);
                    v1224 += v1234;
                    ldiv_t v1229 = (float *)((char *)v1229 + v1228);
                    ++v1230;
                    unsigned int v35 = *(int **)*a1;
                    unint64_t v1235 = v35[1];
                  }
                  while (v1230 < v1235);
                  int v1222 = *v35;
                  v94 = *v93;
                }
                else
                {
                  unint64_t v1235 = 0;
                  unsigned int v1231 = *(void **)(v34 + 24);
                  uint64_t v1232 = v1231[1];
                  uint64_t v1233 = v93[3];
                  uint64_t v1234 = *((void *)v1233 + 1);
                }
                uint64_t v1225 = *v1231 + v1225 - v1235 * v1232;
                uint64_t v1224 = *(void *)v1233 + v1224 - v1234 * v94[1];
                ++v1223;
              }
              while (v1223 < v1222);
            }
          }
          else if (v190 == 1)
          {
            if (*v35)
            {
              unint64_t v858 = 0;
              uint64_t v859 = 0;
              uint64_t v860 = 0;
              uint64_t v861 = *(void *)(v34 + 152);
              uint64_t v862 = v93[19];
              vDSP_Length v863 = (int)v191;
              int v864 = (float *)v33[19];
              do
              {
                vDSP_vsmul((const float *)(v861 + v860), 1, (const float *)((char *)v862 + v859), v864, 1, v863);
                v860 += **(void **)(*a1 + 24);
                v859 += **(void **)(*a2 + 24);
                int v864 = (float *)((char *)v864 + v863);
                ++v858;
              }
              while (v858 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            unint64_t v1236 = 0;
            uint64_t v1627 = v93[19];
            uint64_t v1673 = *(void *)(v34 + 152);
            vDSP_Length v1581 = (int)v191;
            uint64_t v1237 = (float *)v33[19];
            do
            {
              uint64_t v1238 = *(void *)*a1;
              unint64_t v1239 = (unint64_t)(*(void *)(*a1 + 8) - v1238) >> 2;
              uint64_t v1240 = 0;
              uint64_t v1241 = (v1239 - 1);
              if ((int)v1239 - 1 >= 0)
              {
                uint64_t v1242 = *(void *)(*a1 + 24);
                int v1243 = v1236;
                do
                {
                  ldiv_t v1244 = ldiv(v1243, *(int *)(v1238 + 4 * v1241));
                  int v1243 = v1244.quot;
                  v1240 += *(void *)(v1242 + 8 * v1241--) * v1244.rem;
                }
                while (v1241 != -1);
              }
              uint64_t v1245 = *(void *)*a2;
              unint64_t v1246 = (unint64_t)(*(void *)(*a2 + 8) - v1245) >> 2;
              uint64_t v1247 = 0;
              uint64_t v1248 = (v1246 - 1);
              if ((int)v1246 - 1 >= 0)
              {
                uint64_t v1249 = *(void *)(*a2 + 24);
                int v1250 = v1236;
                do
                {
                  ldiv_t v1251 = ldiv(v1250, *(int *)(v1245 + 4 * v1248));
                  int v1250 = v1251.quot;
                  v1247 += *(void *)(v1249 + 8 * v1248--) * v1251.rem;
                }
                while (v1248 != -1);
              }
              vDSP_vsmul((const float *)(v1673 + (int)v1240), 1, (const float *)((char *)v1627 + (int)v1247), v1237, 1, v1581);
              uint64_t v1237 = (float *)((char *)v1237 + v1581);
              v1236 += v1581;
            }
            while (v1236 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v190 == 2)
          {
            int v970 = *v35;
            if (*v35)
            {
              unint64_t v971 = 0;
              uint64_t v972 = 0;
              uint64_t v973 = 0;
              uint64_t v974 = *(void *)(v34 + 152);
              uint64_t v975 = v93[19];
              vDSP_Length v976 = (int)v191;
              uint64_t v977 = (float *)v33[19];
              do
              {
                if (v35[1])
                {
                  unint64_t v978 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v974 + v973), 1, (const float *)((char *)v975 + v972), 1, v977, 1, v976);
                    uint64_t v34 = *a1;
                    uint64_t v979 = *(void **)(*a1 + 24);
                    uint64_t v980 = v979[1];
                    v973 += v980;
                    unsigned int v93 = (int **)*a2;
                    unsigned int v981 = *(int **)(*a2 + 24);
                    uint64_t v982 = *((void *)v981 + 1);
                    v972 += v982;
                    uint64_t v977 = (float *)((char *)v977 + v976);
                    ++v978;
                    unsigned int v35 = *(int **)*a1;
                    unint64_t v983 = v35[1];
                  }
                  while (v978 < v983);
                  int v970 = *v35;
                  v94 = *v93;
                }
                else
                {
                  unint64_t v983 = 0;
                  uint64_t v979 = *(void **)(v34 + 24);
                  uint64_t v980 = v979[1];
                  unsigned int v981 = v93[3];
                  uint64_t v982 = *((void *)v981 + 1);
                }
                uint64_t v973 = *v979 + v973 - v983 * v980;
                uint64_t v972 = *(void *)v981 + v972 - v982 * v94[1];
                ++v971;
              }
              while (v971 < v970);
            }
          }
          else if (v190 == 1)
          {
            if (*v35)
            {
              unint64_t v192 = 0;
              uint64_t v193 = 0;
              uint64_t v194 = 0;
              uint64_t v195 = *(void *)(v34 + 152);
              float v196 = v93[19];
              vDSP_Length v197 = (int)v191;
              v198 = (float *)v33[19];
              do
              {
                vDSP_vmul((const float *)(v195 + v194), 1, (const float *)((char *)v196 + v193), 1, v198, 1, v197);
                v194 += **(void **)(*a1 + 24);
                v193 += **(void **)(*a2 + 24);
                v198 = (float *)((char *)v198 + v197);
                ++v192;
              }
              while (v192 < **(int **)*a1);
            }
          }
          else if (v33[6])
          {
            unint64_t v984 = 0;
            int v1612 = v93[19];
            uint64_t v1658 = *(void *)(v34 + 152);
            vDSP_Length v1566 = (int)v191;
            uint64_t v985 = (float *)v33[19];
            do
            {
              uint64_t v986 = *(void *)*a1;
              unint64_t v987 = (unint64_t)(*(void *)(*a1 + 8) - v986) >> 2;
              uint64_t v988 = 0;
              uint64_t v989 = (v987 - 1);
              if ((int)v987 - 1 >= 0)
              {
                uint64_t v990 = *(void *)(*a1 + 24);
                int v991 = v984;
                do
                {
                  ldiv_t v992 = ldiv(v991, *(int *)(v986 + 4 * v989));
                  int v991 = v992.quot;
                  v988 += *(void *)(v990 + 8 * v989--) * v992.rem;
                }
                while (v989 != -1);
              }
              uint64_t v993 = *(void *)*a2;
              unint64_t v994 = (unint64_t)(*(void *)(*a2 + 8) - v993) >> 2;
              uint64_t v995 = 0;
              uint64_t v996 = (v994 - 1);
              if ((int)v994 - 1 >= 0)
              {
                uint64_t v997 = *(void *)(*a2 + 24);
                int v998 = v984;
                do
                {
                  ldiv_t v999 = ldiv(v998, *(int *)(v993 + 4 * v996));
                  int v998 = v999.quot;
                  v995 += *(void *)(v997 + 8 * v996--) * v999.rem;
                }
                while (v996 != -1);
              }
              vDSP_vmul((const float *)(v1658 + (int)v988), 1, (const float *)((char *)v1612 + (int)v995), 1, v985, 1, v1566);
              uint64_t v985 = (float *)((char *)v985 + v1566);
              v984 += v1566;
            }
            while (v984 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_271:
          switch(v187)
          {
            case 1uLL:
              if (v33[6])
              {
                unint64_t v199 = 0;
                uint64_t v200 = 0;
                uint64_t v201 = 0;
                uint64_t v202 = *(void *)(v34 + 152);
                v203 = v93[19];
                uint64_t v204 = v33[19];
                do
                {
                  *(unsigned char *)(v204 + v199) = *((unsigned char *)v203 + v200) * *(unsigned char *)(v202 + v201);
                  v201 += **(void **)(*a1 + 24);
                  v200 += **(void **)(*a2 + 24);
                  ++v199;
                }
                while (v199 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v402 = *v35;
              if (*v35)
              {
                unint64_t v403 = 0;
                uint64_t v404 = 0;
                uint64_t v405 = 0;
                uint64_t v406 = 0;
                uint64_t v407 = *(void *)(v34 + 152);
                int v408 = v93[19];
                uint64_t v409 = v33[19];
                do
                {
                  if (v35[1])
                  {
                    unint64_t v410 = 0;
                    do
                    {
                      *(unsigned char *)(v409 + v404 + v410) = *((unsigned char *)v408 + v405) * *(unsigned char *)(v407 + v406);
                      uint64_t v34 = *a1;
                      uint64_t v411 = *(void **)(*a1 + 24);
                      uint64_t v412 = v411[1];
                      v406 += v412;
                      unsigned int v93 = (int **)*a2;
                      uint64_t v413 = *(int **)(*a2 + 24);
                      uint64_t v414 = *((void *)v413 + 1);
                      v405 += v414;
                      ++v410;
                      unsigned int v35 = *(int **)*a1;
                      unint64_t v415 = v35[1];
                    }
                    while (v410 < v415);
                    int v402 = *v35;
                    v94 = *v93;
                    v404 += v410;
                  }
                  else
                  {
                    unint64_t v415 = 0;
                    uint64_t v411 = *(void **)(v34 + 24);
                    uint64_t v412 = v411[1];
                    uint64_t v413 = v93[3];
                    uint64_t v414 = *((void *)v413 + 1);
                  }
                  uint64_t v406 = *v411 + v406 - v415 * v412;
                  uint64_t v405 = *(void *)v413 + v405 - v414 * v94[1];
                  ++v403;
                }
                while (v403 < v402);
              }
              break;
            case 3uLL:
              int v416 = *v35;
              if (*v35)
              {
                unint64_t v417 = 0;
                uint64_t v418 = 0;
                uint64_t v419 = 0;
                uint64_t v420 = 0;
                uint64_t v421 = *(void *)(v34 + 152);
                v422 = v93[19];
                uint64_t v423 = v33[19];
                do
                {
                  if (v35[1])
                  {
                    unint64_t v424 = 0;
                    do
                    {
                      if (v35[2])
                      {
                        unint64_t v425 = 0;
                        do
                        {
                          *(unsigned char *)(v423 + v418 + v425) = *((unsigned char *)v422 + v419) * *(unsigned char *)(v421 + v420);
                          uint64_t v34 = *a1;
                          uint64_t v426 = *(void **)(*a1 + 24);
                          uint64_t v427 = v426[2];
                          v420 += v427;
                          unsigned int v93 = (int **)*a2;
                          uint64_t v428 = *(int **)(*a2 + 24);
                          uint64_t v429 = *((void *)v428 + 2);
                          v419 += v429;
                          ++v425;
                          unsigned int v35 = *(int **)*a1;
                          unint64_t v430 = v35[2];
                        }
                        while (v425 < v430);
                        v94 = *v93;
                        v418 += v425;
                      }
                      else
                      {
                        unint64_t v430 = 0;
                        uint64_t v426 = *(void **)(v34 + 24);
                        uint64_t v427 = v426[2];
                        uint64_t v428 = v93[3];
                        uint64_t v429 = *((void *)v428 + 2);
                      }
                      uint64_t v431 = v426[1];
                      uint64_t v420 = v431 + v420 - v430 * v427;
                      uint64_t v419 = *((void *)v428 + 1) + v419 - v429 * v94[2];
                      ++v424;
                      unint64_t v432 = v35[1];
                    }
                    while (v424 < v432);
                    int v416 = *v35;
                  }
                  else
                  {
                    unint64_t v432 = 0;
                    uint64_t v426 = *(void **)(v34 + 24);
                    uint64_t v431 = v426[1];
                  }
                  uint64_t v420 = *v426 + v420 - v432 * v431;
                  uint64_t v419 = *(void *)v93[3] + v419 - *((void *)v93[3] + 1) * v94[1];
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            case 4uLL:
              int v433 = *v35;
              if (*v35)
              {
                unint64_t v434 = 0;
                uint64_t v435 = 0;
                uint64_t v436 = 0;
                uint64_t v437 = 0;
                uint64_t v438 = *(void *)(v34 + 152);
                uint64_t v439 = v93[19];
                uint64_t v440 = v33[19];
                do
                {
                  if (v35[1])
                  {
                    unint64_t v441 = 0;
                    do
                    {
                      if (v35[2])
                      {
                        unint64_t v442 = 0;
                        do
                        {
                          if (v35[3])
                          {
                            unint64_t v443 = 0;
                            do
                            {
                              *(unsigned char *)(v440 + v435 + v443) = *((unsigned char *)v439 + v436) * *(unsigned char *)(v438 + v437);
                              uint64_t v34 = *a1;
                              uint64_t v444 = *(void **)(*a1 + 24);
                              uint64_t v445 = v444[3];
                              v437 += v445;
                              unsigned int v93 = (int **)*a2;
                              uint64_t v446 = *(int **)(*a2 + 24);
                              uint64_t v447 = *((void *)v446 + 3);
                              v436 += v447;
                              ++v443;
                              unsigned int v35 = *(int **)*a1;
                              unint64_t v448 = v35[3];
                            }
                            while (v443 < v448);
                            v94 = *v93;
                            v435 += v443;
                          }
                          else
                          {
                            unint64_t v448 = 0;
                            uint64_t v444 = *(void **)(v34 + 24);
                            uint64_t v445 = v444[3];
                            uint64_t v446 = v93[3];
                            uint64_t v447 = *((void *)v446 + 3);
                          }
                          uint64_t v449 = v444[2];
                          uint64_t v437 = v449 + v437 - v448 * v445;
                          uint64_t v436 = *((void *)v446 + 2) + v436 - v447 * v94[3];
                          ++v442;
                          unint64_t v450 = v35[2];
                        }
                        while (v442 < v450);
                      }
                      else
                      {
                        unint64_t v450 = 0;
                        uint64_t v444 = *(void **)(v34 + 24);
                        uint64_t v449 = v444[2];
                      }
                      uint64_t v437 = v444[1] + v437 - v450 * v449;
                      uint64_t v436 = *((void *)v93[3] + 1) + v436 - *((void *)v93[3] + 2) * v94[2];
                      ++v441;
                      unint64_t v451 = v35[1];
                    }
                    while (v441 < v451);
                    int v433 = *v35;
                  }
                  else
                  {
                    unint64_t v451 = 0;
                  }
                  uint64_t v437 = **(void **)(v34 + 24) + v437 - *(void *)(*(void *)(v34 + 24) + 8) * v451;
                  uint64_t v436 = *(void *)v93[3] + v436 - *((void *)v93[3] + 1) * v94[1];
                  ++v434;
                }
                while (v434 < v433);
              }
              break;
            default:
              if (v33[6])
              {
                unint64_t v386 = 0;
                uint64_t v1602 = v93[19];
                uint64_t v1648 = *(void *)(v34 + 152);
                uint64_t v387 = v33[19];
                do
                {
                  uint64_t v388 = *(void *)*a1;
                  unint64_t v389 = (unint64_t)(*(void *)(*a1 + 8) - v388) >> 2;
                  uint64_t v390 = 0;
                  uint64_t v391 = (v389 - 1);
                  if ((int)v389 - 1 >= 0)
                  {
                    uint64_t v392 = *(void *)(*a1 + 24);
                    int v393 = v386;
                    do
                    {
                      ldiv_t v394 = ldiv(v393, *(int *)(v388 + 4 * v391));
                      int v393 = v394.quot;
                      v390 += *(void *)(v392 + 8 * v391--) * v394.rem;
                    }
                    while (v391 != -1);
                  }
                  uint64_t v395 = *(void *)*a2;
                  unint64_t v396 = (unint64_t)(*(void *)(*a2 + 8) - v395) >> 2;
                  uint64_t v397 = 0;
                  uint64_t v398 = (v396 - 1);
                  if ((int)v396 - 1 >= 0)
                  {
                    uint64_t v399 = *(void *)(*a2 + 24);
                    int v400 = v386;
                    do
                    {
                      ldiv_t v401 = ldiv(v400, *(int *)(v395 + 4 * v398));
                      int v400 = v401.quot;
                      v397 += *(void *)(v399 + 8 * v398--) * v401.rem;
                    }
                    while (v398 != -1);
                  }
                  *(unsigned char *)(v387 + v386++) = *((unsigned char *)v1602 + (int)v397) * *(unsigned char *)(v1648 + (int)v390);
                }
                while (v386 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v10)
      {
        case 0:
          goto LABEL_15;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          int v41 = *(void **)a3;
          uint64_t v42 = *a1;
          int v43 = *(int **)*a1;
          uint64_t v44 = (*(void *)(*a1 + 8) - (void)v43) >> 2;
          uint64_t v45 = (v44 - 1);
          if ((int)v45 >= -1) {
            int v46 = -1;
          }
          else {
            int v46 = v44 - 1;
          }
          int v47 = v46 + 1;
          int v48 = v44 + 1;
          break;
      }
      while (1)
      {
        unsigned int v49 = v48 - 2;
        if (v48 - 2 < 0) {
          break;
        }
        --v48;
        if (*(void *)(*(void *)(v42 + 24) + 8 * v49) != *(void *)(v41[3] + 8 * v49)) {
          goto LABEL_92;
        }
      }
      int v48 = v47;
LABEL_92:
      int v100 = (int **)*a2;
      unsigned int v101 = *(int **)*a2;
      uint64_t v102 = (*(void *)(*a2 + 8) - (void)v101) >> 2;
      uint64_t v103 = (v102 - 1);
      if ((int)v103 >= -1) {
        int v104 = -1;
      }
      else {
        int v104 = v102 - 1;
      }
      int v105 = v104 + 1;
      int v106 = v102 + 1;
      while (1)
      {
        unsigned int v107 = v106 - 2;
        if (v106 - 2 < 0) {
          break;
        }
        --v106;
        if (*(void *)&v100[3][2 * v107] != *(void *)(v41[3] + 8 * v107)) {
          goto LABEL_141;
        }
      }
      int v106 = v105;
LABEL_141:
      int v143 = v44 + 1;
      while (1)
      {
        unsigned int v144 = v143 - 2;
        if (v143 - 2 < 0) {
          break;
        }
        --v143;
        if (*(void *)(*(void *)(v42 + 24) + 8 * v144)) {
          goto LABEL_176;
        }
      }
      int v143 = v47;
LABEL_176:
      int v157 = v102 + 1;
      while (1)
      {
        int v158 = v157 - 2;
        if (v157 - 2 < 0) {
          break;
        }
        --v157;
        if (*(void *)&v100[3][2 * v158]) {
          goto LABEL_277;
        }
      }
      int v157 = v105;
LABEL_277:
      unint64_t v205 = (uint64_t)(v41[1] - *v41) >> 2;
      if (v48 <= v106) {
        int v206 = v106;
      }
      else {
        int v206 = v48;
      }
      if (v48 <= v157) {
        int v48 = v157;
      }
      if (v143 > v106) {
        int v106 = v143;
      }
      if (v205 > v106) {
        int v207 = 1;
      }
      else {
        int v207 = 4;
      }
      if (v205 <= v106) {
        int v106 = (uint64_t)(v41[1] - *v41) >> 2;
      }
      if (v205 <= v48) {
        int v48 = v106;
      }
      else {
        int v207 = 2;
      }
      if (v205 <= v206)
      {
        int v208 = v48;
      }
      else
      {
        int v207 = 3;
        int v208 = v206;
      }
      if (!v208) {
        goto LABEL_306;
      }
      unint64_t v209 = *(void *)(v41[3] + 8 * (v208 - 1));
      if (v209 < 0x10) {
        goto LABEL_306;
      }
      switch(v207)
      {
        case 1:
          if (v208 == 2)
          {
            int v1252 = *v43;
            if (*v43)
            {
              uint64_t v1253 = 0;
              uint64_t v1254 = 0;
              uint64_t v1674 = *(void *)(v42 + 152);
              uint64_t v1628 = v100[19];
              uint64_t v1255 = (float *)v41[19];
              unint64_t v1548 = 0;
              vDSP_Length v1582 = (int)v209;
              uint64_t v1256 = 4 * (int)v209;
              do
              {
                if (v43[1])
                {
                  unint64_t v1257 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1628[v1253], 1, (const float *)(v1674 + 4 * v1254), v1255, 1, v1582);
                    uint64_t v42 = *a1;
                    int v1258 = *(void **)(*a1 + 24);
                    uint64_t v1259 = v1258[1];
                    v1254 += v1259;
                    int v100 = (int **)*a2;
                    uint64_t v1260 = *(int **)(*a2 + 24);
                    uint64_t v1261 = *((void *)v1260 + 1);
                    v1253 += v1261;
                    ++v1257;
                    int v43 = *(int **)*a1;
                    unint64_t v1262 = v43[1];
                    uint64_t v1255 = (float *)((char *)v1255 + v1256);
                  }
                  while (v1257 < v1262);
                  int v1252 = *v43;
                  unsigned int v101 = *v100;
                }
                else
                {
                  unint64_t v1262 = 0;
                  int v1258 = *(void **)(v42 + 24);
                  uint64_t v1259 = v1258[1];
                  uint64_t v1260 = v100[3];
                  uint64_t v1261 = *((void *)v1260 + 1);
                }
                uint64_t v1254 = *v1258 + v1254 - v1262 * v1259;
                uint64_t v1253 = *(void *)v1260 + v1253 - v1261 * v101[1];
                ++v1548;
              }
              while (v1548 < v1252);
            }
          }
          else if (v208 == 1)
          {
            if (*v43)
            {
              unint64_t v865 = 0;
              uint64_t v866 = 0;
              uint64_t v867 = 0;
              uint64_t v868 = *(void *)(v42 + 152);
              int v869 = v100[19];
              vDSP_Length v870 = (int)v209;
              uint64_t v871 = 4 * (int)v209;
              uint64_t v872 = (float *)v41[19];
              do
              {
                vDSP_vsmul((const float *)&v869[v866], 1, (const float *)(v868 + 4 * v867), v872, 1, v870);
                v867 += **(void **)(*a1 + 24);
                v866 += **(void **)(*a2 + 24);
                ++v865;
                uint64_t v872 = (float *)((char *)v872 + v871);
              }
              while (v865 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            unint64_t v1263 = 0;
            uint64_t v1629 = v100[19];
            uint64_t v1675 = *(void *)(v42 + 152);
            vDSP_Length v1583 = (int)v209;
            ldiv_t v1264 = (float *)v41[19];
            do
            {
              uint64_t v1265 = *(void *)*a1;
              unint64_t v1266 = (unint64_t)(*(void *)(*a1 + 8) - v1265) >> 2;
              uint64_t v1267 = 0;
              uint64_t v1268 = (v1266 - 1);
              if ((int)v1266 - 1 >= 0)
              {
                uint64_t v1269 = *(void *)(*a1 + 24);
                int v1270 = v1263;
                do
                {
                  ldiv_t v1271 = ldiv(v1270, *(int *)(v1265 + 4 * v1268));
                  int v1270 = v1271.quot;
                  v1267 += *(void *)(v1269 + 8 * v1268--) * v1271.rem;
                }
                while (v1268 != -1);
              }
              uint64_t v1272 = *(void *)*a2;
              unint64_t v1273 = (unint64_t)(*(void *)(*a2 + 8) - v1272) >> 2;
              uint64_t v1274 = 0;
              uint64_t v1275 = (v1273 - 1);
              if ((int)v1273 - 1 >= 0)
              {
                uint64_t v1276 = *(void *)(*a2 + 24);
                int v1277 = v1263;
                do
                {
                  ldiv_t v1278 = ldiv(v1277, *(int *)(v1272 + 4 * v1275));
                  int v1277 = v1278.quot;
                  v1274 += *(void *)(v1276 + 8 * v1275--) * v1278.rem;
                }
                while (v1275 != -1);
              }
              vDSP_vsmul((const float *)&v1629[(int)v1274], 1, (const float *)(v1675 + 4 * (int)v1267), v1264, 1, v1583);
              v1264 += v1583;
              v1263 += v1583;
            }
            while (v1263 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v208 == 2)
          {
            int v1279 = *v43;
            if (*v43)
            {
              uint64_t v1280 = 0;
              uint64_t v1281 = 0;
              uint64_t v1676 = *(void *)(v42 + 152);
              uint64_t v1630 = v100[19];
              uint64_t v1282 = (float *)v41[19];
              unint64_t v1549 = 0;
              vDSP_Length v1584 = (int)v209;
              uint64_t v1283 = 4 * (int)v209;
              do
              {
                if (v43[1])
                {
                  unint64_t v1284 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1676 + 4 * v1281), 1, (const float *)&v1630[v1280], v1282, 1, v1584);
                    uint64_t v42 = *a1;
                    uint64_t v1285 = *(void **)(*a1 + 24);
                    uint64_t v1286 = v1285[1];
                    v1281 += v1286;
                    int v100 = (int **)*a2;
                    uint64_t v1287 = *(int **)(*a2 + 24);
                    uint64_t v1288 = *((void *)v1287 + 1);
                    v1280 += v1288;
                    ++v1284;
                    int v43 = *(int **)*a1;
                    unint64_t v1289 = v43[1];
                    uint64_t v1282 = (float *)((char *)v1282 + v1283);
                  }
                  while (v1284 < v1289);
                  int v1279 = *v43;
                  unsigned int v101 = *v100;
                }
                else
                {
                  unint64_t v1289 = 0;
                  uint64_t v1285 = *(void **)(v42 + 24);
                  uint64_t v1286 = v1285[1];
                  uint64_t v1287 = v100[3];
                  uint64_t v1288 = *((void *)v1287 + 1);
                }
                uint64_t v1281 = *v1285 + v1281 - v1289 * v1286;
                uint64_t v1280 = *(void *)v1287 + v1280 - v1288 * v101[1];
                ++v1549;
              }
              while (v1549 < v1279);
            }
          }
          else if (v208 == 1)
          {
            if (*v43)
            {
              unint64_t v873 = 0;
              uint64_t v874 = 0;
              uint64_t v875 = 0;
              uint64_t v876 = *(void *)(v42 + 152);
              uint64_t v877 = v100[19];
              vDSP_Length v878 = (int)v209;
              uint64_t v879 = 4 * (int)v209;
              v880 = (float *)v41[19];
              do
              {
                vDSP_vsmul((const float *)(v876 + 4 * v875), 1, (const float *)&v877[v874], v880, 1, v878);
                v875 += **(void **)(*a1 + 24);
                v874 += **(void **)(*a2 + 24);
                ++v873;
                v880 = (float *)((char *)v880 + v879);
              }
              while (v873 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            unint64_t v1290 = 0;
            uint64_t v1631 = v100[19];
            uint64_t v1677 = *(void *)(v42 + 152);
            vDSP_Length v1585 = (int)v209;
            uint64_t v1291 = (float *)v41[19];
            do
            {
              uint64_t v1292 = *(void *)*a1;
              unint64_t v1293 = (unint64_t)(*(void *)(*a1 + 8) - v1292) >> 2;
              uint64_t v1294 = 0;
              uint64_t v1295 = (v1293 - 1);
              if ((int)v1293 - 1 >= 0)
              {
                uint64_t v1296 = *(void *)(*a1 + 24);
                int v1297 = v1290;
                do
                {
                  ldiv_t v1298 = ldiv(v1297, *(int *)(v1292 + 4 * v1295));
                  int v1297 = v1298.quot;
                  v1294 += *(void *)(v1296 + 8 * v1295--) * v1298.rem;
                }
                while (v1295 != -1);
              }
              uint64_t v1299 = *(void *)*a2;
              unint64_t v1300 = (unint64_t)(*(void *)(*a2 + 8) - v1299) >> 2;
              uint64_t v1301 = 0;
              uint64_t v1302 = (v1300 - 1);
              if ((int)v1300 - 1 >= 0)
              {
                uint64_t v1303 = *(void *)(*a2 + 24);
                int v1304 = v1290;
                do
                {
                  ldiv_t v1305 = ldiv(v1304, *(int *)(v1299 + 4 * v1302));
                  int v1304 = v1305.quot;
                  v1301 += *(void *)(v1303 + 8 * v1302--) * v1305.rem;
                }
                while (v1302 != -1);
              }
              vDSP_vsmul((const float *)(v1677 + 4 * (int)v1294), 1, (const float *)&v1631[(int)v1301], v1291, 1, v1585);
              v1291 += v1585;
              v1290 += v1585;
            }
            while (v1290 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v208 == 2)
          {
            int v1000 = *v43;
            if (*v43)
            {
              uint64_t v1001 = 0;
              uint64_t v1002 = 0;
              uint64_t v1659 = *(void *)(v42 + 152);
              unsigned int v1613 = v100[19];
              int v1003 = (float *)v41[19];
              unint64_t v1544 = 0;
              vDSP_Length v1567 = (int)v209;
              uint64_t v1004 = 4 * (int)v209;
              do
              {
                if (v43[1])
                {
                  unint64_t v1005 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1659 + 4 * v1002), 1, (const float *)&v1613[v1001], 1, v1003, 1, v1567);
                    uint64_t v42 = *a1;
                    uint64_t v1006 = *(void **)(*a1 + 24);
                    uint64_t v1007 = v1006[1];
                    v1002 += v1007;
                    int v100 = (int **)*a2;
                    v1008 = *(int **)(*a2 + 24);
                    uint64_t v1009 = *((void *)v1008 + 1);
                    v1001 += v1009;
                    ++v1005;
                    int v43 = *(int **)*a1;
                    unint64_t v1010 = v43[1];
                    int v1003 = (float *)((char *)v1003 + v1004);
                  }
                  while (v1005 < v1010);
                  int v1000 = *v43;
                  unsigned int v101 = *v100;
                }
                else
                {
                  unint64_t v1010 = 0;
                  uint64_t v1006 = *(void **)(v42 + 24);
                  uint64_t v1007 = v1006[1];
                  v1008 = v100[3];
                  uint64_t v1009 = *((void *)v1008 + 1);
                }
                uint64_t v1002 = *v1006 + v1002 - v1010 * v1007;
                uint64_t v1001 = *(void *)v1008 + v1001 - v1009 * v101[1];
                ++v1544;
              }
              while (v1544 < v1000);
            }
          }
          else if (v208 == 1)
          {
            if (*v43)
            {
              unint64_t v210 = 0;
              uint64_t v211 = 0;
              uint64_t v212 = 0;
              uint64_t v213 = *(void *)(v42 + 152);
              unsigned int v214 = v100[19];
              vDSP_Length v215 = (int)v209;
              uint64_t v216 = 4 * (int)v209;
              uint64_t v217 = (float *)v41[19];
              do
              {
                vDSP_vmul((const float *)(v213 + 4 * v212), 1, (const float *)&v214[v211], 1, v217, 1, v215);
                v212 += **(void **)(*a1 + 24);
                v211 += **(void **)(*a2 + 24);
                ++v210;
                uint64_t v217 = (float *)((char *)v217 + v216);
              }
              while (v210 < **(int **)*a1);
            }
          }
          else if (v41[6])
          {
            unint64_t v1011 = 0;
            uint64_t v1614 = v100[19];
            uint64_t v1660 = *(void *)(v42 + 152);
            vDSP_Length v1568 = (int)v209;
            unsigned int v1012 = (float *)v41[19];
            do
            {
              uint64_t v1013 = *(void *)*a1;
              unint64_t v1014 = (unint64_t)(*(void *)(*a1 + 8) - v1013) >> 2;
              uint64_t v1015 = 0;
              uint64_t v1016 = (v1014 - 1);
              if ((int)v1014 - 1 >= 0)
              {
                uint64_t v1017 = *(void *)(*a1 + 24);
                int v1018 = v1011;
                do
                {
                  ldiv_t v1019 = ldiv(v1018, *(int *)(v1013 + 4 * v1016));
                  int v1018 = v1019.quot;
                  v1015 += *(void *)(v1017 + 8 * v1016--) * v1019.rem;
                }
                while (v1016 != -1);
              }
              uint64_t v1020 = *(void *)*a2;
              unint64_t v1021 = (unint64_t)(*(void *)(*a2 + 8) - v1020) >> 2;
              uint64_t v1022 = 0;
              uint64_t v1023 = (v1021 - 1);
              if ((int)v1021 - 1 >= 0)
              {
                uint64_t v1024 = *(void *)(*a2 + 24);
                int v1025 = v1011;
                do
                {
                  ldiv_t v1026 = ldiv(v1025, *(int *)(v1020 + 4 * v1023));
                  int v1025 = v1026.quot;
                  v1022 += *(void *)(v1024 + 8 * v1023--) * v1026.rem;
                }
                while (v1023 != -1);
              }
              vDSP_vmul((const float *)(v1660 + 4 * (int)v1015), 1, (const float *)&v1614[(int)v1022], 1, v1012, 1, v1568);
              v1012 += v1568;
              v1011 += v1568;
            }
            while (v1011 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_306:
          switch(v205)
          {
            case 1uLL:
              uint64_t v218 = v41[6];
              if (v218)
              {
                int v219 = *(_DWORD **)(v42 + 152);
                int v220 = v100[19];
                unsigned int v221 = (_DWORD *)v41[19];
                uint64_t v222 = 4 * *(void *)v100[3];
                uint64_t v223 = 4 * **(void **)(v42 + 24);
                do
                {
                  *v221++ = *v220 * *v219;
                  int v220 = (int *)((char *)v220 + v222);
                  int v219 = (_DWORD *)((char *)v219 + v223);
                  --v218;
                }
                while (v218);
              }
              break;
            case 2uLL:
              int v463 = *v43;
              if (*v43)
              {
                unint64_t v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = *(void *)(v42 + 152);
                uint64_t v469 = v100[19];
                uint64_t v470 = v41[19];
                unint64_t v471 = *(uint64_t **)(v42 + 24);
                uint64_t v472 = *v471;
                uint64_t v473 = v471[1];
                uint64_t v474 = v100[3];
                uint64_t v476 = *(void *)v474;
                uint64_t v475 = *((void *)v474 + 1);
                int v477 = v43[1];
                do
                {
                  if (v477)
                  {
                    for (unint64_t i = 0; i < v477; ++i)
                    {
                      *(_DWORD *)(v470 + 4 * v465 + 4 * i) = v469[v466] * *(_DWORD *)(v468 + 4 * v467);
                      v467 += v473;
                      v466 += v475;
                      int v477 = v43[1];
                    }
                    uint64_t v479 = v477;
                    int v463 = *v43;
                    v465 += i;
                  }
                  else
                  {
                    uint64_t v479 = 0;
                  }
                  uint64_t v467 = v467 + v472 - v479 * v473;
                  uint64_t v466 = v466 + v476 - v475 * v101[1];
                  ++v464;
                }
                while (v464 < v463);
              }
              break;
            case 3uLL:
              int v480 = *v43;
              if (*v43)
              {
                unint64_t v481 = 0;
                uint64_t v482 = 0;
                uint64_t v483 = 0;
                uint64_t v484 = 0;
                uint64_t v485 = *(void *)(v42 + 152);
                uint64_t v486 = v100[19];
                uint64_t v487 = v41[19];
                unint64_t v488 = *(uint64_t **)(v42 + 24);
                uint64_t v489 = *v488;
                uint64_t v490 = v488[1];
                uint64_t v491 = v100[3];
                uint64_t v492 = *(void *)v491;
                uint64_t v493 = *((void *)v491 + 1);
                int v494 = v43[1];
                int v495 = v494;
                do
                {
                  if (v495)
                  {
                    unint64_t v496 = 0;
                    uint64_t v497 = v488[2];
                    uint64_t v498 = *((void *)v491 + 2);
                    int v499 = v43[2];
                    do
                    {
                      if (v499)
                      {
                        for (unint64_t j = 0; j < v499; ++j)
                        {
                          *(_DWORD *)(v487 + 4 * v482 + 4 * j) = v486[v483] * *(_DWORD *)(v485 + 4 * v484);
                          v484 += v497;
                          v483 += v498;
                          int v499 = v43[2];
                        }
                        uint64_t v501 = v499;
                        int v494 = v43[1];
                        v482 += j;
                      }
                      else
                      {
                        uint64_t v501 = 0;
                      }
                      uint64_t v484 = v484 + v490 - v501 * v497;
                      uint64_t v483 = v483 + v493 - v498 * v101[2];
                      ++v496;
                    }
                    while (v496 < v494);
                    uint64_t v502 = v494;
                    int v480 = *v43;
                    int v495 = v494;
                  }
                  else
                  {
                    uint64_t v502 = 0;
                  }
                  uint64_t v484 = v484 + v489 - v502 * v490;
                  uint64_t v483 = v483 + v492 - v493 * v101[1];
                  ++v481;
                }
                while (v481 < v480);
              }
              break;
            case 4uLL:
              int v503 = *v43;
              if (*v43)
              {
                unint64_t v504 = 0;
                uint64_t v505 = 0;
                uint64_t v506 = 0;
                uint64_t v507 = 0;
                uint64_t v508 = *(void *)(v42 + 152);
                unint64_t v509 = v100[19];
                uint64_t v510 = v41[19];
                uint64_t v511 = *(uint64_t **)(v42 + 24);
                uint64_t v512 = *v511;
                uint64_t v513 = v511[1];
                unint64_t v514 = v100[3];
                uint64_t v515 = *(void *)v514;
                uint64_t v516 = *((void *)v514 + 1);
                int v517 = v43[1];
                int v518 = v517;
                do
                {
                  if (v518)
                  {
                    unint64_t v519 = 0;
                    uint64_t v520 = v511[2];
                    uint64_t v521 = *((void *)v514 + 2);
                    int v522 = v43[2];
                    int v523 = v522;
                    do
                    {
                      if (v523)
                      {
                        unint64_t v524 = 0;
                        uint64_t v525 = v511[3];
                        uint64_t v526 = *((void *)v514 + 3);
                        int v527 = v43[3];
                        do
                        {
                          if (v527)
                          {
                            for (unint64_t k = 0; k < v527; ++k)
                            {
                              *(_DWORD *)(v510 + 4 * v505 + 4 * k) = v509[v506] * *(_DWORD *)(v508 + 4 * v507);
                              v507 += v525;
                              v506 += v526;
                              int v527 = v43[3];
                            }
                            uint64_t v529 = v527;
                            int v522 = v43[2];
                            v505 += k;
                          }
                          else
                          {
                            uint64_t v529 = 0;
                          }
                          uint64_t v507 = v507 + v520 - v529 * v525;
                          uint64_t v506 = v506 + v521 - v526 * v101[3];
                          ++v524;
                        }
                        while (v524 < v522);
                        uint64_t v530 = v522;
                        int v517 = v43[1];
                        int v523 = v522;
                      }
                      else
                      {
                        uint64_t v530 = 0;
                      }
                      uint64_t v507 = v507 + v513 - v530 * v520;
                      uint64_t v506 = v506 + v516 - v521 * v101[2];
                      ++v519;
                    }
                    while (v519 < v517);
                    uint64_t v531 = v517;
                    int v503 = *v43;
                    int v518 = v517;
                  }
                  else
                  {
                    uint64_t v531 = 0;
                  }
                  uint64_t v507 = v507 + v512 - v531 * v513;
                  uint64_t v506 = v506 + v515 - v516 * v101[1];
                  ++v504;
                }
                while (v504 < v503);
              }
              break;
            default:
              uint64_t v1603 = v41[6];
              uint64_t v1649 = v45;
              if (v1603)
              {
                uint64_t v452 = 0;
                uint64_t v1538 = v100[19];
                uint64_t v1558 = *(void *)(v42 + 152);
                uint64_t v1531 = v41[19];
                do
                {
                  uint64_t v453 = v1649;
                  if ((v1649 & 0x80000000) != 0)
                  {
                    LODWORD(v454) = 0;
                  }
                  else
                  {
                    uint64_t v454 = 0;
                    uint64_t v455 = *(void *)(v42 + 24);
                    int v456 = v452;
                    do
                    {
                      ldiv_t v457 = ldiv(v456, v43[v453]);
                      int v456 = v457.quot;
                      v454 += *(void *)(v455 + 8 * v453--) * v457.rem;
                    }
                    while (v453 != -1);
                  }
                  uint64_t v458 = 0;
                  if ((v103 & 0x80000000) == 0)
                  {
                    unint64_t v459 = v100[3];
                    uint64_t v460 = v103;
                    int v461 = v452;
                    do
                    {
                      ldiv_t v462 = ldiv(v461, v101[v460]);
                      int v461 = v462.quot;
                      v458 += *(void *)&v459[2 * v460--] * v462.rem;
                    }
                    while (v460 != -1);
                  }
                  *(_DWORD *)(v1531 + 4 * v452++) = v1538[(int)v458] * *(_DWORD *)(v1558 + 4 * (int)v454);
                }
                while (v452 != v1603);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v11)
      {
        case 0:
LABEL_12:
          char v8 = **(unsigned char **)(*a2 + 152) * **(unsigned char **)(*a1 + 152);
LABEL_13:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          unsigned int v50 = *(void **)a3;
          uint64_t v51 = *a1;
          unsigned int v52 = *(int **)*a1;
          uint64_t v53 = (*(void *)(*a1 + 8) - (void)v52) >> 2;
          int v54 = v53 - 1;
          if ((int)v53 - 1 >= -1) {
            int v54 = -1;
          }
          int v55 = v54 + 1;
          int v56 = v53 + 1;
          break;
      }
      while (1)
      {
        unsigned int v57 = v56 - 2;
        if (v56 - 2 < 0) {
          break;
        }
        --v56;
        if (*(void *)(*(void *)(v51 + 24) + 8 * v57) != *(void *)(v50[3] + 8 * v57)) {
          goto LABEL_100;
        }
      }
      int v56 = v55;
LABEL_100:
      int v108 = (int **)*a2;
      v109 = *(int **)*a2;
      uint64_t v110 = (*(void *)(*a2 + 8) - (void)v109) >> 2;
      int v111 = v110 - 1;
      if ((int)v110 - 1 >= -1) {
        int v111 = -1;
      }
      int v112 = v111 + 1;
      int v113 = v110 + 1;
      while (1)
      {
        unsigned int v114 = v113 - 2;
        if (v113 - 2 < 0) {
          break;
        }
        --v113;
        if (*(void *)&v108[3][2 * v114] != *(void *)(v50[3] + 8 * v114)) {
          goto LABEL_146;
        }
      }
      int v113 = v112;
LABEL_146:
      int v145 = v53 + 1;
      while (1)
      {
        unsigned int v146 = v145 - 2;
        if (v145 - 2 < 0) {
          break;
        }
        --v145;
        if (*(void *)(*(void *)(v51 + 24) + 8 * v146)) {
          goto LABEL_181;
        }
      }
      int v145 = v55;
LABEL_181:
      int v159 = v110 + 1;
      while (1)
      {
        int v160 = v159 - 2;
        if (v159 - 2 < 0) {
          break;
        }
        --v159;
        if (*(void *)&v108[3][2 * v160]) {
          goto LABEL_312;
        }
      }
      int v159 = v112;
LABEL_312:
      unint64_t v224 = (uint64_t)(v50[1] - *v50) >> 2;
      if (v56 <= v113) {
        int v225 = v113;
      }
      else {
        int v225 = v56;
      }
      if (v56 <= v159) {
        int v56 = v159;
      }
      if (v145 > v113) {
        int v113 = v145;
      }
      if (v224 > v113) {
        int v226 = 1;
      }
      else {
        int v226 = 4;
      }
      if (v224 <= v113) {
        int v113 = (uint64_t)(v50[1] - *v50) >> 2;
      }
      if (v224 <= v56) {
        int v56 = v113;
      }
      else {
        int v226 = 2;
      }
      if (v224 <= v225)
      {
        int v227 = v56;
      }
      else
      {
        int v226 = 3;
        int v227 = v225;
      }
      if (!v227) {
        goto LABEL_341;
      }
      unint64_t v228 = *(void *)(v50[3] + 8 * (v227 - 1));
      if (v228 < 0x10) {
        goto LABEL_341;
      }
      switch(v226)
      {
        case 1:
          if (v227 == 2)
          {
            int v1306 = *v52;
            if (*v52)
            {
              unint64_t v1307 = 0;
              uint64_t v1308 = 0;
              uint64_t v1309 = 0;
              uint64_t v1310 = *(void *)(v51 + 152);
              uint64_t v1311 = v108[19];
              vDSP_Length v1312 = (int)v228;
              unint64_t v1313 = (float *)v50[19];
              do
              {
                if (v52[1])
                {
                  unint64_t v1314 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)((char *)v1311 + v1308), 1, (const float *)(v1310 + v1309), v1313, 1, v1312);
                    uint64_t v51 = *a1;
                    v1315 = *(void **)(*a1 + 24);
                    uint64_t v1316 = v1315[1];
                    v1309 += v1316;
                    int v108 = (int **)*a2;
                    uint64_t v1317 = *(int **)(*a2 + 24);
                    uint64_t v1318 = *((void *)v1317 + 1);
                    v1308 += v1318;
                    unint64_t v1313 = (float *)((char *)v1313 + v1312);
                    ++v1314;
                    unsigned int v52 = *(int **)*a1;
                    unint64_t v1319 = v52[1];
                  }
                  while (v1314 < v1319);
                  int v1306 = *v52;
                  v109 = *v108;
                }
                else
                {
                  unint64_t v1319 = 0;
                  v1315 = *(void **)(v51 + 24);
                  uint64_t v1316 = v1315[1];
                  uint64_t v1317 = v108[3];
                  uint64_t v1318 = *((void *)v1317 + 1);
                }
                uint64_t v1309 = *v1315 + v1309 - v1319 * v1316;
                uint64_t v1308 = *(void *)v1317 + v1308 - v1318 * v109[1];
                ++v1307;
              }
              while (v1307 < v1306);
            }
          }
          else if (v227 == 1)
          {
            if (*v52)
            {
              unint64_t v881 = 0;
              uint64_t v882 = 0;
              uint64_t v883 = 0;
              uint64_t v884 = *(void *)(v51 + 152);
              uint64_t v885 = v108[19];
              vDSP_Length v886 = (int)v228;
              uint64_t v887 = (float *)v50[19];
              do
              {
                vDSP_vsmul((const float *)((char *)v885 + v882), 1, (const float *)(v884 + v883), v887, 1, v886);
                v883 += **(void **)(*a1 + 24);
                v882 += **(void **)(*a2 + 24);
                uint64_t v887 = (float *)((char *)v887 + v886);
                ++v881;
              }
              while (v881 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            unint64_t v1320 = 0;
            uint64_t v1632 = v108[19];
            uint64_t v1678 = *(void *)(v51 + 152);
            vDSP_Length v1586 = (int)v228;
            uint64_t v1321 = (float *)v50[19];
            do
            {
              uint64_t v1322 = *(void *)*a1;
              unint64_t v1323 = (unint64_t)(*(void *)(*a1 + 8) - v1322) >> 2;
              uint64_t v1324 = 0;
              uint64_t v1325 = (v1323 - 1);
              if ((int)v1323 - 1 >= 0)
              {
                uint64_t v1326 = *(void *)(*a1 + 24);
                int v1327 = v1320;
                do
                {
                  ldiv_t v1328 = ldiv(v1327, *(int *)(v1322 + 4 * v1325));
                  int v1327 = v1328.quot;
                  v1324 += *(void *)(v1326 + 8 * v1325--) * v1328.rem;
                }
                while (v1325 != -1);
              }
              uint64_t v1329 = *(void *)*a2;
              unint64_t v1330 = (unint64_t)(*(void *)(*a2 + 8) - v1329) >> 2;
              uint64_t v1331 = 0;
              uint64_t v1332 = (v1330 - 1);
              if ((int)v1330 - 1 >= 0)
              {
                uint64_t v1333 = *(void *)(*a2 + 24);
                int v1334 = v1320;
                do
                {
                  ldiv_t v1335 = ldiv(v1334, *(int *)(v1329 + 4 * v1332));
                  int v1334 = v1335.quot;
                  v1331 += *(void *)(v1333 + 8 * v1332--) * v1335.rem;
                }
                while (v1332 != -1);
              }
              vDSP_vsmul((const float *)((char *)v1632 + (int)v1331), 1, (const float *)(v1678 + (int)v1324), v1321, 1, v1586);
              uint64_t v1321 = (float *)((char *)v1321 + v1586);
              v1320 += v1586;
            }
            while (v1320 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v227 == 2)
          {
            int v1336 = *v52;
            if (*v52)
            {
              unint64_t v1337 = 0;
              uint64_t v1338 = 0;
              uint64_t v1339 = 0;
              uint64_t v1340 = *(void *)(v51 + 152);
              uint64_t v1341 = v108[19];
              vDSP_Length v1342 = (int)v228;
              ldiv_t v1343 = (float *)v50[19];
              do
              {
                if (v52[1])
                {
                  unint64_t v1344 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1340 + v1339), 1, (const float *)((char *)v1341 + v1338), v1343, 1, v1342);
                    uint64_t v51 = *a1;
                    unsigned int v1345 = *(void **)(*a1 + 24);
                    uint64_t v1346 = v1345[1];
                    v1339 += v1346;
                    int v108 = (int **)*a2;
                    unint64_t v1347 = *(int **)(*a2 + 24);
                    uint64_t v1348 = *((void *)v1347 + 1);
                    v1338 += v1348;
                    ldiv_t v1343 = (float *)((char *)v1343 + v1342);
                    ++v1344;
                    unsigned int v52 = *(int **)*a1;
                    unint64_t v1349 = v52[1];
                  }
                  while (v1344 < v1349);
                  int v1336 = *v52;
                  v109 = *v108;
                }
                else
                {
                  unint64_t v1349 = 0;
                  unsigned int v1345 = *(void **)(v51 + 24);
                  uint64_t v1346 = v1345[1];
                  unint64_t v1347 = v108[3];
                  uint64_t v1348 = *((void *)v1347 + 1);
                }
                uint64_t v1339 = *v1345 + v1339 - v1349 * v1346;
                uint64_t v1338 = *(void *)v1347 + v1338 - v1348 * v109[1];
                ++v1337;
              }
              while (v1337 < v1336);
            }
          }
          else if (v227 == 1)
          {
            if (*v52)
            {
              unint64_t v888 = 0;
              uint64_t v889 = 0;
              uint64_t v890 = 0;
              uint64_t v891 = *(void *)(v51 + 152);
              uint64_t v892 = v108[19];
              vDSP_Length v893 = (int)v228;
              uint64_t v894 = (float *)v50[19];
              do
              {
                vDSP_vsmul((const float *)(v891 + v890), 1, (const float *)((char *)v892 + v889), v894, 1, v893);
                v890 += **(void **)(*a1 + 24);
                v889 += **(void **)(*a2 + 24);
                uint64_t v894 = (float *)((char *)v894 + v893);
                ++v888;
              }
              while (v888 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            unint64_t v1350 = 0;
            uint64_t v1633 = v108[19];
            uint64_t v1679 = *(void *)(v51 + 152);
            vDSP_Length v1587 = (int)v228;
            v1351 = (float *)v50[19];
            do
            {
              uint64_t v1352 = *(void *)*a1;
              unint64_t v1353 = (unint64_t)(*(void *)(*a1 + 8) - v1352) >> 2;
              uint64_t v1354 = 0;
              uint64_t v1355 = (v1353 - 1);
              if ((int)v1353 - 1 >= 0)
              {
                uint64_t v1356 = *(void *)(*a1 + 24);
                int v1357 = v1350;
                do
                {
                  ldiv_t v1358 = ldiv(v1357, *(int *)(v1352 + 4 * v1355));
                  int v1357 = v1358.quot;
                  v1354 += *(void *)(v1356 + 8 * v1355--) * v1358.rem;
                }
                while (v1355 != -1);
              }
              uint64_t v1359 = *(void *)*a2;
              unint64_t v1360 = (unint64_t)(*(void *)(*a2 + 8) - v1359) >> 2;
              uint64_t v1361 = 0;
              uint64_t v1362 = (v1360 - 1);
              if ((int)v1360 - 1 >= 0)
              {
                uint64_t v1363 = *(void *)(*a2 + 24);
                int v1364 = v1350;
                do
                {
                  ldiv_t v1365 = ldiv(v1364, *(int *)(v1359 + 4 * v1362));
                  int v1364 = v1365.quot;
                  v1361 += *(void *)(v1363 + 8 * v1362--) * v1365.rem;
                }
                while (v1362 != -1);
              }
              vDSP_vsmul((const float *)(v1679 + (int)v1354), 1, (const float *)((char *)v1633 + (int)v1361), v1351, 1, v1587);
              v1351 = (float *)((char *)v1351 + v1587);
              v1350 += v1587;
            }
            while (v1350 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v227 == 2)
          {
            int v1027 = *v52;
            if (*v52)
            {
              unint64_t v1028 = 0;
              uint64_t v1029 = 0;
              uint64_t v1030 = 0;
              uint64_t v1031 = *(void *)(v51 + 152);
              uint64_t v1032 = v108[19];
              vDSP_Length v1033 = (int)v228;
              unsigned int v1034 = (float *)v50[19];
              do
              {
                if (v52[1])
                {
                  unint64_t v1035 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1031 + v1030), 1, (const float *)((char *)v1032 + v1029), 1, v1034, 1, v1033);
                    uint64_t v51 = *a1;
                    uint64_t v1036 = *(void **)(*a1 + 24);
                    uint64_t v1037 = v1036[1];
                    v1030 += v1037;
                    int v108 = (int **)*a2;
                    uint64_t v1038 = *(int **)(*a2 + 24);
                    uint64_t v1039 = *((void *)v1038 + 1);
                    v1029 += v1039;
                    unsigned int v1034 = (float *)((char *)v1034 + v1033);
                    ++v1035;
                    unsigned int v52 = *(int **)*a1;
                    unint64_t v1040 = v52[1];
                  }
                  while (v1035 < v1040);
                  int v1027 = *v52;
                  v109 = *v108;
                }
                else
                {
                  unint64_t v1040 = 0;
                  uint64_t v1036 = *(void **)(v51 + 24);
                  uint64_t v1037 = v1036[1];
                  uint64_t v1038 = v108[3];
                  uint64_t v1039 = *((void *)v1038 + 1);
                }
                uint64_t v1030 = *v1036 + v1030 - v1040 * v1037;
                uint64_t v1029 = *(void *)v1038 + v1029 - v1039 * v109[1];
                ++v1028;
              }
              while (v1028 < v1027);
            }
          }
          else if (v227 == 1)
          {
            if (*v52)
            {
              unint64_t v229 = 0;
              uint64_t v230 = 0;
              uint64_t v231 = 0;
              uint64_t v232 = *(void *)(v51 + 152);
              int v233 = v108[19];
              vDSP_Length v234 = (int)v228;
              int v235 = (float *)v50[19];
              do
              {
                vDSP_vmul((const float *)(v232 + v231), 1, (const float *)((char *)v233 + v230), 1, v235, 1, v234);
                v231 += **(void **)(*a1 + 24);
                v230 += **(void **)(*a2 + 24);
                int v235 = (float *)((char *)v235 + v234);
                ++v229;
              }
              while (v229 < **(int **)*a1);
            }
          }
          else if (v50[6])
          {
            unint64_t v1041 = 0;
            uint64_t v1615 = v108[19];
            uint64_t v1661 = *(void *)(v51 + 152);
            vDSP_Length v1569 = (int)v228;
            uint64_t v1042 = (float *)v50[19];
            do
            {
              uint64_t v1043 = *(void *)*a1;
              unint64_t v1044 = (unint64_t)(*(void *)(*a1 + 8) - v1043) >> 2;
              uint64_t v1045 = 0;
              uint64_t v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                uint64_t v1047 = *(void *)(*a1 + 24);
                int v1048 = v1041;
                do
                {
                  ldiv_t v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  int v1048 = v1049.quot;
                  v1045 += *(void *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              uint64_t v1050 = *(void *)*a2;
              unint64_t v1051 = (unint64_t)(*(void *)(*a2 + 8) - v1050) >> 2;
              uint64_t v1052 = 0;
              uint64_t v1053 = (v1051 - 1);
              if ((int)v1051 - 1 >= 0)
              {
                uint64_t v1054 = *(void *)(*a2 + 24);
                int v1055 = v1041;
                do
                {
                  ldiv_t v1056 = ldiv(v1055, *(int *)(v1050 + 4 * v1053));
                  int v1055 = v1056.quot;
                  v1052 += *(void *)(v1054 + 8 * v1053--) * v1056.rem;
                }
                while (v1053 != -1);
              }
              vDSP_vmul((const float *)(v1661 + (int)v1045), 1, (const float *)((char *)v1615 + (int)v1052), 1, v1042, 1, v1569);
              uint64_t v1042 = (float *)((char *)v1042 + v1569);
              v1041 += v1569;
            }
            while (v1041 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_341:
          switch(v224)
          {
            case 1uLL:
              if (v50[6])
              {
                unint64_t v236 = 0;
                uint64_t v237 = 0;
                uint64_t v238 = 0;
                uint64_t v239 = *(void *)(v51 + 152);
                uint64_t v240 = v108[19];
                uint64_t v241 = v50[19];
                do
                {
                  *(unsigned char *)(v241 + v236) = *((unsigned char *)v240 + v237) * *(unsigned char *)(v239 + v238);
                  v238 += **(void **)(*a1 + 24);
                  v237 += **(void **)(*a2 + 24);
                  ++v236;
                }
                while (v236 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v548 = *v52;
              if (*v52)
              {
                unint64_t v549 = 0;
                uint64_t v550 = 0;
                uint64_t v551 = 0;
                uint64_t v552 = 0;
                uint64_t v553 = *(void *)(v51 + 152);
                uint64_t v554 = v108[19];
                uint64_t v555 = v50[19];
                do
                {
                  if (v52[1])
                  {
                    unint64_t v556 = 0;
                    do
                    {
                      *(unsigned char *)(v555 + v550 + v556) = *((unsigned char *)v554 + v551) * *(unsigned char *)(v553 + v552);
                      uint64_t v51 = *a1;
                      ldiv_t v557 = *(void **)(*a1 + 24);
                      uint64_t v558 = v557[1];
                      v552 += v558;
                      int v108 = (int **)*a2;
                      uint64_t v559 = *(int **)(*a2 + 24);
                      uint64_t v560 = *((void *)v559 + 1);
                      v551 += v560;
                      ++v556;
                      unsigned int v52 = *(int **)*a1;
                      unint64_t v561 = v52[1];
                    }
                    while (v556 < v561);
                    int v548 = *v52;
                    v109 = *v108;
                    v550 += v556;
                  }
                  else
                  {
                    unint64_t v561 = 0;
                    ldiv_t v557 = *(void **)(v51 + 24);
                    uint64_t v558 = v557[1];
                    uint64_t v559 = v108[3];
                    uint64_t v560 = *((void *)v559 + 1);
                  }
                  uint64_t v552 = *v557 + v552 - v561 * v558;
                  uint64_t v551 = *(void *)v559 + v551 - v560 * v109[1];
                  ++v549;
                }
                while (v549 < v548);
              }
              break;
            case 3uLL:
              int v562 = *v52;
              if (*v52)
              {
                unint64_t v563 = 0;
                uint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = *(void *)(v51 + 152);
                uint64_t v568 = v108[19];
                uint64_t v569 = v50[19];
                do
                {
                  if (v52[1])
                  {
                    unint64_t v570 = 0;
                    do
                    {
                      if (v52[2])
                      {
                        unint64_t v571 = 0;
                        do
                        {
                          *(unsigned char *)(v569 + v564 + v571) = *((unsigned char *)v568 + v565) * *(unsigned char *)(v567 + v566);
                          uint64_t v51 = *a1;
                          uint64_t v572 = *(void **)(*a1 + 24);
                          uint64_t v573 = v572[2];
                          v566 += v573;
                          int v108 = (int **)*a2;
                          v574 = *(int **)(*a2 + 24);
                          uint64_t v575 = *((void *)v574 + 2);
                          v565 += v575;
                          ++v571;
                          unsigned int v52 = *(int **)*a1;
                          unint64_t v576 = v52[2];
                        }
                        while (v571 < v576);
                        v109 = *v108;
                        v564 += v571;
                      }
                      else
                      {
                        unint64_t v576 = 0;
                        uint64_t v572 = *(void **)(v51 + 24);
                        uint64_t v573 = v572[2];
                        v574 = v108[3];
                        uint64_t v575 = *((void *)v574 + 2);
                      }
                      uint64_t v577 = v572[1];
                      uint64_t v566 = v577 + v566 - v576 * v573;
                      uint64_t v565 = *((void *)v574 + 1) + v565 - v575 * v109[2];
                      ++v570;
                      unint64_t v578 = v52[1];
                    }
                    while (v570 < v578);
                    int v562 = *v52;
                  }
                  else
                  {
                    unint64_t v578 = 0;
                    uint64_t v572 = *(void **)(v51 + 24);
                    uint64_t v577 = v572[1];
                  }
                  uint64_t v566 = *v572 + v566 - v578 * v577;
                  uint64_t v565 = *(void *)v108[3] + v565 - *((void *)v108[3] + 1) * v109[1];
                  ++v563;
                }
                while (v563 < v562);
              }
              break;
            case 4uLL:
              int v579 = *v52;
              if (*v52)
              {
                unint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = 0;
                uint64_t v583 = 0;
                uint64_t v584 = *(void *)(v51 + 152);
                uint64_t v585 = v108[19];
                uint64_t v586 = v50[19];
                do
                {
                  if (v52[1])
                  {
                    unint64_t v587 = 0;
                    do
                    {
                      if (v52[2])
                      {
                        unint64_t v588 = 0;
                        do
                        {
                          if (v52[3])
                          {
                            unint64_t v589 = 0;
                            do
                            {
                              *(unsigned char *)(v586 + v581 + v589) = *((unsigned char *)v585 + v582) * *(unsigned char *)(v584 + v583);
                              uint64_t v51 = *a1;
                              uint64_t v590 = *(void **)(*a1 + 24);
                              uint64_t v591 = v590[3];
                              v583 += v591;
                              int v108 = (int **)*a2;
                              uint64_t v592 = *(int **)(*a2 + 24);
                              uint64_t v593 = *((void *)v592 + 3);
                              v582 += v593;
                              ++v589;
                              unsigned int v52 = *(int **)*a1;
                              unint64_t v594 = v52[3];
                            }
                            while (v589 < v594);
                            v109 = *v108;
                            v581 += v589;
                          }
                          else
                          {
                            unint64_t v594 = 0;
                            uint64_t v590 = *(void **)(v51 + 24);
                            uint64_t v591 = v590[3];
                            uint64_t v592 = v108[3];
                            uint64_t v593 = *((void *)v592 + 3);
                          }
                          uint64_t v595 = v590[2];
                          uint64_t v583 = v595 + v583 - v594 * v591;
                          uint64_t v582 = *((void *)v592 + 2) + v582 - v593 * v109[3];
                          ++v588;
                          unint64_t v596 = v52[2];
                        }
                        while (v588 < v596);
                      }
                      else
                      {
                        unint64_t v596 = 0;
                        uint64_t v590 = *(void **)(v51 + 24);
                        uint64_t v595 = v590[2];
                      }
                      uint64_t v583 = v590[1] + v583 - v596 * v595;
                      uint64_t v582 = *((void *)v108[3] + 1) + v582 - *((void *)v108[3] + 2) * v109[2];
                      ++v587;
                      unint64_t v597 = v52[1];
                    }
                    while (v587 < v597);
                    int v579 = *v52;
                  }
                  else
                  {
                    unint64_t v597 = 0;
                  }
                  uint64_t v583 = **(void **)(v51 + 24) + v583 - *(void *)(*(void *)(v51 + 24) + 8) * v597;
                  uint64_t v582 = *(void *)v108[3] + v582 - *((void *)v108[3] + 1) * v109[1];
                  ++v580;
                }
                while (v580 < v579);
              }
              break;
            default:
              if (v50[6])
              {
                unint64_t v532 = 0;
                int v1604 = v108[19];
                uint64_t v1650 = *(void *)(v51 + 152);
                uint64_t v533 = v50[19];
                do
                {
                  uint64_t v534 = *(void *)*a1;
                  unint64_t v535 = (unint64_t)(*(void *)(*a1 + 8) - v534) >> 2;
                  uint64_t v536 = 0;
                  uint64_t v537 = (v535 - 1);
                  if ((int)v535 - 1 >= 0)
                  {
                    uint64_t v538 = *(void *)(*a1 + 24);
                    int v539 = v532;
                    do
                    {
                      ldiv_t v540 = ldiv(v539, *(int *)(v534 + 4 * v537));
                      int v539 = v540.quot;
                      v536 += *(void *)(v538 + 8 * v537--) * v540.rem;
                    }
                    while (v537 != -1);
                  }
                  uint64_t v541 = *(void *)*a2;
                  unint64_t v542 = (unint64_t)(*(void *)(*a2 + 8) - v541) >> 2;
                  uint64_t v543 = 0;
                  uint64_t v544 = (v542 - 1);
                  if ((int)v542 - 1 >= 0)
                  {
                    uint64_t v545 = *(void *)(*a2 + 24);
                    int v546 = v532;
                    do
                    {
                      ldiv_t v547 = ldiv(v546, *(int *)(v541 + 4 * v544));
                      int v546 = v547.quot;
                      v543 += *(void *)(v545 + 8 * v544--) * v547.rem;
                    }
                    while (v544 != -1);
                  }
                  *(unsigned char *)(v533 + v532++) = *((unsigned char *)v1604 + (int)v543) * *(unsigned char *)(v1650 + (int)v536);
                }
                while (v532 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v12)
      {
        case 0:
LABEL_15:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) * **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          v58 = *(void **)a3;
          uint64_t v59 = *a1;
          v60 = *(int **)*a1;
          uint64_t v61 = (*(void *)(*a1 + 8) - (void)v60) >> 2;
          uint64_t v62 = (v61 - 1);
          if ((int)v62 >= -1) {
            int v63 = -1;
          }
          else {
            int v63 = v61 - 1;
          }
          int v64 = v63 + 1;
          int v65 = v61 + 1;
          break;
      }
      while (1)
      {
        unsigned int v66 = v65 - 2;
        if (v65 - 2 < 0) {
          break;
        }
        --v65;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v66) != *(void *)(v58[3] + 8 * v66)) {
          goto LABEL_107;
        }
      }
      int v65 = v64;
LABEL_107:
      v115 = (int **)*a2;
      v116 = *(int **)*a2;
      uint64_t v117 = (*(void *)(*a2 + 8) - (void)v116) >> 2;
      uint64_t v118 = (v117 - 1);
      if ((int)v118 >= -1) {
        int v119 = -1;
      }
      else {
        int v119 = v117 - 1;
      }
      int v120 = v119 + 1;
      int v121 = v117 + 1;
      while (1)
      {
        unsigned int v122 = v121 - 2;
        if (v121 - 2 < 0) {
          break;
        }
        --v121;
        if (*(void *)&v115[3][2 * v122] != *(void *)(v58[3] + 8 * v122)) {
          goto LABEL_151;
        }
      }
      int v121 = v120;
LABEL_151:
      int v147 = v61 + 1;
      while (1)
      {
        unsigned int v148 = v147 - 2;
        if (v147 - 2 < 0) {
          break;
        }
        --v147;
        if (*(void *)(*(void *)(v59 + 24) + 8 * v148)) {
          goto LABEL_186;
        }
      }
      int v147 = v64;
LABEL_186:
      int v161 = v117 + 1;
      while (1)
      {
        int v162 = v161 - 2;
        if (v161 - 2 < 0) {
          break;
        }
        --v161;
        if (*(void *)&v115[3][2 * v162]) {
          goto LABEL_347;
        }
      }
      int v161 = v120;
LABEL_347:
      unint64_t v242 = (uint64_t)(v58[1] - *v58) >> 2;
      if (v65 <= v121) {
        int v243 = v121;
      }
      else {
        int v243 = v65;
      }
      if (v65 <= v161) {
        int v65 = v161;
      }
      if (v147 > v121) {
        int v121 = v147;
      }
      if (v242 > v121) {
        int v244 = 1;
      }
      else {
        int v244 = 4;
      }
      if (v242 <= v121) {
        int v121 = (uint64_t)(v58[1] - *v58) >> 2;
      }
      if (v242 <= v65) {
        int v65 = v121;
      }
      else {
        int v244 = 2;
      }
      if (v242 <= v243)
      {
        int v245 = v65;
      }
      else
      {
        int v244 = 3;
        int v245 = v243;
      }
      if (!v245) {
        goto LABEL_376;
      }
      unint64_t v246 = *(void *)(v58[3] + 8 * (v245 - 1));
      if (v246 < 0x10) {
        goto LABEL_376;
      }
      switch(v244)
      {
        case 1:
          if (v245 == 2)
          {
            int v1366 = *v60;
            if (*v60)
            {
              uint64_t v1367 = 0;
              uint64_t v1368 = 0;
              uint64_t v1680 = *(void *)(v59 + 152);
              uint64_t v1634 = v115[19];
              unint64_t v1369 = (float *)v58[19];
              unint64_t v1550 = 0;
              vDSP_Length v1588 = (int)v246;
              uint64_t v1370 = 4 * (int)v246;
              do
              {
                if (v60[1])
                {
                  unint64_t v1371 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1634[v1367], 1, (const float *)(v1680 + 4 * v1368), v1369, 1, v1588);
                    uint64_t v59 = *a1;
                    uint64_t v1372 = *(void **)(*a1 + 24);
                    uint64_t v1373 = v1372[1];
                    v1368 += v1373;
                    v115 = (int **)*a2;
                    ldiv_t v1374 = *(int **)(*a2 + 24);
                    uint64_t v1375 = *((void *)v1374 + 1);
                    v1367 += v1375;
                    ++v1371;
                    v60 = *(int **)*a1;
                    unint64_t v1376 = v60[1];
                    unint64_t v1369 = (float *)((char *)v1369 + v1370);
                  }
                  while (v1371 < v1376);
                  int v1366 = *v60;
                  v116 = *v115;
                }
                else
                {
                  unint64_t v1376 = 0;
                  uint64_t v1372 = *(void **)(v59 + 24);
                  uint64_t v1373 = v1372[1];
                  ldiv_t v1374 = v115[3];
                  uint64_t v1375 = *((void *)v1374 + 1);
                }
                uint64_t v1368 = *v1372 + v1368 - v1376 * v1373;
                uint64_t v1367 = *(void *)v1374 + v1367 - v1375 * v116[1];
                ++v1550;
              }
              while (v1550 < v1366);
            }
          }
          else if (v245 == 1)
          {
            if (*v60)
            {
              unint64_t v895 = 0;
              uint64_t v896 = 0;
              uint64_t v897 = 0;
              uint64_t v898 = *(void *)(v59 + 152);
              uint64_t v899 = v115[19];
              vDSP_Length v900 = (int)v246;
              uint64_t v901 = 4 * (int)v246;
              uint64_t v902 = (float *)v58[19];
              do
              {
                vDSP_vsmul((const float *)&v899[v896], 1, (const float *)(v898 + 4 * v897), v902, 1, v900);
                v897 += **(void **)(*a1 + 24);
                v896 += **(void **)(*a2 + 24);
                ++v895;
                uint64_t v902 = (float *)((char *)v902 + v901);
              }
              while (v895 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            unint64_t v1377 = 0;
            unsigned int v1635 = v115[19];
            uint64_t v1681 = *(void *)(v59 + 152);
            vDSP_Length v1589 = (int)v246;
            int v1378 = (float *)v58[19];
            do
            {
              uint64_t v1379 = *(void *)*a1;
              unint64_t v1380 = (unint64_t)(*(void *)(*a1 + 8) - v1379) >> 2;
              uint64_t v1381 = 0;
              uint64_t v1382 = (v1380 - 1);
              if ((int)v1380 - 1 >= 0)
              {
                uint64_t v1383 = *(void *)(*a1 + 24);
                int v1384 = v1377;
                do
                {
                  ldiv_t v1385 = ldiv(v1384, *(int *)(v1379 + 4 * v1382));
                  int v1384 = v1385.quot;
                  v1381 += *(void *)(v1383 + 8 * v1382--) * v1385.rem;
                }
                while (v1382 != -1);
              }
              uint64_t v1386 = *(void *)*a2;
              unint64_t v1387 = (unint64_t)(*(void *)(*a2 + 8) - v1386) >> 2;
              uint64_t v1388 = 0;
              uint64_t v1389 = (v1387 - 1);
              if ((int)v1387 - 1 >= 0)
              {
                uint64_t v1390 = *(void *)(*a2 + 24);
                int v1391 = v1377;
                do
                {
                  ldiv_t v1392 = ldiv(v1391, *(int *)(v1386 + 4 * v1389));
                  int v1391 = v1392.quot;
                  v1388 += *(void *)(v1390 + 8 * v1389--) * v1392.rem;
                }
                while (v1389 != -1);
              }
              vDSP_vsmul((const float *)&v1635[(int)v1388], 1, (const float *)(v1681 + 4 * (int)v1381), v1378, 1, v1589);
              v1378 += v1589;
              v1377 += v1589;
            }
            while (v1377 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v245 == 2)
          {
            int v1393 = *v60;
            if (*v60)
            {
              uint64_t v1394 = 0;
              uint64_t v1395 = 0;
              uint64_t v1682 = *(void *)(v59 + 152);
              uint64_t v1636 = v115[19];
              uint64_t v1396 = (float *)v58[19];
              unint64_t v1551 = 0;
              vDSP_Length v1590 = (int)v246;
              uint64_t v1397 = 4 * (int)v246;
              do
              {
                if (v60[1])
                {
                  unint64_t v1398 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1682 + 4 * v1395), 1, (const float *)&v1636[v1394], v1396, 1, v1590);
                    uint64_t v59 = *a1;
                    ldiv_t v1399 = *(void **)(*a1 + 24);
                    uint64_t v1400 = v1399[1];
                    v1395 += v1400;
                    v115 = (int **)*a2;
                    unint64_t v1401 = *(int **)(*a2 + 24);
                    uint64_t v1402 = *((void *)v1401 + 1);
                    v1394 += v1402;
                    ++v1398;
                    v60 = *(int **)*a1;
                    unint64_t v1403 = v60[1];
                    uint64_t v1396 = (float *)((char *)v1396 + v1397);
                  }
                  while (v1398 < v1403);
                  int v1393 = *v60;
                  v116 = *v115;
                }
                else
                {
                  unint64_t v1403 = 0;
                  ldiv_t v1399 = *(void **)(v59 + 24);
                  uint64_t v1400 = v1399[1];
                  unint64_t v1401 = v115[3];
                  uint64_t v1402 = *((void *)v1401 + 1);
                }
                uint64_t v1395 = *v1399 + v1395 - v1403 * v1400;
                uint64_t v1394 = *(void *)v1401 + v1394 - v1402 * v116[1];
                ++v1551;
              }
              while (v1551 < v1393);
            }
          }
          else if (v245 == 1)
          {
            if (*v60)
            {
              unint64_t v903 = 0;
              uint64_t v904 = 0;
              uint64_t v905 = 0;
              uint64_t v906 = *(void *)(v59 + 152);
              unint64_t v907 = v115[19];
              vDSP_Length v908 = (int)v246;
              uint64_t v909 = 4 * (int)v246;
              uint64_t v910 = (float *)v58[19];
              do
              {
                vDSP_vsmul((const float *)(v906 + 4 * v905), 1, (const float *)&v907[v904], v910, 1, v908);
                v905 += **(void **)(*a1 + 24);
                v904 += **(void **)(*a2 + 24);
                ++v903;
                uint64_t v910 = (float *)((char *)v910 + v909);
              }
              while (v903 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            unint64_t v1404 = 0;
            uint64_t v1637 = v115[19];
            uint64_t v1683 = *(void *)(v59 + 152);
            vDSP_Length v1591 = (int)v246;
            int v1405 = (float *)v58[19];
            do
            {
              uint64_t v1406 = *(void *)*a1;
              unint64_t v1407 = (unint64_t)(*(void *)(*a1 + 8) - v1406) >> 2;
              uint64_t v1408 = 0;
              uint64_t v1409 = (v1407 - 1);
              if ((int)v1407 - 1 >= 0)
              {
                uint64_t v1410 = *(void *)(*a1 + 24);
                int v1411 = v1404;
                do
                {
                  ldiv_t v1412 = ldiv(v1411, *(int *)(v1406 + 4 * v1409));
                  int v1411 = v1412.quot;
                  v1408 += *(void *)(v1410 + 8 * v1409--) * v1412.rem;
                }
                while (v1409 != -1);
              }
              uint64_t v1413 = *(void *)*a2;
              unint64_t v1414 = (unint64_t)(*(void *)(*a2 + 8) - v1413) >> 2;
              uint64_t v1415 = 0;
              uint64_t v1416 = (v1414 - 1);
              if ((int)v1414 - 1 >= 0)
              {
                uint64_t v1417 = *(void *)(*a2 + 24);
                int v1418 = v1404;
                do
                {
                  ldiv_t v1419 = ldiv(v1418, *(int *)(v1413 + 4 * v1416));
                  int v1418 = v1419.quot;
                  v1415 += *(void *)(v1417 + 8 * v1416--) * v1419.rem;
                }
                while (v1416 != -1);
              }
              vDSP_vsmul((const float *)(v1683 + 4 * (int)v1408), 1, (const float *)&v1637[(int)v1415], v1405, 1, v1591);
              v1405 += v1591;
              v1404 += v1591;
            }
            while (v1404 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v245 == 2)
          {
            int v1057 = *v60;
            if (*v60)
            {
              uint64_t v1058 = 0;
              uint64_t v1059 = 0;
              uint64_t v1662 = *(void *)(v59 + 152);
              uint64_t v1616 = v115[19];
              uint64_t v1060 = (float *)v58[19];
              unint64_t v1545 = 0;
              vDSP_Length v1570 = (int)v246;
              uint64_t v1061 = 4 * (int)v246;
              do
              {
                if (v60[1])
                {
                  unint64_t v1062 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1662 + 4 * v1059), 1, (const float *)&v1616[v1058], 1, v1060, 1, v1570);
                    uint64_t v59 = *a1;
                    uint64_t v1063 = *(void **)(*a1 + 24);
                    uint64_t v1064 = v1063[1];
                    v1059 += v1064;
                    v115 = (int **)*a2;
                    uint64_t v1065 = *(int **)(*a2 + 24);
                    uint64_t v1066 = *((void *)v1065 + 1);
                    v1058 += v1066;
                    ++v1062;
                    v60 = *(int **)*a1;
                    unint64_t v1067 = v60[1];
                    uint64_t v1060 = (float *)((char *)v1060 + v1061);
                  }
                  while (v1062 < v1067);
                  int v1057 = *v60;
                  v116 = *v115;
                }
                else
                {
                  unint64_t v1067 = 0;
                  uint64_t v1063 = *(void **)(v59 + 24);
                  uint64_t v1064 = v1063[1];
                  uint64_t v1065 = v115[3];
                  uint64_t v1066 = *((void *)v1065 + 1);
                }
                uint64_t v1059 = *v1063 + v1059 - v1067 * v1064;
                uint64_t v1058 = *(void *)v1065 + v1058 - v1066 * v116[1];
                ++v1545;
              }
              while (v1545 < v1057);
            }
          }
          else if (v245 == 1)
          {
            if (*v60)
            {
              unint64_t v247 = 0;
              uint64_t v248 = 0;
              uint64_t v249 = 0;
              uint64_t v250 = *(void *)(v59 + 152);
              int v251 = v115[19];
              vDSP_Length v252 = (int)v246;
              uint64_t v253 = 4 * (int)v246;
              v254 = (float *)v58[19];
              do
              {
                vDSP_vmul((const float *)(v250 + 4 * v249), 1, (const float *)&v251[v248], 1, v254, 1, v252);
                v249 += **(void **)(*a1 + 24);
                v248 += **(void **)(*a2 + 24);
                ++v247;
                v254 = (float *)((char *)v254 + v253);
              }
              while (v247 < **(int **)*a1);
            }
          }
          else if (v58[6])
          {
            unint64_t v1068 = 0;
            uint64_t v1617 = v115[19];
            uint64_t v1663 = *(void *)(v59 + 152);
            vDSP_Length v1571 = (int)v246;
            uint64_t v1069 = (float *)v58[19];
            do
            {
              uint64_t v1070 = *(void *)*a1;
              unint64_t v1071 = (unint64_t)(*(void *)(*a1 + 8) - v1070) >> 2;
              uint64_t v1072 = 0;
              uint64_t v1073 = (v1071 - 1);
              if ((int)v1071 - 1 >= 0)
              {
                uint64_t v1074 = *(void *)(*a1 + 24);
                int v1075 = v1068;
                do
                {
                  ldiv_t v1076 = ldiv(v1075, *(int *)(v1070 + 4 * v1073));
                  int v1075 = v1076.quot;
                  v1072 += *(void *)(v1074 + 8 * v1073--) * v1076.rem;
                }
                while (v1073 != -1);
              }
              uint64_t v1077 = *(void *)*a2;
              unint64_t v1078 = (unint64_t)(*(void *)(*a2 + 8) - v1077) >> 2;
              uint64_t v1079 = 0;
              uint64_t v1080 = (v1078 - 1);
              if ((int)v1078 - 1 >= 0)
              {
                uint64_t v1081 = *(void *)(*a2 + 24);
                int v1082 = v1068;
                do
                {
                  ldiv_t v1083 = ldiv(v1082, *(int *)(v1077 + 4 * v1080));
                  int v1082 = v1083.quot;
                  v1079 += *(void *)(v1081 + 8 * v1080--) * v1083.rem;
                }
                while (v1080 != -1);
              }
              vDSP_vmul((const float *)(v1663 + 4 * (int)v1072), 1, (const float *)&v1617[(int)v1079], 1, v1069, 1, v1571);
              v1069 += v1571;
              v1068 += v1571;
            }
            while (v1068 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_376:
          switch(v242)
          {
            case 1uLL:
              uint64_t v255 = v58[6];
              if (v255)
              {
                uint64_t v256 = *(_DWORD **)(v59 + 152);
                int v257 = v115[19];
                int v258 = (_DWORD *)v58[19];
                uint64_t v259 = 4 * *(void *)v115[3];
                uint64_t v260 = 4 * **(void **)(v59 + 24);
                do
                {
                  *v258++ = *v257 * *v256;
                  int v257 = (int *)((char *)v257 + v259);
                  uint64_t v256 = (_DWORD *)((char *)v256 + v260);
                  --v255;
                }
                while (v255);
              }
              break;
            case 2uLL:
              int v609 = *v60;
              if (*v60)
              {
                unint64_t v610 = 0;
                uint64_t v611 = 0;
                uint64_t v612 = 0;
                uint64_t v613 = 0;
                uint64_t v614 = *(void *)(v59 + 152);
                uint64_t v615 = v115[19];
                uint64_t v616 = v58[19];
                int v617 = *(uint64_t **)(v59 + 24);
                uint64_t v618 = *v617;
                uint64_t v619 = v617[1];
                uint64_t v620 = v115[3];
                uint64_t v622 = *(void *)v620;
                uint64_t v621 = *((void *)v620 + 1);
                int v623 = v60[1];
                do
                {
                  if (v623)
                  {
                    for (unint64_t m = 0; m < v623; ++m)
                    {
                      *(_DWORD *)(v616 + 4 * v611 + 4 * m) = v615[v612] * *(_DWORD *)(v614 + 4 * v613);
                      v613 += v619;
                      v612 += v621;
                      int v623 = v60[1];
                    }
                    uint64_t v625 = v623;
                    int v609 = *v60;
                    v611 += m;
                  }
                  else
                  {
                    uint64_t v625 = 0;
                  }
                  uint64_t v613 = v613 + v618 - v625 * v619;
                  uint64_t v612 = v612 + v622 - v621 * v116[1];
                  ++v610;
                }
                while (v610 < v609);
              }
              break;
            case 3uLL:
              int v626 = *v60;
              if (*v60)
              {
                unint64_t v627 = 0;
                uint64_t v628 = 0;
                uint64_t v629 = 0;
                uint64_t v630 = 0;
                uint64_t v631 = *(void *)(v59 + 152);
                unint64_t v632 = v115[19];
                uint64_t v633 = v58[19];
                uint64_t v634 = *(uint64_t **)(v59 + 24);
                uint64_t v635 = *v634;
                uint64_t v636 = v634[1];
                uint64_t v637 = v115[3];
                uint64_t v638 = *(void *)v637;
                uint64_t v639 = *((void *)v637 + 1);
                int v640 = v60[1];
                int v641 = v640;
                do
                {
                  if (v641)
                  {
                    unint64_t v642 = 0;
                    uint64_t v643 = v634[2];
                    uint64_t v644 = *((void *)v637 + 2);
                    int v645 = v60[2];
                    do
                    {
                      if (v645)
                      {
                        for (unint64_t n = 0; n < v645; ++n)
                        {
                          *(_DWORD *)(v633 + 4 * v628 + 4 * n) = v632[v629] * *(_DWORD *)(v631 + 4 * v630);
                          v630 += v643;
                          v629 += v644;
                          int v645 = v60[2];
                        }
                        uint64_t v647 = v645;
                        int v640 = v60[1];
                        v628 += n;
                      }
                      else
                      {
                        uint64_t v647 = 0;
                      }
                      uint64_t v630 = v630 + v636 - v647 * v643;
                      uint64_t v629 = v629 + v639 - v644 * v116[2];
                      ++v642;
                    }
                    while (v642 < v640);
                    uint64_t v648 = v640;
                    int v626 = *v60;
                    int v641 = v640;
                  }
                  else
                  {
                    uint64_t v648 = 0;
                  }
                  uint64_t v630 = v630 + v635 - v648 * v636;
                  uint64_t v629 = v629 + v638 - v639 * v116[1];
                  ++v627;
                }
                while (v627 < v626);
              }
              break;
            case 4uLL:
              int v649 = *v60;
              if (*v60)
              {
                unint64_t v650 = 0;
                uint64_t v651 = 0;
                uint64_t v652 = 0;
                uint64_t v653 = 0;
                uint64_t v654 = *(void *)(v59 + 152);
                uint64_t v655 = v115[19];
                uint64_t v656 = v58[19];
                v657 = *(uint64_t **)(v59 + 24);
                uint64_t v658 = *v657;
                uint64_t v659 = v657[1];
                uint64_t v660 = v115[3];
                uint64_t v661 = *(void *)v660;
                uint64_t v662 = *((void *)v660 + 1);
                int v663 = v60[1];
                int v664 = v663;
                do
                {
                  if (v664)
                  {
                    unint64_t v665 = 0;
                    uint64_t v666 = v657[2];
                    uint64_t v667 = *((void *)v660 + 2);
                    int v668 = v60[2];
                    int v669 = v668;
                    do
                    {
                      if (v669)
                      {
                        unint64_t v670 = 0;
                        uint64_t v671 = v657[3];
                        uint64_t v672 = *((void *)v660 + 3);
                        int v673 = v60[3];
                        do
                        {
                          if (v673)
                          {
                            for (iunint64_t i = 0; ii < v673; ++ii)
                            {
                              *(_DWORD *)(v656 + 4 * v651 + 4 * ii) = v655[v652] * *(_DWORD *)(v654 + 4 * v653);
                              v653 += v671;
                              v652 += v672;
                              int v673 = v60[3];
                            }
                            uint64_t v675 = v673;
                            int v668 = v60[2];
                            v651 += ii;
                          }
                          else
                          {
                            uint64_t v675 = 0;
                          }
                          uint64_t v653 = v653 + v666 - v675 * v671;
                          uint64_t v652 = v652 + v667 - v672 * v116[3];
                          ++v670;
                        }
                        while (v670 < v668);
                        uint64_t v676 = v668;
                        int v663 = v60[1];
                        int v669 = v668;
                      }
                      else
                      {
                        uint64_t v676 = 0;
                      }
                      uint64_t v653 = v653 + v659 - v676 * v666;
                      uint64_t v652 = v652 + v662 - v667 * v116[2];
                      ++v665;
                    }
                    while (v665 < v663);
                    uint64_t v677 = v663;
                    int v649 = *v60;
                    int v664 = v663;
                  }
                  else
                  {
                    uint64_t v677 = 0;
                  }
                  uint64_t v653 = v653 + v658 - v677 * v659;
                  uint64_t v652 = v652 + v661 - v662 * v116[1];
                  ++v650;
                }
                while (v650 < v649);
              }
              break;
            default:
              uint64_t v1605 = v58[6];
              uint64_t v1651 = v62;
              if (v1605)
              {
                uint64_t v598 = 0;
                int v1539 = v115[19];
                uint64_t v1559 = *(void *)(v59 + 152);
                uint64_t v1532 = v58[19];
                do
                {
                  uint64_t v599 = v1651;
                  if ((v1651 & 0x80000000) != 0)
                  {
                    LODWORD(v600) = 0;
                  }
                  else
                  {
                    uint64_t v600 = 0;
                    uint64_t v601 = *(void *)(v59 + 24);
                    int v602 = v598;
                    do
                    {
                      ldiv_t v603 = ldiv(v602, v60[v599]);
                      int v602 = v603.quot;
                      v600 += *(void *)(v601 + 8 * v599--) * v603.rem;
                    }
                    while (v599 != -1);
                  }
                  uint64_t v604 = 0;
                  if ((v118 & 0x80000000) == 0)
                  {
                    uint64_t v605 = v115[3];
                    uint64_t v606 = v118;
                    int v607 = v598;
                    do
                    {
                      ldiv_t v608 = ldiv(v607, v116[v606]);
                      int v607 = v608.quot;
                      v604 += *(void *)&v605[2 * v606--] * v608.rem;
                    }
                    while (v606 != -1);
                  }
                  *(_DWORD *)(v1532 + 4 * v598++) = v1539[(int)v604] * *(_DWORD *)(v1559 + 4 * (int)v600);
                }
                while (v598 != v1605);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v13)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) * **(void **)(*a1 + 152);
          return;
        case 1:
          goto LABEL_21;
        case 2:
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        default:
          v67 = *(void **)a3;
          uint64_t v68 = *a1;
          uint64_t v69 = *(int **)*a1;
          uint64_t v70 = (*(void *)(*a1 + 8) - (void)v69) >> 2;
          uint64_t v71 = (v70 - 1);
          if ((int)v71 >= -1) {
            int v72 = -1;
          }
          else {
            int v72 = v70 - 1;
          }
          int v73 = v72 + 1;
          int v74 = v70 + 1;
          break;
      }
      while (1)
      {
        unsigned int v75 = v74 - 2;
        if (v74 - 2 < 0) {
          break;
        }
        --v74;
        if (*(void *)(*(void *)(v68 + 24) + 8 * v75) != *(void *)(v67[3] + 8 * v75)) {
          goto LABEL_115;
        }
      }
      int v74 = v73;
LABEL_115:
      v123 = (int **)*a2;
      v124 = *(int **)*a2;
      uint64_t v125 = (*(void *)(*a2 + 8) - (void)v124) >> 2;
      uint64_t v126 = (v125 - 1);
      if ((int)v126 >= -1) {
        int v127 = -1;
      }
      else {
        int v127 = v125 - 1;
      }
      int v128 = v127 + 1;
      int v129 = v125 + 1;
      while (1)
      {
        unsigned int v130 = v129 - 2;
        if (v129 - 2 < 0) {
          break;
        }
        --v129;
        if (*(void *)&v123[3][2 * v130] != *(void *)(v67[3] + 8 * v130)) {
          goto LABEL_156;
        }
      }
      int v129 = v128;
LABEL_156:
      int v149 = v70 + 1;
      while (1)
      {
        unsigned int v150 = v149 - 2;
        if (v149 - 2 < 0) {
          break;
        }
        --v149;
        if (*(void *)(*(void *)(v68 + 24) + 8 * v150)) {
          goto LABEL_191;
        }
      }
      int v149 = v73;
LABEL_191:
      int v163 = v125 + 1;
      while (1)
      {
        int v164 = v163 - 2;
        if (v163 - 2 < 0) {
          break;
        }
        --v163;
        if (*(void *)&v123[3][2 * v164]) {
          goto LABEL_382;
        }
      }
      int v163 = v128;
LABEL_382:
      unint64_t v261 = (uint64_t)(v67[1] - *v67) >> 2;
      if (v74 <= v129) {
        int v262 = v129;
      }
      else {
        int v262 = v74;
      }
      if (v74 <= v163) {
        int v74 = v163;
      }
      if (v149 > v129) {
        int v129 = v149;
      }
      if (v261 > v129) {
        int v263 = 1;
      }
      else {
        int v263 = 4;
      }
      if (v261 <= v129) {
        int v129 = (uint64_t)(v67[1] - *v67) >> 2;
      }
      if (v261 <= v74) {
        int v74 = v129;
      }
      else {
        int v263 = 2;
      }
      if (v261 <= v262)
      {
        int v264 = v74;
      }
      else
      {
        int v263 = 3;
        int v264 = v262;
      }
      if (!v264) {
        goto LABEL_411;
      }
      unint64_t v265 = *(void *)(v67[3] + 8 * (v264 - 1));
      if (v265 < 0x10) {
        goto LABEL_411;
      }
      switch(v263)
      {
        case 1:
          if (v264 == 2)
          {
            int v1420 = *v69;
            if (*v69)
            {
              uint64_t v1421 = 0;
              uint64_t v1422 = 0;
              uint64_t v1684 = *(void *)(v68 + 152);
              uint64_t v1638 = v123[19];
              int v1423 = (float *)v67[19];
              unint64_t v1552 = 0;
              vDSP_Length v1592 = (int)v265;
              uint64_t v1424 = 8 * (int)v265;
              do
              {
                if (v69[1])
                {
                  unint64_t v1425 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1638[2 * v1421], 1, (const float *)(v1684 + 8 * v1422), v1423, 1, v1592);
                    uint64_t v68 = *a1;
                    uint64_t v1426 = *(void **)(*a1 + 24);
                    uint64_t v1427 = v1426[1];
                    v1422 += v1427;
                    v123 = (int **)*a2;
                    unsigned int v1428 = *(int **)(*a2 + 24);
                    uint64_t v1429 = *((void *)v1428 + 1);
                    v1421 += v1429;
                    ++v1425;
                    uint64_t v69 = *(int **)*a1;
                    unint64_t v1430 = v69[1];
                    int v1423 = (float *)((char *)v1423 + v1424);
                  }
                  while (v1425 < v1430);
                  int v1420 = *v69;
                  v124 = *v123;
                }
                else
                {
                  unint64_t v1430 = 0;
                  uint64_t v1426 = *(void **)(v68 + 24);
                  uint64_t v1427 = v1426[1];
                  unsigned int v1428 = v123[3];
                  uint64_t v1429 = *((void *)v1428 + 1);
                }
                uint64_t v1422 = *v1426 + v1422 - v1430 * v1427;
                uint64_t v1421 = *(void *)v1428 + v1421 - v1429 * v124[1];
                ++v1552;
              }
              while (v1552 < v1420);
            }
          }
          else if (v264 == 1)
          {
            if (*v69)
            {
              unint64_t v911 = 0;
              uint64_t v912 = 0;
              uint64_t v913 = 0;
              uint64_t v914 = *(void *)(v68 + 152);
              uint64_t v915 = v123[19];
              vDSP_Length v916 = (int)v265;
              uint64_t v917 = 8 * (int)v265;
              uint64_t v918 = (float *)v67[19];
              do
              {
                vDSP_vsmul((const float *)&v915[2 * v912], 1, (const float *)(v914 + 8 * v913), v918, 1, v916);
                v913 += **(void **)(*a1 + 24);
                v912 += **(void **)(*a2 + 24);
                ++v911;
                uint64_t v918 = (float *)((char *)v918 + v917);
              }
              while (v911 < **(int **)*a1);
            }
          }
          else if (v67[6])
          {
            unint64_t v1431 = 0;
            uint64_t v1639 = v123[19];
            uint64_t v1685 = *(void *)(v68 + 152);
            vDSP_Length v1593 = (int)v265;
            uint64_t v1432 = (float *)v67[19];
            do
            {
              uint64_t v1433 = *(void *)*a1;
              unint64_t v1434 = (unint64_t)(*(void *)(*a1 + 8) - v1433) >> 2;
              uint64_t v1435 = 0;
              uint64_t v1436 = (v1434 - 1);
              if ((int)v1434 - 1 >= 0)
              {
                uint64_t v1437 = *(void *)(*a1 + 24);
                int v1438 = v1431;
                do
                {
                  ldiv_t v1439 = ldiv(v1438, *(int *)(v1433 + 4 * v1436));
                  int v1438 = v1439.quot;
                  v1435 += *(void *)(v1437 + 8 * v1436--) * v1439.rem;
                }
                while (v1436 != -1);
              }
              uint64_t v1440 = *(void *)*a2;
              unint64_t v1441 = (unint64_t)(*(void *)(*a2 + 8) - v1440) >> 2;
              uint64_t v1442 = 0;
              uint64_t v1443 = (v1441 - 1);
              if ((int)v1441 - 1 >= 0)
              {
                uint64_t v1444 = *(void *)(*a2 + 24);
                int v1445 = v1431;
                do
                {
                  ldiv_t v1446 = ldiv(v1445, *(int *)(v1440 + 4 * v1443));
                  int v1445 = v1446.quot;
                  v1442 += *(void *)(v1444 + 8 * v1443--) * v1446.rem;
                }
                while (v1443 != -1);
              }
              vDSP_vsmul((const float *)&v1639[2 * (int)v1442], 1, (const float *)(v1685 + 8 * (int)v1435), v1432, 1, v1593);
              v1432 += 2 * v1593;
              v1431 += v1593;
            }
            while (v1431 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v264 == 2)
          {
            int v1447 = *v69;
            if (*v69)
            {
              uint64_t v1448 = 0;
              uint64_t v1449 = 0;
              uint64_t v1686 = *(void *)(v68 + 152);
              int v1640 = v123[19];
              uint64_t v1450 = (float *)v67[19];
              unint64_t v1553 = 0;
              vDSP_Length v1594 = (int)v265;
              uint64_t v1451 = 8 * (int)v265;
              do
              {
                if (v69[1])
                {
                  unint64_t v1452 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1686 + 8 * v1449), 1, (const float *)&v1640[2 * v1448], v1450, 1, v1594);
                    uint64_t v68 = *a1;
                    uint64_t v1453 = *(void **)(*a1 + 24);
                    uint64_t v1454 = v1453[1];
                    v1449 += v1454;
                    v123 = (int **)*a2;
                    v1455 = *(int **)(*a2 + 24);
                    uint64_t v1456 = *((void *)v1455 + 1);
                    v1448 += v1456;
                    ++v1452;
                    uint64_t v69 = *(int **)*a1;
                    unint64_t v1457 = v69[1];
                    uint64_t v1450 = (float *)((char *)v1450 + v1451);
                  }
                  while (v1452 < v1457);
                  int v1447 = *v69;
                  v124 = *v123;
                }
                else
                {
                  unint64_t v1457 = 0;
                  uint64_t v1453 = *(void **)(v68 + 24);
                  uint64_t v1454 = v1453[1];
                  v1455 = v123[3];
                  uint64_t v1456 = *((void *)v1455 + 1);
                }
                uint64_t v1449 = *v1453 + v1449 - v1457 * v1454;
                uint64_t v1448 = *(void *)v1455 + v1448 - v1456 * v124[1];
                ++v1553;
              }
              while (v1553 < v1447);
            }
          }
          else if (v264 == 1)
          {
            if (*v69)
            {
              unint64_t v919 = 0;
              uint64_t v920 = 0;
              uint64_t v921 = 0;
              uint64_t v922 = *(void *)(v68 + 152);
              v923 = v123[19];
              vDSP_Length v924 = (int)v265;
              uint64_t v925 = 8 * (int)v265;
              unint64_t v926 = (float *)v67[19];
              do
              {
                vDSP_vsmul((const float *)(v922 + 8 * v921), 1, (const float *)&v923[2 * v920], v926, 1, v924);
                v921 += **(void **)(*a1 + 24);
                v920 += **(void **)(*a2 + 24);
                ++v919;
                unint64_t v926 = (float *)((char *)v926 + v925);
              }
              while (v919 < **(int **)*a1);
            }
          }
          else if (v67[6])
          {
            unint64_t v1458 = 0;
            ldiv_t v1641 = v123[19];
            uint64_t v1687 = *(void *)(v68 + 152);
            vDSP_Length v1595 = (int)v265;
            int v1459 = (float *)v67[19];
            do
            {
              uint64_t v1460 = *(void *)*a1;
              unint64_t v1461 = (unint64_t)(*(void *)(*a1 + 8) - v1460) >> 2;
              uint64_t v1462 = 0;
              uint64_t v1463 = (v1461 - 1);
              if ((int)v1461 - 1 >= 0)
              {
                uint64_t v1464 = *(void *)(*a1 + 24);
                int v1465 = v1458;
                do
                {
                  ldiv_t v1466 = ldiv(v1465, *(int *)(v1460 + 4 * v1463));
                  int v1465 = v1466.quot;
                  v1462 += *(void *)(v1464 + 8 * v1463--) * v1466.rem;
                }
                while (v1463 != -1);
              }
              uint64_t v1467 = *(void *)*a2;
              unint64_t v1468 = (unint64_t)(*(void *)(*a2 + 8) - v1467) >> 2;
              uint64_t v1469 = 0;
              uint64_t v1470 = (v1468 - 1);
              if ((int)v1468 - 1 >= 0)
              {
                uint64_t v1471 = *(void *)(*a2 + 24);
                int v1472 = v1458;
                do
                {
                  ldiv_t v1473 = ldiv(v1472, *(int *)(v1467 + 4 * v1470));
                  int v1472 = v1473.quot;
                  v1469 += *(void *)(v1471 + 8 * v1470--) * v1473.rem;
                }
                while (v1470 != -1);
              }
              vDSP_vsmul((const float *)(v1687 + 8 * (int)v1462), 1, (const float *)&v1641[2 * (int)v1469], v1459, 1, v1595);
              v1459 += 2 * v1595;
              v1458 += v1595;
            }
            while (v1458 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v264 == 2)
          {
            int v1084 = *v69;
            if (*v69)
            {
              uint64_t v1085 = 0;
              uint64_t v1086 = 0;
              uint64_t v1664 = *(void *)(v68 + 152);
              uint64_t v1618 = v123[19];
              uint64_t v1087 = (float *)v67[19];
              unint64_t v1546 = 0;
              vDSP_Length v1572 = (int)v265;
              uint64_t v1088 = 8 * (int)v265;
              do
              {
                if (v69[1])
                {
                  unint64_t v1089 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1664 + 8 * v1086), 1, (const float *)&v1618[2 * v1085], 1, v1087, 1, v1572);
                    uint64_t v68 = *a1;
                    uint64_t v1090 = *(void **)(*a1 + 24);
                    uint64_t v1091 = v1090[1];
                    v1086 += v1091;
                    v123 = (int **)*a2;
                    uint64_t v1092 = *(int **)(*a2 + 24);
                    uint64_t v1093 = *((void *)v1092 + 1);
                    v1085 += v1093;
                    ++v1089;
                    uint64_t v69 = *(int **)*a1;
                    unint64_t v1094 = v69[1];
                    uint64_t v1087 = (float *)((char *)v1087 + v1088);
                  }
                  while (v1089 < v1094);
                  int v1084 = *v69;
                  v124 = *v123;
                }
                else
                {
                  unint64_t v1094 = 0;
                  uint64_t v1090 = *(void **)(v68 + 24);
                  uint64_t v1091 = v1090[1];
                  uint64_t v1092 = v123[3];
                  uint64_t v1093 = *((void *)v1092 + 1);
                }
                uint64_t v1086 = *v1090 + v1086 - v1094 * v1091;
                uint64_t v1085 = *(void *)v1092 + v1085 - v1093 * v124[1];
                ++v1546;
              }
              while (v1546 < v1084);
            }
          }
          else if (v264 == 1)
          {
            if (*v69)
            {
              unint64_t v266 = 0;
              uint64_t v267 = 0;
              uint64_t v268 = 0;
              uint64_t v269 = *(void *)(v68 + 152);
              unsigned int v270 = v123[19];
              vDSP_Length v271 = (int)v265;
              uint64_t v272 = 8 * (int)v265;
              int v273 = (float *)v67[19];
              do
              {
                vDSP_vmul((const float *)(v269 + 8 * v268), 1, (const float *)&v270[2 * v267], 1, v273, 1, v271);
                v268 += **(void **)(*a1 + 24);
                v267 += **(void **)(*a2 + 24);
                ++v266;
                int v273 = (float *)((char *)v273 + v272);
              }
              while (v266 < **(int **)*a1);
            }
          }
          else if (v67[6])
          {
            unint64_t v1095 = 0;
            uint64_t v1619 = v123[19];
            uint64_t v1665 = *(void *)(v68 + 152);
            vDSP_Length v1573 = (int)v265;
            uint64_t v1096 = (float *)v67[19];
            do
            {
              uint64_t v1097 = *(void *)*a1;
              unint64_t v1098 = (unint64_t)(*(void *)(*a1 + 8) - v1097) >> 2;
              uint64_t v1099 = 0;
              uint64_t v1100 = (v1098 - 1);
              if ((int)v1098 - 1 >= 0)
              {
                uint64_t v1101 = *(void *)(*a1 + 24);
                int v1102 = v1095;
                do
                {
                  ldiv_t v1103 = ldiv(v1102, *(int *)(v1097 + 4 * v1100));
                  int v1102 = v1103.quot;
                  v1099 += *(void *)(v1101 + 8 * v1100--) * v1103.rem;
                }
                while (v1100 != -1);
              }
              uint64_t v1104 = *(void *)*a2;
              unint64_t v1105 = (unint64_t)(*(void *)(*a2 + 8) - v1104) >> 2;
              uint64_t v1106 = 0;
              uint64_t v1107 = (v1105 - 1);
              if ((int)v1105 - 1 >= 0)
              {
                uint64_t v1108 = *(void *)(*a2 + 24);
                int v1109 = v1095;
                do
                {
                  ldiv_t v1110 = ldiv(v1109, *(int *)(v1104 + 4 * v1107));
                  int v1109 = v1110.quot;
                  v1106 += *(void *)(v1108 + 8 * v1107--) * v1110.rem;
                }
                while (v1107 != -1);
              }
              vDSP_vmul((const float *)(v1665 + 8 * (int)v1099), 1, (const float *)&v1619[2 * (int)v1106], 1, v1096, 1, v1573);
              v1096 += 2 * v1573;
              v1095 += v1573;
            }
            while (v1095 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_411:
          switch(v261)
          {
            case 1uLL:
              uint64_t v274 = v67[6];
              if (v274)
              {
                int v275 = *(void **)(v68 + 152);
                unsigned int v276 = v123[19];
                int v277 = (void *)v67[19];
                uint64_t v278 = 8 * *(void *)v123[3];
                uint64_t v279 = 8 * **(void **)(v68 + 24);
                do
                {
                  *v277++ = *(void *)v276 * *v275;
                  unsigned int v276 = (int *)((char *)v276 + v278);
                  int v275 = (void *)((char *)v275 + v279);
                  --v274;
                }
                while (v274);
              }
              break;
            case 2uLL:
              uint64_t v689 = *v69;
              if (v689)
              {
                uint64_t v690 = 0;
                uint64_t v691 = 0;
                uint64_t v692 = 0;
                uint64_t v693 = 0;
                uint64_t v694 = *(void *)(v68 + 152);
                uint64_t v695 = v123[19];
                uint64_t v696 = v67[19];
                unint64_t v697 = v69[1];
                uint64_t v698 = *(uint64_t **)(v68 + 24);
                uint64_t v699 = *v698;
                uint64_t v700 = v698[1];
                uint64_t v701 = v123[3];
                uint64_t v702 = *(void *)v701;
                uint64_t v703 = *((void *)v701 + 1);
                uint64_t v704 = v702 - v703 * v124[1];
                if (v697 <= 1) {
                  uint64_t v705 = 1;
                }
                else {
                  uint64_t v705 = v69[1];
                }
                uint64_t v706 = v699 - v700 * v697;
                do
                {
                  if (v697)
                  {
                    uint64_t v707 = v691 + v705;
                    int v708 = (void *)(v696 + 8 * v691);
                    uint64_t v709 = v705;
                    do
                    {
                      *v708++ = *(void *)&v695[2 * v692] * *(void *)(v694 + 8 * v693);
                      v693 += v700;
                      v692 += v703;
                      --v709;
                    }
                    while (v709);
                    uint64_t v691 = v707;
                  }
                  v693 += v706;
                  v692 += v704;
                  ++v690;
                }
                while (v690 != v689);
              }
              break;
            case 3uLL:
              uint64_t v710 = *v69;
              if (v710)
              {
                uint64_t v711 = 0;
                uint64_t v712 = 0;
                uint64_t v713 = 0;
                uint64_t v714 = 0;
                uint64_t v715 = *(void *)(v68 + 152);
                uint64_t v716 = v123[19];
                uint64_t v717 = v67[19];
                unint64_t v718 = v69[1];
                uint64_t v719 = *(void **)(v68 + 24);
                uint64_t v720 = v719[1];
                v721 = v123[3];
                uint64_t v722 = *((void *)v721 + 1);
                uint64_t v723 = *(void *)v721 - v722 * v124[1];
                if (v718 <= 1) {
                  uint64_t v724 = 1;
                }
                else {
                  uint64_t v724 = v69[1];
                }
                unint64_t v725 = *v719 - v720 * v718;
                do
                {
                  if (v718)
                  {
                    uint64_t v726 = 0;
                    unint64_t v727 = v69[2];
                    uint64_t v728 = v719[2];
                    uint64_t v729 = *((void *)v721 + 2);
                    if (v727 <= 1) {
                      uint64_t v730 = 1;
                    }
                    else {
                      uint64_t v730 = v69[2];
                    }
                    uint64_t v731 = v722 - v729 * v124[2];
                    do
                    {
                      uint64_t v732 = v730;
                      if (v727)
                      {
                        do
                        {
                          *(void *)(v717 + 8 * v712++) = *(void *)&v716[2 * v713] * *(void *)(v715 + 8 * v714);
                          v714 += v728;
                          v713 += v729;
                          --v732;
                        }
                        while (v732);
                      }
                      v714 += v720 - v728 * v727;
                      v713 += v731;
                      ++v726;
                    }
                    while (v726 != v724);
                  }
                  v714 += v725;
                  v713 += v723;
                  ++v711;
                }
                while (v711 != v710);
              }
              break;
            case 4uLL:
              uint64_t v1653 = *v69;
              if (v1653)
              {
                uint64_t v733 = 0;
                uint64_t v734 = 0;
                uint64_t v735 = 0;
                uint64_t v736 = 0;
                uint64_t v737 = *(void *)(v68 + 152);
                v738 = v123[19];
                uint64_t v739 = v67[19];
                unint64_t v740 = v69[1];
                int v741 = *(void **)(v68 + 24);
                int v742 = v123[3];
                uint64_t v1528 = *((void *)v742 + 1);
                uint64_t v1534 = v741[1];
                uint64_t v1561 = *(void *)v742 - v1528 * v124[1];
                int v1607 = v69[1];
                if (v740 <= 1) {
                  uint64_t v743 = 1;
                }
                else {
                  uint64_t v743 = v69[1];
                }
                unint64_t v1541 = *v741 - v741[1] * v740;
                do
                {
                  if (v1607)
                  {
                    uint64_t v744 = 0;
                    unint64_t v745 = v69[2];
                    uint64_t v746 = v741[2];
                    uint64_t v747 = *((void *)v742 + 2);
                    if (v745 <= 1) {
                      uint64_t v748 = 1;
                    }
                    else {
                      uint64_t v748 = v69[2];
                    }
                    uint64_t v749 = v1528 - v747 * v124[2];
                    do
                    {
                      if (v745)
                      {
                        uint64_t v750 = 0;
                        unint64_t v751 = v69[3];
                        uint64_t v752 = v741[3];
                        uint64_t v753 = *((void *)v742 + 3);
                        if (v751 <= 1) {
                          uint64_t v754 = 1;
                        }
                        else {
                          uint64_t v754 = v69[3];
                        }
                        uint64_t v755 = v747 - v753 * v124[3];
                        do
                        {
                          uint64_t v756 = v754;
                          if (v751)
                          {
                            do
                            {
                              *(void *)(v739 + 8 * v734++) = *(void *)&v738[2 * v735] * *(void *)(v737 + 8 * v736);
                              v736 += v752;
                              v735 += v753;
                              --v756;
                            }
                            while (v756);
                          }
                          v736 += v746 - v752 * v751;
                          v735 += v755;
                          ++v750;
                        }
                        while (v750 != v748);
                      }
                      v736 += v1534 - v746 * v745;
                      v735 += v749;
                      ++v744;
                    }
                    while (v744 != v743);
                  }
                  v736 += v1541;
                  v735 += v1561;
                  ++v733;
                }
                while (v733 != v1653);
              }
              break;
            default:
              uint64_t v1606 = v67[6];
              uint64_t v1652 = v71;
              if (v1606)
              {
                uint64_t v678 = 0;
                ldiv_t v1540 = v123[19];
                uint64_t v1560 = *(void *)(v68 + 152);
                uint64_t v1533 = v67[19];
                do
                {
                  uint64_t v679 = v1652;
                  if ((v1652 & 0x80000000) != 0)
                  {
                    LODWORD(v680) = 0;
                  }
                  else
                  {
                    uint64_t v680 = 0;
                    uint64_t v681 = *(void *)(v68 + 24);
                    int v682 = v678;
                    do
                    {
                      ldiv_t v683 = ldiv(v682, v69[v679]);
                      int v682 = v683.quot;
                      v680 += *(void *)(v681 + 8 * v679--) * v683.rem;
                    }
                    while (v679 != -1);
                  }
                  uint64_t v684 = 0;
                  if ((v126 & 0x80000000) == 0)
                  {
                    v685 = v123[3];
                    uint64_t v686 = v126;
                    int v687 = v678;
                    do
                    {
                      ldiv_t v688 = ldiv(v687, v124[v686]);
                      int v687 = v688.quot;
                      v684 += *(void *)&v685[2 * v686--] * v688.rem;
                    }
                    while (v686 != -1);
                  }
                  *(void *)(v1533 + 8 * v678++) = *(void *)&v1540[2 * (int)v684]
                                                  * *(void *)(v1560 + 8 * (int)v680);
                }
                while (v678 != v1606);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v14)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) * **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_21:
          uint64_t v15 = *(const float **)(*a1 + 152);
          uint64_t v16 = *a2;
          goto LABEL_23;
        case 2:
LABEL_22:
          uint64_t v16 = *a1;
          uint64_t v15 = *(const float **)(*a2 + 152);
LABEL_23:
          uint64_t v17 = *(float **)(*(void *)a3 + 152);
          int v18 = *(const float **)(v16 + 152);
          vDSP_Length v19 = *(void *)(v16 + 160);
          vDSP_vsmul(v18, 1, v15, v17, 1, v19);
          return;
        case 3:
LABEL_26:
          ldiv_t v20 = *(const float **)(*a1 + 152);
          uint64_t v21 = *(const float **)(*a2 + 152);
          int v22 = *(float **)(*(void *)a3 + 152);
          vDSP_Length v23 = *(void *)(*(void *)a3 + 48);
          vDSP_vmul(v20, 1, v21, 1, v22, 1, v23);
          return;
        default:
          v76 = *(void **)a3;
          uint64_t v77 = *a1;
          unsigned int v78 = *(int **)*a1;
          uint64_t v79 = (*(void *)(*a1 + 8) - (void)v78) >> 2;
          uint64_t v80 = (v79 - 1);
          if ((int)v80 >= -1) {
            int v81 = -1;
          }
          else {
            int v81 = v79 - 1;
          }
          int v82 = v81 + 1;
          int v83 = v79 + 1;
          break;
      }
      while (1)
      {
        unsigned int v84 = v83 - 2;
        if (v83 - 2 < 0) {
          break;
        }
        --v83;
        if (*(void *)(*(void *)(v77 + 24) + 8 * v84) != *(void *)(v76[3] + 8 * v84)) {
          goto LABEL_123;
        }
      }
      int v83 = v82;
LABEL_123:
      int v131 = (int **)*a2;
      int v132 = *(int **)*a2;
      uint64_t v133 = (*(void *)(*a2 + 8) - (void)v132) >> 2;
      uint64_t v134 = (v133 - 1);
      if ((int)v134 >= -1) {
        int v135 = -1;
      }
      else {
        int v135 = v133 - 1;
      }
      int v136 = v135 + 1;
      int v137 = v133 + 1;
      while (1)
      {
        unsigned int v138 = v137 - 2;
        if (v137 - 2 < 0) {
          break;
        }
        --v137;
        if (*(void *)&v131[3][2 * v138] != *(void *)(v76[3] + 8 * v138)) {
          goto LABEL_161;
        }
      }
      int v137 = v136;
LABEL_161:
      int v151 = v79 + 1;
      while (1)
      {
        unsigned int v152 = v151 - 2;
        if (v151 - 2 < 0) {
          break;
        }
        --v151;
        if (*(void *)(*(void *)(v77 + 24) + 8 * v152)) {
          goto LABEL_196;
        }
      }
      int v151 = v82;
LABEL_196:
      int v165 = v133 + 1;
      while (1)
      {
        int v166 = v165 - 2;
        if (v165 - 2 < 0) {
          break;
        }
        --v165;
        if (*(void *)&v131[3][2 * v166]) {
          goto LABEL_417;
        }
      }
      int v165 = v136;
LABEL_417:
      unint64_t v280 = (uint64_t)(v76[1] - *v76) >> 2;
      if (v83 <= v137) {
        int v281 = v137;
      }
      else {
        int v281 = v83;
      }
      if (v83 <= v165) {
        int v83 = v165;
      }
      if (v151 > v137) {
        int v137 = v151;
      }
      if (v280 > v137) {
        int v282 = 1;
      }
      else {
        int v282 = 4;
      }
      if (v280 <= v137) {
        int v137 = (uint64_t)(v76[1] - *v76) >> 2;
      }
      if (v280 <= v83) {
        int v83 = v137;
      }
      else {
        int v282 = 2;
      }
      if (v280 <= v281)
      {
        int v283 = v83;
      }
      else
      {
        int v282 = 3;
        int v283 = v281;
      }
      if (!v283) {
        goto LABEL_446;
      }
      unint64_t v284 = *(void *)(v76[3] + 8 * (v283 - 1));
      if (v284 < 0x10) {
        goto LABEL_446;
      }
      switch(v282)
      {
        case 1:
          if (v283 == 2)
          {
            int v1474 = *v78;
            if (*v78)
            {
              uint64_t v1475 = 0;
              uint64_t v1476 = 0;
              uint64_t v1688 = *(void *)(v77 + 152);
              uint64_t v1642 = v131[19];
              uint64_t v1477 = (float *)v76[19];
              unint64_t v1554 = 0;
              vDSP_Length v1596 = (int)v284;
              uint64_t v1478 = 4 * (int)v284;
              do
              {
                if (v78[1])
                {
                  unint64_t v1479 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)&v1642[v1475], 1, (const float *)(v1688 + 4 * v1476), v1477, 1, v1596);
                    uint64_t v77 = *a1;
                    int v1480 = *(void **)(*a1 + 24);
                    uint64_t v1481 = v1480[1];
                    v1476 += v1481;
                    int v131 = (int **)*a2;
                    uint64_t v1482 = *(int **)(*a2 + 24);
                    uint64_t v1483 = *((void *)v1482 + 1);
                    v1475 += v1483;
                    ++v1479;
                    unsigned int v78 = *(int **)*a1;
                    unint64_t v1484 = v78[1];
                    uint64_t v1477 = (float *)((char *)v1477 + v1478);
                  }
                  while (v1479 < v1484);
                  int v1474 = *v78;
                  int v132 = *v131;
                }
                else
                {
                  unint64_t v1484 = 0;
                  int v1480 = *(void **)(v77 + 24);
                  uint64_t v1481 = v1480[1];
                  uint64_t v1482 = v131[3];
                  uint64_t v1483 = *((void *)v1482 + 1);
                }
                uint64_t v1476 = *v1480 + v1476 - v1484 * v1481;
                uint64_t v1475 = *(void *)v1482 + v1475 - v1483 * v132[1];
                ++v1554;
              }
              while (v1554 < v1474);
            }
          }
          else if (v283 == 1)
          {
            if (*v78)
            {
              unint64_t v927 = 0;
              uint64_t v928 = 0;
              uint64_t v929 = 0;
              uint64_t v930 = *(void *)(v77 + 152);
              uint64_t v931 = v131[19];
              vDSP_Length v932 = (int)v284;
              uint64_t v933 = 4 * (int)v284;
              unint64_t v934 = (float *)v76[19];
              do
              {
                vDSP_vsmul((const float *)&v931[v928], 1, (const float *)(v930 + 4 * v929), v934, 1, v932);
                v929 += **(void **)(*a1 + 24);
                v928 += **(void **)(*a2 + 24);
                ++v927;
                unint64_t v934 = (float *)((char *)v934 + v933);
              }
              while (v927 < **(int **)*a1);
            }
          }
          else if (v76[6])
          {
            unint64_t v1485 = 0;
            uint64_t v1643 = v131[19];
            uint64_t v1689 = *(void *)(v77 + 152);
            vDSP_Length v1597 = (int)v284;
            uint64_t v1486 = (float *)v76[19];
            do
            {
              uint64_t v1487 = *(void *)*a1;
              unint64_t v1488 = (unint64_t)(*(void *)(*a1 + 8) - v1487) >> 2;
              uint64_t v1489 = 0;
              uint64_t v1490 = (v1488 - 1);
              if ((int)v1488 - 1 >= 0)
              {
                uint64_t v1491 = *(void *)(*a1 + 24);
                int v1492 = v1485;
                do
                {
                  ldiv_t v1493 = ldiv(v1492, *(int *)(v1487 + 4 * v1490));
                  int v1492 = v1493.quot;
                  v1489 += *(void *)(v1491 + 8 * v1490--) * v1493.rem;
                }
                while (v1490 != -1);
              }
              uint64_t v1494 = *(void *)*a2;
              unint64_t v1495 = (unint64_t)(*(void *)(*a2 + 8) - v1494) >> 2;
              uint64_t v1496 = 0;
              uint64_t v1497 = (v1495 - 1);
              if ((int)v1495 - 1 >= 0)
              {
                uint64_t v1498 = *(void *)(*a2 + 24);
                int v1499 = v1485;
                do
                {
                  ldiv_t v1500 = ldiv(v1499, *(int *)(v1494 + 4 * v1497));
                  int v1499 = v1500.quot;
                  v1496 += *(void *)(v1498 + 8 * v1497--) * v1500.rem;
                }
                while (v1497 != -1);
              }
              vDSP_vsmul((const float *)&v1643[(int)v1496], 1, (const float *)(v1689 + 4 * (int)v1489), v1486, 1, v1597);
              v1486 += v1597;
              v1485 += v1597;
            }
            while (v1485 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v283 == 2)
          {
            int v1501 = *v78;
            if (*v78)
            {
              uint64_t v1502 = 0;
              uint64_t v1503 = 0;
              uint64_t v1690 = *(void *)(v77 + 152);
              uint64_t v1644 = v131[19];
              uint64_t v1504 = (float *)v76[19];
              unint64_t v1555 = 0;
              vDSP_Length v1598 = (int)v284;
              uint64_t v1505 = 4 * (int)v284;
              do
              {
                if (v78[1])
                {
                  unint64_t v1506 = 0;
                  do
                  {
                    vDSP_vsmul((const float *)(v1690 + 4 * v1503), 1, (const float *)&v1644[v1502], v1504, 1, v1598);
                    uint64_t v77 = *a1;
                    int v1507 = *(void **)(*a1 + 24);
                    uint64_t v1508 = v1507[1];
                    v1503 += v1508;
                    int v131 = (int **)*a2;
                    uint64_t v1509 = *(int **)(*a2 + 24);
                    uint64_t v1510 = *((void *)v1509 + 1);
                    v1502 += v1510;
                    ++v1506;
                    unsigned int v78 = *(int **)*a1;
                    unint64_t v1511 = v78[1];
                    uint64_t v1504 = (float *)((char *)v1504 + v1505);
                  }
                  while (v1506 < v1511);
                  int v1501 = *v78;
                  int v132 = *v131;
                }
                else
                {
                  unint64_t v1511 = 0;
                  int v1507 = *(void **)(v77 + 24);
                  uint64_t v1508 = v1507[1];
                  uint64_t v1509 = v131[3];
                  uint64_t v1510 = *((void *)v1509 + 1);
                }
                uint64_t v1503 = *v1507 + v1503 - v1511 * v1508;
                uint64_t v1502 = *(void *)v1509 + v1502 - v1510 * v132[1];
                ++v1555;
              }
              while (v1555 < v1501);
            }
          }
          else if (v283 == 1)
          {
            if (*v78)
            {
              unint64_t v935 = 0;
              uint64_t v936 = 0;
              uint64_t v937 = 0;
              uint64_t v938 = *(void *)(v77 + 152);
              uint64_t v939 = v131[19];
              vDSP_Length v940 = (int)v284;
              uint64_t v941 = 4 * (int)v284;
              v942 = (float *)v76[19];
              do
              {
                vDSP_vsmul((const float *)(v938 + 4 * v937), 1, (const float *)&v939[v936], v942, 1, v940);
                v937 += **(void **)(*a1 + 24);
                v936 += **(void **)(*a2 + 24);
                ++v935;
                v942 = (float *)((char *)v942 + v941);
              }
              while (v935 < **(int **)*a1);
            }
          }
          else if (v76[6])
          {
            unint64_t v1512 = 0;
            int v1645 = v131[19];
            uint64_t v1691 = *(void *)(v77 + 152);
            vDSP_Length v1599 = (int)v284;
            unint64_t v1513 = (float *)v76[19];
            do
            {
              uint64_t v1514 = *(void *)*a1;
              unint64_t v1515 = (unint64_t)(*(void *)(*a1 + 8) - v1514) >> 2;
              uint64_t v1516 = 0;
              uint64_t v1517 = (v1515 - 1);
              if ((int)v1515 - 1 >= 0)
              {
                uint64_t v1518 = *(void *)(*a1 + 24);
                int v1519 = v1512;
                do
                {
                  ldiv_t v1520 = ldiv(v1519, *(int *)(v1514 + 4 * v1517));
                  int v1519 = v1520.quot;
                  v1516 += *(void *)(v1518 + 8 * v1517--) * v1520.rem;
                }
                while (v1517 != -1);
              }
              uint64_t v1521 = *(void *)*a2;
              unint64_t v1522 = (unint64_t)(*(void *)(*a2 + 8) - v1521) >> 2;
              uint64_t v1523 = 0;
              uint64_t v1524 = (v1522 - 1);
              if ((int)v1522 - 1 >= 0)
              {
                uint64_t v1525 = *(void *)(*a2 + 24);
                int v1526 = v1512;
                do
                {
                  ldiv_t v1527 = ldiv(v1526, *(int *)(v1521 + 4 * v1524));
                  int v1526 = v1527.quot;
                  v1523 += *(void *)(v1525 + 8 * v1524--) * v1527.rem;
                }
                while (v1524 != -1);
              }
              vDSP_vsmul((const float *)(v1691 + 4 * (int)v1516), 1, (const float *)&v1645[(int)v1523], v1513, 1, v1599);
              v1513 += v1599;
              v1512 += v1599;
            }
            while (v1512 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v283 == 2)
          {
            int v1111 = *v78;
            if (*v78)
            {
              uint64_t v1112 = 0;
              uint64_t v1113 = 0;
              uint64_t v1666 = *(void *)(v77 + 152);
              uint64_t v1620 = v131[19];
              v1114 = (float *)v76[19];
              unint64_t v1547 = 0;
              vDSP_Length v1574 = (int)v284;
              uint64_t v1115 = 4 * (int)v284;
              do
              {
                if (v78[1])
                {
                  unint64_t v1116 = 0;
                  do
                  {
                    vDSP_vmul((const float *)(v1666 + 4 * v1113), 1, (const float *)&v1620[v1112], 1, v1114, 1, v1574);
                    uint64_t v77 = *a1;
                    uint64_t v1117 = *(void **)(*a1 + 24);
                    uint64_t v1118 = v1117[1];
                    v1113 += v1118;
                    int v131 = (int **)*a2;
                    unint64_t v1119 = *(int **)(*a2 + 24);
                    uint64_t v1120 = *((void *)v1119 + 1);
                    v1112 += v1120;
                    ++v1116;
                    unsigned int v78 = *(int **)*a1;
                    unint64_t v1121 = v78[1];
                    v1114 = (float *)((char *)v1114 + v1115);
                  }
                  while (v1116 < v1121);
                  int v1111 = *v78;
                  int v132 = *v131;
                }
                else
                {
                  unint64_t v1121 = 0;
                  uint64_t v1117 = *(void **)(v77 + 24);
                  uint64_t v1118 = v1117[1];
                  unint64_t v1119 = v131[3];
                  uint64_t v1120 = *((void *)v1119 + 1);
                }
                uint64_t v1113 = *v1117 + v1113 - v1121 * v1118;
                uint64_t v1112 = *(void *)v1119 + v1112 - v1120 * v132[1];
                ++v1547;
              }
              while (v1547 < v1111);
            }
          }
          else if (v283 == 1)
          {
            if (*v78)
            {
              unint64_t v285 = 0;
              uint64_t v286 = 0;
              uint64_t v287 = 0;
              uint64_t v288 = *(void *)(v77 + 152);
              unint64_t v289 = v131[19];
              vDSP_Length v290 = (int)v284;
              uint64_t v291 = 4 * (int)v284;
              int v292 = (float *)v76[19];
              do
              {
                vDSP_vmul((const float *)(v288 + 4 * v287), 1, (const float *)&v289[v286], 1, v292, 1, v290);
                v287 += **(void **)(*a1 + 24);
                v286 += **(void **)(*a2 + 24);
                ++v285;
                int v292 = (float *)((char *)v292 + v291);
              }
              while (v285 < **(int **)*a1);
            }
          }
          else if (v76[6])
          {
            unint64_t v1122 = 0;
            unint64_t v1621 = v131[19];
            uint64_t v1667 = *(void *)(v77 + 152);
            vDSP_Length v1575 = (int)v284;
            int v1123 = (float *)v76[19];
            do
            {
              uint64_t v1124 = *(void *)*a1;
              unint64_t v1125 = (unint64_t)(*(void *)(*a1 + 8) - v1124) >> 2;
              uint64_t v1126 = 0;
              uint64_t v1127 = (v1125 - 1);
              if ((int)v1125 - 1 >= 0)
              {
                uint64_t v1128 = *(void *)(*a1 + 24);
                int v1129 = v1122;
                do
                {
                  ldiv_t v1130 = ldiv(v1129, *(int *)(v1124 + 4 * v1127));
                  int v1129 = v1130.quot;
                  v1126 += *(void *)(v1128 + 8 * v1127--) * v1130.rem;
                }
                while (v1127 != -1);
              }
              uint64_t v1131 = *(void *)*a2;
              unint64_t v1132 = (unint64_t)(*(void *)(*a2 + 8) - v1131) >> 2;
              uint64_t v1133 = 0;
              uint64_t v1134 = (v1132 - 1);
              if ((int)v1132 - 1 >= 0)
              {
                uint64_t v1135 = *(void *)(*a2 + 24);
                int v1136 = v1122;
                do
                {
                  ldiv_t v1137 = ldiv(v1136, *(int *)(v1131 + 4 * v1134));
                  int v1136 = v1137.quot;
                  v1133 += *(void *)(v1135 + 8 * v1134--) * v1137.rem;
                }
                while (v1134 != -1);
              }
              vDSP_vmul((const float *)(v1667 + 4 * (int)v1126), 1, (const float *)&v1621[(int)v1133], 1, v1123, 1, v1575);
              v1123 += v1575;
              v1122 += v1575;
            }
            while (v1122 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_446:
          switch(v280)
          {
            case 1uLL:
              uint64_t v293 = v76[6];
              if (v293)
              {
                uint64_t v294 = *(float **)(v77 + 152);
                uint64_t v295 = (float *)v131[19];
                uint64_t v296 = (float *)v76[19];
                uint64_t v297 = 4 * *(void *)v131[3];
                uint64_t v298 = 4 * **(void **)(v77 + 24);
                do
                {
                  *v296++ = *v294 * *v295;
                  uint64_t v295 = (float *)((char *)v295 + v297);
                  uint64_t v294 = (float *)((char *)v294 + v298);
                  --v293;
                }
                while (v293);
              }
              break;
            case 2uLL:
              uint64_t v768 = *v78;
              if (v768)
              {
                uint64_t v769 = 0;
                uint64_t v770 = 0;
                uint64_t v771 = 0;
                uint64_t v772 = 0;
                uint64_t v773 = *(void *)(v77 + 152);
                int v774 = v131[19];
                uint64_t v775 = v76[19];
                unint64_t v776 = v78[1];
                uint64_t v777 = *(uint64_t **)(v77 + 24);
                uint64_t v778 = *v777;
                uint64_t v779 = v777[1];
                uint64_t v780 = v131[3];
                uint64_t v781 = *(void *)v780;
                uint64_t v782 = *((void *)v780 + 1);
                uint64_t v783 = v781 - v782 * v132[1];
                if (v776 <= 1) {
                  uint64_t v784 = 1;
                }
                else {
                  uint64_t v784 = v78[1];
                }
                uint64_t v785 = v778 - v779 * v776;
                do
                {
                  if (v776)
                  {
                    uint64_t v786 = v770 + v784;
                    uint64_t v787 = (float *)(v775 + 4 * v770);
                    uint64_t v788 = v784;
                    do
                    {
                      *v787++ = *(float *)(v773 + 4 * v772) * *(float *)&v774[v771];
                      v772 += v779;
                      v771 += v782;
                      --v788;
                    }
                    while (v788);
                    uint64_t v770 = v786;
                  }
                  v772 += v785;
                  v771 += v783;
                  ++v769;
                }
                while (v769 != v768);
              }
              break;
            case 3uLL:
              uint64_t v789 = *v78;
              if (v789)
              {
                uint64_t v790 = 0;
                uint64_t v791 = 0;
                uint64_t v792 = 0;
                uint64_t v793 = 0;
                uint64_t v794 = *(void *)(v77 + 152);
                uint64_t v795 = v131[19];
                uint64_t v796 = v76[19];
                unint64_t v797 = v78[1];
                uint64_t v798 = *(void **)(v77 + 24);
                uint64_t v799 = v798[1];
                v800 = v131[3];
                uint64_t v801 = *((void *)v800 + 1);
                uint64_t v802 = *(void *)v800 - v801 * v132[1];
                if (v797 <= 1) {
                  uint64_t v803 = 1;
                }
                else {
                  uint64_t v803 = v78[1];
                }
                unint64_t v804 = *v798 - v799 * v797;
                do
                {
                  if (v797)
                  {
                    uint64_t v805 = 0;
                    unint64_t v806 = v78[2];
                    uint64_t v807 = v798[2];
                    uint64_t v808 = *((void *)v800 + 2);
                    if (v806 <= 1) {
                      uint64_t v809 = 1;
                    }
                    else {
                      uint64_t v809 = v78[2];
                    }
                    uint64_t v810 = v801 - v808 * v132[2];
                    do
                    {
                      uint64_t v811 = v809;
                      if (v806)
                      {
                        do
                        {
                          *(float *)(v796 + 4 * v791++) = *(float *)(v794 + 4 * v793) * *(float *)&v795[v792];
                          v793 += v807;
                          v792 += v808;
                          --v811;
                        }
                        while (v811);
                      }
                      v793 += v799 - v807 * v806;
                      v792 += v810;
                      ++v805;
                    }
                    while (v805 != v803);
                  }
                  v793 += v804;
                  v792 += v802;
                  ++v790;
                }
                while (v790 != v789);
              }
              break;
            case 4uLL:
              uint64_t v1655 = *v78;
              if (v1655)
              {
                uint64_t v812 = 0;
                uint64_t v813 = 0;
                uint64_t v814 = 0;
                uint64_t v815 = 0;
                uint64_t v816 = *(void *)(v77 + 152);
                uint64_t v817 = v131[19];
                uint64_t v818 = v76[19];
                unint64_t v819 = v78[1];
                unint64_t v820 = *(void **)(v77 + 24);
                v821 = v131[3];
                uint64_t v1543 = *((void *)v821 + 1);
                uint64_t v1563 = v820[1];
                uint64_t v1609 = *(void *)v821 - v1543 * v132[1];
                if (v819 <= 1) {
                  uint64_t v822 = 1;
                }
                else {
                  uint64_t v822 = v78[1];
                }
                unint64_t v823 = *v820 - v820[1] * v819;
                do
                {
                  if (v819)
                  {
                    uint64_t v824 = 0;
                    unint64_t v825 = v78[2];
                    uint64_t v826 = v820[2];
                    uint64_t v827 = *((void *)v821 + 2);
                    if (v825 <= 1) {
                      uint64_t v828 = 1;
                    }
                    else {
                      uint64_t v828 = v78[2];
                    }
                    uint64_t v829 = v1543 - v827 * v132[2];
                    do
                    {
                      if (v825)
                      {
                        uint64_t v830 = 0;
                        unint64_t v831 = v78[3];
                        uint64_t v832 = v820[3];
                        uint64_t v833 = *((void *)v821 + 3);
                        if (v831 <= 1) {
                          uint64_t v834 = 1;
                        }
                        else {
                          uint64_t v834 = v78[3];
                        }
                        uint64_t v835 = v827 - v833 * v132[3];
                        do
                        {
                          uint64_t v836 = v834;
                          if (v831)
                          {
                            do
                            {
                              *(float *)(v818 + 4 * v813++) = *(float *)(v816 + 4 * v815) * *(float *)&v817[v814];
                              v815 += v832;
                              v814 += v833;
                              --v836;
                            }
                            while (v836);
                          }
                          v815 += v826 - v832 * v831;
                          v814 += v835;
                          ++v830;
                        }
                        while (v830 != v828);
                      }
                      v815 += v1563 - v826 * v825;
                      v814 += v829;
                      ++v824;
                    }
                    while (v824 != v822);
                  }
                  v815 += v823;
                  v814 += v1609;
                  ++v812;
                }
                while (v812 != v1655);
              }
              break;
            default:
              uint64_t v1608 = v76[6];
              uint64_t v1654 = v80;
              if (v1608)
              {
                uint64_t v757 = 0;
                int v1542 = v131[19];
                uint64_t v1562 = *(void *)(v77 + 152);
                uint64_t v1535 = v76[19];
                do
                {
                  uint64_t v758 = v1654;
                  if ((v1654 & 0x80000000) != 0)
                  {
                    LODWORD(v759) = 0;
                  }
                  else
                  {
                    uint64_t v759 = 0;
                    uint64_t v760 = *(void *)(v77 + 24);
                    int v761 = v757;
                    do
                    {
                      ldiv_t v762 = ldiv(v761, v78[v758]);
                      int v761 = v762.quot;
                      v759 += *(void *)(v760 + 8 * v758--) * v762.rem;
                    }
                    while (v758 != -1);
                  }
                  uint64_t v763 = 0;
                  if ((v134 & 0x80000000) == 0)
                  {
                    int v764 = v131[3];
                    uint64_t v765 = v134;
                    int v766 = v757;
                    do
                    {
                      ldiv_t v767 = ldiv(v766, v132[v765]);
                      int v766 = v767.quot;
                      v763 += *(void *)&v764[2 * v765--] * v767.rem;
                    }
                    while (v765 != -1);
                  }
                  *(float *)(v1535 + 4 * v757++) = *(float *)(v1562 + 4 * (int)v759) * *(float *)&v1542[(int)v763];
                }
                while (v757 != v1608);
              }
              break;
          }
          break;
      }
      break;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Multiply::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(unsigned char **)(*a1 + 152)) {
            BOOL v7 = **(unsigned char **)(*a2 + 152) == 0;
          }
          else {
            BOOL v7 = 1;
          }
          char v8 = !v7;
          goto LABEL_21;
        case 1:
          int v36 = *(_DWORD *)(*a2 + 160);
          if (v36 >= 1)
          {
            int v37 = **(unsigned __int8 **)(*a1 + 152);
            int v38 = *(char **)(*(void *)a3 + 152);
            int v39 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v40 = v36 + 1;
            do
            {
              int v42 = *v39++;
              int v41 = v42;
              if (v37) {
                BOOL v43 = v41 == 0;
              }
              else {
                BOOL v43 = 1;
              }
              char v44 = !v43;
              *v38++ = v44;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 2:
          int v45 = *(_DWORD *)(*a1 + 160);
          if (v45 >= 1)
          {
            int v46 = **(unsigned __int8 **)(*a2 + 152);
            int v47 = *(char **)(*(void *)a3 + 152);
            int v48 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v49 = v45 + 1;
            do
            {
              int v51 = *v48++;
              int v50 = v51;
              if (v46) {
                BOOL v52 = v50 == 0;
              }
              else {
                BOOL v52 = 1;
              }
              char v53 = !v52;
              *v47++ = v53;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        case 3:
          int v54 = *(_DWORD *)(*(void *)a3 + 48);
          if (v54 >= 1)
          {
            int v55 = *(char **)(*(void *)a3 + 152);
            int v56 = *(unsigned __int8 **)(*a2 + 152);
            unsigned int v57 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v58 = v54 + 1;
            do
            {
              int v59 = *v57++;
              BOOL v7 = v59 == 0;
              int v61 = *v56++;
              int v60 = v61;
              char v63 = !v7 && v60 != 0;
              *v55++ = v63;
              --v58;
            }
            while (v58 > 1);
          }
          return;
        default:
          uint64_t v27 = *(void **)a3;
          uint64_t v28 = (void *)*a1;
          int v29 = *(int **)*a1;
          uint64_t v30 = (v28[1] - (void)v29) >> 2;
          uint64_t v31 = (v30 - 1);
          if ((int)v31 >= -1) {
            int v32 = -1;
          }
          else {
            int v32 = v30 - 1;
          }
          int v33 = v32 + 1;
          int v34 = v30 + 1;
          break;
      }
      while (1)
      {
        unsigned int v35 = v34 - 2;
        if (v34 - 2 < 0) {
          break;
        }
        --v34;
        if (*(void *)(v28[3] + 8 * v35) != *(void *)(v27[3] + 8 * v35)) {
          goto LABEL_170;
        }
      }
      int v34 = v33;
LABEL_170:
      unint64_t v224 = (void *)*a2;
      int v225 = *(int **)*a2;
      uint64_t v226 = (v224[1] - (void)v225) >> 2;
      uint64_t v227 = (v226 - 1);
      if ((int)v227 >= -1) {
        int v228 = -1;
      }
      else {
        int v228 = v226 - 1;
      }
      int v229 = v228 + 1;
      int v230 = v226 + 1;
      while (1)
      {
        unsigned int v231 = v230 - 2;
        if (v230 - 2 < 0) {
          break;
        }
        --v230;
        if (*(void *)(v224[3] + 8 * v231) != *(void *)(v27[3] + 8 * v231)) {
          goto LABEL_224;
        }
      }
      int v230 = v229;
LABEL_224:
      int v278 = v30 + 1;
      while (1)
      {
        unsigned int v279 = v278 - 2;
        if (v278 - 2 < 0) {
          break;
        }
        --v278;
        if (*(void *)(v28[3] + 8 * v279)) {
          goto LABEL_259;
        }
      }
      int v278 = v33;
LABEL_259:
      int v292 = v226 + 1;
      while (1)
      {
        unsigned int v293 = v292 - 2;
        if (v292 - 2 < 0) {
          break;
        }
        --v292;
        if (*(void *)(v224[3] + 8 * v293)) {
          goto LABEL_294;
        }
      }
      int v292 = v229;
LABEL_294:
      unint64_t v306 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v230) {
        int v307 = v230;
      }
      else {
        int v307 = v34;
      }
      if (v34 <= v292) {
        int v34 = v292;
      }
      if (v278 > v230) {
        int v230 = v278;
      }
      if (v306 > v230)
      {
        int v308 = 1;
      }
      else
      {
        int v230 = (uint64_t)(v27[1] - *v27) >> 2;
        int v308 = 4;
      }
      if (v306 > v34)
      {
        int v309 = 2;
      }
      else
      {
        int v34 = v230;
        int v309 = v308;
      }
      if (v306 > v307)
      {
        int v34 = v307;
        int v309 = 3;
      }
      uint64_t v1980 = v227;
      uint64_t v1996 = v31;
      if (!v34) {
        goto LABEL_329;
      }
      unint64_t v310 = *(void *)(v27[3] + 8 * (v34 - 1));
      if (v310 < 0x10) {
        goto LABEL_329;
      }
      switch(v309)
      {
        case 1:
          if (v34 == 2)
          {
            uint64_t v1382 = *v29;
            if (v1382)
            {
              uint64_t v1383 = 0;
              uint64_t v1384 = 0;
              uint64_t v1385 = 0;
              uint64_t v1386 = v28[19];
              uint64_t v1387 = v224[19];
              uint64_t v1388 = v27[19];
              unint64_t v1389 = v29[1];
              uint64_t v1390 = (uint64_t *)v28[3];
              uint64_t v1391 = *v1390;
              uint64_t v1392 = v1390[1];
              int v1393 = (uint64_t *)v224[3];
              uint64_t v1395 = *v1393;
              uint64_t v1394 = v1393[1];
              if (v1389 <= 1) {
                uint64_t v1396 = 1;
              }
              else {
                uint64_t v1396 = v29[1];
              }
              uint64_t v1397 = v1391 - v1392 * v1389;
              uint64_t v1398 = v1395 - v1394 * v225[1];
              do
              {
                if (v1389)
                {
                  uint64_t v1399 = 0;
                  uint64_t v1400 = v1387 + v1384;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1401 = 0;
                      int v1402 = *(unsigned __int8 *)(v1386 + v1385);
                      unsigned int v1403 = v310 + 1;
                      do
                      {
                        if (v1402) {
                          BOOL v1404 = *(unsigned char *)(v1400 + v1401) == 0;
                        }
                        else {
                          BOOL v1404 = 1;
                        }
                        char v1405 = !v1404;
                        *(unsigned char *)(v1388 + v1401) = v1405;
                        --v1403;
                        ++v1401;
                      }
                      while (v1403 > 1);
                    }
                    v1385 += v1392;
                    v1384 += v1394;
                    v1388 += (int)v310;
                    ++v1399;
                    v1400 += v1394;
                  }
                  while (v1399 != v1396);
                }
                v1385 += v1397;
                v1384 += v1398;
                ++v1383;
              }
              while (v1383 != v1382);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v992 = *v29;
            if (v992)
            {
              uint64_t v993 = 0;
              uint64_t v994 = 0;
              uint64_t v995 = v28[19];
              uint64_t v996 = v224[19];
              uint64_t v997 = v27[19];
              uint64_t v998 = *(void *)v28[3];
              uint64_t v999 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v1000 = 0;
                  int v1001 = *(unsigned __int8 *)(v995 + v994);
                  unsigned int v1002 = v310 + 1;
                  do
                  {
                    if (v1001) {
                      BOOL v1003 = *(unsigned char *)(v996 + v1000) == 0;
                    }
                    else {
                      BOOL v1003 = 1;
                    }
                    char v1004 = !v1003;
                    *(unsigned char *)(v997 + v1000) = v1004;
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                }
                v994 += v998;
                v997 += (int)v310;
                ++v993;
                v996 += v999;
              }
              while (v993 != v992);
            }
          }
          else
          {
            unint64_t v1937 = v27[6];
            if (v1937)
            {
              unint64_t v1966 = 0;
              uint64_t v1889 = v224[19];
              uint64_t v1903 = v28[19];
              uint64_t v1406 = v27[19];
              do
              {
                uint64_t v1407 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1408 = v28[3];
                  int quot = v1966;
                  do
                  {
                    ldiv_t v1410 = ldiv(quot, v29[v31]);
                    int quot = v1410.quot;
                    v1407 += *(void *)(v1408 + 8 * v31--) * v1410.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1411 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1412) = 0;
                }
                else
                {
                  uint64_t v1412 = 0;
                  uint64_t v1413 = v224[3];
                  int v1414 = v1966;
                  do
                  {
                    ldiv_t v1415 = ldiv(v1414, v225[v1411]);
                    int v1414 = v1415.quot;
                    v1412 += *(void *)(v1413 + 8 * v1411--) * v1415.rem;
                  }
                  while (v1411 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1416 = 0;
                  int v1417 = *(unsigned __int8 *)(v1903 + (int)v1407);
                  unsigned int v1418 = v310 + 1;
                  do
                  {
                    if (v1417) {
                      BOOL v1419 = *(unsigned char *)(v1889 + (int)v1412 + v1416) == 0;
                    }
                    else {
                      BOOL v1419 = 1;
                    }
                    char v1420 = !v1419;
                    *(unsigned char *)(v1406 + v1416) = v1420;
                    --v1418;
                    ++v1416;
                  }
                  while (v1418 > 1);
                }
                v1406 += (int)v310;
                v1966 += (int)v310;
              }
              while (v1966 < v1937);
            }
          }
          break;
        case 2:
          if (v34 == 2)
          {
            uint64_t v1421 = *v29;
            if (v1421)
            {
              uint64_t v1422 = 0;
              uint64_t v1423 = 0;
              uint64_t v1424 = 0;
              uint64_t v1425 = v28[19];
              uint64_t v1426 = v224[19];
              uint64_t v1427 = v27[19];
              unint64_t v1428 = v29[1];
              uint64_t v1429 = (uint64_t *)v28[3];
              uint64_t v1430 = *v1429;
              uint64_t v1431 = v1429[1];
              uint64_t v1432 = (uint64_t *)v224[3];
              uint64_t v1434 = *v1432;
              uint64_t v1433 = v1432[1];
              if (v1428 <= 1) {
                uint64_t v1435 = 1;
              }
              else {
                uint64_t v1435 = v29[1];
              }
              uint64_t v1436 = v1430 - v1431 * v1428;
              uint64_t v1437 = v1434 - v1433 * v225[1];
              do
              {
                if (v1428)
                {
                  uint64_t v1438 = 0;
                  uint64_t v1439 = v1425 + v1424;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1440 = 0;
                      int v1441 = *(unsigned __int8 *)(v1426 + v1423);
                      unsigned int v1442 = v310 + 1;
                      do
                      {
                        if (v1441) {
                          BOOL v1443 = *(unsigned char *)(v1439 + v1440) == 0;
                        }
                        else {
                          BOOL v1443 = 1;
                        }
                        char v1444 = !v1443;
                        *(unsigned char *)(v1427 + v1440) = v1444;
                        --v1442;
                        ++v1440;
                      }
                      while (v1442 > 1);
                    }
                    v1424 += v1431;
                    v1423 += v1433;
                    v1427 += (int)v310;
                    ++v1438;
                    v1439 += v1431;
                  }
                  while (v1438 != v1435);
                }
                v1424 += v1436;
                v1423 += v1437;
                ++v1422;
              }
              while (v1422 != v1421);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v1005 = *v29;
            if (v1005)
            {
              uint64_t v1006 = 0;
              uint64_t v1007 = 0;
              uint64_t v1008 = v28[19];
              uint64_t v1009 = v224[19];
              uint64_t v1010 = v27[19];
              uint64_t v1011 = *(void *)v28[3];
              uint64_t v1012 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v1013 = 0;
                  int v1014 = *(unsigned __int8 *)(v1009 + v1007);
                  unsigned int v1015 = v310 + 1;
                  do
                  {
                    if (v1014) {
                      BOOL v1016 = *(unsigned char *)(v1008 + v1013) == 0;
                    }
                    else {
                      BOOL v1016 = 1;
                    }
                    char v1017 = !v1016;
                    *(unsigned char *)(v1010 + v1013) = v1017;
                    --v1015;
                    ++v1013;
                  }
                  while (v1015 > 1);
                }
                v1007 += v1012;
                v1010 += (int)v310;
                ++v1006;
                v1008 += v1011;
              }
              while (v1006 != v1005);
            }
          }
          else
          {
            unint64_t v1938 = v27[6];
            if (v1938)
            {
              unint64_t v1967 = 0;
              uint64_t v1890 = v224[19];
              uint64_t v1904 = v28[19];
              uint64_t v1445 = v27[19];
              do
              {
                uint64_t v1446 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1447 = v28[3];
                  int v1448 = v1967;
                  do
                  {
                    ldiv_t v1449 = ldiv(v1448, v29[v31]);
                    int v1448 = v1449.quot;
                    v1446 += *(void *)(v1447 + 8 * v31--) * v1449.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1450 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1451) = 0;
                }
                else
                {
                  uint64_t v1451 = 0;
                  uint64_t v1452 = v224[3];
                  int v1453 = v1967;
                  do
                  {
                    ldiv_t v1454 = ldiv(v1453, v225[v1450]);
                    int v1453 = v1454.quot;
                    v1451 += *(void *)(v1452 + 8 * v1450--) * v1454.rem;
                  }
                  while (v1450 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1455 = 0;
                  int v1456 = *(unsigned __int8 *)(v1890 + (int)v1451);
                  unsigned int v1457 = v310 + 1;
                  do
                  {
                    if (v1456) {
                      BOOL v1458 = *(unsigned char *)(v1904 + (int)v1446 + v1455) == 0;
                    }
                    else {
                      BOOL v1458 = 1;
                    }
                    char v1459 = !v1458;
                    *(unsigned char *)(v1445 + v1455) = v1459;
                    --v1457;
                    ++v1455;
                  }
                  while (v1457 > 1);
                }
                v1445 += (int)v310;
                v1967 += (int)v310;
              }
              while (v1967 < v1938);
            }
          }
          break;
        case 3:
          if (v34 == 2)
          {
            uint64_t v1146 = *v29;
            if (v1146)
            {
              uint64_t v1147 = 0;
              uint64_t v1148 = 0;
              uint64_t v1149 = 0;
              uint64_t v1150 = v28[19];
              uint64_t v1151 = v224[19];
              uint64_t v1152 = v27[19];
              unint64_t v1153 = v29[1];
              uint64_t v1154 = (uint64_t *)v28[3];
              uint64_t v1155 = *v1154;
              uint64_t v1156 = v1154[1];
              ldiv_t v1157 = (uint64_t *)v224[3];
              uint64_t v1159 = *v1157;
              uint64_t v1158 = v1157[1];
              if (v1153 <= 1) {
                uint64_t v1160 = 1;
              }
              else {
                uint64_t v1160 = v29[1];
              }
              uint64_t v1161 = v1155 - v1156 * v1153;
              uint64_t v1162 = v1159 - v1158 * v225[1];
              do
              {
                if (v1153)
                {
                  uint64_t v1163 = 0;
                  uint64_t v1164 = v1151 + v1148;
                  uint64_t v1165 = v1150 + v1149;
                  do
                  {
                    if ((int)v310 >= 1)
                    {
                      uint64_t v1166 = 0;
                      unsigned int v1167 = v310 + 1;
                      do
                      {
                        if (*(unsigned char *)(v1165 + v1166)) {
                          BOOL v1168 = *(unsigned char *)(v1164 + v1166) == 0;
                        }
                        else {
                          BOOL v1168 = 1;
                        }
                        char v1169 = !v1168;
                        *(unsigned char *)(v1152 + v1166) = v1169;
                        --v1167;
                        ++v1166;
                      }
                      while (v1167 > 1);
                    }
                    v1149 += v1156;
                    v1148 += v1158;
                    v1152 += (int)v310;
                    ++v1163;
                    v1164 += v1158;
                    v1165 += v1156;
                  }
                  while (v1163 != v1160);
                }
                v1149 += v1161;
                v1148 += v1162;
                ++v1147;
              }
              while (v1147 != v1146);
            }
          }
          else if (v34 == 1)
          {
            uint64_t v311 = *v29;
            if (v311)
            {
              uint64_t v312 = 0;
              uint64_t v313 = v28[19];
              uint64_t v314 = v224[19];
              uint64_t v315 = v27[19];
              uint64_t v316 = *(void *)v28[3];
              uint64_t v317 = *(void *)v224[3];
              do
              {
                if ((int)v310 >= 1)
                {
                  uint64_t v318 = 0;
                  unsigned int v319 = v310 + 1;
                  do
                  {
                    if (*(unsigned char *)(v313 + v318)) {
                      BOOL v320 = *(unsigned char *)(v314 + v318) == 0;
                    }
                    else {
                      BOOL v320 = 1;
                    }
                    char v321 = !v320;
                    *(unsigned char *)(v315 + v318) = v321;
                    --v319;
                    ++v318;
                  }
                  while (v319 > 1);
                }
                v315 += (int)v310;
                ++v312;
                v314 += v317;
                v313 += v316;
              }
              while (v312 != v311);
            }
          }
          else
          {
            unint64_t v1930 = v27[6];
            if (v1930)
            {
              unint64_t v1959 = 0;
              uint64_t v1884 = v224[19];
              uint64_t v1900 = v28[19];
              uint64_t v1170 = v27[19];
              do
              {
                uint64_t v1171 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v1172 = v28[3];
                  int v1173 = v1959;
                  do
                  {
                    ldiv_t v1174 = ldiv(v1173, v29[v31]);
                    int v1173 = v1174.quot;
                    v1171 += *(void *)(v1172 + 8 * v31--) * v1174.rem;
                  }
                  while (v31 != -1);
                }
                uint64_t v1175 = v1980;
                if ((v1980 & 0x80000000) != 0)
                {
                  LODWORD(v1176) = 0;
                }
                else
                {
                  uint64_t v1176 = 0;
                  uint64_t v1177 = v224[3];
                  int v1178 = v1959;
                  do
                  {
                    ldiv_t v1179 = ldiv(v1178, v225[v1175]);
                    int v1178 = v1179.quot;
                    v1176 += *(void *)(v1177 + 8 * v1175--) * v1179.rem;
                  }
                  while (v1175 != -1);
                }
                uint64_t v31 = v1996;
                if ((int)v310 >= 1)
                {
                  uint64_t v1180 = 0;
                  unsigned int v1181 = v310 + 1;
                  do
                  {
                    if (*(unsigned char *)(v1900 + (int)v1171 + v1180)) {
                      BOOL v1182 = *(unsigned char *)(v1884 + (int)v1176 + v1180) == 0;
                    }
                    else {
                      BOOL v1182 = 1;
                    }
                    char v1183 = !v1182;
                    *(unsigned char *)(v1170 + v1180) = v1183;
                    --v1181;
                    ++v1180;
                  }
                  while (v1181 > 1);
                }
                v1170 += (int)v310;
                v1959 += (int)v310;
              }
              while (v1959 < v1930);
            }
          }
          break;
        default:
LABEL_329:
          switch(v306)
          {
            case 1uLL:
              uint64_t v322 = v27[6];
              if (v322)
              {
                uint64_t v323 = (unsigned char *)v28[19];
                uint64_t v324 = (unsigned char *)v224[19];
                uint64_t v325 = (char *)v27[19];
                uint64_t v326 = *(void *)v28[3];
                uint64_t v327 = *(void *)v224[3];
                do
                {
                  if (*v323) {
                    BOOL v328 = *v324 == 0;
                  }
                  else {
                    BOOL v328 = 1;
                  }
                  char v329 = !v328;
                  *v325++ = v329;
                  v324 += v327;
                  v323 += v326;
                  --v322;
                }
                while (v322);
              }
              break;
            case 2uLL:
              uint64_t v463 = *v29;
              if (v463)
              {
                uint64_t v464 = 0;
                uint64_t v465 = 0;
                uint64_t v466 = 0;
                uint64_t v467 = 0;
                uint64_t v468 = v28[19];
                uint64_t v469 = v224[19];
                uint64_t v470 = v27[19];
                unint64_t v471 = v29[1];
                uint64_t v472 = (uint64_t *)v28[3];
                uint64_t v473 = *v472;
                uint64_t v474 = v472[1];
                uint64_t v475 = (uint64_t *)v224[3];
                uint64_t v476 = *v475;
                uint64_t v477 = v475[1];
                uint64_t v478 = v476 - v477 * v225[1];
                if (v471 <= 1) {
                  uint64_t v479 = 1;
                }
                else {
                  uint64_t v479 = v29[1];
                }
                uint64_t v480 = v473 - v474 * v471;
                do
                {
                  if (v471)
                  {
                    uint64_t v481 = v465 + v479;
                    uint64_t v482 = (char *)(v470 + v465);
                    uint64_t v483 = v479;
                    do
                    {
                      if (*(unsigned char *)(v468 + v467)) {
                        BOOL v484 = *(unsigned char *)(v469 + v466) == 0;
                      }
                      else {
                        BOOL v484 = 1;
                      }
                      char v485 = !v484;
                      *v482++ = v485;
                      v467 += v474;
                      v466 += v477;
                      --v483;
                    }
                    while (v483);
                    uint64_t v465 = v481;
                  }
                  v467 += v480;
                  v466 += v478;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            case 3uLL:
              uint64_t v486 = *v29;
              if (v486)
              {
                uint64_t v487 = 0;
                uint64_t v488 = 0;
                uint64_t v489 = 0;
                uint64_t v490 = 0;
                uint64_t v491 = v28[19];
                uint64_t v492 = v224[19];
                uint64_t v493 = v27[19];
                unint64_t v494 = v29[1];
                int v495 = (void *)v28[3];
                uint64_t v496 = v495[1];
                uint64_t v497 = (void *)v224[3];
                uint64_t v498 = v497[1];
                uint64_t v499 = *v497 - v498 * v225[1];
                if (v494 <= 1) {
                  uint64_t v500 = 1;
                }
                else {
                  uint64_t v500 = v29[1];
                }
                unint64_t v501 = *v495 - v496 * v494;
                do
                {
                  if (v494)
                  {
                    uint64_t v502 = 0;
                    unint64_t v503 = v29[2];
                    uint64_t v504 = v495[2];
                    uint64_t v505 = v497[2];
                    if (v503 <= 1) {
                      uint64_t v506 = 1;
                    }
                    else {
                      uint64_t v506 = v29[2];
                    }
                    uint64_t v507 = v498 - v505 * v225[2];
                    do
                    {
                      uint64_t v508 = v506;
                      if (v503)
                      {
                        do
                        {
                          if (*(unsigned char *)(v491 + v490)) {
                            BOOL v509 = *(unsigned char *)(v492 + v489) == 0;
                          }
                          else {
                            BOOL v509 = 1;
                          }
                          char v510 = !v509;
                          *(unsigned char *)(v493 + v488++) = v510;
                          v490 += v504;
                          v489 += v505;
                          --v508;
                        }
                        while (v508);
                      }
                      v490 += v496 - v504 * v503;
                      v489 += v507;
                      ++v502;
                    }
                    while (v502 != v500);
                  }
                  v490 += v501;
                  v489 += v499;
                  ++v487;
                }
                while (v487 != v486);
              }
              break;
            case 4uLL:
              uint64_t v2003 = *v29;
              if (v2003)
              {
                uint64_t v511 = 0;
                uint64_t v512 = 0;
                uint64_t v513 = 0;
                uint64_t v514 = 0;
                uint64_t v515 = v28[19];
                uint64_t v516 = v224[19];
                uint64_t v517 = v27[19];
                unint64_t v518 = v29[1];
                unint64_t v519 = (void *)v28[3];
                uint64_t v520 = (void *)v224[3];
                uint64_t v1910 = v520[1];
                uint64_t v1923 = v519[1];
                if (v518 <= 1) {
                  uint64_t v521 = 1;
                }
                else {
                  uint64_t v521 = v29[1];
                }
                unint64_t v1952 = *v519 - v519[1] * v518;
                uint64_t v1985 = *v520 - v1910 * v225[1];
                do
                {
                  if (v518)
                  {
                    uint64_t v522 = 0;
                    unint64_t v523 = v29[2];
                    uint64_t v524 = v519[2];
                    uint64_t v525 = v520[2];
                    if (v523 <= 1) {
                      uint64_t v526 = 1;
                    }
                    else {
                      uint64_t v526 = v29[2];
                    }
                    uint64_t v527 = v1910 - v525 * v225[2];
                    do
                    {
                      if (v523)
                      {
                        uint64_t v528 = 0;
                        unint64_t v529 = v29[3];
                        uint64_t v530 = v519[3];
                        uint64_t v531 = v520[3];
                        if (v529 <= 1) {
                          uint64_t v532 = 1;
                        }
                        else {
                          uint64_t v532 = v29[3];
                        }
                        uint64_t v533 = v525 - v531 * v225[3];
                        do
                        {
                          uint64_t v534 = v532;
                          if (v529)
                          {
                            do
                            {
                              if (*(unsigned char *)(v515 + v514)) {
                                BOOL v535 = *(unsigned char *)(v516 + v513) == 0;
                              }
                              else {
                                BOOL v535 = 1;
                              }
                              char v536 = !v535;
                              *(unsigned char *)(v517 + v512++) = v536;
                              v514 += v530;
                              v513 += v531;
                              --v534;
                            }
                            while (v534);
                          }
                          v514 += v524 - v530 * v529;
                          v513 += v533;
                          ++v528;
                        }
                        while (v528 != v526);
                      }
                      v514 += v1923 - v524 * v523;
                      v513 += v527;
                      ++v522;
                    }
                    while (v522 != v521);
                  }
                  v514 += v1952;
                  v513 += v1985;
                  ++v511;
                }
                while (v511 != v2003);
              }
              break;
            default:
              uint64_t v450 = v27[6];
              if (v450)
              {
                uint64_t v451 = 0;
                uint64_t v1922 = v224[19];
                uint64_t v1951 = v28[19];
                uint64_t v1909 = v27[19];
                do
                {
                  uint64_t v452 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    uint64_t v453 = v28[3];
                    int v454 = v451;
                    do
                    {
                      ldiv_t v455 = ldiv(v454, v29[v31]);
                      int v454 = v455.quot;
                      v452 += *(void *)(v453 + 8 * v31--) * v455.rem;
                    }
                    while (v31 != -1);
                  }
                  uint64_t v456 = v1980;
                  if ((v1980 & 0x80000000) != 0)
                  {
                    LODWORD(v457) = 0;
                  }
                  else
                  {
                    uint64_t v457 = 0;
                    uint64_t v458 = v224[3];
                    int v459 = v451;
                    do
                    {
                      ldiv_t v460 = ldiv(v459, v225[v456]);
                      int v459 = v460.quot;
                      v457 += *(void *)(v458 + 8 * v456--) * v460.rem;
                    }
                    while (v456 != -1);
                  }
                  if (*(unsigned char *)(v1951 + (int)v452)) {
                    BOOL v461 = *(unsigned char *)(v1922 + (int)v457) == 0;
                  }
                  else {
                    BOOL v461 = 1;
                  }
                  char v462 = !v461;
                  *(unsigned char *)(v1909 + v451++) = v462;
                  uint64_t v31 = v1996;
                }
                while (v451 != v450);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v9)
      {
        case 0:
          goto LABEL_20;
        case 1:
          int v10 = *(_DWORD *)(*a2 + 160);
          if (v10 >= 1)
          {
            char v11 = **(unsigned char **)(*a1 + 152);
            int v12 = *(unsigned char **)(*(void *)a3 + 152);
            int v13 = *(char **)(*a2 + 152);
            unsigned int v14 = v10 + 1;
            do
            {
              char v15 = *v13++;
              *v12++ = v15 * v11;
              --v14;
            }
            while (v14 > 1);
          }
          return;
        case 2:
          int v72 = *(_DWORD *)(*a1 + 160);
          if (v72 >= 1)
          {
            char v73 = **(unsigned char **)(*a2 + 152);
            int v74 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v75 = *(char **)(*a1 + 152);
            unsigned int v76 = v72 + 1;
            do
            {
              char v77 = *v75++;
              *v74++ = v77 * v73;
              --v76;
            }
            while (v76 > 1);
          }
          return;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            uint64_t v79 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v80 = *(char **)(*a2 + 152);
            int v81 = *(char **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              char v84 = *v81++;
              char v83 = v84;
              char v85 = *v80++;
              *v79++ = v85 * v83;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          int v64 = *(void **)a3;
          uint64_t v65 = *a1;
          unsigned int v66 = *(int **)*a1;
          uint64_t v67 = (*(void *)(*a1 + 8) - (void)v66) >> 2;
          int v68 = v67 - 1;
          if ((int)v67 - 1 >= -1) {
            int v68 = -1;
          }
          int v69 = v68 + 1;
          int v70 = v67 + 1;
          break;
      }
      while (1)
      {
        unsigned int v71 = v70 - 2;
        if (v70 - 2 < 0) {
          break;
        }
        --v70;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v71) != *(void *)(v64[3] + 8 * v71)) {
          goto LABEL_178;
        }
      }
      int v70 = v69;
LABEL_178:
      uint64_t v232 = (int **)*a2;
      int v233 = *(int **)*a2;
      uint64_t v234 = (*(void *)(*a2 + 8) - (void)v233) >> 2;
      int v235 = v234 - 1;
      if ((int)v234 - 1 >= -1) {
        int v235 = -1;
      }
      int v236 = v235 + 1;
      int v237 = v234 + 1;
      while (1)
      {
        unsigned int v238 = v237 - 2;
        if (v237 - 2 < 0) {
          break;
        }
        --v237;
        if (*(void *)&v232[3][2 * v238] != *(void *)(v64[3] + 8 * v238)) {
          goto LABEL_229;
        }
      }
      int v237 = v236;
LABEL_229:
      int v280 = v67 + 1;
      while (1)
      {
        unsigned int v281 = v280 - 2;
        if (v280 - 2 < 0) {
          break;
        }
        --v280;
        if (*(void *)(*(void *)(v65 + 24) + 8 * v281)) {
          goto LABEL_264;
        }
      }
      int v280 = v69;
LABEL_264:
      int v294 = v234 + 1;
      while (1)
      {
        int v295 = v294 - 2;
        if (v294 - 2 < 0) {
          break;
        }
        --v294;
        if (*(void *)&v232[3][2 * v295]) {
          goto LABEL_341;
        }
      }
      int v294 = v236;
LABEL_341:
      unint64_t v330 = (uint64_t)(v64[1] - *v64) >> 2;
      if (v70 <= v237) {
        int v331 = v237;
      }
      else {
        int v331 = v70;
      }
      if (v70 <= v294) {
        int v70 = v294;
      }
      if (v280 > v237) {
        int v237 = v280;
      }
      if (v330 > v237)
      {
        int v332 = 1;
      }
      else
      {
        int v237 = (uint64_t)(v64[1] - *v64) >> 2;
        int v332 = 4;
      }
      if (v330 > v70)
      {
        int v333 = 2;
      }
      else
      {
        int v70 = v237;
        int v333 = v332;
      }
      if (v330 > v331)
      {
        int v70 = v331;
        int v333 = 3;
      }
      if (!v70) {
        goto LABEL_371;
      }
      unint64_t v334 = *(void *)(v64[3] + 8 * (v70 - 1));
      if (v334 < 0x10) {
        goto LABEL_371;
      }
      uint64_t v1997 = *(void *)(v64[3] + 8 * (v70 - 1));
      switch(v333)
      {
        case 1:
          if (v70 == 2)
          {
            int v1460 = *v66;
            if (*v66)
            {
              unint64_t v1461 = 0;
              uint64_t v1462 = 0;
              uint64_t v1463 = 0;
              uint64_t v1464 = *(void *)(v65 + 152);
              int v1465 = v232[19];
              uint64_t v1466 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1467 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1468 = 0;
                      char v1469 = *(unsigned char *)(v1464 + v1463);
                      unsigned int v1470 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1466 + v1468) = *((unsigned char *)v1465 + v1462 + v1468) * v1469;
                        --v1470;
                        ++v1468;
                      }
                      while (v1470 > 1);
                      uint64_t v65 = *a1;
                      uint64_t v232 = (int **)*a2;
                      unsigned int v66 = *(int **)*a1;
                    }
                    uint64_t v1471 = *(void **)(v65 + 24);
                    uint64_t v1472 = v1471[1];
                    v1463 += v1472;
                    v1462 += *((void *)v232[3] + 1);
                    v1466 += (int)v334;
                    ++v1467;
                    unint64_t v1473 = v66[1];
                  }
                  while (v1467 < v1473);
                  int v1460 = *v66;
                  int v233 = *v232;
                }
                else
                {
                  unint64_t v1473 = 0;
                  uint64_t v1471 = *(void **)(v65 + 24);
                  uint64_t v1472 = v1471[1];
                }
                uint64_t v1463 = *v1471 + v1463 - v1473 * v1472;
                uint64_t v1462 = *(void *)v232[3] + v1462 - *((void *)v232[3] + 1) * v233[1];
                ++v1461;
              }
              while (v1461 < v1460);
            }
          }
          else if (v70 == 1)
          {
            int v1018 = *v66;
            if (*v66)
            {
              unint64_t v1019 = 0;
              uint64_t v1020 = 0;
              uint64_t v1021 = 0;
              uint64_t v1022 = *(void *)(v65 + 152);
              uint64_t v1023 = v232[19];
              uint64_t v1024 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v1025 = 0;
                  char v1026 = *(unsigned char *)(v1022 + v1021);
                  unsigned int v1027 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v1024 + v1025) = *((unsigned char *)v1023 + v1020 + v1025) * v1026;
                    --v1027;
                    ++v1025;
                  }
                  while (v1027 > 1);
                  uint64_t v65 = *a1;
                  uint64_t v232 = (int **)*a2;
                  int v1018 = **(_DWORD **)*a1;
                }
                v1021 += **(void **)(v65 + 24);
                v1020 += *(void *)v232[3];
                v1024 += (int)v334;
                ++v1019;
              }
              while (v1019 < v1018);
            }
          }
          else if (v64[6])
          {
            v1918 = v232[19];
            uint64_t v1939 = *(void *)(v65 + 152);
            uint64_t v1968 = (int)v334;
            unint64_t v1992 = 0;
            unsigned int v1905 = v334 + 1;
            uint64_t v1474 = v64[19];
            do
            {
              uint64_t v1475 = *(void *)*a1;
              unint64_t v1476 = (unint64_t)(*(void *)(*a1 + 8) - v1475) >> 2;
              uint64_t v1477 = 0;
              uint64_t v1478 = (v1476 - 1);
              if ((int)v1476 - 1 >= 0)
              {
                uint64_t v1479 = *(void *)(*a1 + 24);
                int v1480 = v1992;
                do
                {
                  ldiv_t v1481 = ldiv(v1480, *(int *)(v1475 + 4 * v1478));
                  int v1480 = v1481.quot;
                  v1477 += *(void *)(v1479 + 8 * v1478--) * v1481.rem;
                }
                while (v1478 != -1);
              }
              uint64_t v1482 = *(void *)*a2;
              unint64_t v1483 = (unint64_t)(*(void *)(*a2 + 8) - v1482) >> 2;
              uint64_t v1484 = 0;
              uint64_t v1485 = (v1483 - 1);
              if ((int)v1483 - 1 >= 0)
              {
                uint64_t v1486 = *(void *)(*a2 + 24);
                int v1487 = v1992;
                do
                {
                  ldiv_t v1488 = ldiv(v1487, *(int *)(v1482 + 4 * v1485));
                  int v1487 = v1488.quot;
                  v1484 += *(void *)(v1486 + 8 * v1485--) * v1488.rem;
                }
                while (v1485 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1489 = 0;
                char v1490 = *(unsigned char *)(v1939 + (int)v1477);
                unsigned int v1491 = v1905;
                do
                {
                  *(unsigned char *)(v1474 + v1489) = *((unsigned char *)v1918 + (int)v1484 + v1489) * v1490;
                  --v1491;
                  ++v1489;
                }
                while (v1491 > 1);
                int v64 = *(void **)a3;
              }
              v1474 += v1968;
              v1992 += v1968;
            }
            while (v1992 < v64[6]);
          }
          break;
        case 2:
          if (v70 == 2)
          {
            int v1492 = *v66;
            if (*v66)
            {
              unint64_t v1493 = 0;
              uint64_t v1494 = 0;
              uint64_t v1495 = 0;
              uint64_t v1496 = *(void *)(v65 + 152);
              uint64_t v1497 = v232[19];
              uint64_t v1498 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1499 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1500 = 0;
                      char v1501 = *((unsigned char *)v1497 + v1494);
                      unsigned int v1502 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1498 + v1500) = *(unsigned char *)(v1496 + v1495 + v1500) * v1501;
                        --v1502;
                        ++v1500;
                      }
                      while (v1502 > 1);
                      uint64_t v65 = *a1;
                      uint64_t v232 = (int **)*a2;
                      unsigned int v66 = *(int **)*a1;
                    }
                    uint64_t v1503 = *(void **)(v65 + 24);
                    uint64_t v1504 = v1503[1];
                    v1495 += v1504;
                    v1494 += *((void *)v232[3] + 1);
                    v1498 += (int)v334;
                    ++v1499;
                    unint64_t v1505 = v66[1];
                  }
                  while (v1499 < v1505);
                  int v1492 = *v66;
                  int v233 = *v232;
                }
                else
                {
                  unint64_t v1505 = 0;
                  uint64_t v1503 = *(void **)(v65 + 24);
                  uint64_t v1504 = v1503[1];
                }
                uint64_t v1495 = *v1503 + v1495 - v1505 * v1504;
                uint64_t v1494 = *(void *)v232[3] + v1494 - *((void *)v232[3] + 1) * v233[1];
                ++v1493;
              }
              while (v1493 < v1492);
            }
          }
          else if (v70 == 1)
          {
            int v1028 = *v66;
            if (*v66)
            {
              unint64_t v1029 = 0;
              uint64_t v1030 = 0;
              uint64_t v1031 = 0;
              uint64_t v1032 = *(void *)(v65 + 152);
              vDSP_Length v1033 = v232[19];
              uint64_t v1034 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v1035 = 0;
                  char v1036 = *((unsigned char *)v1033 + v1030);
                  unsigned int v1037 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v1034 + v1035) = *(unsigned char *)(v1032 + v1031 + v1035) * v1036;
                    --v1037;
                    ++v1035;
                  }
                  while (v1037 > 1);
                  uint64_t v65 = *a1;
                  uint64_t v232 = (int **)*a2;
                  int v1028 = **(_DWORD **)*a1;
                }
                v1031 += **(void **)(v65 + 24);
                v1030 += *(void *)v232[3];
                v1034 += (int)v334;
                ++v1029;
              }
              while (v1029 < v1028);
            }
          }
          else if (v64[6])
          {
            v1919 = v232[19];
            uint64_t v1940 = *(void *)(v65 + 152);
            uint64_t v1969 = (int)v334;
            unint64_t v1993 = 0;
            unsigned int v1906 = v334 + 1;
            uint64_t v1506 = v64[19];
            do
            {
              uint64_t v1507 = *(void *)*a1;
              unint64_t v1508 = (unint64_t)(*(void *)(*a1 + 8) - v1507) >> 2;
              uint64_t v1509 = 0;
              uint64_t v1510 = (v1508 - 1);
              if ((int)v1508 - 1 >= 0)
              {
                uint64_t v1511 = *(void *)(*a1 + 24);
                int v1512 = v1993;
                do
                {
                  ldiv_t v1513 = ldiv(v1512, *(int *)(v1507 + 4 * v1510));
                  int v1512 = v1513.quot;
                  v1509 += *(void *)(v1511 + 8 * v1510--) * v1513.rem;
                }
                while (v1510 != -1);
              }
              uint64_t v1514 = *(void *)*a2;
              unint64_t v1515 = (unint64_t)(*(void *)(*a2 + 8) - v1514) >> 2;
              uint64_t v1516 = 0;
              uint64_t v1517 = (v1515 - 1);
              if ((int)v1515 - 1 >= 0)
              {
                uint64_t v1518 = *(void *)(*a2 + 24);
                int v1519 = v1993;
                do
                {
                  ldiv_t v1520 = ldiv(v1519, *(int *)(v1514 + 4 * v1517));
                  int v1519 = v1520.quot;
                  v1516 += *(void *)(v1518 + 8 * v1517--) * v1520.rem;
                }
                while (v1517 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1521 = 0;
                char v1522 = *((unsigned char *)v1919 + (int)v1516);
                unsigned int v1523 = v1906;
                do
                {
                  *(unsigned char *)(v1506 + v1521) = *(unsigned char *)(v1940 + (int)v1509 + v1521) * v1522;
                  --v1523;
                  ++v1521;
                }
                while (v1523 > 1);
                int v64 = *(void **)a3;
              }
              v1506 += v1969;
              v1993 += v1969;
            }
            while (v1993 < v64[6]);
          }
          break;
        case 3:
          if (v70 == 2)
          {
            int v1184 = *v66;
            if (*v66)
            {
              unint64_t v1185 = 0;
              uint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = *(void *)(v65 + 152);
              uint64_t v1189 = v232[19];
              uint64_t v1190 = v64[19];
              do
              {
                if (v66[1])
                {
                  unint64_t v1191 = 0;
                  do
                  {
                    if ((int)v334 >= 1)
                    {
                      uint64_t v1192 = 0;
                      unsigned int v1193 = v334 + 1;
                      do
                      {
                        *(unsigned char *)(v1190 + v1192) = *((unsigned char *)v1189 + v1186 + v1192)
                                                  * *(unsigned char *)(v1188 + v1187 + v1192);
                        --v1193;
                        ++v1192;
                      }
                      while (v1193 > 1);
                      uint64_t v65 = *a1;
                      uint64_t v232 = (int **)*a2;
                      unsigned int v66 = *(int **)*a1;
                    }
                    uint64_t v1194 = *(void **)(v65 + 24);
                    uint64_t v1195 = v1194[1];
                    v1187 += v1195;
                    v1186 += *((void *)v232[3] + 1);
                    v1190 += (int)v334;
                    ++v1191;
                    unint64_t v1196 = v66[1];
                  }
                  while (v1191 < v1196);
                  int v1184 = *v66;
                  int v233 = *v232;
                }
                else
                {
                  unint64_t v1196 = 0;
                  uint64_t v1194 = *(void **)(v65 + 24);
                  uint64_t v1195 = v1194[1];
                }
                uint64_t v1187 = *v1194 + v1187 - v1196 * v1195;
                uint64_t v1186 = *(void *)v232[3] + v1186 - *((void *)v232[3] + 1) * v233[1];
                ++v1185;
              }
              while (v1185 < v1184);
            }
          }
          else if (v70 == 1)
          {
            int v335 = *v66;
            if (*v66)
            {
              unint64_t v336 = 0;
              uint64_t v337 = 0;
              uint64_t v338 = 0;
              uint64_t v339 = *(void *)(v65 + 152);
              uint64_t v340 = v232[19];
              uint64_t v341 = v64[19];
              do
              {
                if ((int)v334 >= 1)
                {
                  uint64_t v342 = 0;
                  unsigned int v343 = v334 + 1;
                  do
                  {
                    *(unsigned char *)(v341 + v342) = *((unsigned char *)v340 + v337 + v342) * *(unsigned char *)(v339 + v338 + v342);
                    --v343;
                    ++v342;
                  }
                  while (v343 > 1);
                  uint64_t v65 = *a1;
                  uint64_t v232 = (int **)*a2;
                  int v335 = **(_DWORD **)*a1;
                }
                v338 += **(void **)(v65 + 24);
                v337 += *(void *)v232[3];
                v341 += (int)v334;
                ++v336;
              }
              while (v336 < v335);
            }
          }
          else if (v64[6])
          {
            v1916 = v232[19];
            uint64_t v1931 = *(void *)(v65 + 152);
            uint64_t v1960 = (int)v334;
            unint64_t v1990 = 0;
            unsigned int v1901 = v334 + 1;
            uint64_t v1197 = v64[19];
            do
            {
              uint64_t v1198 = *(void *)*a1;
              unint64_t v1199 = (unint64_t)(*(void *)(*a1 + 8) - v1198) >> 2;
              uint64_t v1200 = 0;
              uint64_t v1201 = (v1199 - 1);
              if ((int)v1199 - 1 >= 0)
              {
                uint64_t v1202 = *(void *)(*a1 + 24);
                int v1203 = v1990;
                do
                {
                  ldiv_t v1204 = ldiv(v1203, *(int *)(v1198 + 4 * v1201));
                  int v1203 = v1204.quot;
                  v1200 += *(void *)(v1202 + 8 * v1201--) * v1204.rem;
                }
                while (v1201 != -1);
              }
              uint64_t v1205 = *(void *)*a2;
              unint64_t v1206 = (unint64_t)(*(void *)(*a2 + 8) - v1205) >> 2;
              uint64_t v1207 = 0;
              uint64_t v1208 = (v1206 - 1);
              if ((int)v1206 - 1 >= 0)
              {
                uint64_t v1209 = *(void *)(*a2 + 24);
                int v1210 = v1990;
                do
                {
                  ldiv_t v1211 = ldiv(v1210, *(int *)(v1205 + 4 * v1208));
                  int v1210 = v1211.quot;
                  v1207 += *(void *)(v1209 + 8 * v1208--) * v1211.rem;
                }
                while (v1208 != -1);
              }
              if ((int)v1997 >= 1)
              {
                uint64_t v1212 = 0;
                unsigned int v1213 = v1901;
                do
                {
                  *(unsigned char *)(v1197 + v1212) = *((unsigned char *)v1916 + (int)v1207 + v1212)
                                            * *(unsigned char *)(v1931 + (int)v1200 + v1212);
                  --v1213;
                  ++v1212;
                }
                while (v1213 > 1);
                int v64 = *(void **)a3;
              }
              v1197 += v1960;
              v1990 += v1960;
            }
            while (v1990 < v64[6]);
          }
          break;
        default:
LABEL_371:
          switch(v330)
          {
            case 1uLL:
              if (v64[6])
              {
                unint64_t v344 = 0;
                uint64_t v345 = 0;
                uint64_t v346 = 0;
                uint64_t v347 = *(void *)(v65 + 152);
                uint64_t v348 = v232[19];
                uint64_t v349 = v64[19];
                do
                {
                  *(unsigned char *)(v349 + v344) = *((unsigned char *)v348 + v345) * *(unsigned char *)(v347 + v346);
                  v346 += **(void **)(*a1 + 24);
                  v345 += **(void **)(*a2 + 24);
                  ++v344;
                }
                while (v344 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v553 = *v66;
              if (*v66)
              {
                unint64_t v554 = 0;
                uint64_t v555 = 0;
                uint64_t v556 = 0;
                uint64_t v557 = 0;
                uint64_t v558 = *(void *)(v65 + 152);
                uint64_t v559 = v232[19];
                uint64_t v560 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v561 = 0;
                    do
                    {
                      *(unsigned char *)(v560 + v555 + v561) = *((unsigned char *)v559 + v556) * *(unsigned char *)(v558 + v557);
                      uint64_t v65 = *a1;
                      int v562 = *(void **)(*a1 + 24);
                      uint64_t v563 = v562[1];
                      v557 += v563;
                      uint64_t v232 = (int **)*a2;
                      uint64_t v564 = *(int **)(*a2 + 24);
                      uint64_t v565 = *((void *)v564 + 1);
                      v556 += v565;
                      ++v561;
                      unsigned int v66 = *(int **)*a1;
                      unint64_t v566 = v66[1];
                    }
                    while (v561 < v566);
                    int v553 = *v66;
                    int v233 = *v232;
                    v555 += v561;
                  }
                  else
                  {
                    unint64_t v566 = 0;
                    int v562 = *(void **)(v65 + 24);
                    uint64_t v563 = v562[1];
                    uint64_t v564 = v232[3];
                    uint64_t v565 = *((void *)v564 + 1);
                  }
                  uint64_t v557 = *v562 + v557 - v566 * v563;
                  uint64_t v556 = *(void *)v564 + v556 - v565 * v233[1];
                  ++v554;
                }
                while (v554 < v553);
              }
              break;
            case 3uLL:
              int v567 = *v66;
              if (*v66)
              {
                unint64_t v568 = 0;
                uint64_t v569 = 0;
                uint64_t v570 = 0;
                uint64_t v571 = 0;
                uint64_t v572 = *(void *)(v65 + 152);
                uint64_t v573 = v232[19];
                uint64_t v574 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v575 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v576 = 0;
                        do
                        {
                          *(unsigned char *)(v574 + v569 + v576) = *((unsigned char *)v573 + v570) * *(unsigned char *)(v572 + v571);
                          uint64_t v65 = *a1;
                          uint64_t v577 = *(void **)(*a1 + 24);
                          uint64_t v578 = v577[2];
                          v571 += v578;
                          uint64_t v232 = (int **)*a2;
                          int v579 = *(int **)(*a2 + 24);
                          uint64_t v580 = *((void *)v579 + 2);
                          v570 += v580;
                          ++v576;
                          unsigned int v66 = *(int **)*a1;
                          unint64_t v581 = v66[2];
                        }
                        while (v576 < v581);
                        int v233 = *v232;
                        v569 += v576;
                      }
                      else
                      {
                        unint64_t v581 = 0;
                        uint64_t v577 = *(void **)(v65 + 24);
                        uint64_t v578 = v577[2];
                        int v579 = v232[3];
                        uint64_t v580 = *((void *)v579 + 2);
                      }
                      uint64_t v582 = v577[1];
                      uint64_t v571 = v582 + v571 - v581 * v578;
                      uint64_t v570 = *((void *)v579 + 1) + v570 - v580 * v233[2];
                      ++v575;
                      unint64_t v583 = v66[1];
                    }
                    while (v575 < v583);
                    int v567 = *v66;
                  }
                  else
                  {
                    unint64_t v583 = 0;
                    uint64_t v577 = *(void **)(v65 + 24);
                    uint64_t v582 = v577[1];
                  }
                  uint64_t v571 = *v577 + v571 - v583 * v582;
                  uint64_t v570 = *(void *)v232[3] + v570 - *((void *)v232[3] + 1) * v233[1];
                  ++v568;
                }
                while (v568 < v567);
              }
              break;
            case 4uLL:
              int v584 = *v66;
              if (*v66)
              {
                unint64_t v585 = 0;
                uint64_t v586 = 0;
                uint64_t v587 = 0;
                uint64_t v588 = 0;
                uint64_t v589 = *(void *)(v65 + 152);
                uint64_t v590 = v232[19];
                uint64_t v591 = v64[19];
                do
                {
                  if (v66[1])
                  {
                    unint64_t v592 = 0;
                    do
                    {
                      if (v66[2])
                      {
                        unint64_t v593 = 0;
                        do
                        {
                          if (v66[3])
                          {
                            unint64_t v594 = 0;
                            do
                            {
                              *(unsigned char *)(v591 + v586 + v594) = *((unsigned char *)v590 + v587) * *(unsigned char *)(v589 + v588);
                              uint64_t v65 = *a1;
                              uint64_t v595 = *(void **)(*a1 + 24);
                              uint64_t v596 = v595[3];
                              v588 += v596;
                              uint64_t v232 = (int **)*a2;
                              unint64_t v597 = *(int **)(*a2 + 24);
                              uint64_t v598 = *((void *)v597 + 3);
                              v587 += v598;
                              ++v594;
                              unsigned int v66 = *(int **)*a1;
                              unint64_t v599 = v66[3];
                            }
                            while (v594 < v599);
                            int v233 = *v232;
                            v586 += v594;
                          }
                          else
                          {
                            unint64_t v599 = 0;
                            uint64_t v595 = *(void **)(v65 + 24);
                            uint64_t v596 = v595[3];
                            unint64_t v597 = v232[3];
                            uint64_t v598 = *((void *)v597 + 3);
                          }
                          uint64_t v600 = v595[2];
                          uint64_t v588 = v600 + v588 - v599 * v596;
                          uint64_t v587 = *((void *)v597 + 2) + v587 - v598 * v233[3];
                          ++v593;
                          unint64_t v601 = v66[2];
                        }
                        while (v593 < v601);
                      }
                      else
                      {
                        unint64_t v601 = 0;
                        uint64_t v595 = *(void **)(v65 + 24);
                        uint64_t v600 = v595[2];
                      }
                      uint64_t v588 = v595[1] + v588 - v601 * v600;
                      uint64_t v587 = *((void *)v232[3] + 1) + v587 - *((void *)v232[3] + 2) * v233[2];
                      ++v592;
                      unint64_t v602 = v66[1];
                    }
                    while (v592 < v602);
                    int v584 = *v66;
                  }
                  else
                  {
                    unint64_t v602 = 0;
                  }
                  uint64_t v588 = **(void **)(v65 + 24) + v588 - *(void *)(*(void *)(v65 + 24) + 8) * v602;
                  uint64_t v587 = *(void *)v232[3] + v587 - *((void *)v232[3] + 1) * v233[1];
                  ++v585;
                }
                while (v585 < v584);
              }
              break;
            default:
              if (v64[6])
              {
                unint64_t v537 = 0;
                v1986 = v232[19];
                uint64_t v2004 = *(void *)(v65 + 152);
                uint64_t v538 = v64[19];
                do
                {
                  uint64_t v539 = *(void *)*a1;
                  unint64_t v540 = (unint64_t)(*(void *)(*a1 + 8) - v539) >> 2;
                  uint64_t v541 = 0;
                  uint64_t v542 = (v540 - 1);
                  if ((int)v540 - 1 >= 0)
                  {
                    uint64_t v543 = *(void *)(*a1 + 24);
                    int v544 = v537;
                    do
                    {
                      ldiv_t v545 = ldiv(v544, *(int *)(v539 + 4 * v542));
                      int v544 = v545.quot;
                      v541 += *(void *)(v543 + 8 * v542--) * v545.rem;
                    }
                    while (v542 != -1);
                  }
                  uint64_t v546 = *(void *)*a2;
                  unint64_t v547 = (unint64_t)(*(void *)(*a2 + 8) - v546) >> 2;
                  uint64_t v548 = 0;
                  uint64_t v549 = (v547 - 1);
                  if ((int)v547 - 1 >= 0)
                  {
                    uint64_t v550 = *(void *)(*a2 + 24);
                    int v551 = v537;
                    do
                    {
                      ldiv_t v552 = ldiv(v551, *(int *)(v546 + 4 * v549));
                      int v551 = v552.quot;
                      v548 += *(void *)(v550 + 8 * v549--) * v552.rem;
                    }
                    while (v549 != -1);
                  }
                  *(unsigned char *)(v538 + v537++) = *((unsigned char *)v1986 + (int)v548) * *(unsigned char *)(v2004 + (int)v541);
                }
                while (v537 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v16)
      {
        case 0:
          goto LABEL_23;
        case 1:
          int v17 = *(_DWORD *)(*a2 + 160);
          if (v17 >= 1)
          {
            int v18 = **(_DWORD **)(*a1 + 152);
            vDSP_Length v19 = *(_DWORD **)(*(void *)a3 + 152);
            ldiv_t v20 = *(int **)(*a2 + 152);
            unsigned int v21 = v17 + 1;
            do
            {
              int v22 = *v20++;
              *v19++ = v22 * v18;
              --v21;
            }
            while (v21 > 1);
          }
          return;
        case 2:
          int v95 = *(_DWORD *)(*a1 + 160);
          if (v95 >= 1)
          {
            int v96 = **(_DWORD **)(*a2 + 152);
            int v97 = *(_DWORD **)(*(void *)a3 + 152);
            int v98 = *(int **)(*a1 + 152);
            unsigned int v99 = v95 + 1;
            do
            {
              int v100 = *v98++;
              *v97++ = v100 * v96;
              --v99;
            }
            while (v99 > 1);
          }
          return;
        case 3:
          int v101 = *(_DWORD *)(*(void *)a3 + 48);
          if (v101 >= 1)
          {
            uint64_t v102 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v103 = *(int **)(*a2 + 152);
            int v104 = *(int **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              int v107 = *v104++;
              int v106 = v107;
              int v108 = *v103++;
              *v102++ = v108 * v106;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        default:
          int v86 = *(void **)a3;
          uint64_t v87 = (void *)*a1;
          uint64_t v88 = *(int **)*a1;
          uint64_t v89 = (v87[1] - (void)v88) >> 2;
          uint64_t v90 = (v89 - 1);
          if ((int)v90 >= -1) {
            int v91 = -1;
          }
          else {
            int v91 = v89 - 1;
          }
          int v92 = v91 + 1;
          int v93 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v94 = v93 - 2;
        if (v93 - 2 < 0) {
          break;
        }
        --v93;
        if (*(void *)(v87[3] + 8 * v94) != *(void *)(v86[3] + 8 * v94)) {
          goto LABEL_185;
        }
      }
      int v93 = v92;
LABEL_185:
      uint64_t v239 = (void *)*a2;
      uint64_t v240 = *(int **)*a2;
      uint64_t v241 = (v239[1] - (void)v240) >> 2;
      uint64_t v242 = (v241 - 1);
      if ((int)v242 >= -1) {
        int v243 = -1;
      }
      else {
        int v243 = v241 - 1;
      }
      int v244 = v243 + 1;
      int v245 = v241 + 1;
      while (1)
      {
        unsigned int v246 = v245 - 2;
        if (v245 - 2 < 0) {
          break;
        }
        --v245;
        if (*(void *)(v239[3] + 8 * v246) != *(void *)(v86[3] + 8 * v246)) {
          goto LABEL_234;
        }
      }
      int v245 = v244;
LABEL_234:
      int v282 = v89 + 1;
      while (1)
      {
        unsigned int v283 = v282 - 2;
        if (v282 - 2 < 0) {
          break;
        }
        --v282;
        if (*(void *)(v87[3] + 8 * v283)) {
          goto LABEL_269;
        }
      }
      int v282 = v92;
LABEL_269:
      int v296 = v241 + 1;
      while (1)
      {
        unsigned int v297 = v296 - 2;
        if (v296 - 2 < 0) {
          break;
        }
        --v296;
        if (*(void *)(v239[3] + 8 * v297)) {
          goto LABEL_377;
        }
      }
      int v296 = v244;
LABEL_377:
      unint64_t v350 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v93 <= v245) {
        int v351 = v245;
      }
      else {
        int v351 = v93;
      }
      if (v93 <= v296) {
        int v93 = v296;
      }
      if (v282 > v245) {
        int v245 = v282;
      }
      if (v350 > v245)
      {
        int v352 = 1;
      }
      else
      {
        int v245 = (uint64_t)(v86[1] - *v86) >> 2;
        int v352 = 4;
      }
      if (v350 > v93)
      {
        int v353 = 2;
      }
      else
      {
        int v93 = v245;
        int v353 = v352;
      }
      if (v350 > v351)
      {
        int v93 = v351;
        int v353 = 3;
      }
      uint64_t v1981 = v242;
      uint64_t v1998 = v90;
      if (!v93) {
        goto LABEL_407;
      }
      unint64_t v354 = *(void *)(v86[3] + 8 * (v93 - 1));
      if (v354 < 0x10) {
        goto LABEL_407;
      }
      switch(v353)
      {
        case 1:
          if (v93 == 2)
          {
            int v1524 = *v88;
            if (*v88)
            {
              unint64_t v1525 = 0;
              uint64_t v1526 = 0;
              uint64_t v1527 = 0;
              uint64_t v1528 = v87[19];
              uint64_t v1529 = v239[19];
              uint64_t v1530 = v86[19];
              uint64_t v1531 = (uint64_t *)v87[3];
              uint64_t v1532 = *v1531;
              uint64_t v1533 = v1531[1];
              uint64_t v1534 = (uint64_t *)v239[3];
              uint64_t v1535 = *v1534;
              uint64_t v1536 = v1534[1];
              int v1537 = v88[1];
              int v1538 = v1537;
              do
              {
                if (v1538)
                {
                  unint64_t v1539 = 0;
                  uint64_t v1540 = v1529 + 4 * v1526;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1541 = 0;
                      int v1542 = *(_DWORD *)(v1528 + 4 * v1527);
                      unsigned int v1543 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1530 + v1541) = *(_DWORD *)(v1540 + v1541) * v1542;
                        --v1543;
                        v1541 += 4;
                      }
                      while (v1543 > 1);
                      int v1537 = v88[1];
                    }
                    v1527 += v1533;
                    v1526 += v1536;
                    v1530 += 4 * (int)v354;
                    ++v1539;
                    v1540 += 4 * v1536;
                  }
                  while (v1539 < v1537);
                  uint64_t v1544 = v1537;
                  int v1524 = *v88;
                  int v1538 = v1537;
                }
                else
                {
                  uint64_t v1544 = 0;
                }
                uint64_t v1527 = v1527 + v1532 - v1544 * v1533;
                uint64_t v1526 = v1526 + v1535 - v1536 * v240[1];
                ++v1525;
              }
              while (v1525 < v1524);
            }
          }
          else if (v93 == 1)
          {
            int v1038 = *v88;
            if (*v88)
            {
              unint64_t v1039 = 0;
              uint64_t v1040 = 0;
              uint64_t v1041 = v87[19];
              uint64_t v1042 = v239[19];
              uint64_t v1043 = v86[19];
              uint64_t v1044 = *(void *)v87[3];
              uint64_t v1045 = 4 * *(void *)v239[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v1046 = 0;
                  int v1047 = *(_DWORD *)(v1041 + 4 * v1040);
                  unsigned int v1048 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1043 + v1046) = *(_DWORD *)(v1042 + v1046) * v1047;
                    --v1048;
                    v1046 += 4;
                  }
                  while (v1048 > 1);
                  int v1038 = *v88;
                }
                v1040 += v1044;
                ++v1039;
                v1043 += 4 * (int)v354;
                v1042 += v1045;
              }
              while (v1039 < v1038);
            }
          }
          else
          {
            unint64_t v1941 = v86[6];
            if (v1941)
            {
              unint64_t v1970 = 0;
              uint64_t v1876 = v239[19];
              uint64_t v1891 = v87[19];
              uint64_t v1545 = v86[19];
              do
              {
                uint64_t v1546 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1547 = v87[3];
                  uint64_t v1548 = v90;
                  int v1549 = v1970;
                  do
                  {
                    ldiv_t v1550 = ldiv(v1549, v88[v1548]);
                    int v1549 = v1550.quot;
                    v1546 += *(void *)(v1547 + 8 * v1548--) * v1550.rem;
                  }
                  while (v1548 != -1);
                }
                uint64_t v1551 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1552) = 0;
                }
                else
                {
                  uint64_t v1552 = 0;
                  uint64_t v1553 = v239[3];
                  int v1554 = v1970;
                  do
                  {
                    ldiv_t v1555 = ldiv(v1554, v240[v1551]);
                    int v1554 = v1555.quot;
                    v1552 += *(void *)(v1553 + 8 * v1551--) * v1555.rem;
                  }
                  while (v1551 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1556 = 0;
                  int v1557 = *(_DWORD *)(v1891 + 4 * (int)v1546);
                  unsigned int v1558 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1545 + v1556) = *(_DWORD *)(v1876 + 4 * (int)v1552 + v1556) * v1557;
                    --v1558;
                    v1556 += 4;
                  }
                  while (v1558 > 1);
                }
                v1545 += 4 * (int)v354;
                v1970 += (int)v354;
              }
              while (v1970 < v1941);
            }
          }
          break;
        case 2:
          if (v93 == 2)
          {
            int v1559 = *v88;
            if (*v88)
            {
              unint64_t v1560 = 0;
              uint64_t v1561 = 0;
              uint64_t v1562 = 0;
              uint64_t v1563 = v87[19];
              uint64_t v1564 = v239[19];
              uint64_t v1565 = v86[19];
              vDSP_Length v1566 = (uint64_t *)v87[3];
              uint64_t v1567 = *v1566;
              uint64_t v1568 = v1566[1];
              vDSP_Length v1569 = (uint64_t *)v239[3];
              uint64_t v1570 = *v1569;
              uint64_t v1571 = v1569[1];
              int v1572 = v88[1];
              int v1573 = v1572;
              do
              {
                if (v1573)
                {
                  unint64_t v1574 = 0;
                  uint64_t v1575 = v1563 + 4 * v1562;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1576 = 0;
                      int v1577 = *(_DWORD *)(v1564 + 4 * v1561);
                      unsigned int v1578 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = *(_DWORD *)(v1575 + v1576) * v1577;
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                      int v1572 = v88[1];
                    }
                    v1562 += v1568;
                    v1561 += v1571;
                    v1565 += 4 * (int)v354;
                    ++v1574;
                    v1575 += 4 * v1568;
                  }
                  while (v1574 < v1572);
                  uint64_t v1579 = v1572;
                  int v1559 = *v88;
                  int v1573 = v1572;
                }
                else
                {
                  uint64_t v1579 = 0;
                }
                uint64_t v1562 = v1562 + v1567 - v1579 * v1568;
                uint64_t v1561 = v1561 + v1570 - v1571 * v240[1];
                ++v1560;
              }
              while (v1560 < v1559);
            }
          }
          else if (v93 == 1)
          {
            int v1049 = *v88;
            if (*v88)
            {
              unint64_t v1050 = 0;
              uint64_t v1051 = 0;
              uint64_t v1052 = v87[19];
              uint64_t v1053 = v239[19];
              uint64_t v1054 = v86[19];
              uint64_t v1055 = *(void *)v239[3];
              uint64_t v1056 = 4 * *(void *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v1057 = 0;
                  int v1058 = *(_DWORD *)(v1053 + 4 * v1051);
                  unsigned int v1059 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1054 + v1057) = *(_DWORD *)(v1052 + v1057) * v1058;
                    --v1059;
                    v1057 += 4;
                  }
                  while (v1059 > 1);
                  int v1049 = *v88;
                }
                v1051 += v1055;
                ++v1050;
                v1054 += 4 * (int)v354;
                v1052 += v1056;
              }
              while (v1050 < v1049);
            }
          }
          else
          {
            unint64_t v1942 = v86[6];
            if (v1942)
            {
              unint64_t v1971 = 0;
              uint64_t v1877 = v239[19];
              uint64_t v1892 = v87[19];
              uint64_t v1580 = v86[19];
              do
              {
                uint64_t v1581 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1582 = v87[3];
                  uint64_t v1583 = v90;
                  int v1584 = v1971;
                  do
                  {
                    ldiv_t v1585 = ldiv(v1584, v88[v1583]);
                    int v1584 = v1585.quot;
                    v1581 += *(void *)(v1582 + 8 * v1583--) * v1585.rem;
                  }
                  while (v1583 != -1);
                }
                uint64_t v1586 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1587) = 0;
                }
                else
                {
                  uint64_t v1587 = 0;
                  uint64_t v1588 = v239[3];
                  int v1589 = v1971;
                  do
                  {
                    ldiv_t v1590 = ldiv(v1589, v240[v1586]);
                    int v1589 = v1590.quot;
                    v1587 += *(void *)(v1588 + 8 * v1586--) * v1590.rem;
                  }
                  while (v1586 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1591 = 0;
                  int v1592 = *(_DWORD *)(v1877 + 4 * (int)v1587);
                  unsigned int v1593 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1580 + v1591) = *(_DWORD *)(v1892 + 4 * (int)v1581 + v1591) * v1592;
                    --v1593;
                    v1591 += 4;
                  }
                  while (v1593 > 1);
                }
                v1580 += 4 * (int)v354;
                v1971 += (int)v354;
              }
              while (v1971 < v1942);
            }
          }
          break;
        case 3:
          if (v93 == 2)
          {
            int v1214 = *v88;
            if (*v88)
            {
              unint64_t v1215 = 0;
              uint64_t v1216 = 0;
              uint64_t v1217 = 0;
              uint64_t v1218 = v87[19];
              uint64_t v1219 = v239[19];
              uint64_t v1220 = v86[19];
              ldiv_t v1221 = (uint64_t *)v87[3];
              uint64_t v1222 = *v1221;
              uint64_t v1223 = v1221[1];
              uint64_t v1224 = (uint64_t *)v239[3];
              uint64_t v1225 = *v1224;
              uint64_t v1226 = v1224[1];
              int v1227 = v88[1];
              int v1228 = v1227;
              do
              {
                if (v1228)
                {
                  unint64_t v1229 = 0;
                  uint64_t v1230 = v1219 + 4 * v1216;
                  uint64_t v1231 = v1218 + 4 * v1217;
                  do
                  {
                    if ((int)v354 >= 1)
                    {
                      uint64_t v1232 = 0;
                      unsigned int v1233 = v354 + 1;
                      do
                      {
                        *(_DWORD *)(v1220 + v1232) = *(_DWORD *)(v1230 + v1232) * *(_DWORD *)(v1231 + v1232);
                        --v1233;
                        v1232 += 4;
                      }
                      while (v1233 > 1);
                      int v1227 = v88[1];
                    }
                    v1217 += v1223;
                    v1216 += v1226;
                    v1220 += 4 * (int)v354;
                    ++v1229;
                    v1230 += 4 * v1226;
                    v1231 += 4 * v1223;
                  }
                  while (v1229 < v1227);
                  uint64_t v1234 = v1227;
                  int v1214 = *v88;
                  int v1228 = v1227;
                }
                else
                {
                  uint64_t v1234 = 0;
                }
                uint64_t v1217 = v1217 + v1222 - v1234 * v1223;
                uint64_t v1216 = v1216 + v1225 - v1226 * v240[1];
                ++v1215;
              }
              while (v1215 < v1214);
            }
          }
          else if (v93 == 1)
          {
            int v355 = *v88;
            if (*v88)
            {
              unint64_t v356 = 0;
              uint64_t v357 = v87[19];
              uint64_t v358 = v239[19];
              uint64_t v359 = v86[19];
              uint64_t v360 = 4 * *(void *)v239[3];
              uint64_t v361 = 4 * *(void *)v87[3];
              do
              {
                if ((int)v354 >= 1)
                {
                  uint64_t v362 = 0;
                  unsigned int v363 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v359 + v362) = *(_DWORD *)(v358 + v362) * *(_DWORD *)(v357 + v362);
                    --v363;
                    v362 += 4;
                  }
                  while (v363 > 1);
                  int v355 = *v88;
                }
                ++v356;
                v359 += 4 * (int)v354;
                v358 += v360;
                v357 += v361;
              }
              while (v356 < v355);
            }
          }
          else
          {
            unint64_t v1932 = v86[6];
            if (v1932)
            {
              unint64_t v1961 = 0;
              uint64_t v1872 = v239[19];
              uint64_t v1885 = v87[19];
              uint64_t v1235 = v86[19];
              do
              {
                uint64_t v1236 = 0;
                if ((v90 & 0x80000000) == 0)
                {
                  uint64_t v1237 = v87[3];
                  uint64_t v1238 = v90;
                  int v1239 = v1961;
                  do
                  {
                    ldiv_t v1240 = ldiv(v1239, v88[v1238]);
                    int v1239 = v1240.quot;
                    v1236 += *(void *)(v1237 + 8 * v1238--) * v1240.rem;
                  }
                  while (v1238 != -1);
                }
                uint64_t v1241 = v1981;
                if ((v1981 & 0x80000000) != 0)
                {
                  LODWORD(v1242) = 0;
                }
                else
                {
                  uint64_t v1242 = 0;
                  uint64_t v1243 = v239[3];
                  int v1244 = v1961;
                  do
                  {
                    ldiv_t v1245 = ldiv(v1244, v240[v1241]);
                    int v1244 = v1245.quot;
                    v1242 += *(void *)(v1243 + 8 * v1241--) * v1245.rem;
                  }
                  while (v1241 != -1);
                }
                uint64_t v90 = v1998;
                if ((int)v354 >= 1)
                {
                  uint64_t v1246 = 0;
                  unsigned int v1247 = v354 + 1;
                  do
                  {
                    *(_DWORD *)(v1235 + v1246) = *(_DWORD *)(v1872 + 4 * (int)v1242 + v1246)
                                               * *(_DWORD *)(v1885 + 4 * (int)v1236 + v1246);
                    --v1247;
                    v1246 += 4;
                  }
                  while (v1247 > 1);
                }
                v1235 += 4 * (int)v354;
                v1961 += (int)v354;
              }
              while (v1961 < v1932);
            }
          }
          break;
        default:
LABEL_407:
          switch(v350)
          {
            case 1uLL:
              uint64_t v364 = v86[6];
              if (v364)
              {
                unint64_t v365 = (_DWORD *)v87[19];
                uint64_t v366 = (_DWORD *)v239[19];
                unint64_t v367 = (_DWORD *)v86[19];
                uint64_t v368 = 4 * *(void *)v239[3];
                uint64_t v369 = 4 * *(void *)v87[3];
                do
                {
                  *v367++ = *v366 * *v365;
                  uint64_t v366 = (_DWORD *)((char *)v366 + v368);
                  unint64_t v365 = (_DWORD *)((char *)v365 + v369);
                  --v364;
                }
                while (v364);
              }
              break;
            case 2uLL:
              int v615 = *v88;
              if (*v88)
              {
                unint64_t v616 = 0;
                uint64_t v617 = 0;
                uint64_t v618 = 0;
                uint64_t v619 = 0;
                uint64_t v620 = v87[19];
                uint64_t v621 = v239[19];
                uint64_t v622 = v86[19];
                int v623 = (uint64_t *)v87[3];
                uint64_t v624 = *v623;
                uint64_t v625 = v623[1];
                int v626 = (uint64_t *)v239[3];
                uint64_t v628 = *v626;
                uint64_t v627 = v626[1];
                int v629 = v88[1];
                do
                {
                  if (v629)
                  {
                    for (unint64_t i = 0; i < v629; ++i)
                    {
                      *(_DWORD *)(v622 + 4 * v617 + 4 * i) = *(_DWORD *)(v621 + 4 * v618) * *(_DWORD *)(v620 + 4 * v619);
                      v619 += v625;
                      v618 += v627;
                      int v629 = v88[1];
                    }
                    uint64_t v631 = v629;
                    int v615 = *v88;
                    v617 += i;
                  }
                  else
                  {
                    uint64_t v631 = 0;
                  }
                  uint64_t v619 = v619 + v624 - v631 * v625;
                  uint64_t v618 = v618 + v628 - v627 * v240[1];
                  ++v616;
                }
                while (v616 < v615);
              }
              break;
            case 3uLL:
              int v632 = *v88;
              if (*v88)
              {
                unint64_t v633 = 0;
                uint64_t v634 = 0;
                uint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = v87[19];
                uint64_t v638 = v239[19];
                uint64_t v639 = v86[19];
                int v640 = (uint64_t *)v87[3];
                uint64_t v641 = *v640;
                uint64_t v642 = v640[1];
                uint64_t v643 = (uint64_t *)v239[3];
                uint64_t v644 = *v643;
                uint64_t v645 = v643[1];
                int v646 = v88[1];
                int v647 = v646;
                do
                {
                  if (v647)
                  {
                    unint64_t v648 = 0;
                    uint64_t v649 = v640[2];
                    uint64_t v650 = v643[2];
                    int v651 = v88[2];
                    do
                    {
                      if (v651)
                      {
                        for (unint64_t j = 0; j < v651; ++j)
                        {
                          *(_DWORD *)(v639 + 4 * v634 + 4 * j) = *(_DWORD *)(v638 + 4 * v635)
                                                               * *(_DWORD *)(v637 + 4 * v636);
                          v636 += v649;
                          v635 += v650;
                          int v651 = v88[2];
                        }
                        uint64_t v653 = v651;
                        int v646 = v88[1];
                        v634 += j;
                      }
                      else
                      {
                        uint64_t v653 = 0;
                      }
                      uint64_t v636 = v636 + v642 - v653 * v649;
                      uint64_t v635 = v635 + v645 - v650 * v240[2];
                      ++v648;
                    }
                    while (v648 < v646);
                    uint64_t v654 = v646;
                    int v632 = *v88;
                    int v647 = v646;
                  }
                  else
                  {
                    uint64_t v654 = 0;
                  }
                  uint64_t v636 = v636 + v641 - v654 * v642;
                  uint64_t v635 = v635 + v644 - v645 * v240[1];
                  ++v633;
                }
                while (v633 < v632);
              }
              break;
            case 4uLL:
              int v655 = *v88;
              if (*v88)
              {
                unint64_t v656 = 0;
                uint64_t v657 = 0;
                uint64_t v658 = 0;
                uint64_t v659 = 0;
                uint64_t v660 = v87[19];
                uint64_t v661 = v239[19];
                uint64_t v662 = v86[19];
                int v663 = (uint64_t *)v87[3];
                uint64_t v664 = *v663;
                uint64_t v665 = v663[1];
                uint64_t v666 = (uint64_t *)v239[3];
                uint64_t v667 = *v666;
                uint64_t v668 = v666[1];
                int v669 = v88[1];
                int v670 = v669;
                do
                {
                  if (v670)
                  {
                    unint64_t v671 = 0;
                    uint64_t v672 = v663[2];
                    uint64_t v673 = v666[2];
                    int v674 = v88[2];
                    int v675 = v674;
                    do
                    {
                      if (v675)
                      {
                        unint64_t v676 = 0;
                        uint64_t v677 = v663[3];
                        uint64_t v678 = v666[3];
                        int v679 = v88[3];
                        do
                        {
                          if (v679)
                          {
                            for (unint64_t k = 0; k < v679; ++k)
                            {
                              *(_DWORD *)(v662 + 4 * v657 + 4 * k) = *(_DWORD *)(v661 + 4 * v658)
                                                                   * *(_DWORD *)(v660 + 4 * v659);
                              v659 += v677;
                              v658 += v678;
                              int v679 = v88[3];
                            }
                            uint64_t v681 = v679;
                            int v674 = v88[2];
                            v657 += k;
                          }
                          else
                          {
                            uint64_t v681 = 0;
                          }
                          uint64_t v659 = v659 + v672 - v681 * v677;
                          uint64_t v658 = v658 + v673 - v678 * v240[3];
                          ++v676;
                        }
                        while (v676 < v674);
                        uint64_t v682 = v674;
                        int v669 = v88[1];
                        int v675 = v674;
                      }
                      else
                      {
                        uint64_t v682 = 0;
                      }
                      uint64_t v659 = v659 + v665 - v682 * v672;
                      uint64_t v658 = v658 + v668 - v673 * v240[2];
                      ++v671;
                    }
                    while (v671 < v669);
                    uint64_t v683 = v669;
                    int v655 = *v88;
                    int v670 = v669;
                  }
                  else
                  {
                    uint64_t v683 = 0;
                  }
                  uint64_t v659 = v659 + v664 - v683 * v665;
                  uint64_t v658 = v658 + v667 - v668 * v240[1];
                  ++v656;
                }
                while (v656 < v655);
              }
              break;
            default:
              uint64_t v603 = v86[6];
              if (v603)
              {
                uint64_t v604 = 0;
                uint64_t v1924 = v239[19];
                uint64_t v1953 = v87[19];
                uint64_t v1911 = v86[19];
                do
                {
                  uint64_t v605 = 0;
                  if ((v90 & 0x80000000) == 0)
                  {
                    uint64_t v606 = v87[3];
                    uint64_t v607 = v90;
                    int v608 = v604;
                    do
                    {
                      ldiv_t v609 = ldiv(v608, v88[v607]);
                      int v608 = v609.quot;
                      v605 += *(void *)(v606 + 8 * v607--) * v609.rem;
                    }
                    while (v607 != -1);
                  }
                  uint64_t v610 = v1981;
                  if ((v1981 & 0x80000000) != 0)
                  {
                    LODWORD(v611) = 0;
                  }
                  else
                  {
                    uint64_t v611 = 0;
                    uint64_t v612 = v239[3];
                    int v613 = v604;
                    do
                    {
                      ldiv_t v614 = ldiv(v613, v240[v610]);
                      int v613 = v614.quot;
                      v611 += *(void *)(v612 + 8 * v610--) * v614.rem;
                    }
                    while (v610 != -1);
                  }
                  *(_DWORD *)(v1911 + 4 * v604++) = *(_DWORD *)(v1924 + 4 * (int)v611)
                                                  * *(_DWORD *)(v1953 + 4 * (int)v605);
                  uint64_t v90 = v1998;
                }
                while (v604 != v603);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v23)
      {
        case 0:
LABEL_20:
          char v8 = **(unsigned char **)(*a2 + 152) * **(unsigned char **)(*a1 + 152);
LABEL_21:
          **(unsigned char **)(*(void *)a3 + 152) = v8;
          return;
        case 1:
          int v117 = *(_DWORD *)(*a2 + 160);
          if (v117 >= 1)
          {
            char v118 = **(unsigned char **)(*a1 + 152);
            int v119 = *(unsigned char **)(*(void *)a3 + 152);
            int v120 = *(char **)(*a2 + 152);
            unsigned int v121 = v117 + 1;
            do
            {
              char v122 = *v120++;
              *v119++ = v122 * v118;
              --v121;
            }
            while (v121 > 1);
          }
          return;
        case 2:
          int v123 = *(_DWORD *)(*a1 + 160);
          if (v123 >= 1)
          {
            char v124 = **(unsigned char **)(*a2 + 152);
            uint64_t v125 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v126 = *(char **)(*a1 + 152);
            unsigned int v127 = v123 + 1;
            do
            {
              char v128 = *v126++;
              *v125++ = v128 * v124;
              --v127;
            }
            while (v127 > 1);
          }
          return;
        case 3:
          int v129 = *(_DWORD *)(*(void *)a3 + 48);
          if (v129 >= 1)
          {
            unsigned int v130 = *(unsigned char **)(*(void *)a3 + 152);
            int v131 = *(char **)(*a2 + 152);
            int v132 = *(char **)(*a1 + 152);
            unsigned int v133 = v129 + 1;
            do
            {
              char v135 = *v132++;
              char v134 = v135;
              char v136 = *v131++;
              *v130++ = v136 * v134;
              --v133;
            }
            while (v133 > 1);
          }
          return;
        default:
          v109 = *(void **)a3;
          uint64_t v110 = *a1;
          int v111 = *(int **)*a1;
          uint64_t v112 = (*(void *)(*a1 + 8) - (void)v111) >> 2;
          int v113 = v112 - 1;
          if ((int)v112 - 1 >= -1) {
            int v113 = -1;
          }
          int v114 = v113 + 1;
          int v115 = v112 + 1;
          while (1)
          {
            unsigned int v116 = v115 - 2;
            if (v115 - 2 < 0) {
              break;
            }
            --v115;
            if (*(void *)(*(void *)(v110 + 24) + 8 * v116) != *(void *)(v109[3] + 8 * v116)) {
              goto LABEL_193;
            }
          }
          int v115 = v114;
LABEL_193:
          unint64_t v247 = (int **)*a2;
          uint64_t v248 = *(int **)*a2;
          uint64_t v249 = (*(void *)(*a2 + 8) - (void)v248) >> 2;
          int v250 = v249 - 1;
          if ((int)v249 - 1 >= -1) {
            int v250 = -1;
          }
          int v251 = v250 + 1;
          int v252 = v249 + 1;
          while (1)
          {
            unsigned int v253 = v252 - 2;
            if (v252 - 2 < 0) {
              break;
            }
            --v252;
            if (*(void *)&v247[3][2 * v253] != *(void *)(v109[3] + 8 * v253)) {
              goto LABEL_239;
            }
          }
          int v252 = v251;
LABEL_239:
          int v284 = v112 + 1;
          while (1)
          {
            unsigned int v285 = v284 - 2;
            if (v284 - 2 < 0) {
              break;
            }
            --v284;
            if (*(void *)(*(void *)(v110 + 24) + 8 * v285)) {
              goto LABEL_274;
            }
          }
          int v284 = v114;
LABEL_274:
          int v298 = v249 + 1;
          while (1)
          {
            int v299 = v298 - 2;
            if (v298 - 2 < 0) {
              break;
            }
            --v298;
            if (*(void *)&v247[3][2 * v299]) {
              goto LABEL_413;
            }
          }
          int v298 = v251;
LABEL_413:
          unint64_t v370 = (uint64_t)(v109[1] - *v109) >> 2;
          if (v115 <= v252) {
            int v371 = v252;
          }
          else {
            int v371 = v115;
          }
          if (v115 <= v298) {
            int v115 = v298;
          }
          if (v284 > v252) {
            int v252 = v284;
          }
          if (v370 > v252)
          {
            int v372 = 1;
          }
          else
          {
            int v252 = (uint64_t)(v109[1] - *v109) >> 2;
            int v372 = 4;
          }
          if (v370 > v115)
          {
            int v373 = 2;
          }
          else
          {
            int v115 = v252;
            int v373 = v372;
          }
          if (v370 > v371)
          {
            int v115 = v371;
            int v373 = 3;
          }
          if (!v115) {
            goto LABEL_443;
          }
          unint64_t v374 = *(void *)(v109[3] + 8 * (v115 - 1));
          if (v374 < 0x10) {
            goto LABEL_443;
          }
          uint64_t v1999 = *(void *)(v109[3] + 8 * (v115 - 1));
          switch(v373)
          {
            case 1:
              if (v115 == 2)
              {
                int v1594 = *v111;
                if (*v111)
                {
                  unint64_t v1595 = 0;
                  uint64_t v1596 = 0;
                  uint64_t v1597 = 0;
                  uint64_t v1598 = *(void *)(v110 + 152);
                  vDSP_Length v1599 = v247[19];
                  uint64_t v1600 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1601 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1602 = 0;
                          char v1603 = *(unsigned char *)(v1598 + v1597);
                          unsigned int v1604 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1600 + v1602) = *((unsigned char *)v1599 + v1596 + v1602) * v1603;
                            --v1604;
                            ++v1602;
                          }
                          while (v1604 > 1);
                          uint64_t v110 = *a1;
                          unint64_t v247 = (int **)*a2;
                          int v111 = *(int **)*a1;
                        }
                        uint64_t v1605 = *(void **)(v110 + 24);
                        uint64_t v1606 = v1605[1];
                        v1597 += v1606;
                        v1596 += *((void *)v247[3] + 1);
                        v1600 += (int)v374;
                        ++v1601;
                        unint64_t v1607 = v111[1];
                      }
                      while (v1601 < v1607);
                      int v1594 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1607 = 0;
                      uint64_t v1605 = *(void **)(v110 + 24);
                      uint64_t v1606 = v1605[1];
                    }
                    uint64_t v1597 = *v1605 + v1597 - v1607 * v1606;
                    uint64_t v1596 = *(void *)v247[3] + v1596 - *((void *)v247[3] + 1) * v248[1];
                    ++v1595;
                  }
                  while (v1595 < v1594);
                }
              }
              else if (v115 == 1)
              {
                int v1060 = *v111;
                if (*v111)
                {
                  unint64_t v1061 = 0;
                  uint64_t v1062 = 0;
                  uint64_t v1063 = 0;
                  uint64_t v1064 = *(void *)(v110 + 152);
                  uint64_t v1065 = v247[19];
                  uint64_t v1066 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v1067 = 0;
                      char v1068 = *(unsigned char *)(v1064 + v1063);
                      unsigned int v1069 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v1066 + v1067) = *((unsigned char *)v1065 + v1062 + v1067) * v1068;
                        --v1069;
                        ++v1067;
                      }
                      while (v1069 > 1);
                      uint64_t v110 = *a1;
                      unint64_t v247 = (int **)*a2;
                      int v1060 = **(_DWORD **)*a1;
                    }
                    v1063 += **(void **)(v110 + 24);
                    v1062 += *(void *)v247[3];
                    v1066 += (int)v374;
                    ++v1061;
                  }
                  while (v1061 < v1060);
                }
              }
              else if (v109[6])
              {
                v1920 = v247[19];
                uint64_t v1943 = *(void *)(v110 + 152);
                uint64_t v1972 = (int)v374;
                unint64_t v1994 = 0;
                unsigned int v1907 = v374 + 1;
                uint64_t v1608 = v109[19];
                do
                {
                  uint64_t v1609 = *(void *)*a1;
                  unint64_t v1610 = (unint64_t)(*(void *)(*a1 + 8) - v1609) >> 2;
                  uint64_t v1611 = 0;
                  uint64_t v1612 = (v1610 - 1);
                  if ((int)v1610 - 1 >= 0)
                  {
                    uint64_t v1613 = *(void *)(*a1 + 24);
                    int v1614 = v1994;
                    do
                    {
                      ldiv_t v1615 = ldiv(v1614, *(int *)(v1609 + 4 * v1612));
                      int v1614 = v1615.quot;
                      v1611 += *(void *)(v1613 + 8 * v1612--) * v1615.rem;
                    }
                    while (v1612 != -1);
                  }
                  uint64_t v1616 = *(void *)*a2;
                  unint64_t v1617 = (unint64_t)(*(void *)(*a2 + 8) - v1616) >> 2;
                  uint64_t v1618 = 0;
                  uint64_t v1619 = (v1617 - 1);
                  if ((int)v1617 - 1 >= 0)
                  {
                    uint64_t v1620 = *(void *)(*a2 + 24);
                    int v1621 = v1994;
                    do
                    {
                      ldiv_t v1622 = ldiv(v1621, *(int *)(v1616 + 4 * v1619));
                      int v1621 = v1622.quot;
                      v1618 += *(void *)(v1620 + 8 * v1619--) * v1622.rem;
                    }
                    while (v1619 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1623 = 0;
                    char v1624 = *(unsigned char *)(v1943 + (int)v1611);
                    unsigned int v1625 = v1907;
                    do
                    {
                      *(unsigned char *)(v1608 + v1623) = *((unsigned char *)v1920 + (int)v1618 + v1623) * v1624;
                      --v1625;
                      ++v1623;
                    }
                    while (v1625 > 1);
                    v109 = *(void **)a3;
                  }
                  v1608 += v1972;
                  v1994 += v1972;
                }
                while (v1994 < v109[6]);
              }
              break;
            case 2:
              if (v115 == 2)
              {
                int v1626 = *v111;
                if (*v111)
                {
                  unint64_t v1627 = 0;
                  uint64_t v1628 = 0;
                  uint64_t v1629 = 0;
                  uint64_t v1630 = *(void *)(v110 + 152);
                  uint64_t v1631 = v247[19];
                  uint64_t v1632 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1633 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1634 = 0;
                          char v1635 = *((unsigned char *)v1631 + v1628);
                          unsigned int v1636 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1632 + v1634) = *(unsigned char *)(v1630 + v1629 + v1634) * v1635;
                            --v1636;
                            ++v1634;
                          }
                          while (v1636 > 1);
                          uint64_t v110 = *a1;
                          unint64_t v247 = (int **)*a2;
                          int v111 = *(int **)*a1;
                        }
                        uint64_t v1637 = *(void **)(v110 + 24);
                        uint64_t v1638 = v1637[1];
                        v1629 += v1638;
                        v1628 += *((void *)v247[3] + 1);
                        v1632 += (int)v374;
                        ++v1633;
                        unint64_t v1639 = v111[1];
                      }
                      while (v1633 < v1639);
                      int v1626 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1639 = 0;
                      uint64_t v1637 = *(void **)(v110 + 24);
                      uint64_t v1638 = v1637[1];
                    }
                    uint64_t v1629 = *v1637 + v1629 - v1639 * v1638;
                    uint64_t v1628 = *(void *)v247[3] + v1628 - *((void *)v247[3] + 1) * v248[1];
                    ++v1627;
                  }
                  while (v1627 < v1626);
                }
              }
              else if (v115 == 1)
              {
                int v1070 = *v111;
                if (*v111)
                {
                  unint64_t v1071 = 0;
                  uint64_t v1072 = 0;
                  uint64_t v1073 = 0;
                  uint64_t v1074 = *(void *)(v110 + 152);
                  int v1075 = v247[19];
                  uint64_t v1076 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v1077 = 0;
                      char v1078 = *((unsigned char *)v1075 + v1072);
                      unsigned int v1079 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v1076 + v1077) = *(unsigned char *)(v1074 + v1073 + v1077) * v1078;
                        --v1079;
                        ++v1077;
                      }
                      while (v1079 > 1);
                      uint64_t v110 = *a1;
                      unint64_t v247 = (int **)*a2;
                      int v1070 = **(_DWORD **)*a1;
                    }
                    v1073 += **(void **)(v110 + 24);
                    v1072 += *(void *)v247[3];
                    v1076 += (int)v374;
                    ++v1071;
                  }
                  while (v1071 < v1070);
                }
              }
              else if (v109[6])
              {
                v1921 = v247[19];
                uint64_t v1944 = *(void *)(v110 + 152);
                uint64_t v1973 = (int)v374;
                unint64_t v1995 = 0;
                unsigned int v1908 = v374 + 1;
                uint64_t v1640 = v109[19];
                do
                {
                  uint64_t v1641 = *(void *)*a1;
                  unint64_t v1642 = (unint64_t)(*(void *)(*a1 + 8) - v1641) >> 2;
                  uint64_t v1643 = 0;
                  uint64_t v1644 = (v1642 - 1);
                  if ((int)v1642 - 1 >= 0)
                  {
                    uint64_t v1645 = *(void *)(*a1 + 24);
                    int v1646 = v1995;
                    do
                    {
                      ldiv_t v1647 = ldiv(v1646, *(int *)(v1641 + 4 * v1644));
                      int v1646 = v1647.quot;
                      v1643 += *(void *)(v1645 + 8 * v1644--) * v1647.rem;
                    }
                    while (v1644 != -1);
                  }
                  uint64_t v1648 = *(void *)*a2;
                  unint64_t v1649 = (unint64_t)(*(void *)(*a2 + 8) - v1648) >> 2;
                  uint64_t v1650 = 0;
                  uint64_t v1651 = (v1649 - 1);
                  if ((int)v1649 - 1 >= 0)
                  {
                    uint64_t v1652 = *(void *)(*a2 + 24);
                    int v1653 = v1995;
                    do
                    {
                      ldiv_t v1654 = ldiv(v1653, *(int *)(v1648 + 4 * v1651));
                      int v1653 = v1654.quot;
                      v1650 += *(void *)(v1652 + 8 * v1651--) * v1654.rem;
                    }
                    while (v1651 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1655 = 0;
                    char v1656 = *((unsigned char *)v1921 + (int)v1650);
                    unsigned int v1657 = v1908;
                    do
                    {
                      *(unsigned char *)(v1640 + v1655) = *(unsigned char *)(v1944 + (int)v1643 + v1655) * v1656;
                      --v1657;
                      ++v1655;
                    }
                    while (v1657 > 1);
                    v109 = *(void **)a3;
                  }
                  v1640 += v1973;
                  v1995 += v1973;
                }
                while (v1995 < v109[6]);
              }
              break;
            case 3:
              if (v115 == 2)
              {
                int v1248 = *v111;
                if (*v111)
                {
                  unint64_t v1249 = 0;
                  uint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = *(void *)(v110 + 152);
                  uint64_t v1253 = v247[19];
                  uint64_t v1254 = v109[19];
                  do
                  {
                    if (v111[1])
                    {
                      unint64_t v1255 = 0;
                      do
                      {
                        if ((int)v374 >= 1)
                        {
                          uint64_t v1256 = 0;
                          unsigned int v1257 = v374 + 1;
                          do
                          {
                            *(unsigned char *)(v1254 + v1256) = *((unsigned char *)v1253 + v1250 + v1256)
                                                      * *(unsigned char *)(v1252 + v1251 + v1256);
                            --v1257;
                            ++v1256;
                          }
                          while (v1257 > 1);
                          uint64_t v110 = *a1;
                          unint64_t v247 = (int **)*a2;
                          int v111 = *(int **)*a1;
                        }
                        int v1258 = *(void **)(v110 + 24);
                        uint64_t v1259 = v1258[1];
                        v1251 += v1259;
                        v1250 += *((void *)v247[3] + 1);
                        v1254 += (int)v374;
                        ++v1255;
                        unint64_t v1260 = v111[1];
                      }
                      while (v1255 < v1260);
                      int v1248 = *v111;
                      uint64_t v248 = *v247;
                    }
                    else
                    {
                      unint64_t v1260 = 0;
                      int v1258 = *(void **)(v110 + 24);
                      uint64_t v1259 = v1258[1];
                    }
                    uint64_t v1251 = *v1258 + v1251 - v1260 * v1259;
                    uint64_t v1250 = *(void *)v247[3] + v1250 - *((void *)v247[3] + 1) * v248[1];
                    ++v1249;
                  }
                  while (v1249 < v1248);
                }
              }
              else if (v115 == 1)
              {
                int v375 = *v111;
                if (*v111)
                {
                  unint64_t v376 = 0;
                  uint64_t v377 = 0;
                  uint64_t v378 = 0;
                  uint64_t v379 = *(void *)(v110 + 152);
                  uint64_t v380 = v247[19];
                  uint64_t v381 = v109[19];
                  do
                  {
                    if ((int)v374 >= 1)
                    {
                      uint64_t v382 = 0;
                      unsigned int v383 = v374 + 1;
                      do
                      {
                        *(unsigned char *)(v381 + v382) = *((unsigned char *)v380 + v377 + v382) * *(unsigned char *)(v379 + v378 + v382);
                        --v383;
                        ++v382;
                      }
                      while (v383 > 1);
                      uint64_t v110 = *a1;
                      unint64_t v247 = (int **)*a2;
                      int v375 = **(_DWORD **)*a1;
                    }
                    v378 += **(void **)(v110 + 24);
                    v377 += *(void *)v247[3];
                    v381 += (int)v374;
                    ++v376;
                  }
                  while (v376 < v375);
                }
              }
              else if (v109[6])
              {
                v1917 = v247[19];
                uint64_t v1933 = *(void *)(v110 + 152);
                uint64_t v1962 = (int)v374;
                unint64_t v1991 = 0;
                unsigned int v1902 = v374 + 1;
                uint64_t v1261 = v109[19];
                do
                {
                  uint64_t v1262 = *(void *)*a1;
                  unint64_t v1263 = (unint64_t)(*(void *)(*a1 + 8) - v1262) >> 2;
                  uint64_t v1264 = 0;
                  uint64_t v1265 = (v1263 - 1);
                  if ((int)v1263 - 1 >= 0)
                  {
                    uint64_t v1266 = *(void *)(*a1 + 24);
                    int v1267 = v1991;
                    do
                    {
                      ldiv_t v1268 = ldiv(v1267, *(int *)(v1262 + 4 * v1265));
                      int v1267 = v1268.quot;
                      v1264 += *(void *)(v1266 + 8 * v1265--) * v1268.rem;
                    }
                    while (v1265 != -1);
                  }
                  uint64_t v1269 = *(void *)*a2;
                  unint64_t v1270 = (unint64_t)(*(void *)(*a2 + 8) - v1269) >> 2;
                  uint64_t v1271 = 0;
                  uint64_t v1272 = (v1270 - 1);
                  if ((int)v1270 - 1 >= 0)
                  {
                    uint64_t v1273 = *(void *)(*a2 + 24);
                    int v1274 = v1991;
                    do
                    {
                      ldiv_t v1275 = ldiv(v1274, *(int *)(v1269 + 4 * v1272));
                      int v1274 = v1275.quot;
                      v1271 += *(void *)(v1273 + 8 * v1272--) * v1275.rem;
                    }
                    while (v1272 != -1);
                  }
                  if ((int)v1999 >= 1)
                  {
                    uint64_t v1276 = 0;
                    unsigned int v1277 = v1902;
                    do
                    {
                      *(unsigned char *)(v1261 + v1276) = *((unsigned char *)v1917 + (int)v1271 + v1276)
                                                * *(unsigned char *)(v1933 + (int)v1264 + v1276);
                      --v1277;
                      ++v1276;
                    }
                    while (v1277 > 1);
                    v109 = *(void **)a3;
                  }
                  v1261 += v1962;
                  v1991 += v1962;
                }
                while (v1991 < v109[6]);
              }
              break;
            default:
LABEL_443:
              switch(v370)
              {
                case 1uLL:
                  if (v109[6])
                  {
                    unint64_t v384 = 0;
                    uint64_t v385 = 0;
                    uint64_t v386 = 0;
                    uint64_t v387 = *(void *)(v110 + 152);
                    uint64_t v388 = v247[19];
                    uint64_t v389 = v109[19];
                    do
                    {
                      *(unsigned char *)(v389 + v384) = *((unsigned char *)v388 + v385) * *(unsigned char *)(v387 + v386);
                      v386 += **(void **)(*a1 + 24);
                      v385 += **(void **)(*a2 + 24);
                      ++v384;
                    }
                    while (v384 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v700 = *v111;
                  if (*v111)
                  {
                    unint64_t v701 = 0;
                    uint64_t v702 = 0;
                    uint64_t v703 = 0;
                    uint64_t v704 = 0;
                    uint64_t v705 = *(void *)(v110 + 152);
                    uint64_t v706 = v247[19];
                    uint64_t v707 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v708 = 0;
                        do
                        {
                          *(unsigned char *)(v707 + v702 + v708) = *((unsigned char *)v706 + v703) * *(unsigned char *)(v705 + v704);
                          uint64_t v110 = *a1;
                          uint64_t v709 = *(void **)(*a1 + 24);
                          uint64_t v710 = v709[1];
                          v704 += v710;
                          unint64_t v247 = (int **)*a2;
                          uint64_t v711 = *(int **)(*a2 + 24);
                          uint64_t v712 = *((void *)v711 + 1);
                          v703 += v712;
                          ++v708;
                          int v111 = *(int **)*a1;
                          unint64_t v713 = v111[1];
                        }
                        while (v708 < v713);
                        int v700 = *v111;
                        uint64_t v248 = *v247;
                        v702 += v708;
                      }
                      else
                      {
                        unint64_t v713 = 0;
                        uint64_t v709 = *(void **)(v110 + 24);
                        uint64_t v710 = v709[1];
                        uint64_t v711 = v247[3];
                        uint64_t v712 = *((void *)v711 + 1);
                      }
                      uint64_t v704 = *v709 + v704 - v713 * v710;
                      uint64_t v703 = *(void *)v711 + v703 - v712 * v248[1];
                      ++v701;
                    }
                    while (v701 < v700);
                  }
                  break;
                case 3uLL:
                  int v714 = *v111;
                  if (*v111)
                  {
                    unint64_t v715 = 0;
                    uint64_t v716 = 0;
                    uint64_t v717 = 0;
                    uint64_t v718 = 0;
                    uint64_t v719 = *(void *)(v110 + 152);
                    uint64_t v720 = v247[19];
                    uint64_t v721 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v722 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            unint64_t v723 = 0;
                            do
                            {
                              *(unsigned char *)(v721 + v716 + v723) = *((unsigned char *)v720 + v717) * *(unsigned char *)(v719 + v718);
                              uint64_t v110 = *a1;
                              uint64_t v724 = *(void **)(*a1 + 24);
                              uint64_t v725 = v724[2];
                              v718 += v725;
                              unint64_t v247 = (int **)*a2;
                              uint64_t v726 = *(int **)(*a2 + 24);
                              uint64_t v727 = *((void *)v726 + 2);
                              v717 += v727;
                              ++v723;
                              int v111 = *(int **)*a1;
                              unint64_t v728 = v111[2];
                            }
                            while (v723 < v728);
                            uint64_t v248 = *v247;
                            v716 += v723;
                          }
                          else
                          {
                            unint64_t v728 = 0;
                            uint64_t v724 = *(void **)(v110 + 24);
                            uint64_t v725 = v724[2];
                            uint64_t v726 = v247[3];
                            uint64_t v727 = *((void *)v726 + 2);
                          }
                          uint64_t v729 = v724[1];
                          uint64_t v718 = v729 + v718 - v728 * v725;
                          uint64_t v717 = *((void *)v726 + 1) + v717 - v727 * v248[2];
                          ++v722;
                          unint64_t v730 = v111[1];
                        }
                        while (v722 < v730);
                        int v714 = *v111;
                      }
                      else
                      {
                        unint64_t v730 = 0;
                        uint64_t v724 = *(void **)(v110 + 24);
                        uint64_t v729 = v724[1];
                      }
                      uint64_t v718 = *v724 + v718 - v730 * v729;
                      uint64_t v717 = *(void *)v247[3] + v717 - *((void *)v247[3] + 1) * v248[1];
                      ++v715;
                    }
                    while (v715 < v714);
                  }
                  break;
                case 4uLL:
                  int v731 = *v111;
                  if (*v111)
                  {
                    unint64_t v732 = 0;
                    uint64_t v733 = 0;
                    uint64_t v734 = 0;
                    uint64_t v735 = 0;
                    uint64_t v736 = *(void *)(v110 + 152);
                    uint64_t v737 = v247[19];
                    uint64_t v738 = v109[19];
                    do
                    {
                      if (v111[1])
                      {
                        unint64_t v739 = 0;
                        do
                        {
                          if (v111[2])
                          {
                            unint64_t v740 = 0;
                            do
                            {
                              if (v111[3])
                              {
                                unint64_t v741 = 0;
                                do
                                {
                                  *(unsigned char *)(v738 + v733 + v741) = *((unsigned char *)v737 + v734) * *(unsigned char *)(v736 + v735);
                                  uint64_t v110 = *a1;
                                  int v742 = *(void **)(*a1 + 24);
                                  uint64_t v743 = v742[3];
                                  v735 += v743;
                                  unint64_t v247 = (int **)*a2;
                                  uint64_t v744 = *(int **)(*a2 + 24);
                                  uint64_t v745 = *((void *)v744 + 3);
                                  v734 += v745;
                                  ++v741;
                                  int v111 = *(int **)*a1;
                                  unint64_t v746 = v111[3];
                                }
                                while (v741 < v746);
                                uint64_t v248 = *v247;
                                v733 += v741;
                              }
                              else
                              {
                                unint64_t v746 = 0;
                                int v742 = *(void **)(v110 + 24);
                                uint64_t v743 = v742[3];
                                uint64_t v744 = v247[3];
                                uint64_t v745 = *((void *)v744 + 3);
                              }
                              uint64_t v747 = v742[2];
                              uint64_t v735 = v747 + v735 - v746 * v743;
                              uint64_t v734 = *((void *)v744 + 2) + v734 - v745 * v248[3];
                              ++v740;
                              unint64_t v748 = v111[2];
                            }
                            while (v740 < v748);
                          }
                          else
                          {
                            unint64_t v748 = 0;
                            int v742 = *(void **)(v110 + 24);
                            uint64_t v747 = v742[2];
                          }
                          uint64_t v735 = v742[1] + v735 - v748 * v747;
                          uint64_t v734 = *((void *)v247[3] + 1) + v734 - *((void *)v247[3] + 2) * v248[2];
                          ++v739;
                          unint64_t v749 = v111[1];
                        }
                        while (v739 < v749);
                        int v731 = *v111;
                      }
                      else
                      {
                        unint64_t v749 = 0;
                      }
                      uint64_t v735 = **(void **)(v110 + 24) + v735 - *(void *)(*(void *)(v110 + 24) + 8) * v749;
                      uint64_t v734 = *(void *)v247[3] + v734 - *((void *)v247[3] + 1) * v248[1];
                      ++v732;
                    }
                    while (v732 < v731);
                  }
                  break;
                default:
                  if (v109[6])
                  {
                    unint64_t v684 = 0;
                    v1987 = v247[19];
                    uint64_t v2005 = *(void *)(v110 + 152);
                    uint64_t v685 = v109[19];
                    do
                    {
                      uint64_t v686 = *(void *)*a1;
                      unint64_t v687 = (unint64_t)(*(void *)(*a1 + 8) - v686) >> 2;
                      uint64_t v688 = 0;
                      uint64_t v689 = (v687 - 1);
                      if ((int)v687 - 1 >= 0)
                      {
                        uint64_t v690 = *(void *)(*a1 + 24);
                        int v691 = v684;
                        do
                        {
                          ldiv_t v692 = ldiv(v691, *(int *)(v686 + 4 * v689));
                          int v691 = v692.quot;
                          v688 += *(void *)(v690 + 8 * v689--) * v692.rem;
                        }
                        while (v689 != -1);
                      }
                      uint64_t v693 = *(void *)*a2;
                      unint64_t v694 = (unint64_t)(*(void *)(*a2 + 8) - v693) >> 2;
                      uint64_t v695 = 0;
                      uint64_t v696 = (v694 - 1);
                      if ((int)v694 - 1 >= 0)
                      {
                        uint64_t v697 = *(void *)(*a2 + 24);
                        int v698 = v684;
                        do
                        {
                          ldiv_t v699 = ldiv(v698, *(int *)(v693 + 4 * v696));
                          int v698 = v699.quot;
                          v695 += *(void *)(v697 + 8 * v696--) * v699.rem;
                        }
                        while (v696 != -1);
                      }
                      *(unsigned char *)(v685 + v684++) = *((unsigned char *)v1987 + (int)v695) * *(unsigned char *)(v2005 + (int)v688);
                    }
                    while (v684 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v24)
      {
        case 0:
LABEL_23:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a2 + 152) * **(_DWORD **)(*a1 + 152);
          return;
        case 1:
          int v146 = *(_DWORD *)(*a2 + 160);
          if (v146 >= 1)
          {
            int v147 = **(_DWORD **)(*a1 + 152);
            unsigned int v148 = *(_DWORD **)(*(void *)a3 + 152);
            int v149 = *(int **)(*a2 + 152);
            unsigned int v150 = v146 + 1;
            do
            {
              int v151 = *v149++;
              *v148++ = v151 * v147;
              --v150;
            }
            while (v150 > 1);
          }
          return;
        case 2:
          int v152 = *(_DWORD *)(*a1 + 160);
          if (v152 >= 1)
          {
            int v153 = **(_DWORD **)(*a2 + 152);
            int v154 = *(_DWORD **)(*(void *)a3 + 152);
            int v155 = *(int **)(*a1 + 152);
            unsigned int v156 = v152 + 1;
            do
            {
              int v157 = *v155++;
              *v154++ = v157 * v153;
              --v156;
            }
            while (v156 > 1);
          }
          return;
        case 3:
          int v158 = *(_DWORD *)(*(void *)a3 + 48);
          if (v158 >= 1)
          {
            int v159 = *(_DWORD **)(*(void *)a3 + 152);
            int v160 = *(int **)(*a2 + 152);
            int v161 = *(int **)(*a1 + 152);
            unsigned int v162 = v158 + 1;
            do
            {
              int v164 = *v161++;
              int v163 = v164;
              int v165 = *v160++;
              *v159++ = v165 * v163;
              --v162;
            }
            while (v162 > 1);
          }
          return;
        default:
          int v137 = *(void **)a3;
          unsigned int v138 = (void *)*a1;
          int v139 = *(int **)*a1;
          uint64_t v140 = (v138[1] - (void)v139) >> 2;
          uint64_t v141 = (v140 - 1);
          if ((int)v141 >= -1) {
            int v142 = -1;
          }
          else {
            int v142 = v140 - 1;
          }
          int v143 = v142 + 1;
          int v144 = v140 + 1;
          while (1)
          {
            unsigned int v145 = v144 - 2;
            if (v144 - 2 < 0) {
              break;
            }
            --v144;
            if (*(void *)(v138[3] + 8 * v145) != *(void *)(v137[3] + 8 * v145)) {
              goto LABEL_200;
            }
          }
          int v144 = v143;
LABEL_200:
          v254 = (void *)*a2;
          uint64_t v255 = *(int **)*a2;
          uint64_t v256 = (v254[1] - (void)v255) >> 2;
          uint64_t v257 = (v256 - 1);
          if ((int)v257 >= -1) {
            int v258 = -1;
          }
          else {
            int v258 = v256 - 1;
          }
          int v259 = v258 + 1;
          int v260 = v256 + 1;
          while (1)
          {
            unsigned int v261 = v260 - 2;
            if (v260 - 2 < 0) {
              break;
            }
            --v260;
            if (*(void *)(v254[3] + 8 * v261) != *(void *)(v137[3] + 8 * v261)) {
              goto LABEL_244;
            }
          }
          int v260 = v259;
LABEL_244:
          int v286 = v140 + 1;
          while (1)
          {
            unsigned int v287 = v286 - 2;
            if (v286 - 2 < 0) {
              break;
            }
            --v286;
            if (*(void *)(v138[3] + 8 * v287)) {
              goto LABEL_279;
            }
          }
          int v286 = v143;
LABEL_279:
          int v300 = v256 + 1;
          while (1)
          {
            unsigned int v301 = v300 - 2;
            if (v300 - 2 < 0) {
              break;
            }
            --v300;
            if (*(void *)(v254[3] + 8 * v301)) {
              goto LABEL_449;
            }
          }
          int v300 = v259;
LABEL_449:
          unint64_t v390 = (uint64_t)(v137[1] - *v137) >> 2;
          if (v144 <= v260) {
            int v391 = v260;
          }
          else {
            int v391 = v144;
          }
          if (v144 <= v300) {
            int v144 = v300;
          }
          if (v286 > v260) {
            int v260 = v286;
          }
          if (v390 > v260)
          {
            int v392 = 1;
          }
          else
          {
            int v260 = (uint64_t)(v137[1] - *v137) >> 2;
            int v392 = 4;
          }
          if (v390 > v144)
          {
            int v393 = 2;
          }
          else
          {
            int v144 = v260;
            int v393 = v392;
          }
          if (v390 > v391)
          {
            int v144 = v391;
            int v393 = 3;
          }
          uint64_t v1982 = v257;
          uint64_t v2000 = v141;
          if (!v144) {
            goto LABEL_479;
          }
          unint64_t v394 = *(void *)(v137[3] + 8 * (v144 - 1));
          if (v394 < 0x10) {
            goto LABEL_479;
          }
          switch(v393)
          {
            case 1:
              if (v144 == 2)
              {
                int v1658 = *v139;
                if (*v139)
                {
                  unint64_t v1659 = 0;
                  uint64_t v1660 = 0;
                  uint64_t v1661 = 0;
                  uint64_t v1662 = v138[19];
                  uint64_t v1663 = v254[19];
                  uint64_t v1664 = v137[19];
                  uint64_t v1665 = (uint64_t *)v138[3];
                  uint64_t v1666 = *v1665;
                  uint64_t v1667 = v1665[1];
                  vDSP_Length v1668 = (uint64_t *)v254[3];
                  uint64_t v1669 = *v1668;
                  uint64_t v1670 = v1668[1];
                  int v1671 = v139[1];
                  int v1672 = v1671;
                  do
                  {
                    if (v1672)
                    {
                      unint64_t v1673 = 0;
                      uint64_t v1674 = v1663 + 4 * v1660;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1675 = 0;
                          int v1676 = *(_DWORD *)(v1662 + 4 * v1661);
                          unsigned int v1677 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1664 + v1675) = *(_DWORD *)(v1674 + v1675) * v1676;
                            --v1677;
                            v1675 += 4;
                          }
                          while (v1677 > 1);
                          int v1671 = v139[1];
                        }
                        v1661 += v1667;
                        v1660 += v1670;
                        v1664 += 4 * (int)v394;
                        ++v1673;
                        v1674 += 4 * v1670;
                      }
                      while (v1673 < v1671);
                      uint64_t v1678 = v1671;
                      int v1658 = *v139;
                      int v1672 = v1671;
                    }
                    else
                    {
                      uint64_t v1678 = 0;
                    }
                    uint64_t v1661 = v1661 + v1666 - v1678 * v1667;
                    uint64_t v1660 = v1660 + v1669 - v1670 * v255[1];
                    ++v1659;
                  }
                  while (v1659 < v1658);
                }
              }
              else if (v144 == 1)
              {
                int v1080 = *v139;
                if (*v139)
                {
                  unint64_t v1081 = 0;
                  uint64_t v1082 = 0;
                  uint64_t v1083 = v138[19];
                  uint64_t v1084 = v254[19];
                  uint64_t v1085 = v137[19];
                  uint64_t v1086 = *(void *)v138[3];
                  uint64_t v1087 = 4 * *(void *)v254[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1088 = 0;
                      int v1089 = *(_DWORD *)(v1083 + 4 * v1082);
                      unsigned int v1090 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1085 + v1088) = *(_DWORD *)(v1084 + v1088) * v1089;
                        --v1090;
                        v1088 += 4;
                      }
                      while (v1090 > 1);
                      int v1080 = *v139;
                    }
                    v1082 += v1086;
                    ++v1081;
                    v1085 += 4 * (int)v394;
                    v1084 += v1087;
                  }
                  while (v1081 < v1080);
                }
              }
              else
              {
                unint64_t v1945 = v137[6];
                if (v1945)
                {
                  unint64_t v1974 = 0;
                  uint64_t v1878 = v254[19];
                  uint64_t v1893 = v138[19];
                  uint64_t v1679 = v137[19];
                  do
                  {
                    uint64_t v1680 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1681 = v138[3];
                      uint64_t v1682 = v141;
                      int v1683 = v1974;
                      do
                      {
                        ldiv_t v1684 = ldiv(v1683, v139[v1682]);
                        int v1683 = v1684.quot;
                        v1680 += *(void *)(v1681 + 8 * v1682--) * v1684.rem;
                      }
                      while (v1682 != -1);
                    }
                    uint64_t v1685 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1686) = 0;
                    }
                    else
                    {
                      uint64_t v1686 = 0;
                      uint64_t v1687 = v254[3];
                      int v1688 = v1974;
                      do
                      {
                        ldiv_t v1689 = ldiv(v1688, v255[v1685]);
                        int v1688 = v1689.quot;
                        v1686 += *(void *)(v1687 + 8 * v1685--) * v1689.rem;
                      }
                      while (v1685 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1690 = 0;
                      int v1691 = *(_DWORD *)(v1893 + 4 * (int)v1680);
                      unsigned int v1692 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1679 + v1690) = *(_DWORD *)(v1878 + 4 * (int)v1686 + v1690) * v1691;
                        --v1692;
                        v1690 += 4;
                      }
                      while (v1692 > 1);
                    }
                    v1679 += 4 * (int)v394;
                    v1974 += (int)v394;
                  }
                  while (v1974 < v1945);
                }
              }
              break;
            case 2:
              if (v144 == 2)
              {
                int v1693 = *v139;
                if (*v139)
                {
                  unint64_t v1694 = 0;
                  uint64_t v1695 = 0;
                  uint64_t v1696 = 0;
                  uint64_t v1697 = v138[19];
                  uint64_t v1698 = v254[19];
                  uint64_t v1699 = v137[19];
                  uint64_t v1700 = (uint64_t *)v138[3];
                  uint64_t v1701 = *v1700;
                  uint64_t v1702 = v1700[1];
                  uint64_t v1703 = (uint64_t *)v254[3];
                  uint64_t v1704 = *v1703;
                  uint64_t v1705 = v1703[1];
                  int v1706 = v139[1];
                  int v1707 = v1706;
                  do
                  {
                    if (v1707)
                    {
                      unint64_t v1708 = 0;
                      uint64_t v1709 = v1697 + 4 * v1696;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1710 = 0;
                          int v1711 = *(_DWORD *)(v1698 + 4 * v1695);
                          unsigned int v1712 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1699 + v1710) = *(_DWORD *)(v1709 + v1710) * v1711;
                            --v1712;
                            v1710 += 4;
                          }
                          while (v1712 > 1);
                          int v1706 = v139[1];
                        }
                        v1696 += v1702;
                        v1695 += v1705;
                        v1699 += 4 * (int)v394;
                        ++v1708;
                        v1709 += 4 * v1702;
                      }
                      while (v1708 < v1706);
                      uint64_t v1713 = v1706;
                      int v1693 = *v139;
                      int v1707 = v1706;
                    }
                    else
                    {
                      uint64_t v1713 = 0;
                    }
                    uint64_t v1696 = v1696 + v1701 - v1713 * v1702;
                    uint64_t v1695 = v1695 + v1704 - v1705 * v255[1];
                    ++v1694;
                  }
                  while (v1694 < v1693);
                }
              }
              else if (v144 == 1)
              {
                int v1091 = *v139;
                if (*v139)
                {
                  unint64_t v1092 = 0;
                  uint64_t v1093 = 0;
                  uint64_t v1094 = v138[19];
                  uint64_t v1095 = v254[19];
                  uint64_t v1096 = v137[19];
                  uint64_t v1097 = *(void *)v254[3];
                  uint64_t v1098 = 4 * *(void *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1099 = 0;
                      int v1100 = *(_DWORD *)(v1095 + 4 * v1093);
                      unsigned int v1101 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1096 + v1099) = *(_DWORD *)(v1094 + v1099) * v1100;
                        --v1101;
                        v1099 += 4;
                      }
                      while (v1101 > 1);
                      int v1091 = *v139;
                    }
                    v1093 += v1097;
                    ++v1092;
                    v1096 += 4 * (int)v394;
                    v1094 += v1098;
                  }
                  while (v1092 < v1091);
                }
              }
              else
              {
                unint64_t v1946 = v137[6];
                if (v1946)
                {
                  unint64_t v1975 = 0;
                  uint64_t v1879 = v254[19];
                  uint64_t v1894 = v138[19];
                  uint64_t v1714 = v137[19];
                  do
                  {
                    uint64_t v1715 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1716 = v138[3];
                      uint64_t v1717 = v141;
                      int v1718 = v1975;
                      do
                      {
                        ldiv_t v1719 = ldiv(v1718, v139[v1717]);
                        int v1718 = v1719.quot;
                        v1715 += *(void *)(v1716 + 8 * v1717--) * v1719.rem;
                      }
                      while (v1717 != -1);
                    }
                    uint64_t v1720 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1721) = 0;
                    }
                    else
                    {
                      uint64_t v1721 = 0;
                      uint64_t v1722 = v254[3];
                      int v1723 = v1975;
                      do
                      {
                        ldiv_t v1724 = ldiv(v1723, v255[v1720]);
                        int v1723 = v1724.quot;
                        v1721 += *(void *)(v1722 + 8 * v1720--) * v1724.rem;
                      }
                      while (v1720 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1725 = 0;
                      int v1726 = *(_DWORD *)(v1879 + 4 * (int)v1721);
                      unsigned int v1727 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1714 + v1725) = *(_DWORD *)(v1894 + 4 * (int)v1715 + v1725) * v1726;
                        --v1727;
                        v1725 += 4;
                      }
                      while (v1727 > 1);
                    }
                    v1714 += 4 * (int)v394;
                    v1975 += (int)v394;
                  }
                  while (v1975 < v1946);
                }
              }
              break;
            case 3:
              if (v144 == 2)
              {
                int v1278 = *v139;
                if (*v139)
                {
                  unint64_t v1279 = 0;
                  uint64_t v1280 = 0;
                  uint64_t v1281 = 0;
                  uint64_t v1282 = v138[19];
                  uint64_t v1283 = v254[19];
                  uint64_t v1284 = v137[19];
                  uint64_t v1285 = (uint64_t *)v138[3];
                  uint64_t v1286 = *v1285;
                  uint64_t v1287 = v1285[1];
                  uint64_t v1288 = (uint64_t *)v254[3];
                  uint64_t v1289 = *v1288;
                  uint64_t v1290 = v1288[1];
                  int v1291 = v139[1];
                  int v1292 = v1291;
                  do
                  {
                    if (v1292)
                    {
                      unint64_t v1293 = 0;
                      uint64_t v1294 = v1283 + 4 * v1280;
                      uint64_t v1295 = v1282 + 4 * v1281;
                      do
                      {
                        if ((int)v394 >= 1)
                        {
                          uint64_t v1296 = 0;
                          unsigned int v1297 = v394 + 1;
                          do
                          {
                            *(_DWORD *)(v1284 + v1296) = *(_DWORD *)(v1294 + v1296) * *(_DWORD *)(v1295 + v1296);
                            --v1297;
                            v1296 += 4;
                          }
                          while (v1297 > 1);
                          int v1291 = v139[1];
                        }
                        v1281 += v1287;
                        v1280 += v1290;
                        v1284 += 4 * (int)v394;
                        ++v1293;
                        v1294 += 4 * v1290;
                        v1295 += 4 * v1287;
                      }
                      while (v1293 < v1291);
                      uint64_t v1298 = v1291;
                      int v1278 = *v139;
                      int v1292 = v1291;
                    }
                    else
                    {
                      uint64_t v1298 = 0;
                    }
                    uint64_t v1281 = v1281 + v1286 - v1298 * v1287;
                    uint64_t v1280 = v1280 + v1289 - v1290 * v255[1];
                    ++v1279;
                  }
                  while (v1279 < v1278);
                }
              }
              else if (v144 == 1)
              {
                int v395 = *v139;
                if (*v139)
                {
                  unint64_t v396 = 0;
                  uint64_t v397 = v138[19];
                  uint64_t v398 = v254[19];
                  uint64_t v399 = v137[19];
                  uint64_t v400 = 4 * *(void *)v254[3];
                  uint64_t v401 = 4 * *(void *)v138[3];
                  do
                  {
                    if ((int)v394 >= 1)
                    {
                      uint64_t v402 = 0;
                      unsigned int v403 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v399 + v402) = *(_DWORD *)(v398 + v402) * *(_DWORD *)(v397 + v402);
                        --v403;
                        v402 += 4;
                      }
                      while (v403 > 1);
                      int v395 = *v139;
                    }
                    ++v396;
                    v399 += 4 * (int)v394;
                    v398 += v400;
                    v397 += v401;
                  }
                  while (v396 < v395);
                }
              }
              else
              {
                unint64_t v1934 = v137[6];
                if (v1934)
                {
                  unint64_t v1963 = 0;
                  uint64_t v1873 = v254[19];
                  uint64_t v1886 = v138[19];
                  uint64_t v1299 = v137[19];
                  do
                  {
                    uint64_t v1300 = 0;
                    if ((v141 & 0x80000000) == 0)
                    {
                      uint64_t v1301 = v138[3];
                      uint64_t v1302 = v141;
                      int v1303 = v1963;
                      do
                      {
                        ldiv_t v1304 = ldiv(v1303, v139[v1302]);
                        int v1303 = v1304.quot;
                        v1300 += *(void *)(v1301 + 8 * v1302--) * v1304.rem;
                      }
                      while (v1302 != -1);
                    }
                    uint64_t v1305 = v1982;
                    if ((v1982 & 0x80000000) != 0)
                    {
                      LODWORD(v1306) = 0;
                    }
                    else
                    {
                      uint64_t v1306 = 0;
                      uint64_t v1307 = v254[3];
                      int v1308 = v1963;
                      do
                      {
                        ldiv_t v1309 = ldiv(v1308, v255[v1305]);
                        int v1308 = v1309.quot;
                        v1306 += *(void *)(v1307 + 8 * v1305--) * v1309.rem;
                      }
                      while (v1305 != -1);
                    }
                    uint64_t v141 = v2000;
                    if ((int)v394 >= 1)
                    {
                      uint64_t v1310 = 0;
                      unsigned int v1311 = v394 + 1;
                      do
                      {
                        *(_DWORD *)(v1299 + v1310) = *(_DWORD *)(v1873 + 4 * (int)v1306 + v1310)
                                                   * *(_DWORD *)(v1886 + 4 * (int)v1300 + v1310);
                        --v1311;
                        v1310 += 4;
                      }
                      while (v1311 > 1);
                    }
                    v1299 += 4 * (int)v394;
                    v1963 += (int)v394;
                  }
                  while (v1963 < v1934);
                }
              }
              break;
            default:
LABEL_479:
              switch(v390)
              {
                case 1uLL:
                  uint64_t v404 = v137[6];
                  if (v404)
                  {
                    uint64_t v405 = (_DWORD *)v138[19];
                    uint64_t v406 = (_DWORD *)v254[19];
                    uint64_t v407 = (_DWORD *)v137[19];
                    uint64_t v408 = 4 * *(void *)v254[3];
                    uint64_t v409 = 4 * *(void *)v138[3];
                    do
                    {
                      *v407++ = *v406 * *v405;
                      uint64_t v406 = (_DWORD *)((char *)v406 + v408);
                      uint64_t v405 = (_DWORD *)((char *)v405 + v409);
                      --v404;
                    }
                    while (v404);
                  }
                  break;
                case 2uLL:
                  int v762 = *v139;
                  if (*v139)
                  {
                    unint64_t v763 = 0;
                    uint64_t v764 = 0;
                    uint64_t v765 = 0;
                    uint64_t v766 = 0;
                    uint64_t v767 = v138[19];
                    uint64_t v768 = v254[19];
                    uint64_t v769 = v137[19];
                    uint64_t v770 = (uint64_t *)v138[3];
                    uint64_t v771 = *v770;
                    uint64_t v772 = v770[1];
                    uint64_t v773 = (uint64_t *)v254[3];
                    uint64_t v775 = *v773;
                    uint64_t v774 = v773[1];
                    int v776 = v139[1];
                    do
                    {
                      if (v776)
                      {
                        for (unint64_t m = 0; m < v776; ++m)
                        {
                          *(_DWORD *)(v769 + 4 * v764 + 4 * m) = *(_DWORD *)(v768 + 4 * v765)
                                                               * *(_DWORD *)(v767 + 4 * v766);
                          v766 += v772;
                          v765 += v774;
                          int v776 = v139[1];
                        }
                        uint64_t v778 = v776;
                        int v762 = *v139;
                        v764 += m;
                      }
                      else
                      {
                        uint64_t v778 = 0;
                      }
                      uint64_t v766 = v766 + v771 - v778 * v772;
                      uint64_t v765 = v765 + v775 - v774 * v255[1];
                      ++v763;
                    }
                    while (v763 < v762);
                  }
                  break;
                case 3uLL:
                  int v779 = *v139;
                  if (*v139)
                  {
                    unint64_t v780 = 0;
                    uint64_t v781 = 0;
                    uint64_t v782 = 0;
                    uint64_t v783 = 0;
                    uint64_t v784 = v138[19];
                    uint64_t v785 = v254[19];
                    uint64_t v786 = v137[19];
                    uint64_t v787 = (uint64_t *)v138[3];
                    uint64_t v788 = *v787;
                    uint64_t v789 = v787[1];
                    uint64_t v790 = (uint64_t *)v254[3];
                    uint64_t v791 = *v790;
                    uint64_t v792 = v790[1];
                    int v793 = v139[1];
                    int v794 = v793;
                    do
                    {
                      if (v794)
                      {
                        unint64_t v795 = 0;
                        uint64_t v796 = v787[2];
                        uint64_t v797 = v790[2];
                        int v798 = v139[2];
                        do
                        {
                          if (v798)
                          {
                            for (unint64_t n = 0; n < v798; ++n)
                            {
                              *(_DWORD *)(v786 + 4 * v781 + 4 * n) = *(_DWORD *)(v785 + 4 * v782)
                                                                   * *(_DWORD *)(v784 + 4 * v783);
                              v783 += v796;
                              v782 += v797;
                              int v798 = v139[2];
                            }
                            uint64_t v800 = v798;
                            int v793 = v139[1];
                            v781 += n;
                          }
                          else
                          {
                            uint64_t v800 = 0;
                          }
                          uint64_t v783 = v783 + v789 - v800 * v796;
                          uint64_t v782 = v782 + v792 - v797 * v255[2];
                          ++v795;
                        }
                        while (v795 < v793);
                        uint64_t v801 = v793;
                        int v779 = *v139;
                        int v794 = v793;
                      }
                      else
                      {
                        uint64_t v801 = 0;
                      }
                      uint64_t v783 = v783 + v788 - v801 * v789;
                      uint64_t v782 = v782 + v791 - v792 * v255[1];
                      ++v780;
                    }
                    while (v780 < v779);
                  }
                  break;
                case 4uLL:
                  int v802 = *v139;
                  if (*v139)
                  {
                    unint64_t v803 = 0;
                    uint64_t v804 = 0;
                    uint64_t v805 = 0;
                    uint64_t v806 = 0;
                    uint64_t v807 = v138[19];
                    uint64_t v808 = v254[19];
                    uint64_t v809 = v137[19];
                    uint64_t v810 = (uint64_t *)v138[3];
                    uint64_t v811 = *v810;
                    uint64_t v812 = v810[1];
                    uint64_t v813 = (uint64_t *)v254[3];
                    uint64_t v814 = *v813;
                    uint64_t v815 = v813[1];
                    int v816 = v139[1];
                    int v817 = v816;
                    do
                    {
                      if (v817)
                      {
                        unint64_t v818 = 0;
                        uint64_t v819 = v810[2];
                        uint64_t v820 = v813[2];
                        int v821 = v139[2];
                        int v822 = v821;
                        do
                        {
                          if (v822)
                          {
                            unint64_t v823 = 0;
                            uint64_t v824 = v810[3];
                            uint64_t v825 = v813[3];
                            int v826 = v139[3];
                            do
                            {
                              if (v826)
                              {
                                for (iunint64_t i = 0; ii < v826; ++ii)
                                {
                                  *(_DWORD *)(v809 + 4 * v804 + 4 * ii) = *(_DWORD *)(v808 + 4 * v805)
                                                                        * *(_DWORD *)(v807 + 4 * v806);
                                  v806 += v824;
                                  v805 += v825;
                                  int v826 = v139[3];
                                }
                                uint64_t v828 = v826;
                                int v821 = v139[2];
                                v804 += ii;
                              }
                              else
                              {
                                uint64_t v828 = 0;
                              }
                              uint64_t v806 = v806 + v819 - v828 * v824;
                              uint64_t v805 = v805 + v820 - v825 * v255[3];
                              ++v823;
                            }
                            while (v823 < v821);
                            uint64_t v829 = v821;
                            int v816 = v139[1];
                            int v822 = v821;
                          }
                          else
                          {
                            uint64_t v829 = 0;
                          }
                          uint64_t v806 = v806 + v812 - v829 * v819;
                          uint64_t v805 = v805 + v815 - v820 * v255[2];
                          ++v818;
                        }
                        while (v818 < v816);
                        uint64_t v830 = v816;
                        int v802 = *v139;
                        int v817 = v816;
                      }
                      else
                      {
                        uint64_t v830 = 0;
                      }
                      uint64_t v806 = v806 + v811 - v830 * v812;
                      uint64_t v805 = v805 + v814 - v815 * v255[1];
                      ++v803;
                    }
                    while (v803 < v802);
                  }
                  break;
                default:
                  uint64_t v750 = v137[6];
                  if (v750)
                  {
                    uint64_t v751 = 0;
                    uint64_t v1925 = v254[19];
                    uint64_t v1954 = v138[19];
                    uint64_t v1912 = v137[19];
                    do
                    {
                      uint64_t v752 = 0;
                      if ((v141 & 0x80000000) == 0)
                      {
                        uint64_t v753 = v138[3];
                        uint64_t v754 = v141;
                        int v755 = v751;
                        do
                        {
                          ldiv_t v756 = ldiv(v755, v139[v754]);
                          int v755 = v756.quot;
                          v752 += *(void *)(v753 + 8 * v754--) * v756.rem;
                        }
                        while (v754 != -1);
                      }
                      uint64_t v757 = v1982;
                      if ((v1982 & 0x80000000) != 0)
                      {
                        LODWORD(v758) = 0;
                      }
                      else
                      {
                        uint64_t v758 = 0;
                        uint64_t v759 = v254[3];
                        int v760 = v751;
                        do
                        {
                          ldiv_t v761 = ldiv(v760, v255[v757]);
                          int v760 = v761.quot;
                          v758 += *(void *)(v759 + 8 * v757--) * v761.rem;
                        }
                        while (v757 != -1);
                      }
                      *(_DWORD *)(v1912 + 4 * v751++) = *(_DWORD *)(v1925 + 4 * (int)v758)
                                                      * *(_DWORD *)(v1954 + 4 * (int)v752);
                      uint64_t v141 = v2000;
                    }
                    while (v751 != v750);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v25)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a2 + 152) * **(void **)(*a1 + 152);
          return;
        case 1:
          int v175 = *(_DWORD *)(*a2 + 160);
          if (v175 >= 1)
          {
            uint64_t v176 = **(void **)(*a1 + 152);
            vDSP_Length v177 = *(void **)(*(void *)a3 + 152);
            uint64_t v178 = *(uint64_t **)(*a2 + 152);
            unsigned int v179 = v175 + 1;
            do
            {
              uint64_t v180 = *v178++;
              *v177++ = v180 * v176;
              --v179;
            }
            while (v179 > 1);
          }
          return;
        case 2:
          int v181 = *(_DWORD *)(*a1 + 160);
          if (v181 >= 1)
          {
            uint64_t v182 = **(void **)(*a2 + 152);
            uint64_t v183 = *(void **)(*(void *)a3 + 152);
            uint64_t v184 = *(uint64_t **)(*a1 + 152);
            unsigned int v185 = v181 + 1;
            do
            {
              uint64_t v186 = *v184++;
              *v183++ = v186 * v182;
              --v185;
            }
            while (v185 > 1);
          }
          return;
        case 3:
          int v187 = *(_DWORD *)(*(void *)a3 + 48);
          if (v187 >= 1)
          {
            int v188 = *(void **)(*(void *)a3 + 152);
            int v189 = *(uint64_t **)(*a2 + 152);
            int v190 = *(uint64_t **)(*a1 + 152);
            unsigned int v191 = v187 + 1;
            do
            {
              uint64_t v193 = *v190++;
              uint64_t v192 = v193;
              uint64_t v194 = *v189++;
              *v188++ = v194 * v192;
              --v191;
            }
            while (v191 > 1);
          }
          return;
        default:
          int v166 = *(void **)a3;
          unint64_t v167 = (void *)*a1;
          int v168 = *(int **)*a1;
          uint64_t v169 = (v167[1] - (void)v168) >> 2;
          uint64_t v170 = (v169 - 1);
          if ((int)v170 >= -1) {
            int v171 = -1;
          }
          else {
            int v171 = v169 - 1;
          }
          int v172 = v171 + 1;
          int v173 = v169 + 1;
          while (1)
          {
            unsigned int v174 = v173 - 2;
            if (v173 - 2 < 0) {
              break;
            }
            --v173;
            if (*(void *)(v167[3] + 8 * v174) != *(void *)(v166[3] + 8 * v174)) {
              goto LABEL_208;
            }
          }
          int v173 = v172;
LABEL_208:
          int v262 = (void *)*a2;
          int v263 = *(int **)*a2;
          uint64_t v264 = (v262[1] - (void)v263) >> 2;
          uint64_t v265 = (v264 - 1);
          if ((int)v265 >= -1) {
            int v266 = -1;
          }
          else {
            int v266 = v264 - 1;
          }
          int v267 = v266 + 1;
          int v268 = v264 + 1;
          while (1)
          {
            unsigned int v269 = v268 - 2;
            if (v268 - 2 < 0) {
              break;
            }
            --v268;
            if (*(void *)(v262[3] + 8 * v269) != *(void *)(v166[3] + 8 * v269)) {
              goto LABEL_249;
            }
          }
          int v268 = v267;
LABEL_249:
          int v288 = v169 + 1;
          while (1)
          {
            unsigned int v289 = v288 - 2;
            if (v288 - 2 < 0) {
              break;
            }
            --v288;
            if (*(void *)(v167[3] + 8 * v289)) {
              goto LABEL_284;
            }
          }
          int v288 = v172;
LABEL_284:
          int v302 = v264 + 1;
          while (1)
          {
            unsigned int v303 = v302 - 2;
            if (v302 - 2 < 0) {
              break;
            }
            --v302;
            if (*(void *)(v262[3] + 8 * v303)) {
              goto LABEL_485;
            }
          }
          int v302 = v267;
LABEL_485:
          unint64_t v410 = (uint64_t)(v166[1] - *v166) >> 2;
          if (v173 <= v268) {
            int v411 = v268;
          }
          else {
            int v411 = v173;
          }
          if (v173 <= v302) {
            int v173 = v302;
          }
          if (v288 > v268) {
            int v268 = v288;
          }
          if (v410 > v268)
          {
            int v412 = 1;
          }
          else
          {
            int v268 = (uint64_t)(v166[1] - *v166) >> 2;
            int v412 = 4;
          }
          if (v410 > v173)
          {
            int v413 = 2;
          }
          else
          {
            int v173 = v268;
            int v413 = v412;
          }
          if (v410 > v411)
          {
            int v173 = v411;
            int v413 = 3;
          }
          uint64_t v1983 = v265;
          uint64_t v2001 = v170;
          if (!v173) {
            goto LABEL_514;
          }
          unint64_t v414 = *(void *)(v166[3] + 8 * (v173 - 1));
          if (v414 < 0x10) {
            goto LABEL_514;
          }
          switch(v413)
          {
            case 1:
              if (v173 == 2)
              {
                uint64_t v1728 = *v168;
                if (v1728)
                {
                  uint64_t v1729 = 0;
                  uint64_t v1730 = 0;
                  uint64_t v1731 = 0;
                  uint64_t v1732 = v167[19];
                  uint64_t v1733 = v262[19];
                  uint64_t v1734 = v166[19];
                  unint64_t v1735 = v168[1];
                  uint64_t v1736 = (uint64_t *)v167[3];
                  uint64_t v1737 = *v1736;
                  uint64_t v1738 = v1736[1];
                  uint64_t v1739 = (uint64_t *)v262[3];
                  uint64_t v1740 = *v1739;
                  uint64_t v1741 = v1739[1];
                  if (v1735 <= 1) {
                    uint64_t v1742 = 1;
                  }
                  else {
                    uint64_t v1742 = v168[1];
                  }
                  uint64_t v1743 = v1737 - v1738 * v1735;
                  uint64_t v1744 = v1740 - v1741 * v263[1];
                  do
                  {
                    if (v1735)
                    {
                      uint64_t v1745 = 0;
                      uint64_t v1746 = v1733 + 8 * v1730;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1747 = 0;
                          uint64_t v1748 = *(void *)(v1732 + 8 * v1731);
                          unsigned int v1749 = v414 + 1;
                          do
                          {
                            *(void *)(v1734 + v1747) = *(void *)(v1746 + v1747) * v1748;
                            --v1749;
                            v1747 += 8;
                          }
                          while (v1749 > 1);
                        }
                        v1731 += v1738;
                        v1730 += v1741;
                        v1734 += 8 * (int)v414;
                        ++v1745;
                        v1746 += 8 * v1741;
                      }
                      while (v1745 != v1742);
                    }
                    v1731 += v1743;
                    v1730 += v1744;
                    ++v1729;
                  }
                  while (v1729 != v1728);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v1102 = *v168;
                if (v1102)
                {
                  uint64_t v1103 = 0;
                  uint64_t v1104 = 0;
                  uint64_t v1105 = v167[19];
                  uint64_t v1106 = v262[19];
                  uint64_t v1107 = v166[19];
                  uint64_t v1108 = *(void *)v167[3];
                  uint64_t v1109 = 8 * *(void *)v262[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1110 = 0;
                      uint64_t v1111 = *(void *)(v1105 + 8 * v1104);
                      unsigned int v1112 = v414 + 1;
                      do
                      {
                        *(void *)(v1107 + v1110) = *(void *)(v1106 + v1110) * v1111;
                        --v1112;
                        v1110 += 8;
                      }
                      while (v1112 > 1);
                    }
                    v1104 += v1108;
                    ++v1103;
                    v1107 += 8 * (int)v414;
                    v1106 += v1109;
                  }
                  while (v1103 != v1102);
                }
              }
              else
              {
                unint64_t v1947 = v166[6];
                if (v1947)
                {
                  unint64_t v1976 = 0;
                  uint64_t v1880 = v262[19];
                  uint64_t v1895 = v167[19];
                  uint64_t v1750 = v166[19];
                  do
                  {
                    uint64_t v1751 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1752 = v167[3];
                      uint64_t v1753 = v170;
                      int v1754 = v1976;
                      do
                      {
                        ldiv_t v1755 = ldiv(v1754, v168[v1753]);
                        int v1754 = v1755.quot;
                        v1751 += *(void *)(v1752 + 8 * v1753--) * v1755.rem;
                      }
                      while (v1753 != -1);
                    }
                    uint64_t v1756 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1757) = 0;
                    }
                    else
                    {
                      uint64_t v1757 = 0;
                      uint64_t v1758 = v262[3];
                      int v1759 = v1976;
                      do
                      {
                        ldiv_t v1760 = ldiv(v1759, v263[v1756]);
                        int v1759 = v1760.quot;
                        v1757 += *(void *)(v1758 + 8 * v1756--) * v1760.rem;
                      }
                      while (v1756 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1761 = 0;
                      uint64_t v1762 = *(void *)(v1895 + 8 * (int)v1751);
                      unsigned int v1763 = v414 + 1;
                      do
                      {
                        *(void *)(v1750 + v1761) = *(void *)(v1880 + 8 * (int)v1757 + v1761) * v1762;
                        --v1763;
                        v1761 += 8;
                      }
                      while (v1763 > 1);
                    }
                    v1750 += 8 * (int)v414;
                    v1976 += (int)v414;
                  }
                  while (v1976 < v1947);
                }
              }
              break;
            case 2:
              if (v173 == 2)
              {
                uint64_t v1764 = *v168;
                if (v1764)
                {
                  uint64_t v1765 = 0;
                  uint64_t v1766 = 0;
                  uint64_t v1767 = 0;
                  uint64_t v1768 = v167[19];
                  uint64_t v1769 = v262[19];
                  uint64_t v1770 = v166[19];
                  unint64_t v1771 = v168[1];
                  uint64_t v1772 = (uint64_t *)v167[3];
                  uint64_t v1773 = *v1772;
                  uint64_t v1774 = v1772[1];
                  uint64_t v1775 = (uint64_t *)v262[3];
                  uint64_t v1776 = *v1775;
                  uint64_t v1777 = v1775[1];
                  if (v1771 <= 1) {
                    uint64_t v1778 = 1;
                  }
                  else {
                    uint64_t v1778 = v168[1];
                  }
                  uint64_t v1779 = v1773 - v1774 * v1771;
                  uint64_t v1780 = v1776 - v1777 * v263[1];
                  do
                  {
                    if (v1771)
                    {
                      uint64_t v1781 = 0;
                      uint64_t v1782 = v1768 + 8 * v1767;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1783 = 0;
                          uint64_t v1784 = *(void *)(v1769 + 8 * v1766);
                          unsigned int v1785 = v414 + 1;
                          do
                          {
                            *(void *)(v1770 + v1783) = *(void *)(v1782 + v1783) * v1784;
                            --v1785;
                            v1783 += 8;
                          }
                          while (v1785 > 1);
                        }
                        v1767 += v1774;
                        v1766 += v1777;
                        v1770 += 8 * (int)v414;
                        ++v1781;
                        v1782 += 8 * v1774;
                      }
                      while (v1781 != v1778);
                    }
                    v1767 += v1779;
                    v1766 += v1780;
                    ++v1765;
                  }
                  while (v1765 != v1764);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v1113 = *v168;
                if (v1113)
                {
                  uint64_t v1114 = 0;
                  uint64_t v1115 = 0;
                  uint64_t v1116 = v167[19];
                  uint64_t v1117 = v262[19];
                  uint64_t v1118 = v166[19];
                  uint64_t v1119 = *(void *)v262[3];
                  uint64_t v1120 = 8 * *(void *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1121 = 0;
                      uint64_t v1122 = *(void *)(v1117 + 8 * v1115);
                      unsigned int v1123 = v414 + 1;
                      do
                      {
                        *(void *)(v1118 + v1121) = *(void *)(v1116 + v1121) * v1122;
                        --v1123;
                        v1121 += 8;
                      }
                      while (v1123 > 1);
                    }
                    v1115 += v1119;
                    ++v1114;
                    v1118 += 8 * (int)v414;
                    v1116 += v1120;
                  }
                  while (v1114 != v1113);
                }
              }
              else
              {
                unint64_t v1948 = v166[6];
                if (v1948)
                {
                  unint64_t v1977 = 0;
                  uint64_t v1881 = v262[19];
                  uint64_t v1896 = v167[19];
                  uint64_t v1786 = v166[19];
                  do
                  {
                    uint64_t v1787 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1788 = v167[3];
                      uint64_t v1789 = v170;
                      int v1790 = v1977;
                      do
                      {
                        ldiv_t v1791 = ldiv(v1790, v168[v1789]);
                        int v1790 = v1791.quot;
                        v1787 += *(void *)(v1788 + 8 * v1789--) * v1791.rem;
                      }
                      while (v1789 != -1);
                    }
                    uint64_t v1792 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1793) = 0;
                    }
                    else
                    {
                      uint64_t v1793 = 0;
                      uint64_t v1794 = v262[3];
                      int v1795 = v1977;
                      do
                      {
                        ldiv_t v1796 = ldiv(v1795, v263[v1792]);
                        int v1795 = v1796.quot;
                        v1793 += *(void *)(v1794 + 8 * v1792--) * v1796.rem;
                      }
                      while (v1792 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1797 = 0;
                      uint64_t v1798 = *(void *)(v1881 + 8 * (int)v1793);
                      unsigned int v1799 = v414 + 1;
                      do
                      {
                        *(void *)(v1786 + v1797) = *(void *)(v1896 + 8 * (int)v1787 + v1797) * v1798;
                        --v1799;
                        v1797 += 8;
                      }
                      while (v1799 > 1);
                    }
                    v1786 += 8 * (int)v414;
                    v1977 += (int)v414;
                  }
                  while (v1977 < v1948);
                }
              }
              break;
            case 3:
              if (v173 == 2)
              {
                uint64_t v1312 = *v168;
                if (v1312)
                {
                  uint64_t v1313 = 0;
                  uint64_t v1314 = 0;
                  uint64_t v1315 = 0;
                  uint64_t v1316 = v167[19];
                  uint64_t v1317 = v262[19];
                  uint64_t v1318 = v166[19];
                  unint64_t v1319 = v168[1];
                  unint64_t v1320 = (uint64_t *)v167[3];
                  uint64_t v1321 = *v1320;
                  uint64_t v1322 = v1320[1];
                  unint64_t v1323 = (uint64_t *)v262[3];
                  uint64_t v1324 = *v1323;
                  uint64_t v1325 = v1323[1];
                  if (v1319 <= 1) {
                    uint64_t v1326 = 1;
                  }
                  else {
                    uint64_t v1326 = v168[1];
                  }
                  uint64_t v1327 = v1321 - v1322 * v1319;
                  uint64_t v1328 = v1324 - v1325 * v263[1];
                  do
                  {
                    if (v1319)
                    {
                      uint64_t v1329 = 0;
                      uint64_t v1330 = v1317 + 8 * v1314;
                      uint64_t v1331 = v1316 + 8 * v1315;
                      do
                      {
                        if ((int)v414 >= 1)
                        {
                          uint64_t v1332 = 0;
                          unsigned int v1333 = v414 + 1;
                          do
                          {
                            *(void *)(v1318 + v1332) = *(void *)(v1330 + v1332) * *(void *)(v1331 + v1332);
                            --v1333;
                            v1332 += 8;
                          }
                          while (v1333 > 1);
                        }
                        v1315 += v1322;
                        v1314 += v1325;
                        v1318 += 8 * (int)v414;
                        ++v1329;
                        v1330 += 8 * v1325;
                        v1331 += 8 * v1322;
                      }
                      while (v1329 != v1326);
                    }
                    v1315 += v1327;
                    v1314 += v1328;
                    ++v1313;
                  }
                  while (v1313 != v1312);
                }
              }
              else if (v173 == 1)
              {
                uint64_t v415 = *v168;
                if (v415)
                {
                  uint64_t v416 = 0;
                  uint64_t v417 = v167[19];
                  uint64_t v418 = v262[19];
                  uint64_t v419 = v166[19];
                  uint64_t v420 = 8 * *(void *)v262[3];
                  uint64_t v421 = 8 * *(void *)v167[3];
                  do
                  {
                    if ((int)v414 >= 1)
                    {
                      uint64_t v422 = 0;
                      unsigned int v423 = v414 + 1;
                      do
                      {
                        *(void *)(v419 + v422) = *(void *)(v418 + v422) * *(void *)(v417 + v422);
                        --v423;
                        v422 += 8;
                      }
                      while (v423 > 1);
                    }
                    ++v416;
                    v419 += 8 * (int)v414;
                    v418 += v420;
                    v417 += v421;
                  }
                  while (v416 != v415);
                }
              }
              else
              {
                unint64_t v1935 = v166[6];
                if (v1935)
                {
                  unint64_t v1964 = 0;
                  uint64_t v1874 = v262[19];
                  uint64_t v1887 = v167[19];
                  uint64_t v1334 = v166[19];
                  do
                  {
                    uint64_t v1335 = 0;
                    if ((v170 & 0x80000000) == 0)
                    {
                      uint64_t v1336 = v167[3];
                      uint64_t v1337 = v170;
                      int v1338 = v1964;
                      do
                      {
                        ldiv_t v1339 = ldiv(v1338, v168[v1337]);
                        int v1338 = v1339.quot;
                        v1335 += *(void *)(v1336 + 8 * v1337--) * v1339.rem;
                      }
                      while (v1337 != -1);
                    }
                    uint64_t v1340 = v1983;
                    if ((v1983 & 0x80000000) != 0)
                    {
                      LODWORD(v1341) = 0;
                    }
                    else
                    {
                      uint64_t v1341 = 0;
                      uint64_t v1342 = v262[3];
                      int v1343 = v1964;
                      do
                      {
                        ldiv_t v1344 = ldiv(v1343, v263[v1340]);
                        int v1343 = v1344.quot;
                        v1341 += *(void *)(v1342 + 8 * v1340--) * v1344.rem;
                      }
                      while (v1340 != -1);
                    }
                    uint64_t v170 = v2001;
                    if ((int)v414 >= 1)
                    {
                      uint64_t v1345 = 0;
                      unsigned int v1346 = v414 + 1;
                      do
                      {
                        *(void *)(v1334 + v1345) = *(void *)(v1874 + 8 * (int)v1341 + v1345)
                                                   * *(void *)(v1887 + 8 * (int)v1335 + v1345);
                        --v1346;
                        v1345 += 8;
                      }
                      while (v1346 > 1);
                    }
                    v1334 += 8 * (int)v414;
                    v1964 += (int)v414;
                  }
                  while (v1964 < v1935);
                }
              }
              break;
            default:
LABEL_514:
              switch(v410)
              {
                case 1uLL:
                  uint64_t v424 = v166[6];
                  if (v424)
                  {
                    unint64_t v425 = (void *)v167[19];
                    uint64_t v426 = (void *)v262[19];
                    uint64_t v427 = (void *)v166[19];
                    uint64_t v428 = 8 * *(void *)v262[3];
                    uint64_t v429 = 8 * *(void *)v167[3];
                    do
                    {
                      *v427++ = *v426 * *v425;
                      uint64_t v426 = (void *)((char *)v426 + v428);
                      unint64_t v425 = (void *)((char *)v425 + v429);
                      --v424;
                    }
                    while (v424);
                  }
                  break;
                case 2uLL:
                  uint64_t v843 = *v168;
                  if (v843)
                  {
                    uint64_t v844 = 0;
                    uint64_t v845 = 0;
                    uint64_t v846 = 0;
                    uint64_t v847 = 0;
                    uint64_t v848 = v167[19];
                    uint64_t v849 = v262[19];
                    uint64_t v850 = v166[19];
                    unint64_t v851 = v168[1];
                    uint64_t v852 = (uint64_t *)v167[3];
                    uint64_t v853 = *v852;
                    uint64_t v854 = v852[1];
                    uint64_t v855 = (uint64_t *)v262[3];
                    uint64_t v856 = *v855;
                    uint64_t v857 = v855[1];
                    uint64_t v858 = v856 - v857 * v263[1];
                    if (v851 <= 1) {
                      uint64_t v859 = 1;
                    }
                    else {
                      uint64_t v859 = v168[1];
                    }
                    uint64_t v860 = v853 - v854 * v851;
                    do
                    {
                      if (v851)
                      {
                        uint64_t v861 = v845 + v859;
                        uint64_t v862 = (void *)(v850 + 8 * v845);
                        uint64_t v863 = v859;
                        do
                        {
                          *v862++ = *(void *)(v849 + 8 * v846) * *(void *)(v848 + 8 * v847);
                          v847 += v854;
                          v846 += v857;
                          --v863;
                        }
                        while (v863);
                        uint64_t v845 = v861;
                      }
                      v847 += v860;
                      v846 += v858;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 3uLL:
                  uint64_t v864 = *v168;
                  if (v864)
                  {
                    uint64_t v865 = 0;
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = 0;
                    uint64_t v869 = v167[19];
                    uint64_t v870 = v262[19];
                    uint64_t v871 = v166[19];
                    unint64_t v872 = v168[1];
                    unint64_t v873 = (void *)v167[3];
                    uint64_t v874 = v873[1];
                    uint64_t v875 = (void *)v262[3];
                    uint64_t v876 = v875[1];
                    uint64_t v877 = *v875 - v876 * v263[1];
                    if (v872 <= 1) {
                      uint64_t v878 = 1;
                    }
                    else {
                      uint64_t v878 = v168[1];
                    }
                    unint64_t v879 = *v873 - v874 * v872;
                    do
                    {
                      if (v872)
                      {
                        uint64_t v880 = 0;
                        unint64_t v881 = v168[2];
                        uint64_t v882 = v873[2];
                        uint64_t v883 = v875[2];
                        if (v881 <= 1) {
                          uint64_t v884 = 1;
                        }
                        else {
                          uint64_t v884 = v168[2];
                        }
                        uint64_t v885 = v876 - v883 * v263[2];
                        do
                        {
                          uint64_t v886 = v884;
                          if (v881)
                          {
                            do
                            {
                              *(void *)(v871 + 8 * v866++) = *(void *)(v870 + 8 * v867)
                                                             * *(void *)(v869 + 8 * v868);
                              v868 += v882;
                              v867 += v883;
                              --v886;
                            }
                            while (v886);
                          }
                          v868 += v874 - v882 * v881;
                          v867 += v885;
                          ++v880;
                        }
                        while (v880 != v878);
                      }
                      v868 += v879;
                      v867 += v877;
                      ++v865;
                    }
                    while (v865 != v864);
                  }
                  break;
                case 4uLL:
                  uint64_t v2006 = *v168;
                  if (v2006)
                  {
                    uint64_t v887 = 0;
                    uint64_t v888 = 0;
                    uint64_t v889 = 0;
                    uint64_t v890 = 0;
                    uint64_t v891 = v167[19];
                    uint64_t v892 = v262[19];
                    uint64_t v893 = v166[19];
                    unint64_t v894 = v168[1];
                    unint64_t v895 = (void *)v167[3];
                    uint64_t v896 = (void *)v262[3];
                    uint64_t v1899 = v896[1];
                    uint64_t v1914 = v895[1];
                    uint64_t v1956 = *v896 - v1899 * v263[1];
                    int v1988 = v168[1];
                    if (v894 <= 1) {
                      uint64_t v897 = 1;
                    }
                    else {
                      uint64_t v897 = v168[1];
                    }
                    unint64_t v1927 = *v895 - v895[1] * v894;
                    do
                    {
                      if (v1988)
                      {
                        uint64_t v898 = 0;
                        unint64_t v899 = v168[2];
                        uint64_t v900 = v895[2];
                        uint64_t v901 = v896[2];
                        if (v899 <= 1) {
                          uint64_t v902 = 1;
                        }
                        else {
                          uint64_t v902 = v168[2];
                        }
                        uint64_t v903 = v1899 - v901 * v263[2];
                        do
                        {
                          if (v899)
                          {
                            uint64_t v904 = 0;
                            unint64_t v905 = v168[3];
                            uint64_t v906 = v895[3];
                            uint64_t v907 = v896[3];
                            if (v905 <= 1) {
                              uint64_t v908 = 1;
                            }
                            else {
                              uint64_t v908 = v168[3];
                            }
                            uint64_t v909 = v901 - v907 * v263[3];
                            do
                            {
                              uint64_t v910 = v908;
                              if (v905)
                              {
                                do
                                {
                                  *(void *)(v893 + 8 * v888++) = *(void *)(v892 + 8 * v889)
                                                                 * *(void *)(v891 + 8 * v890);
                                  v890 += v906;
                                  v889 += v907;
                                  --v910;
                                }
                                while (v910);
                              }
                              v890 += v900 - v906 * v905;
                              v889 += v909;
                              ++v904;
                            }
                            while (v904 != v902);
                          }
                          v890 += v1914 - v900 * v899;
                          v889 += v903;
                          ++v898;
                        }
                        while (v898 != v897);
                      }
                      v890 += v1927;
                      v889 += v1956;
                      ++v887;
                    }
                    while (v887 != v2006);
                  }
                  break;
                default:
                  uint64_t v831 = v166[6];
                  if (v831)
                  {
                    uint64_t v832 = 0;
                    uint64_t v1926 = v262[19];
                    uint64_t v1955 = v167[19];
                    uint64_t v1913 = v166[19];
                    do
                    {
                      uint64_t v833 = 0;
                      if ((v170 & 0x80000000) == 0)
                      {
                        uint64_t v834 = v167[3];
                        uint64_t v835 = v170;
                        int v836 = v832;
                        do
                        {
                          ldiv_t v837 = ldiv(v836, v168[v835]);
                          int v836 = v837.quot;
                          v833 += *(void *)(v834 + 8 * v835--) * v837.rem;
                        }
                        while (v835 != -1);
                      }
                      uint64_t v838 = v1983;
                      if ((v1983 & 0x80000000) != 0)
                      {
                        LODWORD(v839) = 0;
                      }
                      else
                      {
                        uint64_t v839 = 0;
                        uint64_t v840 = v262[3];
                        int v841 = v832;
                        do
                        {
                          ldiv_t v842 = ldiv(v841, v263[v838]);
                          int v841 = v842.quot;
                          v839 += *(void *)(v840 + 8 * v838--) * v842.rem;
                        }
                        while (v838 != -1);
                      }
                      *(void *)(v1913 + 8 * v832++) = *(void *)(v1926 + 8 * (int)v839)
                                                      * *(void *)(v1955 + 8 * (int)v833);
                      uint64_t v170 = v2001;
                    }
                    while (v832 != v831);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v26)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) * **(float **)(*a2 + 152);
          return;
        case 1:
          int v204 = *(_DWORD *)(*a2 + 160);
          if (v204 >= 1)
          {
            float v205 = **(float **)(*a1 + 152);
            int v206 = *(float **)(*(void *)a3 + 152);
            int v207 = *(float **)(*a2 + 152);
            unsigned int v208 = v204 + 1;
            do
            {
              float v209 = *v207++;
              *v206++ = v205 * v209;
              --v208;
            }
            while (v208 > 1);
          }
          return;
        case 2:
          int v210 = *(_DWORD *)(*a1 + 160);
          if (v210 >= 1)
          {
            float v211 = **(float **)(*a2 + 152);
            uint64_t v212 = *(float **)(*(void *)a3 + 152);
            uint64_t v213 = *(float **)(*a1 + 152);
            unsigned int v214 = v210 + 1;
            do
            {
              float v215 = *v213++;
              *v212++ = v211 * v215;
              --v214;
            }
            while (v214 > 1);
          }
          return;
        case 3:
          int v216 = *(_DWORD *)(*(void *)a3 + 48);
          if (v216 >= 1)
          {
            uint64_t v217 = *(float **)(*(void *)a3 + 152);
            uint64_t v218 = *(float **)(*a2 + 152);
            int v219 = *(float **)(*a1 + 152);
            unsigned int v220 = v216 + 1;
            do
            {
              float v221 = *v219++;
              float v222 = v221;
              float v223 = *v218++;
              *v217++ = v222 * v223;
              --v220;
            }
            while (v220 > 1);
          }
          return;
        default:
          uint64_t v195 = *(void **)a3;
          float v196 = (void *)*a1;
          vDSP_Length v197 = *(int **)*a1;
          uint64_t v198 = (v196[1] - (void)v197) >> 2;
          uint64_t v199 = (v198 - 1);
          if ((int)v199 >= -1) {
            int v200 = -1;
          }
          else {
            int v200 = v198 - 1;
          }
          int v201 = v200 + 1;
          int v202 = v198 + 1;
          while (1)
          {
            unsigned int v203 = v202 - 2;
            if (v202 - 2 < 0) {
              break;
            }
            --v202;
            if (*(void *)(v196[3] + 8 * v203) != *(void *)(v195[3] + 8 * v203)) {
              goto LABEL_216;
            }
          }
          int v202 = v201;
LABEL_216:
          unsigned int v270 = (void *)*a2;
          vDSP_Length v271 = *(int **)*a2;
          uint64_t v272 = (v270[1] - (void)v271) >> 2;
          uint64_t v273 = (v272 - 1);
          if ((int)v273 >= -1) {
            int v274 = -1;
          }
          else {
            int v274 = v272 - 1;
          }
          int v275 = v274 + 1;
          int v276 = v272 + 1;
          while (1)
          {
            unsigned int v277 = v276 - 2;
            if (v276 - 2 < 0) {
              break;
            }
            --v276;
            if (*(void *)(v270[3] + 8 * v277) != *(void *)(v195[3] + 8 * v277)) {
              goto LABEL_254;
            }
          }
          int v276 = v275;
LABEL_254:
          int v290 = v198 + 1;
          while (1)
          {
            unsigned int v291 = v290 - 2;
            if (v290 - 2 < 0) {
              break;
            }
            --v290;
            if (*(void *)(v196[3] + 8 * v291)) {
              goto LABEL_289;
            }
          }
          int v290 = v201;
LABEL_289:
          int v304 = v272 + 1;
          while (1)
          {
            unsigned int v305 = v304 - 2;
            if (v304 - 2 < 0) {
              break;
            }
            --v304;
            if (*(void *)(v270[3] + 8 * v305)) {
              goto LABEL_520;
            }
          }
          int v304 = v275;
LABEL_520:
          unint64_t v430 = (uint64_t)(v195[1] - *v195) >> 2;
          if (v202 <= v276) {
            int v431 = v276;
          }
          else {
            int v431 = v202;
          }
          if (v202 <= v304) {
            int v202 = v304;
          }
          if (v290 > v276) {
            int v276 = v290;
          }
          if (v430 > v276)
          {
            int v432 = 1;
          }
          else
          {
            int v276 = (uint64_t)(v195[1] - *v195) >> 2;
            int v432 = 4;
          }
          if (v430 > v202)
          {
            int v433 = 2;
          }
          else
          {
            int v202 = v276;
            int v433 = v432;
          }
          if (v430 > v431)
          {
            int v202 = v431;
            int v433 = 3;
          }
          uint64_t v1984 = v273;
          uint64_t v2002 = v199;
          if (!v202) {
            goto LABEL_549;
          }
          unint64_t v434 = *(void *)(v195[3] + 8 * (v202 - 1));
          if (v434 < 0x10) {
            goto LABEL_549;
          }
          switch(v433)
          {
            case 1:
              if (v202 == 2)
              {
                uint64_t v1800 = *v197;
                if (v1800)
                {
                  uint64_t v1801 = 0;
                  uint64_t v1802 = 0;
                  uint64_t v1803 = 0;
                  uint64_t v1804 = v196[19];
                  uint64_t v1805 = v270[19];
                  uint64_t v1806 = v195[19];
                  unint64_t v1807 = v197[1];
                  uint64_t v1808 = (uint64_t *)v196[3];
                  uint64_t v1809 = *v1808;
                  uint64_t v1810 = v1808[1];
                  unint64_t v1811 = (uint64_t *)v270[3];
                  uint64_t v1812 = *v1811;
                  uint64_t v1813 = v1811[1];
                  if (v1807 <= 1) {
                    uint64_t v1814 = 1;
                  }
                  else {
                    uint64_t v1814 = v197[1];
                  }
                  uint64_t v1815 = v1809 - v1810 * v1807;
                  uint64_t v1816 = v1812 - v1813 * v271[1];
                  do
                  {
                    if (v1807)
                    {
                      uint64_t v1817 = 0;
                      uint64_t v1818 = v1805 + 4 * v1802;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1819 = 0;
                          float v1820 = *(float *)(v1804 + 4 * v1803);
                          unsigned int v1821 = v434 + 1;
                          do
                          {
                            *(float *)(v1806 + v1819) = v1820 * *(float *)(v1818 + v1819);
                            --v1821;
                            v1819 += 4;
                          }
                          while (v1821 > 1);
                        }
                        v1803 += v1810;
                        v1802 += v1813;
                        v1806 += 4 * (int)v434;
                        ++v1817;
                        v1818 += 4 * v1813;
                      }
                      while (v1817 != v1814);
                    }
                    v1803 += v1815;
                    v1802 += v1816;
                    ++v1801;
                  }
                  while (v1801 != v1800);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v1124 = *v197;
                if (v1124)
                {
                  uint64_t v1125 = 0;
                  uint64_t v1126 = 0;
                  uint64_t v1127 = v196[19];
                  uint64_t v1128 = v270[19];
                  uint64_t v1129 = v195[19];
                  uint64_t v1130 = *(void *)v196[3];
                  uint64_t v1131 = 4 * *(void *)v270[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1132 = 0;
                      float v1133 = *(float *)(v1127 + 4 * v1126);
                      unsigned int v1134 = v434 + 1;
                      do
                      {
                        *(float *)(v1129 + v1132) = v1133 * *(float *)(v1128 + v1132);
                        --v1134;
                        v1132 += 4;
                      }
                      while (v1134 > 1);
                    }
                    v1126 += v1130;
                    ++v1125;
                    v1129 += 4 * (int)v434;
                    v1128 += v1131;
                  }
                  while (v1125 != v1124);
                }
              }
              else
              {
                unint64_t v1949 = v195[6];
                if (v1949)
                {
                  unint64_t v1978 = 0;
                  uint64_t v1882 = v270[19];
                  uint64_t v1897 = v196[19];
                  uint64_t v1822 = v195[19];
                  do
                  {
                    uint64_t v1823 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1824 = v196[3];
                      uint64_t v1825 = v199;
                      int v1826 = v1978;
                      do
                      {
                        ldiv_t v1827 = ldiv(v1826, v197[v1825]);
                        int v1826 = v1827.quot;
                        v1823 += *(void *)(v1824 + 8 * v1825--) * v1827.rem;
                      }
                      while (v1825 != -1);
                    }
                    uint64_t v1828 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1829) = 0;
                    }
                    else
                    {
                      uint64_t v1829 = 0;
                      uint64_t v1830 = v270[3];
                      int v1831 = v1978;
                      do
                      {
                        ldiv_t v1832 = ldiv(v1831, v271[v1828]);
                        int v1831 = v1832.quot;
                        v1829 += *(void *)(v1830 + 8 * v1828--) * v1832.rem;
                      }
                      while (v1828 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1833 = 0;
                      float v1834 = *(float *)(v1897 + 4 * (int)v1823);
                      unsigned int v1835 = v434 + 1;
                      do
                      {
                        *(float *)(v1822 + v1833) = v1834 * *(float *)(v1882 + 4 * (int)v1829 + v1833);
                        --v1835;
                        v1833 += 4;
                      }
                      while (v1835 > 1);
                    }
                    v1822 += 4 * (int)v434;
                    v1978 += (int)v434;
                  }
                  while (v1978 < v1949);
                }
              }
              break;
            case 2:
              if (v202 == 2)
              {
                uint64_t v1836 = *v197;
                if (v1836)
                {
                  uint64_t v1837 = 0;
                  uint64_t v1838 = 0;
                  uint64_t v1839 = 0;
                  uint64_t v1840 = v196[19];
                  uint64_t v1841 = v270[19];
                  uint64_t v1842 = v195[19];
                  unint64_t v1843 = v197[1];
                  unint64_t v1844 = (uint64_t *)v196[3];
                  uint64_t v1845 = *v1844;
                  uint64_t v1846 = v1844[1];
                  unint64_t v1847 = (uint64_t *)v270[3];
                  uint64_t v1848 = *v1847;
                  uint64_t v1849 = v1847[1];
                  if (v1843 <= 1) {
                    uint64_t v1850 = 1;
                  }
                  else {
                    uint64_t v1850 = v197[1];
                  }
                  uint64_t v1851 = v1845 - v1846 * v1843;
                  uint64_t v1852 = v1848 - v1849 * v271[1];
                  do
                  {
                    if (v1843)
                    {
                      uint64_t v1853 = 0;
                      uint64_t v1854 = v1840 + 4 * v1839;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1855 = 0;
                          float v1856 = *(float *)(v1841 + 4 * v1838);
                          unsigned int v1857 = v434 + 1;
                          do
                          {
                            *(float *)(v1842 + v1855) = v1856 * *(float *)(v1854 + v1855);
                            --v1857;
                            v1855 += 4;
                          }
                          while (v1857 > 1);
                        }
                        v1839 += v1846;
                        v1838 += v1849;
                        v1842 += 4 * (int)v434;
                        ++v1853;
                        v1854 += 4 * v1846;
                      }
                      while (v1853 != v1850);
                    }
                    v1839 += v1851;
                    v1838 += v1852;
                    ++v1837;
                  }
                  while (v1837 != v1836);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v1135 = *v197;
                if (v1135)
                {
                  uint64_t v1136 = 0;
                  uint64_t v1137 = 0;
                  uint64_t v1138 = v196[19];
                  uint64_t v1139 = v270[19];
                  uint64_t v1140 = v195[19];
                  uint64_t v1141 = *(void *)v270[3];
                  uint64_t v1142 = 4 * *(void *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1143 = 0;
                      float v1144 = *(float *)(v1139 + 4 * v1137);
                      unsigned int v1145 = v434 + 1;
                      do
                      {
                        *(float *)(v1140 + v1143) = v1144 * *(float *)(v1138 + v1143);
                        --v1145;
                        v1143 += 4;
                      }
                      while (v1145 > 1);
                    }
                    v1137 += v1141;
                    ++v1136;
                    v1140 += 4 * (int)v434;
                    v1138 += v1142;
                  }
                  while (v1136 != v1135);
                }
              }
              else
              {
                unint64_t v1950 = v195[6];
                if (v1950)
                {
                  unint64_t v1979 = 0;
                  uint64_t v1883 = v270[19];
                  uint64_t v1898 = v196[19];
                  uint64_t v1858 = v195[19];
                  do
                  {
                    uint64_t v1859 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1860 = v196[3];
                      uint64_t v1861 = v199;
                      int v1862 = v1979;
                      do
                      {
                        ldiv_t v1863 = ldiv(v1862, v197[v1861]);
                        int v1862 = v1863.quot;
                        v1859 += *(void *)(v1860 + 8 * v1861--) * v1863.rem;
                      }
                      while (v1861 != -1);
                    }
                    uint64_t v1864 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1865) = 0;
                    }
                    else
                    {
                      uint64_t v1865 = 0;
                      uint64_t v1866 = v270[3];
                      int v1867 = v1979;
                      do
                      {
                        ldiv_t v1868 = ldiv(v1867, v271[v1864]);
                        int v1867 = v1868.quot;
                        v1865 += *(void *)(v1866 + 8 * v1864--) * v1868.rem;
                      }
                      while (v1864 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1869 = 0;
                      float v1870 = *(float *)(v1883 + 4 * (int)v1865);
                      unsigned int v1871 = v434 + 1;
                      do
                      {
                        *(float *)(v1858 + v1869) = v1870 * *(float *)(v1898 + 4 * (int)v1859 + v1869);
                        --v1871;
                        v1869 += 4;
                      }
                      while (v1871 > 1);
                    }
                    v1858 += 4 * (int)v434;
                    v1979 += (int)v434;
                  }
                  while (v1979 < v1950);
                }
              }
              break;
            case 3:
              if (v202 == 2)
              {
                uint64_t v1347 = *v197;
                if (v1347)
                {
                  uint64_t v1348 = 0;
                  uint64_t v1349 = 0;
                  uint64_t v1350 = 0;
                  uint64_t v1351 = v196[19];
                  uint64_t v1352 = v270[19];
                  uint64_t v1353 = v195[19];
                  unint64_t v1354 = v197[1];
                  uint64_t v1355 = (uint64_t *)v196[3];
                  uint64_t v1356 = *v1355;
                  uint64_t v1357 = v1355[1];
                  ldiv_t v1358 = (uint64_t *)v270[3];
                  uint64_t v1359 = *v1358;
                  uint64_t v1360 = v1358[1];
                  if (v1354 <= 1) {
                    uint64_t v1361 = 1;
                  }
                  else {
                    uint64_t v1361 = v197[1];
                  }
                  uint64_t v1362 = v1356 - v1357 * v1354;
                  uint64_t v1363 = v1359 - v1360 * v271[1];
                  do
                  {
                    if (v1354)
                    {
                      uint64_t v1364 = 0;
                      uint64_t v1365 = v1352 + 4 * v1349;
                      uint64_t v1366 = v1351 + 4 * v1350;
                      do
                      {
                        if ((int)v434 >= 1)
                        {
                          uint64_t v1367 = 0;
                          unsigned int v1368 = v434 + 1;
                          do
                          {
                            *(float *)(v1353 + v1367) = *(float *)(v1366 + v1367) * *(float *)(v1365 + v1367);
                            --v1368;
                            v1367 += 4;
                          }
                          while (v1368 > 1);
                        }
                        v1350 += v1357;
                        v1349 += v1360;
                        v1353 += 4 * (int)v434;
                        ++v1364;
                        v1365 += 4 * v1360;
                        v1366 += 4 * v1357;
                      }
                      while (v1364 != v1361);
                    }
                    v1350 += v1362;
                    v1349 += v1363;
                    ++v1348;
                  }
                  while (v1348 != v1347);
                }
              }
              else if (v202 == 1)
              {
                uint64_t v435 = *v197;
                if (v435)
                {
                  uint64_t v436 = 0;
                  uint64_t v437 = v196[19];
                  uint64_t v438 = v270[19];
                  uint64_t v439 = v195[19];
                  uint64_t v440 = 4 * *(void *)v270[3];
                  uint64_t v441 = 4 * *(void *)v196[3];
                  do
                  {
                    if ((int)v434 >= 1)
                    {
                      uint64_t v442 = 0;
                      unsigned int v443 = v434 + 1;
                      do
                      {
                        *(float *)(v439 + v442) = *(float *)(v437 + v442) * *(float *)(v438 + v442);
                        --v443;
                        v442 += 4;
                      }
                      while (v443 > 1);
                    }
                    ++v436;
                    v439 += 4 * (int)v434;
                    v438 += v440;
                    v437 += v441;
                  }
                  while (v436 != v435);
                }
              }
              else
              {
                unint64_t v1936 = v195[6];
                if (v1936)
                {
                  unint64_t v1965 = 0;
                  uint64_t v1875 = v270[19];
                  uint64_t v1888 = v196[19];
                  uint64_t v1369 = v195[19];
                  do
                  {
                    uint64_t v1370 = 0;
                    if ((v199 & 0x80000000) == 0)
                    {
                      uint64_t v1371 = v196[3];
                      uint64_t v1372 = v199;
                      int v1373 = v1965;
                      do
                      {
                        ldiv_t v1374 = ldiv(v1373, v197[v1372]);
                        int v1373 = v1374.quot;
                        v1370 += *(void *)(v1371 + 8 * v1372--) * v1374.rem;
                      }
                      while (v1372 != -1);
                    }
                    uint64_t v1375 = v1984;
                    if ((v1984 & 0x80000000) != 0)
                    {
                      LODWORD(v1376) = 0;
                    }
                    else
                    {
                      uint64_t v1376 = 0;
                      uint64_t v1377 = v270[3];
                      int v1378 = v1965;
                      do
                      {
                        ldiv_t v1379 = ldiv(v1378, v271[v1375]);
                        int v1378 = v1379.quot;
                        v1376 += *(void *)(v1377 + 8 * v1375--) * v1379.rem;
                      }
                      while (v1375 != -1);
                    }
                    uint64_t v199 = v2002;
                    if ((int)v434 >= 1)
                    {
                      uint64_t v1380 = 0;
                      unsigned int v1381 = v434 + 1;
                      do
                      {
                        *(float *)(v1369 + v1380) = *(float *)(v1888 + 4 * (int)v1370 + v1380)
                                                  * *(float *)(v1875 + 4 * (int)v1376 + v1380);
                        --v1381;
                        v1380 += 4;
                      }
                      while (v1381 > 1);
                    }
                    v1369 += 4 * (int)v434;
                    v1965 += (int)v434;
                  }
                  while (v1965 < v1936);
                }
              }
              break;
            default:
LABEL_549:
              switch(v430)
              {
                case 1uLL:
                  uint64_t v444 = v195[6];
                  if (v444)
                  {
                    uint64_t v445 = (float *)v196[19];
                    uint64_t v446 = (float *)v270[19];
                    uint64_t v447 = (float *)v195[19];
                    uint64_t v448 = 4 * *(void *)v270[3];
                    uint64_t v449 = 4 * *(void *)v196[3];
                    do
                    {
                      *v447++ = *v445 * *v446;
                      uint64_t v446 = (float *)((char *)v446 + v448);
                      uint64_t v445 = (float *)((char *)v445 + v449);
                      --v444;
                    }
                    while (v444);
                  }
                  break;
                case 2uLL:
                  uint64_t v923 = *v197;
                  if (v923)
                  {
                    uint64_t v924 = 0;
                    uint64_t v925 = 0;
                    uint64_t v926 = 0;
                    uint64_t v927 = 0;
                    uint64_t v928 = v196[19];
                    uint64_t v929 = v270[19];
                    uint64_t v930 = v195[19];
                    unint64_t v931 = v197[1];
                    vDSP_Length v932 = (uint64_t *)v196[3];
                    uint64_t v933 = *v932;
                    uint64_t v934 = v932[1];
                    unint64_t v935 = (uint64_t *)v270[3];
                    uint64_t v936 = *v935;
                    uint64_t v937 = v935[1];
                    uint64_t v938 = v936 - v937 * v271[1];
                    if (v931 <= 1) {
                      uint64_t v939 = 1;
                    }
                    else {
                      uint64_t v939 = v197[1];
                    }
                    uint64_t v940 = v933 - v934 * v931;
                    do
                    {
                      if (v931)
                      {
                        uint64_t v941 = v925 + v939;
                        v942 = (float *)(v930 + 4 * v925);
                        uint64_t v943 = v939;
                        do
                        {
                          *v942++ = *(float *)(v928 + 4 * v927) * *(float *)(v929 + 4 * v926);
                          v927 += v934;
                          v926 += v937;
                          --v943;
                        }
                        while (v943);
                        uint64_t v925 = v941;
                      }
                      v927 += v940;
                      v926 += v938;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 3uLL:
                  uint64_t v944 = *v197;
                  if (v944)
                  {
                    uint64_t v945 = 0;
                    uint64_t v946 = 0;
                    uint64_t v947 = 0;
                    uint64_t v948 = 0;
                    uint64_t v949 = v196[19];
                    uint64_t v950 = v270[19];
                    uint64_t v951 = v195[19];
                    unint64_t v952 = v197[1];
                    unint64_t v953 = (void *)v196[3];
                    uint64_t v954 = v953[1];
                    uint64_t v955 = (void *)v270[3];
                    uint64_t v956 = v955[1];
                    uint64_t v957 = *v955 - v956 * v271[1];
                    if (v952 <= 1) {
                      uint64_t v958 = 1;
                    }
                    else {
                      uint64_t v958 = v197[1];
                    }
                    unint64_t v959 = *v953 - v954 * v952;
                    do
                    {
                      if (v952)
                      {
                        uint64_t v960 = 0;
                        unint64_t v961 = v197[2];
                        uint64_t v962 = v953[2];
                        uint64_t v963 = v955[2];
                        if (v961 <= 1) {
                          uint64_t v964 = 1;
                        }
                        else {
                          uint64_t v964 = v197[2];
                        }
                        uint64_t v965 = v956 - v963 * v271[2];
                        do
                        {
                          uint64_t v966 = v964;
                          if (v961)
                          {
                            do
                            {
                              *(float *)(v951 + 4 * v946++) = *(float *)(v949 + 4 * v948) * *(float *)(v950 + 4 * v947);
                              v948 += v962;
                              v947 += v963;
                              --v966;
                            }
                            while (v966);
                          }
                          v948 += v954 - v962 * v961;
                          v947 += v965;
                          ++v960;
                        }
                        while (v960 != v958);
                      }
                      v948 += v959;
                      v947 += v957;
                      ++v945;
                    }
                    while (v945 != v944);
                  }
                  break;
                case 4uLL:
                  uint64_t v2007 = *v197;
                  if (v2007)
                  {
                    uint64_t v967 = 0;
                    uint64_t v968 = 0;
                    uint64_t v969 = 0;
                    uint64_t v970 = 0;
                    uint64_t v971 = v196[19];
                    uint64_t v972 = v270[19];
                    uint64_t v973 = v195[19];
                    unint64_t v974 = v197[1];
                    uint64_t v975 = (void *)v196[3];
                    vDSP_Length v976 = (void *)v270[3];
                    uint64_t v1929 = v976[1];
                    uint64_t v1958 = v975[1];
                    uint64_t v1989 = *v976 - v1929 * v271[1];
                    if (v974 <= 1) {
                      uint64_t v977 = 1;
                    }
                    else {
                      uint64_t v977 = v197[1];
                    }
                    unint64_t v978 = *v975 - v975[1] * v974;
                    do
                    {
                      if (v974)
                      {
                        uint64_t v979 = 0;
                        unint64_t v980 = v197[2];
                        uint64_t v981 = v975[2];
                        uint64_t v982 = v976[2];
                        if (v980 <= 1) {
                          uint64_t v983 = 1;
                        }
                        else {
                          uint64_t v983 = v197[2];
                        }
                        uint64_t v984 = v1929 - v982 * v271[2];
                        do
                        {
                          if (v980)
                          {
                            uint64_t v985 = 0;
                            unint64_t v986 = v197[3];
                            uint64_t v987 = v975[3];
                            uint64_t v988 = v976[3];
                            if (v986 <= 1) {
                              uint64_t v989 = 1;
                            }
                            else {
                              uint64_t v989 = v197[3];
                            }
                            uint64_t v990 = v982 - v988 * v271[3];
                            do
                            {
                              uint64_t v991 = v989;
                              if (v986)
                              {
                                do
                                {
                                  *(float *)(v973 + 4 * v968++) = *(float *)(v971 + 4 * v970)
                                                                * *(float *)(v972 + 4 * v969);
                                  v970 += v987;
                                  v969 += v988;
                                  --v991;
                                }
                                while (v991);
                              }
                              v970 += v981 - v987 * v986;
                              v969 += v990;
                              ++v985;
                            }
                            while (v985 != v983);
                          }
                          v970 += v1958 - v981 * v980;
                          v969 += v984;
                          ++v979;
                        }
                        while (v979 != v977);
                      }
                      v970 += v978;
                      v969 += v1989;
                      ++v967;
                    }
                    while (v967 != v2007);
                  }
                  break;
                default:
                  uint64_t v911 = v195[6];
                  if (v911)
                  {
                    uint64_t v912 = 0;
                    uint64_t v1928 = v270[19];
                    uint64_t v1957 = v196[19];
                    uint64_t v1915 = v195[19];
                    do
                    {
                      uint64_t v913 = 0;
                      if ((v199 & 0x80000000) == 0)
                      {
                        uint64_t v914 = v196[3];
                        uint64_t v915 = v199;
                        int v916 = v912;
                        do
                        {
                          ldiv_t v917 = ldiv(v916, v197[v915]);
                          int v916 = v917.quot;
                          v913 += *(void *)(v914 + 8 * v915--) * v917.rem;
                        }
                        while (v915 != -1);
                      }
                      uint64_t v918 = v1984;
                      if ((v1984 & 0x80000000) != 0)
                      {
                        LODWORD(v919) = 0;
                      }
                      else
                      {
                        uint64_t v919 = 0;
                        uint64_t v920 = v270[3];
                        int v921 = v912;
                        do
                        {
                          ldiv_t v922 = ldiv(v921, v271[v918]);
                          int v921 = v922.quot;
                          v919 += *(void *)(v920 + 8 * v918--) * v922.rem;
                        }
                        while (v918 != -1);
                      }
                      *(float *)(v1915 + 4 * v912++) = *(float *)(v1957 + 4 * (int)v913)
                                                     * *(float *)(v1928 + 4 * (int)v919);
                      uint64_t v199 = v2002;
                    }
                    while (v912 != v911);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

float mlx::core::Negative::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Negative::eval_cpu();
  }
  v5 = *(uint64_t **)v3;
  if (*(_DWORD *)(*(void *)v3 + 56) == 6 && (v5[21] & 1) != 0)
  {
    int v23 = *(float **)(*(void *)a3 + 152);
    int v24 = *(const float **)(*(void *)v3 + 152);
    vDSP_Length v25 = *(void *)(*(void *)v3 + 160);
    vDSP_vneg(v24, 1, v23, 1, v25);
  }
  else
  {
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)(*(void *)a3 + 56);
    switch((int)v7)
    {
      case 0:
        char v8 = (char *)v5[19];
        if (v5[21])
        {
          uint64_t v112 = *(void *)(*(void *)v3 + 160);
          if (v112)
          {
            int v113 = *(unsigned char **)(*(void *)a3 + 152);
            do
            {
              char v114 = *v8++;
              *v113++ = v114;
              --v112;
            }
            while (v112);
          }
        }
        else
        {
          int v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v11 = *(void *)a3;
          uint64_t v12 = *(void *)(*(void *)a3 + 48);
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = *(void *)(v11 + 152);
            char v15 = *(uint64_t **)v3;
            uint64_t v16 = *v15;
            uint64_t v17 = ((unint64_t)(v15[1] - *v15) >> 2) - 1;
            do
            {
              uint64_t v18 = 0;
              if ((v17 & 0x80000000) == 0)
              {
                uint64_t v19 = v15[3];
                uint64_t v20 = v17;
                int quot = v13;
                do
                {
                  ldiv_t v22 = ldiv(quot, *(int *)(v16 + 4 * v20));
                  int quot = v22.quot;
                  v18 += *(void *)(v19 + 8 * v20--) * v22.rem;
                }
                while (v20 != -1);
              }
              *(unsigned char *)(v14 + v13++) = v8[(int)v18];
            }
            while (v13 != v12);
          }
        }
        break;
      case 1:
        uint64_t v65 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v115 = 0;
            uint64_t v116 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v116 + v115) = -*(unsigned char *)(v65 + v115);
              ++v115;
            }
            while (v115 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          unsigned int v66 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v66, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v67 = 0;
            uint64_t v68 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v69 = **(void **)v3;
              unint64_t v70 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v69) >> 2;
              uint64_t v71 = 0;
              uint64_t v72 = (v70 - 1);
              if ((int)v70 - 1 >= 0)
              {
                uint64_t v73 = *(void *)(*(void *)v3 + 24);
                int v74 = v67;
                do
                {
                  ldiv_t v75 = ldiv(v74, *(int *)(v69 + 4 * v72));
                  int v74 = v75.quot;
                  v71 += *(void *)(v73 + 8 * v72--) * v75.rem;
                }
                while (v72 != -1);
              }
              *(unsigned char *)(v68 + v67++) = -*(unsigned char *)(v65 + (int)v71);
            }
            while (v67 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 2:
        unsigned int v40 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v107 = *(void *)(*(void *)v3 + 160);
          if (v107)
          {
            int v108 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v109 = *v40++;
              *v108++ = -v109;
              --v107;
            }
            while (v107);
          }
        }
        else
        {
          int v41 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v41, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v42 = *(void *)a3;
          uint64_t v43 = *(void *)(*(void *)a3 + 48);
          if (v43)
          {
            uint64_t v44 = 0;
            uint64_t v45 = *(void *)(v42 + 152);
            int v46 = *(uint64_t **)v3;
            uint64_t v47 = *v46;
            uint64_t v48 = ((unint64_t)(v46[1] - *v46) >> 2) - 1;
            do
            {
              uint64_t v49 = 0;
              if ((v48 & 0x80000000) == 0)
              {
                uint64_t v50 = v46[3];
                uint64_t v51 = v48;
                int v52 = v44;
                do
                {
                  ldiv_t v53 = ldiv(v52, *(int *)(v47 + 4 * v51));
                  int v52 = v53.quot;
                  v49 += *(void *)(v50 + 8 * v51--) * v53.rem;
                }
                while (v51 != -1);
              }
              *(_DWORD *)(v45 + 4 * v44++) = -v40[(int)v49];
            }
            while (v44 != v43);
          }
        }
        break;
      case 3:
        uint64_t v54 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v110 = 0;
            uint64_t v111 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v111 + v110) = -*(unsigned char *)(v54 + v110);
              ++v110;
            }
            while (v110 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          int v55 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v55, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v56 = 0;
            uint64_t v57 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v58 = **(void **)v3;
              unint64_t v59 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v58) >> 2;
              uint64_t v60 = 0;
              uint64_t v61 = (v59 - 1);
              if ((int)v59 - 1 >= 0)
              {
                uint64_t v62 = *(void *)(*(void *)v3 + 24);
                int v63 = v56;
                do
                {
                  ldiv_t v64 = ldiv(v63, *(int *)(v58 + 4 * v61));
                  int v63 = v64.quot;
                  v60 += *(void *)(v62 + 8 * v61--) * v64.rem;
                }
                while (v61 != -1);
              }
              *(unsigned char *)(v57 + v56++) = -*(unsigned char *)(v54 + (int)v60);
            }
            while (v56 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 4:
        int v26 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v104 = *(void *)(*(void *)v3 + 160);
          if (v104)
          {
            unsigned int v105 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v106 = *v26++;
              *v105++ = -v106;
              --v104;
            }
            while (v104);
          }
        }
        else
        {
          uint64_t v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v27, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v28 = *(void *)a3;
          uint64_t v29 = *(void *)(*(void *)a3 + 48);
          if (v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = *(void *)(v28 + 152);
            int v32 = *(uint64_t **)v3;
            uint64_t v33 = *v32;
            uint64_t v34 = ((unint64_t)(v32[1] - *v32) >> 2) - 1;
            do
            {
              uint64_t v35 = 0;
              if ((v34 & 0x80000000) == 0)
              {
                uint64_t v36 = v32[3];
                uint64_t v37 = v34;
                int v38 = v30;
                do
                {
                  ldiv_t v39 = ldiv(v38, *(int *)(v33 + 4 * v37));
                  int v38 = v39.quot;
                  v35 += *(void *)(v36 + 8 * v37--) * v39.rem;
                }
                while (v37 != -1);
              }
              *(_DWORD *)(v31 + 4 * v30++) = -v26[(int)v35];
            }
            while (v30 != v29);
          }
        }
        break;
      case 5:
        unsigned int v76 = (uint64_t *)v5[19];
        if (v5[21])
        {
          uint64_t v117 = *(void *)(*(void *)v3 + 160);
          if (v117)
          {
            char v118 = *(void **)(*(void *)a3 + 152);
            do
            {
              uint64_t v119 = *v76++;
              *v118++ = -v119;
              --v117;
            }
            while (v117);
          }
        }
        else
        {
          char v77 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v77, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v78 = *(void *)a3;
          uint64_t v79 = *(void *)(*(void *)a3 + 48);
          if (v79)
          {
            uint64_t v80 = 0;
            uint64_t v81 = *(void *)(v78 + 152);
            unsigned int v82 = *(uint64_t **)v3;
            uint64_t v83 = *v82;
            uint64_t v84 = ((unint64_t)(v82[1] - *v82) >> 2) - 1;
            do
            {
              uint64_t v85 = 0;
              if ((v84 & 0x80000000) == 0)
              {
                uint64_t v86 = v82[3];
                uint64_t v87 = v84;
                int v88 = v80;
                do
                {
                  ldiv_t v89 = ldiv(v88, *(int *)(v83 + 4 * v87));
                  int v88 = v89.quot;
                  v85 += *(void *)(v86 + 8 * v87--) * v89.rem;
                }
                while (v87 != -1);
              }
              *(void *)(v81 + 8 * v80++) = -v76[(int)v85];
            }
            while (v80 != v79);
          }
        }
        break;
      case 6:
        uint64_t v90 = (float *)v5[19];
        if (v5[21])
        {
          uint64_t v120 = *(void *)(*(void *)v3 + 160);
          if (v120)
          {
            unsigned int v121 = *(float **)(*(void *)a3 + 152);
            do
            {
              float v122 = *v90++;
              float result = -v122;
              *v121++ = -v122;
              --v120;
            }
            while (v120);
          }
        }
        else
        {
          int v91 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v91, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v92 = *(void *)a3;
          uint64_t v93 = *(void *)(*(void *)a3 + 48);
          if (v93)
          {
            uint64_t v94 = 0;
            uint64_t v95 = *(void *)(v92 + 152);
            int v96 = *(uint64_t **)v3;
            uint64_t v97 = *v96;
            uint64_t v98 = ((unint64_t)(v96[1] - *v96) >> 2) - 1;
            do
            {
              uint64_t v99 = 0;
              if ((v98 & 0x80000000) == 0)
              {
                uint64_t v100 = v96[3];
                uint64_t v101 = v98;
                int v102 = v94;
                do
                {
                  ldiv_t v103 = ldiv(v102, *(int *)(v97 + 4 * v101));
                  int v102 = v103.quot;
                  v99 += *(void *)(v100 + 8 * v101--) * v103.rem;
                }
                while (v101 != -1);
              }
              float result = -v90[(int)v99];
              *(float *)(v95 + 4 * v94++) = result;
            }
            while (v94 != v93);
          }
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_256F74D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Power::eval_cpu(uint64_t a1, const mlx::core::array **a2, int ***this)
{
  v18[4] = *MEMORY[0x263EF8340];
  v3 = *a2;
  if (a2[1] - *a2 != 32) {
    mlx::core::Power::eval_cpu();
  }
  uint64_t v6 = *this;
  unint64_t v7 = (unint64_t)(*this)[7];
  if (v7 == 6)
  {
    char v8 = *(void **)v3;
    if ((*(unsigned char *)(*(void *)v3 + 168) & 2) != 0)
    {
      int v9 = (const mlx::core::array *)((char *)v3 + 16);
      uint64_t v10 = *((void *)v3 + 2);
      if ((*(unsigned char *)(v10 + 168) & 2) != 0)
      {
        int v17 = v8[6];
        uint64_t v11 = *((void *)v3 + 1);
        if (!v11
          || *(void *)(v11 + 8)
          || (uint64_t v14 = v8[18]) == 0
          || *(void *)(v14 + 8)
          || ((v7 ^ v8[7]) & 0xFF00000000) != 0)
        {
          uint64_t v12 = *((void *)v3 + 3);
          if (!v12
            || *(void *)(v12 + 8)
            || (uint64_t v16 = *(void *)(v10 + 144)) == 0
            || *(void *)(v16 + 8)
            || ((v7 ^ *(void *)(v10 + 56)) & 0xFF00000000) != 0)
          {
            uint64_t v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(BYTE4(v7) * (void)v6[6]));
            v18[0] = &unk_27062AEC8;
            v18[1] = mlx::core::allocator::free;
            v18[3] = v18;
            mlx::core::array::set_data(this, (uint64_t)v13, (uint64_t)v18);
            std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v18);
LABEL_13:
            vvpowf((float *)(*this)[19], *(const float **)(*((void *)v3 + 2) + 152), *(const float **)(*(void *)v3 + 152), &v17);
            return;
          }
          char v15 = (mlx::core::array *)this;
        }
        else
        {
          char v15 = (mlx::core::array *)this;
          int v9 = v3;
        }
        mlx::core::array::copy_shared_buffer(v15, v9);
        goto LABEL_13;
      }
    }
  }
  mlx::core::Power::eval(a1, (uint64_t)a2, (mlx::core::array *)this);
}

void sub_256F74FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Scan::eval_cpu(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  v3 = *a2;
  if (a2[1] - *a2 != 16) {
    mlx::core::Scan::eval_cpu();
  }
  if (*(_DWORD *)(a1 + 20) == 2
    && (uint64_t v6 = (*a3)[7], v6 == 6)
    && (*(unsigned char *)(*(void *)v3 + 168) & 2) != 0
    && *(void *)(*(void *)(*(void *)v3 + 24) + 8 * *(int *)(a1 + 24)) == 1
    && !*(unsigned char *)(a1 + 29))
  {
    unint64_t v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((void)(*a3)[6] * BYTE4(v6)));
    v22[0] = &unk_27062AEC8;
    v22[1] = mlx::core::allocator::free;
    v22[3] = v22;
    mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v22);
    std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](v22);
    int v8 = mlx::core::array::shape(v3, *(_DWORD *)(a1 + 24));
    uint64_t v9 = *(void *)v3;
    unint64_t v10 = *(void *)(*(void *)v3 + 48);
    vDSP_Length v11 = v8;
    uint64_t v12 = *(void *)(v9 + 152);
    uint64_t v13 = (*a3)[19];
    float __S = 1.0;
    int v14 = *(unsigned __int8 *)(a1 + 28);
    unint64_t v15 = v10 / v8;
    if (v14)
    {
      if ((int)v15 >= 1)
      {
        uint64_t v16 = 4 * (v8 - 1);
        uint64_t v17 = v16 + 4;
        uint64_t v18 = v12 + 4;
        do
        {
          vDSP_vrsum((const float *)(v18 + v16), -1, &__S, (float *)((char *)v13 + v16), -1, v11);
          v16 += v17;
          LODWORD(v15) = v15 - 1;
        }
        while (v15);
      }
    }
    else if ((int)v15 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = v12 - 4;
      do
      {
        vDSP_vrsum((const float *)(v20 + v19 * 4), 1, &__S, (float *)&v13[v19], 1, v11);
        v19 += v11;
        LODWORD(v15) = v15 - 1;
      }
      while (v15);
    }
  }
  else
  {
    mlx::core::Scan::eval(a1, (uint64_t)a2, a3);
  }
}

void sub_256F751F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sin::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sin::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvsinf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Sin::eval(a1, a2, a3);
  }
}

void mlx::core::Sinh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sinh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvsinhf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Sinh::eval(a1, a2, a3);
  }
}

float mlx::core::Square::eval_cpu(int a1, uint64_t a2, mlx::core::array *a3)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Square::eval_cpu();
  }
  v5 = *(uint64_t **)v3;
  if (*(_DWORD *)(*(void *)v3 + 56) == 6 && (v5[21] & 1) != 0)
  {
    int v23 = *(const float **)(*(void *)v3 + 152);
    vDSP_Length v24 = *(void *)(*(void *)v3 + 160);
    vDSP_Length v25 = *(float **)(*(void *)a3 + 152);
    vDSP_vsq(v23, 1, v25, 1, v24);
  }
  else
  {
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)(*(void *)a3 + 56);
    switch((int)v7)
    {
      case 0:
        int v8 = (char *)v5[19];
        if (v5[21])
        {
          uint64_t v112 = *(void *)(*(void *)v3 + 160);
          if (v112)
          {
            int v113 = *(unsigned char **)(*(void *)a3 + 152);
            do
            {
              char v114 = *v8++;
              *v113++ = v114;
              --v112;
            }
            while (v112);
          }
        }
        else
        {
          uint64_t v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v11 = *(void *)a3;
          uint64_t v12 = *(void *)(*(void *)a3 + 48);
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = *(void *)(v11 + 152);
            unint64_t v15 = *(uint64_t **)v3;
            uint64_t v16 = *v15;
            uint64_t v17 = ((unint64_t)(v15[1] - *v15) >> 2) - 1;
            do
            {
              uint64_t v18 = 0;
              if ((v17 & 0x80000000) == 0)
              {
                uint64_t v19 = v15[3];
                uint64_t v20 = v17;
                int quot = v13;
                do
                {
                  ldiv_t v22 = ldiv(quot, *(int *)(v16 + 4 * v20));
                  int quot = v22.quot;
                  v18 += *(void *)(v19 + 8 * v20--) * v22.rem;
                }
                while (v20 != -1);
              }
              *(unsigned char *)(v14 + v13++) = v8[(int)v18];
            }
            while (v13 != v12);
          }
        }
        break;
      case 1:
        uint64_t v65 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v115 = 0;
            uint64_t v116 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v116 + v115) = *(unsigned char *)(v65 + v115) * *(unsigned char *)(v65 + v115);
              ++v115;
            }
            while (v115 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          unsigned int v66 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v66, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v67 = 0;
            uint64_t v68 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v69 = **(void **)v3;
              unint64_t v70 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v69) >> 2;
              uint64_t v71 = 0;
              uint64_t v72 = (v70 - 1);
              if ((int)v70 - 1 >= 0)
              {
                uint64_t v73 = *(void *)(*(void *)v3 + 24);
                int v74 = v67;
                do
                {
                  ldiv_t v75 = ldiv(v74, *(int *)(v69 + 4 * v72));
                  int v74 = v75.quot;
                  v71 += *(void *)(v73 + 8 * v72--) * v75.rem;
                }
                while (v72 != -1);
              }
              *(unsigned char *)(v68 + v67++) = *(unsigned char *)(v65 + (int)v71) * *(unsigned char *)(v65 + (int)v71);
            }
            while (v67 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 2:
        unsigned int v40 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v107 = *(void *)(*(void *)v3 + 160);
          if (v107)
          {
            int v108 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v109 = *v40++;
              *v108++ = v109 * v109;
              --v107;
            }
            while (v107);
          }
        }
        else
        {
          int v41 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v41, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v42 = *(void *)a3;
          uint64_t v43 = *(void *)(*(void *)a3 + 48);
          if (v43)
          {
            uint64_t v44 = 0;
            uint64_t v45 = *(void *)(v42 + 152);
            int v46 = *(uint64_t **)v3;
            uint64_t v47 = *v46;
            uint64_t v48 = ((unint64_t)(v46[1] - *v46) >> 2) - 1;
            do
            {
              uint64_t v49 = 0;
              if ((v48 & 0x80000000) == 0)
              {
                uint64_t v50 = v46[3];
                uint64_t v51 = v48;
                int v52 = v44;
                do
                {
                  ldiv_t v53 = ldiv(v52, *(int *)(v47 + 4 * v51));
                  int v52 = v53.quot;
                  v49 += *(void *)(v50 + 8 * v51--) * v53.rem;
                }
                while (v51 != -1);
              }
              *(_DWORD *)(v45 + 4 * v44++) = v40[(int)v49] * v40[(int)v49];
            }
            while (v44 != v43);
          }
        }
        break;
      case 3:
        uint64_t v54 = v5[19];
        if (v5[21])
        {
          if (*(void *)(*(void *)v3 + 160))
          {
            unint64_t v110 = 0;
            uint64_t v111 = *(void *)(*(void *)a3 + 152);
            do
            {
              *(unsigned char *)(v111 + v110) = *(unsigned char *)(v54 + v110) * *(unsigned char *)(v54 + v110);
              ++v110;
            }
            while (v110 < *(void *)(*(void *)v3 + 160));
          }
        }
        else
        {
          int v55 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v55, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          if (*(void *)(*(void *)a3 + 48))
          {
            unint64_t v56 = 0;
            uint64_t v57 = *(void *)(*(void *)a3 + 152);
            do
            {
              uint64_t v58 = **(void **)v3;
              unint64_t v59 = (unint64_t)(*(void *)(*(void *)v3 + 8) - v58) >> 2;
              uint64_t v60 = 0;
              uint64_t v61 = (v59 - 1);
              if ((int)v59 - 1 >= 0)
              {
                uint64_t v62 = *(void *)(*(void *)v3 + 24);
                int v63 = v56;
                do
                {
                  ldiv_t v64 = ldiv(v63, *(int *)(v58 + 4 * v61));
                  int v63 = v64.quot;
                  v60 += *(void *)(v62 + 8 * v61--) * v64.rem;
                }
                while (v61 != -1);
              }
              *(unsigned char *)(v57 + v56++) = *(unsigned char *)(v54 + (int)v60) * *(unsigned char *)(v54 + (int)v60);
            }
            while (v56 < *(void *)(*(void *)a3 + 48));
          }
        }
        break;
      case 4:
        int v26 = (int *)v5[19];
        if (v5[21])
        {
          uint64_t v104 = *(void *)(*(void *)v3 + 160);
          if (v104)
          {
            unsigned int v105 = *(_DWORD **)(*(void *)a3 + 152);
            do
            {
              int v106 = *v26++;
              *v105++ = v106 * v106;
              --v104;
            }
            while (v104);
          }
        }
        else
        {
          uint64_t v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v27, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v28 = *(void *)a3;
          uint64_t v29 = *(void *)(*(void *)a3 + 48);
          if (v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = *(void *)(v28 + 152);
            int v32 = *(uint64_t **)v3;
            uint64_t v33 = *v32;
            uint64_t v34 = ((unint64_t)(v32[1] - *v32) >> 2) - 1;
            do
            {
              uint64_t v35 = 0;
              if ((v34 & 0x80000000) == 0)
              {
                uint64_t v36 = v32[3];
                uint64_t v37 = v34;
                int v38 = v30;
                do
                {
                  ldiv_t v39 = ldiv(v38, *(int *)(v33 + 4 * v37));
                  int v38 = v39.quot;
                  v35 += *(void *)(v36 + 8 * v37--) * v39.rem;
                }
                while (v37 != -1);
              }
              *(_DWORD *)(v31 + 4 * v30++) = v26[(int)v35] * v26[(int)v35];
            }
            while (v30 != v29);
          }
        }
        break;
      case 5:
        unsigned int v76 = (uint64_t *)v5[19];
        if (v5[21])
        {
          uint64_t v117 = *(void *)(*(void *)v3 + 160);
          if (v117)
          {
            char v118 = *(void **)(*(void *)a3 + 152);
            do
            {
              uint64_t v119 = *v76++;
              *v118++ = v119 * v119;
              --v117;
            }
            while (v117);
          }
        }
        else
        {
          char v77 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v77, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v78 = *(void *)a3;
          uint64_t v79 = *(void *)(*(void *)a3 + 48);
          if (v79)
          {
            uint64_t v80 = 0;
            uint64_t v81 = *(void *)(v78 + 152);
            unsigned int v82 = *(uint64_t **)v3;
            uint64_t v83 = *v82;
            uint64_t v84 = ((unint64_t)(v82[1] - *v82) >> 2) - 1;
            do
            {
              uint64_t v85 = 0;
              if ((v84 & 0x80000000) == 0)
              {
                uint64_t v86 = v82[3];
                uint64_t v87 = v84;
                int v88 = v80;
                do
                {
                  ldiv_t v89 = ldiv(v88, *(int *)(v83 + 4 * v87));
                  int v88 = v89.quot;
                  v85 += *(void *)(v86 + 8 * v87--) * v89.rem;
                }
                while (v87 != -1);
              }
              *(void *)(v81 + 8 * v80++) = v76[(int)v85] * v76[(int)v85];
            }
            while (v80 != v79);
          }
        }
        break;
      case 6:
        uint64_t v90 = (float *)v5[19];
        if (v5[21])
        {
          uint64_t v120 = *(void *)(*(void *)v3 + 160);
          if (v120)
          {
            unsigned int v121 = *(float **)(*(void *)a3 + 152);
            do
            {
              float v122 = *v90++;
              float result = v122 * v122;
              *v121++ = v122 * v122;
              --v120;
            }
            while (v120);
          }
        }
        else
        {
          int v91 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(void *)(v6 + 48) * BYTE4(v7)));
          int v123 = &unk_27062AEC8;
          char v124 = mlx::core::allocator::free;
          uint64_t v125 = &v123;
          mlx::core::array::set_data((int ***)a3, (uint64_t)v91, (uint64_t)&v123);
          std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100](&v123);
          uint64_t v92 = *(void *)a3;
          uint64_t v93 = *(void *)(*(void *)a3 + 48);
          if (v93)
          {
            uint64_t v94 = 0;
            uint64_t v95 = *(void *)(v92 + 152);
            int v96 = *(uint64_t **)v3;
            uint64_t v97 = *v96;
            uint64_t v98 = ((unint64_t)(v96[1] - *v96) >> 2) - 1;
            do
            {
              uint64_t v99 = 0;
              if ((v98 & 0x80000000) == 0)
              {
                uint64_t v100 = v96[3];
                uint64_t v101 = v98;
                int v102 = v94;
                do
                {
                  ldiv_t v103 = ldiv(v102, *(int *)(v97 + 4 * v101));
                  int v102 = v103.quot;
                  v99 += *(void *)(v100 + 8 * v101--) * v103.rem;
                }
                while (v101 != -1);
              }
              float result = v90[(int)v99] * v90[(int)v99];
              *(float *)(v95 + 4 * v94++) = result;
            }
            while (v94 != v93);
          }
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_256F75C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(mlx::core::allocator::Buffer)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Sqrt::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)v3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    uint64_t v6 = *(const float **)(*(void *)v3 + 152);
    int v8 = *(void *)(*(void *)v3 + 160);
    uint64_t v7 = *(float **)(*(void *)a3 + 152);
    if (*(unsigned char *)(a1 + 20)) {
      vvrsqrtf(v7, v6, &v8);
    }
    else {
      vvsqrtf(v7, v6, &v8);
    }
  }
  else
  {
    mlx::core::Sqrt::eval(a1, a2, a3);
  }
}

void mlx::core::Subtract::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 32) {
    mlx::core::Subtract::eval_cpu();
  }
  uint64_t v4 = v3 + 2;
  int v5 = *(_DWORD *)(*v3 + 56);
  if (v5 == 4)
  {
  }
  else if (v5 == 6)
  {
  }
  else
  {
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_0,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_1,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_2,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_3>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_10;
        case 1:
          goto LABEL_17;
        case 2:
          goto LABEL_5;
        case 3:
          goto LABEL_18;
        default:
          uint64_t v27 = *(void **)a3;
          uint64_t v28 = *a1;
          uint64_t v29 = *(int **)*a1;
          uint64_t v30 = (*(void *)(*a1 + 8) - (void)v29) >> 2;
          uint64_t v31 = (v30 - 1);
          if ((int)v31 >= -1) {
            int v32 = -1;
          }
          else {
            int v32 = v30 - 1;
          }
          int v33 = v32 + 1;
          int v34 = v30 + 1;
          break;
      }
      while (1)
      {
        unsigned int v35 = v34 - 2;
        if (v34 - 2 < 0) {
          break;
        }
        --v34;
        if (*(void *)(*(void *)(v28 + 24) + 8 * v35) != *(void *)(v27[3] + 8 * v35)) {
          goto LABEL_76;
        }
      }
      int v34 = v33;
LABEL_76:
      int v88 = (int **)*a2;
      ldiv_t v89 = *(int **)*a2;
      uint64_t v90 = (*(void *)(*a2 + 8) - (void)v89) >> 2;
      uint64_t v91 = (v90 - 1);
      if ((int)v91 >= -1) {
        int v92 = -1;
      }
      else {
        int v92 = v90 - 1;
      }
      int v93 = v92 + 1;
      int v94 = v90 + 1;
      while (1)
      {
        unsigned int v95 = v94 - 2;
        if (v94 - 2 < 0) {
          break;
        }
        --v94;
        if (*(void *)&v88[3][2 * v95] != *(void *)(v27[3] + 8 * v95)) {
          goto LABEL_130;
        }
      }
      int v94 = v93;
LABEL_130:
      int v142 = v30 + 1;
      while (1)
      {
        unsigned int v143 = v142 - 2;
        if (v142 - 2 < 0) {
          break;
        }
        --v142;
        if (*(void *)(*(void *)(v28 + 24) + 8 * v143)) {
          goto LABEL_165;
        }
      }
      int v142 = v33;
LABEL_165:
      int v156 = v90 + 1;
      while (1)
      {
        int v157 = v156 - 2;
        if (v156 - 2 < 0) {
          break;
        }
        --v156;
        if (*(void *)&v88[3][2 * v157]) {
          goto LABEL_200;
        }
      }
      int v156 = v93;
LABEL_200:
      unint64_t v170 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v94) {
        int v171 = v94;
      }
      else {
        int v171 = v34;
      }
      if (v34 <= v156) {
        int v34 = v156;
      }
      if (v142 > v94) {
        int v94 = v142;
      }
      if (v170 > v94) {
        int v172 = 1;
      }
      else {
        int v172 = 4;
      }
      if (v170 <= v94) {
        int v94 = (uint64_t)(v27[1] - *v27) >> 2;
      }
      if (v170 <= v34) {
        int v34 = v94;
      }
      else {
        int v172 = 2;
      }
      if (v170 <= v171)
      {
        int v173 = v34;
      }
      else
      {
        int v172 = 3;
        int v173 = v171;
      }
      if (!v173) {
        goto LABEL_229;
      }
      unint64_t v174 = *(void *)(v27[3] + 8 * (v173 - 1));
      if (v174 < 0x10) {
        goto LABEL_229;
      }
      switch(v172)
      {
        case 1:
          if (v173 == 2)
          {
            int v1131 = *v29;
            if (*v29)
            {
              uint64_t v1132 = 0;
              uint64_t v1133 = 0;
              unint64_t v1568 = 0;
              uint64_t v1614 = *(void *)(v28 + 152);
              vDSP_Length v1660 = (int)v174;
              unsigned int v1134 = (float *)v27[19];
              uint64_t v1135 = v88[19];
              do
              {
                if (v29[1])
                {
                  unint64_t v1136 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1135 + v1132), 1, &__B, (const float *)(v1614 + v1133), v1134, 1, v1660);
                    uint64_t v28 = *a1;
                    uint64_t v1137 = *(void **)(*a1 + 24);
                    uint64_t v1138 = v1137[1];
                    v1133 += v1138;
                    int v88 = (int **)*a2;
                    uint64_t v1139 = *(int **)(*a2 + 24);
                    uint64_t v1140 = *((void *)v1139 + 1);
                    v1132 += v1140;
                    unsigned int v1134 = (float *)((char *)v1134 + v1660);
                    ++v1136;
                    uint64_t v29 = *(int **)*a1;
                    unint64_t v1141 = v29[1];
                  }
                  while (v1136 < v1141);
                  int v1131 = *v29;
                  ldiv_t v89 = *v88;
                }
                else
                {
                  unint64_t v1141 = 0;
                  uint64_t v1137 = *(void **)(v28 + 24);
                  uint64_t v1138 = v1137[1];
                  uint64_t v1139 = v88[3];
                  uint64_t v1140 = *((void *)v1139 + 1);
                }
                uint64_t v1133 = *v1137 + v1133 - v1141 * v1138;
                uint64_t v1132 = *(void *)v1139 + v1132 - v1140 * v89[1];
                ++v1568;
              }
              while (v1568 < v1131);
            }
          }
          else if (v173 == 1)
          {
            if (*v29)
            {
              unint64_t v830 = 0;
              uint64_t v831 = 0;
              uint64_t v832 = 0;
              uint64_t v833 = *(void *)(v28 + 152);
              uint64_t v834 = v88[19];
              vDSP_Length v835 = (int)v174;
              int v836 = (float *)v27[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v834 + v831), 1, &__B, (const float *)(v833 + v832), v836, 1, v835);
                v832 += **(void **)(*a1 + 24);
                v831 += **(void **)(*a2 + 24);
                int v836 = (float *)((char *)v836 + v835);
                ++v830;
              }
              while (v830 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            unint64_t v1142 = 0;
            ldiv_t v1615 = v88[19];
            uint64_t v1661 = *(void *)(v28 + 152);
            vDSP_Length v1569 = (int)v174;
            uint64_t v1143 = (float *)v27[19];
            do
            {
              uint64_t v1144 = *(void *)*a1;
              unint64_t v1145 = (unint64_t)(*(void *)(*a1 + 8) - v1144) >> 2;
              uint64_t v1146 = 0;
              uint64_t v1147 = (v1145 - 1);
              if ((int)v1145 - 1 >= 0)
              {
                uint64_t v1148 = *(void *)(*a1 + 24);
                int quot = v1142;
                do
                {
                  ldiv_t v1150 = ldiv(quot, *(int *)(v1144 + 4 * v1147));
                  int quot = v1150.quot;
                  v1146 += *(void *)(v1148 + 8 * v1147--) * v1150.rem;
                }
                while (v1147 != -1);
              }
              uint64_t v1151 = *(void *)*a2;
              unint64_t v1152 = (unint64_t)(*(void *)(*a2 + 8) - v1151) >> 2;
              uint64_t v1153 = 0;
              uint64_t v1154 = (v1152 - 1);
              if ((int)v1152 - 1 >= 0)
              {
                uint64_t v1155 = *(void *)(*a2 + 24);
                int v1156 = v1142;
                do
                {
                  ldiv_t v1157 = ldiv(v1156, *(int *)(v1151 + 4 * v1154));
                  int v1156 = v1157.quot;
                  v1153 += *(void *)(v1155 + 8 * v1154--) * v1157.rem;
                }
                while (v1154 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1615 + (int)v1153), 1, &__B, (const float *)(v1661 + (int)v1146), v1143, 1, v1569);
              uint64_t v1143 = (float *)((char *)v1143 + v1569);
              v1142 += v1569;
            }
            while (v1142 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v173 == 2)
          {
            int v1158 = *v29;
            if (*v29)
            {
              uint64_t v1159 = 0;
              uint64_t v1160 = 0;
              unint64_t v1570 = 0;
              uint64_t v1616 = *(void *)(v28 + 152);
              vDSP_Length v1662 = (int)v174;
              uint64_t v1161 = (float *)v27[19];
              uint64_t v1162 = v88[19];
              do
              {
                if (v29[1])
                {
                  unint64_t v1163 = 0;
                  do
                  {
                    float __B = (float)-*((unsigned __int8 *)v1162 + v1159);
                    vDSP_vsadd((const float *)(v1616 + v1160), 1, &__B, v1161, 1, v1662);
                    uint64_t v28 = *a1;
                    uint64_t v1164 = *(void **)(*a1 + 24);
                    uint64_t v1165 = v1164[1];
                    v1160 += v1165;
                    int v88 = (int **)*a2;
                    uint64_t v1166 = *(int **)(*a2 + 24);
                    uint64_t v1167 = *((void *)v1166 + 1);
                    v1159 += v1167;
                    uint64_t v1161 = (float *)((char *)v1161 + v1662);
                    ++v1163;
                    uint64_t v29 = *(int **)*a1;
                    unint64_t v1168 = v29[1];
                  }
                  while (v1163 < v1168);
                  int v1158 = *v29;
                  ldiv_t v89 = *v88;
                }
                else
                {
                  unint64_t v1168 = 0;
                  uint64_t v1164 = *(void **)(v28 + 24);
                  uint64_t v1165 = v1164[1];
                  uint64_t v1166 = v88[3];
                  uint64_t v1167 = *((void *)v1166 + 1);
                }
                uint64_t v1160 = *v1164 + v1160 - v1168 * v1165;
                uint64_t v1159 = *(void *)v1166 + v1159 - v1167 * v89[1];
                ++v1570;
              }
              while (v1570 < v1158);
            }
          }
          else if (v173 == 1)
          {
            if (*v29)
            {
              unint64_t v837 = 0;
              uint64_t v838 = 0;
              uint64_t v839 = 0;
              uint64_t v840 = *(void *)(v28 + 152);
              int v841 = v88[19];
              vDSP_Length v842 = (int)v174;
              uint64_t v843 = (float *)v27[19];
              do
              {
                float __B = (float)-*((unsigned __int8 *)v841 + v838);
                vDSP_vsadd((const float *)(v840 + v839), 1, &__B, v843, 1, v842);
                v839 += **(void **)(*a1 + 24);
                v838 += **(void **)(*a2 + 24);
                uint64_t v843 = (float *)((char *)v843 + v842);
                ++v837;
              }
              while (v837 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            unint64_t v1169 = 0;
            unint64_t v1617 = v88[19];
            uint64_t v1663 = *(void *)(v28 + 152);
            vDSP_Length v1571 = (int)v174;
            uint64_t v1170 = (float *)v27[19];
            do
            {
              uint64_t v1171 = *(void *)*a1;
              unint64_t v1172 = (unint64_t)(*(void *)(*a1 + 8) - v1171) >> 2;
              uint64_t v1173 = 0;
              uint64_t v1174 = (v1172 - 1);
              if ((int)v1172 - 1 >= 0)
              {
                uint64_t v1175 = *(void *)(*a1 + 24);
                int v1176 = v1169;
                do
                {
                  ldiv_t v1177 = ldiv(v1176, *(int *)(v1171 + 4 * v1174));
                  int v1176 = v1177.quot;
                  v1173 += *(void *)(v1175 + 8 * v1174--) * v1177.rem;
                }
                while (v1174 != -1);
              }
              uint64_t v1178 = *(void *)*a2;
              unint64_t v1179 = (unint64_t)(*(void *)(*a2 + 8) - v1178) >> 2;
              uint64_t v1180 = 0;
              uint64_t v1181 = (v1179 - 1);
              if ((int)v1179 - 1 >= 0)
              {
                uint64_t v1182 = *(void *)(*a2 + 24);
                int v1183 = v1169;
                do
                {
                  ldiv_t v1184 = ldiv(v1183, *(int *)(v1178 + 4 * v1181));
                  int v1183 = v1184.quot;
                  v1180 += *(void *)(v1182 + 8 * v1181--) * v1184.rem;
                }
                while (v1181 != -1);
              }
              float __B = (float)-*((unsigned __int8 *)v1617 + (int)v1180);
              vDSP_vsadd((const float *)(v1663 + (int)v1173), 1, &__B, v1170, 1, v1571);
              uint64_t v1170 = (float *)((char *)v1170 + v1571);
              v1169 += v1571;
            }
            while (v1169 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v173 == 2)
          {
            int v936 = *v29;
            if (*v29)
            {
              uint64_t v937 = 0;
              uint64_t v938 = 0;
              unint64_t v1556 = 0;
              uint64_t v1602 = *(void *)(v28 + 152);
              vDSP_Length v1648 = (int)v174;
              uint64_t v939 = (float *)v27[19];
              uint64_t v940 = v88[19];
              do
              {
                if (v29[1])
                {
                  unint64_t v941 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v940 + v937), 1, (const float *)(v1602 + v938), 1, v939, 1, v1648);
                    uint64_t v28 = *a1;
                    v942 = *(void **)(*a1 + 24);
                    uint64_t v943 = v942[1];
                    v938 += v943;
                    int v88 = (int **)*a2;
                    uint64_t v944 = *(int **)(*a2 + 24);
                    uint64_t v945 = *((void *)v944 + 1);
                    v937 += v945;
                    uint64_t v939 = (float *)((char *)v939 + v1648);
                    ++v941;
                    uint64_t v29 = *(int **)*a1;
                    unint64_t v946 = v29[1];
                  }
                  while (v941 < v946);
                  int v936 = *v29;
                  ldiv_t v89 = *v88;
                }
                else
                {
                  unint64_t v946 = 0;
                  v942 = *(void **)(v28 + 24);
                  uint64_t v943 = v942[1];
                  uint64_t v944 = v88[3];
                  uint64_t v945 = *((void *)v944 + 1);
                }
                uint64_t v938 = *v942 + v938 - v946 * v943;
                uint64_t v937 = *(void *)v944 + v937 - v945 * v89[1];
                ++v1556;
              }
              while (v1556 < v936);
            }
          }
          else if (v173 == 1)
          {
            if (*v29)
            {
              unint64_t v175 = 0;
              uint64_t v176 = 0;
              uint64_t v177 = 0;
              uint64_t v178 = *(void *)(v28 + 152);
              unsigned int v179 = v88[19];
              vDSP_Length v180 = (int)v174;
              int v181 = (float *)v27[19];
              do
              {
                vDSP_vsub((const float *)((char *)v179 + v176), 1, (const float *)(v178 + v177), 1, v181, 1, v180);
                v177 += **(void **)(*a1 + 24);
                v176 += **(void **)(*a2 + 24);
                int v181 = (float *)((char *)v181 + v180);
                ++v175;
              }
              while (v175 < **(int **)*a1);
            }
          }
          else if (v27[6])
          {
            unint64_t v947 = 0;
            char v1603 = v88[19];
            uint64_t v1649 = *(void *)(v28 + 152);
            vDSP_Length v1557 = (int)v174;
            uint64_t v948 = (float *)v27[19];
            do
            {
              uint64_t v949 = *(void *)*a1;
              unint64_t v950 = (unint64_t)(*(void *)(*a1 + 8) - v949) >> 2;
              uint64_t v951 = 0;
              uint64_t v952 = (v950 - 1);
              if ((int)v950 - 1 >= 0)
              {
                uint64_t v953 = *(void *)(*a1 + 24);
                int v954 = v947;
                do
                {
                  ldiv_t v955 = ldiv(v954, *(int *)(v949 + 4 * v952));
                  int v954 = v955.quot;
                  v951 += *(void *)(v953 + 8 * v952--) * v955.rem;
                }
                while (v952 != -1);
              }
              uint64_t v956 = *(void *)*a2;
              unint64_t v957 = (unint64_t)(*(void *)(*a2 + 8) - v956) >> 2;
              uint64_t v958 = 0;
              uint64_t v959 = (v957 - 1);
              if ((int)v957 - 1 >= 0)
              {
                uint64_t v960 = *(void *)(*a2 + 24);
                int v961 = v947;
                do
                {
                  ldiv_t v962 = ldiv(v961, *(int *)(v956 + 4 * v959));
                  int v961 = v962.quot;
                  v958 += *(void *)(v960 + 8 * v959--) * v962.rem;
                }
                while (v959 != -1);
              }
              vDSP_vsub((const float *)((char *)v1603 + (int)v958), 1, (const float *)(v1649 + (int)v951), 1, v948, 1, v1557);
              uint64_t v948 = (float *)((char *)v948 + v1557);
              v947 += v1557;
            }
            while (v947 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_229:
          switch(v170)
          {
            case 1uLL:
              uint64_t v182 = v27[6];
              if (v182)
              {
                uint64_t v183 = *(unsigned __int8 **)(v28 + 152);
                uint64_t v184 = v88[19];
                unsigned int v185 = (BOOL *)v27[19];
                uint64_t v186 = **(void **)(v28 + 24);
                uint64_t v187 = *(void *)v88[3];
                do
                {
                  *v185++ = *(char *)v184 != *v183;
                  uint64_t v184 = (int *)((char *)v184 + v187);
                  v183 += v186;
                  --v182;
                }
                while (v182);
              }
              break;
            case 2uLL:
              uint64_t v311 = *v29;
              if (v311)
              {
                uint64_t v312 = 0;
                uint64_t v313 = 0;
                uint64_t v314 = 0;
                uint64_t v315 = 0;
                uint64_t v316 = *(void *)(v28 + 152);
                uint64_t v317 = v88[19];
                uint64_t v318 = v27[19];
                unint64_t v319 = v29[1];
                BOOL v320 = *(uint64_t **)(v28 + 24);
                uint64_t v321 = *v320;
                uint64_t v322 = v320[1];
                uint64_t v323 = v88[3];
                uint64_t v324 = *(void *)v323;
                uint64_t v325 = *((void *)v323 + 1);
                uint64_t v326 = v324 - v325 * v89[1];
                if (v319 <= 1) {
                  uint64_t v327 = 1;
                }
                else {
                  uint64_t v327 = v29[1];
                }
                uint64_t v328 = v321 - v322 * v319;
                do
                {
                  if (v319)
                  {
                    uint64_t v329 = v313 + v327;
                    unint64_t v330 = (BOOL *)(v318 + v313);
                    uint64_t v331 = v327;
                    do
                    {
                      *v330++ = *((char *)v317 + v314) != *(unsigned __int8 *)(v316 + v315);
                      v315 += v322;
                      v314 += v325;
                      --v331;
                    }
                    while (v331);
                    uint64_t v313 = v329;
                  }
                  v315 += v328;
                  v314 += v326;
                  ++v312;
                }
                while (v312 != v311);
              }
              break;
            case 3uLL:
              uint64_t v332 = *v29;
              if (v332)
              {
                uint64_t v333 = 0;
                uint64_t v334 = 0;
                uint64_t v335 = 0;
                uint64_t v336 = 0;
                uint64_t v337 = *(void *)(v28 + 152);
                uint64_t v338 = v88[19];
                uint64_t v339 = v27[19];
                unint64_t v340 = v29[1];
                uint64_t v341 = *(void **)(v28 + 24);
                uint64_t v342 = v341[1];
                unsigned int v343 = v88[3];
                uint64_t v344 = *((void *)v343 + 1);
                uint64_t v345 = *(void *)v343 - v344 * v89[1];
                if (v340 <= 1) {
                  uint64_t v346 = 1;
                }
                else {
                  uint64_t v346 = v29[1];
                }
                unint64_t v347 = *v341 - v342 * v340;
                do
                {
                  if (v340)
                  {
                    uint64_t v348 = 0;
                    unint64_t v349 = v29[2];
                    uint64_t v350 = v341[2];
                    uint64_t v351 = *((void *)v343 + 2);
                    if (v349 <= 1) {
                      uint64_t v352 = 1;
                    }
                    else {
                      uint64_t v352 = v29[2];
                    }
                    uint64_t v353 = v344 - v351 * v89[2];
                    do
                    {
                      uint64_t v354 = v352;
                      if (v349)
                      {
                        do
                        {
                          *(unsigned char *)(v339 + v334++) = *((char *)v338 + v335) != *(unsigned __int8 *)(v337 + v336);
                          v336 += v350;
                          v335 += v351;
                          --v354;
                        }
                        while (v354);
                      }
                      v336 += v342 - v350 * v349;
                      v335 += v353;
                      ++v348;
                    }
                    while (v348 != v346);
                  }
                  v336 += v347;
                  v335 += v345;
                  ++v333;
                }
                while (v333 != v332);
              }
              break;
            case 4uLL:
              uint64_t v1639 = *v29;
              if (v1639)
              {
                uint64_t v355 = 0;
                uint64_t v356 = 0;
                uint64_t v357 = 0;
                uint64_t v358 = 0;
                uint64_t v359 = *(void *)(v28 + 152);
                uint64_t v360 = v88[19];
                uint64_t v361 = v27[19];
                unint64_t v362 = v29[1];
                unsigned int v363 = *(void **)(v28 + 24);
                uint64_t v364 = v88[3];
                uint64_t v1519 = *((void *)v364 + 1);
                uint64_t v1522 = v363[1];
                uint64_t v1549 = *(void *)v364 - v1519 * v89[1];
                int v1593 = v29[1];
                if (v362 <= 1) {
                  uint64_t v365 = 1;
                }
                else {
                  uint64_t v365 = v29[1];
                }
                unint64_t v1529 = *v363 - v363[1] * v362;
                do
                {
                  if (v1593)
                  {
                    uint64_t v366 = 0;
                    unint64_t v367 = v29[2];
                    uint64_t v368 = v363[2];
                    uint64_t v369 = *((void *)v364 + 2);
                    if (v367 <= 1) {
                      uint64_t v370 = 1;
                    }
                    else {
                      uint64_t v370 = v29[2];
                    }
                    uint64_t v371 = v1519 - v369 * v89[2];
                    do
                    {
                      if (v367)
                      {
                        uint64_t v372 = 0;
                        unint64_t v373 = v29[3];
                        uint64_t v374 = v363[3];
                        uint64_t v375 = *((void *)v364 + 3);
                        if (v373 <= 1) {
                          uint64_t v376 = 1;
                        }
                        else {
                          uint64_t v376 = v29[3];
                        }
                        uint64_t v377 = v369 - v375 * v89[3];
                        do
                        {
                          uint64_t v378 = v376;
                          if (v373)
                          {
                            do
                            {
                              *(unsigned char *)(v361 + v356++) = *((char *)v360 + v357) != *(unsigned __int8 *)(v359 + v358);
                              v358 += v374;
                              v357 += v375;
                              --v378;
                            }
                            while (v378);
                          }
                          v358 += v368 - v374 * v373;
                          v357 += v377;
                          ++v372;
                        }
                        while (v372 != v370);
                      }
                      v358 += v1522 - v368 * v367;
                      v357 += v371;
                      ++v366;
                    }
                    while (v366 != v365);
                  }
                  v358 += v1529;
                  v357 += v1549;
                  ++v355;
                }
                while (v355 != v1639);
              }
              break;
            default:
              uint64_t v1592 = v27[6];
              uint64_t v1638 = v31;
              if (v1592)
              {
                uint64_t v300 = 0;
                uint64_t v1528 = v88[19];
                uint64_t v1548 = *(void *)(v28 + 152);
                uint64_t v1521 = v27[19];
                do
                {
                  uint64_t v301 = v1638;
                  if ((v1638 & 0x80000000) != 0)
                  {
                    LODWORD(v302) = 0;
                  }
                  else
                  {
                    uint64_t v302 = 0;
                    uint64_t v303 = *(void *)(v28 + 24);
                    int v304 = v300;
                    do
                    {
                      ldiv_t v305 = ldiv(v304, v29[v301]);
                      int v304 = v305.quot;
                      v302 += *(void *)(v303 + 8 * v301--) * v305.rem;
                    }
                    while (v301 != -1);
                  }
                  uint64_t v306 = 0;
                  if ((v91 & 0x80000000) == 0)
                  {
                    int v307 = v88[3];
                    uint64_t v308 = v91;
                    int v309 = v300;
                    do
                    {
                      ldiv_t v310 = ldiv(v309, v89[v308]);
                      int v309 = v310.quot;
                      v306 += *(void *)&v307[2 * v308--] * v310.rem;
                    }
                    while (v308 != -1);
                  }
                  *(unsigned char *)(v1521 + v300++) = *((char *)v1528 + (int)v306) != *(unsigned __int8 *)(v1548 + (int)v302);
                }
                while (v300 != v1592);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_9;
        case 1:
          goto LABEL_17;
        case 2:
LABEL_5:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          int v12 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_56;
        case 3:
          goto LABEL_18;
        default:
          uint64_t v36 = *(void **)a3;
          uint64_t v37 = *a1;
          int v38 = *(int **)*a1;
          uint64_t v39 = (*(void *)(*a1 + 8) - (void)v38) >> 2;
          int v40 = v39 - 1;
          if ((int)v39 - 1 >= -1) {
            int v40 = -1;
          }
          int v41 = v40 + 1;
          int v42 = v39 + 1;
          break;
      }
      while (1)
      {
        unsigned int v43 = v42 - 2;
        if (v42 - 2 < 0) {
          break;
        }
        --v42;
        if (*(void *)(*(void *)(v37 + 24) + 8 * v43) != *(void *)(v36[3] + 8 * v43)) {
          goto LABEL_84;
        }
      }
      int v42 = v41;
LABEL_84:
      int v96 = (int **)*a2;
      uint64_t v97 = *(int **)*a2;
      uint64_t v98 = (*(void *)(*a2 + 8) - (void)v97) >> 2;
      int v99 = v98 - 1;
      if ((int)v98 - 1 >= -1) {
        int v99 = -1;
      }
      int v100 = v99 + 1;
      int v101 = v98 + 1;
      while (1)
      {
        unsigned int v102 = v101 - 2;
        if (v101 - 2 < 0) {
          break;
        }
        --v101;
        if (*(void *)&v96[3][2 * v102] != *(void *)(v36[3] + 8 * v102)) {
          goto LABEL_135;
        }
      }
      int v101 = v100;
LABEL_135:
      int v144 = v39 + 1;
      while (1)
      {
        unsigned int v145 = v144 - 2;
        if (v144 - 2 < 0) {
          break;
        }
        --v144;
        if (*(void *)(*(void *)(v37 + 24) + 8 * v145)) {
          goto LABEL_170;
        }
      }
      int v144 = v41;
LABEL_170:
      int v158 = v98 + 1;
      while (1)
      {
        int v159 = v158 - 2;
        if (v158 - 2 < 0) {
          break;
        }
        --v158;
        if (*(void *)&v96[3][2 * v159]) {
          goto LABEL_235;
        }
      }
      int v158 = v100;
LABEL_235:
      unint64_t v188 = (uint64_t)(v36[1] - *v36) >> 2;
      if (v42 <= v101) {
        int v189 = v101;
      }
      else {
        int v189 = v42;
      }
      if (v42 <= v158) {
        int v42 = v158;
      }
      if (v144 > v101) {
        int v101 = v144;
      }
      if (v188 > v101) {
        int v190 = 1;
      }
      else {
        int v190 = 4;
      }
      if (v188 <= v101) {
        int v101 = (uint64_t)(v36[1] - *v36) >> 2;
      }
      if (v188 <= v42) {
        int v42 = v101;
      }
      else {
        int v190 = 2;
      }
      if (v188 <= v189)
      {
        int v191 = v42;
      }
      else
      {
        int v190 = 3;
        int v191 = v189;
      }
      if (!v191) {
        goto LABEL_264;
      }
      unint64_t v192 = *(void *)(v36[3] + 8 * (v191 - 1));
      if (v192 < 0x10) {
        goto LABEL_264;
      }
      switch(v190)
      {
        case 1:
          if (v191 == 2)
          {
            int v1185 = *v38;
            if (*v38)
            {
              unint64_t v1664 = 0;
              uint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = *(void *)(v37 + 152);
              uint64_t v1189 = v96[19];
              vDSP_Length v1190 = (int)v192;
              unint64_t v1191 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  unint64_t v1192 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1189 + v1186), 1, &__B, (const float *)(v1188 + v1187), v1191, 1, v1190);
                    uint64_t v37 = *a1;
                    unsigned int v1193 = *(void **)(*a1 + 24);
                    uint64_t v1194 = v1193[1];
                    v1187 += v1194;
                    int v96 = (int **)*a2;
                    uint64_t v1195 = *(int **)(*a2 + 24);
                    uint64_t v1196 = *((void *)v1195 + 1);
                    v1186 += v1196;
                    unint64_t v1191 = (float *)((char *)v1191 + v1190);
                    ++v1192;
                    int v38 = *(int **)*a1;
                    unint64_t v1197 = v38[1];
                  }
                  while (v1192 < v1197);
                  int v1185 = *v38;
                  uint64_t v97 = *v96;
                }
                else
                {
                  unint64_t v1197 = 0;
                  unsigned int v1193 = *(void **)(v37 + 24);
                  uint64_t v1194 = v1193[1];
                  uint64_t v1195 = v96[3];
                  uint64_t v1196 = *((void *)v1195 + 1);
                }
                uint64_t v1187 = *v1193 + v1187 - v1197 * v1194;
                uint64_t v1186 = *(void *)v1195 + v1186 - v1196 * v97[1];
                ++v1664;
              }
              while (v1664 < v1185);
            }
          }
          else if (v191 == 1)
          {
            if (*v38)
            {
              unint64_t v844 = 0;
              uint64_t v845 = 0;
              uint64_t v846 = 0;
              uint64_t v847 = *(void *)(v37 + 152);
              uint64_t v848 = v96[19];
              vDSP_Length v849 = (int)v192;
              uint64_t v850 = (float *)v36[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v848 + v845), 1, &__B, (const float *)(v847 + v846), v850, 1, v849);
                v846 += **(void **)(*a1 + 24);
                v845 += **(void **)(*a2 + 24);
                uint64_t v850 = (float *)((char *)v850 + v849);
                ++v844;
              }
              while (v844 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            unint64_t v1198 = 0;
            uint64_t v1618 = v96[19];
            uint64_t v1665 = *(void *)(v37 + 152);
            vDSP_Length v1572 = (int)v192;
            unint64_t v1199 = (float *)v36[19];
            do
            {
              uint64_t v1200 = *(void *)*a1;
              unint64_t v1201 = (unint64_t)(*(void *)(*a1 + 8) - v1200) >> 2;
              uint64_t v1202 = 0;
              uint64_t v1203 = (v1201 - 1);
              if ((int)v1201 - 1 >= 0)
              {
                uint64_t v1204 = *(void *)(*a1 + 24);
                int v1205 = v1198;
                do
                {
                  ldiv_t v1206 = ldiv(v1205, *(int *)(v1200 + 4 * v1203));
                  int v1205 = v1206.quot;
                  v1202 += *(void *)(v1204 + 8 * v1203--) * v1206.rem;
                }
                while (v1203 != -1);
              }
              uint64_t v1207 = *(void *)*a2;
              unint64_t v1208 = (unint64_t)(*(void *)(*a2 + 8) - v1207) >> 2;
              uint64_t v1209 = 0;
              uint64_t v1210 = (v1208 - 1);
              if ((int)v1208 - 1 >= 0)
              {
                uint64_t v1211 = *(void *)(*a2 + 24);
                int v1212 = v1198;
                do
                {
                  ldiv_t v1213 = ldiv(v1212, *(int *)(v1207 + 4 * v1210));
                  int v1212 = v1213.quot;
                  v1209 += *(void *)(v1211 + 8 * v1210--) * v1213.rem;
                }
                while (v1210 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1618 + (int)v1209), 1, &__B, (const float *)(v1665 + (int)v1202), v1199, 1, v1572);
              unint64_t v1199 = (float *)((char *)v1199 + v1572);
              v1198 += v1572;
            }
            while (v1198 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v191 == 2)
          {
            int v1214 = *v38;
            if (*v38)
            {
              unint64_t v1215 = 0;
              uint64_t v1216 = 0;
              uint64_t v1217 = 0;
              uint64_t v1218 = *(void *)(v37 + 152);
              uint64_t v1219 = v96[19];
              vDSP_Length v1220 = (int)v192;
              ldiv_t v1221 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  unint64_t v1222 = 0;
                  do
                  {
                    float __B = (float)-*((unsigned __int8 *)v1219 + v1216);
                    vDSP_vsadd((const float *)(v1218 + v1217), 1, &__B, v1221, 1, v1220);
                    uint64_t v37 = *a1;
                    uint64_t v1223 = *(void **)(*a1 + 24);
                    uint64_t v1224 = v1223[1];
                    v1217 += v1224;
                    int v96 = (int **)*a2;
                    uint64_t v1225 = *(int **)(*a2 + 24);
                    uint64_t v1226 = *((void *)v1225 + 1);
                    v1216 += v1226;
                    ldiv_t v1221 = (float *)((char *)v1221 + v1220);
                    ++v1222;
                    int v38 = *(int **)*a1;
                    unint64_t v1227 = v38[1];
                  }
                  while (v1222 < v1227);
                  int v1214 = *v38;
                  uint64_t v97 = *v96;
                }
                else
                {
                  unint64_t v1227 = 0;
                  uint64_t v1223 = *(void **)(v37 + 24);
                  uint64_t v1224 = v1223[1];
                  uint64_t v1225 = v96[3];
                  uint64_t v1226 = *((void *)v1225 + 1);
                }
                uint64_t v1217 = *v1223 + v1217 - v1227 * v1224;
                uint64_t v1216 = *(void *)v1225 + v1216 - v1226 * v97[1];
                ++v1215;
              }
              while (v1215 < v1214);
            }
          }
          else if (v191 == 1)
          {
            if (*v38)
            {
              unint64_t v851 = 0;
              uint64_t v852 = 0;
              uint64_t v853 = 0;
              uint64_t v854 = *(void *)(v37 + 152);
              uint64_t v855 = v96[19];
              vDSP_Length v856 = (int)v192;
              uint64_t v857 = (float *)v36[19];
              do
              {
                float __B = (float)-*((unsigned __int8 *)v855 + v852);
                vDSP_vsadd((const float *)(v854 + v853), 1, &__B, v857, 1, v856);
                v853 += **(void **)(*a1 + 24);
                v852 += **(void **)(*a2 + 24);
                uint64_t v857 = (float *)((char *)v857 + v856);
                ++v851;
              }
              while (v851 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            unint64_t v1228 = 0;
            uint64_t v1619 = v96[19];
            uint64_t v1666 = *(void *)(v37 + 152);
            vDSP_Length v1573 = (int)v192;
            unint64_t v1229 = (float *)v36[19];
            do
            {
              uint64_t v1230 = *(void *)*a1;
              unint64_t v1231 = (unint64_t)(*(void *)(*a1 + 8) - v1230) >> 2;
              uint64_t v1232 = 0;
              uint64_t v1233 = (v1231 - 1);
              if ((int)v1231 - 1 >= 0)
              {
                uint64_t v1234 = *(void *)(*a1 + 24);
                int v1235 = v1228;
                do
                {
                  ldiv_t v1236 = ldiv(v1235, *(int *)(v1230 + 4 * v1233));
                  int v1235 = v1236.quot;
                  v1232 += *(void *)(v1234 + 8 * v1233--) * v1236.rem;
                }
                while (v1233 != -1);
              }
              uint64_t v1237 = *(void *)*a2;
              unint64_t v1238 = (unint64_t)(*(void *)(*a2 + 8) - v1237) >> 2;
              uint64_t v1239 = 0;
              uint64_t v1240 = (v1238 - 1);
              if ((int)v1238 - 1 >= 0)
              {
                uint64_t v1241 = *(void *)(*a2 + 24);
                int v1242 = v1228;
                do
                {
                  ldiv_t v1243 = ldiv(v1242, *(int *)(v1237 + 4 * v1240));
                  int v1242 = v1243.quot;
                  v1239 += *(void *)(v1241 + 8 * v1240--) * v1243.rem;
                }
                while (v1240 != -1);
              }
              float __B = (float)-*((unsigned __int8 *)v1619 + (int)v1239);
              vDSP_vsadd((const float *)(v1666 + (int)v1232), 1, &__B, v1229, 1, v1573);
              unint64_t v1229 = (float *)((char *)v1229 + v1573);
              v1228 += v1573;
            }
            while (v1228 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v191 == 2)
          {
            int v963 = *v38;
            if (*v38)
            {
              unint64_t v964 = 0;
              uint64_t v965 = 0;
              uint64_t v966 = 0;
              uint64_t v967 = *(void *)(v37 + 152);
              uint64_t v968 = v96[19];
              vDSP_Length v969 = (int)v192;
              uint64_t v970 = (float *)v36[19];
              do
              {
                if (v38[1])
                {
                  unint64_t v971 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v968 + v965), 1, (const float *)(v967 + v966), 1, v970, 1, v969);
                    uint64_t v37 = *a1;
                    uint64_t v972 = *(void **)(*a1 + 24);
                    uint64_t v973 = v972[1];
                    v966 += v973;
                    int v96 = (int **)*a2;
                    unint64_t v974 = *(int **)(*a2 + 24);
                    uint64_t v975 = *((void *)v974 + 1);
                    v965 += v975;
                    uint64_t v970 = (float *)((char *)v970 + v969);
                    ++v971;
                    int v38 = *(int **)*a1;
                    unint64_t v976 = v38[1];
                  }
                  while (v971 < v976);
                  int v963 = *v38;
                  uint64_t v97 = *v96;
                }
                else
                {
                  unint64_t v976 = 0;
                  uint64_t v972 = *(void **)(v37 + 24);
                  uint64_t v973 = v972[1];
                  unint64_t v974 = v96[3];
                  uint64_t v975 = *((void *)v974 + 1);
                }
                uint64_t v966 = *v972 + v966 - v976 * v973;
                uint64_t v965 = *(void *)v974 + v965 - v975 * v97[1];
                ++v964;
              }
              while (v964 < v963);
            }
          }
          else if (v191 == 1)
          {
            if (*v38)
            {
              unint64_t v193 = 0;
              uint64_t v194 = 0;
              uint64_t v195 = 0;
              uint64_t v196 = *(void *)(v37 + 152);
              vDSP_Length v197 = v96[19];
              vDSP_Length v198 = (int)v192;
              uint64_t v199 = (float *)v36[19];
              do
              {
                vDSP_vsub((const float *)((char *)v197 + v194), 1, (const float *)(v196 + v195), 1, v199, 1, v198);
                v195 += **(void **)(*a1 + 24);
                v194 += **(void **)(*a2 + 24);
                uint64_t v199 = (float *)((char *)v199 + v198);
                ++v193;
              }
              while (v193 < **(int **)*a1);
            }
          }
          else if (v36[6])
          {
            unint64_t v977 = 0;
            unsigned int v1604 = v96[19];
            uint64_t v1650 = *(void *)(v37 + 152);
            vDSP_Length v1558 = (int)v192;
            unint64_t v978 = (float *)v36[19];
            do
            {
              uint64_t v979 = *(void *)*a1;
              unint64_t v980 = (unint64_t)(*(void *)(*a1 + 8) - v979) >> 2;
              uint64_t v981 = 0;
              uint64_t v982 = (v980 - 1);
              if ((int)v980 - 1 >= 0)
              {
                uint64_t v983 = *(void *)(*a1 + 24);
                int v984 = v977;
                do
                {
                  ldiv_t v985 = ldiv(v984, *(int *)(v979 + 4 * v982));
                  int v984 = v985.quot;
                  v981 += *(void *)(v983 + 8 * v982--) * v985.rem;
                }
                while (v982 != -1);
              }
              uint64_t v986 = *(void *)*a2;
              unint64_t v987 = (unint64_t)(*(void *)(*a2 + 8) - v986) >> 2;
              uint64_t v988 = 0;
              uint64_t v989 = (v987 - 1);
              if ((int)v987 - 1 >= 0)
              {
                uint64_t v990 = *(void *)(*a2 + 24);
                int v991 = v977;
                do
                {
                  ldiv_t v992 = ldiv(v991, *(int *)(v986 + 4 * v989));
                  int v991 = v992.quot;
                  v988 += *(void *)(v990 + 8 * v989--) * v992.rem;
                }
                while (v989 != -1);
              }
              vDSP_vsub((const float *)((char *)v1604 + (int)v988), 1, (const float *)(v1650 + (int)v981), 1, v978, 1, v1558);
              unint64_t v978 = (float *)((char *)v978 + v1558);
              v977 += v1558;
            }
            while (v977 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_264:
          switch(v188)
          {
            case 1uLL:
              if (v36[6])
              {
                unint64_t v200 = 0;
                uint64_t v201 = 0;
                uint64_t v202 = 0;
                uint64_t v203 = *(void *)(v37 + 152);
                int v204 = v96[19];
                uint64_t v205 = v36[19];
                do
                {
                  *(unsigned char *)(v205 + v200) = *(unsigned char *)(v203 + v202) - *((unsigned char *)v204 + v201);
                  v202 += **(void **)(*a1 + 24);
                  v201 += **(void **)(*a2 + 24);
                  ++v200;
                }
                while (v200 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v395 = *v38;
              if (*v38)
              {
                unint64_t v396 = 0;
                uint64_t v397 = 0;
                uint64_t v398 = 0;
                uint64_t v399 = 0;
                uint64_t v400 = *(void *)(v37 + 152);
                uint64_t v401 = v96[19];
                uint64_t v402 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    unint64_t v403 = 0;
                    do
                    {
                      *(unsigned char *)(v402 + v397 + v403) = *(unsigned char *)(v400 + v399) - *((unsigned char *)v401 + v398);
                      uint64_t v37 = *a1;
                      uint64_t v404 = *(void **)(*a1 + 24);
                      uint64_t v405 = v404[1];
                      v399 += v405;
                      int v96 = (int **)*a2;
                      uint64_t v406 = *(int **)(*a2 + 24);
                      uint64_t v407 = *((void *)v406 + 1);
                      v398 += v407;
                      ++v403;
                      int v38 = *(int **)*a1;
                      unint64_t v408 = v38[1];
                    }
                    while (v403 < v408);
                    int v395 = *v38;
                    uint64_t v97 = *v96;
                    v397 += v403;
                  }
                  else
                  {
                    unint64_t v408 = 0;
                    uint64_t v404 = *(void **)(v37 + 24);
                    uint64_t v405 = v404[1];
                    uint64_t v406 = v96[3];
                    uint64_t v407 = *((void *)v406 + 1);
                  }
                  uint64_t v399 = *v404 + v399 - v408 * v405;
                  uint64_t v398 = *(void *)v406 + v398 - v407 * v97[1];
                  ++v396;
                }
                while (v396 < v395);
              }
              break;
            case 3uLL:
              int v409 = *v38;
              if (*v38)
              {
                unint64_t v410 = 0;
                uint64_t v411 = 0;
                uint64_t v412 = 0;
                uint64_t v413 = 0;
                uint64_t v414 = *(void *)(v37 + 152);
                uint64_t v415 = v96[19];
                uint64_t v416 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    unint64_t v417 = 0;
                    do
                    {
                      if (v38[2])
                      {
                        unint64_t v418 = 0;
                        do
                        {
                          *(unsigned char *)(v416 + v411 + v418) = *(unsigned char *)(v414 + v413) - *((unsigned char *)v415 + v412);
                          uint64_t v37 = *a1;
                          uint64_t v419 = *(void **)(*a1 + 24);
                          uint64_t v420 = v419[2];
                          v413 += v420;
                          int v96 = (int **)*a2;
                          uint64_t v421 = *(int **)(*a2 + 24);
                          uint64_t v422 = *((void *)v421 + 2);
                          v412 += v422;
                          ++v418;
                          int v38 = *(int **)*a1;
                          unint64_t v423 = v38[2];
                        }
                        while (v418 < v423);
                        uint64_t v97 = *v96;
                        v411 += v418;
                      }
                      else
                      {
                        unint64_t v423 = 0;
                        uint64_t v419 = *(void **)(v37 + 24);
                        uint64_t v420 = v419[2];
                        uint64_t v421 = v96[3];
                        uint64_t v422 = *((void *)v421 + 2);
                      }
                      uint64_t v424 = v419[1];
                      uint64_t v413 = v424 + v413 - v423 * v420;
                      uint64_t v412 = *((void *)v421 + 1) + v412 - v422 * v97[2];
                      ++v417;
                      unint64_t v425 = v38[1];
                    }
                    while (v417 < v425);
                    int v409 = *v38;
                  }
                  else
                  {
                    unint64_t v425 = 0;
                    uint64_t v419 = *(void **)(v37 + 24);
                    uint64_t v424 = v419[1];
                  }
                  uint64_t v413 = *v419 + v413 - v425 * v424;
                  uint64_t v412 = *(void *)v96[3] + v412 - *((void *)v96[3] + 1) * v97[1];
                  ++v410;
                }
                while (v410 < v409);
              }
              break;
            case 4uLL:
              int v426 = *v38;
              if (*v38)
              {
                unint64_t v427 = 0;
                uint64_t v428 = 0;
                uint64_t v429 = 0;
                uint64_t v430 = 0;
                uint64_t v431 = *(void *)(v37 + 152);
                int v432 = v96[19];
                uint64_t v433 = v36[19];
                do
                {
                  if (v38[1])
                  {
                    unint64_t v434 = 0;
                    do
                    {
                      if (v38[2])
                      {
                        unint64_t v435 = 0;
                        do
                        {
                          if (v38[3])
                          {
                            unint64_t v436 = 0;
                            do
                            {
                              *(unsigned char *)(v433 + v428 + v436) = *(unsigned char *)(v431 + v430) - *((unsigned char *)v432 + v429);
                              uint64_t v37 = *a1;
                              uint64_t v437 = *(void **)(*a1 + 24);
                              uint64_t v438 = v437[3];
                              v430 += v438;
                              int v96 = (int **)*a2;
                              uint64_t v439 = *(int **)(*a2 + 24);
                              uint64_t v440 = *((void *)v439 + 3);
                              v429 += v440;
                              ++v436;
                              int v38 = *(int **)*a1;
                              unint64_t v441 = v38[3];
                            }
                            while (v436 < v441);
                            uint64_t v97 = *v96;
                            v428 += v436;
                          }
                          else
                          {
                            unint64_t v441 = 0;
                            uint64_t v437 = *(void **)(v37 + 24);
                            uint64_t v438 = v437[3];
                            uint64_t v439 = v96[3];
                            uint64_t v440 = *((void *)v439 + 3);
                          }
                          uint64_t v442 = v437[2];
                          uint64_t v430 = v442 + v430 - v441 * v438;
                          uint64_t v429 = *((void *)v439 + 2) + v429 - v440 * v97[3];
                          ++v435;
                          unint64_t v443 = v38[2];
                        }
                        while (v435 < v443);
                      }
                      else
                      {
                        unint64_t v443 = 0;
                        uint64_t v437 = *(void **)(v37 + 24);
                        uint64_t v442 = v437[2];
                      }
                      uint64_t v430 = v437[1] + v430 - v443 * v442;
                      uint64_t v429 = *((void *)v96[3] + 1) + v429 - *((void *)v96[3] + 2) * v97[2];
                      ++v434;
                      unint64_t v444 = v38[1];
                    }
                    while (v434 < v444);
                    int v426 = *v38;
                  }
                  else
                  {
                    unint64_t v444 = 0;
                  }
                  uint64_t v430 = **(void **)(v37 + 24) + v430 - *(void *)(*(void *)(v37 + 24) + 8) * v444;
                  uint64_t v429 = *(void *)v96[3] + v429 - *((void *)v96[3] + 1) * v97[1];
                  ++v427;
                }
                while (v427 < v426);
              }
              break;
            default:
              if (v36[6])
              {
                unint64_t v379 = 0;
                int v1594 = v96[19];
                uint64_t v1640 = *(void *)(v37 + 152);
                uint64_t v380 = v36[19];
                do
                {
                  uint64_t v381 = *(void *)*a1;
                  unint64_t v382 = (unint64_t)(*(void *)(*a1 + 8) - v381) >> 2;
                  uint64_t v383 = 0;
                  uint64_t v384 = (v382 - 1);
                  if ((int)v382 - 1 >= 0)
                  {
                    uint64_t v385 = *(void *)(*a1 + 24);
                    int v386 = v379;
                    do
                    {
                      ldiv_t v387 = ldiv(v386, *(int *)(v381 + 4 * v384));
                      int v386 = v387.quot;
                      v383 += *(void *)(v385 + 8 * v384--) * v387.rem;
                    }
                    while (v384 != -1);
                  }
                  uint64_t v388 = *(void *)*a2;
                  unint64_t v389 = (unint64_t)(*(void *)(*a2 + 8) - v388) >> 2;
                  uint64_t v390 = 0;
                  uint64_t v391 = (v389 - 1);
                  if ((int)v389 - 1 >= 0)
                  {
                    uint64_t v392 = *(void *)(*a2 + 24);
                    int v393 = v379;
                    do
                    {
                      ldiv_t v394 = ldiv(v393, *(int *)(v388 + 4 * v391));
                      int v393 = v394.quot;
                      v390 += *(void *)(v392 + 8 * v391--) * v394.rem;
                    }
                    while (v391 != -1);
                  }
                  *(unsigned char *)(v380 + v379++) = *(unsigned char *)(v1640 + (int)v383) - *((unsigned char *)v1594 + (int)v390);
                }
                while (v379 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v13)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_17;
        case 2:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          float v14 = (float)-**(_DWORD **)(*a2 + 152);
          goto LABEL_57;
        case 3:
          goto LABEL_18;
        default:
          uint64_t v44 = *(void **)a3;
          uint64_t v45 = *a1;
          int v46 = *(int **)*a1;
          uint64_t v47 = (*(void *)(*a1 + 8) - (void)v46) >> 2;
          uint64_t v48 = (v47 - 1);
          if ((int)v48 >= -1) {
            int v49 = -1;
          }
          else {
            int v49 = v47 - 1;
          }
          int v50 = v49 + 1;
          int v51 = v47 + 1;
          break;
      }
      while (1)
      {
        unsigned int v52 = v51 - 2;
        if (v51 - 2 < 0) {
          break;
        }
        --v51;
        if (*(void *)(*(void *)(v45 + 24) + 8 * v52) != *(void *)(v44[3] + 8 * v52)) {
          goto LABEL_91;
        }
      }
      int v51 = v50;
LABEL_91:
      ldiv_t v103 = (int **)*a2;
      uint64_t v104 = *(int **)*a2;
      uint64_t v105 = (*(void *)(*a2 + 8) - (void)v104) >> 2;
      uint64_t v106 = (v105 - 1);
      if ((int)v106 >= -1) {
        int v107 = -1;
      }
      else {
        int v107 = v105 - 1;
      }
      int v108 = v107 + 1;
      int v109 = v105 + 1;
      while (1)
      {
        unsigned int v110 = v109 - 2;
        if (v109 - 2 < 0) {
          break;
        }
        --v109;
        if (*(void *)&v103[3][2 * v110] != *(void *)(v44[3] + 8 * v110)) {
          goto LABEL_140;
        }
      }
      int v109 = v108;
LABEL_140:
      int v146 = v47 + 1;
      while (1)
      {
        unsigned int v147 = v146 - 2;
        if (v146 - 2 < 0) {
          break;
        }
        --v146;
        if (*(void *)(*(void *)(v45 + 24) + 8 * v147)) {
          goto LABEL_175;
        }
      }
      int v146 = v50;
LABEL_175:
      int v160 = v105 + 1;
      while (1)
      {
        int v161 = v160 - 2;
        if (v160 - 2 < 0) {
          break;
        }
        --v160;
        if (*(void *)&v103[3][2 * v161]) {
          goto LABEL_270;
        }
      }
      int v160 = v108;
LABEL_270:
      unint64_t v206 = (uint64_t)(v44[1] - *v44) >> 2;
      if (v51 <= v109) {
        int v207 = v109;
      }
      else {
        int v207 = v51;
      }
      if (v51 <= v160) {
        int v51 = v160;
      }
      if (v146 > v109) {
        int v109 = v146;
      }
      if (v206 > v109) {
        int v208 = 1;
      }
      else {
        int v208 = 4;
      }
      if (v206 <= v109) {
        int v109 = (uint64_t)(v44[1] - *v44) >> 2;
      }
      if (v206 <= v51) {
        int v51 = v109;
      }
      else {
        int v208 = 2;
      }
      if (v206 <= v207)
      {
        int v209 = v51;
      }
      else
      {
        int v208 = 3;
        int v209 = v207;
      }
      if (!v209) {
        goto LABEL_299;
      }
      unint64_t v210 = *(void *)(v44[3] + 8 * (v209 - 1));
      if (v210 < 0x10) {
        goto LABEL_299;
      }
      switch(v208)
      {
        case 1:
          if (v209 == 2)
          {
            int v1244 = *v46;
            if (*v46)
            {
              uint64_t v1245 = 0;
              uint64_t v1246 = 0;
              uint64_t v1667 = *(void *)(v45 + 152);
              uint64_t v1620 = v103[19];
              unsigned int v1247 = (float *)v44[19];
              unint64_t v1540 = 0;
              vDSP_Length v1574 = (int)v210;
              uint64_t v1248 = 4 * (int)v210;
              do
              {
                if (v46[1])
                {
                  unint64_t v1249 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)&v1620[v1245], 1, &__B, (const float *)(v1667 + 4 * v1246), v1247, 1, v1574);
                    uint64_t v45 = *a1;
                    uint64_t v1250 = *(void **)(*a1 + 24);
                    uint64_t v1251 = v1250[1];
                    v1246 += v1251;
                    ldiv_t v103 = (int **)*a2;
                    uint64_t v1252 = *(int **)(*a2 + 24);
                    uint64_t v1253 = *((void *)v1252 + 1);
                    v1245 += v1253;
                    ++v1249;
                    int v46 = *(int **)*a1;
                    unint64_t v1254 = v46[1];
                    unsigned int v1247 = (float *)((char *)v1247 + v1248);
                  }
                  while (v1249 < v1254);
                  int v1244 = *v46;
                  uint64_t v104 = *v103;
                }
                else
                {
                  unint64_t v1254 = 0;
                  uint64_t v1250 = *(void **)(v45 + 24);
                  uint64_t v1251 = v1250[1];
                  uint64_t v1252 = v103[3];
                  uint64_t v1253 = *((void *)v1252 + 1);
                }
                uint64_t v1246 = *v1250 + v1246 - v1254 * v1251;
                uint64_t v1245 = *(void *)v1252 + v1245 - v1253 * v104[1];
                ++v1540;
              }
              while (v1540 < v1244);
            }
          }
          else if (v209 == 1)
          {
            if (*v46)
            {
              unint64_t v858 = 0;
              uint64_t v859 = 0;
              uint64_t v860 = 0;
              uint64_t v861 = *(void *)(v45 + 152);
              uint64_t v862 = v103[19];
              vDSP_Length v863 = (int)v210;
              uint64_t v864 = 4 * (int)v210;
              uint64_t v865 = (float *)v44[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)&v862[v859], 1, &__B, (const float *)(v861 + 4 * v860), v865, 1, v863);
                v860 += **(void **)(*a1 + 24);
                v859 += **(void **)(*a2 + 24);
                ++v858;
                uint64_t v865 = (float *)((char *)v865 + v864);
              }
              while (v858 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            unint64_t v1255 = 0;
            int v1621 = v103[19];
            uint64_t v1668 = *(void *)(v45 + 152);
            vDSP_Length v1575 = (int)v210;
            uint64_t v1256 = (float *)v44[19];
            do
            {
              uint64_t v1257 = *(void *)*a1;
              unint64_t v1258 = (unint64_t)(*(void *)(*a1 + 8) - v1257) >> 2;
              uint64_t v1259 = 0;
              uint64_t v1260 = (v1258 - 1);
              if ((int)v1258 - 1 >= 0)
              {
                uint64_t v1261 = *(void *)(*a1 + 24);
                int v1262 = v1255;
                do
                {
                  ldiv_t v1263 = ldiv(v1262, *(int *)(v1257 + 4 * v1260));
                  int v1262 = v1263.quot;
                  v1259 += *(void *)(v1261 + 8 * v1260--) * v1263.rem;
                }
                while (v1260 != -1);
              }
              uint64_t v1264 = *(void *)*a2;
              unint64_t v1265 = (unint64_t)(*(void *)(*a2 + 8) - v1264) >> 2;
              uint64_t v1266 = 0;
              uint64_t v1267 = (v1265 - 1);
              if ((int)v1265 - 1 >= 0)
              {
                uint64_t v1268 = *(void *)(*a2 + 24);
                int v1269 = v1255;
                do
                {
                  ldiv_t v1270 = ldiv(v1269, *(int *)(v1264 + 4 * v1267));
                  int v1269 = v1270.quot;
                  v1266 += *(void *)(v1268 + 8 * v1267--) * v1270.rem;
                }
                while (v1267 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)&v1621[(int)v1266], 1, &__B, (const float *)(v1668 + 4 * (int)v1259), v1256, 1, v1575);
              v1256 += v1575;
              v1255 += v1575;
            }
            while (v1255 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v209 == 2)
          {
            int v1271 = *v46;
            if (*v46)
            {
              uint64_t v1272 = 0;
              uint64_t v1273 = 0;
              uint64_t v1669 = *(void *)(v45 + 152);
              ldiv_t v1622 = v103[19];
              int v1274 = (float *)v44[19];
              unint64_t v1541 = 0;
              vDSP_Length v1576 = (int)v210;
              uint64_t v1275 = 4 * (int)v210;
              do
              {
                if (v46[1])
                {
                  unint64_t v1276 = 0;
                  do
                  {
                    float __B = (float)-v1622[v1272];
                    vDSP_vsadd((const float *)(v1669 + 4 * v1273), 1, &__B, v1274, 1, v1576);
                    uint64_t v45 = *a1;
                    unsigned int v1277 = *(void **)(*a1 + 24);
                    uint64_t v1278 = v1277[1];
                    v1273 += v1278;
                    ldiv_t v103 = (int **)*a2;
                    unint64_t v1279 = *(int **)(*a2 + 24);
                    uint64_t v1280 = *((void *)v1279 + 1);
                    v1272 += v1280;
                    ++v1276;
                    int v46 = *(int **)*a1;
                    unint64_t v1281 = v46[1];
                    int v1274 = (float *)((char *)v1274 + v1275);
                  }
                  while (v1276 < v1281);
                  int v1271 = *v46;
                  uint64_t v104 = *v103;
                }
                else
                {
                  unint64_t v1281 = 0;
                  unsigned int v1277 = *(void **)(v45 + 24);
                  uint64_t v1278 = v1277[1];
                  unint64_t v1279 = v103[3];
                  uint64_t v1280 = *((void *)v1279 + 1);
                }
                uint64_t v1273 = *v1277 + v1273 - v1281 * v1278;
                uint64_t v1272 = *(void *)v1279 + v1272 - v1280 * v104[1];
                ++v1541;
              }
              while (v1541 < v1271);
            }
          }
          else if (v209 == 1)
          {
            if (*v46)
            {
              unint64_t v866 = 0;
              uint64_t v867 = 0;
              uint64_t v868 = 0;
              uint64_t v869 = *(void *)(v45 + 152);
              uint64_t v870 = v103[19];
              vDSP_Length v871 = (int)v210;
              uint64_t v872 = 4 * (int)v210;
              unint64_t v873 = (float *)v44[19];
              do
              {
                float __B = (float)-v870[v867];
                vDSP_vsadd((const float *)(v869 + 4 * v868), 1, &__B, v873, 1, v871);
                v868 += **(void **)(*a1 + 24);
                v867 += **(void **)(*a2 + 24);
                ++v866;
                unint64_t v873 = (float *)((char *)v873 + v872);
              }
              while (v866 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            unint64_t v1282 = 0;
            uint64_t v1623 = v103[19];
            uint64_t v1670 = *(void *)(v45 + 152);
            vDSP_Length v1577 = (int)v210;
            uint64_t v1283 = (float *)v44[19];
            do
            {
              uint64_t v1284 = *(void *)*a1;
              unint64_t v1285 = (unint64_t)(*(void *)(*a1 + 8) - v1284) >> 2;
              uint64_t v1286 = 0;
              uint64_t v1287 = (v1285 - 1);
              if ((int)v1285 - 1 >= 0)
              {
                uint64_t v1288 = *(void *)(*a1 + 24);
                int v1289 = v1282;
                do
                {
                  ldiv_t v1290 = ldiv(v1289, *(int *)(v1284 + 4 * v1287));
                  int v1289 = v1290.quot;
                  v1286 += *(void *)(v1288 + 8 * v1287--) * v1290.rem;
                }
                while (v1287 != -1);
              }
              uint64_t v1291 = *(void *)*a2;
              unint64_t v1292 = (unint64_t)(*(void *)(*a2 + 8) - v1291) >> 2;
              uint64_t v1293 = 0;
              uint64_t v1294 = (v1292 - 1);
              if ((int)v1292 - 1 >= 0)
              {
                uint64_t v1295 = *(void *)(*a2 + 24);
                int v1296 = v1282;
                do
                {
                  ldiv_t v1297 = ldiv(v1296, *(int *)(v1291 + 4 * v1294));
                  int v1296 = v1297.quot;
                  v1293 += *(void *)(v1295 + 8 * v1294--) * v1297.rem;
                }
                while (v1294 != -1);
              }
              float __B = (float)-v1623[(int)v1293];
              vDSP_vsadd((const float *)(v1670 + 4 * (int)v1286), 1, &__B, v1283, 1, v1577);
              v1283 += v1577;
              v1282 += v1577;
            }
            while (v1282 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v209 == 2)
          {
            int v993 = *v46;
            if (*v46)
            {
              uint64_t v994 = 0;
              uint64_t v995 = 0;
              uint64_t v1651 = *(void *)(v45 + 152);
              uint64_t v1605 = v103[19];
              uint64_t v996 = (float *)v44[19];
              unint64_t v1536 = 0;
              vDSP_Length v1559 = (int)v210;
              uint64_t v997 = 4 * (int)v210;
              do
              {
                if (v46[1])
                {
                  unint64_t v998 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1605[v994], 1, (const float *)(v1651 + 4 * v995), 1, v996, 1, v1559);
                    uint64_t v45 = *a1;
                    uint64_t v999 = *(void **)(*a1 + 24);
                    uint64_t v1000 = v999[1];
                    v995 += v1000;
                    ldiv_t v103 = (int **)*a2;
                    int v1001 = *(int **)(*a2 + 24);
                    uint64_t v1002 = *((void *)v1001 + 1);
                    v994 += v1002;
                    ++v998;
                    int v46 = *(int **)*a1;
                    unint64_t v1003 = v46[1];
                    uint64_t v996 = (float *)((char *)v996 + v997);
                  }
                  while (v998 < v1003);
                  int v993 = *v46;
                  uint64_t v104 = *v103;
                }
                else
                {
                  unint64_t v1003 = 0;
                  uint64_t v999 = *(void **)(v45 + 24);
                  uint64_t v1000 = v999[1];
                  int v1001 = v103[3];
                  uint64_t v1002 = *((void *)v1001 + 1);
                }
                uint64_t v995 = *v999 + v995 - v1003 * v1000;
                uint64_t v994 = *(void *)v1001 + v994 - v1002 * v104[1];
                ++v1536;
              }
              while (v1536 < v993);
            }
          }
          else if (v209 == 1)
          {
            if (*v46)
            {
              unint64_t v211 = 0;
              uint64_t v212 = 0;
              uint64_t v213 = 0;
              uint64_t v214 = *(void *)(v45 + 152);
              float v215 = v103[19];
              vDSP_Length v216 = (int)v210;
              uint64_t v217 = 4 * (int)v210;
              uint64_t v218 = (float *)v44[19];
              do
              {
                vDSP_vsub((const float *)&v215[v212], 1, (const float *)(v214 + 4 * v213), 1, v218, 1, v216);
                v213 += **(void **)(*a1 + 24);
                v212 += **(void **)(*a2 + 24);
                ++v211;
                uint64_t v218 = (float *)((char *)v218 + v217);
              }
              while (v211 < **(int **)*a1);
            }
          }
          else if (v44[6])
          {
            unint64_t v1004 = 0;
            uint64_t v1606 = v103[19];
            uint64_t v1652 = *(void *)(v45 + 152);
            vDSP_Length v1560 = (int)v210;
            uint64_t v1005 = (float *)v44[19];
            do
            {
              uint64_t v1006 = *(void *)*a1;
              unint64_t v1007 = (unint64_t)(*(void *)(*a1 + 8) - v1006) >> 2;
              uint64_t v1008 = 0;
              uint64_t v1009 = (v1007 - 1);
              if ((int)v1007 - 1 >= 0)
              {
                uint64_t v1010 = *(void *)(*a1 + 24);
                int v1011 = v1004;
                do
                {
                  ldiv_t v1012 = ldiv(v1011, *(int *)(v1006 + 4 * v1009));
                  int v1011 = v1012.quot;
                  v1008 += *(void *)(v1010 + 8 * v1009--) * v1012.rem;
                }
                while (v1009 != -1);
              }
              uint64_t v1013 = *(void *)*a2;
              unint64_t v1014 = (unint64_t)(*(void *)(*a2 + 8) - v1013) >> 2;
              uint64_t v1015 = 0;
              uint64_t v1016 = (v1014 - 1);
              if ((int)v1014 - 1 >= 0)
              {
                uint64_t v1017 = *(void *)(*a2 + 24);
                int v1018 = v1004;
                do
                {
                  ldiv_t v1019 = ldiv(v1018, *(int *)(v1013 + 4 * v1016));
                  int v1018 = v1019.quot;
                  v1015 += *(void *)(v1017 + 8 * v1016--) * v1019.rem;
                }
                while (v1016 != -1);
              }
              vDSP_vsub((const float *)&v1606[(int)v1015], 1, (const float *)(v1652 + 4 * (int)v1008), 1, v1005, 1, v1560);
              v1005 += v1560;
              v1004 += v1560;
            }
            while (v1004 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_299:
          switch(v206)
          {
            case 1uLL:
              uint64_t v219 = v44[6];
              if (v219)
              {
                unsigned int v220 = *(_DWORD **)(v45 + 152);
                float v221 = v103[19];
                float v222 = (_DWORD *)v44[19];
                uint64_t v223 = 4 * *(void *)v103[3];
                uint64_t v224 = 4 * **(void **)(v45 + 24);
                do
                {
                  *v222++ = *v220 - *v221;
                  float v221 = (int *)((char *)v221 + v223);
                  unsigned int v220 = (_DWORD *)((char *)v220 + v224);
                  --v219;
                }
                while (v219);
              }
              break;
            case 2uLL:
              int v456 = *v46;
              if (*v46)
              {
                unint64_t v457 = 0;
                uint64_t v458 = 0;
                uint64_t v459 = 0;
                uint64_t v460 = 0;
                uint64_t v461 = *(void *)(v45 + 152);
                char v462 = v103[19];
                uint64_t v463 = v44[19];
                uint64_t v464 = *(uint64_t **)(v45 + 24);
                uint64_t v465 = *v464;
                uint64_t v466 = v464[1];
                uint64_t v467 = v103[3];
                uint64_t v469 = *(void *)v467;
                uint64_t v468 = *((void *)v467 + 1);
                int v470 = v46[1];
                do
                {
                  if (v470)
                  {
                    for (unint64_t i = 0; i < v470; ++i)
                    {
                      *(_DWORD *)(v463 + 4 * v458 + 4 * i) = *(_DWORD *)(v461 + 4 * v460) - v462[v459];
                      v460 += v466;
                      v459 += v468;
                      int v470 = v46[1];
                    }
                    uint64_t v472 = v470;
                    int v456 = *v46;
                    v458 += i;
                  }
                  else
                  {
                    uint64_t v472 = 0;
                  }
                  uint64_t v460 = v460 + v465 - v472 * v466;
                  uint64_t v459 = v459 + v469 - v468 * v104[1];
                  ++v457;
                }
                while (v457 < v456);
              }
              break;
            case 3uLL:
              int v473 = *v46;
              if (*v46)
              {
                unint64_t v474 = 0;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                uint64_t v477 = 0;
                uint64_t v478 = *(void *)(v45 + 152);
                uint64_t v479 = v103[19];
                uint64_t v480 = v44[19];
                uint64_t v481 = *(uint64_t **)(v45 + 24);
                uint64_t v482 = *v481;
                uint64_t v483 = v481[1];
                BOOL v484 = v103[3];
                uint64_t v485 = *(void *)v484;
                uint64_t v486 = *((void *)v484 + 1);
                int v487 = v46[1];
                int v488 = v487;
                do
                {
                  if (v488)
                  {
                    unint64_t v489 = 0;
                    uint64_t v490 = v481[2];
                    uint64_t v491 = *((void *)v484 + 2);
                    int v492 = v46[2];
                    do
                    {
                      if (v492)
                      {
                        for (unint64_t j = 0; j < v492; ++j)
                        {
                          *(_DWORD *)(v480 + 4 * v475 + 4 * j) = *(_DWORD *)(v478 + 4 * v477) - v479[v476];
                          v477 += v490;
                          v476 += v491;
                          int v492 = v46[2];
                        }
                        uint64_t v494 = v492;
                        int v487 = v46[1];
                        v475 += j;
                      }
                      else
                      {
                        uint64_t v494 = 0;
                      }
                      uint64_t v477 = v477 + v483 - v494 * v490;
                      uint64_t v476 = v476 + v486 - v491 * v104[2];
                      ++v489;
                    }
                    while (v489 < v487);
                    uint64_t v495 = v487;
                    int v473 = *v46;
                    int v488 = v487;
                  }
                  else
                  {
                    uint64_t v495 = 0;
                  }
                  uint64_t v477 = v477 + v482 - v495 * v483;
                  uint64_t v476 = v476 + v485 - v486 * v104[1];
                  ++v474;
                }
                while (v474 < v473);
              }
              break;
            case 4uLL:
              int v496 = *v46;
              if (*v46)
              {
                unint64_t v497 = 0;
                uint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = *(void *)(v45 + 152);
                uint64_t v502 = v103[19];
                uint64_t v503 = v44[19];
                uint64_t v504 = *(uint64_t **)(v45 + 24);
                uint64_t v505 = *v504;
                uint64_t v506 = v504[1];
                uint64_t v507 = v103[3];
                uint64_t v508 = *(void *)v507;
                uint64_t v509 = *((void *)v507 + 1);
                int v510 = v46[1];
                int v511 = v510;
                do
                {
                  if (v511)
                  {
                    unint64_t v512 = 0;
                    uint64_t v513 = v504[2];
                    uint64_t v514 = *((void *)v507 + 2);
                    int v515 = v46[2];
                    int v516 = v515;
                    do
                    {
                      if (v516)
                      {
                        unint64_t v517 = 0;
                        uint64_t v518 = v504[3];
                        uint64_t v519 = *((void *)v507 + 3);
                        int v520 = v46[3];
                        do
                        {
                          if (v520)
                          {
                            for (unint64_t k = 0; k < v520; ++k)
                            {
                              *(_DWORD *)(v503 + 4 * v498 + 4 * k) = *(_DWORD *)(v501 + 4 * v500) - v502[v499];
                              v500 += v518;
                              v499 += v519;
                              int v520 = v46[3];
                            }
                            uint64_t v522 = v520;
                            int v515 = v46[2];
                            v498 += k;
                          }
                          else
                          {
                            uint64_t v522 = 0;
                          }
                          uint64_t v500 = v500 + v513 - v522 * v518;
                          uint64_t v499 = v499 + v514 - v519 * v104[3];
                          ++v517;
                        }
                        while (v517 < v515);
                        uint64_t v523 = v515;
                        int v510 = v46[1];
                        int v516 = v515;
                      }
                      else
                      {
                        uint64_t v523 = 0;
                      }
                      uint64_t v500 = v500 + v506 - v523 * v513;
                      uint64_t v499 = v499 + v509 - v514 * v104[2];
                      ++v512;
                    }
                    while (v512 < v510);
                    uint64_t v524 = v510;
                    int v496 = *v46;
                    int v511 = v510;
                  }
                  else
                  {
                    uint64_t v524 = 0;
                  }
                  uint64_t v500 = v500 + v505 - v524 * v506;
                  uint64_t v499 = v499 + v508 - v509 * v104[1];
                  ++v497;
                }
                while (v497 < v496);
              }
              break;
            default:
              uint64_t v1595 = v44[6];
              uint64_t v1641 = v48;
              if (v1595)
              {
                uint64_t v445 = 0;
                uint64_t v1530 = v103[19];
                uint64_t v1550 = *(void *)(v45 + 152);
                uint64_t v1523 = v44[19];
                do
                {
                  uint64_t v446 = v1641;
                  if ((v1641 & 0x80000000) != 0)
                  {
                    LODWORD(v447) = 0;
                  }
                  else
                  {
                    uint64_t v447 = 0;
                    uint64_t v448 = *(void *)(v45 + 24);
                    int v449 = v445;
                    do
                    {
                      ldiv_t v450 = ldiv(v449, v46[v446]);
                      int v449 = v450.quot;
                      v447 += *(void *)(v448 + 8 * v446--) * v450.rem;
                    }
                    while (v446 != -1);
                  }
                  uint64_t v451 = 0;
                  if ((v106 & 0x80000000) == 0)
                  {
                    uint64_t v452 = v103[3];
                    uint64_t v453 = v106;
                    int v454 = v445;
                    do
                    {
                      ldiv_t v455 = ldiv(v454, v104[v453]);
                      int v454 = v455.quot;
                      v451 += *(void *)&v452[2 * v453--] * v455.rem;
                    }
                    while (v453 != -1);
                  }
                  *(_DWORD *)(v1523 + 4 * v445++) = *(_DWORD *)(v1550 + 4 * (int)v447) - v1530[(int)v451];
                }
                while (v445 != v1595);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v15)
      {
        case 0:
LABEL_9:
          char v7 = **(unsigned char **)(*a1 + 152) - **(unsigned char **)(*a2 + 152);
LABEL_10:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          goto LABEL_17;
        case 2:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          int v12 = **(char **)(*a2 + 152);
          goto LABEL_56;
        case 3:
          goto LABEL_18;
        default:
          ldiv_t v53 = *(void **)a3;
          uint64_t v54 = *a1;
          int v55 = *(int **)*a1;
          uint64_t v56 = (*(void *)(*a1 + 8) - (void)v55) >> 2;
          int v57 = v56 - 1;
          if ((int)v56 - 1 >= -1) {
            int v57 = -1;
          }
          int v58 = v57 + 1;
          int v59 = v56 + 1;
          break;
      }
      while (1)
      {
        unsigned int v60 = v59 - 2;
        if (v59 - 2 < 0) {
          break;
        }
        --v59;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v60) != *(void *)(v53[3] + 8 * v60)) {
          goto LABEL_99;
        }
      }
      int v59 = v58;
LABEL_99:
      uint64_t v111 = (int **)*a2;
      uint64_t v112 = *(int **)*a2;
      uint64_t v113 = (*(void *)(*a2 + 8) - (void)v112) >> 2;
      int v114 = v113 - 1;
      if ((int)v113 - 1 >= -1) {
        int v114 = -1;
      }
      int v115 = v114 + 1;
      int v116 = v113 + 1;
      while (1)
      {
        unsigned int v117 = v116 - 2;
        if (v116 - 2 < 0) {
          break;
        }
        --v116;
        if (*(void *)&v111[3][2 * v117] != *(void *)(v53[3] + 8 * v117)) {
          goto LABEL_145;
        }
      }
      int v116 = v115;
LABEL_145:
      int v148 = v56 + 1;
      while (1)
      {
        unsigned int v149 = v148 - 2;
        if (v148 - 2 < 0) {
          break;
        }
        --v148;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v149)) {
          goto LABEL_180;
        }
      }
      int v148 = v58;
LABEL_180:
      int v162 = v113 + 1;
      while (1)
      {
        int v163 = v162 - 2;
        if (v162 - 2 < 0) {
          break;
        }
        --v162;
        if (*(void *)&v111[3][2 * v163]) {
          goto LABEL_305;
        }
      }
      int v162 = v115;
LABEL_305:
      unint64_t v225 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v116) {
        int v226 = v116;
      }
      else {
        int v226 = v59;
      }
      if (v59 <= v162) {
        int v59 = v162;
      }
      if (v148 > v116) {
        int v116 = v148;
      }
      if (v225 > v116) {
        int v227 = 1;
      }
      else {
        int v227 = 4;
      }
      if (v225 <= v116) {
        int v116 = (uint64_t)(v53[1] - *v53) >> 2;
      }
      if (v225 <= v59) {
        int v59 = v116;
      }
      else {
        int v227 = 2;
      }
      if (v225 <= v226)
      {
        int v228 = v59;
      }
      else
      {
        int v227 = 3;
        int v228 = v226;
      }
      if (!v228) {
        goto LABEL_334;
      }
      unint64_t v229 = *(void *)(v53[3] + 8 * (v228 - 1));
      if (v229 < 0x10) {
        goto LABEL_334;
      }
      switch(v227)
      {
        case 1:
          if (v228 == 2)
          {
            int v1298 = *v55;
            if (*v55)
            {
              unint64_t v1671 = 0;
              uint64_t v1299 = 0;
              uint64_t v1300 = 0;
              uint64_t v1301 = *(void *)(v54 + 152);
              uint64_t v1302 = v111[19];
              vDSP_Length v1303 = (int)v229;
              ldiv_t v1304 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1305 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)((char *)v1302 + v1299), 1, &__B, (const float *)(v1301 + v1300), v1304, 1, v1303);
                    uint64_t v54 = *a1;
                    uint64_t v1306 = *(void **)(*a1 + 24);
                    uint64_t v1307 = v1306[1];
                    v1300 += v1307;
                    uint64_t v111 = (int **)*a2;
                    int v1308 = *(int **)(*a2 + 24);
                    uint64_t v1309 = *((void *)v1308 + 1);
                    v1299 += v1309;
                    ldiv_t v1304 = (float *)((char *)v1304 + v1303);
                    ++v1305;
                    int v55 = *(int **)*a1;
                    unint64_t v1310 = v55[1];
                  }
                  while (v1305 < v1310);
                  int v1298 = *v55;
                  uint64_t v112 = *v111;
                }
                else
                {
                  unint64_t v1310 = 0;
                  uint64_t v1306 = *(void **)(v54 + 24);
                  uint64_t v1307 = v1306[1];
                  int v1308 = v111[3];
                  uint64_t v1309 = *((void *)v1308 + 1);
                }
                uint64_t v1300 = *v1306 + v1300 - v1310 * v1307;
                uint64_t v1299 = *(void *)v1308 + v1299 - v1309 * v112[1];
                ++v1671;
              }
              while (v1671 < v1298);
            }
          }
          else if (v228 == 1)
          {
            if (*v55)
            {
              unint64_t v874 = 0;
              uint64_t v875 = 0;
              uint64_t v876 = 0;
              uint64_t v877 = *(void *)(v54 + 152);
              uint64_t v878 = v111[19];
              vDSP_Length v879 = (int)v229;
              uint64_t v880 = (float *)v53[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)((char *)v878 + v875), 1, &__B, (const float *)(v877 + v876), v880, 1, v879);
                v876 += **(void **)(*a1 + 24);
                v875 += **(void **)(*a2 + 24);
                uint64_t v880 = (float *)((char *)v880 + v879);
                ++v874;
              }
              while (v874 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            unint64_t v1311 = 0;
            char v1624 = v111[19];
            uint64_t v1672 = *(void *)(v54 + 152);
            vDSP_Length v1578 = (int)v229;
            uint64_t v1312 = (float *)v53[19];
            do
            {
              uint64_t v1313 = *(void *)*a1;
              unint64_t v1314 = (unint64_t)(*(void *)(*a1 + 8) - v1313) >> 2;
              uint64_t v1315 = 0;
              uint64_t v1316 = (v1314 - 1);
              if ((int)v1314 - 1 >= 0)
              {
                uint64_t v1317 = *(void *)(*a1 + 24);
                int v1318 = v1311;
                do
                {
                  ldiv_t v1319 = ldiv(v1318, *(int *)(v1313 + 4 * v1316));
                  int v1318 = v1319.quot;
                  v1315 += *(void *)(v1317 + 8 * v1316--) * v1319.rem;
                }
                while (v1316 != -1);
              }
              uint64_t v1320 = *(void *)*a2;
              unint64_t v1321 = (unint64_t)(*(void *)(*a2 + 8) - v1320) >> 2;
              uint64_t v1322 = 0;
              uint64_t v1323 = (v1321 - 1);
              if ((int)v1321 - 1 >= 0)
              {
                uint64_t v1324 = *(void *)(*a2 + 24);
                int v1325 = v1311;
                do
                {
                  ldiv_t v1326 = ldiv(v1325, *(int *)(v1320 + 4 * v1323));
                  int v1325 = v1326.quot;
                  v1322 += *(void *)(v1324 + 8 * v1323--) * v1326.rem;
                }
                while (v1323 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)((char *)v1624 + (int)v1322), 1, &__B, (const float *)(v1672 + (int)v1315), v1312, 1, v1578);
              uint64_t v1312 = (float *)((char *)v1312 + v1578);
              v1311 += v1578;
            }
            while (v1311 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v228 == 2)
          {
            int v1327 = *v55;
            if (*v55)
            {
              unint64_t v1328 = 0;
              uint64_t v1329 = 0;
              uint64_t v1330 = 0;
              uint64_t v1331 = *(void *)(v54 + 152);
              uint64_t v1332 = v111[19];
              vDSP_Length v1333 = (int)v229;
              uint64_t v1334 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1335 = 0;
                  do
                  {
                    float __B = (float)-*((char *)v1332 + v1329);
                    vDSP_vsadd((const float *)(v1331 + v1330), 1, &__B, v1334, 1, v1333);
                    uint64_t v54 = *a1;
                    uint64_t v1336 = *(void **)(*a1 + 24);
                    uint64_t v1337 = v1336[1];
                    v1330 += v1337;
                    uint64_t v111 = (int **)*a2;
                    int v1338 = *(int **)(*a2 + 24);
                    uint64_t v1339 = *((void *)v1338 + 1);
                    v1329 += v1339;
                    uint64_t v1334 = (float *)((char *)v1334 + v1333);
                    ++v1335;
                    int v55 = *(int **)*a1;
                    unint64_t v1340 = v55[1];
                  }
                  while (v1335 < v1340);
                  int v1327 = *v55;
                  uint64_t v112 = *v111;
                }
                else
                {
                  unint64_t v1340 = 0;
                  uint64_t v1336 = *(void **)(v54 + 24);
                  uint64_t v1337 = v1336[1];
                  int v1338 = v111[3];
                  uint64_t v1339 = *((void *)v1338 + 1);
                }
                uint64_t v1330 = *v1336 + v1330 - v1340 * v1337;
                uint64_t v1329 = *(void *)v1338 + v1329 - v1339 * v112[1];
                ++v1328;
              }
              while (v1328 < v1327);
            }
          }
          else if (v228 == 1)
          {
            if (*v55)
            {
              unint64_t v881 = 0;
              uint64_t v882 = 0;
              uint64_t v883 = 0;
              uint64_t v884 = *(void *)(v54 + 152);
              uint64_t v885 = v111[19];
              vDSP_Length v886 = (int)v229;
              uint64_t v887 = (float *)v53[19];
              do
              {
                float __B = (float)-*((char *)v885 + v882);
                vDSP_vsadd((const float *)(v884 + v883), 1, &__B, v887, 1, v886);
                v883 += **(void **)(*a1 + 24);
                v882 += **(void **)(*a2 + 24);
                uint64_t v887 = (float *)((char *)v887 + v886);
                ++v881;
              }
              while (v881 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            unint64_t v1341 = 0;
            unsigned int v1625 = v111[19];
            uint64_t v1673 = *(void *)(v54 + 152);
            vDSP_Length v1579 = (int)v229;
            uint64_t v1342 = (float *)v53[19];
            do
            {
              uint64_t v1343 = *(void *)*a1;
              unint64_t v1344 = (unint64_t)(*(void *)(*a1 + 8) - v1343) >> 2;
              uint64_t v1345 = 0;
              uint64_t v1346 = (v1344 - 1);
              if ((int)v1344 - 1 >= 0)
              {
                uint64_t v1347 = *(void *)(*a1 + 24);
                int v1348 = v1341;
                do
                {
                  ldiv_t v1349 = ldiv(v1348, *(int *)(v1343 + 4 * v1346));
                  int v1348 = v1349.quot;
                  v1345 += *(void *)(v1347 + 8 * v1346--) * v1349.rem;
                }
                while (v1346 != -1);
              }
              uint64_t v1350 = *(void *)*a2;
              unint64_t v1351 = (unint64_t)(*(void *)(*a2 + 8) - v1350) >> 2;
              uint64_t v1352 = 0;
              uint64_t v1353 = (v1351 - 1);
              if ((int)v1351 - 1 >= 0)
              {
                uint64_t v1354 = *(void *)(*a2 + 24);
                int v1355 = v1341;
                do
                {
                  ldiv_t v1356 = ldiv(v1355, *(int *)(v1350 + 4 * v1353));
                  int v1355 = v1356.quot;
                  v1352 += *(void *)(v1354 + 8 * v1353--) * v1356.rem;
                }
                while (v1353 != -1);
              }
              float __B = (float)-*((char *)v1625 + (int)v1352);
              vDSP_vsadd((const float *)(v1673 + (int)v1345), 1, &__B, v1342, 1, v1579);
              uint64_t v1342 = (float *)((char *)v1342 + v1579);
              v1341 += v1579;
            }
            while (v1341 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v228 == 2)
          {
            int v1020 = *v55;
            if (*v55)
            {
              unint64_t v1021 = 0;
              uint64_t v1022 = 0;
              uint64_t v1023 = 0;
              uint64_t v1024 = *(void *)(v54 + 152);
              uint64_t v1025 = v111[19];
              vDSP_Length v1026 = (int)v229;
              unsigned int v1027 = (float *)v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1028 = 0;
                  do
                  {
                    vDSP_vsub((const float *)((char *)v1025 + v1022), 1, (const float *)(v1024 + v1023), 1, v1027, 1, v1026);
                    uint64_t v54 = *a1;
                    unint64_t v1029 = *(void **)(*a1 + 24);
                    uint64_t v1030 = v1029[1];
                    v1023 += v1030;
                    uint64_t v111 = (int **)*a2;
                    uint64_t v1031 = *(int **)(*a2 + 24);
                    uint64_t v1032 = *((void *)v1031 + 1);
                    v1022 += v1032;
                    unsigned int v1027 = (float *)((char *)v1027 + v1026);
                    ++v1028;
                    int v55 = *(int **)*a1;
                    unint64_t v1033 = v55[1];
                  }
                  while (v1028 < v1033);
                  int v1020 = *v55;
                  uint64_t v112 = *v111;
                }
                else
                {
                  unint64_t v1033 = 0;
                  unint64_t v1029 = *(void **)(v54 + 24);
                  uint64_t v1030 = v1029[1];
                  uint64_t v1031 = v111[3];
                  uint64_t v1032 = *((void *)v1031 + 1);
                }
                uint64_t v1023 = *v1029 + v1023 - v1033 * v1030;
                uint64_t v1022 = *(void *)v1031 + v1022 - v1032 * v112[1];
                ++v1021;
              }
              while (v1021 < v1020);
            }
          }
          else if (v228 == 1)
          {
            if (*v55)
            {
              unint64_t v230 = 0;
              uint64_t v231 = 0;
              uint64_t v232 = 0;
              uint64_t v233 = *(void *)(v54 + 152);
              uint64_t v234 = v111[19];
              vDSP_Length v235 = (int)v229;
              int v236 = (float *)v53[19];
              do
              {
                vDSP_vsub((const float *)((char *)v234 + v231), 1, (const float *)(v233 + v232), 1, v236, 1, v235);
                v232 += **(void **)(*a1 + 24);
                v231 += **(void **)(*a2 + 24);
                int v236 = (float *)((char *)v236 + v235);
                ++v230;
              }
              while (v230 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            unint64_t v1034 = 0;
            unint64_t v1607 = v111[19];
            uint64_t v1653 = *(void *)(v54 + 152);
            vDSP_Length v1561 = (int)v229;
            uint64_t v1035 = (float *)v53[19];
            do
            {
              uint64_t v1036 = *(void *)*a1;
              unint64_t v1037 = (unint64_t)(*(void *)(*a1 + 8) - v1036) >> 2;
              uint64_t v1038 = 0;
              uint64_t v1039 = (v1037 - 1);
              if ((int)v1037 - 1 >= 0)
              {
                uint64_t v1040 = *(void *)(*a1 + 24);
                int v1041 = v1034;
                do
                {
                  ldiv_t v1042 = ldiv(v1041, *(int *)(v1036 + 4 * v1039));
                  int v1041 = v1042.quot;
                  v1038 += *(void *)(v1040 + 8 * v1039--) * v1042.rem;
                }
                while (v1039 != -1);
              }
              uint64_t v1043 = *(void *)*a2;
              unint64_t v1044 = (unint64_t)(*(void *)(*a2 + 8) - v1043) >> 2;
              uint64_t v1045 = 0;
              uint64_t v1046 = (v1044 - 1);
              if ((int)v1044 - 1 >= 0)
              {
                uint64_t v1047 = *(void *)(*a2 + 24);
                int v1048 = v1034;
                do
                {
                  ldiv_t v1049 = ldiv(v1048, *(int *)(v1043 + 4 * v1046));
                  int v1048 = v1049.quot;
                  v1045 += *(void *)(v1047 + 8 * v1046--) * v1049.rem;
                }
                while (v1046 != -1);
              }
              vDSP_vsub((const float *)((char *)v1607 + (int)v1045), 1, (const float *)(v1653 + (int)v1038), 1, v1035, 1, v1561);
              uint64_t v1035 = (float *)((char *)v1035 + v1561);
              v1034 += v1561;
            }
            while (v1034 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_334:
          switch(v225)
          {
            case 1uLL:
              if (v53[6])
              {
                unint64_t v237 = 0;
                uint64_t v238 = 0;
                uint64_t v239 = 0;
                uint64_t v240 = *(void *)(v54 + 152);
                uint64_t v241 = v111[19];
                uint64_t v242 = v53[19];
                do
                {
                  *(unsigned char *)(v242 + v237) = *(unsigned char *)(v240 + v239) - *((unsigned char *)v241 + v238);
                  v239 += **(void **)(*a1 + 24);
                  v238 += **(void **)(*a2 + 24);
                  ++v237;
                }
                while (v237 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v541 = *v55;
              if (*v55)
              {
                unint64_t v542 = 0;
                uint64_t v543 = 0;
                uint64_t v544 = 0;
                uint64_t v545 = 0;
                uint64_t v546 = *(void *)(v54 + 152);
                unint64_t v547 = v111[19];
                uint64_t v548 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v549 = 0;
                    do
                    {
                      *(unsigned char *)(v548 + v543 + v549) = *(unsigned char *)(v546 + v545) - *((unsigned char *)v547 + v544);
                      uint64_t v54 = *a1;
                      uint64_t v550 = *(void **)(*a1 + 24);
                      uint64_t v551 = v550[1];
                      v545 += v551;
                      uint64_t v111 = (int **)*a2;
                      ldiv_t v552 = *(int **)(*a2 + 24);
                      uint64_t v553 = *((void *)v552 + 1);
                      v544 += v553;
                      ++v549;
                      int v55 = *(int **)*a1;
                      unint64_t v554 = v55[1];
                    }
                    while (v549 < v554);
                    int v541 = *v55;
                    uint64_t v112 = *v111;
                    v543 += v549;
                  }
                  else
                  {
                    unint64_t v554 = 0;
                    uint64_t v550 = *(void **)(v54 + 24);
                    uint64_t v551 = v550[1];
                    ldiv_t v552 = v111[3];
                    uint64_t v553 = *((void *)v552 + 1);
                  }
                  uint64_t v545 = *v550 + v545 - v554 * v551;
                  uint64_t v544 = *(void *)v552 + v544 - v553 * v112[1];
                  ++v542;
                }
                while (v542 < v541);
              }
              break;
            case 3uLL:
              int v555 = *v55;
              if (*v55)
              {
                unint64_t v556 = 0;
                uint64_t v557 = 0;
                uint64_t v558 = 0;
                uint64_t v559 = 0;
                uint64_t v560 = *(void *)(v54 + 152);
                unint64_t v561 = v111[19];
                uint64_t v562 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v563 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v564 = 0;
                        do
                        {
                          *(unsigned char *)(v562 + v557 + v564) = *(unsigned char *)(v560 + v559) - *((unsigned char *)v561 + v558);
                          uint64_t v54 = *a1;
                          uint64_t v565 = *(void **)(*a1 + 24);
                          uint64_t v566 = v565[2];
                          v559 += v566;
                          uint64_t v111 = (int **)*a2;
                          int v567 = *(int **)(*a2 + 24);
                          uint64_t v568 = *((void *)v567 + 2);
                          v558 += v568;
                          ++v564;
                          int v55 = *(int **)*a1;
                          unint64_t v569 = v55[2];
                        }
                        while (v564 < v569);
                        uint64_t v112 = *v111;
                        v557 += v564;
                      }
                      else
                      {
                        unint64_t v569 = 0;
                        uint64_t v565 = *(void **)(v54 + 24);
                        uint64_t v566 = v565[2];
                        int v567 = v111[3];
                        uint64_t v568 = *((void *)v567 + 2);
                      }
                      uint64_t v570 = v565[1];
                      uint64_t v559 = v570 + v559 - v569 * v566;
                      uint64_t v558 = *((void *)v567 + 1) + v558 - v568 * v112[2];
                      ++v563;
                      unint64_t v571 = v55[1];
                    }
                    while (v563 < v571);
                    int v555 = *v55;
                  }
                  else
                  {
                    unint64_t v571 = 0;
                    uint64_t v565 = *(void **)(v54 + 24);
                    uint64_t v570 = v565[1];
                  }
                  uint64_t v559 = *v565 + v559 - v571 * v570;
                  uint64_t v558 = *(void *)v111[3] + v558 - *((void *)v111[3] + 1) * v112[1];
                  ++v556;
                }
                while (v556 < v555);
              }
              break;
            case 4uLL:
              int v572 = *v55;
              if (*v55)
              {
                unint64_t v573 = 0;
                uint64_t v574 = 0;
                uint64_t v575 = 0;
                uint64_t v576 = 0;
                uint64_t v577 = *(void *)(v54 + 152);
                uint64_t v578 = v111[19];
                uint64_t v579 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v580 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v581 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            unint64_t v582 = 0;
                            do
                            {
                              *(unsigned char *)(v579 + v574 + v582) = *(unsigned char *)(v577 + v576) - *((unsigned char *)v578 + v575);
                              uint64_t v54 = *a1;
                              unint64_t v583 = *(void **)(*a1 + 24);
                              uint64_t v584 = v583[3];
                              v576 += v584;
                              uint64_t v111 = (int **)*a2;
                              unint64_t v585 = *(int **)(*a2 + 24);
                              uint64_t v586 = *((void *)v585 + 3);
                              v575 += v586;
                              ++v582;
                              int v55 = *(int **)*a1;
                              unint64_t v587 = v55[3];
                            }
                            while (v582 < v587);
                            uint64_t v112 = *v111;
                            v574 += v582;
                          }
                          else
                          {
                            unint64_t v587 = 0;
                            unint64_t v583 = *(void **)(v54 + 24);
                            uint64_t v584 = v583[3];
                            unint64_t v585 = v111[3];
                            uint64_t v586 = *((void *)v585 + 3);
                          }
                          uint64_t v588 = v583[2];
                          uint64_t v576 = v588 + v576 - v587 * v584;
                          uint64_t v575 = *((void *)v585 + 2) + v575 - v586 * v112[3];
                          ++v581;
                          unint64_t v589 = v55[2];
                        }
                        while (v581 < v589);
                      }
                      else
                      {
                        unint64_t v589 = 0;
                        unint64_t v583 = *(void **)(v54 + 24);
                        uint64_t v588 = v583[2];
                      }
                      uint64_t v576 = v583[1] + v576 - v589 * v588;
                      uint64_t v575 = *((void *)v111[3] + 1) + v575 - *((void *)v111[3] + 2) * v112[2];
                      ++v580;
                      unint64_t v590 = v55[1];
                    }
                    while (v580 < v590);
                    int v572 = *v55;
                  }
                  else
                  {
                    unint64_t v590 = 0;
                  }
                  uint64_t v576 = **(void **)(v54 + 24) + v576 - *(void *)(*(void *)(v54 + 24) + 8) * v590;
                  uint64_t v575 = *(void *)v111[3] + v575 - *((void *)v111[3] + 1) * v112[1];
                  ++v573;
                }
                while (v573 < v572);
              }
              break;
            default:
              if (v53[6])
              {
                unint64_t v525 = 0;
                uint64_t v1596 = v111[19];
                uint64_t v1642 = *(void *)(v54 + 152);
                uint64_t v526 = v53[19];
                do
                {
                  uint64_t v527 = *(void *)*a1;
                  unint64_t v528 = (unint64_t)(*(void *)(*a1 + 8) - v527) >> 2;
                  uint64_t v529 = 0;
                  uint64_t v530 = (v528 - 1);
                  if ((int)v528 - 1 >= 0)
                  {
                    uint64_t v531 = *(void *)(*a1 + 24);
                    int v532 = v525;
                    do
                    {
                      ldiv_t v533 = ldiv(v532, *(int *)(v527 + 4 * v530));
                      int v532 = v533.quot;
                      v529 += *(void *)(v531 + 8 * v530--) * v533.rem;
                    }
                    while (v530 != -1);
                  }
                  uint64_t v534 = *(void *)*a2;
                  unint64_t v535 = (unint64_t)(*(void *)(*a2 + 8) - v534) >> 2;
                  uint64_t v536 = 0;
                  uint64_t v537 = (v535 - 1);
                  if ((int)v535 - 1 >= 0)
                  {
                    uint64_t v538 = *(void *)(*a2 + 24);
                    int v539 = v525;
                    do
                    {
                      ldiv_t v540 = ldiv(v539, *(int *)(v534 + 4 * v537));
                      int v539 = v540.quot;
                      v536 += *(void *)(v538 + 8 * v537--) * v540.rem;
                    }
                    while (v537 != -1);
                  }
                  *(unsigned char *)(v526 + v525++) = *(unsigned char *)(v1642 + (int)v529) - *((unsigned char *)v1596 + (int)v536);
                }
                while (v525 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v16)
      {
        case 0:
LABEL_12:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_17;
        case 2:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          int v12 = **(_DWORD **)(*a2 + 152);
LABEL_56:
          float v14 = (float)-v12;
          goto LABEL_57;
        case 3:
          goto LABEL_18;
        default:
          uint64_t v61 = *(void **)a3;
          uint64_t v62 = *a1;
          int v63 = *(int **)*a1;
          uint64_t v64 = (*(void *)(*a1 + 8) - (void)v63) >> 2;
          uint64_t v65 = (v64 - 1);
          if ((int)v65 >= -1) {
            int v66 = -1;
          }
          else {
            int v66 = v64 - 1;
          }
          int v67 = v66 + 1;
          int v68 = v64 + 1;
          break;
      }
      while (1)
      {
        unsigned int v69 = v68 - 2;
        if (v68 - 2 < 0) {
          break;
        }
        --v68;
        if (*(void *)(*(void *)(v62 + 24) + 8 * v69) != *(void *)(v61[3] + 8 * v69)) {
          goto LABEL_106;
        }
      }
      int v68 = v67;
LABEL_106:
      char v118 = (int **)*a2;
      uint64_t v119 = *(int **)*a2;
      uint64_t v120 = (*(void *)(*a2 + 8) - (void)v119) >> 2;
      uint64_t v121 = (v120 - 1);
      if ((int)v121 >= -1) {
        int v122 = -1;
      }
      else {
        int v122 = v120 - 1;
      }
      int v123 = v122 + 1;
      int v124 = v120 + 1;
      while (1)
      {
        unsigned int v125 = v124 - 2;
        if (v124 - 2 < 0) {
          break;
        }
        --v124;
        if (*(void *)&v118[3][2 * v125] != *(void *)(v61[3] + 8 * v125)) {
          goto LABEL_150;
        }
      }
      int v124 = v123;
LABEL_150:
      int v150 = v64 + 1;
      while (1)
      {
        unsigned int v151 = v150 - 2;
        if (v150 - 2 < 0) {
          break;
        }
        --v150;
        if (*(void *)(*(void *)(v62 + 24) + 8 * v151)) {
          goto LABEL_185;
        }
      }
      int v150 = v67;
LABEL_185:
      int v164 = v120 + 1;
      while (1)
      {
        int v165 = v164 - 2;
        if (v164 - 2 < 0) {
          break;
        }
        --v164;
        if (*(void *)&v118[3][2 * v165]) {
          goto LABEL_340;
        }
      }
      int v164 = v123;
LABEL_340:
      unint64_t v243 = (uint64_t)(v61[1] - *v61) >> 2;
      if (v68 <= v124) {
        int v244 = v124;
      }
      else {
        int v244 = v68;
      }
      if (v68 <= v164) {
        int v68 = v164;
      }
      if (v150 > v124) {
        int v124 = v150;
      }
      if (v243 > v124) {
        int v245 = 1;
      }
      else {
        int v245 = 4;
      }
      if (v243 <= v124) {
        int v124 = (uint64_t)(v61[1] - *v61) >> 2;
      }
      if (v243 <= v68) {
        int v68 = v124;
      }
      else {
        int v245 = 2;
      }
      if (v243 <= v244)
      {
        int v246 = v68;
      }
      else
      {
        int v245 = 3;
        int v246 = v244;
      }
      if (!v246) {
        goto LABEL_369;
      }
      unint64_t v247 = *(void *)(v61[3] + 8 * (v246 - 1));
      if (v247 < 0x10) {
        goto LABEL_369;
      }
      switch(v245)
      {
        case 1:
          if (v246 == 2)
          {
            int v1357 = *v63;
            if (*v63)
            {
              uint64_t v1358 = 0;
              uint64_t v1359 = 0;
              uint64_t v1674 = *(void *)(v62 + 152);
              int v1626 = v118[19];
              uint64_t v1360 = (float *)v61[19];
              unint64_t v1542 = 0;
              vDSP_Length v1580 = (int)v247;
              uint64_t v1361 = 4 * (int)v247;
              do
              {
                if (v63[1])
                {
                  unint64_t v1362 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)&v1626[v1358], 1, &__B, (const float *)(v1674 + 4 * v1359), v1360, 1, v1580);
                    uint64_t v62 = *a1;
                    uint64_t v1363 = *(void **)(*a1 + 24);
                    uint64_t v1364 = v1363[1];
                    v1359 += v1364;
                    char v118 = (int **)*a2;
                    uint64_t v1365 = *(int **)(*a2 + 24);
                    uint64_t v1366 = *((void *)v1365 + 1);
                    v1358 += v1366;
                    ++v1362;
                    int v63 = *(int **)*a1;
                    unint64_t v1367 = v63[1];
                    uint64_t v1360 = (float *)((char *)v1360 + v1361);
                  }
                  while (v1362 < v1367);
                  int v1357 = *v63;
                  uint64_t v119 = *v118;
                }
                else
                {
                  unint64_t v1367 = 0;
                  uint64_t v1363 = *(void **)(v62 + 24);
                  uint64_t v1364 = v1363[1];
                  uint64_t v1365 = v118[3];
                  uint64_t v1366 = *((void *)v1365 + 1);
                }
                uint64_t v1359 = *v1363 + v1359 - v1367 * v1364;
                uint64_t v1358 = *(void *)v1365 + v1358 - v1366 * v119[1];
                ++v1542;
              }
              while (v1542 < v1357);
            }
          }
          else if (v246 == 1)
          {
            if (*v63)
            {
              unint64_t v888 = 0;
              uint64_t v889 = 0;
              uint64_t v890 = 0;
              uint64_t v891 = *(void *)(v62 + 152);
              uint64_t v892 = v118[19];
              vDSP_Length v893 = (int)v247;
              uint64_t v894 = 4 * (int)v247;
              unint64_t v895 = (float *)v61[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)&v892[v889], 1, &__B, (const float *)(v891 + 4 * v890), v895, 1, v893);
                v890 += **(void **)(*a1 + 24);
                v889 += **(void **)(*a2 + 24);
                ++v888;
                unint64_t v895 = (float *)((char *)v895 + v894);
              }
              while (v888 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            unint64_t v1368 = 0;
            unint64_t v1627 = v118[19];
            uint64_t v1675 = *(void *)(v62 + 152);
            vDSP_Length v1581 = (int)v247;
            uint64_t v1369 = (float *)v61[19];
            do
            {
              uint64_t v1370 = *(void *)*a1;
              unint64_t v1371 = (unint64_t)(*(void *)(*a1 + 8) - v1370) >> 2;
              uint64_t v1372 = 0;
              uint64_t v1373 = (v1371 - 1);
              if ((int)v1371 - 1 >= 0)
              {
                uint64_t v1374 = *(void *)(*a1 + 24);
                int v1375 = v1368;
                do
                {
                  ldiv_t v1376 = ldiv(v1375, *(int *)(v1370 + 4 * v1373));
                  int v1375 = v1376.quot;
                  v1372 += *(void *)(v1374 + 8 * v1373--) * v1376.rem;
                }
                while (v1373 != -1);
              }
              uint64_t v1377 = *(void *)*a2;
              unint64_t v1378 = (unint64_t)(*(void *)(*a2 + 8) - v1377) >> 2;
              uint64_t v1379 = 0;
              uint64_t v1380 = (v1378 - 1);
              if ((int)v1378 - 1 >= 0)
              {
                uint64_t v1381 = *(void *)(*a2 + 24);
                int v1382 = v1368;
                do
                {
                  ldiv_t v1383 = ldiv(v1382, *(int *)(v1377 + 4 * v1380));
                  int v1382 = v1383.quot;
                  v1379 += *(void *)(v1381 + 8 * v1380--) * v1383.rem;
                }
                while (v1380 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)&v1627[(int)v1379], 1, &__B, (const float *)(v1675 + 4 * (int)v1372), v1369, 1, v1581);
              v1369 += v1581;
              v1368 += v1581;
            }
            while (v1368 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v246 == 2)
          {
            int v1384 = *v63;
            if (*v63)
            {
              uint64_t v1385 = 0;
              uint64_t v1386 = 0;
              uint64_t v1676 = *(void *)(v62 + 152);
              uint64_t v1628 = v118[19];
              uint64_t v1387 = (float *)v61[19];
              unint64_t v1543 = 0;
              vDSP_Length v1582 = (int)v247;
              uint64_t v1388 = 4 * (int)v247;
              do
              {
                if (v63[1])
                {
                  unint64_t v1389 = 0;
                  do
                  {
                    float __B = (float)-v1628[v1385];
                    vDSP_vsadd((const float *)(v1676 + 4 * v1386), 1, &__B, v1387, 1, v1582);
                    uint64_t v62 = *a1;
                    uint64_t v1390 = *(void **)(*a1 + 24);
                    uint64_t v1391 = v1390[1];
                    v1386 += v1391;
                    char v118 = (int **)*a2;
                    uint64_t v1392 = *(int **)(*a2 + 24);
                    uint64_t v1393 = *((void *)v1392 + 1);
                    v1385 += v1393;
                    ++v1389;
                    int v63 = *(int **)*a1;
                    unint64_t v1394 = v63[1];
                    uint64_t v1387 = (float *)((char *)v1387 + v1388);
                  }
                  while (v1389 < v1394);
                  int v1384 = *v63;
                  uint64_t v119 = *v118;
                }
                else
                {
                  unint64_t v1394 = 0;
                  uint64_t v1390 = *(void **)(v62 + 24);
                  uint64_t v1391 = v1390[1];
                  uint64_t v1392 = v118[3];
                  uint64_t v1393 = *((void *)v1392 + 1);
                }
                uint64_t v1386 = *v1390 + v1386 - v1394 * v1391;
                uint64_t v1385 = *(void *)v1392 + v1385 - v1393 * v119[1];
                ++v1543;
              }
              while (v1543 < v1384);
            }
          }
          else if (v246 == 1)
          {
            if (*v63)
            {
              unint64_t v896 = 0;
              uint64_t v897 = 0;
              uint64_t v898 = 0;
              uint64_t v899 = *(void *)(v62 + 152);
              uint64_t v900 = v118[19];
              vDSP_Length v901 = (int)v247;
              uint64_t v902 = 4 * (int)v247;
              uint64_t v903 = (float *)v61[19];
              do
              {
                float __B = (float)-v900[v897];
                vDSP_vsadd((const float *)(v899 + 4 * v898), 1, &__B, v903, 1, v901);
                v898 += **(void **)(*a1 + 24);
                v897 += **(void **)(*a2 + 24);
                ++v896;
                uint64_t v903 = (float *)((char *)v903 + v902);
              }
              while (v896 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            unint64_t v1395 = 0;
            uint64_t v1629 = v118[19];
            uint64_t v1677 = *(void *)(v62 + 152);
            vDSP_Length v1583 = (int)v247;
            uint64_t v1396 = (float *)v61[19];
            do
            {
              uint64_t v1397 = *(void *)*a1;
              unint64_t v1398 = (unint64_t)(*(void *)(*a1 + 8) - v1397) >> 2;
              uint64_t v1399 = 0;
              uint64_t v1400 = (v1398 - 1);
              if ((int)v1398 - 1 >= 0)
              {
                uint64_t v1401 = *(void *)(*a1 + 24);
                int v1402 = v1395;
                do
                {
                  ldiv_t v1403 = ldiv(v1402, *(int *)(v1397 + 4 * v1400));
                  int v1402 = v1403.quot;
                  v1399 += *(void *)(v1401 + 8 * v1400--) * v1403.rem;
                }
                while (v1400 != -1);
              }
              uint64_t v1404 = *(void *)*a2;
              unint64_t v1405 = (unint64_t)(*(void *)(*a2 + 8) - v1404) >> 2;
              uint64_t v1406 = 0;
              uint64_t v1407 = (v1405 - 1);
              if ((int)v1405 - 1 >= 0)
              {
                uint64_t v1408 = *(void *)(*a2 + 24);
                int v1409 = v1395;
                do
                {
                  ldiv_t v1410 = ldiv(v1409, *(int *)(v1404 + 4 * v1407));
                  int v1409 = v1410.quot;
                  v1406 += *(void *)(v1408 + 8 * v1407--) * v1410.rem;
                }
                while (v1407 != -1);
              }
              float __B = (float)-v1629[(int)v1406];
              vDSP_vsadd((const float *)(v1677 + 4 * (int)v1399), 1, &__B, v1396, 1, v1583);
              v1396 += v1583;
              v1395 += v1583;
            }
            while (v1395 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v246 == 2)
          {
            int v1050 = *v63;
            if (*v63)
            {
              uint64_t v1051 = 0;
              uint64_t v1052 = 0;
              uint64_t v1654 = *(void *)(v62 + 152);
              uint64_t v1608 = v118[19];
              uint64_t v1053 = (float *)v61[19];
              unint64_t v1537 = 0;
              vDSP_Length v1562 = (int)v247;
              uint64_t v1054 = 4 * (int)v247;
              do
              {
                if (v63[1])
                {
                  unint64_t v1055 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1608[v1051], 1, (const float *)(v1654 + 4 * v1052), 1, v1053, 1, v1562);
                    uint64_t v62 = *a1;
                    uint64_t v1056 = *(void **)(*a1 + 24);
                    uint64_t v1057 = v1056[1];
                    v1052 += v1057;
                    char v118 = (int **)*a2;
                    int v1058 = *(int **)(*a2 + 24);
                    uint64_t v1059 = *((void *)v1058 + 1);
                    v1051 += v1059;
                    ++v1055;
                    int v63 = *(int **)*a1;
                    unint64_t v1060 = v63[1];
                    uint64_t v1053 = (float *)((char *)v1053 + v1054);
                  }
                  while (v1055 < v1060);
                  int v1050 = *v63;
                  uint64_t v119 = *v118;
                }
                else
                {
                  unint64_t v1060 = 0;
                  uint64_t v1056 = *(void **)(v62 + 24);
                  uint64_t v1057 = v1056[1];
                  int v1058 = v118[3];
                  uint64_t v1059 = *((void *)v1058 + 1);
                }
                uint64_t v1052 = *v1056 + v1052 - v1060 * v1057;
                uint64_t v1051 = *(void *)v1058 + v1051 - v1059 * v119[1];
                ++v1537;
              }
              while (v1537 < v1050);
            }
          }
          else if (v246 == 1)
          {
            if (*v63)
            {
              unint64_t v248 = 0;
              uint64_t v249 = 0;
              uint64_t v250 = 0;
              uint64_t v251 = *(void *)(v62 + 152);
              int v252 = v118[19];
              vDSP_Length v253 = (int)v247;
              uint64_t v254 = 4 * (int)v247;
              uint64_t v255 = (float *)v61[19];
              do
              {
                vDSP_vsub((const float *)&v252[v249], 1, (const float *)(v251 + 4 * v250), 1, v255, 1, v253);
                v250 += **(void **)(*a1 + 24);
                v249 += **(void **)(*a2 + 24);
                ++v248;
                uint64_t v255 = (float *)((char *)v255 + v254);
              }
              while (v248 < **(int **)*a1);
            }
          }
          else if (v61[6])
          {
            unint64_t v1061 = 0;
            uint64_t v1609 = v118[19];
            uint64_t v1655 = *(void *)(v62 + 152);
            vDSP_Length v1563 = (int)v247;
            uint64_t v1062 = (float *)v61[19];
            do
            {
              uint64_t v1063 = *(void *)*a1;
              unint64_t v1064 = (unint64_t)(*(void *)(*a1 + 8) - v1063) >> 2;
              uint64_t v1065 = 0;
              uint64_t v1066 = (v1064 - 1);
              if ((int)v1064 - 1 >= 0)
              {
                uint64_t v1067 = *(void *)(*a1 + 24);
                int v1068 = v1061;
                do
                {
                  ldiv_t v1069 = ldiv(v1068, *(int *)(v1063 + 4 * v1066));
                  int v1068 = v1069.quot;
                  v1065 += *(void *)(v1067 + 8 * v1066--) * v1069.rem;
                }
                while (v1066 != -1);
              }
              uint64_t v1070 = *(void *)*a2;
              unint64_t v1071 = (unint64_t)(*(void *)(*a2 + 8) - v1070) >> 2;
              uint64_t v1072 = 0;
              uint64_t v1073 = (v1071 - 1);
              if ((int)v1071 - 1 >= 0)
              {
                uint64_t v1074 = *(void *)(*a2 + 24);
                int v1075 = v1061;
                do
                {
                  ldiv_t v1076 = ldiv(v1075, *(int *)(v1070 + 4 * v1073));
                  int v1075 = v1076.quot;
                  v1072 += *(void *)(v1074 + 8 * v1073--) * v1076.rem;
                }
                while (v1073 != -1);
              }
              vDSP_vsub((const float *)&v1609[(int)v1072], 1, (const float *)(v1655 + 4 * (int)v1065), 1, v1062, 1, v1563);
              v1062 += v1563;
              v1061 += v1563;
            }
            while (v1061 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_369:
          switch(v243)
          {
            case 1uLL:
              uint64_t v256 = v61[6];
              if (v256)
              {
                uint64_t v257 = *(_DWORD **)(v62 + 152);
                int v258 = v118[19];
                int v259 = (_DWORD *)v61[19];
                uint64_t v260 = 4 * *(void *)v118[3];
                uint64_t v261 = 4 * **(void **)(v62 + 24);
                do
                {
                  *v259++ = *v257 - *v258;
                  int v258 = (int *)((char *)v258 + v260);
                  uint64_t v257 = (_DWORD *)((char *)v257 + v261);
                  --v256;
                }
                while (v256);
              }
              break;
            case 2uLL:
              int v602 = *v63;
              if (*v63)
              {
                unint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = 0;
                uint64_t v606 = 0;
                uint64_t v607 = *(void *)(v62 + 152);
                int v608 = v118[19];
                uint64_t v609 = v61[19];
                uint64_t v610 = *(uint64_t **)(v62 + 24);
                uint64_t v611 = *v610;
                uint64_t v612 = v610[1];
                int v613 = v118[3];
                uint64_t v615 = *(void *)v613;
                uint64_t v614 = *((void *)v613 + 1);
                int v616 = v63[1];
                do
                {
                  if (v616)
                  {
                    for (unint64_t m = 0; m < v616; ++m)
                    {
                      *(_DWORD *)(v609 + 4 * v604 + 4 * m) = *(_DWORD *)(v607 + 4 * v606) - v608[v605];
                      v606 += v612;
                      v605 += v614;
                      int v616 = v63[1];
                    }
                    uint64_t v618 = v616;
                    int v602 = *v63;
                    v604 += m;
                  }
                  else
                  {
                    uint64_t v618 = 0;
                  }
                  uint64_t v606 = v606 + v611 - v618 * v612;
                  uint64_t v605 = v605 + v615 - v614 * v119[1];
                  ++v603;
                }
                while (v603 < v602);
              }
              break;
            case 3uLL:
              int v619 = *v63;
              if (*v63)
              {
                unint64_t v620 = 0;
                uint64_t v621 = 0;
                uint64_t v622 = 0;
                uint64_t v623 = 0;
                uint64_t v624 = *(void *)(v62 + 152);
                uint64_t v625 = v118[19];
                uint64_t v626 = v61[19];
                uint64_t v627 = *(uint64_t **)(v62 + 24);
                uint64_t v628 = *v627;
                uint64_t v629 = v627[1];
                uint64_t v630 = v118[3];
                uint64_t v631 = *(void *)v630;
                uint64_t v632 = *((void *)v630 + 1);
                int v633 = v63[1];
                int v634 = v633;
                do
                {
                  if (v634)
                  {
                    unint64_t v635 = 0;
                    uint64_t v636 = v627[2];
                    uint64_t v637 = *((void *)v630 + 2);
                    int v638 = v63[2];
                    do
                    {
                      if (v638)
                      {
                        for (unint64_t n = 0; n < v638; ++n)
                        {
                          *(_DWORD *)(v626 + 4 * v621 + 4 * n) = *(_DWORD *)(v624 + 4 * v623) - v625[v622];
                          v623 += v636;
                          v622 += v637;
                          int v638 = v63[2];
                        }
                        uint64_t v640 = v638;
                        int v633 = v63[1];
                        v621 += n;
                      }
                      else
                      {
                        uint64_t v640 = 0;
                      }
                      uint64_t v623 = v623 + v629 - v640 * v636;
                      uint64_t v622 = v622 + v632 - v637 * v119[2];
                      ++v635;
                    }
                    while (v635 < v633);
                    uint64_t v641 = v633;
                    int v619 = *v63;
                    int v634 = v633;
                  }
                  else
                  {
                    uint64_t v641 = 0;
                  }
                  uint64_t v623 = v623 + v628 - v641 * v629;
                  uint64_t v622 = v622 + v631 - v632 * v119[1];
                  ++v620;
                }
                while (v620 < v619);
              }
              break;
            case 4uLL:
              int v642 = *v63;
              if (*v63)
              {
                unint64_t v643 = 0;
                uint64_t v644 = 0;
                uint64_t v645 = 0;
                uint64_t v646 = 0;
                uint64_t v647 = *(void *)(v62 + 152);
                unint64_t v648 = v118[19];
                uint64_t v649 = v61[19];
                uint64_t v650 = *(uint64_t **)(v62 + 24);
                uint64_t v651 = *v650;
                uint64_t v652 = v650[1];
                uint64_t v653 = v118[3];
                uint64_t v654 = *(void *)v653;
                uint64_t v655 = *((void *)v653 + 1);
                int v656 = v63[1];
                int v657 = v656;
                do
                {
                  if (v657)
                  {
                    unint64_t v658 = 0;
                    uint64_t v659 = v650[2];
                    uint64_t v660 = *((void *)v653 + 2);
                    int v661 = v63[2];
                    int v662 = v661;
                    do
                    {
                      if (v662)
                      {
                        unint64_t v663 = 0;
                        uint64_t v664 = v650[3];
                        uint64_t v665 = *((void *)v653 + 3);
                        int v666 = v63[3];
                        do
                        {
                          if (v666)
                          {
                            for (iunint64_t i = 0; ii < v666; ++ii)
                            {
                              *(_DWORD *)(v649 + 4 * v644 + 4 * ii) = *(_DWORD *)(v647 + 4 * v646) - v648[v645];
                              v646 += v664;
                              v645 += v665;
                              int v666 = v63[3];
                            }
                            uint64_t v668 = v666;
                            int v661 = v63[2];
                            v644 += ii;
                          }
                          else
                          {
                            uint64_t v668 = 0;
                          }
                          uint64_t v646 = v646 + v659 - v668 * v664;
                          uint64_t v645 = v645 + v660 - v665 * v119[3];
                          ++v663;
                        }
                        while (v663 < v661);
                        uint64_t v669 = v661;
                        int v656 = v63[1];
                        int v662 = v661;
                      }
                      else
                      {
                        uint64_t v669 = 0;
                      }
                      uint64_t v646 = v646 + v652 - v669 * v659;
                      uint64_t v645 = v645 + v655 - v660 * v119[2];
                      ++v658;
                    }
                    while (v658 < v656);
                    uint64_t v670 = v656;
                    int v642 = *v63;
                    int v657 = v656;
                  }
                  else
                  {
                    uint64_t v670 = 0;
                  }
                  uint64_t v646 = v646 + v651 - v670 * v652;
                  uint64_t v645 = v645 + v654 - v655 * v119[1];
                  ++v643;
                }
                while (v643 < v642);
              }
              break;
            default:
              uint64_t v1597 = v61[6];
              uint64_t v1643 = v65;
              if (v1597)
              {
                uint64_t v591 = 0;
                uint64_t v1531 = v118[19];
                uint64_t v1551 = *(void *)(v62 + 152);
                uint64_t v1524 = v61[19];
                do
                {
                  uint64_t v592 = v1643;
                  if ((v1643 & 0x80000000) != 0)
                  {
                    LODWORD(v593) = 0;
                  }
                  else
                  {
                    uint64_t v593 = 0;
                    uint64_t v594 = *(void *)(v62 + 24);
                    int v595 = v591;
                    do
                    {
                      ldiv_t v596 = ldiv(v595, v63[v592]);
                      int v595 = v596.quot;
                      v593 += *(void *)(v594 + 8 * v592--) * v596.rem;
                    }
                    while (v592 != -1);
                  }
                  uint64_t v597 = 0;
                  if ((v121 & 0x80000000) == 0)
                  {
                    uint64_t v598 = v118[3];
                    uint64_t v599 = v121;
                    int v600 = v591;
                    do
                    {
                      ldiv_t v601 = ldiv(v600, v119[v599]);
                      int v600 = v601.quot;
                      v597 += *(void *)&v598[2 * v599--] * v601.rem;
                    }
                    while (v599 != -1);
                  }
                  *(_DWORD *)(v1524 + 4 * v591++) = *(_DWORD *)(v1551 + 4 * (int)v593) - v1531[(int)v597];
                }
                while (v591 != v1597);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v17)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) - **(void **)(*a2 + 152);
          return;
        case 1:
          goto LABEL_17;
        case 2:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          float v14 = (float)(uint64_t)-**(void **)(*a2 + 152);
          goto LABEL_57;
        case 3:
          goto LABEL_18;
        default:
          unint64_t v70 = *(void **)a3;
          uint64_t v71 = *a1;
          uint64_t v72 = *(int **)*a1;
          uint64_t v73 = (*(void *)(*a1 + 8) - (void)v72) >> 2;
          uint64_t v74 = (v73 - 1);
          if ((int)v74 >= -1) {
            int v75 = -1;
          }
          else {
            int v75 = v73 - 1;
          }
          int v76 = v75 + 1;
          int v77 = v73 + 1;
          break;
      }
      while (1)
      {
        unsigned int v78 = v77 - 2;
        if (v77 - 2 < 0) {
          break;
        }
        --v77;
        if (*(void *)(*(void *)(v71 + 24) + 8 * v78) != *(void *)(v70[3] + 8 * v78)) {
          goto LABEL_114;
        }
      }
      int v77 = v76;
LABEL_114:
      uint64_t v126 = (int **)*a2;
      unsigned int v127 = *(int **)*a2;
      uint64_t v128 = (*(void *)(*a2 + 8) - (void)v127) >> 2;
      uint64_t v129 = (v128 - 1);
      if ((int)v129 >= -1) {
        int v130 = -1;
      }
      else {
        int v130 = v128 - 1;
      }
      int v131 = v130 + 1;
      int v132 = v128 + 1;
      while (1)
      {
        unsigned int v133 = v132 - 2;
        if (v132 - 2 < 0) {
          break;
        }
        --v132;
        if (*(void *)&v126[3][2 * v133] != *(void *)(v70[3] + 8 * v133)) {
          goto LABEL_155;
        }
      }
      int v132 = v131;
LABEL_155:
      int v152 = v73 + 1;
      while (1)
      {
        unsigned int v153 = v152 - 2;
        if (v152 - 2 < 0) {
          break;
        }
        --v152;
        if (*(void *)(*(void *)(v71 + 24) + 8 * v153)) {
          goto LABEL_190;
        }
      }
      int v152 = v76;
LABEL_190:
      int v166 = v128 + 1;
      while (1)
      {
        int v167 = v166 - 2;
        if (v166 - 2 < 0) {
          break;
        }
        --v166;
        if (*(void *)&v126[3][2 * v167]) {
          goto LABEL_375;
        }
      }
      int v166 = v131;
LABEL_375:
      unint64_t v262 = (uint64_t)(v70[1] - *v70) >> 2;
      if (v77 <= v132) {
        int v263 = v132;
      }
      else {
        int v263 = v77;
      }
      if (v77 <= v166) {
        int v77 = v166;
      }
      if (v152 > v132) {
        int v132 = v152;
      }
      if (v262 > v132) {
        int v264 = 1;
      }
      else {
        int v264 = 4;
      }
      if (v262 <= v132) {
        int v132 = (uint64_t)(v70[1] - *v70) >> 2;
      }
      if (v262 <= v77) {
        int v77 = v132;
      }
      else {
        int v264 = 2;
      }
      if (v262 <= v263)
      {
        int v265 = v77;
      }
      else
      {
        int v264 = 3;
        int v265 = v263;
      }
      if (!v265) {
        goto LABEL_404;
      }
      unint64_t v266 = *(void *)(v70[3] + 8 * (v265 - 1));
      if (v266 < 0x10) {
        goto LABEL_404;
      }
      switch(v264)
      {
        case 1:
          if (v265 == 2)
          {
            int v1411 = *v72;
            if (*v72)
            {
              uint64_t v1412 = 0;
              uint64_t v1413 = 0;
              uint64_t v1678 = *(void *)(v71 + 152);
              uint64_t v1630 = v126[19];
              int v1414 = (float *)v70[19];
              unint64_t v1544 = 0;
              vDSP_Length v1584 = (int)v266;
              uint64_t v1415 = 8 * (int)v266;
              do
              {
                if (v72[1])
                {
                  unint64_t v1416 = 0;
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)&v1630[2 * v1412], 1, &__B, (const float *)(v1678 + 8 * v1413), v1414, 1, v1584);
                    uint64_t v71 = *a1;
                    int v1417 = *(void **)(*a1 + 24);
                    uint64_t v1418 = v1417[1];
                    v1413 += v1418;
                    uint64_t v126 = (int **)*a2;
                    BOOL v1419 = *(int **)(*a2 + 24);
                    uint64_t v1420 = *((void *)v1419 + 1);
                    v1412 += v1420;
                    ++v1416;
                    uint64_t v72 = *(int **)*a1;
                    unint64_t v1421 = v72[1];
                    int v1414 = (float *)((char *)v1414 + v1415);
                  }
                  while (v1416 < v1421);
                  int v1411 = *v72;
                  unsigned int v127 = *v126;
                }
                else
                {
                  unint64_t v1421 = 0;
                  int v1417 = *(void **)(v71 + 24);
                  uint64_t v1418 = v1417[1];
                  BOOL v1419 = v126[3];
                  uint64_t v1420 = *((void *)v1419 + 1);
                }
                uint64_t v1413 = *v1417 + v1413 - v1421 * v1418;
                uint64_t v1412 = *(void *)v1419 + v1412 - v1420 * v127[1];
                ++v1544;
              }
              while (v1544 < v1411);
            }
          }
          else if (v265 == 1)
          {
            if (*v72)
            {
              unint64_t v904 = 0;
              uint64_t v905 = 0;
              uint64_t v906 = 0;
              uint64_t v907 = *(void *)(v71 + 152);
              uint64_t v908 = v126[19];
              vDSP_Length v909 = (int)v266;
              uint64_t v910 = 8 * (int)v266;
              uint64_t v911 = (float *)v70[19];
              do
              {
                float __B = -1.0;
                vDSP_vsmsa((const float *)&v908[2 * v905], 1, &__B, (const float *)(v907 + 8 * v906), v911, 1, v909);
                v906 += **(void **)(*a1 + 24);
                v905 += **(void **)(*a2 + 24);
                ++v904;
                uint64_t v911 = (float *)((char *)v911 + v910);
              }
              while (v904 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            unint64_t v1422 = 0;
            uint64_t v1631 = v126[19];
            uint64_t v1679 = *(void *)(v71 + 152);
            vDSP_Length v1585 = (int)v266;
            uint64_t v1423 = (float *)v70[19];
            do
            {
              uint64_t v1424 = *(void *)*a1;
              unint64_t v1425 = (unint64_t)(*(void *)(*a1 + 8) - v1424) >> 2;
              uint64_t v1426 = 0;
              uint64_t v1427 = (v1425 - 1);
              if ((int)v1425 - 1 >= 0)
              {
                uint64_t v1428 = *(void *)(*a1 + 24);
                int v1429 = v1422;
                do
                {
                  ldiv_t v1430 = ldiv(v1429, *(int *)(v1424 + 4 * v1427));
                  int v1429 = v1430.quot;
                  v1426 += *(void *)(v1428 + 8 * v1427--) * v1430.rem;
                }
                while (v1427 != -1);
              }
              uint64_t v1431 = *(void *)*a2;
              unint64_t v1432 = (unint64_t)(*(void *)(*a2 + 8) - v1431) >> 2;
              uint64_t v1433 = 0;
              uint64_t v1434 = (v1432 - 1);
              if ((int)v1432 - 1 >= 0)
              {
                uint64_t v1435 = *(void *)(*a2 + 24);
                int v1436 = v1422;
                do
                {
                  ldiv_t v1437 = ldiv(v1436, *(int *)(v1431 + 4 * v1434));
                  int v1436 = v1437.quot;
                  v1433 += *(void *)(v1435 + 8 * v1434--) * v1437.rem;
                }
                while (v1434 != -1);
              }
              float __B = -1.0;
              vDSP_vsmsa((const float *)&v1631[2 * (int)v1433], 1, &__B, (const float *)(v1679 + 8 * (int)v1426), v1423, 1, v1585);
              v1423 += 2 * v1585;
              v1422 += v1585;
            }
            while (v1422 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 2:
          if (v265 == 2)
          {
            int v1438 = *v72;
            if (*v72)
            {
              uint64_t v1439 = 0;
              uint64_t v1440 = 0;
              uint64_t v1680 = *(void *)(v71 + 152);
              uint64_t v1632 = v126[19];
              int v1441 = (float *)v70[19];
              unint64_t v1545 = 0;
              vDSP_Length v1586 = (int)v266;
              uint64_t v1442 = 8 * (int)v266;
              do
              {
                if (v72[1])
                {
                  unint64_t v1443 = 0;
                  do
                  {
                    float __B = (float)(uint64_t)-*(void *)&v1632[2 * v1439];
                    vDSP_vsadd((const float *)(v1680 + 8 * v1440), 1, &__B, v1441, 1, v1586);
                    uint64_t v71 = *a1;
                    char v1444 = *(void **)(*a1 + 24);
                    uint64_t v1445 = v1444[1];
                    v1440 += v1445;
                    uint64_t v126 = (int **)*a2;
                    uint64_t v1446 = *(int **)(*a2 + 24);
                    uint64_t v1447 = *((void *)v1446 + 1);
                    v1439 += v1447;
                    ++v1443;
                    uint64_t v72 = *(int **)*a1;
                    unint64_t v1448 = v72[1];
                    int v1441 = (float *)((char *)v1441 + v1442);
                  }
                  while (v1443 < v1448);
                  int v1438 = *v72;
                  unsigned int v127 = *v126;
                }
                else
                {
                  unint64_t v1448 = 0;
                  char v1444 = *(void **)(v71 + 24);
                  uint64_t v1445 = v1444[1];
                  uint64_t v1446 = v126[3];
                  uint64_t v1447 = *((void *)v1446 + 1);
                }
                uint64_t v1440 = *v1444 + v1440 - v1448 * v1445;
                uint64_t v1439 = *(void *)v1446 + v1439 - v1447 * v127[1];
                ++v1545;
              }
              while (v1545 < v1438);
            }
          }
          else if (v265 == 1)
          {
            if (*v72)
            {
              unint64_t v912 = 0;
              uint64_t v913 = 0;
              uint64_t v914 = 0;
              uint64_t v915 = *(void *)(v71 + 152);
              int v916 = v126[19];
              vDSP_Length v917 = (int)v266;
              uint64_t v918 = 8 * (int)v266;
              uint64_t v919 = (float *)v70[19];
              do
              {
                float __B = (float)(uint64_t)-*(void *)&v916[2 * v913];
                vDSP_vsadd((const float *)(v915 + 8 * v914), 1, &__B, v919, 1, v917);
                v914 += **(void **)(*a1 + 24);
                v913 += **(void **)(*a2 + 24);
                ++v912;
                uint64_t v919 = (float *)((char *)v919 + v918);
              }
              while (v912 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            unint64_t v1449 = 0;
            unint64_t v1633 = v126[19];
            uint64_t v1681 = *(void *)(v71 + 152);
            vDSP_Length v1587 = (int)v266;
            uint64_t v1450 = (float *)v70[19];
            do
            {
              uint64_t v1451 = *(void *)*a1;
              unint64_t v1452 = (unint64_t)(*(void *)(*a1 + 8) - v1451) >> 2;
              uint64_t v1453 = 0;
              uint64_t v1454 = (v1452 - 1);
              if ((int)v1452 - 1 >= 0)
              {
                uint64_t v1455 = *(void *)(*a1 + 24);
                int v1456 = v1449;
                do
                {
                  ldiv_t v1457 = ldiv(v1456, *(int *)(v1451 + 4 * v1454));
                  int v1456 = v1457.quot;
                  v1453 += *(void *)(v1455 + 8 * v1454--) * v1457.rem;
                }
                while (v1454 != -1);
              }
              uint64_t v1458 = *(void *)*a2;
              unint64_t v1459 = (unint64_t)(*(void *)(*a2 + 8) - v1458) >> 2;
              uint64_t v1460 = 0;
              uint64_t v1461 = (v1459 - 1);
              if ((int)v1459 - 1 >= 0)
              {
                uint64_t v1462 = *(void *)(*a2 + 24);
                int v1463 = v1449;
                do
                {
                  ldiv_t v1464 = ldiv(v1463, *(int *)(v1458 + 4 * v1461));
                  int v1463 = v1464.quot;
                  v1460 += *(void *)(v1462 + 8 * v1461--) * v1464.rem;
                }
                while (v1461 != -1);
              }
              float __B = (float)(uint64_t)-*(void *)&v1633[2 * (int)v1460];
              vDSP_vsadd((const float *)(v1681 + 8 * (int)v1453), 1, &__B, v1450, 1, v1587);
              v1450 += 2 * v1587;
              v1449 += v1587;
            }
            while (v1449 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v265 == 2)
          {
            int v1077 = *v72;
            if (*v72)
            {
              uint64_t v1078 = 0;
              uint64_t v1079 = 0;
              uint64_t v1656 = *(void *)(v71 + 152);
              unint64_t v1610 = v126[19];
              int v1080 = (float *)v70[19];
              unint64_t v1538 = 0;
              vDSP_Length v1564 = (int)v266;
              uint64_t v1081 = 8 * (int)v266;
              do
              {
                if (v72[1])
                {
                  unint64_t v1082 = 0;
                  do
                  {
                    vDSP_vsub((const float *)&v1610[2 * v1078], 1, (const float *)(v1656 + 8 * v1079), 1, v1080, 1, v1564);
                    uint64_t v71 = *a1;
                    uint64_t v1083 = *(void **)(*a1 + 24);
                    uint64_t v1084 = v1083[1];
                    v1079 += v1084;
                    uint64_t v126 = (int **)*a2;
                    uint64_t v1085 = *(int **)(*a2 + 24);
                    uint64_t v1086 = *((void *)v1085 + 1);
                    v1078 += v1086;
                    ++v1082;
                    uint64_t v72 = *(int **)*a1;
                    unint64_t v1087 = v72[1];
                    int v1080 = (float *)((char *)v1080 + v1081);
                  }
                  while (v1082 < v1087);
                  int v1077 = *v72;
                  unsigned int v127 = *v126;
                }
                else
                {
                  unint64_t v1087 = 0;
                  uint64_t v1083 = *(void **)(v71 + 24);
                  uint64_t v1084 = v1083[1];
                  uint64_t v1085 = v126[3];
                  uint64_t v1086 = *((void *)v1085 + 1);
                }
                uint64_t v1079 = *v1083 + v1079 - v1087 * v1084;
                uint64_t v1078 = *(void *)v1085 + v1078 - v1086 * v127[1];
                ++v1538;
              }
              while (v1538 < v1077);
            }
          }
          else if (v265 == 1)
          {
            if (*v72)
            {
              unint64_t v267 = 0;
              uint64_t v268 = 0;
              uint64_t v269 = 0;
              uint64_t v270 = *(void *)(v71 + 152);
              vDSP_Length v271 = v126[19];
              vDSP_Length v272 = (int)v266;
              uint64_t v273 = 8 * (int)v266;
              int v274 = (float *)v70[19];
              do
              {
                vDSP_vsub((const float *)&v271[2 * v268], 1, (const float *)(v270 + 8 * v269), 1, v274, 1, v272);
                v269 += **(void **)(*a1 + 24);
                v268 += **(void **)(*a2 + 24);
                ++v267;
                int v274 = (float *)((char *)v274 + v273);
              }
              while (v267 < **(int **)*a1);
            }
          }
          else if (v70[6])
          {
            unint64_t v1088 = 0;
            uint64_t v1611 = v126[19];
            uint64_t v1657 = *(void *)(v71 + 152);
            vDSP_Length v1565 = (int)v266;
            int v1089 = (float *)v70[19];
            do
            {
              uint64_t v1090 = *(void *)*a1;
              unint64_t v1091 = (unint64_t)(*(void *)(*a1 + 8) - v1090) >> 2;
              uint64_t v1092 = 0;
              uint64_t v1093 = (v1091 - 1);
              if ((int)v1091 - 1 >= 0)
              {
                uint64_t v1094 = *(void *)(*a1 + 24);
                int v1095 = v1088;
                do
                {
                  ldiv_t v1096 = ldiv(v1095, *(int *)(v1090 + 4 * v1093));
                  int v1095 = v1096.quot;
                  v1092 += *(void *)(v1094 + 8 * v1093--) * v1096.rem;
                }
                while (v1093 != -1);
              }
              uint64_t v1097 = *(void *)*a2;
              unint64_t v1098 = (unint64_t)(*(void *)(*a2 + 8) - v1097) >> 2;
              uint64_t v1099 = 0;
              uint64_t v1100 = (v1098 - 1);
              if ((int)v1098 - 1 >= 0)
              {
                uint64_t v1101 = *(void *)(*a2 + 24);
                int v1102 = v1088;
                do
                {
                  ldiv_t v1103 = ldiv(v1102, *(int *)(v1097 + 4 * v1100));
                  int v1102 = v1103.quot;
                  v1099 += *(void *)(v1101 + 8 * v1100--) * v1103.rem;
                }
                while (v1100 != -1);
              }
              vDSP_vsub((const float *)&v1611[2 * (int)v1099], 1, (const float *)(v1657 + 8 * (int)v1092), 1, v1089, 1, v1565);
              v1089 += 2 * v1565;
              v1088 += v1565;
            }
            while (v1088 < *(void *)(*(void *)a3 + 48));
          }
          break;
        default:
LABEL_404:
          switch(v262)
          {
            case 1uLL:
              uint64_t v275 = v70[6];
              if (v275)
              {
                int v276 = *(void **)(v71 + 152);
                unsigned int v277 = v126[19];
                int v278 = (void *)v70[19];
                uint64_t v279 = 8 * *(void *)v126[3];
                uint64_t v280 = 8 * **(void **)(v71 + 24);
                do
                {
                  *v278++ = *v276 - *(void *)v277;
                  unsigned int v277 = (int *)((char *)v277 + v279);
                  int v276 = (void *)((char *)v276 + v280);
                  --v275;
                }
                while (v275);
              }
              break;
            case 2uLL:
              uint64_t v682 = *v72;
              if (v682)
              {
                uint64_t v683 = 0;
                uint64_t v684 = 0;
                uint64_t v685 = 0;
                uint64_t v686 = 0;
                uint64_t v687 = *(void *)(v71 + 152);
                uint64_t v688 = v126[19];
                uint64_t v689 = v70[19];
                unint64_t v690 = v72[1];
                int v691 = *(uint64_t **)(v71 + 24);
                uint64_t v692 = *v691;
                uint64_t v693 = v691[1];
                unint64_t v694 = v126[3];
                uint64_t v695 = *(void *)v694;
                uint64_t v696 = *((void *)v694 + 1);
                uint64_t v697 = v695 - v696 * v127[1];
                if (v690 <= 1) {
                  uint64_t v698 = 1;
                }
                else {
                  uint64_t v698 = v72[1];
                }
                uint64_t v699 = v692 - v693 * v690;
                do
                {
                  if (v690)
                  {
                    uint64_t v700 = v684 + v698;
                    unint64_t v701 = (void *)(v689 + 8 * v684);
                    uint64_t v702 = v698;
                    do
                    {
                      *v701++ = *(void *)(v687 + 8 * v686) - *(void *)&v688[2 * v685];
                      v686 += v693;
                      v685 += v696;
                      --v702;
                    }
                    while (v702);
                    uint64_t v684 = v700;
                  }
                  v686 += v699;
                  v685 += v697;
                  ++v683;
                }
                while (v683 != v682);
              }
              break;
            case 3uLL:
              uint64_t v703 = *v72;
              if (v703)
              {
                uint64_t v704 = 0;
                uint64_t v705 = 0;
                uint64_t v706 = 0;
                uint64_t v707 = 0;
                uint64_t v708 = *(void *)(v71 + 152);
                uint64_t v709 = v126[19];
                uint64_t v710 = v70[19];
                unint64_t v711 = v72[1];
                uint64_t v712 = *(void **)(v71 + 24);
                uint64_t v713 = v712[1];
                int v714 = v126[3];
                uint64_t v715 = *((void *)v714 + 1);
                uint64_t v716 = *(void *)v714 - v715 * v127[1];
                if (v711 <= 1) {
                  uint64_t v717 = 1;
                }
                else {
                  uint64_t v717 = v72[1];
                }
                unint64_t v718 = *v712 - v713 * v711;
                do
                {
                  if (v711)
                  {
                    uint64_t v719 = 0;
                    unint64_t v720 = v72[2];
                    uint64_t v721 = v712[2];
                    uint64_t v722 = *((void *)v714 + 2);
                    if (v720 <= 1) {
                      uint64_t v723 = 1;
                    }
                    else {
                      uint64_t v723 = v72[2];
                    }
                    uint64_t v724 = v715 - v722 * v127[2];
                    do
                    {
                      uint64_t v725 = v723;
                      if (v720)
                      {
                        do
                        {
                          *(void *)(v710 + 8 * v705++) = *(void *)(v708 + 8 * v707) - *(void *)&v709[2 * v706];
                          v707 += v721;
                          v706 += v722;
                          --v725;
                        }
                        while (v725);
                      }
                      v707 += v713 - v721 * v720;
                      v706 += v724;
                      ++v719;
                    }
                    while (v719 != v717);
                  }
                  v707 += v718;
                  v706 += v716;
                  ++v704;
                }
                while (v704 != v703);
              }
              break;
            case 4uLL:
              uint64_t v1645 = *v72;
              if (v1645)
              {
                uint64_t v726 = 0;
                uint64_t v727 = 0;
                uint64_t v728 = 0;
                uint64_t v729 = 0;
                uint64_t v730 = *(void *)(v71 + 152);
                int v731 = v126[19];
                uint64_t v732 = v70[19];
                unint64_t v733 = v72[1];
                uint64_t v734 = *(void **)(v71 + 24);
                uint64_t v735 = v126[3];
                uint64_t v1520 = *((void *)v735 + 1);
                uint64_t v1526 = v734[1];
                uint64_t v1553 = *(void *)v735 - v1520 * v127[1];
                int v1599 = v72[1];
                if (v733 <= 1) {
                  uint64_t v736 = 1;
                }
                else {
                  uint64_t v736 = v72[1];
                }
                unint64_t v1533 = *v734 - v734[1] * v733;
                do
                {
                  if (v1599)
                  {
                    uint64_t v737 = 0;
                    unint64_t v738 = v72[2];
                    uint64_t v739 = v734[2];
                    uint64_t v740 = *((void *)v735 + 2);
                    if (v738 <= 1) {
                      uint64_t v741 = 1;
                    }
                    else {
                      uint64_t v741 = v72[2];
                    }
                    uint64_t v742 = v1520 - v740 * v127[2];
                    do
                    {
                      if (v738)
                      {
                        uint64_t v743 = 0;
                        unint64_t v744 = v72[3];
                        uint64_t v745 = v734[3];
                        uint64_t v746 = *((void *)v735 + 3);
                        if (v744 <= 1) {
                          uint64_t v747 = 1;
                        }
                        else {
                          uint64_t v747 = v72[3];
                        }
                        uint64_t v748 = v740 - v746 * v127[3];
                        do
                        {
                          uint64_t v749 = v747;
                          if (v744)
                          {
                            do
                            {
                              *(void *)(v732 + 8 * v727++) = *(void *)(v730 + 8 * v729) - *(void *)&v731[2 * v728];
                              v729 += v745;
                              v728 += v746;
                              --v749;
                            }
                            while (v749);
                          }
                          v729 += v739 - v745 * v744;
                          v728 += v748;
                          ++v743;
                        }
                        while (v743 != v741);
                      }
                      v729 += v1526 - v739 * v738;
                      v728 += v742;
                      ++v737;
                    }
                    while (v737 != v736);
                  }
                  v729 += v1533;
                  v728 += v1553;
                  ++v726;
                }
                while (v726 != v1645);
              }
              break;
            default:
              uint64_t v1598 = v70[6];
              uint64_t v1644 = v74;
              if (v1598)
              {
                uint64_t v671 = 0;
                uint64_t v1532 = v126[19];
                uint64_t v1552 = *(void *)(v71 + 152);
                uint64_t v1525 = v70[19];
                do
                {
                  uint64_t v672 = v1644;
                  if ((v1644 & 0x80000000) != 0)
                  {
                    LODWORD(v673) = 0;
                  }
                  else
                  {
                    uint64_t v673 = 0;
                    uint64_t v674 = *(void *)(v71 + 24);
                    int v675 = v671;
                    do
                    {
                      ldiv_t v676 = ldiv(v675, v72[v672]);
                      int v675 = v676.quot;
                      v673 += *(void *)(v674 + 8 * v672--) * v676.rem;
                    }
                    while (v672 != -1);
                  }
                  uint64_t v677 = 0;
                  if ((v129 & 0x80000000) == 0)
                  {
                    uint64_t v678 = v126[3];
                    uint64_t v679 = v129;
                    int v680 = v671;
                    do
                    {
                      ldiv_t v681 = ldiv(v680, v127[v679]);
                      int v680 = v681.quot;
                      v677 += *(void *)&v678[2 * v679--] * v681.rem;
                    }
                    while (v679 != -1);
                  }
                  *(void *)(v1525 + 8 * v671++) = *(void *)(v1552 + 8 * (int)v673)
                                                  - *(void *)&v1532[2 * (int)v677];
                }
                while (v671 != v1598);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v18)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
LABEL_17:
          uint64_t v19 = *(const float **)(*a1 + 152);
          uint64_t v20 = *(float **)(*(void *)a3 + 152);
          unsigned int v21 = *(const float **)(*a2 + 152);
          vDSP_Length v22 = *(void *)(*a2 + 160);
          float __B = -1.0;
          vDSP_vsmsa(v21, 1, &__B, v19, v20, 1, v22);
          return;
        case 2:
          uint64_t v9 = *(float **)(*(void *)a3 + 152);
          unint64_t v10 = *(const float **)(*a1 + 152);
          vDSP_Length v11 = *(void *)(*a1 + 160);
          float v14 = -**(float **)(*a2 + 152);
LABEL_57:
          float __B = v14;
          vDSP_vsadd(v10, 1, &__B, v9, 1, v11);
          return;
        case 3:
LABEL_18:
          int v23 = *(const float **)(*a1 + 152);
          vDSP_Length v24 = *(const float **)(*a2 + 152);
          vDSP_Length v25 = *(float **)(*(void *)a3 + 152);
          vDSP_Length v26 = *(void *)(*(void *)a3 + 48);
          vDSP_vsub(v24, 1, v23, 1, v25, 1, v26);
          return;
        default:
          uint64_t v79 = *(void **)a3;
          uint64_t v80 = *a1;
          uint64_t v81 = *(int **)*a1;
          uint64_t v82 = (*(void *)(*a1 + 8) - (void)v81) >> 2;
          uint64_t v83 = (v82 - 1);
          if ((int)v83 >= -1) {
            int v84 = -1;
          }
          else {
            int v84 = v82 - 1;
          }
          int v85 = v84 + 1;
          int v86 = v82 + 1;
          while (1)
          {
            unsigned int v87 = v86 - 2;
            if (v86 - 2 < 0) {
              break;
            }
            --v86;
            if (*(void *)(*(void *)(v80 + 24) + 8 * v87) != *(void *)(v79[3] + 8 * v87)) {
              goto LABEL_122;
            }
          }
          int v86 = v85;
LABEL_122:
          char v134 = (int **)*a2;
          char v135 = *(int **)*a2;
          uint64_t v136 = (*(void *)(*a2 + 8) - (void)v135) >> 2;
          uint64_t v137 = (v136 - 1);
          if ((int)v137 >= -1) {
            int v138 = -1;
          }
          else {
            int v138 = v136 - 1;
          }
          int v139 = v138 + 1;
          int v140 = v136 + 1;
          while (1)
          {
            unsigned int v141 = v140 - 2;
            if (v140 - 2 < 0) {
              break;
            }
            --v140;
            if (*(void *)&v134[3][2 * v141] != *(void *)(v79[3] + 8 * v141)) {
              goto LABEL_160;
            }
          }
          int v140 = v139;
LABEL_160:
          int v154 = v82 + 1;
          while (1)
          {
            unsigned int v155 = v154 - 2;
            if (v154 - 2 < 0) {
              break;
            }
            --v154;
            if (*(void *)(*(void *)(v80 + 24) + 8 * v155)) {
              goto LABEL_195;
            }
          }
          int v154 = v85;
LABEL_195:
          int v168 = v136 + 1;
          while (1)
          {
            int v169 = v168 - 2;
            if (v168 - 2 < 0) {
              break;
            }
            --v168;
            if (*(void *)&v134[3][2 * v169]) {
              goto LABEL_410;
            }
          }
          int v168 = v139;
LABEL_410:
          unint64_t v281 = (uint64_t)(v79[1] - *v79) >> 2;
          if (v86 <= v140) {
            int v282 = v140;
          }
          else {
            int v282 = v86;
          }
          if (v86 <= v168) {
            int v86 = v168;
          }
          if (v154 > v140) {
            int v140 = v154;
          }
          if (v281 > v140) {
            int v283 = 1;
          }
          else {
            int v283 = 4;
          }
          if (v281 <= v140) {
            int v140 = (uint64_t)(v79[1] - *v79) >> 2;
          }
          if (v281 <= v86) {
            int v86 = v140;
          }
          else {
            int v283 = 2;
          }
          if (v281 <= v282)
          {
            int v284 = v86;
          }
          else
          {
            int v283 = 3;
            int v284 = v282;
          }
          if (!v284) {
            goto LABEL_439;
          }
          unint64_t v285 = *(void *)(v79[3] + 8 * (v284 - 1));
          if (v285 < 0x10) {
            goto LABEL_439;
          }
          switch(v283)
          {
            case 1:
              if (v284 == 2)
              {
                int v1465 = *v81;
                if (*v81)
                {
                  uint64_t v1466 = 0;
                  uint64_t v1467 = 0;
                  uint64_t v1682 = *(void *)(v80 + 152);
                  uint64_t v1634 = v134[19];
                  uint64_t v1468 = (float *)v79[19];
                  unint64_t v1546 = 0;
                  vDSP_Length v1588 = (int)v285;
                  uint64_t v1469 = 4 * (int)v285;
                  do
                  {
                    if (v81[1])
                    {
                      unint64_t v1470 = 0;
                      do
                      {
                        float __B = -1.0;
                        vDSP_vsmsa((const float *)&v1634[v1466], 1, &__B, (const float *)(v1682 + 4 * v1467), v1468, 1, v1588);
                        uint64_t v80 = *a1;
                        uint64_t v1471 = *(void **)(*a1 + 24);
                        uint64_t v1472 = v1471[1];
                        v1467 += v1472;
                        char v134 = (int **)*a2;
                        unint64_t v1473 = *(int **)(*a2 + 24);
                        uint64_t v1474 = *((void *)v1473 + 1);
                        v1466 += v1474;
                        ++v1470;
                        uint64_t v81 = *(int **)*a1;
                        unint64_t v1475 = v81[1];
                        uint64_t v1468 = (float *)((char *)v1468 + v1469);
                      }
                      while (v1470 < v1475);
                      int v1465 = *v81;
                      char v135 = *v134;
                    }
                    else
                    {
                      unint64_t v1475 = 0;
                      uint64_t v1471 = *(void **)(v80 + 24);
                      uint64_t v1472 = v1471[1];
                      unint64_t v1473 = v134[3];
                      uint64_t v1474 = *((void *)v1473 + 1);
                    }
                    uint64_t v1467 = *v1471 + v1467 - v1475 * v1472;
                    uint64_t v1466 = *(void *)v1473 + v1466 - v1474 * v135[1];
                    ++v1546;
                  }
                  while (v1546 < v1465);
                }
              }
              else if (v284 == 1)
              {
                if (*v81)
                {
                  unint64_t v920 = 0;
                  uint64_t v921 = 0;
                  uint64_t v922 = 0;
                  uint64_t v923 = *(void *)(v80 + 152);
                  uint64_t v924 = v134[19];
                  vDSP_Length v925 = (int)v285;
                  uint64_t v926 = 4 * (int)v285;
                  uint64_t v927 = (float *)v79[19];
                  do
                  {
                    float __B = -1.0;
                    vDSP_vsmsa((const float *)&v924[v921], 1, &__B, (const float *)(v923 + 4 * v922), v927, 1, v925);
                    v922 += **(void **)(*a1 + 24);
                    v921 += **(void **)(*a2 + 24);
                    ++v920;
                    uint64_t v927 = (float *)((char *)v927 + v926);
                  }
                  while (v920 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                unint64_t v1476 = 0;
                char v1635 = v134[19];
                uint64_t v1683 = *(void *)(v80 + 152);
                vDSP_Length v1589 = (int)v285;
                uint64_t v1477 = (float *)v79[19];
                do
                {
                  uint64_t v1478 = *(void *)*a1;
                  unint64_t v1479 = (unint64_t)(*(void *)(*a1 + 8) - v1478) >> 2;
                  uint64_t v1480 = 0;
                  uint64_t v1481 = (v1479 - 1);
                  if ((int)v1479 - 1 >= 0)
                  {
                    uint64_t v1482 = *(void *)(*a1 + 24);
                    int v1483 = v1476;
                    do
                    {
                      ldiv_t v1484 = ldiv(v1483, *(int *)(v1478 + 4 * v1481));
                      int v1483 = v1484.quot;
                      v1480 += *(void *)(v1482 + 8 * v1481--) * v1484.rem;
                    }
                    while (v1481 != -1);
                  }
                  uint64_t v1485 = *(void *)*a2;
                  unint64_t v1486 = (unint64_t)(*(void *)(*a2 + 8) - v1485) >> 2;
                  uint64_t v1487 = 0;
                  uint64_t v1488 = (v1486 - 1);
                  if ((int)v1486 - 1 >= 0)
                  {
                    uint64_t v1489 = *(void *)(*a2 + 24);
                    int v1490 = v1476;
                    do
                    {
                      ldiv_t v1491 = ldiv(v1490, *(int *)(v1485 + 4 * v1488));
                      int v1490 = v1491.quot;
                      v1487 += *(void *)(v1489 + 8 * v1488--) * v1491.rem;
                    }
                    while (v1488 != -1);
                  }
                  float __B = -1.0;
                  vDSP_vsmsa((const float *)&v1635[(int)v1487], 1, &__B, (const float *)(v1683 + 4 * (int)v1480), v1477, 1, v1589);
                  v1477 += v1589;
                  v1476 += v1589;
                }
                while (v1476 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2:
              if (v284 == 2)
              {
                int v1492 = *v81;
                if (*v81)
                {
                  uint64_t v1493 = 0;
                  uint64_t v1494 = 0;
                  uint64_t v1684 = *(void *)(v80 + 152);
                  unsigned int v1636 = v134[19];
                  uint64_t v1495 = (float *)v79[19];
                  unint64_t v1547 = 0;
                  vDSP_Length v1590 = (int)v285;
                  uint64_t v1496 = 4 * (int)v285;
                  do
                  {
                    if (v81[1])
                    {
                      unint64_t v1497 = 0;
                      do
                      {
                        float __B = -*(float *)&v1636[v1493];
                        vDSP_vsadd((const float *)(v1684 + 4 * v1494), 1, &__B, v1495, 1, v1590);
                        uint64_t v80 = *a1;
                        uint64_t v1498 = *(void **)(*a1 + 24);
                        uint64_t v1499 = v1498[1];
                        v1494 += v1499;
                        char v134 = (int **)*a2;
                        uint64_t v1500 = *(int **)(*a2 + 24);
                        uint64_t v1501 = *((void *)v1500 + 1);
                        v1493 += v1501;
                        ++v1497;
                        uint64_t v81 = *(int **)*a1;
                        unint64_t v1502 = v81[1];
                        uint64_t v1495 = (float *)((char *)v1495 + v1496);
                      }
                      while (v1497 < v1502);
                      int v1492 = *v81;
                      char v135 = *v134;
                    }
                    else
                    {
                      unint64_t v1502 = 0;
                      uint64_t v1498 = *(void **)(v80 + 24);
                      uint64_t v1499 = v1498[1];
                      uint64_t v1500 = v134[3];
                      uint64_t v1501 = *((void *)v1500 + 1);
                    }
                    uint64_t v1494 = *v1498 + v1494 - v1502 * v1499;
                    uint64_t v1493 = *(void *)v1500 + v1493 - v1501 * v135[1];
                    ++v1547;
                  }
                  while (v1547 < v1492);
                }
              }
              else if (v284 == 1)
              {
                if (*v81)
                {
                  unint64_t v928 = 0;
                  uint64_t v929 = 0;
                  uint64_t v930 = 0;
                  uint64_t v931 = *(void *)(v80 + 152);
                  vDSP_Length v932 = v134[19];
                  vDSP_Length v933 = (int)v285;
                  uint64_t v934 = 4 * (int)v285;
                  unint64_t v935 = (float *)v79[19];
                  do
                  {
                    float __B = -*(float *)&v932[v929];
                    vDSP_vsadd((const float *)(v931 + 4 * v930), 1, &__B, v935, 1, v933);
                    v930 += **(void **)(*a1 + 24);
                    v929 += **(void **)(*a2 + 24);
                    ++v928;
                    unint64_t v935 = (float *)((char *)v935 + v934);
                  }
                  while (v928 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                unint64_t v1503 = 0;
                uint64_t v1637 = v134[19];
                uint64_t v1685 = *(void *)(v80 + 152);
                vDSP_Length v1591 = (int)v285;
                uint64_t v1504 = (float *)v79[19];
                do
                {
                  uint64_t v1505 = *(void *)*a1;
                  unint64_t v1506 = (unint64_t)(*(void *)(*a1 + 8) - v1505) >> 2;
                  uint64_t v1507 = 0;
                  uint64_t v1508 = (v1506 - 1);
                  if ((int)v1506 - 1 >= 0)
                  {
                    uint64_t v1509 = *(void *)(*a1 + 24);
                    int v1510 = v1503;
                    do
                    {
                      ldiv_t v1511 = ldiv(v1510, *(int *)(v1505 + 4 * v1508));
                      int v1510 = v1511.quot;
                      v1507 += *(void *)(v1509 + 8 * v1508--) * v1511.rem;
                    }
                    while (v1508 != -1);
                  }
                  uint64_t v1512 = *(void *)*a2;
                  unint64_t v1513 = (unint64_t)(*(void *)(*a2 + 8) - v1512) >> 2;
                  uint64_t v1514 = 0;
                  uint64_t v1515 = (v1513 - 1);
                  if ((int)v1513 - 1 >= 0)
                  {
                    uint64_t v1516 = *(void *)(*a2 + 24);
                    int v1517 = v1503;
                    do
                    {
                      ldiv_t v1518 = ldiv(v1517, *(int *)(v1512 + 4 * v1515));
                      int v1517 = v1518.quot;
                      v1514 += *(void *)(v1516 + 8 * v1515--) * v1518.rem;
                    }
                    while (v1515 != -1);
                  }
                  float __B = -*(float *)&v1637[(int)v1514];
                  vDSP_vsadd((const float *)(v1685 + 4 * (int)v1507), 1, &__B, v1504, 1, v1591);
                  v1504 += v1591;
                  v1503 += v1591;
                }
                while (v1503 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 3:
              if (v284 == 2)
              {
                int v1104 = *v81;
                if (*v81)
                {
                  uint64_t v1105 = 0;
                  uint64_t v1106 = 0;
                  uint64_t v1658 = *(void *)(v80 + 152);
                  uint64_t v1612 = v134[19];
                  uint64_t v1107 = (float *)v79[19];
                  unint64_t v1539 = 0;
                  vDSP_Length v1566 = (int)v285;
                  uint64_t v1108 = 4 * (int)v285;
                  do
                  {
                    if (v81[1])
                    {
                      unint64_t v1109 = 0;
                      do
                      {
                        vDSP_vsub((const float *)&v1612[v1105], 1, (const float *)(v1658 + 4 * v1106), 1, v1107, 1, v1566);
                        uint64_t v80 = *a1;
                        uint64_t v1110 = *(void **)(*a1 + 24);
                        uint64_t v1111 = v1110[1];
                        v1106 += v1111;
                        char v134 = (int **)*a2;
                        unsigned int v1112 = *(int **)(*a2 + 24);
                        uint64_t v1113 = *((void *)v1112 + 1);
                        v1105 += v1113;
                        ++v1109;
                        uint64_t v81 = *(int **)*a1;
                        unint64_t v1114 = v81[1];
                        uint64_t v1107 = (float *)((char *)v1107 + v1108);
                      }
                      while (v1109 < v1114);
                      int v1104 = *v81;
                      char v135 = *v134;
                    }
                    else
                    {
                      unint64_t v1114 = 0;
                      uint64_t v1110 = *(void **)(v80 + 24);
                      uint64_t v1111 = v1110[1];
                      unsigned int v1112 = v134[3];
                      uint64_t v1113 = *((void *)v1112 + 1);
                    }
                    uint64_t v1106 = *v1110 + v1106 - v1114 * v1111;
                    uint64_t v1105 = *(void *)v1112 + v1105 - v1113 * v135[1];
                    ++v1539;
                  }
                  while (v1539 < v1104);
                }
              }
              else if (v284 == 1)
              {
                if (*v81)
                {
                  unint64_t v286 = 0;
                  uint64_t v287 = 0;
                  uint64_t v288 = 0;
                  uint64_t v289 = *(void *)(v80 + 152);
                  int v290 = v134[19];
                  vDSP_Length v291 = (int)v285;
                  uint64_t v292 = 4 * (int)v285;
                  unsigned int v293 = (float *)v79[19];
                  do
                  {
                    vDSP_vsub((const float *)&v290[v287], 1, (const float *)(v289 + 4 * v288), 1, v293, 1, v291);
                    v288 += **(void **)(*a1 + 24);
                    v287 += **(void **)(*a2 + 24);
                    ++v286;
                    unsigned int v293 = (float *)((char *)v293 + v292);
                  }
                  while (v286 < **(int **)*a1);
                }
              }
              else if (v79[6])
              {
                unint64_t v1115 = 0;
                uint64_t v1613 = v134[19];
                uint64_t v1659 = *(void *)(v80 + 152);
                vDSP_Length v1567 = (int)v285;
                uint64_t v1116 = (float *)v79[19];
                do
                {
                  uint64_t v1117 = *(void *)*a1;
                  unint64_t v1118 = (unint64_t)(*(void *)(*a1 + 8) - v1117) >> 2;
                  uint64_t v1119 = 0;
                  uint64_t v1120 = (v1118 - 1);
                  if ((int)v1118 - 1 >= 0)
                  {
                    uint64_t v1121 = *(void *)(*a1 + 24);
                    int v1122 = v1115;
                    do
                    {
                      ldiv_t v1123 = ldiv(v1122, *(int *)(v1117 + 4 * v1120));
                      int v1122 = v1123.quot;
                      v1119 += *(void *)(v1121 + 8 * v1120--) * v1123.rem;
                    }
                    while (v1120 != -1);
                  }
                  uint64_t v1124 = *(void *)*a2;
                  unint64_t v1125 = (unint64_t)(*(void *)(*a2 + 8) - v1124) >> 2;
                  uint64_t v1126 = 0;
                  uint64_t v1127 = (v1125 - 1);
                  if ((int)v1125 - 1 >= 0)
                  {
                    uint64_t v1128 = *(void *)(*a2 + 24);
                    int v1129 = v1115;
                    do
                    {
                      ldiv_t v1130 = ldiv(v1129, *(int *)(v1124 + 4 * v1127));
                      int v1129 = v1130.quot;
                      v1126 += *(void *)(v1128 + 8 * v1127--) * v1130.rem;
                    }
                    while (v1127 != -1);
                  }
                  vDSP_vsub((const float *)&v1613[(int)v1126], 1, (const float *)(v1659 + 4 * (int)v1119), 1, v1116, 1, v1567);
                  v1116 += v1567;
                  v1115 += v1567;
                }
                while (v1115 < *(void *)(*(void *)a3 + 48));
              }
              break;
            default:
LABEL_439:
              switch(v281)
              {
                case 1uLL:
                  uint64_t v294 = v79[6];
                  if (v294)
                  {
                    int v295 = *(float **)(v80 + 152);
                    int v296 = (float *)v134[19];
                    unsigned int v297 = (float *)v79[19];
                    uint64_t v298 = 4 * *(void *)v134[3];
                    uint64_t v299 = 4 * **(void **)(v80 + 24);
                    do
                    {
                      *v297++ = *v295 - *v296;
                      int v296 = (float *)((char *)v296 + v298);
                      int v295 = (float *)((char *)v295 + v299);
                      --v294;
                    }
                    while (v294);
                  }
                  break;
                case 2uLL:
                  uint64_t v761 = *v81;
                  if (v761)
                  {
                    uint64_t v762 = 0;
                    uint64_t v763 = 0;
                    uint64_t v764 = 0;
                    uint64_t v765 = 0;
                    uint64_t v766 = *(void *)(v80 + 152);
                    uint64_t v767 = v134[19];
                    uint64_t v768 = v79[19];
                    unint64_t v769 = v81[1];
                    uint64_t v770 = *(uint64_t **)(v80 + 24);
                    uint64_t v771 = *v770;
                    uint64_t v772 = v770[1];
                    uint64_t v773 = v134[3];
                    uint64_t v774 = *(void *)v773;
                    uint64_t v775 = *((void *)v773 + 1);
                    uint64_t v776 = v774 - v775 * v135[1];
                    if (v769 <= 1) {
                      uint64_t v777 = 1;
                    }
                    else {
                      uint64_t v777 = v81[1];
                    }
                    uint64_t v778 = v771 - v772 * v769;
                    do
                    {
                      if (v769)
                      {
                        uint64_t v779 = v763 + v777;
                        unint64_t v780 = (float *)(v768 + 4 * v763);
                        uint64_t v781 = v777;
                        do
                        {
                          *v780++ = *(float *)(v766 + 4 * v765) - *(float *)&v767[v764];
                          v765 += v772;
                          v764 += v775;
                          --v781;
                        }
                        while (v781);
                        uint64_t v763 = v779;
                      }
                      v765 += v778;
                      v764 += v776;
                      ++v762;
                    }
                    while (v762 != v761);
                  }
                  break;
                case 3uLL:
                  uint64_t v782 = *v81;
                  if (v782)
                  {
                    uint64_t v783 = 0;
                    uint64_t v784 = 0;
                    uint64_t v785 = 0;
                    uint64_t v786 = 0;
                    uint64_t v787 = *(void *)(v80 + 152);
                    uint64_t v788 = v134[19];
                    uint64_t v789 = v79[19];
                    unint64_t v790 = v81[1];
                    uint64_t v791 = *(void **)(v80 + 24);
                    uint64_t v792 = v791[1];
                    int v793 = v134[3];
                    uint64_t v794 = *((void *)v793 + 1);
                    uint64_t v795 = *(void *)v793 - v794 * v135[1];
                    if (v790 <= 1) {
                      uint64_t v796 = 1;
                    }
                    else {
                      uint64_t v796 = v81[1];
                    }
                    unint64_t v797 = *v791 - v792 * v790;
                    do
                    {
                      if (v790)
                      {
                        uint64_t v798 = 0;
                        unint64_t v799 = v81[2];
                        uint64_t v800 = v791[2];
                        uint64_t v801 = *((void *)v793 + 2);
                        if (v799 <= 1) {
                          uint64_t v802 = 1;
                        }
                        else {
                          uint64_t v802 = v81[2];
                        }
                        uint64_t v803 = v794 - v801 * v135[2];
                        do
                        {
                          uint64_t v804 = v802;
                          if (v799)
                          {
                            do
                            {
                              *(float *)(v789 + 4 * v784++) = *(float *)(v787 + 4 * v786) - *(float *)&v788[v785];
                              v786 += v800;
                              v785 += v801;
                              --v804;
                            }
                            while (v804);
                          }
                          v786 += v792 - v800 * v799;
                          v785 += v803;
                          ++v798;
                        }
                        while (v798 != v796);
                      }
                      v786 += v797;
                      v785 += v795;
                      ++v783;
                    }
                    while (v783 != v782);
                  }
                  break;
                case 4uLL:
                  uint64_t v1647 = *v81;
                  if (v1647)
                  {
                    uint64_t v805 = 0;
                    uint64_t v806 = 0;
                    uint64_t v807 = 0;
                    uint64_t v808 = 0;
                    uint64_t v809 = *(void *)(v80 + 152);
                    uint64_t v810 = v134[19];
                    uint64_t v811 = v79[19];
                    unint64_t v812 = v81[1];
                    uint64_t v813 = *(void **)(v80 + 24);
                    uint64_t v814 = v134[3];
                    uint64_t v1535 = *((void *)v814 + 1);
                    uint64_t v1555 = v813[1];
                    uint64_t v1601 = *(void *)v814 - v1535 * v135[1];
                    if (v812 <= 1) {
                      uint64_t v815 = 1;
                    }
                    else {
                      uint64_t v815 = v81[1];
                    }
                    unint64_t v816 = *v813 - v813[1] * v812;
                    do
                    {
                      if (v812)
                      {
                        uint64_t v817 = 0;
                        unint64_t v818 = v81[2];
                        uint64_t v819 = v813[2];
                        uint64_t v820 = *((void *)v814 + 2);
                        if (v818 <= 1) {
                          uint64_t v821 = 1;
                        }
                        else {
                          uint64_t v821 = v81[2];
                        }
                        uint64_t v822 = v1535 - v820 * v135[2];
                        do
                        {
                          if (v818)
                          {
                            uint64_t v823 = 0;
                            unint64_t v824 = v81[3];
                            uint64_t v825 = v813[3];
                            uint64_t v826 = *((void *)v814 + 3);
                            if (v824 <= 1) {
                              uint64_t v827 = 1;
                            }
                            else {
                              uint64_t v827 = v81[3];
                            }
                            uint64_t v828 = v820 - v826 * v135[3];
                            do
                            {
                              uint64_t v829 = v827;
                              if (v824)
                              {
                                do
                                {
                                  *(float *)(v811 + 4 * v806++) = *(float *)(v809 + 4 * v808) - *(float *)&v810[v807];
                                  v808 += v825;
                                  v807 += v826;
                                  --v829;
                                }
                                while (v829);
                              }
                              v808 += v819 - v825 * v824;
                              v807 += v828;
                              ++v823;
                            }
                            while (v823 != v821);
                          }
                          v808 += v1555 - v819 * v818;
                          v807 += v822;
                          ++v817;
                        }
                        while (v817 != v815);
                      }
                      v808 += v816;
                      v807 += v1601;
                      ++v805;
                    }
                    while (v805 != v1647);
                  }
                  break;
                default:
                  uint64_t v1600 = v79[6];
                  uint64_t v1646 = v83;
                  if (v1600)
                  {
                    uint64_t v750 = 0;
                    uint64_t v1534 = v134[19];
                    uint64_t v1554 = *(void *)(v80 + 152);
                    uint64_t v1527 = v79[19];
                    do
                    {
                      uint64_t v751 = v1646;
                      if ((v1646 & 0x80000000) != 0)
                      {
                        LODWORD(v752) = 0;
                      }
                      else
                      {
                        uint64_t v752 = 0;
                        uint64_t v753 = *(void *)(v80 + 24);
                        int v754 = v750;
                        do
                        {
                          ldiv_t v755 = ldiv(v754, v81[v751]);
                          int v754 = v755.quot;
                          v752 += *(void *)(v753 + 8 * v751--) * v755.rem;
                        }
                        while (v751 != -1);
                      }
                      uint64_t v756 = 0;
                      if ((v137 & 0x80000000) == 0)
                      {
                        uint64_t v757 = v134[3];
                        uint64_t v758 = v137;
                        int v759 = v750;
                        do
                        {
                          ldiv_t v760 = ldiv(v759, v135[v758]);
                          int v759 = v760.quot;
                          v756 += *(void *)&v757[2 * v758--] * v760.rem;
                        }
                        while (v758 != -1);
                      }
                      *(float *)(v1527 + 4 * v750++) = *(float *)(v1554 + 4 * (int)v752) - *(float *)&v1534[(int)v756];
                    }
                    while (v750 != v1600);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_4,mlx::core::anonymous namespace'::UseDefaultBinaryOp,mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_5,mlx::core::anonymous namespace'::UseDefaultBinaryOp>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          int v39 = *(_DWORD *)(*a2 + 160);
          if (v39 >= 1)
          {
            int v40 = *(BOOL **)(*(void *)a3 + 152);
            int v41 = *(char **)(*a2 + 152);
            int v42 = -**(unsigned __int8 **)(*a1 + 152);
            unsigned int v43 = v39 + 1;
            do
            {
              int v44 = *v41++;
              *v40++ = v44 + v42 != 0;
              --v43;
            }
            while (v43 > 1);
          }
          return;
        case 2:
          goto LABEL_24;
        case 3:
          int v45 = *(_DWORD *)(*(void *)a3 + 48);
          if (v45 >= 1)
          {
            int v46 = *(BOOL **)(*(void *)a3 + 152);
            uint64_t v47 = *(char **)(*a2 + 152);
            uint64_t v48 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v49 = v45 + 1;
            do
            {
              int v51 = *v48++;
              int v50 = v51;
              int v52 = *v47++;
              *v46++ = v52 != v50;
              --v49;
            }
            while (v49 > 1);
          }
          return;
        default:
          uint64_t v30 = *(void **)a3;
          uint64_t v31 = *a1;
          int v32 = *(int **)*a1;
          uint64_t v33 = (*(void *)(*a1 + 8) - (void)v32) >> 2;
          uint64_t v34 = (v33 - 1);
          if ((int)v34 >= -1) {
            int v35 = -1;
          }
          else {
            int v35 = v33 - 1;
          }
          int v36 = v35 + 1;
          int v37 = v33 + 1;
          break;
      }
      while (1)
      {
        unsigned int v38 = v37 - 2;
        if (v37 - 2 < 0) {
          break;
        }
        --v37;
        if (*(void *)(*(void *)(v31 + 24) + 8 * v38) != *(void *)(v30[3] + 8 * v38)) {
          goto LABEL_126;
        }
      }
      int v37 = v36;
LABEL_126:
      uint64_t v178 = *a2;
      unsigned int v179 = *(int **)*a2;
      uint64_t v180 = (*(void *)(*a2 + 8) - (void)v179) >> 2;
      uint64_t v181 = (v180 - 1);
      if ((int)v181 >= -1) {
        int v182 = -1;
      }
      else {
        int v182 = v180 - 1;
      }
      int v183 = v182 + 1;
      int v184 = v180 + 1;
      while (1)
      {
        unsigned int v185 = v184 - 2;
        if (v184 - 2 < 0) {
          break;
        }
        --v184;
        if (*(void *)(*(void *)(v178 + 24) + 8 * v185) != *(void *)(v30[3] + 8 * v185)) {
          goto LABEL_180;
        }
      }
      int v184 = v183;
LABEL_180:
      int v232 = v33 + 1;
      while (1)
      {
        unsigned int v233 = v232 - 2;
        if (v232 - 2 < 0) {
          break;
        }
        --v232;
        if (*(void *)(*(void *)(v31 + 24) + 8 * v233)) {
          goto LABEL_215;
        }
      }
      int v232 = v36;
LABEL_215:
      int v246 = v180 + 1;
      while (1)
      {
        unsigned int v247 = v246 - 2;
        if (v246 - 2 < 0) {
          break;
        }
        --v246;
        if (*(void *)(*(void *)(v178 + 24) + 8 * v247)) {
          goto LABEL_250;
        }
      }
      int v246 = v183;
LABEL_250:
      unint64_t v260 = (uint64_t)(v30[1] - *v30) >> 2;
      if (v37 <= v184) {
        int v261 = v184;
      }
      else {
        int v261 = v37;
      }
      if (v37 <= v246) {
        int v37 = v246;
      }
      if (v232 > v184) {
        int v184 = v232;
      }
      if (v260 > v184)
      {
        int v262 = 1;
      }
      else
      {
        int v184 = (uint64_t)(v30[1] - *v30) >> 2;
        int v262 = 4;
      }
      if (v260 > v37)
      {
        int v263 = 2;
      }
      else
      {
        int v37 = v184;
        int v263 = v262;
      }
      if (v260 > v261)
      {
        int v37 = v261;
        int v263 = 3;
      }
      uint64_t v1849 = v181;
      uint64_t v1871 = v34;
      if (!v37) {
        goto LABEL_279;
      }
      unint64_t v264 = *(void *)(v30[3] + 8 * (v37 - 1));
      if (v264 < 0x10) {
        goto LABEL_279;
      }
      switch(v263)
      {
        case 1:
          if (v37 == 2)
          {
            uint64_t v1306 = *v32;
            if (v1306)
            {
              uint64_t v1307 = 0;
              uint64_t v1308 = 0;
              uint64_t v1309 = 0;
              uint64_t v1310 = *(void *)(v31 + 152);
              uint64_t v1311 = *(void *)(v178 + 152);
              uint64_t v1312 = v30[19];
              unint64_t v1313 = v32[1];
              unint64_t v1314 = *(uint64_t **)(v31 + 24);
              uint64_t v1315 = *v1314;
              uint64_t v1316 = v1314[1];
              uint64_t v1317 = *(uint64_t **)(v178 + 24);
              uint64_t v1319 = *v1317;
              uint64_t v1318 = v1317[1];
              if (v1313 <= 1) {
                uint64_t v1320 = 1;
              }
              else {
                uint64_t v1320 = v32[1];
              }
              uint64_t v1321 = v1315 - v1316 * v1313;
              uint64_t v1322 = v1319 - v1318 * v179[1];
              do
              {
                if (v1313)
                {
                  uint64_t v1323 = 0;
                  uint64_t v1324 = v1311 + v1308;
                  do
                  {
                    if ((int)v264 >= 1)
                    {
                      uint64_t v1325 = 0;
                      int v1326 = -*(unsigned __int8 *)(v1310 + v1309);
                      unsigned int v1327 = v264 + 1;
                      do
                      {
                        *(unsigned char *)(v1312 + v1325) = *(char *)(v1324 + v1325) + v1326 != 0;
                        --v1327;
                        ++v1325;
                      }
                      while (v1327 > 1);
                    }
                    v1309 += v1316;
                    v1308 += v1318;
                    v1312 += (int)v264;
                    ++v1323;
                    v1324 += v1318;
                  }
                  while (v1323 != v1320);
                }
                v1309 += v1321;
                v1308 += v1322;
                ++v1307;
              }
              while (v1307 != v1306);
            }
          }
          else
          {
            uint64_t v1829 = *a1;
            if (v37 == 1)
            {
              uint64_t v940 = *v32;
              if (v940)
              {
                uint64_t v941 = 0;
                uint64_t v942 = 0;
                uint64_t v943 = *(void *)(v31 + 152);
                uint64_t v944 = *(void *)(v178 + 152);
                uint64_t v945 = v30[19];
                uint64_t v946 = **(void **)(v31 + 24);
                uint64_t v947 = **(void **)(v178 + 24);
                do
                {
                  if ((int)v264 >= 1)
                  {
                    uint64_t v948 = 0;
                    int v949 = -*(unsigned __int8 *)(v943 + v942);
                    unsigned int v950 = v264 + 1;
                    do
                    {
                      *(unsigned char *)(v945 + v948) = *(char *)(v944 + v948) + v949 != 0;
                      --v950;
                      ++v948;
                    }
                    while (v950 > 1);
                  }
                  v942 += v946;
                  v945 += (int)v264;
                  ++v941;
                  v944 += v947;
                }
                while (v941 != v940);
              }
            }
            else
            {
              unint64_t v1793 = v30[6];
              if (v1793)
              {
                unint64_t v1328 = 0;
                uint64_t v1766 = *(void *)(v178 + 152);
                uint64_t v1776 = *(void *)(v31 + 152);
                uint64_t v1329 = v30[19];
                do
                {
                  uint64_t v1330 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v1331) = 0;
                  }
                  else
                  {
                    uint64_t v1331 = 0;
                    uint64_t v1332 = *(void *)(v1829 + 24);
                    int quot = v1328;
                    do
                    {
                      ldiv_t v1334 = ldiv(quot, v32[v1330]);
                      int quot = v1334.quot;
                      v1331 += *(void *)(v1332 + 8 * v1330--) * v1334.rem;
                    }
                    while (v1330 != -1);
                  }
                  uint64_t v1335 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v1336) = 0;
                  }
                  else
                  {
                    uint64_t v1336 = 0;
                    uint64_t v1337 = *(void *)(v178 + 24);
                    int v1338 = v1328;
                    do
                    {
                      ldiv_t v1339 = ldiv(v1338, v179[v1335]);
                      int v1338 = v1339.quot;
                      v1336 += *(void *)(v1337 + 8 * v1335--) * v1339.rem;
                    }
                    while (v1335 != -1);
                  }
                  if ((int)v264 >= 1)
                  {
                    uint64_t v1340 = 0;
                    int v1341 = -*(unsigned __int8 *)(v1776 + (int)v1331);
                    unsigned int v1342 = v264 + 1;
                    do
                    {
                      *(unsigned char *)(v1329 + v1340) = *(char *)(v1766 + (int)v1336 + v1340) + v1341 != 0;
                      --v1342;
                      ++v1340;
                    }
                    while (v1342 > 1);
                  }
                  v1329 += (int)v264;
                  v1328 += (int)v264;
                }
                while (v1328 < v1793);
              }
            }
          }
          break;
        case 2:
          if (v37 == 2)
          {
            int v1343 = *v32;
            if (*v32)
            {
              uint64_t v1344 = 0;
              uint64_t v1345 = 0;
              uint64_t v1861 = *(void *)(v31 + 152);
              unint64_t v1883 = 0;
              vDSP_Length v1346 = (int)v264;
              uint64_t v1347 = (int *)v30[19];
              uint64_t v1348 = *(void *)(v178 + 152);
              do
              {
                if (v32[1])
                {
                  unint64_t v1349 = 0;
                  do
                  {
                    int __B = -*(unsigned __int8 *)(v1348 + v1344);
                    vDSP_vsaddi((const int *)(v1861 + v1345), 1, &__B, v1347, 1, v1346);
                    uint64_t v31 = *a1;
                    uint64_t v1350 = *(void **)(*a1 + 24);
                    uint64_t v1351 = v1350[1];
                    v1345 += v1351;
                    uint64_t v1352 = *(void **)(*a2 + 24);
                    uint64_t v1353 = v1352[1];
                    v1344 += v1353;
                    uint64_t v1347 = (int *)((char *)v1347 + v1346);
                    ++v1349;
                    int v32 = *(int **)*a1;
                    unint64_t v1354 = v32[1];
                  }
                  while (v1349 < v1354);
                  int v1343 = *v32;
                  uint64_t v178 = *a2;
                  unsigned int v179 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1354 = 0;
                  uint64_t v1350 = *(void **)(v31 + 24);
                  uint64_t v1351 = v1350[1];
                  uint64_t v1352 = *(void **)(v178 + 24);
                  uint64_t v1353 = v1352[1];
                }
                uint64_t v1345 = *v1350 + v1345 - v1354 * v1351;
                uint64_t v1344 = *v1352 + v1344 - v1353 * v179[1];
                ++v1883;
              }
              while (v1883 < v1343);
            }
          }
          else if (v37 == 1)
          {
            if (*v32)
            {
              unint64_t v951 = 0;
              uint64_t v952 = 0;
              uint64_t v953 = 0;
              uint64_t v954 = *(void *)(v31 + 152);
              uint64_t v955 = *(void *)(v178 + 152);
              vDSP_Length v956 = (int)v264;
              unint64_t v957 = (int *)v30[19];
              do
              {
                int __B = -*(unsigned __int8 *)(v955 + v952);
                vDSP_vsaddi((const int *)(v954 + v953), 1, &__B, v957, 1, v956);
                v953 += **(void **)(*a1 + 24);
                v952 += **(void **)(*a2 + 24);
                unint64_t v957 = (int *)((char *)v957 + v956);
                ++v951;
              }
              while (v951 < **(int **)*a1);
            }
          }
          else if (v30[6])
          {
            unint64_t v1355 = 0;
            uint64_t v1862 = *(void *)(v178 + 152);
            uint64_t v1884 = *(void *)(v31 + 152);
            vDSP_Length v1836 = (int)v264;
            ldiv_t v1356 = (int *)v30[19];
            do
            {
              uint64_t v1357 = *(void *)*a1;
              unint64_t v1358 = (unint64_t)(*(void *)(*a1 + 8) - v1357) >> 2;
              uint64_t v1359 = 0;
              uint64_t v1360 = (v1358 - 1);
              if ((int)v1358 - 1 >= 0)
              {
                uint64_t v1361 = *(void *)(*a1 + 24);
                int v1362 = v1355;
                do
                {
                  ldiv_t v1363 = ldiv(v1362, *(int *)(v1357 + 4 * v1360));
                  int v1362 = v1363.quot;
                  v1359 += *(void *)(v1361 + 8 * v1360--) * v1363.rem;
                }
                while (v1360 != -1);
              }
              uint64_t v1364 = *(void *)*a2;
              unint64_t v1365 = (unint64_t)(*(void *)(*a2 + 8) - v1364) >> 2;
              uint64_t v1366 = 0;
              uint64_t v1367 = (v1365 - 1);
              if ((int)v1365 - 1 >= 0)
              {
                uint64_t v1368 = *(void *)(*a2 + 24);
                int v1369 = v1355;
                do
                {
                  ldiv_t v1370 = ldiv(v1369, *(int *)(v1364 + 4 * v1367));
                  int v1369 = v1370.quot;
                  v1366 += *(void *)(v1368 + 8 * v1367--) * v1370.rem;
                }
                while (v1367 != -1);
              }
              int __B = -*(unsigned __int8 *)(v1862 + (int)v1366);
              vDSP_vsaddi((const int *)(v1884 + (int)v1359), 1, &__B, v1356, 1, v1836);
              ldiv_t v1356 = (int *)((char *)v1356 + v1836);
              v1355 += v1836;
            }
            while (v1355 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v37 == 2)
          {
            uint64_t v1068 = *v32;
            if (v1068)
            {
              uint64_t v1069 = 0;
              uint64_t v1070 = 0;
              uint64_t v1071 = 0;
              uint64_t v1072 = *(void *)(v31 + 152);
              uint64_t v1073 = *(void *)(v178 + 152);
              uint64_t v1074 = v30[19];
              unint64_t v1075 = v32[1];
              ldiv_t v1076 = *(uint64_t **)(v31 + 24);
              uint64_t v1077 = *v1076;
              uint64_t v1078 = v1076[1];
              uint64_t v1079 = *(uint64_t **)(v178 + 24);
              uint64_t v1081 = *v1079;
              uint64_t v1080 = v1079[1];
              if (v1075 <= 1) {
                uint64_t v1082 = 1;
              }
              else {
                uint64_t v1082 = v32[1];
              }
              uint64_t v1083 = v1077 - v1078 * v1075;
              uint64_t v1084 = v1081 - v1080 * v179[1];
              do
              {
                if (v1075)
                {
                  uint64_t v1085 = 0;
                  uint64_t v1086 = v1073 + v1070;
                  uint64_t v1087 = v1072 + v1071;
                  do
                  {
                    if ((int)v264 >= 1)
                    {
                      uint64_t v1088 = 0;
                      unsigned int v1089 = v264 + 1;
                      do
                      {
                        *(unsigned char *)(v1074 + v1088) = *(char *)(v1086 + v1088) != *(unsigned __int8 *)(v1087 + v1088);
                        --v1089;
                        ++v1088;
                      }
                      while (v1089 > 1);
                    }
                    v1071 += v1078;
                    v1070 += v1080;
                    v1074 += (int)v264;
                    ++v1085;
                    v1086 += v1080;
                    v1087 += v1078;
                  }
                  while (v1085 != v1082);
                }
                v1071 += v1083;
                v1070 += v1084;
                ++v1069;
              }
              while (v1069 != v1068);
            }
          }
          else
          {
            uint64_t v1816 = *a1;
            if (v37 == 1)
            {
              uint64_t v265 = *v32;
              if (v265)
              {
                uint64_t v266 = 0;
                uint64_t v267 = *(void *)(v31 + 152);
                uint64_t v268 = *(void *)(v178 + 152);
                uint64_t v269 = v30[19];
                uint64_t v270 = **(void **)(v31 + 24);
                uint64_t v271 = **(void **)(v178 + 24);
                do
                {
                  if ((int)v264 >= 1)
                  {
                    uint64_t v272 = 0;
                    unsigned int v273 = v264 + 1;
                    do
                    {
                      *(unsigned char *)(v269 + v272) = *(char *)(v268 + v272) != *(unsigned __int8 *)(v267 + v272);
                      --v273;
                      ++v272;
                    }
                    while (v273 > 1);
                  }
                  v269 += (int)v264;
                  ++v266;
                  v268 += v271;
                  v267 += v270;
                }
                while (v266 != v265);
              }
            }
            else
            {
              unint64_t v1786 = v30[6];
              if (v1786)
              {
                unint64_t v1090 = 0;
                uint64_t v1761 = *(void *)(v178 + 152);
                uint64_t v1773 = *(void *)(v31 + 152);
                uint64_t v1091 = v30[19];
                do
                {
                  uint64_t v1092 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v1093) = 0;
                  }
                  else
                  {
                    uint64_t v1093 = 0;
                    uint64_t v1094 = *(void *)(v1816 + 24);
                    int v1095 = v1090;
                    do
                    {
                      ldiv_t v1096 = ldiv(v1095, v32[v1092]);
                      int v1095 = v1096.quot;
                      v1093 += *(void *)(v1094 + 8 * v1092--) * v1096.rem;
                    }
                    while (v1092 != -1);
                  }
                  uint64_t v1097 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v1098) = 0;
                  }
                  else
                  {
                    uint64_t v1098 = 0;
                    uint64_t v1099 = *(void *)(v178 + 24);
                    int v1100 = v1090;
                    do
                    {
                      ldiv_t v1101 = ldiv(v1100, v179[v1097]);
                      int v1100 = v1101.quot;
                      v1098 += *(void *)(v1099 + 8 * v1097--) * v1101.rem;
                    }
                    while (v1097 != -1);
                  }
                  if ((int)v264 >= 1)
                  {
                    uint64_t v1102 = 0;
                    unsigned int v1103 = v264 + 1;
                    do
                    {
                      *(unsigned char *)(v1091 + v1102) = *(char *)(v1761 + (int)v1098 + v1102) != *(unsigned __int8 *)(v1773 + (int)v1093 + v1102);
                      --v1103;
                      ++v1102;
                    }
                    while (v1103 > 1);
                  }
                  v1091 += (int)v264;
                  v1090 += (int)v264;
                }
                while (v1090 < v1786);
              }
            }
          }
          break;
        default:
LABEL_279:
          switch(v260)
          {
            case 1uLL:
              uint64_t v274 = v30[6];
              if (v274)
              {
                uint64_t v275 = *(unsigned __int8 **)(v31 + 152);
                int v276 = *(char **)(v178 + 152);
                unsigned int v277 = (BOOL *)v30[19];
                uint64_t v278 = **(void **)(v31 + 24);
                uint64_t v279 = **(void **)(v178 + 24);
                do
                {
                  *v277++ = *v276 != *v275;
                  v276 += v279;
                  v275 += v278;
                  --v274;
                }
                while (v274);
              }
              break;
            case 2uLL:
              uint64_t v413 = *v32;
              if (v413)
              {
                uint64_t v414 = 0;
                uint64_t v415 = 0;
                uint64_t v416 = 0;
                uint64_t v417 = 0;
                uint64_t v418 = *(void *)(v31 + 152);
                uint64_t v419 = *(void *)(v178 + 152);
                uint64_t v420 = v30[19];
                unint64_t v421 = v32[1];
                uint64_t v422 = *(uint64_t **)(v31 + 24);
                uint64_t v423 = *v422;
                uint64_t v424 = v422[1];
                unint64_t v425 = *(uint64_t **)(v178 + 24);
                uint64_t v426 = *v425;
                uint64_t v427 = v425[1];
                uint64_t v428 = v426 - v427 * v179[1];
                if (v421 <= 1) {
                  uint64_t v429 = 1;
                }
                else {
                  uint64_t v429 = v32[1];
                }
                uint64_t v430 = v423 - v424 * v421;
                do
                {
                  if (v421)
                  {
                    uint64_t v431 = v415 + v429;
                    int v432 = (BOOL *)(v420 + v415);
                    uint64_t v433 = v429;
                    do
                    {
                      *v432++ = *(char *)(v419 + v416) != *(unsigned __int8 *)(v418 + v417);
                      v417 += v424;
                      v416 += v427;
                      --v433;
                    }
                    while (v433);
                    uint64_t v415 = v431;
                  }
                  v417 += v430;
                  v416 += v428;
                  ++v414;
                }
                while (v414 != v413);
              }
              break;
            case 3uLL:
              uint64_t v434 = *v32;
              if (v434)
              {
                uint64_t v435 = 0;
                uint64_t v436 = 0;
                uint64_t v437 = 0;
                uint64_t v438 = 0;
                uint64_t v439 = *(void *)(v31 + 152);
                uint64_t v440 = *(void *)(v178 + 152);
                uint64_t v441 = v30[19];
                unint64_t v442 = v32[1];
                unint64_t v443 = *(void **)(v31 + 24);
                uint64_t v444 = v443[1];
                uint64_t v445 = *(void **)(v178 + 24);
                uint64_t v446 = v445[1];
                uint64_t v447 = *v445 - v446 * v179[1];
                if (v442 <= 1) {
                  uint64_t v448 = 1;
                }
                else {
                  uint64_t v448 = v32[1];
                }
                unint64_t v449 = *v443 - v444 * v442;
                do
                {
                  if (v442)
                  {
                    uint64_t v450 = 0;
                    unint64_t v451 = v32[2];
                    uint64_t v452 = v443[2];
                    uint64_t v453 = v445[2];
                    if (v451 <= 1) {
                      uint64_t v454 = 1;
                    }
                    else {
                      uint64_t v454 = v32[2];
                    }
                    uint64_t v455 = v446 - v453 * v179[2];
                    do
                    {
                      uint64_t v456 = v454;
                      if (v451)
                      {
                        do
                        {
                          *(unsigned char *)(v441 + v436++) = *(char *)(v440 + v437) != *(unsigned __int8 *)(v439 + v438);
                          v438 += v452;
                          v437 += v453;
                          --v456;
                        }
                        while (v456);
                      }
                      v438 += v444 - v452 * v451;
                      v437 += v455;
                      ++v450;
                    }
                    while (v450 != v448);
                  }
                  v438 += v449;
                  v437 += v447;
                  ++v435;
                }
                while (v435 != v434);
              }
              break;
            case 4uLL:
              uint64_t v1876 = *v32;
              if (v1876)
              {
                uint64_t v457 = 0;
                uint64_t v458 = 0;
                uint64_t v459 = 0;
                uint64_t v460 = 0;
                uint64_t v461 = *(void *)(v31 + 152);
                uint64_t v462 = *(void *)(v178 + 152);
                uint64_t v463 = v30[19];
                unint64_t v464 = v32[1];
                uint64_t v465 = *(void **)(v31 + 24);
                uint64_t v466 = *(void **)(v178 + 24);
                uint64_t v1771 = v466[1];
                uint64_t v1780 = v465[1];
                uint64_t v1822 = *v466 - v1771 * v179[1];
                int v1856 = v32[1];
                if (v464 <= 1) {
                  uint64_t v467 = 1;
                }
                else {
                  uint64_t v467 = v32[1];
                }
                vDSP_Length __Na = *v465 - v465[1] * v464;
                do
                {
                  if (v1856)
                  {
                    uint64_t v468 = 0;
                    unint64_t v469 = v32[2];
                    uint64_t v470 = v465[2];
                    uint64_t v471 = v466[2];
                    if (v469 <= 1) {
                      uint64_t v472 = 1;
                    }
                    else {
                      uint64_t v472 = v32[2];
                    }
                    uint64_t v473 = v1771 - v471 * v179[2];
                    do
                    {
                      if (v469)
                      {
                        uint64_t v474 = 0;
                        unint64_t v475 = v32[3];
                        uint64_t v476 = v465[3];
                        uint64_t v477 = v466[3];
                        if (v475 <= 1) {
                          uint64_t v478 = 1;
                        }
                        else {
                          uint64_t v478 = v32[3];
                        }
                        uint64_t v479 = v471 - v477 * v179[3];
                        do
                        {
                          uint64_t v480 = v478;
                          if (v475)
                          {
                            do
                            {
                              *(unsigned char *)(v463 + v458++) = *(char *)(v462 + v459) != *(unsigned __int8 *)(v461 + v460);
                              v460 += v476;
                              v459 += v477;
                              --v480;
                            }
                            while (v480);
                          }
                          v460 += v470 - v476 * v475;
                          v459 += v479;
                          ++v474;
                        }
                        while (v474 != v472);
                      }
                      v460 += v1780 - v470 * v469;
                      v459 += v473;
                      ++v468;
                    }
                    while (v468 != v467);
                  }
                  v460 += __Na;
                  v459 += v1822;
                  ++v457;
                }
                while (v457 != v1876);
              }
              break;
            default:
              uint64_t v400 = v30[6];
              if (v400)
              {
                uint64_t v401 = v31;
                uint64_t v402 = 0;
                vDSP_Length __N = *(void *)(v178 + 152);
                uint64_t v1821 = *(void *)(v31 + 152);
                uint64_t v1779 = v30[19];
                do
                {
                  uint64_t v403 = v1871;
                  if ((v1871 & 0x80000000) != 0)
                  {
                    LODWORD(v404) = 0;
                  }
                  else
                  {
                    uint64_t v404 = 0;
                    uint64_t v405 = *(void *)(v401 + 24);
                    int v406 = v402;
                    do
                    {
                      ldiv_t v407 = ldiv(v406, v32[v403]);
                      int v406 = v407.quot;
                      v404 += *(void *)(v405 + 8 * v403--) * v407.rem;
                    }
                    while (v403 != -1);
                  }
                  uint64_t v408 = v1849;
                  if ((v1849 & 0x80000000) != 0)
                  {
                    LODWORD(v409) = 0;
                  }
                  else
                  {
                    uint64_t v409 = 0;
                    uint64_t v410 = *(void *)(v178 + 24);
                    int v411 = v402;
                    do
                    {
                      ldiv_t v412 = ldiv(v411, v179[v408]);
                      int v411 = v412.quot;
                      v409 += *(void *)(v410 + 8 * v408--) * v412.rem;
                    }
                    while (v408 != -1);
                  }
                  *(unsigned char *)(v1779 + v402++) = *(char *)(__N + (int)v409) != *(unsigned __int8 *)(v1821 + (int)v404);
                }
                while (v402 != v400);
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            char v10 = **(unsigned char **)(*a1 + 152);
            vDSP_Length v11 = *(unsigned char **)(*(void *)a3 + 152);
            int v12 = *(char **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              char v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
LABEL_24:
          vDSP_Length v26 = *(int **)(*(void *)a3 + 152);
          uint64_t v27 = *(const int **)(*a1 + 152);
          vDSP_Length v28 = *(void *)(*a1 + 160);
          int v29 = **(unsigned __int8 **)(*a2 + 152);
          goto LABEL_72;
        case 3:
          int v61 = *(_DWORD *)(*(void *)a3 + 48);
          if (v61 >= 1)
          {
            uint64_t v62 = *(unsigned char **)(*(void *)a3 + 152);
            int v63 = *(char **)(*a2 + 152);
            uint64_t v64 = *(char **)(*a1 + 152);
            unsigned int v65 = v61 + 1;
            do
            {
              char v67 = *v64++;
              char v66 = v67;
              char v68 = *v63++;
              *v62++ = v66 - v68;
              --v65;
            }
            while (v65 > 1);
          }
          return;
        default:
          ldiv_t v53 = *(void **)a3;
          uint64_t v54 = *a1;
          int v55 = *(int **)*a1;
          uint64_t v56 = (*(void *)(*a1 + 8) - (void)v55) >> 2;
          int v57 = v56 - 1;
          if ((int)v56 - 1 >= -1) {
            int v57 = -1;
          }
          int v58 = v57 + 1;
          int v59 = v56 + 1;
          break;
      }
      while (1)
      {
        unsigned int v60 = v59 - 2;
        if (v59 - 2 < 0) {
          break;
        }
        --v59;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v60) != *(void *)(v53[3] + 8 * v60)) {
          goto LABEL_134;
        }
      }
      int v59 = v58;
LABEL_134:
      uint64_t v186 = (int **)*a2;
      uint64_t v187 = *(int **)*a2;
      uint64_t v188 = (*(void *)(*a2 + 8) - (void)v187) >> 2;
      int v189 = v188 - 1;
      if ((int)v188 - 1 >= -1) {
        int v189 = -1;
      }
      int v190 = v189 + 1;
      int v191 = v188 + 1;
      while (1)
      {
        unsigned int v192 = v191 - 2;
        if (v191 - 2 < 0) {
          break;
        }
        --v191;
        if (*(void *)&v186[3][2 * v192] != *(void *)(v53[3] + 8 * v192)) {
          goto LABEL_185;
        }
      }
      int v191 = v190;
LABEL_185:
      int v234 = v56 + 1;
      while (1)
      {
        unsigned int v235 = v234 - 2;
        if (v234 - 2 < 0) {
          break;
        }
        --v234;
        if (*(void *)(*(void *)(v54 + 24) + 8 * v235)) {
          goto LABEL_220;
        }
      }
      int v234 = v58;
LABEL_220:
      int v248 = v188 + 1;
      while (1)
      {
        int v249 = v248 - 2;
        if (v248 - 2 < 0) {
          break;
        }
        --v248;
        if (*(void *)&v186[3][2 * v249]) {
          goto LABEL_285;
        }
      }
      int v248 = v190;
LABEL_285:
      unint64_t v280 = (uint64_t)(v53[1] - *v53) >> 2;
      if (v59 <= v191) {
        int v281 = v191;
      }
      else {
        int v281 = v59;
      }
      if (v59 <= v248) {
        int v59 = v248;
      }
      if (v234 > v191) {
        int v191 = v234;
      }
      if (v280 > v191)
      {
        int v282 = 1;
      }
      else
      {
        int v191 = (uint64_t)(v53[1] - *v53) >> 2;
        int v282 = 4;
      }
      if (v280 > v59)
      {
        int v283 = 2;
      }
      else
      {
        int v59 = v191;
        int v283 = v282;
      }
      if (v280 > v281)
      {
        int v59 = v281;
        int v283 = 3;
      }
      if (!v59) {
        goto LABEL_315;
      }
      unint64_t v284 = *(void *)(v53[3] + 8 * (v59 - 1));
      if (v284 < 0x10) {
        goto LABEL_315;
      }
      uint64_t v1850 = *(void *)(v53[3] + 8 * (v59 - 1));
      switch(v283)
      {
        case 1:
          if (v59 == 2)
          {
            int v1371 = *v55;
            if (*v55)
            {
              unint64_t v1372 = 0;
              uint64_t v1373 = 0;
              uint64_t v1374 = 0;
              uint64_t v1375 = *(void *)(v54 + 152);
              ldiv_t v1376 = v186[19];
              uint64_t v1377 = v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1378 = 0;
                  do
                  {
                    if ((int)v284 >= 1)
                    {
                      uint64_t v1379 = 0;
                      char v1380 = *(unsigned char *)(v1375 + v1374);
                      unsigned int v1381 = v284 + 1;
                      do
                      {
                        *(unsigned char *)(v1377 + v1379) = v1380 - *((unsigned char *)v1376 + v1373 + v1379);
                        --v1381;
                        ++v1379;
                      }
                      while (v1381 > 1);
                      uint64_t v54 = *a1;
                      uint64_t v186 = (int **)*a2;
                      int v55 = *(int **)*a1;
                    }
                    int v1382 = *(void **)(v54 + 24);
                    uint64_t v1383 = v1382[1];
                    v1374 += v1383;
                    v1373 += *((void *)v186[3] + 1);
                    v1377 += (int)v284;
                    ++v1378;
                    unint64_t v1384 = v55[1];
                  }
                  while (v1378 < v1384);
                  int v1371 = *v55;
                  uint64_t v187 = *v186;
                }
                else
                {
                  unint64_t v1384 = 0;
                  int v1382 = *(void **)(v54 + 24);
                  uint64_t v1383 = v1382[1];
                }
                uint64_t v1374 = *v1382 + v1374 - v1384 * v1383;
                uint64_t v1373 = *(void *)v186[3] + v1373 - *((void *)v186[3] + 1) * v187[1];
                ++v1372;
              }
              while (v1372 < v1371);
            }
          }
          else if (v59 == 1)
          {
            int v958 = *v55;
            if (*v55)
            {
              unint64_t v959 = 0;
              uint64_t v960 = 0;
              uint64_t v961 = 0;
              uint64_t v962 = *(void *)(v54 + 152);
              int v963 = v186[19];
              uint64_t v964 = v53[19];
              do
              {
                if ((int)v284 >= 1)
                {
                  uint64_t v965 = 0;
                  char v966 = *(unsigned char *)(v962 + v961);
                  unsigned int v967 = v284 + 1;
                  do
                  {
                    *(unsigned char *)(v964 + v965) = v966 - *((unsigned char *)v963 + v960 + v965);
                    --v967;
                    ++v965;
                  }
                  while (v967 > 1);
                  uint64_t v54 = *a1;
                  uint64_t v186 = (int **)*a2;
                  int v958 = **(_DWORD **)*a1;
                }
                v961 += **(void **)(v54 + 24);
                v960 += *(void *)v186[3];
                v964 += (int)v284;
                ++v959;
              }
              while (v959 < v958);
            }
          }
          else if (v53[6])
          {
            unint64_t v1885 = 0;
            uint64_t v1794 = v186[19];
            __Nunint64_t j = *(void *)(v54 + 152);
            uint64_t v1837 = (int)v284;
            unsigned int v1777 = v284 + 1;
            uint64_t v1385 = v53[19];
            do
            {
              uint64_t v1386 = *(void *)*a1;
              unint64_t v1387 = (unint64_t)(*(void *)(*a1 + 8) - v1386) >> 2;
              uint64_t v1388 = 0;
              uint64_t v1389 = (v1387 - 1);
              if ((int)v1387 - 1 >= 0)
              {
                uint64_t v1390 = *(void *)(*a1 + 24);
                int v1391 = v1885;
                do
                {
                  ldiv_t v1392 = ldiv(v1391, *(int *)(v1386 + 4 * v1389));
                  int v1391 = v1392.quot;
                  v1388 += *(void *)(v1390 + 8 * v1389--) * v1392.rem;
                }
                while (v1389 != -1);
              }
              uint64_t v1393 = *(void *)*a2;
              unint64_t v1394 = (unint64_t)(*(void *)(*a2 + 8) - v1393) >> 2;
              uint64_t v1395 = 0;
              uint64_t v1396 = (v1394 - 1);
              if ((int)v1394 - 1 >= 0)
              {
                uint64_t v1397 = *(void *)(*a2 + 24);
                int v1398 = v1885;
                do
                {
                  ldiv_t v1399 = ldiv(v1398, *(int *)(v1393 + 4 * v1396));
                  int v1398 = v1399.quot;
                  v1395 += *(void *)(v1397 + 8 * v1396--) * v1399.rem;
                }
                while (v1396 != -1);
              }
              if ((int)v1850 >= 1)
              {
                uint64_t v1400 = 0;
                char v1401 = *(unsigned char *)(__Nj + (int)v1388);
                unsigned int v1402 = v1777;
                do
                {
                  *(unsigned char *)(v1385 + v1400) = v1401 - *((unsigned char *)v1794 + (int)v1395 + v1400);
                  --v1402;
                  ++v1400;
                }
                while (v1402 > 1);
                ldiv_t v53 = *(void **)a3;
              }
              v1385 += v1837;
              v1885 += v1837;
            }
            while (v1885 < v53[6]);
          }
          break;
        case 2:
          if (v59 == 2)
          {
            int v1403 = *v55;
            if (*v55)
            {
              unint64_t v1404 = 0;
              uint64_t v1405 = 0;
              uint64_t v1406 = 0;
              uint64_t v1407 = *(void *)(v54 + 152);
              uint64_t v1408 = v186[19];
              vDSP_Length v1409 = (int)v284;
              ldiv_t v1410 = (int *)v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1411 = 0;
                  do
                  {
                    int __B = -*((unsigned __int8 *)v1408 + v1405);
                    vDSP_vsaddi((const int *)(v1407 + v1406), 1, &__B, v1410, 1, v1409);
                    uint64_t v54 = *a1;
                    uint64_t v1412 = *(void **)(*a1 + 24);
                    uint64_t v1413 = v1412[1];
                    v1406 += v1413;
                    uint64_t v186 = (int **)*a2;
                    int v1414 = *(int **)(*a2 + 24);
                    uint64_t v1415 = *((void *)v1414 + 1);
                    v1405 += v1415;
                    ldiv_t v1410 = (int *)((char *)v1410 + v1409);
                    ++v1411;
                    int v55 = *(int **)*a1;
                    unint64_t v1416 = v55[1];
                  }
                  while (v1411 < v1416);
                  int v1403 = *v55;
                  uint64_t v187 = *v186;
                }
                else
                {
                  unint64_t v1416 = 0;
                  uint64_t v1412 = *(void **)(v54 + 24);
                  uint64_t v1413 = v1412[1];
                  int v1414 = v186[3];
                  uint64_t v1415 = *((void *)v1414 + 1);
                }
                uint64_t v1406 = *v1412 + v1406 - v1416 * v1413;
                uint64_t v1405 = *(void *)v1414 + v1405 - v1415 * v187[1];
                ++v1404;
              }
              while (v1404 < v1403);
            }
          }
          else if (v59 == 1)
          {
            if (*v55)
            {
              unint64_t v968 = 0;
              uint64_t v969 = 0;
              uint64_t v970 = 0;
              uint64_t v971 = *(void *)(v54 + 152);
              uint64_t v972 = v186[19];
              vDSP_Length v973 = (int)v284;
              unint64_t v974 = (int *)v53[19];
              do
              {
                int __B = -*((unsigned __int8 *)v972 + v969);
                vDSP_vsaddi((const int *)(v971 + v970), 1, &__B, v974, 1, v973);
                v970 += **(void **)(*a1 + 24);
                v969 += **(void **)(*a2 + 24);
                unint64_t v974 = (int *)((char *)v974 + v973);
                ++v968;
              }
              while (v968 < **(int **)*a1);
            }
          }
          else if (v53[6])
          {
            unint64_t v1417 = 0;
            ldiv_t v1863 = v186[19];
            uint64_t v1886 = *(void *)(v54 + 152);
            vDSP_Length v1838 = (int)v284;
            uint64_t v1418 = (int *)v53[19];
            do
            {
              uint64_t v1419 = *(void *)*a1;
              unint64_t v1420 = (unint64_t)(*(void *)(*a1 + 8) - v1419) >> 2;
              uint64_t v1421 = 0;
              uint64_t v1422 = (v1420 - 1);
              if ((int)v1420 - 1 >= 0)
              {
                uint64_t v1423 = *(void *)(*a1 + 24);
                int v1424 = v1417;
                do
                {
                  ldiv_t v1425 = ldiv(v1424, *(int *)(v1419 + 4 * v1422));
                  int v1424 = v1425.quot;
                  v1421 += *(void *)(v1423 + 8 * v1422--) * v1425.rem;
                }
                while (v1422 != -1);
              }
              uint64_t v1426 = *(void *)*a2;
              unint64_t v1427 = (unint64_t)(*(void *)(*a2 + 8) - v1426) >> 2;
              uint64_t v1428 = 0;
              uint64_t v1429 = (v1427 - 1);
              if ((int)v1427 - 1 >= 0)
              {
                uint64_t v1430 = *(void *)(*a2 + 24);
                int v1431 = v1417;
                do
                {
                  ldiv_t v1432 = ldiv(v1431, *(int *)(v1426 + 4 * v1429));
                  int v1431 = v1432.quot;
                  v1428 += *(void *)(v1430 + 8 * v1429--) * v1432.rem;
                }
                while (v1429 != -1);
              }
              int __B = -*((unsigned __int8 *)v1863 + (int)v1428);
              vDSP_vsaddi((const int *)(v1886 + (int)v1421), 1, &__B, v1418, 1, v1838);
              uint64_t v1418 = (int *)((char *)v1418 + v1838);
              v1417 += v1838;
            }
            while (v1417 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v59 == 2)
          {
            int v1104 = *v55;
            if (*v55)
            {
              unint64_t v1105 = 0;
              uint64_t v1106 = 0;
              uint64_t v1107 = 0;
              uint64_t v1108 = *(void *)(v54 + 152);
              unint64_t v1109 = v186[19];
              uint64_t v1110 = v53[19];
              do
              {
                if (v55[1])
                {
                  unint64_t v1111 = 0;
                  do
                  {
                    if ((int)v284 >= 1)
                    {
                      uint64_t v1112 = 0;
                      unsigned int v1113 = v284 + 1;
                      do
                      {
                        *(unsigned char *)(v1110 + v1112) = *(unsigned char *)(v1108 + v1107 + v1112)
                                                  - *((unsigned char *)v1109 + v1106 + v1112);
                        --v1113;
                        ++v1112;
                      }
                      while (v1113 > 1);
                      uint64_t v54 = *a1;
                      uint64_t v186 = (int **)*a2;
                      int v55 = *(int **)*a1;
                    }
                    unint64_t v1114 = *(void **)(v54 + 24);
                    uint64_t v1115 = v1114[1];
                    v1107 += v1115;
                    v1106 += *((void *)v186[3] + 1);
                    v1110 += (int)v284;
                    ++v1111;
                    unint64_t v1116 = v55[1];
                  }
                  while (v1111 < v1116);
                  int v1104 = *v55;
                  uint64_t v187 = *v186;
                }
                else
                {
                  unint64_t v1116 = 0;
                  unint64_t v1114 = *(void **)(v54 + 24);
                  uint64_t v1115 = v1114[1];
                }
                uint64_t v1107 = *v1114 + v1107 - v1116 * v1115;
                uint64_t v1106 = *(void *)v186[3] + v1106 - *((void *)v186[3] + 1) * v187[1];
                ++v1105;
              }
              while (v1105 < v1104);
            }
          }
          else if (v59 == 1)
          {
            int v285 = *v55;
            if (*v55)
            {
              unint64_t v286 = 0;
              uint64_t v287 = 0;
              uint64_t v288 = 0;
              uint64_t v289 = *(void *)(v54 + 152);
              int v290 = v186[19];
              uint64_t v291 = v53[19];
              do
              {
                if ((int)v284 >= 1)
                {
                  uint64_t v292 = 0;
                  unsigned int v293 = v284 + 1;
                  do
                  {
                    *(unsigned char *)(v291 + v292) = *(unsigned char *)(v289 + v288 + v292) - *((unsigned char *)v290 + v287 + v292);
                    --v293;
                    ++v292;
                  }
                  while (v293 > 1);
                  uint64_t v54 = *a1;
                  uint64_t v186 = (int **)*a2;
                  int v285 = **(_DWORD **)*a1;
                }
                v288 += **(void **)(v54 + 24);
                v287 += *(void *)v186[3];
                v291 += (int)v284;
                ++v286;
              }
              while (v286 < v285);
            }
          }
          else if (v53[6])
          {
            unint64_t v1881 = 0;
            uint64_t v1787 = v186[19];
            vDSP_Length __Nh = *(void *)(v54 + 152);
            uint64_t v1834 = (int)v284;
            unsigned int v1774 = v284 + 1;
            uint64_t v1117 = v53[19];
            do
            {
              uint64_t v1118 = *(void *)*a1;
              unint64_t v1119 = (unint64_t)(*(void *)(*a1 + 8) - v1118) >> 2;
              uint64_t v1120 = 0;
              uint64_t v1121 = (v1119 - 1);
              if ((int)v1119 - 1 >= 0)
              {
                uint64_t v1122 = *(void *)(*a1 + 24);
                int v1123 = v1881;
                do
                {
                  ldiv_t v1124 = ldiv(v1123, *(int *)(v1118 + 4 * v1121));
                  int v1123 = v1124.quot;
                  v1120 += *(void *)(v1122 + 8 * v1121--) * v1124.rem;
                }
                while (v1121 != -1);
              }
              uint64_t v1125 = *(void *)*a2;
              unint64_t v1126 = (unint64_t)(*(void *)(*a2 + 8) - v1125) >> 2;
              uint64_t v1127 = 0;
              uint64_t v1128 = (v1126 - 1);
              if ((int)v1126 - 1 >= 0)
              {
                uint64_t v1129 = *(void *)(*a2 + 24);
                int v1130 = v1881;
                do
                {
                  ldiv_t v1131 = ldiv(v1130, *(int *)(v1125 + 4 * v1128));
                  int v1130 = v1131.quot;
                  v1127 += *(void *)(v1129 + 8 * v1128--) * v1131.rem;
                }
                while (v1128 != -1);
              }
              if ((int)v1850 >= 1)
              {
                uint64_t v1132 = 0;
                unsigned int v1133 = v1774;
                do
                {
                  *(unsigned char *)(v1117 + v1132) = *(unsigned char *)(__Nh + (int)v1120 + v1132)
                                            - *((unsigned char *)v1787 + (int)v1127 + v1132);
                  --v1133;
                  ++v1132;
                }
                while (v1133 > 1);
                ldiv_t v53 = *(void **)a3;
              }
              v1117 += v1834;
              v1881 += v1834;
            }
            while (v1881 < v53[6]);
          }
          break;
        default:
LABEL_315:
          switch(v280)
          {
            case 1uLL:
              if (v53[6])
              {
                unint64_t v294 = 0;
                uint64_t v295 = 0;
                uint64_t v296 = 0;
                uint64_t v297 = *(void *)(v54 + 152);
                uint64_t v298 = v186[19];
                uint64_t v299 = v53[19];
                do
                {
                  *(unsigned char *)(v299 + v294) = *(unsigned char *)(v297 + v296) - *((unsigned char *)v298 + v295);
                  v296 += **(void **)(*a1 + 24);
                  v295 += **(void **)(*a2 + 24);
                  ++v294;
                }
                while (v294 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v497 = *v55;
              if (*v55)
              {
                unint64_t v498 = 0;
                uint64_t v499 = 0;
                uint64_t v500 = 0;
                uint64_t v501 = 0;
                uint64_t v502 = *(void *)(v54 + 152);
                uint64_t v503 = v186[19];
                uint64_t v504 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v505 = 0;
                    do
                    {
                      *(unsigned char *)(v504 + v499 + v505) = *(unsigned char *)(v502 + v501) - *((unsigned char *)v503 + v500);
                      uint64_t v54 = *a1;
                      uint64_t v506 = *(void **)(*a1 + 24);
                      uint64_t v507 = v506[1];
                      v501 += v507;
                      uint64_t v186 = (int **)*a2;
                      uint64_t v508 = *(int **)(*a2 + 24);
                      uint64_t v509 = *((void *)v508 + 1);
                      v500 += v509;
                      ++v505;
                      int v55 = *(int **)*a1;
                      unint64_t v510 = v55[1];
                    }
                    while (v505 < v510);
                    int v497 = *v55;
                    uint64_t v187 = *v186;
                    v499 += v505;
                  }
                  else
                  {
                    unint64_t v510 = 0;
                    uint64_t v506 = *(void **)(v54 + 24);
                    uint64_t v507 = v506[1];
                    uint64_t v508 = v186[3];
                    uint64_t v509 = *((void *)v508 + 1);
                  }
                  uint64_t v501 = *v506 + v501 - v510 * v507;
                  uint64_t v500 = *(void *)v508 + v500 - v509 * v187[1];
                  ++v498;
                }
                while (v498 < v497);
              }
              break;
            case 3uLL:
              int v511 = *v55;
              if (*v55)
              {
                unint64_t v512 = 0;
                uint64_t v513 = 0;
                uint64_t v514 = 0;
                uint64_t v515 = 0;
                uint64_t v516 = *(void *)(v54 + 152);
                unint64_t v517 = v186[19];
                uint64_t v518 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v519 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v520 = 0;
                        do
                        {
                          *(unsigned char *)(v518 + v513 + v520) = *(unsigned char *)(v516 + v515) - *((unsigned char *)v517 + v514);
                          uint64_t v54 = *a1;
                          uint64_t v521 = *(void **)(*a1 + 24);
                          uint64_t v522 = v521[2];
                          v515 += v522;
                          uint64_t v186 = (int **)*a2;
                          uint64_t v523 = *(int **)(*a2 + 24);
                          uint64_t v524 = *((void *)v523 + 2);
                          v514 += v524;
                          ++v520;
                          int v55 = *(int **)*a1;
                          unint64_t v525 = v55[2];
                        }
                        while (v520 < v525);
                        uint64_t v187 = *v186;
                        v513 += v520;
                      }
                      else
                      {
                        unint64_t v525 = 0;
                        uint64_t v521 = *(void **)(v54 + 24);
                        uint64_t v522 = v521[2];
                        uint64_t v523 = v186[3];
                        uint64_t v524 = *((void *)v523 + 2);
                      }
                      uint64_t v526 = v521[1];
                      uint64_t v515 = v526 + v515 - v525 * v522;
                      uint64_t v514 = *((void *)v523 + 1) + v514 - v524 * v187[2];
                      ++v519;
                      unint64_t v527 = v55[1];
                    }
                    while (v519 < v527);
                    int v511 = *v55;
                  }
                  else
                  {
                    unint64_t v527 = 0;
                    uint64_t v521 = *(void **)(v54 + 24);
                    uint64_t v526 = v521[1];
                  }
                  uint64_t v515 = *v521 + v515 - v527 * v526;
                  uint64_t v514 = *(void *)v186[3] + v514 - *((void *)v186[3] + 1) * v187[1];
                  ++v512;
                }
                while (v512 < v511);
              }
              break;
            case 4uLL:
              int v528 = *v55;
              if (*v55)
              {
                unint64_t v529 = 0;
                uint64_t v530 = 0;
                uint64_t v531 = 0;
                uint64_t v532 = 0;
                uint64_t v533 = *(void *)(v54 + 152);
                uint64_t v534 = v186[19];
                uint64_t v535 = v53[19];
                do
                {
                  if (v55[1])
                  {
                    unint64_t v536 = 0;
                    do
                    {
                      if (v55[2])
                      {
                        unint64_t v537 = 0;
                        do
                        {
                          if (v55[3])
                          {
                            unint64_t v538 = 0;
                            do
                            {
                              *(unsigned char *)(v535 + v530 + v538) = *(unsigned char *)(v533 + v532) - *((unsigned char *)v534 + v531);
                              uint64_t v54 = *a1;
                              int v539 = *(void **)(*a1 + 24);
                              uint64_t v540 = v539[3];
                              v532 += v540;
                              uint64_t v186 = (int **)*a2;
                              int v541 = *(int **)(*a2 + 24);
                              uint64_t v542 = *((void *)v541 + 3);
                              v531 += v542;
                              ++v538;
                              int v55 = *(int **)*a1;
                              unint64_t v543 = v55[3];
                            }
                            while (v538 < v543);
                            uint64_t v187 = *v186;
                            v530 += v538;
                          }
                          else
                          {
                            unint64_t v543 = 0;
                            int v539 = *(void **)(v54 + 24);
                            uint64_t v540 = v539[3];
                            int v541 = v186[3];
                            uint64_t v542 = *((void *)v541 + 3);
                          }
                          uint64_t v544 = v539[2];
                          uint64_t v532 = v544 + v532 - v543 * v540;
                          uint64_t v531 = *((void *)v541 + 2) + v531 - v542 * v187[3];
                          ++v537;
                          unint64_t v545 = v55[2];
                        }
                        while (v537 < v545);
                      }
                      else
                      {
                        unint64_t v545 = 0;
                        int v539 = *(void **)(v54 + 24);
                        uint64_t v544 = v539[2];
                      }
                      uint64_t v532 = v539[1] + v532 - v545 * v544;
                      uint64_t v531 = *((void *)v186[3] + 1) + v531 - *((void *)v186[3] + 2) * v187[2];
                      ++v536;
                      unint64_t v546 = v55[1];
                    }
                    while (v536 < v546);
                    int v528 = *v55;
                  }
                  else
                  {
                    unint64_t v546 = 0;
                  }
                  uint64_t v532 = **(void **)(v54 + 24) + v532 - *(void *)(*(void *)(v54 + 24) + 8) * v546;
                  uint64_t v531 = *(void *)v186[3] + v531 - *((void *)v186[3] + 1) * v187[1];
                  ++v529;
                }
                while (v529 < v528);
              }
              break;
            default:
              if (v53[6])
              {
                unint64_t v481 = 0;
                unsigned int v1857 = v186[19];
                uint64_t v1877 = *(void *)(v54 + 152);
                uint64_t v482 = v53[19];
                do
                {
                  uint64_t v483 = *(void *)*a1;
                  unint64_t v484 = (unint64_t)(*(void *)(*a1 + 8) - v483) >> 2;
                  uint64_t v485 = 0;
                  uint64_t v486 = (v484 - 1);
                  if ((int)v484 - 1 >= 0)
                  {
                    uint64_t v487 = *(void *)(*a1 + 24);
                    int v488 = v481;
                    do
                    {
                      ldiv_t v489 = ldiv(v488, *(int *)(v483 + 4 * v486));
                      int v488 = v489.quot;
                      v485 += *(void *)(v487 + 8 * v486--) * v489.rem;
                    }
                    while (v486 != -1);
                  }
                  uint64_t v490 = *(void *)*a2;
                  unint64_t v491 = (unint64_t)(*(void *)(*a2 + 8) - v490) >> 2;
                  uint64_t v492 = 0;
                  uint64_t v493 = (v491 - 1);
                  if ((int)v491 - 1 >= 0)
                  {
                    uint64_t v494 = *(void *)(*a2 + 24);
                    int v495 = v481;
                    do
                    {
                      ldiv_t v496 = ldiv(v495, *(int *)(v490 + 4 * v493));
                      int v495 = v496.quot;
                      v492 += *(void *)(v494 + 8 * v493--) * v496.rem;
                    }
                    while (v493 != -1);
                  }
                  *(unsigned char *)(v482 + v481++) = *(unsigned char *)(v1877 + (int)v485) - *((unsigned char *)v1857 + (int)v492);
                }
                while (v481 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            int v18 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          goto LABEL_23;
        case 3:
          int v78 = *(_DWORD *)(*(void *)a3 + 48);
          if (v78 >= 1)
          {
            uint64_t v79 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v80 = *(int **)(*a2 + 152);
            uint64_t v81 = *(int **)(*a1 + 152);
            unsigned int v82 = v78 + 1;
            do
            {
              int v84 = *v81++;
              int v83 = v84;
              int v85 = *v80++;
              *v79++ = v83 - v85;
              --v82;
            }
            while (v82 > 1);
          }
          return;
        default:
          unsigned int v69 = *(void **)a3;
          uint64_t v70 = *a1;
          uint64_t v71 = *(int **)*a1;
          uint64_t v72 = (*(void *)(*a1 + 8) - (void)v71) >> 2;
          uint64_t v73 = (v72 - 1);
          if ((int)v73 >= -1) {
            int v74 = -1;
          }
          else {
            int v74 = v72 - 1;
          }
          int v75 = v74 + 1;
          int v76 = v72 + 1;
          break;
      }
      while (1)
      {
        unsigned int v77 = v76 - 2;
        if (v76 - 2 < 0) {
          break;
        }
        --v76;
        if (*(void *)(*(void *)(v70 + 24) + 8 * v77) != *(void *)(v69[3] + 8 * v77)) {
          goto LABEL_141;
        }
      }
      int v76 = v75;
LABEL_141:
      uint64_t v193 = *a2;
      uint64_t v194 = *(int **)*a2;
      uint64_t v195 = (*(void *)(*a2 + 8) - (void)v194) >> 2;
      uint64_t v196 = (v195 - 1);
      if ((int)v196 >= -1) {
        int v197 = -1;
      }
      else {
        int v197 = v195 - 1;
      }
      int v198 = v197 + 1;
      int v199 = v195 + 1;
      while (1)
      {
        unsigned int v200 = v199 - 2;
        if (v199 - 2 < 0) {
          break;
        }
        --v199;
        if (*(void *)(*(void *)(v193 + 24) + 8 * v200) != *(void *)(v69[3] + 8 * v200)) {
          goto LABEL_190;
        }
      }
      int v199 = v198;
LABEL_190:
      int v236 = v72 + 1;
      while (1)
      {
        unsigned int v237 = v236 - 2;
        if (v236 - 2 < 0) {
          break;
        }
        --v236;
        if (*(void *)(*(void *)(v70 + 24) + 8 * v237)) {
          goto LABEL_225;
        }
      }
      int v236 = v75;
LABEL_225:
      int v250 = v195 + 1;
      while (1)
      {
        unsigned int v251 = v250 - 2;
        if (v250 - 2 < 0) {
          break;
        }
        --v250;
        if (*(void *)(*(void *)(v193 + 24) + 8 * v251)) {
          goto LABEL_321;
        }
      }
      int v250 = v198;
LABEL_321:
      unint64_t v300 = (uint64_t)(v69[1] - *v69) >> 2;
      if (v76 <= v199) {
        int v301 = v199;
      }
      else {
        int v301 = v76;
      }
      if (v76 <= v250) {
        int v76 = v250;
      }
      if (v236 > v199) {
        int v199 = v236;
      }
      if (v300 > v199)
      {
        int v302 = 1;
      }
      else
      {
        int v199 = (uint64_t)(v69[1] - *v69) >> 2;
        int v302 = 4;
      }
      if (v300 > v76)
      {
        int v303 = 2;
      }
      else
      {
        int v76 = v199;
        int v303 = v302;
      }
      if (v300 > v301)
      {
        int v76 = v301;
        int v303 = 3;
      }
      uint64_t v1851 = v196;
      uint64_t v1872 = v73;
      if (!v76) {
        goto LABEL_351;
      }
      unint64_t v304 = *(void *)(v69[3] + 8 * (v76 - 1));
      if (v304 < 0x10) {
        goto LABEL_351;
      }
      switch(v303)
      {
        case 1:
          if (v76 == 2)
          {
            int v1433 = *v71;
            if (*v71)
            {
              unint64_t v1434 = 0;
              uint64_t v1435 = 0;
              uint64_t v1436 = 0;
              uint64_t v1437 = *(void *)(v70 + 152);
              uint64_t v1438 = *(void *)(v193 + 152);
              uint64_t v1439 = v69[19];
              uint64_t v1440 = *(uint64_t **)(v70 + 24);
              uint64_t v1441 = *v1440;
              uint64_t v1442 = v1440[1];
              unint64_t v1443 = *(uint64_t **)(v193 + 24);
              uint64_t v1444 = *v1443;
              uint64_t v1445 = v1443[1];
              int v1446 = v71[1];
              int v1447 = v1446;
              do
              {
                if (v1447)
                {
                  unint64_t v1448 = 0;
                  uint64_t v1449 = v1438 + 4 * v1435;
                  do
                  {
                    if ((int)v304 >= 1)
                    {
                      uint64_t v1450 = 0;
                      int v1451 = *(_DWORD *)(v1437 + 4 * v1436);
                      unsigned int v1452 = v304 + 1;
                      do
                      {
                        *(_DWORD *)(v1439 + v1450) = v1451 - *(_DWORD *)(v1449 + v1450);
                        --v1452;
                        v1450 += 4;
                      }
                      while (v1452 > 1);
                      int v1446 = v71[1];
                    }
                    v1436 += v1442;
                    v1435 += v1445;
                    v1439 += 4 * (int)v304;
                    ++v1448;
                    v1449 += 4 * v1445;
                  }
                  while (v1448 < v1446);
                  uint64_t v1453 = v1446;
                  int v1433 = *v71;
                  int v1447 = v1446;
                }
                else
                {
                  uint64_t v1453 = 0;
                }
                uint64_t v1436 = v1436 + v1441 - v1453 * v1442;
                uint64_t v1435 = v1435 + v1444 - v1445 * v194[1];
                ++v1434;
              }
              while (v1434 < v1433);
            }
          }
          else
          {
            uint64_t v1830 = *a1;
            if (v76 == 1)
            {
              int v975 = *v71;
              if (*v71)
              {
                unint64_t v976 = 0;
                uint64_t v977 = 0;
                uint64_t v978 = *(void *)(v70 + 152);
                uint64_t v979 = *(void *)(v193 + 152);
                uint64_t v980 = v69[19];
                uint64_t v981 = **(void **)(v70 + 24);
                uint64_t v982 = 4 * **(void **)(v193 + 24);
                do
                {
                  if ((int)v304 >= 1)
                  {
                    uint64_t v983 = 0;
                    int v984 = *(_DWORD *)(v978 + 4 * v977);
                    unsigned int v985 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v980 + v983) = v984 - *(_DWORD *)(v979 + v983);
                      --v985;
                      v983 += 4;
                    }
                    while (v985 > 1);
                    int v975 = *v71;
                  }
                  v977 += v981;
                  ++v976;
                  v980 += 4 * (int)v304;
                  v979 += v982;
                }
                while (v976 < v975);
              }
            }
            else
            {
              unint64_t v1795 = v69[6];
              if (v1795)
              {
                unint64_t v1454 = 0;
                uint64_t v1757 = *(void *)(v193 + 152);
                uint64_t v1767 = *(void *)(v70 + 152);
                uint64_t v1455 = v69[19];
                do
                {
                  uint64_t v1456 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v1457) = 0;
                  }
                  else
                  {
                    uint64_t v1457 = 0;
                    uint64_t v1458 = *(void *)(v1830 + 24);
                    int v1459 = v1454;
                    do
                    {
                      ldiv_t v1460 = ldiv(v1459, v71[v1456]);
                      int v1459 = v1460.quot;
                      v1457 += *(void *)(v1458 + 8 * v1456--) * v1460.rem;
                    }
                    while (v1456 != -1);
                  }
                  uint64_t v1461 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v1462) = 0;
                  }
                  else
                  {
                    uint64_t v1462 = 0;
                    uint64_t v1463 = *(void *)(v193 + 24);
                    int v1464 = v1454;
                    do
                    {
                      ldiv_t v1465 = ldiv(v1464, v194[v1461]);
                      int v1464 = v1465.quot;
                      v1462 += *(void *)(v1463 + 8 * v1461--) * v1465.rem;
                    }
                    while (v1461 != -1);
                  }
                  if ((int)v304 >= 1)
                  {
                    uint64_t v1466 = 0;
                    int v1467 = *(_DWORD *)(v1767 + 4 * (int)v1457);
                    unsigned int v1468 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v1455 + v1466) = v1467 - *(_DWORD *)(v1757 + 4 * (int)v1462 + v1466);
                      --v1468;
                      v1466 += 4;
                    }
                    while (v1468 > 1);
                  }
                  v1455 += 4 * (int)v304;
                  v1454 += (int)v304;
                }
                while (v1454 < v1795);
              }
            }
          }
          break;
        case 2:
          if (v76 == 2)
          {
            int v1469 = *v71;
            if (*v71)
            {
              uint64_t v1470 = 0;
              uint64_t v1471 = 0;
              unint64_t v1864 = 0;
              uint64_t v1887 = *(void *)(v70 + 152);
              uint64_t v1472 = (int *)v69[19];
              uint64_t v1839 = *(void *)(v193 + 152);
              vDSP_Length v1473 = (int)v304;
              uint64_t v1474 = 4 * (int)v304;
              do
              {
                if (v71[1])
                {
                  unint64_t v1475 = 0;
                  do
                  {
                    int __B = -*(_DWORD *)(v1839 + 4 * v1470);
                    vDSP_vsaddi((const int *)(v1887 + 4 * v1471), 1, &__B, v1472, 1, v1473);
                    uint64_t v70 = *a1;
                    unint64_t v1476 = *(void **)(*a1 + 24);
                    uint64_t v1477 = v1476[1];
                    v1471 += v1477;
                    uint64_t v1478 = *(void **)(*a2 + 24);
                    uint64_t v1479 = v1478[1];
                    v1470 += v1479;
                    ++v1475;
                    uint64_t v71 = *(int **)*a1;
                    unint64_t v1480 = v71[1];
                    uint64_t v1472 = (int *)((char *)v1472 + v1474);
                  }
                  while (v1475 < v1480);
                  int v1469 = *v71;
                  uint64_t v193 = *a2;
                  uint64_t v194 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1480 = 0;
                  unint64_t v1476 = *(void **)(v70 + 24);
                  uint64_t v1477 = v1476[1];
                  uint64_t v1478 = *(void **)(v193 + 24);
                  uint64_t v1479 = v1478[1];
                }
                uint64_t v1471 = *v1476 + v1471 - v1480 * v1477;
                uint64_t v1470 = *v1478 + v1470 - v1479 * v194[1];
                ++v1864;
              }
              while (v1864 < v1469);
            }
          }
          else if (v76 == 1)
          {
            if (*v71)
            {
              unint64_t v986 = 0;
              uint64_t v987 = 0;
              uint64_t v988 = 0;
              uint64_t v989 = *(void *)(v70 + 152);
              uint64_t v990 = *(void *)(v193 + 152);
              vDSP_Length v991 = (int)v304;
              uint64_t v992 = 4 * (int)v304;
              int v993 = (int *)v69[19];
              do
              {
                int __B = -*(_DWORD *)(v990 + 4 * v987);
                vDSP_vsaddi((const int *)(v989 + 4 * v988), 1, &__B, v993, 1, v991);
                v988 += **(void **)(*a1 + 24);
                v987 += **(void **)(*a2 + 24);
                ++v986;
                int v993 = (int *)((char *)v993 + v992);
              }
              while (v986 < **(int **)*a1);
            }
          }
          else if (v69[6])
          {
            unint64_t v1481 = 0;
            uint64_t v1865 = *(void *)(v193 + 152);
            uint64_t v1888 = *(void *)(v70 + 152);
            vDSP_Length v1840 = (int)v304;
            uint64_t v1482 = (int *)v69[19];
            do
            {
              uint64_t v1483 = *(void *)*a1;
              unint64_t v1484 = (unint64_t)(*(void *)(*a1 + 8) - v1483) >> 2;
              uint64_t v1485 = 0;
              uint64_t v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                uint64_t v1487 = *(void *)(*a1 + 24);
                int v1488 = v1481;
                do
                {
                  ldiv_t v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  int v1488 = v1489.quot;
                  v1485 += *(void *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              uint64_t v1490 = *(void *)*a2;
              unint64_t v1491 = (unint64_t)(*(void *)(*a2 + 8) - v1490) >> 2;
              uint64_t v1492 = 0;
              uint64_t v1493 = (v1491 - 1);
              if ((int)v1491 - 1 >= 0)
              {
                uint64_t v1494 = *(void *)(*a2 + 24);
                int v1495 = v1481;
                do
                {
                  ldiv_t v1496 = ldiv(v1495, *(int *)(v1490 + 4 * v1493));
                  int v1495 = v1496.quot;
                  v1492 += *(void *)(v1494 + 8 * v1493--) * v1496.rem;
                }
                while (v1493 != -1);
              }
              int __B = -*(_DWORD *)(v1865 + 4 * (int)v1492);
              vDSP_vsaddi((const int *)(v1888 + 4 * (int)v1485), 1, &__B, v1482, 1, v1840);
              v1482 += v1840;
              v1481 += v1840;
            }
            while (v1481 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v76 == 2)
          {
            int v1134 = *v71;
            if (*v71)
            {
              unint64_t v1135 = 0;
              uint64_t v1136 = 0;
              uint64_t v1137 = 0;
              uint64_t v1138 = *(void *)(v70 + 152);
              uint64_t v1139 = *(void *)(v193 + 152);
              uint64_t v1140 = v69[19];
              unint64_t v1141 = *(uint64_t **)(v70 + 24);
              uint64_t v1142 = *v1141;
              uint64_t v1143 = v1141[1];
              uint64_t v1144 = *(uint64_t **)(v193 + 24);
              uint64_t v1145 = *v1144;
              uint64_t v1146 = v1144[1];
              int v1147 = v71[1];
              int v1148 = v1147;
              do
              {
                if (v1148)
                {
                  unint64_t v1149 = 0;
                  uint64_t v1150 = v1139 + 4 * v1136;
                  uint64_t v1151 = v1138 + 4 * v1137;
                  do
                  {
                    if ((int)v304 >= 1)
                    {
                      uint64_t v1152 = 0;
                      unsigned int v1153 = v304 + 1;
                      do
                      {
                        *(_DWORD *)(v1140 + v1152) = *(_DWORD *)(v1151 + v1152) - *(_DWORD *)(v1150 + v1152);
                        --v1153;
                        v1152 += 4;
                      }
                      while (v1153 > 1);
                      int v1147 = v71[1];
                    }
                    v1137 += v1143;
                    v1136 += v1146;
                    v1140 += 4 * (int)v304;
                    ++v1149;
                    v1150 += 4 * v1146;
                    v1151 += 4 * v1143;
                  }
                  while (v1149 < v1147);
                  uint64_t v1154 = v1147;
                  int v1134 = *v71;
                  int v1148 = v1147;
                }
                else
                {
                  uint64_t v1154 = 0;
                }
                uint64_t v1137 = v1137 + v1142 - v1154 * v1143;
                uint64_t v1136 = v1136 + v1145 - v1146 * v194[1];
                ++v1135;
              }
              while (v1135 < v1134);
            }
          }
          else
          {
            uint64_t v1817 = *a1;
            if (v76 == 1)
            {
              int v305 = *v71;
              if (*v71)
              {
                unint64_t v306 = 0;
                uint64_t v307 = *(void *)(v70 + 152);
                uint64_t v308 = *(void *)(v193 + 152);
                uint64_t v309 = v69[19];
                uint64_t v310 = 4 * **(void **)(v193 + 24);
                uint64_t v311 = 4 * **(void **)(v70 + 24);
                do
                {
                  if ((int)v304 >= 1)
                  {
                    uint64_t v312 = 0;
                    unsigned int v313 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v309 + v312) = *(_DWORD *)(v307 + v312) - *(_DWORD *)(v308 + v312);
                      --v313;
                      v312 += 4;
                    }
                    while (v313 > 1);
                    int v305 = *v71;
                  }
                  ++v306;
                  v309 += 4 * (int)v304;
                  v308 += v310;
                  v307 += v311;
                }
                while (v306 < v305);
              }
            }
            else
            {
              unint64_t v1788 = v69[6];
              if (v1788)
              {
                unint64_t v1155 = 0;
                uint64_t v1753 = *(void *)(v193 + 152);
                uint64_t v1762 = *(void *)(v70 + 152);
                uint64_t v1156 = v69[19];
                do
                {
                  uint64_t v1157 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v1158) = 0;
                  }
                  else
                  {
                    uint64_t v1158 = 0;
                    uint64_t v1159 = *(void *)(v1817 + 24);
                    int v1160 = v1155;
                    do
                    {
                      ldiv_t v1161 = ldiv(v1160, v71[v1157]);
                      int v1160 = v1161.quot;
                      v1158 += *(void *)(v1159 + 8 * v1157--) * v1161.rem;
                    }
                    while (v1157 != -1);
                  }
                  uint64_t v1162 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v1163) = 0;
                  }
                  else
                  {
                    uint64_t v1163 = 0;
                    uint64_t v1164 = *(void *)(v193 + 24);
                    int v1165 = v1155;
                    do
                    {
                      ldiv_t v1166 = ldiv(v1165, v194[v1162]);
                      int v1165 = v1166.quot;
                      v1163 += *(void *)(v1164 + 8 * v1162--) * v1166.rem;
                    }
                    while (v1162 != -1);
                  }
                  if ((int)v304 >= 1)
                  {
                    uint64_t v1167 = 0;
                    unsigned int v1168 = v304 + 1;
                    do
                    {
                      *(_DWORD *)(v1156 + v1167) = *(_DWORD *)(v1762 + 4 * (int)v1158 + v1167)
                                                 - *(_DWORD *)(v1753 + 4 * (int)v1163 + v1167);
                      --v1168;
                      v1167 += 4;
                    }
                    while (v1168 > 1);
                  }
                  v1156 += 4 * (int)v304;
                  v1155 += (int)v304;
                }
                while (v1155 < v1788);
              }
            }
          }
          break;
        default:
LABEL_351:
          switch(v300)
          {
            case 1uLL:
              uint64_t v314 = v69[6];
              if (v314)
              {
                uint64_t v315 = *(_DWORD **)(v70 + 152);
                uint64_t v316 = *(_DWORD **)(v193 + 152);
                uint64_t v317 = (_DWORD *)v69[19];
                uint64_t v318 = 4 * **(void **)(v193 + 24);
                uint64_t v319 = 4 * **(void **)(v70 + 24);
                do
                {
                  *v317++ = *v315 - *v316;
                  uint64_t v316 = (_DWORD *)((char *)v316 + v318);
                  uint64_t v315 = (_DWORD *)((char *)v315 + v319);
                  --v314;
                }
                while (v314);
              }
              break;
            case 2uLL:
              int v560 = *v71;
              if (*v71)
              {
                unint64_t v561 = 0;
                uint64_t v562 = 0;
                uint64_t v563 = 0;
                uint64_t v564 = 0;
                uint64_t v565 = *(void *)(v70 + 152);
                uint64_t v566 = *(void *)(v193 + 152);
                uint64_t v567 = v69[19];
                uint64_t v568 = *(uint64_t **)(v70 + 24);
                uint64_t v569 = *v568;
                uint64_t v570 = v568[1];
                unint64_t v571 = *(uint64_t **)(v193 + 24);
                uint64_t v573 = *v571;
                uint64_t v572 = v571[1];
                int v574 = v71[1];
                do
                {
                  if (v574)
                  {
                    for (unint64_t i = 0; i < v574; ++i)
                    {
                      *(_DWORD *)(v567 + 4 * v562 + 4 * i) = *(_DWORD *)(v565 + 4 * v564) - *(_DWORD *)(v566 + 4 * v563);
                      v564 += v570;
                      v563 += v572;
                      int v574 = v71[1];
                    }
                    uint64_t v576 = v574;
                    int v560 = *v71;
                    v562 += i;
                  }
                  else
                  {
                    uint64_t v576 = 0;
                  }
                  uint64_t v564 = v564 + v569 - v576 * v570;
                  uint64_t v563 = v563 + v573 - v572 * v194[1];
                  ++v561;
                }
                while (v561 < v560);
              }
              break;
            case 3uLL:
              int v577 = *v71;
              if (*v71)
              {
                unint64_t v578 = 0;
                uint64_t v579 = 0;
                uint64_t v580 = 0;
                uint64_t v581 = 0;
                uint64_t v582 = *(void *)(v70 + 152);
                uint64_t v583 = *(void *)(v193 + 152);
                uint64_t v584 = v69[19];
                unint64_t v585 = *(uint64_t **)(v70 + 24);
                uint64_t v586 = *v585;
                uint64_t v587 = v585[1];
                uint64_t v588 = *(uint64_t **)(v193 + 24);
                uint64_t v589 = *v588;
                uint64_t v590 = v588[1];
                int v591 = v71[1];
                int v592 = v591;
                do
                {
                  if (v592)
                  {
                    unint64_t v593 = 0;
                    uint64_t v594 = v585[2];
                    uint64_t v595 = v588[2];
                    int v596 = v71[2];
                    do
                    {
                      if (v596)
                      {
                        for (unint64_t j = 0; j < v596; ++j)
                        {
                          *(_DWORD *)(v584 + 4 * v579 + 4 * j) = *(_DWORD *)(v582 + 4 * v581)
                                                               - *(_DWORD *)(v583 + 4 * v580);
                          v581 += v594;
                          v580 += v595;
                          int v596 = v71[2];
                        }
                        uint64_t v598 = v596;
                        int v591 = v71[1];
                        v579 += j;
                      }
                      else
                      {
                        uint64_t v598 = 0;
                      }
                      uint64_t v581 = v581 + v587 - v598 * v594;
                      uint64_t v580 = v580 + v590 - v595 * v194[2];
                      ++v593;
                    }
                    while (v593 < v591);
                    uint64_t v599 = v591;
                    int v577 = *v71;
                    int v592 = v591;
                  }
                  else
                  {
                    uint64_t v599 = 0;
                  }
                  uint64_t v581 = v581 + v586 - v599 * v587;
                  uint64_t v580 = v580 + v589 - v590 * v194[1];
                  ++v578;
                }
                while (v578 < v577);
              }
              break;
            case 4uLL:
              int v600 = *v71;
              if (*v71)
              {
                unint64_t v601 = 0;
                uint64_t v602 = 0;
                uint64_t v603 = 0;
                uint64_t v604 = 0;
                uint64_t v605 = *(void *)(v70 + 152);
                uint64_t v606 = *(void *)(v193 + 152);
                uint64_t v607 = v69[19];
                int v608 = *(uint64_t **)(v70 + 24);
                uint64_t v609 = *v608;
                uint64_t v610 = v608[1];
                uint64_t v611 = *(uint64_t **)(v193 + 24);
                uint64_t v612 = *v611;
                uint64_t v613 = v611[1];
                int v614 = v71[1];
                int v615 = v614;
                do
                {
                  if (v615)
                  {
                    unint64_t v616 = 0;
                    uint64_t v617 = v608[2];
                    uint64_t v618 = v611[2];
                    int v619 = v71[2];
                    int v620 = v619;
                    do
                    {
                      if (v620)
                      {
                        unint64_t v621 = 0;
                        uint64_t v622 = v608[3];
                        uint64_t v623 = v611[3];
                        int v624 = v71[3];
                        do
                        {
                          if (v624)
                          {
                            for (unint64_t k = 0; k < v624; ++k)
                            {
                              *(_DWORD *)(v607 + 4 * v602 + 4 * k) = *(_DWORD *)(v605 + 4 * v604)
                                                                   - *(_DWORD *)(v606 + 4 * v603);
                              v604 += v622;
                              v603 += v623;
                              int v624 = v71[3];
                            }
                            uint64_t v626 = v624;
                            int v619 = v71[2];
                            v602 += k;
                          }
                          else
                          {
                            uint64_t v626 = 0;
                          }
                          uint64_t v604 = v604 + v617 - v626 * v622;
                          uint64_t v603 = v603 + v618 - v623 * v194[3];
                          ++v621;
                        }
                        while (v621 < v619);
                        uint64_t v627 = v619;
                        int v614 = v71[1];
                        int v620 = v619;
                      }
                      else
                      {
                        uint64_t v627 = 0;
                      }
                      uint64_t v604 = v604 + v610 - v627 * v617;
                      uint64_t v603 = v603 + v613 - v618 * v194[2];
                      ++v616;
                    }
                    while (v616 < v614);
                    uint64_t v628 = v614;
                    int v600 = *v71;
                    int v615 = v614;
                  }
                  else
                  {
                    uint64_t v628 = 0;
                  }
                  uint64_t v604 = v604 + v609 - v628 * v610;
                  uint64_t v603 = v603 + v612 - v613 * v194[1];
                  ++v601;
                }
                while (v601 < v600);
              }
              break;
            default:
              uint64_t v547 = v69[6];
              if (v547)
              {
                uint64_t v548 = v70;
                uint64_t v549 = 0;
                vDSP_Length __Nb = *(void *)(v193 + 152);
                uint64_t v1823 = *(void *)(v70 + 152);
                uint64_t v1781 = v69[19];
                do
                {
                  uint64_t v550 = v1872;
                  if ((v1872 & 0x80000000) != 0)
                  {
                    LODWORD(v551) = 0;
                  }
                  else
                  {
                    uint64_t v551 = 0;
                    uint64_t v552 = *(void *)(v548 + 24);
                    int v553 = v549;
                    do
                    {
                      ldiv_t v554 = ldiv(v553, v71[v550]);
                      int v553 = v554.quot;
                      v551 += *(void *)(v552 + 8 * v550--) * v554.rem;
                    }
                    while (v550 != -1);
                  }
                  uint64_t v555 = v1851;
                  if ((v1851 & 0x80000000) != 0)
                  {
                    LODWORD(v556) = 0;
                  }
                  else
                  {
                    uint64_t v556 = 0;
                    uint64_t v557 = *(void *)(v193 + 24);
                    int v558 = v549;
                    do
                    {
                      ldiv_t v559 = ldiv(v558, v194[v555]);
                      int v558 = v559.quot;
                      v556 += *(void *)(v557 + 8 * v555--) * v559.rem;
                    }
                    while (v555 != -1);
                  }
                  *(_DWORD *)(v1781 + 4 * v549++) = *(_DWORD *)(v1823 + 4 * (int)v551)
                                                  - *(_DWORD *)(__Nb + 4 * (int)v556);
                }
                while (v549 != v547);
              }
              break;
          }
          break;
      }
      break;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          char v7 = **(unsigned char **)(*a1 + 152) - **(unsigned char **)(*a2 + 152);
LABEL_16:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v94 = *(_DWORD *)(*a2 + 160);
          if (v94 >= 1)
          {
            char v95 = **(unsigned char **)(*a1 + 152);
            int v96 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v97 = *(char **)(*a2 + 152);
            unsigned int v98 = v94 + 1;
            do
            {
              char v99 = *v97++;
              *v96++ = v95 - v99;
              --v98;
            }
            while (v98 > 1);
          }
          return;
        case 2:
          vDSP_Length v26 = *(int **)(*(void *)a3 + 152);
          uint64_t v27 = *(const int **)(*a1 + 152);
          vDSP_Length v28 = *(void *)(*a1 + 160);
          int v29 = **(char **)(*a2 + 152);
          goto LABEL_72;
        case 3:
          int v101 = *(_DWORD *)(*(void *)a3 + 48);
          if (v101 >= 1)
          {
            unsigned int v102 = *(unsigned char **)(*(void *)a3 + 152);
            ldiv_t v103 = *(char **)(*a2 + 152);
            uint64_t v104 = *(char **)(*a1 + 152);
            unsigned int v105 = v101 + 1;
            do
            {
              char v107 = *v104++;
              char v106 = v107;
              char v108 = *v103++;
              *v102++ = v106 - v108;
              --v105;
            }
            while (v105 > 1);
          }
          return;
        default:
          int v86 = *(void **)a3;
          uint64_t v87 = *a1;
          int v88 = *(int **)*a1;
          uint64_t v89 = (*(void *)(*a1 + 8) - (void)v88) >> 2;
          int v90 = v89 - 1;
          if ((int)v89 - 1 >= -1) {
            int v90 = -1;
          }
          int v91 = v90 + 1;
          int v92 = v89 + 1;
          break;
      }
      while (1)
      {
        unsigned int v93 = v92 - 2;
        if (v92 - 2 < 0) {
          break;
        }
        --v92;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v93) != *(void *)(v86[3] + 8 * v93)) {
          goto LABEL_149;
        }
      }
      int v92 = v91;
LABEL_149:
      uint64_t v201 = (int **)*a2;
      uint64_t v202 = *(int **)*a2;
      uint64_t v203 = (*(void *)(*a2 + 8) - (void)v202) >> 2;
      int v204 = v203 - 1;
      if ((int)v203 - 1 >= -1) {
        int v204 = -1;
      }
      int v205 = v204 + 1;
      int v206 = v203 + 1;
      while (1)
      {
        unsigned int v207 = v206 - 2;
        if (v206 - 2 < 0) {
          break;
        }
        --v206;
        if (*(void *)&v201[3][2 * v207] != *(void *)(v86[3] + 8 * v207)) {
          goto LABEL_195;
        }
      }
      int v206 = v205;
LABEL_195:
      int v238 = v89 + 1;
      while (1)
      {
        unsigned int v239 = v238 - 2;
        if (v238 - 2 < 0) {
          break;
        }
        --v238;
        if (*(void *)(*(void *)(v87 + 24) + 8 * v239)) {
          goto LABEL_230;
        }
      }
      int v238 = v91;
LABEL_230:
      int v252 = v203 + 1;
      while (1)
      {
        int v253 = v252 - 2;
        if (v252 - 2 < 0) {
          break;
        }
        --v252;
        if (*(void *)&v201[3][2 * v253]) {
          goto LABEL_357;
        }
      }
      int v252 = v205;
LABEL_357:
      unint64_t v320 = (uint64_t)(v86[1] - *v86) >> 2;
      if (v92 <= v206) {
        int v321 = v206;
      }
      else {
        int v321 = v92;
      }
      if (v92 <= v252) {
        int v92 = v252;
      }
      if (v238 > v206) {
        int v206 = v238;
      }
      if (v320 > v206)
      {
        int v322 = 1;
      }
      else
      {
        int v206 = (uint64_t)(v86[1] - *v86) >> 2;
        int v322 = 4;
      }
      if (v320 > v92)
      {
        int v323 = 2;
      }
      else
      {
        int v92 = v206;
        int v323 = v322;
      }
      if (v320 > v321)
      {
        int v92 = v321;
        int v323 = 3;
      }
      if (!v92) {
        goto LABEL_387;
      }
      unint64_t v324 = *(void *)(v86[3] + 8 * (v92 - 1));
      if (v324 < 0x10) {
        goto LABEL_387;
      }
      uint64_t v1852 = *(void *)(v86[3] + 8 * (v92 - 1));
      switch(v323)
      {
        case 1:
          if (v92 == 2)
          {
            int v1497 = *v88;
            if (*v88)
            {
              unint64_t v1498 = 0;
              uint64_t v1499 = 0;
              uint64_t v1500 = 0;
              uint64_t v1501 = *(void *)(v87 + 152);
              unint64_t v1502 = v201[19];
              uint64_t v1503 = v86[19];
              do
              {
                if (v88[1])
                {
                  unint64_t v1504 = 0;
                  do
                  {
                    if ((int)v324 >= 1)
                    {
                      uint64_t v1505 = 0;
                      char v1506 = *(unsigned char *)(v1501 + v1500);
                      unsigned int v1507 = v324 + 1;
                      do
                      {
                        *(unsigned char *)(v1503 + v1505) = v1506 - *((unsigned char *)v1502 + v1499 + v1505);
                        --v1507;
                        ++v1505;
                      }
                      while (v1507 > 1);
                      uint64_t v87 = *a1;
                      uint64_t v201 = (int **)*a2;
                      int v88 = *(int **)*a1;
                    }
                    uint64_t v1508 = *(void **)(v87 + 24);
                    uint64_t v1509 = v1508[1];
                    v1500 += v1509;
                    v1499 += *((void *)v201[3] + 1);
                    v1503 += (int)v324;
                    ++v1504;
                    unint64_t v1510 = v88[1];
                  }
                  while (v1504 < v1510);
                  int v1497 = *v88;
                  uint64_t v202 = *v201;
                }
                else
                {
                  unint64_t v1510 = 0;
                  uint64_t v1508 = *(void **)(v87 + 24);
                  uint64_t v1509 = v1508[1];
                }
                uint64_t v1500 = *v1508 + v1500 - v1510 * v1509;
                uint64_t v1499 = *(void *)v201[3] + v1499 - *((void *)v201[3] + 1) * v202[1];
                ++v1498;
              }
              while (v1498 < v1497);
            }
          }
          else if (v92 == 1)
          {
            int v994 = *v88;
            if (*v88)
            {
              unint64_t v995 = 0;
              uint64_t v996 = 0;
              uint64_t v997 = 0;
              uint64_t v998 = *(void *)(v87 + 152);
              uint64_t v999 = v201[19];
              uint64_t v1000 = v86[19];
              do
              {
                if ((int)v324 >= 1)
                {
                  uint64_t v1001 = 0;
                  char v1002 = *(unsigned char *)(v998 + v997);
                  unsigned int v1003 = v324 + 1;
                  do
                  {
                    *(unsigned char *)(v1000 + v1001) = v1002 - *((unsigned char *)v999 + v996 + v1001);
                    --v1003;
                    ++v1001;
                  }
                  while (v1003 > 1);
                  uint64_t v87 = *a1;
                  uint64_t v201 = (int **)*a2;
                  int v994 = **(_DWORD **)*a1;
                }
                v997 += **(void **)(v87 + 24);
                v996 += *(void *)v201[3];
                v1000 += (int)v324;
                ++v995;
              }
              while (v995 < v994);
            }
          }
          else if (v86[6])
          {
            unint64_t v1889 = 0;
            ldiv_t v1796 = v201[19];
            __Nunint64_t k = *(void *)(v87 + 152);
            uint64_t v1841 = (int)v324;
            unsigned int v1778 = v324 + 1;
            uint64_t v1511 = v86[19];
            do
            {
              uint64_t v1512 = *(void *)*a1;
              unint64_t v1513 = (unint64_t)(*(void *)(*a1 + 8) - v1512) >> 2;
              uint64_t v1514 = 0;
              uint64_t v1515 = (v1513 - 1);
              if ((int)v1513 - 1 >= 0)
              {
                uint64_t v1516 = *(void *)(*a1 + 24);
                int v1517 = v1889;
                do
                {
                  ldiv_t v1518 = ldiv(v1517, *(int *)(v1512 + 4 * v1515));
                  int v1517 = v1518.quot;
                  v1514 += *(void *)(v1516 + 8 * v1515--) * v1518.rem;
                }
                while (v1515 != -1);
              }
              uint64_t v1519 = *(void *)*a2;
              unint64_t v1520 = (unint64_t)(*(void *)(*a2 + 8) - v1519) >> 2;
              uint64_t v1521 = 0;
              uint64_t v1522 = (v1520 - 1);
              if ((int)v1520 - 1 >= 0)
              {
                uint64_t v1523 = *(void *)(*a2 + 24);
                int v1524 = v1889;
                do
                {
                  ldiv_t v1525 = ldiv(v1524, *(int *)(v1519 + 4 * v1522));
                  int v1524 = v1525.quot;
                  v1521 += *(void *)(v1523 + 8 * v1522--) * v1525.rem;
                }
                while (v1522 != -1);
              }
              if ((int)v1852 >= 1)
              {
                uint64_t v1526 = 0;
                char v1527 = *(unsigned char *)(__Nk + (int)v1514);
                unsigned int v1528 = v1778;
                do
                {
                  *(unsigned char *)(v1511 + v1526) = v1527 - *((unsigned char *)v1796 + (int)v1521 + v1526);
                  --v1528;
                  ++v1526;
                }
                while (v1528 > 1);
                int v86 = *(void **)a3;
              }
              v1511 += v1841;
              v1889 += v1841;
            }
            while (v1889 < v86[6]);
          }
          break;
        case 2:
          if (v92 == 2)
          {
            int v1529 = *v88;
            if (*v88)
            {
              unint64_t v1530 = 0;
              uint64_t v1531 = 0;
              uint64_t v1532 = 0;
              uint64_t v1533 = *(void *)(v87 + 152);
              uint64_t v1534 = v201[19];
              vDSP_Length v1535 = (int)v324;
              unint64_t v1536 = (int *)v86[19];
              do
              {
                if (v88[1])
                {
                  unint64_t v1537 = 0;
                  do
                  {
                    int __B = -*((char *)v1534 + v1531);
                    vDSP_vsaddi((const int *)(v1533 + v1532), 1, &__B, v1536, 1, v1535);
                    uint64_t v87 = *a1;
                    unint64_t v1538 = *(void **)(*a1 + 24);
                    uint64_t v1539 = v1538[1];
                    v1532 += v1539;
                    uint64_t v201 = (int **)*a2;
                    unint64_t v1540 = *(int **)(*a2 + 24);
                    uint64_t v1541 = *((void *)v1540 + 1);
                    v1531 += v1541;
                    unint64_t v1536 = (int *)((char *)v1536 + v1535);
                    ++v1537;
                    int v88 = *(int **)*a1;
                    unint64_t v1542 = v88[1];
                  }
                  while (v1537 < v1542);
                  int v1529 = *v88;
                  uint64_t v202 = *v201;
                }
                else
                {
                  unint64_t v1542 = 0;
                  unint64_t v1538 = *(void **)(v87 + 24);
                  uint64_t v1539 = v1538[1];
                  unint64_t v1540 = v201[3];
                  uint64_t v1541 = *((void *)v1540 + 1);
                }
                uint64_t v1532 = *v1538 + v1532 - v1542 * v1539;
                uint64_t v1531 = *(void *)v1540 + v1531 - v1541 * v202[1];
                ++v1530;
              }
              while (v1530 < v1529);
            }
          }
          else if (v92 == 1)
          {
            if (*v88)
            {
              unint64_t v1004 = 0;
              uint64_t v1005 = 0;
              uint64_t v1006 = 0;
              uint64_t v1007 = *(void *)(v87 + 152);
              uint64_t v1008 = v201[19];
              vDSP_Length v1009 = (int)v324;
              uint64_t v1010 = (int *)v86[19];
              do
              {
                int __B = -*((char *)v1008 + v1005);
                vDSP_vsaddi((const int *)(v1007 + v1006), 1, &__B, v1010, 1, v1009);
                v1006 += **(void **)(*a1 + 24);
                v1005 += **(void **)(*a2 + 24);
                uint64_t v1010 = (int *)((char *)v1010 + v1009);
                ++v1004;
              }
              while (v1004 < **(int **)*a1);
            }
          }
          else if (v86[6])
          {
            unint64_t v1543 = 0;
            uint64_t v1866 = v201[19];
            uint64_t v1890 = *(void *)(v87 + 152);
            vDSP_Length v1842 = (int)v324;
            unint64_t v1544 = (int *)v86[19];
            do
            {
              uint64_t v1545 = *(void *)*a1;
              unint64_t v1546 = (unint64_t)(*(void *)(*a1 + 8) - v1545) >> 2;
              uint64_t v1547 = 0;
              uint64_t v1548 = (v1546 - 1);
              if ((int)v1546 - 1 >= 0)
              {
                uint64_t v1549 = *(void *)(*a1 + 24);
                int v1550 = v1543;
                do
                {
                  ldiv_t v1551 = ldiv(v1550, *(int *)(v1545 + 4 * v1548));
                  int v1550 = v1551.quot;
                  v1547 += *(void *)(v1549 + 8 * v1548--) * v1551.rem;
                }
                while (v1548 != -1);
              }
              uint64_t v1552 = *(void *)*a2;
              unint64_t v1553 = (unint64_t)(*(void *)(*a2 + 8) - v1552) >> 2;
              uint64_t v1554 = 0;
              uint64_t v1555 = (v1553 - 1);
              if ((int)v1553 - 1 >= 0)
              {
                uint64_t v1556 = *(void *)(*a2 + 24);
                int v1557 = v1543;
                do
                {
                  ldiv_t v1558 = ldiv(v1557, *(int *)(v1552 + 4 * v1555));
                  int v1557 = v1558.quot;
                  v1554 += *(void *)(v1556 + 8 * v1555--) * v1558.rem;
                }
                while (v1555 != -1);
              }
              int __B = -*((char *)v1866 + (int)v1554);
              vDSP_vsaddi((const int *)(v1890 + (int)v1547), 1, &__B, v1544, 1, v1842);
              unint64_t v1544 = (int *)((char *)v1544 + v1842);
              v1543 += v1842;
            }
            while (v1543 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v92 == 2)
          {
            int v1169 = *v88;
            if (*v88)
            {
              unint64_t v1170 = 0;
              uint64_t v1171 = 0;
              uint64_t v1172 = 0;
              uint64_t v1173 = *(void *)(v87 + 152);
              uint64_t v1174 = v201[19];
              uint64_t v1175 = v86[19];
              do
              {
                if (v88[1])
                {
                  unint64_t v1176 = 0;
                  do
                  {
                    if ((int)v324 >= 1)
                    {
                      uint64_t v1177 = 0;
                      unsigned int v1178 = v324 + 1;
                      do
                      {
                        *(unsigned char *)(v1175 + v1177) = *(unsigned char *)(v1173 + v1172 + v1177)
                                                  - *((unsigned char *)v1174 + v1171 + v1177);
                        --v1178;
                        ++v1177;
                      }
                      while (v1178 > 1);
                      uint64_t v87 = *a1;
                      uint64_t v201 = (int **)*a2;
                      int v88 = *(int **)*a1;
                    }
                    unint64_t v1179 = *(void **)(v87 + 24);
                    uint64_t v1180 = v1179[1];
                    v1172 += v1180;
                    v1171 += *((void *)v201[3] + 1);
                    v1175 += (int)v324;
                    ++v1176;
                    unint64_t v1181 = v88[1];
                  }
                  while (v1176 < v1181);
                  int v1169 = *v88;
                  uint64_t v202 = *v201;
                }
                else
                {
                  unint64_t v1181 = 0;
                  unint64_t v1179 = *(void **)(v87 + 24);
                  uint64_t v1180 = v1179[1];
                }
                uint64_t v1172 = *v1179 + v1172 - v1181 * v1180;
                uint64_t v1171 = *(void *)v201[3] + v1171 - *((void *)v201[3] + 1) * v202[1];
                ++v1170;
              }
              while (v1170 < v1169);
            }
          }
          else if (v92 == 1)
          {
            int v325 = *v88;
            if (*v88)
            {
              unint64_t v326 = 0;
              uint64_t v327 = 0;
              uint64_t v328 = 0;
              uint64_t v329 = *(void *)(v87 + 152);
              unint64_t v330 = v201[19];
              uint64_t v331 = v86[19];
              do
              {
                if ((int)v324 >= 1)
                {
                  uint64_t v332 = 0;
                  unsigned int v333 = v324 + 1;
                  do
                  {
                    *(unsigned char *)(v331 + v332) = *(unsigned char *)(v329 + v328 + v332) - *((unsigned char *)v330 + v327 + v332);
                    --v333;
                    ++v332;
                  }
                  while (v333 > 1);
                  uint64_t v87 = *a1;
                  uint64_t v201 = (int **)*a2;
                  int v325 = **(_DWORD **)*a1;
                }
                v328 += **(void **)(v87 + 24);
                v327 += *(void *)v201[3];
                v331 += (int)v324;
                ++v326;
              }
              while (v326 < v325);
            }
          }
          else if (v86[6])
          {
            unint64_t v1882 = 0;
            uint64_t v1789 = v201[19];
            __Nunint64_t i = *(void *)(v87 + 152);
            uint64_t v1835 = (int)v324;
            unsigned int v1775 = v324 + 1;
            uint64_t v1182 = v86[19];
            do
            {
              uint64_t v1183 = *(void *)*a1;
              unint64_t v1184 = (unint64_t)(*(void *)(*a1 + 8) - v1183) >> 2;
              uint64_t v1185 = 0;
              uint64_t v1186 = (v1184 - 1);
              if ((int)v1184 - 1 >= 0)
              {
                uint64_t v1187 = *(void *)(*a1 + 24);
                int v1188 = v1882;
                do
                {
                  ldiv_t v1189 = ldiv(v1188, *(int *)(v1183 + 4 * v1186));
                  int v1188 = v1189.quot;
                  v1185 += *(void *)(v1187 + 8 * v1186--) * v1189.rem;
                }
                while (v1186 != -1);
              }
              uint64_t v1190 = *(void *)*a2;
              unint64_t v1191 = (unint64_t)(*(void *)(*a2 + 8) - v1190) >> 2;
              uint64_t v1192 = 0;
              uint64_t v1193 = (v1191 - 1);
              if ((int)v1191 - 1 >= 0)
              {
                uint64_t v1194 = *(void *)(*a2 + 24);
                int v1195 = v1882;
                do
                {
                  ldiv_t v1196 = ldiv(v1195, *(int *)(v1190 + 4 * v1193));
                  int v1195 = v1196.quot;
                  v1192 += *(void *)(v1194 + 8 * v1193--) * v1196.rem;
                }
                while (v1193 != -1);
              }
              if ((int)v1852 >= 1)
              {
                uint64_t v1197 = 0;
                unsigned int v1198 = v1775;
                do
                {
                  *(unsigned char *)(v1182 + v1197) = *(unsigned char *)(__Ni + (int)v1185 + v1197)
                                            - *((unsigned char *)v1789 + (int)v1192 + v1197);
                  --v1198;
                  ++v1197;
                }
                while (v1198 > 1);
                int v86 = *(void **)a3;
              }
              v1182 += v1835;
              v1882 += v1835;
            }
            while (v1882 < v86[6]);
          }
          break;
        default:
LABEL_387:
          switch(v320)
          {
            case 1uLL:
              if (v86[6])
              {
                unint64_t v334 = 0;
                uint64_t v335 = 0;
                uint64_t v336 = 0;
                uint64_t v337 = *(void *)(v87 + 152);
                uint64_t v338 = v201[19];
                uint64_t v339 = v86[19];
                do
                {
                  *(unsigned char *)(v339 + v334) = *(unsigned char *)(v337 + v336) - *((unsigned char *)v338 + v335);
                  v336 += **(void **)(*a1 + 24);
                  v335 += **(void **)(*a2 + 24);
                  ++v334;
                }
                while (v334 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v645 = *v88;
              if (*v88)
              {
                unint64_t v646 = 0;
                uint64_t v647 = 0;
                uint64_t v648 = 0;
                uint64_t v649 = 0;
                uint64_t v650 = *(void *)(v87 + 152);
                uint64_t v651 = v201[19];
                uint64_t v652 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    unint64_t v653 = 0;
                    do
                    {
                      *(unsigned char *)(v652 + v647 + v653) = *(unsigned char *)(v650 + v649) - *((unsigned char *)v651 + v648);
                      uint64_t v87 = *a1;
                      uint64_t v654 = *(void **)(*a1 + 24);
                      uint64_t v655 = v654[1];
                      v649 += v655;
                      uint64_t v201 = (int **)*a2;
                      int v656 = *(int **)(*a2 + 24);
                      uint64_t v657 = *((void *)v656 + 1);
                      v648 += v657;
                      ++v653;
                      int v88 = *(int **)*a1;
                      unint64_t v658 = v88[1];
                    }
                    while (v653 < v658);
                    int v645 = *v88;
                    uint64_t v202 = *v201;
                    v647 += v653;
                  }
                  else
                  {
                    unint64_t v658 = 0;
                    uint64_t v654 = *(void **)(v87 + 24);
                    uint64_t v655 = v654[1];
                    int v656 = v201[3];
                    uint64_t v657 = *((void *)v656 + 1);
                  }
                  uint64_t v649 = *v654 + v649 - v658 * v655;
                  uint64_t v648 = *(void *)v656 + v648 - v657 * v202[1];
                  ++v646;
                }
                while (v646 < v645);
              }
              break;
            case 3uLL:
              int v659 = *v88;
              if (*v88)
              {
                unint64_t v660 = 0;
                uint64_t v661 = 0;
                uint64_t v662 = 0;
                uint64_t v663 = 0;
                uint64_t v664 = *(void *)(v87 + 152);
                uint64_t v665 = v201[19];
                uint64_t v666 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    unint64_t v667 = 0;
                    do
                    {
                      if (v88[2])
                      {
                        unint64_t v668 = 0;
                        do
                        {
                          *(unsigned char *)(v666 + v661 + v668) = *(unsigned char *)(v664 + v663) - *((unsigned char *)v665 + v662);
                          uint64_t v87 = *a1;
                          uint64_t v669 = *(void **)(*a1 + 24);
                          uint64_t v670 = v669[2];
                          v663 += v670;
                          uint64_t v201 = (int **)*a2;
                          uint64_t v671 = *(int **)(*a2 + 24);
                          uint64_t v672 = *((void *)v671 + 2);
                          v662 += v672;
                          ++v668;
                          int v88 = *(int **)*a1;
                          unint64_t v673 = v88[2];
                        }
                        while (v668 < v673);
                        uint64_t v202 = *v201;
                        v661 += v668;
                      }
                      else
                      {
                        unint64_t v673 = 0;
                        uint64_t v669 = *(void **)(v87 + 24);
                        uint64_t v670 = v669[2];
                        uint64_t v671 = v201[3];
                        uint64_t v672 = *((void *)v671 + 2);
                      }
                      uint64_t v674 = v669[1];
                      uint64_t v663 = v674 + v663 - v673 * v670;
                      uint64_t v662 = *((void *)v671 + 1) + v662 - v672 * v202[2];
                      ++v667;
                      unint64_t v675 = v88[1];
                    }
                    while (v667 < v675);
                    int v659 = *v88;
                  }
                  else
                  {
                    unint64_t v675 = 0;
                    uint64_t v669 = *(void **)(v87 + 24);
                    uint64_t v674 = v669[1];
                  }
                  uint64_t v663 = *v669 + v663 - v675 * v674;
                  uint64_t v662 = *(void *)v201[3] + v662 - *((void *)v201[3] + 1) * v202[1];
                  ++v660;
                }
                while (v660 < v659);
              }
              break;
            case 4uLL:
              int v676 = *v88;
              if (*v88)
              {
                unint64_t v677 = 0;
                uint64_t v678 = 0;
                uint64_t v679 = 0;
                uint64_t v680 = 0;
                uint64_t v681 = *(void *)(v87 + 152);
                uint64_t v682 = v201[19];
                uint64_t v683 = v86[19];
                do
                {
                  if (v88[1])
                  {
                    unint64_t v684 = 0;
                    do
                    {
                      if (v88[2])
                      {
                        unint64_t v685 = 0;
                        do
                        {
                          if (v88[3])
                          {
                            unint64_t v686 = 0;
                            do
                            {
                              *(unsigned char *)(v683 + v678 + v686) = *(unsigned char *)(v681 + v680) - *((unsigned char *)v682 + v679);
                              uint64_t v87 = *a1;
                              uint64_t v687 = *(void **)(*a1 + 24);
                              uint64_t v688 = v687[3];
                              v680 += v688;
                              uint64_t v201 = (int **)*a2;
                              uint64_t v689 = *(int **)(*a2 + 24);
                              uint64_t v690 = *((void *)v689 + 3);
                              v679 += v690;
                              ++v686;
                              int v88 = *(int **)*a1;
                              unint64_t v691 = v88[3];
                            }
                            while (v686 < v691);
                            uint64_t v202 = *v201;
                            v678 += v686;
                          }
                          else
                          {
                            unint64_t v691 = 0;
                            uint64_t v687 = *(void **)(v87 + 24);
                            uint64_t v688 = v687[3];
                            uint64_t v689 = v201[3];
                            uint64_t v690 = *((void *)v689 + 3);
                          }
                          uint64_t v692 = v687[2];
                          uint64_t v680 = v692 + v680 - v691 * v688;
                          uint64_t v679 = *((void *)v689 + 2) + v679 - v690 * v202[3];
                          ++v685;
                          unint64_t v693 = v88[2];
                        }
                        while (v685 < v693);
                      }
                      else
                      {
                        unint64_t v693 = 0;
                        uint64_t v687 = *(void **)(v87 + 24);
                        uint64_t v692 = v687[2];
                      }
                      uint64_t v680 = v687[1] + v680 - v693 * v692;
                      uint64_t v679 = *((void *)v201[3] + 1) + v679 - *((void *)v201[3] + 2) * v202[2];
                      ++v684;
                      unint64_t v694 = v88[1];
                    }
                    while (v684 < v694);
                    int v676 = *v88;
                  }
                  else
                  {
                    unint64_t v694 = 0;
                  }
                  uint64_t v680 = **(void **)(v87 + 24) + v680 - *(void *)(*(void *)(v87 + 24) + 8) * v694;
                  uint64_t v679 = *(void *)v201[3] + v679 - *((void *)v201[3] + 1) * v202[1];
                  ++v677;
                }
                while (v677 < v676);
              }
              break;
            default:
              if (v86[6])
              {
                unint64_t v629 = 0;
                uint64_t v1858 = v201[19];
                uint64_t v1878 = *(void *)(v87 + 152);
                uint64_t v630 = v86[19];
                do
                {
                  uint64_t v631 = *(void *)*a1;
                  unint64_t v632 = (unint64_t)(*(void *)(*a1 + 8) - v631) >> 2;
                  uint64_t v633 = 0;
                  uint64_t v634 = (v632 - 1);
                  if ((int)v632 - 1 >= 0)
                  {
                    uint64_t v635 = *(void *)(*a1 + 24);
                    int v636 = v629;
                    do
                    {
                      ldiv_t v637 = ldiv(v636, *(int *)(v631 + 4 * v634));
                      int v636 = v637.quot;
                      v633 += *(void *)(v635 + 8 * v634--) * v637.rem;
                    }
                    while (v634 != -1);
                  }
                  uint64_t v638 = *(void *)*a2;
                  unint64_t v639 = (unint64_t)(*(void *)(*a2 + 8) - v638) >> 2;
                  uint64_t v640 = 0;
                  uint64_t v641 = (v639 - 1);
                  if ((int)v639 - 1 >= 0)
                  {
                    uint64_t v642 = *(void *)(*a2 + 24);
                    int v643 = v629;
                    do
                    {
                      ldiv_t v644 = ldiv(v643, *(int *)(v638 + 4 * v641));
                      int v643 = v644.quot;
                      v640 += *(void *)(v642 + 8 * v641--) * v644.rem;
                    }
                    while (v641 != -1);
                  }
                  *(unsigned char *)(v630 + v629++) = *(unsigned char *)(v1878 + (int)v633) - *((unsigned char *)v1858 + (int)v640);
                }
                while (v629 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      break;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          int v118 = *(_DWORD *)(*a2 + 160);
          if (v118 >= 1)
          {
            int v119 = **(_DWORD **)(*a1 + 152);
            uint64_t v120 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v121 = *(int **)(*a2 + 152);
            unsigned int v122 = v118 + 1;
            do
            {
              int v123 = *v121++;
              *v120++ = v119 - v123;
              --v122;
            }
            while (v122 > 1);
          }
          return;
        case 2:
          goto LABEL_23;
        case 3:
          int v124 = *(_DWORD *)(*(void *)a3 + 48);
          if (v124 >= 1)
          {
            unsigned int v125 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v126 = *(int **)(*a2 + 152);
            unsigned int v127 = *(int **)(*a1 + 152);
            unsigned int v128 = v124 + 1;
            do
            {
              int v130 = *v127++;
              int v129 = v130;
              int v131 = *v126++;
              *v125++ = v129 - v131;
              --v128;
            }
            while (v128 > 1);
          }
          return;
        default:
          int v109 = *(void **)a3;
          uint64_t v110 = *a1;
          uint64_t v111 = *(int **)*a1;
          uint64_t v112 = (*(void *)(*a1 + 8) - (void)v111) >> 2;
          uint64_t v113 = (v112 - 1);
          if ((int)v113 >= -1) {
            int v114 = -1;
          }
          else {
            int v114 = v112 - 1;
          }
          int v115 = v114 + 1;
          int v116 = v112 + 1;
          break;
      }
      while (1)
      {
        unsigned int v117 = v116 - 2;
        if (v116 - 2 < 0) {
          break;
        }
        --v116;
        if (*(void *)(*(void *)(v110 + 24) + 8 * v117) != *(void *)(v109[3] + 8 * v117)) {
          goto LABEL_156;
        }
      }
      int v116 = v115;
LABEL_156:
      uint64_t v208 = *a2;
      int v209 = *(int **)*a2;
      uint64_t v210 = (*(void *)(*a2 + 8) - (void)v209) >> 2;
      uint64_t v211 = (v210 - 1);
      if ((int)v211 >= -1) {
        int v212 = -1;
      }
      else {
        int v212 = v210 - 1;
      }
      int v213 = v212 + 1;
      int v214 = v210 + 1;
      while (1)
      {
        unsigned int v215 = v214 - 2;
        if (v214 - 2 < 0) {
          break;
        }
        --v214;
        if (*(void *)(*(void *)(v208 + 24) + 8 * v215) != *(void *)(v109[3] + 8 * v215)) {
          goto LABEL_200;
        }
      }
      int v214 = v213;
LABEL_200:
      int v240 = v112 + 1;
      while (1)
      {
        unsigned int v241 = v240 - 2;
        if (v240 - 2 < 0) {
          break;
        }
        --v240;
        if (*(void *)(*(void *)(v110 + 24) + 8 * v241)) {
          goto LABEL_235;
        }
      }
      int v240 = v115;
LABEL_235:
      int v254 = v210 + 1;
      while (1)
      {
        unsigned int v255 = v254 - 2;
        if (v254 - 2 < 0) {
          break;
        }
        --v254;
        if (*(void *)(*(void *)(v208 + 24) + 8 * v255)) {
          goto LABEL_393;
        }
      }
      int v254 = v213;
LABEL_393:
      unint64_t v340 = (uint64_t)(v109[1] - *v109) >> 2;
      if (v116 <= v214) {
        int v341 = v214;
      }
      else {
        int v341 = v116;
      }
      if (v116 <= v254) {
        int v116 = v254;
      }
      if (v240 > v214) {
        int v214 = v240;
      }
      if (v340 > v214)
      {
        int v342 = 1;
      }
      else
      {
        int v214 = (uint64_t)(v109[1] - *v109) >> 2;
        int v342 = 4;
      }
      if (v340 > v116)
      {
        int v343 = 2;
      }
      else
      {
        int v116 = v214;
        int v343 = v342;
      }
      if (v340 > v341)
      {
        int v116 = v341;
        int v343 = 3;
      }
      uint64_t v1853 = v211;
      uint64_t v1873 = v113;
      if (!v116) {
        goto LABEL_423;
      }
      unint64_t v344 = *(void *)(v109[3] + 8 * (v116 - 1));
      if (v344 < 0x10) {
        goto LABEL_423;
      }
      switch(v343)
      {
        case 1:
          if (v116 == 2)
          {
            int v1559 = *v111;
            if (*v111)
            {
              unint64_t v1560 = 0;
              uint64_t v1561 = 0;
              uint64_t v1562 = 0;
              uint64_t v1563 = *(void *)(v110 + 152);
              uint64_t v1564 = *(void *)(v208 + 152);
              uint64_t v1565 = v109[19];
              vDSP_Length v1566 = *(uint64_t **)(v110 + 24);
              uint64_t v1567 = *v1566;
              uint64_t v1568 = v1566[1];
              vDSP_Length v1569 = *(uint64_t **)(v208 + 24);
              uint64_t v1570 = *v1569;
              uint64_t v1571 = v1569[1];
              int v1572 = v111[1];
              int v1573 = v1572;
              do
              {
                if (v1573)
                {
                  unint64_t v1574 = 0;
                  uint64_t v1575 = v1564 + 4 * v1561;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      uint64_t v1576 = 0;
                      int v1577 = *(_DWORD *)(v1563 + 4 * v1562);
                      unsigned int v1578 = v344 + 1;
                      do
                      {
                        *(_DWORD *)(v1565 + v1576) = v1577 - *(_DWORD *)(v1575 + v1576);
                        --v1578;
                        v1576 += 4;
                      }
                      while (v1578 > 1);
                      int v1572 = v111[1];
                    }
                    v1562 += v1568;
                    v1561 += v1571;
                    v1565 += 4 * (int)v344;
                    ++v1574;
                    v1575 += 4 * v1571;
                  }
                  while (v1574 < v1572);
                  uint64_t v1579 = v1572;
                  int v1559 = *v111;
                  int v1573 = v1572;
                }
                else
                {
                  uint64_t v1579 = 0;
                }
                uint64_t v1562 = v1562 + v1567 - v1579 * v1568;
                uint64_t v1561 = v1561 + v1570 - v1571 * v209[1];
                ++v1560;
              }
              while (v1560 < v1559);
            }
          }
          else
          {
            uint64_t v1831 = *a1;
            if (v116 == 1)
            {
              int v1011 = *v111;
              if (*v111)
              {
                unint64_t v1012 = 0;
                uint64_t v1013 = 0;
                uint64_t v1014 = *(void *)(v110 + 152);
                uint64_t v1015 = *(void *)(v208 + 152);
                uint64_t v1016 = v109[19];
                uint64_t v1017 = **(void **)(v110 + 24);
                uint64_t v1018 = 4 * **(void **)(v208 + 24);
                do
                {
                  if ((int)v344 >= 1)
                  {
                    uint64_t v1019 = 0;
                    int v1020 = *(_DWORD *)(v1014 + 4 * v1013);
                    unsigned int v1021 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1016 + v1019) = v1020 - *(_DWORD *)(v1015 + v1019);
                      --v1021;
                      v1019 += 4;
                    }
                    while (v1021 > 1);
                    int v1011 = *v111;
                  }
                  v1013 += v1017;
                  ++v1012;
                  v1016 += 4 * (int)v344;
                  v1015 += v1018;
                }
                while (v1012 < v1011);
              }
            }
            else
            {
              unint64_t v1797 = v109[6];
              if (v1797)
              {
                unint64_t v1580 = 0;
                uint64_t v1758 = *(void *)(v208 + 152);
                uint64_t v1768 = *(void *)(v110 + 152);
                uint64_t v1581 = v109[19];
                do
                {
                  uint64_t v1582 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v1583) = 0;
                  }
                  else
                  {
                    uint64_t v1583 = 0;
                    uint64_t v1584 = *(void *)(v1831 + 24);
                    int v1585 = v1580;
                    do
                    {
                      ldiv_t v1586 = ldiv(v1585, v111[v1582]);
                      int v1585 = v1586.quot;
                      v1583 += *(void *)(v1584 + 8 * v1582--) * v1586.rem;
                    }
                    while (v1582 != -1);
                  }
                  uint64_t v1587 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v1588) = 0;
                  }
                  else
                  {
                    uint64_t v1588 = 0;
                    uint64_t v1589 = *(void *)(v208 + 24);
                    int v1590 = v1580;
                    do
                    {
                      ldiv_t v1591 = ldiv(v1590, v209[v1587]);
                      int v1590 = v1591.quot;
                      v1588 += *(void *)(v1589 + 8 * v1587--) * v1591.rem;
                    }
                    while (v1587 != -1);
                  }
                  if ((int)v344 >= 1)
                  {
                    uint64_t v1592 = 0;
                    int v1593 = *(_DWORD *)(v1768 + 4 * (int)v1583);
                    unsigned int v1594 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1581 + v1592) = v1593 - *(_DWORD *)(v1758 + 4 * (int)v1588 + v1592);
                      --v1594;
                      v1592 += 4;
                    }
                    while (v1594 > 1);
                  }
                  v1581 += 4 * (int)v344;
                  v1580 += (int)v344;
                }
                while (v1580 < v1797);
              }
            }
          }
          break;
        case 2:
          if (v116 == 2)
          {
            int v1595 = *v111;
            if (*v111)
            {
              uint64_t v1596 = 0;
              uint64_t v1597 = 0;
              unint64_t v1867 = 0;
              uint64_t v1891 = *(void *)(v110 + 152);
              uint64_t v1598 = (int *)v109[19];
              uint64_t v1843 = *(void *)(v208 + 152);
              vDSP_Length v1599 = (int)v344;
              uint64_t v1600 = 4 * (int)v344;
              do
              {
                if (v111[1])
                {
                  unint64_t v1601 = 0;
                  do
                  {
                    int __B = -*(_DWORD *)(v1843 + 4 * v1596);
                    vDSP_vsaddi((const int *)(v1891 + 4 * v1597), 1, &__B, v1598, 1, v1599);
                    uint64_t v110 = *a1;
                    uint64_t v1602 = *(void **)(*a1 + 24);
                    uint64_t v1603 = v1602[1];
                    v1597 += v1603;
                    unsigned int v1604 = *(void **)(*a2 + 24);
                    uint64_t v1605 = v1604[1];
                    v1596 += v1605;
                    ++v1601;
                    uint64_t v111 = *(int **)*a1;
                    unint64_t v1606 = v111[1];
                    uint64_t v1598 = (int *)((char *)v1598 + v1600);
                  }
                  while (v1601 < v1606);
                  int v1595 = *v111;
                  uint64_t v208 = *a2;
                  int v209 = *(int **)*a2;
                }
                else
                {
                  unint64_t v1606 = 0;
                  uint64_t v1602 = *(void **)(v110 + 24);
                  uint64_t v1603 = v1602[1];
                  unsigned int v1604 = *(void **)(v208 + 24);
                  uint64_t v1605 = v1604[1];
                }
                uint64_t v1597 = *v1602 + v1597 - v1606 * v1603;
                uint64_t v1596 = *v1604 + v1596 - v1605 * v209[1];
                ++v1867;
              }
              while (v1867 < v1595);
            }
          }
          else if (v116 == 1)
          {
            if (*v111)
            {
              unint64_t v1022 = 0;
              uint64_t v1023 = 0;
              uint64_t v1024 = 0;
              uint64_t v1025 = *(void *)(v110 + 152);
              uint64_t v1026 = *(void *)(v208 + 152);
              vDSP_Length v1027 = (int)v344;
              uint64_t v1028 = 4 * (int)v344;
              unint64_t v1029 = (int *)v109[19];
              do
              {
                int __B = -*(_DWORD *)(v1026 + 4 * v1023);
                vDSP_vsaddi((const int *)(v1025 + 4 * v1024), 1, &__B, v1029, 1, v1027);
                v1024 += **(void **)(*a1 + 24);
                v1023 += **(void **)(*a2 + 24);
                ++v1022;
                unint64_t v1029 = (int *)((char *)v1029 + v1028);
              }
              while (v1022 < **(int **)*a1);
            }
          }
          else if (v109[6])
          {
            unint64_t v1607 = 0;
            uint64_t v1868 = *(void *)(v208 + 152);
            uint64_t v1892 = *(void *)(v110 + 152);
            vDSP_Length v1844 = (int)v344;
            uint64_t v1608 = (int *)v109[19];
            do
            {
              uint64_t v1609 = *(void *)*a1;
              unint64_t v1610 = (unint64_t)(*(void *)(*a1 + 8) - v1609) >> 2;
              uint64_t v1611 = 0;
              uint64_t v1612 = (v1610 - 1);
              if ((int)v1610 - 1 >= 0)
              {
                uint64_t v1613 = *(void *)(*a1 + 24);
                int v1614 = v1607;
                do
                {
                  ldiv_t v1615 = ldiv(v1614, *(int *)(v1609 + 4 * v1612));
                  int v1614 = v1615.quot;
                  v1611 += *(void *)(v1613 + 8 * v1612--) * v1615.rem;
                }
                while (v1612 != -1);
              }
              uint64_t v1616 = *(void *)*a2;
              unint64_t v1617 = (unint64_t)(*(void *)(*a2 + 8) - v1616) >> 2;
              uint64_t v1618 = 0;
              uint64_t v1619 = (v1617 - 1);
              if ((int)v1617 - 1 >= 0)
              {
                uint64_t v1620 = *(void *)(*a2 + 24);
                int v1621 = v1607;
                do
                {
                  ldiv_t v1622 = ldiv(v1621, *(int *)(v1616 + 4 * v1619));
                  int v1621 = v1622.quot;
                  v1618 += *(void *)(v1620 + 8 * v1619--) * v1622.rem;
                }
                while (v1619 != -1);
              }
              int __B = -*(_DWORD *)(v1868 + 4 * (int)v1618);
              vDSP_vsaddi((const int *)(v1892 + 4 * (int)v1611), 1, &__B, v1608, 1, v1844);
              v1608 += v1844;
              v1607 += v1844;
            }
            while (v1607 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v116 == 2)
          {
            int v1199 = *v111;
            if (*v111)
            {
              unint64_t v1200 = 0;
              uint64_t v1201 = 0;
              uint64_t v1202 = 0;
              uint64_t v1203 = *(void *)(v110 + 152);
              uint64_t v1204 = *(void *)(v208 + 152);
              uint64_t v1205 = v109[19];
              ldiv_t v1206 = *(uint64_t **)(v110 + 24);
              uint64_t v1207 = *v1206;
              uint64_t v1208 = v1206[1];
              uint64_t v1209 = *(uint64_t **)(v208 + 24);
              uint64_t v1210 = *v1209;
              uint64_t v1211 = v1209[1];
              int v1212 = v111[1];
              int v1213 = v1212;
              do
              {
                if (v1213)
                {
                  unint64_t v1214 = 0;
                  uint64_t v1215 = v1204 + 4 * v1201;
                  uint64_t v1216 = v1203 + 4 * v1202;
                  do
                  {
                    if ((int)v344 >= 1)
                    {
                      uint64_t v1217 = 0;
                      unsigned int v1218 = v344 + 1;
                      do
                      {
                        *(_DWORD *)(v1205 + v1217) = *(_DWORD *)(v1216 + v1217) - *(_DWORD *)(v1215 + v1217);
                        --v1218;
                        v1217 += 4;
                      }
                      while (v1218 > 1);
                      int v1212 = v111[1];
                    }
                    v1202 += v1208;
                    v1201 += v1211;
                    v1205 += 4 * (int)v344;
                    ++v1214;
                    v1215 += 4 * v1211;
                    v1216 += 4 * v1208;
                  }
                  while (v1214 < v1212);
                  uint64_t v1219 = v1212;
                  int v1199 = *v111;
                  int v1213 = v1212;
                }
                else
                {
                  uint64_t v1219 = 0;
                }
                uint64_t v1202 = v1202 + v1207 - v1219 * v1208;
                uint64_t v1201 = v1201 + v1210 - v1211 * v209[1];
                ++v1200;
              }
              while (v1200 < v1199);
            }
          }
          else
          {
            uint64_t v1818 = *a1;
            if (v116 == 1)
            {
              int v345 = *v111;
              if (*v111)
              {
                unint64_t v346 = 0;
                uint64_t v347 = *(void *)(v110 + 152);
                uint64_t v348 = *(void *)(v208 + 152);
                uint64_t v349 = v109[19];
                uint64_t v350 = 4 * **(void **)(v208 + 24);
                uint64_t v351 = 4 * **(void **)(v110 + 24);
                do
                {
                  if ((int)v344 >= 1)
                  {
                    uint64_t v352 = 0;
                    unsigned int v353 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v349 + v352) = *(_DWORD *)(v347 + v352) - *(_DWORD *)(v348 + v352);
                      --v353;
                      v352 += 4;
                    }
                    while (v353 > 1);
                    int v345 = *v111;
                  }
                  ++v346;
                  v349 += 4 * (int)v344;
                  v348 += v350;
                  v347 += v351;
                }
                while (v346 < v345);
              }
            }
            else
            {
              unint64_t v1790 = v109[6];
              if (v1790)
              {
                unint64_t v1220 = 0;
                uint64_t v1754 = *(void *)(v208 + 152);
                uint64_t v1763 = *(void *)(v110 + 152);
                uint64_t v1221 = v109[19];
                do
                {
                  uint64_t v1222 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v1223) = 0;
                  }
                  else
                  {
                    uint64_t v1223 = 0;
                    uint64_t v1224 = *(void *)(v1818 + 24);
                    int v1225 = v1220;
                    do
                    {
                      ldiv_t v1226 = ldiv(v1225, v111[v1222]);
                      int v1225 = v1226.quot;
                      v1223 += *(void *)(v1224 + 8 * v1222--) * v1226.rem;
                    }
                    while (v1222 != -1);
                  }
                  uint64_t v1227 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v1228) = 0;
                  }
                  else
                  {
                    uint64_t v1228 = 0;
                    uint64_t v1229 = *(void *)(v208 + 24);
                    int v1230 = v1220;
                    do
                    {
                      ldiv_t v1231 = ldiv(v1230, v209[v1227]);
                      int v1230 = v1231.quot;
                      v1228 += *(void *)(v1229 + 8 * v1227--) * v1231.rem;
                    }
                    while (v1227 != -1);
                  }
                  if ((int)v344 >= 1)
                  {
                    uint64_t v1232 = 0;
                    unsigned int v1233 = v344 + 1;
                    do
                    {
                      *(_DWORD *)(v1221 + v1232) = *(_DWORD *)(v1763 + 4 * (int)v1223 + v1232)
                                                 - *(_DWORD *)(v1754 + 4 * (int)v1228 + v1232);
                      --v1233;
                      v1232 += 4;
                    }
                    while (v1233 > 1);
                  }
                  v1221 += 4 * (int)v344;
                  v1220 += (int)v344;
                }
                while (v1220 < v1790);
              }
            }
          }
          break;
        default:
LABEL_423:
          switch(v340)
          {
            case 1uLL:
              uint64_t v354 = v109[6];
              if (v354)
              {
                uint64_t v355 = *(_DWORD **)(v110 + 152);
                uint64_t v356 = *(_DWORD **)(v208 + 152);
                uint64_t v357 = (_DWORD *)v109[19];
                uint64_t v358 = 4 * **(void **)(v208 + 24);
                uint64_t v359 = 4 * **(void **)(v110 + 24);
                do
                {
                  *v357++ = *v355 - *v356;
                  uint64_t v356 = (_DWORD *)((char *)v356 + v358);
                  uint64_t v355 = (_DWORD *)((char *)v355 + v359);
                  --v354;
                }
                while (v354);
              }
              break;
            case 2uLL:
              int v708 = *v111;
              if (*v111)
              {
                unint64_t v709 = 0;
                uint64_t v710 = 0;
                uint64_t v711 = 0;
                uint64_t v712 = 0;
                uint64_t v713 = *(void *)(v110 + 152);
                uint64_t v714 = *(void *)(v208 + 152);
                uint64_t v715 = v109[19];
                uint64_t v716 = *(uint64_t **)(v110 + 24);
                uint64_t v717 = *v716;
                uint64_t v718 = v716[1];
                uint64_t v719 = *(uint64_t **)(v208 + 24);
                uint64_t v721 = *v719;
                uint64_t v720 = v719[1];
                int v722 = v111[1];
                do
                {
                  if (v722)
                  {
                    for (unint64_t m = 0; m < v722; ++m)
                    {
                      *(_DWORD *)(v715 + 4 * v710 + 4 * m) = *(_DWORD *)(v713 + 4 * v712) - *(_DWORD *)(v714 + 4 * v711);
                      v712 += v718;
                      v711 += v720;
                      int v722 = v111[1];
                    }
                    uint64_t v724 = v722;
                    int v708 = *v111;
                    v710 += m;
                  }
                  else
                  {
                    uint64_t v724 = 0;
                  }
                  uint64_t v712 = v712 + v717 - v724 * v718;
                  uint64_t v711 = v711 + v721 - v720 * v209[1];
                  ++v709;
                }
                while (v709 < v708);
              }
              break;
            case 3uLL:
              int v725 = *v111;
              if (*v111)
              {
                unint64_t v726 = 0;
                uint64_t v727 = 0;
                uint64_t v728 = 0;
                uint64_t v729 = 0;
                uint64_t v730 = *(void *)(v110 + 152);
                uint64_t v731 = *(void *)(v208 + 152);
                uint64_t v732 = v109[19];
                unint64_t v733 = *(uint64_t **)(v110 + 24);
                uint64_t v734 = *v733;
                uint64_t v735 = v733[1];
                uint64_t v736 = *(uint64_t **)(v208 + 24);
                uint64_t v737 = *v736;
                uint64_t v738 = v736[1];
                int v739 = v111[1];
                int v740 = v739;
                do
                {
                  if (v740)
                  {
                    unint64_t v741 = 0;
                    uint64_t v742 = v733[2];
                    uint64_t v743 = v736[2];
                    int v744 = v111[2];
                    do
                    {
                      if (v744)
                      {
                        for (unint64_t n = 0; n < v744; ++n)
                        {
                          *(_DWORD *)(v732 + 4 * v727 + 4 * n) = *(_DWORD *)(v730 + 4 * v729)
                                                               - *(_DWORD *)(v731 + 4 * v728);
                          v729 += v742;
                          v728 += v743;
                          int v744 = v111[2];
                        }
                        uint64_t v746 = v744;
                        int v739 = v111[1];
                        v727 += n;
                      }
                      else
                      {
                        uint64_t v746 = 0;
                      }
                      uint64_t v729 = v729 + v735 - v746 * v742;
                      uint64_t v728 = v728 + v738 - v743 * v209[2];
                      ++v741;
                    }
                    while (v741 < v739);
                    uint64_t v747 = v739;
                    int v725 = *v111;
                    int v740 = v739;
                  }
                  else
                  {
                    uint64_t v747 = 0;
                  }
                  uint64_t v729 = v729 + v734 - v747 * v735;
                  uint64_t v728 = v728 + v737 - v738 * v209[1];
                  ++v726;
                }
                while (v726 < v725);
              }
              break;
            case 4uLL:
              int v748 = *v111;
              if (*v111)
              {
                unint64_t v749 = 0;
                uint64_t v750 = 0;
                uint64_t v751 = 0;
                uint64_t v752 = 0;
                uint64_t v753 = *(void *)(v110 + 152);
                uint64_t v754 = *(void *)(v208 + 152);
                uint64_t v755 = v109[19];
                uint64_t v756 = *(uint64_t **)(v110 + 24);
                uint64_t v757 = *v756;
                uint64_t v758 = v756[1];
                int v759 = *(uint64_t **)(v208 + 24);
                uint64_t v760 = *v759;
                uint64_t v761 = v759[1];
                int v762 = v111[1];
                int v763 = v762;
                do
                {
                  if (v763)
                  {
                    unint64_t v764 = 0;
                    uint64_t v765 = v756[2];
                    uint64_t v766 = v759[2];
                    int v767 = v111[2];
                    int v768 = v767;
                    do
                    {
                      if (v768)
                      {
                        unint64_t v769 = 0;
                        uint64_t v770 = v756[3];
                        uint64_t v771 = v759[3];
                        int v772 = v111[3];
                        do
                        {
                          if (v772)
                          {
                            for (iunint64_t i = 0; ii < v772; ++ii)
                            {
                              *(_DWORD *)(v755 + 4 * v750 + 4 * ii) = *(_DWORD *)(v753 + 4 * v752)
                                                                    - *(_DWORD *)(v754 + 4 * v751);
                              v752 += v770;
                              v751 += v771;
                              int v772 = v111[3];
                            }
                            uint64_t v774 = v772;
                            int v767 = v111[2];
                            v750 += ii;
                          }
                          else
                          {
                            uint64_t v774 = 0;
                          }
                          uint64_t v752 = v752 + v765 - v774 * v770;
                          uint64_t v751 = v751 + v766 - v771 * v209[3];
                          ++v769;
                        }
                        while (v769 < v767);
                        uint64_t v775 = v767;
                        int v762 = v111[1];
                        int v768 = v767;
                      }
                      else
                      {
                        uint64_t v775 = 0;
                      }
                      uint64_t v752 = v752 + v758 - v775 * v765;
                      uint64_t v751 = v751 + v761 - v766 * v209[2];
                      ++v764;
                    }
                    while (v764 < v762);
                    uint64_t v776 = v762;
                    int v748 = *v111;
                    int v763 = v762;
                  }
                  else
                  {
                    uint64_t v776 = 0;
                  }
                  uint64_t v752 = v752 + v757 - v776 * v758;
                  uint64_t v751 = v751 + v760 - v761 * v209[1];
                  ++v749;
                }
                while (v749 < v748);
              }
              break;
            default:
              uint64_t v695 = v109[6];
              if (v695)
              {
                uint64_t v696 = v110;
                uint64_t v697 = 0;
                vDSP_Length __Nc = *(void *)(v208 + 152);
                uint64_t v1824 = *(void *)(v110 + 152);
                uint64_t v1782 = v109[19];
                do
                {
                  uint64_t v698 = v1873;
                  if ((v1873 & 0x80000000) != 0)
                  {
                    LODWORD(v699) = 0;
                  }
                  else
                  {
                    uint64_t v699 = 0;
                    uint64_t v700 = *(void *)(v696 + 24);
                    int v701 = v697;
                    do
                    {
                      ldiv_t v702 = ldiv(v701, v111[v698]);
                      int v701 = v702.quot;
                      v699 += *(void *)(v700 + 8 * v698--) * v702.rem;
                    }
                    while (v698 != -1);
                  }
                  uint64_t v703 = v1853;
                  if ((v1853 & 0x80000000) != 0)
                  {
                    LODWORD(v704) = 0;
                  }
                  else
                  {
                    uint64_t v704 = 0;
                    uint64_t v705 = *(void *)(v208 + 24);
                    int v706 = v697;
                    do
                    {
                      ldiv_t v707 = ldiv(v706, v209[v703]);
                      int v706 = v707.quot;
                      v704 += *(void *)(v705 + 8 * v703--) * v707.rem;
                    }
                    while (v703 != -1);
                  }
                  *(_DWORD *)(v1782 + 4 * v697++) = *(_DWORD *)(v1824 + 4 * (int)v699)
                                                  - *(_DWORD *)(__Nc + 4 * (int)v704);
                }
                while (v697 != v695);
              }
              break;
          }
          break;
      }
      break;
    case 5:
      switch(v24)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) - **(void **)(*a2 + 152);
          return;
        case 1:
          int v141 = *(_DWORD *)(*a2 + 160);
          if (v141 >= 1)
          {
            uint64_t v142 = **(void **)(*a1 + 152);
            unsigned int v143 = *(void **)(*(void *)a3 + 152);
            int v144 = *(uint64_t **)(*a2 + 152);
            unsigned int v145 = v141 + 1;
            do
            {
              uint64_t v146 = *v144++;
              *v143++ = v142 - v146;
              --v145;
            }
            while (v145 > 1);
          }
          return;
        case 2:
LABEL_23:
          vDSP_Length v26 = *(int **)(*(void *)a3 + 152);
          uint64_t v27 = *(const int **)(*a1 + 152);
          vDSP_Length v28 = *(void *)(*a1 + 160);
          int v29 = **(_DWORD **)(*a2 + 152);
LABEL_72:
          int v100 = -v29;
          goto LABEL_73;
        case 3:
          int v147 = *(_DWORD *)(*(void *)a3 + 48);
          if (v147 >= 1)
          {
            int v148 = *(void **)(*(void *)a3 + 152);
            unsigned int v149 = *(uint64_t **)(*a2 + 152);
            int v150 = *(uint64_t **)(*a1 + 152);
            unsigned int v151 = v147 + 1;
            do
            {
              uint64_t v153 = *v150++;
              uint64_t v152 = v153;
              uint64_t v154 = *v149++;
              *v148++ = v152 - v154;
              --v151;
            }
            while (v151 > 1);
          }
          return;
        default:
          int v132 = *(void **)a3;
          uint64_t v133 = *a1;
          char v134 = *(int **)*a1;
          uint64_t v135 = (*(void *)(*a1 + 8) - (void)v134) >> 2;
          uint64_t v136 = (v135 - 1);
          if ((int)v136 >= -1) {
            int v137 = -1;
          }
          else {
            int v137 = v135 - 1;
          }
          int v138 = v137 + 1;
          int v139 = v135 + 1;
          break;
      }
      while (1)
      {
        unsigned int v140 = v139 - 2;
        if (v139 - 2 < 0) {
          break;
        }
        --v139;
        if (*(void *)(*(void *)(v133 + 24) + 8 * v140) != *(void *)(v132[3] + 8 * v140)) {
          goto LABEL_164;
        }
      }
      int v139 = v138;
LABEL_164:
      uint64_t v216 = *a2;
      uint64_t v217 = *(int **)*a2;
      uint64_t v218 = (*(void *)(*a2 + 8) - (void)v217) >> 2;
      uint64_t v219 = (v218 - 1);
      if ((int)v219 >= -1) {
        int v220 = -1;
      }
      else {
        int v220 = v218 - 1;
      }
      int v221 = v220 + 1;
      int v222 = v218 + 1;
      while (1)
      {
        unsigned int v223 = v222 - 2;
        if (v222 - 2 < 0) {
          break;
        }
        --v222;
        if (*(void *)(*(void *)(v216 + 24) + 8 * v223) != *(void *)(v132[3] + 8 * v223)) {
          goto LABEL_205;
        }
      }
      int v222 = v221;
LABEL_205:
      int v242 = v135 + 1;
      while (1)
      {
        unsigned int v243 = v242 - 2;
        if (v242 - 2 < 0) {
          break;
        }
        --v242;
        if (*(void *)(*(void *)(v133 + 24) + 8 * v243)) {
          goto LABEL_240;
        }
      }
      int v242 = v138;
LABEL_240:
      int v256 = v218 + 1;
      while (1)
      {
        unsigned int v257 = v256 - 2;
        if (v256 - 2 < 0) {
          break;
        }
        --v256;
        if (*(void *)(*(void *)(v216 + 24) + 8 * v257)) {
          goto LABEL_429;
        }
      }
      int v256 = v221;
LABEL_429:
      unint64_t v360 = (uint64_t)(v132[1] - *v132) >> 2;
      if (v139 <= v222) {
        int v361 = v222;
      }
      else {
        int v361 = v139;
      }
      if (v139 <= v256) {
        int v139 = v256;
      }
      if (v242 > v222) {
        int v222 = v242;
      }
      if (v360 > v222)
      {
        int v362 = 1;
      }
      else
      {
        int v222 = (uint64_t)(v132[1] - *v132) >> 2;
        int v362 = 4;
      }
      if (v360 > v139)
      {
        int v363 = 2;
      }
      else
      {
        int v139 = v222;
        int v363 = v362;
      }
      if (v360 > v361)
      {
        int v139 = v361;
        int v363 = 3;
      }
      uint64_t v1854 = v219;
      uint64_t v1874 = v136;
      if (!v139) {
        goto LABEL_458;
      }
      unint64_t v364 = *(void *)(v132[3] + 8 * (v139 - 1));
      if (v364 < 0x10) {
        goto LABEL_458;
      }
      switch(v363)
      {
        case 1:
          if (v139 == 2)
          {
            uint64_t v1623 = *v134;
            if (v1623)
            {
              uint64_t v1624 = 0;
              uint64_t v1625 = 0;
              uint64_t v1626 = 0;
              uint64_t v1627 = *(void *)(v133 + 152);
              uint64_t v1628 = *(void *)(v216 + 152);
              uint64_t v1629 = v132[19];
              unint64_t v1630 = v134[1];
              uint64_t v1631 = *(uint64_t **)(v133 + 24);
              uint64_t v1632 = *v1631;
              uint64_t v1633 = v1631[1];
              uint64_t v1634 = *(uint64_t **)(v216 + 24);
              uint64_t v1635 = *v1634;
              uint64_t v1636 = v1634[1];
              if (v1630 <= 1) {
                uint64_t v1637 = 1;
              }
              else {
                uint64_t v1637 = v134[1];
              }
              uint64_t v1638 = v1632 - v1633 * v1630;
              uint64_t v1639 = v1635 - v1636 * v217[1];
              do
              {
                if (v1630)
                {
                  uint64_t v1640 = 0;
                  uint64_t v1641 = v1628 + 8 * v1625;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      uint64_t v1642 = 0;
                      uint64_t v1643 = *(void *)(v1627 + 8 * v1626);
                      unsigned int v1644 = v364 + 1;
                      do
                      {
                        *(void *)(v1629 + v1642) = v1643 - *(void *)(v1641 + v1642);
                        --v1644;
                        v1642 += 8;
                      }
                      while (v1644 > 1);
                    }
                    v1626 += v1633;
                    v1625 += v1636;
                    v1629 += 8 * (int)v364;
                    ++v1640;
                    v1641 += 8 * v1636;
                  }
                  while (v1640 != v1637);
                }
                v1626 += v1638;
                v1625 += v1639;
                ++v1624;
              }
              while (v1624 != v1623);
            }
          }
          else
          {
            uint64_t v1832 = *a1;
            if (v139 == 1)
            {
              uint64_t v1030 = *v134;
              if (v1030)
              {
                uint64_t v1031 = 0;
                uint64_t v1032 = 0;
                uint64_t v1033 = *(void *)(v133 + 152);
                uint64_t v1034 = *(void *)(v216 + 152);
                uint64_t v1035 = v132[19];
                uint64_t v1036 = **(void **)(v133 + 24);
                uint64_t v1037 = 8 * **(void **)(v216 + 24);
                do
                {
                  if ((int)v364 >= 1)
                  {
                    uint64_t v1038 = 0;
                    uint64_t v1039 = *(void *)(v1033 + 8 * v1032);
                    unsigned int v1040 = v364 + 1;
                    do
                    {
                      *(void *)(v1035 + v1038) = v1039 - *(void *)(v1034 + v1038);
                      --v1040;
                      v1038 += 8;
                    }
                    while (v1040 > 1);
                  }
                  v1032 += v1036;
                  ++v1031;
                  v1035 += 8 * (int)v364;
                  v1034 += v1037;
                }
                while (v1031 != v1030);
              }
            }
            else
            {
              unint64_t v1798 = v132[6];
              if (v1798)
              {
                unint64_t v1645 = 0;
                uint64_t v1759 = *(void *)(v216 + 152);
                uint64_t v1769 = *(void *)(v133 + 152);
                uint64_t v1646 = v132[19];
                do
                {
                  uint64_t v1647 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v1648) = 0;
                  }
                  else
                  {
                    uint64_t v1648 = 0;
                    uint64_t v1649 = *(void *)(v1832 + 24);
                    int v1650 = v1645;
                    do
                    {
                      ldiv_t v1651 = ldiv(v1650, v134[v1647]);
                      int v1650 = v1651.quot;
                      v1648 += *(void *)(v1649 + 8 * v1647--) * v1651.rem;
                    }
                    while (v1647 != -1);
                  }
                  uint64_t v1652 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v1653) = 0;
                  }
                  else
                  {
                    uint64_t v1653 = 0;
                    uint64_t v1654 = *(void *)(v216 + 24);
                    int v1655 = v1645;
                    do
                    {
                      ldiv_t v1656 = ldiv(v1655, v217[v1652]);
                      int v1655 = v1656.quot;
                      v1653 += *(void *)(v1654 + 8 * v1652--) * v1656.rem;
                    }
                    while (v1652 != -1);
                  }
                  if ((int)v364 >= 1)
                  {
                    uint64_t v1657 = 0;
                    uint64_t v1658 = *(void *)(v1769 + 8 * (int)v1648);
                    unsigned int v1659 = v364 + 1;
                    do
                    {
                      *(void *)(v1646 + v1657) = v1658 - *(void *)(v1759 + 8 * (int)v1653 + v1657);
                      --v1659;
                      v1657 += 8;
                    }
                    while (v1659 > 1);
                  }
                  v1646 += 8 * (int)v364;
                  v1645 += (int)v364;
                }
                while (v1645 < v1798);
              }
            }
          }
          break;
        case 2:
          if (v139 == 2)
          {
            int v1660 = *v134;
            if (*v134)
            {
              uint64_t v1661 = 0;
              uint64_t v1662 = 0;
              unint64_t v1893 = 0;
              uint64_t v1663 = (int *)v132[19];
              vDSP_Length __Nl = (int)v364;
              uint64_t v1845 = *(void *)(v216 + 152);
              uint64_t v1799 = 8 * (int)v364;
              uint64_t v1664 = *(void *)(v133 + 152);
              do
              {
                if (v134[1])
                {
                  unint64_t v1665 = 0;
                  do
                  {
                    int __B = -*(_DWORD *)(v1845 + 8 * v1661);
                    vDSP_vsaddi((const int *)(v1664 + 8 * v1662), 1, &__B, v1663, 1, __Nl);
                    uint64_t v133 = *a1;
                    uint64_t v1666 = *(void **)(*a1 + 24);
                    uint64_t v1667 = v1666[1];
                    v1662 += v1667;
                    uint64_t v1668 = *(void **)(*a2 + 24);
                    uint64_t v1669 = v1668[1];
                    v1661 += v1669;
                    ++v1665;
                    uint64_t v1670 = *(int **)*a1;
                    unint64_t v1671 = v1670[1];
                    uint64_t v1663 = (int *)((char *)v1663 + v1799);
                  }
                  while (v1665 < v1671);
                  int v1660 = *v1670;
                  uint64_t v216 = *a2;
                  uint64_t v217 = *(int **)*a2;
                  char v134 = *(int **)*a1;
                }
                else
                {
                  unint64_t v1671 = 0;
                  uint64_t v1666 = *(void **)(v133 + 24);
                  uint64_t v1667 = v1666[1];
                  uint64_t v1668 = *(void **)(v216 + 24);
                  uint64_t v1669 = v1668[1];
                }
                uint64_t v1662 = *v1666 + v1662 - v1671 * v1667;
                uint64_t v1661 = *v1668 + v1661 - v1669 * v217[1];
                ++v1893;
              }
              while (v1893 < v1660);
            }
          }
          else if (v139 == 1)
          {
            if (*v134)
            {
              unint64_t v1041 = 0;
              uint64_t v1042 = 0;
              uint64_t v1043 = 0;
              uint64_t v1044 = *(void *)(v133 + 152);
              uint64_t v1045 = *(void *)(v216 + 152);
              vDSP_Length v1046 = (int)v364;
              uint64_t v1047 = 8 * (int)v364;
              int v1048 = (int *)v132[19];
              do
              {
                int __B = -*(_DWORD *)(v1045 + 8 * v1042);
                vDSP_vsaddi((const int *)(v1044 + 8 * v1043), 1, &__B, v1048, 1, v1046);
                v1043 += **(void **)(*a1 + 24);
                v1042 += **(void **)(*a2 + 24);
                ++v1041;
                int v1048 = (int *)((char *)v1048 + v1047);
              }
              while (v1041 < **(int **)*a1);
            }
          }
          else if (v132[6])
          {
            unint64_t v1672 = 0;
            uint64_t v1869 = *(void *)(v216 + 152);
            uint64_t v1894 = *(void *)(v133 + 152);
            vDSP_Length v1846 = (int)v364;
            uint64_t v1673 = (int *)v132[19];
            do
            {
              uint64_t v1674 = *(void *)*a1;
              unint64_t v1675 = (unint64_t)(*(void *)(*a1 + 8) - v1674) >> 2;
              uint64_t v1676 = 0;
              uint64_t v1677 = (v1675 - 1);
              if ((int)v1675 - 1 >= 0)
              {
                uint64_t v1678 = *(void *)(*a1 + 24);
                int v1679 = v1672;
                do
                {
                  ldiv_t v1680 = ldiv(v1679, *(int *)(v1674 + 4 * v1677));
                  int v1679 = v1680.quot;
                  v1676 += *(void *)(v1678 + 8 * v1677--) * v1680.rem;
                }
                while (v1677 != -1);
              }
              uint64_t v1681 = *(void *)*a2;
              unint64_t v1682 = (unint64_t)(*(void *)(*a2 + 8) - v1681) >> 2;
              uint64_t v1683 = 0;
              uint64_t v1684 = (v1682 - 1);
              if ((int)v1682 - 1 >= 0)
              {
                uint64_t v1685 = *(void *)(*a2 + 24);
                int v1686 = v1672;
                do
                {
                  ldiv_t v1687 = ldiv(v1686, *(int *)(v1681 + 4 * v1684));
                  int v1686 = v1687.quot;
                  v1683 += *(void *)(v1685 + 8 * v1684--) * v1687.rem;
                }
                while (v1684 != -1);
              }
              int __B = -*(_DWORD *)(v1869 + 8 * (int)v1683);
              vDSP_vsaddi((const int *)(v1894 + 8 * (int)v1676), 1, &__B, v1673, 1, v1846);
              v1673 += 2 * v1846;
              v1672 += v1846;
            }
            while (v1672 < *(void *)(*(void *)a3 + 48));
          }
          break;
        case 3:
          if (v139 == 2)
          {
            uint64_t v1234 = *v134;
            if (v1234)
            {
              uint64_t v1235 = 0;
              uint64_t v1236 = 0;
              uint64_t v1237 = 0;
              uint64_t v1238 = *(void *)(v133 + 152);
              uint64_t v1239 = *(void *)(v216 + 152);
              uint64_t v1240 = v132[19];
              unint64_t v1241 = v134[1];
              int v1242 = *(uint64_t **)(v133 + 24);
              uint64_t v1243 = *v1242;
              uint64_t v1244 = v1242[1];
              uint64_t v1245 = *(uint64_t **)(v216 + 24);
              uint64_t v1246 = *v1245;
              uint64_t v1247 = v1245[1];
              if (v1241 <= 1) {
                uint64_t v1248 = 1;
              }
              else {
                uint64_t v1248 = v134[1];
              }
              uint64_t v1249 = v1243 - v1244 * v1241;
              uint64_t v1250 = v1246 - v1247 * v217[1];
              do
              {
                if (v1241)
                {
                  uint64_t v1251 = 0;
                  uint64_t v1252 = v1239 + 8 * v1236;
                  uint64_t v1253 = v1238 + 8 * v1237;
                  do
                  {
                    if ((int)v364 >= 1)
                    {
                      uint64_t v1254 = 0;
                      unsigned int v1255 = v364 + 1;
                      do
                      {
                        *(void *)(v1240 + v1254) = *(void *)(v1253 + v1254) - *(void *)(v1252 + v1254);
                        --v1255;
                        v1254 += 8;
                      }
                      while (v1255 > 1);
                    }
                    v1237 += v1244;
                    v1236 += v1247;
                    v1240 += 8 * (int)v364;
                    ++v1251;
                    v1252 += 8 * v1247;
                    v1253 += 8 * v1244;
                  }
                  while (v1251 != v1248);
                }
                v1237 += v1249;
                v1236 += v1250;
                ++v1235;
              }
              while (v1235 != v1234);
            }
          }
          else
          {
            uint64_t v1819 = *a1;
            if (v139 == 1)
            {
              uint64_t v365 = *v134;
              if (v365)
              {
                uint64_t v366 = 0;
                uint64_t v367 = *(void *)(v133 + 152);
                uint64_t v368 = *(void *)(v216 + 152);
                uint64_t v369 = v132[19];
                uint64_t v370 = 8 * **(void **)(v216 + 24);
                uint64_t v371 = 8 * **(void **)(v133 + 24);
                do
                {
                  if ((int)v364 >= 1)
                  {
                    uint64_t v372 = 0;
                    unsigned int v373 = v364 + 1;
                    do
                    {
                      *(void *)(v369 + v372) = *(void *)(v367 + v372) - *(void *)(v368 + v372);
                      --v373;
                      v372 += 8;
                    }
                    while (v373 > 1);
                  }
                  ++v366;
                  v369 += 8 * (int)v364;
                  v368 += v370;
                  v367 += v371;
                }
                while (v366 != v365);
              }
            }
            else
            {
              unint64_t v1791 = v132[6];
              if (v1791)
              {
                unint64_t v1256 = 0;
                uint64_t v1755 = *(void *)(v216 + 152);
                uint64_t v1764 = *(void *)(v133 + 152);
                uint64_t v1257 = v132[19];
                do
                {
                  uint64_t v1258 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v1259) = 0;
                  }
                  else
                  {
                    uint64_t v1259 = 0;
                    uint64_t v1260 = *(void *)(v1819 + 24);
                    int v1261 = v1256;
                    do
                    {
                      ldiv_t v1262 = ldiv(v1261, v134[v1258]);
                      int v1261 = v1262.quot;
                      v1259 += *(void *)(v1260 + 8 * v1258--) * v1262.rem;
                    }
                    while (v1258 != -1);
                  }
                  uint64_t v1263 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v1264) = 0;
                  }
                  else
                  {
                    uint64_t v1264 = 0;
                    uint64_t v1265 = *(void *)(v216 + 24);
                    int v1266 = v1256;
                    do
                    {
                      ldiv_t v1267 = ldiv(v1266, v217[v1263]);
                      int v1266 = v1267.quot;
                      v1264 += *(void *)(v1265 + 8 * v1263--) * v1267.rem;
                    }
                    while (v1263 != -1);
                  }
                  if ((int)v364 >= 1)
                  {
                    uint64_t v1268 = 0;
                    unsigned int v1269 = v364 + 1;
                    do
                    {
                      *(void *)(v1257 + v1268) = *(void *)(v1764 + 8 * (int)v1259 + v1268)
                                                 - *(void *)(v1755 + 8 * (int)v1264 + v1268);
                      --v1269;
                      v1268 += 8;
                    }
                    while (v1269 > 1);
                  }
                  v1257 += 8 * (int)v364;
                  v1256 += (int)v364;
                }
                while (v1256 < v1791);
              }
            }
          }
          break;
        default:
LABEL_458:
          switch(v360)
          {
            case 1uLL:
              uint64_t v374 = v132[6];
              if (v374)
              {
                uint64_t v375 = *(void **)(v133 + 152);
                uint64_t v376 = *(void **)(v216 + 152);
                uint64_t v377 = (void *)v132[19];
                uint64_t v378 = 8 * **(void **)(v216 + 24);
                uint64_t v379 = 8 * **(void **)(v133 + 24);
                do
                {
                  *v377++ = *v375 - *v376;
                  uint64_t v376 = (void *)((char *)v376 + v378);
                  uint64_t v375 = (void *)((char *)v375 + v379);
                  --v374;
                }
                while (v374);
              }
              break;
            case 2uLL:
              uint64_t v790 = *v134;
              if (v790)
              {
                uint64_t v791 = 0;
                uint64_t v792 = 0;
                uint64_t v793 = 0;
                uint64_t v794 = 0;
                uint64_t v795 = *(void *)(v133 + 152);
                uint64_t v796 = *(void *)(v216 + 152);
                uint64_t v797 = v132[19];
                unint64_t v798 = v134[1];
                unint64_t v799 = *(uint64_t **)(v133 + 24);
                uint64_t v800 = *v799;
                uint64_t v801 = v799[1];
                uint64_t v802 = *(uint64_t **)(v216 + 24);
                uint64_t v803 = *v802;
                uint64_t v804 = v802[1];
                uint64_t v805 = v803 - v804 * v217[1];
                if (v798 <= 1) {
                  uint64_t v806 = 1;
                }
                else {
                  uint64_t v806 = v134[1];
                }
                uint64_t v807 = v800 - v801 * v798;
                do
                {
                  if (v798)
                  {
                    uint64_t v808 = v792 + v806;
                    uint64_t v809 = (void *)(v797 + 8 * v792);
                    uint64_t v810 = v806;
                    do
                    {
                      *v809++ = *(void *)(v795 + 8 * v794) - *(void *)(v796 + 8 * v793);
                      v794 += v801;
                      v793 += v804;
                      --v810;
                    }
                    while (v810);
                    uint64_t v792 = v808;
                  }
                  v794 += v807;
                  v793 += v805;
                  ++v791;
                }
                while (v791 != v790);
              }
              break;
            case 3uLL:
              uint64_t v811 = *v134;
              if (v811)
              {
                uint64_t v812 = 0;
                uint64_t v813 = 0;
                uint64_t v814 = 0;
                uint64_t v815 = 0;
                uint64_t v816 = *(void *)(v133 + 152);
                uint64_t v817 = *(void *)(v216 + 152);
                uint64_t v818 = v132[19];
                unint64_t v819 = v134[1];
                uint64_t v820 = *(void **)(v133 + 24);
                uint64_t v821 = v820[1];
                uint64_t v822 = *(void **)(v216 + 24);
                uint64_t v823 = v822[1];
                uint64_t v824 = *v822 - v823 * v217[1];
                if (v819 <= 1) {
                  uint64_t v825 = 1;
                }
                else {
                  uint64_t v825 = v134[1];
                }
                unint64_t v826 = *v820 - v821 * v819;
                do
                {
                  if (v819)
                  {
                    uint64_t v827 = 0;
                    unint64_t v828 = v134[2];
                    uint64_t v829 = v820[2];
                    uint64_t v830 = v822[2];
                    if (v828 <= 1) {
                      uint64_t v831 = 1;
                    }
                    else {
                      uint64_t v831 = v134[2];
                    }
                    uint64_t v832 = v823 - v830 * v217[2];
                    do
                    {
                      uint64_t v833 = v831;
                      if (v828)
                      {
                        do
                        {
                          *(void *)(v818 + 8 * v813++) = *(void *)(v816 + 8 * v815) - *(void *)(v817 + 8 * v814);
                          v815 += v829;
                          v814 += v830;
                          --v833;
                        }
                        while (v833);
                      }
                      v815 += v821 - v829 * v828;
                      v814 += v832;
                      ++v827;
                    }
                    while (v827 != v825);
                  }
                  v815 += v826;
                  v814 += v824;
                  ++v812;
                }
                while (v812 != v811);
              }
              break;
            case 4uLL:
              uint64_t v1879 = *v134;
              if (v1879)
              {
                uint64_t v834 = 0;
                uint64_t v835 = 0;
                uint64_t v836 = 0;
                uint64_t v837 = 0;
                uint64_t v838 = *(void *)(v133 + 152);
                uint64_t v839 = *(void *)(v216 + 152);
                uint64_t v840 = v132[19];
                unint64_t v841 = v134[1];
                vDSP_Length v842 = *(void **)(v133 + 24);
                uint64_t v843 = *(void **)(v216 + 24);
                uint64_t v1772 = v843[1];
                uint64_t v1784 = v842[1];
                uint64_t v1826 = *v843 - v1772 * v217[1];
                int v1859 = v134[1];
                if (v841 <= 1) {
                  uint64_t v844 = 1;
                }
                else {
                  uint64_t v844 = v134[1];
                }
                vDSP_Length __Ne = *v842 - v842[1] * v841;
                do
                {
                  if (v1859)
                  {
                    uint64_t v845 = 0;
                    unint64_t v846 = v134[2];
                    uint64_t v847 = v842[2];
                    uint64_t v848 = v843[2];
                    if (v846 <= 1) {
                      uint64_t v849 = 1;
                    }
                    else {
                      uint64_t v849 = v134[2];
                    }
                    uint64_t v850 = v1772 - v848 * v217[2];
                    do
                    {
                      if (v846)
                      {
                        uint64_t v851 = 0;
                        unint64_t v852 = v134[3];
                        uint64_t v853 = v842[3];
                        uint64_t v854 = v843[3];
                        if (v852 <= 1) {
                          uint64_t v855 = 1;
                        }
                        else {
                          uint64_t v855 = v134[3];
                        }
                        uint64_t v856 = v848 - v854 * v217[3];
                        do
                        {
                          uint64_t v857 = v855;
                          if (v852)
                          {
                            do
                            {
                              *(void *)(v840 + 8 * v835++) = *(void *)(v838 + 8 * v837)
                                                             - *(void *)(v839 + 8 * v836);
                              v837 += v853;
                              v836 += v854;
                              --v857;
                            }
                            while (v857);
                          }
                          v837 += v847 - v853 * v852;
                          v836 += v856;
                          ++v851;
                        }
                        while (v851 != v849);
                      }
                      v837 += v1784 - v847 * v846;
                      v836 += v850;
                      ++v845;
                    }
                    while (v845 != v844);
                  }
                  v837 += __Ne;
                  v836 += v1826;
                  ++v834;
                }
                while (v834 != v1879);
              }
              break;
            default:
              uint64_t v777 = v132[6];
              if (v777)
              {
                uint64_t v778 = v133;
                uint64_t v779 = 0;
                vDSP_Length __Nd = *(void *)(v216 + 152);
                uint64_t v1825 = *(void *)(v133 + 152);
                uint64_t v1783 = v132[19];
                do
                {
                  uint64_t v780 = v1874;
                  if ((v1874 & 0x80000000) != 0)
                  {
                    LODWORD(v781) = 0;
                  }
                  else
                  {
                    uint64_t v781 = 0;
                    uint64_t v782 = *(void *)(v778 + 24);
                    int v783 = v779;
                    do
                    {
                      ldiv_t v784 = ldiv(v783, v134[v780]);
                      int v783 = v784.quot;
                      v781 += *(void *)(v782 + 8 * v780--) * v784.rem;
                    }
                    while (v780 != -1);
                  }
                  uint64_t v785 = v1854;
                  if ((v1854 & 0x80000000) != 0)
                  {
                    LODWORD(v786) = 0;
                  }
                  else
                  {
                    uint64_t v786 = 0;
                    uint64_t v787 = *(void *)(v216 + 24);
                    int v788 = v779;
                    do
                    {
                      ldiv_t v789 = ldiv(v788, v217[v785]);
                      int v788 = v789.quot;
                      v786 += *(void *)(v787 + 8 * v785--) * v789.rem;
                    }
                    while (v785 != -1);
                  }
                  *(void *)(v1783 + 8 * v779++) = *(void *)(v1825 + 8 * (int)v781)
                                                  - *(void *)(__Nd + 8 * (int)v786);
                }
                while (v779 != v777);
              }
              break;
          }
          break;
      }
      break;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          int v164 = *(_DWORD *)(*a2 + 160);
          if (v164 >= 1)
          {
            float v165 = **(float **)(*a1 + 152);
            int v166 = *(float **)(*(void *)a3 + 152);
            int v167 = *(float **)(*a2 + 152);
            unsigned int v168 = v164 + 1;
            do
            {
              float v169 = *v167++;
              *v166++ = v165 - v169;
              --v168;
            }
            while (v168 > 1);
          }
          return;
        case 2:
          vDSP_Length v26 = *(int **)(*(void *)a3 + 152);
          uint64_t v27 = *(const int **)(*a1 + 152);
          vDSP_Length v28 = *(void *)(*a1 + 160);
          int v100 = (int)(float)-**(float **)(*a2 + 152);
LABEL_73:
          int __B = v100;
          vDSP_vsaddi(v27, 1, &__B, v26, 1, v28);
          return;
        case 3:
          int v170 = *(_DWORD *)(*(void *)a3 + 48);
          if (v170 >= 1)
          {
            int v171 = *(float **)(*(void *)a3 + 152);
            int v172 = *(float **)(*a2 + 152);
            int v173 = *(float **)(*a1 + 152);
            unsigned int v174 = v170 + 1;
            do
            {
              float v175 = *v173++;
              float v176 = v175;
              float v177 = *v172++;
              *v171++ = v176 - v177;
              --v174;
            }
            while (v174 > 1);
          }
          return;
        default:
          unsigned int v155 = *(void **)a3;
          uint64_t v156 = *a1;
          int v157 = *(int **)*a1;
          uint64_t v158 = (*(void *)(*a1 + 8) - (void)v157) >> 2;
          uint64_t v159 = (v158 - 1);
          if ((int)v159 >= -1) {
            int v160 = -1;
          }
          else {
            int v160 = v158 - 1;
          }
          int v161 = v160 + 1;
          int v162 = v158 + 1;
          while (1)
          {
            unsigned int v163 = v162 - 2;
            if (v162 - 2 < 0) {
              break;
            }
            --v162;
            if (*(void *)(*(void *)(v156 + 24) + 8 * v163) != *(void *)(v155[3] + 8 * v163)) {
              goto LABEL_172;
            }
          }
          int v162 = v161;
LABEL_172:
          uint64_t v224 = *a2;
          unint64_t v225 = *(int **)*a2;
          uint64_t v226 = (*(void *)(*a2 + 8) - (void)v225) >> 2;
          uint64_t v227 = (v226 - 1);
          if ((int)v227 >= -1) {
            int v228 = -1;
          }
          else {
            int v228 = v226 - 1;
          }
          int v229 = v228 + 1;
          int v230 = v226 + 1;
          while (1)
          {
            unsigned int v231 = v230 - 2;
            if (v230 - 2 < 0) {
              break;
            }
            --v230;
            if (*(void *)(*(void *)(v224 + 24) + 8 * v231) != *(void *)(v155[3] + 8 * v231)) {
              goto LABEL_210;
            }
          }
          int v230 = v229;
LABEL_210:
          int v244 = v158 + 1;
          while (1)
          {
            unsigned int v245 = v244 - 2;
            if (v244 - 2 < 0) {
              break;
            }
            --v244;
            if (*(void *)(*(void *)(v156 + 24) + 8 * v245)) {
              goto LABEL_245;
            }
          }
          int v244 = v161;
LABEL_245:
          int v258 = v226 + 1;
          while (1)
          {
            unsigned int v259 = v258 - 2;
            if (v258 - 2 < 0) {
              break;
            }
            --v258;
            if (*(void *)(*(void *)(v224 + 24) + 8 * v259)) {
              goto LABEL_464;
            }
          }
          int v258 = v229;
LABEL_464:
          unint64_t v380 = (uint64_t)(v155[1] - *v155) >> 2;
          if (v162 <= v230) {
            int v381 = v230;
          }
          else {
            int v381 = v162;
          }
          if (v162 <= v258) {
            int v162 = v258;
          }
          if (v244 > v230) {
            int v230 = v244;
          }
          if (v380 > v230)
          {
            int v382 = 1;
          }
          else
          {
            int v230 = (uint64_t)(v155[1] - *v155) >> 2;
            int v382 = 4;
          }
          if (v380 > v162)
          {
            int v383 = 2;
          }
          else
          {
            int v162 = v230;
            int v383 = v382;
          }
          if (v380 > v381)
          {
            int v162 = v381;
            int v383 = 3;
          }
          uint64_t v1855 = v227;
          uint64_t v1875 = v159;
          if (!v162) {
            goto LABEL_493;
          }
          unint64_t v384 = *(void *)(v155[3] + 8 * (v162 - 1));
          if (v384 < 0x10) {
            goto LABEL_493;
          }
          switch(v383)
          {
            case 1:
              if (v162 == 2)
              {
                uint64_t v1688 = *v157;
                if (v1688)
                {
                  uint64_t v1689 = 0;
                  uint64_t v1690 = 0;
                  uint64_t v1691 = 0;
                  uint64_t v1692 = *(void *)(v156 + 152);
                  uint64_t v1693 = *(void *)(v224 + 152);
                  uint64_t v1694 = v155[19];
                  unint64_t v1695 = v157[1];
                  uint64_t v1696 = *(uint64_t **)(v156 + 24);
                  uint64_t v1697 = *v1696;
                  uint64_t v1698 = v1696[1];
                  uint64_t v1699 = *(uint64_t **)(v224 + 24);
                  uint64_t v1700 = *v1699;
                  uint64_t v1701 = v1699[1];
                  if (v1695 <= 1) {
                    uint64_t v1702 = 1;
                  }
                  else {
                    uint64_t v1702 = v157[1];
                  }
                  uint64_t v1703 = v1697 - v1698 * v1695;
                  uint64_t v1704 = v1700 - v1701 * v225[1];
                  do
                  {
                    if (v1695)
                    {
                      uint64_t v1705 = 0;
                      uint64_t v1706 = v1693 + 4 * v1690;
                      do
                      {
                        if ((int)v384 >= 1)
                        {
                          uint64_t v1707 = 0;
                          float v1708 = *(float *)(v1692 + 4 * v1691);
                          unsigned int v1709 = v384 + 1;
                          do
                          {
                            *(float *)(v1694 + v1707) = v1708 - *(float *)(v1706 + v1707);
                            --v1709;
                            v1707 += 4;
                          }
                          while (v1709 > 1);
                        }
                        v1691 += v1698;
                        v1690 += v1701;
                        v1694 += 4 * (int)v384;
                        ++v1705;
                        v1706 += 4 * v1701;
                      }
                      while (v1705 != v1702);
                    }
                    v1691 += v1703;
                    v1690 += v1704;
                    ++v1689;
                  }
                  while (v1689 != v1688);
                }
              }
              else
              {
                uint64_t v1833 = *a1;
                if (v162 == 1)
                {
                  uint64_t v1049 = *v157;
                  if (v1049)
                  {
                    uint64_t v1050 = 0;
                    uint64_t v1051 = 0;
                    uint64_t v1052 = *(void *)(v156 + 152);
                    uint64_t v1053 = *(void *)(v224 + 152);
                    uint64_t v1054 = v155[19];
                    uint64_t v1055 = **(void **)(v156 + 24);
                    uint64_t v1056 = 4 * **(void **)(v224 + 24);
                    do
                    {
                      if ((int)v384 >= 1)
                      {
                        uint64_t v1057 = 0;
                        float v1058 = *(float *)(v1052 + 4 * v1051);
                        unsigned int v1059 = v384 + 1;
                        do
                        {
                          *(float *)(v1054 + v1057) = v1058 - *(float *)(v1053 + v1057);
                          --v1059;
                          v1057 += 4;
                        }
                        while (v1059 > 1);
                      }
                      v1051 += v1055;
                      ++v1050;
                      v1054 += 4 * (int)v384;
                      v1053 += v1056;
                    }
                    while (v1050 != v1049);
                  }
                }
                else
                {
                  unint64_t v1800 = v155[6];
                  if (v1800)
                  {
                    unint64_t v1710 = 0;
                    uint64_t v1760 = *(void *)(v224 + 152);
                    uint64_t v1770 = *(void *)(v156 + 152);
                    uint64_t v1711 = v155[19];
                    do
                    {
                      uint64_t v1712 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v1713) = 0;
                      }
                      else
                      {
                        uint64_t v1713 = 0;
                        uint64_t v1714 = *(void *)(v1833 + 24);
                        int v1715 = v1710;
                        do
                        {
                          ldiv_t v1716 = ldiv(v1715, v157[v1712]);
                          int v1715 = v1716.quot;
                          v1713 += *(void *)(v1714 + 8 * v1712--) * v1716.rem;
                        }
                        while (v1712 != -1);
                      }
                      uint64_t v1717 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v1718) = 0;
                      }
                      else
                      {
                        uint64_t v1718 = 0;
                        uint64_t v1719 = *(void *)(v224 + 24);
                        int v1720 = v1710;
                        do
                        {
                          ldiv_t v1721 = ldiv(v1720, v225[v1717]);
                          int v1720 = v1721.quot;
                          v1718 += *(void *)(v1719 + 8 * v1717--) * v1721.rem;
                        }
                        while (v1717 != -1);
                      }
                      if ((int)v384 >= 1)
                      {
                        uint64_t v1722 = 0;
                        float v1723 = *(float *)(v1770 + 4 * (int)v1713);
                        unsigned int v1724 = v384 + 1;
                        do
                        {
                          *(float *)(v1711 + v1722) = v1723 - *(float *)(v1760 + 4 * (int)v1718 + v1722);
                          --v1724;
                          v1722 += 4;
                        }
                        while (v1724 > 1);
                      }
                      v1711 += 4 * (int)v384;
                      v1710 += (int)v384;
                    }
                    while (v1710 < v1800);
                  }
                }
              }
              break;
            case 2:
              if (v162 == 2)
              {
                int v1725 = *v157;
                if (*v157)
                {
                  uint64_t v1726 = 0;
                  uint64_t v1727 = 0;
                  unint64_t v1895 = 0;
                  uint64_t v1728 = (int *)v155[19];
                  __Nunint64_t m = (int)v384;
                  uint64_t v1847 = *(void *)(v224 + 152);
                  uint64_t v1801 = 4 * (int)v384;
                  uint64_t v1729 = *(void *)(v156 + 152);
                  do
                  {
                    if (v157[1])
                    {
                      unint64_t v1730 = 0;
                      do
                      {
                        int __B = (int)(float)-*(float *)(v1847 + 4 * v1726);
                        vDSP_vsaddi((const int *)(v1729 + 4 * v1727), 1, &__B, v1728, 1, __Nm);
                        uint64_t v156 = *a1;
                        uint64_t v1731 = *(void **)(*a1 + 24);
                        uint64_t v1732 = v1731[1];
                        v1727 += v1732;
                        uint64_t v1733 = *(void **)(*a2 + 24);
                        uint64_t v1734 = v1733[1];
                        v1726 += v1734;
                        ++v1730;
                        unint64_t v1735 = *(int **)*a1;
                        unint64_t v1736 = v1735[1];
                        uint64_t v1728 = (int *)((char *)v1728 + v1801);
                      }
                      while (v1730 < v1736);
                      int v1725 = *v1735;
                      uint64_t v224 = *a2;
                      unint64_t v225 = *(int **)*a2;
                      int v157 = *(int **)*a1;
                    }
                    else
                    {
                      unint64_t v1736 = 0;
                      uint64_t v1731 = *(void **)(v156 + 24);
                      uint64_t v1732 = v1731[1];
                      uint64_t v1733 = *(void **)(v224 + 24);
                      uint64_t v1734 = v1733[1];
                    }
                    uint64_t v1727 = *v1731 + v1727 - v1736 * v1732;
                    uint64_t v1726 = *v1733 + v1726 - v1734 * v225[1];
                    ++v1895;
                  }
                  while (v1895 < v1725);
                }
              }
              else if (v162 == 1)
              {
                if (*v157)
                {
                  unint64_t v1060 = 0;
                  uint64_t v1061 = 0;
                  uint64_t v1062 = 0;
                  uint64_t v1063 = *(void *)(v156 + 152);
                  uint64_t v1064 = *(void *)(v224 + 152);
                  vDSP_Length v1065 = (int)v384;
                  uint64_t v1066 = 4 * (int)v384;
                  uint64_t v1067 = (int *)v155[19];
                  do
                  {
                    int __B = (int)(float)-*(float *)(v1064 + 4 * v1061);
                    vDSP_vsaddi((const int *)(v1063 + 4 * v1062), 1, &__B, v1067, 1, v1065);
                    v1062 += **(void **)(*a1 + 24);
                    v1061 += **(void **)(*a2 + 24);
                    ++v1060;
                    uint64_t v1067 = (int *)((char *)v1067 + v1066);
                  }
                  while (v1060 < **(int **)*a1);
                }
              }
              else if (v155[6])
              {
                unint64_t v1737 = 0;
                uint64_t v1870 = *(void *)(v224 + 152);
                uint64_t v1896 = *(void *)(v156 + 152);
                vDSP_Length v1848 = (int)v384;
                uint64_t v1738 = (int *)v155[19];
                do
                {
                  uint64_t v1739 = *(void *)*a1;
                  unint64_t v1740 = (unint64_t)(*(void *)(*a1 + 8) - v1739) >> 2;
                  uint64_t v1741 = 0;
                  uint64_t v1742 = (v1740 - 1);
                  if ((int)v1740 - 1 >= 0)
                  {
                    uint64_t v1743 = *(void *)(*a1 + 24);
                    int v1744 = v1737;
                    do
                    {
                      ldiv_t v1745 = ldiv(v1744, *(int *)(v1739 + 4 * v1742));
                      int v1744 = v1745.quot;
                      v1741 += *(void *)(v1743 + 8 * v1742--) * v1745.rem;
                    }
                    while (v1742 != -1);
                  }
                  uint64_t v1746 = *(void *)*a2;
                  unint64_t v1747 = (unint64_t)(*(void *)(*a2 + 8) - v1746) >> 2;
                  uint64_t v1748 = 0;
                  uint64_t v1749 = (v1747 - 1);
                  if ((int)v1747 - 1 >= 0)
                  {
                    uint64_t v1750 = *(void *)(*a2 + 24);
                    int v1751 = v1737;
                    do
                    {
                      ldiv_t v1752 = ldiv(v1751, *(int *)(v1746 + 4 * v1749));
                      int v1751 = v1752.quot;
                      v1748 += *(void *)(v1750 + 8 * v1749--) * v1752.rem;
                    }
                    while (v1749 != -1);
                  }
                  int __B = (int)(float)-*(float *)(v1870 + 4 * (int)v1748);
                  vDSP_vsaddi((const int *)(v1896 + 4 * (int)v1741), 1, &__B, v1738, 1, v1848);
                  v1738 += v1848;
                  v1737 += v1848;
                }
                while (v1737 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 3:
              if (v162 == 2)
              {
                uint64_t v1270 = *v157;
                if (v1270)
                {
                  uint64_t v1271 = 0;
                  uint64_t v1272 = 0;
                  uint64_t v1273 = 0;
                  uint64_t v1274 = *(void *)(v156 + 152);
                  uint64_t v1275 = *(void *)(v224 + 152);
                  uint64_t v1276 = v155[19];
                  unint64_t v1277 = v157[1];
                  uint64_t v1278 = *(uint64_t **)(v156 + 24);
                  uint64_t v1279 = *v1278;
                  uint64_t v1280 = v1278[1];
                  unint64_t v1281 = *(uint64_t **)(v224 + 24);
                  uint64_t v1282 = *v1281;
                  uint64_t v1283 = v1281[1];
                  if (v1277 <= 1) {
                    uint64_t v1284 = 1;
                  }
                  else {
                    uint64_t v1284 = v157[1];
                  }
                  uint64_t v1285 = v1279 - v1280 * v1277;
                  uint64_t v1286 = v1282 - v1283 * v225[1];
                  do
                  {
                    if (v1277)
                    {
                      uint64_t v1287 = 0;
                      uint64_t v1288 = v1275 + 4 * v1272;
                      uint64_t v1289 = v1274 + 4 * v1273;
                      do
                      {
                        if ((int)v384 >= 1)
                        {
                          uint64_t v1290 = 0;
                          unsigned int v1291 = v384 + 1;
                          do
                          {
                            *(float *)(v1276 + v1290) = *(float *)(v1289 + v1290) - *(float *)(v1288 + v1290);
                            --v1291;
                            v1290 += 4;
                          }
                          while (v1291 > 1);
                        }
                        v1273 += v1280;
                        v1272 += v1283;
                        v1276 += 4 * (int)v384;
                        ++v1287;
                        v1288 += 4 * v1283;
                        v1289 += 4 * v1280;
                      }
                      while (v1287 != v1284);
                    }
                    v1273 += v1285;
                    v1272 += v1286;
                    ++v1271;
                  }
                  while (v1271 != v1270);
                }
              }
              else
              {
                uint64_t v1820 = *a1;
                if (v162 == 1)
                {
                  uint64_t v385 = *v157;
                  if (v385)
                  {
                    uint64_t v386 = 0;
                    uint64_t v387 = *(void *)(v156 + 152);
                    uint64_t v388 = *(void *)(v224 + 152);
                    uint64_t v389 = v155[19];
                    uint64_t v390 = 4 * **(void **)(v224 + 24);
                    uint64_t v391 = 4 * **(void **)(v156 + 24);
                    do
                    {
                      if ((int)v384 >= 1)
                      {
                        uint64_t v392 = 0;
                        unsigned int v393 = v384 + 1;
                        do
                        {
                          *(float *)(v389 + v392) = *(float *)(v387 + v392) - *(float *)(v388 + v392);
                          --v393;
                          v392 += 4;
                        }
                        while (v393 > 1);
                      }
                      ++v386;
                      v389 += 4 * (int)v384;
                      v388 += v390;
                      v387 += v391;
                    }
                    while (v386 != v385);
                  }
                }
                else
                {
                  unint64_t v1792 = v155[6];
                  if (v1792)
                  {
                    unint64_t v1292 = 0;
                    uint64_t v1756 = *(void *)(v224 + 152);
                    uint64_t v1765 = *(void *)(v156 + 152);
                    uint64_t v1293 = v155[19];
                    do
                    {
                      uint64_t v1294 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v1295) = 0;
                      }
                      else
                      {
                        uint64_t v1295 = 0;
                        uint64_t v1296 = *(void *)(v1820 + 24);
                        int v1297 = v1292;
                        do
                        {
                          ldiv_t v1298 = ldiv(v1297, v157[v1294]);
                          int v1297 = v1298.quot;
                          v1295 += *(void *)(v1296 + 8 * v1294--) * v1298.rem;
                        }
                        while (v1294 != -1);
                      }
                      uint64_t v1299 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v1300) = 0;
                      }
                      else
                      {
                        uint64_t v1300 = 0;
                        uint64_t v1301 = *(void *)(v224 + 24);
                        int v1302 = v1292;
                        do
                        {
                          ldiv_t v1303 = ldiv(v1302, v225[v1299]);
                          int v1302 = v1303.quot;
                          v1300 += *(void *)(v1301 + 8 * v1299--) * v1303.rem;
                        }
                        while (v1299 != -1);
                      }
                      if ((int)v384 >= 1)
                      {
                        uint64_t v1304 = 0;
                        unsigned int v1305 = v384 + 1;
                        do
                        {
                          *(float *)(v1293 + v1304) = *(float *)(v1765 + 4 * (int)v1295 + v1304)
                                                    - *(float *)(v1756 + 4 * (int)v1300 + v1304);
                          --v1305;
                          v1304 += 4;
                        }
                        while (v1305 > 1);
                      }
                      v1293 += 4 * (int)v384;
                      v1292 += (int)v384;
                    }
                    while (v1292 < v1792);
                  }
                }
              }
              break;
            default:
LABEL_493:
              switch(v380)
              {
                case 1uLL:
                  uint64_t v394 = v155[6];
                  if (v394)
                  {
                    int v395 = *(float **)(v156 + 152);
                    unint64_t v396 = *(float **)(v224 + 152);
                    uint64_t v397 = (float *)v155[19];
                    uint64_t v398 = 4 * **(void **)(v224 + 24);
                    uint64_t v399 = 4 * **(void **)(v156 + 24);
                    do
                    {
                      *v397++ = *v395 - *v396;
                      unint64_t v396 = (float *)((char *)v396 + v398);
                      int v395 = (float *)((char *)v395 + v399);
                      --v394;
                    }
                    while (v394);
                  }
                  break;
                case 2uLL:
                  uint64_t v871 = *v157;
                  if (v871)
                  {
                    uint64_t v872 = 0;
                    uint64_t v873 = 0;
                    uint64_t v874 = 0;
                    uint64_t v875 = 0;
                    uint64_t v876 = *(void *)(v156 + 152);
                    uint64_t v877 = *(void *)(v224 + 152);
                    uint64_t v878 = v155[19];
                    unint64_t v879 = v157[1];
                    uint64_t v880 = *(uint64_t **)(v156 + 24);
                    uint64_t v881 = *v880;
                    uint64_t v882 = v880[1];
                    uint64_t v883 = *(uint64_t **)(v224 + 24);
                    uint64_t v884 = *v883;
                    uint64_t v885 = v883[1];
                    uint64_t v886 = v884 - v885 * v225[1];
                    if (v879 <= 1) {
                      uint64_t v887 = 1;
                    }
                    else {
                      uint64_t v887 = v157[1];
                    }
                    uint64_t v888 = v881 - v882 * v879;
                    do
                    {
                      if (v879)
                      {
                        uint64_t v889 = v873 + v887;
                        uint64_t v890 = (float *)(v878 + 4 * v873);
                        uint64_t v891 = v887;
                        do
                        {
                          *v890++ = *(float *)(v876 + 4 * v875) - *(float *)(v877 + 4 * v874);
                          v875 += v882;
                          v874 += v885;
                          --v891;
                        }
                        while (v891);
                        uint64_t v873 = v889;
                      }
                      v875 += v888;
                      v874 += v886;
                      ++v872;
                    }
                    while (v872 != v871);
                  }
                  break;
                case 3uLL:
                  uint64_t v892 = *v157;
                  if (v892)
                  {
                    uint64_t v893 = 0;
                    uint64_t v894 = 0;
                    uint64_t v895 = 0;
                    uint64_t v896 = 0;
                    uint64_t v897 = *(void *)(v156 + 152);
                    uint64_t v898 = *(void *)(v224 + 152);
                    uint64_t v899 = v155[19];
                    unint64_t v900 = v157[1];
                    vDSP_Length v901 = *(void **)(v156 + 24);
                    uint64_t v902 = v901[1];
                    uint64_t v903 = *(void **)(v224 + 24);
                    uint64_t v904 = v903[1];
                    uint64_t v905 = *v903 - v904 * v225[1];
                    if (v900 <= 1) {
                      uint64_t v906 = 1;
                    }
                    else {
                      uint64_t v906 = v157[1];
                    }
                    unint64_t v907 = *v901 - v902 * v900;
                    do
                    {
                      if (v900)
                      {
                        uint64_t v908 = 0;
                        unint64_t v909 = v157[2];
                        uint64_t v910 = v901[2];
                        uint64_t v911 = v903[2];
                        if (v909 <= 1) {
                          uint64_t v912 = 1;
                        }
                        else {
                          uint64_t v912 = v157[2];
                        }
                        uint64_t v913 = v904 - v911 * v225[2];
                        do
                        {
                          uint64_t v914 = v912;
                          if (v909)
                          {
                            do
                            {
                              *(float *)(v899 + 4 * v894++) = *(float *)(v897 + 4 * v896) - *(float *)(v898 + 4 * v895);
                              v896 += v910;
                              v895 += v911;
                              --v914;
                            }
                            while (v914);
                          }
                          v896 += v902 - v910 * v909;
                          v895 += v913;
                          ++v908;
                        }
                        while (v908 != v906);
                      }
                      v896 += v907;
                      v895 += v905;
                      ++v893;
                    }
                    while (v893 != v892);
                  }
                  break;
                case 4uLL:
                  uint64_t v1880 = *v157;
                  if (v1880)
                  {
                    uint64_t v915 = 0;
                    uint64_t v916 = 0;
                    uint64_t v917 = 0;
                    uint64_t v918 = 0;
                    uint64_t v919 = *(void *)(v156 + 152);
                    uint64_t v920 = *(void *)(v224 + 152);
                    uint64_t v921 = v155[19];
                    unint64_t v922 = v157[1];
                    uint64_t v923 = *(void **)(v156 + 24);
                    uint64_t v924 = *(void **)(v224 + 24);
                    vDSP_Length __Ng = v924[1];
                    uint64_t v1828 = v923[1];
                    vDSP_Length v1860 = *v924 - __Ng * v225[1];
                    if (v922 <= 1) {
                      uint64_t v925 = 1;
                    }
                    else {
                      uint64_t v925 = v157[1];
                    }
                    unint64_t v926 = *v923 - v923[1] * v922;
                    do
                    {
                      if (v922)
                      {
                        uint64_t v927 = 0;
                        unint64_t v928 = v157[2];
                        uint64_t v929 = v923[2];
                        uint64_t v930 = v924[2];
                        if (v928 <= 1) {
                          uint64_t v931 = 1;
                        }
                        else {
                          uint64_t v931 = v157[2];
                        }
                        vDSP_Length v932 = __Ng - v930 * v225[2];
                        do
                        {
                          if (v928)
                          {
                            uint64_t v933 = 0;
                            unint64_t v934 = v157[3];
                            uint64_t v935 = v923[3];
                            uint64_t v936 = v924[3];
                            if (v934 <= 1) {
                              uint64_t v937 = 1;
                            }
                            else {
                              uint64_t v937 = v157[3];
                            }
                            uint64_t v938 = v930 - v936 * v225[3];
                            do
                            {
                              uint64_t v939 = v937;
                              if (v934)
                              {
                                do
                                {
                                  *(float *)(v921 + 4 * v916++) = *(float *)(v919 + 4 * v918)
                                                                - *(float *)(v920 + 4 * v917);
                                  v918 += v935;
                                  v917 += v936;
                                  --v939;
                                }
                                while (v939);
                              }
                              v918 += v929 - v935 * v934;
                              v917 += v938;
                              ++v933;
                            }
                            while (v933 != v931);
                          }
                          v918 += v1828 - v929 * v928;
                          v917 += v932;
                          ++v927;
                        }
                        while (v927 != v925);
                      }
                      v918 += v926;
                      v917 += v1860;
                      ++v915;
                    }
                    while (v915 != v1880);
                  }
                  break;
                default:
                  uint64_t v858 = v155[6];
                  if (v858)
                  {
                    uint64_t v859 = v156;
                    uint64_t v860 = 0;
                    vDSP_Length __Nf = *(void *)(v224 + 152);
                    uint64_t v1827 = *(void *)(v156 + 152);
                    uint64_t v1785 = v155[19];
                    do
                    {
                      uint64_t v861 = v1875;
                      if ((v1875 & 0x80000000) != 0)
                      {
                        LODWORD(v862) = 0;
                      }
                      else
                      {
                        uint64_t v862 = 0;
                        uint64_t v863 = *(void *)(v859 + 24);
                        int v864 = v860;
                        do
                        {
                          ldiv_t v865 = ldiv(v864, v157[v861]);
                          int v864 = v865.quot;
                          v862 += *(void *)(v863 + 8 * v861--) * v865.rem;
                        }
                        while (v861 != -1);
                      }
                      uint64_t v866 = v1855;
                      if ((v1855 & 0x80000000) != 0)
                      {
                        LODWORD(v867) = 0;
                      }
                      else
                      {
                        uint64_t v867 = 0;
                        uint64_t v868 = *(void *)(v224 + 24);
                        int v869 = v860;
                        do
                        {
                          ldiv_t v870 = ldiv(v869, v225[v866]);
                          int v869 = v870.quot;
                          v867 += *(void *)(v868 + 8 * v866--) * v870.rem;
                        }
                        while (v866 != -1);
                      }
                      *(float *)(v1785 + 4 * v860++) = *(float *)(v1827 + 4 * (int)v862)
                                                     - *(float *)(__Nf + 4 * (int)v867);
                    }
                    while (v860 != v858);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::anonymous namespace'::binary<mlx::core::Subtract::eval_cpu(std::vector<mlx::core::array> const&,mlx::core::array&)::$_6>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  switch(*(_DWORD *)(*(void *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          char v7 = **(char **)(*a2 + 152) != **(unsigned __int8 **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          int v35 = *(_DWORD *)(*a2 + 160);
          if (v35 >= 1)
          {
            int v36 = *(BOOL **)(*(void *)a3 + 152);
            int v37 = *(char **)(*a2 + 152);
            int v38 = -**(unsigned __int8 **)(*a1 + 152);
            unsigned int v39 = v35 + 1;
            do
            {
              int v40 = *v37++;
              *v36++ = v40 + v38 != 0;
              --v39;
            }
            while (v39 > 1);
          }
          return;
        case 2:
          int v41 = *(_DWORD *)(*a1 + 160);
          if (v41 >= 1)
          {
            int v42 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v43 = *(unsigned __int8 **)(*a1 + 152);
            int v44 = -**(char **)(*a2 + 152);
            unsigned int v45 = v41 + 1;
            do
            {
              int v46 = *v43++;
              *v42++ = v44 + v46 != 0;
              --v45;
            }
            while (v45 > 1);
          }
          return;
        case 3:
          int v47 = *(_DWORD *)(*(void *)a3 + 48);
          if (v47 >= 1)
          {
            uint64_t v48 = *(BOOL **)(*(void *)a3 + 152);
            unsigned int v49 = *(char **)(*a2 + 152);
            int v50 = *(unsigned __int8 **)(*a1 + 152);
            unsigned int v51 = v47 + 1;
            do
            {
              int v53 = *v50++;
              int v52 = v53;
              int v54 = *v49++;
              *v48++ = v54 != v52;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        default:
          vDSP_Length v26 = *(void **)a3;
          uint64_t v27 = (void *)*a1;
          vDSP_Length v28 = *(int **)*a1;
          uint64_t v29 = (v27[1] - (void)v28) >> 2;
          uint64_t v30 = (v29 - 1);
          if ((int)v30 >= -1) {
            int v31 = -1;
          }
          else {
            int v31 = v29 - 1;
          }
          int v32 = v31 + 1;
          int v33 = v29 + 1;
          break;
      }
      while (1)
      {
        unsigned int v34 = v33 - 2;
        if (v33 - 2 < 0) {
          break;
        }
        --v33;
        if (*(void *)(v27[3] + 8 * v34) != *(void *)(v26[3] + 8 * v34)) {
          goto LABEL_147;
        }
      }
      int v33 = v32;
LABEL_147:
      unsigned int v215 = (void *)*a2;
      uint64_t v216 = *(int **)*a2;
      uint64_t v217 = (v215[1] - (void)v216) >> 2;
      uint64_t v218 = (v217 - 1);
      if ((int)v218 >= -1) {
        int v219 = -1;
      }
      else {
        int v219 = v217 - 1;
      }
      int v220 = v219 + 1;
      int v221 = v217 + 1;
      while (1)
      {
        unsigned int v222 = v221 - 2;
        if (v221 - 2 < 0) {
          break;
        }
        --v221;
        if (*(void *)(v215[3] + 8 * v222) != *(void *)(v26[3] + 8 * v222)) {
          goto LABEL_201;
        }
      }
      int v221 = v220;
LABEL_201:
      int v269 = v29 + 1;
      while (1)
      {
        unsigned int v270 = v269 - 2;
        if (v269 - 2 < 0) {
          break;
        }
        --v269;
        if (*(void *)(v27[3] + 8 * v270)) {
          goto LABEL_236;
        }
      }
      int v269 = v32;
LABEL_236:
      int v283 = v217 + 1;
      while (1)
      {
        unsigned int v284 = v283 - 2;
        if (v283 - 2 < 0) {
          break;
        }
        --v283;
        if (*(void *)(v215[3] + 8 * v284)) {
          goto LABEL_271;
        }
      }
      int v283 = v220;
LABEL_271:
      unint64_t v297 = (uint64_t)(v26[1] - *v26) >> 2;
      if (v33 <= v221) {
        int v298 = v221;
      }
      else {
        int v298 = v33;
      }
      if (v33 <= v283) {
        int v33 = v283;
      }
      if (v269 > v221) {
        int v221 = v269;
      }
      if (v297 > v221)
      {
        int v299 = 1;
      }
      else
      {
        int v221 = (uint64_t)(v26[1] - *v26) >> 2;
        int v299 = 4;
      }
      if (v297 > v33)
      {
        int v300 = 2;
      }
      else
      {
        int v33 = v221;
        int v300 = v299;
      }
      if (v297 > v298)
      {
        int v33 = v298;
        int v300 = 3;
      }
      uint64_t v1944 = v218;
      uint64_t v1960 = v30;
      if (!v33) {
        goto LABEL_300;
      }
      unint64_t v301 = *(void *)(v26[3] + 8 * (v33 - 1));
      if (v301 < 0x10) {
        goto LABEL_300;
      }
      switch(v300)
      {
        case 1:
          if (v33 == 2)
          {
            uint64_t v1353 = *v28;
            if (v1353)
            {
              uint64_t v1354 = 0;
              uint64_t v1355 = 0;
              uint64_t v1356 = 0;
              uint64_t v1357 = v27[19];
              uint64_t v1358 = v215[19];
              uint64_t v1359 = v26[19];
              unint64_t v1360 = v28[1];
              uint64_t v1361 = (uint64_t *)v27[3];
              uint64_t v1362 = *v1361;
              uint64_t v1363 = v1361[1];
              uint64_t v1364 = (uint64_t *)v215[3];
              uint64_t v1366 = *v1364;
              uint64_t v1365 = v1364[1];
              if (v1360 <= 1) {
                uint64_t v1367 = 1;
              }
              else {
                uint64_t v1367 = v28[1];
              }
              uint64_t v1368 = v1362 - v1363 * v1360;
              uint64_t v1369 = v1366 - v1365 * v216[1];
              do
              {
                if (v1360)
                {
                  uint64_t v1370 = 0;
                  uint64_t v1371 = v1358 + v1355;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1372 = 0;
                      int v1373 = -*(unsigned __int8 *)(v1357 + v1356);
                      unsigned int v1374 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1359 + v1372) = *(char *)(v1371 + v1372) + v1373 != 0;
                        --v1374;
                        ++v1372;
                      }
                      while (v1374 > 1);
                    }
                    v1356 += v1363;
                    v1355 += v1365;
                    v1359 += (int)v301;
                    ++v1370;
                    v1371 += v1365;
                  }
                  while (v1370 != v1367);
                }
                v1356 += v1368;
                v1355 += v1369;
                ++v1354;
              }
              while (v1354 != v1353);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v971 = *v28;
            if (v971)
            {
              uint64_t v972 = 0;
              uint64_t v973 = 0;
              uint64_t v974 = v27[19];
              uint64_t v975 = v215[19];
              uint64_t v976 = v26[19];
              uint64_t v977 = *(void *)v27[3];
              uint64_t v978 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v979 = 0;
                  int v980 = -*(unsigned __int8 *)(v974 + v973);
                  unsigned int v981 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v976 + v979) = *(char *)(v975 + v979) + v980 != 0;
                    --v981;
                    ++v979;
                  }
                  while (v981 > 1);
                }
                v973 += v977;
                v976 += (int)v301;
                ++v972;
                v975 += v978;
              }
              while (v972 != v971);
            }
          }
          else
          {
            unint64_t v1901 = v26[6];
            if (v1901)
            {
              unint64_t v1930 = 0;
              uint64_t v1852 = v215[19];
              uint64_t v1867 = v27[19];
              uint64_t v1375 = v26[19];
              do
              {
                uint64_t v1376 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1377 = v27[3];
                  int quot = v1930;
                  do
                  {
                    ldiv_t v1379 = ldiv(quot, v28[v30]);
                    int quot = v1379.quot;
                    v1376 += *(void *)(v1377 + 8 * v30--) * v1379.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1380 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1381) = 0;
                }
                else
                {
                  uint64_t v1381 = 0;
                  uint64_t v1382 = v215[3];
                  int v1383 = v1930;
                  do
                  {
                    ldiv_t v1384 = ldiv(v1383, v216[v1380]);
                    int v1383 = v1384.quot;
                    v1381 += *(void *)(v1382 + 8 * v1380--) * v1384.rem;
                  }
                  while (v1380 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1385 = 0;
                  int v1386 = -*(unsigned __int8 *)(v1867 + (int)v1376);
                  unsigned int v1387 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1375 + v1385) = *(char *)(v1852 + (int)v1381 + v1385) + v1386 != 0;
                    --v1387;
                    ++v1385;
                  }
                  while (v1387 > 1);
                }
                v1375 += (int)v301;
                v1930 += (int)v301;
              }
              while (v1930 < v1901);
            }
          }
          break;
        case 2:
          if (v33 == 2)
          {
            uint64_t v1388 = *v28;
            if (v1388)
            {
              uint64_t v1389 = 0;
              uint64_t v1390 = 0;
              uint64_t v1391 = 0;
              uint64_t v1392 = v27[19];
              uint64_t v1393 = v215[19];
              uint64_t v1394 = v26[19];
              unint64_t v1395 = v28[1];
              uint64_t v1396 = (uint64_t *)v27[3];
              uint64_t v1397 = *v1396;
              uint64_t v1398 = v1396[1];
              ldiv_t v1399 = (uint64_t *)v215[3];
              uint64_t v1401 = *v1399;
              uint64_t v1400 = v1399[1];
              if (v1395 <= 1) {
                uint64_t v1402 = 1;
              }
              else {
                uint64_t v1402 = v28[1];
              }
              uint64_t v1403 = v1397 - v1398 * v1395;
              uint64_t v1404 = v1401 - v1400 * v216[1];
              do
              {
                if (v1395)
                {
                  uint64_t v1405 = 0;
                  uint64_t v1406 = v1392 + v1391;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1407 = 0;
                      int v1408 = -*(char *)(v1393 + v1390);
                      unsigned int v1409 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1394 + v1407) = v1408 + *(unsigned __int8 *)(v1406 + v1407) != 0;
                        --v1409;
                        ++v1407;
                      }
                      while (v1409 > 1);
                    }
                    v1391 += v1398;
                    v1390 += v1400;
                    v1394 += (int)v301;
                    ++v1405;
                    v1406 += v1398;
                  }
                  while (v1405 != v1402);
                }
                v1391 += v1403;
                v1390 += v1404;
                ++v1389;
              }
              while (v1389 != v1388);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v982 = *v28;
            if (v982)
            {
              uint64_t v983 = 0;
              uint64_t v984 = 0;
              uint64_t v985 = v27[19];
              uint64_t v986 = v215[19];
              uint64_t v987 = v26[19];
              uint64_t v988 = *(void *)v27[3];
              uint64_t v989 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v990 = 0;
                  int v991 = -*(char *)(v986 + v984);
                  unsigned int v992 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v987 + v990) = v991 + *(unsigned __int8 *)(v985 + v990) != 0;
                    --v992;
                    ++v990;
                  }
                  while (v992 > 1);
                }
                v984 += v989;
                v987 += (int)v301;
                ++v983;
                v985 += v988;
              }
              while (v983 != v982);
            }
          }
          else
          {
            unint64_t v1902 = v26[6];
            if (v1902)
            {
              unint64_t v1931 = 0;
              uint64_t v1853 = v215[19];
              uint64_t v1868 = v27[19];
              uint64_t v1410 = v26[19];
              do
              {
                uint64_t v1411 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1412 = v27[3];
                  int v1413 = v1931;
                  do
                  {
                    ldiv_t v1414 = ldiv(v1413, v28[v30]);
                    int v1413 = v1414.quot;
                    v1411 += *(void *)(v1412 + 8 * v30--) * v1414.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1415 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1416) = 0;
                }
                else
                {
                  uint64_t v1416 = 0;
                  uint64_t v1417 = v215[3];
                  int v1418 = v1931;
                  do
                  {
                    ldiv_t v1419 = ldiv(v1418, v216[v1415]);
                    int v1418 = v1419.quot;
                    v1416 += *(void *)(v1417 + 8 * v1415--) * v1419.rem;
                  }
                  while (v1415 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1420 = 0;
                  int v1421 = -*(char *)(v1853 + (int)v1416);
                  unsigned int v1422 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1410 + v1420) = v1421 + *(unsigned __int8 *)(v1868 + (int)v1411 + v1420) != 0;
                    --v1422;
                    ++v1420;
                  }
                  while (v1422 > 1);
                }
                v1410 += (int)v301;
                v1931 += (int)v301;
              }
              while (v1931 < v1902);
            }
          }
          break;
        case 3:
          if (v33 == 2)
          {
            uint64_t v1121 = *v28;
            if (v1121)
            {
              uint64_t v1122 = 0;
              uint64_t v1123 = 0;
              uint64_t v1124 = 0;
              uint64_t v1125 = v27[19];
              uint64_t v1126 = v215[19];
              uint64_t v1127 = v26[19];
              unint64_t v1128 = v28[1];
              uint64_t v1129 = (uint64_t *)v27[3];
              uint64_t v1130 = *v1129;
              uint64_t v1131 = v1129[1];
              uint64_t v1132 = (uint64_t *)v215[3];
              uint64_t v1134 = *v1132;
              uint64_t v1133 = v1132[1];
              if (v1128 <= 1) {
                uint64_t v1135 = 1;
              }
              else {
                uint64_t v1135 = v28[1];
              }
              uint64_t v1136 = v1130 - v1131 * v1128;
              uint64_t v1137 = v1134 - v1133 * v216[1];
              do
              {
                if (v1128)
                {
                  uint64_t v1138 = 0;
                  uint64_t v1139 = v1126 + v1123;
                  uint64_t v1140 = v1125 + v1124;
                  do
                  {
                    if ((int)v301 >= 1)
                    {
                      uint64_t v1141 = 0;
                      unsigned int v1142 = v301 + 1;
                      do
                      {
                        *(unsigned char *)(v1127 + v1141) = *(char *)(v1139 + v1141) != *(unsigned __int8 *)(v1140 + v1141);
                        --v1142;
                        ++v1141;
                      }
                      while (v1142 > 1);
                    }
                    v1124 += v1131;
                    v1123 += v1133;
                    v1127 += (int)v301;
                    ++v1138;
                    v1139 += v1133;
                    v1140 += v1131;
                  }
                  while (v1138 != v1135);
                }
                v1124 += v1136;
                v1123 += v1137;
                ++v1122;
              }
              while (v1122 != v1121);
            }
          }
          else if (v33 == 1)
          {
            uint64_t v302 = *v28;
            if (v302)
            {
              uint64_t v303 = 0;
              uint64_t v304 = v27[19];
              uint64_t v305 = v215[19];
              uint64_t v306 = v26[19];
              uint64_t v307 = *(void *)v27[3];
              uint64_t v308 = *(void *)v215[3];
              do
              {
                if ((int)v301 >= 1)
                {
                  uint64_t v309 = 0;
                  unsigned int v310 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v306 + v309) = *(char *)(v305 + v309) != *(unsigned __int8 *)(v304 + v309);
                    --v310;
                    ++v309;
                  }
                  while (v310 > 1);
                }
                v306 += (int)v301;
                ++v303;
                v305 += v308;
                v304 += v307;
              }
              while (v303 != v302);
            }
          }
          else
          {
            unint64_t v1894 = v26[6];
            if (v1894)
            {
              unint64_t v1923 = 0;
              uint64_t v1847 = v215[19];
              uint64_t v1864 = v27[19];
              uint64_t v1143 = v26[19];
              do
              {
                uint64_t v1144 = 0;
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v1145 = v27[3];
                  int v1146 = v1923;
                  do
                  {
                    ldiv_t v1147 = ldiv(v1146, v28[v30]);
                    int v1146 = v1147.quot;
                    v1144 += *(void *)(v1145 + 8 * v30--) * v1147.rem;
                  }
                  while (v30 != -1);
                }
                uint64_t v1148 = v1944;
                if ((v1944 & 0x80000000) != 0)
                {
                  LODWORD(v1149) = 0;
                }
                else
                {
                  uint64_t v1149 = 0;
                  uint64_t v1150 = v215[3];
                  int v1151 = v1923;
                  do
                  {
                    ldiv_t v1152 = ldiv(v1151, v216[v1148]);
                    int v1151 = v1152.quot;
                    v1149 += *(void *)(v1150 + 8 * v1148--) * v1152.rem;
                  }
                  while (v1148 != -1);
                }
                uint64_t v30 = v1960;
                if ((int)v301 >= 1)
                {
                  uint64_t v1153 = 0;
                  unsigned int v1154 = v301 + 1;
                  do
                  {
                    *(unsigned char *)(v1143 + v1153) = *(char *)(v1847 + (int)v1149 + v1153) != *(unsigned __int8 *)(v1864 + (int)v1144 + v1153);
                    --v1154;
                    ++v1153;
                  }
                  while (v1154 > 1);
                }
                v1143 += (int)v301;
                v1923 += (int)v301;
              }
              while (v1923 < v1894);
            }
          }
          break;
        default:
LABEL_300:
          switch(v297)
          {
            case 1uLL:
              uint64_t v311 = v26[6];
              if (v311)
              {
                uint64_t v312 = (unsigned __int8 *)v27[19];
                unsigned int v313 = (char *)v215[19];
                uint64_t v314 = (BOOL *)v26[19];
                uint64_t v315 = *(void *)v27[3];
                uint64_t v316 = *(void *)v215[3];
                do
                {
                  *v314++ = *v313 != *v312;
                  v313 += v316;
                  v312 += v315;
                  --v311;
                }
                while (v311);
              }
              break;
            case 2uLL:
              uint64_t v448 = *v28;
              if (v448)
              {
                uint64_t v449 = 0;
                uint64_t v450 = 0;
                uint64_t v451 = 0;
                uint64_t v452 = 0;
                uint64_t v453 = v27[19];
                uint64_t v454 = v215[19];
                uint64_t v455 = v26[19];
                unint64_t v456 = v28[1];
                uint64_t v457 = (uint64_t *)v27[3];
                uint64_t v458 = *v457;
                uint64_t v459 = v457[1];
                uint64_t v460 = (uint64_t *)v215[3];
                uint64_t v461 = *v460;
                uint64_t v462 = v460[1];
                uint64_t v463 = v461 - v462 * v216[1];
                if (v456 <= 1) {
                  uint64_t v464 = 1;
                }
                else {
                  uint64_t v464 = v28[1];
                }
                uint64_t v465 = v458 - v459 * v456;
                do
                {
                  if (v456)
                  {
                    uint64_t v466 = v450 + v464;
                    uint64_t v467 = (BOOL *)(v455 + v450);
                    uint64_t v468 = v464;
                    do
                    {
                      *v467++ = *(char *)(v454 + v451) != *(unsigned __int8 *)(v453 + v452);
                      v452 += v459;
                      v451 += v462;
                      --v468;
                    }
                    while (v468);
                    uint64_t v450 = v466;
                  }
                  v452 += v465;
                  v451 += v463;
                  ++v449;
                }
                while (v449 != v448);
              }
              break;
            case 3uLL:
              uint64_t v469 = *v28;
              if (v469)
              {
                uint64_t v470 = 0;
                uint64_t v471 = 0;
                uint64_t v472 = 0;
                uint64_t v473 = 0;
                uint64_t v474 = v27[19];
                uint64_t v475 = v215[19];
                uint64_t v476 = v26[19];
                unint64_t v477 = v28[1];
                uint64_t v478 = (void *)v27[3];
                uint64_t v479 = v478[1];
                uint64_t v480 = (void *)v215[3];
                uint64_t v481 = v480[1];
                uint64_t v482 = *v480 - v481 * v216[1];
                if (v477 <= 1) {
                  uint64_t v483 = 1;
                }
                else {
                  uint64_t v483 = v28[1];
                }
                unint64_t v484 = *v478 - v479 * v477;
                do
                {
                  if (v477)
                  {
                    uint64_t v485 = 0;
                    unint64_t v486 = v28[2];
                    uint64_t v487 = v478[2];
                    uint64_t v488 = v480[2];
                    if (v486 <= 1) {
                      uint64_t v489 = 1;
                    }
                    else {
                      uint64_t v489 = v28[2];
                    }
                    uint64_t v490 = v481 - v488 * v216[2];
                    do
                    {
                      uint64_t v491 = v489;
                      if (v486)
                      {
                        do
                        {
                          *(unsigned char *)(v476 + v471++) = *(char *)(v475 + v472) != *(unsigned __int8 *)(v474 + v473);
                          v473 += v487;
                          v472 += v488;
                          --v491;
                        }
                        while (v491);
                      }
                      v473 += v479 - v487 * v486;
                      v472 += v490;
                      ++v485;
                    }
                    while (v485 != v483);
                  }
                  v473 += v484;
                  v472 += v482;
                  ++v470;
                }
                while (v470 != v469);
              }
              break;
            case 4uLL:
              uint64_t v1967 = *v28;
              if (v1967)
              {
                uint64_t v492 = 0;
                uint64_t v493 = 0;
                uint64_t v494 = 0;
                uint64_t v495 = 0;
                uint64_t v496 = v27[19];
                uint64_t v497 = v215[19];
                uint64_t v498 = v26[19];
                unint64_t v499 = v28[1];
                uint64_t v500 = (void *)v27[3];
                uint64_t v501 = (void *)v215[3];
                uint64_t v1862 = v501[1];
                uint64_t v1874 = v500[1];
                uint64_t v1916 = *v501 - v1862 * v216[1];
                int v1949 = v28[1];
                if (v499 <= 1) {
                  uint64_t v502 = 1;
                }
                else {
                  uint64_t v502 = v28[1];
                }
                unint64_t v1887 = *v500 - v500[1] * v499;
                do
                {
                  if (v1949)
                  {
                    uint64_t v503 = 0;
                    unint64_t v504 = v28[2];
                    uint64_t v505 = v500[2];
                    uint64_t v506 = v501[2];
                    if (v504 <= 1) {
                      uint64_t v507 = 1;
                    }
                    else {
                      uint64_t v507 = v28[2];
                    }
                    uint64_t v508 = v1862 - v506 * v216[2];
                    do
                    {
                      if (v504)
                      {
                        uint64_t v509 = 0;
                        unint64_t v510 = v28[3];
                        uint64_t v511 = v500[3];
                        uint64_t v512 = v501[3];
                        if (v510 <= 1) {
                          uint64_t v513 = 1;
                        }
                        else {
                          uint64_t v513 = v28[3];
                        }
                        uint64_t v514 = v506 - v512 * v216[3];
                        do
                        {
                          uint64_t v515 = v513;
                          if (v510)
                          {
                            do
                            {
                              *(unsigned char *)(v498 + v493++) = *(char *)(v497 + v494) != *(unsigned __int8 *)(v496 + v495);
                              v495 += v511;
                              v494 += v512;
                              --v515;
                            }
                            while (v515);
                          }
                          v495 += v505 - v511 * v510;
                          v494 += v514;
                          ++v509;
                        }
                        while (v509 != v507);
                      }
                      v495 += v1874 - v505 * v504;
                      v494 += v508;
                      ++v503;
                    }
                    while (v503 != v502);
                  }
                  v495 += v1887;
                  v494 += v1916;
                  ++v492;
                }
                while (v492 != v1967);
              }
              break;
            default:
              uint64_t v437 = v26[6];
              if (v437)
              {
                uint64_t v438 = 0;
                uint64_t v1886 = v215[19];
                uint64_t v1915 = v27[19];
                uint64_t v1873 = v26[19];
                do
                {
                  uint64_t v439 = 0;
                  if ((v30 & 0x80000000) == 0)
                  {
                    uint64_t v440 = v27[3];
                    int v441 = v438;
                    do
                    {
                      ldiv_t v442 = ldiv(v441, v28[v30]);
                      int v441 = v442.quot;
                      v439 += *(void *)(v440 + 8 * v30--) * v442.rem;
                    }
                    while (v30 != -1);
                  }
                  uint64_t v443 = v1944;
                  if ((v1944 & 0x80000000) != 0)
                  {
                    LODWORD(v444) = 0;
                  }
                  else
                  {
                    uint64_t v444 = 0;
                    uint64_t v445 = v215[3];
                    int v446 = v438;
                    do
                    {
                      ldiv_t v447 = ldiv(v446, v216[v443]);
                      int v446 = v447.quot;
                      v444 += *(void *)(v445 + 8 * v443--) * v447.rem;
                    }
                    while (v443 != -1);
                  }
                  *(unsigned char *)(v1873 + v438++) = *(char *)(v1886 + (int)v444) != *(unsigned __int8 *)(v1915 + (int)v439);
                  uint64_t v30 = v1960;
                }
                while (v438 != v437);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          int v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            char v10 = **(unsigned char **)(*a1 + 152);
            vDSP_Length v11 = *(unsigned char **)(*(void *)a3 + 152);
            int v12 = *(char **)(*a2 + 152);
            unsigned int v13 = v9 + 1;
            do
            {
              char v14 = *v12++;
              *v11++ = v10 - v14;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          int v63 = *(_DWORD *)(*a1 + 160);
          if (v63 >= 1)
          {
            char v64 = **(unsigned char **)(*a2 + 152);
            unsigned int v65 = *(unsigned char **)(*(void *)a3 + 152);
            char v66 = *(char **)(*a1 + 152);
            unsigned int v67 = v63 + 1;
            do
            {
              char v68 = *v66++;
              *v65++ = v68 - v64;
              --v67;
            }
            while (v67 > 1);
          }
          return;
        case 3:
          int v69 = *(_DWORD *)(*(void *)a3 + 48);
          if (v69 >= 1)
          {
            uint64_t v70 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v71 = *(char **)(*a2 + 152);
            uint64_t v72 = *(char **)(*a1 + 152);
            unsigned int v73 = v69 + 1;
            do
            {
              char v75 = *v72++;
              char v74 = v75;
              char v76 = *v71++;
              *v70++ = v74 - v76;
              --v73;
            }
            while (v73 > 1);
          }
          return;
        default:
          int v55 = *(void **)a3;
          uint64_t v56 = *a1;
          int v57 = *(int **)*a1;
          uint64_t v58 = (*(void *)(*a1 + 8) - (void)v57) >> 2;
          int v59 = v58 - 1;
          if ((int)v58 - 1 >= -1) {
            int v59 = -1;
          }
          int v60 = v59 + 1;
          int v61 = v58 + 1;
          break;
      }
      while (1)
      {
        unsigned int v62 = v61 - 2;
        if (v61 - 2 < 0) {
          break;
        }
        --v61;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v62) != *(void *)(v55[3] + 8 * v62)) {
          goto LABEL_155;
        }
      }
      int v61 = v60;
LABEL_155:
      unsigned int v223 = (int **)*a2;
      uint64_t v224 = *(int **)*a2;
      uint64_t v225 = (*(void *)(*a2 + 8) - (void)v224) >> 2;
      int v226 = v225 - 1;
      if ((int)v225 - 1 >= -1) {
        int v226 = -1;
      }
      int v227 = v226 + 1;
      int v228 = v225 + 1;
      while (1)
      {
        unsigned int v229 = v228 - 2;
        if (v228 - 2 < 0) {
          break;
        }
        --v228;
        if (*(void *)&v223[3][2 * v229] != *(void *)(v55[3] + 8 * v229)) {
          goto LABEL_206;
        }
      }
      int v228 = v227;
LABEL_206:
      int v271 = v58 + 1;
      while (1)
      {
        unsigned int v272 = v271 - 2;
        if (v271 - 2 < 0) {
          break;
        }
        --v271;
        if (*(void *)(*(void *)(v56 + 24) + 8 * v272)) {
          goto LABEL_241;
        }
      }
      int v271 = v60;
LABEL_241:
      int v285 = v225 + 1;
      while (1)
      {
        int v286 = v285 - 2;
        if (v285 - 2 < 0) {
          break;
        }
        --v285;
        if (*(void *)&v223[3][2 * v286]) {
          goto LABEL_306;
        }
      }
      int v285 = v227;
LABEL_306:
      unint64_t v317 = (uint64_t)(v55[1] - *v55) >> 2;
      if (v61 <= v228) {
        int v318 = v228;
      }
      else {
        int v318 = v61;
      }
      if (v61 <= v285) {
        int v61 = v285;
      }
      if (v271 > v228) {
        int v228 = v271;
      }
      if (v317 > v228)
      {
        int v319 = 1;
      }
      else
      {
        int v228 = (uint64_t)(v55[1] - *v55) >> 2;
        int v319 = 4;
      }
      if (v317 > v61)
      {
        int v320 = 2;
      }
      else
      {
        int v61 = v228;
        int v320 = v319;
      }
      if (v317 > v318)
      {
        int v61 = v318;
        int v320 = 3;
      }
      if (!v61) {
        goto LABEL_336;
      }
      unint64_t v321 = *(void *)(v55[3] + 8 * (v61 - 1));
      if (v321 < 0x10) {
        goto LABEL_336;
      }
      uint64_t v1961 = *(void *)(v55[3] + 8 * (v61 - 1));
      switch(v320)
      {
        case 1:
          if (v61 == 2)
          {
            int v1423 = *v57;
            if (*v57)
            {
              unint64_t v1424 = 0;
              uint64_t v1425 = 0;
              uint64_t v1426 = 0;
              uint64_t v1427 = *(void *)(v56 + 152);
              uint64_t v1428 = v223[19];
              uint64_t v1429 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1430 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1431 = 0;
                      char v1432 = *(unsigned char *)(v1427 + v1426);
                      unsigned int v1433 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1429 + v1431) = v1432 - *((unsigned char *)v1428 + v1425 + v1431);
                        --v1433;
                        ++v1431;
                      }
                      while (v1433 > 1);
                      uint64_t v56 = *a1;
                      unsigned int v223 = (int **)*a2;
                      int v57 = *(int **)*a1;
                    }
                    unint64_t v1434 = *(void **)(v56 + 24);
                    uint64_t v1435 = v1434[1];
                    v1426 += v1435;
                    v1425 += *((void *)v223[3] + 1);
                    v1429 += (int)v321;
                    ++v1430;
                    unint64_t v1436 = v57[1];
                  }
                  while (v1430 < v1436);
                  int v1423 = *v57;
                  uint64_t v224 = *v223;
                }
                else
                {
                  unint64_t v1436 = 0;
                  unint64_t v1434 = *(void **)(v56 + 24);
                  uint64_t v1435 = v1434[1];
                }
                uint64_t v1426 = *v1434 + v1426 - v1436 * v1435;
                uint64_t v1425 = *(void *)v223[3] + v1425 - *((void *)v223[3] + 1) * v224[1];
                ++v1424;
              }
              while (v1424 < v1423);
            }
          }
          else if (v61 == 1)
          {
            int v993 = *v57;
            if (*v57)
            {
              unint64_t v994 = 0;
              uint64_t v995 = 0;
              uint64_t v996 = 0;
              uint64_t v997 = *(void *)(v56 + 152);
              uint64_t v998 = v223[19];
              uint64_t v999 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1000 = 0;
                  char v1001 = *(unsigned char *)(v997 + v996);
                  unsigned int v1002 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v999 + v1000) = v1001 - *((unsigned char *)v998 + v995 + v1000);
                    --v1002;
                    ++v1000;
                  }
                  while (v1002 > 1);
                  uint64_t v56 = *a1;
                  unsigned int v223 = (int **)*a2;
                  int v993 = **(_DWORD **)*a1;
                }
                v996 += **(void **)(v56 + 24);
                v995 += *(void *)v223[3];
                v999 += (int)v321;
                ++v994;
              }
              while (v994 < v993);
            }
          }
          else if (v55[6])
          {
            unint64_t v1882 = v223[19];
            uint64_t v1903 = *(void *)(v56 + 152);
            uint64_t v1932 = (int)v321;
            unint64_t v1956 = 0;
            unsigned int v1869 = v321 + 1;
            uint64_t v1437 = v55[19];
            do
            {
              uint64_t v1438 = *(void *)*a1;
              unint64_t v1439 = (unint64_t)(*(void *)(*a1 + 8) - v1438) >> 2;
              uint64_t v1440 = 0;
              uint64_t v1441 = (v1439 - 1);
              if ((int)v1439 - 1 >= 0)
              {
                uint64_t v1442 = *(void *)(*a1 + 24);
                int v1443 = v1956;
                do
                {
                  ldiv_t v1444 = ldiv(v1443, *(int *)(v1438 + 4 * v1441));
                  int v1443 = v1444.quot;
                  v1440 += *(void *)(v1442 + 8 * v1441--) * v1444.rem;
                }
                while (v1441 != -1);
              }
              uint64_t v1445 = *(void *)*a2;
              unint64_t v1446 = (unint64_t)(*(void *)(*a2 + 8) - v1445) >> 2;
              uint64_t v1447 = 0;
              uint64_t v1448 = (v1446 - 1);
              if ((int)v1446 - 1 >= 0)
              {
                uint64_t v1449 = *(void *)(*a2 + 24);
                int v1450 = v1956;
                do
                {
                  ldiv_t v1451 = ldiv(v1450, *(int *)(v1445 + 4 * v1448));
                  int v1450 = v1451.quot;
                  v1447 += *(void *)(v1449 + 8 * v1448--) * v1451.rem;
                }
                while (v1448 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1452 = 0;
                char v1453 = *(unsigned char *)(v1903 + (int)v1440);
                unsigned int v1454 = v1869;
                do
                {
                  *(unsigned char *)(v1437 + v1452) = v1453 - *((unsigned char *)v1882 + (int)v1447 + v1452);
                  --v1454;
                  ++v1452;
                }
                while (v1454 > 1);
                int v55 = *(void **)a3;
              }
              v1437 += v1932;
              v1956 += v1932;
            }
            while (v1956 < v55[6]);
          }
          break;
        case 2:
          if (v61 == 2)
          {
            int v1455 = *v57;
            if (*v57)
            {
              unint64_t v1456 = 0;
              uint64_t v1457 = 0;
              uint64_t v1458 = 0;
              uint64_t v1459 = *(void *)(v56 + 152);
              ldiv_t v1460 = v223[19];
              uint64_t v1461 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1462 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1463 = 0;
                      char v1464 = *((unsigned char *)v1460 + v1457);
                      unsigned int v1465 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1461 + v1463) = *(unsigned char *)(v1459 + v1458 + v1463) - v1464;
                        --v1465;
                        ++v1463;
                      }
                      while (v1465 > 1);
                      uint64_t v56 = *a1;
                      unsigned int v223 = (int **)*a2;
                      int v57 = *(int **)*a1;
                    }
                    uint64_t v1466 = *(void **)(v56 + 24);
                    uint64_t v1467 = v1466[1];
                    v1458 += v1467;
                    v1457 += *((void *)v223[3] + 1);
                    v1461 += (int)v321;
                    ++v1462;
                    unint64_t v1468 = v57[1];
                  }
                  while (v1462 < v1468);
                  int v1455 = *v57;
                  uint64_t v224 = *v223;
                }
                else
                {
                  unint64_t v1468 = 0;
                  uint64_t v1466 = *(void **)(v56 + 24);
                  uint64_t v1467 = v1466[1];
                }
                uint64_t v1458 = *v1466 + v1458 - v1468 * v1467;
                uint64_t v1457 = *(void *)v223[3] + v1457 - *((void *)v223[3] + 1) * v224[1];
                ++v1456;
              }
              while (v1456 < v1455);
            }
          }
          else if (v61 == 1)
          {
            int v1003 = *v57;
            if (*v57)
            {
              unint64_t v1004 = 0;
              uint64_t v1005 = 0;
              uint64_t v1006 = 0;
              uint64_t v1007 = *(void *)(v56 + 152);
              uint64_t v1008 = v223[19];
              uint64_t v1009 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v1010 = 0;
                  char v1011 = *((unsigned char *)v1008 + v1005);
                  unsigned int v1012 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v1009 + v1010) = *(unsigned char *)(v1007 + v1006 + v1010) - v1011;
                    --v1012;
                    ++v1010;
                  }
                  while (v1012 > 1);
                  uint64_t v56 = *a1;
                  unsigned int v223 = (int **)*a2;
                  int v1003 = **(_DWORD **)*a1;
                }
                v1006 += **(void **)(v56 + 24);
                v1005 += *(void *)v223[3];
                v1009 += (int)v321;
                ++v1004;
              }
              while (v1004 < v1003);
            }
          }
          else if (v55[6])
          {
            unint64_t v1883 = v223[19];
            uint64_t v1904 = *(void *)(v56 + 152);
            uint64_t v1933 = (int)v321;
            unint64_t v1957 = 0;
            unsigned int v1870 = v321 + 1;
            uint64_t v1469 = v55[19];
            do
            {
              uint64_t v1470 = *(void *)*a1;
              unint64_t v1471 = (unint64_t)(*(void *)(*a1 + 8) - v1470) >> 2;
              uint64_t v1472 = 0;
              uint64_t v1473 = (v1471 - 1);
              if ((int)v1471 - 1 >= 0)
              {
                uint64_t v1474 = *(void *)(*a1 + 24);
                int v1475 = v1957;
                do
                {
                  ldiv_t v1476 = ldiv(v1475, *(int *)(v1470 + 4 * v1473));
                  int v1475 = v1476.quot;
                  v1472 += *(void *)(v1474 + 8 * v1473--) * v1476.rem;
                }
                while (v1473 != -1);
              }
              uint64_t v1477 = *(void *)*a2;
              unint64_t v1478 = (unint64_t)(*(void *)(*a2 + 8) - v1477) >> 2;
              uint64_t v1479 = 0;
              uint64_t v1480 = (v1478 - 1);
              if ((int)v1478 - 1 >= 0)
              {
                uint64_t v1481 = *(void *)(*a2 + 24);
                int v1482 = v1957;
                do
                {
                  ldiv_t v1483 = ldiv(v1482, *(int *)(v1477 + 4 * v1480));
                  int v1482 = v1483.quot;
                  v1479 += *(void *)(v1481 + 8 * v1480--) * v1483.rem;
                }
                while (v1480 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1484 = 0;
                char v1485 = *((unsigned char *)v1883 + (int)v1479);
                unsigned int v1486 = v1870;
                do
                {
                  *(unsigned char *)(v1469 + v1484) = *(unsigned char *)(v1904 + (int)v1472 + v1484) - v1485;
                  --v1486;
                  ++v1484;
                }
                while (v1486 > 1);
                int v55 = *(void **)a3;
              }
              v1469 += v1933;
              v1957 += v1933;
            }
            while (v1957 < v55[6]);
          }
          break;
        case 3:
          if (v61 == 2)
          {
            int v1155 = *v57;
            if (*v57)
            {
              unint64_t v1156 = 0;
              uint64_t v1157 = 0;
              uint64_t v1158 = 0;
              uint64_t v1159 = *(void *)(v56 + 152);
              int v1160 = v223[19];
              uint64_t v1161 = v55[19];
              do
              {
                if (v57[1])
                {
                  unint64_t v1162 = 0;
                  do
                  {
                    if ((int)v321 >= 1)
                    {
                      uint64_t v1163 = 0;
                      unsigned int v1164 = v321 + 1;
                      do
                      {
                        *(unsigned char *)(v1161 + v1163) = *(unsigned char *)(v1159 + v1158 + v1163)
                                                  - *((unsigned char *)v1160 + v1157 + v1163);
                        --v1164;
                        ++v1163;
                      }
                      while (v1164 > 1);
                      uint64_t v56 = *a1;
                      unsigned int v223 = (int **)*a2;
                      int v57 = *(int **)*a1;
                    }
                    int v1165 = *(void **)(v56 + 24);
                    uint64_t v1166 = v1165[1];
                    v1158 += v1166;
                    v1157 += *((void *)v223[3] + 1);
                    v1161 += (int)v321;
                    ++v1162;
                    unint64_t v1167 = v57[1];
                  }
                  while (v1162 < v1167);
                  int v1155 = *v57;
                  uint64_t v224 = *v223;
                }
                else
                {
                  unint64_t v1167 = 0;
                  int v1165 = *(void **)(v56 + 24);
                  uint64_t v1166 = v1165[1];
                }
                uint64_t v1158 = *v1165 + v1158 - v1167 * v1166;
                uint64_t v1157 = *(void *)v223[3] + v1157 - *((void *)v223[3] + 1) * v224[1];
                ++v1156;
              }
              while (v1156 < v1155);
            }
          }
          else if (v61 == 1)
          {
            int v322 = *v57;
            if (*v57)
            {
              unint64_t v323 = 0;
              uint64_t v324 = 0;
              uint64_t v325 = 0;
              uint64_t v326 = *(void *)(v56 + 152);
              uint64_t v327 = v223[19];
              uint64_t v328 = v55[19];
              do
              {
                if ((int)v321 >= 1)
                {
                  uint64_t v329 = 0;
                  unsigned int v330 = v321 + 1;
                  do
                  {
                    *(unsigned char *)(v328 + v329) = *(unsigned char *)(v326 + v325 + v329) - *((unsigned char *)v327 + v324 + v329);
                    --v330;
                    ++v329;
                  }
                  while (v330 > 1);
                  uint64_t v56 = *a1;
                  unsigned int v223 = (int **)*a2;
                  int v322 = **(_DWORD **)*a1;
                }
                v325 += **(void **)(v56 + 24);
                v324 += *(void *)v223[3];
                v328 += (int)v321;
                ++v323;
              }
              while (v323 < v322);
            }
          }
          else if (v55[6])
          {
            uint64_t v1880 = v223[19];
            uint64_t v1895 = *(void *)(v56 + 152);
            uint64_t v1924 = (int)v321;
            unint64_t v1954 = 0;
            unsigned int v1865 = v321 + 1;
            uint64_t v1168 = v55[19];
            do
            {
              uint64_t v1169 = *(void *)*a1;
              unint64_t v1170 = (unint64_t)(*(void *)(*a1 + 8) - v1169) >> 2;
              uint64_t v1171 = 0;
              uint64_t v1172 = (v1170 - 1);
              if ((int)v1170 - 1 >= 0)
              {
                uint64_t v1173 = *(void *)(*a1 + 24);
                int v1174 = v1954;
                do
                {
                  ldiv_t v1175 = ldiv(v1174, *(int *)(v1169 + 4 * v1172));
                  int v1174 = v1175.quot;
                  v1171 += *(void *)(v1173 + 8 * v1172--) * v1175.rem;
                }
                while (v1172 != -1);
              }
              uint64_t v1176 = *(void *)*a2;
              unint64_t v1177 = (unint64_t)(*(void *)(*a2 + 8) - v1176) >> 2;
              uint64_t v1178 = 0;
              uint64_t v1179 = (v1177 - 1);
              if ((int)v1177 - 1 >= 0)
              {
                uint64_t v1180 = *(void *)(*a2 + 24);
                int v1181 = v1954;
                do
                {
                  ldiv_t v1182 = ldiv(v1181, *(int *)(v1176 + 4 * v1179));
                  int v1181 = v1182.quot;
                  v1178 += *(void *)(v1180 + 8 * v1179--) * v1182.rem;
                }
                while (v1179 != -1);
              }
              if ((int)v1961 >= 1)
              {
                uint64_t v1183 = 0;
                unsigned int v1184 = v1865;
                do
                {
                  *(unsigned char *)(v1168 + v1183) = *(unsigned char *)(v1895 + (int)v1171 + v1183)
                                            - *((unsigned char *)v1880 + (int)v1178 + v1183);
                  --v1184;
                  ++v1183;
                }
                while (v1184 > 1);
                int v55 = *(void **)a3;
              }
              v1168 += v1924;
              v1954 += v1924;
            }
            while (v1954 < v55[6]);
          }
          break;
        default:
LABEL_336:
          switch(v317)
          {
            case 1uLL:
              if (v55[6])
              {
                unint64_t v331 = 0;
                uint64_t v332 = 0;
                uint64_t v333 = 0;
                uint64_t v334 = *(void *)(v56 + 152);
                uint64_t v335 = v223[19];
                uint64_t v336 = v55[19];
                do
                {
                  *(unsigned char *)(v336 + v331) = *(unsigned char *)(v334 + v333) - *((unsigned char *)v335 + v332);
                  v333 += **(void **)(*a1 + 24);
                  v332 += **(void **)(*a2 + 24);
                  ++v331;
                }
                while (v331 < *(void *)(*(void *)a3 + 48));
              }
              break;
            case 2uLL:
              int v532 = *v57;
              if (*v57)
              {
                unint64_t v533 = 0;
                uint64_t v534 = 0;
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = *(void *)(v56 + 152);
                unint64_t v538 = v223[19];
                uint64_t v539 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v540 = 0;
                    do
                    {
                      *(unsigned char *)(v539 + v534 + v540) = *(unsigned char *)(v537 + v536) - *((unsigned char *)v538 + v535);
                      uint64_t v56 = *a1;
                      int v541 = *(void **)(*a1 + 24);
                      uint64_t v542 = v541[1];
                      v536 += v542;
                      unsigned int v223 = (int **)*a2;
                      unint64_t v543 = *(int **)(*a2 + 24);
                      uint64_t v544 = *((void *)v543 + 1);
                      v535 += v544;
                      ++v540;
                      int v57 = *(int **)*a1;
                      unint64_t v545 = v57[1];
                    }
                    while (v540 < v545);
                    int v532 = *v57;
                    uint64_t v224 = *v223;
                    v534 += v540;
                  }
                  else
                  {
                    unint64_t v545 = 0;
                    int v541 = *(void **)(v56 + 24);
                    uint64_t v542 = v541[1];
                    unint64_t v543 = v223[3];
                    uint64_t v544 = *((void *)v543 + 1);
                  }
                  uint64_t v536 = *v541 + v536 - v545 * v542;
                  uint64_t v535 = *(void *)v543 + v535 - v544 * v224[1];
                  ++v533;
                }
                while (v533 < v532);
              }
              break;
            case 3uLL:
              int v546 = *v57;
              if (*v57)
              {
                unint64_t v547 = 0;
                uint64_t v548 = 0;
                uint64_t v549 = 0;
                uint64_t v550 = 0;
                uint64_t v551 = *(void *)(v56 + 152);
                uint64_t v552 = v223[19];
                uint64_t v553 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v554 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v555 = 0;
                        do
                        {
                          *(unsigned char *)(v553 + v548 + v555) = *(unsigned char *)(v551 + v550) - *((unsigned char *)v552 + v549);
                          uint64_t v56 = *a1;
                          uint64_t v556 = *(void **)(*a1 + 24);
                          uint64_t v557 = v556[2];
                          v550 += v557;
                          unsigned int v223 = (int **)*a2;
                          int v558 = *(int **)(*a2 + 24);
                          uint64_t v559 = *((void *)v558 + 2);
                          v549 += v559;
                          ++v555;
                          int v57 = *(int **)*a1;
                          unint64_t v560 = v57[2];
                        }
                        while (v555 < v560);
                        uint64_t v224 = *v223;
                        v548 += v555;
                      }
                      else
                      {
                        unint64_t v560 = 0;
                        uint64_t v556 = *(void **)(v56 + 24);
                        uint64_t v557 = v556[2];
                        int v558 = v223[3];
                        uint64_t v559 = *((void *)v558 + 2);
                      }
                      uint64_t v561 = v556[1];
                      uint64_t v550 = v561 + v550 - v560 * v557;
                      uint64_t v549 = *((void *)v558 + 1) + v549 - v559 * v224[2];
                      ++v554;
                      unint64_t v562 = v57[1];
                    }
                    while (v554 < v562);
                    int v546 = *v57;
                  }
                  else
                  {
                    unint64_t v562 = 0;
                    uint64_t v556 = *(void **)(v56 + 24);
                    uint64_t v561 = v556[1];
                  }
                  uint64_t v550 = *v556 + v550 - v562 * v561;
                  uint64_t v549 = *(void *)v223[3] + v549 - *((void *)v223[3] + 1) * v224[1];
                  ++v547;
                }
                while (v547 < v546);
              }
              break;
            case 4uLL:
              int v563 = *v57;
              if (*v57)
              {
                unint64_t v564 = 0;
                uint64_t v565 = 0;
                uint64_t v566 = 0;
                uint64_t v567 = 0;
                uint64_t v568 = *(void *)(v56 + 152);
                uint64_t v569 = v223[19];
                uint64_t v570 = v55[19];
                do
                {
                  if (v57[1])
                  {
                    unint64_t v571 = 0;
                    do
                    {
                      if (v57[2])
                      {
                        unint64_t v572 = 0;
                        do
                        {
                          if (v57[3])
                          {
                            unint64_t v573 = 0;
                            do
                            {
                              *(unsigned char *)(v570 + v565 + v573) = *(unsigned char *)(v568 + v567) - *((unsigned char *)v569 + v566);
                              uint64_t v56 = *a1;
                              int v574 = *(void **)(*a1 + 24);
                              uint64_t v575 = v574[3];
                              v567 += v575;
                              unsigned int v223 = (int **)*a2;
                              uint64_t v576 = *(int **)(*a2 + 24);
                              uint64_t v577 = *((void *)v576 + 3);
                              v566 += v577;
                              ++v573;
                              int v57 = *(int **)*a1;
                              unint64_t v578 = v57[3];
                            }
                            while (v573 < v578);
                            uint64_t v224 = *v223;
                            v565 += v573;
                          }
                          else
                          {
                            unint64_t v578 = 0;
                            int v574 = *(void **)(v56 + 24);
                            uint64_t v575 = v574[3];
                            uint64_t v576 = v223[3];
                            uint64_t v577 = *((void *)v576 + 3);
                          }
                          uint64_t v579 = v574[2];
                          uint64_t v567 = v579 + v567 - v578 * v575;
                          uint64_t v566 = *((void *)v576 + 2) + v566 - v577 * v224[3];
                          ++v572;
                          unint64_t v580 = v57[2];
                        }
                        while (v572 < v580);
                      }
                      else
                      {
                        unint64_t v580 = 0;
                        int v574 = *(void **)(v56 + 24);
                        uint64_t v579 = v574[2];
                      }
                      uint64_t v567 = v574[1] + v567 - v580 * v579;
                      uint64_t v566 = *((void *)v223[3] + 1) + v566 - *((void *)v223[3] + 2) * v224[2];
                      ++v571;
                      unint64_t v581 = v57[1];
                    }
                    while (v571 < v581);
                    int v563 = *v57;
                  }
                  else
                  {
                    unint64_t v581 = 0;
                  }
                  uint64_t v567 = **(void **)(v56 + 24) + v567 - *(void *)(*(void *)(v56 + 24) + 8) * v581;
                  uint64_t v566 = *(void *)v223[3] + v566 - *((void *)v223[3] + 1) * v224[1];
                  ++v564;
                }
                while (v564 < v563);
              }
              break;
            default:
              if (v55[6])
              {
                unint64_t v516 = 0;
                unint64_t v1950 = v223[19];
                uint64_t v1968 = *(void *)(v56 + 152);
                uint64_t v517 = v55[19];
                do
                {
                  uint64_t v518 = *(void *)*a1;
                  unint64_t v519 = (unint64_t)(*(void *)(*a1 + 8) - v518) >> 2;
                  uint64_t v520 = 0;
                  uint64_t v521 = (v519 - 1);
                  if ((int)v519 - 1 >= 0)
                  {
                    uint64_t v522 = *(void *)(*a1 + 24);
                    int v523 = v516;
                    do
                    {
                      ldiv_t v524 = ldiv(v523, *(int *)(v518 + 4 * v521));
                      int v523 = v524.quot;
                      v520 += *(void *)(v522 + 8 * v521--) * v524.rem;
                    }
                    while (v521 != -1);
                  }
                  uint64_t v525 = *(void *)*a2;
                  unint64_t v526 = (unint64_t)(*(void *)(*a2 + 8) - v525) >> 2;
                  uint64_t v527 = 0;
                  uint64_t v528 = (v526 - 1);
                  if ((int)v526 - 1 >= 0)
                  {
                    uint64_t v529 = *(void *)(*a2 + 24);
                    int v530 = v516;
                    do
                    {
                      ldiv_t v531 = ldiv(v530, *(int *)(v525 + 4 * v528));
                      int v530 = v531.quot;
                      v527 += *(void *)(v529 + 8 * v528--) * v531.rem;
                    }
                    while (v528 != -1);
                  }
                  *(unsigned char *)(v517 + v516++) = *(unsigned char *)(v1968 + (int)v520) - *((unsigned char *)v1950 + (int)v527);
                }
                while (v516 < *(void *)(*(void *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          int v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            int v17 = **(_DWORD **)(*a1 + 152);
            int v18 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v19 = *(int **)(*a2 + 152);
            unsigned int v20 = v16 + 1;
            do
            {
              int v21 = *v19++;
              *v18++ = v17 - v21;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          int v86 = *(_DWORD *)(*a1 + 160);
          if (v86 >= 1)
          {
            int v87 = **(_DWORD **)(*a2 + 152);
            int v88 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v89 = *(int **)(*a1 + 152);
            unsigned int v90 = v86 + 1;
            do
            {
              int v91 = *v89++;
              *v88++ = v91 - v87;
              --v90;
            }
            while (v90 > 1);
          }
          return;
        case 3:
          int v92 = *(_DWORD *)(*(void *)a3 + 48);
          if (v92 >= 1)
          {
            unsigned int v93 = *(_DWORD **)(*(void *)a3 + 152);
            int v94 = *(int **)(*a2 + 152);
            char v95 = *(int **)(*a1 + 152);
            unsigned int v96 = v92 + 1;
            do
            {
              int v98 = *v95++;
              int v97 = v98;
              int v99 = *v94++;
              *v93++ = v97 - v99;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          unsigned int v77 = *(void **)a3;
          int v78 = (void *)*a1;
          uint64_t v79 = *(int **)*a1;
          uint64_t v80 = (v78[1] - (void)v79) >> 2;
          uint64_t v81 = (v80 - 1);
          if ((int)v81 >= -1) {
            int v82 = -1;
          }
          else {
            int v82 = v80 - 1;
          }
          int v83 = v82 + 1;
          int v84 = v80 + 1;
          break;
      }
      while (1)
      {
        unsigned int v85 = v84 - 2;
        if (v84 - 2 < 0) {
          break;
        }
        --v84;
        if (*(void *)(v78[3] + 8 * v85) != *(void *)(v77[3] + 8 * v85)) {
          goto LABEL_162;
        }
      }
      int v84 = v83;
LABEL_162:
      int v230 = (void *)*a2;
      unsigned int v231 = *(int **)*a2;
      uint64_t v232 = (v230[1] - (void)v231) >> 2;
      uint64_t v233 = (v232 - 1);
      if ((int)v233 >= -1) {
        int v234 = -1;
      }
      else {
        int v234 = v232 - 1;
      }
      int v235 = v234 + 1;
      int v236 = v232 + 1;
      while (1)
      {
        unsigned int v237 = v236 - 2;
        if (v236 - 2 < 0) {
          break;
        }
        --v236;
        if (*(void *)(v230[3] + 8 * v237) != *(void *)(v77[3] + 8 * v237)) {
          goto LABEL_211;
        }
      }
      int v236 = v235;
LABEL_211:
      int v273 = v80 + 1;
      while (1)
      {
        unsigned int v274 = v273 - 2;
        if (v273 - 2 < 0) {
          break;
        }
        --v273;
        if (*(void *)(v78[3] + 8 * v274)) {
          goto LABEL_246;
        }
      }
      int v273 = v83;
LABEL_246:
      int v287 = v232 + 1;
      while (1)
      {
        unsigned int v288 = v287 - 2;
        if (v287 - 2 < 0) {
          break;
        }
        --v287;
        if (*(void *)(v230[3] + 8 * v288)) {
          goto LABEL_342;
        }
      }
      int v287 = v235;
LABEL_342:
      unint64_t v337 = (uint64_t)(v77[1] - *v77) >> 2;
      if (v84 <= v236) {
        int v338 = v236;
      }
      else {
        int v338 = v84;
      }
      if (v84 <= v287) {
        int v84 = v287;
      }
      if (v273 > v236) {
        int v236 = v273;
      }
      if (v337 > v236)
      {
        int v339 = 1;
      }
      else
      {
        int v236 = (uint64_t)(v77[1] - *v77) >> 2;
        int v339 = 4;
      }
      if (v337 > v84)
      {
        int v340 = 2;
      }
      else
      {
        int v84 = v236;
        int v340 = v339;
      }
      if (v337 > v338)
      {
        int v84 = v338;
        int v340 = 3;
      }
      uint64_t v1945 = v233;
      uint64_t v1962 = v81;
      if (!v84) {
        goto LABEL_372;
      }
      unint64_t v341 = *(void *)(v77[3] + 8 * (v84 - 1));
      if (v341 < 0x10) {
        goto LABEL_372;
      }
      switch(v340)
      {
        case 1:
          if (v84 == 2)
          {
            int v1487 = *v79;
            if (*v79)
            {
              unint64_t v1488 = 0;
              uint64_t v1489 = 0;
              uint64_t v1490 = 0;
              uint64_t v1491 = v78[19];
              uint64_t v1492 = v230[19];
              uint64_t v1493 = v77[19];
              uint64_t v1494 = (uint64_t *)v78[3];
              uint64_t v1495 = *v1494;
              uint64_t v1496 = v1494[1];
              int v1497 = (uint64_t *)v230[3];
              uint64_t v1498 = *v1497;
              uint64_t v1499 = v1497[1];
              int v1500 = v79[1];
              int v1501 = v1500;
              do
              {
                if (v1501)
                {
                  unint64_t v1502 = 0;
                  uint64_t v1503 = v1492 + 4 * v1489;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1504 = 0;
                      int v1505 = *(_DWORD *)(v1491 + 4 * v1490);
                      unsigned int v1506 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1493 + v1504) = v1505 - *(_DWORD *)(v1503 + v1504);
                        --v1506;
                        v1504 += 4;
                      }
                      while (v1506 > 1);
                      int v1500 = v79[1];
                    }
                    v1490 += v1496;
                    v1489 += v1499;
                    v1493 += 4 * (int)v341;
                    ++v1502;
                    v1503 += 4 * v1499;
                  }
                  while (v1502 < v1500);
                  uint64_t v1507 = v1500;
                  int v1487 = *v79;
                  int v1501 = v1500;
                }
                else
                {
                  uint64_t v1507 = 0;
                }
                uint64_t v1490 = v1490 + v1495 - v1507 * v1496;
                uint64_t v1489 = v1489 + v1498 - v1499 * v231[1];
                ++v1488;
              }
              while (v1488 < v1487);
            }
          }
          else if (v84 == 1)
          {
            int v1013 = *v79;
            if (*v79)
            {
              unint64_t v1014 = 0;
              uint64_t v1015 = 0;
              uint64_t v1016 = v78[19];
              uint64_t v1017 = v230[19];
              uint64_t v1018 = v77[19];
              uint64_t v1019 = *(void *)v78[3];
              uint64_t v1020 = 4 * *(void *)v230[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1021 = 0;
                  int v1022 = *(_DWORD *)(v1016 + 4 * v1015);
                  unsigned int v1023 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1018 + v1021) = v1022 - *(_DWORD *)(v1017 + v1021);
                    --v1023;
                    v1021 += 4;
                  }
                  while (v1023 > 1);
                  int v1013 = *v79;
                }
                v1015 += v1019;
                ++v1014;
                v1018 += 4 * (int)v341;
                v1017 += v1020;
              }
              while (v1014 < v1013);
            }
          }
          else
          {
            unint64_t v1905 = v77[6];
            if (v1905)
            {
              unint64_t v1934 = 0;
              uint64_t v1839 = v230[19];
              uint64_t v1854 = v78[19];
              uint64_t v1508 = v77[19];
              do
              {
                uint64_t v1509 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1510 = v78[3];
                  uint64_t v1511 = v81;
                  int v1512 = v1934;
                  do
                  {
                    ldiv_t v1513 = ldiv(v1512, v79[v1511]);
                    int v1512 = v1513.quot;
                    v1509 += *(void *)(v1510 + 8 * v1511--) * v1513.rem;
                  }
                  while (v1511 != -1);
                }
                uint64_t v1514 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1515) = 0;
                }
                else
                {
                  uint64_t v1515 = 0;
                  uint64_t v1516 = v230[3];
                  int v1517 = v1934;
                  do
                  {
                    ldiv_t v1518 = ldiv(v1517, v231[v1514]);
                    int v1517 = v1518.quot;
                    v1515 += *(void *)(v1516 + 8 * v1514--) * v1518.rem;
                  }
                  while (v1514 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1519 = 0;
                  int v1520 = *(_DWORD *)(v1854 + 4 * (int)v1509);
                  unsigned int v1521 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1508 + v1519) = v1520 - *(_DWORD *)(v1839 + 4 * (int)v1515 + v1519);
                    --v1521;
                    v1519 += 4;
                  }
                  while (v1521 > 1);
                }
                v1508 += 4 * (int)v341;
                v1934 += (int)v341;
              }
              while (v1934 < v1905);
            }
          }
          break;
        case 2:
          if (v84 == 2)
          {
            int v1522 = *v79;
            if (*v79)
            {
              unint64_t v1523 = 0;
              uint64_t v1524 = 0;
              uint64_t v1525 = 0;
              uint64_t v1526 = v78[19];
              uint64_t v1527 = v230[19];
              uint64_t v1528 = v77[19];
              int v1529 = (uint64_t *)v78[3];
              uint64_t v1530 = *v1529;
              uint64_t v1531 = v1529[1];
              uint64_t v1532 = (uint64_t *)v230[3];
              uint64_t v1533 = *v1532;
              uint64_t v1534 = v1532[1];
              int v1535 = v79[1];
              int v1536 = v1535;
              do
              {
                if (v1536)
                {
                  unint64_t v1537 = 0;
                  uint64_t v1538 = v1526 + 4 * v1525;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1539 = 0;
                      int v1540 = *(_DWORD *)(v1527 + 4 * v1524);
                      unsigned int v1541 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1528 + v1539) = *(_DWORD *)(v1538 + v1539) - v1540;
                        --v1541;
                        v1539 += 4;
                      }
                      while (v1541 > 1);
                      int v1535 = v79[1];
                    }
                    v1525 += v1531;
                    v1524 += v1534;
                    v1528 += 4 * (int)v341;
                    ++v1537;
                    v1538 += 4 * v1531;
                  }
                  while (v1537 < v1535);
                  uint64_t v1542 = v1535;
                  int v1522 = *v79;
                  int v1536 = v1535;
                }
                else
                {
                  uint64_t v1542 = 0;
                }
                uint64_t v1525 = v1525 + v1530 - v1542 * v1531;
                uint64_t v1524 = v1524 + v1533 - v1534 * v231[1];
                ++v1523;
              }
              while (v1523 < v1522);
            }
          }
          else if (v84 == 1)
          {
            int v1024 = *v79;
            if (*v79)
            {
              unint64_t v1025 = 0;
              uint64_t v1026 = 0;
              uint64_t v1027 = v78[19];
              uint64_t v1028 = v230[19];
              uint64_t v1029 = v77[19];
              uint64_t v1030 = *(void *)v230[3];
              uint64_t v1031 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v1032 = 0;
                  int v1033 = *(_DWORD *)(v1028 + 4 * v1026);
                  unsigned int v1034 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1029 + v1032) = *(_DWORD *)(v1027 + v1032) - v1033;
                    --v1034;
                    v1032 += 4;
                  }
                  while (v1034 > 1);
                  int v1024 = *v79;
                }
                v1026 += v1030;
                ++v1025;
                v1029 += 4 * (int)v341;
                v1027 += v1031;
              }
              while (v1025 < v1024);
            }
          }
          else
          {
            unint64_t v1906 = v77[6];
            if (v1906)
            {
              unint64_t v1935 = 0;
              uint64_t v1840 = v230[19];
              uint64_t v1855 = v78[19];
              uint64_t v1543 = v77[19];
              do
              {
                uint64_t v1544 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1545 = v78[3];
                  uint64_t v1546 = v81;
                  int v1547 = v1935;
                  do
                  {
                    ldiv_t v1548 = ldiv(v1547, v79[v1546]);
                    int v1547 = v1548.quot;
                    v1544 += *(void *)(v1545 + 8 * v1546--) * v1548.rem;
                  }
                  while (v1546 != -1);
                }
                uint64_t v1549 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1550) = 0;
                }
                else
                {
                  uint64_t v1550 = 0;
                  uint64_t v1551 = v230[3];
                  int v1552 = v1935;
                  do
                  {
                    ldiv_t v1553 = ldiv(v1552, v231[v1549]);
                    int v1552 = v1553.quot;
                    v1550 += *(void *)(v1551 + 8 * v1549--) * v1553.rem;
                  }
                  while (v1549 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1554 = 0;
                  int v1555 = *(_DWORD *)(v1840 + 4 * (int)v1550);
                  unsigned int v1556 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1543 + v1554) = *(_DWORD *)(v1855 + 4 * (int)v1544 + v1554) - v1555;
                    --v1556;
                    v1554 += 4;
                  }
                  while (v1556 > 1);
                }
                v1543 += 4 * (int)v341;
                v1935 += (int)v341;
              }
              while (v1935 < v1906);
            }
          }
          break;
        case 3:
          if (v84 == 2)
          {
            int v1185 = *v79;
            if (*v79)
            {
              unint64_t v1186 = 0;
              uint64_t v1187 = 0;
              uint64_t v1188 = 0;
              uint64_t v1189 = v78[19];
              uint64_t v1190 = v230[19];
              uint64_t v1191 = v77[19];
              uint64_t v1192 = (uint64_t *)v78[3];
              uint64_t v1193 = *v1192;
              uint64_t v1194 = v1192[1];
              int v1195 = (uint64_t *)v230[3];
              uint64_t v1196 = *v1195;
              uint64_t v1197 = v1195[1];
              int v1198 = v79[1];
              int v1199 = v1198;
              do
              {
                if (v1199)
                {
                  unint64_t v1200 = 0;
                  uint64_t v1201 = v1190 + 4 * v1187;
                  uint64_t v1202 = v1189 + 4 * v1188;
                  do
                  {
                    if ((int)v341 >= 1)
                    {
                      uint64_t v1203 = 0;
                      unsigned int v1204 = v341 + 1;
                      do
                      {
                        *(_DWORD *)(v1191 + v1203) = *(_DWORD *)(v1202 + v1203) - *(_DWORD *)(v1201 + v1203);
                        --v1204;
                        v1203 += 4;
                      }
                      while (v1204 > 1);
                      int v1198 = v79[1];
                    }
                    v1188 += v1194;
                    v1187 += v1197;
                    v1191 += 4 * (int)v341;
                    ++v1200;
                    v1201 += 4 * v1197;
                    v1202 += 4 * v1194;
                  }
                  while (v1200 < v1198);
                  uint64_t v1205 = v1198;
                  int v1185 = *v79;
                  int v1199 = v1198;
                }
                else
                {
                  uint64_t v1205 = 0;
                }
                uint64_t v1188 = v1188 + v1193 - v1205 * v1194;
                uint64_t v1187 = v1187 + v1196 - v1197 * v231[1];
                ++v1186;
              }
              while (v1186 < v1185);
            }
          }
          else if (v84 == 1)
          {
            int v342 = *v79;
            if (*v79)
            {
              unint64_t v343 = 0;
              uint64_t v344 = v78[19];
              uint64_t v345 = v230[19];
              uint64_t v346 = v77[19];
              uint64_t v347 = 4 * *(void *)v230[3];
              uint64_t v348 = 4 * *(void *)v78[3];
              do
              {
                if ((int)v341 >= 1)
                {
                  uint64_t v349 = 0;
                  unsigned int v350 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v346 + v349) = *(_DWORD *)(v344 + v349) - *(_DWORD *)(v345 + v349);
                    --v350;
                    v349 += 4;
                  }
                  while (v350 > 1);
                  int v342 = *v79;
                }
                ++v343;
                v346 += 4 * (int)v341;
                v345 += v347;
                v344 += v348;
              }
              while (v343 < v342);
            }
          }
          else
          {
            unint64_t v1896 = v77[6];
            if (v1896)
            {
              unint64_t v1925 = 0;
              uint64_t v1835 = v230[19];
              uint64_t v1848 = v78[19];
              uint64_t v1206 = v77[19];
              do
              {
                uint64_t v1207 = 0;
                if ((v81 & 0x80000000) == 0)
                {
                  uint64_t v1208 = v78[3];
                  uint64_t v1209 = v81;
                  int v1210 = v1925;
                  do
                  {
                    ldiv_t v1211 = ldiv(v1210, v79[v1209]);
                    int v1210 = v1211.quot;
                    v1207 += *(void *)(v1208 + 8 * v1209--) * v1211.rem;
                  }
                  while (v1209 != -1);
                }
                uint64_t v1212 = v1945;
                if ((v1945 & 0x80000000) != 0)
                {
                  LODWORD(v1213) = 0;
                }
                else
                {
                  uint64_t v1213 = 0;
                  uint64_t v1214 = v230[3];
                  int v1215 = v1925;
                  do
                  {
                    ldiv_t v1216 = ldiv(v1215, v231[v1212]);
                    int v1215 = v1216.quot;
                    v1213 += *(void *)(v1214 + 8 * v1212--) * v1216.rem;
                  }
                  while (v1212 != -1);
                }
                uint64_t v81 = v1962;
                if ((int)v341 >= 1)
                {
                  uint64_t v1217 = 0;
                  unsigned int v1218 = v341 + 1;
                  do
                  {
                    *(_DWORD *)(v1206 + v1217) = *(_DWORD *)(v1848 + 4 * (int)v1207 + v1217)
                                               - *(_DWORD *)(v1835 + 4 * (int)v1213 + v1217);
                    --v1218;
                    v1217 += 4;
                  }
                  while (v1218 > 1);
                }
                v1206 += 4 * (int)v341;
                v1925 += (int)v341;
              }
              while (v1925 < v1896);
            }
          }
          break;
        default:
LABEL_372:
          switch(v337)
          {
            case 1uLL:
              uint64_t v351 = v77[6];
              if (v351)
              {
                uint64_t v352 = (_DWORD *)v78[19];
                unsigned int v353 = (_DWORD *)v230[19];
                uint64_t v354 = (_DWORD *)v77[19];
                uint64_t v355 = 4 * *(void *)v230[3];
                uint64_t v356 = 4 * *(void *)v78[3];
                do
                {
                  *v354++ = *v352 - *v353;
                  unsigned int v353 = (_DWORD *)((char *)v353 + v355);
                  uint64_t v352 = (_DWORD *)((char *)v352 + v356);
                  --v351;
                }
                while (v351);
              }
              break;
            case 2uLL:
              int v594 = *v79;
              if (*v79)
              {
                unint64_t v595 = 0;
                uint64_t v596 = 0;
                uint64_t v597 = 0;
                uint64_t v598 = 0;
                uint64_t v599 = v78[19];
                uint64_t v600 = v230[19];
                uint64_t v601 = v77[19];
                uint64_t v602 = (uint64_t *)v78[3];
                uint64_t v603 = *v602;
                uint64_t v604 = v602[1];
                uint64_t v605 = (uint64_t *)v230[3];
                uint64_t v607 = *v605;
                uint64_t v606 = v605[1];
                int v608 = v79[1];
                do
                {
                  if (v608)
                  {
                    for (unint64_t i = 0; i < v608; ++i)
                    {
                      *(_DWORD *)(v601 + 4 * v596 + 4 * i) = *(_DWORD *)(v599 + 4 * v598) - *(_DWORD *)(v600 + 4 * v597);
                      v598 += v604;
                      v597 += v606;
                      int v608 = v79[1];
                    }
                    uint64_t v610 = v608;
                    int v594 = *v79;
                    v596 += i;
                  }
                  else
                  {
                    uint64_t v610 = 0;
                  }
                  uint64_t v598 = v598 + v603 - v610 * v604;
                  uint64_t v597 = v597 + v607 - v606 * v231[1];
                  ++v595;
                }
                while (v595 < v594);
              }
              break;
            case 3uLL:
              int v611 = *v79;
              if (*v79)
              {
                unint64_t v612 = 0;
                uint64_t v613 = 0;
                uint64_t v614 = 0;
                uint64_t v615 = 0;
                uint64_t v616 = v78[19];
                uint64_t v617 = v230[19];
                uint64_t v618 = v77[19];
                int v619 = (uint64_t *)v78[3];
                uint64_t v620 = *v619;
                uint64_t v621 = v619[1];
                uint64_t v622 = (uint64_t *)v230[3];
                uint64_t v623 = *v622;
                uint64_t v624 = v622[1];
                int v625 = v79[1];
                int v626 = v625;
                do
                {
                  if (v626)
                  {
                    unint64_t v627 = 0;
                    uint64_t v628 = v619[2];
                    uint64_t v629 = v622[2];
                    int v630 = v79[2];
                    do
                    {
                      if (v630)
                      {
                        for (unint64_t j = 0; j < v630; ++j)
                        {
                          *(_DWORD *)(v618 + 4 * v613 + 4 * j) = *(_DWORD *)(v616 + 4 * v615)
                                                               - *(_DWORD *)(v617 + 4 * v614);
                          v615 += v628;
                          v614 += v629;
                          int v630 = v79[2];
                        }
                        uint64_t v632 = v630;
                        int v625 = v79[1];
                        v613 += j;
                      }
                      else
                      {
                        uint64_t v632 = 0;
                      }
                      uint64_t v615 = v615 + v621 - v632 * v628;
                      uint64_t v614 = v614 + v624 - v629 * v231[2];
                      ++v627;
                    }
                    while (v627 < v625);
                    uint64_t v633 = v625;
                    int v611 = *v79;
                    int v626 = v625;
                  }
                  else
                  {
                    uint64_t v633 = 0;
                  }
                  uint64_t v615 = v615 + v620 - v633 * v621;
                  uint64_t v614 = v614 + v623 - v624 * v231[1];
                  ++v612;
                }
                while (v612 < v611);
              }
              break;
            case 4uLL:
              int v634 = *v79;
              if (*v79)
              {
                unint64_t v635 = 0;
                uint64_t v636 = 0;
                uint64_t v637 = 0;
                uint64_t v638 = 0;
                uint64_t v639 = v78[19];
                uint64_t v640 = v230[19];
                uint64_t v641 = v77[19];
                uint64_t v642 = (uint64_t *)v78[3];
                uint64_t v643 = *v642;
                uint64_t v644 = v642[1];
                int v645 = (uint64_t *)v230[3];
                uint64_t v646 = *v645;
                uint64_t v647 = v645[1];
                int v648 = v79[1];
                int v649 = v648;
                do
                {
                  if (v649)
                  {
                    unint64_t v650 = 0;
                    uint64_t v651 = v642[2];
                    uint64_t v652 = v645[2];
                    int v653 = v79[2];
                    int v654 = v653;
                    do
                    {
                      if (v654)
                      {
                        unint64_t v655 = 0;
                        uint64_t v656 = v642[3];
                        uint64_t v657 = v645[3];
                        int v658 = v79[3];
                        do
                        {
                          if (v658)
                          {
                            for (unint64_t k = 0; k < v658; ++k)
                            {
                              *(_DWORD *)(v641 + 4 * v636 + 4 * k) = *(_DWORD *)(v639 + 4 * v638)
                                                                   - *(_DWORD *)(v640 + 4 * v637);
                              v638 += v656;
                              v637 += v657;
                              int v658 = v79[3];
                            }
                            uint64_t v660 = v658;
                            int v653 = v79[2];
                            v636 += k;
                          }
                          else
                          {
                            uint64_t v660 = 0;
                          }
                          uint64_t v638 = v638 + v651 - v660 * v656;
                          uint64_t v637 = v637 + v652 - v657 * v231[3];
                          ++v655;
                        }
                        while (v655 < v653);
                        uint64_t v661 = v653;
                        int v648 = v79[1];
                        int v654 = v653;
                      }
                      else
                      {
                        uint64_t v661 = 0;
                      }
                      uint64_t v638 = v638 + v644 - v661 * v651;
                      uint64_t v637 = v637 + v647 - v652 * v231[2];
                      ++v650;
                    }
                    while (v650 < v648);
                    uint64_t v662 = v648;
                    int v634 = *v79;
                    int v649 = v648;
                  }
                  else
                  {
                    uint64_t v662 = 0;
                  }
                  uint64_t v638 = v638 + v643 - v662 * v644;
                  uint64_t v637 = v637 + v646 - v647 * v231[1];
                  ++v635;
                }
                while (v635 < v634);
              }
              break;
            default:
              uint64_t v582 = v77[6];
              if (v582)
              {
                uint64_t v583 = 0;
                uint64_t v1888 = v230[19];
                uint64_t v1917 = v78[19];
                uint64_t v1875 = v77[19];
                do
                {
                  uint64_t v584 = 0;
                  if ((v81 & 0x80000000) == 0)
                  {
                    uint64_t v585 = v78[3];
                    uint64_t v586 = v81;
                    int v587 = v583;
                    do
                    {
                      ldiv_t v588 = ldiv(v587, v79[v586]);
                      int v587 = v588.quot;
                      v584 += *(void *)(v585 + 8 * v586--) * v588.rem;
                    }
                    while (v586 != -1);
                  }
                  uint64_t v589 = v1945;
                  if ((v1945 & 0x80000000) != 0)
                  {
                    LODWORD(v590) = 0;
                  }
                  else
                  {
                    uint64_t v590 = 0;
                    uint64_t v591 = v230[3];
                    int v592 = v583;
                    do
                    {
                      ldiv_t v593 = ldiv(v592, v231[v589]);
                      int v592 = v593.quot;
                      v590 += *(void *)(v591 + 8 * v589--) * v593.rem;
                    }
                    while (v589 != -1);
                  }
                  *(_DWORD *)(v1875 + 4 * v583++) = *(_DWORD *)(v1917 + 4 * (int)v584)
                                                  - *(_DWORD *)(v1888 + 4 * (int)v590);
                  uint64_t v81 = v1962;
                }
                while (v583 != v582);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          char v7 = **(unsigned char **)(*a1 + 152) - **(unsigned char **)(*a2 + 152);
LABEL_16:
          **(unsigned char **)(*(void *)a3 + 152) = v7;
          return;
        case 1:
          int v108 = *(_DWORD *)(*a2 + 160);
          if (v108 >= 1)
          {
            char v109 = **(unsigned char **)(*a1 + 152);
            uint64_t v110 = *(unsigned char **)(*(void *)a3 + 152);
            uint64_t v111 = *(char **)(*a2 + 152);
            unsigned int v112 = v108 + 1;
            do
            {
              char v113 = *v111++;
              *v110++ = v109 - v113;
              --v112;
            }
            while (v112 > 1);
          }
          return;
        case 2:
          int v114 = *(_DWORD *)(*a1 + 160);
          if (v114 >= 1)
          {
            char v115 = **(unsigned char **)(*a2 + 152);
            int v116 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v117 = *(char **)(*a1 + 152);
            unsigned int v118 = v114 + 1;
            do
            {
              char v119 = *v117++;
              *v116++ = v119 - v115;
              --v118;
            }
            while (v118 > 1);
          }
          return;
        case 3:
          int v120 = *(_DWORD *)(*(void *)a3 + 48);
          if (v120 >= 1)
          {
            uint64_t v121 = *(unsigned char **)(*(void *)a3 + 152);
            unsigned int v122 = *(char **)(*a2 + 152);
            int v123 = *(char **)(*a1 + 152);
            unsigned int v124 = v120 + 1;
            do
            {
              char v126 = *v123++;
              char v125 = v126;
              char v127 = *v122++;
              *v121++ = v125 - v127;
              --v124;
            }
            while (v124 > 1);
          }
          return;
        default:
          int v100 = *(void **)a3;
          uint64_t v101 = *a1;
          unsigned int v102 = *(int **)*a1;
          uint64_t v103 = (*(void *)(*a1 + 8) - (void)v102) >> 2;
          int v104 = v103 - 1;
          if ((int)v103 - 1 >= -1) {
            int v104 = -1;
          }
          int v105 = v104 + 1;
          int v106 = v103 + 1;
          while (1)
          {
            unsigned int v107 = v106 - 2;
            if (v106 - 2 < 0) {
              break;
            }
            --v106;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v107) != *(void *)(v100[3] + 8 * v107)) {
              goto LABEL_170;
            }
          }
          int v106 = v105;
LABEL_170:
          int v238 = (int **)*a2;
          unsigned int v239 = *(int **)*a2;
          uint64_t v240 = (*(void *)(*a2 + 8) - (void)v239) >> 2;
          int v241 = v240 - 1;
          if ((int)v240 - 1 >= -1) {
            int v241 = -1;
          }
          int v242 = v241 + 1;
          int v243 = v240 + 1;
          while (1)
          {
            unsigned int v244 = v243 - 2;
            if (v243 - 2 < 0) {
              break;
            }
            --v243;
            if (*(void *)&v238[3][2 * v244] != *(void *)(v100[3] + 8 * v244)) {
              goto LABEL_216;
            }
          }
          int v243 = v242;
LABEL_216:
          int v275 = v103 + 1;
          while (1)
          {
            unsigned int v276 = v275 - 2;
            if (v275 - 2 < 0) {
              break;
            }
            --v275;
            if (*(void *)(*(void *)(v101 + 24) + 8 * v276)) {
              goto LABEL_251;
            }
          }
          int v275 = v105;
LABEL_251:
          int v289 = v240 + 1;
          while (1)
          {
            int v290 = v289 - 2;
            if (v289 - 2 < 0) {
              break;
            }
            --v289;
            if (*(void *)&v238[3][2 * v290]) {
              goto LABEL_378;
            }
          }
          int v289 = v242;
LABEL_378:
          unint64_t v357 = (uint64_t)(v100[1] - *v100) >> 2;
          if (v106 <= v243) {
            int v358 = v243;
          }
          else {
            int v358 = v106;
          }
          if (v106 <= v289) {
            int v106 = v289;
          }
          if (v275 > v243) {
            int v243 = v275;
          }
          if (v357 > v243)
          {
            int v359 = 1;
          }
          else
          {
            int v243 = (uint64_t)(v100[1] - *v100) >> 2;
            int v359 = 4;
          }
          if (v357 > v106)
          {
            int v360 = 2;
          }
          else
          {
            int v106 = v243;
            int v360 = v359;
          }
          if (v357 > v358)
          {
            int v106 = v358;
            int v360 = 3;
          }
          if (!v106) {
            goto LABEL_408;
          }
          unint64_t v361 = *(void *)(v100[3] + 8 * (v106 - 1));
          if (v361 < 0x10) {
            goto LABEL_408;
          }
          uint64_t v1963 = *(void *)(v100[3] + 8 * (v106 - 1));
          switch(v360)
          {
            case 1:
              if (v106 == 2)
              {
                int v1557 = *v102;
                if (*v102)
                {
                  unint64_t v1558 = 0;
                  uint64_t v1559 = 0;
                  uint64_t v1560 = 0;
                  uint64_t v1561 = *(void *)(v101 + 152);
                  uint64_t v1562 = v238[19];
                  uint64_t v1563 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1564 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1565 = 0;
                          char v1566 = *(unsigned char *)(v1561 + v1560);
                          unsigned int v1567 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1563 + v1565) = v1566 - *((unsigned char *)v1562 + v1559 + v1565);
                            --v1567;
                            ++v1565;
                          }
                          while (v1567 > 1);
                          uint64_t v101 = *a1;
                          int v238 = (int **)*a2;
                          unsigned int v102 = *(int **)*a1;
                        }
                        uint64_t v1568 = *(void **)(v101 + 24);
                        uint64_t v1569 = v1568[1];
                        v1560 += v1569;
                        v1559 += *((void *)v238[3] + 1);
                        v1563 += (int)v361;
                        ++v1564;
                        unint64_t v1570 = v102[1];
                      }
                      while (v1564 < v1570);
                      int v1557 = *v102;
                      unsigned int v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1570 = 0;
                      uint64_t v1568 = *(void **)(v101 + 24);
                      uint64_t v1569 = v1568[1];
                    }
                    uint64_t v1560 = *v1568 + v1560 - v1570 * v1569;
                    uint64_t v1559 = *(void *)v238[3] + v1559 - *((void *)v238[3] + 1) * v239[1];
                    ++v1558;
                  }
                  while (v1558 < v1557);
                }
              }
              else if (v106 == 1)
              {
                int v1035 = *v102;
                if (*v102)
                {
                  unint64_t v1036 = 0;
                  uint64_t v1037 = 0;
                  uint64_t v1038 = 0;
                  uint64_t v1039 = *(void *)(v101 + 152);
                  unsigned int v1040 = v238[19];
                  uint64_t v1041 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1042 = 0;
                      char v1043 = *(unsigned char *)(v1039 + v1038);
                      unsigned int v1044 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1041 + v1042) = v1043 - *((unsigned char *)v1040 + v1037 + v1042);
                        --v1044;
                        ++v1042;
                      }
                      while (v1044 > 1);
                      uint64_t v101 = *a1;
                      int v238 = (int **)*a2;
                      int v1035 = **(_DWORD **)*a1;
                    }
                    v1038 += **(void **)(v101 + 24);
                    v1037 += *(void *)v238[3];
                    v1041 += (int)v361;
                    ++v1036;
                  }
                  while (v1036 < v1035);
                }
              }
              else if (v100[6])
              {
                uint64_t v1884 = v238[19];
                uint64_t v1907 = *(void *)(v101 + 152);
                uint64_t v1936 = (int)v361;
                unint64_t v1958 = 0;
                unsigned int v1871 = v361 + 1;
                uint64_t v1571 = v100[19];
                do
                {
                  uint64_t v1572 = *(void *)*a1;
                  unint64_t v1573 = (unint64_t)(*(void *)(*a1 + 8) - v1572) >> 2;
                  uint64_t v1574 = 0;
                  uint64_t v1575 = (v1573 - 1);
                  if ((int)v1573 - 1 >= 0)
                  {
                    uint64_t v1576 = *(void *)(*a1 + 24);
                    int v1577 = v1958;
                    do
                    {
                      ldiv_t v1578 = ldiv(v1577, *(int *)(v1572 + 4 * v1575));
                      int v1577 = v1578.quot;
                      v1574 += *(void *)(v1576 + 8 * v1575--) * v1578.rem;
                    }
                    while (v1575 != -1);
                  }
                  uint64_t v1579 = *(void *)*a2;
                  unint64_t v1580 = (unint64_t)(*(void *)(*a2 + 8) - v1579) >> 2;
                  uint64_t v1581 = 0;
                  uint64_t v1582 = (v1580 - 1);
                  if ((int)v1580 - 1 >= 0)
                  {
                    uint64_t v1583 = *(void *)(*a2 + 24);
                    int v1584 = v1958;
                    do
                    {
                      ldiv_t v1585 = ldiv(v1584, *(int *)(v1579 + 4 * v1582));
                      int v1584 = v1585.quot;
                      v1581 += *(void *)(v1583 + 8 * v1582--) * v1585.rem;
                    }
                    while (v1582 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1586 = 0;
                    char v1587 = *(unsigned char *)(v1907 + (int)v1574);
                    unsigned int v1588 = v1871;
                    do
                    {
                      *(unsigned char *)(v1571 + v1586) = v1587 - *((unsigned char *)v1884 + (int)v1581 + v1586);
                      --v1588;
                      ++v1586;
                    }
                    while (v1588 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1571 += v1936;
                  v1958 += v1936;
                }
                while (v1958 < v100[6]);
              }
              break;
            case 2:
              if (v106 == 2)
              {
                int v1589 = *v102;
                if (*v102)
                {
                  unint64_t v1590 = 0;
                  uint64_t v1591 = 0;
                  uint64_t v1592 = 0;
                  uint64_t v1593 = *(void *)(v101 + 152);
                  unsigned int v1594 = v238[19];
                  uint64_t v1595 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1596 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1597 = 0;
                          char v1598 = *((unsigned char *)v1594 + v1591);
                          unsigned int v1599 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1595 + v1597) = *(unsigned char *)(v1593 + v1592 + v1597) - v1598;
                            --v1599;
                            ++v1597;
                          }
                          while (v1599 > 1);
                          uint64_t v101 = *a1;
                          int v238 = (int **)*a2;
                          unsigned int v102 = *(int **)*a1;
                        }
                        uint64_t v1600 = *(void **)(v101 + 24);
                        uint64_t v1601 = v1600[1];
                        v1592 += v1601;
                        v1591 += *((void *)v238[3] + 1);
                        v1595 += (int)v361;
                        ++v1596;
                        unint64_t v1602 = v102[1];
                      }
                      while (v1596 < v1602);
                      int v1589 = *v102;
                      unsigned int v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1602 = 0;
                      uint64_t v1600 = *(void **)(v101 + 24);
                      uint64_t v1601 = v1600[1];
                    }
                    uint64_t v1592 = *v1600 + v1592 - v1602 * v1601;
                    uint64_t v1591 = *(void *)v238[3] + v1591 - *((void *)v238[3] + 1) * v239[1];
                    ++v1590;
                  }
                  while (v1590 < v1589);
                }
              }
              else if (v106 == 1)
              {
                int v1045 = *v102;
                if (*v102)
                {
                  unint64_t v1046 = 0;
                  uint64_t v1047 = 0;
                  uint64_t v1048 = 0;
                  uint64_t v1049 = *(void *)(v101 + 152);
                  uint64_t v1050 = v238[19];
                  uint64_t v1051 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v1052 = 0;
                      char v1053 = *((unsigned char *)v1050 + v1047);
                      unsigned int v1054 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v1051 + v1052) = *(unsigned char *)(v1049 + v1048 + v1052) - v1053;
                        --v1054;
                        ++v1052;
                      }
                      while (v1054 > 1);
                      uint64_t v101 = *a1;
                      int v238 = (int **)*a2;
                      int v1045 = **(_DWORD **)*a1;
                    }
                    v1048 += **(void **)(v101 + 24);
                    v1047 += *(void *)v238[3];
                    v1051 += (int)v361;
                    ++v1046;
                  }
                  while (v1046 < v1045);
                }
              }
              else if (v100[6])
              {
                unint64_t v1885 = v238[19];
                uint64_t v1908 = *(void *)(v101 + 152);
                uint64_t v1937 = (int)v361;
                unint64_t v1959 = 0;
                unsigned int v1872 = v361 + 1;
                uint64_t v1603 = v100[19];
                do
                {
                  uint64_t v1604 = *(void *)*a1;
                  unint64_t v1605 = (unint64_t)(*(void *)(*a1 + 8) - v1604) >> 2;
                  uint64_t v1606 = 0;
                  uint64_t v1607 = (v1605 - 1);
                  if ((int)v1605 - 1 >= 0)
                  {
                    uint64_t v1608 = *(void *)(*a1 + 24);
                    int v1609 = v1959;
                    do
                    {
                      ldiv_t v1610 = ldiv(v1609, *(int *)(v1604 + 4 * v1607));
                      int v1609 = v1610.quot;
                      v1606 += *(void *)(v1608 + 8 * v1607--) * v1610.rem;
                    }
                    while (v1607 != -1);
                  }
                  uint64_t v1611 = *(void *)*a2;
                  unint64_t v1612 = (unint64_t)(*(void *)(*a2 + 8) - v1611) >> 2;
                  uint64_t v1613 = 0;
                  uint64_t v1614 = (v1612 - 1);
                  if ((int)v1612 - 1 >= 0)
                  {
                    uint64_t v1615 = *(void *)(*a2 + 24);
                    int v1616 = v1959;
                    do
                    {
                      ldiv_t v1617 = ldiv(v1616, *(int *)(v1611 + 4 * v1614));
                      int v1616 = v1617.quot;
                      v1613 += *(void *)(v1615 + 8 * v1614--) * v1617.rem;
                    }
                    while (v1614 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1618 = 0;
                    char v1619 = *((unsigned char *)v1885 + (int)v1613);
                    unsigned int v1620 = v1872;
                    do
                    {
                      *(unsigned char *)(v1603 + v1618) = *(unsigned char *)(v1908 + (int)v1606 + v1618) - v1619;
                      --v1620;
                      ++v1618;
                    }
                    while (v1620 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1603 += v1937;
                  v1959 += v1937;
                }
                while (v1959 < v100[6]);
              }
              break;
            case 3:
              if (v106 == 2)
              {
                int v1219 = *v102;
                if (*v102)
                {
                  unint64_t v1220 = 0;
                  uint64_t v1221 = 0;
                  uint64_t v1222 = 0;
                  uint64_t v1223 = *(void *)(v101 + 152);
                  uint64_t v1224 = v238[19];
                  uint64_t v1225 = v100[19];
                  do
                  {
                    if (v102[1])
                    {
                      unint64_t v1226 = 0;
                      do
                      {
                        if ((int)v361 >= 1)
                        {
                          uint64_t v1227 = 0;
                          unsigned int v1228 = v361 + 1;
                          do
                          {
                            *(unsigned char *)(v1225 + v1227) = *(unsigned char *)(v1223 + v1222 + v1227)
                                                      - *((unsigned char *)v1224 + v1221 + v1227);
                            --v1228;
                            ++v1227;
                          }
                          while (v1228 > 1);
                          uint64_t v101 = *a1;
                          int v238 = (int **)*a2;
                          unsigned int v102 = *(int **)*a1;
                        }
                        uint64_t v1229 = *(void **)(v101 + 24);
                        uint64_t v1230 = v1229[1];
                        v1222 += v1230;
                        v1221 += *((void *)v238[3] + 1);
                        v1225 += (int)v361;
                        ++v1226;
                        unint64_t v1231 = v102[1];
                      }
                      while (v1226 < v1231);
                      int v1219 = *v102;
                      unsigned int v239 = *v238;
                    }
                    else
                    {
                      unint64_t v1231 = 0;
                      uint64_t v1229 = *(void **)(v101 + 24);
                      uint64_t v1230 = v1229[1];
                    }
                    uint64_t v1222 = *v1229 + v1222 - v1231 * v1230;
                    uint64_t v1221 = *(void *)v238[3] + v1221 - *((void *)v238[3] + 1) * v239[1];
                    ++v1220;
                  }
                  while (v1220 < v1219);
                }
              }
              else if (v106 == 1)
              {
                int v362 = *v102;
                if (*v102)
                {
                  unint64_t v363 = 0;
                  uint64_t v364 = 0;
                  uint64_t v365 = 0;
                  uint64_t v366 = *(void *)(v101 + 152);
                  uint64_t v367 = v238[19];
                  uint64_t v368 = v100[19];
                  do
                  {
                    if ((int)v361 >= 1)
                    {
                      uint64_t v369 = 0;
                      unsigned int v370 = v361 + 1;
                      do
                      {
                        *(unsigned char *)(v368 + v369) = *(unsigned char *)(v366 + v365 + v369) - *((unsigned char *)v367 + v364 + v369);
                        --v370;
                        ++v369;
                      }
                      while (v370 > 1);
                      uint64_t v101 = *a1;
                      int v238 = (int **)*a2;
                      int v362 = **(_DWORD **)*a1;
                    }
                    v365 += **(void **)(v101 + 24);
                    v364 += *(void *)v238[3];
                    v368 += (int)v361;
                    ++v363;
                  }
                  while (v363 < v362);
                }
              }
              else if (v100[6])
              {
                unint64_t v1881 = v238[19];
                uint64_t v1897 = *(void *)(v101 + 152);
                uint64_t v1926 = (int)v361;
                unint64_t v1955 = 0;
                unsigned int v1866 = v361 + 1;
                uint64_t v1232 = v100[19];
                do
                {
                  uint64_t v1233 = *(void *)*a1;
                  unint64_t v1234 = (unint64_t)(*(void *)(*a1 + 8) - v1233) >> 2;
                  uint64_t v1235 = 0;
                  uint64_t v1236 = (v1234 - 1);
                  if ((int)v1234 - 1 >= 0)
                  {
                    uint64_t v1237 = *(void *)(*a1 + 24);
                    int v1238 = v1955;
                    do
                    {
                      ldiv_t v1239 = ldiv(v1238, *(int *)(v1233 + 4 * v1236));
                      int v1238 = v1239.quot;
                      v1235 += *(void *)(v1237 + 8 * v1236--) * v1239.rem;
                    }
                    while (v1236 != -1);
                  }
                  uint64_t v1240 = *(void *)*a2;
                  unint64_t v1241 = (unint64_t)(*(void *)(*a2 + 8) - v1240) >> 2;
                  uint64_t v1242 = 0;
                  uint64_t v1243 = (v1241 - 1);
                  if ((int)v1241 - 1 >= 0)
                  {
                    uint64_t v1244 = *(void *)(*a2 + 24);
                    int v1245 = v1955;
                    do
                    {
                      ldiv_t v1246 = ldiv(v1245, *(int *)(v1240 + 4 * v1243));
                      int v1245 = v1246.quot;
                      v1242 += *(void *)(v1244 + 8 * v1243--) * v1246.rem;
                    }
                    while (v1243 != -1);
                  }
                  if ((int)v1963 >= 1)
                  {
                    uint64_t v1247 = 0;
                    unsigned int v1248 = v1866;
                    do
                    {
                      *(unsigned char *)(v1232 + v1247) = *(unsigned char *)(v1897 + (int)v1235 + v1247)
                                                - *((unsigned char *)v1881 + (int)v1242 + v1247);
                      --v1248;
                      ++v1247;
                    }
                    while (v1248 > 1);
                    int v100 = *(void **)a3;
                  }
                  v1232 += v1926;
                  v1955 += v1926;
                }
                while (v1955 < v100[6]);
              }
              break;
            default:
LABEL_408:
              switch(v357)
              {
                case 1uLL:
                  if (v100[6])
                  {
                    unint64_t v371 = 0;
                    uint64_t v372 = 0;
                    uint64_t v373 = 0;
                    uint64_t v374 = *(void *)(v101 + 152);
                    uint64_t v375 = v238[19];
                    uint64_t v376 = v100[19];
                    do
                    {
                      *(unsigned char *)(v376 + v371) = *(unsigned char *)(v374 + v373) - *((unsigned char *)v375 + v372);
                      v373 += **(void **)(*a1 + 24);
                      v372 += **(void **)(*a2 + 24);
                      ++v371;
                    }
                    while (v371 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  int v679 = *v102;
                  if (*v102)
                  {
                    unint64_t v680 = 0;
                    uint64_t v681 = 0;
                    uint64_t v682 = 0;
                    uint64_t v683 = 0;
                    uint64_t v684 = *(void *)(v101 + 152);
                    unint64_t v685 = v238[19];
                    uint64_t v686 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v687 = 0;
                        do
                        {
                          *(unsigned char *)(v686 + v681 + v687) = *(unsigned char *)(v684 + v683) - *((unsigned char *)v685 + v682);
                          uint64_t v101 = *a1;
                          uint64_t v688 = *(void **)(*a1 + 24);
                          uint64_t v689 = v688[1];
                          v683 += v689;
                          int v238 = (int **)*a2;
                          uint64_t v690 = *(int **)(*a2 + 24);
                          uint64_t v691 = *((void *)v690 + 1);
                          v682 += v691;
                          ++v687;
                          unsigned int v102 = *(int **)*a1;
                          unint64_t v692 = v102[1];
                        }
                        while (v687 < v692);
                        int v679 = *v102;
                        unsigned int v239 = *v238;
                        v681 += v687;
                      }
                      else
                      {
                        unint64_t v692 = 0;
                        uint64_t v688 = *(void **)(v101 + 24);
                        uint64_t v689 = v688[1];
                        uint64_t v690 = v238[3];
                        uint64_t v691 = *((void *)v690 + 1);
                      }
                      uint64_t v683 = *v688 + v683 - v692 * v689;
                      uint64_t v682 = *(void *)v690 + v682 - v691 * v239[1];
                      ++v680;
                    }
                    while (v680 < v679);
                  }
                  break;
                case 3uLL:
                  int v693 = *v102;
                  if (*v102)
                  {
                    unint64_t v694 = 0;
                    uint64_t v695 = 0;
                    uint64_t v696 = 0;
                    uint64_t v697 = 0;
                    uint64_t v698 = *(void *)(v101 + 152);
                    uint64_t v699 = v238[19];
                    uint64_t v700 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v701 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v702 = 0;
                            do
                            {
                              *(unsigned char *)(v700 + v695 + v702) = *(unsigned char *)(v698 + v697) - *((unsigned char *)v699 + v696);
                              uint64_t v101 = *a1;
                              uint64_t v703 = *(void **)(*a1 + 24);
                              uint64_t v704 = v703[2];
                              v697 += v704;
                              int v238 = (int **)*a2;
                              uint64_t v705 = *(int **)(*a2 + 24);
                              uint64_t v706 = *((void *)v705 + 2);
                              v696 += v706;
                              ++v702;
                              unsigned int v102 = *(int **)*a1;
                              unint64_t v707 = v102[2];
                            }
                            while (v702 < v707);
                            unsigned int v239 = *v238;
                            v695 += v702;
                          }
                          else
                          {
                            unint64_t v707 = 0;
                            uint64_t v703 = *(void **)(v101 + 24);
                            uint64_t v704 = v703[2];
                            uint64_t v705 = v238[3];
                            uint64_t v706 = *((void *)v705 + 2);
                          }
                          uint64_t v708 = v703[1];
                          uint64_t v697 = v708 + v697 - v707 * v704;
                          uint64_t v696 = *((void *)v705 + 1) + v696 - v706 * v239[2];
                          ++v701;
                          unint64_t v709 = v102[1];
                        }
                        while (v701 < v709);
                        int v693 = *v102;
                      }
                      else
                      {
                        unint64_t v709 = 0;
                        uint64_t v703 = *(void **)(v101 + 24);
                        uint64_t v708 = v703[1];
                      }
                      uint64_t v697 = *v703 + v697 - v709 * v708;
                      uint64_t v696 = *(void *)v238[3] + v696 - *((void *)v238[3] + 1) * v239[1];
                      ++v694;
                    }
                    while (v694 < v693);
                  }
                  break;
                case 4uLL:
                  int v710 = *v102;
                  if (*v102)
                  {
                    unint64_t v711 = 0;
                    uint64_t v712 = 0;
                    uint64_t v713 = 0;
                    uint64_t v714 = 0;
                    uint64_t v715 = *(void *)(v101 + 152);
                    uint64_t v716 = v238[19];
                    uint64_t v717 = v100[19];
                    do
                    {
                      if (v102[1])
                      {
                        unint64_t v718 = 0;
                        do
                        {
                          if (v102[2])
                          {
                            unint64_t v719 = 0;
                            do
                            {
                              if (v102[3])
                              {
                                unint64_t v720 = 0;
                                do
                                {
                                  *(unsigned char *)(v717 + v712 + v720) = *(unsigned char *)(v715 + v714) - *((unsigned char *)v716 + v713);
                                  uint64_t v101 = *a1;
                                  uint64_t v721 = *(void **)(*a1 + 24);
                                  uint64_t v722 = v721[3];
                                  v714 += v722;
                                  int v238 = (int **)*a2;
                                  uint64_t v723 = *(int **)(*a2 + 24);
                                  uint64_t v724 = *((void *)v723 + 3);
                                  v713 += v724;
                                  ++v720;
                                  unsigned int v102 = *(int **)*a1;
                                  unint64_t v725 = v102[3];
                                }
                                while (v720 < v725);
                                unsigned int v239 = *v238;
                                v712 += v720;
                              }
                              else
                              {
                                unint64_t v725 = 0;
                                uint64_t v721 = *(void **)(v101 + 24);
                                uint64_t v722 = v721[3];
                                uint64_t v723 = v238[3];
                                uint64_t v724 = *((void *)v723 + 3);
                              }
                              uint64_t v726 = v721[2];
                              uint64_t v714 = v726 + v714 - v725 * v722;
                              uint64_t v713 = *((void *)v723 + 2) + v713 - v724 * v239[3];
                              ++v719;
                              unint64_t v727 = v102[2];
                            }
                            while (v719 < v727);
                          }
                          else
                          {
                            unint64_t v727 = 0;
                            uint64_t v721 = *(void **)(v101 + 24);
                            uint64_t v726 = v721[2];
                          }
                          uint64_t v714 = v721[1] + v714 - v727 * v726;
                          uint64_t v713 = *((void *)v238[3] + 1) + v713 - *((void *)v238[3] + 2) * v239[2];
                          ++v718;
                          unint64_t v728 = v102[1];
                        }
                        while (v718 < v728);
                        int v710 = *v102;
                      }
                      else
                      {
                        unint64_t v728 = 0;
                      }
                      uint64_t v714 = **(void **)(v101 + 24) + v714 - *(void *)(*(void *)(v101 + 24) + 8) * v728;
                      uint64_t v713 = *(void *)v238[3] + v713 - *((void *)v238[3] + 1) * v239[1];
                      ++v711;
                    }
                    while (v711 < v710);
                  }
                  break;
                default:
                  if (v100[6])
                  {
                    unint64_t v663 = 0;
                    uint64_t v1951 = v238[19];
                    uint64_t v1969 = *(void *)(v101 + 152);
                    uint64_t v664 = v100[19];
                    do
                    {
                      uint64_t v665 = *(void *)*a1;
                      unint64_t v666 = (unint64_t)(*(void *)(*a1 + 8) - v665) >> 2;
                      uint64_t v667 = 0;
                      uint64_t v668 = (v666 - 1);
                      if ((int)v666 - 1 >= 0)
                      {
                        uint64_t v669 = *(void *)(*a1 + 24);
                        int v670 = v663;
                        do
                        {
                          ldiv_t v671 = ldiv(v670, *(int *)(v665 + 4 * v668));
                          int v670 = v671.quot;
                          v667 += *(void *)(v669 + 8 * v668--) * v671.rem;
                        }
                        while (v668 != -1);
                      }
                      uint64_t v672 = *(void *)*a2;
                      unint64_t v673 = (unint64_t)(*(void *)(*a2 + 8) - v672) >> 2;
                      uint64_t v674 = 0;
                      uint64_t v675 = (v673 - 1);
                      if ((int)v673 - 1 >= 0)
                      {
                        uint64_t v676 = *(void *)(*a2 + 24);
                        int v677 = v663;
                        do
                        {
                          ldiv_t v678 = ldiv(v677, *(int *)(v672 + 4 * v675));
                          int v677 = v678.quot;
                          v674 += *(void *)(v676 + 8 * v675--) * v678.rem;
                        }
                        while (v675 != -1);
                      }
                      *(unsigned char *)(v664 + v663++) = *(unsigned char *)(v1969 + (int)v667) - *((unsigned char *)v1951 + (int)v674);
                    }
                    while (v663 < *(void *)(*(void *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(void *)a3 + 152) = **(_DWORD **)(*a1 + 152) - **(_DWORD **)(*a2 + 152);
          return;
        case 1:
          int v137 = *(_DWORD *)(*a2 + 160);
          if (v137 >= 1)
          {
            int v138 = **(_DWORD **)(*a1 + 152);
            int v139 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v140 = *(int **)(*a2 + 152);
            unsigned int v141 = v137 + 1;
            do
            {
              int v142 = *v140++;
              *v139++ = v138 - v142;
              --v141;
            }
            while (v141 > 1);
          }
          return;
        case 2:
          int v143 = *(_DWORD *)(*a1 + 160);
          if (v143 >= 1)
          {
            int v144 = **(_DWORD **)(*a2 + 152);
            unsigned int v145 = *(_DWORD **)(*(void *)a3 + 152);
            uint64_t v146 = *(int **)(*a1 + 152);
            unsigned int v147 = v143 + 1;
            do
            {
              int v148 = *v146++;
              *v145++ = v148 - v144;
              --v147;
            }
            while (v147 > 1);
          }
          return;
        case 3:
          int v149 = *(_DWORD *)(*(void *)a3 + 48);
          if (v149 >= 1)
          {
            int v150 = *(_DWORD **)(*(void *)a3 + 152);
            unsigned int v151 = *(int **)(*a2 + 152);
            uint64_t v152 = *(int **)(*a1 + 152);
            unsigned int v153 = v149 + 1;
            do
            {
              int v155 = *v152++;
              int v154 = v155;
              int v156 = *v151++;
              *v150++ = v154 - v156;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        default:
          unsigned int v128 = *(void **)a3;
          int v129 = (void *)*a1;
          int v130 = *(int **)*a1;
          uint64_t v131 = (v129[1] - (void)v130) >> 2;
          uint64_t v132 = (v131 - 1);
          if ((int)v132 >= -1) {
            int v133 = -1;
          }
          else {
            int v133 = v131 - 1;
          }
          int v134 = v133 + 1;
          int v135 = v131 + 1;
          while (1)
          {
            unsigned int v136 = v135 - 2;
            if (v135 - 2 < 0) {
              break;
            }
            --v135;
            if (*(void *)(v129[3] + 8 * v136) != *(void *)(v128[3] + 8 * v136)) {
              goto LABEL_177;
            }
          }
          int v135 = v134;
LABEL_177:
          unsigned int v245 = (void *)*a2;
          int v246 = *(int **)*a2;
          uint64_t v247 = (v245[1] - (void)v246) >> 2;
          uint64_t v248 = (v247 - 1);
          if ((int)v248 >= -1) {
            int v249 = -1;
          }
          else {
            int v249 = v247 - 1;
          }
          int v250 = v249 + 1;
          int v251 = v247 + 1;
          while (1)
          {
            unsigned int v252 = v251 - 2;
            if (v251 - 2 < 0) {
              break;
            }
            --v251;
            if (*(void *)(v245[3] + 8 * v252) != *(void *)(v128[3] + 8 * v252)) {
              goto LABEL_221;
            }
          }
          int v251 = v250;
LABEL_221:
          int v277 = v131 + 1;
          while (1)
          {
            unsigned int v278 = v277 - 2;
            if (v277 - 2 < 0) {
              break;
            }
            --v277;
            if (*(void *)(v129[3] + 8 * v278)) {
              goto LABEL_256;
            }
          }
          int v277 = v134;
LABEL_256:
          int v291 = v247 + 1;
          while (1)
          {
            unsigned int v292 = v291 - 2;
            if (v291 - 2 < 0) {
              break;
            }
            --v291;
            if (*(void *)(v245[3] + 8 * v292)) {
              goto LABEL_414;
            }
          }
          int v291 = v250;
LABEL_414:
          unint64_t v377 = (uint64_t)(v128[1] - *v128) >> 2;
          if (v135 <= v251) {
            int v378 = v251;
          }
          else {
            int v378 = v135;
          }
          if (v135 <= v291) {
            int v135 = v291;
          }
          if (v277 > v251) {
            int v251 = v277;
          }
          if (v377 > v251)
          {
            int v379 = 1;
          }
          else
          {
            int v251 = (uint64_t)(v128[1] - *v128) >> 2;
            int v379 = 4;
          }
          if (v377 > v135)
          {
            int v380 = 2;
          }
          else
          {
            int v135 = v251;
            int v380 = v379;
          }
          if (v377 > v378)
          {
            int v135 = v378;
            int v380 = 3;
          }
          uint64_t v1946 = v248;
          uint64_t v1964 = v132;
          if (!v135) {
            goto LABEL_444;
          }
          unint64_t v381 = *(void *)(v128[3] + 8 * (v135 - 1));
          if (v381 < 0x10) {
            goto LABEL_444;
          }
          switch(v380)
          {
            case 1:
              if (v135 == 2)
              {
                int v1621 = *v130;
                if (*v130)
                {
                  unint64_t v1622 = 0;
                  uint64_t v1623 = 0;
                  uint64_t v1624 = 0;
                  uint64_t v1625 = v129[19];
                  uint64_t v1626 = v245[19];
                  uint64_t v1627 = v128[19];
                  uint64_t v1628 = (uint64_t *)v129[3];
                  uint64_t v1629 = *v1628;
                  uint64_t v1630 = v1628[1];
                  uint64_t v1631 = (uint64_t *)v245[3];
                  uint64_t v1632 = *v1631;
                  uint64_t v1633 = v1631[1];
                  int v1634 = v130[1];
                  int v1635 = v1634;
                  do
                  {
                    if (v1635)
                    {
                      unint64_t v1636 = 0;
                      uint64_t v1637 = v1626 + 4 * v1623;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1638 = 0;
                          int v1639 = *(_DWORD *)(v1625 + 4 * v1624);
                          unsigned int v1640 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1627 + v1638) = v1639 - *(_DWORD *)(v1637 + v1638);
                            --v1640;
                            v1638 += 4;
                          }
                          while (v1640 > 1);
                          int v1634 = v130[1];
                        }
                        v1624 += v1630;
                        v1623 += v1633;
                        v1627 += 4 * (int)v381;
                        ++v1636;
                        v1637 += 4 * v1633;
                      }
                      while (v1636 < v1634);
                      uint64_t v1641 = v1634;
                      int v1621 = *v130;
                      int v1635 = v1634;
                    }
                    else
                    {
                      uint64_t v1641 = 0;
                    }
                    uint64_t v1624 = v1624 + v1629 - v1641 * v1630;
                    uint64_t v1623 = v1623 + v1632 - v1633 * v246[1];
                    ++v1622;
                  }
                  while (v1622 < v1621);
                }
              }
              else if (v135 == 1)
              {
                int v1055 = *v130;
                if (*v130)
                {
                  unint64_t v1056 = 0;
                  uint64_t v1057 = 0;
                  uint64_t v1058 = v129[19];
                  uint64_t v1059 = v245[19];
                  uint64_t v1060 = v128[19];
                  uint64_t v1061 = *(void *)v129[3];
                  uint64_t v1062 = 4 * *(void *)v245[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1063 = 0;
                      int v1064 = *(_DWORD *)(v1058 + 4 * v1057);
                      unsigned int v1065 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1060 + v1063) = v1064 - *(_DWORD *)(v1059 + v1063);
                        --v1065;
                        v1063 += 4;
                      }
                      while (v1065 > 1);
                      int v1055 = *v130;
                    }
                    v1057 += v1061;
                    ++v1056;
                    v1060 += 4 * (int)v381;
                    v1059 += v1062;
                  }
                  while (v1056 < v1055);
                }
              }
              else
              {
                unint64_t v1909 = v128[6];
                if (v1909)
                {
                  unint64_t v1938 = 0;
                  uint64_t v1841 = v245[19];
                  uint64_t v1856 = v129[19];
                  uint64_t v1642 = v128[19];
                  do
                  {
                    uint64_t v1643 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1644 = v129[3];
                      uint64_t v1645 = v132;
                      int v1646 = v1938;
                      do
                      {
                        ldiv_t v1647 = ldiv(v1646, v130[v1645]);
                        int v1646 = v1647.quot;
                        v1643 += *(void *)(v1644 + 8 * v1645--) * v1647.rem;
                      }
                      while (v1645 != -1);
                    }
                    uint64_t v1648 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1649) = 0;
                    }
                    else
                    {
                      uint64_t v1649 = 0;
                      uint64_t v1650 = v245[3];
                      int v1651 = v1938;
                      do
                      {
                        ldiv_t v1652 = ldiv(v1651, v246[v1648]);
                        int v1651 = v1652.quot;
                        v1649 += *(void *)(v1650 + 8 * v1648--) * v1652.rem;
                      }
                      while (v1648 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1653 = 0;
                      int v1654 = *(_DWORD *)(v1856 + 4 * (int)v1643);
                      unsigned int v1655 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1642 + v1653) = v1654 - *(_DWORD *)(v1841 + 4 * (int)v1649 + v1653);
                        --v1655;
                        v1653 += 4;
                      }
                      while (v1655 > 1);
                    }
                    v1642 += 4 * (int)v381;
                    v1938 += (int)v381;
                  }
                  while (v1938 < v1909);
                }
              }
              break;
            case 2:
              if (v135 == 2)
              {
                int v1656 = *v130;
                if (*v130)
                {
                  unint64_t v1657 = 0;
                  uint64_t v1658 = 0;
                  uint64_t v1659 = 0;
                  uint64_t v1660 = v129[19];
                  uint64_t v1661 = v245[19];
                  uint64_t v1662 = v128[19];
                  uint64_t v1663 = (uint64_t *)v129[3];
                  uint64_t v1664 = *v1663;
                  uint64_t v1665 = v1663[1];
                  uint64_t v1666 = (uint64_t *)v245[3];
                  uint64_t v1667 = *v1666;
                  uint64_t v1668 = v1666[1];
                  int v1669 = v130[1];
                  int v1670 = v1669;
                  do
                  {
                    if (v1670)
                    {
                      unint64_t v1671 = 0;
                      uint64_t v1672 = v1660 + 4 * v1659;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1673 = 0;
                          int v1674 = *(_DWORD *)(v1661 + 4 * v1658);
                          unsigned int v1675 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1662 + v1673) = *(_DWORD *)(v1672 + v1673) - v1674;
                            --v1675;
                            v1673 += 4;
                          }
                          while (v1675 > 1);
                          int v1669 = v130[1];
                        }
                        v1659 += v1665;
                        v1658 += v1668;
                        v1662 += 4 * (int)v381;
                        ++v1671;
                        v1672 += 4 * v1665;
                      }
                      while (v1671 < v1669);
                      uint64_t v1676 = v1669;
                      int v1656 = *v130;
                      int v1670 = v1669;
                    }
                    else
                    {
                      uint64_t v1676 = 0;
                    }
                    uint64_t v1659 = v1659 + v1664 - v1676 * v1665;
                    uint64_t v1658 = v1658 + v1667 - v1668 * v246[1];
                    ++v1657;
                  }
                  while (v1657 < v1656);
                }
              }
              else if (v135 == 1)
              {
                int v1066 = *v130;
                if (*v130)
                {
                  unint64_t v1067 = 0;
                  uint64_t v1068 = 0;
                  uint64_t v1069 = v129[19];
                  uint64_t v1070 = v245[19];
                  uint64_t v1071 = v128[19];
                  uint64_t v1072 = *(void *)v245[3];
                  uint64_t v1073 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1074 = 0;
                      int v1075 = *(_DWORD *)(v1070 + 4 * v1068);
                      unsigned int v1076 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1071 + v1074) = *(_DWORD *)(v1069 + v1074) - v1075;
                        --v1076;
                        v1074 += 4;
                      }
                      while (v1076 > 1);
                      int v1066 = *v130;
                    }
                    v1068 += v1072;
                    ++v1067;
                    v1071 += 4 * (int)v381;
                    v1069 += v1073;
                  }
                  while (v1067 < v1066);
                }
              }
              else
              {
                unint64_t v1910 = v128[6];
                if (v1910)
                {
                  unint64_t v1939 = 0;
                  uint64_t v1842 = v245[19];
                  uint64_t v1857 = v129[19];
                  uint64_t v1677 = v128[19];
                  do
                  {
                    uint64_t v1678 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1679 = v129[3];
                      uint64_t v1680 = v132;
                      int v1681 = v1939;
                      do
                      {
                        ldiv_t v1682 = ldiv(v1681, v130[v1680]);
                        int v1681 = v1682.quot;
                        v1678 += *(void *)(v1679 + 8 * v1680--) * v1682.rem;
                      }
                      while (v1680 != -1);
                    }
                    uint64_t v1683 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1684) = 0;
                    }
                    else
                    {
                      uint64_t v1684 = 0;
                      uint64_t v1685 = v245[3];
                      int v1686 = v1939;
                      do
                      {
                        ldiv_t v1687 = ldiv(v1686, v246[v1683]);
                        int v1686 = v1687.quot;
                        v1684 += *(void *)(v1685 + 8 * v1683--) * v1687.rem;
                      }
                      while (v1683 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1688 = 0;
                      int v1689 = *(_DWORD *)(v1842 + 4 * (int)v1684);
                      unsigned int v1690 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1677 + v1688) = *(_DWORD *)(v1857 + 4 * (int)v1678 + v1688) - v1689;
                        --v1690;
                        v1688 += 4;
                      }
                      while (v1690 > 1);
                    }
                    v1677 += 4 * (int)v381;
                    v1939 += (int)v381;
                  }
                  while (v1939 < v1910);
                }
              }
              break;
            case 3:
              if (v135 == 2)
              {
                int v1249 = *v130;
                if (*v130)
                {
                  unint64_t v1250 = 0;
                  uint64_t v1251 = 0;
                  uint64_t v1252 = 0;
                  uint64_t v1253 = v129[19];
                  uint64_t v1254 = v245[19];
                  uint64_t v1255 = v128[19];
                  unint64_t v1256 = (uint64_t *)v129[3];
                  uint64_t v1257 = *v1256;
                  uint64_t v1258 = v1256[1];
                  uint64_t v1259 = (uint64_t *)v245[3];
                  uint64_t v1260 = *v1259;
                  uint64_t v1261 = v1259[1];
                  int v1262 = v130[1];
                  int v1263 = v1262;
                  do
                  {
                    if (v1263)
                    {
                      unint64_t v1264 = 0;
                      uint64_t v1265 = v1254 + 4 * v1251;
                      uint64_t v1266 = v1253 + 4 * v1252;
                      do
                      {
                        if ((int)v381 >= 1)
                        {
                          uint64_t v1267 = 0;
                          unsigned int v1268 = v381 + 1;
                          do
                          {
                            *(_DWORD *)(v1255 + v1267) = *(_DWORD *)(v1266 + v1267) - *(_DWORD *)(v1265 + v1267);
                            --v1268;
                            v1267 += 4;
                          }
                          while (v1268 > 1);
                          int v1262 = v130[1];
                        }
                        v1252 += v1258;
                        v1251 += v1261;
                        v1255 += 4 * (int)v381;
                        ++v1264;
                        v1265 += 4 * v1261;
                        v1266 += 4 * v1258;
                      }
                      while (v1264 < v1262);
                      uint64_t v1269 = v1262;
                      int v1249 = *v130;
                      int v1263 = v1262;
                    }
                    else
                    {
                      uint64_t v1269 = 0;
                    }
                    uint64_t v1252 = v1252 + v1257 - v1269 * v1258;
                    uint64_t v1251 = v1251 + v1260 - v1261 * v246[1];
                    ++v1250;
                  }
                  while (v1250 < v1249);
                }
              }
              else if (v135 == 1)
              {
                int v382 = *v130;
                if (*v130)
                {
                  unint64_t v383 = 0;
                  uint64_t v384 = v129[19];
                  uint64_t v385 = v245[19];
                  uint64_t v386 = v128[19];
                  uint64_t v387 = 4 * *(void *)v245[3];
                  uint64_t v388 = 4 * *(void *)v129[3];
                  do
                  {
                    if ((int)v381 >= 1)
                    {
                      uint64_t v389 = 0;
                      unsigned int v390 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v386 + v389) = *(_DWORD *)(v384 + v389) - *(_DWORD *)(v385 + v389);
                        --v390;
                        v389 += 4;
                      }
                      while (v390 > 1);
                      int v382 = *v130;
                    }
                    ++v383;
                    v386 += 4 * (int)v381;
                    v385 += v387;
                    v384 += v388;
                  }
                  while (v383 < v382);
                }
              }
              else
              {
                unint64_t v1898 = v128[6];
                if (v1898)
                {
                  unint64_t v1927 = 0;
                  uint64_t v1836 = v245[19];
                  uint64_t v1849 = v129[19];
                  uint64_t v1270 = v128[19];
                  do
                  {
                    uint64_t v1271 = 0;
                    if ((v132 & 0x80000000) == 0)
                    {
                      uint64_t v1272 = v129[3];
                      uint64_t v1273 = v132;
                      int v1274 = v1927;
                      do
                      {
                        ldiv_t v1275 = ldiv(v1274, v130[v1273]);
                        int v1274 = v1275.quot;
                        v1271 += *(void *)(v1272 + 8 * v1273--) * v1275.rem;
                      }
                      while (v1273 != -1);
                    }
                    uint64_t v1276 = v1946;
                    if ((v1946 & 0x80000000) != 0)
                    {
                      LODWORD(v1277) = 0;
                    }
                    else
                    {
                      uint64_t v1277 = 0;
                      uint64_t v1278 = v245[3];
                      int v1279 = v1927;
                      do
                      {
                        ldiv_t v1280 = ldiv(v1279, v246[v1276]);
                        int v1279 = v1280.quot;
                        v1277 += *(void *)(v1278 + 8 * v1276--) * v1280.rem;
                      }
                      while (v1276 != -1);
                    }
                    uint64_t v132 = v1964;
                    if ((int)v381 >= 1)
                    {
                      uint64_t v1281 = 0;
                      unsigned int v1282 = v381 + 1;
                      do
                      {
                        *(_DWORD *)(v1270 + v1281) = *(_DWORD *)(v1849 + 4 * (int)v1271 + v1281)
                                                   - *(_DWORD *)(v1836 + 4 * (int)v1277 + v1281);
                        --v1282;
                        v1281 += 4;
                      }
                      while (v1282 > 1);
                    }
                    v1270 += 4 * (int)v381;
                    v1927 += (int)v381;
                  }
                  while (v1927 < v1898);
                }
              }
              break;
            default:
LABEL_444:
              switch(v377)
              {
                case 1uLL:
                  uint64_t v391 = v128[6];
                  if (v391)
                  {
                    uint64_t v392 = (_DWORD *)v129[19];
                    unsigned int v393 = (_DWORD *)v245[19];
                    uint64_t v394 = (_DWORD *)v128[19];
                    uint64_t v395 = 4 * *(void *)v245[3];
                    uint64_t v396 = 4 * *(void *)v129[3];
                    do
                    {
                      *v394++ = *v392 - *v393;
                      unsigned int v393 = (_DWORD *)((char *)v393 + v395);
                      uint64_t v392 = (_DWORD *)((char *)v392 + v396);
                      --v391;
                    }
                    while (v391);
                  }
                  break;
                case 2uLL:
                  int v741 = *v130;
                  if (*v130)
                  {
                    unint64_t v742 = 0;
                    uint64_t v743 = 0;
                    uint64_t v744 = 0;
                    uint64_t v745 = 0;
                    uint64_t v746 = v129[19];
                    uint64_t v747 = v245[19];
                    uint64_t v748 = v128[19];
                    unint64_t v749 = (uint64_t *)v129[3];
                    uint64_t v750 = *v749;
                    uint64_t v751 = v749[1];
                    uint64_t v752 = (uint64_t *)v245[3];
                    uint64_t v754 = *v752;
                    uint64_t v753 = v752[1];
                    int v755 = v130[1];
                    do
                    {
                      if (v755)
                      {
                        for (unint64_t m = 0; m < v755; ++m)
                        {
                          *(_DWORD *)(v748 + 4 * v743 + 4 * m) = *(_DWORD *)(v746 + 4 * v745)
                                                               - *(_DWORD *)(v747 + 4 * v744);
                          v745 += v751;
                          v744 += v753;
                          int v755 = v130[1];
                        }
                        uint64_t v757 = v755;
                        int v741 = *v130;
                        v743 += m;
                      }
                      else
                      {
                        uint64_t v757 = 0;
                      }
                      uint64_t v745 = v745 + v750 - v757 * v751;
                      uint64_t v744 = v744 + v754 - v753 * v246[1];
                      ++v742;
                    }
                    while (v742 < v741);
                  }
                  break;
                case 3uLL:
                  int v758 = *v130;
                  if (*v130)
                  {
                    unint64_t v759 = 0;
                    uint64_t v760 = 0;
                    uint64_t v761 = 0;
                    uint64_t v762 = 0;
                    uint64_t v763 = v129[19];
                    uint64_t v764 = v245[19];
                    uint64_t v765 = v128[19];
                    uint64_t v766 = (uint64_t *)v129[3];
                    uint64_t v767 = *v766;
                    uint64_t v768 = v766[1];
                    unint64_t v769 = (uint64_t *)v245[3];
                    uint64_t v770 = *v769;
                    uint64_t v771 = v769[1];
                    int v772 = v130[1];
                    int v773 = v772;
                    do
                    {
                      if (v773)
                      {
                        unint64_t v774 = 0;
                        uint64_t v775 = v766[2];
                        uint64_t v776 = v769[2];
                        int v777 = v130[2];
                        do
                        {
                          if (v777)
                          {
                            for (unint64_t n = 0; n < v777; ++n)
                            {
                              *(_DWORD *)(v765 + 4 * v760 + 4 * n) = *(_DWORD *)(v763 + 4 * v762)
                                                                   - *(_DWORD *)(v764 + 4 * v761);
                              v762 += v775;
                              v761 += v776;
                              int v777 = v130[2];
                            }
                            uint64_t v779 = v777;
                            int v772 = v130[1];
                            v760 += n;
                          }
                          else
                          {
                            uint64_t v779 = 0;
                          }
                          uint64_t v762 = v762 + v768 - v779 * v775;
                          uint64_t v761 = v761 + v771 - v776 * v246[2];
                          ++v774;
                        }
                        while (v774 < v772);
                        uint64_t v780 = v772;
                        int v758 = *v130;
                        int v773 = v772;
                      }
                      else
                      {
                        uint64_t v780 = 0;
                      }
                      uint64_t v762 = v762 + v767 - v780 * v768;
                      uint64_t v761 = v761 + v770 - v771 * v246[1];
                      ++v759;
                    }
                    while (v759 < v758);
                  }
                  break;
                case 4uLL:
                  int v781 = *v130;
                  if (*v130)
                  {
                    unint64_t v782 = 0;
                    uint64_t v783 = 0;
                    uint64_t v784 = 0;
                    uint64_t v785 = 0;
                    uint64_t v786 = v129[19];
                    uint64_t v787 = v245[19];
                    uint64_t v788 = v128[19];
                    ldiv_t v789 = (uint64_t *)v129[3];
                    uint64_t v790 = *v789;
                    uint64_t v791 = v789[1];
                    uint64_t v792 = (uint64_t *)v245[3];
                    uint64_t v793 = *v792;
                    uint64_t v794 = v792[1];
                    int v795 = v130[1];
                    int v796 = v795;
                    do
                    {
                      if (v796)
                      {
                        unint64_t v797 = 0;
                        uint64_t v798 = v789[2];
                        uint64_t v799 = v792[2];
                        int v800 = v130[2];
                        int v801 = v800;
                        do
                        {
                          if (v801)
                          {
                            unint64_t v802 = 0;
                            uint64_t v803 = v789[3];
                            uint64_t v804 = v792[3];
                            int v805 = v130[3];
                            do
                            {
                              if (v805)
                              {
                                for (iunint64_t i = 0; ii < v805; ++ii)
                                {
                                  *(_DWORD *)(v788 + 4 * v783 + 4 * ii) = *(_DWORD *)(v786 + 4 * v785)
                                                                        - *(_DWORD *)(v787 + 4 * v784);
                                  v785 += v803;
                                  v784 += v804;
                                  int v805 = v130[3];
                                }
                                uint64_t v807 = v805;
                                int v800 = v130[2];
                                v783 += ii;
                              }
                              else
                              {
                                uint64_t v807 = 0;
                              }
                              uint64_t v785 = v785 + v798 - v807 * v803;
                              uint64_t v784 = v784 + v799 - v804 * v246[3];
                              ++v802;
                            }
                            while (v802 < v800);
                            uint64_t v808 = v800;
                            int v795 = v130[1];
                            int v801 = v800;
                          }
                          else
                          {
                            uint64_t v808 = 0;
                          }
                          uint64_t v785 = v785 + v791 - v808 * v798;
                          uint64_t v784 = v784 + v794 - v799 * v246[2];
                          ++v797;
                        }
                        while (v797 < v795);
                        uint64_t v809 = v795;
                        int v781 = *v130;
                        int v796 = v795;
                      }
                      else
                      {
                        uint64_t v809 = 0;
                      }
                      uint64_t v785 = v785 + v790 - v809 * v791;
                      uint64_t v784 = v784 + v793 - v794 * v246[1];
                      ++v782;
                    }
                    while (v782 < v781);
                  }
                  break;
                default:
                  uint64_t v729 = v128[6];
                  if (v729)
                  {
                    uint64_t v730 = 0;
                    uint64_t v1889 = v245[19];
                    uint64_t v1918 = v129[19];
                    uint64_t v1876 = v128[19];
                    do
                    {
                      uint64_t v731 = 0;
                      if ((v132 & 0x80000000) == 0)
                      {
                        uint64_t v732 = v129[3];
                        uint64_t v733 = v132;
                        int v734 = v730;
                        do
                        {
                          ldiv_t v735 = ldiv(v734, v130[v733]);
                          int v734 = v735.quot;
                          v731 += *(void *)(v732 + 8 * v733--) * v735.rem;
                        }
                        while (v733 != -1);
                      }
                      uint64_t v736 = v1946;
                      if ((v1946 & 0x80000000) != 0)
                      {
                        LODWORD(v737) = 0;
                      }
                      else
                      {
                        uint64_t v737 = 0;
                        uint64_t v738 = v245[3];
                        int v739 = v730;
                        do
                        {
                          ldiv_t v740 = ldiv(v739, v246[v736]);
                          int v739 = v740.quot;
                          v737 += *(void *)(v738 + 8 * v736--) * v740.rem;
                        }
                        while (v736 != -1);
                      }
                      *(_DWORD *)(v1876 + 4 * v730++) = *(_DWORD *)(v1918 + 4 * (int)v731)
                                                      - *(_DWORD *)(v1889 + 4 * (int)v737);
                      uint64_t v132 = v1964;
                    }
                    while (v730 != v729);
                  }
                  break;
              }
              break;
          }
          return;
      }
    case 5:
      switch(v24)
      {
        case 0:
          **(void **)(*(void *)a3 + 152) = **(void **)(*a1 + 152) - **(void **)(*a2 + 152);
          return;
        case 1:
          int v166 = *(_DWORD *)(*a2 + 160);
          if (v166 >= 1)
          {
            uint64_t v167 = **(void **)(*a1 + 152);
            unsigned int v168 = *(void **)(*(void *)a3 + 152);
            float v169 = *(uint64_t **)(*a2 + 152);
            unsigned int v170 = v166 + 1;
            do
            {
              uint64_t v171 = *v169++;
              *v168++ = v167 - v171;
              --v170;
            }
            while (v170 > 1);
          }
          return;
        case 2:
          int v172 = *(_DWORD *)(*a1 + 160);
          if (v172 >= 1)
          {
            uint64_t v173 = **(void **)(*a2 + 152);
            unsigned int v174 = *(void **)(*(void *)a3 + 152);
            float v175 = *(uint64_t **)(*a1 + 152);
            unsigned int v176 = v172 + 1;
            do
            {
              uint64_t v177 = *v175++;
              *v174++ = v177 - v173;
              --v176;
            }
            while (v176 > 1);
          }
          return;
        case 3:
          int v178 = *(_DWORD *)(*(void *)a3 + 48);
          if (v178 >= 1)
          {
            unsigned int v179 = *(void **)(*(void *)a3 + 152);
            uint64_t v180 = *(uint64_t **)(*a2 + 152);
            uint64_t v181 = *(uint64_t **)(*a1 + 152);
            unsigned int v182 = v178 + 1;
            do
            {
              uint64_t v184 = *v181++;
              uint64_t v183 = v184;
              uint64_t v185 = *v180++;
              *v179++ = v183 - v185;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        default:
          int v157 = *(void **)a3;
          uint64_t v158 = (void *)*a1;
          uint64_t v159 = *(int **)*a1;
          uint64_t v160 = (v158[1] - (void)v159) >> 2;
          uint64_t v161 = (v160 - 1);
          if ((int)v161 >= -1) {
            int v162 = -1;
          }
          else {
            int v162 = v160 - 1;
          }
          int v163 = v162 + 1;
          int v164 = v160 + 1;
          while (1)
          {
            unsigned int v165 = v164 - 2;
            if (v164 - 2 < 0) {
              break;
            }
            --v164;
            if (*(void *)(v158[3] + 8 * v165) != *(void *)(v157[3] + 8 * v165)) {
              goto LABEL_185;
            }
          }
          int v164 = v163;
LABEL_185:
          int v253 = (void *)*a2;
          int v254 = *(int **)*a2;
          uint64_t v255 = (v253[1] - (void)v254) >> 2;
          uint64_t v256 = (v255 - 1);
          if ((int)v256 >= -1) {
            int v257 = -1;
          }
          else {
            int v257 = v255 - 1;
          }
          int v258 = v257 + 1;
          int v259 = v255 + 1;
          while (1)
          {
            unsigned int v260 = v259 - 2;
            if (v259 - 2 < 0) {
              break;
            }
            --v259;
            if (*(void *)(v253[3] + 8 * v260) != *(void *)(v157[3] + 8 * v260)) {
              goto LABEL_226;
            }
          }
          int v259 = v258;
LABEL_226:
          int v279 = v160 + 1;
          while (1)
          {
            unsigned int v280 = v279 - 2;
            if (v279 - 2 < 0) {
              break;
            }
            --v279;
            if (*(void *)(v158[3] + 8 * v280)) {
              goto LABEL_261;
            }
          }
          int v279 = v163;
LABEL_261:
          int v293 = v255 + 1;
          while (1)
          {
            unsigned int v294 = v293 - 2;
            if (v293 - 2 < 0) {
              break;
            }
            --v293;
            if (*(void *)(v253[3] + 8 * v294)) {
              goto LABEL_450;
            }
          }
          int v293 = v258;
LABEL_450:
          unint64_t v397 = (uint64_t)(v157[1] - *v157) >> 2;
          if (v164 <= v259) {
            int v398 = v259;
          }
          else {
            int v398 = v164;
          }
          if (v164 <= v293) {
            int v164 = v293;
          }
          if (v279 > v259) {
            int v259 = v279;
          }
          if (v397 > v259)
          {
            int v399 = 1;
          }
          else
          {
            int v259 = (uint64_t)(v157[1] - *v157) >> 2;
            int v399 = 4;
          }
          if (v397 > v164)
          {
            int v400 = 2;
          }
          else
          {
            int v164 = v259;
            int v400 = v399;
          }
          if (v397 > v398)
          {
            int v164 = v398;
            int v400 = 3;
          }
          uint64_t v1947 = v256;
          uint64_t v1965 = v161;
          if (!v164) {
            goto LABEL_479;
          }
          unint64_t v401 = *(void *)(v157[3] + 8 * (v164 - 1));
          if (v401 < 0x10) {
            goto LABEL_479;
          }
          switch(v400)
          {
            case 1:
              if (v164 == 2)
              {
                uint64_t v1691 = *v159;
                if (v1691)
                {
                  uint64_t v1692 = 0;
                  uint64_t v1693 = 0;
                  uint64_t v1694 = 0;
                  uint64_t v1695 = v158[19];
                  uint64_t v1696 = v253[19];
                  uint64_t v1697 = v157[19];
                  unint64_t v1698 = v159[1];
                  uint64_t v1699 = (uint64_t *)v158[3];
                  uint64_t v1700 = *v1699;
                  uint64_t v1701 = v1699[1];
                  uint64_t v1702 = (uint64_t *)v253[3];
                  uint64_t v1703 = *v1702;
                  uint64_t v1704 = v1702[1];
                  if (v1698 <= 1) {
                    uint64_t v1705 = 1;
                  }
                  else {
                    uint64_t v1705 = v159[1];
                  }
                  uint64_t v1706 = v1700 - v1701 * v1698;
                  uint64_t v1707 = v1703 - v1704 * v254[1];
                  do
                  {
                    if (v1698)
                    {
                      uint64_t v1708 = 0;
                      uint64_t v1709 = v1696 + 8 * v1693;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1710 = 0;
                          uint64_t v1711 = *(void *)(v1695 + 8 * v1694);
                          unsigned int v1712 = v401 + 1;
                          do
                          {
                            *(void *)(v1697 + v1710) = v1711 - *(void *)(v1709 + v1710);
                            --v1712;
                            v1710 += 8;
                          }
                          while (v1712 > 1);
                        }
                        v1694 += v1701;
                        v1693 += v1704;
                        v1697 += 8 * (int)v401;
                        ++v1708;
                        v1709 += 8 * v1704;
                      }
                      while (v1708 != v1705);
                    }
                    v1694 += v1706;
                    v1693 += v1707;
                    ++v1692;
                  }
                  while (v1692 != v1691);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1077 = *v159;
                if (v1077)
                {
                  uint64_t v1078 = 0;
                  uint64_t v1079 = 0;
                  uint64_t v1080 = v158[19];
                  uint64_t v1081 = v253[19];
                  uint64_t v1082 = v157[19];
                  uint64_t v1083 = *(void *)v158[3];
                  uint64_t v1084 = 8 * *(void *)v253[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1085 = 0;
                      uint64_t v1086 = *(void *)(v1080 + 8 * v1079);
                      unsigned int v1087 = v401 + 1;
                      do
                      {
                        *(void *)(v1082 + v1085) = v1086 - *(void *)(v1081 + v1085);
                        --v1087;
                        v1085 += 8;
                      }
                      while (v1087 > 1);
                    }
                    v1079 += v1083;
                    ++v1078;
                    v1082 += 8 * (int)v401;
                    v1081 += v1084;
                  }
                  while (v1078 != v1077);
                }
              }
              else
              {
                unint64_t v1911 = v157[6];
                if (v1911)
                {
                  unint64_t v1940 = 0;
                  uint64_t v1843 = v253[19];
                  uint64_t v1858 = v158[19];
                  uint64_t v1713 = v157[19];
                  do
                  {
                    uint64_t v1714 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1715 = v158[3];
                      uint64_t v1716 = v161;
                      int v1717 = v1940;
                      do
                      {
                        ldiv_t v1718 = ldiv(v1717, v159[v1716]);
                        int v1717 = v1718.quot;
                        v1714 += *(void *)(v1715 + 8 * v1716--) * v1718.rem;
                      }
                      while (v1716 != -1);
                    }
                    uint64_t v1719 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1720) = 0;
                    }
                    else
                    {
                      uint64_t v1720 = 0;
                      uint64_t v1721 = v253[3];
                      int v1722 = v1940;
                      do
                      {
                        ldiv_t v1723 = ldiv(v1722, v254[v1719]);
                        int v1722 = v1723.quot;
                        v1720 += *(void *)(v1721 + 8 * v1719--) * v1723.rem;
                      }
                      while (v1719 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1724 = 0;
                      uint64_t v1725 = *(void *)(v1858 + 8 * (int)v1714);
                      unsigned int v1726 = v401 + 1;
                      do
                      {
                        *(void *)(v1713 + v1724) = v1725 - *(void *)(v1843 + 8 * (int)v1720 + v1724);
                        --v1726;
                        v1724 += 8;
                      }
                      while (v1726 > 1);
                    }
                    v1713 += 8 * (int)v401;
                    v1940 += (int)v401;
                  }
                  while (v1940 < v1911);
                }
              }
              break;
            case 2:
              if (v164 == 2)
              {
                uint64_t v1727 = *v159;
                if (v1727)
                {
                  uint64_t v1728 = 0;
                  uint64_t v1729 = 0;
                  uint64_t v1730 = 0;
                  uint64_t v1731 = v158[19];
                  uint64_t v1732 = v253[19];
                  uint64_t v1733 = v157[19];
                  unint64_t v1734 = v159[1];
                  unint64_t v1735 = (uint64_t *)v158[3];
                  uint64_t v1736 = *v1735;
                  uint64_t v1737 = v1735[1];
                  uint64_t v1738 = (uint64_t *)v253[3];
                  uint64_t v1739 = *v1738;
                  uint64_t v1740 = v1738[1];
                  if (v1734 <= 1) {
                    uint64_t v1741 = 1;
                  }
                  else {
                    uint64_t v1741 = v159[1];
                  }
                  uint64_t v1742 = v1736 - v1737 * v1734;
                  uint64_t v1743 = v1739 - v1740 * v254[1];
                  do
                  {
                    if (v1734)
                    {
                      uint64_t v1744 = 0;
                      uint64_t v1745 = v1731 + 8 * v1730;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1746 = 0;
                          uint64_t v1747 = *(void *)(v1732 + 8 * v1729);
                          unsigned int v1748 = v401 + 1;
                          do
                          {
                            *(void *)(v1733 + v1746) = *(void *)(v1745 + v1746) - v1747;
                            --v1748;
                            v1746 += 8;
                          }
                          while (v1748 > 1);
                        }
                        v1730 += v1737;
                        v1729 += v1740;
                        v1733 += 8 * (int)v401;
                        ++v1744;
                        v1745 += 8 * v1737;
                      }
                      while (v1744 != v1741);
                    }
                    v1730 += v1742;
                    v1729 += v1743;
                    ++v1728;
                  }
                  while (v1728 != v1727);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v1088 = *v159;
                if (v1088)
                {
                  uint64_t v1089 = 0;
                  uint64_t v1090 = 0;
                  uint64_t v1091 = v158[19];
                  uint64_t v1092 = v253[19];
                  uint64_t v1093 = v157[19];
                  uint64_t v1094 = *(void *)v253[3];
                  uint64_t v1095 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1096 = 0;
                      uint64_t v1097 = *(void *)(v1092 + 8 * v1090);
                      unsigned int v1098 = v401 + 1;
                      do
                      {
                        *(void *)(v1093 + v1096) = *(void *)(v1091 + v1096) - v1097;
                        --v1098;
                        v1096 += 8;
                      }
                      while (v1098 > 1);
                    }
                    v1090 += v1094;
                    ++v1089;
                    v1093 += 8 * (int)v401;
                    v1091 += v1095;
                  }
                  while (v1089 != v1088);
                }
              }
              else
              {
                unint64_t v1912 = v157[6];
                if (v1912)
                {
                  unint64_t v1941 = 0;
                  uint64_t v1844 = v253[19];
                  uint64_t v1859 = v158[19];
                  uint64_t v1749 = v157[19];
                  do
                  {
                    uint64_t v1750 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1751 = v158[3];
                      uint64_t v1752 = v161;
                      int v1753 = v1941;
                      do
                      {
                        ldiv_t v1754 = ldiv(v1753, v159[v1752]);
                        int v1753 = v1754.quot;
                        v1750 += *(void *)(v1751 + 8 * v1752--) * v1754.rem;
                      }
                      while (v1752 != -1);
                    }
                    uint64_t v1755 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1756) = 0;
                    }
                    else
                    {
                      uint64_t v1756 = 0;
                      uint64_t v1757 = v253[3];
                      int v1758 = v1941;
                      do
                      {
                        ldiv_t v1759 = ldiv(v1758, v254[v1755]);
                        int v1758 = v1759.quot;
                        v1756 += *(void *)(v1757 + 8 * v1755--) * v1759.rem;
                      }
                      while (v1755 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1760 = 0;
                      uint64_t v1761 = *(void *)(v1844 + 8 * (int)v1756);
                      unsigned int v1762 = v401 + 1;
                      do
                      {
                        *(void *)(v1749 + v1760) = *(void *)(v1859 + 8 * (int)v1750 + v1760) - v1761;
                        --v1762;
                        v1760 += 8;
                      }
                      while (v1762 > 1);
                    }
                    v1749 += 8 * (int)v401;
                    v1941 += (int)v401;
                  }
                  while (v1941 < v1912);
                }
              }
              break;
            case 3:
              if (v164 == 2)
              {
                uint64_t v1283 = *v159;
                if (v1283)
                {
                  uint64_t v1284 = 0;
                  uint64_t v1285 = 0;
                  uint64_t v1286 = 0;
                  uint64_t v1287 = v158[19];
                  uint64_t v1288 = v253[19];
                  uint64_t v1289 = v157[19];
                  unint64_t v1290 = v159[1];
                  unsigned int v1291 = (uint64_t *)v158[3];
                  uint64_t v1292 = *v1291;
                  uint64_t v1293 = v1291[1];
                  uint64_t v1294 = (uint64_t *)v253[3];
                  uint64_t v1295 = *v1294;
                  uint64_t v1296 = v1294[1];
                  if (v1290 <= 1) {
                    uint64_t v1297 = 1;
                  }
                  else {
                    uint64_t v1297 = v159[1];
                  }
                  uint64_t v1298 = v1292 - v1293 * v1290;
                  uint64_t v1299 = v1295 - v1296 * v254[1];
                  do
                  {
                    if (v1290)
                    {
                      uint64_t v1300 = 0;
                      uint64_t v1301 = v1288 + 8 * v1285;
                      uint64_t v1302 = v1287 + 8 * v1286;
                      do
                      {
                        if ((int)v401 >= 1)
                        {
                          uint64_t v1303 = 0;
                          unsigned int v1304 = v401 + 1;
                          do
                          {
                            *(void *)(v1289 + v1303) = *(void *)(v1302 + v1303) - *(void *)(v1301 + v1303);
                            --v1304;
                            v1303 += 8;
                          }
                          while (v1304 > 1);
                        }
                        v1286 += v1293;
                        v1285 += v1296;
                        v1289 += 8 * (int)v401;
                        ++v1300;
                        v1301 += 8 * v1296;
                        v1302 += 8 * v1293;
                      }
                      while (v1300 != v1297);
                    }
                    v1286 += v1298;
                    v1285 += v1299;
                    ++v1284;
                  }
                  while (v1284 != v1283);
                }
              }
              else if (v164 == 1)
              {
                uint64_t v402 = *v159;
                if (v402)
                {
                  uint64_t v403 = 0;
                  uint64_t v404 = v158[19];
                  uint64_t v405 = v253[19];
                  uint64_t v406 = v157[19];
                  uint64_t v407 = 8 * *(void *)v253[3];
                  uint64_t v408 = 8 * *(void *)v158[3];
                  do
                  {
                    if ((int)v401 >= 1)
                    {
                      uint64_t v409 = 0;
                      unsigned int v410 = v401 + 1;
                      do
                      {
                        *(void *)(v406 + v409) = *(void *)(v404 + v409) - *(void *)(v405 + v409);
                        --v410;
                        v409 += 8;
                      }
                      while (v410 > 1);
                    }
                    ++v403;
                    v406 += 8 * (int)v401;
                    v405 += v407;
                    v404 += v408;
                  }
                  while (v403 != v402);
                }
              }
              else
              {
                unint64_t v1899 = v157[6];
                if (v1899)
                {
                  unint64_t v1928 = 0;
                  uint64_t v1837 = v253[19];
                  uint64_t v1850 = v158[19];
                  uint64_t v1305 = v157[19];
                  do
                  {
                    uint64_t v1306 = 0;
                    if ((v161 & 0x80000000) == 0)
                    {
                      uint64_t v1307 = v158[3];
                      uint64_t v1308 = v161;
                      int v1309 = v1928;
                      do
                      {
                        ldiv_t v1310 = ldiv(v1309, v159[v1308]);
                        int v1309 = v1310.quot;
                        v1306 += *(void *)(v1307 + 8 * v1308--) * v1310.rem;
                      }
                      while (v1308 != -1);
                    }
                    uint64_t v1311 = v1947;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      LODWORD(v1312) = 0;
                    }
                    else
                    {
                      uint64_t v1312 = 0;
                      uint64_t v1313 = v253[3];
                      int v1314 = v1928;
                      do
                      {
                        ldiv_t v1315 = ldiv(v1314, v254[v1311]);
                        int v1314 = v1315.quot;
                        v1312 += *(void *)(v1313 + 8 * v1311--) * v1315.rem;
                      }
                      while (v1311 != -1);
                    }
                    uint64_t v161 = v1965;
                    if ((int)v401 >= 1)
                    {
                      uint64_t v1316 = 0;
                      unsigned int v1317 = v401 + 1;
                      do
                      {
                        *(void *)(v1305 + v1316) = *(void *)(v1850 + 8 * (int)v1306 + v1316)
                                                   - *(void *)(v1837 + 8 * (int)v1312 + v1316);
                        --v1317;
                        v1316 += 8;
                      }
                      while (v1317 > 1);
                    }
                    v1305 += 8 * (int)v401;
                    v1928 += (int)v401;
                  }
                  while (v1928 < v1899);
                }
              }
              break;
            default:
LABEL_479:
              switch(v397)
              {
                case 1uLL:
                  uint64_t v411 = v157[6];
                  if (v411)
                  {
                    ldiv_t v412 = (void *)v158[19];
                    uint64_t v413 = (void *)v253[19];
                    uint64_t v414 = (void *)v157[19];
                    uint64_t v415 = 8 * *(void *)v253[3];
                    uint64_t v416 = 8 * *(void *)v158[3];
                    do
                    {
                      *v414++ = *v412 - *v413;
                      uint64_t v413 = (void *)((char *)v413 + v415);
                      ldiv_t v412 = (void *)((char *)v412 + v416);
                      --v411;
                    }
                    while (v411);
                  }
                  break;
                case 2uLL:
                  uint64_t v822 = *v159;
                  if (v822)
                  {
                    uint64_t v823 = 0;
                    uint64_t v824 = 0;
                    uint64_t v825 = 0;
                    uint64_t v826 = 0;
                    uint64_t v827 = v158[19];
                    uint64_t v828 = v253[19];
                    uint64_t v829 = v157[19];
                    unint64_t v830 = v159[1];
                    uint64_t v831 = (uint64_t *)v158[3];
                    uint64_t v832 = *v831;
                    uint64_t v833 = v831[1];
                    uint64_t v834 = (uint64_t *)v253[3];
                    uint64_t v835 = *v834;
                    uint64_t v836 = v834[1];
                    uint64_t v837 = v835 - v836 * v254[1];
                    if (v830 <= 1) {
                      uint64_t v838 = 1;
                    }
                    else {
                      uint64_t v838 = v159[1];
                    }
                    uint64_t v839 = v832 - v833 * v830;
                    do
                    {
                      if (v830)
                      {
                        uint64_t v840 = v824 + v838;
                        unint64_t v841 = (void *)(v829 + 8 * v824);
                        uint64_t v842 = v838;
                        do
                        {
                          *v841++ = *(void *)(v827 + 8 * v826) - *(void *)(v828 + 8 * v825);
                          v826 += v833;
                          v825 += v836;
                          --v842;
                        }
                        while (v842);
                        uint64_t v824 = v840;
                      }
                      v826 += v839;
                      v825 += v837;
                      ++v823;
                    }
                    while (v823 != v822);
                  }
                  break;
                case 3uLL:
                  uint64_t v843 = *v159;
                  if (v843)
                  {
                    uint64_t v844 = 0;
                    uint64_t v845 = 0;
                    uint64_t v846 = 0;
                    uint64_t v847 = 0;
                    uint64_t v848 = v158[19];
                    uint64_t v849 = v253[19];
                    uint64_t v850 = v157[19];
                    unint64_t v851 = v159[1];
                    unint64_t v852 = (void *)v158[3];
                    uint64_t v853 = v852[1];
                    uint64_t v854 = (void *)v253[3];
                    uint64_t v855 = v854[1];
                    uint64_t v856 = *v854 - v855 * v254[1];
                    if (v851 <= 1) {
                      uint64_t v857 = 1;
                    }
                    else {
                      uint64_t v857 = v159[1];
                    }
                    unint64_t v858 = *v852 - v853 * v851;
                    do
                    {
                      if (v851)
                      {
                        uint64_t v859 = 0;
                        unint64_t v860 = v159[2];
                        uint64_t v861 = v852[2];
                        uint64_t v862 = v854[2];
                        if (v860 <= 1) {
                          uint64_t v863 = 1;
                        }
                        else {
                          uint64_t v863 = v159[2];
                        }
                        uint64_t v864 = v855 - v862 * v254[2];
                        do
                        {
                          uint64_t v865 = v863;
                          if (v860)
                          {
                            do
                            {
                              *(void *)(v850 + 8 * v845++) = *(void *)(v848 + 8 * v847)
                                                             - *(void *)(v849 + 8 * v846);
                              v847 += v861;
                              v846 += v862;
                              --v865;
                            }
                            while (v865);
                          }
                          v847 += v853 - v861 * v860;
                          v846 += v864;
                          ++v859;
                        }
                        while (v859 != v857);
                      }
                      v847 += v858;
                      v846 += v856;
                      ++v844;
                    }
                    while (v844 != v843);
                  }
                  break;
                case 4uLL:
                  uint64_t v1970 = *v159;
                  if (v1970)
                  {
                    uint64_t v866 = 0;
                    uint64_t v867 = 0;
                    uint64_t v868 = 0;
                    uint64_t v869 = 0;
                    uint64_t v870 = v158[19];
                    uint64_t v871 = v253[19];
                    uint64_t v872 = v157[19];
                    unint64_t v873 = v159[1];
                    uint64_t v874 = (void *)v158[3];
                    uint64_t v875 = (void *)v253[3];
                    uint64_t v1863 = v875[1];
                    uint64_t v1878 = v874[1];
                    uint64_t v1920 = *v875 - v1863 * v254[1];
                    int v1952 = v159[1];
                    if (v873 <= 1) {
                      uint64_t v876 = 1;
                    }
                    else {
                      uint64_t v876 = v159[1];
                    }
                    unint64_t v1891 = *v874 - v874[1] * v873;
                    do
                    {
                      if (v1952)
                      {
                        uint64_t v877 = 0;
                        unint64_t v878 = v159[2];
                        uint64_t v879 = v874[2];
                        uint64_t v880 = v875[2];
                        if (v878 <= 1) {
                          uint64_t v881 = 1;
                        }
                        else {
                          uint64_t v881 = v159[2];
                        }
                        uint64_t v882 = v1863 - v880 * v254[2];
                        do
                        {
                          if (v878)
                          {
                            uint64_t v883 = 0;
                            unint64_t v884 = v159[3];
                            uint64_t v885 = v874[3];
                            uint64_t v886 = v875[3];
                            if (v884 <= 1) {
                              uint64_t v887 = 1;
                            }
                            else {
                              uint64_t v887 = v159[3];
                            }
                            uint64_t v888 = v880 - v886 * v254[3];
                            do
                            {
                              uint64_t v889 = v887;
                              if (v884)
                              {
                                do
                                {
                                  *(void *)(v872 + 8 * v867++) = *(void *)(v870 + 8 * v869)
                                                                 - *(void *)(v871 + 8 * v868);
                                  v869 += v885;
                                  v868 += v886;
                                  --v889;
                                }
                                while (v889);
                              }
                              v869 += v879 - v885 * v884;
                              v868 += v888;
                              ++v883;
                            }
                            while (v883 != v881);
                          }
                          v869 += v1878 - v879 * v878;
                          v868 += v882;
                          ++v877;
                        }
                        while (v877 != v876);
                      }
                      v869 += v1891;
                      v868 += v1920;
                      ++v866;
                    }
                    while (v866 != v1970);
                  }
                  break;
                default:
                  uint64_t v810 = v157[6];
                  if (v810)
                  {
                    uint64_t v811 = 0;
                    uint64_t v1890 = v253[19];
                    uint64_t v1919 = v158[19];
                    uint64_t v1877 = v157[19];
                    do
                    {
                      uint64_t v812 = 0;
                      if ((v161 & 0x80000000) == 0)
                      {
                        uint64_t v813 = v158[3];
                        uint64_t v814 = v161;
                        int v815 = v811;
                        do
                        {
                          ldiv_t v816 = ldiv(v815, v159[v814]);
                          int v815 = v816.quot;
                          v812 += *(void *)(v813 + 8 * v814--) * v816.rem;
                        }
                        while (v814 != -1);
                      }
                      uint64_t v817 = v1947;
                      if ((v1947 & 0x80000000) != 0)
                      {
                        LODWORD(v818) = 0;
                      }
                      else
                      {
                        uint64_t v818 = 0;
                        uint64_t v819 = v253[3];
                        int v820 = v811;
                        do
                        {
                          ldiv_t v821 = ldiv(v820, v254[v817]);
                          int v820 = v821.quot;
                          v818 += *(void *)(v819 + 8 * v817--) * v821.rem;
                        }
                        while (v817 != -1);
                      }
                      *(void *)(v1877 + 8 * v811++) = *(void *)(v1919 + 8 * (int)v812)
                                                      - *(void *)(v1890 + 8 * (int)v818);
                      uint64_t v161 = v1965;
                    }
                    while (v811 != v810);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          **(float **)(*(void *)a3 + 152) = **(float **)(*a1 + 152) - **(float **)(*a2 + 152);
          return;
        case 1:
          int v195 = *(_DWORD *)(*a2 + 160);
          if (v195 >= 1)
          {
            float v196 = **(float **)(*a1 + 152);
            int v197 = *(float **)(*(void *)a3 + 152);
            int v198 = *(float **)(*a2 + 152);
            unsigned int v199 = v195 + 1;
            do
            {
              float v200 = *v198++;
              *v197++ = v196 - v200;
              --v199;
            }
            while (v199 > 1);
          }
          return;
        case 2:
          int v201 = *(_DWORD *)(*a1 + 160);
          if (v201 >= 1)
          {
            float v202 = **(float **)(*a2 + 152);
            uint64_t v203 = *(float **)(*(void *)a3 + 152);
            int v204 = *(float **)(*a1 + 152);
            unsigned int v205 = v201 + 1;
            do
            {
              float v206 = *v204++;
              *v203++ = v206 - v202;
              --v205;
            }
            while (v205 > 1);
          }
          return;
        case 3:
          int v207 = *(_DWORD *)(*(void *)a3 + 48);
          if (v207 >= 1)
          {
            uint64_t v208 = *(float **)(*(void *)a3 + 152);
            int v209 = *(float **)(*a2 + 152);
            uint64_t v210 = *(float **)(*a1 + 152);
            unsigned int v211 = v207 + 1;
            do
            {
              float v212 = *v210++;
              float v213 = v212;
              float v214 = *v209++;
              *v208++ = v213 - v214;
              --v211;
            }
            while (v211 > 1);
          }
          return;
        default:
          uint64_t v186 = *(void **)a3;
          uint64_t v187 = (void *)*a1;
          uint64_t v188 = *(int **)*a1;
          uint64_t v189 = (v187[1] - (void)v188) >> 2;
          uint64_t v190 = (v189 - 1);
          if ((int)v190 >= -1) {
            int v191 = -1;
          }
          else {
            int v191 = v189 - 1;
          }
          int v192 = v191 + 1;
          int v193 = v189 + 1;
          while (1)
          {
            unsigned int v194 = v193 - 2;
            if (v193 - 2 < 0) {
              break;
            }
            --v193;
            if (*(void *)(v187[3] + 8 * v194) != *(void *)(v186[3] + 8 * v194)) {
              goto LABEL_193;
            }
          }
          int v193 = v192;
LABEL_193:
          int v261 = (void *)*a2;
          int v262 = *(int **)*a2;
          uint64_t v263 = (v261[1] - (void)v262) >> 2;
          uint64_t v264 = (v263 - 1);
          if ((int)v264 >= -1) {
            int v265 = -1;
          }
          else {
            int v265 = v263 - 1;
          }
          int v266 = v265 + 1;
          int v267 = v263 + 1;
          while (1)
          {
            unsigned int v268 = v267 - 2;
            if (v267 - 2 < 0) {
              break;
            }
            --v267;
            if (*(void *)(v261[3] + 8 * v268) != *(void *)(v186[3] + 8 * v268)) {
              goto LABEL_231;
            }
          }
          int v267 = v266;
LABEL_231:
          int v281 = v189 + 1;
          while (1)
          {
            unsigned int v282 = v281 - 2;
            if (v281 - 2 < 0) {
              break;
            }
            --v281;
            if (*(void *)(v187[3] + 8 * v282)) {
              goto LABEL_266;
            }
          }
          int v281 = v192;
LABEL_266:
          int v295 = v263 + 1;
          while (1)
          {
            unsigned int v296 = v295 - 2;
            if (v295 - 2 < 0) {
              break;
            }
            --v295;
            if (*(void *)(v261[3] + 8 * v296)) {
              goto LABEL_485;
            }
          }
          int v295 = v266;
LABEL_485:
          unint64_t v417 = (uint64_t)(v186[1] - *v186) >> 2;
          if (v193 <= v267) {
            int v418 = v267;
          }
          else {
            int v418 = v193;
          }
          if (v193 <= v295) {
            int v193 = v295;
          }
          if (v281 > v267) {
            int v267 = v281;
          }
          if (v417 > v267)
          {
            int v419 = 1;
          }
          else
          {
            int v267 = (uint64_t)(v186[1] - *v186) >> 2;
            int v419 = 4;
          }
          if (v417 > v193)
          {
            int v420 = 2;
          }
          else
          {
            int v193 = v267;
            int v420 = v419;
          }
          if (v417 > v418)
          {
            int v193 = v418;
            int v420 = 3;
          }
          uint64_t v1948 = v264;
          uint64_t v1966 = v190;
          if (!v193) {
            goto LABEL_514;
          }
          unint64_t v421 = *(void *)(v186[3] + 8 * (v193 - 1));
          if (v421 < 0x10) {
            goto LABEL_514;
          }
          switch(v420)
          {
            case 1:
              if (v193 == 2)
              {
                uint64_t v1763 = *v188;
                if (v1763)
                {
                  uint64_t v1764 = 0;
                  uint64_t v1765 = 0;
                  uint64_t v1766 = 0;
                  uint64_t v1767 = v187[19];
                  uint64_t v1768 = v261[19];
                  uint64_t v1769 = v186[19];
                  unint64_t v1770 = v188[1];
                  uint64_t v1771 = (uint64_t *)v187[3];
                  uint64_t v1772 = *v1771;
                  uint64_t v1773 = v1771[1];
                  unsigned int v1774 = (uint64_t *)v261[3];
                  uint64_t v1775 = *v1774;
                  uint64_t v1776 = v1774[1];
                  if (v1770 <= 1) {
                    uint64_t v1777 = 1;
                  }
                  else {
                    uint64_t v1777 = v188[1];
                  }
                  uint64_t v1778 = v1772 - v1773 * v1770;
                  uint64_t v1779 = v1775 - v1776 * v262[1];
                  do
                  {
                    if (v1770)
                    {
                      uint64_t v1780 = 0;
                      uint64_t v1781 = v1768 + 4 * v1765;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1782 = 0;
                          float v1783 = *(float *)(v1767 + 4 * v1766);
                          unsigned int v1784 = v421 + 1;
                          do
                          {
                            *(float *)(v1769 + v1782) = v1783 - *(float *)(v1781 + v1782);
                            --v1784;
                            v1782 += 4;
                          }
                          while (v1784 > 1);
                        }
                        v1766 += v1773;
                        v1765 += v1776;
                        v1769 += 4 * (int)v421;
                        ++v1780;
                        v1781 += 4 * v1776;
                      }
                      while (v1780 != v1777);
                    }
                    v1766 += v1778;
                    v1765 += v1779;
                    ++v1764;
                  }
                  while (v1764 != v1763);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1099 = *v188;
                if (v1099)
                {
                  uint64_t v1100 = 0;
                  uint64_t v1101 = 0;
                  uint64_t v1102 = v187[19];
                  uint64_t v1103 = v261[19];
                  uint64_t v1104 = v186[19];
                  uint64_t v1105 = *(void *)v187[3];
                  uint64_t v1106 = 4 * *(void *)v261[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1107 = 0;
                      float v1108 = *(float *)(v1102 + 4 * v1101);
                      unsigned int v1109 = v421 + 1;
                      do
                      {
                        *(float *)(v1104 + v1107) = v1108 - *(float *)(v1103 + v1107);
                        --v1109;
                        v1107 += 4;
                      }
                      while (v1109 > 1);
                    }
                    v1101 += v1105;
                    ++v1100;
                    v1104 += 4 * (int)v421;
                    v1103 += v1106;
                  }
                  while (v1100 != v1099);
                }
              }
              else
              {
                unint64_t v1913 = v186[6];
                if (v1913)
                {
                  unint64_t v1942 = 0;
                  uint64_t v1845 = v261[19];
                  uint64_t v1860 = v187[19];
                  uint64_t v1785 = v186[19];
                  do
                  {
                    uint64_t v1786 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1787 = v187[3];
                      uint64_t v1788 = v190;
                      int v1789 = v1942;
                      do
                      {
                        ldiv_t v1790 = ldiv(v1789, v188[v1788]);
                        int v1789 = v1790.quot;
                        v1786 += *(void *)(v1787 + 8 * v1788--) * v1790.rem;
                      }
                      while (v1788 != -1);
                    }
                    uint64_t v1791 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1792) = 0;
                    }
                    else
                    {
                      uint64_t v1792 = 0;
                      uint64_t v1793 = v261[3];
                      int v1794 = v1942;
                      do
                      {
                        ldiv_t v1795 = ldiv(v1794, v262[v1791]);
                        int v1794 = v1795.quot;
                        v1792 += *(void *)(v1793 + 8 * v1791--) * v1795.rem;
                      }
                      while (v1791 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1796 = 0;
                      float v1797 = *(float *)(v1860 + 4 * (int)v1786);
                      unsigned int v1798 = v421 + 1;
                      do
                      {
                        *(float *)(v1785 + v1796) = v1797 - *(float *)(v1845 + 4 * (int)v1792 + v1796);
                        --v1798;
                        v1796 += 4;
                      }
                      while (v1798 > 1);
                    }
                    v1785 += 4 * (int)v421;
                    v1942 += (int)v421;
                  }
                  while (v1942 < v1913);
                }
              }
              break;
            case 2:
              if (v193 == 2)
              {
                uint64_t v1799 = *v188;
                if (v1799)
                {
                  uint64_t v1800 = 0;
                  uint64_t v1801 = 0;
                  uint64_t v1802 = 0;
                  uint64_t v1803 = v187[19];
                  uint64_t v1804 = v261[19];
                  uint64_t v1805 = v186[19];
                  unint64_t v1806 = v188[1];
                  unint64_t v1807 = (uint64_t *)v187[3];
                  uint64_t v1808 = *v1807;
                  uint64_t v1809 = v1807[1];
                  uint64_t v1810 = (uint64_t *)v261[3];
                  uint64_t v1811 = *v1810;
                  uint64_t v1812 = v1810[1];
                  if (v1806 <= 1) {
                    uint64_t v1813 = 1;
                  }
                  else {
                    uint64_t v1813 = v188[1];
                  }
                  uint64_t v1814 = v1808 - v1809 * v1806;
                  uint64_t v1815 = v1811 - v1812 * v262[1];
                  do
                  {
                    if (v1806)
                    {
                      uint64_t v1816 = 0;
                      uint64_t v1817 = v1803 + 4 * v1802;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1818 = 0;
                          float v1819 = *(float *)(v1804 + 4 * v1801);
                          unsigned int v1820 = v421 + 1;
                          do
                          {
                            *(float *)(v1805 + v1818) = *(float *)(v1817 + v1818) - v1819;
                            --v1820;
                            v1818 += 4;
                          }
                          while (v1820 > 1);
                        }
                        v1802 += v1809;
                        v1801 += v1812;
                        v1805 += 4 * (int)v421;
                        ++v1816;
                        v1817 += 4 * v1809;
                      }
                      while (v1816 != v1813);
                    }
                    v1802 += v1814;
                    v1801 += v1815;
                    ++v1800;
                  }
                  while (v1800 != v1799);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v1110 = *v188;
                if (v1110)
                {
                  uint64_t v1111 = 0;
                  uint64_t v1112 = 0;
                  uint64_t v1113 = v187[19];
                  uint64_t v1114 = v261[19];
                  uint64_t v1115 = v186[19];
                  uint64_t v1116 = *(void *)v261[3];
                  uint64_t v1117 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1118 = 0;
                      float v1119 = *(float *)(v1114 + 4 * v1112);
                      unsigned int v1120 = v421 + 1;
                      do
                      {
                        *(float *)(v1115 + v1118) = *(float *)(v1113 + v1118) - v1119;
                        --v1120;
                        v1118 += 4;
                      }
                      while (v1120 > 1);
                    }
                    v1112 += v1116;
                    ++v1111;
                    v1115 += 4 * (int)v421;
                    v1113 += v1117;
                  }
                  while (v1111 != v1110);
                }
              }
              else
              {
                unint64_t v1914 = v186[6];
                if (v1914)
                {
                  unint64_t v1943 = 0;
                  uint64_t v1846 = v261[19];
                  uint64_t v1861 = v187[19];
                  uint64_t v1821 = v186[19];
                  do
                  {
                    uint64_t v1822 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1823 = v187[3];
                      uint64_t v1824 = v190;
                      int v1825 = v1943;
                      do
                      {
                        ldiv_t v1826 = ldiv(v1825, v188[v1824]);
                        int v1825 = v1826.quot;
                        v1822 += *(void *)(v1823 + 8 * v1824--) * v1826.rem;
                      }
                      while (v1824 != -1);
                    }
                    uint64_t v1827 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1828) = 0;
                    }
                    else
                    {
                      uint64_t v1828 = 0;
                      uint64_t v1829 = v261[3];
                      int v1830 = v1943;
                      do
                      {
                        ldiv_t v1831 = ldiv(v1830, v262[v1827]);
                        int v1830 = v1831.quot;
                        v1828 += *(void *)(v1829 + 8 * v1827--) * v1831.rem;
                      }
                      while (v1827 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1832 = 0;
                      float v1833 = *(float *)(v1846 + 4 * (int)v1828);
                      unsigned int v1834 = v421 + 1;
                      do
                      {
                        *(float *)(v1821 + v1832) = *(float *)(v1861 + 4 * (int)v1822 + v1832) - v1833;
                        --v1834;
                        v1832 += 4;
                      }
                      while (v1834 > 1);
                    }
                    v1821 += 4 * (int)v421;
                    v1943 += (int)v421;
                  }
                  while (v1943 < v1914);
                }
              }
              break;
            case 3:
              if (v193 == 2)
              {
                uint64_t v1318 = *v188;
                if (v1318)
                {
                  uint64_t v1319 = 0;
                  uint64_t v1320 = 0;
                  uint64_t v1321 = 0;
                  uint64_t v1322 = v187[19];
                  uint64_t v1323 = v261[19];
                  uint64_t v1324 = v186[19];
                  unint64_t v1325 = v188[1];
                  int v1326 = (uint64_t *)v187[3];
                  uint64_t v1327 = *v1326;
                  uint64_t v1328 = v1326[1];
                  uint64_t v1329 = (uint64_t *)v261[3];
                  uint64_t v1330 = *v1329;
                  uint64_t v1331 = v1329[1];
                  if (v1325 <= 1) {
                    uint64_t v1332 = 1;
                  }
                  else {
                    uint64_t v1332 = v188[1];
                  }
                  uint64_t v1333 = v1327 - v1328 * v1325;
                  uint64_t v1334 = v1330 - v1331 * v262[1];
                  do
                  {
                    if (v1325)
                    {
                      uint64_t v1335 = 0;
                      uint64_t v1336 = v1323 + 4 * v1320;
                      uint64_t v1337 = v1322 + 4 * v1321;
                      do
                      {
                        if ((int)v421 >= 1)
                        {
                          uint64_t v1338 = 0;
                          unsigned int v1339 = v421 + 1;
                          do
                          {
                            *(float *)(v1324 + v1338) = *(float *)(v1337 + v1338) - *(float *)(v1336 + v1338);
                            --v1339;
                            v1338 += 4;
                          }
                          while (v1339 > 1);
                        }
                        v1321 += v1328;
                        v1320 += v1331;
                        v1324 += 4 * (int)v421;
                        ++v1335;
                        v1336 += 4 * v1331;
                        v1337 += 4 * v1328;
                      }
                      while (v1335 != v1332);
                    }
                    v1321 += v1333;
                    v1320 += v1334;
                    ++v1319;
                  }
                  while (v1319 != v1318);
                }
              }
              else if (v193 == 1)
              {
                uint64_t v422 = *v188;
                if (v422)
                {
                  uint64_t v423 = 0;
                  uint64_t v424 = v187[19];
                  uint64_t v425 = v261[19];
                  uint64_t v426 = v186[19];
                  uint64_t v427 = 4 * *(void *)v261[3];
                  uint64_t v428 = 4 * *(void *)v187[3];
                  do
                  {
                    if ((int)v421 >= 1)
                    {
                      uint64_t v429 = 0;
                      unsigned int v430 = v421 + 1;
                      do
                      {
                        *(float *)(v426 + v429) = *(float *)(v424 + v429) - *(float *)(v425 + v429);
                        --v430;
                        v429 += 4;
                      }
                      while (v430 > 1);
                    }
                    ++v423;
                    v426 += 4 * (int)v421;
                    v425 += v427;
                    v424 += v428;
                  }
                  while (v423 != v422);
                }
              }
              else
              {
                unint64_t v1900 = v186[6];
                if (v1900)
                {
                  unint64_t v1929 = 0;
                  uint64_t v1838 = v261[19];
                  uint64_t v1851 = v187[19];
                  uint64_t v1340 = v186[19];
                  do
                  {
                    uint64_t v1341 = 0;
                    if ((v190 & 0x80000000) == 0)
                    {
                      uint64_t v1342 = v187[3];
                      uint64_t v1343 = v190;
                      int v1344 = v1929;
                      do
                      {
                        ldiv_t v1345 = ldiv(v1344, v188[v1343]);
                        int v1344 = v1345.quot;
                        v1341 += *(void *)(v1342 + 8 * v1343--) * v1345.rem;
                      }
                      while (v1343 != -1);
                    }
                    uint64_t v1346 = v1948;
                    if ((v1948 & 0x80000000) != 0)
                    {
                      LODWORD(v1347) = 0;
                    }
                    else
                    {
                      uint64_t v1347 = 0;
                      uint64_t v1348 = v261[3];
                      int v1349 = v1929;
                      do
                      {
                        ldiv_t v1350 = ldiv(v1349, v262[v1346]);
                        int v1349 = v1350.quot;
                        v1347 += *(void *)(v1348 + 8 * v1346--) * v1350.rem;
                      }
                      while (v1346 != -1);
                    }
                    uint64_t v190 = v1966;
                    if ((int)v421 >= 1)
                    {
                      uint64_t v1351 = 0;
                      unsigned int v1352 = v421 + 1;
                      do
                      {
                        *(float *)(v1340 + v1351) = *(float *)(v1851 + 4 * (int)v1341 + v1351)
                                                  - *(float *)(v1838 + 4 * (int)v1347 + v1351);
                        --v1352;
                        v1351 += 4;
                      }
                      while (v1352 > 1);
                    }
                    v1340 += 4 * (int)v421;
                    v1929 += (int)v421;
                  }
                  while (v1929 < v1900);
                }
              }
              break;
            default:
LABEL_514:
              switch(v417)
              {
                case 1uLL:
                  uint64_t v431 = v186[6];
                  if (v431)
                  {
                    int v432 = (float *)v187[19];
                    uint64_t v433 = (float *)v261[19];
                    uint64_t v434 = (float *)v186[19];
                    uint64_t v435 = 4 * *(void *)v261[3];
                    uint64_t v436 = 4 * *(void *)v187[3];
                    do
                    {
                      *v434++ = *v432 - *v433;
                      uint64_t v433 = (float *)((char *)v433 + v435);
                      int v432 = (float *)((char *)v432 + v436);
                      --v431;
                    }
                    while (v431);
                  }
                  break;
                case 2uLL:
                  uint64_t v902 = *v188;
                  if (v902)
                  {
                    uint64_t v903 = 0;
                    uint64_t v904 = 0;
                    uint64_t v905 = 0;
                    uint64_t v906 = 0;
                    uint64_t v907 = v187[19];
                    uint64_t v908 = v261[19];
                    uint64_t v909 = v186[19];
                    unint64_t v910 = v188[1];
                    uint64_t v911 = (uint64_t *)v187[3];
                    uint64_t v912 = *v911;
                    uint64_t v913 = v911[1];
                    uint64_t v914 = (uint64_t *)v261[3];
                    uint64_t v915 = *v914;
                    uint64_t v916 = v914[1];
                    uint64_t v917 = v915 - v916 * v262[1];
                    if (v910 <= 1) {
                      uint64_t v918 = 1;
                    }
                    else {
                      uint64_t v918 = v188[1];
                    }
                    uint64_t v919 = v912 - v913 * v910;
                    do
                    {
                      if (v910)
                      {
                        uint64_t v920 = v904 + v918;
                        uint64_t v921 = (float *)(v909 + 4 * v904);
                        uint64_t v922 = v918;
                        do
                        {
                          *v921++ = *(float *)(v907 + 4 * v906) - *(float *)(v908 + 4 * v905);
                          v906 += v913;
                          v905 += v916;
                          --v922;
                        }
                        while (v922);
                        uint64_t v904 = v920;
                      }
                      v906 += v919;
                      v905 += v917;
                      ++v903;
                    }
                    while (v903 != v902);
                  }
                  break;
                case 3uLL:
                  uint64_t v923 = *v188;
                  if (v923)
                  {
                    uint64_t v924 = 0;
                    uint64_t v925 = 0;
                    uint64_t v926 = 0;
                    uint64_t v927 = 0;
                    uint64_t v928 = v187[19];
                    uint64_t v929 = v261[19];
                    uint64_t v930 = v186[19];
                    unint64_t v931 = v188[1];
                    vDSP_Length v932 = (void *)v187[3];
                    uint64_t v933 = v932[1];
                    unint64_t v934 = (void *)v261[3];
                    uint64_t v935 = v934[1];
                    uint64_t v936 = *v934 - v935 * v262[1];
                    if (v931 <= 1) {
                      uint64_t v937 = 1;
                    }
                    else {
                      uint64_t v937 = v188[1];
                    }
                    unint64_t v938 = *v932 - v933 * v931;
                    do
                    {
                      if (v931)
                      {
                        uint64_t v939 = 0;
                        unint64_t v940 = v188[2];
                        uint64_t v941 = v932[2];
                        uint64_t v942 = v934[2];
                        if (v940 <= 1) {
                          uint64_t v943 = 1;
                        }
                        else {
                          uint64_t v943 = v188[2];
                        }
                        uint64_t v944 = v935 - v942 * v262[2];
                        do
                        {
                          uint64_t v945 = v943;
                          if (v940)
                          {
                            do
                            {
                              *(float *)(v930 + 4 * v925++) = *(float *)(v928 + 4 * v927) - *(float *)(v929 + 4 * v926);
                              v927 += v941;
                              v926 += v942;
                              --v945;
                            }
                            while (v945);
                          }
                          v927 += v933 - v941 * v940;
                          v926 += v944;
                          ++v939;
                        }
                        while (v939 != v937);
                      }
                      v927 += v938;
                      v926 += v936;
                      ++v924;
                    }
                    while (v924 != v923);
                  }
                  break;
                case 4uLL:
                  uint64_t v1971 = *v188;
                  if (v1971)
                  {
                    uint64_t v946 = 0;
                    uint64_t v947 = 0;
                    uint64_t v948 = 0;
                    uint64_t v949 = 0;
                    uint64_t v950 = v187[19];
                    uint64_t v951 = v261[19];
                    uint64_t v952 = v186[19];
                    unint64_t v953 = v188[1];
                    uint64_t v954 = (void *)v187[3];
                    uint64_t v955 = (void *)v261[3];
                    uint64_t v1893 = v955[1];
                    uint64_t v1922 = v954[1];
                    uint64_t v1953 = *v955 - v1893 * v262[1];
                    if (v953 <= 1) {
                      uint64_t v956 = 1;
                    }
                    else {
                      uint64_t v956 = v188[1];
                    }
                    unint64_t v957 = *v954 - v954[1] * v953;
                    do
                    {
                      if (v953)
                      {
                        uint64_t v958 = 0;
                        unint64_t v959 = v188[2];
                        uint64_t v960 = v954[2];
                        uint64_t v961 = v955[2];
                        if (v959 <= 1) {
                          uint64_t v962 = 1;
                        }
                        else {
                          uint64_t v962 = v188[2];
                        }
                        uint64_t v963 = v1893 - v961 * v262[2];
                        do
                        {
                          if (v959)
                          {
                            uint64_t v964 = 0;
                            unint64_t v965 = v188[3];
                            uint64_t v966 = v954[3];
                            uint64_t v967 = v955[3];
                            if (v965 <= 1) {
                              uint64_t v968 = 1;
                            }
                            else {
                              uint64_t v968 = v188[3];
                            }
                            uint64_t v969 = v961 - v967 * v262[3];
                            do
                            {
                              uint64_t v970 = v968;
                              if (v965)
                              {
                                do
                                {
                                  *(float *)(v952 + 4 * v947++) = *(float *)(v950 + 4 * v949)
                                                                - *(float *)(v951 + 4 * v948);
                                  v949 += v966;
                                  v948 += v967;
                                  --v970;
                                }
                                while (v970);
                              }
                              v949 += v960 - v966 * v965;
                              v948 += v969;
                              ++v964;
                            }
                            while (v964 != v962);
                          }
                          v949 += v1922 - v960 * v959;
                          v948 += v963;
                          ++v958;
                        }
                        while (v958 != v956);
                      }
                      v949 += v957;
                      v948 += v1953;
                      ++v946;
                    }
                    while (v946 != v1971);
                  }
                  break;
                default:
                  uint64_t v890 = v186[6];
                  if (v890)
                  {
                    uint64_t v891 = 0;
                    uint64_t v1892 = v261[19];
                    uint64_t v1921 = v187[19];
                    uint64_t v1879 = v186[19];
                    do
                    {
                      uint64_t v892 = 0;
                      if ((v190 & 0x80000000) == 0)
                      {
                        uint64_t v893 = v187[3];
                        uint64_t v894 = v190;
                        int v895 = v891;
                        do
                        {
                          ldiv_t v896 = ldiv(v895, v188[v894]);
                          int v895 = v896.quot;
                          v892 += *(void *)(v893 + 8 * v894--) * v896.rem;
                        }
                        while (v894 != -1);
                      }
                      uint64_t v897 = v1948;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        LODWORD(v898) = 0;
                      }
                      else
                      {
                        uint64_t v898 = 0;
                        uint64_t v899 = v261[3];
                        int v900 = v891;
                        do
                        {
                          ldiv_t v901 = ldiv(v900, v262[v897]);
                          int v900 = v901.quot;
                          v898 += *(void *)(v899 + 8 * v897--) * v901.rem;
                        }
                        while (v897 != -1);
                      }
                      *(float *)(v1879 + 4 * v891++) = *(float *)(v1921 + 4 * (int)v892)
                                                     - *(float *)(v1892 + 4 * (int)v898);
                      uint64_t v190 = v1966;
                    }
                    while (v891 != v890);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    default:
      return;
  }
}

void mlx::core::Tan::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tan::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvtanf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Tan::eval(a1, a2, a3);
  }
}

void mlx::core::Tanh::eval_cpu(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    mlx::core::Tanh::eval_cpu();
  }
  if (*(_DWORD *)(*(void *)a3 + 56) == 6 && (*(unsigned char *)(*(void *)v3 + 168) & 1) != 0)
  {
    int v5 = *(const float **)(*(void *)v3 + 152);
    int v6 = *(void *)(*(void *)v3 + 160);
    vvtanhf(*(float **)(*(void *)a3 + 152), v5, &v6);
  }
  else
  {
    mlx::core::Tanh::eval(a1, a2, a3);
  }
}

void *mlx::core::Abs::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Abs", 3);
}

uint64_t mlx::core::Abs::is_equivalent()
{
  return 1;
}

void mlx::core::Abs::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F88FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Abs::~Abs(mlx::core::Abs *this)
{
}

void *mlx::core::Add::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Add", 3);
}

uint64_t mlx::core::Add::is_equivalent()
{
  return 1;
}

void mlx::core::Add::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F890DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Add::~Add(mlx::core::Add *this)
{
}

void *mlx::core::Arange::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Arange", 6);
}

void mlx::core::Arange::~Arange(mlx::core::Arange *this)
{
}

void *mlx::core::ArcCos::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcCos", 6);
}

uint64_t mlx::core::ArcCos::is_equivalent()
{
  return 1;
}

void mlx::core::ArcCos::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcCos::~ArcCos(mlx::core::ArcCos *this)
{
}

void *mlx::core::ArcCosh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcCosh", 7);
}

uint64_t mlx::core::ArcCosh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcCosh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcCosh::~ArcCosh(mlx::core::ArcCosh *this)
{
}

void *mlx::core::ArcSin::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcSin", 6);
}

uint64_t mlx::core::ArcSin::is_equivalent()
{
  return 1;
}

void mlx::core::ArcSin::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F894BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcSin::~ArcSin(mlx::core::ArcSin *this)
{
}

void *mlx::core::ArcSinh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcSinh", 7);
}

uint64_t mlx::core::ArcSinh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcSinh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F895F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcSinh::~ArcSinh(mlx::core::ArcSinh *this)
{
}

void *mlx::core::ArcTan::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTan", 6);
}

uint64_t mlx::core::ArcTan::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTan::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan::~ArcTan(mlx::core::ArcTan *this)
{
}

void *mlx::core::ArcTan2::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTan2", 7);
}

uint64_t mlx::core::ArcTan2::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTan2::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTan2::~ArcTan2(mlx::core::ArcTan2 *this)
{
}

void *mlx::core::ArcTanh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArcTanh", 7);
}

uint64_t mlx::core::ArcTanh::is_equivalent()
{
  return 1;
}

void mlx::core::ArcTanh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F899AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArcTanh::~ArcTanh(mlx::core::ArcTanh *this)
{
}

void *mlx::core::ArgPartition::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgPartition", 12);
}

void mlx::core::ArgPartition::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArgPartition::~ArgPartition(mlx::core::ArgPartition *this)
{
}

void *mlx::core::ArgReduce::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgReduce", 9);
}

void mlx::core::ArgReduce::~ArgReduce(mlx::core::ArgReduce *this)
{
}

void *mlx::core::ArgSort::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ArgSort", 7);
}

void mlx::core::ArgSort::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::~ArgSort(mlx::core::ArgSort *this)
{
}

void *mlx::core::AsType::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AsType", 6);
}

void mlx::core::AsType::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F89D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::AsType::~AsType(mlx::core::AsType *this)
{
}

void *mlx::core::AsStrided::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AsStrided", 9);
}

void mlx::core::AsStrided::~AsStrided(mlx::core::AsStrided *this)
{
  *(void *)this = &unk_2706355F0;
  v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_2706355F0;
  v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::BlockMaskedMM::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BlockMaskedMM", 13);
}

void mlx::core::BlockMaskedMM::~BlockMaskedMM(mlx::core::BlockMaskedMM *this)
{
}

void *mlx::core::GatherMM::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"GatherMM", 8);
}

uint64_t mlx::core::GatherMM::is_equivalent()
{
  return 1;
}

void mlx::core::GatherMM::~GatherMM(mlx::core::GatherMM *this)
{
}

void *mlx::core::Broadcast::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Broadcast", 9);
}

void mlx::core::Broadcast::~Broadcast(mlx::core::Broadcast *this)
{
  *(void *)this = &unk_270635788;
  v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270635788;
  v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Ceil::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ceil", 4);
}

uint64_t mlx::core::Ceil::is_equivalent()
{
  return 1;
}

void mlx::core::Ceil::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Ceil::~Ceil(mlx::core::Ceil *this)
{
}

void *mlx::core::Concatenate::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Concatenate", 11);
}

void mlx::core::Concatenate::~Concatenate(mlx::core::Concatenate *this)
{
}

void *mlx::core::Copy::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Copy", 4);
}

uint64_t mlx::core::Copy::is_equivalent()
{
  return 1;
}

void mlx::core::Copy::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Copy::~Copy(mlx::core::Copy *this)
{
}

void *mlx::core::Cos::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cos", 3);
}

uint64_t mlx::core::Cos::is_equivalent()
{
  return 1;
}

void mlx::core::Cos::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Cos::~Cos(mlx::core::Cos *this)
{
}

void *mlx::core::Cosh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cosh", 4);
}

uint64_t mlx::core::Cosh::is_equivalent()
{
  return 1;
}

void mlx::core::Cosh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Cosh::~Cosh(mlx::core::Cosh *this)
{
}

void *mlx::core::CustomVJP::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"CustomVJP", 9);
}

void mlx::core::CustomVJP::~CustomVJP(mlx::core::CustomVJP *this)
{
  *(void *)this = &unk_270635AB8;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 3);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270635AB8;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__value_func[abi:ne180100]((void *)this + 3);
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Depends::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Depends", 7);
}

void mlx::core::Depends::~Depends(mlx::core::Depends *this)
{
}

void *mlx::core::Divide::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Divide", 6);
}

uint64_t mlx::core::Divide::is_equivalent()
{
  return 1;
}

void mlx::core::Divide::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Divide::~Divide(mlx::core::Divide *this)
{
}

void *mlx::core::DivMod::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"DivMod", 6);
}

uint64_t mlx::core::DivMod::is_equivalent()
{
  return 1;
}

void mlx::core::DivMod::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = **a1;
  memset(v9, 0, sizeof(v9));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
  uint64_t v5 = **a1;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v6 = operator new(0x30uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 6;
  uint64_t v7 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)v9, (uint64_t)&v12, v6);
  do
  {
    uint64_t v8 = (void *)v9[v7 + 3];
    if (v8)
    {
      v11[v7] = v8;
      operator delete(v8);
    }
    v7 -= 3;
  }
  while (v7 != -6);
}

void sub_256F8A860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v20 = 0;
  while (1)
  {
    int v21 = *(void **)((char *)&a15 + v20);
    if (v21)
    {
      *(uint64_t *)((char *)&a16 + v20) = (uint64_t)v21;
      operator delete(v21);
    }
    v20 -= 24;
    if (v20 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void mlx::core::DivMod::~DivMod(mlx::core::DivMod *this)
{
}

void *mlx::core::Select::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Select", 6);
}

uint64_t mlx::core::Select::is_equivalent()
{
  return 1;
}

void mlx::core::Select::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8A9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Select::~Select(mlx::core::Select *this)
{
}

void *mlx::core::Remainder::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Remainder", 9);
}

uint64_t mlx::core::Remainder::is_equivalent()
{
  return 1;
}

void mlx::core::Remainder::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8AB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Remainder::~Remainder(mlx::core::Remainder *this)
{
}

void *mlx::core::Equal::print(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 20)) {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NaNEqual", 8);
  }
  else {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Equal", 5);
  }
}

uint64_t mlx::core::Equal::is_equivalent()
{
  return 1;
}

void mlx::core::Equal::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8AC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Equal::~Equal(mlx::core::Equal *this)
{
}

void *mlx::core::Erf::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Erf", 3);
}

uint64_t mlx::core::Erf::is_equivalent()
{
  return 1;
}

void mlx::core::Erf::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8ADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Erf::~Erf(mlx::core::Erf *this)
{
}

void *mlx::core::ErfInv::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ErfInv", 6);
}

uint64_t mlx::core::ErfInv::is_equivalent()
{
  return 1;
}

void mlx::core::ErfInv::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::ErfInv::~ErfInv(mlx::core::ErfInv *this)
{
}

void *mlx::core::Exp::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Exp", 3);
}

uint64_t mlx::core::Exp::is_equivalent()
{
  return 1;
}

void mlx::core::Exp::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Exp::~Exp(mlx::core::Exp *this)
{
}

void *mlx::core::Expm1::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Expm1", 5);
}

void mlx::core::Expm1::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Expm1::~Expm1(mlx::core::Expm1 *this)
{
}

void *mlx::core::Floor::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Floor", 5);
}

uint64_t mlx::core::Floor::is_equivalent()
{
  return 1;
}

void mlx::core::Floor::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Floor::~Floor(mlx::core::Floor *this)
{
}

void *mlx::core::Full::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Full", 4);
}

uint64_t mlx::core::Full::is_equivalent()
{
  return 1;
}

void mlx::core::Full::~Full(mlx::core::Full *this)
{
}

void *mlx::core::Gather::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Gather", 6);
}

void mlx::core::Gather::~Gather(mlx::core::Gather *this)
{
  *(void *)this = &unk_270636170;
  v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_270636170;
  v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Greater::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Greater", 7);
}

uint64_t mlx::core::Greater::is_equivalent()
{
  return 1;
}

void mlx::core::Greater::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Greater::~Greater(mlx::core::Greater *this)
{
}

void *mlx::core::GreaterEqual::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"GreaterEqual", 12);
}

uint64_t mlx::core::GreaterEqual::is_equivalent()
{
  return 1;
}

void mlx::core::GreaterEqual::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::GreaterEqual::~GreaterEqual(mlx::core::GreaterEqual *this)
{
}

void *mlx::core::Less::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Less", 4);
}

uint64_t mlx::core::Less::is_equivalent()
{
  return 1;
}

void mlx::core::Less::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Less::~Less(mlx::core::Less *this)
{
}

void *mlx::core::LessEqual::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LessEqual", 9);
}

uint64_t mlx::core::LessEqual::is_equivalent()
{
  return 1;
}

void mlx::core::LessEqual::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LessEqual::~LessEqual(mlx::core::LessEqual *this)
{
}

void *mlx::core::Log::print(void *result, void *a2)
{
  int v2 = *((_DWORD *)result + 5);
  switch(v2)
  {
    case 0:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log2", 4);
    case 1:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log10", 5);
    case 2:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log", 3);
  }
  return result;
}

uint64_t mlx::core::Log::is_equivalent()
{
  return 1;
}

void mlx::core::Log::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Log::~Log(mlx::core::Log *this)
{
}

void *mlx::core::Log1p::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Log1p", 5);
}

void mlx::core::Log1p::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8BB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Log1p::~Log1p(mlx::core::Log1p *this)
{
}

void *mlx::core::LogicalNot::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalNot", 10);
}

uint64_t mlx::core::LogicalNot::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalNot::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8BC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalNot::~LogicalNot(mlx::core::LogicalNot *this)
{
}

void *mlx::core::LogicalAnd::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalAnd", 10);
}

uint64_t mlx::core::LogicalAnd::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalAnd::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8BDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalAnd::~LogicalAnd(mlx::core::LogicalAnd *this)
{
}

void *mlx::core::LogicalOr::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogicalOr", 9);
}

uint64_t mlx::core::LogicalOr::is_equivalent()
{
  return 1;
}

void mlx::core::LogicalOr::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8BF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogicalOr::~LogicalOr(mlx::core::LogicalOr *this)
{
}

void *mlx::core::LogAddExp::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LogAddExp", 9);
}

uint64_t mlx::core::LogAddExp::is_equivalent()
{
  return 1;
}

void mlx::core::LogAddExp::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::LogAddExp::~LogAddExp(mlx::core::LogAddExp *this)
{
}

void *mlx::core::Maximum::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Maximum", 7);
}

uint64_t mlx::core::Maximum::is_equivalent()
{
  return 1;
}

void mlx::core::Maximum::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Maximum::~Maximum(mlx::core::Maximum *this)
{
}

void *mlx::core::Minimum::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Minimum", 7);
}

uint64_t mlx::core::Minimum::is_equivalent()
{
  return 1;
}

void mlx::core::Minimum::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Minimum::~Minimum(mlx::core::Minimum *this)
{
}

void *mlx::core::Multiply::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Multiply", 8);
}

uint64_t mlx::core::Multiply::is_equivalent()
{
  return 1;
}

void mlx::core::Multiply::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Multiply::~Multiply(mlx::core::Multiply *this)
{
}

void *mlx::core::Negative::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Negative", 8);
}

uint64_t mlx::core::Negative::is_equivalent()
{
  return 1;
}

void mlx::core::Negative::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Negative::~Negative(mlx::core::Negative *this)
{
}

void *mlx::core::NotEqual::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NotEqual", 8);
}

uint64_t mlx::core::NotEqual::is_equivalent()
{
  return 1;
}

void mlx::core::NotEqual::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  int v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::NotEqual::~NotEqual(mlx::core::NotEqual *this)
{
}

void *mlx::core::NumberOfElements::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NumberOfElements", 16);
}

void mlx::core::NumberOfElements::output_shapes(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v2 = operator new(0x18uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 3;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v6, v2);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_256F8C79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::NumberOfElements::~NumberOfElements(mlx::core::NumberOfElements *this)
{
  *(void *)this = &unk_2706369F0;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_2706369F0;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Pad::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Pad", 3);
}

void mlx::core::Pad::~Pad(mlx::core::Pad *this)
{
  *(void *)this = &unk_270636A78;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_270636A78;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Partition::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Partition", 9);
}

void mlx::core::Partition::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8CA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Partition::~Partition(mlx::core::Partition *this)
{
}

void *mlx::core::Power::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Power", 5);
}

uint64_t mlx::core::Power::is_equivalent()
{
  return 1;
}

void mlx::core::Power::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Power::~Power(mlx::core::Power *this)
{
}

void *mlx::core::RandomBits::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"RandomBits", 10);
}

void mlx::core::RandomBits::~RandomBits(mlx::core::RandomBits *this)
{
  *(void *)this = &unk_270636C10;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270636C10;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Reshape::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Reshape", 7);
}

void mlx::core::Reshape::~Reshape(mlx::core::Reshape *this)
{
  *(void *)this = &unk_270636C98;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270636C98;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Round::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Round", 5);
}

uint64_t mlx::core::Round::is_equivalent()
{
  return 1;
}

void mlx::core::Round::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8CEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Round::~Round(mlx::core::Round *this)
{
}

void *mlx::core::Scan::print(uint64_t a1, void *a2)
{
  float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cum", 3);
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      uint64_t v5 = "Max";
      goto LABEL_5;
    case 1:
      uint64_t v5 = "Min";
      goto LABEL_5;
    case 2:
      uint64_t v5 = "Sum";
LABEL_5:
      uint64_t v6 = a2;
      uint64_t v7 = 3;
      goto LABEL_7;
    case 3:
      uint64_t v5 = "Prod";
      uint64_t v6 = a2;
      uint64_t v7 = 4;
LABEL_7:
      float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Scan::~Scan(mlx::core::Scan *this)
{
}

void *mlx::core::Scatter::print(uint64_t a1, void *a2)
{
  float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Scatter", 7);
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      uint64_t v5 = " Max";
      goto LABEL_5;
    case 1:
      uint64_t v5 = " Min";
      goto LABEL_5;
    case 2:
      uint64_t v5 = " Sum";
LABEL_5:
      uint64_t v6 = a2;
      uint64_t v7 = 4;
      goto LABEL_7;
    case 3:
      uint64_t v5 = " Prod";
      uint64_t v6 = a2;
      uint64_t v7 = 5;
LABEL_7:
      float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Scatter::~Scatter(mlx::core::Scatter *this)
{
  *(void *)this = &unk_270636E30;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270636E30;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Sigmoid::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sigmoid", 7);
}

uint64_t mlx::core::Sigmoid::is_equivalent()
{
  return 1;
}

void mlx::core::Sigmoid::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8D24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sigmoid::~Sigmoid(mlx::core::Sigmoid *this)
{
}

void *mlx::core::Sign::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sign", 4);
}

uint64_t mlx::core::Sign::is_equivalent()
{
  return 1;
}

void mlx::core::Sign::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8D388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sign::~Sign(mlx::core::Sign *this)
{
}

void *mlx::core::Sin::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sin", 3);
}

uint64_t mlx::core::Sin::is_equivalent()
{
  return 1;
}

void mlx::core::Sin::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sin::~Sin(mlx::core::Sin *this)
{
}

void *mlx::core::Sinh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sinh", 4);
}

uint64_t mlx::core::Sinh::is_equivalent()
{
  return 1;
}

void mlx::core::Sinh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8D600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sinh::~Sinh(mlx::core::Sinh *this)
{
}

void *mlx::core::Slice::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Slice", 5);
}

void mlx::core::Slice::~Slice(mlx::core::Slice *this)
{
  *(void *)this = &unk_2706370D8;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_2706370D8;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::SliceUpdate::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"SliceUpdate", 11);
}

void mlx::core::SliceUpdate::~SliceUpdate(mlx::core::SliceUpdate *this)
{
  *(void *)this = &unk_270637160;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_270637160;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Sort::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sort", 4);
}

void mlx::core::Sort::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sort::~Sort(mlx::core::Sort *this)
{
}

void *mlx::core::Split::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Split", 5);
}

void mlx::core::Split::~Split(mlx::core::Split *this)
{
  *(void *)this = &unk_270637270;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270637270;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::Square::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Square", 6);
}

uint64_t mlx::core::Square::is_equivalent()
{
  return 1;
}

void mlx::core::Square::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8DB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Square::~Square(mlx::core::Square *this)
{
}

void *mlx::core::Sqrt::print(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 20)) {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Rsqrt", 5);
  }
  else {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Sqrt", 4);
  }
}

void mlx::core::Sqrt::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Sqrt::~Sqrt(mlx::core::Sqrt *this)
{
}

void *mlx::core::StopGradient::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"StopGradient", 12);
}

uint64_t mlx::core::StopGradient::is_equivalent()
{
  return 1;
}

void mlx::core::StopGradient::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8DDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::StopGradient::~StopGradient(mlx::core::StopGradient *this)
{
}

void *mlx::core::Subtract::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Subtract", 8);
}

uint64_t mlx::core::Subtract::is_equivalent()
{
  return 1;
}

void mlx::core::Subtract::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Subtract::~Subtract(mlx::core::Subtract *this)
{
}

void *mlx::core::Tan::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Tan", 3);
}

uint64_t mlx::core::Tan::is_equivalent()
{
  return 1;
}

void mlx::core::Tan::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8E074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Tan::~Tan(mlx::core::Tan *this)
{
}

void *mlx::core::Tanh::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Tanh", 4);
}

uint64_t mlx::core::Tanh::is_equivalent()
{
  return 1;
}

void mlx::core::Tanh::output_shapes(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = **a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 3;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v8, v4);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_256F8E1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 8) = v14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void mlx::core::Tanh::~Tanh(mlx::core::Tanh *this)
{
}

void *mlx::core::Transpose::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Transpose", 9);
}

void mlx::core::Transpose::~Transpose(mlx::core::Transpose *this)
{
  *(void *)this = &unk_270637618;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270637618;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x25A2B1780);
}

void *mlx::core::QRF::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"QRF", 3);
}

void mlx::core::QRF::~QRF(mlx::core::QRF *this)
{
}

void *mlx::core::SVD::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"SVD", 3);
}

void mlx::core::SVD::~SVD(mlx::core::SVD *this)
{
}

void *mlx::core::Inverse::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Inverse", 7);
}

void mlx::core::Inverse::~Inverse(mlx::core::Inverse *this)
{
}

void *mlx::core::Cholesky::print(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Cholesky", 8);
}

void mlx::core::Cholesky::~Cholesky(mlx::core::Cholesky *this)
{
}

void sub_256F8E938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_256F8E9DC(uint64_t a1)
{
  uint64_t result = mlx_vector_array_size(a1);
  uint64_t v2 = result;
  if (result < 0)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (v2)
    {
      sub_25704AEE0();
      mlx_vector_array_get();
    }
  }
  return result;
}

uint64_t sub_256F8EAD0()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t type metadata accessor for ClosureCaptureState()
{
  return self;
}

BOOL sub_256F8EB2C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_256F8EB40@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_256F8EB50(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for mlx_array_dtype_()
{
  if (!qword_269FDC678)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_269FDC678);
    }
  }
}

uint64_t MLXArray.deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return v0;
}

uint64_t MLXArray.__deallocating_deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t MLXArray.itemSize.getter()
{
  return mlx_array_itemsize(*(void *)(v0 + 16));
}

uint64_t MLXArray.size.getter()
{
  return mlx_array_size(*(void *)(v0 + 16));
}

uint64_t MLXArray.count.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  mlx_array_ndim(v1);
  return (int)mlx_array_dim(v1, 0);
}

Swift::Int __swiftcall MLXArray.dim(_:)(Swift::Int a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  Swift::Int result = mlx_array_ndim(v3);
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_4;
  }
  BOOL v5 = __OFADD__(a1, result);
  a1 += result;
  if (!v5)
  {
    if (a1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
LABEL_7:
      __break(1u);
      goto LABEL_8;
    }
LABEL_4:
    if (a1 <= 0x7FFFFFFF) {
      return (int)mlx_array_dim(v3, a1);
    }
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t MLXArray.nbytes.getter()
{
  return mlx_array_nbytes(*(void *)(v0 + 16));
}

uint64_t MLXArray.ndim.getter()
{
  return mlx_array_ndim(*(void *)(v0 + 16));
}

uint64_t MLXArray.dtype.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v1 + 16));
  return sub_256FE5804(dtype, a1);
}

uint64_t MLXArray.shape.getter()
{
  int64_t v1 = mlx_array_ndim(*(void *)(v0 + 16));
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1 < 1) {
    return v2;
  }
  uint64_t result = mlx_array_shape(*(void *)(v0 + 16));
  uint64_t v4 = (int *)result;
  if (result)
  {
    sub_256F908EC(0, v1, 0);
    unint64_t v5 = *(void *)(v2 + 16);
    do
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      unint64_t v8 = *(void *)(v2 + 24);
      if (v5 >= v8 >> 1) {
        sub_256F908EC(v8 > 1, v5 + 1, 1);
      }
      *(void *)(v2 + 16) = v5 + 1;
      *(void *)(v2 + 8 * v5++ + 32) = v6;
      --v1;
    }
    while (v1);
    return v2;
  }
  __break(1u);
  return result;
}

int *MLXArray.shape2.getter()
{
  uint64_t result = (int *)mlx_array_ndim(*(void *)(v0 + 16));
  if (result == (int *)2)
  {
    uint64_t result = (int *)mlx_array_shape(*(void *)(v0 + 16));
    if (result) {
      return (int *)*result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int *MLXArray.shape3.getter()
{
  uint64_t result = (int *)mlx_array_ndim(*(void *)(v0 + 16));
  if (result == (int *)3)
  {
    uint64_t result = (int *)mlx_array_shape(*(void *)(v0 + 16));
    if (result) {
      return (int *)*result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int *MLXArray.shape4.getter()
{
  uint64_t result = (int *)mlx_array_ndim(*(void *)(v0 + 16));
  if (result == (int *)4)
  {
    uint64_t result = (int *)mlx_array_shape(*(void *)(v0 + 16));
    if (result) {
      return (int *)*result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.strides.getter()
{
  int64_t v1 = mlx_array_ndim(*(void *)(v0 + 16));
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1 < 1) {
    return v2;
  }
  uint64_t result = mlx_array_strides(*(void *)(v0 + 16));
  uint64_t v4 = (uint64_t *)result;
  if (result)
  {
    sub_256F908EC(0, v1, 0);
    unint64_t v5 = *(void *)(v2 + 16);
    do
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      unint64_t v8 = *(void *)(v2 + 24);
      if (v5 >= v8 >> 1) {
        sub_256F908EC(v8 > 1, v5 + 1, 1);
      }
      *(void *)(v2 + 16) = v5 + 1;
      *(void *)(v2 + 8 * v5++ + 32) = v6;
      --v1;
    }
    while (v1);
    return v2;
  }
  __break(1u);
  return result;
}

atomic_ullong *MLXArray.item<A>()(uint64_t a1, uint64_t a2)
{
  return MLXArray.item<A>(_:)(a1, a1, a2);
}

atomic_ullong *MLXArray.item<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  int v8;
  uint64_t dtype;
  int v10;
  atomic_ullong *result;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;

  mlx_array_eval(*(void *)(v3 + 16));
  uint64_t v6 = *(atomic_ullong **)(v3 + 16);
  uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  v7(&v12, a2, a3);
  unint64_t v8 = v12;
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v3 + 16));
  sub_256FE5804(dtype, &v14);
  uint64_t v10 = v14;
  if (v8 != v14)
  {
    v7(&v12, a2, a3);
    mlx_default_device();
  }
  if (swift_dynamicCastMetatype())
  {
    LOBYTE(v12) = mlx_array_item_BOOL((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    LOBYTE(v12) = mlx_array_item_uint8((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    LODWORD(v12) = mlx_array_item_uint32((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    LOBYTE(v12) = mlx_array_item_int8((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    LODWORD(v12) = mlx_array_item_int32((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    uint64_t v12 = mlx_array_item_int64((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    uint64_t v12 = mlx_array_item_int64((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else if (swift_dynamicCastMetatype())
  {
    LODWORD(v12) = mlx_array_item_float32((uint64_t)v6);
    uint64_t result = (atomic_ullong *)swift_dynamicCast();
    if (v8 != v10) {
      return mlx_free(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0xE000000000000000;
    sub_25704ADF0();
    swift_bridgeObjectRelease();
    uint64_t v12 = 0xD000000000000018;
    uint64_t v13 = 0x800000025708D8B0;
    sub_25704B340();
    sub_25704A850();
    swift_bridgeObjectRelease();
    uint64_t result = (atomic_ullong *)sub_25704AFD0();
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall MLXArray.eval()()
{
  mlx_array_eval(*(void *)(v0 + 16));
}

uint64_t MLXArray.asType(_:stream:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v1 + 16));
  sub_256FE5804(dtype, &v5);
  if (v2 != v5) {
    mlx_astype();
  }
  swift_retain();
  return v1;
}

uint64_t MLXArray.asType<A>(_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v5, a3, a4);
  return MLXArray.asType(_:stream:)((unsigned __int8 *)&v5);
}

uint64_t MLXArray.asArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v8)(unint64_t *__return_ptr, uint64_t, uint64_t);
  int v9;
  uint64_t dtype;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void v25[5];
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  uint64_t v4 = v3;
  mlx_array_eval(*(void *)(v3 + 16));
  uint64_t v7 = *(atomic_ullong **)(v3 + 16);
  unint64_t v8 = *(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  v8(&v27, a2, a3);
  int v9 = v27;
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v3 + 16));
  sub_256FE5804(dtype, &v26);
  vDSP_Length v11 = v26;
  if (v9 != v26)
  {
    v8(&v27, a2, a3);
    mlx_default_device();
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v12 = mlx_array_data_BOOL((uint64_t)v7);
    if (v12)
    {
      uint64_t v27 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B0);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_36;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v14 = mlx_array_data_uint8((uint64_t)v7);
    if (v14)
    {
      uint64_t v27 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6A8);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (swift_dynamicCastMetatype())
  {
    int v15 = mlx_array_data_uint32((uint64_t)v7);
    if (v15)
    {
      uint64_t v27 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6A0);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
    goto LABEL_37;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v16 = mlx_array_data_int8((uint64_t)v7);
    if (v16)
    {
      uint64_t v27 = v16;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC698);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
    goto LABEL_38;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = mlx_array_data_int32((uint64_t)v7);
    if (v17)
    {
      uint64_t v27 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC690);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
    goto LABEL_39;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v18 = mlx_array_data_int64((uint64_t)v7);
    if (v18)
    {
      uint64_t v27 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC688);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
        goto LABEL_33;
      }
      return v13;
    }
    goto LABEL_40;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t v19 = mlx_array_data_int64((uint64_t)v7);
    uint64_t v20 = mlx_array_size(*(void *)(v4 + 16));
    MEMORY[0x270FA5388](v20);
    v25[2] = a2;
    v25[3] = a3;
    int v21 = sub_25704AB00();
    sub_256F8FD60(MEMORY[0x263F8D6C8], (uint64_t)sub_256F90958, (uint64_t)v25, v19, v20, MEMORY[0x263F8E5C0], MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v24);
    uint64_t v13 = v27;
    if (v9 != v11) {
      mlx_free(v7);
    }
    return v13;
  }
  if (swift_dynamicCastMetatype())
  {
    int v22 = mlx_array_data_float32((uint64_t)v7);
    if (v22)
    {
      uint64_t v27 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC680);
      sub_25704A730();
      swift_dynamicCast();
      uint64_t v13 = sub_256F8FCD4(v26, v3);
      if (v9 != v11) {
LABEL_33:
      }
        mlx_free(v7);
      return v13;
    }
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v27 = 0;
  vDSP_Length v28 = 0xE000000000000000;
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  uint64_t v27 = 0xD000000000000018;
  vDSP_Length v28 = 0x800000025708D8B0;
  sub_25704B340();
  sub_25704A850();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  return result;
}

uint64_t sub_256F8FCD4(uint64_t a1, uint64_t a2)
{
  return sub_25704AB20();
}

uint64_t sub_256F8FD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v14 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v14);
  int v24 = (char *)v29 - v23;
  if (v18)
  {
    uint64_t v25 = *(void *)(*(void *)(v21 - 8) + 72);
    uint64_t v26 = *(void *)(*(void *)(v20 - 8) + 72);
    if (v25 == v26) {
      goto LABEL_10;
    }
    uint64_t v27 = v19 * v26;
    if ((unsigned __int128)(v19 * (__int128)v26) >> 64 == (v19 * v26) >> 63)
    {
      if (v25)
      {
        if (v27 != 0x8000000000000000 || v25 != -1)
        {
          uint64_t v19 = v27 / v25;
LABEL_10:
          uint64_t result = v22(v18, v19, v16);
          if (!v11) {
            return result;
          }
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = v22(0, 0, (char *)v29 - v23);
  uint64_t v16 = v24;
  if (v11) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  }
  return result;
}

uint64_t MLXArray.asData(noCopy:)(char a1)
{
  mlx_array_eval(*(void *)(v1 + 16));
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v1 + 16));
  sub_256FE5804(dtype, &v7);
  switch(v7)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_8;
    case 4:
      uint64_t result = mlx_array_data_int32(*(void *)(v1 + 16));
      if (result) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_12:
      uint64_t result = mlx_array_data_int64(*(void *)(v1 + 16));
      if (!result) {
        goto LABEL_20;
      }
      return sub_256F90248(result, a1 & 1, v1);
    case 5:
      goto LABEL_12;
    case 6:
      uint64_t result = mlx_array_data_float32(*(void *)(v1 + 16));
      if (result) {
        goto LABEL_17;
      }
      goto LABEL_21;
    default:
      uint64_t result = mlx_array_data_BOOL(*(void *)(v1 + 16));
      if (result) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      uint64_t result = mlx_array_data_uint8(*(void *)(v1 + 16));
      if (result) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      uint64_t result = mlx_array_data_uint32(*(void *)(v1 + 16));
      if (result)
      {
LABEL_17:
        char v5 = a1 & 1;
        uint64_t v6 = sub_256F90500;
        return sub_256F90060(result, v5, v1, v6);
      }
      __break(1u);
LABEL_8:
      uint64_t result = mlx_array_data_int8(*(void *)(v1 + 16));
      if (result)
      {
LABEL_9:
        char v5 = a1 & 1;
        uint64_t v6 = sub_256F905D8;
        return sub_256F90060(result, v5, v1, v6);
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
  }
}

uint64_t sub_256F90060(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_25704A500();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v13 = mlx_array_nbytes(v12);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F06F00], v8);
    sub_25704A4F0();
    if (v13)
    {
      sub_25704A4E0();
      swift_allocObject();
      swift_retain();
      uint64_t v14 = sub_25704A490();
      uint64_t v15 = sub_256F9264C(v14, v13);
      swift_release();
    }
    else
    {
      uint64_t v17 = (void (*)(uint64_t, void))sub_25704A4F0();
      v17(a1, 0);
      swift_release();
      swift_release();
      uint64_t v15 = 0;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    uint64_t v16 = mlx_array_size(v12);
    return a4(a1, v16);
  }
  return v15;
}

uint64_t sub_256F90248(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = sub_25704A500();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v11 = mlx_array_nbytes(v10);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F06F00], v6);
    sub_25704A4F0();
    if (v11)
    {
      sub_25704A4E0();
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_25704A490();
      uint64_t v13 = sub_256F9264C(v12, v11);
      swift_release();
    }
    else
    {
      uint64_t v15 = (void (*)(uint64_t, void))sub_25704A4F0();
      v15(a1, 0);
      swift_release();
      swift_release();
      uint64_t v13 = 0;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v14 = mlx_array_size(v10);
    return sub_256F90428(a1, v14);
  }
  return v13;
}

uint64_t sub_256F90428(uint64_t __src, uint64_t a2)
{
  if (__src)
  {
    if ((unint64_t)(a2 - 0x1000000000000000) >> 61 == 7)
    {
      uint64_t v3 = 8 * a2;
      if (8 * a2)
      {
        if (v3 <= 14)
        {
          return sub_256F92588((unsigned char *)__src, (unsigned char *)(__src + v3));
        }
        else
        {
          sub_25704A4E0();
          swift_allocObject();
          sub_25704A4A0();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            sub_25704A520();
            __src = swift_allocObject();
            *(void *)(__src + 16) = 0;
            *(void *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 35;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t sub_256F90500(uint64_t __src, uint64_t a2)
{
  if (__src)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 == 3)
    {
      uint64_t v3 = 4 * a2;
      if (4 * a2)
      {
        if (v3 <= 14)
        {
          return sub_256F92588((unsigned char *)__src, (unsigned char *)(__src + v3));
        }
        else
        {
          sub_25704A4E0();
          swift_allocObject();
          sub_25704A4A0();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            sub_25704A520();
            __src = swift_allocObject();
            *(void *)(__src + 16) = 0;
            *(void *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 34;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t sub_256F905D8(uint64_t __src, uint64_t a2)
{
  if (__src)
  {
    if (a2)
    {
      if (a2 <= 14)
      {
        return sub_256F92588((unsigned char *)__src, (unsigned char *)(__src + a2));
      }
      else
      {
        sub_25704A4E0();
        swift_allocObject();
        sub_25704A4A0();
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          sub_25704A520();
          __src = swift_allocObject();
          *(void *)(__src + 16) = 0;
          *(void *)(__src + 24) = a2;
        }
        else
        {
          return a2 << 32;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return __src;
}

void MLXArray.realPart(stream:)()
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v0 + 16));
  sub_256FE5804(dtype, &v2);
  __break(1u);
}

atomic_ullong *MLXArray.update(_:)(uint64_t a1)
{
  uint64_t result = *(atomic_ullong **)(a1 + 16);
  if (result != *(atomic_ullong **)(v1 + 16))
  {
    mlx_retain((uint64_t)result);
    uint64_t result = mlx_free(*(atomic_ullong **)(v1 + 16));
    *(void *)(v1 + 16) = *(void *)(a1 + 16);
  }
  return result;
}

uint64_t MLXArray.innerState()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_25706E210;
  *(void *)(v1 + 32) = v0;
  uint64_t v3 = v1;
  sub_25704AA30();
  swift_retain();
  return v3;
}

uint64_t sub_256F9077C()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_25706E210;
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = v2;
  sub_25704AA30();
  swift_retain();
  return v4;
}

uint64_t MLXArray.description.getter()
{
  uint64_t result = mlx_tostring(*(uint64_t (****)(void))(v0 + 16));
  uint64_t v2 = (atomic_ullong *)result;
  if (result)
  {
    uint64_t result = mlx_string_data(result);
    if (result)
    {
      uint64_t v3 = sub_25704A870();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_256F90858()
{
  uint64_t result = mlx_tostring(*(uint64_t (****)(void))(*(void *)v0 + 16));
  uint64_t v2 = (atomic_ullong *)result;
  if (result)
  {
    uint64_t result = mlx_string_data(result);
    if (result)
    {
      uint64_t v3 = sub_25704A870();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_256F908CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F90C38(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F908EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91658(a1, a2, a3, *v3, &qword_269FDC790);
  void *v3 = (char *)result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_256F90958@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_256FA69A4(a1, a2);
  uint64_t v4 = sub_25704AF50();
  uint64_t result = swift_release();
  *a3 = v4;
  return result;
}

uint64_t type metadata accessor for MLXArray()
{
  return self;
}

uint64_t method lookup function for MLXArray(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MLXArray);
}

uint64_t sub_256F909F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F90D9C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90A10(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F90F0C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90A30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F914F8(a1, a2, a3, *v3, &qword_269FDC770);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90A58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F9108C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90A78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91204(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90A98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91368(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90AB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F914F8(a1, a2, a3, *v3, &qword_269FDC750);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90AE0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F917B8(a1, a2, a3, *v3, &qword_269FDC748);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90B08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91658(a1, a2, a3, *v3, &qword_269FDC740);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90B30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F917B8(a1, a2, a3, *v3, &qword_269FDC738);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90B58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91908(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90B78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91A6C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_256F90B98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91D6C(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90BB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F91F14(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90BD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F920A4(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90BF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F92250(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90C18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_256F923F8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_256F90C38(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC778);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F90D9C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC718);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F90F0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC788);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F9108C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91204(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC780);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91368(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6F8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC700);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F914F8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91658(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F917B8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91908(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC758);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91A6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC730);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91BC0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC768);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91D6C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E8);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6F0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F91F14(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F920A4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC708);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC710);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F92250(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC720);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F923F8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6C8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256F92588(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_256F9264C(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_25704A520();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)sub_25704A4B0();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_25704A4C0();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      int64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_256F92588(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = sub_25704A4D0();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_256F92738(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF1C88(*a1, *a2);
}

uint64_t sub_256F92744()
{
  return sub_25704B2B0();
}

uint64_t sub_256F927C4()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256F92830()
{
  return sub_25704B2B0();
}

uint64_t sub_256F928AC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_256F9290C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7629925;
  if (*v1) {
    uint64_t v2 = 0x6F746172656E6567;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000007372;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_256F92948()
{
  if (*v0) {
    return 0x6F746172656E6567;
  }
  else {
    return 7629925;
  }
}

uint64_t sub_256F92980@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256F929E4()
{
  return 0;
}

void sub_256F929F0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_256F929FC(uint64_t a1)
{
  unint64_t v2 = sub_256F92E80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256F92A38(uint64_t a1)
{
  unint64_t v2 = sub_256F92E80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256F92A74(void *a1)
{
  return sub_256F92AC0(a1);
}

uint64_t sub_256F92AC0(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7A0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256F92E80();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for ListComp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_2570304B8((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_2570391EC(v8, 1);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256F92CF0()
{
  sub_256F92DE8();
  swift_allocError();
  *uint64_t v0 = 61;
  return swift_willThrow();
}

uint64_t sub_256F92D40()
{
  return 0;
}

uint64_t sub_256F92D4C()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256F92D7C()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for ListComp()
{
  return self;
}

unint64_t sub_256F92DE8()
{
  unint64_t result = qword_269FDC798;
  if (!qword_269FDC798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC798);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_256F92E80()
{
  unint64_t result = qword_269FDC7A8;
  if (!qword_269FDC7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7A8);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_256F92F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_256F92F88(uint64_t a1)
{
  return a1;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ListComp.NameCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ListComp.NameCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256F9311CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_256F93144(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_256F93150(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ListComp.NameCodingKeys()
{
  return &type metadata for ListComp.NameCodingKeys;
}

unint64_t sub_256F93170()
{
  unint64_t result = qword_269FDC7B0;
  if (!qword_269FDC7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7B0);
  }
  return result;
}

unint64_t sub_256F931C8()
{
  unint64_t result = qword_269FDC7B8;
  if (!qword_269FDC7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7B8);
  }
  return result;
}

unint64_t sub_256F93220()
{
  unint64_t result = qword_269FDC7C0;
  if (!qword_269FDC7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7C0);
  }
  return result;
}

void static MLXArray.+ infix(_:_:)()
{
}

void static MLXArray.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

uint64_t static MLXArray.+= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256F93FDC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2peoiyyAC_ACtFZ_0);
}

void static MLXArray.- infix(_:_:)()
{
}

void static MLXArray.- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

uint64_t static MLXArray.-= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256F93FDC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2seoiyyAC_ACtFZ_0);
}

void static MLXArray.- prefix(_:)()
{
}

void static MLXArray.* infix(_:_:)()
{
}

void static MLXArray.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

uint64_t static MLXArray.*= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256F93FDC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2meoiyyAC_ACtFZ_0);
}

void static MLXArray.** infix(_:_:)()
{
}

void static MLXArray.** infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray./ infix(_:_:)()
{
}

void static MLXArray./ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

uint64_t static MLXArray./= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256F93FDC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))_s8Morpheus8MLXArrayC2deoiyyAC_ACtFZ_0);
}

uint64_t sub_256F93FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v12);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v12, a3, a4);
  a5(a1, v10);
  return swift_release();
}

void static MLXArray.% infix(_:_:)()
{
}

void static MLXArray.% infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

{
  uint64_t dtype;
  char v7;

  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..! prefix(_:)()
{
}

void static MLXArray..== infix(_:_:)()
{
}

void static MLXArray..== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..<= infix(_:_:)()
{
}

void static MLXArray..<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..>= infix(_:_:)()
{
}

void static MLXArray..>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..!= infix(_:_:)()
{
}

void static MLXArray..!= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..< infix(_:_:)()
{
}

void static MLXArray..< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..> infix(_:_:)()
{
}

void static MLXArray..> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v7, a3, a4);
  mlx_default_device();
}

void static MLXArray..&& infix(_:_:)()
{
}

void static MLXArray..|| infix(_:_:)()
{
}

void static MLXArray.! prefix(_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.== infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.== infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.<= infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.<= infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.>= infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.>= infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.!= infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.!= infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.< infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.< infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.> infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.> infix<A>(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.&& infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void static MLXArray.|| infix(_:_:)()
{
}

{
  sub_25704AFD0();
  __break(1u);
}

void sub_256F95B68()
{
}

void MLXArray.abs(stream:)()
{
}

void MLXArray.all(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.all(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_all_axis();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.all(keepDims:stream:)()
{
}

void MLXArray.allClose<A>(_:rtol:atol:equalNaN:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v5 + 16));
  sub_256FE5804(dtype, &v9);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v9, a4, a5);
  mlx_allclose();
}

void MLXArray.any(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.any(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_any();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.any(keepDims:stream:)()
{
}

uint64_t MLXArray.argMax(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_argmax();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.argMax(keepDims:stream:)()
{
}

uint64_t MLXArray.argMin(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_argmin();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.argMin(keepDims:stream:)()
{
}

void MLXArray.arrayEqual<A>(_:equalNAN:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v5 + 16));
  sub_256FE5804(dtype, &v9);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v9, a4, a5);
  mlx_array_equal();
}

void MLXArray.cos(stream:)()
{
}

uint64_t MLXArray.cummax(axis:reverse:inclusive:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_cummax();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.cummax(reverse:inclusive:stream:)()
{
}

uint64_t MLXArray.cummin(axis:reverse:inclusive:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_cummin();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.cummin(reverse:inclusive:stream:)()
{
}

uint64_t MLXArray.cumprod(axis:reverse:inclusive:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_cumprod();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.cumprod(reverse:inclusive:stream:)()
{
}

uint64_t MLXArray.cumsum(axis:reverse:inclusive:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_cumsum();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.cumsum(reverse:inclusive:stream:)()
{
}

uint64_t MLXArray.diag(k:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_diag();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.diagonal(offset:axis1:axis2:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000
    || a2 < (uint64_t)0xFFFFFFFF80000000
    || a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_10;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_diagonal();
  }
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.exp(stream:)()
{
}

void MLXArray.expandedDimensions(axes:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.expandedDimensions(axis:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_expand_dims();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.flattened(start:end:stream:)(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a2 <= 0x7FFFFFFF) {
    mlx_flatten();
  }
LABEL_8:
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.floor(stream:)()
{
}

void MLXArray.floorDivide<A>(_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v4 + 16));
  sub_256FE5804(dtype, &v8);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v8, a3, a4);
  mlx_floor_divide();
}

void MLXArray.log(stream:)()
{
}

void MLXArray.log2(stream:)()
{
}

void MLXArray.log10(stream:)()
{
}

void MLXArray.log1p(stream:)()
{
}

void MLXArray.logSumExp(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.logSumExp(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_logsumexp();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.logSumExp(keepDims:stream:)()
{
}

void MLXArray.matmul(_:stream:)()
{
}

void MLXArray.max(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.max(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_max();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.max(keepDims:stream:)()
{
}

void MLXArray.mean(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.mean(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_mean();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.mean(keepDims:stream:)()
{
}

void MLXArray.min(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.min(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_min();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.min(keepDims:stream:)()
{
}

uint64_t MLXArray.movedAxis(source:destination:stream:)(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a2 <= 0x7FFFFFFF) {
    mlx_moveaxis();
  }
LABEL_8:
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.pow<A>(_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v4 + 16));
  sub_256FE5804(dtype, &v8);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 8))(&v8, a3, a4);
  mlx_power();
}

void MLXArray.product(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.product(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_prod();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.product(keepDims:stream:)()
{
}

void MLXArray.reciprocal(stream:)()
{
}

void _s8Morpheus8MLXArrayC8reshaped_6streamACSaySiG_AA14StreamOrDeviceVtF_0(uint64_t a1)
{
}

uint64_t MLXArray.round(decimals:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_round();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.rsqrt(stream:)()
{
}

void MLXArray.sin(stream:)()
{
}

uint64_t MLXArray.split(parts:axis:stream:)(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a2 <= 0x7FFFFFFF) {
    mlx_split_equal_parts();
  }
LABEL_8:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.split(axis:stream:)(uint64_t a1)
{
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a1 <= 0x7FFFFFFF)
  {
    mlx_split_equal_parts();
  }
  __break(1u);
  uint64_t v4 = MEMORY[0x25A2B0EE0](0, v2);
  MEMORY[0x25A2B0EE0](1, v2);
  swift_bridgeObjectRelease();
  mlx_free(v1);
  return v4;
}

uint64_t MLXArray.split(indices:axis:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = Array<A>.asInt32.getter(a1);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_split();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.sqrt(stream:)()
{
}

void MLXArray.square(stream:)()
{
}

void MLXArray.squeezed(axes:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.squeezed(axis:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_squeeze();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.squeezed(stream:)()
{
}

void MLXArray.sum(axes:keepDims:stream:)(uint64_t a1)
{
}

uint64_t MLXArray.sum(axis:keepDims:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_sum();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.sum(keepDims:stream:)()
{
}

uint64_t MLXArray.swappedAxes(_:_:stream:)(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a2 <= 0x7FFFFFFF) {
    mlx_swapaxes();
  }
LABEL_8:
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.take(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_take();
  }
  __break(1u);
  __break(1u);
}

void MLXArray.take(_:stream:)()
{
}

void _s8Morpheus8MLXArrayC10transposed4axes6streamACSaySiG_AA14StreamOrDeviceVtF_0(uint64_t a1)
{
}

uint64_t MLXArray.transposed(axis:stream:)(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    mlx_transpose();
  }
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.transposed(stream:)()
{
}

void MLXArray.T.getter()
{
}

uint64_t MLXArray.variance(axes:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Array<A>.asInt32.getter(a1);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_var();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.variance(axis:keepDims:ddof:stream:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v3 + 16);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_var();
  }
LABEL_9:
  __break(1u);
  __break(1u);
  return result;
}

void MLXArray.variance(keepDims:ddof:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_var_all();
  }
  __break(1u);
  __break(1u);
}

void _s8Morpheus8MLXArrayC2peoiyyAC_ACtFZ_0()
{
}

void _s8Morpheus8MLXArrayC2seoiyyAC_ACtFZ_0()
{
}

void _s8Morpheus8MLXArrayC2meoiyyAC_ACtFZ_0()
{
}

void _s8Morpheus8MLXArrayC2deoiyyAC_ACtFZ_0()
{
}

uint64_t Int.int32.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0x7FFFFFFF) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t Array<A>.asInt32.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_256F92734(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (int64_t *)(a1 + 32);
    while (1)
    {
      int64_t v6 = *v4++;
      uint64_t v5 = v6;
      if (v6 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v5 > 0x7FFFFFFF) {
        goto LABEL_10;
      }
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_256F92734(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      if (!--v2) {
        return result;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t Sequence<>.asInt32.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_256F99618((void (*)(char *, char *))sub_256F995EC, 0, a1, MEMORY[0x263F8E548], MEMORY[0x263F8E628], a2, MEMORY[0x263F8E658], a8);
}

uint64_t *sub_256F995EC@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_256F99618(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  int v59 = a4;
  int v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  int v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_25704AC70();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unsigned int v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  int v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  vDSP_Length v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  int v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_25704A940();
  uint64_t v61 = sub_25704A570();
  uint64_t v56 = sub_25704AF30();
  sub_25704AED0();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  int v59 = v30;
  uint64_t result = sub_25704A930();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    int v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    unsigned int v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_25704AC80();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_25704AF10();
      if (!--v31)
      {
        uint64_t v35 = v54;
        int v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  int v36 = v51;
LABEL_9:
  sub_25704AC80();
  int v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    int v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    int v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    int v38 = (void (**)(char *, uint64_t))(v35 + 8);
    unsigned int v39 = v41;
    int v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_25704AF10();
      sub_25704AC80();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t sub_256F99D18()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of Updatable.innerState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Evaluatable.innerState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_256F99D4C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_256F90A58(0, v1, 0);
  uint64_t result = sub_256F9A9A4(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v10 = v9 & 1;
  uint64_t v11 = a1 + 64;
  uint64_t v23 = v6;
  int64_t v24 = v1;
  uint64_t v25 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v14 = (unint64_t)v5 >> 6;
    if ((*(void *)(v11 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_31;
    }
    char v22 = v10;
    sub_256F9AC04(*(void *)(a1 + 48) + 40 * v5, (uint64_t)v28);
    v26[0] = v28[0];
    v26[1] = v28[1];
    uint64_t v27 = v29;
    uint64_t v31 = MEMORY[0x263F8DB68];
    *(void *)&long long v30 = swift_allocObject();
    sub_256F9AC04((uint64_t)v26, v30 + 16);
    sub_256F9AC98((uint64_t)v26);
    uint64_t v2 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256F90A58(0, *(void *)(v2 + 16) + 1, 1);
      uint64_t v2 = v32;
    }
    unint64_t v16 = *(void *)(v2 + 16);
    unint64_t v15 = *(void *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      sub_256F90A58(v15 > 1, v16 + 1, 1);
      uint64_t v2 = v32;
    }
    *(void *)(v2 + 16) = v16 + 1;
    uint64_t result = (uint64_t)sub_256F9ABF4(&v30, (_OWORD *)(v2 + 32 * v16 + 32));
    int64_t v12 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v12) {
      goto LABEL_32;
    }
    uint64_t v11 = a1 + 64;
    uint64_t v17 = *(void *)(v25 + 8 * v14);
    if ((v17 & (1 << v5)) == 0) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_34;
    }
    unint64_t v18 = v17 & (-2 << (v5 & 0x3F));
    if (v18)
    {
      int64_t v12 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v13 = v24;
    }
    else
    {
      unint64_t v19 = v14 + 1;
      unint64_t v20 = (unint64_t)(v12 + 63) >> 6;
      int64_t v13 = v24;
      if (v14 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v25 + 8 * v19);
        if (!v21)
        {
          unint64_t v19 = v14 + 2;
          if (v14 + 2 >= v20) {
            goto LABEL_4;
          }
          unint64_t v21 = *(void *)(v25 + 8 * v19);
          if (!v21)
          {
            unint64_t v19 = v14 + 3;
            if (v14 + 3 >= v20) {
              goto LABEL_4;
            }
            unint64_t v21 = *(void *)(v25 + 8 * v19);
            if (!v21)
            {
              while (v20 - 4 != v14)
              {
                unint64_t v21 = *(void *)(a1 + 96 + 8 * v14++);
                if (v21)
                {
                  uint64_t result = sub_256F9ACEC(v5, v7, v22 & 1);
                  uint64_t v11 = a1 + 64;
                  unint64_t v19 = v14 + 3;
                  goto LABEL_19;
                }
              }
              uint64_t result = sub_256F9ACEC(v5, v7, v22 & 1);
              uint64_t v11 = a1 + 64;
              goto LABEL_4;
            }
          }
        }
LABEL_19:
        int64_t v12 = __clz(__rbit64(v21)) + (v19 << 6);
      }
    }
LABEL_4:
    char v10 = 0;
    ++v8;
    uint64_t v7 = v23;
    uint64_t v5 = v12;
    if (v8 == v13) {
      return v2;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_256F9A044(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_256F90A58(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    uint64_t v5 = MEMORY[0x263F8D120];
    do
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v12 = v5;
      *(void *)&long long v11 = v7;
      *((void *)&v11 + 1) = v6;
      uint64_t v13 = v2;
      unint64_t v9 = *(void *)(v2 + 16);
      unint64_t v8 = *(void *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
      {
        sub_256F90A58(v8 > 1, v9 + 1, 1);
        uint64_t v2 = v13;
      }
      v4 += 2;
      *(void *)(v2 + 16) = v9 + 1;
      sub_256F9ABF4(&v11, (_OWORD *)(v2 + 32 * v9 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_256F9A130(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  int v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  int v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_25704AB90();
  if (!v18) {
    return sub_25704AA80();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_25704A570();
  uint64_t v32 = sub_25704AF30();
  sub_25704AED0();
  uint64_t v36 = v8;
  uint64_t result = sub_25704AB70();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    unsigned int v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      unint64_t v21 = (void (*)(char *, void))sub_25704AC20();
      char v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_25704AF10();
      sub_25704ABA0();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t Array.iterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  v7[2] = a2;
  v7[3] = sub_256F9A610;
  v7[4] = &v8;
  uint64_t v2 = sub_25704AB00();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = sub_256F9A130((void (*)(char *, char *))sub_256F9A644, (uint64_t)v7, v2, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7C8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_256F9A610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_256F9A644@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 24);
  a2[3] = *(void *)(v2 + 16);
  __swift_allocate_boxed_opaque_existential_0(a2);
  return v4(a1);
}

uint64_t sub_256F9A698(uint64_t a1)
{
  return Array.iterator()(*v1, *(void *)(a1 + 16));
}

uint64_t Dictionary.iterator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a1;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  v9[2] = a2;
  void v9[3] = a3;
  v9[4] = a4;
  v9[5] = sub_256F9A610;
  v9[6] = &v10;
  uint64_t v4 = sub_25704A5E0();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = sub_256F9A130((void (*)(char *, char *))sub_256F9AB8C, (uint64_t)v9, v4, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7C8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_256F9A7A4(uint64_t *a1)
{
  return Dictionary.iterator()(*v1, a1[2], a1[3], a1[4]);
}

uint64_t SharedMutableArray.iterator()()
{
  uint64_t v0 = SharedMutableArray.anyArray.getter();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7C8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_256F9A7F8()
{
  return SharedMutableArray.iterator()();
}

uint64_t SharedMutableDict.iterator()()
{
  uint64_t v0 = SharedMutableDict.anyDict.getter();
  uint64_t v1 = sub_256F99D4C(v0);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7C8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_256F9A884()
{
  return SharedMutableDict.iterator()();
}

uint64_t String.iterator()(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = _sSS8MorpheusE3lenSiyF_0();
  if (!v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_256F9AB10(v4, 0);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_256F9AA54(&v10, v6 + 4, v5, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == (void *)v5)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v9 = sub_256F9A044((uint64_t)v6);
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7C8);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_256F9A99C()
{
  return String.iterator()(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_256F9A9A4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_256F9AA54(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v12 = a4;
  unint64_t v13 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v14 = v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_14:
    void *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (void *)v7;
  }
  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a2;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = sub_25704A880();
      if (!v11) {
        break;
      }
      ++v9;
      *unint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void *sub_256F9AB10(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7D0);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t sub_256F9AB8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 40);
  a2[3] = *(void *)(v2 + 16);
  __swift_allocate_boxed_opaque_existential_0(a2);
  return v4(a1);
}

uint64_t dispatch thunk of Loopable.iterator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_OWORD *sub_256F9ABF4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_256F9AC04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256F9AC60()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_256F9AC98(uint64_t a1)
{
  return a1;
}

uint64_t sub_256F9ACEC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

Swift::Int __swiftcall resolve(axis:ndim:)(Swift::Int axis, Swift::Int ndim)
{
  if (axis < 0)
  {
    BOOL v2 = __OFADD__(axis, ndim);
    axis += ndim;
    if (v2) {
      __break(1u);
    }
  }
  return axis;
}

uint64_t sub_256F9AD70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v23 = a2;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    uint64_t v10 = a2 + 8 * a3;
    do
    {
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!(a3 - v4 + v8)) {
        goto LABEL_28;
      }
      if (v9 + v8 >= v4 || v8 >= v5) {
        goto LABEL_29;
      }
      uint64_t v12 = *(void *)(v10 + 8 * v8);
      if (v12 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_30;
      }
      if (v12 > 0x7FFFFFFF) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v25 + 16);
      unint64_t v13 = *(void *)(v25 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
        uint64_t v9 = a3;
      }
      *(void *)(v25 + 16) = v14 + 1;
      *(_DWORD *)(v25 + 4 * v14 + 32) = v12;
      ++v8;
    }
    while (v11 != v5);
    uint64_t v15 = v9 + v8;
    uint64_t v17 = v4 - (v9 + v8);
    BOOL v16 = v4 <= v9 + v8;
    if (v4 == v9 + v8) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v15 = a3;
    uint64_t v17 = v4 - a3;
    BOOL v16 = v4 <= a3;
    if (v4 == a3)
    {
LABEL_17:
      swift_unknownObjectRelease();
      return v25;
    }
  }
  if (v16) {
    goto LABEL_36;
  }
  if (v15 >= v9)
  {
    uint64_t v18 = (int64_t *)(v23 + 8 * v15);
    while (1)
    {
      int64_t v20 = *v18++;
      uint64_t v19 = v20;
      if (v20 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v19 > 0x7FFFFFFF) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v25 + 16);
      unint64_t v21 = *(void *)(v25 + 24);
      if (v22 >= v21 >> 1) {
        uint64_t result = sub_256F90A30(v21 > 1, v22 + 1, 1);
      }
      *(void *)(v25 + 16) = v22 + 1;
      *(_DWORD *)(v25 + 4 * v22 + 32) = v19;
      if (!--v17) {
        goto LABEL_17;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_256F9AF88(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_25704AFC0();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_25704AAA0();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_256F9B074(char a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_25704AFC0();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v4 = sub_25704AAA0();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t sub_256F9B130(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_25704AFC0();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_25704AAA0();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_256F9B21C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    uint64_t result = sub_25704AFC0();
    __break(1u);
  }
  else
  {
    if (a4)
    {
      uint64_t v8 = sub_25704AAA0();
      uint64_t v9 = v8;
      *(void *)(v8 + 16) = a4;
      *(void *)(v8 + 32) = a1;
      *(void *)(v8 + 40) = a2;
      *(_DWORD *)(v8 + 48) = a3;
      *(unsigned char *)(v8 + 52) = BYTE4(a3);
      if (a4 != 1)
      {
        *(void *)(v8 + 56) = a1;
        *(void *)(v8 + 64) = a2;
        *(_DWORD *)(v8 + 72) = a3;
        *(unsigned char *)(v8 + 76) = BYTE4(a3);
        uint64_t v10 = a4 - 2;
        if (v10)
        {
          uint64_t v11 = v8 + 96;
          do
          {
            sub_256FA81C4(a1, a2, a3);
            *(void *)(v11 - 16) = a1;
            *(void *)(v11 - 8) = a2;
            *(_DWORD *)uint64_t v11 = a3;
            *(unsigned char *)(v11 + 4) = BYTE4(a3);
            v11 += 24;
            --v10;
          }
          while (v10);
        }
        sub_256FA81C4(a1, a2, a3);
      }
    }
    else
    {
      sub_256FA81D8(a1, a2, a3);
      return MEMORY[0x263F8EE78];
    }
    return v9;
  }
  return result;
}

void sub_256F9B358()
{
  uint64_t v1 = *v0 + 1;
  if (__OFADD__(*v0, 1))
  {
    __break(1u);
    __break(1u);
    __break(1u);
  }
  else
  {
    *uint64_t v0 = v1;
    if (v1 < v0[1])
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      uint64_t inited = swift_initStackObject();
      uint64_t v3 = MEMORY[0x263F8D6C8];
      *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
      *(void *)(inited + 56) = v3;
      *(void *)(inited + 64) = &protocol witness table for Int;
      *(void *)(inited + 32) = v1;
      type metadata accessor for Stream();
      swift_initStackObject();
      mlx_default_device();
    }
  }
}

void sub_256F9B47C(void *a1@<X8>)
{
  sub_256F9B358();
  *a1 = v2;
}

uint64_t MLXArray.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  mlx_array_ndim(v3);
  int v4 = mlx_array_dim(v3, 0);
  *a1 = -1;
  a1[1] = v4;
  a1[2] = v1;
  return swift_retain();
}

uint64_t sub_256F9B510@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  mlx_array_ndim(v4);
  uint64_t result = mlx_array_dim(v4, 0);
  *a1 = -1;
  a1[1] = (int)result;
  a1[2] = v3;
  return result;
}

uint64_t sub_256F9B56C()
{
  return 0;
}

uint64_t sub_256F9B574()
{
  return 2;
}

uint64_t sub_256F9B57C()
{
  uint64_t v1 = sub_256FA72BC(*v0);
  swift_release();
  return v1;
}

uint64_t sub_256F9B5B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_256FA7974(a1, a2, a3);
}

uint64_t sub_256F9B5D8()
{
  return sub_25704A980();
}

uint64_t sub_256F9B5FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = MLXArray.shape.getter();
  uint64_t v3 = Array<A>.asInt32.getter(v2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC870);
  sub_256FABF40(&qword_269FDC878, &qword_269FDC870);
  sub_25704AB80();
  if ((v12 & 1) == 0) {
    goto LABEL_2;
  }
  sub_25704B1F0();
  swift_unknownObjectRetain_n();
  uint64_t v5 = swift_dynamicCastClass();
  if (!v5)
  {
    swift_unknownObjectRelease();
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  uint64_t v6 = *(void *)(v5 + 16);
  swift_release();
  if (__OFSUB__(v12 >> 1, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v6 != (v12 >> 1) - v11)
  {
LABEL_15:
    swift_unknownObjectRelease_n();
LABEL_2:
    uint64_t v4 = sub_256FA6AE0(v9, v10, v11, v12);
    goto LABEL_9;
  }
  uint64_t v4 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v4)
  {
    swift_unknownObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
LABEL_9:
  swift_unknownObjectRelease();
  BOOL v7 = sub_256FA59AC(v3, v4);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    if (!*(void *)(v4 + 16)) {
      swift_release();
    }
    mlx_reshape();
  }
  swift_retain();
  swift_release();
  return v1;
}

BOOL sub_256F9B82C(_DWORD *a1)
{
  return *a1 == 1;
}

uint64_t MLXArray.resolve(index:axis:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    if (!((unint64_t)result >> 31)) {
      mlx_array_from_int();
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t result = mlx_array_ndim(v5);
  if ((a2 & 0x8000000000000000) == 0)
  {
LABEL_7:
    if (a2 <= 0x7FFFFFFF)
    {
      int v7 = mlx_array_dim(v5, a2);
      BOOL v6 = __OFADD__(v3, v7);
      uint64_t result = v3 + v7;
      if (!v6)
      {
        if (result >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (result <= 0x7FFFFFFF) {
            mlx_array_from_int();
          }
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v6 = __OFADD__(a2, result);
  a2 += result;
  if (!v6)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
LABEL_18:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.resolve(index:axis:)(int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) == 0) {
    mlx_array_from_int();
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t result = mlx_array_ndim(v5);
  if ((a2 & 0x8000000000000000) == 0) {
    goto LABEL_6;
  }
  BOOL v7 = __OFADD__(a2, result);
  a2 += result;
  if (!v7)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_10;
    }
LABEL_6:
    if (a2 <= 0x7FFFFFFF)
    {
      int v8 = mlx_array_dim(v5, a2);
      BOOL v7 = __OFADD__(a1, v8);
      uint64_t result = (a1 + v8);
      if (!v7) {
        mlx_array_from_int();
      }
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256F9BA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_256F92F24(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC848);
  if (swift_dynamicCast())
  {
    unsigned int v5 = sub_256F9BD20(v13, a2, v2);
    uint64_t v6 = sub_256F9BD20(v14, a2, v2);
LABEL_3:
    a2 = v6;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return v5 | (unint64_t)(a2 << 32);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC850);
  if (swift_dynamicCast())
  {
    uint64_t v4 = v14;
    unsigned int v5 = sub_256F9BD20(v13, a2, v2);
    int v7 = sub_256F9BD20(v14, a2, v2);
    a2 = (v7 + 1);
    if (!__OFADD__(v7, 1)) {
      goto LABEL_13;
    }
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC858);
  if (swift_dynamicCast())
  {
    a2 = sub_256F9BD20(v13, a2, v2);
LABEL_12:
    unsigned int v5 = 0;
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC860);
  if (swift_dynamicCast())
  {
    int v8 = sub_256F9BD20(v13, a2, v2);
    a2 = (v8 + 1);
    if (!__OFADD__(v8, 1)) {
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC868);
  if (swift_dynamicCast())
  {
    unsigned int v5 = sub_256F9BD20(v13, a2, v2);
    uint64_t v10 = *(void *)(v2 + 16);
    uint64_t v11 = mlx_array_ndim(v10);
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
    BOOL v12 = __OFADD__(a2, v11);
    a2 += v11;
    if (v12)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (a2 >= (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_18:
      if (a2 <= 0x7FFFFFFF)
      {
        uint64_t v6 = mlx_array_dim(v10, a2);
        goto LABEL_3;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  sub_256F92F24(v4, (uint64_t)&v13);
  sub_25704ADF0();
  sub_25704A850();
  sub_25704AF60();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  return result;
}

uint64_t sub_256F9BD20(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (!(a1 >> 31)) {
      return v3;
    }
    __break(1u);
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t result = mlx_array_ndim(v5);
  if ((a2 & 0x8000000000000000) == 0) {
    goto LABEL_7;
  }
  BOOL v7 = __OFADD__(a2, result);
  a2 += result;
  if (!v7)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = mlx_array_dim(v5, a2);
      BOOL v7 = __OFADD__(v3, (int)result);
      v3 += (int)result;
      if (!v7)
      {
        if (v3 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v3 <= 0x7FFFFFFF) {
            return v3;
          }
          goto LABEL_16;
        }
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t MLXArray.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = mlx_array_ndim(*(void *)(v2 + 16));
  if ((a2 & 0x8000000000000000) == 0 || (BOOL v6 = __OFADD__(a2, result), a2 += result, !v6))
  {
    uint64_t result = MLXArray.resolve(index:axis:)(a1, a2);
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      mlx_take();
    }
    __break(1u);
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256F9BEC8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  uint64_t v5 = MLXArray.subscript.getter(v3, v4);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_256F9BF38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  unint64_t v4 = a3[1];
  uint64_t v7 = a3[2];
  swift_retain();
  uint64_t v5 = swift_retain();
  return MLXArray.subscript.setter(v5, v3, v4, &v7);
}

uint64_t MLXArray.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = *a4;
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v4 + 16));
  sub_256FE5804(dtype, &v15);
  int v11 = v15;
  uint64_t v12 = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(v12, v16);
  if (v11 != v16[0])
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = mlx_array_ndim(*(void *)(v6 + 16));
  if ((a3 & 0x8000000000000000) == 0 || (BOOL v14 = __OFADD__(a3, result), a3 += result, !v14))
  {
    uint64_t v5 = (void *)MLXArray.shape.getter();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
LABEL_9:
    uint64_t result = (uint64_t)sub_256FA81B0(v5);
    uint64_t v5 = (void *)result;
    if ((a3 & 0x8000000000000000) == 0)
    {
LABEL_6:
      if (a3 < v5[2])
      {
        v5[a3 + 4] = 1;
        uint64_t v15 = v9;
        sub_256F9B5FC();
        swift_release();
        Array<A>.asInt32.getter((uint64_t)v5);
        swift_bridgeObjectRelease();
        type metadata accessor for Stream();
        swift_initStackObject();
        mlx_default_device();
      }
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
  }
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

void (*MLXArray.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[1] = a2;
  v9[2] = a3;
  uint64_t v10 = *a4;
  void v9[3] = v4;
  v9[4] = v10;
  swift_retain();
  *uint64_t v9 = MLXArray.subscript.getter(a2, a3);
  return sub_256F9C388;
}

void sub_256F9C388(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = **a1;
  uint64_t v8 = v3;
  if (a2)
  {
    uint64_t v7 = swift_retain();
    MLXArray.subscript.setter(v7, v5, v4, &v8);
    swift_release();
  }
  else
  {
    MLXArray.subscript.setter(v6, v5, v4, &v8);
  }
  free(v2);
}

uint64_t MLXArray.subscript.getter(char *a1, char *a2)
{
  unint64_t v6 = *(void *)v2;
  uint64_t v7 = mlx_array_ndim(*(void *)(v2 + 16));
  uint64_t v8 = v7;
  if (v7 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v18 = (uint64_t)a1;
  unint64_t v19 = (unint64_t)a2;
  if (v7)
  {
    uint64_t v9 = 0;
    a2 = (char *)MEMORY[0x263F8EE78];
    a1 = (char *)MEMORY[0x263F8EE78];
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_256FA5A20(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v11 = *((void *)v3 + 2);
      unint64_t v10 = *((void *)v3 + 3);
      if (v11 >= v10 >> 1) {
        uint64_t v3 = sub_256FA5A20((char *)(v10 > 1), v11 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v11 + 1;
      *(_DWORD *)&v3[4 * v11 + 32] = 0;
      unint64_t v6 = *(void *)(v2 + 16);
      mlx_array_ndim(v6);
      if (v9 == 0x80000000) {
        break;
      }
      int v12 = mlx_array_dim(v6, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a1 = sub_256FA5A20(0, *((void *)a1 + 2) + 1, 1, a1);
      }
      unint64_t v14 = *((void *)a1 + 2);
      unint64_t v13 = *((void *)a1 + 3);
      if (v14 >= v13 >> 1) {
        a1 = sub_256FA5A20((char *)(v13 > 1), v14 + 1, 1, a1);
      }
      *((void *)a1 + 2) = v14 + 1;
      *(_DWORD *)&a1[4 * v14 + 32] = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = sub_256FA5A20(0, *((void *)a2 + 2) + 1, 1, a2);
      }
      unint64_t v16 = *((void *)a2 + 2);
      unint64_t v15 = *((void *)a2 + 3);
      if (v16 >= v15 >> 1) {
        a2 = sub_256FA5A20((char *)(v15 > 1), v16 + 1, 1, a2);
      }
      ++v9;
      *((void *)a2 + 2) = v16 + 1;
      *(_DWORD *)&a2[4 * v16 + 32] = 1;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  a2 = (char *)MEMORY[0x263F8EE78];
  a1 = (char *)MEMORY[0x263F8EE78];
  uint64_t v3 = (char *)MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t result = mlx_array_ndim(*(void *)(v2 + 16));
  unint64_t v6 = v19;
  if ((v19 & 0x8000000000000000) == 0 || (unint64_t v6 = v19 + result, !__OFADD__(v19, result)))
  {
    uint64_t v8 = sub_256F9BA60(v18, v6);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
LABEL_24:
      if (v6 < *((void *)v3 + 2))
      {
        *(_DWORD *)&v3[4 * v6 + 32] = v8;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_26;
        }
        goto LABEL_35;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      a1 = sub_256FA8120((uint64_t)a1);
LABEL_26:
      if (v6 >= *((void *)a1 + 2))
      {
        __break(1u);
      }
      else
      {
        *(_DWORD *)&a1[4 * v6 + 32] = HIDWORD(v8);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
LABEL_28:
          if (v6 < *((void *)a2 + 2))
          {
            *(_DWORD *)&a2[4 * v6 + 32] = 1;
            mlx_slice();
          }
          __break(1u);
          goto LABEL_39;
        }
      }
      uint64_t result = (uint64_t)sub_256FA8120((uint64_t)a2);
      a2 = (char *)result;
      goto LABEL_28;
    }
LABEL_32:
    uint64_t v3 = sub_256FA8120((uint64_t)v3);
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256F9C790@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *(char **)(a1 + 40);
  swift_retain();
  uint64_t v5 = MLXArray.subscript.getter((char *)a1, v4);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_256F9C800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256F92F24(a3, (uint64_t)v8);
  int64_t v4 = *(void *)(a3 + 40);
  uint64_t v7 = *(void *)(a3 + 48);
  swift_retain();
  uint64_t v5 = swift_retain();
  return MLXArray.subscript.setter(v5, (uint64_t)v8, v4, &v7);
}

uint64_t MLXArray.subscript.setter(uint64_t a1, uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v10 = *a4;
  uint64_t result = mlx_array_ndim(*(void *)(v4 + 16));
  if ((a3 & 0x8000000000000000) == 0)
  {
LABEL_4:
    uint64_t v33 = v10;
    uint64_t v13 = MEMORY[0x263F8EE78];
    if (!a3)
    {
      uint64_t v5 = MEMORY[0x263F8EE78];
      int64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v6) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
    v41[0] = MEMORY[0x263F8EE78];
    swift_retain();
    sub_256F90A78(0, a3, 0);
    int64_t v6 = 0;
    uint64_t v5 = v41[0];
    while (a3 != v6)
    {
      uint64_t v14 = *(void *)(v34 + 16);
      mlx_array_ndim(v14);
      if (v6 == 0x80000000) {
        goto LABEL_31;
      }
      unint64_t v7 = mlx_array_dim(v14, v6);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_32;
      }
      v41[0] = v5;
      unint64_t v16 = *(void *)(v5 + 16);
      unint64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_256F90A78(v15 > 1, v16 + 1, 1);
        uint64_t v5 = v41[0];
      }
      ++v6;
      *(void *)(v5 + 16) = v16 + 1;
      uint64_t v17 = v5 + 16 * v16;
      *(void *)(v17 + 32) = 0;
      *(void *)(v17 + 40) = (int)v7;
      if (a3 == v6)
      {
        swift_release();
        int64_t v6 = *(void *)(v5 + 16);
        if (v6)
        {
LABEL_13:
          v41[0] = v13;
          sub_256F90A10(0, v6, 0);
          uint64_t v18 = 0;
          a3 = v41[0];
          v19.i64[0] = 0xFFFFFFFFLL;
          v19.i64[1] = 0xFFFFFFFFLL;
          do
          {
            int64_t v20 = (int8x16_t *)(v5 + 16 * v18);
            int8x16_t v21 = v20[2];
            uint64_t v22 = v20[2].i64[0];
            if (v22 > 0x7FFFFFFF) {
              goto LABEL_33;
            }
            if (v22 < (uint64_t)0xFFFFFFFF80000000 || v21.i64[1] < (uint64_t)0xFFFFFFFF80000000) {
              goto LABEL_34;
            }
            if (v21.i64[1] > 0x7FFFFFFF) {
              goto LABEL_35;
            }
            v41[0] = a3;
            unint64_t v25 = *(void *)(a3 + 16);
            unint64_t v24 = *(void *)(a3 + 24);
            unint64_t v7 = v25 + 1;
            if (v25 >= v24 >> 1)
            {
              int8x16_t v32 = v21;
              sub_256F90A10(v24 > 1, v25 + 1, 1);
              int8x16_t v21 = v32;
              v19.i64[0] = 0xFFFFFFFFLL;
              v19.i64[1] = 0xFFFFFFFFLL;
              a3 = v41[0];
            }
            *(void *)(a3 + 16) = v7;
            uint64_t v26 = (int8x16_t *)(a3 + 24 * v25);
            _OWORD v26[2] = vandq_s8(v21, v19);
            ++v18;
            v26[3].i8[4] = 65;
            v26[3].i32[0] = 0;
          }
          while (v6 != v18);
          swift_bridgeObjectRelease();
LABEL_26:
          sub_256F92F24(a2, (uint64_t)v41);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7D8);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7E0);
          swift_dynamicCast();
          uint64_t v27 = v39;
          uint64_t v28 = v40;
          __swift_project_boxed_opaque_existential_1(v38, v39);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 8))(v35, v27, v28);
          uint64_t v5 = v35[0];
          int64_t v6 = v35[1];
          unint64_t v7 = v36 | ((unint64_t)v37 << 32);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
          sub_256FA81C4(v5, v6, v7);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_27:
            unint64_t v30 = *(void *)(a3 + 16);
            unint64_t v29 = *(void *)(a3 + 24);
            if (v30 >= v29 >> 1) {
              a3 = (int64_t)sub_256FA5E5C((void *)(v29 > 1), v30 + 1, 1, (void *)a3);
            }
            *(void *)(a3 + 16) = v30 + 1;
            int64_t v31 = a3 + 24 * v30;
            *(void *)(v31 + 32) = v5;
            *(void *)(v31 + 40) = v6;
            *(unsigned char *)(v31 + 52) = BYTE4(v7);
            *(_DWORD *)(v31 + 48) = v7;
            v41[0] = v33;
            sub_256F9CC7C();
          }
LABEL_37:
          a3 = (int64_t)sub_256FA5E5C(0, *(void *)(a3 + 16) + 1, 1, (void *)a3);
          goto LABEL_27;
        }
LABEL_25:
        swift_bridgeObjectRelease();
        a3 = MEMORY[0x263F8EE78];
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  BOOL v12 = __OFADD__(a3, result);
  a3 += result;
  if (!v12)
  {
    if (a3 < 0) {
      goto LABEL_36;
    }
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t Range<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a2 <= 0x7FFFFFFF)
  {
    *(void *)a3 = result;
    *(void *)(a3 + 8) = a2;
    *(_DWORD *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 20) = 65;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_256F9CC7C()
{
}

void (*MLXArray.subscript.modify(void *a1, char *a2, char *a3, void *a4))(long long **a1, char a2)
{
  uint64_t v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[11] = a3;
  v9[12] = v4;
  v9[13] = *a4;
  sub_256F92F24((uint64_t)a2, (uint64_t)v9);
  swift_retain();
  v9[10] = MLXArray.subscript.getter(a2, a3);
  return sub_256F9D158;
}

void sub_256F9D158(long long **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 10);
  if (a2)
  {
    uint64_t v4 = *((void *)v2 + 13);
    int64_t v5 = *((void *)v2 + 11);
    sub_256FA81EC(*a1, (uint64_t)v2 + 40);
    uint64_t v8 = v4;
    uint64_t v6 = swift_retain();
    MLXArray.subscript.setter(v6, (uint64_t)v2 + 40, v5, &v8);
    swift_release();
  }
  else
  {
    int64_t v7 = *((void *)v2 + 11);
    uint64_t v8 = *((void *)v2 + 13);
    MLXArray.subscript.setter(v3, (uint64_t)v2, v7, &v8);
  }
  free(v2);
}

uint64_t MLXArray.subscript.getter(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, int64_t a6, uint64_t *a7)
{
  uint64_t v12 = *a7;
  unint64_t v33 = v7;
  uint64_t v13 = *(void *)v7;
  uint64_t v14 = mlx_array_ndim(*(void *)(v7 + 16));
  uint64_t v15 = v14;
  if (v14 < 0) {
    goto LABEL_64;
  }
  char v27 = (char)a4;
  char v28 = (char)a2;
  int64_t v29 = a6;
  uint64_t v30 = (uint64_t)a5;
  if (v14)
  {
    uint64_t v12 = 0;
    a5 = (char *)MEMORY[0x263F8EE78];
    unint64_t v7 = 0x80000000;
    a6 = 1;
    a4 = (char *)MEMORY[0x263F8EE78];
    a2 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = sub_256FA5A20(0, *((void *)a2 + 2) + 1, 1, a2);
      }
      unint64_t v17 = *((void *)a2 + 2);
      unint64_t v16 = *((void *)a2 + 3);
      if (v17 >= v16 >> 1) {
        a2 = sub_256FA5A20((char *)(v16 > 1), v17 + 1, 1, a2);
      }
      *((void *)a2 + 2) = v17 + 1;
      *(_DWORD *)&a2[4 * v17 + 32] = 0;
      uint64_t v13 = *(void *)(v33 + 16);
      mlx_array_ndim(v13);
      if (v12 == 0x80000000) {
        break;
      }
      int v18 = mlx_array_dim(v13, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a4 = sub_256FA5A20(0, *((void *)a4 + 2) + 1, 1, a4);
      }
      unint64_t v20 = *((void *)a4 + 2);
      unint64_t v19 = *((void *)a4 + 3);
      if (v20 >= v19 >> 1) {
        a4 = sub_256FA5A20((char *)(v19 > 1), v20 + 1, 1, a4);
      }
      *((void *)a4 + 2) = v20 + 1;
      *(_DWORD *)&a4[4 * v20 + 32] = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a5 = sub_256FA5A20(0, *((void *)a5 + 2) + 1, 1, a5);
      }
      unint64_t v22 = *((void *)a5 + 2);
      unint64_t v21 = *((void *)a5 + 3);
      if (v22 >= v21 >> 1) {
        a5 = sub_256FA5A20((char *)(v21 > 1), v22 + 1, 1, a5);
      }
      ++v12;
      *((void *)a5 + 2) = v22 + 1;
      *(_DWORD *)&a5[4 * v22 + 32] = 1;
      if (v15 == v12) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  a5 = (char *)MEMORY[0x263F8EE78];
  a4 = (char *)MEMORY[0x263F8EE78];
  a2 = (char *)MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t v23 = mlx_array_ndim(*(void *)(v33 + 16));
  a6 = v30;
  unint64_t v7 = v29;
  uint64_t v13 = a1;
  uint64_t v12 = a3;
  if (v29 < 0)
  {
    unint64_t v7 = v29 + v23;
    if (__OFADD__(v29, v23)) {
      goto LABEL_76;
    }
  }
  if (v30 < 1) {
    goto LABEL_34;
  }
  if (v28) {
    uint64_t v13 = 0;
  }
  if (v13 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_68;
  }
  if (v13 > 0x7FFFFFFF) {
    goto LABEL_69;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_70;
  }
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_71;
  }
LABEL_29:
  if (v7 < *((void *)a2 + 2))
  {
    *(_DWORD *)&a2[4 * v7 + 32] = v13;
    if (v27) {
      goto LABEL_49;
    }
    if (v12 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_73;
    }
    if (v12 <= 0x7FFFFFFF) {
      goto LABEL_51;
    }
    __break(1u);
LABEL_34:
    if (v28)
    {
      uint64_t v24 = *(void *)(v33 + 16);
      uint64_t result = mlx_array_ndim(v24);
      uint64_t v26 = v7;
      if ((v7 & 0x8000000000000000) != 0)
      {
        uint64_t v26 = v7 + result;
        if (__OFADD__(v7, result)) {
          goto LABEL_89;
        }
        if (v26 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_86;
        }
      }
      if (v26 > 0x7FFFFFFF) {
        goto LABEL_87;
      }
      uint64_t v13 = (int)mlx_array_dim(v24, v26) - 1;
    }
    if (v13 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v13 <= 0x7FFFFFFF)
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_80;
          }
          goto LABEL_44;
        }
LABEL_79:
        a2 = sub_256FA8120((uint64_t)a2);
        if ((v7 & 0x8000000000000000) != 0)
        {
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
LABEL_44:
        if (v7 >= *((void *)a2 + 2)) {
          goto LABEL_81;
        }
        *(_DWORD *)&a2[4 * v7 + 32] = v13;
        if (v27) {
          goto LABEL_55;
        }
        if (v12 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v12 > 0x7FFFFFFF)
          {
            __break(1u);
LABEL_49:
            uint64_t v13 = *(void *)(v33 + 16);
            uint64_t result = mlx_array_ndim(v13);
            if (v7 >> 31) {
              goto LABEL_85;
            }
            uint64_t v12 = mlx_array_dim(v13, v7);
LABEL_51:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_74;
            }
            goto LABEL_52;
          }
          goto LABEL_57;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        uint64_t result = (uint64_t)sub_256FA8120((uint64_t)a4);
        a4 = (char *)result;
        goto LABEL_58;
      }
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  while (1)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    a4 = sub_256FA8120((uint64_t)a4);
LABEL_52:
    if (v7 >= *((void *)a4 + 2))
    {
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    *(_DWORD *)&a4[4 * v7 + 32] = v12;
    if (!((unint64_t)a6 >> 31)) {
      goto LABEL_60;
    }
    __break(1u);
LABEL_55:
    uint64_t v13 = *(void *)(v33 + 16);
    uint64_t result = mlx_array_ndim(v13);
    if (v7 >> 31) {
      goto LABEL_88;
    }
    uint64_t v12 = ~mlx_array_dim(v13, v7);
LABEL_57:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_83;
    }
LABEL_58:
    if (v7 >= *((void *)a4 + 2)) {
      break;
    }
    *(_DWORD *)&a4[4 * v7 + 32] = v12;
    if (a6 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_65:
      __break(1u);
LABEL_66:
      a5 = sub_256FA8120((uint64_t)a5);
      goto LABEL_61;
    }
LABEL_60:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_66;
    }
LABEL_61:
    if (v7 < *((void *)a5 + 2))
    {
      *(_DWORD *)&a5[4 * v7 + 32] = a6;
      mlx_slice();
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    a2 = sub_256FA8120((uint64_t)a2);
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_29;
    }
LABEL_71:
    __break(1u);
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256F9D790@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = (char *)*(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (char *)*(unsigned __int8 *)(a1 + 24);
  unint64_t v7 = *(char **)(a1 + 32);
  int64_t v8 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  swift_retain();
  uint64_t v9 = MLXArray.subscript.getter(v3, v4, v5, v6, v7, v8, &v11);
  uint64_t result = swift_release();
  *a2 = v9;
  return result;
}

uint64_t sub_256F9D830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a3;
  char v4 = *(unsigned char *)(a3 + 8);
  uint64_t v5 = *(void *)(a3 + 16);
  char v6 = *(unsigned char *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(a3 + 40);
  swift_retain();
  uint64_t v9 = (unsigned __int8 *)swift_retain();
  return MLXArray.subscript.setter(v9, v3, v4, v5, v6, v7, v8);
}

uint64_t MLXArray.subscript.setter(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  swift_release();
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v9 + 16));
  sub_256FE5804(dtype, v66);
  uint64_t v16 = v66[0];
  uint64_t v17 = mlx_array_get_dtype(*((void *)a1 + 2));
  sub_256FE5804(v17, &v65);
  if (v16 != v65) {
    goto LABEL_76;
  }
  char v57 = a5;
  int v18 = (unsigned __int8 *)MEMORY[0x263F8EE78];
  *(void *)char v66 = MEMORY[0x263F8EE78];
  uint64_t v19 = mlx_array_ndim(*(void *)(v9 + 16));
  if (a7 < 0)
  {
    BOOL v20 = __OFADD__(a7, v19);
    a7 += v19;
    if (v20)
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (a7 < 0) {
      goto LABEL_77;
    }
  }
  uint64_t v56 = a2;
  uint64_t v59 = a6;
  uint64_t v64 = v9;
  if (a7)
  {
    int64_t v21 = a7 + 1;
    if (!__OFADD__(a7, 1))
    {
      unint64_t v22 = 0;
      __leunint64_t n = 4 * a7 + 4;
      uint64_t v62 = a7;
      while (1)
      {
        if (v22 == a7)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
        a1 = *(unsigned __int8 **)(v9 + 16);
        mlx_array_ndim((uint64_t)a1);
        if (v22 == 0x80000000) {
          goto LABEL_73;
        }
        uint64_t v23 = mlx_array_dim((uint64_t)a1, v22);
        a1 = (unsigned __int8 *)v23;
        if ((v23 & 0x80000000) != 0) {
          goto LABEL_74;
        }
        if (!v23)
        {
          uint64_t v24 = (uint64_t)v18;
          goto LABEL_23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
        uint64_t v24 = swift_allocObject();
        int64_t v25 = _swift_stdlib_malloc_size((const void *)v24);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 29;
        }
        uint64_t v27 = v26 >> 2;
        *(_DWORD *)(v24 + 32) = 0;
        uint64_t v28 = v24 + 32;
        *(void *)(v24 + 16) = (int)a1;
        *(void *)(v24 + 24) = 2 * v27;
        if (a1 != 1)
        {
          if (a1 < 9)
          {
            LODWORD(v29) = 0;
            uint64_t v30 = 1;
LABEL_21:
            unsigned __int8 v37 = (_DWORD *)(v28 + 4);
            int v38 = v29 + 1;
            uint64_t v39 = (int)a1 - v30;
            do
            {
              *v37++ = v38++;
              --v39;
            }
            while (v39);
            goto LABEL_23;
          }
          unint64_t v29 = ((int)a1 - 1) & 0xFFFFFFFFFFFFFFF8;
          v28 += 4 * v29;
          uint64_t v30 = v29 | 1;
          int64_t v31 = (int32x4_t *)(v24 + 52);
          unint64_t v32 = v29;
          int32x4_t v33 = (int32x4_t)xmmword_25706E4D0;
          v34.i64[0] = 0x100000001;
          v34.i64[1] = 0x100000001;
          v35.i64[0] = 0x500000005;
          v35.i64[1] = 0x500000005;
          v36.i64[0] = 0x800000008;
          v36.i64[1] = 0x800000008;
          do
          {
            v31[-1] = vaddq_s32(v33, v34);
            *int64_t v31 = vaddq_s32(v33, v35);
            int32x4_t v33 = vaddq_s32(v33, v36);
            v31 += 2;
            v32 -= 8;
          }
          while (v32);
          if ((int)a1 - 1 != v29) {
            goto LABEL_21;
          }
        }
LABEL_23:
        if (v21 < 0) {
          goto LABEL_95;
        }
        uint64_t v40 = sub_25704AAA0();
        *(void *)(v40 + 16) = v21;
        memset_pattern16((void *)(v40 + 32), &unk_25704DBE0, __len);
        if (v21)
        {
          unsigned int v65 = v18;
          sub_256F908EC(0, v21, 0);
          uint64_t v41 = 0;
          a1 = v65;
          unint64_t v8 = *((void *)v65 + 2);
          do
          {
            uint64_t v42 = *(int *)(v40 + 4 * v41 + 32);
            unsigned int v65 = a1;
            unint64_t v43 = *((void *)a1 + 3);
            if (v8 >= v43 >> 1)
            {
              sub_256F908EC(v43 > 1, v8 + 1, 1);
              a1 = v65;
            }
            ++v41;
            *((void *)a1 + 2) = v8 + 1;
            *(void *)&a1[8 * v8++ + 32] = v42;
          }
          while (v21 != v41);
          swift_bridgeObjectRelease();
          uint64_t v9 = v64;
          a7 = v62;
        }
        else
        {
          swift_bridgeObjectRelease();
          a1 = v18;
        }
        uint64_t v16 = *(void *)(v24 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a1 = (unsigned __int8 *)sub_256FA81B0(a1);
        }
        if (v22 >= *((void *)a1 + 2)) {
          goto LABEL_75;
        }
        *(void *)&a1[8 * v22 + 32] = v16;
        sub_256FA9DA8(v24, (uint64_t)a1);
        swift_release();
        uint64_t v44 = swift_bridgeObjectRelease();
        a1 = v66;
        MEMORY[0x25A2B0A90](v44);
        if (*(void *)((*(void *)v66 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v66 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
          sub_25704AA60();
        ++v22;
        sub_25704AAC0();
        sub_25704AA30();
        if (v22 == a7) {
          goto LABEL_37;
        }
      }
    }
    __break(1u);
    __break(1u);
    goto LABEL_87;
  }
LABEL_37:
  if (v59 >= 1)
  {
    uint64_t v16 = v56;
    if (a3) {
      uint64_t v16 = 0;
    }
    uint64_t v45 = a4;
    if (v57)
    {
      a1 = *(unsigned __int8 **)(v9 + 16);
      mlx_array_ndim((uint64_t)a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      uint64_t v45 = (int)mlx_array_dim((uint64_t)a1, a7);
    }
LABEL_49:
    if (v16 < 0)
    {
      a1 = *(unsigned __int8 **)(v9 + 16);
      mlx_array_ndim((uint64_t)a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      int v46 = mlx_array_dim((uint64_t)a1, a7);
      BOOL v20 = __OFADD__(v16, v46);
      v16 += v46;
      if (v20)
      {
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
    }
    if (v45 < 0)
    {
      a1 = *(unsigned __int8 **)(v9 + 16);
      mlx_array_ndim((uint64_t)a1);
      if (a7 > 0x7FFFFFFF)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      int v47 = mlx_array_dim((uint64_t)a1, a7);
      BOOL v20 = __OFADD__(v45, v47);
      v45 += v47;
      if (v20)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
    }
    if (__OFADD__(a7, 1)) {
      goto LABEL_78;
    }
    uint64_t v61 = v45;
    uint64_t v48 = v16;
    uint64_t v49 = sub_256F9AF88(1u, a7 + 1);
    int64_t v50 = *(void *)(v49 + 16);
    if (v50)
    {
      unsigned int v65 = v18;
      a1 = (unsigned __int8 *)&v65;
      sub_256F908EC(0, v50, 0);
      uint64_t v16 = 0;
      unint64_t v8 = (unint64_t)v65;
      unint64_t v51 = *((void *)v65 + 2);
      do
      {
        uint64_t v52 = *(int *)(v49 + 4 * v16 + 32);
        unsigned int v65 = (unsigned __int8 *)v8;
        unint64_t v53 = *(void *)(v8 + 24);
        if (v51 >= v53 >> 1)
        {
          a1 = (unsigned __int8 *)&v65;
          sub_256F908EC(v53 > 1, v51 + 1, 1);
          unint64_t v8 = (unint64_t)v65;
        }
        ++v16;
        *(void *)(v8 + 16) = v51 + 1;
        *(void *)(v8 + 8 * v51++ + 32) = v52;
      }
      while (v50 != v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v8 = MEMORY[0x263F8EE78];
    }
    if (v48 > 0x7FFFFFFF)
    {
LABEL_79:
      __break(1u);
    }
    else if (v48 >= (uint64_t)0xFFFFFFFF80000000 && v61 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v61 <= 0x7FFFFFFF)
      {
        if (v59)
        {
          a1 = (unsigned __int8 *)sub_256FA6F94(v48 | ((unint64_t)v61 << 32), v59);
          uint64_t v16 = *((void *)a1 + 2);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_69;
          }
          goto LABEL_83;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        unint64_t v8 = (unint64_t)sub_256FA81B0((void *)v8);
LABEL_69:
        if (a7 >= *(void *)(v8 + 16))
        {
          __break(1u);
        }
        else
        {
          *(void *)(v8 + 8 * a7 + 32) = v16;
          swift_bridgeObjectRetain();
          sub_256FA9DA8((uint64_t)a1, v8);
          swift_release();
          uint64_t v54 = swift_bridgeObjectRelease();
          MEMORY[0x25A2B0A90](v54);
          if (*(void *)((*(void *)v66 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v66 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
            goto LABEL_71;
        }
        sub_25704AA60();
LABEL_71:
        sub_25704AAC0();
        sub_25704AA30();
        mlx_default_device();
      }
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v16 = v56;
  uint64_t v45 = a4;
  if (a3)
  {
    a1 = *(unsigned __int8 **)(v9 + 16);
    mlx_array_ndim((uint64_t)a1);
    if (a7 > 0x7FFFFFFF)
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    uint64_t v16 = (int)mlx_array_dim((uint64_t)a1, a7) - 1;
  }
  if ((v57 & 1) == 0) {
    goto LABEL_49;
  }
  a1 = *(unsigned __int8 **)(v9 + 16);
  mlx_array_ndim((uint64_t)a1);
  if (a7 <= 0x7FFFFFFF)
  {
    uint64_t v45 = (int)~mlx_array_dim((uint64_t)a1, a7);
    goto LABEL_49;
  }
LABEL_94:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
LABEL_95:
  uint64_t result = sub_25704AFC0();
  __break(1u);
  return result;
}

void (*MLXArray.subscript.modify(void *a1, uint64_t a2, char a3, uint64_t a4, char a5, char *a6, int64_t a7, uint64_t *a8))(unsigned __int8 ***a1, char a2)
{
  uint64_t v17 = malloc(0x40uLL);
  *a1 = v17;
  v17[3] = a6;
  v17[4] = a7;
  *((unsigned char *)v17 + 57) = a5;
  *((unsigned char *)v17 + 56) = a3;
  v17[1] = a2;
  v17[2] = a4;
  uint64_t v18 = *a8;
  v17[5] = v8;
  v17[6] = v18;
  uint64_t v20 = v18;
  swift_retain();
  void *v17 = MLXArray.subscript.getter(a2, (char *)(a3 & 1), a4, (char *)(a5 & 1), a6, a7, &v20);
  return sub_256F9E7EC;
}

void sub_256F9E7EC(unsigned __int8 ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (uint64_t)(*a1)[3];
  uint64_t v3 = (uint64_t)(*a1)[4];
  char v5 = *((unsigned char *)*a1 + 57);
  uint64_t v7 = (uint64_t)(*a1)[1];
  uint64_t v6 = (uint64_t)(*a1)[2];
  char v8 = *((unsigned char *)*a1 + 56);
  uint64_t v9 = **a1;
  char v10 = v8 & 1;
  char v11 = v5 & 1;
  if (a2)
  {
    uint64_t v12 = (unsigned __int8 *)swift_retain();
    MLXArray.subscript.setter(v12, v7, v10, v6, v11, v4, v3);
    swift_release();
  }
  else
  {
    MLXArray.subscript.setter(v9, v7, v8 & 1, v6, v5 & 1, v4, v3);
  }
  free(v2);
}

uint64_t sub_256F9E8BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 52);
    uint64_t v7 = *(unsigned int *)(a1 + 48);
    unint64_t v8 = v7 | (v6 << 32);
    v10[0] = v4;
    v10[1] = v5;
    char v12 = v6;
    int v11 = v7;
    sub_256FA81C4(v4, v5, v8);
    uint64_t v2 = sub_256F9E980(v2, v10);
    sub_256FA81D8(v4, v5, v8);
  }
  else if (v3)
  {
    v10[0] = *a2;
    return sub_256F9ED18(v2, a1);
  }
  else
  {
    swift_retain();
  }
  return v2;
}

uint64_t sub_256F9E980(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v5 = *((unsigned int *)a2 + 4) | ((unint64_t)*((unsigned __int8 *)a2 + 20) << 32);
  switch(*((unsigned __int8 *)a2 + 20) >> 6)
  {
    case 1:
      uint64_t v7 = mlx_array_ndim(*(void *)(a1 + 16));
      uint64_t v8 = sub_256F9AF88(0, v7);
      uint64_t v9 = MLXArray.shape.getter();
      uint64_t v10 = Array<A>.asInt32.getter(v9);
      swift_bridgeObjectRelease();
      uint64_t result = sub_256F9AF88(1u, v7);
      if (*(void *)(v10 + 16))
      {
        uint64_t v7 = result;
        LODWORD(v9) = *(_DWORD *)(v10 + 32);
        if ((v4 & 0x100000000) != 0) {
          int v2 = 0;
        }
        else {
          int v2 = v4;
        }
        if ((v4 & 0x100000000) != 0 && (v5 & 0x100000000) == 0)
        {
          if ((v5 & 0x80000000) != 0)
          {
            int v2 = v9 - 1;
            if (__OFSUB__(v9, 1)) {
              goto LABEL_47;
            }
          }
          else
          {
            int v2 = 0;
          }
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if (*(void *)(v8 + 16)) {
            goto LABEL_24;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t result = (uint64_t)sub_256FA8120(v8);
      uint64_t v8 = result;
      if (!*(void *)(result + 16)) {
        goto LABEL_41;
      }
LABEL_24:
      *(_DWORD *)(v8 + 32) = v2;
      if ((v3 & 0x100000000) != 0) {
        int v2 = v9;
      }
      else {
        int v2 = v3;
      }
      if ((v3 & 0x100000000) != 0 && (v5 & 0x100000000) == 0)
      {
        int v2 = v9;
        if ((v5 & 0x80000000) != 0)
        {
          int v16 = -(int)v9;
          if (__OFSUB__(0, v9)) {
            goto LABEL_48;
          }
          int v2 = v16 - 1;
          if (__OFSUB__(v16, 1)) {
            goto LABEL_49;
          }
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (*(void *)(v10 + 16)) {
          goto LABEL_34;
        }
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_42:
      uint64_t v10 = (uint64_t)sub_256FA8120(v10);
      if (!*(void *)(v10 + 16)) {
        goto LABEL_43;
      }
LABEL_34:
      *(_DWORD *)(v10 + 32) = v2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v5 & 0x100000000) != 0) {
        LODWORD(v5) = 1;
      }
      if (result)
      {
        if (*(void *)(v7 + 16)) {
          goto LABEL_38;
        }
        goto LABEL_45;
      }
LABEL_44:
      uint64_t result = (uint64_t)sub_256FA8120(v7);
      uint64_t v7 = result;
      if (*(void *)(result + 16))
      {
LABEL_38:
        *(_DWORD *)(v7 + 32) = v5;
        mlx_slice();
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      return result;
    case 2:
      swift_retain();
      mlx_take();
    case 3:
      if (v3 | v4) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v5 == 0xC000000000;
      }
      if (!v12) {
        mlx_expand_dims();
      }
      swift_retain();
      return a1;
    default:
      if ((v4 & 0x80000000) == 0) {
        mlx_array_from_int();
      }
      uint64_t v13 = *(void *)(a1 + 16);
      mlx_array_ndim(v13);
      int v14 = mlx_array_dim(v13, 0);
      BOOL v15 = __OFADD__(v4, v14);
      uint64_t result = (v4 + v14);
      if (!v15) {
        mlx_array_from_int();
      }
      goto LABEL_46;
  }
}

uint64_t sub_256F9ED18(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = MLXArray.shape.getter();
  uint64_t v9 = (unsigned int *)Array<A>.asInt32.getter(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_256FA24C4((uint64_t)v9, a2);
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_25;
  }
  int v12 = 0;
  int v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = v10 + 48;
  while (1)
  {
    if (v14 <= v11) {
      unint64_t v17 = *(void *)(v10 + 16);
    }
    else {
      unint64_t v17 = v14;
    }
    if (v14 >= v11) {
      goto LABEL_136;
    }
    unint64_t v16 = v14 + 1;
    if (((*(unsigned int *)(v15 + 24 * v14) | ((unint64_t)*(unsigned __int8 *)(v15 + 24 * v14 + 4) << 32)) & 0x4000000000) == 0) {
      break;
    }
LABEL_4:
    v12 |= v13;
    unint64_t v14 = v16;
    if (v16 == v11) {
      goto LABEL_16;
    }
  }
  if ((v13 & v12 & 1) == 0 && v16 != v11)
  {
    unint64_t v18 = v17 - 1;
    uint64_t v19 = (unsigned int *)(v10 + 72 + 24 * v14);
    while (1)
    {
      if (v18 == v14) {
        goto LABEL_136;
      }
      if (((*v19 | ((unint64_t)*((unsigned __int8 *)v19 + 4) << 32)) & 0x4000000000) != 0) {
        break;
      }
      BOOL v20 = v11 - 2 == v14++;
      v19 += 6;
      if ((v12 | v20)) {
        goto LABEL_16;
      }
    }
    unint64_t v16 = v14 + 2;
    int v13 = 1;
    goto LABEL_4;
  }
LABEL_16:
  uint64_t v21 = 0;
  uint64_t v22 = 48;
  while ((((unint64_t)*(unsigned __int8 *)(v10 + v22 + 4) << 32) & 0xC000000000) != 0x8000000000)
  {
    uint64_t v23 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      goto LABEL_138;
    }
    ++v21;
    v22 += 24;
    if (v23 == v11) {
      goto LABEL_25;
    }
  }
  if ((uint64_t)v11 < v21)
  {
    uint64_t v24 = -1;
    uint64_t v25 = v21;
    uint64_t v21 = *(void *)(v10 + 16);
    goto LABEL_96;
  }
  if (v11 == v21) {
    goto LABEL_25;
  }
  uint64_t v24 = 1;
  uint64_t v25 = *(void *)(v10 + 16);
LABEL_96:
  uint64_t v51 = 0;
  while (2)
  {
    BOOL v46 = __OFADD__(v51, v24);
    v51 += v24;
    if (v46) {
      goto LABEL_139;
    }
    if (v21 == v11) {
      goto LABEL_140;
    }
    unint64_t v52 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      goto LABEL_141;
    }
    unint64_t v53 = *(void *)(v10 + 16);
    if (v52 == v11) {
      goto LABEL_97;
    }
    uint64_t v54 = v10 + 72 + 24 * v21;
    unint64_t v53 = v52;
    while (2)
    {
      if (v53 >= v11)
      {
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        a1 = (unint64_t)sub_256FA8120(a1);
LABEL_30:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = (uint64_t)sub_256FA8120(v8);
        }
        char v75 = v9;
        unint64_t v76 = a1;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          int64_t v31 = (char *)v74;
        }
        else {
          int64_t v31 = sub_256FA8120(v74);
        }
        uint64_t v74 = (uint64_t)v31;
        uint64_t v32 = 0;
        a1 = 0;
        unint64_t v73 = v76 + 32;
        uint64_t v9 = (unsigned int *)(v70 + 48);
        while (1)
        {
          uint64_t v36 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_137;
          }
          uint64_t v3 = *((void *)v9 - 2);
          unint64_t v2 = *v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32);
          uint64_t v37 = (v2 >> 38) & 3;
          if (v37)
          {
            uint64_t v4 = *((void *)v9 - 1);
            if (v37 != 1)
            {
              if (v37 != 3 || v3 != 1 || v4 != 0 || (v2 & 0xFFFFFFFFFFLL) != 0xC000000000) {
                goto LABEL_164;
              }
              goto LABEL_46;
            }
            uint64_t v38 = *((void *)v75 + 2);
            uint64_t v39 = mlx_array_ndim(v38);
            uint64_t v40 = a1;
            if ((a1 & 0x8000000000000000) != 0)
            {
              uint64_t v40 = a1 + v39;
              if (__OFADD__(a1, v39)) {
                goto LABEL_152;
              }
              if (v40 < (uint64_t)0xFFFFFFFF80000000) {
                goto LABEL_142;
              }
            }
            if (v40 > 0x7FFFFFFF) {
              goto LABEL_143;
            }
            int v41 = mlx_array_dim(v38, v40);
            if ((v3 & 0x100000000) != 0) {
              int v42 = 0;
            }
            else {
              int v42 = v3;
            }
            if ((v3 & 0x100000000) != 0 && (v2 & 0x100000000) == 0)
            {
              if ((v2 & 0x80000000) != 0)
              {
                int v42 = v41 - 1;
                if (__OFSUB__(v41, 1)) {
                  goto LABEL_156;
                }
              }
              else
              {
                int v42 = 0;
              }
            }
            if ((a1 & 0x8000000000000000) != 0) {
              goto LABEL_144;
            }
            if (a1 >= *(void *)(v76 + 16)) {
              goto LABEL_145;
            }
            *(_DWORD *)(v73 + 4 * a1) = v42;
            if ((v4 & 0x100000000) != 0) {
              int v49 = v41;
            }
            else {
              int v49 = v4;
            }
            if ((v4 & 0x100000000) != 0 && (v2 & 0x100000000) == 0)
            {
              int v49 = v41;
              if ((v2 & 0x80000000) != 0)
              {
                int v50 = -v41;
                if (__OFSUB__(0, v41)) {
                  goto LABEL_157;
                }
                BOOL v46 = __OFSUB__(v50, 1);
                int v49 = v50 - 1;
                if (v46) {
                  goto LABEL_158;
                }
              }
            }
            if (a1 >= *(void *)(v8 + 16)) {
              goto LABEL_146;
            }
            *(_DWORD *)(v8 + 32 + 4 * a1) = v49;
            uint64_t v48 = v74;
            if (a1 >= *(void *)(v74 + 16)) {
              goto LABEL_147;
            }
            if ((v2 & 0x100000000) != 0) {
              int v47 = 1;
            }
            else {
              int v47 = v2;
            }
          }
          else
          {
            if (v71) {
              goto LABEL_90;
            }
            if ((v3 & 0x80000000) != 0)
            {
              unint64_t v2 = *((void *)v75 + 2);
              uint64_t v43 = mlx_array_ndim(v2);
              uint64_t v44 = a1;
              if ((a1 & 0x8000000000000000) != 0)
              {
                uint64_t v44 = a1 + v43;
                if (__OFADD__(a1, v43))
                {
                  __break(1u);
LABEL_162:
                  __break(1u);
                  goto LABEL_163;
                }
                if (v44 < (uint64_t)0xFFFFFFFF80000000) {
                  goto LABEL_153;
                }
              }
              if (v44 > 0x7FFFFFFF) {
                goto LABEL_154;
              }
              int v45 = mlx_array_dim(v2, v44);
              BOOL v46 = __OFADD__(v3, v45);
              LODWORD(v3) = v3 + v45;
              if (v46) {
                goto LABEL_155;
              }
            }
            if ((a1 & 0x8000000000000000) != 0) {
              goto LABEL_148;
            }
            if (a1 >= *(void *)(v76 + 16)) {
              goto LABEL_149;
            }
            *(_DWORD *)(v73 + 4 * a1) = v3;
            int v47 = v3 + 1;
            if (__OFADD__(v3, 1)) {
              goto LABEL_150;
            }
            if (a1 >= *(void *)(v8 + 16)) {
              goto LABEL_151;
            }
            uint64_t v48 = v8;
          }
          *(_DWORD *)(v48 + 4 * a1 + 32) = v47;
LABEL_90:
          BOOL v46 = __OFADD__(a1++, 1);
          if (v46)
          {
            __break(1u);
LABEL_93:
            swift_bridgeObjectRelease();
LABEL_94:
            mlx_slice();
          }
LABEL_46:
          v9 += 6;
          ++v32;
          if (v36 == v5) {
            goto LABEL_93;
          }
        }
      }
      if ((((unint64_t)*(unsigned __int8 *)(v54 + 4) << 32) & 0xC000000000) == 0x8000000000) {
        goto LABEL_97;
      }
      unint64_t v55 = v53 + 1;
      if (__OFADD__(v53, 1)) {
        goto LABEL_135;
      }
      ++v53;
      v54 += 24;
      if (v55 != v11) {
        continue;
      }
      break;
    }
    unint64_t v53 = *(void *)(v10 + 16);
LABEL_97:
    uint64_t v21 = v53;
    if (v53 != v25) {
      continue;
    }
    break;
  }
  if (v51 <= 0)
  {
LABEL_25:
    uint64_t v26 = MEMORY[0x263F8EE78];
    uint64_t v27 = (unsigned int *)a1;
    uint64_t v28 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v9 = v27;
    swift_retain();
    if (v28)
    {
      char v71 = 0;
      swift_bridgeObjectRelease();
      uint64_t v10 = v26;
    }
    else
    {
      swift_bridgeObjectRelease();
      char v71 = 0;
    }
    unint64_t v29 = mlx_array_ndim(*((void *)v9 + 2));
    a1 = sub_256F9AF88(0, v29);
    uint64_t v30 = MLXArray.shape.getter();
    uint64_t v8 = Array<A>.asInt32.getter(v30);
    swift_bridgeObjectRelease();
    uint64_t v74 = sub_256F9AF88(1u, v29);
    uint64_t v5 = *(void *)(v10 + 16);
    uint64_t v70 = v10;
    if (!v5) {
      goto LABEL_94;
    }
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_30;
    }
    goto LABEL_159;
  }
  uint64_t v56 = 24 * v11 + 24;
  uint64_t v57 = *(void *)(v10 + 16);
  while (((*(unsigned int *)(v10 + v56) | ((unint64_t)*(unsigned __int8 *)(v10 + v56 + 4) << 32)) & 0x4000000000) != 0)
  {
    v56 -= 24;
    if (!--v57)
    {
      swift_bridgeObjectRelease();
      __break(1u);
      break;
    }
  }
  if ((uint64_t)v11 < v57) {
    goto LABEL_162;
  }
  uint64_t v72 = (unsigned int *)v15;
  if (v57 != 0x8000000000000000)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = MEMORY[0x263F8EE78];
    for (unint64_t i = v72; ; i += 6)
    {
      uint64_t v63 = *((void *)i - 2);
      uint64_t v64 = *((void *)i - 1);
      unint64_t v65 = *i | ((unint64_t)*((unsigned __int8 *)i + 4) << 32);
      if (*((unsigned __int8 *)i + 4) >> 6 < 3uLL || v63 != 1 || v64 != 0 || v65 != 0xC000000000)
      {
        sub_256FA81C4(*((void *)i - 2), *((void *)i - 1), *i | ((unint64_t)*((unsigned __int8 *)i + 4) << 32));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_256F90A10(0, *(void *)(v58 + 16) + 1, 1);
        }
        unint64_t v61 = *(void *)(v58 + 16);
        unint64_t v60 = *(void *)(v58 + 24);
        if (v61 >= v60 >> 1) {
          sub_256F90A10(v60 > 1, v61 + 1, 1);
        }
        *(void *)(v58 + 16) = v61 + 1;
        uint64_t v62 = v58 + 24 * v61;
        *(void *)(v62 + 32) = v63;
        *(void *)(v62 + 40) = v64;
        *(unsigned char *)(v62 + 52) = BYTE4(v65);
        *(_DWORD *)(v62 + 48) = v65;
      }
      if (!--v57)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Stream();
        swift_initStackObject();
        mlx_default_device();
      }
    }
  }
LABEL_163:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
LABEL_164:
  sub_256FA81C4(v3, v4, v2);
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  MLXArrayIndexOperation.description.getter();
  sub_25704A850();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  return result;
}

uint64_t sub_256F9FD78(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = mlx_array_ndim(*(void *)(a1 + 16));
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 48;
  uint64_t v8 = *(void *)(a2 + 16);
  do
  {
    if ((((unint64_t)*(unsigned __int8 *)(a2 + v7 + 4) << 32) & 0xC000000000) == 0x8000000000) {
      return 0;
    }
    v7 += 24;
    --v8;
  }
  while (v8);
  uint64_t v58 = sub_256F9B5FC();
  swift_retain();
  uint64_t v63 = sub_256F9AF88(0, v5);
  uint64_t v9 = MLXArray.shape.getter();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_256F9AF88(1u, v5);
  int v12 = (char *)v11;
  if (v6 != 1 || (unsigned int v13 = *(unsigned __int8 *)(a2 + 52), v13 >> 6 != 1))
  {
    uint64_t v25 = MLXArray.shape.getter();
    uint64_t v26 = Array<A>.asInt32.getter(v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_256FA24C4(v26, a2);
    swift_bridgeObjectRelease();
    uint64_t v28 = swift_bridgeObjectRetain();
    int64_t v14 = sub_256FA954C(v28);
    swift_bridgeObjectRelease();
    if (!v14) {
      goto LABEL_36;
    }
    uint64_t v64 = v27;
    unint64_t v29 = mlx_array_ndim(*(void *)(a1 + 16));
    uint64_t v30 = (char *)v63;
    uint64_t v59 = v12;
    uint64_t v19 = (void *)sub_256F9B130(0, v29);
    uint64_t v31 = mlx_array_ndim(*(void *)(a1 + 16));
    unint64_t v16 = v31 - 1;
    if (__OFSUB__(v31, 1)) {
      goto LABEL_151;
    }
    uint64_t v32 = mlx_array_ndim(*(void *)(v58 + 16));
    unint64_t v33 = v32 - 1;
    uint64_t v34 = v64;
    if (__OFSUB__(v32, 1))
    {
LABEL_152:
      __break(1u);
    }
    else
    {
      if ((uint64_t)v16 >= v14)
      {
        uint64_t v35 = v31 + 3;
        do
        {
          unint64_t v36 = v35 - 4;
          if ((v33 & 0x8000000000000000) != 0)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v34 = v64;
              if ((v36 & 0x8000000000000000) != 0) {
                goto LABEL_35;
              }
            }
            else
            {
              uint64_t v19 = sub_256FA81B0(v19);
              uint64_t v34 = v64;
              if ((v36 & 0x8000000000000000) != 0)
              {
LABEL_35:
                __break(1u);
LABEL_36:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                MLXArray.shape.getter();
                mlx_default_device();
              }
            }
            if (v36 >= v19[2]) {
              goto LABEL_150;
            }
            v19[v35] = 1;
          }
          else
          {
            uint64_t v37 = *(void *)(v58 + 16);
            mlx_array_ndim(v37);
            if (v33 >> 31) {
              goto LABEL_147;
            }
            int v38 = mlx_array_dim(v37, v33);
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v34 = v64;
              if ((v36 & 0x8000000000000000) != 0) {
                goto LABEL_148;
              }
            }
            else
            {
              uint64_t v19 = sub_256FA81B0(v19);
              uint64_t v34 = v64;
              if ((v36 & 0x8000000000000000) != 0) {
                goto LABEL_148;
              }
            }
            if (v36 >= v19[2])
            {
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
            v19[v35] = v38;
            --v33;
          }
          --v35;
        }
        while ((uint64_t)v36 > v14);
        unint64_t v16 = v35 - 4;
        uint64_t v30 = (char *)v63;
      }
      uint64_t v18 = *(void *)(v34 + 16);
      uint64_t v62 = a1;
      if (v18)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = sub_256FA8120((uint64_t)v30);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = (uint64_t)sub_256FA8120(v10);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v59 = sub_256FA8120((uint64_t)v59);
        }
        uint64_t v39 = v64;
        uint64_t v63 = (uint64_t)v30;
        unint64_t v60 = v30 + 32;
        uint64_t v61 = v10;
        unint64_t v20 = v10 + 32;
        unint64_t v40 = v18 - 1;
        uint64_t v23 = (char *)(v64 + 24 * v18 + 24);
        while (v40 < *(void *)(v39 + 16))
        {
          uint64_t v2 = *((void *)v23 - 2);
          uint64_t v18 = *((void *)v23 - 1);
          int64_t v14 = *(unsigned int *)v23 | ((unint64_t)v23[4] << 32);
          switch(v23[4] >> 6)
          {
            case 1:
              uint64_t v46 = *(void *)(v62 + 16);
              uint64_t v47 = mlx_array_ndim(v46);
              uint64_t v48 = v16;
              if ((v16 & 0x8000000000000000) == 0) {
                goto LABEL_70;
              }
              uint64_t v48 = v16 + v47;
              if (__OFADD__(v16, v47)) {
                goto LABEL_141;
              }
              if (v48 < (uint64_t)0xFFFFFFFF80000000) {
                goto LABEL_126;
              }
LABEL_70:
              if (v48 > 0x7FFFFFFF) {
                goto LABEL_128;
              }
              int v49 = mlx_array_dim(v46, v48);
              if ((v2 & 0x100000000) != 0) {
                int v50 = 0;
              }
              else {
                int v50 = v2;
              }
              if ((v2 & 0x100000000) == 0 || (v14 & 0x100000000) != 0) {
                goto LABEL_79;
              }
              if ((v14 & 0x80000000) != 0)
              {
                int v50 = v49 - 1;
                if (__OFSUB__(v49, 1)) {
                  goto LABEL_144;
                }
              }
              else
              {
                int v50 = 0;
              }
LABEL_79:
              if ((v16 & 0x8000000000000000) != 0) {
                goto LABEL_129;
              }
              if (v16 >= *(void *)(v63 + 16)) {
                goto LABEL_131;
              }
              *(_DWORD *)&v60[4 * v16] = v50;
              if ((v18 & 0x100000000) != 0) {
                int v51 = v49;
              }
              else {
                int v51 = v18;
              }
              if ((v18 & 0x100000000) == 0) {
                goto LABEL_89;
              }
              if ((v14 & 0x100000000) != 0) {
                goto LABEL_89;
              }
              int v51 = v49;
              if ((v14 & 0x80000000) == 0) {
                goto LABEL_89;
              }
              int v52 = -v49;
              if (__OFSUB__(0, v49)) {
                goto LABEL_145;
              }
              BOOL v45 = __OFSUB__(v52, 1);
              int v51 = v52 - 1;
              if (v45) {
                goto LABEL_146;
              }
LABEL_89:
              if (v16 >= *(void *)(v61 + 16)) {
                goto LABEL_134;
              }
              *(_DWORD *)(v20 + 4 * v16) = v51;
              if (v16 >= *((void *)v59 + 2)) {
                goto LABEL_136;
              }
              if ((v14 & 0x100000000) != 0) {
                int v53 = 1;
              }
              else {
                int v53 = v14;
              }
              *(_DWORD *)&v59[4 * v16 + 32] = v53;
              if ((v33 & 0x8000000000000000) != 0)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v19 = sub_256FA81B0(v19);
                }
                uint64_t v39 = v64;
                if (v16 >= v19[2]) {
                  goto LABEL_143;
                }
                goto LABEL_103;
              }
              uint64_t v54 = *(void *)(v58 + 16);
              mlx_array_ndim(v54);
              if (v33 >> 31) {
                goto LABEL_138;
              }
              uint64_t v18 = mlx_array_dim(v54, v33);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v19 = sub_256FA81B0(v19);
              }
              if (v16 >= v19[2]) {
                goto LABEL_139;
              }
              v19[v16 + 4] = (int)v18;
              --v33;
              uint64_t v39 = v64;
              goto LABEL_104;
            case 2:
              goto LABEL_162;
            case 3:
              if (v18 | v2) {
                BOOL v41 = 0;
              }
              else {
                BOOL v41 = v14 == 0xC000000000;
              }
              if (!v41) {
                goto LABEL_50;
              }
              goto LABEL_162;
            default:
              uint64_t v18 = *(void *)(v62 + 16);
              uint64_t v42 = mlx_array_ndim(v18);
              uint64_t v43 = v16;
              if ((v16 & 0x8000000000000000) == 0) {
                goto LABEL_56;
              }
              uint64_t v43 = v16 + v42;
              if (__OFADD__(v16, v42)) {
                goto LABEL_140;
              }
              if (v43 < (uint64_t)0xFFFFFFFF80000000)
              {
                __break(1u);
LABEL_126:
                __break(1u);
LABEL_127:
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                goto LABEL_149;
              }
LABEL_56:
              if (v43 > 0x7FFFFFFF) {
                goto LABEL_127;
              }
              int v44 = mlx_array_dim(v18, v43);
              if ((v2 & 0x80000000) != 0)
              {
                BOOL v45 = __OFADD__(v2, v44);
                uint64_t v2 = (v2 + v44);
                if (v45) {
                  goto LABEL_142;
                }
              }
              if ((v16 & 0x8000000000000000) != 0) {
                goto LABEL_130;
              }
              if (v16 >= *(void *)(v63 + 16)) {
                goto LABEL_132;
              }
              *(_DWORD *)&v60[4 * v16] = v2;
              if (__OFADD__(v2, 1)) {
                goto LABEL_133;
              }
              if (v16 >= *(void *)(v61 + 16)) {
                goto LABEL_135;
              }
              *(_DWORD *)(v20 + 4 * v16) = v2 + 1;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v19 = sub_256FA81B0(v19);
              }
              uint64_t v39 = v64;
              if (v16 >= v19[2]) {
                goto LABEL_137;
              }
LABEL_103:
              v19[v16 + 4] = 1;
LABEL_104:
              --v16;
LABEL_50:
              --v40;
              v23 -= 24;
              if (v40 == -1) {
                goto LABEL_153;
              }
              break;
          }
        }
        __break(1u);
        goto LABEL_106;
      }
    }
LABEL_153:
    swift_bridgeObjectRelease();
    type metadata accessor for Stream();
    swift_initStackObject();
    swift_bridgeObjectRetain();
    mlx_default_device();
  }
  uint64_t v2 = v11;
  int64_t v14 = v10;
  uint64_t v15 = *(unsigned int *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 32);
  unint64_t v16 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a1 + 16);
  mlx_array_ndim(v18);
  uint64_t v19 = (void *)mlx_array_dim(v18, 0);
  unint64_t v20 = v15 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v13 << 32);
  uint64_t v21 = v17 & 0x100000000;
  if ((v17 & 0x100000000) != 0) {
    int v22 = 0;
  }
  else {
    int v22 = v17;
  }
  uint64_t v23 = (char *)v14;
  if ((v20 & 0x100000000) != 0 || !v21) {
    goto LABEL_107;
  }
  if ((v20 & 0x80000000) == 0)
  {
    int v22 = 0;
    goto LABEL_107;
  }
LABEL_106:
  int v22 = v19 - 1;
  if (__OFSUB__(v19, 1))
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
LABEL_107:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v63 = (uint64_t)sub_256FA8120(v63);
  }
  uint64_t v18 = v63;
  if (!*(void *)(v63 + 16))
  {
    __break(1u);
    goto LABEL_155;
  }
  *(_DWORD *)(v63 + 32) = v22;
  uint64_t v18 = v63 + 32;
  uint64_t v55 = v16 & 0x100000000;
  if ((v16 & 0x100000000) != 0) {
    unint64_t v16 = v19;
  }
  else {
    unint64_t v16 = v16;
  }
  if ((v20 & 0x100000000) != 0 || !v55 || (unint64_t v16 = (unint64_t)v19, (v20 & 0x80000000) == 0))
  {
LABEL_118:
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (*((void *)v23 + 2)) {
        goto LABEL_120;
      }
      goto LABEL_156;
    }
LABEL_155:
    uint64_t v23 = sub_256FA8120((uint64_t)v23);
    if (*((void *)v23 + 2))
    {
LABEL_120:
      *((_DWORD *)v23 + 8) = v16;
      unint64_t v16 = v2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((v20 & 0x100000000) != 0) {
        LODWORD(v20) = 1;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        if (*(void *)(v2 + 16)) {
          goto LABEL_124;
        }
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
LABEL_157:
      unint64_t v16 = (unint64_t)sub_256FA8120(v16);
      if (*(void *)(v16 + 16))
      {
LABEL_124:
        *(_DWORD *)(v16 + 32) = v20;
        swift_release();
        mlx_slice_update();
      }
      goto LABEL_158;
    }
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  int v56 = -(int)v19;
  if (!__OFSUB__(0, v19))
  {
    unint64_t v16 = (v56 - 1);
    if (__OFSUB__(v56, 1)) {
      goto LABEL_161;
    }
    goto LABEL_118;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
LABEL_162:
  sub_256FA81C4(v2, v18, v14);
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  MLXArrayIndexOperation.description.getter();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256FA088C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = a1;
  unint64_t v6 = *a4;
  if (*(void *)(a2 + 16) != 1)
  {
    uint64_t v11 = MLXArray.shape.getter();
    uint64_t v12 = Array<A>.asInt32.getter(v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_256FA24C4(v12, a2);
    int v104 = (void *)v6;
    unint64_t v14 = sub_256F9B5FC();
    swift_retain();
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = sub_256FA954C(v15);
    swift_bridgeObjectRelease();
    unint64_t v94 = v16;
    if (!v16)
    {
      swift_bridgeObjectRelease();
      mlx_broadcast_to();
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void *)(v13 + 16);
    unint64_t v101 = v17;
    uint64_t v96 = v5;
    if (!v17)
    {
      uint64_t v25 = 0;
      uint64_t v98 = 0;
      uint64_t v102 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      LOBYTE(v103) = 0;
      uint64_t v21 = 0;
      goto LABEL_58;
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v98 = 0;
    uint64_t v102 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v103 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = v17;
    unint64_t v23 = 0;
    unint64_t v100 = 1 - v22;
    unint64_t v24 = v22;
    while (1)
    {
      if (v23 >= v24)
      {
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
        __break(1u);
LABEL_163:
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_164:
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
        goto LABEL_168;
      }
      uint64_t v25 = 0;
      unint64_t v14 = v23 - v102 + 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v26 = v23;
      uint64_t v5 = v18;
      while (1)
      {
        uint64_t v27 = 24 * v26;
        uint64_t v28 = v13 + 32 + 24 * v26;
        uint64_t v29 = *(void *)v28;
        unsigned int v30 = *(unsigned __int8 *)(v28 + 20);
        unint64_t v31 = *(unsigned int *)(v28 + 16) | ((unint64_t)*(unsigned __int8 *)(v28 + 20) << 32);
        unint64_t v23 = v26 + 1;
        switch(v30 >> 6)
        {
          case 1u:
            BOOL v32 = __OFADD__(v19++, 1);
            if (!v32) {
              goto LABEL_14;
            }
            goto LABEL_166;
          case 2u:
            uint64_t v33 = mlx_array_ndim(*(void *)(v29 + 16));
            if (v26 == v14) {
              goto LABEL_159;
            }
            v103 |= v5;
            if (v21 <= v33) {
              uint64_t v21 = v33;
            }
            if (v23 == v101) {
              goto LABEL_47;
            }
            uint64_t v34 = 0;
            unint64_t v35 = ~v26 + v14;
            unint64_t v14 = 24 * v26;
            break;
          case 3u:
            goto LABEL_36;
          default:
            goto LABEL_10;
        }
        while (1)
        {
          unint64_t v24 = *(void *)(v13 + 16);
          if (v26 + v34 + 1 >= v24) {
            goto LABEL_158;
          }
          uint64_t v29 = *(void *)(v13 + v14 + 56);
          int v36 = *(unsigned __int8 *)(v13 + v14 + 76) >> 6;
          if (v36 != 2) {
            break;
          }
          uint64_t v37 = mlx_array_ndim(*(void *)(v29 + 16));
          if (v35 == v34) {
            goto LABEL_159;
          }
          v103 |= v5;
          if (v21 <= v37) {
            uint64_t v21 = v37;
          }
          ++v34;
          v14 += 24;
          if (!(v100 + v26 + v34))
          {
LABEL_47:
            unint64_t v17 = v101;
            uint64_t v102 = v101 + v102 - v26;
            swift_bridgeObjectRelease();
            uint64_t v25 = 0;
            goto LABEL_58;
          }
        }
        if (!v36)
        {
          uint64_t v25 = 0;
          v102 += v34 + 1;
          unint64_t v23 = v26 + v34 + 2;
          uint64_t v18 = 1;
LABEL_10:
          if (v23 == v101) {
            goto LABEL_56;
          }
          goto LABEL_11;
        }
        unint64_t v31 = *(unsigned int *)(v13 + v14 + 72) | ((unint64_t)*(unsigned __int8 *)(v13 + v14 + 76) << 32);
        if (v36 == 1) {
          break;
        }
        uint64_t v25 = 0;
        v102 += v34 + 1;
        unint64_t v23 = v26 + v34 + 2;
        uint64_t v27 = v14 + 24;
        uint64_t v18 = 1;
LABEL_36:
        if (*(void *)(v13 + 40 + v27) | v29) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v31 == 0xC000000000;
        }
        if (v38)
        {
          swift_bridgeObjectRelease();
          sub_25704ADF0();
          swift_bridgeObjectRelease();
          unint64_t v108 = 0xD000000000000011;
          unint64_t v109 = 0x800000025708DAD0;
          int v104 = 0;
          uint64_t v105 = 0;
          char v107 = -64;
          int v106 = 0;
          MLXArrayIndexOperation.description.getter();
          sub_25704A850();
          swift_bridgeObjectRelease();
          sub_25704A850();
          goto LABEL_188;
        }
        BOOL v32 = __OFADD__(v20++, 1);
        if (v32) {
          goto LABEL_165;
        }
        if (v23 == v101)
        {
LABEL_56:
          swift_bridgeObjectRelease();
LABEL_57:
          unint64_t v17 = v101;
LABEL_58:
          uint64_t v95 = v21;
          uint64_t v41 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_174;
          }
          BOOL v32 = __OFADD__(v41, v19);
          uint64_t v42 = v41 + v19;
          if (v32)
          {
LABEL_175:
            __break(1u);
          }
          else
          {
            BOOL v32 = __OFSUB__(v42, v25);
            unint64_t v43 = v42 - v25;
            if (!v32)
            {
              if (v43 <= 1) {
                unint64_t v43 = 1;
              }
              unint64_t v99 = v43;
              uint64_t v110 = MEMORY[0x263F8EE78];
              uint64_t v44 = sub_256F9B130(1uLL, v94);
              if (!v17)
              {
LABEL_138:
                swift_bridgeObjectRelease();
                mlx_default_device();
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_181;
              }
              while (2)
              {
                uint64_t v5 = 0;
                unint64_t v45 = 0;
                uint64_t v46 = v95;
                if ((v103 & 1) == 0) {
                  uint64_t v46 = 0;
                }
                uint64_t v93 = v46;
                __leunint64_t n = 8 * v99;
LABEL_69:
                if (v45 >= *(void *)(v13 + 16)) {
                  goto LABEL_160;
                }
                uint64_t v47 = v13 + 32 + 24 * v45;
                uint64_t v49 = *(void *)v47;
                uint64_t v48 = *(void *)(v47 + 8);
                unint64_t v14 = *(unsigned int *)(v47 + 16) | ((unint64_t)*(unsigned __int8 *)(v47 + 20) << 32);
                ++v45;
                switch(*(unsigned __int8 *)(v47 + 20) >> 6)
                {
                  case 1:
                    uint64_t v68 = *(void *)(v96 + 16);
                    mlx_array_ndim(v68);
                    uint64_t v69 = mlx_array_dim(v68, 0);
                    if ((v49 & 0x100000000) != 0) {
                      unsigned int v70 = 0;
                    }
                    else {
                      unsigned int v70 = v49;
                    }
                    if ((v49 & 0x100000000) == 0 || (v14 & 0x100000000) != 0) {
                      goto LABEL_112;
                    }
                    if ((v14 & 0x80000000) == 0)
                    {
                      unsigned int v70 = 0;
                      goto LABEL_114;
                    }
                    unsigned int v70 = v69 - 1;
                    if (__OFSUB__(v69, 1))
                    {
                      __break(1u);
                    }
                    else
                    {
LABEL_112:
                      if ((v70 & 0x80000000) != 0)
                      {
                        BOOL v32 = __OFADD__(v70, v69);
                        v70 += v69;
                        if (v32) {
                          goto LABEL_177;
                        }
                      }
LABEL_114:
                      if ((v48 & 0x100000000) != 0) {
                        uint64_t v44 = v69;
                      }
                      else {
                        uint64_t v44 = v48;
                      }
                      if ((v48 & 0x100000000) == 0
                        || (v14 & 0x100000000) != 0
                        || (uint64_t v44 = v69, (v14 & 0x80000000) == 0))
                      {
LABEL_122:
                        if ((v44 & 0x80000000) != 0)
                        {
                          BOOL v32 = __OFADD__(v44, v69);
                          uint64_t v44 = (v44 + v69);
                          if (v32) {
                            goto LABEL_173;
                          }
                        }
                        if ((v14 & 0x100000000) != 0) {
                          unint64_t v14 = 1;
                        }
                        else {
                          unint64_t v14 = v14;
                        }
                        if ((v99 & 0x8000000000000000) != 0) {
                          goto LABEL_185;
                        }
                        uint64_t v73 = sub_25704AAA0();
                        *(void *)(v73 + 16) = v99;
                        memset_pattern16((void *)(v73 + 32), &unk_25704DBF0, __len);
                        if (v102 <= 0 && v98 <= 0 && v14 == 1) {
                          mlx_array_from_int();
                        }
                        if (v14)
                        {
                          uint64_t v74 = sub_256FA6F94(v70 | (unint64_t)(v44 << 32), (int)v14);
                          uint64_t v75 = *(void *)(v74 + 16);
                          uint64_t v76 = v74 + 32;
                          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
                          uint64_t inited = swift_initStackObject();
                          *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
                          *(void *)(inited + 32) = v75;
                          uint64_t v78 = Array<A>.asInt32.getter(inited);
                          swift_setDeallocating();
                          uint64_t v79 = mlx_array_from_data(v76, (char *)(v78 + 32), 1, 4);
                          swift_bridgeObjectRelease();
                          if (v79)
                          {
                            swift_release();
                            unint64_t v14 = v5 + v93;
                            if (!__OFADD__(v5, v93))
                            {
                              uint64_t v80 = mlx_array_size(v79);
                              if ((v14 & 0x8000000000000000) == 0)
                              {
                                if (v14 < *(void *)(v73 + 16))
                                {
                                  *(void *)(v73 + 32 + 8 * v14) = v80;
                                  Array<A>.asInt32.getter(v73);
                                  mlx_reshape();
                                }
                                goto LABEL_171;
                              }
LABEL_170:
                              __break(1u);
                              __break(1u);
LABEL_171:
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
                              __break(1u);
LABEL_172:
                              __break(1u);
LABEL_173:
                              __break(1u);
LABEL_174:
                              __break(1u);
                              goto LABEL_175;
                            }
LABEL_169:
                            __break(1u);
                            __break(1u);
                            goto LABEL_170;
                          }
LABEL_184:
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          __break(1u);
LABEL_185:
                          sub_25704AFC0();
                          __break(1u);
LABEL_186:
                          sub_25704ADF0();
                          swift_bridgeObjectRelease();
                          unint64_t v108 = 0xD000000000000011;
                          unint64_t v109 = 0x800000025708DAD0;
                          int v104 = 0;
                          uint64_t v105 = 0;
                          char v107 = -64;
                          int v106 = 0;
                          MLXArrayIndexOperation.description.getter();
                          sub_25704A850();
                          swift_bridgeObjectRelease();
                          sub_25704A850();
                          while (1)
                          {
LABEL_188:
                            sub_25704AFD0();
                            __break(1u);
                          }
                        }
LABEL_168:
                        __break(1u);
                        __break(1u);
                        goto LABEL_169;
                      }
                      int v72 = -(int)v69;
                      if (!__OFSUB__(0, v69))
                      {
                        uint64_t v44 = (v72 - 1);
                        if (!__OFSUB__(v72, 1)) {
                          goto LABEL_122;
                        }
                        goto LABEL_180;
                      }
                    }
                    __break(1u);
LABEL_180:
                    __break(1u);
LABEL_181:
                    uint64_t v44 = (uint64_t)sub_256FA81B0((void *)v44);
                    continue;
                  case 2:
                    if (v103) {
                      uint64_t v50 = 0;
                    }
                    else {
                      uint64_t v50 = v5;
                    }
                    uint64_t v51 = v50 + v95;
                    if (__OFADD__(v50, v95)) {
                      goto LABEL_161;
                    }
                    uint64_t v52 = *(void *)(v49 + 16);
                    swift_retain_n();
                    uint64_t v53 = mlx_array_ndim(v52);
                    uint64_t v5 = v51 - v53;
                    if (__OFSUB__(v51, v53)) {
                      goto LABEL_163;
                    }
                    if ((v99 & 0x8000000000000000) != 0) {
                      goto LABEL_185;
                    }
                    uint64_t v54 = sub_25704AAA0();
                    *(void *)(v54 + 16) = v99;
                    uint64_t v55 = (int64_t *)(v54 + 32);
                    memset_pattern16((void *)(v54 + 32), &unk_25704DBF0, __len);
                    uint64_t v56 = mlx_array_ndim(*(void *)(v49 + 16));
                    uint64_t v57 = v56;
                    if (v56 < 0) {
                      goto LABEL_164;
                    }
                    if (!v56) {
                      goto LABEL_86;
                    }
                    uint64_t v58 = 0;
                    while (1)
                    {
                      uint64_t v59 = *(void *)(v49 + 16);
                      mlx_array_ndim(v59);
                      if (v58 == 0x80000000) {
                        break;
                      }
                      int v60 = mlx_array_dim(v59, v58);
                      if (v5 < 0) {
                        goto LABEL_154;
                      }
                      if ((unint64_t)(v5 + v58) >= *(void *)(v54 + 16)) {
                        goto LABEL_155;
                      }
                      *(void *)(v54 + 8 * v5 + 32 + 8 * v58++) = v60;
                      if (v57 == v58)
                      {
LABEL_86:
                        uint64_t v61 = *(void *)(v54 + 16);
                        if (!v61) {
LABEL_110:
                        }
                          mlx_reshape();
                        int v104 = (void *)MEMORY[0x263F8EE78];
                        sub_256F92734(0, v61, 0);
                        uint64_t v62 = v104;
                        while (1)
                        {
                          int64_t v64 = *v55++;
                          uint64_t v63 = v64;
                          if (v64 < (uint64_t)0xFFFFFFFF80000000) {
                            goto LABEL_156;
                          }
                          if (v63 > 0x7FFFFFFF) {
                            goto LABEL_157;
                          }
                          int v104 = v62;
                          unint64_t v66 = v62[2];
                          unint64_t v65 = v62[3];
                          uint64_t v5 = v66 + 1;
                          if (v66 >= v65 >> 1)
                          {
                            sub_256F92734(v65 > 1, v66 + 1, 1);
                            uint64_t v62 = v104;
                          }
                          v62[2] = v5;
                          *((_DWORD *)v62 + v66 + 8) = v63;
                          if (!--v61) {
                            goto LABEL_110;
                          }
                        }
                      }
                    }
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    goto LABEL_158;
                  case 3:
                    if (v48 | v49) {
                      BOOL v67 = 0;
                    }
                    else {
                      BOOL v67 = v14 == 0xC000000000;
                    }
                    if (v67) {
                      goto LABEL_186;
                    }
                    BOOL v32 = __OFADD__(v5++, 1);
                    if (v32) {
                      goto LABEL_162;
                    }
                    if (v45 != v17) {
                      goto LABEL_69;
                    }
                    goto LABEL_138;
                  default:
                    if ((v49 & 0x80000000) == 0) {
                      mlx_array_from_int();
                    }
                    uint64_t v71 = *(void *)(v96 + 16);
                    mlx_array_ndim(v71);
                    if (!__OFADD__(v49, mlx_array_dim(v71, 0))) {
                      mlx_array_from_int();
                    }
                    goto LABEL_172;
                }
              }
            }
          }
          __break(1u);
LABEL_177:
          __break(1u);
          swift_bridgeObjectRetain();
          uint64_t v92 = sub_25704B040();
          swift_bridgeObjectRelease();
          uint64_t v81 = (void *)MEMORY[0x263F8EE78];
          if (!v92)
          {
LABEL_151:
            mlx_vector_array_add_arrays(v5, v81 + 4, v92);
            swift_bridgeObjectRelease();
            mlx_broadcast_arrays();
          }
          int v104 = (void *)MEMORY[0x263F8EE78];
          sub_256F908CC(0, v92 & ~(v92 >> 63), 0);
          if ((v92 & 0x8000000000000000) == 0)
          {
            uint64_t v81 = v104;
            if ((v14 & 0xC000000000000001) != 0)
            {
              for (uint64_t i = 0; i != v92; ++i)
              {
                uint64_t v83 = *(void *)(MEMORY[0x25A2B0EE0](i, v14) + 16);
                swift_unknownObjectRelease();
                int v104 = v81;
                unint64_t v85 = v81[2];
                unint64_t v84 = v81[3];
                if (v85 >= v84 >> 1)
                {
                  sub_256F908CC(v84 > 1, v85 + 1, 1);
                  uint64_t v81 = v104;
                }
                v81[2] = v85 + 1;
                v81[v85 + 4] = v83;
              }
            }
            else
            {
              unint64_t v86 = v14 + 32;
              unint64_t v87 = v104[2];
              uint64_t v88 = v92;
              do
              {
                uint64_t v89 = *(void *)(*(void *)v86 + 16);
                int v104 = v81;
                unint64_t v90 = v81[3];
                if (v87 >= v90 >> 1)
                {
                  sub_256F908CC(v90 > 1, v87 + 1, 1);
                  uint64_t v81 = v104;
                }
                v81[2] = v87 + 1;
                v81[v87 + 4] = v89;
                v86 += 8;
                ++v87;
                --v88;
              }
              while (v88);
            }
            goto LABEL_151;
          }
          __break(1u);
          __break(1u);
LABEL_183:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          goto LABEL_184;
        }
        uint64_t v5 = 1;
LABEL_11:
        unint64_t v14 = v23 - v102 + 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v26 = v23;
        if (v23 >= v24) {
          goto LABEL_158;
        }
      }
      uint64_t v25 = 0;
      v102 += v34 + 1;
      unint64_t v23 = v26 + v34 + 2;
      uint64_t v18 = 1;
      BOOL v32 = __OFADD__(v19++, 1);
      if (v32) {
        goto LABEL_166;
      }
LABEL_14:
      if ((v31 & 0x100000000) != 0 || v31 == 1)
      {
        BOOL v32 = __OFADD__(v25++, 1);
        if (v32) {
          goto LABEL_167;
        }
        uint64_t v5 = v18;
        goto LABEL_10;
      }
      BOOL v32 = __OFADD__(v98++, 1);
      if (v32) {
        goto LABEL_183;
      }
      if (v23 == v101)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = 0;
        goto LABEL_57;
      }
    }
  }
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(unsigned int *)(a2 + 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 52) << 32);
  switch(*(unsigned __int8 *)(a2 + 52) >> 6)
  {
    case 1:
      LODWORD(v104) = *(void *)(a2 + 32);
      BYTE4(v104) = BYTE4(v7) & 1;
      LODWORD(v105) = v8;
      BYTE4(v105) = BYTE4(v8) & 1;
      int v106 = v9;
      char v107 = BYTE4(v9) & 1;
      unint64_t v108 = v6;
      return sub_256FA4988(a1, (unsigned int *)&v104);
    case 2:
      int v104 = (void *)*a4;
      swift_retain();
      sub_256FA4DA8();
    case 3:
      if (v8 | v7) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v9 == 0xC000000000;
      }
      if (!v39)
      {
        uint64_t v40 = MLXArray.shape.getter();
        Array<A>.asInt32.getter(v40);
        swift_bridgeObjectRelease();
        mlx_broadcast_to();
      }
      goto LABEL_188;
    default:
      int v104 = (void *)*a4;
      return sub_256FA47C8(a1, v7);
  }
}

uint64_t (*MLXArray.subscript.modify(void *a1, uint64_t a2, uint64_t *a3))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v3;
  uint64_t v6 = *a3;
  a1[3] = *a3;
  uint64_t v8 = v6;
  swift_retain();
  *a1 = MLXArray.subscript.getter(a2, &v8);
  return sub_256FA1F60;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  a1[1] = a2;
  a1[2] = v3;
  uint64_t v6 = *a3;
  a1[3] = *a3;
  uint64_t v8 = v6;
  swift_retain();
  *a1 = MLXArray.subscript.getter(a2, &v8);
  return sub_256FA2404;
}

uint64_t sub_256FA1F60(uint64_t *a1, char a2)
{
  return sub_256FA241C(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t _s8Morpheus8MLXArrayC_6streamAcA0B5Index_pd_AA14StreamOrDeviceVtcig_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    sub_256F90A10(0, v3, 0);
    uint64_t v6 = a1 + 32;
    uint64_t v4 = v25;
    do
    {
      sub_256F92F24(v6, (uint64_t)v19);
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v22, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      uint64_t v9 = v22[0];
      uint64_t v10 = v22[1];
      uint64_t v11 = v24;
      uint64_t v12 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90A10(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v25;
      }
      unint64_t v14 = *(void *)(v4 + 16);
      unint64_t v13 = *(void *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_256F90A10(v13 > 1, v14 + 1, 1);
        uint64_t v4 = v25;
      }
      *(void *)(v4 + 16) = v14 + 1;
      uint64_t v15 = v4 + 24 * v14;
      *(void *)(v15 + 32) = v9;
      *(void *)(v15 + 40) = v10;
      *(unsigned char *)(v15 + 52) = (v12 | (unint64_t)(v11 << 32)) >> 32;
      *(_DWORD *)(v15 + 48) = v12;
      v6 += 40;
      --v3;
    }
    while (v3);
    uint64_t v2 = v18;
  }
  v19[0] = v2;
  swift_retain();
  uint64_t v16 = sub_256F9E8BC(v4, v19);
  swift_release();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_256FA210C@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t *)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v8 = a1[1];
  swift_retain();
  uint64_t v6 = a2(v5, &v8);
  uint64_t result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t sub_256FA217C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6 = *a3;
  uint64_t v9 = a3[1];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = swift_retain();
  return a5(v7, v6, &v9);
}

void _s8Morpheus8MLXArrayC_6streamAcA0B5Index_pd_AA14StreamOrDeviceVtcis_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  int64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v17 = *a3;
    uint64_t v24 = MEMORY[0x263F8EE78];
    sub_256F90A10(0, v5, 0);
    uint64_t v6 = a2 + 32;
    uint64_t v7 = v24;
    do
    {
      sub_256F92F24(v6, (uint64_t)v18);
      uint64_t v8 = v19;
      uint64_t v9 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v21, v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      uint64_t v11 = v21[0];
      uint64_t v10 = v21[1];
      uint64_t v12 = v23;
      uint64_t v13 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90A10(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v24;
      }
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_256F90A10(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v24;
      }
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 24 * v15;
      *(void *)(v16 + 32) = v11;
      *(void *)(v16 + 40) = v10;
      *(unsigned char *)(v16 + 52) = (v13 | (unint64_t)(v12 << 32)) >> 32;
      *(_DWORD *)(v16 + 48) = v13;
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v18[0] = v4;
  sub_256F9CC7C();
}

uint64_t sub_256FA2404(uint64_t *a1, char a2)
{
  return sub_256FA241C(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_256FA241C(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (a2)
  {
    uint64_t v8 = a1[3];
    swift_bridgeObjectRetain();
    uint64_t v6 = swift_retain();
    a3(v6, v5, &v8);
    return swift_release();
  }
  else
  {
    uint64_t v8 = a1[3];
    swift_bridgeObjectRetain();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))a3)(v4, v5, &v8);
  }
}

uint64_t sub_256FA24C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    goto LABEL_41;
  }
  unint64_t v5 = 0;
  uint64_t v6 = (unsigned int *)(a2 + 48);
  while (*((unsigned __int8 *)v6 + 4) >> 6 < 3uLL
       || (*v6 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32)) != 0xC000000000
       || *((_OWORD *)v6 - 1) != 0)
  {
    ++v5;
    v6 += 6;
    if (v3 == v5) {
      goto LABEL_41;
    }
  }
  if (v3 < v5)
  {
    uint64_t v8 = -1;
    unint64_t v9 = v5;
    unint64_t v5 = *(void *)(a2 + 16);
    goto LABEL_14;
  }
  if (v3 == v5)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    return v2;
  }
  uint64_t v8 = 1;
  unint64_t v9 = *(void *)(a2 + 16);
LABEL_14:
  uint64_t v10 = 0;
  do
  {
    BOOL v11 = __OFADD__(v10, v8);
    v10 += v8;
    if (v11) {
      goto LABEL_56;
    }
    if (v5 == v3) {
      goto LABEL_57;
    }
    unint64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_58;
    }
    unint64_t v13 = *(void *)(a2 + 16);
    if (v12 != v3)
    {
      unint64_t v14 = (unsigned int *)(a2 + 72 + 24 * v5);
      unint64_t v13 = v12;
      while (v13 < v3)
      {
        if (*((unsigned __int8 *)v14 + 4) >> 6 >= 3uLL
          && (*v14 | ((unint64_t)*((unsigned __int8 *)v14 + 4) << 32)) == 0xC000000000
          && *((_OWORD *)v14 - 1) == 0)
        {
          goto LABEL_15;
        }
        unint64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_55;
        }
        ++v13;
        v14 += 6;
        if (v16 == v3)
        {
          unint64_t v13 = *(void *)(a2 + 16);
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
LABEL_15:
    unint64_t v5 = v13;
  }
  while (v13 != v9);
  if (!v10) {
    goto LABEL_41;
  }
  if (v10 <= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned int *)(a2 + 48);
    while (*((unsigned __int8 *)v18 + 4) >> 6 < 3uLL
         || (*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32)) != 0xC000000000
         || *((_OWORD *)v18 - 1) != 0)
    {
      uint64_t v20 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_59;
      }
      ++v17;
      v18 += 6;
      if (v20 == v3)
      {
        LOBYTE(v21) = 0;
        uint64_t v17 = *(void *)(a2 + 16);
        goto LABEL_45;
      }
    }
    if (v3 < v17) {
      goto LABEL_60;
    }
    unint64_t v21 = (unint64_t)v17 >> 63;
LABEL_45:
    uint64_t v23 = v17 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (v17 & 0x7FFFFFFFFFFFFFFFLL) + 1;
    if (!__OFADD__(v17 & 0x7FFFFFFFFFFFFFFFLL, 1))
    {
      if (v3 < v24) {
        LOBYTE(v21) = 1;
      }
      if ((v21 & 1) == 0)
      {
        if ((v24 & 0x8000000000000000) == 0)
        {
          unint64_t v25 = (2 * v17) | 1;
          unint64_t v26 = (2 * v3) | 1;
          swift_bridgeObjectRetain_n();
          uint64_t v27 = sub_256FA93E8(v2, v2 + 32, 0, v25);
          uint64_t v28 = *(void *)(a1 + 16);
          uint64_t v29 = swift_unknownObjectRetain();
          uint64_t v30 = sub_256FA93E8(v29, v2 + 32, v24, v26);
          swift_bridgeObjectRelease();
          BOOL v11 = __OFSUB__(v28, v30);
          uint64_t v31 = v28 - v30;
          if (!v11)
          {
            if (v31 >= v27)
            {
              swift_bridgeObjectRetain();
              uint64_t v32 = sub_256FA9698(v27, v31, a1);
              swift_bridgeObjectRelease();
              uint64_t v33 = *(void *)(v32 + 16);
              BOOL v11 = __OFADD__(v33, v23);
              uint64_t v34 = v33 + v23;
              if (!v11)
              {
                int v36 = sub_256FA5E5C(0, v34 & ~(v34 >> 63), 0, MEMORY[0x263F8EE78]);
                uint64_t v35 = swift_unknownObjectRetain();
                sub_256FA3B00(v35, v2 + 32, 0, v25);
                sub_256FA3CC8(v32);
                sub_256FA3B00(v2, v2 + 32, v24, v26);
                swift_bridgeObjectRelease();
                return (uint64_t)v36;
              }
              goto LABEL_66;
            }
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
LABEL_67:
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  MEMORY[0x25A2B0AA0](v2, &type metadata for MLXArrayIndexOperation);
  sub_25704A850();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  return result;
}

uint64_t MLXSlice.init(start:end:stride:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(unsigned char *)(a4 + 4) = BYTE4(result) & 1;
  *(_DWORD *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 12) = BYTE4(a2) & 1;
  *(_DWORD *)(a4 + 16) = a3;
  *(unsigned char *)(a4 + 20) = BYTE4(a3) & 1;
  return result;
}

Swift::Int32 __swiftcall MLXSlice.start(_:)(Swift::Int32 a1)
{
  if (*(unsigned char *)(v1 + 4)) {
    Swift::Int32 result = 0;
  }
  else {
    Swift::Int32 result = *(_DWORD *)v1;
  }
  if (*(unsigned char *)(v1 + 4) && (*(unsigned char *)(v1 + 20) & 1) == 0)
  {
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) != 0)
    {
      Swift::Int32 result = a1 - 1;
      if (__OFSUB__(a1, 1)) {
        __break(1u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

Swift::Int32 __swiftcall MLXSlice.end(_:)(Swift::Int32 result)
{
  if (!*(unsigned char *)(v1 + 12)) {
    return *(_DWORD *)(v1 + 8);
  }
  if ((*(unsigned char *)(v1 + 20) & 1) == 0 && (*(_DWORD *)(v1 + 16) & 0x80000000) != 0)
  {
    Swift::Int32 v2 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
    }
    else
    {
      Swift::Int32 result = v2 - 1;
      if (!__OFSUB__(v2, 1)) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t MLXSlice.stride.getter()
{
  if (*(unsigned char *)(v0 + 20)) {
    return 1;
  }
  else {
    return *(unsigned int *)(v0 + 16);
  }
}

uint64_t sub_256FA2970(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a2;
  size_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = sub_256F9B074(0, v6);
  unint64_t v73 = MEMORY[0x263F8EE78];
  uint64_t v67 = a1;
  uint64_t v8 = MLXArray.shape.getter();
  uint64_t v9 = Array<A>.asInt32.getter(v8);
  swift_bridgeObjectRelease();
  uint64_t v69 = v9;
  if (!v6)
  {
    if ((a3 & 1) == 0)
    {
      unint64_t v32 = MEMORY[0x263F8EE78];
      uint64_t v71 = 0;
      uint64_t v39 = 0;
      goto LABEL_73;
    }
    goto LABEL_85;
  }
  swift_bridgeObjectRetain();
  char v66 = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_124;
  }
LABEL_3:
  unint64_t v10 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  unint64_t v68 = v9 + 32;
  uint64_t v9 = v4 + 48;
  while (2)
  {
    unint64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_106;
    }
    uint64_t v13 = *(void *)(v9 - 16);
    uint64_t v12 = *(void *)(v9 - 8);
    uint64_t v14 = *(unsigned __int8 *)(v9 + 4);
    unsigned int v15 = *(_DWORD *)v9;
    v9 += 24;
    a3 = v15 | (unint64_t)(v14 << 32);
    switch((a3 >> 38) & 3)
    {
      case 1uLL:
        BOOL v20 = __OFADD__(v70++, 1);
        if (v20) {
          goto LABEL_108;
        }
        if (v10 >= *(void *)(v7 + 16)) {
          goto LABEL_109;
        }
        *(unsigned char *)(v7 + v10 + 32) = 1;
        if (v10 >= *(void *)(v69 + 16)) {
          goto LABEL_110;
        }
        unsigned int v21 = *(_DWORD *)(v68 + 4 * v10);
        if ((v13 & 0x100000000) != 0) {
          unsigned int v22 = 0;
        }
        else {
          unsigned int v22 = v13;
        }
        if ((v13 & 0x100000000) == 0 || (a3 & 0x100000000) != 0) {
          goto LABEL_28;
        }
        if ((a3 & 0x80000000) != 0)
        {
          unsigned int v22 = v21 - 1;
          if (__OFSUB__(v21, 1)) {
            goto LABEL_120;
          }
LABEL_28:
          if ((v22 & 0x80000000) != 0)
          {
            BOOL v20 = __OFADD__(v22, v21);
            v22 += v21;
            if (v20) {
              goto LABEL_119;
            }
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        if ((v12 & 0x100000000) != 0) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = v12;
        }
        if ((v12 & 0x100000000) != 0 && (a3 & 0x100000000) == 0)
        {
          uint64_t v24 = *(unsigned int *)(v68 + 4 * v10);
          if ((a3 & 0x80000000) != 0)
          {
            int v25 = -v21;
            if (__OFSUB__(0, v21)) {
              goto LABEL_121;
            }
            BOOL v20 = __OFSUB__(v25, 1);
            uint64_t v24 = (v25 - 1);
            if (v20) {
              goto LABEL_122;
            }
          }
        }
        if ((v24 & 0x80000000) != 0)
        {
          BOOL v20 = __OFADD__(v24, v21);
          uint64_t v24 = v24 + v21;
          if (v20) {
            goto LABEL_115;
          }
        }
        if ((a3 & 0x100000000) != 0) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = (int)a3;
        }
        if (!v26) {
          goto LABEL_111;
        }
        uint64_t v27 = sub_256FA6F94(v22 | (unint64_t)(v24 << 32), v26);
        uint64_t v28 = *(void *)(v27 + 16);
        uint64_t v29 = v27 + 32;
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
        *(void *)(inited + 32) = v28;
        uint64_t v31 = Array<A>.asInt32.getter(inited);
        swift_setDeallocating();
        a3 = mlx_array_from_data(v29, (char *)(v31 + 32), 1, 4);
        swift_bridgeObjectRelease();
        if (a3)
        {
          swift_release();
          type metadata accessor for MLXArray();
          *(void *)(swift_allocObject() + 16) = a3;
          MEMORY[0x25A2B0A90]();
          if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_25704AA60();
          }
          sub_25704AAC0();
          sub_25704AA30();
LABEL_4:
          ++v10;
          if (v11 != v6) {
            continue;
          }
          swift_bridgeObjectRelease();
          if ((v66 & 1) == 0)
          {
            unint64_t v32 = v73;
            uint64_t v39 = v70;
LABEL_73:
            swift_bridgeObjectRetain();
            sub_256FAA4F4(v39, v32);
            uint64_t v41 = v40;
            a3 = v42;
            unint64_t v44 = v43;
            swift_bridgeObjectRelease();
            int64_t v45 = v44 >> 1;
            uint64_t v46 = v39;
            uint64_t v9 = (v44 >> 1) - a3;
            uint64_t v70 = v46;
            if (v44 >> 1 == a3)
            {
              swift_unknownObjectRelease();
              goto LABEL_85;
            }
            char v66 = v7;
            uint64_t v47 = v71 + v46;
            if (!__OFADD__(v71, v46))
            {
              size_t v6 = 0;
              unint64_t v68 = 8 * v47;
              if ((uint64_t)a3 > v45) {
                int64_t v45 = a3;
              }
              uint64_t v7 = v45 - a3;
              if (v45 != a3)
              {
                if (v47 < 0) {
                  goto LABEL_133;
                }
                a3 = *(void *)(v41 + 8 * a3);
                swift_retain();
                if (v47)
                {
                  uint64_t v48 = sub_25704AAA0();
                  *(void *)(v48 + 16) = v47;
                  memset_pattern16((void *)(v48 + 32), &unk_25704DBF0, v68);
                }
                else
                {
                  uint64_t v48 = MEMORY[0x263F8EE78];
                }
                uint64_t v49 = *(void *)(a3 + 16);
                mlx_array_ndim(v49);
                int v50 = mlx_array_dim(v49, 0);
                if (*(void *)(v48 + 16))
                {
                  *(void *)(v48 + 32) = v50;
                  mlx_default_device();
                }
LABEL_107:
                __break(1u);
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
LABEL_110:
                __break(1u);
LABEL_111:
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
                __break(1u);
                __break(1u);
LABEL_117:
                __break(1u);
                goto LABEL_118;
              }
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
            __break(1u);
LABEL_129:
            swift_bridgeObjectRetain();
            size_t v6 = sub_25704B040();
            if (v6) {
              goto LABEL_52;
            }
LABEL_130:
            swift_bridgeObjectRelease();
LABEL_85:
            swift_bridgeObjectRetain();
            mlx_vector_array_new();
          }
          if (v70 < 1) {
            goto LABEL_85;
          }
          unint64_t v32 = v73;
          if (v73 >> 62) {
            goto LABEL_129;
          }
          size_t v6 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v6) {
            goto LABEL_130;
          }
LABEL_52:
          uint64_t v9 = 0;
          unint64_t v68 = v32 & 0xC000000000000001;
          uint64_t v33 = v71 + v70;
          BOOL v34 = __OFADD__(v71, v70);
          BOOL v65 = v34;
          char v66 = v7;
          if (v68)
          {
            a3 = MEMORY[0x25A2B0EE0](0, v32);
          }
          else
          {
            a3 = *(void *)(v32 + 32);
            swift_retain();
          }
          if (!*(void *)(v7 + 16)) {
            goto LABEL_112;
          }
          if (*(unsigned char *)(v7 + 32) != 1)
          {
            MLXArray.shape.getter();
            uint64_t v36 = sub_25704AAA0();
            *(void *)(v36 + 16) = v70;
            memset_pattern16((void *)(v36 + 32), &unk_25704DBF0, 8 * v70);
            sub_256FA39B8(v36);
            mlx_default_device();
          }
          if (v65) {
            goto LABEL_116;
          }
          if (v33 < 0) {
            goto LABEL_133;
          }
          if (v33)
          {
            uint64_t v35 = sub_25704AAA0();
            *(void *)(v35 + 16) = v33;
            memset_pattern16((void *)(v35 + 32), &unk_25704DBF0, 8 * v33);
          }
          else
          {
            uint64_t v35 = MEMORY[0x263F8EE78];
          }
          uint64_t v7 = v71;
          uint64_t v37 = *(void *)(a3 + 16);
          mlx_array_ndim(v37);
          int v38 = mlx_array_dim(v37, 0);
          if (v71 < 0) {
            goto LABEL_117;
          }
          if ((unint64_t)v71 < *(void *)(v35 + 16))
          {
            *(void *)(v35 + 8 * v71 + 32) = v38;
            mlx_default_device();
          }
LABEL_118:
          __break(1u);
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          swift_bridgeObjectRetain();
          uint64_t v63 = v68;
          uint64_t v4 = sub_25704B040();
          swift_bridgeObjectRelease();
          uint64_t v51 = MEMORY[0x263F8EE78];
          if (v4)
          {
            uint64_t v72 = MEMORY[0x263F8EE78];
            sub_256F908CC(0, v4 & ~(v4 >> 63), 0);
            if (v4 < 0)
            {
              __break(1u);
              goto LABEL_126;
            }
            uint64_t v52 = v7;
            uint64_t v51 = v72;
            if ((a3 & 0xC000000000000001) != 0)
            {
              for (uint64_t i = 0; i != v4; ++i)
              {
                uint64_t v54 = *(void *)(MEMORY[0x25A2B0EE0](i, a3) + 16);
                swift_unknownObjectRelease();
                unint64_t v56 = *(void *)(v72 + 16);
                unint64_t v55 = *(void *)(v72 + 24);
                if (v56 >= v55 >> 1) {
                  sub_256F908CC(v55 > 1, v56 + 1, 1);
                }
                *(void *)(v72 + 16) = v56 + 1;
                *(void *)(v72 + 8 * v56 + 32) = v54;
              }
            }
            else
            {
              unint64_t v57 = a3 + 32;
              unint64_t v58 = *(void *)(v72 + 16);
              uint64_t v59 = v4;
              do
              {
                size_t v60 = v6;
                uint64_t v61 = *(void *)(*(void *)v57 + 16);
                unint64_t v62 = *(void *)(v72 + 24);
                if (v58 >= v62 >> 1) {
                  sub_256F908CC(v62 > 1, v58 + 1, 1);
                }
                *(void *)(v72 + 16) = v58 + 1;
                *(void *)(v72 + 8 * v58 + 32) = v61;
                v57 += 8;
                ++v58;
                --v59;
                size_t v6 = v60;
              }
              while (v59);
            }
            uint64_t v7 = v52;
            uint64_t v63 = v68;
            uint64_t v9 = v69;
          }
          mlx_vector_array_add_arrays(v63, (uint64_t *)(v51 + 32), v4);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!(v6 >> 31))
          {
            sub_256FA6898(v6 << 32);
            if (!v6) {
              goto LABEL_104;
            }
            if (v6 <= *(void *)(v9 + 16))
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
LABEL_103:
                memset_pattern16((void *)(v9 + 32), &unk_25704DBE0, 4 * v6);
LABEL_104:
                mlx_gather();
              }
LABEL_127:
              uint64_t v9 = (uint64_t)sub_256FA8120(v9);
              goto LABEL_103;
            }
LABEL_126:
            __break(1u);
            goto LABEL_127;
          }
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
LABEL_124:
          uint64_t v7 = (uint64_t)sub_256FA8204(v7);
          goto LABEL_3;
        }
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_132:
        sub_25704ADF0();
        swift_bridgeObjectRelease();
        MLXArrayIndexOperation.description.getter();
        sub_25704A850();
        swift_bridgeObjectRelease();
        sub_25704A850();
        sub_25704AFD0();
        __break(1u);
LABEL_133:
        uint64_t result = sub_25704AFC0();
        __break(1u);
        return result;
      case 2uLL:
        uint64_t v16 = *(void *)(v13 + 16);
        swift_retain_n();
        uint64_t v17 = mlx_array_ndim(v16);
        uint64_t v18 = v71;
        if (v71 <= v17) {
          uint64_t v18 = v17;
        }
        uint64_t v71 = v18;
        uint64_t v19 = swift_retain();
        MEMORY[0x25A2B0A90](v19);
        if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_25704AA60();
        }
        sub_25704AAC0();
        sub_25704AA30();
        sub_256FA81D8(v13, v12, a3);
        sub_256FA81D8(v13, v12, a3);
        goto LABEL_4;
      case 3uLL:
        goto LABEL_132;
      default:
        if ((v13 & 0x80000000) == 0) {
          mlx_array_from_int();
        }
        uint64_t v23 = *(void *)(v67 + 16);
        mlx_array_ndim(v23);
        if (v10 >> 31) {
          goto LABEL_113;
        }
        if (!__OFADD__(v13, mlx_array_dim(v23, v10))) {
          mlx_array_from_int();
        }
        goto LABEL_114;
    }
  }
}

uint64_t sub_256FA39B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_256FA5C48(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA3B00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native) {
    goto LABEL_8;
  }
  int64_t v13 = v7[3] >> 1;
  if (v13 < v9) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v14 = v8 + v6;
      }
      else {
        int64_t v14 = v8;
      }
      char isUniquelyReferenced_nonNull_native = sub_256FA5E5C(isUniquelyReferenced_nonNull_native, v14, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      int64_t v13 = isUniquelyReferenced_nonNull_native[3] >> 1;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v15 = v7[2];
  if (v13 - v15 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  unint64_t v16 = (unint64_t)&v7[3 * v15 + 4];
  unint64_t v17 = a2 + 24 * a3;
  if (v17 < v16 + 24 * v6 && v16 < v17 + 24 * v6) {
    goto LABEL_27;
  }
  swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    uint64_t result = swift_unknownObjectRelease();
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v19 = v7[2];
  BOOL v20 = __OFADD__(v19, v6);
  uint64_t v21 = v19 + v6;
  if (!v20)
  {
    v7[2] = v21;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA3CC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_256FA5E5C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA3E24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_256FA5A20(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA3F6C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_25704B040();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_25704B040();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x25A2B0EF0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_256FA8254(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_25704B040();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_25704AA30();
}

uint64_t sub_256FA4138(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_25704B040();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_25704B040();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x25A2B0EF0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_256FA8464(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_25704B040();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_25704AA30();
}

uint64_t sub_256FA4304(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_256FA6198(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA4470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_256FA62C4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA45C8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_256FA6500(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

Swift::Int32 __swiftcall MLXSlice.absoluteStart(_:)(Swift::Int32 a1)
{
  if (*(unsigned char *)(v1 + 4)) {
    Swift::Int32 result = 0;
  }
  else {
    Swift::Int32 result = *(_DWORD *)v1;
  }
  if (*(unsigned char *)(v1 + 4)) {
    BOOL v4 = *(unsigned char *)(v1 + 20) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0) {
      return 0;
    }
    Swift::Int32 result = a1 - 1;
    if (__OFSUB__(a1, 1)) {
      goto LABEL_16;
    }
  }
  if (result < 0)
  {
    BOOL v5 = __OFADD__(result, a1);
    result += a1;
    if (v5)
    {
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

Swift::Int32 __swiftcall MLXSlice.absoluteEnd(_:)(Swift::Int32 result)
{
  Swift::Int32 v2 = *(_DWORD *)(v1 + 8);
  if (*(unsigned char *)(v1 + 12))
  {
    Swift::Int32 v2 = result;
    BOOL v3 = *(unsigned char *)(v1 + 20) == 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  if (!v3) {
    goto LABEL_17;
  }
  Swift::Int32 v2 = result;
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0) {
    goto LABEL_17;
  }
  Swift::Int32 v4 = -result;
  if (__OFSUB__(0, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  Swift::Int32 v2 = v4 - 1;
  if (!v5)
  {
LABEL_17:
    if ((v2 & 0x80000000) == 0) {
      return v2;
    }
    BOOL v5 = __OFADD__(v2, result);
    v2 += result;
    if (!v5) {
      return v2;
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_256FA47C8(uint64_t a1, int a2)
{
  sub_256F9B5FC();
  uint64_t v4 = MLXArray.shape.getter();
  uint64_t v5 = Array<A>.asInt32.getter(v4);
  swift_bridgeObjectRelease();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_256FA8120(v5);
    uint64_t v5 = result;
    if (*(void *)(result + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (!*(void *)(v5 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  *(_DWORD *)(v5 + 32) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_25706E210;
  if ((a2 & 0x80000000) == 0) {
    mlx_array_from_int();
  }
  uint64_t v7 = *(void *)(a1 + 16);
  mlx_array_ndim(v7);
  int v8 = mlx_array_dim(v7, 0);
  BOOL v9 = __OFADD__(a2, v8);
  uint64_t result = (a2 + v8);
  if (!v9) {
    mlx_array_from_int();
  }
LABEL_9:
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256FA4988(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  int v3 = *((unsigned __int8 *)a2 + 4);
  uint64_t v4 = a2[2];
  char v5 = *((unsigned char *)a2 + 12);
  unsigned int v6 = a2[4];
  int v7 = *((unsigned __int8 *)a2 + 20);
  if ((v7 & 1) == 0 && v6 != 1) {
    goto LABEL_5;
  }
  if (v3)
  {
    if (!*((unsigned char *)a2 + 12)) {
      goto LABEL_5;
    }
LABEL_15:
    sub_256F9B5FC();
    uint64_t v13 = MLXArray.shape.getter();
    Array<A>.asInt32.getter(v13);
    swift_bridgeObjectRelease();
    mlx_broadcast_to();
  }
  if (v2) {
    char v12 = 0;
  }
  else {
    char v12 = *((unsigned char *)a2 + 12);
  }
  if (v12) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 16);
  mlx_array_ndim(v8);
  uint64_t result = mlx_array_dim(v8, 0);
  uint64_t v10 = result;
  if (v3) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = v2;
  }
  if ((v7 | v3 ^ 1) != 1)
  {
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v11 = result - 1;
      if (__OFSUB__(result, 1))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      unsigned int v11 = 0;
    }
  }
  if ((v5 & 1) == 0) {
    goto LABEL_24;
  }
  if (v7) {
    goto LABEL_26;
  }
  if ((v6 & 0x80000000) == 0)
  {
LABEL_25:
    if (v6 != 1)
    {
      if (v6)
      {
        uint64_t v17 = sub_256FA6F94(v11 | (unint64_t)(v10 << 32), (int)v6);
        sub_256FA9DA8(v17, 0);
        swift_release();
        sub_256FA4DA8();
      }
      goto LABEL_31;
    }
LABEL_26:
    sub_256F9B5FC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
    uint64_t result = swift_initStackObject();
    *(_OWORD *)(result + 16) = xmmword_25706E4F0;
    *(_DWORD *)(result + 32) = 1;
    if (!__OFSUB__(v10, v11))
    {
      *(_DWORD *)(result + 36) = v10 - v11;
      swift_retain();
      uint64_t v15 = MLXArray.shape.getter();
      uint64_t v16 = sub_256F9AD70(v15, v15 + 32, *(void *)(v15 + 16) != 0, (2 * *(void *)(v15 + 16)) | 1);
      swift_bridgeObjectRelease();
      sub_256FA3E24(v16);
      mlx_broadcast_to();
    }
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int v14 = -(int)result;
  if (!__OFSUB__(0, result))
  {
    uint64_t v10 = (v14 - 1);
    if (!__OFSUB__(v14, 1)) {
      goto LABEL_25;
    }
    __break(1u);
LABEL_24:
    uint64_t v10 = v4;
    if (v7) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

void sub_256FA4DA8()
{
  sub_256F9B5FC();
  swift_retain();
  uint64_t v0 = MLXArray.shape.getter();
  uint64_t v1 = MLXArray.shape.getter();
  sub_256FAAD68(v1, v1 + 32, *(void *)(v1 + 16) != 0, (2 * *(void *)(v1 + 16)) | 1);
  swift_bridgeObjectRelease();
  Array<A>.asInt32.getter(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  mlx_broadcast_to();
}

uint64_t sub_256FA4FF0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = 0;
    }
    if (v2 >= v4) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t MLXSlice.isFull.getter()
{
  int v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 4);
  if (v0[5])
  {
    if (!v1) {
      int v2 = 1;
    }
    if (v2 != 1) {
      return 0;
    }
    return *((unsigned __int8 *)v0 + 12);
  }
  uint64_t result = 0;
  if (!v1) {
    LOBYTE(v2) = 1;
  }
  if (v0[4] == 1 && (v2 & 1) != 0) {
    return *((unsigned __int8 *)v0 + 12);
  }
  return result;
}

uint64_t MLXArrayIndexOperation.description.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
  switch(*(unsigned __int8 *)(v0 + 20) >> 6)
  {
    case 1:
      uint64_t result = MLXSlice.description.getter();
      break;
    case 2:
      swift_retain();
      MLXArray.shape.getter();
      MEMORY[0x25A2B0AA0]();
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25704A850();
      uint64_t dtype = mlx_array_get_dtype(*(void *)(v2 + 16));
      sub_256FE5804(dtype, &v6);
      sub_25704AF60();
      sub_25704A850();
      sub_256FA81D8(v2, v1, v3);
      uint64_t result = 0;
      break;
    case 3:
      if ((v1 | v2) == 0 && v3 == 0xC000000000) {
        uint64_t result = 0x697370696C6C652ELL;
      }
      else {
        uint64_t result = 0x7369784177656E2ELL;
      }
      break;
    default:
      uint64_t result = sub_25704B150();
      break;
  }
  return result;
}

uint64_t Int.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_256FA592C(a1, 0, 0, a2);
}

void sub_256FA525C(uint64_t a1@<X8>)
{
}

uint64_t Int32.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_256FA527C(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t MLXArray.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0x80;
  return swift_retain();
}

uint64_t sub_256FA52A8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0x80;
  return swift_retain();
}

void MLXEllipsisIndex.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = -64;
}

void sub_256FA52D4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = -64;
}

double MLXNewAxisIndex.mlxArrayIndexOperation.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(_OWORD *)a1 = xmmword_25706E4E0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = -64;
  return result;
}

double sub_256FA5308@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(_OWORD *)a1 = xmmword_25706E4E0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = -64;
  return result;
}

uint64_t MLXSlice.description.getter()
{
  char v1 = *(unsigned char *)(v0 + 12);
  if ((*(unsigned char *)(v0 + 20) & 1) != 0 || *(_DWORD *)(v0 + 16) == 1)
  {
    if ((*(unsigned char *)(v0 + 4) & 1) == 0)
    {
      sub_256FAB5EC();
      sub_25704AD50();
    }
    sub_25704A850();
    swift_bridgeObjectRelease();
    sub_25704A850();
    if ((v1 & 1) == 0)
    {
      sub_256FAB5EC();
      sub_25704AD50();
    }
  }
  else
  {
    if ((*(unsigned char *)(v0 + 4) & 1) == 0)
    {
      sub_256FAB5EC();
      sub_25704AD50();
    }
    sub_25704A850();
    swift_bridgeObjectRelease();
    sub_25704A850();
    if ((v1 & 1) == 0)
    {
      sub_256FAB5EC();
      sub_25704AD50();
    }
    sub_25704A850();
    swift_bridgeObjectRelease();
    sub_25704A850();
    sub_25704B150();
  }
  sub_25704A850();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static MLXArrayIndex<>.stride(from:to:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (a2)
  {
    double result = 0;
    goto LABEL_5;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (a4)
  {
    LODWORD(a3) = 0;
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_9:
  if (a6)
  {
    LODWORD(a5) = 0;
LABEL_13:
    *(_DWORD *)a7 = result;
    *(unsigned char *)(a7 + 4) = a2 & 1;
    *(_DWORD *)(a7 + 8) = a3;
    *(unsigned char *)(a7 + 12) = a4 & 1;
    *(_DWORD *)(a7 + 16) = a5;
    *(unsigned char *)(a7 + 20) = a6 & 1;
    return result;
  }
  if (a5 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (a5 <= 0x7FFFFFFF) {
    goto LABEL_13;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t stride(from:to:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (a2)
  {
    double result = 0;
    goto LABEL_5;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (a4)
  {
    LODWORD(a3) = 0;
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_9:
  if (a6)
  {
    LODWORD(a5) = 0;
LABEL_13:
    *(_DWORD *)a7 = result;
    *(unsigned char *)(a7 + 4) = a2 & 1;
    *(_DWORD *)(a7 + 8) = a3;
    *(unsigned char *)(a7 + 12) = a4 & 1;
    *(_DWORD *)(a7 + 16) = a5;
    *(unsigned char *)(a7 + 20) = a6 & 1;
    return result;
  }
  if (a5 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (a5 <= 0x7FFFFFFF) {
    goto LABEL_13;
  }
LABEL_19:
  __break(1u);
  return result;
}

void MLXSlice.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  unsigned int v2 = v1[4];
  char v3 = 1;
  if (*((unsigned char *)v1 + 4)) {
    uint64_t v4 = 0x100000000;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*((unsigned char *)v1 + 12)) {
    uint64_t v5 = 0x100000000;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | v1[2];
  if (!*((unsigned char *)v1 + 20)) {
    char v3 = 0;
  }
  *(void *)a1 = v4 | *v1;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 20) = v3 | 0x40;
}

void sub_256FA56C0(uint64_t a1@<X8>)
{
  unsigned int v2 = v1[4];
  char v3 = 1;
  if (*((unsigned char *)v1 + 4)) {
    uint64_t v4 = 0x100000000;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*((unsigned char *)v1 + 12)) {
    uint64_t v5 = 0x100000000;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | v1[2];
  if (!*((unsigned char *)v1 + 20)) {
    char v3 = 0;
  }
  *(void *)a1 = v4 | *v1;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 20) = v3 | 0x40;
}

void sub_256FA5714(uint64_t a1@<X8>)
{
  if (*v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v2 = v1[1];
  if (*v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_9;
  }
  if (v2 <= 0x7FFFFFFF)
  {
    *(void *)a1 = *v1;
    *(void *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 65;
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t ClosedRange<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!__OFADD__(a2, 1))
  {
    *(void *)a3 = result;
    *(void *)(a3 + 8) = (a2 + 1);
    *(_DWORD *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 20) = 65;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_256FA57C8(uint64_t a1@<X8>)
{
  if (*v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v2 = v1[1];
  if (*v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  BOOL v4 = __OFADD__(v2, 1);
  uint64_t v5 = (v2 + 1);
  if (!v4)
  {
    *(void *)a1 = *v1;
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 65;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t PartialRangeUpTo<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 20) = 65;
    return result;
  }
  __break(1u);
  return result;
}

void sub_256FA5860(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 65;
    return;
  }
  __break(1u);
}

uint64_t PartialRangeThrough<>.mlxArrayIndexOperation.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__(result, 1))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = (result + 1);
    *(_DWORD *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 20) = 65;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_256FA58DC(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = (v2 + 1);
  if (!v3)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 65;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t PartialRangeFrom<>.mlxArrayIndexOperation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_256FA592C(a1, 0x100000000, 0x4100000000, a2);
}

uint64_t sub_256FA592C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(void *)a4 = result;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = a3;
    *(unsigned char *)(a4 + 20) = BYTE4(a3);
    return result;
  }
  __break(1u);
  return result;
}

void sub_256FA5964(uint64_t a1@<X8>)
{
}

void sub_256FA5970(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (*v3 <= 0x7FFFFFFF)
  {
    *(void *)a3 = *v3;
    *(void *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 16) = a2;
    *(unsigned char *)(a3 + 20) = BYTE4(a2);
    return;
  }
  __break(1u);
}

BOOL sub_256FA59AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

char *sub_256FA5A20(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
      int v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_256FAA310(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA5B34(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC800);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FAB104(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA5C48(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FA995C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_256FA5D5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC730);
      int v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_256FAA228(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA5E5C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC788);
      int v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_256FAA3FC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA5F84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6C8);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FAB364(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_256FA6098(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC808);
      int v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_256FAA228(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA6198(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
      int v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_256FABD1C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA62C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6C0);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FA9864(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA63D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      int v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_256FAAF00(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA6500(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC718);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FAB010(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_256FA6614(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6F8);
      int v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_256FABE2C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA6728(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

int64_t sub_256FA6898(int64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = HIDWORD(result);
  if (result < 0 != (int)result < 0)
  {
    if ((int)result >= 0) {
      int v3 = result;
    }
    else {
      int v3 = -(int)result;
    }
    if (result < 0) {
      LODWORD(v2) = -HIDWORD(result);
    }
    BOOL v4 = __CFADD__(v3, v2);
    int64_t v5 = (v3 + v2);
    if (v4)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if ((int)result < 0) {
      int64_t v6 = v5;
    }
    else {
      int64_t v6 = -v5;
    }
    if (v6)
    {
LABEL_12:
      if (v6 <= 0)
      {
        uint64_t v7 = (int32x4_t *)MEMORY[0x263F8EE78];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
        uint64_t v7 = (int32x4_t *)swift_allocObject();
        int64_t v8 = _swift_stdlib_malloc_size(v7);
        uint64_t v9 = v8 - 32;
        if (v8 < 32) {
          uint64_t v9 = v8 - 29;
        }
        v7[1].i64[0] = v6;
        v7[1].i64[1] = 2 * (v9 >> 2);
      }
      uint64_t result = sub_256FA7CB8((unint64_t)v11, v7 + 2, v6, v1);
      if (result == v6) {
        return (int64_t)v7;
      }
      __break(1u);
      goto LABEL_23;
    }
    return MEMORY[0x263F8EE78];
  }
  int v10 = HIDWORD(result) - result;
  if (!__OFSUB__(HIDWORD(result), result))
  {
    int64_t v6 = v10;
    if (v10) {
      goto LABEL_12;
    }
    return MEMORY[0x263F8EE78];
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_256FA69A4(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v4 = 8 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA6AE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 4 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 29;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

void *sub_256FA6C50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
  int v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_256FA7DCC((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_256FABF38();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_256FA6D4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 4 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 32 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6C0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 1;
      }
      v9[2] = v5;
      void v9[3] = 2 * (v11 >> 5);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

int64_t *sub_256FA6EC8(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x263F8EE78];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_256FA7FF0(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA6F94(unint64_t a1, uint64_t a2)
{
  LODWORD(v3) = a1;
  unint64_t v4 = HIDWORD(a1);
  uint64_t result = sub_256FA9340(a1, a2);
  uint64_t v6 = result;
  uint64_t v7 = a2 >> 63;
  if (result > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
    uint64_t v8 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v8);
    uint64_t v9 = result - 32;
    if (result < 32) {
      uint64_t v9 = result - 29;
    }
    uint64_t v10 = v9 >> 2;
    int v8[2] = v6;
    int64_t v8[3] = 2 * v10;
    uint64_t v11 = v8 + 4;
    uint64_t v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v6;
    while (1)
    {
      BOOL v13 = (int)v3 <= (int)v4;
      if (a2 > 0) {
        BOOL v13 = (int)v3 >= (int)v4;
      }
      if (v13) {
        break;
      }
      int v14 = v3;
      if (a2 < 0 == (int)v3 >= 0)
      {
        uint64_t v3 = a2 + (int)v3;
        if (__OFADD__(a2, v14)) {
          goto LABEL_64;
        }
        if (v3 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_66;
        }
        if (v3 > 0x7FFFFFFF)
        {
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        if (a2 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_63;
        }
        if (a2 > 0x7FFFFFFF) {
          goto LABEL_65;
        }
        if (__OFADD__(v3, a2)) {
          LODWORD(v3) = v7 ^ 0x7FFFFFFF;
        }
        else {
          LODWORD(v3) = v3 + a2;
        }
      }
      *v11++ = v14;
      if (!--v6) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_19:
  if (v6 < 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  uint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
  uint64_t v11 = (_DWORD *)(MEMORY[0x263F8EE78] + 32);
LABEL_21:
  BOOL v15 = (int)v3 <= (int)v4;
  if (a2 > 0) {
    BOOL v15 = (int)v3 >= (int)v4;
  }
  if (!v15)
  {
    int v33 = v7 ^ 0x7FFFFFFF;
    while (a2 < 0 != (int)v3 >= 0)
    {
      if (a2 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_67;
      }
      if (a2 > 0x7FFFFFFF) {
        goto LABEL_69;
      }
      LODWORD(v17) = v3 + a2;
      if (!__OFADD__(v3, a2)) {
        goto LABEL_38;
      }
      LODWORD(v17) = v33;
      if (v12)
      {
        uint64_t v16 = v8;
        LODWORD(v17) = v33;
        BOOL v18 = __OFSUB__(v12--, 1);
        if (v18) {
          goto LABEL_62;
        }
        goto LABEL_54;
      }
LABEL_42:
      unint64_t v19 = v8[3];
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_72;
      }
      int64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v20;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
      uint64_t v16 = (void *)swift_allocObject();
      int64_t v22 = _swift_stdlib_malloc_size(v16);
      uint64_t v23 = v22 - 32;
      if (v22 < 32) {
        uint64_t v23 = v22 - 29;
      }
      uint64_t v24 = v23 >> 2;
      v16[2] = v21;
      v16[3] = 2 * (v23 >> 2);
      unint64_t v25 = (unint64_t)(v16 + 4);
      uint64_t v26 = v8[3] >> 1;
      if (v8[2])
      {
        uint64_t v27 = v8 + 4;
        if (v16 != v8 || v25 >= (unint64_t)v27 + 4 * v26) {
          memmove(v16 + 4, v27, 4 * v26);
        }
        int v8[2] = 0;
      }
      uint64_t v11 = (_DWORD *)(v25 + 4 * v26);
      uint64_t v28 = (v24 & 0x7FFFFFFFFFFFFFFFLL) - v26;
      uint64_t result = swift_release();
      BOOL v18 = __OFSUB__(v28, 1);
      uint64_t v12 = v28 - 1;
      if (v18) {
        goto LABEL_62;
      }
LABEL_54:
      *v11++ = v3;
      BOOL v29 = (int)v17 <= (int)v4;
      if (a2 > 0) {
        BOOL v29 = (int)v17 >= (int)v4;
      }
      LODWORD(v3) = v17;
      uint64_t v8 = v16;
      if (v29) {
        goto LABEL_57;
      }
    }
    uint64_t v17 = a2 + (int)v3;
    if (__OFADD__(a2, (int)v3)) {
      goto LABEL_68;
    }
    if (v17 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_70;
    }
    if (v17 > 0x7FFFFFFF) {
      goto LABEL_71;
    }
LABEL_38:
    if (v12)
    {
      uint64_t v16 = v8;
      BOOL v18 = __OFSUB__(v12--, 1);
      if (v18) {
        goto LABEL_62;
      }
      goto LABEL_54;
    }
    goto LABEL_42;
  }
  uint64_t v16 = v8;
LABEL_57:
  unint64_t v30 = v16[3];
  if (v30 < 2) {
    return (uint64_t)v16;
  }
  unint64_t v31 = v30 >> 1;
  BOOL v18 = __OFSUB__(v31, v12);
  unint64_t v32 = v31 - v12;
  if (!v18)
  {
    v16[2] = v32;
    return (uint64_t)v16;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_256FA72BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_retain();
  mlx_array_ndim(v1);
  if ((int)mlx_array_dim(v1, 0) >= 1)
  {
    type metadata accessor for Stream();
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
    *(void *)(inited + 32) = 0;
    *(void *)(inited + 56) = MEMORY[0x263F8D6C8];
    *(void *)(inited + 64) = &protocol witness table for Int;
    swift_initStackObject();
    mlx_default_device();
  }
  swift_release();
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = *(void *)(MEMORY[0x263F8EE78] + 24);
  if (v4 >= 2) {
    *(void *)(MEMORY[0x263F8EE78] + 16) = v4 >> 1;
  }
  return v3;
}

uint64_t sub_256FA76D0(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = 32;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000;
    }
    v7 += 8;
    BOOL v10 = __OFADD__(v6++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v11 = (int64_t *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v11);
    uint64_t v12 = result - 32;
    if (result < 32) {
      uint64_t v12 = result - 25;
    }
    uint64_t v13 = v12 >> 3;
    void v11[2] = v6;
    v11[3] = 2 * v13;
    int v14 = v11 + 4;
    uint64_t v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      BOOL v16 = v5 <= a2;
      if (a3 > 0) {
        BOOL v16 = v5 >= a2;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v17 = v5 + a3;
      }
      *v14++ = v5;
      uint64_t v5 = v17;
      if (!--v6) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v11 = (int64_t *)MEMORY[0x263F8EE78];
  int v14 = (int64_t *)(MEMORY[0x263F8EE78] + 32);
  uint64_t v15 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v17 = result;
LABEL_23:
  BOOL v18 = v17 <= a2;
  if (a3 > 0) {
    BOOL v18 = v17 >= a2;
  }
  if (!v18)
  {
    uint64_t v20 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      int64_t v21 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        int64_t v21 = v20;
        if (!v15) {
          goto LABEL_34;
        }
        unint64_t v19 = v11;
        int64_t v21 = v20;
      }
      else
      {
        if (!v15)
        {
LABEL_34:
          unint64_t v22 = v11[3];
          if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_57;
          }
          int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
          if (v23 <= 1) {
            uint64_t v24 = 1;
          }
          else {
            uint64_t v24 = v23;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
          unint64_t v19 = (int64_t *)swift_allocObject();
          int64_t v25 = _swift_stdlib_malloc_size(v19);
          uint64_t v26 = v25 - 32;
          if (v25 < 32) {
            uint64_t v26 = v25 - 25;
          }
          uint64_t v27 = v26 >> 3;
          v19[2] = v24;
          uint64_t v19[3] = 2 * (v26 >> 3);
          unint64_t v28 = (unint64_t)(v19 + 4);
          unint64_t v29 = (unint64_t)v11[3] >> 1;
          if (v11[2])
          {
            unint64_t v30 = v11 + 4;
            if (v19 != v11 || v28 >= (unint64_t)v30 + 8 * v29) {
              memmove(v19 + 4, v30, 8 * v29);
            }
            void v11[2] = 0;
          }
          int v14 = (int64_t *)(v28 + 8 * v29);
          uint64_t v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
          uint64_t result = swift_release();
          uint64_t v20 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_46;
        }
        unint64_t v19 = v11;
      }
LABEL_46:
      BOOL v10 = __OFSUB__(v15--, 1);
      if (v10) {
        goto LABEL_56;
      }
      *v14++ = v17;
      BOOL v31 = v21 <= a2;
      if (a3 > 0) {
        BOOL v31 = v21 >= a2;
      }
      int64_t v17 = v21;
      uint64_t v11 = v19;
      if (v31) {
        goto LABEL_50;
      }
    }
  }
  unint64_t v19 = v11;
LABEL_50:
  unint64_t v32 = v19[3];
  if (v32 < 2) {
    return (uint64_t)v19;
  }
  unint64_t v33 = v32 >> 1;
  BOOL v10 = __OFSUB__(v33, v15);
  unint64_t v34 = v33 - v15;
  if (!v10)
  {
    v19[2] = v34;
    return (uint64_t)v19;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_256FA7974(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3 + 16);
  mlx_array_ndim(v6);
  uint64_t result = mlx_array_dim(v6, 0);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    uint64_t v9 = -1;
LABEL_8:
    *a1 = v9;
    a1[1] = (int)result;
    a1[2] = v10;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((int)result >= 1)
    {
      type metadata accessor for Stream();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
      *(void *)(inited + 32) = 0;
      *(void *)(inited + 56) = MEMORY[0x263F8D6C8];
      *(void *)(inited + 64) = &protocol witness table for Int;
      swift_initStackObject();
      mlx_default_device();
    }
    uint64_t v9 = 0;
    a3 = 0;
    goto LABEL_8;
  }
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

unint64_t sub_256FA7CB8(unint64_t result, int32x4_t *a2, unint64_t a3, unint64_t a4)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    LODWORD(v5) = a4;
LABEL_7:
    *(void *)uint64_t result = a4;
    *(_DWORD *)(result + 8) = v5;
    return a3;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (a4 == HIDWORD(a4))
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    if (SHIDWORD(a4) >= (int)a4)
    {
      if ((int)a4 >= SHIDWORD(a4))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        unint64_t v5 = HIDWORD(a4);
        a3 = v4;
      }
      else
      {
        unint64_t v6 = (HIDWORD(a4) + ~a4);
        unint64_t v4 = v6 + 1;
        if (v6 >= a3 - 1) {
          unint64_t v6 = a3 - 1;
        }
        if (v6 >= 8)
        {
          unint64_t v11 = v6 + 1;
          uint64_t v12 = v11 & 7;
          if ((v11 & 7) == 0) {
            uint64_t v12 = 8;
          }
          unint64_t v13 = v11 - v12;
          uint64_t v7 = v11 - v12 + 1;
          __int32 v8 = a4 + v13;
          uint64_t v9 = (int32x4_t *)((char *)a2 + 4 * v13);
          int32x4_t v14 = vaddq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_25706E4D0);
          uint64_t v15 = a2 + 1;
          v16.i64[0] = 0x400000004;
          v16.i64[1] = 0x400000004;
          v17.i64[0] = 0x800000008;
          v17.i64[1] = 0x800000008;
          do
          {
            v15[-1] = v14;
            int32x4_t *v15 = vaddq_s32(v14, v16);
            int32x4_t v14 = vaddq_s32(v14, v17);
            v15 += 2;
            v13 -= 8;
          }
          while (v13);
          int v10 = HIDWORD(a4) - 1;
        }
        else
        {
          uint64_t v7 = 1;
          __int32 v8 = a4;
          uint64_t v9 = a2;
          int v10 = HIDWORD(a4) - 1;
        }
        while (1)
        {
          LODWORD(v5) = v8 + 1;
          v9->i32[0] = v8;
          if (a3 == v7) {
            break;
          }
          if (v10 == v8) {
            goto LABEL_23;
          }
          ++v7;
          uint64_t v9 = (int32x4_t *)((char *)v9 + 4);
          ++v8;
          if ((int)v5 >= SHIDWORD(a4)) {
            goto LABEL_22;
          }
        }
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA7DCC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v21;
    v11[1] = v22;
    void v11[2] = v23;
    if (v13 == v10)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

int64_t *sub_256FA7FF0(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_25706E500);
      unint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        int64x2_t *v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    int64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_256FA8120(uint64_t a1)
{
  return sub_256FA5A20(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_256FA8134(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_25704B040();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x25A2B0EF0);
}

void *sub_256FA81B0(void *a1)
{
  return sub_256FA5C48(0, a1[2], 0, a1);
}

uint64_t sub_256FA81C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (((a3 >> 38) & 3) == 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_256FA81D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (((a3 >> 38) & 3) == 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_256FA81EC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

char *sub_256FA8204(uint64_t a1)
{
  return sub_256FA5D5C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_256FA8218(void *a1)
{
  return sub_256FA62C4(0, a1[2], 0, a1);
}

void *sub_256FA822C(void *a1)
{
  return sub_256FA6500(0, a1[2], 0, a1);
}

void *sub_256FA8240(void *a1)
{
  return sub_256FA6614(0, a1[2], 0, a1);
}

uint64_t sub_256FA8254(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_25704B040();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_25704B040();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_256FABF40(&qword_269FDC820, &qword_269FDC810);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC810);
          unint64_t v12 = sub_256FA86E0(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_256FABC94();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA8464(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_25704B040();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_25704B040();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_256FABF40(&qword_269FDC840, &qword_269FDC838);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC838);
          unint64_t v12 = sub_256FA8674(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MLXArray();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t (*sub_256FA8674(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_256FA8790(v6, a2, a3);
  return sub_256FA86DC;
}

uint64_t (*sub_256FA86E0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_256FA8818(v6, a2, a3);
  return sub_256FA86DC;
}

void sub_256FA8748(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_256FA8790(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  long long v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x25A2B0EE0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return sub_256FA8810;
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA8810()
{
  return swift_release();
}

void (*sub_256FA8818(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  long long v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x25A2B0EE0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)long long v3 = v4;
    return sub_256FA8898;
  }
  __break(1u);
  return result;
}

void sub_256FA8898(id *a1)
{
}

char *sub_256FA88A0(uint64_t a1, int64_t a2, int a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = sub_256FA5A20(result, v13, 1, v5);
    unint64_t v5 = result;
  }
  uint64_t v14 = &v5[4 * a1 + 32];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 4;
    int64_t v18 = &v5[4 * a2 + 32];
    if (v14 + 4 != v18 || result >= &v18[4 * v17]) {
      uint64_t result = (char *)memmove(result, v18, 4 * v17);
    }
    uint64_t v19 = *((void *)v5 + 2);
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v20;
LABEL_20:
      *(_DWORD *)uint64_t v14 = a3;
      uint64_t *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA8A04(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  id v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull(), *(void *)v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (void)v9 + 32) {
    goto LABEL_31;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7) {
      break;
    }
    id v4 = (void *)MEMORY[0x263F8EE78];
    if (v5 >= v7) {
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v19 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v20 = (v19 >> 1) - (void)v9;
    BOOL v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21) {
      goto LABEL_40;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  id v4 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 25;
  }
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (unint64_t)(v4 + 4);
    uint64_t v15 = (void *)(v11 + 8 * v7);
    if (v15 >= &v4[v10 + 4] || v14 >= (unint64_t)&v15[v10])
    {
      memcpy(v4 + 4, v15, 8 * v10);
      if (!__OFSUB__(0, v7))
      {
        uint64_t v17 = v4[2];
        uint64_t v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + 8) = v14 - 8 * v7;
              *(void *)(v1 + 16) = v7;
              *(void *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA8C78(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3] >> 1;
  uint64_t v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 16);
  BOOL v30 = __OFSUB__(v11, a2);
  uint64_t v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  BOOL v30 = __OFSUB__(v15, v14);
  uint64_t v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v38 = v16;
  __dst = (char *)(v10 + 32);
  uint64_t v18 = sub_256FA91D0(v8);
  uint64_t v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    uint64_t v36 = a4;
    if (a2 < 0) {
      goto LABEL_46;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v4[2];
    BOOL v21 = (char *)(v4[1] + 8 * v20);
    uint64_t v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 8 * a2);
    }
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0) {
      goto LABEL_46;
    }
    uint64_t v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14]) {
      memmove(v37, v23, 8 * v14);
    }
    *(void *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v34 = *(void *)(v10 + 16);
      BOOL v30 = __OFADD__(v20, v34);
      uint64_t v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *id v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  int64_t v25 = (void (*)(char *, uint64_t))a4;
  uint64_t v20 = v4[2];
  uint64_t v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  uint64_t v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v29 = v4[3] >> 1;
  BOOL v30 = __OFSUB__(v29, v28);
  BOOL v31 = v29 < v28;
  uint64_t v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA8EF4(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(result + 16);
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v5) {
    goto LABEL_13;
  }
  *(void *)(result + 16) = v9;
  uint64_t result = swift_release();
  uint64_t v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_256FA8FAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_34;
  }
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t v27 = (void *)swift_allocObject();
  int64_t v28 = _swift_stdlib_malloc_size(v27);
  uint64_t v29 = v28 - 32;
  if (v28 < 32) {
    uint64_t v29 = v28 - 25;
  }
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*sub_256FA91B4())()
{
  return nullsub_1;
}

uint64_t sub_256FA91D0(uint64_t a1)
{
  int64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    sub_25704B1F0();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x263F8EE78];
    }
    uint64_t v16 = v8 + 8 * v6 - a1;
    uint64_t v17 = v16 - 32;
    uint64_t v18 = v16 - 25;
    if (v17 >= 0) {
      uint64_t v18 = v17;
    }
    int64_t isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_21:
      sub_256FAA688(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA9340(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  unint64_t v4 = HIDWORD(a1);
  while (1)
  {
    BOOL v6 = (int)a1 <= (int)v4;
    if (a2 > 0) {
      BOOL v6 = (int)a1 >= (int)v4;
    }
    if (v6) {
      return result;
    }
    if (a2 < 0 == (int)a1 >= 0)
    {
      BOOL v5 = __OFADD__(a2, (int)a1);
      a1 = a2 + (int)a1;
      if (v5) {
        goto LABEL_20;
      }
      if (a1 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_21;
      }
      if (a1 > 0x7FFFFFFF)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      if (a2 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_18;
      }
      if (a2 > 0x7FFFFFFF) {
        goto LABEL_19;
      }
      BOOL v5 = __OFADD__(a1, a2);
      LODWORD(a1) = a1 + a2;
      if (v5) {
        LODWORD(a1) = (a2 >> 63) ^ 0x7FFFFFFF;
      }
    }
    BOOL v5 = __OFADD__(result++, 1);
    if (v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
  }
}

uint64_t sub_256FA93E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = (a4 >> 1) - a3;
  if (a4 >> 1 == a3)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_22:
    uint64_t v18 = *(void *)(v5 + 16);
    swift_release();
    return v18;
  }
  if ((uint64_t)(a4 >> 1) > a3)
  {
    swift_unknownObjectRetain();
    uint64_t v8 = (unsigned int *)(a2 + 24 * a3 + 16);
    uint64_t v5 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v12 = *((void *)v8 - 2);
      uint64_t v13 = *((void *)v8 - 1);
      unint64_t v14 = *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32);
      if (*((unsigned __int8 *)v8 + 4) >> 6 < 3uLL || v12 != 1 || v13 != 0 || v14 != 0xC000000000)
      {
        sub_256FA81C4(*((void *)v8 - 2), *((void *)v8 - 1), *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_256F90A10(0, *(void *)(v5 + 16) + 1, 1);
        }
        unint64_t v10 = *(void *)(v5 + 16);
        unint64_t v9 = *(void *)(v5 + 24);
        if (v10 >= v9 >> 1) {
          sub_256F90A10(v9 > 1, v10 + 1, 1);
        }
        *(void *)(v5 + 16) = v10 + 1;
        uint64_t v11 = v5 + 24 * v10;
        *(void *)(v11 + 32) = v12;
        *(void *)(v11 + 40) = v13;
        *(unsigned char *)(v11 + 52) = BYTE4(v14);
        *(_DWORD *)(v11 + 48) = v14;
      }
      v8 += 6;
      --v4;
    }
    while (v4);
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_256FA954C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (unsigned int *)(swift_bridgeObjectRetain() + 48);
    uint64_t v3 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = *((void *)v2 - 2);
      uint64_t v8 = *((void *)v2 - 1);
      unint64_t v9 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
      if (*((unsigned __int8 *)v2 + 4) >> 6 < 3uLL || v7 != 1 || v8 != 0 || v9 != 0xC000000000)
      {
        sub_256FA81C4(*((void *)v2 - 2), *((void *)v2 - 1), *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_256F90A10(0, *(void *)(v3 + 16) + 1, 1);
        }
        unint64_t v5 = *(void *)(v3 + 16);
        unint64_t v4 = *(void *)(v3 + 24);
        if (v5 >= v4 >> 1) {
          sub_256F90A10(v4 > 1, v5 + 1, 1);
        }
        *(void *)(v3 + 16) = v5 + 1;
        uint64_t v6 = v3 + 24 * v5;
        *(void *)(v6 + 32) = v7;
        *(void *)(v6 + 40) = v8;
        *(unsigned char *)(v6 + 52) = BYTE4(v9);
        *(_DWORD *)(v6 + 48) = v9;
      }
      v2 += 6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  uint64_t v13 = *(void *)(v3 + 16);
  swift_release();
  return v13;
}

uint64_t sub_256FA9698(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_16;
  }
  uint64_t v4 = result;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t result = sub_256F90A10(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v4 || v3 < 0) {
      goto LABEL_17;
    }
    uint64_t result = v14;
    uint64_t v7 = *(void *)(a3 + 16);
    if (v7 <= v4) {
      uint64_t v7 = v4;
    }
    uint64_t v8 = v7 - v4;
    unint64_t v9 = (unsigned int *)(a3 + 4 * v4 + 32);
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v8) {
        goto LABEL_15;
      }
      uint64_t v10 = *v9;
      uint64_t v15 = result;
      unint64_t v12 = *(void *)(result + 16);
      unint64_t v11 = *(void *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_256F90A10(v11 > 1, v12 + 1, 1);
        uint64_t result = v15;
      }
      *(void *)(result + 16) = v12 + 1;
      uint64_t v13 = result + 24 * v12;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = v10;
      *(unsigned char *)(v13 + 52) = 64;
      *(_DWORD *)(v13 + 48) = 1;
      --v8;
      ++v9;
      if (!--v3) {
        return result;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

BOOL _s8Morpheus8MLXSliceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4))
  {
    if (!*(unsigned char *)(a2 + 4)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 12))
  {
    if (!*(unsigned char *)(a2 + 12)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)) {
      char v3 = *(unsigned char *)(a2 + 12);
    }
    else {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 20) & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)) {
      char v5 = *(unsigned char *)(a2 + 20);
    }
    else {
      char v5 = 1;
    }
    return (v5 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0;
}

uint64_t sub_256FA9864(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

char *sub_256FA995C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FA9A48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 0);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FA9B68(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 6);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FA9C88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FA9DA8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FA9EC8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FA9FE8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_256FAA108(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = (uint64_t *)(a2 + 32);
      uint64_t v6 = 1;
      while (1)
      {
        uint64_t v7 = *v5++;
        uint64_t v8 = v6 * v7;
        if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
          break;
        }
        uint64_t v6 = v8;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v8 = 1;
LABEL_9:
    uint64_t v9 = a2;
    if (v8 != v3) {
      goto LABEL_15;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25706E4C0;
    *(void *)(v9 + 32) = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = Array<A>.asInt32.getter(v9);
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 >> 31)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = mlx_array_from_data(v2 + 32, (char *)(v10 + 32), v11, 2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for MLXArray();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v12;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

char *sub_256FAA228(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_25704B090();
  __break(1u);
  return result;
}

char *sub_256FAA310(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAA3FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAA4F4(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_25704B040();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_25704B040();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_25704B040();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for MLXArray();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      sub_25704AE40();
      uint64_t v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25704B050();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

unint64_t sub_256FAA688(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFSUB__(v8, a2);
  uint64_t v10 = v8 - a2;
  if (v9) {
    goto LABEL_18;
  }
  if (v10 < 0)
  {
LABEL_21:
    uint64_t result = sub_25704B090();
    __break(1u);
    return result;
  }
  uint64_t result = v7 + 32 + 8 * result + 8 * a3;
  uint64_t v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10) {
    uint64_t result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  }
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v13, v6);
  uint64_t v14 = v13 + v6;
  if (v9) {
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

void *sub_256FAA77C(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  uint64_t v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2)) {
    goto LABEL_48;
  }
  uint64_t v5 = result[4];
  uint64_t v35 = result[3] >> 1;
  if (v5 == v35) {
    return result;
  }
  uint64_t v6 = result[2];
  if (v5 < v6 || v5 >= v35) {
    goto LABEL_49;
  }
  uint64_t v8 = v5 + 1;
  uint64_t v9 = *(void *)(result[1] + 8 * v5);
  uint64_t v28 = result[1];
  uint64_t v29 = result[2];
  BOOL v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    uint64_t v36 = sub_256FA8FAC(v4, v4 + 1, *v1, v1[1], v2, v3);
    uint64_t v10 = sub_256FA91B4();
    sub_256FA8C78(&v36, v4, 0, (void (*)(uint64_t, uint64_t))v10);
    swift_release();
    uint64_t result = (void *)swift_release();
    uint64_t v2 = v1[2];
    unint64_t v3 = v1[3];
    uint64_t v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2)) {
      goto LABEL_43;
    }
    uint64_t v31 = v4 + 1;
    unint64_t v32 = v3 >> 1;
    uint64_t v12 = v1[1];
    if (v3)
    {
      uint64_t v33 = v4;
      uint64_t v13 = v1[2];
      sub_25704B1F0();
      swift_unknownObjectRetain();
      uint64_t v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        uint64_t v14 = MEMORY[0x263F8EE78];
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        unint64_t v17 = *(void *)(v14 + 24);
        uint64_t result = (void *)swift_release();
        uint64_t v18 = (v17 >> 1) - v15;
        BOOL v19 = __OFADD__(v11, v18);
        int64_t v16 = v11 + v18;
        if (v19) {
          goto LABEL_47;
        }
        uint64_t v6 = v29;
      }
      else
      {
        uint64_t result = (void *)swift_release();
        int64_t v16 = v11;
      }
      uint64_t v2 = v13;
      uint64_t v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        BOOL v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      int64_t v16 = (v3 >> 1) - v2;
      if (v4 >= v11) {
        goto LABEL_32;
      }
    }
    *(void *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      uint64_t v21 = 0;
      uint64_t v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        uint64_t v9 = *(void *)(v28 + 8 * v8 + 8 * v21);
        BOOL v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          uint64_t v4 = v16;
          goto LABEL_33;
        }
        *(void *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          uint64_t v9 = 0;
          uint64_t v4 = v31 + v21;
          uint64_t v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    uint64_t v9 = 0;
    BOOL v20 = 1;
    uint64_t v4 = v31;
    uint64_t v8 = v35;
LABEL_33:
    uint64_t v23 = v4 - v11;
    if (__OFSUB__(v4, v11)) {
      goto LABEL_44;
    }
    uint64_t v1 = v30;
    if (v23)
    {
      uint64_t v34 = v4;
      uint64_t v24 = v2;
      sub_25704B1F0();
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        uint64_t result = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v25 = result[2];
      BOOL v19 = __OFADD__(v25, v23);
      uint64_t v26 = v25 + v23;
      if (v19) {
        goto LABEL_45;
      }
      result[2] = v26;
      uint64_t result = (void *)swift_release();
      unint64_t v27 = v32 + v23;
      if (__OFADD__(v32, v23)) {
        goto LABEL_46;
      }
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      unint64_t v3 = v3 & 1 | (2 * v27);
      v30[3] = v3;
      uint64_t v6 = v29;
      uint64_t v2 = v24;
      uint64_t v4 = v34;
    }
    if (v20) {
      return result;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void *sub_256FAAA8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = v4[2];
  unint64_t v7 = v4[3];
  uint64_t v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    uint64_t v15 = v9;
    goto LABEL_10;
  }
  uint64_t v12 = v4[1];
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  unint64_t v16 = *(void *)(v13 + 24);
  swift_release();
  uint64_t v17 = (v16 >> 1) - v14;
  BOOL v18 = __OFADD__(v9, v17);
  uint64_t v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  uint64_t v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v20 = 2 * v15;
    if (v20 > v19) {
      uint64_t v19 = v20;
    }
  }
  uint64_t result = (void *)sub_256FA8A04(v19);
  uint64_t v23 = v4[2];
  unint64_t v22 = v4[3];
  uint64_t v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23)) {
    goto LABEL_40;
  }
  uint64_t v25 = (char *)(v4[1] + 8 * v23 + 8 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    uint64_t v28 = v24;
    goto LABEL_23;
  }
  sub_25704B1F0();
  swift_unknownObjectRetain();
  uint64_t v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    uint64_t v26 = MEMORY[0x263F8EE78];
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v25 != (char *)(v26 + 8 * v27 + 32))
  {
    uint64_t result = (void *)swift_release();
    goto LABEL_21;
  }
  unint64_t v29 = *(void *)(v26 + 24);
  uint64_t result = (void *)swift_release();
  uint64_t v30 = (v29 >> 1) - v27;
  BOOL v18 = __OFADD__(v24, v30);
  uint64_t v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  uint64_t v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0;
      unint64_t v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0) {
    goto LABEL_48;
  }
  unint64_t v32 = (char *)(a2 + 8 * a3);
  size_t v33 = 8 * v6;
  if (v32 < &v25[8 * v6] && v25 < &v32[v33]) {
    goto LABEL_48;
  }
  uint64_t result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      uint64_t result = (void *)sub_25704B090();
      __break(1u);
      return result;
    }
    uint64_t result = (void *)sub_256FA8EF4(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return sub_256FAA77C(v36);
  }
  return result;
}

void *sub_256FAAD68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_256FA5C48(result, v13, 1, v7);
      unint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  uint64_t v15 = (char *)&v7[v14 + 4];
  unint64_t v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6]) {
    goto LABEL_27;
  }
  uint64_t result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = v7[2];
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAAF00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAB010(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAB104(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAB1F8(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_256FA6500(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FAB364(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

char *sub_256FAB470(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v12 = v6 + v11;
  if (__OFADD__(v6, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v12) {
      int64_t v14 = v6 + v11;
    }
    else {
      int64_t v14 = v6;
    }
    uint64_t result = sub_256FA5A20(result, v14, 1, v5);
    unint64_t v5 = result;
  }
  uint64_t v15 = &v5[4 * a1 + 32];
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)v5 + 2);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  if (v18 < 0)
  {
LABEL_30:
    uint64_t result = (char *)sub_25704B090();
    __break(1u);
    return result;
  }
  uint64_t result = &v15[4 * v10];
  BOOL v19 = &v5[4 * a2 + 32];
  if (result != v19 || result >= &v19[4 * v18]) {
    uint64_t result = (char *)memmove(result, v19, 4 * v18);
  }
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v17 = __OFADD__(v20, v11);
  uint64_t v21 = v20 + v11;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *((void *)v5 + 2) = v21;
LABEL_20:
  if (v10) {
    uint64_t result = (char *)memcpy(v15, (const void *)(a3 + 32), 4 * v10);
  }
  uint64_t *v3 = v5;
  return result;
}

unint64_t sub_256FAB5EC()
{
  unint64_t result = qword_269FDC7E8;
  if (!qword_269FDC7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7E8);
  }
  return result;
}

uint64_t sub_256FAB640(uint64_t a1)
{
  return MEMORY[0x270FA03F0](a1, &opaque type descriptor for <<opaque return type of MLXArray.makeIterator()>>, 1);
}

uint64_t sub_256FAB664()
{
  return 0;
}

uint64_t sub_256FAB67C()
{
  return 0;
}

uint64_t sub_256FAB694()
{
  return 0;
}

uint64_t sub_256FAB6A4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_256FA210C(a1, MLXArray.subscript.getter, a2);
}

uint64_t sub_256FAB6D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_256FA217C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_256FAB6FC()
{
  return 0;
}

uint64_t sub_256FAB70C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_256FA210C(a1, (uint64_t (*)(uint64_t, uint64_t *))MLXArray.subscript.getter, a2);
}

uint64_t sub_256FAB738(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_256FA217C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))MLXArray.subscript.setter);
}

uint64_t sub_256FAB764()
{
  return 0;
}

uint64_t destroy for MLXArrayIndexOperation(uint64_t a1)
{
  return sub_256FA81D8(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32));
}

uint64_t _s8Morpheus22MLXArrayIndexOperationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  sub_256FA81C4(*(void *)a2, v4, v6 | (v5 << 32));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithCopy for MLXArrayIndexOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  sub_256FA81C4(*(void *)a2, v4, v6 | (v5 << 32));
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 20) = v5;
  sub_256FA81D8(v7, v8, v9);
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MLXArrayIndexOperation(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 20);
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v3;
  sub_256FA81D8(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLXArrayIndexOperation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 8) >> 29) & 0xFFFFFFF0 | (*(void *)a1 >> 60);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MLXArrayIndexOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (unint64_t)-a2 << 60;
      *(void *)(result + 8) = ((unint64_t)-a2 << 29) & 0x1FFFFFFE00000000;
      *(unsigned char *)(result + 20) = 0;
      *(_DWORD *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_256FAB984(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 20) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_256FAB9A0(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint64_t result = a1 + 16;
  unint64_t v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = BYTE4(v3) & 0x3F;
  return result;
}

int8x16_t sub_256FAB9BC(int8x16_t *a1, uint64_t a2)
{
  if (a2 < 3)
  {
    __int32 v2 = a1[1].i32[0];
    unint64_t v3 = (a2 << 38) | ((unint64_t)(a1[1].i8[4] & 1) << 32);
    int8x16_t result = vandq_s8(*a1, (int8x16_t)xmmword_25706E510);
    *a1 = result;
    a1[1].i32[0] = v2;
    a1[1].i8[4] = BYTE4(v3);
  }
  else
  {
    a1->i64[0] = (a2 - 3);
    a1->i64[1] = 0;
    a1[1].i32[0] = 0;
    a1[1].i8[4] = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLXArrayIndexOperation()
{
  return &type metadata for MLXArrayIndexOperation;
}

uint64_t dispatch thunk of MLXArrayIndex.mlxArrayIndexOperation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MLXEllipsisIndex()
{
  return &type metadata for MLXEllipsisIndex;
}

ValueMetadata *type metadata accessor for MLXNewAxisIndex()
{
  return &type metadata for MLXNewAxisIndex;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MLXSlice(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MLXSlice(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MLXSlice()
{
  return &type metadata for MLXSlice;
}

unint64_t sub_256FABACC()
{
  unint64_t result = qword_269FDC7F0;
  if (!qword_269FDC7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC7F0);
  }
  return result;
}

uint64_t _s16MLXArrayIteratorVwCP(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t _s16MLXArrayIteratorVwxx()
{
  return swift_release();
}

void *_s16MLXArrayIteratorVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s16MLXArrayIteratorVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t _s16MLXArrayIteratorVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s16MLXArrayIteratorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s16MLXArrayIteratorVMa()
{
  return &_s16MLXArrayIteratorVN;
}

unint64_t sub_256FABC94()
{
  unint64_t result = qword_269FDC818;
  if (!qword_269FDC818)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269FDC818);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_256FABD1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FABE2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC700);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

uint64_t sub_256FABF38()
{
  return swift_release();
}

uint64_t sub_256FABF40(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void Int.mod(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 == (int)a2) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
}

uint64_t sub_256FAC058()
{
  uint64_t result = *v0;
  if (*v0 == (int)*v0) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

void Int32.mod(_:)()
{
}

void sub_256FAC1D4()
{
}

atomic_ullong *UInt32.mod(_:)(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = a2;
  char v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(4, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FAC37C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FAC384);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_256FAC39C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = *v1;
  char v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(4, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FAC490(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FAC498);
  }
  _Unwind_Resume(a1);
}

void Float.mod(_:)()
{
}

void sub_256FAC564()
{
}

void Double.mod(_:)()
{
}

void sub_256FAC6D4()
{
}

void *MLXArray.mod(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_256FAC89C(uint64_t a1)
{
  return MLXArray.mod(_:)(a1);
}

uint64_t dispatch thunk of Modulable.mod(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void sub_256FAC8EC()
{
}

Swift::Int sub_256FAC900()
{
  return Dictionary.len()();
}

Swift::Int sub_256FAC918()
{
  return SharedMutableArray.len()();
}

Swift::Int sub_256FAC940()
{
  return SharedMutableDict.len()();
}

uint64_t sub_256FAC968()
{
  return _sSS8MorpheusE3lenSiyF_0();
}

Swift::Int __swiftcall MLXArray.len()()
{
  if (mlx_array_size(*(void *)(v0 + 16)) == 1)
  {
    uint64_t v1 = *(void *)(MLXArray.shape.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v1) {
      return 1;
    }
  }
  Swift::Int result = MLXArray.shape.getter();
  if (*(void *)(result + 16))
  {
    Swift::Int v3 = *(void *)(result + 32);
    swift_bridgeObjectRelease();
    return v3;
  }
  __break(1u);
  return result;
}

Swift::Int sub_256FAC9D4()
{
  return MLXArray.len()();
}

uint64_t dispatch thunk of Countable.len()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void _s8Morpheus4evalyyAA8MLXArrayCd_tF_0()
{
}

Swift::Void __swiftcall asyncEval(_:)(Swift::OpaquePointer a1)
{
}

uint64_t sub_256FACDB0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  sub_256FB118C(a1, (uint64_t)v270);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC880);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v263, (uint64_t)&v257);
    uint64_t v4 = v258;
    uint64_t v5 = *(void *)&v259[0];
    __swift_project_boxed_opaque_existential_1(&v257, v258);
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    sub_256FA4138(v6);
    uint64_t v7 = &v257;
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
  }
  unsigned int v229 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC888);
  if (!swift_dynamicCast())
  {
    type metadata accessor for MLXArray();
    if (swift_dynamicCast())
    {
      uint64_t v196 = swift_retain();
      MEMORY[0x25A2B0A90](v196);
      if (*(void *)((*v229 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v229 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_243:
        sub_25704AAC0();
        sub_25704AA30();
        goto LABEL_244;
      }
LABEL_331:
      sub_25704AA60();
      goto LABEL_243;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC838);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
      if (swift_dynamicCast())
      {
        uint64_t v199 = *(void *)(v257 + 16);
        if (v199)
        {
          uint64_t v200 = v257 + 32;
          do
          {
            sub_256FB118C(v200, (uint64_t)&v263);
            sub_256FACDB0(&v263, v229);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v263);
            v200 += 32;
            --v199;
          }
          while (v199);
        }
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC898);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8A0);
        if (swift_dynamicCast())
        {
          sub_256F9ABF4(&v263, &v257);
          sub_256F9ABF4(v266, v259);
          sub_256FACDB0(&v257, v229);
          sub_256FACDB0(v259, v229);
          uint64_t v216 = &qword_269FDC8A0;
          goto LABEL_309;
        }
        goto LABEL_295;
      }
      int64_t v205 = 0;
      uint64_t v3 = v257;
      uint64_t v206 = v257 + 64;
      uint64_t v207 = 1 << *(unsigned char *)(v257 + 32);
      uint64_t v208 = -1;
      if (v207 < 64) {
        uint64_t v208 = ~(-1 << v207);
      }
      unint64_t v209 = v208 & *(void *)(v257 + 64);
      int64_t v210 = (unint64_t)(v207 + 63) >> 6;
      while (1)
      {
        if (v209)
        {
          unint64_t v211 = __clz(__rbit64(v209));
          v209 &= v209 - 1;
          unint64_t v212 = v211 | (v205 << 6);
        }
        else
        {
          int64_t v213 = v205 + 1;
          if (__OFADD__(v205, 1)) {
            goto LABEL_329;
          }
          if (v213 >= v210) {
            goto LABEL_244;
          }
          unint64_t v214 = *(void *)(v206 + 8 * v213);
          ++v205;
          if (!v214)
          {
            int64_t v205 = v213 + 1;
            if (v213 + 1 >= v210) {
              goto LABEL_244;
            }
            unint64_t v214 = *(void *)(v206 + 8 * v205);
            if (!v214)
            {
              int64_t v205 = v213 + 2;
              if (v213 + 2 >= v210) {
                goto LABEL_244;
              }
              unint64_t v214 = *(void *)(v206 + 8 * v205);
              if (!v214)
              {
                int64_t v205 = v213 + 3;
                if (v213 + 3 >= v210) {
                  goto LABEL_244;
                }
                unint64_t v214 = *(void *)(v206 + 8 * v205);
                if (!v214)
                {
                  int64_t v215 = v213 + 4;
                  if (v215 >= v210) {
                    goto LABEL_244;
                  }
                  unint64_t v214 = *(void *)(v206 + 8 * v215);
                  if (!v214)
                  {
                    while (1)
                    {
                      int64_t v205 = v215 + 1;
                      if (__OFADD__(v215, 1))
                      {
                        __break(1u);
LABEL_333:
                        int v222 = 0;
                        uint64_t v221 = 1092;
                        LOBYTE(v220) = 2;
                        sub_25704B090();
                        __break(1u);
LABEL_334:
                        swift_release();
                        __break(1u);
LABEL_335:
                        swift_release();
                        __break(1u);
                        goto LABEL_336;
                      }
                      if (v205 >= v210) {
                        break;
                      }
                      unint64_t v214 = *(void *)(v206 + 8 * v205);
                      ++v215;
                      if (v214) {
                        goto LABEL_284;
                      }
                    }
LABEL_244:
                    swift_release();
                    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
                  }
                  int64_t v205 = v215;
                }
              }
            }
          }
LABEL_284:
          unint64_t v209 = (v214 - 1) & v214;
          unint64_t v212 = __clz(__rbit64(v214)) + (v205 << 6);
        }
        sub_256FB118C(*(void *)(v257 + 56) + 32 * v212, (uint64_t)&v263);
        sub_256FACDB0(&v263, v229);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v263);
      }
    }
    unint64_t v197 = v263;
LABEL_260:
    sub_256FA4138(v197);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
  }
  uint64_t v8 = swift_bridgeObjectRetain();
  *(void *)&long long v263 = sub_256FA6C50(v8);
  sub_256FAFEE4((void **)&v263);
  unint64_t v9 = (void *)MEMORY[0x263F8EE78];
  uint64_t v256 = MEMORY[0x263F8EE78];
  uint64_t v227 = *(void *)(v263 + 16);
  if (!v227)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v198 = MEMORY[0x263F8EE78];
LABEL_254:
    swift_bridgeObjectRelease();
    uint64_t v201 = *(void *)(v198 + 16);
    if (v201)
    {
      *(void *)&long long v263 = v9;
      sub_25704AEE0();
      uint64_t v202 = 48;
      do
      {
        swift_retain();
        sub_25704AEB0();
        sub_25704AEF0();
        sub_25704AF00();
        sub_25704AEC0();
        v202 += 24;
        --v201;
      }
      while (v201);
      unint64_t v203 = v263;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v203 = MEMORY[0x263F8EE78];
    }
    unint64_t v197 = v203;
    goto LABEL_260;
  }
  uint64_t v250 = 0;
  uint64_t v228 = v263 + 32;
  uint64_t v223 = v263;
  swift_retain();
  uint64_t v10 = 0;
  long long v246 = xmmword_25706E4C0;
  uint64_t v226 = v257;
  while (2)
  {
    uint64_t v231 = v10;
    int64_t v14 = (void *)(v228 + 24 * v10);
    uint64_t v15 = v14[1];
    unint64_t v16 = v14[2];
    *(void *)&long long v263 = *v14;
    *((void *)&v263 + 1) = v15;
    uint64_t v232 = v16 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v230 = v15;
    swift_bridgeObjectRetain_n();
    uint64_t v240 = sub_25704A7D0();
    uint64_t v242 = v17;
    uint64_t v243 = 32;
    switch(v16 >> 62)
    {
      case 1uLL:
        uint64_t v18 = *(void *)(v232 + 16);
        int v236 = *(uint64_t **)(v18 + 16);
        if (!v236) {
          goto LABEL_125;
        }
        uint64_t v235 = v18 + 32;
        uint64_t v233 = v18;
        swift_bridgeObjectRetain_n();
        BOOL v19 = 0;
        uint64_t v247 = v9;
        break;
      case 2uLL:
        uint64_t v104 = *(void *)(v232 + 16);
        uint64_t v105 = *(void *)(v104 + 16);
        if (v105)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
          int v106 = (void *)swift_allocObject();
          size_t v107 = _swift_stdlib_malloc_size(v106);
          v106[2] = v105;
          v106[3] = 2 * ((uint64_t)(v107 - 32) / 24);
          uint64_t v108 = sub_256FA7DCC((uint64_t)&v263, v106 + 4, v105, v104);
          swift_bridgeObjectRetain_n();
          sub_256FABF38();
          if (v108 != v105) {
            goto LABEL_330;
          }
          swift_bridgeObjectRelease();
          unint64_t v9 = (void *)MEMORY[0x263F8EE78];
        }
        else
        {
          int v106 = v9;
        }
        *(void *)&long long v263 = v106;
        uint64_t v109 = v250;
        sub_256FAFEE4((void **)&v263);
        uint64_t v3 = v231;
        if (v109) {
          goto LABEL_334;
        }
        uint64_t v250 = 0;
        int v234 = *(uint64_t **)(v263 + 16);
        if (v234)
        {
          uint64_t v233 = v263 + 32;
          uint64_t v224 = v263;
          swift_retain();
          uint64_t v110 = 0;
          uint64_t v247 = v9;
          while (2)
          {
            uint64_t v111 = (void *)(v233 + 24 * (void)v110);
            unsigned int v112 = (uint64_t *)v111[1];
            unint64_t v113 = v111[2];
            int v238 = (uint64_t *)((char *)v110 + 1);
            *(void *)&long long v263 = *v111;
            *((void *)&v263 + 1) = v112;
            uint64_t v241 = v113 & 0x3FFFFFFFFFFFFFFFLL;
            swift_retain();
            unsigned int v239 = v112;
            swift_bridgeObjectRetain_n();
            sub_25704A7D0();
            *(void *)&long long v263 = v240;
            *((void *)&v263 + 1) = v242;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_25704A850();
            swift_bridgeObjectRetain();
            sub_25704A850();
            swift_bridgeObjectRelease_n();
            long long v251 = v263;
            switch(v113 >> 62)
            {
              case 1uLL:
                unsigned int v122 = *(uint64_t **)(v241 + 16);
                unsigned int v245 = (uint64_t *)v122[2];
                if (!v245) {
                  goto LABEL_180;
                }
                int v249 = v122 + 4;
                int v236 = v122;
                swift_bridgeObjectRetain_n();
                uint64_t v123 = 0;
                char v115 = v9;
                unsigned int v124 = v245;
                while (2)
                {
                  unint64_t v125 = v249[v123];
                  uint64_t v252 = v123 + 1;
                  int v253 = v115;
                  long long v263 = v251;
                  uint64_t v126 = v125 & 0x3FFFFFFFFFFFFFFFLL;
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_25704A850();
                  uint64_t v255 = (void *)v123;
                  sub_25704B150();
                  sub_25704A850();
                  swift_bridgeObjectRelease();
                  long long v127 = v263;
                  switch(v125 >> 62)
                  {
                    case 1uLL:
                      uint64_t v135 = *(void *)((v125 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                      uint64_t v255 = v9;
                      unsigned int v136 = v9;
                      uint64_t v137 = *(void *)(v135 + 16);
                      if (v137)
                      {
                        unsigned int v244 = &v220;
                        uint64_t v248 = v125 & 0x3FFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                        for (uint64_t i = 0; i != v137; ++i)
                        {
                          unint64_t v139 = *(void *)(v135 + 8 * i + 32);
                          long long v263 = v127;
                          swift_retain();
                          swift_bridgeObjectRetain();
                          sub_25704A850();
                          uint64_t v254 = i;
                          sub_25704B150();
                          sub_25704A850();
                          swift_bridgeObjectRelease();
                          uint64_t v140 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v139);
                          swift_release();
                          swift_bridgeObjectRelease();
                          sub_256FA4304(v140);
                        }
                        swift_bridgeObjectRelease();
                        uint64_t v129 = (uint64_t)v255;
                        unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                        unsigned int v124 = v245;
                      }
                      else
                      {
                        uint64_t v129 = (uint64_t)v136;
                        unint64_t v9 = v136;
                      }
                      swift_bridgeObjectRelease();
                      swift_release();
                      goto LABEL_162;
                    case 2uLL:
                      uint64_t v130 = v263;
                      uint64_t v3 = 24;
                      uint64_t v131 = *(void *)((v125 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                      uint64_t v132 = *(void *)(v131 + 16);
                      if (v132)
                      {
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
                        int v133 = (void *)swift_allocObject();
                        size_t v134 = _swift_stdlib_malloc_size(v133);
                        v133[2] = v132;
                        v133[3] = 2 * ((uint64_t)(v134 - 32) / 24);
                        uint64_t v248 = sub_256FA7DCC((uint64_t)&v263, v133 + 4, v132, v131);
                        uint64_t v3 = v265;
                        unsigned int v244 = v264;
                        swift_bridgeObjectRetain_n();
                        sub_256FABF38();
                        if (v248 != v132) {
                          goto LABEL_315;
                        }
                        swift_bridgeObjectRelease();
                        unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                        uint64_t v126 = v125 & 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else
                      {
                        int v133 = v9;
                      }
                      *(void *)&long long v263 = v133;
                      uint64_t v141 = v250;
                      sub_256FAFEE4((void **)&v263);
                      if (v141) {
                        goto LABEL_334;
                      }
                      uint64_t v250 = 0;
                      uint64_t v255 = v9;
                      uint64_t v142 = *(void *)(v263 + 16);
                      if (v142)
                      {
                        unsigned int v244 = &v220;
                        uint64_t v248 = v126;
                        uint64_t v237 = swift_retain();
                        int v143 = (unint64_t *)(v237 + 48);
                        do
                        {
                          uint64_t v145 = *(v143 - 1);
                          unint64_t v144 = *v143;
                          *(void *)&long long v263 = *(v143 - 2);
                          *((void *)&v263 + 1) = v145;
                          swift_retain();
                          swift_bridgeObjectRetain_n();
                          sub_25704A7D0();
                          *(void *)&long long v263 = v130;
                          *((void *)&v263 + 1) = *((void *)&v127 + 1);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          sub_25704A850();
                          swift_bridgeObjectRetain();
                          sub_25704A850();
                          swift_bridgeObjectRelease_n();
                          uint64_t v146 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v144);
                          swift_release();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          sub_256FA4304(v146);
                          v143 += 3;
                          --v142;
                        }
                        while (v142);
                        swift_release_n();
                        uint64_t v129 = (uint64_t)v255;
                        unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                      }
                      else
                      {
                        swift_release();
                        uint64_t v129 = (uint64_t)v9;
                      }
                      swift_bridgeObjectRelease();
                      swift_release();
                      unsigned int v124 = v245;
LABEL_162:
                      uint64_t v147 = *(void *)(v129 + 16);
                      char v115 = v253;
                      uint64_t v3 = v253[2];
                      uint64_t v148 = v3 + v147;
                      if (__OFADD__(v3, v147))
                      {
LABEL_289:
                        __break(1u);
LABEL_290:
                        __break(1u);
LABEL_291:
                        __break(1u);
LABEL_292:
                        __break(1u);
LABEL_293:
                        __break(1u);
LABEL_294:
                        __break(1u);
LABEL_295:
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8A8);
                        if (swift_dynamicCast())
                        {
                          sub_256F9ABF4(&v263, &v257);
                          sub_256F9ABF4(v266, v259);
                          sub_256F9ABF4(v267, v260);
                          uint64_t v217 = v229;
                          sub_256FACDB0(&v257, v229);
                          sub_256FACDB0(v259, v217);
                          sub_256FACDB0(v260, v217);
                          uint64_t v216 = &qword_269FDC8A8;
                          goto LABEL_309;
                        }
LABEL_301:
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8B0);
                        if (!swift_dynamicCast()) {
                          goto LABEL_307;
                        }
                        sub_256F9ABF4(&v263, &v257);
                        sub_256F9ABF4(v266, v259);
                        sub_256F9ABF4(v267, v260);
                        sub_256F9ABF4(v268, v261);
                        uint64_t v218 = v229;
                        sub_256FACDB0(&v257, v229);
                        sub_256FACDB0(v259, v218);
                        sub_256FACDB0(v260, v218);
                        sub_256FACDB0(v261, v218);
                        uint64_t v216 = &qword_269FDC8B0;
LABEL_309:
                        sub_256FB11E8((uint64_t)&v257, v216);
                        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
                      }
                      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v148 <= v115[3] >> 1)
                      {
                        if (!*(void *)(v129 + 16)) {
                          goto LABEL_140;
                        }
                      }
                      else
                      {
                        if (v3 <= v148) {
                          int64_t v150 = v3 + v147;
                        }
                        else {
                          int64_t v150 = v3;
                        }
                        char v115 = sub_256FA6198((void *)isUniquelyReferenced_nonNull_native, v150, 1, v115);
                        if (!*(void *)(v129 + 16))
                        {
LABEL_140:
                          if (v147) {
                            goto LABEL_292;
                          }
                          goto LABEL_141;
                        }
                      }
                      uint64_t v151 = v115[2];
                      if ((v115[3] >> 1) - v151 < v147) {
                        goto LABEL_298;
                      }
                      uint64_t v3 = (uint64_t)&v115[3 * v151 + 4];
                      if (v129 + 32 < (unint64_t)(v3 + 24 * v147)
                        && v3 < (unint64_t)(v129 + 32 + 24 * v147))
                      {
                        goto LABEL_333;
                      }
                      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
                      swift_arrayInitWithCopy();
                      if (v147)
                      {
                        uint64_t v153 = v115[2];
                        BOOL v53 = __OFADD__(v153, v147);
                        uint64_t v154 = v153 + v147;
                        if (v53) {
                          goto LABEL_304;
                        }
                        v115[2] = v154;
                      }
LABEL_141:
                      swift_bridgeObjectRelease();
                      uint64_t v123 = v252;
                      if ((uint64_t *)v252 != v124) {
                        continue;
                      }
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      break;
                    case 3uLL:
                      swift_bridgeObjectRelease();
                      uint64_t v129 = (uint64_t)v9;
                      goto LABEL_162;
                    default:
                      uint64_t v128 = *(void *)(v125 + 16);
                      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
                      uint64_t v129 = swift_allocObject();
                      *(_OWORD *)(v129 + 16) = v246;
                      *(_OWORD *)(v129 + 32) = v127;
                      *(void *)(v129 + 48) = v128;
                      swift_retain();
                      swift_release();
                      goto LABEL_162;
                  }
                  goto LABEL_224;
                }
              case 2uLL:
                uint64_t v117 = *(void *)(v241 + 16);
                uint64_t v118 = *(void *)(v117 + 16);
                if (v118)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
                  char v119 = (void *)swift_allocObject();
                  size_t v120 = _swift_stdlib_malloc_size(v119);
                  v119[2] = v118;
                  v119[3] = 2 * ((uint64_t)(v120 - 32) / 24);
                  uint64_t v121 = sub_256FA7DCC((uint64_t)&v263, v119 + 4, v118, v117);
                  swift_bridgeObjectRetain_n();
                  sub_256FABF38();
                  if (v121 != v118) {
                    goto LABEL_328;
                  }
                  swift_bridgeObjectRelease();
                  unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                }
                else
                {
                  char v119 = v9;
                }
                *(void *)&long long v263 = v119;
                uint64_t v155 = v250;
                sub_256FAFEE4((void **)&v263);
                uint64_t v3 = v263;
                if (v155) {
                  goto LABEL_335;
                }
                uint64_t v250 = 0;
                unsigned int v245 = *(uint64_t **)(v263 + 16);
                if (v245)
                {
                  unsigned int v244 = (uint64_t *)(v263 + 32);
                  uint64_t v225 = v263;
                  swift_retain();
                  uint64_t v156 = 0;
                  char v115 = v9;
                  while (2)
                  {
                    int v157 = &v244[3 * v156];
                    uint64_t v158 = v157[1];
                    unint64_t v159 = v157[2];
                    uint64_t v248 = v156 + 1;
                    *(void *)&long long v263 = *v157;
                    *((void *)&v263 + 1) = v158;
                    uint64_t v252 = v159 & 0x3FFFFFFFFFFFFFFFLL;
                    int v253 = v115;
                    swift_retain();
                    int v249 = (uint64_t *)v158;
                    swift_bridgeObjectRetain_n();
                    sub_25704A7D0();
                    long long v263 = v251;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_25704A850();
                    swift_bridgeObjectRetain();
                    sub_25704A850();
                    swift_bridgeObjectRelease_n();
                    long long v160 = v263;
                    switch(v159 >> 62)
                    {
                      case 1uLL:
                        uint64_t v174 = *(void *)(v252 + 16);
                        uint64_t v255 = v9;
                        uint64_t v175 = *(void *)(v174 + 16);
                        if (v175)
                        {
                          int v236 = &v220;
                          swift_bridgeObjectRetain();
                          for (uint64_t j = 0; j != v175; ++j)
                          {
                            unint64_t v177 = *(void *)(v174 + 8 * j + 32);
                            long long v263 = v160;
                            swift_retain();
                            swift_bridgeObjectRetain();
                            sub_25704A850();
                            uint64_t v254 = j;
                            sub_25704B150();
                            sub_25704A850();
                            swift_bridgeObjectRelease();
                            uint64_t v178 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v177);
                            swift_release();
                            swift_bridgeObjectRelease();
                            sub_256FA4304(v178);
                          }
                          swift_bridgeObjectRelease();
                          uint64_t v162 = (uint64_t)v255;
                          unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                        }
                        else
                        {
                          uint64_t v162 = (uint64_t)v9;
                        }
                        goto LABEL_205;
                      case 2uLL:
                        uint64_t v3 = 24;
                        uint64_t v163 = *(void *)(v252 + 16);
                        uint64_t v164 = *(void *)(v163 + 16);
                        uint64_t v237 = v263;
                        if (!v164) {
                          goto LABEL_193;
                        }
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
                        unint64_t v9 = (void *)swift_allocObject();
                        size_t v165 = _swift_stdlib_malloc_size(v9);
                        v9[2] = v164;
                        void v9[3] = 2 * ((uint64_t)(v165 - 32) / 24);
                        uint64_t v166 = sub_256FA7DCC((uint64_t)&v263, v9 + 4, v164, v163);
                        uint64_t v3 = (uint64_t)v264;
                        int v236 = *(uint64_t **)&v266[0];
                        swift_bridgeObjectRetain_n();
                        sub_256FABF38();
                        if (v166 != v164) {
                          goto LABEL_317;
                        }
                        swift_bridgeObjectRelease();
LABEL_193:
                        *(void *)&long long v263 = v9;
                        uint64_t v167 = v250;
                        sub_256FAFEE4((void **)&v263);
                        if (v167) {
                          goto LABEL_334;
                        }
                        uint64_t v250 = 0;
                        unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                        uint64_t v255 = (void *)MEMORY[0x263F8EE78];
                        uint64_t v168 = *(void *)(v263 + 16);
                        if (v168)
                        {
                          int v236 = &v220;
                          uint64_t v235 = swift_retain();
                          float v169 = (unint64_t *)(v235 + 48);
                          uint64_t v170 = v237;
                          do
                          {
                            uint64_t v171 = *(v169 - 1);
                            unint64_t v172 = *v169;
                            *(void *)&long long v263 = *(v169 - 2);
                            *((void *)&v263 + 1) = v171;
                            swift_retain();
                            swift_bridgeObjectRetain_n();
                            sub_25704A7D0();
                            *(void *)&long long v263 = v170;
                            *((void *)&v263 + 1) = *((void *)&v160 + 1);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            sub_25704A850();
                            swift_bridgeObjectRetain();
                            sub_25704A850();
                            swift_bridgeObjectRelease_n();
                            uint64_t v173 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v172);
                            swift_release();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_256FA4304(v173);
                            v169 += 3;
                            --v168;
                          }
                          while (v168);
                          swift_release_n();
                          uint64_t v162 = (uint64_t)v255;
                          unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                        }
                        else
                        {
                          swift_release();
                          uint64_t v162 = (uint64_t)v9;
                        }
LABEL_205:
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
LABEL_206:
                        uint64_t v179 = *(void *)(v162 + 16);
                        char v115 = v253;
                        uint64_t v3 = v253[2];
                        uint64_t v180 = v3 + v179;
                        if (__OFADD__(v3, v179)) {
                          goto LABEL_290;
                        }
                        uint64_t v181 = swift_isUniquelyReferenced_nonNull_native();
                        if ((v181 & 1) != 0 && v180 <= v115[3] >> 1)
                        {
                          if (!*(void *)(v162 + 16)) {
                            goto LABEL_186;
                          }
                        }
                        else
                        {
                          if (v3 <= v180) {
                            int64_t v182 = v3 + v179;
                          }
                          else {
                            int64_t v182 = v3;
                          }
                          char v115 = sub_256FA6198((void *)v181, v182, 1, v115);
                          if (!*(void *)(v162 + 16))
                          {
LABEL_186:
                            if (v179) {
                              goto LABEL_294;
                            }
                            goto LABEL_187;
                          }
                        }
                        uint64_t v183 = v115[2];
                        if ((v115[3] >> 1) - v183 < v179) {
                          goto LABEL_300;
                        }
                        uint64_t v3 = (uint64_t)&v115[3 * v183 + 4];
                        if (v162 + 32 < (unint64_t)(v3 + 24 * v179)
                          && v3 < (unint64_t)(v162 + 32 + 24 * v179))
                        {
                          goto LABEL_333;
                        }
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
                        swift_arrayInitWithCopy();
                        if (v179)
                        {
                          uint64_t v184 = v115[2];
                          BOOL v53 = __OFADD__(v184, v179);
                          uint64_t v185 = v184 + v179;
                          if (v53) {
                            goto LABEL_306;
                          }
                          v115[2] = v185;
                        }
LABEL_187:
                        swift_bridgeObjectRelease();
                        uint64_t v156 = v248;
                        if ((uint64_t *)v248 != v245) {
                          continue;
                        }
                        swift_bridgeObjectRelease();
                        swift_release_n();
                        break;
                      case 3uLL:
                        swift_release();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v162 = (uint64_t)v9;
                        goto LABEL_206;
                      default:
                        uint64_t v161 = *(void *)(v159 + 16);
                        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
                        uint64_t v162 = swift_allocObject();
                        *(_OWORD *)(v162 + 16) = v246;
                        *(_OWORD *)(v162 + 32) = v160;
                        *(void *)(v162 + 48) = v161;
                        swift_retain();
                        swift_release();
                        swift_bridgeObjectRelease();
                        goto LABEL_206;
                    }
                    break;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  char v115 = v9;
                }
LABEL_223:
                swift_release();
LABEL_224:
                swift_bridgeObjectRelease();
                uint64_t v3 = v115[2];
                int64_t v186 = v247[2];
                int64_t v187 = v186 + v3;
                if (__OFADD__(v186, v3)) {
                  goto LABEL_311;
                }
                uint64_t v188 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v189 = v247;
                if ((v188 & 1) == 0 || v187 > v247[3] >> 1)
                {
                  if (v186 <= v187) {
                    int64_t v190 = v186 + v3;
                  }
                  else {
                    int64_t v190 = v186;
                  }
                  uint64_t v189 = sub_256FA6198((void *)v188, v190, 1, v247);
                }
                uint64_t v191 = v115[2];
                uint64_t v247 = v189;
                if (v191)
                {
                  uint64_t v192 = v189[2];
                  if ((v189[3] >> 1) - v192 < v3) {
                    goto LABEL_319;
                  }
                  unint64_t v193 = (unint64_t)&v189[3 * v192 + 4];
                  if ((unint64_t)(v115 + 4) < v193 + 24 * v3 && v193 < (unint64_t)&v115[3 * v3 + 4]) {
                    goto LABEL_333;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
                  swift_arrayInitWithCopy();
                  if (v3)
                  {
                    uint64_t v194 = v247[2];
                    BOOL v53 = __OFADD__(v194, v3);
                    uint64_t v195 = v194 + v3;
                    if (v53)
                    {
LABEL_323:
                      __break(1u);
                      goto LABEL_324;
                    }
                    v247[2] = v195;
                  }
                }
                else if (v3)
                {
                  goto LABEL_313;
                }
                swift_bridgeObjectRelease();
                uint64_t v110 = v238;
                if (v238 != v234) {
                  continue;
                }
                swift_bridgeObjectRelease();
                swift_release_n();
                uint64_t v3 = v231;
                break;
              case 3uLL:
LABEL_180:
                swift_release();
                swift_bridgeObjectRelease();
                char v115 = v9;
                goto LABEL_224;
              default:
                uint64_t v114 = *(void *)(v113 + 16);
                __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
                char v115 = (void *)swift_allocObject();
                *((_OWORD *)v115 + 1) = v246;
                uint64_t v116 = *((void *)&v251 + 1);
                v115[4] = v251;
                v115[5] = v116;
                v115[6] = v114;
                swift_retain();
                goto LABEL_223;
            }
            break;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v247 = v9;
        }
        swift_release();
        int64_t v12 = v247;
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v10 = v3 + 1;
        sub_256FA4304((uint64_t)v12);
        if (v10 != v227) {
          continue;
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v198 = v256;
        goto LABEL_254;
      case 3uLL:
LABEL_125:
        swift_release();
        swift_bridgeObjectRelease();
        int64_t v12 = v9;
        uint64_t v3 = v231;
        goto LABEL_8;
      default:
        uint64_t v11 = *(void *)(v16 + 16);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
        int64_t v12 = (void *)swift_allocObject();
        *((_OWORD *)v12 + 1) = v246;
        uint64_t v13 = v242;
        v12[4] = v240;
        void v12[5] = v13;
        v12[6] = v11;
        swift_retain();
        swift_release();
        uint64_t v3 = v231;
        goto LABEL_8;
    }
    break;
  }
  while (2)
  {
    unint64_t v20 = *(void *)(v235 + 8 * (void)v19);
    unsigned int v239 = (uint64_t *)((char *)v19 + 1);
    *(void *)&long long v263 = v240;
    *((void *)&v263 + 1) = v242;
    uint64_t v241 = v20 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25704A850();
    uint64_t v255 = v19;
    sub_25704B150();
    sub_25704A850();
    swift_bridgeObjectRelease();
    long long v251 = v263;
    switch(v20 >> 62)
    {
      case 1uLL:
        uint64_t v24 = *(uint64_t **)(v241 + 16);
        uint64_t v248 = v24[2];
        if (!v248)
        {
          swift_release();
LABEL_62:
          swift_bridgeObjectRelease();
          unint64_t v22 = v9;
          goto LABEL_105;
        }
        unsigned int v245 = v24 + 4;
        int v238 = v24;
        swift_bridgeObjectRetain_n();
        uint64_t v25 = 0;
        unint64_t v22 = v9;
        while (2)
        {
          unint64_t v26 = v245[(void)v25];
          int v249 = (uint64_t *)((char *)v25 + 1);
          long long v263 = v251;
          uint64_t v252 = v26 & 0x3FFFFFFFFFFFFFFFLL;
          int v253 = v22;
          swift_retain();
          swift_bridgeObjectRetain();
          sub_25704A850();
          uint64_t v255 = v25;
          sub_25704B150();
          sub_25704A850();
          swift_bridgeObjectRelease();
          long long v27 = v263;
          switch(v26 >> 62)
          {
            case 1uLL:
              uint64_t v34 = *(void *)(v252 + 16);
              uint64_t v255 = v9;
              uint64_t v35 = *(void *)(v34 + 16);
              if (v35)
              {
                swift_bridgeObjectRetain();
                for (uint64_t k = 0; k != v35; ++k)
                {
                  unint64_t v37 = *(void *)(v34 + 8 * k + 32);
                  long long v263 = v27;
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_25704A850();
                  uint64_t v254 = k;
                  sub_25704B150();
                  sub_25704A850();
                  swift_bridgeObjectRelease();
                  uint64_t v38 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v37);
                  swift_release();
                  swift_bridgeObjectRelease();
                  sub_256FA4304(v38);
                }
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v29 = (uint64_t)v255;
                unint64_t v9 = (void *)MEMORY[0x263F8EE78];
              }
              else
              {
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v29 = (uint64_t)v9;
              }
              goto LABEL_39;
            case 2uLL:
              uint64_t v30 = *(void *)(v252 + 16);
              uint64_t v31 = *(void *)(v30 + 16);
              if (v31)
              {
                uint64_t v32 = v263;
                __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
                unint64_t v9 = (void *)swift_allocObject();
                size_t v33 = _swift_stdlib_malloc_size(v9);
                v9[2] = v31;
                void v9[3] = 2 * ((uint64_t)(v33 - 32) / 24);
                unsigned int v244 = (uint64_t *)sub_256FA7DCC((uint64_t)&v263, v9 + 4, v31, v30);
                uint64_t v3 = *(void *)&v266[0];
                swift_bridgeObjectRetain_n();
                sub_256FABF38();
                if (v244 != (uint64_t *)v31) {
                  goto LABEL_314;
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v32 = v263;
              }
              *(void *)&long long v263 = v9;
              uint64_t v39 = v250;
              sub_256FAFEE4((void **)&v263);
              uint64_t v3 = v263;
              if (v39) {
                goto LABEL_335;
              }
              uint64_t v250 = 0;
              unint64_t v9 = (void *)MEMORY[0x263F8EE78];
              uint64_t v255 = (void *)MEMORY[0x263F8EE78];
              uint64_t v40 = *(void *)(v263 + 16);
              if (v40)
              {
                swift_retain();
                unsigned int v244 = (uint64_t *)v3;
                uint64_t v41 = (unint64_t *)(v3 + 48);
                do
                {
                  uint64_t v43 = *(v41 - 1);
                  unint64_t v42 = *v41;
                  *(void *)&long long v263 = *(v41 - 2);
                  *((void *)&v263 + 1) = v43;
                  swift_retain();
                  swift_bridgeObjectRetain_n();
                  sub_25704A7D0();
                  *(void *)&long long v263 = v32;
                  *((void *)&v263 + 1) = *((void *)&v27 + 1);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_25704A850();
                  swift_bridgeObjectRetain();
                  sub_25704A850();
                  swift_bridgeObjectRelease_n();
                  uint64_t v44 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v42);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_256FA4304(v44);
                  v41 += 3;
                  --v40;
                }
                while (v40);
                swift_bridgeObjectRelease();
                swift_release_n();
                uint64_t v29 = (uint64_t)v255;
                unint64_t v9 = (void *)MEMORY[0x263F8EE78];
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v29 = (uint64_t)v9;
              }
              swift_release();
LABEL_39:
              unint64_t v22 = v253;
              uint64_t v3 = *(void *)(v29 + 16);
              int64_t v45 = v253[2];
              int64_t v46 = v45 + v3;
              if (__OFADD__(v45, v3))
              {
                __break(1u);
LABEL_288:
                __break(1u);
                goto LABEL_289;
              }
              uint64_t v47 = swift_isUniquelyReferenced_nonNull_native();
              if ((v47 & 1) != 0 && v46 <= v22[3] >> 1)
              {
                if (!*(void *)(v29 + 16)) {
                  goto LABEL_18;
                }
              }
              else
              {
                if (v45 <= v46) {
                  int64_t v48 = v45 + v3;
                }
                else {
                  int64_t v48 = v45;
                }
                unint64_t v22 = sub_256FA6198((void *)v47, v48, 1, v22);
                if (!*(void *)(v29 + 16))
                {
LABEL_18:
                  if (v3) {
                    goto LABEL_291;
                  }
                  goto LABEL_19;
                }
              }
              uint64_t v49 = v22[2];
              if ((v22[3] >> 1) - v49 < v3)
              {
                __break(1u);
LABEL_298:
                __break(1u);
LABEL_299:
                __break(1u);
LABEL_300:
                __break(1u);
                goto LABEL_301;
              }
              unint64_t v50 = (unint64_t)&v22[3 * v49 + 4];
              if (v29 + 32 < v50 + 24 * v3 && v50 < v29 + 32 + 24 * v3) {
                goto LABEL_333;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
              swift_arrayInitWithCopy();
              if (!v3) {
                goto LABEL_19;
              }
              uint64_t v52 = v22[2];
              BOOL v53 = __OFADD__(v52, v3);
              uint64_t v54 = v52 + v3;
              if (!v53)
              {
                void v22[2] = v54;
LABEL_19:
                swift_bridgeObjectRelease();
                uint64_t v25 = v249;
                if (v249 == (uint64_t *)v248)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  goto LABEL_105;
                }
                continue;
              }
              __break(1u);
LABEL_304:
              __break(1u);
LABEL_305:
              __break(1u);
LABEL_306:
              __break(1u);
LABEL_307:
              __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8B8);
              if (swift_dynamicCast())
              {
                sub_256F9ABF4(&v263, &v257);
                sub_256F9ABF4(v266, v259);
                sub_256F9ABF4(v267, v260);
                sub_256F9ABF4(v268, v261);
                sub_256F9ABF4(&v269, v262);
                int v219 = v229;
                sub_256FACDB0(&v257, v229);
                sub_256FACDB0(v259, v219);
                sub_256FACDB0(v260, v219);
                sub_256FACDB0(v261, v219);
                sub_256FACDB0(v262, v219);
                uint64_t v216 = &qword_269FDC8B8;
                goto LABEL_309;
              }
LABEL_320:
              if (swift_dynamicCast())
              {
                swift_bridgeObjectRelease();
                return __swift_destroy_boxed_opaque_existential_1((uint64_t)v270);
              }
LABEL_324:
              __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
              if (swift_dynamicCast()
                || (__swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8), swift_dynamicCast()))
              {
                uint64_t v7 = &v263;
                goto LABEL_3;
              }
LABEL_336:
              sub_256FB118C(v3, (uint64_t)&v263);
              *(void *)&long long v257 = 0;
              *((void *)&v257 + 1) = 0xE000000000000000;
              sub_25704ADF0();
              sub_25704A850();
              sub_25704AF60();
              LODWORD(v221) = 0;
              uint64_t v220 = 166;
              uint64_t result = sub_25704AFD0();
              __break(1u);
              return result;
            case 3uLL:
              swift_bridgeObjectRelease();
              uint64_t v29 = (uint64_t)v9;
              goto LABEL_39;
            default:
              uint64_t v28 = *(void *)(v26 + 16);
              __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
              uint64_t v29 = swift_allocObject();
              *(_OWORD *)(v29 + 16) = v246;
              *(_OWORD *)(v29 + 32) = v27;
              *(void *)(v29 + 48) = v28;
              swift_retain();
              swift_release();
              goto LABEL_39;
          }
        }
      case 2uLL:
        uint64_t v55 = *(void *)(v241 + 16);
        uint64_t v56 = *(void *)(v55 + 16);
        if (!v56)
        {
          unint64_t v57 = v9;
          goto LABEL_64;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
        unint64_t v57 = (void *)swift_allocObject();
        size_t v58 = _swift_stdlib_malloc_size(v57);
        v57[2] = v56;
        v57[3] = 2 * ((uint64_t)(v58 - 32) / 24);
        uint64_t v59 = sub_256FA7DCC((uint64_t)&v263, v57 + 4, v56, v55);
        swift_bridgeObjectRetain_n();
        sub_256FABF38();
        if (v59 == v56)
        {
          swift_bridgeObjectRelease();
          unint64_t v9 = (void *)MEMORY[0x263F8EE78];
LABEL_64:
          *(void *)&long long v263 = v57;
          uint64_t v60 = v250;
          sub_256FAFEE4((void **)&v263);
          uint64_t v3 = v263;
          if (v60) {
            goto LABEL_335;
          }
          uint64_t v250 = 0;
          unsigned int v245 = *(uint64_t **)(v263 + 16);
          if (v245)
          {
            unsigned int v244 = (uint64_t *)(v263 + 32);
            int v234 = (uint64_t *)v263;
            swift_retain();
            uint64_t v61 = 0;
            unint64_t v22 = v9;
            while (2)
            {
              unint64_t v62 = &v244[3 * v61];
              uint64_t v64 = v62[1];
              unint64_t v63 = v62[2];
              uint64_t v248 = v61 + 1;
              *(void *)&long long v263 = *v62;
              *((void *)&v263 + 1) = v64;
              uint64_t v252 = v63 & 0x3FFFFFFFFFFFFFFFLL;
              int v253 = v22;
              swift_retain();
              int v249 = (uint64_t *)v64;
              swift_bridgeObjectRetain_n();
              sub_25704A7D0();
              long long v263 = v251;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_25704A850();
              swift_bridgeObjectRetain();
              sub_25704A850();
              swift_bridgeObjectRelease_n();
              uint64_t v66 = *((void *)&v263 + 1);
              uint64_t v65 = v263;
              switch(v63 >> 62)
              {
                case 1uLL:
                  uint64_t v80 = *(void *)(v252 + 16);
                  uint64_t v255 = v9;
                  uint64_t v81 = *(void *)(v80 + 16);
                  if (v81)
                  {
                    int v238 = &v220;
                    swift_bridgeObjectRetain();
                    for (uint64_t m = 0; m != v81; ++m)
                    {
                      unint64_t v83 = *(void *)(v80 + 8 * m + 32);
                      *(void *)&long long v263 = v65;
                      *((void *)&v263 + 1) = v66;
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_25704A850();
                      uint64_t v254 = m;
                      sub_25704B150();
                      sub_25704A850();
                      swift_bridgeObjectRelease();
                      uint64_t v84 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v83);
                      swift_release();
                      swift_bridgeObjectRelease();
                      sub_256FA4304(v84);
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v68 = v255;
                    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                  }
                  else
                  {
                    unint64_t v68 = v9;
                  }
                  goto LABEL_86;
                case 2uLL:
                  uint64_t v3 = 24;
                  uint64_t v69 = *(void *)(v252 + 16);
                  uint64_t v70 = *(void *)(v69 + 16);
                  if (!v70) {
                    goto LABEL_74;
                  }
                  uint64_t v71 = v263;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC760);
                  unint64_t v9 = (void *)swift_allocObject();
                  size_t v72 = _swift_stdlib_malloc_size(v9);
                  v9[2] = v70;
                  void v9[3] = 2 * ((uint64_t)(v72 - 32) / 24);
                  uint64_t v73 = sub_256FA7DCC((uint64_t)&v263, v9 + 4, v70, v69);
                  uint64_t v237 = v265;
                  int v238 = (uint64_t *)v73;
                  uint64_t v3 = *(void *)&v266[0];
                  swift_bridgeObjectRetain_n();
                  sub_256FABF38();
                  if (v238 != (uint64_t *)v70) {
                    goto LABEL_316;
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v65 = v71;
LABEL_74:
                  *(void *)&long long v263 = v9;
                  uint64_t v74 = v250;
                  sub_256FAFEE4((void **)&v263);
                  if (v74) {
                    goto LABEL_334;
                  }
                  uint64_t v250 = 0;
                  unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                  uint64_t v255 = (void *)MEMORY[0x263F8EE78];
                  uint64_t v75 = *(void *)(v263 + 16);
                  if (v75)
                  {
                    int v238 = &v220;
                    uint64_t v237 = swift_retain();
                    uint64_t v76 = (unint64_t *)(v237 + 48);
                    do
                    {
                      uint64_t v77 = *(v76 - 1);
                      unint64_t v78 = *v76;
                      *(void *)&long long v263 = *(v76 - 2);
                      *((void *)&v263 + 1) = v77;
                      swift_retain();
                      swift_bridgeObjectRetain_n();
                      sub_25704A7D0();
                      *(void *)&long long v263 = v65;
                      *((void *)&v263 + 1) = v66;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_25704A850();
                      swift_bridgeObjectRetain();
                      sub_25704A850();
                      swift_bridgeObjectRelease_n();
                      uint64_t v79 = sub_256FAFB98((void *)v263, *((unint64_t *)&v263 + 1), v78);
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_256FA4304(v79);
                      v76 += 3;
                      --v75;
                    }
                    while (v75);
                    swift_release_n();
                    unint64_t v68 = v255;
                    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
                  }
                  else
                  {
                    swift_release();
                    unint64_t v68 = v9;
                  }
LABEL_86:
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
LABEL_87:
                  uint64_t v3 = v68[2];
                  unint64_t v22 = v253;
                  int64_t v85 = v253[2];
                  int64_t v86 = v85 + v3;
                  if (__OFADD__(v85, v3)) {
                    goto LABEL_288;
                  }
                  uint64_t v87 = swift_isUniquelyReferenced_nonNull_native();
                  if ((v87 & 1) != 0 && v86 <= v22[3] >> 1)
                  {
                    if (!v68[2]) {
                      goto LABEL_67;
                    }
                  }
                  else
                  {
                    if (v85 <= v86) {
                      int64_t v88 = v85 + v3;
                    }
                    else {
                      int64_t v88 = v85;
                    }
                    unint64_t v22 = sub_256FA6198((void *)v87, v88, 1, v22);
                    if (!v68[2])
                    {
LABEL_67:
                      if (v3) {
                        goto LABEL_293;
                      }
                      goto LABEL_68;
                    }
                  }
                  uint64_t v89 = v22[2];
                  if ((v22[3] >> 1) - v89 < v3) {
                    goto LABEL_299;
                  }
                  unint64_t v90 = (unint64_t)&v22[3 * v89 + 4];
                  if ((unint64_t)(v68 + 4) < v90 + 24 * v3 && v90 < (unint64_t)&v68[3 * v3 + 4]) {
                    goto LABEL_333;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
                  swift_arrayInitWithCopy();
                  if (v3)
                  {
                    uint64_t v91 = v22[2];
                    BOOL v53 = __OFADD__(v91, v3);
                    uint64_t v92 = v91 + v3;
                    if (v53) {
                      goto LABEL_305;
                    }
                    void v22[2] = v92;
                  }
LABEL_68:
                  swift_bridgeObjectRelease();
                  uint64_t v61 = v248;
                  if ((uint64_t *)v248 != v245) {
                    continue;
                  }
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  break;
                case 3uLL:
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v68 = v9;
                  goto LABEL_87;
                default:
                  uint64_t v67 = *(void *)(v63 + 16);
                  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
                  unint64_t v68 = (void *)swift_allocObject();
                  *((_OWORD *)v68 + 1) = v246;
                  v68[4] = v65;
                  v68[5] = v66;
                  v68[6] = v67;
                  swift_retain();
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_87;
              }
              break;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            unint64_t v22 = v9;
          }
LABEL_104:
          swift_release();
LABEL_105:
          uint64_t v3 = v22[2];
          int64_t v93 = v247[2];
          int64_t v94 = v93 + v3;
          if (!__OFADD__(v93, v3))
          {
            uint64_t v95 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v96 = v247;
            if ((v95 & 1) == 0 || v94 > v247[3] >> 1)
            {
              if (v93 <= v94) {
                int64_t v97 = v93 + v3;
              }
              else {
                int64_t v97 = v93;
              }
              uint64_t v96 = sub_256FA6198((void *)v95, v97, 1, v247);
            }
            uint64_t v98 = v22[2];
            uint64_t v247 = v96;
            if (v98)
            {
              uint64_t v99 = v96[2];
              if ((v96[3] >> 1) - v99 < v3) {
                goto LABEL_318;
              }
              unint64_t v100 = (unint64_t)&v96[3 * v99 + 4];
              if ((unint64_t)(v22 + 4) < v100 + 24 * v3 && v100 < (unint64_t)&v22[3 * v3 + 4]) {
                goto LABEL_333;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC830);
              swift_arrayInitWithCopy();
              if (v3)
              {
                uint64_t v102 = v247[2];
                BOOL v53 = __OFADD__(v102, v3);
                uint64_t v103 = v102 + v3;
                if (v53)
                {
                  __break(1u);
                  goto LABEL_323;
                }
                v247[2] = v103;
              }
            }
            else if (v3)
            {
              goto LABEL_312;
            }
            swift_bridgeObjectRelease();
            BOOL v19 = v239;
            if (v239 == v236)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v3 = v231;
              int64_t v12 = v247;
              goto LABEL_8;
            }
            continue;
          }
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
          goto LABEL_320;
        }
        __break(1u);
LABEL_328:
        __break(1u);
LABEL_329:
        __break(1u);
LABEL_330:
        __break(1u);
        break;
      case 3uLL:
        goto LABEL_62;
      default:
        uint64_t v21 = *(void *)(v20 + 16);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
        unint64_t v22 = (void *)swift_allocObject();
        *((_OWORD *)v22 + 1) = v246;
        uint64_t v23 = *((void *)&v251 + 1);
        v22[4] = v251;
        void v22[5] = v23;
        v22[6] = v21;
        swift_retain();
        goto LABEL_104;
    }
    goto LABEL_331;
  }
}

void _s8Morpheus4evalyyypd_tF_0(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_256FACDB0(v2, &v3);
      v2 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  mlx_vector_array_new();
}

void _s8Morpheus9asyncEvalyyypd_tF_0(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_256FACDB0(v2, &v3);
      v2 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  mlx_vector_array_new();
}

uint64_t sub_256FAFB98(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v34 = MEMORY[0x263F8EE78];
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v28 = (uint64_t)&v28;
        swift_bridgeObjectRetain();
        uint64_t v11 = 0;
        do
        {
          uint64_t v16 = *(void *)(v9 + 8 * v11 + 32);
          uint64_t v31 = v11;
          if (a2)
          {
            uint64_t v32 = v29;
            unint64_t v33 = a2;
            swift_retain();
            swift_bridgeObjectRetain();
            sub_25704A850();
            uint64_t v30 = v11;
            sub_25704B150();
            sub_25704A850();
            swift_bridgeObjectRelease();
            int64_t v12 = v32;
            unint64_t v14 = v33;
          }
          else
          {
            swift_retain();
            int64_t v12 = (void *)sub_25704B150();
            unint64_t v14 = v13;
          }
          ++v11;
          uint64_t v15 = sub_256FAFB98(v12, v14, v16);
          swift_release();
          swift_bridgeObjectRelease();
          sub_256FA4304(v15);
        }
        while (v10 != v11);
        swift_bridgeObjectRelease();
        uint64_t v3 = v34;
      }
      break;
    case 2uLL:
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v18 = sub_256FA6C50(v17);
      swift_bridgeObjectRelease();
      uint64_t v32 = v18;
      sub_256FAFEE4(&v32);
      uint64_t v34 = v3;
      uint64_t v19 = v32[2];
      if (v19)
      {
        uint64_t v28 = swift_retain();
        unint64_t v20 = (uint64_t *)(v28 + 48);
        do
        {
          unint64_t v22 = *(v20 - 1);
          uint64_t v23 = *v20;
          uint64_t v32 = (void *)*(v20 - 2);
          unint64_t v33 = v22;
          swift_retain();
          swift_bridgeObjectRetain_n();
          uint64_t v24 = (void *)sub_25704A7D0();
          unint64_t v26 = v25;
          if (a2)
          {
            uint64_t v32 = v29;
            unint64_t v33 = a2;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_25704A850();
            swift_bridgeObjectRetain();
            sub_25704A850();
            swift_bridgeObjectRelease_n();
            uint64_t v24 = v32;
            unint64_t v26 = v33;
          }
          v20 += 3;
          uint64_t v21 = sub_256FAFB98(v24, v26, v23);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_256FA4304(v21);
          --v19;
        }
        while (v19);
        swift_release_n();
        uint64_t v3 = v34;
      }
      else
      {
        swift_release();
      }
      break;
    case 3uLL:
      return v3;
    default:
      uint64_t v5 = *(void *)(a3 + 16);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC828);
      uint64_t v6 = swift_allocObject();
      uint64_t v3 = v6;
      *(_OWORD *)(v6 + 16) = xmmword_25706E4C0;
      uint64_t v7 = v29;
      if (!a2) {
        uint64_t v7 = 0;
      }
      unint64_t v8 = 0xE000000000000000;
      if (a2) {
        unint64_t v8 = a2;
      }
      *(void *)(v6 + 32) = v7;
      *(void *)(v6 + 40) = v8;
      *(void *)(v6 + 48) = v5;
      swift_bridgeObjectRetain();
      swift_retain();
      break;
  }
  return v3;
}

uint64_t sub_256FAFEE4(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_256FB1244(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_256FAFF50(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_256FAFF50(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25704B140();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_148;
    }
    if (v3) {
      return sub_256FB08FC(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_156;
  }
  uint64_t v112 = v3;
  uint64_t v107 = result;
  uint64_t v105 = a1;
  if (v3 < 2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v114 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_114:
      uint64_t v109 = v7;
      if (v11 >= 2)
      {
        uint64_t v99 = *v105;
        do
        {
          unint64_t v100 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_143;
          }
          if (!v99) {
            goto LABEL_155;
          }
          uint64_t v101 = *(void *)&v10[16 * v100 + 32];
          uint64_t v102 = *(void *)&v10[16 * v11 + 24];
          sub_256FB0AF0((char *)(v99 + 24 * v101), (char *)(v99 + 24 * *(void *)&v10[16 * v11 + 16]), v99 + 24 * v102, v114);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_144;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_256FB1178((uint64_t)v10);
          }
          if (v100 >= *((void *)v10 + 2)) {
            goto LABEL_145;
          }
          uint64_t v103 = &v10[16 * v100 + 32];
          *(void *)uint64_t v103 = v101;
          *((void *)v103 + 1) = v102;
          unint64_t v104 = *((void *)v10 + 2);
          if (v11 > v104) {
            goto LABEL_146;
          }
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v104 - v11));
          *((void *)v10 + 2) = v104 - 1;
          unint64_t v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_125:
      swift_bridgeObjectRelease();
      *(void *)(v109 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC768);
    uint64_t v7 = sub_25704AAA0();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v112;
    uint64_t v114 = (char *)(v7 + 32);
  }
  uint64_t v109 = v7;
  uint64_t v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v106 = *a1 + 64;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  uint64_t v115 = *a1;
  while (1)
  {
    uint64_t v12 = v8;
    uint64_t v13 = v8 + 1;
    uint64_t v111 = v8;
    if (v8 + 1 < v3)
    {
      uint64_t v108 = v10;
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_25704A7D0();
      uint64_t v16 = v15;
      swift_bridgeObjectRetain();
      if (v14 == sub_25704A7D0() && v16 == v17) {
        int v120 = 0;
      }
      else {
        int v120 = sub_25704B1E0();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v12 = v111;
      uint64_t v3 = v112;
      uint64_t v13 = v111 + 2;
      if (v111 + 2 < v112)
      {
        uint64_t v18 = v106 + 24 * v111;
        while (1)
        {
          uint64_t v116 = v13;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v19 = sub_25704A7D0();
          uint64_t v21 = v20;
          swift_bridgeObjectRetain();
          BOOL v23 = v19 == sub_25704A7D0() && v21 == v22;
          int v24 = v23 ? 0 : sub_25704B1E0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if ((v120 ^ v24)) {
            break;
          }
          v18 += 24;
          ++v13;
          uint64_t v3 = v112;
          if (v112 == v116 + 1)
          {
            uint64_t v13 = v112;
            goto LABEL_32;
          }
        }
        uint64_t v3 = v112;
LABEL_32:
        uint64_t v12 = v111;
      }
      uint64_t v10 = v108;
      uint64_t v9 = v115;
      if (v120)
      {
        if (v13 < v12) {
          goto LABEL_149;
        }
        if (v12 < v13)
        {
          uint64_t v25 = 24 * v13;
          uint64_t v26 = 24 * v12;
          uint64_t v27 = v13;
          uint64_t v28 = v12;
          do
          {
            if (v28 != --v27)
            {
              if (!v115) {
                goto LABEL_154;
              }
              uint64_t v29 = v115 + v26;
              uint64_t v30 = v115 + v25;
              long long v31 = *(_OWORD *)(v115 + v26);
              uint64_t v32 = *(void *)(v115 + v26 + 16);
              uint64_t v33 = *(void *)(v115 + v25 - 8);
              *(_OWORD *)uint64_t v29 = *(_OWORD *)(v115 + v25 - 24);
              *(void *)(v29 + 16) = v33;
              *(_OWORD *)(v30 - 24) = v31;
              *(void *)(v30 - 8) = v32;
            }
            ++v28;
            v25 -= 24;
            v26 += 24;
          }
          while (v28 < v27);
        }
      }
    }
    if (v13 < v3)
    {
      if (__OFSUB__(v13, v12)) {
        goto LABEL_147;
      }
      if (v13 - v12 < v107) {
        break;
      }
    }
LABEL_65:
    if (v13 < v12) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_256FB0FA8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v49 = *((void *)v10 + 2);
    unint64_t v48 = *((void *)v10 + 3);
    unint64_t v11 = v49 + 1;
    uint64_t v9 = v115;
    if (v49 >= v48 >> 1)
    {
      uint64_t v98 = sub_256FB0FA8((char *)(v48 > 1), v49 + 1, 1, v10);
      uint64_t v9 = v115;
      uint64_t v10 = v98;
    }
    *((void *)v10 + 2) = v11;
    unint64_t v50 = v10 + 32;
    uint64_t v51 = &v10[16 * v49 + 32];
    *(void *)uint64_t v51 = v12;
    *((void *)v51 + 1) = v13;
    uint64_t v118 = v13;
    if (v49)
    {
      while (1)
      {
        unint64_t v52 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v57 = &v50[16 * v11];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_131;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_132;
          }
          unint64_t v64 = v11 - 2;
          uint64_t v65 = &v50[16 * v11 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_134;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_137;
          }
          if (v69 >= v60)
          {
            uint64_t v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_141;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_102;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_96;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_133;
        }
        unint64_t v64 = v11 - 2;
        uint64_t v70 = &v50[16 * v11 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_136;
        }
        uint64_t v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_139;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_140;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_102:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_104;
        }
LABEL_96:
        if (v75) {
          goto LABEL_135;
        }
        unint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_138;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_104:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v9) {
          goto LABEL_153;
        }
        uint64_t v92 = v10;
        int64_t v93 = &v50[16 * v91];
        uint64_t v94 = *(void *)v93;
        uint64_t v95 = &v50[16 * v52];
        uint64_t v96 = *((void *)v95 + 1);
        sub_256FB0AF0((char *)(v9 + 24 * *(void *)v93), (char *)(v9 + 24 * *(void *)v95), v9 + 24 * v96, v114);
        if (v1) {
          goto LABEL_125;
        }
        if (v96 < v94) {
          goto LABEL_128;
        }
        if (v52 > *((void *)v92 + 2)) {
          goto LABEL_129;
        }
        *(void *)int64_t v93 = v94;
        *(void *)&v50[16 * v91 + 8] = v96;
        unint64_t v97 = *((void *)v92 + 2);
        if (v52 >= v97) {
          goto LABEL_130;
        }
        uint64_t v10 = v92;
        unint64_t v11 = v97 - 1;
        memmove(&v50[16 * v52], v95 + 16, 16 * (v97 - 1 - v52));
        *((void *)v10 + 2) = v97 - 1;
        uint64_t v9 = v115;
        if (v97 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    uint64_t v3 = v112;
    uint64_t v8 = v118;
    uint64_t v7 = v109;
    if (v118 >= v112) {
      goto LABEL_114;
    }
  }
  if (__OFADD__(v12, v107)) {
    goto LABEL_150;
  }
  if (v12 + v107 >= v3) {
    uint64_t v34 = v3;
  }
  else {
    uint64_t v34 = v12 + v107;
  }
  if (v34 >= v12)
  {
    if (v13 != v34)
    {
      uint64_t v35 = (void *)(v9 + 24 * v13);
      uint64_t v110 = v34;
      do
      {
        uint64_t v37 = v12;
        unint64_t v113 = v35;
        uint64_t v38 = v35;
        uint64_t v117 = v13;
        while (1)
        {
          uint64_t v119 = v37;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v39 = sub_25704A7D0();
          uint64_t v41 = v40;
          swift_bridgeObjectRetain();
          if (v39 == sub_25704A7D0() && v41 == v42) {
            break;
          }
          char v44 = sub_25704B1E0();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0) {
            goto LABEL_53;
          }
          uint64_t v36 = v117;
          if (!v115) {
            goto LABEL_152;
          }
          uint64_t v45 = *v38;
          uint64_t v46 = v38[1];
          uint64_t v47 = v38[2];
          *(_OWORD *)uint64_t v38 = *(_OWORD *)(v38 - 3);
          v38[2] = *(v38 - 1);
          *(v38 - 2) = v46;
          *(v38 - 1) = v47;
          *(v38 - 3) = v45;
          v38 -= 3;
          uint64_t v37 = v119 + 1;
          if (v117 == v119 + 1) {
            goto LABEL_54;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_53:
        uint64_t v36 = v117;
LABEL_54:
        uint64_t v13 = v36 + 1;
        uint64_t v35 = v113 + 3;
        uint64_t v12 = v111;
      }
      while (v13 != v110);
      uint64_t v13 = v110;
    }
    goto LABEL_65;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  uint64_t result = sub_25704AFC0();
  __break(1u);
  return result;
}

uint64_t sub_256FB08FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = result;
  if (a3 != a2)
  {
    uint64_t v18 = *a4;
    uint64_t v4 = (void *)(*a4 + 24 * a3);
LABEL_6:
    uint64_t v19 = a3;
    uint64_t v20 = v16;
    uint64_t v17 = v4;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_25704A7D0();
      uint64_t v8 = v7;
      swift_bridgeObjectRetain();
      if (v6 == sub_25704A7D0() && v8 == v9)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v19;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v17 + 3;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v11 = sub_25704B1E0();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = v19;
      if ((v11 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v18) {
        break;
      }
      uint64_t v12 = *v4;
      uint64_t v13 = v4[1];
      uint64_t v14 = v4[2];
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(v4 - 3);
      v4[2] = *(v4 - 1);
      *(v4 - 2) = v13;
      *(v4 - 1) = v14;
      *(v4 - 3) = v12;
      v4 -= 3;
      if (v19 == ++v20) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_256FB0AF0(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = a2 - __src;
  int64_t v7 = (a2 - __src) / 24;
  uint64_t v8 = a3 - (void)a2;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v40 = __src;
  uint64_t v39 = a4;
  if (v7 >= v9)
  {
    if (v8 >= -23)
    {
      if (a4 != a2 || &a2[24 * v9] <= a4) {
        memmove(a4, a2, 24 * v9);
      }
      uint64_t v20 = &a4[24 * v9];
      uint64_t v38 = v20;
      uint64_t v40 = v4;
      if (v5 < v4 && v8 >= 24)
      {
        unint64_t v21 = a3 - 24;
        uint64_t v22 = v4;
        uint64_t v36 = v5;
        do
        {
          uint64_t v35 = v20;
          v20 -= 24;
          v22 -= 24;
          swift_retain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v23 = sub_25704A7D0();
          uint64_t v25 = v24;
          swift_bridgeObjectRetain();
          BOOL v27 = v23 == sub_25704A7D0() && v25 == v26;
          uint64_t v37 = v4;
          if (v27) {
            char v28 = 0;
          }
          else {
            char v28 = sub_25704B1E0();
          }
          uint64_t v29 = (char *)(v21 + 24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v28)
          {
            uint64_t v20 = v35;
            if (v29 != v37 || v21 >= (unint64_t)v37)
            {
              long long v30 = *(_OWORD *)v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v30;
            }
            uint64_t v40 = v22;
          }
          else
          {
            uint64_t v38 = v20;
            if (v29 < v35 || v21 >= (unint64_t)v35 || v29 != v35)
            {
              long long v31 = *(_OWORD *)v20;
              *(void *)(v21 + 16) = *((void *)v20 + 2);
              *(_OWORD *)unint64_t v21 = v31;
            }
            uint64_t v22 = v37;
          }
          if (v22 <= v36) {
            break;
          }
          v21 -= 24;
          uint64_t v4 = v22;
        }
        while (v20 > a4);
      }
LABEL_50:
      sub_256FB10A8((void **)&v40, (const void **)&v39, &v38);
      return 1;
    }
  }
  else if (v6 >= -23)
  {
    if (a4 != __src || &__src[24 * v7] <= a4) {
      memmove(a4, __src, 24 * v7);
    }
    uint64_t v38 = &a4[24 * v7];
    if ((unint64_t)v4 < a3 && v6 >= 24)
    {
      uint64_t v10 = a4;
      while (1)
      {
        swift_retain();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_25704A7D0();
        uint64_t v13 = v12;
        swift_bridgeObjectRetain();
        if (v11 == sub_25704A7D0() && v13 == v14) {
          break;
        }
        char v16 = sub_25704B1E0();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_19;
        }
        uint64_t v17 = v4 + 24;
        if (v5 < v4 || v5 >= v17 || v5 != v4)
        {
          long long v18 = *(_OWORD *)v4;
          *((void *)v5 + 2) = *((void *)v4 + 2);
          *(_OWORD *)uint64_t v5 = v18;
        }
LABEL_22:
        v5 += 24;
        if (v10 < &a4[24 * v7])
        {
          uint64_t v4 = v17;
          if ((unint64_t)v17 < a3) {
            continue;
          }
        }
        uint64_t v40 = v5;
        goto LABEL_50;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_19:
      if (v5 != v10)
      {
        long long v19 = *(_OWORD *)v10;
        *((void *)v5 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v5 = v19;
      }
      v10 += 24;
      uint64_t v39 = v10;
      uint64_t v17 = v4;
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

char *sub_256FB0FA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC780);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_256FB10A8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)sub_25704B090();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

char *sub_256FB1178(uint64_t a1)
{
  return sub_256FB0FA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_256FB118C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_256FB11E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_256FB1244(void *a1)
{
  return sub_256F91BC0(0, a1[2], 0, a1);
}

void broadcast(_:to:stream:)(uint64_t a1, uint64_t a2)
{
}

void add<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void addmm<A, B, C>(_:_:_:alpha:beta:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = *a4;
  addMM<A, B, C>(_:_:_:alpha:beta:stream:)(a1, a2, a3, a9, a10, (uint64_t)&v12, a5, a6, a7, a8, a11, a12);
}

void addMM<A, B, C>(_:_:_:alpha:beta:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = toArrays<A, B>(_:_:)(a2, a3, a7, a8, a10, a11);
  uint64_t v16 = type metadata accessor for MLXArray();
  toArrays<A, B>(_:_:)((uint64_t)&v17, a1, v16, a9, (uint64_t)&protocol witness table for MLXArray, a12);
  swift_release();
  mlx_addmm(a4, a5);
}

void acos(_:stream:)()
{
}

void acosh(_:stream:)()
{
}

void asin(_:stream:)()
{
}

void asinh(_:stream:)()
{
}

void atan(_:stream:)()
{
}

void atanh(_:stream:)()
{
}

void atLeast1D(_:stream:)()
{
}

void atLeast2D(_:stream:)()
{
}

void atLeast3D(_:stream:)()
{
}

void argPartition(_:kth:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_argpartition();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void argPartition(_:kth:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_argpartition_all();
  }
  __break(1u);
  __break(1u);
}

void argSort(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_argsort();
  }
  __break(1u);
  __break(1u);
}

void argSort(_:stream:)()
{
}

void asStrided(_:_:strides:offset:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    if (a3)
    {
LABEL_3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = MLXArray.shape.getter();
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 1;
    int64_t v7 = sub_256FA5C48(0, 1, 1, MEMORY[0x263F8EE78]);
    while (v5 <= *(void *)(v4 + 16))
    {
      uint64_t v8 = *(void *)(v4 + 8 * v5 + 24);
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1) {
        int64_t v7 = sub_256FA5C48((void *)(v9 > 1), v10 + 1, 1, v7);
      }
      v7[2] = v10 + 1;
      v7[v10 + 4] = v6;
      if ((unsigned __int128)(v6 * (__int128)v8) >> 64 != (v6 * v8) >> 63) {
        goto LABEL_15;
      }
      v6 *= v8;
      if (!--v5) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v7 = (void *)MEMORY[0x263F8EE78];
  }
  sub_256FB1B24((uint64_t)v7);
LABEL_4:
  Array<A>.asInt32.getter(v4);
  swift_bridgeObjectRelease();
  mlx_as_strided();
}

uint64_t sub_256FB1B24(uint64_t result)
{
  uint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = v1[v3 + 4];
    uint64_t v8 = v1[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_256FA81B0(v1);
      uint64_t v1 = (void *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void blockMaskedMM(_:_:blockSize:maskOut:maskLHS:maskRHS:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_block_masked_mm();
  }
  __break(1u);
  __break(1u);
}

void ceil(_:stream:)()
{
}

uint64_t clip<A, B>(_:min:max:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v23[0] = a8;
  uint64_t v15 = sub_25704AC70();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  long long v18 = (char *)v23 - v17;
  v23[1] = *a4;
  uint64_t v25 = a1;
  uint64_t v24 = type metadata accessor for MLXArray();
  uint64_t v19 = toArrays<A, B>(_:_:)((uint64_t)&v25, a2, v24, a5, (uint64_t)&protocol witness table for MLXArray, a7);
  uint64_t v20 = *(void *)(a6 - 8);
  unint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v21(a3, 1, a6) == 1) {
LABEL_4:
  }
    mlx_clip();
  uint64_t v25 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v21)(v18, 1, a6);
  if (result != 1)
  {
    toArrays<A, B>(_:_:)((uint64_t)&v25, (uint64_t)v18, v24, a6, (uint64_t)&protocol witness table for MLXArray, v23[0]);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, a6);
    swift_release();
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void clip<A>(_:max:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  uint64_t v8 = type metadata accessor for MLXArray();
  toArrays<A, B>(_:_:)((uint64_t)&v9, a2, v8, a4, (uint64_t)&protocol witness table for MLXArray, a5);
  mlx_clip();
}

void concatenated(_:axis:stream:)()
{
}

BOOL static ConvolveMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ConvolveMode.hash(into:)()
{
  return sub_25704B2A0();
}

uint64_t ConvolveMode.hashValue.getter()
{
  return sub_25704B2B0();
}

BOOL sub_256FB22B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_256FB22CC()
{
  return sub_25704B2B0();
}

uint64_t sub_256FB2314()
{
  return sub_25704B2A0();
}

uint64_t sub_256FB2340()
{
  return sub_25704B2B0();
}

void cosh(_:stream:)()
{
}

void degrees(_:stream:)()
{
}

void divide<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void divmod<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void equargsortal<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void erf(_:stream:)()
{
}

void erfInverse(_:stream:)()
{
}

void expandedDimensions(_:axes:stream:)(uint64_t a1, uint64_t a2)
{
}

void expandedDimensions(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_expand_dims();
  }
  __break(1u);
  __break(1u);
}

void expm1(_:stream:)()
{
}

void greater<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void greaterEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void inner(_:_:stream:)()
{
}

void isClose(_:_:rtol:atol:equalNaN:stream:)()
{
}

void isNaN(_:stream:)()
{
}

void isInf(_:stream:)()
{
}

void isNegInf(_:stream:)()
{
}

void isPosInf(_:stream:)()
{
}

void less<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void lessEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void logAddExp<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void logicalAnd<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void logicalNot(_:stream:)()
{
}

void logicalOr<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

Morpheus::MeshGridIndexing_optional __swiftcall MeshGridIndexing.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  uint64_t v3 = sub_25704B0C0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

uint64_t MeshGridIndexing.rawValue.getter()
{
  if (*v0) {
    return 27241;
  }
  else {
    return 31096;
  }
}

uint64_t sub_256FB2EFC(char *a1, char *a2)
{
  return sub_256FF2734(*a1, *a2);
}

uint64_t sub_256FB2F08()
{
  return sub_25704B2B0();
}

uint64_t sub_256FB2F68()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FB2FAC()
{
  return sub_25704B2B0();
}

Morpheus::MeshGridIndexing_optional sub_256FB3008(Swift::String *a1)
{
  return MeshGridIndexing.init(rawValue:)(*a1);
}

void sub_256FB3014(uint64_t *a1@<X8>)
{
  uint64_t v2 = 31096;
  if (*v1) {
    uint64_t v2 = 27241;
  }
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

void meshGrid(_:sparse:indexing:stream:)()
{
  uint64_t v0 = sub_25704A7C0();
  MEMORY[0x270FA5388](v0);
  mlx_vector_array_new();
}

void maximum<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void minimum<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void multiply<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void negative(_:stream:)()
{
}

void notEqual<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void outer(_:_:stream:)()
{
}

uint64_t padded(_:width:value:stream:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t result = mlx_array_ndim(*(void *)(a1 + 16));
  int64_t v8 = result;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_256FA6898(result << 32);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!v8)
  {
    if (a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v8, 0);
  if (v6 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_25;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v19 = v4;
  uint64_t v10 = v20;
  unint64_t v11 = *(void *)(v20 + 16);
  int64_t v12 = v8;
  do
  {
    uint64_t v20 = v10;
    unint64_t v13 = *(void *)(v10 + 24);
    if (v11 >= v13 >> 1)
    {
      sub_256F90A30(v13 > 1, v11 + 1, 1);
      uint64_t v10 = v20;
    }
    *(void *)(v10 + 16) = v11 + 1;
    *(_DWORD *)(v10 + 4 * v11++ + 32) = v6;
    --v12;
  }
  while (v12);
  uint64_t v20 = v9;
  uint64_t result = sub_256F90A30(0, v8, 0);
  if (v5 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_27;
  }
  if (v5 <= 0x7FFFFFFF)
  {
    uint64_t v14 = v20;
    unint64_t v15 = *(void *)(v20 + 16);
    int64_t v16 = v8;
    do
    {
      uint64_t v20 = v14;
      unint64_t v17 = *(void *)(v14 + 24);
      if (v15 >= v17 >> 1)
      {
        sub_256F90A30(v17 > 1, v15 + 1, 1);
        uint64_t v14 = v20;
      }
      *(void *)(v14 + 16) = v15 + 1;
      *(_DWORD *)(v14 + 4 * v15++ + 32) = v5;
      --v16;
    }
    while (v16);
    uint64_t v4 = v19;
    if (a3)
    {
LABEL_21:
      swift_retain();
      mlx_pad();
    }
LABEL_20:
    uint64_t dtype = mlx_array_get_dtype(*(void *)(v4 + 16));
    sub_256FE5804(dtype, &v20);
    sub_256FB6D8C(0, v20);
    goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_256FB38FC(char a1, float a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  if (a1 == 6) {
    mlx_array_from_float();
  }
  uint64_t v3 = MEMORY[0x263F8D5C8];
  v29[3] = MEMORY[0x263F8D5C8];
  v29[4] = sub_256FC9A8C();
  *(float *)uint64_t v29 = a2;
  switch(v4)
  {
    case 1:
      goto LABEL_13;
    case 2:
      uint64_t v9 = __swift_project_boxed_opaque_existential_1(v29, v3);
      uint64_t v10 = *(void *)(v3 - 8);
      MEMORY[0x270FA5388](v9);
      int64_t v12 = (float *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(float *))(v10 + 16))(v12);
      sub_256FC8F08((uint64_t)&v27, *v12);
      if ((v27 & 0x100000000) != 0) {
        goto LABEL_19;
      }
      (*(void (**)(float *, void))(v10 + 8))(v12, MEMORY[0x263F8D5C8]);
      uint64_t v3 = mlx_array_from_data((uint64_t)&v27, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      if (v3) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_10:
      unint64_t v13 = __swift_project_boxed_opaque_existential_1(v29, v3);
      uint64_t v14 = *(void *)(v3 - 8);
      MEMORY[0x270FA5388](v13);
      int64_t v16 = (float *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(float *))(v14 + 16))(v16);
      sub_256FC9054(&v27, *v16);
      if ((v27 & 0x100) != 0) {
        goto LABEL_19;
      }
      (*(void (**)(float *, void))(v14 + 8))(v16, MEMORY[0x263F8D5C8]);
      uint64_t v3 = mlx_array_from_data((uint64_t)&v27, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
      if (v3) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_13:
      unint64_t v17 = __swift_project_boxed_opaque_existential_1(v29, v3);
      uint64_t v18 = *(void *)(v3 - 8);
      MEMORY[0x270FA5388](v17);
      uint64_t v20 = (float *)((char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(float *))(v18 + 16))(v20);
      sub_256FC8D90(&v27, *v20);
      if ((v27 & 0x100) != 0) {
        goto LABEL_19;
      }
      (*(void (**)(float *, void))(v18 + 8))(v20, MEMORY[0x263F8D5C8]);
      uint64_t v3 = mlx_array_from_data((uint64_t)&v27, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
      if (v3) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_16:
      unint64_t v21 = __swift_project_boxed_opaque_existential_1(v29, v3);
      uint64_t v22 = *(void *)(v3 - 8);
      MEMORY[0x270FA5388](v21);
      uint64_t v24 = (float *)((char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(float *))(v22 + 16))(v24);
      sub_256FC9394((uint64_t)&v27, *v24);
      if (v28)
      {
LABEL_19:
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        sub_25704ADF0();
        sub_25704B340();
        sub_25704A850();
        swift_bridgeObjectRelease();
        sub_25704A850();
        sub_25704A850();
        sub_25704A850();
        uint64_t result = sub_25704AFD0();
        __break(1u);
      }
      else
      {
        (*(void (**)(float *, void))(v22 + 8))(v24, MEMORY[0x263F8D5C8]);
        uint64_t result = mlx_array_from_data((uint64_t)&v27, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        uint64_t v3 = result;
        if (result)
        {
LABEL_18:
          type metadata accessor for MLXArray();
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v3;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
          return v26;
        }
      }
      __break(1u);
      return result;
    case 3:
      goto LABEL_10;
    case 4:
      uint64_t v5 = __swift_project_boxed_opaque_existential_1(v29, v3);
      uint64_t v6 = *(void *)(v3 - 8);
      MEMORY[0x270FA5388](v5);
      int64_t v8 = (float *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(float *))(v6 + 16))(v8);
      sub_256FC920C((uint64_t)&v27, *v8);
      if ((v27 & 0x100000000) == 0)
      {
        (*(void (**)(float *, void))(v6 + 8))(v8, MEMORY[0x263F8D5C8]);
        mlx_array_from_int();
      }
      goto LABEL_19;
    case 5:
      goto LABEL_16;
    default:
      __swift_project_boxed_opaque_existential_1(v29, MEMORY[0x263F8D5C8]);
      mlx_array_from_BOOL();
  }
}

void sub_256FB4360(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FB4368);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FB43B4(int a1, char a2)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  if (a2 == 4) {
    mlx_array_from_int();
  }
  int v148 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  uint64_t v4 = MEMORY[0x263F8E548];
  if (swift_dynamicCast())
  {
    unint64_t result = sub_256FA81EC(v149, (uint64_t)v151);
    switch(v6)
    {
      case 1:
        uint64_t v36 = v152;
        uint64_t v37 = __swift_project_boxed_opaque_existential_1(v151, v152);
        uint64_t v38 = *(void *)(v36 - 8);
        MEMORY[0x270FA5388](v37);
        uint64_t v40 = (char *)v140 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v38 + 16))(v40);
        sub_256FC9C30();
        uint64_t v4 = MEMORY[0x263F8E778];
        sub_25704AF70();
        if (BYTE1(v149[0])) {
          goto LABEL_108;
        }
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v36);
        uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        if (v26) {
          goto LABEL_100;
        }
        __break(1u);
        goto LABEL_23;
      case 2:
        goto LABEL_28;
      case 3:
        uint64_t v21 = v152;
        uint64_t v22 = __swift_project_boxed_opaque_existential_1(v151, v152);
        uint64_t v23 = *(void *)(v21 - 8);
        MEMORY[0x270FA5388](v22);
        uint64_t v25 = (char *)v140 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v23 + 16))(v25);
        sub_256FC9B88();
        uint64_t v4 = MEMORY[0x263F8E498];
        sub_25704AF70();
        if (BYTE1(v149[0])) {
          goto LABEL_108;
        }
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
        uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (v26) {
          goto LABEL_100;
        }
        __break(1u);
        goto LABEL_15;
      case 4:
        goto LABEL_109;
      case 5:
        uint64_t v73 = v152;
        uint64_t v74 = __swift_project_boxed_opaque_existential_1(v151, v152);
        uint64_t v75 = *(void *)(v73 - 8);
        MEMORY[0x270FA5388](v74);
        uint64_t v77 = (char *)v140 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v75 + 16))(v77);
        sub_256FC9AE0();
        sub_25704AF70();
        if (BYTE8(v149[0])) {
          goto LABEL_108;
        }
        (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v73);
        uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        if (!v26)
        {
          __break(1u);
LABEL_40:
          uint64_t v78 = __swift_project_boxed_opaque_existential_1(v151, v152);
          MEMORY[0x270FA5388](v78);
          (*(void (**)(char *))(v80 + 16))((char *)v140 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
          sub_256FC9A8C();
          sub_25704A580();
          mlx_array_from_float();
        }
        goto LABEL_100;
      case 6:
        goto LABEL_40;
      default:
        __swift_project_boxed_opaque_existential_1(v151, v152);
        sub_25704A6A0();
        mlx_array_from_BOOL();
    }
  }
  uint64_t v150 = 0;
  memset(v149, 0, sizeof(v149));
  sub_256FB11E8((uint64_t)v149, &qword_269FDC8E8);
  uint64_t v152 = v4;
  unint64_t result = sub_256FAB5EC();
  unint64_t v147 = result;
  unint64_t v153 = result;
  LODWORD(v151[0]) = a1;
  switch(v7)
  {
    case 1:
LABEL_23:
      uint64_t v41 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v146 = (void (*)(char *))v140;
      uint64_t v42 = *(void *)(v4 - 8);
      uint64_t v43 = *(void *)(v42 + 64);
      MEMORY[0x270FA5388](v41);
      char v44 = (int *)((char *)v140 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v45 = *(void (**)(int *))(v42 + 16);
      v45(v44);
      uint64_t v46 = sub_25704AD40();
      if (v46)
      {
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v145 = v140;
        MEMORY[0x270FA5388](AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        uint64_t v48 = sub_25704B210();
        MEMORY[0x270FA5388](v48);
        sub_25704B1C0();
        char v49 = sub_25704A6E0();
        uint64_t v46 = (*(uint64_t (**)(char *, void))(v42 + 8))((char *)v140 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        if ((v49 & 1) == 0) {
          goto LABEL_102;
        }
      }
      uint64_t v2 = (uint64_t)v140;
      MEMORY[0x270FA5388](v46);
      unint64_t v50 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
      ((void (*)(char *, char *, void))v45)((char *)v140 - v50, (char *)v140 - v50, MEMORY[0x263F8E548]);
      LOBYTE(v149[0]) = -1;
      uint64_t v51 = sub_25704AD40();
      MEMORY[0x270FA5388](v51);
      sub_256FC99E4();
      sub_25704AD10();
      char v52 = sub_25704A6D0();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v42 + 8);
      v53((char *)v140 - v50, MEMORY[0x263F8E548]);
      if (v52) {
        goto LABEL_102;
      }
      uint64_t v54 = MEMORY[0x263F8E548];
      v53((char *)v140 - v50, MEMORY[0x263F8E548]);
      int v55 = *v44;
      v53((char *)v44, v54);
      LOBYTE(v149[0]) = v55;
      uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
      if (v26) {
        goto LABEL_100;
      }
      __break(1u);
LABEL_28:
      uint64_t v56 = v152;
      unint64_t v57 = __swift_project_boxed_opaque_existential_1(v151, v152);
      uint64_t v58 = *(void *)(v56 - 8);
      MEMORY[0x270FA5388](v57);
      uint64_t v60 = (char *)v140 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v58 + 16))(v60);
      sub_256FC9BDC();
      uint64_t v4 = MEMORY[0x263F8E8F8];
      sub_25704AF70();
      if (BYTE4(v149[0])) {
        goto LABEL_108;
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v56);
      uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      if (v26) {
        goto LABEL_100;
      }
      __break(1u);
LABEL_31:
      uint64_t v61 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v145 = v140;
      uint64_t v62 = *(void *)(v4 - 8);
      uint64_t v19 = *(char **)(v62 + 64);
      MEMORY[0x270FA5388](v61);
      uint64_t v11 = (char *)v140 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v146 = *(void (**)(char *))(v62 + 16);
      v146(v11);
      uint64_t v63 = sub_25704AD40();
      if (v63)
      {
        uint64_t v64 = swift_getAssociatedTypeWitness();
        MEMORY[0x270FA5388](v64);
        uint64_t v2 = (uint64_t)v140 - v65;
        swift_getAssociatedConformanceWitness();
        uint64_t v66 = sub_25704B210();
        MEMORY[0x270FA5388](v66);
        sub_25704B1C0();
        char v67 = sub_25704A6E0();
        uint64_t v63 = (*(uint64_t (**)(char *, void))(v62 + 8))((char *)v140 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        if ((v67 & 1) == 0) {
          goto LABEL_102;
        }
      }
      unint64_t v144 = v140;
      MEMORY[0x270FA5388](v63);
      uint64_t v10 = (char *)v140 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, void))v146)(v10, v10, MEMORY[0x263F8E548]);
      if (sub_25704AD40())
      {
        uint64_t v68 = swift_getAssociatedTypeWitness();
        int v143 = v140;
        MEMORY[0x270FA5388](v68);
        swift_getAssociatedConformanceWitness();
        uint64_t v69 = sub_25704B210();
        uint64_t v142 = v140;
        MEMORY[0x270FA5388](v69);
        sub_25704B1C0();
        char v70 = sub_25704A6C0();
        uint64_t v71 = *(void (**)(char *, uint64_t))(v62 + 8);
        unint64_t v17 = (uint64_t (*)(char *, uint64_t))(v62 + 8);
        int64_t v16 = v71;
        uint64_t v2 = MEMORY[0x263F8E548];
        uint64_t v72 = ((uint64_t (*)(char *, void))v71)((char *)v140 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        MEMORY[0x270FA5388](v72);
        uint64_t v19 = (char *)v140 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v146)(v19, v10, v2);
        if (v70) {
          sub_25704AD20();
        }
        v16(v19, MEMORY[0x263F8E548]);
      }
      else
      {
        int64_t v16 = *(void (**)(char *, uint64_t))(v62 + 8);
        unint64_t v17 = (uint64_t (*)(char *, uint64_t))((v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      }
      uint64_t v93 = MEMORY[0x263F8E548];
      v16(v10, MEMORY[0x263F8E548]);
      int v94 = *(_DWORD *)v11;
      v16(v11, v93);
      LODWORD(v149[0]) = v94;
      uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      if (v26) {
        goto LABEL_100;
      }
      __break(1u);
      goto LABEL_55;
    case 2:
      goto LABEL_31;
    case 3:
LABEL_15:
      uint64_t v27 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v145 = v140;
      uint64_t v28 = *(void *)(v4 - 8);
      uint64_t v10 = *(char **)(v28 + 64);
      MEMORY[0x270FA5388](v27);
      unint64_t v29 = (unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v11 = (char *)v140 - v29;
      uint64_t v146 = (void (*)(char *))v28;
      long long v30 = *(void (**)(char *, uint64_t))(v28 + 16);
      uint64_t v19 = (char *)(v28 + 16);
      int64_t v16 = v30;
      ((void (*)(char *))v30)((char *)v140 - v29);
      uint64_t v31 = sub_25704AD40();
      char v32 = v31;
      unint64_t v144 = v140;
      MEMORY[0x270FA5388](v31);
      ((void (*)(char *, char *, void))v30)((char *)v140 - v29, (char *)v140 - v29, MEMORY[0x263F8E548]);
      if ((v32 & 1) == 0)
      {
        unint64_t v17 = (uint64_t (*)(char *, uint64_t))*((void *)v146 + 1);
        uint64_t v34 = v17((char *)v140 - v29, MEMORY[0x263F8E548]);
        goto LABEL_91;
      }
      uint64_t v33 = sub_25704AD30();
      unint64_t v17 = (uint64_t (*)(char *, uint64_t))*((void *)v146 + 1);
      uint64_t v34 = v17((char *)v140 - v29, MEMORY[0x263F8E548]);
      if (v33 <= 8) {
        goto LABEL_91;
      }
      int v143 = v140;
      MEMORY[0x270FA5388](v34);
      uint64_t v2 = (uint64_t)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(uint64_t, char *, void))v16)(v2, (char *)v140 - v29, MEMORY[0x263F8E548]);
      LOBYTE(v149[0]) = 0x80;
      if ((sub_25704AD40() & 1) == 0)
      {
LABEL_55:
        char v95 = sub_25704AD40();
        uint64_t v35 = sub_25704AD30();
        if ((v95 & 1) == 0)
        {
          if (v35 >= 8)
          {
            uint64_t v34 = v17((char *)v2, MEMORY[0x263F8E548]);
            goto LABEL_91;
          }
          goto LABEL_72;
        }
        if (v35 <= 8) {
          goto LABEL_82;
        }
LABEL_66:
        MEMORY[0x270FA5388](v35);
        sub_256FC9990();
        sub_25704AD10();
        LODWORD(v142) = sub_25704A6D0();
        uint64_t v102 = MEMORY[0x263F8E548];
        v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        uint64_t v34 = v17((char *)v2, v102);
        if (v142) {
          goto LABEL_73;
        }
        goto LABEL_91;
      }
      uint64_t v35 = sub_25704AD30();
      if (v35 >= 8) {
        goto LABEL_66;
      }
LABEL_72:
      char v105 = sub_25704AD20();
      uint64_t v34 = v17((char *)v2, MEMORY[0x263F8E548]);
      BOOL v97 = __OFSUB__(SLOBYTE(v149[0]), v105);
      BOOL v96 = SLOBYTE(v149[0]) - v105 < 0;
      if (SLOBYTE(v149[0]) > v105)
      {
        while (1)
        {
LABEL_73:
          __break(1u);
LABEL_74:
          if (v96 == v97) {
            goto LABEL_97;
          }
LABEL_76:
          uint64_t v106 = sub_25704AD20();
          v16(v19, MEMORY[0x263F8E548]);
          BOOL v99 = __OFSUB__(v106, *(void *)&v149[0]);
          BOOL v98 = v106 - *(void *)&v149[0] < 0;
          if (v106 >= *(uint64_t *)&v149[0]) {
            goto LABEL_98;
          }
LABEL_77:
          __break(1u);
LABEL_78:
          if (v98 == v99)
          {
            v16(v19, MEMORY[0x263F8E548]);
            goto LABEL_99;
          }
LABEL_80:
          uint64_t v107 = sub_25704AD20();
          v16(v19, MEMORY[0x263F8E548]);
          if (v107 >= *(uint64_t *)&v149[0]) {
            goto LABEL_99;
          }
LABEL_81:
          __break(1u);
LABEL_82:
          uint64_t v108 = *(void **)(*(void *)(v147 + 24) + 16);
          uint64_t v109 = swift_getAssociatedTypeWitness();
          v140[1] = v140;
          MEMORY[0x270FA5388](v109);
          uint64_t v111 = (char *)v140 - v110;
          uint64_t v142 = v108;
          swift_getAssociatedConformanceWitness();
          uint64_t v141 = v111;
          uint64_t v112 = sub_25704B210();
          MEMORY[0x270FA5388](v112);
          sub_25704B1C0();
          LOBYTE(v108) = sub_25704A6D0();
          uint64_t v113 = v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
          MEMORY[0x270FA5388](v113);
          (*((void (**)(char *, uint64_t, void))v146 + 4))((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), v2, MEMORY[0x263F8E548]);
          if (v108) {
            break;
          }
          uint64_t v2 = SLOBYTE(v149[0]);
          char v114 = sub_25704AD20();
          uint64_t v34 = v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
          BOOL v97 = __OFSUB__(v2, v114);
          BOOL v96 = (int)v2 - v114 < 0;
          if ((int)v2 <= v114) {
            goto LABEL_91;
          }
        }
        v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        __break(1u);
        goto LABEL_106;
      }
LABEL_91:
      MEMORY[0x270FA5388](v34);
      uint64_t v129 = MEMORY[0x263F8E548];
      ((void (*)(char *, char *, void))v16)((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11, MEMORY[0x263F8E548]);
      LOBYTE(v149[0]) = 127;
      uint64_t v130 = sub_25704AD40();
      uint64_t v19 = (char *)v140;
      if (v130)
      {
        MEMORY[0x270FA5388](v130);
        sub_256FC9990();
        sub_25704AD10();
        char v131 = sub_25704A6D0();
        unint64_t v132 = (unint64_t)v146 + 8;
        uint64_t v133 = MEMORY[0x263F8E548];
        v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
        v17((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), v133);
      }
      else
      {
        LOBYTE(v148) = 127;
        MEMORY[0x270FA5388](v130);
        size_t v134 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v135 = (*((uint64_t (**)(char *, char *, uint64_t))v146 + 4))(v134, v134, v129);
        MEMORY[0x270FA5388](v135);
        sub_256FC9990();
        sub_25704AD10();
        char v131 = sub_25704A6D0();
        unint64_t v132 = (unint64_t)v146 + 8;
        uint64_t v136 = MEMORY[0x263F8E548];
        v17(v134, MEMORY[0x263F8E548]);
        v17(v134, v136);
      }
      if ((v131 & 1) == 0)
      {
        int64_t v16 = (void (*)(char *, uint64_t))(v132 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        int v137 = *(_DWORD *)v11;
        v17(v11, MEMORY[0x263F8E548]);
        LOBYTE(v149[0]) = v137;
        uint64_t v26 = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (!v26)
        {
          __break(1u);
LABEL_97:
          v16(v19, MEMORY[0x263F8E548]);
          goto LABEL_98;
        }
LABEL_100:
        type metadata accessor for MLXArray();
        uint64_t v139 = swift_allocObject();
        *(void *)(v139 + 16) = v26;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
        return v139;
      }
      __break(1u);
LABEL_102:
      unint64_t result = sub_25704AFC0();
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      return result;
    case 4:
      goto LABEL_109;
    case 5:
      uint64_t v81 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v146 = (void (*)(char *))v140;
      uint64_t v82 = *(void *)(v4 - 8);
      uint64_t v10 = *(char **)(v82 + 64);
      MEMORY[0x270FA5388](v81);
      uint64_t v11 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v2 = v82 + 16;
      unint64_t v83 = *(void (**)(char *))(v82 + 16);
      v83(v11);
      uint64_t v84 = sub_25704AD40();
      char v85 = v84;
      MEMORY[0x270FA5388](v84);
      ((void (*)(char *, char *, void))v83)(v11, v11, MEMORY[0x263F8E548]);
      if ((v85 & 1) == 0)
      {
        int64_t v16 = *(void (**)(char *, uint64_t))(v82 + 8);
        v16(v11, MEMORY[0x263F8E548]);
        goto LABEL_99;
      }
      uint64_t v145 = v140;
      uint64_t v86 = sub_25704AD30();
      unint64_t v17 = (uint64_t (*)(char *, uint64_t))(v82 + 8);
      int64_t v16 = *(void (**)(char *, uint64_t))(v82 + 8);
      uint64_t v87 = ((uint64_t (*)(char *, void))v16)(v11, MEMORY[0x263F8E548]);
      if (v86 <= 64) {
        goto LABEL_99;
      }
      unint64_t v144 = v140;
      MEMORY[0x270FA5388](v87);
      uint64_t v19 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, void))v83)(v19, v11, MEMORY[0x263F8E548]);
      *(void *)&v149[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v88 = sub_25704AD30();
        if (v88 < 64) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v2 = sub_25704AD40();
        uint64_t v88 = sub_25704AD30();
        BOOL v99 = __OFSUB__(v88, 64);
        BOOL v98 = v88 - 64 < 0;
        if ((v2 & 1) == 0) {
          goto LABEL_78;
        }
        if (v88 <= 64)
        {
          unsigned int v122 = *(void **)(*(void *)(v147 + 24) + 16);
          uint64_t v123 = swift_getAssociatedTypeWitness();
          uint64_t v141 = v140;
          MEMORY[0x270FA5388](v123);
          unint64_t v125 = (char *)v140 - v124;
          int v143 = v122;
          swift_getAssociatedConformanceWitness();
          uint64_t v142 = v125;
          uint64_t v126 = sub_25704B210();
          MEMORY[0x270FA5388](v126);
          sub_25704B1C0();
          LOBYTE(v122) = sub_25704A6D0();
          uint64_t v127 = ((uint64_t (*)(char *, void))v16)((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
          uint64_t v2 = (uint64_t)v140;
          MEMORY[0x270FA5388](v127);
          uint64_t v10 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, char *, void))(v82 + 32))(v10, v19, MEMORY[0x263F8E548]);
          if (v122) {
            goto LABEL_107;
          }
          uint64_t v19 = *(char **)&v149[0];
          uint64_t v128 = sub_25704AD20();
          v16(v10, MEMORY[0x263F8E548]);
          if (v128 < (uint64_t)v19) {
            goto LABEL_81;
          }
LABEL_99:
          uint64_t v138 = *(int *)v11;
          v16(v11, MEMORY[0x263F8E548]);
          *(void *)&v149[0] = v138;
          unint64_t result = mlx_array_from_data((uint64_t)v149, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
          uint64_t v26 = result;
          if (!result) {
            goto LABEL_110;
          }
          goto LABEL_100;
        }
      }
      uint64_t v2 = (uint64_t)v140;
      MEMORY[0x270FA5388](v88);
      uint64_t v10 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_256FC993C();
      sub_25704AD10();
      char v103 = sub_25704A6D0();
      uint64_t v104 = MEMORY[0x263F8E548];
      v16(v10, MEMORY[0x263F8E548]);
      v16(v19, v104);
      if (v103) {
        goto LABEL_81;
      }
      goto LABEL_99;
    case 6:
      uint64_t v89 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v90 = *(void *)(v4 - 8);
      MEMORY[0x270FA5388](v89);
      uint64_t v92 = (char *)v140 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v90 + 16))(v92);
      if (sub_25704AD40()) {
        sub_25704AD20();
      }
      (*(void (**)(char *, void))(v90 + 8))(v92, MEMORY[0x263F8E548]);
      mlx_array_from_float();
    default:
      int64_t v8 = __swift_project_boxed_opaque_existential_1(v151, v4);
      uint64_t v146 = (void (*)(char *))v140;
      uint64_t v9 = *(void *)(v4 - 8);
      uint64_t v10 = *(char **)(v9 + 64);
      MEMORY[0x270FA5388](v8);
      uint64_t v11 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v2 = v9 + 16;
      int64_t v12 = *(void (**)(char *))(v9 + 16);
      v12(v11);
      uint64_t v13 = sub_25704AD40();
      char v14 = v13;
      MEMORY[0x270FA5388](v13);
      ((void (*)(char *, char *, void))v12)(v11, v11, MEMORY[0x263F8E548]);
      if ((v14 & 1) == 0)
      {
        int64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
        v16(v11, MEMORY[0x263F8E548]);
        goto LABEL_98;
      }
      uint64_t v145 = v140;
      uint64_t v15 = sub_25704AD30();
      unint64_t v17 = (uint64_t (*)(char *, uint64_t))(v9 + 8);
      int64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v18 = ((uint64_t (*)(char *, void))v16)(v11, MEMORY[0x263F8E548]);
      if (v15 <= 64) {
        goto LABEL_98;
      }
      unint64_t v144 = v140;
      MEMORY[0x270FA5388](v18);
      uint64_t v19 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, void))v12)(v19, v11, MEMORY[0x263F8E548]);
      *(void *)&v149[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v20 = sub_25704AD30();
        if (v20 < 64) {
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v2 = sub_25704AD40();
        uint64_t v20 = sub_25704AD30();
        BOOL v97 = __OFSUB__(v20, 64);
        BOOL v96 = v20 - 64 < 0;
        if ((v2 & 1) == 0) {
          goto LABEL_74;
        }
        if (v20 <= 64)
        {
          uint64_t v115 = *(void **)(*(void *)(v147 + 24) + 16);
          uint64_t v116 = swift_getAssociatedTypeWitness();
          uint64_t v141 = v140;
          MEMORY[0x270FA5388](v116);
          uint64_t v118 = (char *)v140 - v117;
          int v143 = v115;
          swift_getAssociatedConformanceWitness();
          uint64_t v142 = v118;
          uint64_t v119 = sub_25704B210();
          MEMORY[0x270FA5388](v119);
          sub_25704B1C0();
          LOBYTE(v115) = sub_25704A6D0();
          uint64_t v120 = ((uint64_t (*)(char *, void))v16)((char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E548]);
          uint64_t v2 = (uint64_t)v140;
          MEMORY[0x270FA5388](v120);
          uint64_t v10 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, char *, void))(v9 + 32))(v10, v19, MEMORY[0x263F8E548]);
          if (v115)
          {
LABEL_106:
            v16(v10, MEMORY[0x263F8E548]);
            __break(1u);
LABEL_107:
            v16(v10, MEMORY[0x263F8E548]);
            __break(1u);
            __break(1u);
LABEL_108:
            *(void *)&v149[0] = 0;
            *((void *)&v149[0] + 1) = 0xE000000000000000;
            sub_25704ADF0();
            sub_25704B340();
            sub_25704A850();
            swift_bridgeObjectRelease();
            sub_25704A850();
            sub_25704A850();
            sub_25704A850();
            unint64_t result = sub_25704AFD0();
            goto LABEL_109;
          }
          uint64_t v19 = *(char **)&v149[0];
          uint64_t v121 = sub_25704AD20();
          v16(v10, MEMORY[0x263F8E548]);
          BOOL v99 = __OFSUB__(v121, v19);
          BOOL v98 = v121 - (uint64_t)v19 < 0;
          if (v121 < (uint64_t)v19) {
            goto LABEL_77;
          }
LABEL_98:
          v16(v11, MEMORY[0x263F8E548]);
          mlx_array_from_BOOL();
        }
      }
      uint64_t v2 = (uint64_t)v140;
      MEMORY[0x270FA5388](v20);
      uint64_t v10 = (char *)v140 - ((unint64_t)(v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_256FC9A38();
      sub_25704AD10();
      char v100 = sub_25704A6D0();
      uint64_t v101 = MEMORY[0x263F8E548];
      v16(v10, MEMORY[0x263F8E548]);
      v16(v19, v101);
      if (v100) {
        goto LABEL_77;
      }
      goto LABEL_98;
  }
}

void sub_256FB6CE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FB6CF0);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FB6D8C(uint64_t a1, char a2)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  if (a2 != 5)
  {
    uint64_t v165 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
    uint64_t v5 = (void *)MEMORY[0x263F8D6C8];
    if (swift_dynamicCast())
    {
      unint64_t result = sub_256FA81EC(v166, (uint64_t)v168);
      switch(v7)
      {
        case 1:
          uint64_t v38 = (uint64_t)v169;
          uint64_t v39 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v40 = *(void *)(v38 - 8);
          MEMORY[0x270FA5388](v39);
          uint64_t v42 = (char *)&v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v40 + 16))(v42);
          sub_256FC9C30();
          sub_25704AF70();
          if (BYTE1(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
LABEL_24:
          uint64_t v43 = (uint64_t)v169;
          char v44 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v45 = *(void *)(v43 - 8);
          MEMORY[0x270FA5388](v44);
          uint64_t v47 = (char *)&v156 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v45 + 16))(v47);
          sub_256FC9BDC();
          uint64_t v5 = (void *)MEMORY[0x263F8E8F8];
          sub_25704AF70();
          if (BYTE4(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v43);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
          break;
        case 2:
          goto LABEL_24;
        case 3:
          uint64_t v23 = (uint64_t)v169;
          uint64_t v24 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v25 = *(void *)(v23 - 8);
          MEMORY[0x270FA5388](v24);
          uint64_t v27 = (char *)&v156 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v25 + 16))(v27);
          sub_256FC9B88();
          uint64_t v5 = (void *)MEMORY[0x263F8E498];
          sub_25704AF70();
          if (BYTE1(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
          goto LABEL_16;
        case 4:
          uint64_t v84 = (uint64_t)v169;
          char v85 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v86 = *(void *)(v84 - 8);
          MEMORY[0x270FA5388](v85);
          uint64_t v88 = (char *)&v156 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v86 + 16))(v88);
          sub_256FC9B34();
          sub_25704AF70();
          if ((BYTE4(v166[0]) & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v84);
            mlx_array_from_int();
          }
          goto LABEL_117;
        case 5:
          goto LABEL_118;
        case 6:
          goto LABEL_37;
        default:
          __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          sub_25704A6A0();
          mlx_array_from_BOOL();
      }
LABEL_27:
      uint64_t v48 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
      uint64_t v163 = &v156;
      uint64_t v49 = *(v5 - 1);
      uint64_t v50 = *(void *)(v49 + 64);
      MEMORY[0x270FA5388](v48);
      uint64_t v51 = (uint64_t *)((char *)&v156 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
      char v52 = *(void (**)(uint64_t *))(v49 + 16);
      v52(v51);
      uint64_t v53 = sub_25704AD40();
      if ((v53 & 1) == 0) {
        goto LABEL_121;
      }
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v162 = &v156;
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v55 = sub_25704B210();
      MEMORY[0x270FA5388](v55);
      sub_25704B1C0();
      char v56 = sub_25704A6E0();
      uint64_t v53 = (*(uint64_t (**)(char *, void))(v49 + 8))((char *)&v156 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
      if (v56)
      {
LABEL_121:
        MEMORY[0x270FA5388](v53);
        unint64_t v57 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
        ((void (*)(char *, char *, void))v52)((char *)&v156 - v57, (char *)&v156 - v57, MEMORY[0x263F8D6C8]);
        LOBYTE(v166[0]) = -1;
        uint64_t v58 = sub_25704AD40();
        MEMORY[0x270FA5388](v58);
        sub_256FC99E4();
        sub_25704AD10();
        char v59 = sub_25704A6D0();
        uint64_t v5 = *(void **)(v49 + 8);
        ((void (*)(char *, void))v5)((char *)&v156 - v57, MEMORY[0x263F8D6C8]);
        if ((v59 & 1) == 0)
        {
          uint64_t v60 = MEMORY[0x263F8D6C8];
          ((void (*)(char *, void))v5)((char *)&v156 - v57, MEMORY[0x263F8D6C8]);
          uint64_t v61 = *v51;
          ((void (*)(uint64_t *, uint64_t))v5)(v51, v60);
          LOBYTE(v166[0]) = v61;
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
          if (v28)
          {
LABEL_104:
            type metadata accessor for MLXArray();
            uint64_t v4 = swift_allocObject();
            *(void *)(v4 + 16) = v28;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
            return v4;
          }
          __break(1u);
LABEL_32:
          uint64_t v62 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
          uint64_t v163 = &v156;
          uint64_t v63 = *(v5 - 1);
          uint64_t v64 = *(void *)(v63 + 64);
          MEMORY[0x270FA5388](v62);
          uint64_t v65 = (uint64_t *)((char *)&v156 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
          uint64_t v66 = *(void (**)(uint64_t *))(v63 + 16);
          v66(v65);
          uint64_t v67 = sub_25704AD40();
          if ((v67 & 1) == 0) {
            goto LABEL_122;
          }
          uint64_t v68 = swift_getAssociatedTypeWitness();
          uint64_t v162 = &v156;
          MEMORY[0x270FA5388](v68);
          swift_getAssociatedConformanceWitness();
          uint64_t v69 = sub_25704B210();
          MEMORY[0x270FA5388](v69);
          sub_25704B1C0();
          char v70 = sub_25704A6E0();
          uint64_t v67 = (*(uint64_t (**)(char *, void))(v63 + 8))((char *)&v156 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
          if (v70)
          {
LABEL_122:
            MEMORY[0x270FA5388](v67);
            unint64_t v71 = (v64 + 15) & 0xFFFFFFFFFFFFFFF0;
            ((void (*)(char *, char *, void))v66)((char *)&v156 - v71, (char *)&v156 - v71, MEMORY[0x263F8D6C8]);
            LODWORD(v166[0]) = -1;
            uint64_t v72 = sub_25704AD40();
            MEMORY[0x270FA5388](v72);
            sub_256FC98E8();
            sub_25704AD10();
            char v73 = sub_25704A6D0();
            uint64_t v74 = *(void (**)(char *, uint64_t))(v63 + 8);
            v74((char *)&v156 - v71, MEMORY[0x263F8D6C8]);
            if ((v73 & 1) == 0)
            {
              uint64_t v75 = MEMORY[0x263F8D6C8];
              v74((char *)&v156 - v71, MEMORY[0x263F8D6C8]);
              uint64_t v76 = *v65;
              v74((char *)v65, v75);
              LODWORD(v166[0]) = v76;
              uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
              if (!v28)
              {
                __break(1u);
LABEL_37:
                uint64_t v77 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
                MEMORY[0x270FA5388](v77);
                (*(void (**)(char *))(v79 + 16))((char *)&v156 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
                sub_256FC9A8C();
                sub_25704A580();
                mlx_array_from_float();
              }
              goto LABEL_104;
            }
          }
        }
      }
LABEL_108:
      unint64_t result = sub_25704AFC0();
      goto LABEL_118;
    }
    uint64_t v167 = 0;
    memset(v166, 0, sizeof(v166));
    sub_256FB11E8((uint64_t)v166, &qword_269FDC8E8);
    float v169 = (void (*)(void, void))v5;
    unint64_t result = sub_256FC9A38();
    unint64_t v164 = result;
    unint64_t v170 = result;
    v168[0] = a1;
    switch(v8)
    {
      case 1:
        goto LABEL_27;
      case 2:
        goto LABEL_32;
      case 3:
LABEL_16:
        unint64_t v29 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        uint64_t v162 = &v156;
        uint64_t v30 = *(v5 - 1);
        uint64_t v11 = *(char **)(v30 + 64);
        MEMORY[0x270FA5388](v29);
        unint64_t v31 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        char v14 = (char *)&v156 - v31;
        uint64_t v163 = (uint64_t *)v30;
        char v32 = *(void (**)(void))(v30 + 16);
        uint64_t v13 = (char *)(v30 + 16);
        uint64_t v15 = v32;
        v32((char *)&v156 - v31);
        uint64_t v33 = sub_25704AD40();
        char v34 = v33;
        uint64_t v161 = &v156;
        MEMORY[0x270FA5388](v33);
        ((void (*)(char *, char *, void))v32)((char *)&v156 - v31, (char *)&v156 - v31, MEMORY[0x263F8D6C8]);
        if ((v34 & 1) == 0)
        {
          uint64_t v10 = v163[1];
          uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v31, MEMORY[0x263F8D6C8]);
          goto LABEL_92;
        }
        uint64_t v35 = sub_25704AD30();
        uint64_t v19 = (uint64_t (*)(char *, uint64_t))(v163 + 1);
        uint64_t v10 = v163[1];
        uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v31, MEMORY[0x263F8D6C8]);
        if (v35 <= 8) {
          goto LABEL_92;
        }
        long long v160 = &v156;
        MEMORY[0x270FA5388](v36);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v31, MEMORY[0x263F8D6C8]);
        LOBYTE(v166[0]) = 0x80;
        if (sub_25704AD40())
        {
          uint64_t v37 = sub_25704AD30();
          if (v37 < 8)
          {
            while (1)
            {
              char v109 = sub_25704AD20();
              uint64_t v36 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8D6C8]);
              BOOL v104 = __OFSUB__(SLOBYTE(v166[0]), v109);
              BOOL v103 = SLOBYTE(v166[0]) - v109 < 0;
              if (SLOBYTE(v166[0]) <= v109) {
                goto LABEL_92;
              }
LABEL_73:
              __break(1u);
LABEL_74:
              if (v103 == v104) {
                goto LABEL_98;
              }
LABEL_76:
              int v110 = sub_25704AD20();
              uint64_t v96 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8D6C8]);
              if (SLODWORD(v166[0]) <= v110) {
                goto LABEL_99;
              }
LABEL_77:
              __break(1u);
LABEL_78:
              uint64_t v111 = *(void *)(*(void *)(v164 + 24) + 16);
              uint64_t v112 = swift_getAssociatedTypeWitness();
              int v157 = &v156;
              MEMORY[0x270FA5388](v112);
              char v114 = (char *)&v156 - v113;
              uint64_t v159 = v111;
              swift_getAssociatedConformanceWitness();
              uint64_t v158 = v114;
              uint64_t v115 = sub_25704B210();
              MEMORY[0x270FA5388](v115);
              sub_25704B1C0();
              LOBYTE(v111) = sub_25704A6D0();
              uint64_t v116 = v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
              MEMORY[0x270FA5388](v116);
              uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, void))(v10 + 32))(v117, v21, MEMORY[0x263F8D6C8]);
              if (v111) {
                break;
              }
              uint64_t v21 = *(void *)&v166[0];
              uint64_t v118 = sub_25704AD20();
              v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
              BOOL v101 = __OFSUB__(v118, v21);
              BOOL v100 = v118 - v21 < 0;
              if (v118 >= v21) {
                goto LABEL_87;
              }
LABEL_69:
              __break(1u);
LABEL_70:
              if (v100 == v101)
              {
                uint64_t v36 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8D6C8]);
                goto LABEL_92;
              }
            }
            v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            __break(1u);
LABEL_114:
            ((void (*)(char *, void))v10)(v117, MEMORY[0x263F8D6C8]);
            __break(1u);
LABEL_115:
            ((void (*)(char *, void))v10)(v117, MEMORY[0x263F8D6C8]);
            __break(1u);
            goto LABEL_116;
          }
        }
        else
        {
          char v99 = sub_25704AD40();
          uint64_t v37 = sub_25704AD30();
          BOOL v101 = __OFSUB__(v37, 8);
          BOOL v100 = v37 - 8 < 0;
          if ((v99 & 1) == 0) {
            goto LABEL_70;
          }
          if (v37 <= 8)
          {
            uint64_t v119 = *(void *)(*(void *)(v164 + 24) + 16);
            uint64_t v120 = swift_getAssociatedTypeWitness();
            int v157 = &v156;
            MEMORY[0x270FA5388](v120);
            unsigned int v122 = (char *)&v156 - v121;
            uint64_t v159 = v119;
            swift_getAssociatedConformanceWitness();
            uint64_t v158 = v122;
            uint64_t v123 = sub_25704B210();
            MEMORY[0x270FA5388](v123);
            sub_25704B1C0();
            LOBYTE(v119) = sub_25704A6D0();
            uint64_t v124 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            MEMORY[0x270FA5388](v124);
            uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, char *, void))v163[4])(v117, v117, MEMORY[0x263F8D6C8]);
            if (v119) {
              goto LABEL_114;
            }
            uint64_t v21 = SLOBYTE(v166[0]);
            char v125 = sub_25704AD20();
            uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            BOOL v104 = __OFSUB__(v21, v125);
            BOOL v103 = (int)v21 - v125 < 0;
            if ((int)v21 > v125) {
              goto LABEL_73;
            }
            goto LABEL_92;
          }
        }
        MEMORY[0x270FA5388](v37);
        sub_256FC9990();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v106 = MEMORY[0x263F8D6C8];
        ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
        uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v106);
        if (v159) {
          goto LABEL_73;
        }
LABEL_92:
        MEMORY[0x270FA5388](v36);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v140 = MEMORY[0x263F8D6C8];
        ((void (*)(uint64_t, char *, void))v15)(v21, v14, MEMORY[0x263F8D6C8]);
        LOBYTE(v166[0]) = 127;
        uint64_t v141 = sub_25704AD40();
        if (v141)
        {
          MEMORY[0x270FA5388](v141);
          uint64_t v11 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_256FC9990();
          sub_25704AD10();
          char v142 = sub_25704A6D0();
          unint64_t v143 = (unint64_t)(v163 + 1);
          uint64_t v144 = MEMORY[0x263F8D6C8];
          ((void (*)(char *, void))v10)(v11, MEMORY[0x263F8D6C8]);
          ((void (*)(uint64_t, uint64_t))v10)(v21, v144);
        }
        else
        {
          LOBYTE(v165) = 127;
          MEMORY[0x270FA5388](v141);
          uint64_t v145 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v146 = ((uint64_t (*)(char *, char *, uint64_t))v163[4])(v145, v145, v140);
          uint64_t v21 = (uint64_t)&v156;
          MEMORY[0x270FA5388](v146);
          uint64_t v11 = v145;
          sub_256FC9990();
          sub_25704AD10();
          char v142 = sub_25704A6D0();
          unint64_t v143 = (unint64_t)(v163 + 1);
          uint64_t v147 = MEMORY[0x263F8D6C8];
          ((void (*)(char *, void))v10)(v145, MEMORY[0x263F8D6C8]);
          ((void (*)(char *, uint64_t))v10)(v145, v147);
        }
        if ((v142 & 1) == 0)
        {
          uint64_t v15 = (void (*)(void))(v143 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          uint64_t v148 = *(void *)v14;
          ((void (*)(char *, void))v10)(v14, MEMORY[0x263F8D6C8]);
          LOBYTE(v166[0]) = v148;
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
LABEL_98:
          uint64_t v96 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8D6C8]);
          goto LABEL_99;
        }
        __break(1u);
        goto LABEL_107;
      case 4:
        uint64_t v89 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        uint64_t v162 = &v156;
        uint64_t v90 = *(v5 - 1);
        uint64_t v11 = *(char **)(v90 + 64);
        MEMORY[0x270FA5388](v89);
        unint64_t v91 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        char v14 = (char *)&v156 - v91;
        uint64_t v163 = (uint64_t *)v90;
        uint64_t v92 = *(void (**)(void))(v90 + 16);
        uint64_t v13 = (char *)(v90 + 16);
        uint64_t v15 = v92;
        v92((char *)&v156 - v91);
        uint64_t v93 = sub_25704AD40();
        char v94 = v93;
        uint64_t v161 = &v156;
        MEMORY[0x270FA5388](v93);
        ((void (*)(char *, char *, void))v92)((char *)&v156 - v91, (char *)&v156 - v91, MEMORY[0x263F8D6C8]);
        if ((v94 & 1) == 0)
        {
          uint64_t v10 = v163[1];
          uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v91, MEMORY[0x263F8D6C8]);
          goto LABEL_99;
        }
        uint64_t v95 = sub_25704AD30();
        uint64_t v19 = (uint64_t (*)(char *, uint64_t))(v163 + 1);
        uint64_t v10 = v163[1];
        uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v91, MEMORY[0x263F8D6C8]);
        if (v95 <= 32) {
          goto LABEL_99;
        }
        long long v160 = &v156;
        MEMORY[0x270FA5388](v96);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v91, MEMORY[0x263F8D6C8]);
        LODWORD(v166[0]) = 0x80000000;
        if (sub_25704AD40())
        {
          uint64_t v97 = sub_25704AD30();
          if (v97 < 32) {
            goto LABEL_76;
          }
        }
        else
        {
          char v102 = sub_25704AD40();
          uint64_t v97 = sub_25704AD30();
          BOOL v104 = __OFSUB__(v97, 32);
          BOOL v103 = v97 - 32 < 0;
          if ((v102 & 1) == 0) {
            goto LABEL_74;
          }
          if (v97 <= 32)
          {
            uint64_t v126 = *(void *)(*(void *)(v164 + 24) + 16);
            uint64_t v127 = swift_getAssociatedTypeWitness();
            int v157 = &v156;
            MEMORY[0x270FA5388](v127);
            uint64_t v129 = (char *)&v156 - v128;
            uint64_t v159 = v126;
            swift_getAssociatedConformanceWitness();
            uint64_t v158 = v129;
            uint64_t v130 = sub_25704B210();
            MEMORY[0x270FA5388](v130);
            sub_25704B1C0();
            LOBYTE(v126) = sub_25704A6D0();
            uint64_t v131 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            MEMORY[0x270FA5388](v131);
            uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, char *, void))v163[4])(v117, v117, MEMORY[0x263F8D6C8]);
            if (v126) {
              goto LABEL_115;
            }
            uint64_t v21 = LODWORD(v166[0]);
            int v132 = sub_25704AD20();
            uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            if ((int)v21 > v132) {
              goto LABEL_77;
            }
LABEL_99:
            MEMORY[0x270FA5388](v96);
            uint64_t v149 = MEMORY[0x263F8D6C8];
            ((void (*)(char *, char *, void))v15)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, MEMORY[0x263F8D6C8]);
            LODWORD(v166[0]) = 0x7FFFFFFF;
            uint64_t v150 = sub_25704AD40();
            if (v150)
            {
              MEMORY[0x270FA5388](v150);
              sub_256FAB5EC();
              sub_25704AD10();
              char v151 = sub_25704A6D0();
              uint64_t v152 = MEMORY[0x263F8D6C8];
              ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
              ((void (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v152);
            }
            else
            {
              LODWORD(v165) = 0x7FFFFFFF;
              MEMORY[0x270FA5388](v150);
              unint64_t v153 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v154 = ((uint64_t (*)(char *, char *, uint64_t))v163[4])(v153, v153, v149);
              MEMORY[0x270FA5388](v154);
              sub_256FAB5EC();
              sub_25704AD10();
              char v151 = sub_25704A6D0();
              uint64_t v155 = MEMORY[0x263F8D6C8];
              ((void (*)(char *, void))v10)(v153, MEMORY[0x263F8D6C8]);
              ((void (*)(char *, uint64_t))v10)(v153, v155);
            }
            if ((v151 & 1) == 0)
            {
              ((void (*)(char *, void))v10)(v14, MEMORY[0x263F8D6C8]);
              mlx_array_from_int();
            }
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
        }
        MEMORY[0x270FA5388](v97);
        sub_256FAB5EC();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v107 = MEMORY[0x263F8D6C8];
        ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
        uint64_t v96 = ((uint64_t (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v107);
        if (v159) {
          goto LABEL_77;
        }
        goto LABEL_99;
      case 5:
        goto LABEL_118;
      case 6:
        uint64_t v80 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        uint64_t v81 = *(v5 - 1);
        MEMORY[0x270FA5388](v80);
        unint64_t v83 = (char *)&v156 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v81 + 16))(v83);
        if (sub_25704AD40()) {
          sub_25704AD20();
        }
        (*(void (**)(char *, void))(v81 + 8))(v83, MEMORY[0x263F8D6C8]);
        mlx_array_from_float();
      default:
        uint64_t v9 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        uint64_t v163 = &v156;
        uint64_t v10 = *(v5 - 1);
        uint64_t v11 = *(char **)(v10 + 64);
        MEMORY[0x270FA5388](v9);
        unint64_t v12 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v13 = (char *)&v156 - v12;
        char v14 = (char *)(v10 + 16);
        uint64_t v15 = *(void (**)(void))(v10 + 16);
        v15((char *)&v156 - v12);
        uint64_t v16 = sub_25704AD40();
        char v17 = v16;
        uint64_t v162 = &v156;
        MEMORY[0x270FA5388](v16);
        ((void (*)(char *, char *, void))v15)((char *)&v156 - v12, (char *)&v156 - v12, MEMORY[0x263F8D6C8]);
        if ((v17 & 1) == 0)
        {
          uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
          v19((char *)&v156 - v12, MEMORY[0x263F8D6C8]);
          goto LABEL_87;
        }
        uint64_t v18 = sub_25704AD30();
        uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
        uint64_t v20 = v19((char *)&v156 - v12, MEMORY[0x263F8D6C8]);
        if (v18 <= 64) {
          goto LABEL_87;
        }
        long long v160 = &v156;
        uint64_t v161 = (uint64_t *)(v10 + 8);
        MEMORY[0x270FA5388](v20);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v12, MEMORY[0x263F8D6C8]);
        *(void *)&v166[0] = 0x8000000000000000;
        if (sub_25704AD40())
        {
          uint64_t v22 = sub_25704AD30();
          if (v22 < 64)
          {
LABEL_68:
            uint64_t v108 = sub_25704AD20();
            v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
            BOOL v101 = __OFSUB__(v108, *(void *)&v166[0]);
            BOOL v100 = v108 - *(void *)&v166[0] < 0;
            if (v108 < *(uint64_t *)&v166[0]) {
              goto LABEL_69;
            }
LABEL_87:
            uint64_t v133 = sub_25704AD40();
            if ((v133 & 1) == 0)
            {
              uint64_t v161 = &v156;
              MEMORY[0x270FA5388](v133);
              uint64_t v134 = MEMORY[0x263F8D6C8];
              ((void (*)(char *, char *, void))v15)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13, MEMORY[0x263F8D6C8]);
              uint64_t v135 = sub_25704AD40();
              if (v135)
              {
                sub_25704AD20();
                v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
              }
              else
              {
                *(void *)&v166[0] = 0x7FFFFFFFFFFFFFFFLL;
                MEMORY[0x270FA5388](v135);
                uint64_t v136 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
                uint64_t v137 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v136, v136, v134);
                MEMORY[0x270FA5388](v137);
                sub_25704AD10();
                char v138 = sub_25704A6D0();
                uint64_t v139 = MEMORY[0x263F8D6C8];
                v19(v136, MEMORY[0x263F8D6C8]);
                v19(v136, v139);
                if (v138) {
                  __break(1u);
                }
              }
            }
            v19(v13, MEMORY[0x263F8D6C8]);
            mlx_array_from_BOOL();
          }
        }
        else
        {
          char v98 = sub_25704AD40();
          uint64_t v22 = sub_25704AD30();
          if ((v98 & 1) == 0)
          {
            if (v22 >= 64)
            {
              v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
              goto LABEL_87;
            }
            goto LABEL_68;
          }
          if (v22 <= 64) {
            goto LABEL_78;
          }
        }
        MEMORY[0x270FA5388](v22);
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v105 = MEMORY[0x263F8D6C8];
        v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8D6C8]);
        v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v105);
        if (v159) {
          goto LABEL_69;
        }
        goto LABEL_87;
    }
  }
  v168[0] = a1;
  uint64_t v3 = mlx_array_from_data((uint64_t)v168, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
  if (v3)
  {
    type metadata accessor for MLXArray();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    return v4;
  }
LABEL_116:
  __break(1u);
LABEL_117:
  *(void *)&v166[0] = 0;
  *((void *)&v166[0] + 1) = 0xE000000000000000;
  sub_25704ADF0();
  sub_25704B340();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  sub_25704A850();
  sub_25704A850();
  unint64_t result = sub_25704AFD0();
LABEL_118:
  __break(1u);
  __break(1u);
  return result;
}

void sub_256FB99B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FB99C0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_256FB9A5C(char a1, char a2)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  if (!a2) {
LABEL_7:
  }
    mlx_array_from_BOOL();
  LOBYTE(v5) = a2;
  char v6 = a1 & 1;
  LOBYTE(v158) = a1 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v159, (uint64_t)v162);
    switch((char)v5)
    {
      case 2:
        uint64_t v41 = v163;
        uint64_t v42 = __swift_project_boxed_opaque_existential_1(v162, v163);
        uint64_t v43 = *(void *)(v41 - 8);
        MEMORY[0x270FA5388](v42);
        uint64_t v45 = (char *)&v149 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v43 + 16))(v45);
        sub_256FC9BDC();
        sub_25704AF70();
        if (BYTE4(v159)) {
          goto LABEL_168;
        }
        (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v41);
        uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        if (!v5)
        {
          __break(1u);
LABEL_27:
          uint64_t v46 = __swift_project_boxed_opaque_existential_1(v162, v163);
          MEMORY[0x270FA5388](v46);
          (*(void (**)(char *))(v48 + 16))((char *)&v149 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
          sub_256FC9A8C();
          sub_25704A580();
          mlx_array_from_float();
        }
        goto LABEL_155;
      case 3:
        goto LABEL_19;
      case 4:
        goto LABEL_22;
      case 5:
        uint64_t v26 = v163;
        uint64_t v27 = __swift_project_boxed_opaque_existential_1(v162, v163);
        uint64_t v28 = *(void *)(v26 - 8);
        MEMORY[0x270FA5388](v27);
        uint64_t v30 = (char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v28 + 16))(v30);
        sub_256FC9AE0();
        sub_25704AF70();
        if (BYTE8(v159)) {
          goto LABEL_168;
        }
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v26);
        uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        if (v5) {
          goto LABEL_155;
        }
        __break(1u);
LABEL_19:
        uint64_t v31 = v163;
        char v32 = __swift_project_boxed_opaque_existential_1(v162, v163);
        uint64_t v33 = *(void *)(v31 - 8);
        MEMORY[0x270FA5388](v32);
        uint64_t v35 = (char *)&v149 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v33 + 16))(v35);
        sub_256FC9B88();
        sub_25704AF70();
        if (BYTE1(v159)) {
          goto LABEL_168;
        }
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v31);
        uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (v5) {
          goto LABEL_155;
        }
        __break(1u);
LABEL_22:
        uint64_t v36 = v163;
        uint64_t v37 = __swift_project_boxed_opaque_existential_1(v162, v163);
        uint64_t v38 = *(void *)(v36 - 8);
        MEMORY[0x270FA5388](v37);
        uint64_t v40 = (char *)&v149 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v38 + 16))(v40);
        sub_256FC9B34();
        sub_25704AF70();
        if ((BYTE4(v159) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v36);
          mlx_array_from_int();
        }
LABEL_168:
        *(void *)&long long v159 = 0;
        *((void *)&v159 + 1) = 0xE000000000000000;
        sub_25704ADF0();
        sub_25704B340();
        sub_25704A850();
        swift_bridgeObjectRelease();
        sub_25704A850();
        sub_25704A850();
        sub_25704A850();
        uint64_t result = sub_25704AFD0();
        break;
      case 6:
        goto LABEL_27;
      default:
        uint64_t v7 = v163;
        int v8 = __swift_project_boxed_opaque_existential_1(v162, v163);
        uint64_t v9 = *(void *)(v7 - 8);
        MEMORY[0x270FA5388](v8);
        uint64_t v11 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v9 + 16))(v11);
        sub_256FC9C30();
        sub_25704AF70();
        if (BYTE1(v159)) {
          goto LABEL_168;
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
        uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        if (v5) {
          goto LABEL_155;
        }
        __break(1u);
        goto LABEL_7;
    }
    goto LABEL_169;
  }
  uint64_t v161 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  sub_256FB11E8((uint64_t)&v159, &qword_269FDC8E8);
  LOBYTE(v158) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_167;
  }
  sub_256FA81EC(&v159, (uint64_t)v162);
  switch((char)v5)
  {
    case 2:
      uint64_t v5 = v163;
      uint64_t v13 = v164;
      uint64_t v66 = __swift_project_boxed_opaque_existential_1(v162, v163);
      uint64_t v155 = (char *)&v149;
      uint64_t v67 = *(uint64_t **)(v5 - 8);
      uint64_t v16 = (char *)v67[8];
      MEMORY[0x270FA5388](v66);
      char v17 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v157 = v67;
      uint64_t v68 = (void (*)(void))v67[2];
      uint64_t v18 = v67 + 2;
      uint64_t v154 = v68;
      ((void (*)(char *))v68)(v17);
      if (sub_25704AD40())
      {
        uint64_t v2 = *(char **)(*(void *)(v13 + 24) + 16);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v156 = (char *)&v149;
        MEMORY[0x270FA5388](AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        uint64_t v70 = sub_25704B210();
        uint64_t v4 = &v149;
        MEMORY[0x270FA5388](v70);
        uint64_t v3 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_25704B1C0();
        char v71 = sub_25704A6E0();
        ((void (*)(uint64_t, uint64_t))v157[1])(v3, v5);
        if ((v71 & 1) == 0) {
          goto LABEL_58;
        }
      }
      uint64_t v72 = sub_25704AD30();
      if (v72 < 32) {
        goto LABEL_83;
      }
      unint64_t v153 = &v149;
      MEMORY[0x270FA5388](v72);
      uint64_t v156 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      v154();
      LODWORD(v159) = -1;
      char v73 = sub_25704AD40();
      uint64_t v74 = sub_25704AD30();
      if (v73)
      {
        if (v74 > 32)
        {
LABEL_60:
          uint64_t v2 = (char *)&v149;
          MEMORY[0x270FA5388](v74);
          uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_256FC98E8();
          sub_25704AD10();
          char v83 = sub_25704A6D0();
          uint64_t v3 = v157[1];
          ((void (*)(char *, uint64_t))v3)(v16, v5);
          if (v83) {
            goto LABEL_58;
          }
          goto LABEL_82;
        }
        uint64_t v90 = swift_getAssociatedTypeWitness();
        uint64_t v152 = &v149;
        MEMORY[0x270FA5388](v90);
        swift_getAssociatedConformanceWitness();
        uint64_t v91 = sub_25704B210();
        char v151 = &v149;
        MEMORY[0x270FA5388](v91);
        sub_25704B1C0();
        char v92 = sub_25704A6C0();
        uint64_t v2 = (char *)(v157 + 1);
        uint64_t v3 = v157[1];
        uint64_t v93 = ((uint64_t (*)(char *, uint64_t))v3)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
        uint64_t v4 = &v149;
        LODWORD(v152) = v159;
        MEMORY[0x270FA5388](v93);
        uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v154)(v16, v156, v5);
        if (v92)
        {
          unsigned int v94 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v3)(v16, v5);
          if (v152 < v94) {
            goto LABEL_58;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t))v3)(v16, v5);
        }
LABEL_82:
        ((void (*)(char *, uint64_t))v3)(v156, v5);
LABEL_83:
        int v96 = sub_25704AD20();
        ((void (*)(char *, uint64_t))v157[1])(v17, v5);
        LODWORD(v159) = v96;
        uint64_t v54 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        uint64_t v5 = v54;
        if (v54) {
          goto LABEL_155;
        }
        __break(1u);
        goto LABEL_85;
      }
      if (v74 > 32) {
        goto LABEL_60;
      }
      goto LABEL_81;
    case 3:
      uint64_t v5 = v163;
      uint64_t v13 = v164;
      uint64_t v55 = __swift_project_boxed_opaque_existential_1(v162, v163);
      int v157 = &v149;
      uint64_t v18 = *(void **)(v5 - 8);
      uint64_t v16 = (char *)v18[8];
      MEMORY[0x270FA5388](v55);
      uint64_t v2 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v3 = v18[2];
      ((void (*)(char *))v3)(v2);
      uint64_t v56 = sub_25704AD40();
      char v57 = v56;
      uint64_t v156 = (char *)&v149;
      MEMORY[0x270FA5388](v56);
      ((void (*)(char *, char *, uint64_t))v3)(v2, v2, v5);
      if ((v57 & 1) == 0)
      {
        uint64_t v4 = (uint64_t *)v18[1];
        ((void (*)(char *, uint64_t))v4)(v2, v5);
        goto LABEL_123;
      }
      uint64_t v52 = sub_25704AD30();
      uint64_t v4 = (uint64_t *)v18[1];
      uint64_t v154 = (void (*)(void))(v18 + 1);
      uint64_t v58 = ((uint64_t (*)(char *, uint64_t))v4)(v2, v5);
      if (v52 <= 8) {
        goto LABEL_123;
      }
      unint64_t v153 = &v149;
      MEMORY[0x270FA5388](v58);
      uint64_t v155 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v3)();
      LOBYTE(v159) = 0x80;
      if (sub_25704AD40())
      {
        uint64_t v59 = sub_25704AD30();
        if (v59 < 8)
        {
LABEL_96:
          char v102 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)(v155, v5);
          int v103 = (char)v159;
LABEL_122:
          if (v103 > v102)
          {
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
LABEL_123:
          uint64_t v125 = sub_25704AD30();
          uint64_t v155 = (char *)&v149;
          MEMORY[0x270FA5388](v125);
          ((void (*)(char *, char *, uint64_t))v3)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
          if (v125 < 9)
          {
            uint64_t v130 = sub_25704AD30();
            ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
            if (v130 != 8) {
              goto LABEL_136;
            }
            uint64_t v126 = sub_25704AD40();
            if (v126) {
              goto LABEL_136;
            }
          }
          else
          {
            uint64_t v126 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          }
          uint64_t v154 = (void (*)(void))&v149;
          MEMORY[0x270FA5388](v126);
          uint64_t v127 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, uint64_t))v3)(v127, v2, v5);
          LOBYTE(v159) = 127;
          uint64_t v3 = sub_25704AD40();
          uint64_t v128 = sub_25704AD30();
          if (v3)
          {
            if (v128 > 8)
            {
              MEMORY[0x270FA5388](v128);
              uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
              sub_256FC9990();
              sub_25704AD10();
              char v129 = sub_25704A6D0();
              uint64_t v3 = (uint64_t)(v18 + 1);
              ((void (*)(char *, uint64_t))v4)(v16, v5);
              ((void (*)(char *, uint64_t))v4)(v127, v5);
              if (v129) {
                goto LABEL_159;
              }
LABEL_136:
              char v133 = sub_25704AD20();
              ((void (*)(char *, uint64_t))v4)(v2, v5);
              LOBYTE(v159) = v133;
              uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
              if (!v5)
              {
                __break(1u);
                goto LABEL_138;
              }
LABEL_155:
              type metadata accessor for MLXArray();
              uint64_t v148 = swift_allocObject();
              *(void *)(v148 + 16) = v5;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v162);
              return v148;
            }
          }
          else if (v128 >= 8)
          {
            unint64_t v153 = &v149;
            LOBYTE(v158) = 127;
            MEMORY[0x270FA5388](v128);
            uint64_t v3 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v131 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18[4])(v3, v3, v5);
            MEMORY[0x270FA5388](v131);
            uint64_t v16 = (char *)v3;
            sub_256FC9990();
            sub_25704AD10();
            char v132 = sub_25704A6D0();
            ((void (*)(uint64_t, uint64_t))v4)(v3, v5);
            ((void (*)(uint64_t, uint64_t))v4)(v3, v5);
            if (v132) {
              goto LABEL_159;
            }
            goto LABEL_136;
          }
          sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v52 = sub_25704AD40();
        uint64_t v59 = sub_25704AD30();
        if ((v52 & 1) == 0)
        {
          if (v59 >= 8)
          {
            ((void (*)(char *, uint64_t))v4)(v155, v5);
            goto LABEL_123;
          }
          goto LABEL_96;
        }
        if (v59 <= 8)
        {
LABEL_120:
          uint64_t v152 = *(uint64_t **)(*(void *)(v13 + 24) + 16);
          uint64_t v120 = swift_getAssociatedTypeWitness();
          uint64_t v150 = &v149;
          MEMORY[0x270FA5388](v120);
          unsigned int v122 = (char *)&v149 - v121;
          swift_getAssociatedConformanceWitness();
          char v151 = (uint64_t *)v122;
          uint64_t v123 = sub_25704B210();
          uint64_t v149 = (uint64_t)&v149;
          MEMORY[0x270FA5388](v123);
          sub_25704B1C0();
          LOBYTE(v122) = sub_25704A6D0();
          uint64_t v124 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          uint64_t v152 = &v149;
          MEMORY[0x270FA5388](v124);
          uint64_t v52 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(uint64_t, char *, uint64_t))v18[4])(v52, v155, v5);
          if (v122)
          {
LABEL_163:
            ((void (*)(uint64_t, uint64_t))v4)(v52, v5);
            goto LABEL_164;
          }
          LODWORD(v155) = (char)v159;
          char v102 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          int v103 = (int)v155;
          goto LABEL_122;
        }
      }
      uint64_t v152 = &v149;
      MEMORY[0x270FA5388](v59);
      sub_256FC9990();
      sub_25704AD10();
      char v98 = sub_25704A6D0();
      uint64_t v52 = (uint64_t)v154;
      ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      ((void (*)(char *, uint64_t))v4)(v155, v5);
      if (v98) {
        goto LABEL_164;
      }
      goto LABEL_123;
    case 4:
      uint64_t v5 = v163;
      uint64_t v13 = v164;
      uint64_t v60 = __swift_project_boxed_opaque_existential_1(v162, v163);
      int v157 = &v149;
      uint64_t v18 = *(void **)(v5 - 8);
      uint64_t v16 = (char *)v18[8];
      MEMORY[0x270FA5388](v60);
      uint64_t v2 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v3 = v18[2];
      ((void (*)(char *))v3)(v2);
      uint64_t v61 = sub_25704AD40();
      char v62 = v61;
      uint64_t v156 = (char *)&v149;
      MEMORY[0x270FA5388](v61);
      ((void (*)(char *, char *, uint64_t))v3)(v2, v2, v5);
      if ((v62 & 1) == 0)
      {
        uint64_t v4 = (uint64_t *)v18[1];
        ((void (*)(char *, uint64_t))v4)(v2, v5);
        goto LABEL_141;
      }
      uint64_t v63 = sub_25704AD30();
      uint64_t v4 = (uint64_t *)v18[1];
      uint64_t v154 = (void (*)(void))(v18 + 1);
      uint64_t v64 = ((uint64_t (*)(char *, uint64_t))v4)(v2, v5);
      if (v63 <= 32) {
        goto LABEL_141;
      }
      unint64_t v153 = &v149;
      MEMORY[0x270FA5388](v64);
      uint64_t v155 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v3)();
      LODWORD(v159) = 0x80000000;
      if (sub_25704AD40())
      {
        uint64_t v65 = sub_25704AD30();
        if (v65 < 32)
        {
LABEL_99:
          int v104 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)(v155, v5);
          int v105 = v159;
LABEL_140:
          if (v105 > v104)
          {
LABEL_166:
            __break(1u);
            __break(1u);
LABEL_167:
            uint64_t v161 = 0;
            long long v159 = 0u;
            long long v160 = 0u;
            sub_256FB11E8((uint64_t)&v159, &qword_269FDC948);
            v162[0] = 0;
            v162[1] = 0xE000000000000000;
            sub_25704ADF0();
            sub_25704A850();
            LOBYTE(v159) = 0;
            sub_25704AF60();
            sub_25704A850();
            LOBYTE(v159) = v5;
            sub_25704AF60();
            uint64_t result = sub_25704AFD0();
            goto LABEL_169;
          }
LABEL_141:
          uint64_t v139 = sub_25704AD30();
          uint64_t v155 = (char *)&v149;
          MEMORY[0x270FA5388](v139);
          ((void (*)(char *, char *, uint64_t))v3)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
          if (v139 < 33)
          {
            uint64_t v144 = sub_25704AD30();
            ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
            if (v144 != 32) {
              goto LABEL_154;
            }
            uint64_t v140 = sub_25704AD40();
            if (v140) {
              goto LABEL_154;
            }
          }
          else
          {
            uint64_t v140 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          }
          uint64_t v154 = (void (*)(void))&v149;
          MEMORY[0x270FA5388](v140);
          ((void (*)(char *, char *, uint64_t))v3)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
          LODWORD(v159) = 0x7FFFFFFF;
          char v141 = sub_25704AD40();
          uint64_t v142 = sub_25704AD30();
          if (v141)
          {
            if (v142 > 32)
            {
              MEMORY[0x270FA5388](v142);
              sub_256FAB5EC();
              sub_25704AD10();
              char v143 = sub_25704A6D0();
              ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
              ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
              if (v143) {
                goto LABEL_160;
              }
              goto LABEL_154;
            }
          }
          else if (v142 >= 32)
          {
            unint64_t v153 = &v149;
            LODWORD(v158) = 0x7FFFFFFF;
            MEMORY[0x270FA5388](v142);
            uint64_t v145 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v146 = ((uint64_t (*)(char *, char *, uint64_t))v18[4])(v145, v145, v5);
            MEMORY[0x270FA5388](v146);
            sub_256FAB5EC();
            sub_25704AD10();
            char v147 = sub_25704A6D0();
            ((void (*)(char *, uint64_t))v4)(v145, v5);
            ((void (*)(char *, uint64_t))v4)(v145, v5);
            if (v147) {
LABEL_160:
            }
              __break(1u);
LABEL_154:
            sub_25704AD20();
            ((void (*)(char *, uint64_t))v4)(v2, v5);
            mlx_array_from_int();
          }
          sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          goto LABEL_154;
        }
      }
      else
      {
        char v84 = sub_25704AD40();
        uint64_t v65 = sub_25704AD30();
        if ((v84 & 1) == 0)
        {
          if (v65 >= 32)
          {
            ((void (*)(char *, uint64_t))v4)(v155, v5);
            goto LABEL_141;
          }
          goto LABEL_99;
        }
        if (v65 <= 32)
        {
LABEL_138:
          uint64_t v152 = *(uint64_t **)(*(void *)(v13 + 24) + 16);
          uint64_t v134 = swift_getAssociatedTypeWitness();
          uint64_t v150 = &v149;
          MEMORY[0x270FA5388](v134);
          uint64_t v136 = (char *)&v149 - v135;
          swift_getAssociatedConformanceWitness();
          char v151 = (uint64_t *)v136;
          uint64_t v137 = sub_25704B210();
          uint64_t v149 = (uint64_t)&v149;
          MEMORY[0x270FA5388](v137);
          sub_25704B1C0();
          LOBYTE(v136) = sub_25704A6D0();
          uint64_t v138 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          uint64_t v152 = &v149;
          MEMORY[0x270FA5388](v138);
          uint64_t v52 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(uint64_t, char *, uint64_t))v18[4])(v52, v155, v5);
          if (v136)
          {
LABEL_165:
            ((void (*)(uint64_t, uint64_t))v4)(v52, v5);
            goto LABEL_166;
          }
          LODWORD(v155) = v159;
          int v104 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          int v105 = (int)v155;
          goto LABEL_140;
        }
      }
      uint64_t v152 = &v149;
      MEMORY[0x270FA5388](v65);
      sub_256FAB5EC();
      sub_25704AD10();
      char v99 = sub_25704A6D0();
      ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      ((void (*)(char *, uint64_t))v4)(v155, v5);
      if (v99) {
        goto LABEL_166;
      }
      goto LABEL_141;
    case 5:
      uint64_t v5 = v163;
      uint64_t v13 = v164;
      uint64_t v49 = __swift_project_boxed_opaque_existential_1(v162, v163);
      int v157 = &v149;
      uint64_t v18 = *(void **)(v5 - 8);
      uint64_t v16 = (char *)v18[8];
      MEMORY[0x270FA5388](v49);
      uint64_t v2 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v3 = v18[2];
      ((void (*)(char *))v3)(v2);
      uint64_t v50 = sub_25704AD40();
      char v51 = v50;
      uint64_t v156 = (char *)&v149;
      MEMORY[0x270FA5388](v50);
      ((void (*)(char *, char *, uint64_t))v3)(v2, v2, v5);
      if ((v51 & 1) == 0)
      {
        uint64_t v4 = (uint64_t *)v18[1];
        ((void (*)(char *, uint64_t))v4)(v2, v5);
        goto LABEL_105;
      }
      uint64_t v52 = sub_25704AD30();
      uint64_t v4 = (uint64_t *)v18[1];
      uint64_t v154 = (void (*)(void))(v18 + 1);
      uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v4)(v2, v5);
      if (v52 <= 64) {
        goto LABEL_105;
      }
      unint64_t v153 = &v149;
      MEMORY[0x270FA5388](v53);
      uint64_t v155 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v3)();
      *(void *)&long long v159 = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v54 = sub_25704AD30();
        if (v54 < 64)
        {
LABEL_93:
          uint64_t v100 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)(v155, v5);
          BOOL v101 = (char *)v159;
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v52 = sub_25704AD40();
        uint64_t v54 = sub_25704AD30();
        if ((v52 & 1) == 0)
        {
          if (v54 >= 64)
          {
            ((void (*)(char *, uint64_t))v4)(v155, v5);
            goto LABEL_105;
          }
          goto LABEL_93;
        }
        if (v54 <= 64)
        {
          uint64_t v152 = *(uint64_t **)(*(void *)(v13 + 24) + 16);
          uint64_t v106 = swift_getAssociatedTypeWitness();
          uint64_t v150 = &v149;
          MEMORY[0x270FA5388](v106);
          uint64_t v108 = (char *)&v149 - v107;
          swift_getAssociatedConformanceWitness();
          char v151 = (uint64_t *)v108;
          uint64_t v109 = sub_25704B210();
          uint64_t v149 = (uint64_t)&v149;
          MEMORY[0x270FA5388](v109);
          sub_25704B1C0();
          LOBYTE(v108) = sub_25704A6D0();
          uint64_t v110 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          uint64_t v152 = &v149;
          MEMORY[0x270FA5388](v110);
          uint64_t v52 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(uint64_t, char *, uint64_t))v18[4])(v52, v155, v5);
          if (v108)
          {
            ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
            goto LABEL_162;
          }
          uint64_t v155 = (char *)v159;
          uint64_t v100 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
          BOOL v101 = v155;
LABEL_104:
          if (v100 >= (uint64_t)v101) {
            goto LABEL_105;
          }
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
      }
LABEL_85:
      uint64_t v152 = &v149;
      MEMORY[0x270FA5388](v54);
      sub_256FC993C();
      sub_25704AD10();
      char v97 = sub_25704A6D0();
      uint64_t v52 = (uint64_t)v154;
      ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      ((void (*)(char *, uint64_t))v4)(v155, v5);
      if (v97) {
        goto LABEL_162;
      }
LABEL_105:
      uint64_t v111 = sub_25704AD30();
      uint64_t v155 = (char *)&v149;
      MEMORY[0x270FA5388](v111);
      ((void (*)(char *, char *, uint64_t))v3)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
      if (v111 < 65)
      {
        uint64_t v116 = sub_25704AD30();
        ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
        if (v116 != 64) {
          goto LABEL_118;
        }
        uint64_t v112 = sub_25704AD40();
        if (v112) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v112 = ((uint64_t (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      }
      uint64_t v154 = (void (*)(void))&v149;
      MEMORY[0x270FA5388](v112);
      uint64_t v113 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, uint64_t))v3)(v113, v2, v5);
      *(void *)&long long v159 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v3 = sub_25704AD40();
      uint64_t v114 = sub_25704AD30();
      if (v3)
      {
        if (v114 > 64)
        {
          MEMORY[0x270FA5388](v114);
          uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_256FC993C();
          sub_25704AD10();
          char v115 = sub_25704A6D0();
          uint64_t v3 = (uint64_t)(v18 + 1);
          ((void (*)(char *, uint64_t))v4)(v16, v5);
          ((void (*)(char *, uint64_t))v4)(v113, v5);
          if (v115)
          {
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
            goto LABEL_160;
          }
          goto LABEL_118;
        }
      }
      else if (v114 >= 64)
      {
        unint64_t v153 = &v149;
        uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
        MEMORY[0x270FA5388](v114);
        uint64_t v3 = (uint64_t)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18[4])(v3, v3, v5);
        MEMORY[0x270FA5388](v117);
        uint64_t v16 = (char *)v3;
        sub_256FC993C();
        sub_25704AD10();
        char v118 = sub_25704A6D0();
        ((void (*)(uint64_t, uint64_t))v4)(v3, v5);
        ((void (*)(uint64_t, uint64_t))v4)(v3, v5);
        if (v118) {
          goto LABEL_158;
        }
        goto LABEL_118;
      }
      sub_25704AD20();
      ((void (*)(char *, uint64_t))v4)((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
LABEL_118:
      uint64_t v119 = sub_25704AD20();
      ((void (*)(char *, uint64_t))v4)(v2, v5);
      *(void *)&long long v159 = v119;
      uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
      if (v5) {
        goto LABEL_155;
      }
      __break(1u);
      goto LABEL_120;
    case 6:
      uint64_t v75 = v163;
      uint64_t v76 = __swift_project_boxed_opaque_existential_1(v162, v163);
      uint64_t v77 = *(void *)(v75 - 8);
      MEMORY[0x270FA5388](v76);
      uint64_t v79 = (char *)&v149 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v77 + 16))(v79);
      if (sub_25704AD30() <= 64)
      {
        sub_25704AD40();
        sub_25704AD20();
      }
      else
      {
        sub_256FC9A8C();
        sub_256FC9BDC();
        sub_25704A590();
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v75);
      mlx_array_from_float();
    default:
      uint64_t v12 = v163;
      uint64_t v13 = v164;
      char v14 = __swift_project_boxed_opaque_existential_1(v162, v163);
      uint64_t v155 = (char *)&v149;
      uint64_t v15 = *(uint64_t **)(v12 - 8);
      uint64_t v16 = (char *)v15[8];
      MEMORY[0x270FA5388](v14);
      char v17 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v157 = v15;
      uint64_t v19 = (void (*)(void))v15[2];
      uint64_t v18 = v15 + 2;
      uint64_t v154 = v19;
      ((void (*)(char *))v19)(v17);
      if (sub_25704AD40())
      {
        uint64_t v2 = *(char **)(*(void *)(v13 + 24) + 16);
        uint64_t v20 = swift_getAssociatedTypeWitness();
        uint64_t v156 = (char *)&v149;
        MEMORY[0x270FA5388](v20);
        swift_getAssociatedConformanceWitness();
        uint64_t v21 = sub_25704B210();
        uint64_t v4 = &v149;
        MEMORY[0x270FA5388](v21);
        sub_25704B1C0();
        char v22 = sub_25704A6E0();
        ((void (*)(char *, uint64_t))v157[1])((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
        if ((v22 & 1) == 0) {
          goto LABEL_58;
        }
      }
      uint64_t v23 = sub_25704AD30();
      if (v23 < 8) {
        goto LABEL_79;
      }
      unint64_t v153 = &v149;
      MEMORY[0x270FA5388](v23);
      uint64_t v156 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      v154();
      LOBYTE(v159) = -1;
      char v24 = sub_25704AD40();
      uint64_t v25 = sub_25704AD30();
      if (v24)
      {
        if (v25 <= 8)
        {
          uint64_t v85 = swift_getAssociatedTypeWitness();
          uint64_t v152 = &v149;
          MEMORY[0x270FA5388](v85);
          swift_getAssociatedConformanceWitness();
          uint64_t v86 = sub_25704B210();
          char v151 = &v149;
          MEMORY[0x270FA5388](v86);
          sub_25704B1C0();
          char v87 = sub_25704A6C0();
          uint64_t v2 = (char *)(v157 + 1);
          uint64_t v81 = (uint64_t (*)(char *, uint64_t))v157[1];
          uint64_t v88 = v81((char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
          uint64_t v4 = &v149;
          LODWORD(v152) = v159;
          MEMORY[0x270FA5388](v88);
          uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, uint64_t))v154)(v16, v156, v12);
          if (v87)
          {
            unsigned __int8 v89 = sub_25704AD20();
            v81(v16, v12);
            if (v152 < v89) {
              goto LABEL_58;
            }
          }
          else
          {
            v81(v16, v12);
          }
          goto LABEL_78;
        }
      }
      else if (v25 <= 8)
      {
        sub_25704AD20();
        uint64_t v81 = (uint64_t (*)(char *, uint64_t))v157[1];
LABEL_78:
        v81(v156, v12);
LABEL_79:
        char v95 = sub_25704AD20();
        ((void (*)(char *, uint64_t))v157[1])(v17, v12);
        LOBYTE(v159) = v95;
        uint64_t v5 = mlx_array_from_data((uint64_t)&v159, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        if (v5) {
          goto LABEL_155;
        }
        __break(1u);
LABEL_81:
        sub_25704AD20();
        uint64_t v3 = v157[1];
        goto LABEL_82;
      }
      uint64_t v2 = (char *)&v149;
      MEMORY[0x270FA5388](v25);
      uint64_t v16 = (char *)&v149 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_256FC99E4();
      sub_25704AD10();
      char v80 = sub_25704A6D0();
      uint64_t v81 = (uint64_t (*)(char *, uint64_t))v157[1];
      v81(v16, v12);
      if ((v80 & 1) == 0) {
        goto LABEL_78;
      }
LABEL_58:
      uint64_t result = sub_25704AFC0();
LABEL_169:
      __break(1u);
      __break(1u);
      return result;
  }
}